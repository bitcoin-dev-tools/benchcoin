<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1526" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1509.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1509.00"> </text><svg id="frames" x="10" width="1180" total_samples="69274"><g><title>AddCoins (8 samples, 0.01%)</title><rect x="0.0115%" y="1445" width="0.0115%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="8"/><text x="0.2615%" y="1455.50"></text></g><g><title>Span&lt;std::byte const&gt;::Span&lt;std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="0.9022%" y="1429" width="0.0130%" height="15" fill="rgb(217,0,24)" fg:x="625" fg:w="9"/><text x="1.1522%" y="1439.50"></text></g><g><title>std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt;::data (9 samples, 0.01%)</title><rect x="0.9022%" y="1413" width="0.0130%" height="15" fill="rgb(221,193,54)" fg:x="625" fg:w="9"/><text x="1.1522%" y="1423.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.01%)</title><rect x="0.9152%" y="1429" width="0.0115%" height="15" fill="rgb(248,212,6)" fg:x="634" fg:w="8"/><text x="1.1652%" y="1439.50"></text></g><g><title>_IO_fwrite (18 samples, 0.03%)</title><rect x="0.9268%" y="1429" width="0.0260%" height="15" fill="rgb(208,68,35)" fg:x="642" fg:w="18"/><text x="1.1768%" y="1439.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (268 samples, 0.39%)</title><rect x="0.9527%" y="1429" width="0.3869%" height="15" fill="rgb(232,128,0)" fg:x="660" fg:w="268"/><text x="1.2027%" y="1439.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (268 samples, 0.39%)</title><rect x="0.9527%" y="1413" width="0.3869%" height="15" fill="rgb(207,160,47)" fg:x="660" fg:w="268"/><text x="1.2027%" y="1423.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (268 samples, 0.39%)</title><rect x="0.9527%" y="1397" width="0.3869%" height="15" fill="rgb(228,23,34)" fg:x="660" fg:w="268"/><text x="1.2027%" y="1407.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (268 samples, 0.39%)</title><rect x="0.9527%" y="1381" width="0.3869%" height="15" fill="rgb(218,30,26)" fg:x="660" fg:w="268"/><text x="1.2027%" y="1391.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (268 samples, 0.39%)</title><rect x="0.9527%" y="1365" width="0.3869%" height="15" fill="rgb(220,122,19)" fg:x="660" fg:w="268"/><text x="1.2027%" y="1375.50"></text></g><g><title>void std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;std::byte, std::byte const&gt; (73 samples, 0.11%)</title><rect x="1.2342%" y="1349" width="0.1054%" height="15" fill="rgb(250,228,42)" fg:x="855" fg:w="73"/><text x="1.4842%" y="1359.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (17 samples, 0.02%)</title><rect x="1.3396%" y="1429" width="0.0245%" height="15" fill="rgb(240,193,28)" fg:x="928" fg:w="17"/><text x="1.5896%" y="1439.50"></text></g><g><title>AutoFile::write (2,383 samples, 3.44%)</title><rect x="0.0231%" y="1445" width="3.4400%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="2383"/><text x="0.2731%" y="1455.50">Aut..</text></g><g><title>util::Xor (1,454 samples, 2.10%)</title><rect x="1.3641%" y="1429" width="2.0989%" height="15" fill="rgb(206,188,39)" fg:x="945" fg:w="1454"/><text x="1.6141%" y="1439.50">u..</text></g><g><title>std::operator^= (495 samples, 0.71%)</title><rect x="2.7485%" y="1413" width="0.7146%" height="15" fill="rgb(217,207,13)" fg:x="1904" fg:w="495"/><text x="2.9985%" y="1423.50"></text></g><g><title>std::operator^ (495 samples, 0.71%)</title><rect x="2.7485%" y="1397" width="0.7146%" height="15" fill="rgb(231,73,38)" fg:x="1904" fg:w="495"/><text x="2.9985%" y="1407.50"></text></g><g><title>CCoinsViewCache::AddCoin (10 samples, 0.01%)</title><rect x="3.4732%" y="1445" width="0.0144%" height="15" fill="rgb(225,20,46)" fg:x="2406" fg:w="10"/><text x="3.7232%" y="1455.50"></text></g><g><title>CCoinsViewCache::FetchCoin (12 samples, 0.02%)</title><rect x="3.4963%" y="1445" width="0.0173%" height="15" fill="rgb(210,31,41)" fg:x="2422" fg:w="12"/><text x="3.7463%" y="1455.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (8 samples, 0.01%)</title><rect x="3.5136%" y="1269" width="0.0115%" height="15" fill="rgb(221,200,47)" fg:x="2434" fg:w="8"/><text x="3.7636%" y="1279.50"></text></g><g><title>CCoinsViewCache::GetCoin (22 samples, 0.03%)</title><rect x="3.5136%" y="1445" width="0.0318%" height="15" fill="rgb(226,26,5)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1455.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (22 samples, 0.03%)</title><rect x="3.5136%" y="1429" width="0.0318%" height="15" fill="rgb(249,33,26)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1439.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (22 samples, 0.03%)</title><rect x="3.5136%" y="1413" width="0.0318%" height="15" fill="rgb(235,183,28)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1423.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (22 samples, 0.03%)</title><rect x="3.5136%" y="1397" width="0.0318%" height="15" fill="rgb(221,5,38)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1407.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (22 samples, 0.03%)</title><rect x="3.5136%" y="1381" width="0.0318%" height="15" fill="rgb(247,18,42)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1391.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (22 samples, 0.03%)</title><rect x="3.5136%" y="1365" width="0.0318%" height="15" fill="rgb(241,131,45)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1375.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (22 samples, 0.03%)</title><rect x="3.5136%" y="1349" width="0.0318%" height="15" fill="rgb(249,31,29)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1359.50"></text></g><g><title>Coin::Coin (22 samples, 0.03%)</title><rect x="3.5136%" y="1333" width="0.0318%" height="15" fill="rgb(225,111,53)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1343.50"></text></g><g><title>CTxOut::CTxOut (22 samples, 0.03%)</title><rect x="3.5136%" y="1317" width="0.0318%" height="15" fill="rgb(238,160,17)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1327.50"></text></g><g><title>CScript::CScript (22 samples, 0.03%)</title><rect x="3.5136%" y="1301" width="0.0318%" height="15" fill="rgb(214,148,48)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1311.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (22 samples, 0.03%)</title><rect x="3.5136%" y="1285" width="0.0318%" height="15" fill="rgb(232,36,49)" fg:x="2434" fg:w="22"/><text x="3.7636%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (14 samples, 0.02%)</title><rect x="3.5251%" y="1269" width="0.0202%" height="15" fill="rgb(209,103,24)" fg:x="2442" fg:w="14"/><text x="3.7751%" y="1279.50"></text></g><g><title>CCoinsViewCache::SpendCoin (7 samples, 0.01%)</title><rect x="3.5482%" y="1445" width="0.0101%" height="15" fill="rgb(229,88,8)" fg:x="2458" fg:w="7"/><text x="3.7982%" y="1455.50"></text></g><g><title>CCoinsViewDB::GetCoin (9 samples, 0.01%)</title><rect x="3.5583%" y="1445" width="0.0130%" height="15" fill="rgb(213,181,19)" fg:x="2465" fg:w="9"/><text x="3.8083%" y="1455.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (9 samples, 0.01%)</title><rect x="3.5583%" y="1429" width="0.0130%" height="15" fill="rgb(254,191,54)" fg:x="2465" fg:w="9"/><text x="3.8083%" y="1439.50"></text></g><g><title>CSHA256::Write (17 samples, 0.02%)</title><rect x="3.5915%" y="1413" width="0.0245%" height="15" fill="rgb(241,83,37)" fg:x="2488" fg:w="17"/><text x="3.8415%" y="1423.50"></text></g><g><title>CSHA256::Write (18 samples, 0.03%)</title><rect x="3.5915%" y="1429" width="0.0260%" height="15" fill="rgb(233,36,39)" fg:x="2488" fg:w="18"/><text x="3.8415%" y="1439.50"></text></g><g><title>CSHA256::Write (22 samples, 0.03%)</title><rect x="3.5886%" y="1445" width="0.0318%" height="15" fill="rgb(226,3,54)" fg:x="2486" fg:w="22"/><text x="3.8386%" y="1455.50"></text></g><g><title>CScript::GetSigOpCount (8 samples, 0.01%)</title><rect x="3.6204%" y="1445" width="0.0115%" height="15" fill="rgb(245,192,40)" fg:x="2508" fg:w="8"/><text x="3.8704%" y="1455.50"></text></g><g><title>CScript::IsWitnessProgram (33 samples, 0.05%)</title><rect x="3.6406%" y="1445" width="0.0476%" height="15" fill="rgb(238,167,29)" fg:x="2522" fg:w="33"/><text x="3.8906%" y="1455.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (23 samples, 0.03%)</title><rect x="3.6551%" y="1429" width="0.0332%" height="15" fill="rgb(232,182,51)" fg:x="2532" fg:w="23"/><text x="3.9051%" y="1439.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (23 samples, 0.03%)</title><rect x="3.6551%" y="1413" width="0.0332%" height="15" fill="rgb(231,60,39)" fg:x="2532" fg:w="23"/><text x="3.9051%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (19 samples, 0.03%)</title><rect x="3.6608%" y="1397" width="0.0274%" height="15" fill="rgb(208,69,12)" fg:x="2536" fg:w="19"/><text x="3.9108%" y="1407.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (19 samples, 0.03%)</title><rect x="3.6608%" y="1381" width="0.0274%" height="15" fill="rgb(235,93,37)" fg:x="2536" fg:w="19"/><text x="3.9108%" y="1391.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (19 samples, 0.03%)</title><rect x="3.6608%" y="1365" width="0.0274%" height="15" fill="rgb(213,116,39)" fg:x="2536" fg:w="19"/><text x="3.9108%" y="1375.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (19 samples, 0.03%)</title><rect x="3.6608%" y="1349" width="0.0274%" height="15" fill="rgb(222,207,29)" fg:x="2536" fg:w="19"/><text x="3.9108%" y="1359.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (19 samples, 0.03%)</title><rect x="3.6608%" y="1333" width="0.0274%" height="15" fill="rgb(206,96,30)" fg:x="2536" fg:w="19"/><text x="3.9108%" y="1343.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (19 samples, 0.03%)</title><rect x="3.6608%" y="1317" width="0.0274%" height="15" fill="rgb(218,138,4)" fg:x="2536" fg:w="19"/><text x="3.9108%" y="1327.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (19 samples, 0.03%)</title><rect x="3.6608%" y="1301" width="0.0274%" height="15" fill="rgb(250,191,14)" fg:x="2536" fg:w="19"/><text x="3.9108%" y="1311.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (19 samples, 0.03%)</title><rect x="3.6608%" y="1285" width="0.0274%" height="15" fill="rgb(239,60,40)" fg:x="2536" fg:w="19"/><text x="3.9108%" y="1295.50"></text></g><g><title>CBlockUndo::~CBlockUndo (12 samples, 0.02%)</title><rect x="3.7027%" y="1429" width="0.0173%" height="15" fill="rgb(206,27,48)" fg:x="2565" fg:w="12"/><text x="3.9527%" y="1439.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (12 samples, 0.02%)</title><rect x="3.7027%" y="1413" width="0.0173%" height="15" fill="rgb(225,35,8)" fg:x="2565" fg:w="12"/><text x="3.9527%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (12 samples, 0.02%)</title><rect x="3.7027%" y="1397" width="0.0173%" height="15" fill="rgb(250,213,24)" fg:x="2565" fg:w="12"/><text x="3.9527%" y="1407.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (12 samples, 0.02%)</title><rect x="3.7027%" y="1381" width="0.0173%" height="15" fill="rgb(247,123,22)" fg:x="2565" fg:w="12"/><text x="3.9527%" y="1391.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (12 samples, 0.02%)</title><rect x="3.7027%" y="1365" width="0.0173%" height="15" fill="rgb(231,138,38)" fg:x="2565" fg:w="12"/><text x="3.9527%" y="1375.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (12 samples, 0.02%)</title><rect x="3.7027%" y="1349" width="0.0173%" height="15" fill="rgb(231,145,46)" fg:x="2565" fg:w="12"/><text x="3.9527%" y="1359.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (12 samples, 0.02%)</title><rect x="3.7027%" y="1333" width="0.0173%" height="15" fill="rgb(251,118,11)" fg:x="2565" fg:w="12"/><text x="3.9527%" y="1343.50"></text></g><g><title>CTxUndo::~CTxUndo (12 samples, 0.02%)</title><rect x="3.7027%" y="1317" width="0.0173%" height="15" fill="rgb(217,147,25)" fg:x="2565" fg:w="12"/><text x="3.9527%" y="1327.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (12 samples, 0.02%)</title><rect x="3.7027%" y="1301" width="0.0173%" height="15" fill="rgb(247,81,37)" fg:x="2565" fg:w="12"/><text x="3.9527%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (9 samples, 0.01%)</title><rect x="3.7070%" y="1285" width="0.0130%" height="15" fill="rgb(209,12,38)" fg:x="2568" fg:w="9"/><text x="3.9570%" y="1295.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (9 samples, 0.01%)</title><rect x="3.7070%" y="1269" width="0.0130%" height="15" fill="rgb(227,1,9)" fg:x="2568" fg:w="9"/><text x="3.9570%" y="1279.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (9 samples, 0.01%)</title><rect x="3.7070%" y="1253" width="0.0130%" height="15" fill="rgb(248,47,43)" fg:x="2568" fg:w="9"/><text x="3.9570%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (9 samples, 0.01%)</title><rect x="3.7070%" y="1237" width="0.0130%" height="15" fill="rgb(221,10,30)" fg:x="2568" fg:w="9"/><text x="3.9570%" y="1247.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (9 samples, 0.01%)</title><rect x="3.7070%" y="1221" width="0.0130%" height="15" fill="rgb(210,229,1)" fg:x="2568" fg:w="9"/><text x="3.9570%" y="1231.50"></text></g><g><title>Coin::~Coin (9 samples, 0.01%)</title><rect x="3.7070%" y="1205" width="0.0130%" height="15" fill="rgb(222,148,37)" fg:x="2568" fg:w="9"/><text x="3.9570%" y="1215.50"></text></g><g><title>CTxOut::~CTxOut (9 samples, 0.01%)</title><rect x="3.7070%" y="1189" width="0.0130%" height="15" fill="rgb(234,67,33)" fg:x="2568" fg:w="9"/><text x="3.9570%" y="1199.50"></text></g><g><title>CScript::~CScript (9 samples, 0.01%)</title><rect x="3.7070%" y="1173" width="0.0130%" height="15" fill="rgb(247,98,35)" fg:x="2568" fg:w="9"/><text x="3.9570%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (9 samples, 0.01%)</title><rect x="3.7070%" y="1157" width="0.0130%" height="15" fill="rgb(247,138,52)" fg:x="2568" fg:w="9"/><text x="3.9570%" y="1167.50"></text></g><g><title>CCheckQueueControl&lt;CScriptCheck&gt;::Add (9 samples, 0.01%)</title><rect x="3.7200%" y="1429" width="0.0130%" height="15" fill="rgb(213,79,30)" fg:x="2577" fg:w="9"/><text x="3.9700%" y="1439.50"></text></g><g><title>Chainstate::ConnectBlock (33 samples, 0.05%)</title><rect x="3.7012%" y="1445" width="0.0476%" height="15" fill="rgb(246,177,23)" fg:x="2564" fg:w="33"/><text x="3.9512%" y="1455.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="3.8918%" y="533" width="0.0173%" height="15" fill="rgb(230,62,27)" fg:x="2696" fg:w="12"/><text x="4.1418%" y="543.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="3.8990%" y="517" width="0.0101%" height="15" fill="rgb(216,154,8)" fg:x="2701" fg:w="7"/><text x="4.1490%" y="527.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="3.8990%" y="501" width="0.0101%" height="15" fill="rgb(244,35,45)" fg:x="2701" fg:w="7"/><text x="4.1490%" y="511.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (16 samples, 0.02%)</title><rect x="3.8889%" y="693" width="0.0231%" height="15" fill="rgb(251,115,12)" fg:x="2694" fg:w="16"/><text x="4.1389%" y="703.50"></text></g><g><title>new_do_write (16 samples, 0.02%)</title><rect x="3.8889%" y="677" width="0.0231%" height="15" fill="rgb(240,54,50)" fg:x="2694" fg:w="16"/><text x="4.1389%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (16 samples, 0.02%)</title><rect x="3.8889%" y="661" width="0.0231%" height="15" fill="rgb(233,84,52)" fg:x="2694" fg:w="16"/><text x="4.1389%" y="671.50"></text></g><g><title>__GI___libc_write (16 samples, 0.02%)</title><rect x="3.8889%" y="645" width="0.0231%" height="15" fill="rgb(207,117,47)" fg:x="2694" fg:w="16"/><text x="4.1389%" y="655.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="3.8889%" y="629" width="0.0231%" height="15" fill="rgb(249,43,39)" fg:x="2694" fg:w="16"/><text x="4.1389%" y="639.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="3.8889%" y="613" width="0.0231%" height="15" fill="rgb(209,38,44)" fg:x="2694" fg:w="16"/><text x="4.1389%" y="623.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="3.8889%" y="597" width="0.0231%" height="15" fill="rgb(236,212,23)" fg:x="2694" fg:w="16"/><text x="4.1389%" y="607.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="3.8889%" y="581" width="0.0231%" height="15" fill="rgb(242,79,21)" fg:x="2694" fg:w="16"/><text x="4.1389%" y="591.50"></text></g><g><title>[[ext4]] (14 samples, 0.02%)</title><rect x="3.8918%" y="565" width="0.0202%" height="15" fill="rgb(211,96,35)" fg:x="2696" fg:w="14"/><text x="4.1418%" y="575.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="3.8918%" y="549" width="0.0202%" height="15" fill="rgb(253,215,40)" fg:x="2696" fg:w="14"/><text x="4.1418%" y="559.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (17 samples, 0.02%)</title><rect x="3.8889%" y="709" width="0.0245%" height="15" fill="rgb(211,81,21)" fg:x="2694" fg:w="17"/><text x="4.1389%" y="719.50"></text></g><g><title>_IO_fwrite (108 samples, 0.16%)</title><rect x="3.7590%" y="725" width="0.1559%" height="15" fill="rgb(208,190,38)" fg:x="2604" fg:w="108"/><text x="4.0090%" y="735.50"></text></g><g><title>AutoFile::write (114 samples, 0.16%)</title><rect x="3.7532%" y="741" width="0.1646%" height="15" fill="rgb(235,213,38)" fg:x="2600" fg:w="114"/><text x="4.0032%" y="751.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (117 samples, 0.17%)</title><rect x="3.7532%" y="885" width="0.1689%" height="15" fill="rgb(237,122,38)" fg:x="2600" fg:w="117"/><text x="4.0032%" y="895.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (117 samples, 0.17%)</title><rect x="3.7532%" y="869" width="0.1689%" height="15" fill="rgb(244,218,35)" fg:x="2600" fg:w="117"/><text x="4.0032%" y="879.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (117 samples, 0.17%)</title><rect x="3.7532%" y="853" width="0.1689%" height="15" fill="rgb(240,68,47)" fg:x="2600" fg:w="117"/><text x="4.0032%" y="863.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (117 samples, 0.17%)</title><rect x="3.7532%" y="837" width="0.1689%" height="15" fill="rgb(210,16,53)" fg:x="2600" fg:w="117"/><text x="4.0032%" y="847.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (117 samples, 0.17%)</title><rect x="3.7532%" y="821" width="0.1689%" height="15" fill="rgb(235,124,12)" fg:x="2600" fg:w="117"/><text x="4.0032%" y="831.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (117 samples, 0.17%)</title><rect x="3.7532%" y="805" width="0.1689%" height="15" fill="rgb(224,169,11)" fg:x="2600" fg:w="117"/><text x="4.0032%" y="815.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (117 samples, 0.17%)</title><rect x="3.7532%" y="789" width="0.1689%" height="15" fill="rgb(250,166,2)" fg:x="2600" fg:w="117"/><text x="4.0032%" y="799.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (117 samples, 0.17%)</title><rect x="3.7532%" y="773" width="0.1689%" height="15" fill="rgb(242,216,29)" fg:x="2600" fg:w="117"/><text x="4.0032%" y="783.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (117 samples, 0.17%)</title><rect x="3.7532%" y="757" width="0.1689%" height="15" fill="rgb(230,116,27)" fg:x="2600" fg:w="117"/><text x="4.0032%" y="767.50"></text></g><g><title>[[ext4]] (21 samples, 0.03%)</title><rect x="3.9697%" y="581" width="0.0303%" height="15" fill="rgb(228,99,48)" fg:x="2750" fg:w="21"/><text x="4.2197%" y="591.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="3.9798%" y="565" width="0.0202%" height="15" fill="rgb(253,11,6)" fg:x="2757" fg:w="14"/><text x="4.2298%" y="575.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="3.9813%" y="549" width="0.0188%" height="15" fill="rgb(247,143,39)" fg:x="2758" fg:w="13"/><text x="4.2313%" y="559.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="3.9827%" y="533" width="0.0173%" height="15" fill="rgb(236,97,10)" fg:x="2759" fg:w="12"/><text x="4.2327%" y="543.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="3.9885%" y="517" width="0.0115%" height="15" fill="rgb(233,208,19)" fg:x="2763" fg:w="8"/><text x="4.2385%" y="527.50"></text></g><g><title>[[ext4]] (70 samples, 0.10%)</title><rect x="3.9683%" y="597" width="0.1010%" height="15" fill="rgb(216,164,2)" fg:x="2749" fg:w="70"/><text x="4.2183%" y="607.50"></text></g><g><title>[unknown] (48 samples, 0.07%)</title><rect x="4.0001%" y="581" width="0.0693%" height="15" fill="rgb(220,129,5)" fg:x="2771" fg:w="48"/><text x="4.2501%" y="591.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="4.0029%" y="565" width="0.0664%" height="15" fill="rgb(242,17,10)" fg:x="2773" fg:w="46"/><text x="4.2529%" y="575.50"></text></g><g><title>[unknown] (40 samples, 0.06%)</title><rect x="4.0116%" y="549" width="0.0577%" height="15" fill="rgb(242,107,0)" fg:x="2779" fg:w="40"/><text x="4.2616%" y="559.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="4.0232%" y="533" width="0.0462%" height="15" fill="rgb(251,28,31)" fg:x="2787" fg:w="32"/><text x="4.2732%" y="543.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="4.0376%" y="517" width="0.0318%" height="15" fill="rgb(233,223,10)" fg:x="2797" fg:w="22"/><text x="4.2876%" y="527.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="4.0578%" y="501" width="0.0115%" height="15" fill="rgb(215,21,27)" fg:x="2811" fg:w="8"/><text x="4.3078%" y="511.50"></text></g><g><title>[[ext4]] (89 samples, 0.13%)</title><rect x="3.9611%" y="629" width="0.1285%" height="15" fill="rgb(232,23,21)" fg:x="2744" fg:w="89"/><text x="4.2111%" y="639.50"></text></g><g><title>[unknown] (87 samples, 0.13%)</title><rect x="3.9640%" y="613" width="0.1256%" height="15" fill="rgb(244,5,23)" fg:x="2746" fg:w="87"/><text x="4.2140%" y="623.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="4.0693%" y="597" width="0.0202%" height="15" fill="rgb(226,81,46)" fg:x="2819" fg:w="14"/><text x="4.3193%" y="607.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="4.0751%" y="581" width="0.0144%" height="15" fill="rgb(247,70,30)" fg:x="2823" fg:w="10"/><text x="4.3251%" y="591.50"></text></g><g><title>[unknown] (102 samples, 0.15%)</title><rect x="3.9510%" y="693" width="0.1472%" height="15" fill="rgb(212,68,19)" fg:x="2737" fg:w="102"/><text x="4.2010%" y="703.50"></text></g><g><title>[unknown] (102 samples, 0.15%)</title><rect x="3.9510%" y="677" width="0.1472%" height="15" fill="rgb(240,187,13)" fg:x="2737" fg:w="102"/><text x="4.2010%" y="687.50"></text></g><g><title>[unknown] (102 samples, 0.15%)</title><rect x="3.9510%" y="661" width="0.1472%" height="15" fill="rgb(223,113,26)" fg:x="2737" fg:w="102"/><text x="4.2010%" y="671.50"></text></g><g><title>[unknown] (101 samples, 0.15%)</title><rect x="3.9524%" y="645" width="0.1458%" height="15" fill="rgb(206,192,2)" fg:x="2738" fg:w="101"/><text x="4.2024%" y="655.50"></text></g><g><title>_IO_fwrite (113 samples, 0.16%)</title><rect x="3.9365%" y="789" width="0.1631%" height="15" fill="rgb(241,108,4)" fg:x="2727" fg:w="113"/><text x="4.1865%" y="799.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (106 samples, 0.15%)</title><rect x="3.9466%" y="773" width="0.1530%" height="15" fill="rgb(247,173,49)" fg:x="2734" fg:w="106"/><text x="4.1966%" y="783.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (106 samples, 0.15%)</title><rect x="3.9466%" y="757" width="0.1530%" height="15" fill="rgb(224,114,35)" fg:x="2734" fg:w="106"/><text x="4.1966%" y="767.50"></text></g><g><title>new_do_write (106 samples, 0.15%)</title><rect x="3.9466%" y="741" width="0.1530%" height="15" fill="rgb(245,159,27)" fg:x="2734" fg:w="106"/><text x="4.1966%" y="751.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (105 samples, 0.15%)</title><rect x="3.9481%" y="725" width="0.1516%" height="15" fill="rgb(245,172,44)" fg:x="2735" fg:w="105"/><text x="4.1981%" y="735.50"></text></g><g><title>__GI___libc_write (103 samples, 0.15%)</title><rect x="3.9510%" y="709" width="0.1487%" height="15" fill="rgb(236,23,11)" fg:x="2737" fg:w="103"/><text x="4.2010%" y="719.50"></text></g><g><title>AutoFile::write (146 samples, 0.21%)</title><rect x="3.9221%" y="805" width="0.2108%" height="15" fill="rgb(205,117,38)" fg:x="2717" fg:w="146"/><text x="4.1721%" y="815.50"></text></g><g><title>util::Xor (17 samples, 0.02%)</title><rect x="4.1083%" y="789" width="0.0245%" height="15" fill="rgb(237,72,25)" fg:x="2846" fg:w="17"/><text x="4.3583%" y="799.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (151 samples, 0.22%)</title><rect x="3.9221%" y="837" width="0.2180%" height="15" fill="rgb(244,70,9)" fg:x="2717" fg:w="151"/><text x="4.1721%" y="847.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (151 samples, 0.22%)</title><rect x="3.9221%" y="821" width="0.2180%" height="15" fill="rgb(217,125,39)" fg:x="2717" fg:w="151"/><text x="4.1721%" y="831.50"></text></g><g><title>[[ext4]] (17 samples, 0.02%)</title><rect x="4.1502%" y="597" width="0.0245%" height="15" fill="rgb(235,36,10)" fg:x="2875" fg:w="17"/><text x="4.4002%" y="607.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="4.1560%" y="581" width="0.0188%" height="15" fill="rgb(251,123,47)" fg:x="2879" fg:w="13"/><text x="4.4060%" y="591.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="4.1560%" y="565" width="0.0188%" height="15" fill="rgb(221,13,13)" fg:x="2879" fg:w="13"/><text x="4.4060%" y="575.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="4.1574%" y="549" width="0.0173%" height="15" fill="rgb(238,131,9)" fg:x="2880" fg:w="12"/><text x="4.4074%" y="559.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="4.1603%" y="533" width="0.0144%" height="15" fill="rgb(211,50,8)" fg:x="2882" fg:w="10"/><text x="4.4103%" y="543.50"></text></g><g><title>_IO_fwrite (31 samples, 0.04%)</title><rect x="4.1401%" y="789" width="0.0447%" height="15" fill="rgb(245,182,24)" fg:x="2868" fg:w="31"/><text x="4.3901%" y="799.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (31 samples, 0.04%)</title><rect x="4.1401%" y="773" width="0.0447%" height="15" fill="rgb(242,14,37)" fg:x="2868" fg:w="31"/><text x="4.3901%" y="783.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (31 samples, 0.04%)</title><rect x="4.1401%" y="757" width="0.0447%" height="15" fill="rgb(246,228,12)" fg:x="2868" fg:w="31"/><text x="4.3901%" y="767.50"></text></g><g><title>new_do_write (31 samples, 0.04%)</title><rect x="4.1401%" y="741" width="0.0447%" height="15" fill="rgb(213,55,15)" fg:x="2868" fg:w="31"/><text x="4.3901%" y="751.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (31 samples, 0.04%)</title><rect x="4.1401%" y="725" width="0.0447%" height="15" fill="rgb(209,9,3)" fg:x="2868" fg:w="31"/><text x="4.3901%" y="735.50"></text></g><g><title>__GI___libc_write (31 samples, 0.04%)</title><rect x="4.1401%" y="709" width="0.0447%" height="15" fill="rgb(230,59,30)" fg:x="2868" fg:w="31"/><text x="4.3901%" y="719.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="4.1401%" y="693" width="0.0447%" height="15" fill="rgb(209,121,21)" fg:x="2868" fg:w="31"/><text x="4.3901%" y="703.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="4.1401%" y="677" width="0.0447%" height="15" fill="rgb(220,109,13)" fg:x="2868" fg:w="31"/><text x="4.3901%" y="687.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="4.1401%" y="661" width="0.0447%" height="15" fill="rgb(232,18,1)" fg:x="2868" fg:w="31"/><text x="4.3901%" y="671.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="4.1415%" y="645" width="0.0433%" height="15" fill="rgb(215,41,42)" fg:x="2869" fg:w="30"/><text x="4.3915%" y="655.50"></text></g><g><title>[[ext4]] (26 samples, 0.04%)</title><rect x="4.1473%" y="629" width="0.0375%" height="15" fill="rgb(224,123,36)" fg:x="2873" fg:w="26"/><text x="4.3973%" y="639.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="4.1473%" y="613" width="0.0375%" height="15" fill="rgb(240,125,3)" fg:x="2873" fg:w="26"/><text x="4.3973%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="4.1747%" y="597" width="0.0101%" height="15" fill="rgb(205,98,50)" fg:x="2892" fg:w="7"/><text x="4.4247%" y="607.50"></text></g><g><title>AutoFile::write (39 samples, 0.06%)</title><rect x="4.1401%" y="805" width="0.0563%" height="15" fill="rgb(205,185,37)" fg:x="2868" fg:w="39"/><text x="4.3901%" y="815.50"></text></g><g><title>util::Xor (7 samples, 0.01%)</title><rect x="4.1863%" y="789" width="0.0101%" height="15" fill="rgb(238,207,15)" fg:x="2900" fg:w="7"/><text x="4.4363%" y="799.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (49 samples, 0.07%)</title><rect x="4.1401%" y="837" width="0.0707%" height="15" fill="rgb(213,199,42)" fg:x="2868" fg:w="49"/><text x="4.3901%" y="847.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char&gt; (49 samples, 0.07%)</title><rect x="4.1401%" y="821" width="0.0707%" height="15" fill="rgb(235,201,11)" fg:x="2868" fg:w="49"/><text x="4.3901%" y="831.50"></text></g><g><title>AutoFile::write (14 samples, 0.02%)</title><rect x="4.2137%" y="741" width="0.0202%" height="15" fill="rgb(207,46,11)" fg:x="2919" fg:w="14"/><text x="4.4637%" y="751.50"></text></g><g><title>_IO_fwrite (12 samples, 0.02%)</title><rect x="4.2166%" y="725" width="0.0173%" height="15" fill="rgb(241,35,35)" fg:x="2921" fg:w="12"/><text x="4.4666%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (334 samples, 0.48%)</title><rect x="3.7532%" y="981" width="0.4821%" height="15" fill="rgb(243,32,47)" fg:x="2600" fg:w="334"/><text x="4.0032%" y="991.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (334 samples, 0.48%)</title><rect x="3.7532%" y="965" width="0.4821%" height="15" fill="rgb(247,202,23)" fg:x="2600" fg:w="334"/><text x="4.0032%" y="975.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (334 samples, 0.48%)</title><rect x="3.7532%" y="949" width="0.4821%" height="15" fill="rgb(219,102,11)" fg:x="2600" fg:w="334"/><text x="4.0032%" y="959.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (334 samples, 0.48%)</title><rect x="3.7532%" y="933" width="0.4821%" height="15" fill="rgb(243,110,44)" fg:x="2600" fg:w="334"/><text x="4.0032%" y="943.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (334 samples, 0.48%)</title><rect x="3.7532%" y="917" width="0.4821%" height="15" fill="rgb(222,74,54)" fg:x="2600" fg:w="334"/><text x="4.0032%" y="927.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (334 samples, 0.48%)</title><rect x="3.7532%" y="901" width="0.4821%" height="15" fill="rgb(216,99,12)" fg:x="2600" fg:w="334"/><text x="4.0032%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (217 samples, 0.31%)</title><rect x="3.9221%" y="885" width="0.3132%" height="15" fill="rgb(226,22,26)" fg:x="2717" fg:w="217"/><text x="4.1721%" y="895.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (217 samples, 0.31%)</title><rect x="3.9221%" y="869" width="0.3132%" height="15" fill="rgb(217,163,10)" fg:x="2717" fg:w="217"/><text x="4.1721%" y="879.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (217 samples, 0.31%)</title><rect x="3.9221%" y="853" width="0.3132%" height="15" fill="rgb(213,25,53)" fg:x="2717" fg:w="217"/><text x="4.1721%" y="863.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (17 samples, 0.02%)</title><rect x="4.2108%" y="837" width="0.0245%" height="15" fill="rgb(252,105,26)" fg:x="2917" fg:w="17"/><text x="4.4608%" y="847.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (17 samples, 0.02%)</title><rect x="4.2108%" y="821" width="0.0245%" height="15" fill="rgb(220,39,43)" fg:x="2917" fg:w="17"/><text x="4.4608%" y="831.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (17 samples, 0.02%)</title><rect x="4.2108%" y="805" width="0.0245%" height="15" fill="rgb(229,68,48)" fg:x="2917" fg:w="17"/><text x="4.4608%" y="815.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (17 samples, 0.02%)</title><rect x="4.2108%" y="789" width="0.0245%" height="15" fill="rgb(252,8,32)" fg:x="2917" fg:w="17"/><text x="4.4608%" y="799.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (15 samples, 0.02%)</title><rect x="4.2137%" y="773" width="0.0217%" height="15" fill="rgb(223,20,43)" fg:x="2919" fg:w="15"/><text x="4.4637%" y="783.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (15 samples, 0.02%)</title><rect x="4.2137%" y="757" width="0.0217%" height="15" fill="rgb(229,81,49)" fg:x="2919" fg:w="15"/><text x="4.4637%" y="767.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="4.3956%" y="693" width="0.0173%" height="15" fill="rgb(236,28,36)" fg:x="3045" fg:w="12"/><text x="4.6456%" y="703.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="4.3985%" y="677" width="0.0144%" height="15" fill="rgb(249,185,26)" fg:x="3047" fg:w="10"/><text x="4.6485%" y="687.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="4.3985%" y="661" width="0.0144%" height="15" fill="rgb(249,174,33)" fg:x="3047" fg:w="10"/><text x="4.6485%" y="671.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="4.4028%" y="645" width="0.0101%" height="15" fill="rgb(233,201,37)" fg:x="3050" fg:w="7"/><text x="4.6528%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="4.4028%" y="629" width="0.0101%" height="15" fill="rgb(221,78,26)" fg:x="3050" fg:w="7"/><text x="4.6528%" y="639.50"></text></g><g><title>[[ext4]] (14 samples, 0.02%)</title><rect x="4.3941%" y="725" width="0.0202%" height="15" fill="rgb(250,127,30)" fg:x="3044" fg:w="14"/><text x="4.6441%" y="735.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="4.3941%" y="709" width="0.0202%" height="15" fill="rgb(230,49,44)" fg:x="3044" fg:w="14"/><text x="4.6441%" y="719.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (17 samples, 0.02%)</title><rect x="4.3913%" y="853" width="0.0245%" height="15" fill="rgb(229,67,23)" fg:x="3042" fg:w="17"/><text x="4.6413%" y="863.50"></text></g><g><title>new_do_write (17 samples, 0.02%)</title><rect x="4.3913%" y="837" width="0.0245%" height="15" fill="rgb(249,83,47)" fg:x="3042" fg:w="17"/><text x="4.6413%" y="847.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (17 samples, 0.02%)</title><rect x="4.3913%" y="821" width="0.0245%" height="15" fill="rgb(215,43,3)" fg:x="3042" fg:w="17"/><text x="4.6413%" y="831.50"></text></g><g><title>__GI___libc_write (17 samples, 0.02%)</title><rect x="4.3913%" y="805" width="0.0245%" height="15" fill="rgb(238,154,13)" fg:x="3042" fg:w="17"/><text x="4.6413%" y="815.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="4.3913%" y="789" width="0.0245%" height="15" fill="rgb(219,56,2)" fg:x="3042" fg:w="17"/><text x="4.6413%" y="799.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="4.3913%" y="773" width="0.0245%" height="15" fill="rgb(233,0,4)" fg:x="3042" fg:w="17"/><text x="4.6413%" y="783.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="4.3913%" y="757" width="0.0245%" height="15" fill="rgb(235,30,7)" fg:x="3042" fg:w="17"/><text x="4.6413%" y="767.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="4.3913%" y="741" width="0.0245%" height="15" fill="rgb(250,79,13)" fg:x="3042" fg:w="17"/><text x="4.6413%" y="751.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (18 samples, 0.03%)</title><rect x="4.3913%" y="869" width="0.0260%" height="15" fill="rgb(211,146,34)" fg:x="3042" fg:w="18"/><text x="4.6413%" y="879.50"></text></g><g><title>_IO_fwrite (126 samples, 0.18%)</title><rect x="4.2382%" y="885" width="0.1819%" height="15" fill="rgb(228,22,38)" fg:x="2936" fg:w="126"/><text x="4.4882%" y="895.50"></text></g><g><title>AutoFile::write (130 samples, 0.19%)</title><rect x="4.2354%" y="901" width="0.1877%" height="15" fill="rgb(235,168,5)" fg:x="2934" fg:w="130"/><text x="4.4854%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (136 samples, 0.20%)</title><rect x="4.2354%" y="981" width="0.1963%" height="15" fill="rgb(221,155,16)" fg:x="2934" fg:w="136"/><text x="4.4854%" y="991.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (136 samples, 0.20%)</title><rect x="4.2354%" y="965" width="0.1963%" height="15" fill="rgb(215,215,53)" fg:x="2934" fg:w="136"/><text x="4.4854%" y="975.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (136 samples, 0.20%)</title><rect x="4.2354%" y="949" width="0.1963%" height="15" fill="rgb(223,4,10)" fg:x="2934" fg:w="136"/><text x="4.4854%" y="959.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (136 samples, 0.20%)</title><rect x="4.2354%" y="933" width="0.1963%" height="15" fill="rgb(234,103,6)" fg:x="2934" fg:w="136"/><text x="4.4854%" y="943.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (136 samples, 0.20%)</title><rect x="4.2354%" y="917" width="0.1963%" height="15" fill="rgb(227,97,0)" fg:x="2934" fg:w="136"/><text x="4.4854%" y="927.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (505 samples, 0.73%)</title><rect x="3.7532%" y="997" width="0.7290%" height="15" fill="rgb(234,150,53)" fg:x="2600" fg:w="505"/><text x="4.0032%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (35 samples, 0.05%)</title><rect x="4.4317%" y="981" width="0.0505%" height="15" fill="rgb(228,201,54)" fg:x="3070" fg:w="35"/><text x="4.6817%" y="991.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (35 samples, 0.05%)</title><rect x="4.4317%" y="965" width="0.0505%" height="15" fill="rgb(222,22,37)" fg:x="3070" fg:w="35"/><text x="4.6817%" y="975.50"></text></g><g><title>AutoFile::write (35 samples, 0.05%)</title><rect x="4.4317%" y="949" width="0.0505%" height="15" fill="rgb(237,53,32)" fg:x="3070" fg:w="35"/><text x="4.6817%" y="959.50"></text></g><g><title>_IO_fwrite (33 samples, 0.05%)</title><rect x="4.4346%" y="933" width="0.0476%" height="15" fill="rgb(233,25,53)" fg:x="3072" fg:w="33"/><text x="4.6846%" y="943.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (518 samples, 0.75%)</title><rect x="3.7532%" y="1445" width="0.7478%" height="15" fill="rgb(210,40,34)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1455.50"></text></g><g><title>Chainstate::ActivateBestChain (518 samples, 0.75%)</title><rect x="3.7532%" y="1429" width="0.7478%" height="15" fill="rgb(241,220,44)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1439.50"></text></g><g><title>Chainstate::ActivateBestChainStep (518 samples, 0.75%)</title><rect x="3.7532%" y="1413" width="0.7478%" height="15" fill="rgb(235,28,35)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1423.50"></text></g><g><title>Chainstate::ConnectTip (518 samples, 0.75%)</title><rect x="3.7532%" y="1397" width="0.7478%" height="15" fill="rgb(210,56,17)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1407.50"></text></g><g><title>Chainstate::ConnectBlock (518 samples, 0.75%)</title><rect x="3.7532%" y="1381" width="0.7478%" height="15" fill="rgb(224,130,29)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1391.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (518 samples, 0.75%)</title><rect x="3.7532%" y="1365" width="0.7478%" height="15" fill="rgb(235,212,8)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1375.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (518 samples, 0.75%)</title><rect x="3.7532%" y="1349" width="0.7478%" height="15" fill="rgb(223,33,50)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1359.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (518 samples, 0.75%)</title><rect x="3.7532%" y="1333" width="0.7478%" height="15" fill="rgb(219,149,13)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1343.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1317" width="0.7478%" height="15" fill="rgb(250,156,29)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1327.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1301" width="0.7478%" height="15" fill="rgb(216,193,19)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1311.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1285" width="0.7478%" height="15" fill="rgb(216,135,14)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1295.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1269" width="0.7478%" height="15" fill="rgb(241,47,5)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1279.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1253" width="0.7478%" height="15" fill="rgb(233,42,35)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1263.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1237" width="0.7478%" height="15" fill="rgb(231,13,6)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1247.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1221" width="0.7478%" height="15" fill="rgb(207,181,40)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1205" width="0.7478%" height="15" fill="rgb(254,173,49)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1215.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1189" width="0.7478%" height="15" fill="rgb(221,1,38)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1199.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1173" width="0.7478%" height="15" fill="rgb(206,124,46)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1183.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1157" width="0.7478%" height="15" fill="rgb(249,21,11)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1167.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1141" width="0.7478%" height="15" fill="rgb(222,201,40)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1151.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1125" width="0.7478%" height="15" fill="rgb(235,61,29)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1135.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1109" width="0.7478%" height="15" fill="rgb(219,207,3)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1119.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1093" width="0.7478%" height="15" fill="rgb(222,56,46)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1077" width="0.7478%" height="15" fill="rgb(239,76,54)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1087.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1061" width="0.7478%" height="15" fill="rgb(231,124,27)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1045" width="0.7478%" height="15" fill="rgb(249,195,6)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1055.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1029" width="0.7478%" height="15" fill="rgb(237,174,47)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1039.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (518 samples, 0.75%)</title><rect x="3.7532%" y="1013" width="0.7478%" height="15" fill="rgb(206,201,31)" fg:x="2600" fg:w="518"/><text x="4.0032%" y="1023.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (13 samples, 0.02%)</title><rect x="4.4822%" y="997" width="0.0188%" height="15" fill="rgb(231,57,52)" fg:x="3105" fg:w="13"/><text x="4.7322%" y="1007.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (13 samples, 0.02%)</title><rect x="4.4822%" y="981" width="0.0188%" height="15" fill="rgb(248,177,22)" fg:x="3105" fg:w="13"/><text x="4.7322%" y="991.50"></text></g><g><title>AutoFile::write (13 samples, 0.02%)</title><rect x="4.4822%" y="965" width="0.0188%" height="15" fill="rgb(215,211,37)" fg:x="3105" fg:w="13"/><text x="4.7322%" y="975.50"></text></g><g><title>_IO_fwrite (13 samples, 0.02%)</title><rect x="4.4822%" y="949" width="0.0188%" height="15" fill="rgb(241,128,51)" fg:x="3105" fg:w="13"/><text x="4.7322%" y="959.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::set (7 samples, 0.01%)</title><rect x="4.5298%" y="1429" width="0.0101%" height="15" fill="rgb(227,165,31)" fg:x="3138" fg:w="7"/><text x="4.7798%" y="1439.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Rb_tree (7 samples, 0.01%)</title><rect x="4.5298%" y="1413" width="0.0101%" height="15" fill="rgb(228,167,24)" fg:x="3138" fg:w="7"/><text x="4.7798%" y="1423.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Rb_tree_impl&lt;std::less&lt;COutPoint&gt;, true&gt;::_Rb_tree_impl (7 samples, 0.01%)</title><rect x="4.5298%" y="1397" width="0.0101%" height="15" fill="rgb(228,143,12)" fg:x="3138" fg:w="7"/><text x="4.7798%" y="1407.50"></text></g><g><title>std::_Rb_tree_header::_Rb_tree_header (7 samples, 0.01%)</title><rect x="4.5298%" y="1381" width="0.0101%" height="15" fill="rgb(249,149,8)" fg:x="3138" fg:w="7"/><text x="4.7798%" y="1391.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (17 samples, 0.02%)</title><rect x="4.5472%" y="1317" width="0.0245%" height="15" fill="rgb(243,35,44)" fg:x="3150" fg:w="17"/><text x="4.7972%" y="1327.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (17 samples, 0.02%)</title><rect x="4.5472%" y="1301" width="0.0245%" height="15" fill="rgb(246,89,9)" fg:x="3150" fg:w="17"/><text x="4.7972%" y="1311.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (17 samples, 0.02%)</title><rect x="4.5472%" y="1285" width="0.0245%" height="15" fill="rgb(233,213,13)" fg:x="3150" fg:w="17"/><text x="4.7972%" y="1295.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="4.5472%" y="1269" width="0.0245%" height="15" fill="rgb(233,141,41)" fg:x="3150" fg:w="17"/><text x="4.7972%" y="1279.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (17 samples, 0.02%)</title><rect x="4.5472%" y="1253" width="0.0245%" height="15" fill="rgb(239,167,4)" fg:x="3150" fg:w="17"/><text x="4.7972%" y="1263.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1237" width="0.0159%" height="15" fill="rgb(209,217,16)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1247.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1221" width="0.0159%" height="15" fill="rgb(219,88,35)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1231.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1205" width="0.0159%" height="15" fill="rgb(220,193,23)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1215.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1189" width="0.0159%" height="15" fill="rgb(230,90,52)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1199.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1173" width="0.0159%" height="15" fill="rgb(252,106,19)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1157" width="0.0159%" height="15" fill="rgb(206,74,20)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1167.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1141" width="0.0159%" height="15" fill="rgb(230,138,44)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1125" width="0.0159%" height="15" fill="rgb(235,182,43)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1135.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1109" width="0.0159%" height="15" fill="rgb(242,16,51)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1119.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1093" width="0.0159%" height="15" fill="rgb(248,9,4)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1103.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1077" width="0.0159%" height="15" fill="rgb(210,31,22)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1061" width="0.0159%" height="15" fill="rgb(239,54,39)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1071.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="4.5558%" y="1045" width="0.0159%" height="15" fill="rgb(230,99,41)" fg:x="3156" fg:w="11"/><text x="4.8058%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (10 samples, 0.01%)</title><rect x="4.5573%" y="1029" width="0.0144%" height="15" fill="rgb(253,106,12)" fg:x="3157" fg:w="10"/><text x="4.8073%" y="1039.50"></text></g><g><title>CheckTransaction (46 samples, 0.07%)</title><rect x="4.5067%" y="1445" width="0.0664%" height="15" fill="rgb(213,46,41)" fg:x="3122" fg:w="46"/><text x="4.7567%" y="1455.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (22 samples, 0.03%)</title><rect x="4.5414%" y="1429" width="0.0318%" height="15" fill="rgb(215,133,35)" fg:x="3146" fg:w="22"/><text x="4.7914%" y="1439.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (22 samples, 0.03%)</title><rect x="4.5414%" y="1413" width="0.0318%" height="15" fill="rgb(213,28,5)" fg:x="3146" fg:w="22"/><text x="4.7914%" y="1423.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (22 samples, 0.03%)</title><rect x="4.5414%" y="1397" width="0.0318%" height="15" fill="rgb(215,77,49)" fg:x="3146" fg:w="22"/><text x="4.7914%" y="1407.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (22 samples, 0.03%)</title><rect x="4.5414%" y="1381" width="0.0318%" height="15" fill="rgb(248,100,22)" fg:x="3146" fg:w="22"/><text x="4.7914%" y="1391.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (22 samples, 0.03%)</title><rect x="4.5414%" y="1365" width="0.0318%" height="15" fill="rgb(208,67,9)" fg:x="3146" fg:w="22"/><text x="4.7914%" y="1375.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.03%)</title><rect x="4.5414%" y="1349" width="0.0318%" height="15" fill="rgb(219,133,21)" fg:x="3146" fg:w="22"/><text x="4.7914%" y="1359.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (22 samples, 0.03%)</title><rect x="4.5414%" y="1333" width="0.0318%" height="15" fill="rgb(246,46,29)" fg:x="3146" fg:w="22"/><text x="4.7914%" y="1343.50"></text></g><g><title>CompressAmount (35 samples, 0.05%)</title><rect x="4.5731%" y="1445" width="0.0505%" height="15" fill="rgb(246,185,52)" fg:x="3168" fg:w="35"/><text x="4.8231%" y="1455.50"></text></g><g><title>CompressScript (19 samples, 0.03%)</title><rect x="4.6237%" y="1445" width="0.0274%" height="15" fill="rgb(252,136,11)" fg:x="3203" fg:w="19"/><text x="4.8737%" y="1455.50"></text></g><g><title>_int_malloc (18 samples, 0.03%)</title><rect x="4.6699%" y="1429" width="0.0260%" height="15" fill="rgb(219,138,53)" fg:x="3235" fg:w="18"/><text x="4.9199%" y="1439.50"></text></g><g><title>CountWitnessSigOps (34 samples, 0.05%)</title><rect x="4.6554%" y="1445" width="0.0491%" height="15" fill="rgb(211,51,23)" fg:x="3225" fg:w="34"/><text x="4.9054%" y="1455.50"></text></g><g><title>DataStream::read (7 samples, 0.01%)</title><rect x="4.7045%" y="1445" width="0.0101%" height="15" fill="rgb(247,221,28)" fg:x="3259" fg:w="7"/><text x="4.9545%" y="1455.50"></text></g><g><title>GetScriptOp (10 samples, 0.01%)</title><rect x="4.7363%" y="1445" width="0.0144%" height="15" fill="rgb(251,222,45)" fg:x="3281" fg:w="10"/><text x="4.9863%" y="1455.50"></text></g><g><title>GetTransactionSigOpCost (11 samples, 0.02%)</title><rect x="4.7507%" y="1445" width="0.0159%" height="15" fill="rgb(217,162,53)" fg:x="3291" fg:w="11"/><text x="5.0007%" y="1455.50"></text></g><g><title>SipHashUint256Extra (76 samples, 0.11%)</title><rect x="4.7695%" y="1445" width="0.1097%" height="15" fill="rgb(229,93,14)" fg:x="3304" fg:w="76"/><text x="5.0195%" y="1455.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (20 samples, 0.03%)</title><rect x="4.8503%" y="1429" width="0.0289%" height="15" fill="rgb(209,67,49)" fg:x="3360" fg:w="20"/><text x="5.1003%" y="1439.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (20 samples, 0.03%)</title><rect x="4.8503%" y="1413" width="0.0289%" height="15" fill="rgb(213,87,29)" fg:x="3360" fg:w="20"/><text x="5.1003%" y="1423.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (14 samples, 0.02%)</title><rect x="4.8864%" y="1413" width="0.0202%" height="15" fill="rgb(205,151,52)" fg:x="3385" fg:w="14"/><text x="5.1364%" y="1423.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (14 samples, 0.02%)</title><rect x="4.8864%" y="1397" width="0.0202%" height="15" fill="rgb(253,215,39)" fg:x="3385" fg:w="14"/><text x="5.1364%" y="1407.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (14 samples, 0.02%)</title><rect x="4.8864%" y="1381" width="0.0202%" height="15" fill="rgb(221,220,41)" fg:x="3385" fg:w="14"/><text x="5.1364%" y="1391.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (14 samples, 0.02%)</title><rect x="4.8864%" y="1365" width="0.0202%" height="15" fill="rgb(218,133,21)" fg:x="3385" fg:w="14"/><text x="5.1364%" y="1375.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (14 samples, 0.02%)</title><rect x="4.8864%" y="1349" width="0.0202%" height="15" fill="rgb(221,193,43)" fg:x="3385" fg:w="14"/><text x="5.1364%" y="1359.50"></text></g><g><title>operator new (12 samples, 0.02%)</title><rect x="4.8893%" y="1333" width="0.0173%" height="15" fill="rgb(240,128,52)" fg:x="3387" fg:w="12"/><text x="5.1393%" y="1343.50"></text></g><g><title>cfree@GLIBC_2.2.5 (11 samples, 0.02%)</title><rect x="4.8907%" y="1317" width="0.0159%" height="15" fill="rgb(253,114,12)" fg:x="3388" fg:w="11"/><text x="5.1407%" y="1327.50"></text></g><g><title>UpdateCoins (20 samples, 0.03%)</title><rect x="4.8792%" y="1445" width="0.0289%" height="15" fill="rgb(215,223,47)" fg:x="3380" fg:w="20"/><text x="5.1292%" y="1455.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (16 samples, 0.02%)</title><rect x="4.8849%" y="1429" width="0.0231%" height="15" fill="rgb(248,225,23)" fg:x="3384" fg:w="16"/><text x="5.1349%" y="1439.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.02%)</title><rect x="4.9903%" y="1429" width="0.0188%" height="15" fill="rgb(250,108,0)" fg:x="3457" fg:w="13"/><text x="5.2403%" y="1439.50"></text></g><g><title>_int_free (11 samples, 0.02%)</title><rect x="5.0091%" y="1429" width="0.0159%" height="15" fill="rgb(228,208,7)" fg:x="3470" fg:w="11"/><text x="5.2591%" y="1439.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (7 samples, 0.01%)</title><rect x="5.0928%" y="1429" width="0.0101%" height="15" fill="rgb(244,45,10)" fg:x="3528" fg:w="7"/><text x="5.3428%" y="1439.50"></text></g><g><title>[[heap]] (118 samples, 0.17%)</title><rect x="4.9470%" y="1445" width="0.1703%" height="15" fill="rgb(207,125,25)" fg:x="3427" fg:w="118"/><text x="5.1970%" y="1455.50"></text></g><g><title>AutoFile::write (84 samples, 0.12%)</title><rect x="5.1217%" y="1429" width="0.1213%" height="15" fill="rgb(210,195,18)" fg:x="3548" fg:w="84"/><text x="5.3717%" y="1439.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (9 samples, 0.01%)</title><rect x="5.2429%" y="1429" width="0.0130%" height="15" fill="rgb(249,80,12)" fg:x="3632" fg:w="9"/><text x="5.4929%" y="1439.50"></text></g><g><title>CCoinsViewCache::AccessCoin (9 samples, 0.01%)</title><rect x="5.2588%" y="1429" width="0.0130%" height="15" fill="rgb(221,65,9)" fg:x="3643" fg:w="9"/><text x="5.5088%" y="1439.50"></text></g><g><title>CCoinsViewCache::AddCoin (9 samples, 0.01%)</title><rect x="5.2718%" y="1429" width="0.0130%" height="15" fill="rgb(235,49,36)" fg:x="3652" fg:w="9"/><text x="5.5218%" y="1439.50"></text></g><g><title>CCoinsViewCache::FetchCoin (39 samples, 0.06%)</title><rect x="5.2848%" y="1429" width="0.0563%" height="15" fill="rgb(225,32,20)" fg:x="3661" fg:w="39"/><text x="5.5348%" y="1439.50"></text></g><g><title>CSHA256::Reset (11 samples, 0.02%)</title><rect x="5.3656%" y="1429" width="0.0159%" height="15" fill="rgb(215,141,46)" fg:x="3717" fg:w="11"/><text x="5.6156%" y="1439.50"></text></g><g><title>CSHA256::Write (190 samples, 0.27%)</title><rect x="5.3815%" y="1429" width="0.2743%" height="15" fill="rgb(250,160,47)" fg:x="3728" fg:w="190"/><text x="5.6315%" y="1439.50"></text></g><g><title>CScript::GetSigOpCount (27 samples, 0.04%)</title><rect x="5.6558%" y="1429" width="0.0390%" height="15" fill="rgb(216,222,40)" fg:x="3918" fg:w="27"/><text x="5.9058%" y="1439.50"></text></g><g><title>CTransaction::ComputeHasWitness (11 samples, 0.02%)</title><rect x="5.7063%" y="1429" width="0.0159%" height="15" fill="rgb(234,217,39)" fg:x="3953" fg:w="11"/><text x="5.9563%" y="1439.50"></text></g><g><title>CompressAmount (33 samples, 0.05%)</title><rect x="5.7439%" y="1429" width="0.0476%" height="15" fill="rgb(207,178,40)" fg:x="3979" fg:w="33"/><text x="5.9939%" y="1439.50"></text></g><g><title>CompressScript (7 samples, 0.01%)</title><rect x="5.7915%" y="1429" width="0.0101%" height="15" fill="rgb(221,136,13)" fg:x="4012" fg:w="7"/><text x="6.0415%" y="1439.50"></text></g><g><title>GetScriptOp (85 samples, 0.12%)</title><rect x="5.8146%" y="1429" width="0.1227%" height="15" fill="rgb(249,199,10)" fg:x="4028" fg:w="85"/><text x="6.0646%" y="1439.50"></text></g><g><title>SipHashUint256Extra (77 samples, 0.11%)</title><rect x="5.9474%" y="1429" width="0.1112%" height="15" fill="rgb(249,222,13)" fg:x="4120" fg:w="77"/><text x="6.1974%" y="1439.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (249 samples, 0.36%)</title><rect x="6.0744%" y="1429" width="0.3594%" height="15" fill="rgb(244,185,38)" fg:x="4208" fg:w="249"/><text x="6.3244%" y="1439.50"></text></g><g><title>_IO_fwrite (371 samples, 0.54%)</title><rect x="6.4339%" y="1429" width="0.5356%" height="15" fill="rgb(236,202,9)" fg:x="4457" fg:w="371"/><text x="6.6839%" y="1439.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (10 samples, 0.01%)</title><rect x="6.9738%" y="1429" width="0.0144%" height="15" fill="rgb(250,229,37)" fg:x="4831" fg:w="10"/><text x="7.2238%" y="1439.50"></text></g><g><title>__memcmp_evex_movbe (235 samples, 0.34%)</title><rect x="6.9940%" y="1429" width="0.3392%" height="15" fill="rgb(206,174,23)" fg:x="4845" fg:w="235"/><text x="7.2440%" y="1439.50"></text></g><g><title>__memmove_avx512_unaligned_erms (580 samples, 0.84%)</title><rect x="7.3332%" y="1429" width="0.8373%" height="15" fill="rgb(211,33,43)" fg:x="5080" fg:w="580"/><text x="7.5832%" y="1439.50"></text></g><g><title>__mempcpy@plt (20 samples, 0.03%)</title><rect x="8.1705%" y="1429" width="0.0289%" height="15" fill="rgb(245,58,50)" fg:x="5660" fg:w="20"/><text x="8.4205%" y="1439.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (21 samples, 0.03%)</title><rect x="8.1993%" y="1429" width="0.0303%" height="15" fill="rgb(244,68,36)" fg:x="5680" fg:w="21"/><text x="8.4493%" y="1439.50"></text></g><g><title>_int_free (94 samples, 0.14%)</title><rect x="8.2441%" y="1429" width="0.1357%" height="15" fill="rgb(232,229,15)" fg:x="5711" fg:w="94"/><text x="8.4941%" y="1439.50"></text></g><g><title>_int_malloc (360 samples, 0.52%)</title><rect x="8.3870%" y="1429" width="0.5197%" height="15" fill="rgb(254,30,23)" fg:x="5810" fg:w="360"/><text x="8.6370%" y="1439.50"></text></g><g><title>cfree@GLIBC_2.2.5 (45 samples, 0.06%)</title><rect x="8.9124%" y="1429" width="0.0650%" height="15" fill="rgb(235,160,14)" fg:x="6174" fg:w="45"/><text x="9.1624%" y="1439.50"></text></g><g><title>free@plt (15 samples, 0.02%)</title><rect x="8.9774%" y="1429" width="0.0217%" height="15" fill="rgb(212,155,44)" fg:x="6219" fg:w="15"/><text x="9.2274%" y="1439.50"></text></g><g><title>fwrite@plt (12 samples, 0.02%)</title><rect x="9.0005%" y="1429" width="0.0173%" height="15" fill="rgb(226,2,50)" fg:x="6235" fg:w="12"/><text x="9.2505%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (19 samples, 0.03%)</title><rect x="9.0193%" y="1429" width="0.0274%" height="15" fill="rgb(234,177,6)" fg:x="6248" fg:w="19"/><text x="9.2693%" y="1439.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (8 samples, 0.01%)</title><rect x="9.0525%" y="1429" width="0.0115%" height="15" fill="rgb(217,24,9)" fg:x="6271" fg:w="8"/><text x="9.3025%" y="1439.50"></text></g><g><title>leveldb::Hash (7 samples, 0.01%)</title><rect x="9.0987%" y="1429" width="0.0101%" height="15" fill="rgb(220,13,46)" fg:x="6303" fg:w="7"/><text x="9.3487%" y="1439.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (152 samples, 0.22%)</title><rect x="9.1102%" y="1429" width="0.2194%" height="15" fill="rgb(239,221,27)" fg:x="6311" fg:w="152"/><text x="9.3602%" y="1439.50"></text></g><g><title>malloc (192 samples, 0.28%)</title><rect x="9.3542%" y="1429" width="0.2772%" height="15" fill="rgb(222,198,25)" fg:x="6480" fg:w="192"/><text x="9.6042%" y="1439.50"></text></g><g><title>malloc@plt (20 samples, 0.03%)</title><rect x="9.6313%" y="1429" width="0.0289%" height="15" fill="rgb(211,99,13)" fg:x="6672" fg:w="20"/><text x="9.8813%" y="1439.50"></text></g><g><title>malloc_consolidate (16 samples, 0.02%)</title><rect x="9.6602%" y="1429" width="0.0231%" height="15" fill="rgb(232,111,31)" fg:x="6692" fg:w="16"/><text x="9.9102%" y="1439.50"></text></g><g><title>memcmp@plt (8 samples, 0.01%)</title><rect x="9.6833%" y="1429" width="0.0115%" height="15" fill="rgb(245,82,37)" fg:x="6708" fg:w="8"/><text x="9.9333%" y="1439.50"></text></g><g><title>memcpy@plt (47 samples, 0.07%)</title><rect x="9.6948%" y="1429" width="0.0678%" height="15" fill="rgb(227,149,46)" fg:x="6716" fg:w="47"/><text x="9.9448%" y="1439.50"></text></g><g><title>operator delete (18 samples, 0.03%)</title><rect x="9.7713%" y="1429" width="0.0260%" height="15" fill="rgb(218,36,50)" fg:x="6769" fg:w="18"/><text x="10.0213%" y="1439.50"></text></g><g><title>operator new (38 samples, 0.05%)</title><rect x="9.7973%" y="1429" width="0.0549%" height="15" fill="rgb(226,80,48)" fg:x="6787" fg:w="38"/><text x="10.0473%" y="1439.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (10 samples, 0.01%)</title><rect x="9.8522%" y="1429" width="0.0144%" height="15" fill="rgb(238,224,15)" fg:x="6825" fg:w="10"/><text x="10.1022%" y="1439.50"></text></g><g><title>sha256_x86_shani::Transform (14 samples, 0.02%)</title><rect x="9.8709%" y="1429" width="0.0202%" height="15" fill="rgb(241,136,10)" fg:x="6838" fg:w="14"/><text x="10.1209%" y="1439.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (21 samples, 0.03%)</title><rect x="9.8912%" y="1429" width="0.0303%" height="15" fill="rgb(208,32,45)" fg:x="6852" fg:w="21"/><text x="10.1412%" y="1439.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (7 samples, 0.01%)</title><rect x="9.9215%" y="1429" width="0.0101%" height="15" fill="rgb(207,135,9)" fg:x="6873" fg:w="7"/><text x="10.1715%" y="1439.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (8 samples, 0.01%)</title><rect x="9.9359%" y="1429" width="0.0115%" height="15" fill="rgb(206,86,44)" fg:x="6883" fg:w="8"/><text x="10.1859%" y="1439.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (36 samples, 0.05%)</title><rect x="9.9691%" y="1429" width="0.0520%" height="15" fill="rgb(245,177,15)" fg:x="6906" fg:w="36"/><text x="10.2191%" y="1439.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (11 samples, 0.02%)</title><rect x="10.0211%" y="1429" width="0.0159%" height="15" fill="rgb(206,64,50)" fg:x="6942" fg:w="11"/><text x="10.2711%" y="1439.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (9 samples, 0.01%)</title><rect x="10.0471%" y="1429" width="0.0130%" height="15" fill="rgb(234,36,40)" fg:x="6960" fg:w="9"/><text x="10.2971%" y="1439.50"></text></g><g><title>unlink_chunk.isra.0 (21 samples, 0.03%)</title><rect x="10.0961%" y="1429" width="0.0303%" height="15" fill="rgb(213,64,8)" fg:x="6994" fg:w="21"/><text x="10.3461%" y="1439.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="10.1293%" y="1429" width="0.0231%" height="15" fill="rgb(210,75,36)" fg:x="7017" fg:w="16"/><text x="10.3793%" y="1439.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="10.1582%" y="1429" width="0.0101%" height="15" fill="rgb(229,88,21)" fg:x="7037" fg:w="7"/><text x="10.4082%" y="1439.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (10 samples, 0.01%)</title><rect x="10.1741%" y="1429" width="0.0144%" height="15" fill="rgb(252,204,47)" fg:x="7048" fg:w="10"/><text x="10.4241%" y="1439.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="10.1929%" y="1429" width="0.0159%" height="15" fill="rgb(208,77,27)" fg:x="7061" fg:w="11"/><text x="10.4429%" y="1439.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.05%)</title><rect x="10.2087%" y="1429" width="0.0462%" height="15" fill="rgb(221,76,26)" fg:x="7072" fg:w="32"/><text x="10.4587%" y="1439.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (89 samples, 0.13%)</title><rect x="10.2549%" y="1429" width="0.1285%" height="15" fill="rgb(225,139,18)" fg:x="7104" fg:w="89"/><text x="10.5049%" y="1439.50"></text></g><g><title>[anon] (3,670 samples, 5.30%)</title><rect x="5.1174%" y="1445" width="5.2978%" height="15" fill="rgb(230,137,11)" fg:x="3545" fg:w="3670"/><text x="5.3674%" y="1455.50">[anon]</text></g><g><title>[bitcoind-base] (22 samples, 0.03%)</title><rect x="10.4152%" y="1445" width="0.0318%" height="15" fill="rgb(212,28,1)" fg:x="7215" fg:w="22"/><text x="10.6652%" y="1455.50"></text></g><g><title>AutoFile::write (65 samples, 0.09%)</title><rect x="10.5047%" y="1429" width="0.0938%" height="15" fill="rgb(248,164,17)" fg:x="7277" fg:w="65"/><text x="10.7547%" y="1439.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (13 samples, 0.02%)</title><rect x="10.5797%" y="1413" width="0.0188%" height="15" fill="rgb(222,171,42)" fg:x="7329" fg:w="13"/><text x="10.8297%" y="1423.50"></text></g><g><title>CCoinsViewCache::FetchCoin (26 samples, 0.04%)</title><rect x="10.6230%" y="1429" width="0.0375%" height="15" fill="rgb(243,84,45)" fg:x="7359" fg:w="26"/><text x="10.8730%" y="1439.50"></text></g><g><title>CCoinsViewDB::GetCoin (9 samples, 0.01%)</title><rect x="10.6707%" y="1429" width="0.0130%" height="15" fill="rgb(252,49,23)" fg:x="7392" fg:w="9"/><text x="10.9207%" y="1439.50"></text></g><g><title>CSHA256::Write (30 samples, 0.04%)</title><rect x="10.6938%" y="1429" width="0.0433%" height="15" fill="rgb(215,19,7)" fg:x="7408" fg:w="30"/><text x="10.9438%" y="1439.50"></text></g><g><title>CScript::GetSigOpCount (8 samples, 0.01%)</title><rect x="10.7371%" y="1429" width="0.0115%" height="15" fill="rgb(238,81,41)" fg:x="7438" fg:w="8"/><text x="10.9871%" y="1439.50"></text></g><g><title>DataStream::read (14 samples, 0.02%)</title><rect x="10.7847%" y="1429" width="0.0202%" height="15" fill="rgb(210,199,37)" fg:x="7471" fg:w="14"/><text x="11.0347%" y="1439.50"></text></g><g><title>GetP2SHSigOpCount (7 samples, 0.01%)</title><rect x="10.8064%" y="1429" width="0.0101%" height="15" fill="rgb(244,192,49)" fg:x="7486" fg:w="7"/><text x="11.0564%" y="1439.50"></text></g><g><title>GetScriptOp (32 samples, 0.05%)</title><rect x="10.8165%" y="1429" width="0.0462%" height="15" fill="rgb(226,211,11)" fg:x="7493" fg:w="32"/><text x="11.0665%" y="1439.50"></text></g><g><title>SipHashUint256Extra (109 samples, 0.16%)</title><rect x="10.8641%" y="1429" width="0.1573%" height="15" fill="rgb(236,162,54)" fg:x="7526" fg:w="109"/><text x="11.1141%" y="1439.50"></text></g><g><title>[unknown] (64 samples, 0.09%)</title><rect x="11.0243%" y="1429" width="0.0924%" height="15" fill="rgb(220,229,9)" fg:x="7637" fg:w="64"/><text x="11.2743%" y="1439.50"></text></g><g><title>[unknown] (53 samples, 0.08%)</title><rect x="11.0402%" y="1413" width="0.0765%" height="15" fill="rgb(250,87,22)" fg:x="7648" fg:w="53"/><text x="11.2902%" y="1423.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="11.0503%" y="1397" width="0.0664%" height="15" fill="rgb(239,43,17)" fg:x="7655" fg:w="46"/><text x="11.3003%" y="1407.50"></text></g><g><title>[unknown] (33 samples, 0.05%)</title><rect x="11.0691%" y="1381" width="0.0476%" height="15" fill="rgb(231,177,25)" fg:x="7668" fg:w="33"/><text x="11.3191%" y="1391.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (348 samples, 0.50%)</title><rect x="11.1225%" y="1429" width="0.5024%" height="15" fill="rgb(219,179,1)" fg:x="7705" fg:w="348"/><text x="11.3725%" y="1439.50"></text></g><g><title>_IO_fwrite (353 samples, 0.51%)</title><rect x="11.6249%" y="1429" width="0.5096%" height="15" fill="rgb(238,219,53)" fg:x="8053" fg:w="353"/><text x="11.8749%" y="1439.50"></text></g><g><title>__memcmp_evex_movbe (12 samples, 0.02%)</title><rect x="12.1546%" y="1429" width="0.0173%" height="15" fill="rgb(232,167,36)" fg:x="8420" fg:w="12"/><text x="12.4046%" y="1439.50"></text></g><g><title>__memmove_avx512_unaligned_erms (187 samples, 0.27%)</title><rect x="12.1720%" y="1429" width="0.2699%" height="15" fill="rgb(244,19,51)" fg:x="8432" fg:w="187"/><text x="12.4220%" y="1439.50"></text></g><g><title>__mempcpy@plt (17 samples, 0.02%)</title><rect x="12.4419%" y="1429" width="0.0245%" height="15" fill="rgb(224,6,22)" fg:x="8619" fg:w="17"/><text x="12.6919%" y="1439.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (16 samples, 0.02%)</title><rect x="12.4664%" y="1429" width="0.0231%" height="15" fill="rgb(224,145,5)" fg:x="8636" fg:w="16"/><text x="12.7164%" y="1439.50"></text></g><g><title>__memset_avx512_unaligned (11 samples, 0.02%)</title><rect x="12.4895%" y="1429" width="0.0159%" height="15" fill="rgb(234,130,49)" fg:x="8652" fg:w="11"/><text x="12.7395%" y="1439.50"></text></g><g><title>_int_free (54 samples, 0.08%)</title><rect x="12.5155%" y="1429" width="0.0780%" height="15" fill="rgb(254,6,2)" fg:x="8670" fg:w="54"/><text x="12.7655%" y="1439.50"></text></g><g><title>_int_malloc (303 samples, 0.44%)</title><rect x="12.6021%" y="1429" width="0.4374%" height="15" fill="rgb(208,96,46)" fg:x="8730" fg:w="303"/><text x="12.8521%" y="1439.50"></text></g><g><title>cfree@GLIBC_2.2.5 (31 samples, 0.04%)</title><rect x="13.0410%" y="1429" width="0.0447%" height="15" fill="rgb(239,3,39)" fg:x="9034" fg:w="31"/><text x="13.2910%" y="1439.50"></text></g><g><title>free@plt (14 samples, 0.02%)</title><rect x="13.0872%" y="1429" width="0.0202%" height="15" fill="rgb(233,210,1)" fg:x="9066" fg:w="14"/><text x="13.3372%" y="1439.50"></text></g><g><title>fwrite@plt (14 samples, 0.02%)</title><rect x="13.1074%" y="1429" width="0.0202%" height="15" fill="rgb(244,137,37)" fg:x="9080" fg:w="14"/><text x="13.3574%" y="1439.50"></text></g><g><title>malloc (214 samples, 0.31%)</title><rect x="13.1709%" y="1429" width="0.3089%" height="15" fill="rgb(240,136,2)" fg:x="9124" fg:w="214"/><text x="13.4209%" y="1439.50"></text></g><g><title>memcpy@plt (14 samples, 0.02%)</title><rect x="13.5000%" y="1429" width="0.0202%" height="15" fill="rgb(239,18,37)" fg:x="9352" fg:w="14"/><text x="13.7500%" y="1439.50"></text></g><g><title>operator delete (20 samples, 0.03%)</title><rect x="13.5361%" y="1429" width="0.0289%" height="15" fill="rgb(218,185,22)" fg:x="9377" fg:w="20"/><text x="13.7861%" y="1439.50"></text></g><g><title>operator new (26 samples, 0.04%)</title><rect x="13.5650%" y="1429" width="0.0375%" height="15" fill="rgb(225,218,4)" fg:x="9397" fg:w="26"/><text x="13.8150%" y="1439.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (12 samples, 0.02%)</title><rect x="13.6169%" y="1429" width="0.0173%" height="15" fill="rgb(230,182,32)" fg:x="9433" fg:w="12"/><text x="13.8669%" y="1439.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (10 samples, 0.01%)</title><rect x="13.6429%" y="1429" width="0.0144%" height="15" fill="rgb(242,56,43)" fg:x="9451" fg:w="10"/><text x="13.8929%" y="1439.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (11 samples, 0.02%)</title><rect x="13.6833%" y="1429" width="0.0159%" height="15" fill="rgb(233,99,24)" fg:x="9479" fg:w="11"/><text x="13.9333%" y="1439.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="13.7079%" y="1429" width="0.0245%" height="15" fill="rgb(234,209,42)" fg:x="9496" fg:w="17"/><text x="13.9579%" y="1439.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="13.7324%" y="1429" width="0.0101%" height="15" fill="rgb(227,7,12)" fg:x="9513" fg:w="7"/><text x="13.9824%" y="1439.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="13.7555%" y="1429" width="0.0274%" height="15" fill="rgb(245,203,43)" fg:x="9529" fg:w="19"/><text x="14.0055%" y="1439.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (98 samples, 0.14%)</title><rect x="13.7916%" y="1429" width="0.1415%" height="15" fill="rgb(238,205,33)" fg:x="9554" fg:w="98"/><text x="14.0416%" y="1439.50"></text></g><g><title>[unknown] (2,418 samples, 3.49%)</title><rect x="10.4484%" y="1445" width="3.4905%" height="15" fill="rgb(231,56,7)" fg:x="7238" fg:w="2418"/><text x="10.6984%" y="1455.50">[un..</text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (120 samples, 0.17%)</title><rect x="13.9403%" y="1445" width="0.1732%" height="15" fill="rgb(244,186,29)" fg:x="9657" fg:w="120"/><text x="14.1903%" y="1455.50"></text></g><g><title>_IO_fwrite (28 samples, 0.04%)</title><rect x="14.1135%" y="1445" width="0.0404%" height="15" fill="rgb(234,111,31)" fg:x="9777" fg:w="28"/><text x="14.3635%" y="1455.50"></text></g><g><title>AddCoins (7 samples, 0.01%)</title><rect x="14.2117%" y="1205" width="0.0101%" height="15" fill="rgb(241,149,10)" fg:x="9845" fg:w="7"/><text x="14.4617%" y="1215.50"></text></g><g><title>SipHashUint256Extra (17 samples, 0.02%)</title><rect x="14.2680%" y="1141" width="0.0245%" height="15" fill="rgb(249,206,44)" fg:x="9884" fg:w="17"/><text x="14.5180%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (34 samples, 0.05%)</title><rect x="14.2954%" y="1141" width="0.0491%" height="15" fill="rgb(251,153,30)" fg:x="9903" fg:w="34"/><text x="14.5454%" y="1151.50"></text></g><g><title>SipHashUint256Extra (451 samples, 0.65%)</title><rect x="14.3459%" y="1125" width="0.6510%" height="15" fill="rgb(239,152,38)" fg:x="9938" fg:w="451"/><text x="14.5959%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (207 samples, 0.30%)</title><rect x="14.6982%" y="1109" width="0.2988%" height="15" fill="rgb(249,139,47)" fg:x="10182" fg:w="207"/><text x="14.9482%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (207 samples, 0.30%)</title><rect x="14.6982%" y="1093" width="0.2988%" height="15" fill="rgb(244,64,35)" fg:x="10182" fg:w="207"/><text x="14.9482%" y="1103.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (7 samples, 0.01%)</title><rect x="16.0464%" y="1029" width="0.0101%" height="15" fill="rgb(216,46,15)" fg:x="11116" fg:w="7"/><text x="16.2964%" y="1039.50"></text></g><g><title>ReadLE64 (7 samples, 0.01%)</title><rect x="16.0464%" y="1013" width="0.0101%" height="15" fill="rgb(250,74,19)" fg:x="11116" fg:w="7"/><text x="16.2964%" y="1023.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.01%)</title><rect x="16.0464%" y="997" width="0.0101%" height="15" fill="rgb(249,42,33)" fg:x="11116" fg:w="7"/><text x="16.2964%" y="1007.50"></text></g><g><title>SipHashUint256Extra (1,136 samples, 1.64%)</title><rect x="15.0331%" y="1045" width="1.6399%" height="15" fill="rgb(242,149,17)" fg:x="10414" fg:w="1136"/><text x="15.2831%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (427 samples, 0.62%)</title><rect x="16.0565%" y="1029" width="0.6164%" height="15" fill="rgb(244,29,21)" fg:x="11123" fg:w="427"/><text x="16.3065%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (427 samples, 0.62%)</title><rect x="16.0565%" y="1013" width="0.6164%" height="15" fill="rgb(220,130,37)" fg:x="11123" fg:w="427"/><text x="16.3065%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (59 samples, 0.09%)</title><rect x="16.7682%" y="1029" width="0.0852%" height="15" fill="rgb(211,67,2)" fg:x="11616" fg:w="59"/><text x="17.0182%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (57 samples, 0.08%)</title><rect x="16.7711%" y="1013" width="0.0823%" height="15" fill="rgb(235,68,52)" fg:x="11618" fg:w="57"/><text x="17.0211%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (57 samples, 0.08%)</title><rect x="16.7711%" y="997" width="0.0823%" height="15" fill="rgb(246,142,3)" fg:x="11618" fg:w="57"/><text x="17.0211%" y="1007.50"></text></g><g><title>SaltedOutpointHasher::operator (57 samples, 0.08%)</title><rect x="16.7711%" y="981" width="0.0823%" height="15" fill="rgb(241,25,7)" fg:x="11618" fg:w="57"/><text x="17.0211%" y="991.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (19 samples, 0.03%)</title><rect x="16.8259%" y="965" width="0.0274%" height="15" fill="rgb(242,119,39)" fg:x="11656" fg:w="19"/><text x="17.0759%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (126 samples, 0.18%)</title><rect x="16.6729%" y="1045" width="0.1819%" height="15" fill="rgb(241,98,45)" fg:x="11550" fg:w="126"/><text x="16.9229%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,270 samples, 1.83%)</title><rect x="15.0258%" y="1109" width="1.8333%" height="15" fill="rgb(254,28,30)" fg:x="10409" fg:w="1270"/><text x="15.2758%" y="1119.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,270 samples, 1.83%)</title><rect x="15.0258%" y="1093" width="1.8333%" height="15" fill="rgb(241,142,54)" fg:x="10409" fg:w="1270"/><text x="15.2758%" y="1103.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1,270 samples, 1.83%)</title><rect x="15.0258%" y="1077" width="1.8333%" height="15" fill="rgb(222,85,15)" fg:x="10409" fg:w="1270"/><text x="15.2758%" y="1087.50">s..</text></g><g><title>SaltedOutpointHasher::operator (1,270 samples, 1.83%)</title><rect x="15.0258%" y="1061" width="1.8333%" height="15" fill="rgb(210,85,47)" fg:x="10409" fg:w="1270"/><text x="15.2758%" y="1071.50">S..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,291 samples, 1.86%)</title><rect x="14.9970%" y="1125" width="1.8636%" height="15" fill="rgb(224,206,25)" fg:x="10389" fg:w="1291"/><text x="15.2470%" y="1135.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,744 samples, 2.52%)</title><rect x="14.3445%" y="1141" width="2.5175%" height="15" fill="rgb(243,201,19)" fg:x="9937" fg:w="1744"/><text x="14.5945%" y="1151.50">st..</text></g><g><title>SipHashUint256Extra (305 samples, 0.44%)</title><rect x="16.8620%" y="1125" width="0.4403%" height="15" fill="rgb(236,59,4)" fg:x="11681" fg:w="305"/><text x="17.1120%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (158 samples, 0.23%)</title><rect x="17.0742%" y="1109" width="0.2281%" height="15" fill="rgb(254,179,45)" fg:x="11828" fg:w="158"/><text x="17.3242%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (158 samples, 0.23%)</title><rect x="17.0742%" y="1093" width="0.2281%" height="15" fill="rgb(226,14,10)" fg:x="11828" fg:w="158"/><text x="17.3242%" y="1103.50"></text></g><g><title>CCoinsViewCache::BatchWrite (7 samples, 0.01%)</title><rect x="17.3038%" y="1045" width="0.0101%" height="15" fill="rgb(244,27,41)" fg:x="11987" fg:w="7"/><text x="17.5538%" y="1055.50"></text></g><g><title>SipHashUint256Extra (203 samples, 0.29%)</title><rect x="17.3139%" y="1045" width="0.2930%" height="15" fill="rgb(235,35,32)" fg:x="11994" fg:w="203"/><text x="17.5639%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (76 samples, 0.11%)</title><rect x="17.4972%" y="1029" width="0.1097%" height="15" fill="rgb(218,68,31)" fg:x="12121" fg:w="76"/><text x="17.7472%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (76 samples, 0.11%)</title><rect x="17.4972%" y="1013" width="0.1097%" height="15" fill="rgb(207,120,37)" fg:x="12121" fg:w="76"/><text x="17.7472%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (316 samples, 0.46%)</title><rect x="17.6069%" y="1045" width="0.4562%" height="15" fill="rgb(227,98,0)" fg:x="12197" fg:w="316"/><text x="17.8569%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (532 samples, 0.77%)</title><rect x="17.3023%" y="1125" width="0.7680%" height="15" fill="rgb(207,7,3)" fg:x="11986" fg:w="532"/><text x="17.5523%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (531 samples, 0.77%)</title><rect x="17.3038%" y="1109" width="0.7665%" height="15" fill="rgb(206,98,19)" fg:x="11987" fg:w="531"/><text x="17.5538%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (531 samples, 0.77%)</title><rect x="17.3038%" y="1093" width="0.7665%" height="15" fill="rgb(217,5,26)" fg:x="11987" fg:w="531"/><text x="17.5538%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (531 samples, 0.77%)</title><rect x="17.3038%" y="1077" width="0.7665%" height="15" fill="rgb(235,190,38)" fg:x="11987" fg:w="531"/><text x="17.5538%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (531 samples, 0.77%)</title><rect x="17.3038%" y="1061" width="0.7665%" height="15" fill="rgb(247,86,24)" fg:x="11987" fg:w="531"/><text x="17.5538%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (12 samples, 0.02%)</title><rect x="18.1092%" y="1093" width="0.0173%" height="15" fill="rgb(205,101,16)" fg:x="12545" fg:w="12"/><text x="18.3592%" y="1103.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (12 samples, 0.02%)</title><rect x="18.1092%" y="1077" width="0.0173%" height="15" fill="rgb(246,168,33)" fg:x="12545" fg:w="12"/><text x="18.3592%" y="1087.50"></text></g><g><title>__memset_avx512_unaligned_erms (12 samples, 0.02%)</title><rect x="18.1092%" y="1061" width="0.0173%" height="15" fill="rgb(231,114,1)" fg:x="12545" fg:w="12"/><text x="18.3592%" y="1071.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="18.1107%" y="1045" width="0.0159%" height="15" fill="rgb(207,184,53)" fg:x="12546" fg:w="11"/><text x="18.3607%" y="1055.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="18.1107%" y="1029" width="0.0159%" height="15" fill="rgb(224,95,51)" fg:x="12546" fg:w="11"/><text x="18.3607%" y="1039.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="18.1121%" y="1013" width="0.0144%" height="15" fill="rgb(212,188,45)" fg:x="12547" fg:w="10"/><text x="18.3621%" y="1023.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="18.1121%" y="997" width="0.0144%" height="15" fill="rgb(223,154,38)" fg:x="12547" fg:w="10"/><text x="18.3621%" y="1007.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="18.1121%" y="981" width="0.0144%" height="15" fill="rgb(251,22,52)" fg:x="12547" fg:w="10"/><text x="18.3621%" y="991.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="18.1150%" y="965" width="0.0115%" height="15" fill="rgb(229,209,22)" fg:x="12549" fg:w="8"/><text x="18.3650%" y="975.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="18.1165%" y="949" width="0.0101%" height="15" fill="rgb(234,138,34)" fg:x="12550" fg:w="7"/><text x="18.3665%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (878 samples, 1.27%)</title><rect x="16.8620%" y="1141" width="1.2674%" height="15" fill="rgb(212,95,11)" fg:x="11681" fg:w="878"/><text x="17.1120%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (41 samples, 0.06%)</title><rect x="18.0703%" y="1125" width="0.0592%" height="15" fill="rgb(240,179,47)" fg:x="12518" fg:w="41"/><text x="18.3203%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (41 samples, 0.06%)</title><rect x="18.0703%" y="1109" width="0.0592%" height="15" fill="rgb(240,163,11)" fg:x="12518" fg:w="41"/><text x="18.3203%" y="1119.50"></text></g><g><title>SipHashUint256Extra (28 samples, 0.04%)</title><rect x="18.1323%" y="1125" width="0.0404%" height="15" fill="rgb(236,37,12)" fg:x="12561" fg:w="28"/><text x="18.3823%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="18.1598%" y="1109" width="0.0130%" height="15" fill="rgb(232,164,16)" fg:x="12580" fg:w="9"/><text x="18.4098%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="18.1598%" y="1093" width="0.0130%" height="15" fill="rgb(244,205,15)" fg:x="12580" fg:w="9"/><text x="18.4098%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (55 samples, 0.08%)</title><rect x="18.1728%" y="1125" width="0.0794%" height="15" fill="rgb(223,117,47)" fg:x="12589" fg:w="55"/><text x="18.4228%" y="1135.50"></text></g><g><title>decltype  (11 samples, 0.02%)</title><rect x="18.2522%" y="1109" width="0.0159%" height="15" fill="rgb(244,107,35)" fg:x="12644" fg:w="11"/><text x="18.5022%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (11 samples, 0.02%)</title><rect x="18.2522%" y="1093" width="0.0159%" height="15" fill="rgb(205,140,8)" fg:x="12644" fg:w="11"/><text x="18.5022%" y="1103.50"></text></g><g><title>decltype  (11 samples, 0.02%)</title><rect x="18.2522%" y="1077" width="0.0159%" height="15" fill="rgb(228,84,46)" fg:x="12644" fg:w="11"/><text x="18.5022%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (11 samples, 0.02%)</title><rect x="18.2522%" y="1061" width="0.0159%" height="15" fill="rgb(254,188,9)" fg:x="12644" fg:w="11"/><text x="18.5022%" y="1071.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (11 samples, 0.02%)</title><rect x="18.2522%" y="1045" width="0.0159%" height="15" fill="rgb(206,112,54)" fg:x="12644" fg:w="11"/><text x="18.5022%" y="1055.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="18.2536%" y="1029" width="0.0144%" height="15" fill="rgb(216,84,49)" fg:x="12645" fg:w="10"/><text x="18.5036%" y="1039.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="18.2536%" y="1013" width="0.0144%" height="15" fill="rgb(214,194,35)" fg:x="12645" fg:w="10"/><text x="18.5036%" y="1023.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="18.2536%" y="997" width="0.0144%" height="15" fill="rgb(249,28,3)" fg:x="12645" fg:w="10"/><text x="18.5036%" y="1007.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="18.2550%" y="981" width="0.0130%" height="15" fill="rgb(222,56,52)" fg:x="12646" fg:w="9"/><text x="18.5050%" y="991.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="18.2565%" y="965" width="0.0115%" height="15" fill="rgb(245,217,50)" fg:x="12647" fg:w="8"/><text x="18.5065%" y="975.50"></text></g><g><title>malloc_consolidate (23 samples, 0.03%)</title><rect x="18.3835%" y="965" width="0.0332%" height="15" fill="rgb(213,201,24)" fg:x="12735" fg:w="23"/><text x="18.6335%" y="975.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (104 samples, 0.15%)</title><rect x="18.2680%" y="1045" width="0.1501%" height="15" fill="rgb(248,116,28)" fg:x="12655" fg:w="104"/><text x="18.5180%" y="1055.50"></text></g><g><title>operator new (104 samples, 0.15%)</title><rect x="18.2680%" y="1029" width="0.1501%" height="15" fill="rgb(219,72,43)" fg:x="12655" fg:w="104"/><text x="18.5180%" y="1039.50"></text></g><g><title>__posix_memalign (104 samples, 0.15%)</title><rect x="18.2680%" y="1013" width="0.1501%" height="15" fill="rgb(209,138,14)" fg:x="12655" fg:w="104"/><text x="18.5180%" y="1023.50"></text></g><g><title>malloc (104 samples, 0.15%)</title><rect x="18.2680%" y="997" width="0.1501%" height="15" fill="rgb(222,18,33)" fg:x="12655" fg:w="104"/><text x="18.5180%" y="1007.50"></text></g><g><title>_int_malloc (104 samples, 0.15%)</title><rect x="18.2680%" y="981" width="0.1501%" height="15" fill="rgb(213,199,7)" fg:x="12655" fg:w="104"/><text x="18.5180%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (202 samples, 0.29%)</title><rect x="18.1295%" y="1141" width="0.2916%" height="15" fill="rgb(250,110,10)" fg:x="12559" fg:w="202"/><text x="18.3795%" y="1151.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (117 samples, 0.17%)</title><rect x="18.2522%" y="1125" width="0.1689%" height="15" fill="rgb(248,123,6)" fg:x="12644" fg:w="117"/><text x="18.5022%" y="1135.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (106 samples, 0.15%)</title><rect x="18.2680%" y="1109" width="0.1530%" height="15" fill="rgb(206,91,31)" fg:x="12655" fg:w="106"/><text x="18.5180%" y="1119.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (106 samples, 0.15%)</title><rect x="18.2680%" y="1093" width="0.1530%" height="15" fill="rgb(211,154,13)" fg:x="12655" fg:w="106"/><text x="18.5180%" y="1103.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (106 samples, 0.15%)</title><rect x="18.2680%" y="1077" width="0.1530%" height="15" fill="rgb(225,148,7)" fg:x="12655" fg:w="106"/><text x="18.5180%" y="1087.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (106 samples, 0.15%)</title><rect x="18.2680%" y="1061" width="0.1530%" height="15" fill="rgb(220,160,43)" fg:x="12655" fg:w="106"/><text x="18.5180%" y="1071.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.01%)</title><rect x="18.4239%" y="1109" width="0.0115%" height="15" fill="rgb(213,52,39)" fg:x="12763" fg:w="8"/><text x="18.6739%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (2,900 samples, 4.19%)</title><rect x="14.2636%" y="1173" width="4.1863%" height="15" fill="rgb(243,137,7)" fg:x="9881" fg:w="2900"/><text x="14.5136%" y="1183.50">std::..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (2,900 samples, 4.19%)</title><rect x="14.2636%" y="1157" width="4.1863%" height="15" fill="rgb(230,79,13)" fg:x="9881" fg:w="2900"/><text x="14.5136%" y="1167.50">std::..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (20 samples, 0.03%)</title><rect x="18.4211%" y="1141" width="0.0289%" height="15" fill="rgb(247,105,23)" fg:x="12761" fg:w="20"/><text x="18.6711%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (20 samples, 0.03%)</title><rect x="18.4211%" y="1125" width="0.0289%" height="15" fill="rgb(223,179,41)" fg:x="12761" fg:w="20"/><text x="18.6711%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (10 samples, 0.01%)</title><rect x="18.4355%" y="1109" width="0.0144%" height="15" fill="rgb(218,9,34)" fg:x="12771" fg:w="10"/><text x="18.6855%" y="1119.50"></text></g><g><title>MallocUsage (10 samples, 0.01%)</title><rect x="18.4961%" y="1077" width="0.0144%" height="15" fill="rgb(222,106,8)" fg:x="12813" fg:w="10"/><text x="18.7461%" y="1087.50"></text></g><g><title>Coin::DynamicMemoryUsage (15 samples, 0.02%)</title><rect x="18.4947%" y="1125" width="0.0217%" height="15" fill="rgb(211,220,0)" fg:x="12812" fg:w="15"/><text x="18.7447%" y="1135.50"></text></g><g><title>Coin::DynamicMemoryUsage (15 samples, 0.02%)</title><rect x="18.4947%" y="1109" width="0.0217%" height="15" fill="rgb(229,52,16)" fg:x="12812" fg:w="15"/><text x="18.7447%" y="1119.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (15 samples, 0.02%)</title><rect x="18.4947%" y="1093" width="0.0217%" height="15" fill="rgb(212,155,18)" fg:x="12812" fg:w="15"/><text x="18.7447%" y="1103.50"></text></g><g><title>CCoinsViewCache::BatchWrite (55 samples, 0.08%)</title><rect x="18.4499%" y="1141" width="0.0794%" height="15" fill="rgb(242,21,14)" fg:x="12781" fg:w="55"/><text x="18.6999%" y="1151.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (7 samples, 0.01%)</title><rect x="18.5192%" y="1125" width="0.0101%" height="15" fill="rgb(222,19,48)" fg:x="12829" fg:w="7"/><text x="18.7692%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (7 samples, 0.01%)</title><rect x="18.5192%" y="1109" width="0.0101%" height="15" fill="rgb(232,45,27)" fg:x="12829" fg:w="7"/><text x="18.7692%" y="1119.50"></text></g><g><title>SipHashUint256Extra (1,619 samples, 2.34%)</title><rect x="18.5293%" y="1141" width="2.3371%" height="15" fill="rgb(249,103,42)" fg:x="12836" fg:w="1619"/><text x="18.7793%" y="1151.50">S..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (818 samples, 1.18%)</title><rect x="19.6856%" y="1125" width="1.1808%" height="15" fill="rgb(246,81,33)" fg:x="13637" fg:w="818"/><text x="19.9356%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (818 samples, 1.18%)</title><rect x="19.6856%" y="1109" width="1.1808%" height="15" fill="rgb(252,33,42)" fg:x="13637" fg:w="818"/><text x="19.9356%" y="1119.50"></text></g><g><title>SipHashUint256Extra (13 samples, 0.02%)</title><rect x="20.8765%" y="1061" width="0.0188%" height="15" fill="rgb(209,212,41)" fg:x="14462" fg:w="13"/><text x="21.1265%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="20.8852%" y="1045" width="0.0101%" height="15" fill="rgb(207,154,6)" fg:x="14468" fg:w="7"/><text x="21.1352%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="20.8852%" y="1029" width="0.0101%" height="15" fill="rgb(223,64,47)" fg:x="14468" fg:w="7"/><text x="21.1352%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="20.8982%" y="1061" width="0.0115%" height="15" fill="rgb(211,161,38)" fg:x="14477" fg:w="8"/><text x="21.1482%" y="1071.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (8 samples, 0.01%)</title><rect x="20.8982%" y="1045" width="0.0115%" height="15" fill="rgb(219,138,40)" fg:x="14477" fg:w="8"/><text x="21.1482%" y="1055.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (8 samples, 0.01%)</title><rect x="20.8982%" y="1029" width="0.0115%" height="15" fill="rgb(241,228,46)" fg:x="14477" fg:w="8"/><text x="21.1482%" y="1039.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (8 samples, 0.01%)</title><rect x="20.8982%" y="1013" width="0.0115%" height="15" fill="rgb(223,209,38)" fg:x="14477" fg:w="8"/><text x="21.1482%" y="1023.50"></text></g><g><title>operator== (8 samples, 0.01%)</title><rect x="20.8982%" y="997" width="0.0115%" height="15" fill="rgb(236,164,45)" fg:x="14477" fg:w="8"/><text x="21.1482%" y="1007.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (8 samples, 0.01%)</title><rect x="20.8982%" y="981" width="0.0115%" height="15" fill="rgb(231,15,5)" fg:x="14477" fg:w="8"/><text x="21.1482%" y="991.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (8 samples, 0.01%)</title><rect x="20.8982%" y="965" width="0.0115%" height="15" fill="rgb(252,35,15)" fg:x="14477" fg:w="8"/><text x="21.1482%" y="975.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (8 samples, 0.01%)</title><rect x="20.8982%" y="949" width="0.0115%" height="15" fill="rgb(248,181,18)" fg:x="14477" fg:w="8"/><text x="21.1482%" y="959.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (37 samples, 0.05%)</title><rect x="20.8736%" y="1093" width="0.0534%" height="15" fill="rgb(233,39,42)" fg:x="14460" fg:w="37"/><text x="21.1236%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (37 samples, 0.05%)</title><rect x="20.8736%" y="1077" width="0.0534%" height="15" fill="rgb(238,110,33)" fg:x="14460" fg:w="37"/><text x="21.1236%" y="1087.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (11 samples, 0.02%)</title><rect x="20.9112%" y="1061" width="0.0159%" height="15" fill="rgb(233,195,10)" fg:x="14486" fg:w="11"/><text x="21.1612%" y="1071.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="20.9112%" y="1045" width="0.0159%" height="15" fill="rgb(254,105,3)" fg:x="14486" fg:w="11"/><text x="21.1612%" y="1055.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="20.9112%" y="1029" width="0.0159%" height="15" fill="rgb(221,225,9)" fg:x="14486" fg:w="11"/><text x="21.1612%" y="1039.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="20.9112%" y="1013" width="0.0159%" height="15" fill="rgb(224,227,45)" fg:x="14486" fg:w="11"/><text x="21.1612%" y="1023.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="20.9112%" y="997" width="0.0159%" height="15" fill="rgb(229,198,43)" fg:x="14486" fg:w="11"/><text x="21.1612%" y="1007.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="20.9112%" y="981" width="0.0159%" height="15" fill="rgb(206,209,35)" fg:x="14486" fg:w="11"/><text x="21.1612%" y="991.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="20.9141%" y="965" width="0.0130%" height="15" fill="rgb(245,195,53)" fg:x="14488" fg:w="9"/><text x="21.1641%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (38 samples, 0.05%)</title><rect x="20.8736%" y="1125" width="0.0549%" height="15" fill="rgb(240,92,26)" fg:x="14460" fg:w="38"/><text x="21.1236%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (38 samples, 0.05%)</title><rect x="20.8736%" y="1109" width="0.0549%" height="15" fill="rgb(207,40,23)" fg:x="14460" fg:w="38"/><text x="21.1236%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (51 samples, 0.07%)</title><rect x="20.8664%" y="1141" width="0.0736%" height="15" fill="rgb(223,111,35)" fg:x="14455" fg:w="51"/><text x="21.1164%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (134 samples, 0.19%)</title><rect x="20.9400%" y="1141" width="0.1934%" height="15" fill="rgb(229,147,28)" fg:x="14506" fg:w="134"/><text x="21.1900%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (79 samples, 0.11%)</title><rect x="21.0194%" y="1125" width="0.1140%" height="15" fill="rgb(211,29,28)" fg:x="14561" fg:w="79"/><text x="21.2694%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (79 samples, 0.11%)</title><rect x="21.0194%" y="1109" width="0.1140%" height="15" fill="rgb(228,72,33)" fg:x="14561" fg:w="79"/><text x="21.2694%" y="1119.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (79 samples, 0.11%)</title><rect x="21.0194%" y="1093" width="0.1140%" height="15" fill="rgb(205,214,31)" fg:x="14561" fg:w="79"/><text x="21.2694%" y="1103.50"></text></g><g><title>operator== (79 samples, 0.11%)</title><rect x="21.0194%" y="1077" width="0.1140%" height="15" fill="rgb(224,111,15)" fg:x="14561" fg:w="79"/><text x="21.2694%" y="1087.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (76 samples, 0.11%)</title><rect x="21.0238%" y="1061" width="0.1097%" height="15" fill="rgb(253,21,26)" fg:x="14564" fg:w="76"/><text x="21.2738%" y="1071.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (76 samples, 0.11%)</title><rect x="21.0238%" y="1045" width="0.1097%" height="15" fill="rgb(245,139,43)" fg:x="14564" fg:w="76"/><text x="21.2738%" y="1055.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (76 samples, 0.11%)</title><rect x="21.0238%" y="1029" width="0.1097%" height="15" fill="rgb(252,170,7)" fg:x="14564" fg:w="76"/><text x="21.2738%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.01%)</title><rect x="21.1797%" y="1061" width="0.0130%" height="15" fill="rgb(231,118,14)" fg:x="14672" fg:w="9"/><text x="21.4297%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (27 samples, 0.04%)</title><rect x="21.1551%" y="1093" width="0.0390%" height="15" fill="rgb(238,83,0)" fg:x="14655" fg:w="27"/><text x="21.4051%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (27 samples, 0.04%)</title><rect x="21.1551%" y="1077" width="0.0390%" height="15" fill="rgb(221,39,39)" fg:x="14655" fg:w="27"/><text x="21.4051%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (28 samples, 0.04%)</title><rect x="21.1551%" y="1125" width="0.0404%" height="15" fill="rgb(222,119,46)" fg:x="14655" fg:w="28"/><text x="21.4051%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (28 samples, 0.04%)</title><rect x="21.1551%" y="1109" width="0.0404%" height="15" fill="rgb(222,165,49)" fg:x="14655" fg:w="28"/><text x="21.4051%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (45 samples, 0.06%)</title><rect x="21.1335%" y="1141" width="0.0650%" height="15" fill="rgb(219,113,52)" fg:x="14640" fg:w="45"/><text x="21.3835%" y="1151.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (1,909 samples, 2.76%)</title><rect x="18.4499%" y="1173" width="2.7557%" height="15" fill="rgb(214,7,15)" fg:x="12781" fg:w="1909"/><text x="18.6999%" y="1183.50">st..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1,909 samples, 2.76%)</title><rect x="18.4499%" y="1157" width="2.7557%" height="15" fill="rgb(235,32,4)" fg:x="12781" fg:w="1909"/><text x="18.6999%" y="1167.50">st..</text></g><g><title>SipHashUint256Extra (114 samples, 0.16%)</title><rect x="21.2100%" y="1157" width="0.1646%" height="15" fill="rgb(238,90,54)" fg:x="14693" fg:w="114"/><text x="21.4600%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (50 samples, 0.07%)</title><rect x="21.3024%" y="1141" width="0.0722%" height="15" fill="rgb(213,208,19)" fg:x="14757" fg:w="50"/><text x="21.5524%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (50 samples, 0.07%)</title><rect x="21.3024%" y="1125" width="0.0722%" height="15" fill="rgb(233,156,4)" fg:x="14757" fg:w="50"/><text x="21.5524%" y="1135.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (37 samples, 0.05%)</title><rect x="21.4467%" y="1093" width="0.0534%" height="15" fill="rgb(207,194,5)" fg:x="14857" fg:w="37"/><text x="21.6967%" y="1103.50"></text></g><g><title>Coin::DynamicMemoryUsage (16 samples, 0.02%)</title><rect x="21.5001%" y="1093" width="0.0231%" height="15" fill="rgb(206,111,30)" fg:x="14894" fg:w="16"/><text x="21.7501%" y="1103.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (10 samples, 0.01%)</title><rect x="21.5088%" y="1077" width="0.0144%" height="15" fill="rgb(243,70,54)" fg:x="14900" fg:w="10"/><text x="21.7588%" y="1087.50"></text></g><g><title>Coin::operator= (10 samples, 0.01%)</title><rect x="21.5232%" y="1093" width="0.0144%" height="15" fill="rgb(242,28,8)" fg:x="14910" fg:w="10"/><text x="21.7732%" y="1103.50"></text></g><g><title>CTxOut::operator= (7 samples, 0.01%)</title><rect x="21.5276%" y="1077" width="0.0101%" height="15" fill="rgb(219,106,18)" fg:x="14913" fg:w="7"/><text x="21.7776%" y="1087.50"></text></g><g><title>CoinsViewCacheCursor::NextAndMaybeErase (21 samples, 0.03%)</title><rect x="21.5377%" y="1093" width="0.0303%" height="15" fill="rgb(244,222,10)" fg:x="14920" fg:w="21"/><text x="21.7877%" y="1103.50"></text></g><g><title>CCoinsCacheEntry::Next (11 samples, 0.02%)</title><rect x="21.5521%" y="1077" width="0.0159%" height="15" fill="rgb(236,179,52)" fg:x="14930" fg:w="11"/><text x="21.8021%" y="1087.50"></text></g><g><title>CCoinsViewCache::BatchWrite (151 samples, 0.22%)</title><rect x="21.3904%" y="1109" width="0.2180%" height="15" fill="rgb(213,23,39)" fg:x="14818" fg:w="151"/><text x="21.6404%" y="1119.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (21 samples, 0.03%)</title><rect x="21.5781%" y="1093" width="0.0303%" height="15" fill="rgb(238,48,10)" fg:x="14948" fg:w="21"/><text x="21.8281%" y="1103.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (18 samples, 0.03%)</title><rect x="23.1140%" y="1093" width="0.0260%" height="15" fill="rgb(251,196,23)" fg:x="16012" fg:w="18"/><text x="23.3640%" y="1103.50"></text></g><g><title>ReadLE64 (18 samples, 0.03%)</title><rect x="23.1140%" y="1077" width="0.0260%" height="15" fill="rgb(250,152,24)" fg:x="16012" fg:w="18"/><text x="23.3640%" y="1087.50"></text></g><g><title>SipHashUint256Extra (18 samples, 0.03%)</title><rect x="23.1140%" y="1061" width="0.0260%" height="15" fill="rgb(209,150,17)" fg:x="16012" fg:w="18"/><text x="23.3640%" y="1071.50"></text></g><g><title>SipHashUint256Extra (1,729 samples, 2.50%)</title><rect x="21.6084%" y="1109" width="2.4959%" height="15" fill="rgb(234,202,34)" fg:x="14969" fg:w="1729"/><text x="21.8584%" y="1119.50">Si..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (668 samples, 0.96%)</title><rect x="23.1400%" y="1093" width="0.9643%" height="15" fill="rgb(253,148,53)" fg:x="16030" fg:w="668"/><text x="23.3900%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (668 samples, 0.96%)</title><rect x="23.1400%" y="1077" width="0.9643%" height="15" fill="rgb(218,129,16)" fg:x="16030" fg:w="668"/><text x="23.3900%" y="1087.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (7 samples, 0.01%)</title><rect x="24.1129%" y="981" width="0.0101%" height="15" fill="rgb(216,85,19)" fg:x="16704" fg:w="7"/><text x="24.3629%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (14 samples, 0.02%)</title><rect x="24.1043%" y="1109" width="0.0202%" height="15" fill="rgb(235,228,7)" fg:x="16698" fg:w="14"/><text x="24.3543%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (10 samples, 0.01%)</title><rect x="24.1101%" y="1093" width="0.0144%" height="15" fill="rgb(245,175,0)" fg:x="16702" fg:w="10"/><text x="24.3601%" y="1103.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (8 samples, 0.01%)</title><rect x="24.1129%" y="1077" width="0.0115%" height="15" fill="rgb(208,168,36)" fg:x="16704" fg:w="8"/><text x="24.3629%" y="1087.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (8 samples, 0.01%)</title><rect x="24.1129%" y="1061" width="0.0115%" height="15" fill="rgb(246,171,24)" fg:x="16704" fg:w="8"/><text x="24.3629%" y="1071.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (8 samples, 0.01%)</title><rect x="24.1129%" y="1045" width="0.0115%" height="15" fill="rgb(215,142,24)" fg:x="16704" fg:w="8"/><text x="24.3629%" y="1055.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (8 samples, 0.01%)</title><rect x="24.1129%" y="1029" width="0.0115%" height="15" fill="rgb(250,187,7)" fg:x="16704" fg:w="8"/><text x="24.3629%" y="1039.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (8 samples, 0.01%)</title><rect x="24.1129%" y="1013" width="0.0115%" height="15" fill="rgb(228,66,33)" fg:x="16704" fg:w="8"/><text x="24.3629%" y="1023.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (8 samples, 0.01%)</title><rect x="24.1129%" y="997" width="0.0115%" height="15" fill="rgb(234,215,21)" fg:x="16704" fg:w="8"/><text x="24.3629%" y="1007.50"></text></g><g><title>[[xt_MASQUERADE]] (9 samples, 0.01%)</title><rect x="24.4493%" y="981" width="0.0130%" height="15" fill="rgb(222,191,20)" fg:x="16937" fg:w="9"/><text x="24.6993%" y="991.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="24.4507%" y="965" width="0.0115%" height="15" fill="rgb(245,79,54)" fg:x="16938" fg:w="8"/><text x="24.7007%" y="975.50"></text></g><g><title>[[igc]] (35 samples, 0.05%)</title><rect x="24.4421%" y="997" width="0.0505%" height="15" fill="rgb(240,10,37)" fg:x="16932" fg:w="35"/><text x="24.6921%" y="1007.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="24.4623%" y="981" width="0.0303%" height="15" fill="rgb(214,192,32)" fg:x="16946" fg:w="21"/><text x="24.7123%" y="991.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="24.4666%" y="965" width="0.0260%" height="15" fill="rgb(209,36,54)" fg:x="16949" fg:w="18"/><text x="24.7166%" y="975.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="24.4709%" y="949" width="0.0217%" height="15" fill="rgb(220,10,11)" fg:x="16952" fg:w="15"/><text x="24.7209%" y="959.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="24.4738%" y="933" width="0.0188%" height="15" fill="rgb(221,106,17)" fg:x="16954" fg:w="13"/><text x="24.7238%" y="943.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="24.4753%" y="917" width="0.0173%" height="15" fill="rgb(251,142,44)" fg:x="16955" fg:w="12"/><text x="24.7253%" y="927.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="24.4796%" y="901" width="0.0130%" height="15" fill="rgb(238,13,15)" fg:x="16958" fg:w="9"/><text x="24.7296%" y="911.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="24.4825%" y="885" width="0.0101%" height="15" fill="rgb(208,107,27)" fg:x="16960" fg:w="7"/><text x="24.7325%" y="895.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="24.4825%" y="869" width="0.0101%" height="15" fill="rgb(205,136,37)" fg:x="16960" fg:w="7"/><text x="24.7325%" y="879.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="24.4825%" y="853" width="0.0101%" height="15" fill="rgb(250,205,27)" fg:x="16960" fg:w="7"/><text x="24.7325%" y="863.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="24.4825%" y="837" width="0.0101%" height="15" fill="rgb(210,80,43)" fg:x="16960" fg:w="7"/><text x="24.7325%" y="847.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="24.4825%" y="821" width="0.0101%" height="15" fill="rgb(247,160,36)" fg:x="16960" fg:w="7"/><text x="24.7325%" y="831.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="24.4349%" y="1093" width="0.0722%" height="15" fill="rgb(234,13,49)" fg:x="16927" fg:w="50"/><text x="24.6849%" y="1103.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="24.4363%" y="1077" width="0.0707%" height="15" fill="rgb(234,122,0)" fg:x="16928" fg:w="49"/><text x="24.6863%" y="1087.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="24.4363%" y="1061" width="0.0707%" height="15" fill="rgb(207,146,38)" fg:x="16928" fg:w="49"/><text x="24.6863%" y="1071.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="24.4363%" y="1045" width="0.0707%" height="15" fill="rgb(207,177,25)" fg:x="16928" fg:w="49"/><text x="24.6863%" y="1055.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="24.4363%" y="1029" width="0.0707%" height="15" fill="rgb(211,178,42)" fg:x="16928" fg:w="49"/><text x="24.6863%" y="1039.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="24.4406%" y="1013" width="0.0664%" height="15" fill="rgb(230,69,54)" fg:x="16931" fg:w="46"/><text x="24.6906%" y="1023.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="24.4940%" y="997" width="0.0130%" height="15" fill="rgb(214,135,41)" fg:x="16968" fg:w="9"/><text x="24.7440%" y="1007.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="24.4955%" y="981" width="0.0115%" height="15" fill="rgb(237,67,25)" fg:x="16969" fg:w="8"/><text x="24.7455%" y="991.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="24.4955%" y="965" width="0.0115%" height="15" fill="rgb(222,189,50)" fg:x="16969" fg:w="8"/><text x="24.7455%" y="975.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="24.4969%" y="949" width="0.0101%" height="15" fill="rgb(245,148,34)" fg:x="16970" fg:w="7"/><text x="24.7469%" y="959.50"></text></g><g><title>[[igc]] (12 samples, 0.02%)</title><rect x="24.5518%" y="933" width="0.0173%" height="15" fill="rgb(222,29,6)" fg:x="17008" fg:w="12"/><text x="24.8018%" y="943.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="24.5576%" y="917" width="0.0115%" height="15" fill="rgb(221,189,43)" fg:x="17012" fg:w="8"/><text x="24.8076%" y="927.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="24.5576%" y="901" width="0.0115%" height="15" fill="rgb(207,36,27)" fg:x="17012" fg:w="8"/><text x="24.8076%" y="911.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="24.5590%" y="885" width="0.0101%" height="15" fill="rgb(217,90,24)" fg:x="17013" fg:w="7"/><text x="24.8090%" y="895.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="24.5460%" y="1029" width="0.0289%" height="15" fill="rgb(224,66,35)" fg:x="17004" fg:w="20"/><text x="24.7960%" y="1039.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="24.5460%" y="1013" width="0.0289%" height="15" fill="rgb(221,13,50)" fg:x="17004" fg:w="20"/><text x="24.7960%" y="1023.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="24.5474%" y="997" width="0.0274%" height="15" fill="rgb(236,68,49)" fg:x="17005" fg:w="19"/><text x="24.7974%" y="1007.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="24.5489%" y="981" width="0.0260%" height="15" fill="rgb(229,146,28)" fg:x="17006" fg:w="18"/><text x="24.7989%" y="991.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="24.5503%" y="965" width="0.0245%" height="15" fill="rgb(225,31,38)" fg:x="17007" fg:w="17"/><text x="24.8003%" y="975.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="24.5518%" y="949" width="0.0231%" height="15" fill="rgb(250,208,3)" fg:x="17008" fg:w="16"/><text x="24.8018%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (16 samples, 0.02%)</title><rect x="24.5749%" y="1029" width="0.0231%" height="15" fill="rgb(246,54,23)" fg:x="17024" fg:w="16"/><text x="24.8249%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (74 samples, 0.11%)</title><rect x="24.5070%" y="1093" width="0.1068%" height="15" fill="rgb(243,76,11)" fg:x="16977" fg:w="74"/><text x="24.7570%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (73 samples, 0.11%)</title><rect x="24.5085%" y="1077" width="0.1054%" height="15" fill="rgb(245,21,50)" fg:x="16978" fg:w="73"/><text x="24.7585%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (73 samples, 0.11%)</title><rect x="24.5085%" y="1061" width="0.1054%" height="15" fill="rgb(228,9,43)" fg:x="16978" fg:w="73"/><text x="24.7585%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (73 samples, 0.11%)</title><rect x="24.5085%" y="1045" width="0.1054%" height="15" fill="rgb(208,100,47)" fg:x="16978" fg:w="73"/><text x="24.7585%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (11 samples, 0.02%)</title><rect x="24.5980%" y="1029" width="0.0159%" height="15" fill="rgb(232,26,8)" fg:x="17040" fg:w="11"/><text x="24.8480%" y="1039.50"></text></g><g><title>[[igc]] (11 samples, 0.02%)</title><rect x="24.6196%" y="885" width="0.0159%" height="15" fill="rgb(216,166,38)" fg:x="17055" fg:w="11"/><text x="24.8696%" y="895.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="24.6225%" y="869" width="0.0130%" height="15" fill="rgb(251,202,51)" fg:x="17057" fg:w="9"/><text x="24.8725%" y="879.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="24.6254%" y="853" width="0.0101%" height="15" fill="rgb(254,216,34)" fg:x="17059" fg:w="7"/><text x="24.8754%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (360 samples, 0.52%)</title><rect x="24.1245%" y="1109" width="0.5197%" height="15" fill="rgb(251,32,27)" fg:x="16712" fg:w="360"/><text x="24.3745%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (21 samples, 0.03%)</title><rect x="24.6139%" y="1093" width="0.0303%" height="15" fill="rgb(208,127,28)" fg:x="17051" fg:w="21"/><text x="24.8639%" y="1103.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (21 samples, 0.03%)</title><rect x="24.6139%" y="1077" width="0.0303%" height="15" fill="rgb(224,137,22)" fg:x="17051" fg:w="21"/><text x="24.8639%" y="1087.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (21 samples, 0.03%)</title><rect x="24.6139%" y="1061" width="0.0303%" height="15" fill="rgb(254,70,32)" fg:x="17051" fg:w="21"/><text x="24.8639%" y="1071.50"></text></g><g><title>operator== (21 samples, 0.03%)</title><rect x="24.6139%" y="1045" width="0.0303%" height="15" fill="rgb(229,75,37)" fg:x="17051" fg:w="21"/><text x="24.8639%" y="1055.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (21 samples, 0.03%)</title><rect x="24.6139%" y="1029" width="0.0303%" height="15" fill="rgb(252,64,23)" fg:x="17051" fg:w="21"/><text x="24.8639%" y="1039.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (21 samples, 0.03%)</title><rect x="24.6139%" y="1013" width="0.0303%" height="15" fill="rgb(232,162,48)" fg:x="17051" fg:w="21"/><text x="24.8639%" y="1023.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (21 samples, 0.03%)</title><rect x="24.6139%" y="997" width="0.0303%" height="15" fill="rgb(246,160,12)" fg:x="17051" fg:w="21"/><text x="24.8639%" y="1007.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="24.6167%" y="981" width="0.0274%" height="15" fill="rgb(247,166,0)" fg:x="17053" fg:w="19"/><text x="24.8667%" y="991.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="24.6167%" y="965" width="0.0274%" height="15" fill="rgb(249,219,21)" fg:x="17053" fg:w="19"/><text x="24.8667%" y="975.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="24.6182%" y="949" width="0.0260%" height="15" fill="rgb(205,209,3)" fg:x="17054" fg:w="18"/><text x="24.8682%" y="959.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="24.6196%" y="933" width="0.0245%" height="15" fill="rgb(243,44,1)" fg:x="17055" fg:w="17"/><text x="24.8696%" y="943.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="24.6196%" y="917" width="0.0245%" height="15" fill="rgb(206,159,16)" fg:x="17055" fg:w="17"/><text x="24.8696%" y="927.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="24.6196%" y="901" width="0.0245%" height="15" fill="rgb(244,77,30)" fg:x="17055" fg:w="17"/><text x="24.8696%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (10 samples, 0.01%)</title><rect x="24.6889%" y="1077" width="0.0144%" height="15" fill="rgb(218,69,12)" fg:x="17103" fg:w="10"/><text x="24.9389%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (68 samples, 0.10%)</title><rect x="24.6442%" y="1109" width="0.0982%" height="15" fill="rgb(212,87,7)" fg:x="17072" fg:w="68"/><text x="24.8942%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (40 samples, 0.06%)</title><rect x="24.6846%" y="1093" width="0.0577%" height="15" fill="rgb(245,114,25)" fg:x="17100" fg:w="40"/><text x="24.9346%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (27 samples, 0.04%)</title><rect x="24.7034%" y="1077" width="0.0390%" height="15" fill="rgb(210,61,42)" fg:x="17113" fg:w="27"/><text x="24.9534%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (27 samples, 0.04%)</title><rect x="24.7034%" y="1061" width="0.0390%" height="15" fill="rgb(211,52,33)" fg:x="17113" fg:w="27"/><text x="24.9534%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,341 samples, 3.38%)</title><rect x="21.3890%" y="1125" width="3.3793%" height="15" fill="rgb(234,58,33)" fg:x="14817" fg:w="2341"/><text x="21.6390%" y="1135.50">std..</text></g><g><title>vtable for std::ios_base (18 samples, 0.03%)</title><rect x="24.7423%" y="1109" width="0.0260%" height="15" fill="rgb(220,115,36)" fg:x="17140" fg:w="18"/><text x="24.9923%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (12 samples, 0.02%)</title><rect x="24.7510%" y="1093" width="0.0173%" height="15" fill="rgb(243,153,54)" fg:x="17146" fg:w="12"/><text x="25.0010%" y="1103.50"></text></g><g><title>SipHashUint256Extra (118 samples, 0.17%)</title><rect x="24.7712%" y="1093" width="0.1703%" height="15" fill="rgb(251,47,18)" fg:x="17160" fg:w="118"/><text x="25.0212%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (65 samples, 0.09%)</title><rect x="24.8477%" y="1077" width="0.0938%" height="15" fill="rgb(242,102,42)" fg:x="17213" fg:w="65"/><text x="25.0977%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (65 samples, 0.09%)</title><rect x="24.8477%" y="1061" width="0.0938%" height="15" fill="rgb(234,31,38)" fg:x="17213" fg:w="65"/><text x="25.0977%" y="1071.50"></text></g><g><title>CCoinsViewCache::BatchWrite (7,415 samples, 10.70%)</title><rect x="14.2478%" y="1189" width="10.7039%" height="15" fill="rgb(221,117,51)" fg:x="9870" fg:w="7415"/><text x="14.4978%" y="1199.50">CCoinsViewCache:..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (2,595 samples, 3.75%)</title><rect x="21.2056%" y="1173" width="3.7460%" height="15" fill="rgb(212,20,18)" fg:x="14690" fg:w="2595"/><text x="21.4556%" y="1183.50">std:..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,468 samples, 3.56%)</title><rect x="21.3890%" y="1157" width="3.5627%" height="15" fill="rgb(245,133,36)" fg:x="14817" fg:w="2468"/><text x="21.6390%" y="1167.50">std:..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,468 samples, 3.56%)</title><rect x="21.3890%" y="1141" width="3.5627%" height="15" fill="rgb(212,6,19)" fg:x="14817" fg:w="2468"/><text x="21.6390%" y="1151.50">std:..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (127 samples, 0.18%)</title><rect x="24.7683%" y="1125" width="0.1833%" height="15" fill="rgb(218,1,36)" fg:x="17158" fg:w="127"/><text x="25.0183%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (127 samples, 0.18%)</title><rect x="24.7683%" y="1109" width="0.1833%" height="15" fill="rgb(246,84,54)" fg:x="17158" fg:w="127"/><text x="25.0183%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (47 samples, 0.07%)</title><rect x="24.9516%" y="1173" width="0.0678%" height="15" fill="rgb(242,110,6)" fg:x="17285" fg:w="47"/><text x="25.2016%" y="1183.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (47 samples, 0.07%)</title><rect x="24.9516%" y="1157" width="0.0678%" height="15" fill="rgb(214,47,5)" fg:x="17285" fg:w="47"/><text x="25.2016%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (47 samples, 0.07%)</title><rect x="24.9516%" y="1141" width="0.0678%" height="15" fill="rgb(218,159,25)" fg:x="17285" fg:w="47"/><text x="25.2016%" y="1151.50"></text></g><g><title>operator new (47 samples, 0.07%)</title><rect x="24.9516%" y="1125" width="0.0678%" height="15" fill="rgb(215,211,28)" fg:x="17285" fg:w="47"/><text x="25.2016%" y="1135.50"></text></g><g><title>__posix_memalign (47 samples, 0.07%)</title><rect x="24.9516%" y="1109" width="0.0678%" height="15" fill="rgb(238,59,32)" fg:x="17285" fg:w="47"/><text x="25.2016%" y="1119.50"></text></g><g><title>malloc (47 samples, 0.07%)</title><rect x="24.9516%" y="1093" width="0.0678%" height="15" fill="rgb(226,82,3)" fg:x="17285" fg:w="47"/><text x="25.2016%" y="1103.50"></text></g><g><title>_int_malloc (47 samples, 0.07%)</title><rect x="24.9516%" y="1077" width="0.0678%" height="15" fill="rgb(240,164,32)" fg:x="17285" fg:w="47"/><text x="25.2016%" y="1087.50"></text></g><g><title>cfree@GLIBC_2.2.5 (33 samples, 0.05%)</title><rect x="25.0267%" y="1157" width="0.0476%" height="15" fill="rgb(232,46,7)" fg:x="17337" fg:w="33"/><text x="25.2767%" y="1167.50"></text></g><g><title>_int_free (33 samples, 0.05%)</title><rect x="25.0267%" y="1141" width="0.0476%" height="15" fill="rgb(229,129,53)" fg:x="17337" fg:w="33"/><text x="25.2767%" y="1151.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (33 samples, 0.05%)</title><rect x="25.0267%" y="1125" width="0.0476%" height="15" fill="rgb(234,188,29)" fg:x="17337" fg:w="33"/><text x="25.2767%" y="1135.50"></text></g><g><title>malloc_consolidate (33 samples, 0.05%)</title><rect x="25.0267%" y="1109" width="0.0476%" height="15" fill="rgb(246,141,4)" fg:x="17337" fg:w="33"/><text x="25.2767%" y="1119.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (86 samples, 0.12%)</title><rect x="24.9516%" y="1189" width="0.1241%" height="15" fill="rgb(229,23,39)" fg:x="17285" fg:w="86"/><text x="25.2016%" y="1199.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (34 samples, 0.05%)</title><rect x="25.0267%" y="1173" width="0.0491%" height="15" fill="rgb(206,12,3)" fg:x="17337" fg:w="34"/><text x="25.2767%" y="1183.50"></text></g><g><title>SipHashUint256Extra (222 samples, 0.32%)</title><rect x="25.0758%" y="1189" width="0.3205%" height="15" fill="rgb(252,226,20)" fg:x="17371" fg:w="222"/><text x="25.3258%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (100 samples, 0.14%)</title><rect x="25.2519%" y="1173" width="0.1444%" height="15" fill="rgb(216,123,35)" fg:x="17493" fg:w="100"/><text x="25.5019%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (100 samples, 0.14%)</title><rect x="25.2519%" y="1157" width="0.1444%" height="15" fill="rgb(212,68,40)" fg:x="17493" fg:w="100"/><text x="25.5019%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="25.4266%" y="1173" width="0.0101%" height="15" fill="rgb(254,125,32)" fg:x="17614" fg:w="7"/><text x="25.6766%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="25.4266%" y="1157" width="0.0101%" height="15" fill="rgb(253,97,22)" fg:x="17614" fg:w="7"/><text x="25.6766%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (7 samples, 0.01%)</title><rect x="25.4266%" y="1141" width="0.0101%" height="15" fill="rgb(241,101,14)" fg:x="17614" fg:w="7"/><text x="25.6766%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (7 samples, 0.01%)</title><rect x="25.4266%" y="1125" width="0.0101%" height="15" fill="rgb(238,103,29)" fg:x="17614" fg:w="7"/><text x="25.6766%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (37 samples, 0.05%)</title><rect x="25.3963%" y="1189" width="0.0534%" height="15" fill="rgb(233,195,47)" fg:x="17593" fg:w="37"/><text x="25.6463%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (9 samples, 0.01%)</title><rect x="25.4367%" y="1173" width="0.0130%" height="15" fill="rgb(246,218,30)" fg:x="17621" fg:w="9"/><text x="25.6867%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (9 samples, 0.01%)</title><rect x="25.4367%" y="1157" width="0.0130%" height="15" fill="rgb(219,145,47)" fg:x="17621" fg:w="9"/><text x="25.6867%" y="1167.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (9 samples, 0.01%)</title><rect x="25.4367%" y="1141" width="0.0130%" height="15" fill="rgb(243,12,26)" fg:x="17621" fg:w="9"/><text x="25.6867%" y="1151.50"></text></g><g><title>operator== (9 samples, 0.01%)</title><rect x="25.4367%" y="1125" width="0.0130%" height="15" fill="rgb(214,87,16)" fg:x="17621" fg:w="9"/><text x="25.6867%" y="1135.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (8 samples, 0.01%)</title><rect x="25.4381%" y="1109" width="0.0115%" height="15" fill="rgb(208,99,42)" fg:x="17622" fg:w="8"/><text x="25.6881%" y="1119.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (8 samples, 0.01%)</title><rect x="25.4381%" y="1093" width="0.0115%" height="15" fill="rgb(253,99,2)" fg:x="17622" fg:w="8"/><text x="25.6881%" y="1103.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (8 samples, 0.01%)</title><rect x="25.4381%" y="1077" width="0.0115%" height="15" fill="rgb(220,168,23)" fg:x="17622" fg:w="8"/><text x="25.6881%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (33 samples, 0.05%)</title><rect x="25.4497%" y="1189" width="0.0476%" height="15" fill="rgb(242,38,24)" fg:x="17630" fg:w="33"/><text x="25.6997%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (7 samples, 0.01%)</title><rect x="25.4872%" y="1173" width="0.0101%" height="15" fill="rgb(225,182,9)" fg:x="17656" fg:w="7"/><text x="25.7372%" y="1183.50"></text></g><g><title>decltype  (12 samples, 0.02%)</title><rect x="25.5204%" y="1173" width="0.0173%" height="15" fill="rgb(243,178,37)" fg:x="17679" fg:w="12"/><text x="25.7704%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (12 samples, 0.02%)</title><rect x="25.5204%" y="1157" width="0.0173%" height="15" fill="rgb(232,139,19)" fg:x="17679" fg:w="12"/><text x="25.7704%" y="1167.50"></text></g><g><title>decltype  (12 samples, 0.02%)</title><rect x="25.5204%" y="1141" width="0.0173%" height="15" fill="rgb(225,201,24)" fg:x="17679" fg:w="12"/><text x="25.7704%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (12 samples, 0.02%)</title><rect x="25.5204%" y="1125" width="0.0173%" height="15" fill="rgb(221,47,46)" fg:x="17679" fg:w="12"/><text x="25.7704%" y="1135.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (12 samples, 0.02%)</title><rect x="25.5204%" y="1109" width="0.0173%" height="15" fill="rgb(249,23,13)" fg:x="17679" fg:w="12"/><text x="25.7704%" y="1119.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (30 samples, 0.04%)</title><rect x="25.5016%" y="1189" width="0.0433%" height="15" fill="rgb(219,9,5)" fg:x="17666" fg:w="30"/><text x="25.7516%" y="1199.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (13 samples, 0.02%)</title><rect x="25.5565%" y="1141" width="0.0188%" height="15" fill="rgb(254,171,16)" fg:x="17704" fg:w="13"/><text x="25.8065%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (27 samples, 0.04%)</title><rect x="25.5753%" y="1125" width="0.0390%" height="15" fill="rgb(230,171,20)" fg:x="17717" fg:w="27"/><text x="25.8253%" y="1135.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (27 samples, 0.04%)</title><rect x="25.5753%" y="1109" width="0.0390%" height="15" fill="rgb(210,71,41)" fg:x="17717" fg:w="27"/><text x="25.8253%" y="1119.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (27 samples, 0.04%)</title><rect x="25.5753%" y="1093" width="0.0390%" height="15" fill="rgb(206,173,20)" fg:x="17717" fg:w="27"/><text x="25.8253%" y="1103.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (20 samples, 0.03%)</title><rect x="25.5854%" y="1077" width="0.0289%" height="15" fill="rgb(233,88,34)" fg:x="17724" fg:w="20"/><text x="25.8354%" y="1087.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (20 samples, 0.03%)</title><rect x="25.5854%" y="1061" width="0.0289%" height="15" fill="rgb(223,209,46)" fg:x="17724" fg:w="20"/><text x="25.8354%" y="1071.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (20 samples, 0.03%)</title><rect x="25.5854%" y="1045" width="0.0289%" height="15" fill="rgb(250,43,18)" fg:x="17724" fg:w="20"/><text x="25.8354%" y="1055.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (7 samples, 0.01%)</title><rect x="25.6041%" y="1029" width="0.0101%" height="15" fill="rgb(208,13,10)" fg:x="17737" fg:w="7"/><text x="25.8541%" y="1039.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (41 samples, 0.06%)</title><rect x="25.6142%" y="1029" width="0.0592%" height="15" fill="rgb(212,200,36)" fg:x="17744" fg:w="41"/><text x="25.8642%" y="1039.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (34 samples, 0.05%)</title><rect x="25.6243%" y="1013" width="0.0491%" height="15" fill="rgb(225,90,30)" fg:x="17751" fg:w="34"/><text x="25.8743%" y="1023.50"></text></g><g><title>CCoinsViewCache::Flush (7,930 samples, 11.45%)</title><rect x="14.2478%" y="1205" width="11.4473%" height="15" fill="rgb(236,182,39)" fg:x="9870" fg:w="7930"/><text x="14.4978%" y="1215.50">CCoinsViewCache::..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (104 samples, 0.15%)</title><rect x="25.5449%" y="1189" width="0.1501%" height="15" fill="rgb(212,144,35)" fg:x="17696" fg:w="104"/><text x="25.7949%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (104 samples, 0.15%)</title><rect x="25.5449%" y="1173" width="0.1501%" height="15" fill="rgb(228,63,44)" fg:x="17696" fg:w="104"/><text x="25.7949%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (102 samples, 0.15%)</title><rect x="25.5478%" y="1157" width="0.1472%" height="15" fill="rgb(228,109,6)" fg:x="17698" fg:w="102"/><text x="25.7978%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (83 samples, 0.12%)</title><rect x="25.5753%" y="1141" width="0.1198%" height="15" fill="rgb(238,117,24)" fg:x="17717" fg:w="83"/><text x="25.8253%" y="1151.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (56 samples, 0.08%)</title><rect x="25.6142%" y="1125" width="0.0808%" height="15" fill="rgb(242,26,26)" fg:x="17744" fg:w="56"/><text x="25.8642%" y="1135.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (56 samples, 0.08%)</title><rect x="25.6142%" y="1109" width="0.0808%" height="15" fill="rgb(221,92,48)" fg:x="17744" fg:w="56"/><text x="25.8642%" y="1119.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (56 samples, 0.08%)</title><rect x="25.6142%" y="1093" width="0.0808%" height="15" fill="rgb(209,209,32)" fg:x="17744" fg:w="56"/><text x="25.8642%" y="1103.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (56 samples, 0.08%)</title><rect x="25.6142%" y="1077" width="0.0808%" height="15" fill="rgb(221,70,22)" fg:x="17744" fg:w="56"/><text x="25.8642%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (56 samples, 0.08%)</title><rect x="25.6142%" y="1061" width="0.0808%" height="15" fill="rgb(248,145,5)" fg:x="17744" fg:w="56"/><text x="25.8642%" y="1071.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (56 samples, 0.08%)</title><rect x="25.6142%" y="1045" width="0.0808%" height="15" fill="rgb(226,116,26)" fg:x="17744" fg:w="56"/><text x="25.8642%" y="1055.50"></text></g><g><title>Coin::~Coin (15 samples, 0.02%)</title><rect x="25.6734%" y="1029" width="0.0217%" height="15" fill="rgb(244,5,17)" fg:x="17785" fg:w="15"/><text x="25.9234%" y="1039.50"></text></g><g><title>CTxOut::~CTxOut (15 samples, 0.02%)</title><rect x="25.6734%" y="1013" width="0.0217%" height="15" fill="rgb(252,159,33)" fg:x="17785" fg:w="15"/><text x="25.9234%" y="1023.50"></text></g><g><title>CScript::~CScript (15 samples, 0.02%)</title><rect x="25.6734%" y="997" width="0.0217%" height="15" fill="rgb(206,71,0)" fg:x="17785" fg:w="15"/><text x="25.9234%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (15 samples, 0.02%)</title><rect x="25.6734%" y="981" width="0.0217%" height="15" fill="rgb(233,118,54)" fg:x="17785" fg:w="15"/><text x="25.9234%" y="991.50"></text></g><g><title>CScript::IsWitnessProgram (21 samples, 0.03%)</title><rect x="25.6980%" y="1205" width="0.0303%" height="15" fill="rgb(234,83,48)" fg:x="17802" fg:w="21"/><text x="25.9480%" y="1215.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (17 samples, 0.02%)</title><rect x="25.7037%" y="1189" width="0.0245%" height="15" fill="rgb(228,3,54)" fg:x="17806" fg:w="17"/><text x="25.9537%" y="1199.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (16 samples, 0.02%)</title><rect x="25.7052%" y="1173" width="0.0231%" height="15" fill="rgb(226,155,13)" fg:x="17807" fg:w="16"/><text x="25.9552%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (16 samples, 0.02%)</title><rect x="25.7052%" y="1157" width="0.0231%" height="15" fill="rgb(241,28,37)" fg:x="17807" fg:w="16"/><text x="25.9552%" y="1167.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (16 samples, 0.02%)</title><rect x="25.7052%" y="1141" width="0.0231%" height="15" fill="rgb(233,93,10)" fg:x="17807" fg:w="16"/><text x="25.9552%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (16 samples, 0.02%)</title><rect x="25.7052%" y="1125" width="0.0231%" height="15" fill="rgb(225,113,19)" fg:x="17807" fg:w="16"/><text x="25.9552%" y="1135.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (16 samples, 0.02%)</title><rect x="25.7052%" y="1109" width="0.0231%" height="15" fill="rgb(241,2,18)" fg:x="17807" fg:w="16"/><text x="25.9552%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (16 samples, 0.02%)</title><rect x="25.7052%" y="1093" width="0.0231%" height="15" fill="rgb(228,207,21)" fg:x="17807" fg:w="16"/><text x="25.9552%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (16 samples, 0.02%)</title><rect x="25.7052%" y="1077" width="0.0231%" height="15" fill="rgb(213,211,35)" fg:x="17807" fg:w="16"/><text x="25.9552%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (16 samples, 0.02%)</title><rect x="25.7052%" y="1061" width="0.0231%" height="15" fill="rgb(209,83,10)" fg:x="17807" fg:w="16"/><text x="25.9552%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (16 samples, 0.02%)</title><rect x="25.7052%" y="1045" width="0.0231%" height="15" fill="rgb(209,164,1)" fg:x="17807" fg:w="16"/><text x="25.9552%" y="1055.50"></text></g><g><title>CTxMemPool::removeConflicts (11 samples, 0.02%)</title><rect x="25.7312%" y="1205" width="0.0159%" height="15" fill="rgb(213,184,43)" fg:x="17825" fg:w="11"/><text x="25.9812%" y="1215.50"></text></g><g><title>SipHashUint256 (7 samples, 0.01%)</title><rect x="25.7543%" y="1141" width="0.0101%" height="15" fill="rgb(231,61,34)" fg:x="17841" fg:w="7"/><text x="26.0043%" y="1151.50"></text></g><g><title>CTxMemPool::removeConflicts (17 samples, 0.02%)</title><rect x="25.7485%" y="1189" width="0.0245%" height="15" fill="rgb(235,75,3)" fg:x="17837" fg:w="17"/><text x="25.9985%" y="1199.50"></text></g><g><title>indirectmap&lt;COutPoint, CTransaction const*&gt;::find (17 samples, 0.02%)</title><rect x="25.7485%" y="1173" width="0.0245%" height="15" fill="rgb(220,106,47)" fg:x="17837" fg:w="17"/><text x="25.9985%" y="1183.50"></text></g><g><title>std::map&lt;COutPoint const*, CTransaction const*, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (17 samples, 0.02%)</title><rect x="25.7485%" y="1157" width="0.0245%" height="15" fill="rgb(210,196,33)" fg:x="17837" fg:w="17"/><text x="25.9985%" y="1167.50"></text></g><g><title>SipHashUint256 (161 samples, 0.23%)</title><rect x="25.7745%" y="1189" width="0.2324%" height="15" fill="rgb(229,154,42)" fg:x="17855" fg:w="161"/><text x="26.0245%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (68 samples, 0.10%)</title><rect x="25.9087%" y="1173" width="0.0982%" height="15" fill="rgb(228,114,26)" fg:x="17948" fg:w="68"/><text x="26.1587%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (68 samples, 0.10%)</title><rect x="25.9087%" y="1157" width="0.0982%" height="15" fill="rgb(208,144,1)" fg:x="17948" fg:w="68"/><text x="26.1587%" y="1167.50"></text></g><g><title>SipHashUint256 (10 samples, 0.01%)</title><rect x="26.0170%" y="1109" width="0.0144%" height="15" fill="rgb(239,112,37)" fg:x="18023" fg:w="10"/><text x="26.2670%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="26.0213%" y="1093" width="0.0101%" height="15" fill="rgb(210,96,50)" fg:x="18026" fg:w="7"/><text x="26.2713%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="26.0213%" y="1077" width="0.0101%" height="15" fill="rgb(222,178,2)" fg:x="18026" fg:w="7"/><text x="26.2713%" y="1087.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="26.0213%" y="1061" width="0.0101%" height="15" fill="rgb(226,74,18)" fg:x="18026" fg:w="7"/><text x="26.2713%" y="1071.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="26.0213%" y="1045" width="0.0101%" height="15" fill="rgb(225,67,54)" fg:x="18026" fg:w="7"/><text x="26.2713%" y="1055.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="26.0213%" y="1029" width="0.0101%" height="15" fill="rgb(251,92,32)" fg:x="18026" fg:w="7"/><text x="26.2713%" y="1039.50"></text></g><g><title>SaltedTxidHasher::operator (27 samples, 0.04%)</title><rect x="26.0141%" y="1125" width="0.0390%" height="15" fill="rgb(228,149,22)" fg:x="18021" fg:w="27"/><text x="26.2641%" y="1135.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt; &gt; (29 samples, 0.04%)</title><rect x="26.0141%" y="1189" width="0.0419%" height="15" fill="rgb(243,54,13)" fg:x="18021" fg:w="29"/><text x="26.2641%" y="1199.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt;, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (29 samples, 0.04%)</title><rect x="26.0141%" y="1173" width="0.0419%" height="15" fill="rgb(243,180,28)" fg:x="18021" fg:w="29"/><text x="26.2641%" y="1183.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (29 samples, 0.04%)</title><rect x="26.0141%" y="1157" width="0.0419%" height="15" fill="rgb(208,167,24)" fg:x="18021" fg:w="29"/><text x="26.2641%" y="1167.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;uint256, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (29 samples, 0.04%)</title><rect x="26.0141%" y="1141" width="0.0419%" height="15" fill="rgb(245,73,45)" fg:x="18021" fg:w="29"/><text x="26.2641%" y="1151.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::equal_range (7 samples, 0.01%)</title><rect x="26.0603%" y="1189" width="0.0101%" height="15" fill="rgb(237,203,48)" fg:x="18053" fg:w="7"/><text x="26.3103%" y="1199.50"></text></g><g><title>SipHashUint256 (21 samples, 0.03%)</title><rect x="26.0733%" y="1173" width="0.0303%" height="15" fill="rgb(211,197,16)" fg:x="18062" fg:w="21"/><text x="26.3233%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="26.0906%" y="1157" width="0.0130%" height="15" fill="rgb(243,99,51)" fg:x="18074" fg:w="9"/><text x="26.3406%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="26.0906%" y="1141" width="0.0130%" height="15" fill="rgb(215,123,29)" fg:x="18074" fg:w="9"/><text x="26.3406%" y="1151.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase (9 samples, 0.01%)</title><rect x="26.1036%" y="1173" width="0.0130%" height="15" fill="rgb(239,186,37)" fg:x="18083" fg:w="9"/><text x="26.3536%" y="1183.50"></text></g><g><title>SipHashUint256 (11 samples, 0.02%)</title><rect x="26.1166%" y="1141" width="0.0159%" height="15" fill="rgb(252,136,39)" fg:x="18092" fg:w="11"/><text x="26.3666%" y="1151.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (15 samples, 0.02%)</title><rect x="26.1166%" y="1173" width="0.0217%" height="15" fill="rgb(223,213,32)" fg:x="18092" fg:w="15"/><text x="26.3666%" y="1183.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (15 samples, 0.02%)</title><rect x="26.1166%" y="1157" width="0.0217%" height="15" fill="rgb(233,115,5)" fg:x="18092" fg:w="15"/><text x="26.3666%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (53 samples, 0.08%)</title><rect x="26.0704%" y="1189" width="0.0765%" height="15" fill="rgb(207,226,44)" fg:x="18060" fg:w="53"/><text x="26.3204%" y="1199.50"></text></g><g><title>CTxMemPool::removeForBlock (280 samples, 0.40%)</title><rect x="25.7470%" y="1205" width="0.4042%" height="15" fill="rgb(208,126,0)" fg:x="17836" fg:w="280"/><text x="25.9970%" y="1215.50"></text></g><g><title>Coin::Coin (77 samples, 0.11%)</title><rect x="26.1671%" y="1157" width="0.1112%" height="15" fill="rgb(244,66,21)" fg:x="18127" fg:w="77"/><text x="26.4171%" y="1167.50"></text></g><g><title>CTxOut::CTxOut (77 samples, 0.11%)</title><rect x="26.1671%" y="1141" width="0.1112%" height="15" fill="rgb(222,97,12)" fg:x="18127" fg:w="77"/><text x="26.4171%" y="1151.50"></text></g><g><title>CScript::CScript (76 samples, 0.11%)</title><rect x="26.1685%" y="1125" width="0.1097%" height="15" fill="rgb(219,213,19)" fg:x="18128" fg:w="76"/><text x="26.4185%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (76 samples, 0.11%)</title><rect x="26.1685%" y="1109" width="0.1097%" height="15" fill="rgb(252,169,30)" fg:x="18128" fg:w="76"/><text x="26.4185%" y="1119.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (65 samples, 0.09%)</title><rect x="26.1844%" y="1093" width="0.0938%" height="15" fill="rgb(206,32,51)" fg:x="18139" fg:w="65"/><text x="26.4344%" y="1103.50"></text></g><g><title>AddCoins (87 samples, 0.13%)</title><rect x="26.1584%" y="1173" width="0.1256%" height="15" fill="rgb(250,172,42)" fg:x="18121" fg:w="87"/><text x="26.4084%" y="1183.50"></text></g><g><title>SipHashUint256Extra (26 samples, 0.04%)</title><rect x="26.3187%" y="1109" width="0.0375%" height="15" fill="rgb(209,34,43)" fg:x="18232" fg:w="26"/><text x="26.5687%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (12 samples, 0.02%)</title><rect x="26.3389%" y="1093" width="0.0173%" height="15" fill="rgb(223,11,35)" fg:x="18246" fg:w="12"/><text x="26.5889%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (12 samples, 0.02%)</title><rect x="26.3389%" y="1077" width="0.0173%" height="15" fill="rgb(251,219,26)" fg:x="18246" fg:w="12"/><text x="26.5889%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%)</title><rect x="26.3591%" y="1109" width="0.0101%" height="15" fill="rgb(231,119,3)" fg:x="18260" fg:w="7"/><text x="26.6091%" y="1119.50"></text></g><g><title>AddCoins (11 samples, 0.02%)</title><rect x="26.3735%" y="1093" width="0.0159%" height="15" fill="rgb(216,97,11)" fg:x="18270" fg:w="11"/><text x="26.6235%" y="1103.50"></text></g><g><title>Coin::Coin (7 samples, 0.01%)</title><rect x="26.3793%" y="1077" width="0.0101%" height="15" fill="rgb(223,59,9)" fg:x="18274" fg:w="7"/><text x="26.6293%" y="1087.50"></text></g><g><title>CCoinsViewCache::AddCoin (15 samples, 0.02%)</title><rect x="26.3894%" y="1093" width="0.0217%" height="15" fill="rgb(233,93,31)" fg:x="18281" fg:w="15"/><text x="26.6394%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (10 samples, 0.01%)</title><rect x="26.3966%" y="1077" width="0.0144%" height="15" fill="rgb(239,81,33)" fg:x="18286" fg:w="10"/><text x="26.6466%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (9 samples, 0.01%)</title><rect x="26.3981%" y="1061" width="0.0130%" height="15" fill="rgb(213,120,34)" fg:x="18287" fg:w="9"/><text x="26.6481%" y="1071.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (9 samples, 0.01%)</title><rect x="26.3981%" y="1045" width="0.0130%" height="15" fill="rgb(243,49,53)" fg:x="18287" fg:w="9"/><text x="26.6481%" y="1055.50"></text></g><g><title>SipHashUint256Extra (104 samples, 0.15%)</title><rect x="26.4111%" y="1093" width="0.1501%" height="15" fill="rgb(247,216,33)" fg:x="18296" fg:w="104"/><text x="26.6611%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (41 samples, 0.06%)</title><rect x="26.5020%" y="1077" width="0.0592%" height="15" fill="rgb(226,26,14)" fg:x="18359" fg:w="41"/><text x="26.7520%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (41 samples, 0.06%)</title><rect x="26.5020%" y="1061" width="0.0592%" height="15" fill="rgb(215,49,53)" fg:x="18359" fg:w="41"/><text x="26.7520%" y="1071.50"></text></g><g><title>SipHashUint256Extra (60 samples, 0.09%)</title><rect x="26.5771%" y="1013" width="0.0866%" height="15" fill="rgb(245,162,40)" fg:x="18411" fg:w="60"/><text x="26.8271%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (23 samples, 0.03%)</title><rect x="26.6305%" y="997" width="0.0332%" height="15" fill="rgb(229,68,17)" fg:x="18448" fg:w="23"/><text x="26.8805%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (23 samples, 0.03%)</title><rect x="26.6305%" y="981" width="0.0332%" height="15" fill="rgb(213,182,10)" fg:x="18448" fg:w="23"/><text x="26.8805%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (11 samples, 0.02%)</title><rect x="26.6637%" y="1013" width="0.0159%" height="15" fill="rgb(245,125,30)" fg:x="18471" fg:w="11"/><text x="26.9137%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (80 samples, 0.12%)</title><rect x="26.5670%" y="1077" width="0.1155%" height="15" fill="rgb(232,202,2)" fg:x="18404" fg:w="80"/><text x="26.8170%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (80 samples, 0.12%)</title><rect x="26.5670%" y="1061" width="0.1155%" height="15" fill="rgb(237,140,51)" fg:x="18404" fg:w="80"/><text x="26.8170%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (80 samples, 0.12%)</title><rect x="26.5670%" y="1045" width="0.1155%" height="15" fill="rgb(236,157,25)" fg:x="18404" fg:w="80"/><text x="26.8170%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (80 samples, 0.12%)</title><rect x="26.5670%" y="1029" width="0.1155%" height="15" fill="rgb(219,209,0)" fg:x="18404" fg:w="80"/><text x="26.8170%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (86 samples, 0.12%)</title><rect x="26.5612%" y="1093" width="0.1241%" height="15" fill="rgb(240,116,54)" fg:x="18400" fg:w="86"/><text x="26.8112%" y="1103.50"></text></g><g><title>decltype  (10 samples, 0.01%)</title><rect x="26.6868%" y="1077" width="0.0144%" height="15" fill="rgb(216,10,36)" fg:x="18487" fg:w="10"/><text x="26.9368%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (10 samples, 0.01%)</title><rect x="26.6868%" y="1061" width="0.0144%" height="15" fill="rgb(222,72,44)" fg:x="18487" fg:w="10"/><text x="26.9368%" y="1071.50"></text></g><g><title>decltype  (10 samples, 0.01%)</title><rect x="26.6868%" y="1045" width="0.0144%" height="15" fill="rgb(232,159,9)" fg:x="18487" fg:w="10"/><text x="26.9368%" y="1055.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (10 samples, 0.01%)</title><rect x="26.6868%" y="1029" width="0.0144%" height="15" fill="rgb(210,39,32)" fg:x="18487" fg:w="10"/><text x="26.9368%" y="1039.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (10 samples, 0.01%)</title><rect x="26.6868%" y="1013" width="0.0144%" height="15" fill="rgb(216,194,45)" fg:x="18487" fg:w="10"/><text x="26.9368%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (233 samples, 0.34%)</title><rect x="26.3692%" y="1109" width="0.3363%" height="15" fill="rgb(218,18,35)" fg:x="18267" fg:w="233"/><text x="26.6192%" y="1119.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (14 samples, 0.02%)</title><rect x="26.6853%" y="1093" width="0.0202%" height="15" fill="rgb(207,83,51)" fg:x="18486" fg:w="14"/><text x="26.9353%" y="1103.50"></text></g><g><title>SipHashUint256Extra (89 samples, 0.13%)</title><rect x="26.7070%" y="1093" width="0.1285%" height="15" fill="rgb(225,63,43)" fg:x="18501" fg:w="89"/><text x="26.9570%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (35 samples, 0.05%)</title><rect x="26.7849%" y="1077" width="0.0505%" height="15" fill="rgb(207,57,36)" fg:x="18555" fg:w="35"/><text x="27.0349%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (35 samples, 0.05%)</title><rect x="26.7849%" y="1061" width="0.0505%" height="15" fill="rgb(216,99,33)" fg:x="18555" fg:w="35"/><text x="27.0349%" y="1071.50"></text></g><g><title>CCoinsViewCache::AddCoin (9 samples, 0.01%)</title><rect x="26.8369%" y="1013" width="0.0130%" height="15" fill="rgb(225,42,16)" fg:x="18591" fg:w="9"/><text x="27.0869%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (15 samples, 0.02%)</title><rect x="26.8369%" y="1093" width="0.0217%" height="15" fill="rgb(220,201,45)" fg:x="18591" fg:w="15"/><text x="27.0869%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (15 samples, 0.02%)</title><rect x="26.8369%" y="1077" width="0.0217%" height="15" fill="rgb(225,33,4)" fg:x="18591" fg:w="15"/><text x="27.0869%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (15 samples, 0.02%)</title><rect x="26.8369%" y="1061" width="0.0217%" height="15" fill="rgb(224,33,50)" fg:x="18591" fg:w="15"/><text x="27.0869%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (15 samples, 0.02%)</title><rect x="26.8369%" y="1045" width="0.0217%" height="15" fill="rgb(246,198,51)" fg:x="18591" fg:w="15"/><text x="27.0869%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (15 samples, 0.02%)</title><rect x="26.8369%" y="1029" width="0.0217%" height="15" fill="rgb(205,22,4)" fg:x="18591" fg:w="15"/><text x="27.0869%" y="1039.50"></text></g><g><title>SipHashUint256Extra (133 samples, 0.19%)</title><rect x="26.8759%" y="1013" width="0.1920%" height="15" fill="rgb(206,3,8)" fg:x="18618" fg:w="133"/><text x="27.1259%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (55 samples, 0.08%)</title><rect x="26.9885%" y="997" width="0.0794%" height="15" fill="rgb(251,23,15)" fg:x="18696" fg:w="55"/><text x="27.2385%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (55 samples, 0.08%)</title><rect x="26.9885%" y="981" width="0.0794%" height="15" fill="rgb(252,88,28)" fg:x="18696" fg:w="55"/><text x="27.2385%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (8 samples, 0.01%)</title><rect x="27.0679%" y="1013" width="0.0115%" height="15" fill="rgb(212,127,14)" fg:x="18751" fg:w="8"/><text x="27.3179%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.01%)</title><rect x="27.0679%" y="997" width="0.0115%" height="15" fill="rgb(247,145,37)" fg:x="18751" fg:w="8"/><text x="27.3179%" y="1007.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (142 samples, 0.20%)</title><rect x="26.8759%" y="1045" width="0.2050%" height="15" fill="rgb(209,117,53)" fg:x="18618" fg:w="142"/><text x="27.1259%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (142 samples, 0.20%)</title><rect x="26.8759%" y="1029" width="0.2050%" height="15" fill="rgb(212,90,42)" fg:x="18618" fg:w="142"/><text x="27.1259%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (155 samples, 0.22%)</title><rect x="26.8586%" y="1093" width="0.2237%" height="15" fill="rgb(218,164,37)" fg:x="18606" fg:w="155"/><text x="27.1086%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (155 samples, 0.22%)</title><rect x="26.8586%" y="1077" width="0.2237%" height="15" fill="rgb(246,65,34)" fg:x="18606" fg:w="155"/><text x="27.1086%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (143 samples, 0.21%)</title><rect x="26.8759%" y="1061" width="0.2064%" height="15" fill="rgb(231,100,33)" fg:x="18618" fg:w="143"/><text x="27.1259%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (262 samples, 0.38%)</title><rect x="26.7055%" y="1109" width="0.3782%" height="15" fill="rgb(228,126,14)" fg:x="18500" fg:w="262"/><text x="26.9555%" y="1119.50"></text></g><g><title>AddCoins (81 samples, 0.12%)</title><rect x="27.0852%" y="1093" width="0.1169%" height="15" fill="rgb(215,173,21)" fg:x="18763" fg:w="81"/><text x="27.3352%" y="1103.50"></text></g><g><title>Coin::Coin (78 samples, 0.11%)</title><rect x="27.0895%" y="1077" width="0.1126%" height="15" fill="rgb(210,6,40)" fg:x="18766" fg:w="78"/><text x="27.3395%" y="1087.50"></text></g><g><title>CTxOut::CTxOut (77 samples, 0.11%)</title><rect x="27.0910%" y="1061" width="0.1112%" height="15" fill="rgb(212,48,18)" fg:x="18767" fg:w="77"/><text x="27.3410%" y="1071.50"></text></g><g><title>CScript::CScript (76 samples, 0.11%)</title><rect x="27.0924%" y="1045" width="0.1097%" height="15" fill="rgb(230,214,11)" fg:x="18768" fg:w="76"/><text x="27.3424%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (76 samples, 0.11%)</title><rect x="27.0924%" y="1029" width="0.1097%" height="15" fill="rgb(254,105,39)" fg:x="18768" fg:w="76"/><text x="27.3424%" y="1039.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (72 samples, 0.10%)</title><rect x="27.0982%" y="1013" width="0.1039%" height="15" fill="rgb(245,158,5)" fg:x="18772" fg:w="72"/><text x="27.3482%" y="1023.50"></text></g><g><title>decltype  (43 samples, 0.06%)</title><rect x="27.2065%" y="1077" width="0.0621%" height="15" fill="rgb(249,208,11)" fg:x="18847" fg:w="43"/><text x="27.4565%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (43 samples, 0.06%)</title><rect x="27.2065%" y="1061" width="0.0621%" height="15" fill="rgb(210,39,28)" fg:x="18847" fg:w="43"/><text x="27.4565%" y="1071.50"></text></g><g><title>decltype  (43 samples, 0.06%)</title><rect x="27.2065%" y="1045" width="0.0621%" height="15" fill="rgb(211,56,53)" fg:x="18847" fg:w="43"/><text x="27.4565%" y="1055.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (43 samples, 0.06%)</title><rect x="27.2065%" y="1029" width="0.0621%" height="15" fill="rgb(226,201,30)" fg:x="18847" fg:w="43"/><text x="27.4565%" y="1039.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (43 samples, 0.06%)</title><rect x="27.2065%" y="1013" width="0.0621%" height="15" fill="rgb(239,101,34)" fg:x="18847" fg:w="43"/><text x="27.4565%" y="1023.50"></text></g><g><title>[unknown] (40 samples, 0.06%)</title><rect x="27.2108%" y="997" width="0.0577%" height="15" fill="rgb(226,209,5)" fg:x="18850" fg:w="40"/><text x="27.4608%" y="1007.50"></text></g><g><title>[unknown] (40 samples, 0.06%)</title><rect x="27.2108%" y="981" width="0.0577%" height="15" fill="rgb(250,105,47)" fg:x="18850" fg:w="40"/><text x="27.4608%" y="991.50"></text></g><g><title>[unknown] (40 samples, 0.06%)</title><rect x="27.2108%" y="965" width="0.0577%" height="15" fill="rgb(230,72,3)" fg:x="18850" fg:w="40"/><text x="27.4608%" y="975.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="27.2122%" y="949" width="0.0563%" height="15" fill="rgb(232,218,39)" fg:x="18851" fg:w="39"/><text x="27.4622%" y="959.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="27.2151%" y="933" width="0.0534%" height="15" fill="rgb(248,166,6)" fg:x="18853" fg:w="37"/><text x="27.4651%" y="943.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="27.2194%" y="917" width="0.0491%" height="15" fill="rgb(247,89,20)" fg:x="18856" fg:w="34"/><text x="27.4694%" y="927.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="27.2281%" y="901" width="0.0404%" height="15" fill="rgb(248,130,54)" fg:x="18862" fg:w="28"/><text x="27.4781%" y="911.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="27.2411%" y="885" width="0.0274%" height="15" fill="rgb(234,196,4)" fg:x="18871" fg:w="19"/><text x="27.4911%" y="895.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="27.2454%" y="869" width="0.0231%" height="15" fill="rgb(250,143,31)" fg:x="18874" fg:w="16"/><text x="27.4954%" y="879.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="27.2512%" y="853" width="0.0173%" height="15" fill="rgb(211,110,34)" fg:x="18878" fg:w="12"/><text x="27.5012%" y="863.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="27.2512%" y="837" width="0.0173%" height="15" fill="rgb(215,124,48)" fg:x="18878" fg:w="12"/><text x="27.5012%" y="847.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (136 samples, 0.20%)</title><rect x="27.0838%" y="1109" width="0.1963%" height="15" fill="rgb(216,46,13)" fg:x="18762" fg:w="136"/><text x="27.3338%" y="1119.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (52 samples, 0.08%)</title><rect x="27.2050%" y="1093" width="0.0751%" height="15" fill="rgb(205,184,25)" fg:x="18846" fg:w="52"/><text x="27.4550%" y="1103.50"></text></g><g><title>CCoinsViewCache::AddCoin (705 samples, 1.02%)</title><rect x="26.2840%" y="1173" width="1.0177%" height="15" fill="rgb(228,1,10)" fg:x="18208" fg:w="705"/><text x="26.5340%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (696 samples, 1.00%)</title><rect x="26.2970%" y="1157" width="1.0047%" height="15" fill="rgb(213,116,27)" fg:x="18217" fg:w="696"/><text x="26.5470%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (694 samples, 1.00%)</title><rect x="26.2999%" y="1141" width="1.0018%" height="15" fill="rgb(241,95,50)" fg:x="18219" fg:w="694"/><text x="26.5499%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (694 samples, 1.00%)</title><rect x="26.2999%" y="1125" width="1.0018%" height="15" fill="rgb(238,48,32)" fg:x="18219" fg:w="694"/><text x="26.5499%" y="1135.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (11 samples, 0.02%)</title><rect x="27.2859%" y="1109" width="0.0159%" height="15" fill="rgb(235,113,49)" fg:x="18902" fg:w="11"/><text x="27.5359%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (8 samples, 0.01%)</title><rect x="27.3133%" y="1109" width="0.0115%" height="15" fill="rgb(205,127,43)" fg:x="18921" fg:w="8"/><text x="27.5633%" y="1119.50"></text></g><g><title>CTxOut::CTxOut (39 samples, 0.06%)</title><rect x="27.3061%" y="1157" width="0.0563%" height="15" fill="rgb(250,162,2)" fg:x="18916" fg:w="39"/><text x="27.5561%" y="1167.50"></text></g><g><title>CScript::CScript (37 samples, 0.05%)</title><rect x="27.3089%" y="1141" width="0.0534%" height="15" fill="rgb(220,13,41)" fg:x="18918" fg:w="37"/><text x="27.5589%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (37 samples, 0.05%)</title><rect x="27.3089%" y="1125" width="0.0534%" height="15" fill="rgb(249,221,25)" fg:x="18918" fg:w="37"/><text x="27.5589%" y="1135.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (22 samples, 0.03%)</title><rect x="27.3306%" y="1109" width="0.0318%" height="15" fill="rgb(215,208,19)" fg:x="18933" fg:w="22"/><text x="27.5806%" y="1119.50"></text></g><g><title>Coin::Coin (40 samples, 0.06%)</title><rect x="27.3061%" y="1173" width="0.0577%" height="15" fill="rgb(236,175,2)" fg:x="18916" fg:w="40"/><text x="27.5561%" y="1183.50"></text></g><g><title>SipHashUint256Extra (386 samples, 0.56%)</title><rect x="27.3652%" y="1173" width="0.5572%" height="15" fill="rgb(241,52,2)" fg:x="18957" fg:w="386"/><text x="27.6152%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (160 samples, 0.23%)</title><rect x="27.6915%" y="1157" width="0.2310%" height="15" fill="rgb(248,140,14)" fg:x="19183" fg:w="160"/><text x="27.9415%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (160 samples, 0.23%)</title><rect x="27.6915%" y="1141" width="0.2310%" height="15" fill="rgb(253,22,42)" fg:x="19183" fg:w="160"/><text x="27.9415%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="28.0148%" y="1157" width="0.0101%" height="15" fill="rgb(234,61,47)" fg:x="19407" fg:w="7"/><text x="28.2648%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (74 samples, 0.11%)</title><rect x="27.9239%" y="1173" width="0.1068%" height="15" fill="rgb(208,226,15)" fg:x="19344" fg:w="74"/><text x="28.1739%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (15 samples, 0.02%)</title><rect x="28.0307%" y="1173" width="0.0217%" height="15" fill="rgb(217,221,4)" fg:x="19418" fg:w="15"/><text x="28.2807%" y="1183.50"></text></g><g><title>AddCoins (1,320 samples, 1.91%)</title><rect x="26.1556%" y="1189" width="1.9055%" height="15" fill="rgb(212,174,34)" fg:x="18119" fg:w="1320"/><text x="26.4056%" y="1199.50">A..</text></g><g><title>CBlockIndex::GetAncestor (10 samples, 0.01%)</title><rect x="28.0625%" y="1189" width="0.0144%" height="15" fill="rgb(253,83,4)" fg:x="19440" fg:w="10"/><text x="28.3125%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~_Vector_base (104 samples, 0.15%)</title><rect x="28.0798%" y="1157" width="0.1501%" height="15" fill="rgb(250,195,49)" fg:x="19452" fg:w="104"/><text x="28.3298%" y="1167.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::_M_deallocate (104 samples, 0.15%)</title><rect x="28.0798%" y="1141" width="0.1501%" height="15" fill="rgb(241,192,25)" fg:x="19452" fg:w="104"/><text x="28.3298%" y="1151.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxUndo&gt; &gt;::deallocate (104 samples, 0.15%)</title><rect x="28.0798%" y="1125" width="0.1501%" height="15" fill="rgb(208,124,10)" fg:x="19452" fg:w="104"/><text x="28.3298%" y="1135.50"></text></g><g><title>std::allocator&lt;CTxUndo&gt;::deallocate (104 samples, 0.15%)</title><rect x="28.0798%" y="1109" width="0.1501%" height="15" fill="rgb(222,33,0)" fg:x="19452" fg:w="104"/><text x="28.3298%" y="1119.50"></text></g><g><title>std::__new_allocator&lt;CTxUndo&gt;::deallocate (104 samples, 0.15%)</title><rect x="28.0798%" y="1093" width="0.1501%" height="15" fill="rgb(234,209,28)" fg:x="19452" fg:w="104"/><text x="28.3298%" y="1103.50"></text></g><g><title>cfree@GLIBC_2.2.5 (104 samples, 0.15%)</title><rect x="28.0798%" y="1077" width="0.1501%" height="15" fill="rgb(224,11,23)" fg:x="19452" fg:w="104"/><text x="28.3298%" y="1087.50"></text></g><g><title>_int_free (104 samples, 0.15%)</title><rect x="28.0798%" y="1061" width="0.1501%" height="15" fill="rgb(232,99,1)" fg:x="19452" fg:w="104"/><text x="28.3298%" y="1071.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (104 samples, 0.15%)</title><rect x="28.0798%" y="1045" width="0.1501%" height="15" fill="rgb(237,95,45)" fg:x="19452" fg:w="104"/><text x="28.3298%" y="1055.50"></text></g><g><title>malloc_consolidate (104 samples, 0.15%)</title><rect x="28.0798%" y="1029" width="0.1501%" height="15" fill="rgb(208,109,11)" fg:x="19452" fg:w="104"/><text x="28.3298%" y="1039.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.01%)</title><rect x="28.2198%" y="1013" width="0.0101%" height="15" fill="rgb(216,190,48)" fg:x="19549" fg:w="7"/><text x="28.4698%" y="1023.50"></text></g><g><title>_int_free (31 samples, 0.04%)</title><rect x="28.2343%" y="949" width="0.0447%" height="15" fill="rgb(251,171,36)" fg:x="19559" fg:w="31"/><text x="28.4843%" y="959.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (14 samples, 0.02%)</title><rect x="28.2588%" y="933" width="0.0202%" height="15" fill="rgb(230,62,22)" fg:x="19576" fg:w="14"/><text x="28.5088%" y="943.50"></text></g><g><title>malloc_consolidate (14 samples, 0.02%)</title><rect x="28.2588%" y="917" width="0.0202%" height="15" fill="rgb(225,114,35)" fg:x="19576" fg:w="14"/><text x="28.5088%" y="927.50"></text></g><g><title>cfree@GLIBC_2.2.5 (34 samples, 0.05%)</title><rect x="28.2314%" y="965" width="0.0491%" height="15" fill="rgb(215,118,42)" fg:x="19557" fg:w="34"/><text x="28.4814%" y="975.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~_Vector_base (37 samples, 0.05%)</title><rect x="28.2299%" y="1045" width="0.0534%" height="15" fill="rgb(243,119,21)" fg:x="19556" fg:w="37"/><text x="28.4799%" y="1055.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_deallocate (36 samples, 0.05%)</title><rect x="28.2314%" y="1029" width="0.0520%" height="15" fill="rgb(252,177,53)" fg:x="19557" fg:w="36"/><text x="28.4814%" y="1039.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::deallocate (36 samples, 0.05%)</title><rect x="28.2314%" y="1013" width="0.0520%" height="15" fill="rgb(237,209,29)" fg:x="19557" fg:w="36"/><text x="28.4814%" y="1023.50"></text></g><g><title>std::allocator&lt;Coin&gt;::deallocate (36 samples, 0.05%)</title><rect x="28.2314%" y="997" width="0.0520%" height="15" fill="rgb(212,65,23)" fg:x="19557" fg:w="36"/><text x="28.4814%" y="1007.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::deallocate (36 samples, 0.05%)</title><rect x="28.2314%" y="981" width="0.0520%" height="15" fill="rgb(230,222,46)" fg:x="19557" fg:w="36"/><text x="28.4814%" y="991.50"></text></g><g><title>CBlockUndo::~CBlockUndo (167 samples, 0.24%)</title><rect x="28.0798%" y="1189" width="0.2411%" height="15" fill="rgb(215,135,32)" fg:x="19452" fg:w="167"/><text x="28.3298%" y="1199.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (167 samples, 0.24%)</title><rect x="28.0798%" y="1173" width="0.2411%" height="15" fill="rgb(246,101,22)" fg:x="19452" fg:w="167"/><text x="28.3298%" y="1183.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (63 samples, 0.09%)</title><rect x="28.2299%" y="1157" width="0.0909%" height="15" fill="rgb(206,107,13)" fg:x="19556" fg:w="63"/><text x="28.4799%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (63 samples, 0.09%)</title><rect x="28.2299%" y="1141" width="0.0909%" height="15" fill="rgb(250,100,44)" fg:x="19556" fg:w="63"/><text x="28.4799%" y="1151.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (63 samples, 0.09%)</title><rect x="28.2299%" y="1125" width="0.0909%" height="15" fill="rgb(231,147,38)" fg:x="19556" fg:w="63"/><text x="28.4799%" y="1135.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (63 samples, 0.09%)</title><rect x="28.2299%" y="1109" width="0.0909%" height="15" fill="rgb(229,8,40)" fg:x="19556" fg:w="63"/><text x="28.4799%" y="1119.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (63 samples, 0.09%)</title><rect x="28.2299%" y="1093" width="0.0909%" height="15" fill="rgb(221,135,30)" fg:x="19556" fg:w="63"/><text x="28.4799%" y="1103.50"></text></g><g><title>CTxUndo::~CTxUndo (63 samples, 0.09%)</title><rect x="28.2299%" y="1077" width="0.0909%" height="15" fill="rgb(249,193,18)" fg:x="19556" fg:w="63"/><text x="28.4799%" y="1087.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (63 samples, 0.09%)</title><rect x="28.2299%" y="1061" width="0.0909%" height="15" fill="rgb(209,133,39)" fg:x="19556" fg:w="63"/><text x="28.4799%" y="1071.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (26 samples, 0.04%)</title><rect x="28.2833%" y="1045" width="0.0375%" height="15" fill="rgb(232,100,14)" fg:x="19593" fg:w="26"/><text x="28.5333%" y="1055.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (26 samples, 0.04%)</title><rect x="28.2833%" y="1029" width="0.0375%" height="15" fill="rgb(224,185,1)" fg:x="19593" fg:w="26"/><text x="28.5333%" y="1039.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (26 samples, 0.04%)</title><rect x="28.2833%" y="1013" width="0.0375%" height="15" fill="rgb(223,139,8)" fg:x="19593" fg:w="26"/><text x="28.5333%" y="1023.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (25 samples, 0.04%)</title><rect x="28.2848%" y="997" width="0.0361%" height="15" fill="rgb(232,213,38)" fg:x="19594" fg:w="25"/><text x="28.5348%" y="1007.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (25 samples, 0.04%)</title><rect x="28.2848%" y="981" width="0.0361%" height="15" fill="rgb(207,94,22)" fg:x="19594" fg:w="25"/><text x="28.5348%" y="991.50"></text></g><g><title>Coin::~Coin (25 samples, 0.04%)</title><rect x="28.2848%" y="965" width="0.0361%" height="15" fill="rgb(219,183,54)" fg:x="19594" fg:w="25"/><text x="28.5348%" y="975.50"></text></g><g><title>CTxOut::~CTxOut (25 samples, 0.04%)</title><rect x="28.2848%" y="949" width="0.0361%" height="15" fill="rgb(216,185,54)" fg:x="19594" fg:w="25"/><text x="28.5348%" y="959.50"></text></g><g><title>CScript::~CScript (25 samples, 0.04%)</title><rect x="28.2848%" y="933" width="0.0361%" height="15" fill="rgb(254,217,39)" fg:x="19594" fg:w="25"/><text x="28.5348%" y="943.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (25 samples, 0.04%)</title><rect x="28.2848%" y="917" width="0.0361%" height="15" fill="rgb(240,178,23)" fg:x="19594" fg:w="25"/><text x="28.5348%" y="927.50"></text></g><g><title>cfree@GLIBC_2.2.5 (20 samples, 0.03%)</title><rect x="28.2920%" y="901" width="0.0289%" height="15" fill="rgb(218,11,47)" fg:x="19599" fg:w="20"/><text x="28.5420%" y="911.50"></text></g><g><title>_int_free (19 samples, 0.03%)</title><rect x="28.2934%" y="885" width="0.0274%" height="15" fill="rgb(218,51,51)" fg:x="19600" fg:w="19"/><text x="28.5434%" y="895.50"></text></g><g><title>SipHashUint256Extra (24 samples, 0.03%)</title><rect x="28.3454%" y="1109" width="0.0346%" height="15" fill="rgb(238,126,27)" fg:x="19636" fg:w="24"/><text x="28.5954%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="28.3700%" y="1093" width="0.0101%" height="15" fill="rgb(249,202,22)" fg:x="19653" fg:w="7"/><text x="28.6200%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="28.3700%" y="1077" width="0.0101%" height="15" fill="rgb(254,195,49)" fg:x="19653" fg:w="7"/><text x="28.6200%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (36 samples, 0.05%)</title><rect x="28.3353%" y="1125" width="0.0520%" height="15" fill="rgb(208,123,14)" fg:x="19629" fg:w="36"/><text x="28.5853%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (20 samples, 0.03%)</title><rect x="28.3902%" y="1093" width="0.0289%" height="15" fill="rgb(224,200,8)" fg:x="19667" fg:w="20"/><text x="28.6402%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (8 samples, 0.01%)</title><rect x="28.4075%" y="1077" width="0.0115%" height="15" fill="rgb(217,61,36)" fg:x="19679" fg:w="8"/><text x="28.6575%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (8 samples, 0.01%)</title><rect x="28.4075%" y="1061" width="0.0115%" height="15" fill="rgb(206,35,45)" fg:x="19679" fg:w="8"/><text x="28.6575%" y="1071.50"></text></g><g><title>SipHashUint256Extra (98 samples, 0.14%)</title><rect x="28.4335%" y="1093" width="0.1415%" height="15" fill="rgb(217,65,33)" fg:x="19697" fg:w="98"/><text x="28.6835%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (39 samples, 0.06%)</title><rect x="28.5186%" y="1077" width="0.0563%" height="15" fill="rgb(222,158,48)" fg:x="19756" fg:w="39"/><text x="28.7686%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (39 samples, 0.06%)</title><rect x="28.5186%" y="1061" width="0.0563%" height="15" fill="rgb(254,2,54)" fg:x="19756" fg:w="39"/><text x="28.7686%" y="1071.50"></text></g><g><title>CCoinsViewCache::FetchCoin (179 samples, 0.26%)</title><rect x="28.3281%" y="1173" width="0.2584%" height="15" fill="rgb(250,143,38)" fg:x="19624" fg:w="179"/><text x="28.5781%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (176 samples, 0.25%)</title><rect x="28.3324%" y="1157" width="0.2541%" height="15" fill="rgb(248,25,0)" fg:x="19627" fg:w="176"/><text x="28.5824%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (175 samples, 0.25%)</title><rect x="28.3339%" y="1141" width="0.2526%" height="15" fill="rgb(206,152,27)" fg:x="19628" fg:w="175"/><text x="28.5839%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (138 samples, 0.20%)</title><rect x="28.3873%" y="1125" width="0.1992%" height="15" fill="rgb(240,77,30)" fg:x="19665" fg:w="138"/><text x="28.6373%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (138 samples, 0.20%)</title><rect x="28.3873%" y="1109" width="0.1992%" height="15" fill="rgb(231,5,3)" fg:x="19665" fg:w="138"/><text x="28.6373%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="28.5749%" y="1093" width="0.0115%" height="15" fill="rgb(207,226,32)" fg:x="19795" fg:w="8"/><text x="28.8249%" y="1103.50"></text></g><g><title>SipHashUint256Extra (26 samples, 0.04%)</title><rect x="28.5966%" y="1173" width="0.0375%" height="15" fill="rgb(222,207,47)" fg:x="19810" fg:w="26"/><text x="28.8466%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (14 samples, 0.02%)</title><rect x="28.6139%" y="1157" width="0.0202%" height="15" fill="rgb(229,115,45)" fg:x="19822" fg:w="14"/><text x="28.8639%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (14 samples, 0.02%)</title><rect x="28.6139%" y="1141" width="0.0202%" height="15" fill="rgb(224,191,6)" fg:x="19822" fg:w="14"/><text x="28.8639%" y="1151.50"></text></g><g><title>CCoinsViewCache::AccessCoin (222 samples, 0.32%)</title><rect x="28.3209%" y="1189" width="0.3205%" height="15" fill="rgb(230,227,24)" fg:x="19619" fg:w="222"/><text x="28.5709%" y="1199.50"></text></g><g><title>CCoinsViewCache::AddCoin (27 samples, 0.04%)</title><rect x="28.6413%" y="1189" width="0.0390%" height="15" fill="rgb(228,80,19)" fg:x="19841" fg:w="27"/><text x="28.8913%" y="1199.50"></text></g><g><title>CCoinsViewCache::FetchCoin (38 samples, 0.05%)</title><rect x="28.6803%" y="1189" width="0.0549%" height="15" fill="rgb(247,229,0)" fg:x="19868" fg:w="38"/><text x="28.9303%" y="1199.50"></text></g><g><title>CCoinsViewCache::GetCoin (253 samples, 0.37%)</title><rect x="28.7352%" y="1189" width="0.3652%" height="15" fill="rgb(237,194,15)" fg:x="19906" fg:w="253"/><text x="28.9852%" y="1199.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (252 samples, 0.36%)</title><rect x="28.7366%" y="1173" width="0.3638%" height="15" fill="rgb(219,203,20)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1183.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (252 samples, 0.36%)</title><rect x="28.7366%" y="1157" width="0.3638%" height="15" fill="rgb(234,128,8)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (252 samples, 0.36%)</title><rect x="28.7366%" y="1141" width="0.3638%" height="15" fill="rgb(248,202,8)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1151.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (252 samples, 0.36%)</title><rect x="28.7366%" y="1125" width="0.3638%" height="15" fill="rgb(206,104,37)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (252 samples, 0.36%)</title><rect x="28.7366%" y="1109" width="0.3638%" height="15" fill="rgb(223,8,27)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1119.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (252 samples, 0.36%)</title><rect x="28.7366%" y="1093" width="0.3638%" height="15" fill="rgb(216,217,28)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1103.50"></text></g><g><title>Coin::Coin (252 samples, 0.36%)</title><rect x="28.7366%" y="1077" width="0.3638%" height="15" fill="rgb(249,199,1)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1087.50"></text></g><g><title>CTxOut::CTxOut (252 samples, 0.36%)</title><rect x="28.7366%" y="1061" width="0.3638%" height="15" fill="rgb(240,85,17)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1071.50"></text></g><g><title>CScript::CScript (252 samples, 0.36%)</title><rect x="28.7366%" y="1045" width="0.3638%" height="15" fill="rgb(206,108,45)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (252 samples, 0.36%)</title><rect x="28.7366%" y="1029" width="0.3638%" height="15" fill="rgb(245,210,41)" fg:x="19907" fg:w="252"/><text x="28.9866%" y="1039.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (240 samples, 0.35%)</title><rect x="28.7539%" y="1013" width="0.3465%" height="15" fill="rgb(206,13,37)" fg:x="19919" fg:w="240"/><text x="29.0039%" y="1023.50"></text></g><g><title>CCoinsViewCache::SpendCoin (8 samples, 0.01%)</title><rect x="29.1076%" y="1189" width="0.0115%" height="15" fill="rgb(250,61,18)" fg:x="20164" fg:w="8"/><text x="29.3576%" y="1199.50"></text></g><g><title>CScript::IsWitnessProgram (45 samples, 0.06%)</title><rect x="29.1206%" y="1189" width="0.0650%" height="15" fill="rgb(235,172,48)" fg:x="20173" fg:w="45"/><text x="29.3706%" y="1199.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (34 samples, 0.05%)</title><rect x="29.1365%" y="1173" width="0.0491%" height="15" fill="rgb(249,201,17)" fg:x="20184" fg:w="34"/><text x="29.3865%" y="1183.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (33 samples, 0.05%)</title><rect x="29.1379%" y="1157" width="0.0476%" height="15" fill="rgb(219,208,6)" fg:x="20185" fg:w="33"/><text x="29.3879%" y="1167.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (31 samples, 0.04%)</title><rect x="29.1408%" y="1141" width="0.0447%" height="15" fill="rgb(248,31,23)" fg:x="20187" fg:w="31"/><text x="29.3908%" y="1151.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (31 samples, 0.04%)</title><rect x="29.1408%" y="1125" width="0.0447%" height="15" fill="rgb(245,15,42)" fg:x="20187" fg:w="31"/><text x="29.3908%" y="1135.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (31 samples, 0.04%)</title><rect x="29.1408%" y="1109" width="0.0447%" height="15" fill="rgb(222,217,39)" fg:x="20187" fg:w="31"/><text x="29.3908%" y="1119.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (31 samples, 0.04%)</title><rect x="29.1408%" y="1093" width="0.0447%" height="15" fill="rgb(210,219,27)" fg:x="20187" fg:w="31"/><text x="29.3908%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (31 samples, 0.04%)</title><rect x="29.1408%" y="1077" width="0.0447%" height="15" fill="rgb(252,166,36)" fg:x="20187" fg:w="31"/><text x="29.3908%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (31 samples, 0.04%)</title><rect x="29.1408%" y="1061" width="0.0447%" height="15" fill="rgb(245,132,34)" fg:x="20187" fg:w="31"/><text x="29.3908%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (31 samples, 0.04%)</title><rect x="29.1408%" y="1045" width="0.0447%" height="15" fill="rgb(236,54,3)" fg:x="20187" fg:w="31"/><text x="29.3908%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (31 samples, 0.04%)</title><rect x="29.1408%" y="1029" width="0.0447%" height="15" fill="rgb(241,173,43)" fg:x="20187" fg:w="31"/><text x="29.3908%" y="1039.50"></text></g><g><title>CalculateSequenceLocks (13 samples, 0.02%)</title><rect x="29.2029%" y="1189" width="0.0188%" height="15" fill="rgb(215,190,9)" fg:x="20230" fg:w="13"/><text x="29.4529%" y="1199.50"></text></g><g><title>CCoinsViewCache::FetchCoin (55 samples, 0.08%)</title><rect x="29.2794%" y="1093" width="0.0794%" height="15" fill="rgb(242,101,16)" fg:x="20283" fg:w="55"/><text x="29.5294%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (9 samples, 0.01%)</title><rect x="29.3458%" y="1077" width="0.0130%" height="15" fill="rgb(223,190,21)" fg:x="20329" fg:w="9"/><text x="29.5958%" y="1087.50"></text></g><g><title>CCoinsViewCache::GetCoin (14 samples, 0.02%)</title><rect x="29.3588%" y="1093" width="0.0202%" height="15" fill="rgb(215,228,25)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="1103.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (14 samples, 0.02%)</title><rect x="29.3588%" y="1077" width="0.0202%" height="15" fill="rgb(225,36,22)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="1087.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (14 samples, 0.02%)</title><rect x="29.3588%" y="1061" width="0.0202%" height="15" fill="rgb(251,106,46)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="1071.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (14 samples, 0.02%)</title><rect x="29.3588%" y="1045" width="0.0202%" height="15" fill="rgb(208,90,1)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="1055.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (14 samples, 0.02%)</title><rect x="29.3588%" y="1029" width="0.0202%" height="15" fill="rgb(243,10,4)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="1039.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (14 samples, 0.02%)</title><rect x="29.3588%" y="1013" width="0.0202%" height="15" fill="rgb(212,137,27)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="1023.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (14 samples, 0.02%)</title><rect x="29.3588%" y="997" width="0.0202%" height="15" fill="rgb(231,220,49)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="1007.50"></text></g><g><title>Coin::Coin (14 samples, 0.02%)</title><rect x="29.3588%" y="981" width="0.0202%" height="15" fill="rgb(237,96,20)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="991.50"></text></g><g><title>CTxOut::CTxOut (14 samples, 0.02%)</title><rect x="29.3588%" y="965" width="0.0202%" height="15" fill="rgb(239,229,30)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="975.50"></text></g><g><title>CScript::CScript (14 samples, 0.02%)</title><rect x="29.3588%" y="949" width="0.0202%" height="15" fill="rgb(219,65,33)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="959.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (14 samples, 0.02%)</title><rect x="29.3588%" y="933" width="0.0202%" height="15" fill="rgb(243,134,7)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="943.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (14 samples, 0.02%)</title><rect x="29.3588%" y="917" width="0.0202%" height="15" fill="rgb(216,177,54)" fg:x="20338" fg:w="14"/><text x="29.6088%" y="927.50"></text></g><g><title>Consensus::CheckTxInputs (8 samples, 0.01%)</title><rect x="29.3862%" y="1093" width="0.0115%" height="15" fill="rgb(211,160,20)" fg:x="20357" fg:w="8"/><text x="29.6362%" y="1103.50"></text></g><g><title>SipHashUint256Extra (60 samples, 0.09%)</title><rect x="29.3978%" y="1093" width="0.0866%" height="15" fill="rgb(239,85,39)" fg:x="20365" fg:w="60"/><text x="29.6478%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (24 samples, 0.03%)</title><rect x="29.4497%" y="1077" width="0.0346%" height="15" fill="rgb(232,125,22)" fg:x="20401" fg:w="24"/><text x="29.6997%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (24 samples, 0.03%)</title><rect x="29.4497%" y="1061" width="0.0346%" height="15" fill="rgb(244,57,34)" fg:x="20401" fg:w="24"/><text x="29.6997%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (151 samples, 0.22%)</title><rect x="29.2794%" y="1109" width="0.2180%" height="15" fill="rgb(214,203,32)" fg:x="20283" fg:w="151"/><text x="29.5294%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.01%)</title><rect x="29.4844%" y="1093" width="0.0130%" height="15" fill="rgb(207,58,43)" fg:x="20425" fg:w="9"/><text x="29.7344%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (59 samples, 0.09%)</title><rect x="29.4988%" y="1077" width="0.0852%" height="15" fill="rgb(215,193,15)" fg:x="20435" fg:w="59"/><text x="29.7488%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (10 samples, 0.01%)</title><rect x="29.5695%" y="1061" width="0.0144%" height="15" fill="rgb(232,15,44)" fg:x="20484" fg:w="10"/><text x="29.8195%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (32 samples, 0.05%)</title><rect x="29.5840%" y="1077" width="0.0462%" height="15" fill="rgb(212,3,48)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="1087.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (32 samples, 0.05%)</title><rect x="29.5840%" y="1061" width="0.0462%" height="15" fill="rgb(218,128,7)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="1071.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (32 samples, 0.05%)</title><rect x="29.5840%" y="1045" width="0.0462%" height="15" fill="rgb(226,216,39)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="1055.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (32 samples, 0.05%)</title><rect x="29.5840%" y="1029" width="0.0462%" height="15" fill="rgb(243,47,51)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (32 samples, 0.05%)</title><rect x="29.5840%" y="1013" width="0.0462%" height="15" fill="rgb(241,183,40)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="1023.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (32 samples, 0.05%)</title><rect x="29.5840%" y="997" width="0.0462%" height="15" fill="rgb(231,217,32)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (32 samples, 0.05%)</title><rect x="29.5840%" y="981" width="0.0462%" height="15" fill="rgb(229,61,38)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="991.50"></text></g><g><title>Coin::Coin (32 samples, 0.05%)</title><rect x="29.5840%" y="965" width="0.0462%" height="15" fill="rgb(225,210,5)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="975.50"></text></g><g><title>CTxOut::CTxOut (32 samples, 0.05%)</title><rect x="29.5840%" y="949" width="0.0462%" height="15" fill="rgb(231,79,45)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="959.50"></text></g><g><title>CScript::CScript (32 samples, 0.05%)</title><rect x="29.5840%" y="933" width="0.0462%" height="15" fill="rgb(224,100,7)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="943.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (32 samples, 0.05%)</title><rect x="29.5840%" y="917" width="0.0462%" height="15" fill="rgb(241,198,18)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="927.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (32 samples, 0.05%)</title><rect x="29.5840%" y="901" width="0.0462%" height="15" fill="rgb(252,97,53)" fg:x="20494" fg:w="32"/><text x="29.8340%" y="911.50"></text></g><g><title>SipHashUint256Extra (17 samples, 0.02%)</title><rect x="29.6432%" y="1077" width="0.0245%" height="15" fill="rgb(220,88,7)" fg:x="20535" fg:w="17"/><text x="29.8932%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (309 samples, 0.45%)</title><rect x="29.2303%" y="1157" width="0.4461%" height="15" fill="rgb(213,176,14)" fg:x="20249" fg:w="309"/><text x="29.4803%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (278 samples, 0.40%)</title><rect x="29.2751%" y="1141" width="0.4013%" height="15" fill="rgb(246,73,7)" fg:x="20280" fg:w="278"/><text x="29.5251%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (276 samples, 0.40%)</title><rect x="29.2779%" y="1125" width="0.3984%" height="15" fill="rgb(245,64,36)" fg:x="20282" fg:w="276"/><text x="29.5279%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (124 samples, 0.18%)</title><rect x="29.4974%" y="1109" width="0.1790%" height="15" fill="rgb(245,80,10)" fg:x="20434" fg:w="124"/><text x="29.7474%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (124 samples, 0.18%)</title><rect x="29.4974%" y="1093" width="0.1790%" height="15" fill="rgb(232,107,50)" fg:x="20434" fg:w="124"/><text x="29.7474%" y="1103.50"></text></g><g><title>CCoinsViewCache::GetCoin (115 samples, 0.17%)</title><rect x="29.6764%" y="1157" width="0.1660%" height="15" fill="rgb(253,3,0)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (115 samples, 0.17%)</title><rect x="29.6764%" y="1141" width="0.1660%" height="15" fill="rgb(212,99,53)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (115 samples, 0.17%)</title><rect x="29.6764%" y="1125" width="0.1660%" height="15" fill="rgb(249,111,54)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (115 samples, 0.17%)</title><rect x="29.6764%" y="1109" width="0.1660%" height="15" fill="rgb(249,55,30)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (115 samples, 0.17%)</title><rect x="29.6764%" y="1093" width="0.1660%" height="15" fill="rgb(237,47,42)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (115 samples, 0.17%)</title><rect x="29.6764%" y="1077" width="0.1660%" height="15" fill="rgb(211,20,18)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (115 samples, 0.17%)</title><rect x="29.6764%" y="1061" width="0.1660%" height="15" fill="rgb(231,203,46)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1071.50"></text></g><g><title>Coin::Coin (115 samples, 0.17%)</title><rect x="29.6764%" y="1045" width="0.1660%" height="15" fill="rgb(237,142,3)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (115 samples, 0.17%)</title><rect x="29.6764%" y="1029" width="0.1660%" height="15" fill="rgb(241,107,1)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1039.50"></text></g><g><title>CScript::CScript (115 samples, 0.17%)</title><rect x="29.6764%" y="1013" width="0.1660%" height="15" fill="rgb(229,83,13)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (115 samples, 0.17%)</title><rect x="29.6764%" y="997" width="0.1660%" height="15" fill="rgb(241,91,40)" fg:x="20558" fg:w="115"/><text x="29.9264%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (114 samples, 0.16%)</title><rect x="29.6778%" y="981" width="0.1646%" height="15" fill="rgb(225,3,45)" fg:x="20559" fg:w="114"/><text x="29.9278%" y="991.50"></text></g><g><title>Consensus::CheckTxInputs (7 samples, 0.01%)</title><rect x="29.8510%" y="1157" width="0.0101%" height="15" fill="rgb(244,223,14)" fg:x="20679" fg:w="7"/><text x="30.1010%" y="1167.50"></text></g><g><title>SipHashUint256Extra (27 samples, 0.04%)</title><rect x="29.8611%" y="1157" width="0.0390%" height="15" fill="rgb(224,124,37)" fg:x="20686" fg:w="27"/><text x="30.1111%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="29.8871%" y="1141" width="0.0130%" height="15" fill="rgb(251,171,30)" fg:x="20704" fg:w="9"/><text x="30.1371%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="29.8871%" y="1125" width="0.0130%" height="15" fill="rgb(236,46,54)" fg:x="20704" fg:w="9"/><text x="30.1371%" y="1135.50"></text></g><g><title>CCoinsViewCache::AccessCoin (467 samples, 0.67%)</title><rect x="29.2303%" y="1173" width="0.6741%" height="15" fill="rgb(245,213,5)" fg:x="20249" fg:w="467"/><text x="29.4803%" y="1183.50"></text></g><g><title>Coin::operator= (11 samples, 0.02%)</title><rect x="29.9853%" y="1157" width="0.0159%" height="15" fill="rgb(230,144,27)" fg:x="20772" fg:w="11"/><text x="30.2353%" y="1167.50"></text></g><g><title>CTxOut::operator= (8 samples, 0.01%)</title><rect x="29.9896%" y="1141" width="0.0115%" height="15" fill="rgb(220,86,6)" fg:x="20775" fg:w="8"/><text x="30.2396%" y="1151.50"></text></g><g><title>CScript::operator= (8 samples, 0.01%)</title><rect x="29.9896%" y="1125" width="0.0115%" height="15" fill="rgb(240,20,13)" fg:x="20775" fg:w="8"/><text x="30.2396%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (8 samples, 0.01%)</title><rect x="29.9896%" y="1109" width="0.0115%" height="15" fill="rgb(217,89,34)" fg:x="20775" fg:w="8"/><text x="30.2396%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (82 samples, 0.12%)</title><rect x="29.9073%" y="1173" width="0.1184%" height="15" fill="rgb(229,13,5)" fg:x="20718" fg:w="82"/><text x="30.1573%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (17 samples, 0.02%)</title><rect x="30.0012%" y="1157" width="0.0245%" height="15" fill="rgb(244,67,35)" fg:x="20783" fg:w="17"/><text x="30.2512%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (12 samples, 0.02%)</title><rect x="30.0344%" y="997" width="0.0173%" height="15" fill="rgb(221,40,2)" fg:x="20806" fg:w="12"/><text x="30.2844%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (12 samples, 0.02%)</title><rect x="30.0344%" y="981" width="0.0173%" height="15" fill="rgb(237,157,21)" fg:x="20806" fg:w="12"/><text x="30.2844%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (12 samples, 0.02%)</title><rect x="30.0344%" y="965" width="0.0173%" height="15" fill="rgb(222,94,11)" fg:x="20806" fg:w="12"/><text x="30.2844%" y="975.50"></text></g><g><title>CCoinsViewCache::GetCoin (548 samples, 0.79%)</title><rect x="30.0257%" y="1173" width="0.7911%" height="15" fill="rgb(249,113,6)" fg:x="20800" fg:w="548"/><text x="30.2757%" y="1183.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (547 samples, 0.79%)</title><rect x="30.0271%" y="1157" width="0.7896%" height="15" fill="rgb(238,137,36)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1167.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (547 samples, 0.79%)</title><rect x="30.0271%" y="1141" width="0.7896%" height="15" fill="rgb(210,102,26)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1151.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (547 samples, 0.79%)</title><rect x="30.0271%" y="1125" width="0.7896%" height="15" fill="rgb(218,30,30)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (547 samples, 0.79%)</title><rect x="30.0271%" y="1109" width="0.7896%" height="15" fill="rgb(214,67,26)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1119.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (547 samples, 0.79%)</title><rect x="30.0271%" y="1093" width="0.7896%" height="15" fill="rgb(251,9,53)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (547 samples, 0.79%)</title><rect x="30.0271%" y="1077" width="0.7896%" height="15" fill="rgb(228,204,25)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1087.50"></text></g><g><title>Coin::Coin (547 samples, 0.79%)</title><rect x="30.0271%" y="1061" width="0.7896%" height="15" fill="rgb(207,153,8)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1071.50"></text></g><g><title>CTxOut::CTxOut (547 samples, 0.79%)</title><rect x="30.0271%" y="1045" width="0.7896%" height="15" fill="rgb(242,9,16)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1055.50"></text></g><g><title>CScript::CScript (547 samples, 0.79%)</title><rect x="30.0271%" y="1029" width="0.7896%" height="15" fill="rgb(217,211,10)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (547 samples, 0.79%)</title><rect x="30.0271%" y="1013" width="0.7896%" height="15" fill="rgb(219,228,52)" fg:x="20801" fg:w="547"/><text x="30.2771%" y="1023.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (525 samples, 0.76%)</title><rect x="30.0589%" y="997" width="0.7579%" height="15" fill="rgb(231,92,29)" fg:x="20823" fg:w="525"/><text x="30.3089%" y="1007.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (10 samples, 0.01%)</title><rect x="30.8976%" y="949" width="0.0144%" height="15" fill="rgb(232,8,23)" fg:x="21404" fg:w="10"/><text x="31.1476%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (23 samples, 0.03%)</title><rect x="30.9337%" y="933" width="0.0332%" height="15" fill="rgb(216,211,34)" fg:x="21429" fg:w="23"/><text x="31.1837%" y="943.50"></text></g><g><title>leveldb::Slice::compare (7 samples, 0.01%)</title><rect x="30.9568%" y="917" width="0.0101%" height="15" fill="rgb(236,151,0)" fg:x="21445" fg:w="7"/><text x="31.2068%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.01%)</title><rect x="31.0044%" y="917" width="0.0115%" height="15" fill="rgb(209,168,3)" fg:x="21478" fg:w="8"/><text x="31.2544%" y="927.50"></text></g><g><title>leveldb::FindFile (12 samples, 0.02%)</title><rect x="31.0160%" y="917" width="0.0173%" height="15" fill="rgb(208,129,28)" fg:x="21486" fg:w="12"/><text x="31.2660%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (27 samples, 0.04%)</title><rect x="31.0578%" y="901" width="0.0390%" height="15" fill="rgb(229,78,22)" fg:x="21515" fg:w="27"/><text x="31.3078%" y="911.50"></text></g><g><title>leveldb::Slice::compare (16 samples, 0.02%)</title><rect x="31.0737%" y="885" width="0.0231%" height="15" fill="rgb(228,187,13)" fg:x="21526" fg:w="16"/><text x="31.3237%" y="895.50"></text></g><g><title>leveldb::FindFile (21 samples, 0.03%)</title><rect x="31.0982%" y="901" width="0.0303%" height="15" fill="rgb(240,119,24)" fg:x="21543" fg:w="21"/><text x="31.3482%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (21 samples, 0.03%)</title><rect x="31.1286%" y="901" width="0.0303%" height="15" fill="rgb(209,194,42)" fg:x="21564" fg:w="21"/><text x="31.3786%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (96 samples, 0.14%)</title><rect x="31.0376%" y="917" width="0.1386%" height="15" fill="rgb(247,200,46)" fg:x="21501" fg:w="96"/><text x="31.2876%" y="927.50"></text></g><g><title>leveldb::FindFile (146 samples, 0.21%)</title><rect x="30.9727%" y="933" width="0.2108%" height="15" fill="rgb(218,76,16)" fg:x="21456" fg:w="146"/><text x="31.2227%" y="943.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (26 samples, 0.04%)</title><rect x="31.1834%" y="933" width="0.0375%" height="15" fill="rgb(225,21,48)" fg:x="21602" fg:w="26"/><text x="31.4334%" y="943.50"></text></g><g><title>leveldb::MemTable::Get (7 samples, 0.01%)</title><rect x="31.2224%" y="933" width="0.0101%" height="15" fill="rgb(239,223,50)" fg:x="21629" fg:w="7"/><text x="31.4724%" y="943.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (7 samples, 0.01%)</title><rect x="31.2368%" y="933" width="0.0101%" height="15" fill="rgb(244,45,21)" fg:x="21639" fg:w="7"/><text x="31.4868%" y="943.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.01%)</title><rect x="31.3076%" y="901" width="0.0115%" height="15" fill="rgb(232,33,43)" fg:x="21688" fg:w="8"/><text x="31.5576%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (502 samples, 0.72%)</title><rect x="31.3364%" y="885" width="0.7247%" height="15" fill="rgb(209,8,3)" fg:x="21708" fg:w="502"/><text x="31.5864%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (26 samples, 0.04%)</title><rect x="32.0611%" y="885" width="0.0375%" height="15" fill="rgb(214,25,53)" fg:x="22210" fg:w="26"/><text x="32.3111%" y="895.50"></text></g><g><title>leveldb::Slice::compare (11 samples, 0.02%)</title><rect x="32.0827%" y="869" width="0.0159%" height="15" fill="rgb(254,186,54)" fg:x="22225" fg:w="11"/><text x="32.3327%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (9 samples, 0.01%)</title><rect x="32.0986%" y="885" width="0.0130%" height="15" fill="rgb(208,174,49)" fg:x="22236" fg:w="9"/><text x="32.3486%" y="895.50"></text></g><g><title>Lookup (7 samples, 0.01%)</title><rect x="32.1015%" y="869" width="0.0101%" height="15" fill="rgb(233,191,51)" fg:x="22238" fg:w="7"/><text x="32.3515%" y="879.50"></text></g><g><title>leveldb::MutexLock::~MutexLock (7 samples, 0.01%)</title><rect x="32.1015%" y="853" width="0.0101%" height="15" fill="rgb(222,134,10)" fg:x="22238" fg:w="7"/><text x="32.3515%" y="863.50"></text></g><g><title>leveldb::port::Mutex::Unlock (7 samples, 0.01%)</title><rect x="32.1015%" y="837" width="0.0101%" height="15" fill="rgb(230,226,20)" fg:x="22238" fg:w="7"/><text x="32.3515%" y="847.50"></text></g><g><title>std::mutex::unlock (7 samples, 0.01%)</title><rect x="32.1015%" y="821" width="0.0101%" height="15" fill="rgb(251,111,25)" fg:x="22238" fg:w="7"/><text x="32.3515%" y="831.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (30 samples, 0.04%)</title><rect x="32.1203%" y="885" width="0.0433%" height="15" fill="rgb(224,40,46)" fg:x="22251" fg:w="30"/><text x="32.3703%" y="895.50"></text></g><g><title>[[igc]] (22 samples, 0.03%)</title><rect x="32.3354%" y="757" width="0.0318%" height="15" fill="rgb(236,108,47)" fg:x="22400" fg:w="22"/><text x="32.5854%" y="767.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="32.3411%" y="741" width="0.0260%" height="15" fill="rgb(234,93,0)" fg:x="22404" fg:w="18"/><text x="32.5911%" y="751.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="32.3411%" y="725" width="0.0260%" height="15" fill="rgb(224,213,32)" fg:x="22404" fg:w="18"/><text x="32.5911%" y="735.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="32.3455%" y="709" width="0.0217%" height="15" fill="rgb(251,11,48)" fg:x="22407" fg:w="15"/><text x="32.5955%" y="719.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="32.3469%" y="693" width="0.0202%" height="15" fill="rgb(236,173,5)" fg:x="22408" fg:w="14"/><text x="32.5969%" y="703.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="32.3469%" y="677" width="0.0202%" height="15" fill="rgb(230,95,12)" fg:x="22408" fg:w="14"/><text x="32.5969%" y="687.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="32.3498%" y="661" width="0.0173%" height="15" fill="rgb(232,209,1)" fg:x="22410" fg:w="12"/><text x="32.5998%" y="671.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="32.3498%" y="645" width="0.0173%" height="15" fill="rgb(232,6,1)" fg:x="22410" fg:w="12"/><text x="32.5998%" y="655.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="32.3498%" y="629" width="0.0173%" height="15" fill="rgb(210,224,50)" fg:x="22410" fg:w="12"/><text x="32.5998%" y="639.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="32.3498%" y="613" width="0.0173%" height="15" fill="rgb(228,127,35)" fg:x="22410" fg:w="12"/><text x="32.5998%" y="623.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="32.3541%" y="597" width="0.0130%" height="15" fill="rgb(245,102,45)" fg:x="22413" fg:w="9"/><text x="32.6041%" y="607.50"></text></g><g><title>[unknown] (29 samples, 0.04%)</title><rect x="32.3325%" y="853" width="0.0419%" height="15" fill="rgb(214,1,49)" fg:x="22398" fg:w="29"/><text x="32.5825%" y="863.50"></text></g><g><title>[unknown] (29 samples, 0.04%)</title><rect x="32.3325%" y="837" width="0.0419%" height="15" fill="rgb(226,163,40)" fg:x="22398" fg:w="29"/><text x="32.5825%" y="847.50"></text></g><g><title>[unknown] (29 samples, 0.04%)</title><rect x="32.3325%" y="821" width="0.0419%" height="15" fill="rgb(239,212,28)" fg:x="22398" fg:w="29"/><text x="32.5825%" y="831.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="32.3339%" y="805" width="0.0404%" height="15" fill="rgb(220,20,13)" fg:x="22399" fg:w="28"/><text x="32.5839%" y="815.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="32.3339%" y="789" width="0.0404%" height="15" fill="rgb(210,164,35)" fg:x="22399" fg:w="28"/><text x="32.5839%" y="799.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="32.3354%" y="773" width="0.0390%" height="15" fill="rgb(248,109,41)" fg:x="22400" fg:w="27"/><text x="32.5854%" y="783.50"></text></g><g><title>DecodeEntry (50 samples, 0.07%)</title><rect x="32.3036%" y="869" width="0.0722%" height="15" fill="rgb(238,23,50)" fg:x="22378" fg:w="50"/><text x="32.5536%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Compare (7 samples, 0.01%)</title><rect x="32.7020%" y="837" width="0.0101%" height="15" fill="rgb(211,48,49)" fg:x="22654" fg:w="7"/><text x="32.9520%" y="847.50"></text></g><g><title>leveldb::Block::Iter::Seek (12 samples, 0.02%)</title><rect x="32.6962%" y="853" width="0.0173%" height="15" fill="rgb(223,36,21)" fg:x="22650" fg:w="12"/><text x="32.9462%" y="863.50"></text></g><g><title>__memcmp_evex_movbe (37 samples, 0.05%)</title><rect x="32.7323%" y="805" width="0.0534%" height="15" fill="rgb(207,123,46)" fg:x="22675" fg:w="37"/><text x="32.9823%" y="815.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.02%)</title><rect x="32.7872%" y="805" width="0.0159%" height="15" fill="rgb(240,218,32)" fg:x="22713" fg:w="11"/><text x="33.0372%" y="815.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (56 samples, 0.08%)</title><rect x="32.7237%" y="837" width="0.0808%" height="15" fill="rgb(252,5,43)" fg:x="22669" fg:w="56"/><text x="32.9737%" y="847.50"></text></g><g><title>leveldb::Slice::compare (52 samples, 0.08%)</title><rect x="32.7295%" y="821" width="0.0751%" height="15" fill="rgb(252,84,19)" fg:x="22673" fg:w="52"/><text x="32.9795%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Compare (19 samples, 0.03%)</title><rect x="32.8724%" y="821" width="0.0274%" height="15" fill="rgb(243,152,39)" fg:x="22772" fg:w="19"/><text x="33.1224%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Seek (70 samples, 0.10%)</title><rect x="32.8045%" y="837" width="0.1010%" height="15" fill="rgb(234,160,15)" fg:x="22725" fg:w="70"/><text x="33.0545%" y="847.50"></text></g><g><title>leveldb::Block::NewIterator (9 samples, 0.01%)</title><rect x="32.9056%" y="837" width="0.0130%" height="15" fill="rgb(237,34,20)" fg:x="22795" fg:w="9"/><text x="33.1556%" y="847.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (29 samples, 0.04%)</title><rect x="32.9186%" y="837" width="0.0419%" height="15" fill="rgb(229,97,13)" fg:x="22804" fg:w="29"/><text x="33.1686%" y="847.50"></text></g><g><title>leveldb::Iterator::RegisterCleanup (8 samples, 0.01%)</title><rect x="32.9604%" y="837" width="0.0115%" height="15" fill="rgb(234,71,50)" fg:x="22833" fg:w="8"/><text x="33.2104%" y="847.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (180 samples, 0.26%)</title><rect x="32.7179%" y="853" width="0.2598%" height="15" fill="rgb(253,155,4)" fg:x="22665" fg:w="180"/><text x="32.9679%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Compare (418 samples, 0.60%)</title><rect x="32.3758%" y="869" width="0.6034%" height="15" fill="rgb(222,185,37)" fg:x="22428" fg:w="418"/><text x="32.6258%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (7 samples, 0.01%)</title><rect x="33.0153%" y="837" width="0.0101%" height="15" fill="rgb(251,177,13)" fg:x="22871" fg:w="7"/><text x="33.2653%" y="847.50"></text></g><g><title>__memcmp_evex_movbe (27 samples, 0.04%)</title><rect x="33.0629%" y="789" width="0.0390%" height="15" fill="rgb(250,179,40)" fg:x="22904" fg:w="27"/><text x="33.3129%" y="799.50"></text></g><g><title>__memmove_avx512_unaligned_erms (16 samples, 0.02%)</title><rect x="33.1019%" y="789" width="0.0231%" height="15" fill="rgb(242,44,2)" fg:x="22931" fg:w="16"/><text x="33.3519%" y="799.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (70 samples, 0.10%)</title><rect x="33.0326%" y="821" width="0.1010%" height="15" fill="rgb(216,177,13)" fg:x="22883" fg:w="70"/><text x="33.2826%" y="831.50"></text></g><g><title>leveldb::Slice::compare (59 samples, 0.09%)</title><rect x="33.0485%" y="805" width="0.0852%" height="15" fill="rgb(216,106,43)" fg:x="22894" fg:w="59"/><text x="33.2985%" y="815.50"></text></g><g><title>DecodeEntry (12 samples, 0.02%)</title><rect x="33.1582%" y="805" width="0.0173%" height="15" fill="rgb(216,183,2)" fg:x="22970" fg:w="12"/><text x="33.4082%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (28 samples, 0.04%)</title><rect x="33.1856%" y="789" width="0.0404%" height="15" fill="rgb(249,75,3)" fg:x="22989" fg:w="28"/><text x="33.4356%" y="799.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (12 samples, 0.02%)</title><rect x="33.2087%" y="773" width="0.0173%" height="15" fill="rgb(219,67,39)" fg:x="23005" fg:w="12"/><text x="33.4587%" y="783.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (8 samples, 0.01%)</title><rect x="33.2145%" y="757" width="0.0115%" height="15" fill="rgb(253,228,2)" fg:x="23009" fg:w="8"/><text x="33.4645%" y="767.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (30 samples, 0.04%)</title><rect x="33.1856%" y="805" width="0.0433%" height="15" fill="rgb(235,138,27)" fg:x="22989" fg:w="30"/><text x="33.4356%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (9 samples, 0.01%)</title><rect x="33.2289%" y="805" width="0.0130%" height="15" fill="rgb(236,97,51)" fg:x="23019" fg:w="9"/><text x="33.4789%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (9 samples, 0.01%)</title><rect x="33.2289%" y="789" width="0.0130%" height="15" fill="rgb(240,80,30)" fg:x="23019" fg:w="9"/><text x="33.4789%" y="799.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (77 samples, 0.11%)</title><rect x="33.1336%" y="821" width="0.1112%" height="15" fill="rgb(230,178,19)" fg:x="22953" fg:w="77"/><text x="33.3836%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Seek (13 samples, 0.02%)</title><rect x="33.2506%" y="805" width="0.0188%" height="15" fill="rgb(210,190,27)" fg:x="23034" fg:w="13"/><text x="33.5006%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Seek (23 samples, 0.03%)</title><rect x="33.2448%" y="821" width="0.0332%" height="15" fill="rgb(222,107,31)" fg:x="23030" fg:w="23"/><text x="33.4948%" y="831.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (35 samples, 0.05%)</title><rect x="33.2780%" y="821" width="0.0505%" height="15" fill="rgb(216,127,34)" fg:x="23053" fg:w="35"/><text x="33.5280%" y="831.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (217 samples, 0.31%)</title><rect x="33.0268%" y="837" width="0.3132%" height="15" fill="rgb(234,116,52)" fg:x="22879" fg:w="217"/><text x="33.2768%" y="847.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (8 samples, 0.01%)</title><rect x="33.3285%" y="821" width="0.0115%" height="15" fill="rgb(222,124,15)" fg:x="23088" fg:w="8"/><text x="33.5785%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Compare (237 samples, 0.34%)</title><rect x="33.0008%" y="853" width="0.3421%" height="15" fill="rgb(231,179,28)" fg:x="22861" fg:w="237"/><text x="33.2508%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (8 samples, 0.01%)</title><rect x="33.3559%" y="805" width="0.0115%" height="15" fill="rgb(226,93,45)" fg:x="23107" fg:w="8"/><text x="33.6059%" y="815.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.01%)</title><rect x="33.3675%" y="805" width="0.0115%" height="15" fill="rgb(215,8,51)" fg:x="23115" fg:w="8"/><text x="33.6175%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (8 samples, 0.01%)</title><rect x="33.3790%" y="805" width="0.0115%" height="15" fill="rgb(223,106,5)" fg:x="23123" fg:w="8"/><text x="33.6290%" y="815.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (37 samples, 0.05%)</title><rect x="33.3430%" y="853" width="0.0534%" height="15" fill="rgb(250,191,5)" fg:x="23098" fg:w="37"/><text x="33.5930%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (31 samples, 0.04%)</title><rect x="33.3516%" y="837" width="0.0447%" height="15" fill="rgb(242,132,44)" fg:x="23104" fg:w="31"/><text x="33.6016%" y="847.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (31 samples, 0.04%)</title><rect x="33.3516%" y="821" width="0.0447%" height="15" fill="rgb(251,152,29)" fg:x="23104" fg:w="31"/><text x="33.6016%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Seek (17 samples, 0.02%)</title><rect x="33.3964%" y="853" width="0.0245%" height="15" fill="rgb(218,179,5)" fg:x="23135" fg:w="17"/><text x="33.6464%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (25 samples, 0.04%)</title><rect x="33.4209%" y="853" width="0.0361%" height="15" fill="rgb(227,67,19)" fg:x="23152" fg:w="25"/><text x="33.6709%" y="863.50"></text></g><g><title>leveldb::Slice::Slice (11 samples, 0.02%)</title><rect x="33.4570%" y="853" width="0.0159%" height="15" fill="rgb(233,119,31)" fg:x="23177" fg:w="11"/><text x="33.7070%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (338 samples, 0.49%)</title><rect x="32.9878%" y="869" width="0.4879%" height="15" fill="rgb(241,120,22)" fg:x="22852" fg:w="338"/><text x="33.2378%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Seek (924 samples, 1.33%)</title><rect x="32.1636%" y="885" width="1.3338%" height="15" fill="rgb(224,102,30)" fg:x="22281" fg:w="924"/><text x="32.4136%" y="895.50"></text></g><g><title>leveldb::Slice::Slice (15 samples, 0.02%)</title><rect x="33.4758%" y="869" width="0.0217%" height="15" fill="rgb(210,164,37)" fg:x="23190" fg:w="15"/><text x="33.7258%" y="879.50"></text></g><g><title>leveldb::Iterator::~Iterator (13 samples, 0.02%)</title><rect x="33.5017%" y="853" width="0.0188%" height="15" fill="rgb(226,191,16)" fg:x="23208" fg:w="13"/><text x="33.7517%" y="863.50"></text></g><g><title>leveldb::Iterator::~Iterator (13 samples, 0.02%)</title><rect x="33.5017%" y="837" width="0.0188%" height="15" fill="rgb(214,40,45)" fg:x="23208" fg:w="13"/><text x="33.7517%" y="847.50"></text></g><g><title>leveldb::Iterator::CleanupNode::Run (11 samples, 0.02%)</title><rect x="33.5046%" y="821" width="0.0159%" height="15" fill="rgb(244,29,26)" fg:x="23210" fg:w="11"/><text x="33.7546%" y="831.50"></text></g><g><title>leveldb::SaveValue (7 samples, 0.01%)</title><rect x="33.5104%" y="805" width="0.0101%" height="15" fill="rgb(216,16,5)" fg:x="23214" fg:w="7"/><text x="33.7604%" y="815.50"></text></g><g><title>leveldb::Block::Iter::~Iter (16 samples, 0.02%)</title><rect x="33.5017%" y="885" width="0.0231%" height="15" fill="rgb(249,76,35)" fg:x="23208" fg:w="16"/><text x="33.7517%" y="895.50"></text></g><g><title>leveldb::Block::Iter::~Iter (16 samples, 0.02%)</title><rect x="33.5017%" y="869" width="0.0231%" height="15" fill="rgb(207,11,44)" fg:x="23208" fg:w="16"/><text x="33.7517%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Iter (19 samples, 0.03%)</title><rect x="33.5826%" y="869" width="0.0274%" height="15" fill="rgb(228,190,49)" fg:x="23264" fg:w="19"/><text x="33.8326%" y="879.50"></text></g><g><title>leveldb::Block::NewIterator (62 samples, 0.09%)</title><rect x="33.5248%" y="885" width="0.0895%" height="15" fill="rgb(214,173,12)" fg:x="23224" fg:w="62"/><text x="33.7748%" y="895.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (8 samples, 0.01%)</title><rect x="33.6143%" y="885" width="0.0115%" height="15" fill="rgb(218,26,35)" fg:x="23286" fg:w="8"/><text x="33.8643%" y="895.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="33.6432%" y="837" width="0.0115%" height="15" fill="rgb(220,200,19)" fg:x="23306" fg:w="8"/><text x="33.8932%" y="847.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="33.6447%" y="821" width="0.0101%" height="15" fill="rgb(239,95,49)" fg:x="23307" fg:w="7"/><text x="33.8947%" y="831.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (15 samples, 0.02%)</title><rect x="33.6346%" y="853" width="0.0217%" height="15" fill="rgb(235,85,53)" fg:x="23300" fg:w="15"/><text x="33.8846%" y="863.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (29 samples, 0.04%)</title><rect x="33.6259%" y="885" width="0.0419%" height="15" fill="rgb(233,133,31)" fg:x="23294" fg:w="29"/><text x="33.8759%" y="895.50"></text></g><g><title>leveldb::InternalFilterPolicy::KeyMayMatch (23 samples, 0.03%)</title><rect x="33.6346%" y="869" width="0.0332%" height="15" fill="rgb(218,25,20)" fg:x="23300" fg:w="23"/><text x="33.8846%" y="879.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (7 samples, 0.01%)</title><rect x="33.6576%" y="853" width="0.0101%" height="15" fill="rgb(252,210,38)" fg:x="23316" fg:w="7"/><text x="33.9076%" y="863.50"></text></g><g><title>leveldb::GetVarint64Ptr (17 samples, 0.02%)</title><rect x="33.6721%" y="885" width="0.0245%" height="15" fill="rgb(242,134,21)" fg:x="23326" fg:w="17"/><text x="33.9221%" y="895.50"></text></g><g><title>leveldb::Hash (8 samples, 0.01%)</title><rect x="33.6966%" y="885" width="0.0115%" height="15" fill="rgb(213,28,48)" fg:x="23343" fg:w="8"/><text x="33.9466%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (157 samples, 0.23%)</title><rect x="33.7096%" y="885" width="0.2266%" height="15" fill="rgb(250,196,2)" fg:x="23352" fg:w="157"/><text x="33.9596%" y="895.50"></text></g><g><title>leveldb::Iterator::Iterator (15 samples, 0.02%)</title><rect x="33.9363%" y="885" width="0.0217%" height="15" fill="rgb(227,5,17)" fg:x="23509" fg:w="15"/><text x="34.1863%" y="895.50"></text></g><g><title>leveldb::SaveValue (9 samples, 0.01%)</title><rect x="33.9608%" y="885" width="0.0130%" height="15" fill="rgb(221,226,24)" fg:x="23526" fg:w="9"/><text x="34.2108%" y="895.50"></text></g><g><title>Lookup (9 samples, 0.01%)</title><rect x="33.9796%" y="869" width="0.0130%" height="15" fill="rgb(211,5,48)" fg:x="23539" fg:w="9"/><text x="34.2296%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (9 samples, 0.01%)</title><rect x="33.9796%" y="853" width="0.0130%" height="15" fill="rgb(219,150,6)" fg:x="23539" fg:w="9"/><text x="34.2296%" y="863.50"></text></g><g><title>_mm_crc32_u64 (15 samples, 0.02%)</title><rect x="34.0055%" y="853" width="0.0217%" height="15" fill="rgb(251,46,16)" fg:x="23557" fg:w="15"/><text x="34.2555%" y="863.50"></text></g><g><title>crc32c::ExtendSse42 (26 samples, 0.04%)</title><rect x="33.9926%" y="869" width="0.0375%" height="15" fill="rgb(220,204,40)" fg:x="23548" fg:w="26"/><text x="34.2426%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (13 samples, 0.02%)</title><rect x="34.0301%" y="869" width="0.0188%" height="15" fill="rgb(211,85,2)" fg:x="23574" fg:w="13"/><text x="34.2801%" y="879.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (8 samples, 0.01%)</title><rect x="34.0575%" y="869" width="0.0115%" height="15" fill="rgb(229,17,7)" fg:x="23593" fg:w="8"/><text x="34.3075%" y="879.50"></text></g><g><title>leveldb::GetVarint64Ptr (13 samples, 0.02%)</title><rect x="34.0763%" y="869" width="0.0188%" height="15" fill="rgb(239,72,28)" fg:x="23606" fg:w="13"/><text x="34.3263%" y="879.50"></text></g><g><title>leveldb::crc32c::Unmask (57 samples, 0.08%)</title><rect x="34.1254%" y="853" width="0.0823%" height="15" fill="rgb(230,47,54)" fg:x="23640" fg:w="57"/><text x="34.3754%" y="863.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="34.1254%" y="837" width="0.0823%" height="15" fill="rgb(214,50,8)" fg:x="23640" fg:w="57"/><text x="34.3754%" y="847.50"></text></g><g><title>[unknown] (55 samples, 0.08%)</title><rect x="34.1282%" y="821" width="0.0794%" height="15" fill="rgb(216,198,43)" fg:x="23642" fg:w="55"/><text x="34.3782%" y="831.50"></text></g><g><title>[unknown] (55 samples, 0.08%)</title><rect x="34.1282%" y="805" width="0.0794%" height="15" fill="rgb(234,20,35)" fg:x="23642" fg:w="55"/><text x="34.3782%" y="815.50"></text></g><g><title>[unknown] (55 samples, 0.08%)</title><rect x="34.1282%" y="789" width="0.0794%" height="15" fill="rgb(254,45,19)" fg:x="23642" fg:w="55"/><text x="34.3782%" y="799.50"></text></g><g><title>[unknown] (53 samples, 0.08%)</title><rect x="34.1311%" y="773" width="0.0765%" height="15" fill="rgb(219,14,44)" fg:x="23644" fg:w="53"/><text x="34.3811%" y="783.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="34.1369%" y="757" width="0.0707%" height="15" fill="rgb(217,220,26)" fg:x="23648" fg:w="49"/><text x="34.3869%" y="767.50"></text></g><g><title>[unknown] (42 samples, 0.06%)</title><rect x="34.1470%" y="741" width="0.0606%" height="15" fill="rgb(213,158,28)" fg:x="23655" fg:w="42"/><text x="34.3970%" y="751.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="34.1614%" y="725" width="0.0462%" height="15" fill="rgb(252,51,52)" fg:x="23665" fg:w="32"/><text x="34.4114%" y="735.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="34.1831%" y="709" width="0.0245%" height="15" fill="rgb(246,89,16)" fg:x="23680" fg:w="17"/><text x="34.4331%" y="719.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="34.1932%" y="693" width="0.0144%" height="15" fill="rgb(216,158,49)" fg:x="23687" fg:w="10"/><text x="34.4432%" y="703.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="34.1946%" y="677" width="0.0130%" height="15" fill="rgb(236,107,19)" fg:x="23688" fg:w="9"/><text x="34.4446%" y="687.50"></text></g><g><title>[[igc]] (9 samples, 0.01%)</title><rect x="34.7894%" y="725" width="0.0130%" height="15" fill="rgb(228,185,30)" fg:x="24100" fg:w="9"/><text x="35.0394%" y="735.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="34.7923%" y="709" width="0.0101%" height="15" fill="rgb(246,134,8)" fg:x="24102" fg:w="7"/><text x="35.0423%" y="719.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="34.7879%" y="821" width="0.0188%" height="15" fill="rgb(214,143,50)" fg:x="24099" fg:w="13"/><text x="35.0379%" y="831.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="34.7879%" y="805" width="0.0188%" height="15" fill="rgb(228,75,8)" fg:x="24099" fg:w="13"/><text x="35.0379%" y="815.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="34.7879%" y="789" width="0.0188%" height="15" fill="rgb(207,175,4)" fg:x="24099" fg:w="13"/><text x="35.0379%" y="799.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="34.7894%" y="773" width="0.0173%" height="15" fill="rgb(205,108,24)" fg:x="24100" fg:w="12"/><text x="35.0394%" y="783.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="34.7894%" y="757" width="0.0173%" height="15" fill="rgb(244,120,49)" fg:x="24100" fg:w="12"/><text x="35.0394%" y="767.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="34.7894%" y="741" width="0.0173%" height="15" fill="rgb(223,47,38)" fg:x="24100" fg:w="12"/><text x="35.0394%" y="751.50"></text></g><g><title>_mm_crc32_u64 (585 samples, 0.84%)</title><rect x="34.8067%" y="821" width="0.8445%" height="15" fill="rgb(229,179,11)" fg:x="24112" fg:w="585"/><text x="35.0567%" y="831.50"></text></g><g><title>crc32c::ExtendSse42 (1,001 samples, 1.44%)</title><rect x="34.2105%" y="837" width="1.4450%" height="15" fill="rgb(231,122,1)" fg:x="23699" fg:w="1001"/><text x="34.4605%" y="847.50"></text></g><g><title>leveldb::ReadBlock (7 samples, 0.01%)</title><rect x="35.6598%" y="837" width="0.0101%" height="15" fill="rgb(245,119,9)" fg:x="24703" fg:w="7"/><text x="35.9098%" y="847.50"></text></g><g><title>leveldb::crc32c::Value (1,022 samples, 1.48%)</title><rect x="34.2076%" y="853" width="1.4753%" height="15" fill="rgb(241,163,25)" fg:x="23697" fg:w="1022"/><text x="34.4576%" y="863.50"></text></g><g><title>leveldb::crc32c::Extend (9 samples, 0.01%)</title><rect x="35.6699%" y="837" width="0.0130%" height="15" fill="rgb(217,214,3)" fg:x="24710" fg:w="9"/><text x="35.9199%" y="847.50"></text></g><g><title>leveldb::ReadBlock (1,102 samples, 1.59%)</title><rect x="34.1023%" y="869" width="1.5908%" height="15" fill="rgb(240,86,28)" fg:x="23624" fg:w="1102"/><text x="34.3523%" y="879.50"></text></g><g><title>leveldb::Table::BlockReader (15 samples, 0.02%)</title><rect x="35.6930%" y="869" width="0.0217%" height="15" fill="rgb(215,47,9)" fg:x="24726" fg:w="15"/><text x="35.9430%" y="879.50"></text></g><g><title>leveldb::Table::BlockReader (1,208 samples, 1.74%)</title><rect x="33.9738%" y="885" width="1.7438%" height="15" fill="rgb(252,25,45)" fg:x="23535" fg:w="1208"/><text x="34.2238%" y="895.50"></text></g><g><title>leveldb::Table::InternalGet (34 samples, 0.05%)</title><rect x="35.7176%" y="885" width="0.0491%" height="15" fill="rgb(251,164,9)" fg:x="24743" fg:w="34"/><text x="35.9676%" y="895.50"></text></g><g><title>leveldb::Table::InternalGet (3,085 samples, 4.45%)</title><rect x="31.3249%" y="901" width="4.4533%" height="15" fill="rgb(233,194,0)" fg:x="21700" fg:w="3085"/><text x="31.5749%" y="911.50">level..</text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.01%)</title><rect x="35.7782%" y="853" width="0.0115%" height="15" fill="rgb(249,111,24)" fg:x="24785" fg:w="8"/><text x="36.0282%" y="863.50"></text></g><g><title>Lookup (15 samples, 0.02%)</title><rect x="35.7782%" y="885" width="0.0217%" height="15" fill="rgb(250,223,3)" fg:x="24785" fg:w="15"/><text x="36.0282%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (15 samples, 0.02%)</title><rect x="35.7782%" y="869" width="0.0217%" height="15" fill="rgb(236,178,37)" fg:x="24785" fg:w="15"/><text x="36.0282%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (17 samples, 0.02%)</title><rect x="35.8013%" y="885" width="0.0245%" height="15" fill="rgb(241,158,50)" fg:x="24801" fg:w="17"/><text x="36.0513%" y="895.50"></text></g><g><title>Lookup (11 samples, 0.02%)</title><rect x="35.8100%" y="869" width="0.0159%" height="15" fill="rgb(213,121,41)" fg:x="24807" fg:w="11"/><text x="36.0600%" y="879.50"></text></g><g><title>leveldb::TableCache::FindTable (13 samples, 0.02%)</title><rect x="35.8345%" y="885" width="0.0188%" height="15" fill="rgb(240,92,3)" fg:x="24824" fg:w="13"/><text x="36.0845%" y="895.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (7 samples, 0.01%)</title><rect x="35.8562%" y="885" width="0.0101%" height="15" fill="rgb(205,123,3)" fg:x="24839" fg:w="7"/><text x="36.1062%" y="895.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (3,424 samples, 4.94%)</title><rect x="30.9308%" y="949" width="4.9427%" height="15" fill="rgb(205,97,47)" fg:x="21427" fg:w="3424"/><text x="31.1808%" y="959.50">leveld..</text></g><g><title>leveldb::Version::Get (3,205 samples, 4.63%)</title><rect x="31.2469%" y="933" width="4.6266%" height="15" fill="rgb(247,152,14)" fg:x="21646" fg:w="3205"/><text x="31.4969%" y="943.50">level..</text></g><g><title>leveldb::TableCache::Get (3,197 samples, 4.62%)</title><rect x="31.2585%" y="917" width="4.6150%" height="15" fill="rgb(248,195,53)" fg:x="21654" fg:w="3197"/><text x="31.5085%" y="927.50">level..</text></g><g><title>leveldb::TableCache::FindTable (66 samples, 0.10%)</title><rect x="35.7782%" y="901" width="0.0953%" height="15" fill="rgb(226,201,16)" fg:x="24785" fg:w="66"/><text x="36.0282%" y="911.50"></text></g><g><title>leveldb::Version::Get (3,448 samples, 4.98%)</title><rect x="30.8976%" y="965" width="4.9773%" height="15" fill="rgb(205,98,0)" fg:x="21404" fg:w="3448"/><text x="31.1476%" y="975.50">leveld..</text></g><g><title>leveldb::port::Mutex::Lock (8 samples, 0.01%)</title><rect x="35.8764%" y="965" width="0.0115%" height="15" fill="rgb(214,191,48)" fg:x="24853" fg:w="8"/><text x="36.1264%" y="975.50"></text></g><g><title>std::mutex::lock (8 samples, 0.01%)</title><rect x="35.8764%" y="949" width="0.0115%" height="15" fill="rgb(237,112,39)" fg:x="24853" fg:w="8"/><text x="36.1264%" y="959.50"></text></g><g><title>leveldb::DBImpl::Get (3,484 samples, 5.03%)</title><rect x="30.8630%" y="981" width="5.0293%" height="15" fill="rgb(247,203,27)" fg:x="21380" fg:w="3484"/><text x="31.1130%" y="991.50">leveld..</text></g><g><title>leveldb::Version::Get (7 samples, 0.01%)</title><rect x="35.8951%" y="981" width="0.0101%" height="15" fill="rgb(235,124,28)" fg:x="24866" fg:w="7"/><text x="36.1451%" y="991.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (7 samples, 0.01%)</title><rect x="35.9067%" y="981" width="0.0101%" height="15" fill="rgb(208,207,46)" fg:x="24874" fg:w="7"/><text x="36.1567%" y="991.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (32 samples, 0.05%)</title><rect x="35.9327%" y="965" width="0.0462%" height="15" fill="rgb(234,176,4)" fg:x="24892" fg:w="32"/><text x="36.1827%" y="975.50"></text></g><g><title>decltype  (12 samples, 0.02%)</title><rect x="35.9615%" y="949" width="0.0173%" height="15" fill="rgb(230,133,28)" fg:x="24912" fg:w="12"/><text x="36.2115%" y="959.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (12 samples, 0.02%)</title><rect x="35.9615%" y="933" width="0.0173%" height="15" fill="rgb(211,137,40)" fg:x="24912" fg:w="12"/><text x="36.2115%" y="943.50"></text></g><g><title>decltype (12 samples, 0.02%)</title><rect x="35.9615%" y="917" width="0.0173%" height="15" fill="rgb(254,35,13)" fg:x="24912" fg:w="12"/><text x="36.2115%" y="927.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (3,554 samples, 5.13%)</title><rect x="30.8500%" y="997" width="5.1304%" height="15" fill="rgb(225,49,51)" fg:x="21371" fg:w="3554"/><text x="31.1000%" y="1007.50">CDBWra..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (44 samples, 0.06%)</title><rect x="35.9168%" y="981" width="0.0635%" height="15" fill="rgb(251,10,15)" fg:x="24881" fg:w="44"/><text x="36.1668%" y="991.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (9 samples, 0.01%)</title><rect x="35.9832%" y="981" width="0.0130%" height="15" fill="rgb(228,207,15)" fg:x="24927" fg:w="9"/><text x="36.2332%" y="991.50"></text></g><g><title>CCoinsViewDB::GetCoin (3,566 samples, 5.15%)</title><rect x="30.8500%" y="1013" width="5.1477%" height="15" fill="rgb(241,99,19)" fg:x="21371" fg:w="3566"/><text x="31.1000%" y="1023.50">CCoins..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (10 samples, 0.01%)</title><rect x="35.9832%" y="997" width="0.0144%" height="15" fill="rgb(207,104,49)" fg:x="24927" fg:w="10"/><text x="36.2332%" y="1007.50"></text></g><g><title>CCoinsViewDB::GetCoin (16 samples, 0.02%)</title><rect x="35.9991%" y="805" width="0.0231%" height="15" fill="rgb(234,99,18)" fg:x="24938" fg:w="16"/><text x="36.2491%" y="815.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (16 samples, 0.02%)</title><rect x="35.9991%" y="789" width="0.0231%" height="15" fill="rgb(213,191,49)" fg:x="24938" fg:w="16"/><text x="36.2491%" y="799.50"></text></g><g><title>DataStream::Xor (11 samples, 0.02%)</title><rect x="36.0063%" y="773" width="0.0159%" height="15" fill="rgb(210,226,19)" fg:x="24943" fg:w="11"/><text x="36.2563%" y="783.50"></text></g><g><title>util::Xor (11 samples, 0.02%)</title><rect x="36.0063%" y="757" width="0.0159%" height="15" fill="rgb(229,97,18)" fg:x="24943" fg:w="11"/><text x="36.2563%" y="767.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;&gt; (21 samples, 0.03%)</title><rect x="35.9991%" y="853" width="0.0303%" height="15" fill="rgb(211,167,15)" fg:x="24938" fg:w="21"/><text x="36.2491%" y="863.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long&amp;&gt;::Unserialize&lt;DataStream&gt; (21 samples, 0.03%)</title><rect x="35.9991%" y="837" width="0.0303%" height="15" fill="rgb(210,169,34)" fg:x="24938" fg:w="21"/><text x="36.2491%" y="847.50"></text></g><g><title>void AmountCompression::Unser&lt;DataStream, long&gt; (21 samples, 0.03%)</title><rect x="35.9991%" y="821" width="0.0303%" height="15" fill="rgb(241,121,31)" fg:x="24938" fg:w="21"/><text x="36.2491%" y="831.50"></text></g><g><title>DataStream::DataStream (7 samples, 0.01%)</title><rect x="36.0323%" y="789" width="0.0101%" height="15" fill="rgb(232,40,11)" fg:x="24961" fg:w="7"/><text x="36.2823%" y="799.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (7 samples, 0.01%)</title><rect x="36.0323%" y="773" width="0.0101%" height="15" fill="rgb(205,86,26)" fg:x="24961" fg:w="7"/><text x="36.2823%" y="783.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (7 samples, 0.01%)</title><rect x="36.0323%" y="757" width="0.0101%" height="15" fill="rgb(231,126,28)" fg:x="24961" fg:w="7"/><text x="36.2823%" y="767.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (7 samples, 0.01%)</title><rect x="36.0323%" y="741" width="0.0101%" height="15" fill="rgb(219,221,18)" fg:x="24961" fg:w="7"/><text x="36.2823%" y="751.50"></text></g><g><title>CCoinsViewDB::GetCoin (21 samples, 0.03%)</title><rect x="36.0294%" y="821" width="0.0303%" height="15" fill="rgb(211,40,0)" fg:x="24959" fg:w="21"/><text x="36.2794%" y="831.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (21 samples, 0.03%)</title><rect x="36.0294%" y="805" width="0.0303%" height="15" fill="rgb(239,85,43)" fg:x="24959" fg:w="21"/><text x="36.2794%" y="815.50"></text></g><g><title>DataStream::Xor (12 samples, 0.02%)</title><rect x="36.0424%" y="789" width="0.0173%" height="15" fill="rgb(231,55,21)" fg:x="24968" fg:w="12"/><text x="36.2924%" y="799.50"></text></g><g><title>util::Xor (11 samples, 0.02%)</title><rect x="36.0438%" y="773" width="0.0159%" height="15" fill="rgb(225,184,43)" fg:x="24969" fg:w="11"/><text x="36.2938%" y="783.50"></text></g><g><title>unsigned int ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (11 samples, 0.02%)</title><rect x="36.0626%" y="821" width="0.0159%" height="15" fill="rgb(251,158,41)" fg:x="24982" fg:w="11"/><text x="36.3126%" y="831.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Coin&amp;&gt;(Coin&amp;) (85 samples, 0.12%)</title><rect x="35.9991%" y="997" width="0.1227%" height="15" fill="rgb(234,159,37)" fg:x="24938" fg:w="85"/><text x="36.2491%" y="1007.50"></text></g><g><title>void Unserialize&lt;DataStream, Coin&amp;&gt; (85 samples, 0.12%)</title><rect x="35.9991%" y="981" width="0.1227%" height="15" fill="rgb(216,204,22)" fg:x="24938" fg:w="85"/><text x="36.2491%" y="991.50"></text></g><g><title>void Coin::Unserialize&lt;DataStream&gt; (85 samples, 0.12%)</title><rect x="35.9991%" y="965" width="0.1227%" height="15" fill="rgb(214,17,3)" fg:x="24938" fg:w="85"/><text x="36.2491%" y="975.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut&amp;&gt; &gt; (85 samples, 0.12%)</title><rect x="35.9991%" y="949" width="0.1227%" height="15" fill="rgb(212,111,17)" fg:x="24938" fg:w="85"/><text x="36.2491%" y="959.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut&amp;&gt;::Unserialize&lt;DataStream&gt; (85 samples, 0.12%)</title><rect x="35.9991%" y="933" width="0.1227%" height="15" fill="rgb(221,157,24)" fg:x="24938" fg:w="85"/><text x="36.2491%" y="943.50"></text></g><g><title>void TxOutCompression::Unser&lt;DataStream&gt; (85 samples, 0.12%)</title><rect x="35.9991%" y="917" width="0.1227%" height="15" fill="rgb(252,16,13)" fg:x="24938" fg:w="85"/><text x="36.2491%" y="927.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut, ActionUnserialize&gt; (85 samples, 0.12%)</title><rect x="35.9991%" y="901" width="0.1227%" height="15" fill="rgb(221,62,2)" fg:x="24938" fg:w="85"/><text x="36.2491%" y="911.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;, Wrapper&lt;ScriptCompression, CScript&amp;&gt; &gt; (85 samples, 0.12%)</title><rect x="35.9991%" y="885" width="0.1227%" height="15" fill="rgb(247,87,22)" fg:x="24938" fg:w="85"/><text x="36.2491%" y="895.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (85 samples, 0.12%)</title><rect x="35.9991%" y="869" width="0.1227%" height="15" fill="rgb(215,73,9)" fg:x="24938" fg:w="85"/><text x="36.2491%" y="879.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (64 samples, 0.09%)</title><rect x="36.0294%" y="853" width="0.0924%" height="15" fill="rgb(207,175,33)" fg:x="24959" fg:w="64"/><text x="36.2794%" y="863.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript&amp;&gt;::Unserialize&lt;DataStream&gt; (64 samples, 0.09%)</title><rect x="36.0294%" y="837" width="0.0924%" height="15" fill="rgb(243,129,54)" fg:x="24959" fg:w="64"/><text x="36.2794%" y="847.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (24 samples, 0.03%)</title><rect x="36.0871%" y="821" width="0.0346%" height="15" fill="rgb(227,119,45)" fg:x="24999" fg:w="24"/><text x="36.3371%" y="831.50"></text></g><g><title>DataStream::Xor (7 samples, 0.01%)</title><rect x="36.1247%" y="997" width="0.0101%" height="15" fill="rgb(205,109,36)" fg:x="25025" fg:w="7"/><text x="36.3747%" y="1007.50"></text></g><g><title>util::Xor (7 samples, 0.01%)</title><rect x="36.1247%" y="981" width="0.0101%" height="15" fill="rgb(205,6,39)" fg:x="25025" fg:w="7"/><text x="36.3747%" y="991.50"></text></g><g><title>Coin::Coin (7 samples, 0.01%)</title><rect x="36.1665%" y="757" width="0.0101%" height="15" fill="rgb(221,32,16)" fg:x="25054" fg:w="7"/><text x="36.4165%" y="767.50"></text></g><g><title>CCoinsViewDB::GetCoin (22 samples, 0.03%)</title><rect x="36.1521%" y="773" width="0.0318%" height="15" fill="rgb(228,144,50)" fg:x="25044" fg:w="22"/><text x="36.4021%" y="783.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (10 samples, 0.01%)</title><rect x="36.1838%" y="773" width="0.0144%" height="15" fill="rgb(229,201,53)" fg:x="25066" fg:w="10"/><text x="36.4338%" y="783.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (36 samples, 0.05%)</title><rect x="36.1478%" y="885" width="0.0520%" height="15" fill="rgb(249,153,27)" fg:x="25041" fg:w="36"/><text x="36.3978%" y="895.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (36 samples, 0.05%)</title><rect x="36.1478%" y="869" width="0.0520%" height="15" fill="rgb(227,106,25)" fg:x="25041" fg:w="36"/><text x="36.3978%" y="879.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (36 samples, 0.05%)</title><rect x="36.1478%" y="853" width="0.0520%" height="15" fill="rgb(230,65,29)" fg:x="25041" fg:w="36"/><text x="36.3978%" y="863.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (36 samples, 0.05%)</title><rect x="36.1478%" y="837" width="0.0520%" height="15" fill="rgb(221,57,46)" fg:x="25041" fg:w="36"/><text x="36.3978%" y="847.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (36 samples, 0.05%)</title><rect x="36.1478%" y="821" width="0.0520%" height="15" fill="rgb(229,161,17)" fg:x="25041" fg:w="36"/><text x="36.3978%" y="831.50"></text></g><g><title>DataStream::write (36 samples, 0.05%)</title><rect x="36.1478%" y="805" width="0.0520%" height="15" fill="rgb(222,213,11)" fg:x="25041" fg:w="36"/><text x="36.3978%" y="815.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (36 samples, 0.05%)</title><rect x="36.1478%" y="789" width="0.0520%" height="15" fill="rgb(235,35,13)" fg:x="25041" fg:w="36"/><text x="36.3978%" y="799.50"></text></g><g><title>SipHashUint256Extra (40 samples, 0.06%)</title><rect x="36.1997%" y="821" width="0.0577%" height="15" fill="rgb(233,158,34)" fg:x="25077" fg:w="40"/><text x="36.4497%" y="831.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (13 samples, 0.02%)</title><rect x="36.2387%" y="805" width="0.0188%" height="15" fill="rgb(215,151,48)" fg:x="25104" fg:w="13"/><text x="36.4887%" y="815.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (13 samples, 0.02%)</title><rect x="36.2387%" y="789" width="0.0188%" height="15" fill="rgb(229,84,14)" fg:x="25104" fg:w="13"/><text x="36.4887%" y="799.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (84 samples, 0.12%)</title><rect x="36.1434%" y="997" width="0.1213%" height="15" fill="rgb(229,68,14)" fg:x="25038" fg:w="84"/><text x="36.3934%" y="1007.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (84 samples, 0.12%)</title><rect x="36.1434%" y="981" width="0.1213%" height="15" fill="rgb(243,106,26)" fg:x="25038" fg:w="84"/><text x="36.3934%" y="991.50"></text></g><g><title>Serialize&lt;DataStream&gt; (84 samples, 0.12%)</title><rect x="36.1434%" y="965" width="0.1213%" height="15" fill="rgb(206,45,38)" fg:x="25038" fg:w="84"/><text x="36.3934%" y="975.50"></text></g><g><title>Ser&lt;DataStream&gt; (84 samples, 0.12%)</title><rect x="36.1434%" y="949" width="0.1213%" height="15" fill="rgb(226,6,15)" fg:x="25038" fg:w="84"/><text x="36.3934%" y="959.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (84 samples, 0.12%)</title><rect x="36.1434%" y="933" width="0.1213%" height="15" fill="rgb(232,22,54)" fg:x="25038" fg:w="84"/><text x="36.3934%" y="943.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (84 samples, 0.12%)</title><rect x="36.1434%" y="917" width="0.1213%" height="15" fill="rgb(229,222,32)" fg:x="25038" fg:w="84"/><text x="36.3934%" y="927.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (84 samples, 0.12%)</title><rect x="36.1434%" y="901" width="0.1213%" height="15" fill="rgb(228,62,29)" fg:x="25038" fg:w="84"/><text x="36.3934%" y="911.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (45 samples, 0.06%)</title><rect x="36.1997%" y="885" width="0.0650%" height="15" fill="rgb(251,103,34)" fg:x="25077" fg:w="45"/><text x="36.4497%" y="895.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (45 samples, 0.06%)</title><rect x="36.1997%" y="869" width="0.0650%" height="15" fill="rgb(233,12,30)" fg:x="25077" fg:w="45"/><text x="36.4497%" y="879.50"></text></g><g><title>DataStream::write (45 samples, 0.06%)</title><rect x="36.1997%" y="853" width="0.0650%" height="15" fill="rgb(238,52,0)" fg:x="25077" fg:w="45"/><text x="36.4497%" y="863.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (45 samples, 0.06%)</title><rect x="36.1997%" y="837" width="0.0650%" height="15" fill="rgb(223,98,5)" fg:x="25077" fg:w="45"/><text x="36.4497%" y="847.50"></text></g><g><title>CCoinsViewDB::GetCoin (3,752 samples, 5.42%)</title><rect x="30.8500%" y="1029" width="5.4162%" height="15" fill="rgb(228,75,37)" fg:x="21371" fg:w="3752"/><text x="31.1000%" y="1039.50">CCoinsV..</text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (186 samples, 0.27%)</title><rect x="35.9976%" y="1013" width="0.2685%" height="15" fill="rgb(205,115,49)" fg:x="24937" fg:w="186"/><text x="36.2476%" y="1023.50"></text></g><g><title>SipHashUint256Extra (181 samples, 0.26%)</title><rect x="36.2748%" y="1029" width="0.2613%" height="15" fill="rgb(250,154,43)" fg:x="25129" fg:w="181"/><text x="36.5248%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (68 samples, 0.10%)</title><rect x="36.4379%" y="1013" width="0.0982%" height="15" fill="rgb(226,43,29)" fg:x="25242" fg:w="68"/><text x="36.6879%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (68 samples, 0.10%)</title><rect x="36.4379%" y="997" width="0.0982%" height="15" fill="rgb(249,228,39)" fg:x="25242" fg:w="68"/><text x="36.6879%" y="1007.50"></text></g><g><title>leveldb::DBImpl::Get (13 samples, 0.02%)</title><rect x="36.5361%" y="1029" width="0.0188%" height="15" fill="rgb(216,79,43)" fg:x="25310" fg:w="13"/><text x="36.7861%" y="1039.50"></text></g><g><title>CCoinsViewBacked::GetCoin (3,966 samples, 5.73%)</title><rect x="30.8485%" y="1045" width="5.7251%" height="15" fill="rgb(228,95,12)" fg:x="21370" fg:w="3966"/><text x="31.0985%" y="1055.50">CCoinsV..</text></g><g><title>SipHashUint256Extra (112 samples, 0.16%)</title><rect x="36.5765%" y="1045" width="0.1617%" height="15" fill="rgb(249,221,15)" fg:x="25338" fg:w="112"/><text x="36.8265%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (43 samples, 0.06%)</title><rect x="36.6761%" y="1029" width="0.0621%" height="15" fill="rgb(233,34,13)" fg:x="25407" fg:w="43"/><text x="36.9261%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (43 samples, 0.06%)</title><rect x="36.6761%" y="1013" width="0.0621%" height="15" fill="rgb(214,103,39)" fg:x="25407" fg:w="43"/><text x="36.9261%" y="1023.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (4,127 samples, 5.96%)</title><rect x="30.8485%" y="1077" width="5.9575%" height="15" fill="rgb(251,126,39)" fg:x="21370" fg:w="4127"/><text x="31.0985%" y="1087.50">ExecuteB..</text></g><g><title>CCoinsViewErrorCatcher::GetCoin (4,127 samples, 5.96%)</title><rect x="30.8485%" y="1061" width="5.9575%" height="15" fill="rgb(214,216,36)" fg:x="21370" fg:w="4127"/><text x="31.0985%" y="1071.50">CCoinsVi..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (47 samples, 0.07%)</title><rect x="36.7382%" y="1045" width="0.0678%" height="15" fill="rgb(220,221,8)" fg:x="25450" fg:w="47"/><text x="36.9882%" y="1055.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (4,128 samples, 5.96%)</title><rect x="30.8485%" y="1093" width="5.9589%" height="15" fill="rgb(240,216,3)" fg:x="21370" fg:w="4128"/><text x="31.0985%" y="1103.50">CCoinsVi..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (23 samples, 0.03%)</title><rect x="36.8103%" y="1093" width="0.0332%" height="15" fill="rgb(232,218,17)" fg:x="25500" fg:w="23"/><text x="37.0603%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (40 samples, 0.06%)</title><rect x="36.8565%" y="1045" width="0.0577%" height="15" fill="rgb(229,163,45)" fg:x="25532" fg:w="40"/><text x="37.1065%" y="1055.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (19 samples, 0.03%)</title><rect x="36.8869%" y="1029" width="0.0274%" height="15" fill="rgb(231,110,42)" fg:x="25553" fg:w="19"/><text x="37.1369%" y="1039.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (18 samples, 0.03%)</title><rect x="36.8883%" y="1013" width="0.0260%" height="15" fill="rgb(208,170,48)" fg:x="25554" fg:w="18"/><text x="37.1383%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (9 samples, 0.01%)</title><rect x="36.9013%" y="997" width="0.0130%" height="15" fill="rgb(239,116,25)" fg:x="25563" fg:w="9"/><text x="37.1513%" y="1007.50"></text></g><g><title>SaltedOutpointHasher::operator (9 samples, 0.01%)</title><rect x="36.9013%" y="981" width="0.0130%" height="15" fill="rgb(219,200,50)" fg:x="25563" fg:w="9"/><text x="37.1513%" y="991.50"></text></g><g><title>SipHashUint256Extra (323 samples, 0.47%)</title><rect x="36.9201%" y="1045" width="0.4663%" height="15" fill="rgb(245,200,0)" fg:x="25576" fg:w="323"/><text x="37.1701%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (131 samples, 0.19%)</title><rect x="37.1972%" y="1029" width="0.1891%" height="15" fill="rgb(245,119,33)" fg:x="25768" fg:w="131"/><text x="37.4472%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (131 samples, 0.19%)</title><rect x="37.1972%" y="1013" width="0.1891%" height="15" fill="rgb(231,125,12)" fg:x="25768" fg:w="131"/><text x="37.4472%" y="1023.50"></text></g><g><title>[[igc]] (21 samples, 0.03%)</title><rect x="37.4686%" y="933" width="0.0303%" height="15" fill="rgb(216,96,41)" fg:x="25956" fg:w="21"/><text x="37.7186%" y="943.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="37.4758%" y="917" width="0.0231%" height="15" fill="rgb(248,43,45)" fg:x="25961" fg:w="16"/><text x="37.7258%" y="927.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="37.4758%" y="901" width="0.0231%" height="15" fill="rgb(217,222,7)" fg:x="25961" fg:w="16"/><text x="37.7258%" y="911.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="37.4802%" y="885" width="0.0188%" height="15" fill="rgb(233,28,6)" fg:x="25964" fg:w="13"/><text x="37.7302%" y="895.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="37.4888%" y="869" width="0.0101%" height="15" fill="rgb(231,218,15)" fg:x="25970" fg:w="7"/><text x="37.7388%" y="879.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="37.4657%" y="1029" width="0.0404%" height="15" fill="rgb(226,171,48)" fg:x="25954" fg:w="28"/><text x="37.7157%" y="1039.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="37.4657%" y="1013" width="0.0404%" height="15" fill="rgb(235,201,9)" fg:x="25954" fg:w="28"/><text x="37.7157%" y="1023.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="37.4657%" y="997" width="0.0404%" height="15" fill="rgb(217,80,15)" fg:x="25954" fg:w="28"/><text x="37.7157%" y="1007.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="37.4672%" y="981" width="0.0390%" height="15" fill="rgb(219,152,8)" fg:x="25955" fg:w="27"/><text x="37.7172%" y="991.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="37.4672%" y="965" width="0.0390%" height="15" fill="rgb(243,107,38)" fg:x="25955" fg:w="27"/><text x="37.7172%" y="975.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="37.4672%" y="949" width="0.0390%" height="15" fill="rgb(231,17,5)" fg:x="25955" fg:w="27"/><text x="37.7172%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (26 samples, 0.04%)</title><rect x="37.5061%" y="1029" width="0.0375%" height="15" fill="rgb(209,25,54)" fg:x="25982" fg:w="26"/><text x="37.7561%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (26 samples, 0.04%)</title><rect x="37.5061%" y="1013" width="0.0375%" height="15" fill="rgb(219,0,2)" fg:x="25982" fg:w="26"/><text x="37.7561%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (26 samples, 0.04%)</title><rect x="37.5061%" y="997" width="0.0375%" height="15" fill="rgb(246,9,5)" fg:x="25982" fg:w="26"/><text x="37.7561%" y="1007.50"></text></g><g><title>SaltedOutpointHasher::operator (26 samples, 0.04%)</title><rect x="37.5061%" y="981" width="0.0375%" height="15" fill="rgb(226,159,4)" fg:x="25982" fg:w="26"/><text x="37.7561%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (120 samples, 0.17%)</title><rect x="37.3863%" y="1045" width="0.1732%" height="15" fill="rgb(219,175,34)" fg:x="25899" fg:w="120"/><text x="37.6363%" y="1055.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (11 samples, 0.02%)</title><rect x="37.5437%" y="1029" width="0.0159%" height="15" fill="rgb(236,10,46)" fg:x="26008" fg:w="11"/><text x="37.7937%" y="1039.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (11 samples, 0.02%)</title><rect x="37.5437%" y="1013" width="0.0159%" height="15" fill="rgb(240,211,16)" fg:x="26008" fg:w="11"/><text x="37.7937%" y="1023.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (11 samples, 0.02%)</title><rect x="37.5437%" y="997" width="0.0159%" height="15" fill="rgb(205,3,43)" fg:x="26008" fg:w="11"/><text x="37.7937%" y="1007.50"></text></g><g><title>operator== (11 samples, 0.02%)</title><rect x="37.5437%" y="981" width="0.0159%" height="15" fill="rgb(245,7,22)" fg:x="26008" fg:w="11"/><text x="37.7937%" y="991.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (11 samples, 0.02%)</title><rect x="37.5437%" y="965" width="0.0159%" height="15" fill="rgb(239,132,32)" fg:x="26008" fg:w="11"/><text x="37.7937%" y="975.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (11 samples, 0.02%)</title><rect x="37.5437%" y="949" width="0.0159%" height="15" fill="rgb(228,202,34)" fg:x="26008" fg:w="11"/><text x="37.7937%" y="959.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (11 samples, 0.02%)</title><rect x="37.5437%" y="933" width="0.0159%" height="15" fill="rgb(254,200,22)" fg:x="26008" fg:w="11"/><text x="37.7937%" y="943.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="37.5480%" y="917" width="0.0115%" height="15" fill="rgb(219,10,39)" fg:x="26011" fg:w="8"/><text x="37.7980%" y="927.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="37.5480%" y="901" width="0.0115%" height="15" fill="rgb(226,210,39)" fg:x="26011" fg:w="8"/><text x="37.7980%" y="911.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="37.5480%" y="885" width="0.0115%" height="15" fill="rgb(208,219,16)" fg:x="26011" fg:w="8"/><text x="37.7980%" y="895.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="37.5480%" y="869" width="0.0115%" height="15" fill="rgb(216,158,51)" fg:x="26011" fg:w="8"/><text x="37.7980%" y="879.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="37.5480%" y="853" width="0.0115%" height="15" fill="rgb(233,14,44)" fg:x="26011" fg:w="8"/><text x="37.7980%" y="863.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="37.5480%" y="837" width="0.0115%" height="15" fill="rgb(237,97,39)" fg:x="26011" fg:w="8"/><text x="37.7980%" y="847.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (28 samples, 0.04%)</title><rect x="37.5595%" y="1045" width="0.0404%" height="15" fill="rgb(218,198,43)" fg:x="26019" fg:w="28"/><text x="37.8095%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (7 samples, 0.01%)</title><rect x="37.5899%" y="1029" width="0.0101%" height="15" fill="rgb(231,104,20)" fg:x="26040" fg:w="7"/><text x="37.8399%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (521 samples, 0.75%)</title><rect x="36.8565%" y="1061" width="0.7521%" height="15" fill="rgb(254,36,13)" fg:x="25532" fg:w="521"/><text x="37.1065%" y="1071.50"></text></g><g><title>SipHashUint256Extra (335 samples, 0.48%)</title><rect x="37.6086%" y="1045" width="0.4836%" height="15" fill="rgb(248,14,50)" fg:x="26053" fg:w="335"/><text x="37.8586%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (171 samples, 0.25%)</title><rect x="37.8454%" y="1029" width="0.2468%" height="15" fill="rgb(217,107,29)" fg:x="26217" fg:w="171"/><text x="38.0954%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (171 samples, 0.25%)</title><rect x="37.8454%" y="1013" width="0.2468%" height="15" fill="rgb(251,169,33)" fg:x="26217" fg:w="171"/><text x="38.0954%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (8 samples, 0.01%)</title><rect x="38.0922%" y="1045" width="0.0115%" height="15" fill="rgb(217,108,32)" fg:x="26388" fg:w="8"/><text x="38.3422%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="38.0922%" y="1029" width="0.0115%" height="15" fill="rgb(219,66,42)" fg:x="26388" fg:w="8"/><text x="38.3422%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="38.0922%" y="1013" width="0.0115%" height="15" fill="rgb(206,180,7)" fg:x="26388" fg:w="8"/><text x="38.3422%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.01%)</title><rect x="38.0922%" y="997" width="0.0115%" height="15" fill="rgb(208,226,31)" fg:x="26388" fg:w="8"/><text x="38.3422%" y="1007.50"></text></g><g><title>SaltedOutpointHasher::operator (8 samples, 0.01%)</title><rect x="38.0922%" y="981" width="0.0115%" height="15" fill="rgb(218,26,49)" fg:x="26388" fg:w="8"/><text x="38.3422%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="38.0922%" y="965" width="0.0115%" height="15" fill="rgb(233,197,48)" fg:x="26388" fg:w="8"/><text x="38.3422%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (12 samples, 0.02%)</title><rect x="38.1543%" y="1013" width="0.0173%" height="15" fill="rgb(252,181,51)" fg:x="26431" fg:w="12"/><text x="38.4043%" y="1023.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (12 samples, 0.02%)</title><rect x="38.1543%" y="997" width="0.0173%" height="15" fill="rgb(253,90,19)" fg:x="26431" fg:w="12"/><text x="38.4043%" y="1007.50"></text></g><g><title>__memset_avx512_unaligned_erms (12 samples, 0.02%)</title><rect x="38.1543%" y="981" width="0.0173%" height="15" fill="rgb(215,171,30)" fg:x="26431" fg:w="12"/><text x="38.4043%" y="991.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="38.1557%" y="965" width="0.0159%" height="15" fill="rgb(214,222,9)" fg:x="26432" fg:w="11"/><text x="38.4057%" y="975.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="38.1557%" y="949" width="0.0159%" height="15" fill="rgb(223,3,22)" fg:x="26432" fg:w="11"/><text x="38.4057%" y="959.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="38.1557%" y="933" width="0.0159%" height="15" fill="rgb(225,196,46)" fg:x="26432" fg:w="11"/><text x="38.4057%" y="943.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="38.1557%" y="917" width="0.0159%" height="15" fill="rgb(209,110,37)" fg:x="26432" fg:w="11"/><text x="38.4057%" y="927.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="38.1572%" y="901" width="0.0144%" height="15" fill="rgb(249,89,12)" fg:x="26433" fg:w="10"/><text x="38.4072%" y="911.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="38.1615%" y="885" width="0.0101%" height="15" fill="rgb(226,27,33)" fg:x="26436" fg:w="7"/><text x="38.4115%" y="895.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="38.1615%" y="869" width="0.0101%" height="15" fill="rgb(213,82,22)" fg:x="26436" fg:w="7"/><text x="38.4115%" y="879.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (391 samples, 0.56%)</title><rect x="37.6086%" y="1061" width="0.5644%" height="15" fill="rgb(248,140,0)" fg:x="26053" fg:w="391"/><text x="37.8586%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (48 samples, 0.07%)</title><rect x="38.1038%" y="1045" width="0.0693%" height="15" fill="rgb(228,106,3)" fg:x="26396" fg:w="48"/><text x="38.3538%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (48 samples, 0.07%)</title><rect x="38.1038%" y="1029" width="0.0693%" height="15" fill="rgb(209,23,37)" fg:x="26396" fg:w="48"/><text x="38.3538%" y="1039.50"></text></g><g><title>SipHashUint256Extra (51 samples, 0.07%)</title><rect x="38.1745%" y="1045" width="0.0736%" height="15" fill="rgb(241,93,50)" fg:x="26445" fg:w="51"/><text x="38.4245%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (25 samples, 0.04%)</title><rect x="38.2120%" y="1029" width="0.0361%" height="15" fill="rgb(253,46,43)" fg:x="26471" fg:w="25"/><text x="38.4620%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (25 samples, 0.04%)</title><rect x="38.2120%" y="1013" width="0.0361%" height="15" fill="rgb(226,206,43)" fg:x="26471" fg:w="25"/><text x="38.4620%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (29 samples, 0.04%)</title><rect x="38.2481%" y="1045" width="0.0419%" height="15" fill="rgb(217,54,7)" fg:x="26496" fg:w="29"/><text x="38.4981%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (86 samples, 0.12%)</title><rect x="38.1731%" y="1061" width="0.1241%" height="15" fill="rgb(223,5,52)" fg:x="26444" fg:w="86"/><text x="38.4231%" y="1071.50"></text></g><g><title>CCoinsViewCache::FetchCoin (5,176 samples, 7.47%)</title><rect x="30.8485%" y="1109" width="7.4718%" height="15" fill="rgb(206,52,46)" fg:x="21370" fg:w="5176"/><text x="31.0985%" y="1119.50">CCoinsView..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1,023 samples, 1.48%)</title><rect x="36.8435%" y="1093" width="1.4767%" height="15" fill="rgb(253,136,11)" fg:x="25523" fg:w="1023"/><text x="37.0935%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1,023 samples, 1.48%)</title><rect x="36.8435%" y="1077" width="1.4767%" height="15" fill="rgb(208,106,33)" fg:x="25523" fg:w="1023"/><text x="37.0935%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (16 samples, 0.02%)</title><rect x="38.2972%" y="1061" width="0.0231%" height="15" fill="rgb(206,54,4)" fg:x="26530" fg:w="16"/><text x="38.5472%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (16 samples, 0.02%)</title><rect x="38.2972%" y="1045" width="0.0231%" height="15" fill="rgb(213,3,15)" fg:x="26530" fg:w="16"/><text x="38.5472%" y="1055.50"></text></g><g><title>SipHashUint256Extra (158 samples, 0.23%)</title><rect x="38.3261%" y="1109" width="0.2281%" height="15" fill="rgb(252,211,39)" fg:x="26550" fg:w="158"/><text x="38.5761%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (60 samples, 0.09%)</title><rect x="38.4675%" y="1093" width="0.0866%" height="15" fill="rgb(223,6,36)" fg:x="26648" fg:w="60"/><text x="38.7175%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (60 samples, 0.09%)</title><rect x="38.4675%" y="1077" width="0.0866%" height="15" fill="rgb(252,169,45)" fg:x="26648" fg:w="60"/><text x="38.7175%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (26 samples, 0.04%)</title><rect x="38.5556%" y="1109" width="0.0375%" height="15" fill="rgb(212,48,26)" fg:x="26709" fg:w="26"/><text x="38.8056%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (23 samples, 0.03%)</title><rect x="38.6076%" y="949" width="0.0332%" height="15" fill="rgb(251,102,48)" fg:x="26745" fg:w="23"/><text x="38.8576%" y="959.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (33 samples, 0.05%)</title><rect x="38.6465%" y="949" width="0.0476%" height="15" fill="rgb(243,208,16)" fg:x="26772" fg:w="33"/><text x="38.8965%" y="959.50"></text></g><g><title>CCoinsViewCache::GetCoin (5,462 samples, 7.88%)</title><rect x="30.8485%" y="1125" width="7.8846%" height="15" fill="rgb(219,96,24)" fg:x="21370" fg:w="5462"/><text x="31.0985%" y="1135.50">CCoinsViewC..</text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (89 samples, 0.13%)</title><rect x="38.6047%" y="1109" width="0.1285%" height="15" fill="rgb(219,33,29)" fg:x="26743" fg:w="89"/><text x="38.8547%" y="1119.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (89 samples, 0.13%)</title><rect x="38.6047%" y="1093" width="0.1285%" height="15" fill="rgb(223,176,5)" fg:x="26743" fg:w="89"/><text x="38.8547%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (89 samples, 0.13%)</title><rect x="38.6047%" y="1077" width="0.1285%" height="15" fill="rgb(228,140,14)" fg:x="26743" fg:w="89"/><text x="38.8547%" y="1087.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (89 samples, 0.13%)</title><rect x="38.6047%" y="1061" width="0.1285%" height="15" fill="rgb(217,179,31)" fg:x="26743" fg:w="89"/><text x="38.8547%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (89 samples, 0.13%)</title><rect x="38.6047%" y="1045" width="0.1285%" height="15" fill="rgb(230,9,30)" fg:x="26743" fg:w="89"/><text x="38.8547%" y="1055.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (88 samples, 0.13%)</title><rect x="38.6061%" y="1029" width="0.1270%" height="15" fill="rgb(230,136,20)" fg:x="26744" fg:w="88"/><text x="38.8561%" y="1039.50"></text></g><g><title>Coin::Coin (88 samples, 0.13%)</title><rect x="38.6061%" y="1013" width="0.1270%" height="15" fill="rgb(215,210,22)" fg:x="26744" fg:w="88"/><text x="38.8561%" y="1023.50"></text></g><g><title>CTxOut::CTxOut (88 samples, 0.13%)</title><rect x="38.6061%" y="997" width="0.1270%" height="15" fill="rgb(218,43,5)" fg:x="26744" fg:w="88"/><text x="38.8561%" y="1007.50"></text></g><g><title>CScript::CScript (88 samples, 0.13%)</title><rect x="38.6061%" y="981" width="0.1270%" height="15" fill="rgb(216,11,5)" fg:x="26744" fg:w="88"/><text x="38.8561%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (88 samples, 0.13%)</title><rect x="38.6061%" y="965" width="0.1270%" height="15" fill="rgb(209,82,29)" fg:x="26744" fg:w="88"/><text x="38.8561%" y="975.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (27 samples, 0.04%)</title><rect x="38.6942%" y="949" width="0.0390%" height="15" fill="rgb(244,115,12)" fg:x="26805" fg:w="27"/><text x="38.9442%" y="959.50"></text></g><g><title>SipHashUint256Extra (88 samples, 0.13%)</title><rect x="38.7505%" y="1125" width="0.1270%" height="15" fill="rgb(222,82,18)" fg:x="26844" fg:w="88"/><text x="39.0005%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (42 samples, 0.06%)</title><rect x="38.8169%" y="1109" width="0.0606%" height="15" fill="rgb(249,227,8)" fg:x="26890" fg:w="42"/><text x="39.0669%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (42 samples, 0.06%)</title><rect x="38.8169%" y="1093" width="0.0606%" height="15" fill="rgb(253,141,45)" fg:x="26890" fg:w="42"/><text x="39.0669%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (18 samples, 0.03%)</title><rect x="38.9251%" y="1077" width="0.0260%" height="15" fill="rgb(234,184,4)" fg:x="26965" fg:w="18"/><text x="39.1751%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (18 samples, 0.03%)</title><rect x="38.9251%" y="1061" width="0.0260%" height="15" fill="rgb(218,194,23)" fg:x="26965" fg:w="18"/><text x="39.1751%" y="1071.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (7 samples, 0.01%)</title><rect x="38.9410%" y="1045" width="0.0101%" height="15" fill="rgb(235,66,41)" fg:x="26976" fg:w="7"/><text x="39.1910%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (19 samples, 0.03%)</title><rect x="38.9251%" y="1109" width="0.0274%" height="15" fill="rgb(245,217,1)" fg:x="26965" fg:w="19"/><text x="39.1751%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (19 samples, 0.03%)</title><rect x="38.9251%" y="1093" width="0.0274%" height="15" fill="rgb(229,91,1)" fg:x="26965" fg:w="19"/><text x="39.1751%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (61 samples, 0.09%)</title><rect x="38.8789%" y="1125" width="0.0881%" height="15" fill="rgb(207,101,30)" fg:x="26933" fg:w="61"/><text x="39.1289%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (10 samples, 0.01%)</title><rect x="38.9526%" y="1109" width="0.0144%" height="15" fill="rgb(223,82,49)" fg:x="26984" fg:w="10"/><text x="39.2026%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (10 samples, 0.01%)</title><rect x="38.9526%" y="1093" width="0.0144%" height="15" fill="rgb(218,167,17)" fg:x="26984" fg:w="10"/><text x="39.2026%" y="1103.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (10 samples, 0.01%)</title><rect x="38.9526%" y="1077" width="0.0144%" height="15" fill="rgb(208,103,14)" fg:x="26984" fg:w="10"/><text x="39.2026%" y="1087.50"></text></g><g><title>operator== (10 samples, 0.01%)</title><rect x="38.9526%" y="1061" width="0.0144%" height="15" fill="rgb(238,20,8)" fg:x="26984" fg:w="10"/><text x="39.2026%" y="1071.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (10 samples, 0.01%)</title><rect x="38.9526%" y="1045" width="0.0144%" height="15" fill="rgb(218,80,54)" fg:x="26984" fg:w="10"/><text x="39.2026%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (10 samples, 0.01%)</title><rect x="38.9526%" y="1029" width="0.0144%" height="15" fill="rgb(240,144,17)" fg:x="26984" fg:w="10"/><text x="39.2026%" y="1039.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (10 samples, 0.01%)</title><rect x="38.9526%" y="1013" width="0.0144%" height="15" fill="rgb(245,27,50)" fg:x="26984" fg:w="10"/><text x="39.2026%" y="1023.50"></text></g><g><title>Coin::operator= (8 samples, 0.01%)</title><rect x="38.9915%" y="1077" width="0.0115%" height="15" fill="rgb(251,51,7)" fg:x="27011" fg:w="8"/><text x="39.2415%" y="1087.50"></text></g><g><title>CTxOut::operator= (7 samples, 0.01%)</title><rect x="38.9930%" y="1061" width="0.0101%" height="15" fill="rgb(245,217,29)" fg:x="27012" fg:w="7"/><text x="39.2430%" y="1071.50"></text></g><g><title>CScript::operator= (7 samples, 0.01%)</title><rect x="38.9930%" y="1045" width="0.0101%" height="15" fill="rgb(221,176,29)" fg:x="27012" fg:w="7"/><text x="39.2430%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (7 samples, 0.01%)</title><rect x="38.9930%" y="1029" width="0.0101%" height="15" fill="rgb(212,180,24)" fg:x="27012" fg:w="7"/><text x="39.2430%" y="1039.50"></text></g><g><title>CCoinsViewCache::FetchCoin (21 samples, 0.03%)</title><rect x="38.9771%" y="1093" width="0.0303%" height="15" fill="rgb(254,24,2)" fg:x="27001" fg:w="21"/><text x="39.2271%" y="1103.50"></text></g><g><title>CCoinsViewCache::GetCoin (12 samples, 0.02%)</title><rect x="39.0074%" y="1093" width="0.0173%" height="15" fill="rgb(230,100,2)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="1103.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (12 samples, 0.02%)</title><rect x="39.0074%" y="1077" width="0.0173%" height="15" fill="rgb(219,142,25)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="1087.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (12 samples, 0.02%)</title><rect x="39.0074%" y="1061" width="0.0173%" height="15" fill="rgb(240,73,43)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="1071.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (12 samples, 0.02%)</title><rect x="39.0074%" y="1045" width="0.0173%" height="15" fill="rgb(214,114,15)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="1055.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (12 samples, 0.02%)</title><rect x="39.0074%" y="1029" width="0.0173%" height="15" fill="rgb(207,130,4)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="1039.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (12 samples, 0.02%)</title><rect x="39.0074%" y="1013" width="0.0173%" height="15" fill="rgb(221,25,40)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="1023.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (12 samples, 0.02%)</title><rect x="39.0074%" y="997" width="0.0173%" height="15" fill="rgb(241,184,7)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="1007.50"></text></g><g><title>Coin::Coin (12 samples, 0.02%)</title><rect x="39.0074%" y="981" width="0.0173%" height="15" fill="rgb(235,159,4)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="991.50"></text></g><g><title>CTxOut::CTxOut (12 samples, 0.02%)</title><rect x="39.0074%" y="965" width="0.0173%" height="15" fill="rgb(214,87,48)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="975.50"></text></g><g><title>CScript::CScript (12 samples, 0.02%)</title><rect x="39.0074%" y="949" width="0.0173%" height="15" fill="rgb(246,198,24)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="959.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (12 samples, 0.02%)</title><rect x="39.0074%" y="933" width="0.0173%" height="15" fill="rgb(209,66,40)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="943.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (12 samples, 0.02%)</title><rect x="39.0074%" y="917" width="0.0173%" height="15" fill="rgb(233,147,39)" fg:x="27022" fg:w="12"/><text x="39.2574%" y="927.50"></text></g><g><title>SipHashUint256Extra (23 samples, 0.03%)</title><rect x="39.0247%" y="1093" width="0.0332%" height="15" fill="rgb(231,145,52)" fg:x="27034" fg:w="23"/><text x="39.2747%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (11 samples, 0.02%)</title><rect x="39.0421%" y="1077" width="0.0159%" height="15" fill="rgb(206,20,26)" fg:x="27046" fg:w="11"/><text x="39.2921%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (11 samples, 0.02%)</title><rect x="39.0421%" y="1061" width="0.0159%" height="15" fill="rgb(238,220,4)" fg:x="27046" fg:w="11"/><text x="39.2921%" y="1071.50"></text></g><g><title>Coin::operator= (22 samples, 0.03%)</title><rect x="39.1388%" y="1061" width="0.0318%" height="15" fill="rgb(252,195,42)" fg:x="27113" fg:w="22"/><text x="39.3888%" y="1071.50"></text></g><g><title>CTxOut::operator= (19 samples, 0.03%)</title><rect x="39.1431%" y="1045" width="0.0274%" height="15" fill="rgb(209,10,6)" fg:x="27116" fg:w="19"/><text x="39.3931%" y="1055.50"></text></g><g><title>CScript::operator= (19 samples, 0.03%)</title><rect x="39.1431%" y="1029" width="0.0274%" height="15" fill="rgb(229,3,52)" fg:x="27116" fg:w="19"/><text x="39.3931%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (19 samples, 0.03%)</title><rect x="39.1431%" y="1013" width="0.0274%" height="15" fill="rgb(253,49,37)" fg:x="27116" fg:w="19"/><text x="39.3931%" y="1023.50"></text></g><g><title>CCoinsViewCache::FetchCoin (86 samples, 0.12%)</title><rect x="39.0608%" y="1077" width="0.1241%" height="15" fill="rgb(240,103,49)" fg:x="27059" fg:w="86"/><text x="39.3108%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (10 samples, 0.01%)</title><rect x="39.1705%" y="1061" width="0.0144%" height="15" fill="rgb(250,182,30)" fg:x="27135" fg:w="10"/><text x="39.4205%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (165 samples, 0.24%)</title><rect x="39.1850%" y="1077" width="0.2382%" height="15" fill="rgb(248,8,30)" fg:x="27145" fg:w="165"/><text x="39.4350%" y="1087.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (163 samples, 0.24%)</title><rect x="39.1879%" y="1061" width="0.2353%" height="15" fill="rgb(237,120,30)" fg:x="27147" fg:w="163"/><text x="39.4379%" y="1071.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (162 samples, 0.23%)</title><rect x="39.1893%" y="1045" width="0.2339%" height="15" fill="rgb(221,146,34)" fg:x="27148" fg:w="162"/><text x="39.4393%" y="1055.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (162 samples, 0.23%)</title><rect x="39.1893%" y="1029" width="0.2339%" height="15" fill="rgb(242,55,13)" fg:x="27148" fg:w="162"/><text x="39.4393%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (162 samples, 0.23%)</title><rect x="39.1893%" y="1013" width="0.2339%" height="15" fill="rgb(242,112,31)" fg:x="27148" fg:w="162"/><text x="39.4393%" y="1023.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (162 samples, 0.23%)</title><rect x="39.1893%" y="997" width="0.2339%" height="15" fill="rgb(249,192,27)" fg:x="27148" fg:w="162"/><text x="39.4393%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (161 samples, 0.23%)</title><rect x="39.1907%" y="981" width="0.2324%" height="15" fill="rgb(208,204,44)" fg:x="27149" fg:w="161"/><text x="39.4407%" y="991.50"></text></g><g><title>Coin::Coin (161 samples, 0.23%)</title><rect x="39.1907%" y="965" width="0.2324%" height="15" fill="rgb(208,93,54)" fg:x="27149" fg:w="161"/><text x="39.4407%" y="975.50"></text></g><g><title>CTxOut::CTxOut (158 samples, 0.23%)</title><rect x="39.1951%" y="949" width="0.2281%" height="15" fill="rgb(242,1,31)" fg:x="27152" fg:w="158"/><text x="39.4451%" y="959.50"></text></g><g><title>CScript::CScript (158 samples, 0.23%)</title><rect x="39.1951%" y="933" width="0.2281%" height="15" fill="rgb(241,83,25)" fg:x="27152" fg:w="158"/><text x="39.4451%" y="943.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (158 samples, 0.23%)</title><rect x="39.1951%" y="917" width="0.2281%" height="15" fill="rgb(205,169,50)" fg:x="27152" fg:w="158"/><text x="39.4451%" y="927.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (158 samples, 0.23%)</title><rect x="39.1951%" y="901" width="0.2281%" height="15" fill="rgb(239,186,37)" fg:x="27152" fg:w="158"/><text x="39.4451%" y="911.50"></text></g><g><title>SipHashUint256Extra (90 samples, 0.13%)</title><rect x="39.4362%" y="1077" width="0.1299%" height="15" fill="rgb(205,221,10)" fg:x="27319" fg:w="90"/><text x="39.6862%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (37 samples, 0.05%)</title><rect x="39.5127%" y="1061" width="0.0534%" height="15" fill="rgb(218,196,15)" fg:x="27372" fg:w="37"/><text x="39.7627%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (37 samples, 0.05%)</title><rect x="39.5127%" y="1045" width="0.0534%" height="15" fill="rgb(218,196,35)" fg:x="27372" fg:w="37"/><text x="39.7627%" y="1055.50"></text></g><g><title>CCoinsViewCache::FetchCoin (19 samples, 0.03%)</title><rect x="39.5776%" y="997" width="0.0274%" height="15" fill="rgb(233,63,24)" fg:x="27417" fg:w="19"/><text x="39.8276%" y="1007.50"></text></g><g><title>CCoinsViewCache::GetCoin (10 samples, 0.01%)</title><rect x="39.6050%" y="997" width="0.0144%" height="15" fill="rgb(225,8,4)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="1007.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (10 samples, 0.01%)</title><rect x="39.6050%" y="981" width="0.0144%" height="15" fill="rgb(234,105,35)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="991.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (10 samples, 0.01%)</title><rect x="39.6050%" y="965" width="0.0144%" height="15" fill="rgb(236,21,32)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="975.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (10 samples, 0.01%)</title><rect x="39.6050%" y="949" width="0.0144%" height="15" fill="rgb(228,109,6)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="959.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (10 samples, 0.01%)</title><rect x="39.6050%" y="933" width="0.0144%" height="15" fill="rgb(229,215,31)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="943.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (10 samples, 0.01%)</title><rect x="39.6050%" y="917" width="0.0144%" height="15" fill="rgb(221,52,54)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="927.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (10 samples, 0.01%)</title><rect x="39.6050%" y="901" width="0.0144%" height="15" fill="rgb(252,129,43)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="911.50"></text></g><g><title>Coin::Coin (10 samples, 0.01%)</title><rect x="39.6050%" y="885" width="0.0144%" height="15" fill="rgb(248,183,27)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="895.50"></text></g><g><title>CTxOut::CTxOut (10 samples, 0.01%)</title><rect x="39.6050%" y="869" width="0.0144%" height="15" fill="rgb(250,0,22)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="879.50"></text></g><g><title>CScript::CScript (10 samples, 0.01%)</title><rect x="39.6050%" y="853" width="0.0144%" height="15" fill="rgb(213,166,10)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="863.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (10 samples, 0.01%)</title><rect x="39.6050%" y="837" width="0.0144%" height="15" fill="rgb(207,163,36)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="847.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (10 samples, 0.01%)</title><rect x="39.6050%" y="821" width="0.0144%" height="15" fill="rgb(208,122,22)" fg:x="27436" fg:w="10"/><text x="39.8550%" y="831.50"></text></g><g><title>SipHashUint256Extra (28 samples, 0.04%)</title><rect x="39.6253%" y="997" width="0.0404%" height="15" fill="rgb(207,104,49)" fg:x="27450" fg:w="28"/><text x="39.8753%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (11 samples, 0.02%)</title><rect x="39.6498%" y="981" width="0.0159%" height="15" fill="rgb(248,211,50)" fg:x="27467" fg:w="11"/><text x="39.8998%" y="991.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (11 samples, 0.02%)</title><rect x="39.6498%" y="965" width="0.0159%" height="15" fill="rgb(217,13,45)" fg:x="27467" fg:w="11"/><text x="39.8998%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (69 samples, 0.10%)</title><rect x="39.5762%" y="1061" width="0.0996%" height="15" fill="rgb(211,216,49)" fg:x="27416" fg:w="69"/><text x="39.8262%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (69 samples, 0.10%)</title><rect x="39.5762%" y="1045" width="0.0996%" height="15" fill="rgb(221,58,53)" fg:x="27416" fg:w="69"/><text x="39.8262%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (69 samples, 0.10%)</title><rect x="39.5762%" y="1029" width="0.0996%" height="15" fill="rgb(220,112,41)" fg:x="27416" fg:w="69"/><text x="39.8262%" y="1039.50"></text></g><g><title>SaltedOutpointHasher::operator (69 samples, 0.10%)</title><rect x="39.5762%" y="1013" width="0.0996%" height="15" fill="rgb(236,38,28)" fg:x="27416" fg:w="69"/><text x="39.8262%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%)</title><rect x="39.6657%" y="997" width="0.0101%" height="15" fill="rgb(227,195,22)" fg:x="27478" fg:w="7"/><text x="39.9157%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (427 samples, 0.62%)</title><rect x="39.0608%" y="1093" width="0.6164%" height="15" fill="rgb(214,55,33)" fg:x="27059" fg:w="427"/><text x="39.3108%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (77 samples, 0.11%)</title><rect x="39.5661%" y="1077" width="0.1112%" height="15" fill="rgb(248,80,13)" fg:x="27409" fg:w="77"/><text x="39.8161%" y="1087.50"></text></g><g><title>SipHashUint256Extra (68 samples, 0.10%)</title><rect x="39.6772%" y="1077" width="0.0982%" height="15" fill="rgb(238,52,6)" fg:x="27486" fg:w="68"/><text x="39.9272%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (29 samples, 0.04%)</title><rect x="39.7335%" y="1061" width="0.0419%" height="15" fill="rgb(224,198,47)" fg:x="27525" fg:w="29"/><text x="39.9835%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (29 samples, 0.04%)</title><rect x="39.7335%" y="1045" width="0.0419%" height="15" fill="rgb(233,171,20)" fg:x="27525" fg:w="29"/><text x="39.9835%" y="1055.50"></text></g><g><title>CCoinsViewCache::FetchCoin (20 samples, 0.03%)</title><rect x="39.7754%" y="997" width="0.0289%" height="15" fill="rgb(241,30,25)" fg:x="27554" fg:w="20"/><text x="40.0254%" y="1007.50"></text></g><g><title>SipHashUint256Extra (62 samples, 0.09%)</title><rect x="39.8057%" y="997" width="0.0895%" height="15" fill="rgb(207,171,38)" fg:x="27575" fg:w="62"/><text x="40.0557%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (20 samples, 0.03%)</title><rect x="39.8663%" y="981" width="0.0289%" height="15" fill="rgb(234,70,1)" fg:x="27617" fg:w="20"/><text x="40.1163%" y="991.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (20 samples, 0.03%)</title><rect x="39.8663%" y="965" width="0.0289%" height="15" fill="rgb(232,178,18)" fg:x="27617" fg:w="20"/><text x="40.1163%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (84 samples, 0.12%)</title><rect x="39.7754%" y="1077" width="0.1213%" height="15" fill="rgb(241,78,40)" fg:x="27554" fg:w="84"/><text x="40.0254%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (84 samples, 0.12%)</title><rect x="39.7754%" y="1061" width="0.1213%" height="15" fill="rgb(222,35,25)" fg:x="27554" fg:w="84"/><text x="40.0254%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (84 samples, 0.12%)</title><rect x="39.7754%" y="1045" width="0.1213%" height="15" fill="rgb(207,92,16)" fg:x="27554" fg:w="84"/><text x="40.0254%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (84 samples, 0.12%)</title><rect x="39.7754%" y="1029" width="0.1213%" height="15" fill="rgb(216,59,51)" fg:x="27554" fg:w="84"/><text x="40.0254%" y="1039.50"></text></g><g><title>SaltedOutpointHasher::operator (84 samples, 0.12%)</title><rect x="39.7754%" y="1013" width="0.1213%" height="15" fill="rgb(213,80,28)" fg:x="27554" fg:w="84"/><text x="40.0254%" y="1023.50"></text></g><g><title>SipHashUint256Extra (101 samples, 0.15%)</title><rect x="39.9125%" y="997" width="0.1458%" height="15" fill="rgb(220,93,7)" fg:x="27649" fg:w="101"/><text x="40.1625%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (41 samples, 0.06%)</title><rect x="39.9991%" y="981" width="0.0592%" height="15" fill="rgb(225,24,44)" fg:x="27709" fg:w="41"/><text x="40.2491%" y="991.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (41 samples, 0.06%)</title><rect x="39.9991%" y="965" width="0.0592%" height="15" fill="rgb(243,74,40)" fg:x="27709" fg:w="41"/><text x="40.2491%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (280 samples, 0.40%)</title><rect x="39.6772%" y="1093" width="0.4042%" height="15" fill="rgb(228,39,7)" fg:x="27486" fg:w="280"/><text x="39.9272%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (128 samples, 0.18%)</title><rect x="39.8966%" y="1077" width="0.1848%" height="15" fill="rgb(227,79,8)" fg:x="27638" fg:w="128"/><text x="40.1466%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (128 samples, 0.18%)</title><rect x="39.8966%" y="1061" width="0.1848%" height="15" fill="rgb(236,58,11)" fg:x="27638" fg:w="128"/><text x="40.1466%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (119 samples, 0.17%)</title><rect x="39.9096%" y="1045" width="0.1718%" height="15" fill="rgb(249,63,35)" fg:x="27647" fg:w="119"/><text x="40.1596%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (119 samples, 0.17%)</title><rect x="39.9096%" y="1029" width="0.1718%" height="15" fill="rgb(252,114,16)" fg:x="27647" fg:w="119"/><text x="40.1596%" y="1039.50"></text></g><g><title>SaltedOutpointHasher::operator (119 samples, 0.17%)</title><rect x="39.9096%" y="1013" width="0.1718%" height="15" fill="rgb(254,151,24)" fg:x="27647" fg:w="119"/><text x="40.1596%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (15 samples, 0.02%)</title><rect x="40.0598%" y="997" width="0.0217%" height="15" fill="rgb(253,54,39)" fg:x="27751" fg:w="15"/><text x="40.3098%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (15 samples, 0.02%)</title><rect x="40.0598%" y="981" width="0.0217%" height="15" fill="rgb(243,25,45)" fg:x="27751" fg:w="15"/><text x="40.3098%" y="991.50"></text></g><g><title>CCoinsViewCache::FetchCoin (39 samples, 0.06%)</title><rect x="40.0814%" y="1077" width="0.0563%" height="15" fill="rgb(234,134,9)" fg:x="27766" fg:w="39"/><text x="40.3314%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (8 samples, 0.01%)</title><rect x="40.1262%" y="1061" width="0.0115%" height="15" fill="rgb(227,166,31)" fg:x="27797" fg:w="8"/><text x="40.3762%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (57 samples, 0.08%)</title><rect x="40.1377%" y="1077" width="0.0823%" height="15" fill="rgb(245,143,41)" fg:x="27805" fg:w="57"/><text x="40.3877%" y="1087.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (57 samples, 0.08%)</title><rect x="40.1377%" y="1061" width="0.0823%" height="15" fill="rgb(238,181,32)" fg:x="27805" fg:w="57"/><text x="40.3877%" y="1071.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (57 samples, 0.08%)</title><rect x="40.1377%" y="1045" width="0.0823%" height="15" fill="rgb(224,113,18)" fg:x="27805" fg:w="57"/><text x="40.3877%" y="1055.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (57 samples, 0.08%)</title><rect x="40.1377%" y="1029" width="0.0823%" height="15" fill="rgb(240,229,28)" fg:x="27805" fg:w="57"/><text x="40.3877%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (57 samples, 0.08%)</title><rect x="40.1377%" y="1013" width="0.0823%" height="15" fill="rgb(250,185,3)" fg:x="27805" fg:w="57"/><text x="40.3877%" y="1023.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (57 samples, 0.08%)</title><rect x="40.1377%" y="997" width="0.0823%" height="15" fill="rgb(212,59,25)" fg:x="27805" fg:w="57"/><text x="40.3877%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (56 samples, 0.08%)</title><rect x="40.1392%" y="981" width="0.0808%" height="15" fill="rgb(221,87,20)" fg:x="27806" fg:w="56"/><text x="40.3892%" y="991.50"></text></g><g><title>Coin::Coin (56 samples, 0.08%)</title><rect x="40.1392%" y="965" width="0.0808%" height="15" fill="rgb(213,74,28)" fg:x="27806" fg:w="56"/><text x="40.3892%" y="975.50"></text></g><g><title>CTxOut::CTxOut (56 samples, 0.08%)</title><rect x="40.1392%" y="949" width="0.0808%" height="15" fill="rgb(224,132,34)" fg:x="27806" fg:w="56"/><text x="40.3892%" y="959.50"></text></g><g><title>CScript::CScript (56 samples, 0.08%)</title><rect x="40.1392%" y="933" width="0.0808%" height="15" fill="rgb(222,101,24)" fg:x="27806" fg:w="56"/><text x="40.3892%" y="943.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (56 samples, 0.08%)</title><rect x="40.1392%" y="917" width="0.0808%" height="15" fill="rgb(254,142,4)" fg:x="27806" fg:w="56"/><text x="40.3892%" y="927.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (56 samples, 0.08%)</title><rect x="40.1392%" y="901" width="0.0808%" height="15" fill="rgb(230,229,49)" fg:x="27806" fg:w="56"/><text x="40.3892%" y="911.50"></text></g><g><title>SipHashUint256Extra (14 samples, 0.02%)</title><rect x="40.2287%" y="1077" width="0.0202%" height="15" fill="rgb(238,70,47)" fg:x="27868" fg:w="14"/><text x="40.4787%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="40.2388%" y="1061" width="0.0101%" height="15" fill="rgb(231,160,17)" fg:x="27875" fg:w="7"/><text x="40.4888%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="40.2388%" y="1045" width="0.0101%" height="15" fill="rgb(218,68,53)" fg:x="27875" fg:w="7"/><text x="40.4888%" y="1055.50"></text></g><g><title>decltype  (33 samples, 0.05%)</title><rect x="40.2518%" y="1061" width="0.0476%" height="15" fill="rgb(236,111,10)" fg:x="27884" fg:w="33"/><text x="40.5018%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (33 samples, 0.05%)</title><rect x="40.2518%" y="1045" width="0.0476%" height="15" fill="rgb(224,34,41)" fg:x="27884" fg:w="33"/><text x="40.5018%" y="1055.50"></text></g><g><title>decltype  (33 samples, 0.05%)</title><rect x="40.2518%" y="1029" width="0.0476%" height="15" fill="rgb(241,118,19)" fg:x="27884" fg:w="33"/><text x="40.5018%" y="1039.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (33 samples, 0.05%)</title><rect x="40.2518%" y="1013" width="0.0476%" height="15" fill="rgb(238,129,25)" fg:x="27884" fg:w="33"/><text x="40.5018%" y="1023.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (33 samples, 0.05%)</title><rect x="40.2518%" y="997" width="0.0476%" height="15" fill="rgb(238,22,31)" fg:x="27884" fg:w="33"/><text x="40.5018%" y="1007.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="40.2532%" y="981" width="0.0462%" height="15" fill="rgb(222,174,48)" fg:x="27885" fg:w="32"/><text x="40.5032%" y="991.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="40.2532%" y="965" width="0.0462%" height="15" fill="rgb(206,152,40)" fg:x="27885" fg:w="32"/><text x="40.5032%" y="975.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="40.2546%" y="949" width="0.0447%" height="15" fill="rgb(218,99,54)" fg:x="27886" fg:w="31"/><text x="40.5046%" y="959.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="40.2546%" y="933" width="0.0447%" height="15" fill="rgb(220,174,26)" fg:x="27886" fg:w="31"/><text x="40.5046%" y="943.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="40.2604%" y="917" width="0.0390%" height="15" fill="rgb(245,116,9)" fg:x="27890" fg:w="27"/><text x="40.5104%" y="927.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="40.2676%" y="901" width="0.0318%" height="15" fill="rgb(209,72,35)" fg:x="27895" fg:w="22"/><text x="40.5176%" y="911.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="40.2720%" y="885" width="0.0274%" height="15" fill="rgb(226,126,21)" fg:x="27898" fg:w="19"/><text x="40.5220%" y="895.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="40.2806%" y="869" width="0.0188%" height="15" fill="rgb(227,192,1)" fg:x="27904" fg:w="13"/><text x="40.5306%" y="879.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="40.2893%" y="853" width="0.0101%" height="15" fill="rgb(237,180,29)" fg:x="27910" fg:w="7"/><text x="40.5393%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (160 samples, 0.23%)</title><rect x="40.0814%" y="1093" width="0.2310%" height="15" fill="rgb(230,197,35)" fg:x="27766" fg:w="160"/><text x="40.3314%" y="1103.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (42 samples, 0.06%)</title><rect x="40.2518%" y="1077" width="0.0606%" height="15" fill="rgb(246,193,31)" fg:x="27884" fg:w="42"/><text x="40.5018%" y="1087.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (7 samples, 0.01%)</title><rect x="40.3023%" y="1061" width="0.0101%" height="15" fill="rgb(241,36,4)" fg:x="27919" fg:w="7"/><text x="40.5523%" y="1071.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (7 samples, 0.01%)</title><rect x="40.3023%" y="1045" width="0.0101%" height="15" fill="rgb(241,130,17)" fg:x="27919" fg:w="7"/><text x="40.5523%" y="1055.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (7 samples, 0.01%)</title><rect x="40.3023%" y="1029" width="0.0101%" height="15" fill="rgb(206,137,32)" fg:x="27919" fg:w="7"/><text x="40.5523%" y="1039.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (7 samples, 0.01%)</title><rect x="40.3023%" y="1013" width="0.0101%" height="15" fill="rgb(237,228,51)" fg:x="27919" fg:w="7"/><text x="40.5523%" y="1023.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (7 samples, 0.01%)</title><rect x="40.3023%" y="997" width="0.0101%" height="15" fill="rgb(243,6,42)" fg:x="27919" fg:w="7"/><text x="40.5523%" y="1007.50"></text></g><g><title>operator new (7 samples, 0.01%)</title><rect x="40.3023%" y="981" width="0.0101%" height="15" fill="rgb(251,74,28)" fg:x="27919" fg:w="7"/><text x="40.5523%" y="991.50"></text></g><g><title>CCoinsViewCache::AddCoin (9 samples, 0.01%)</title><rect x="40.3196%" y="1061" width="0.0130%" height="15" fill="rgb(218,20,49)" fg:x="27931" fg:w="9"/><text x="40.5696%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (254 samples, 0.37%)</title><rect x="40.3355%" y="1061" width="0.3667%" height="15" fill="rgb(238,28,14)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="1071.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (254 samples, 0.37%)</title><rect x="40.3355%" y="1045" width="0.3667%" height="15" fill="rgb(229,40,46)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="1055.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (254 samples, 0.37%)</title><rect x="40.3355%" y="1029" width="0.3667%" height="15" fill="rgb(244,195,20)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (254 samples, 0.37%)</title><rect x="40.3355%" y="1013" width="0.3667%" height="15" fill="rgb(253,56,35)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="1023.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (254 samples, 0.37%)</title><rect x="40.3355%" y="997" width="0.3667%" height="15" fill="rgb(210,149,44)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (254 samples, 0.37%)</title><rect x="40.3355%" y="981" width="0.3667%" height="15" fill="rgb(240,135,12)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="991.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (254 samples, 0.37%)</title><rect x="40.3355%" y="965" width="0.3667%" height="15" fill="rgb(251,24,50)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="975.50"></text></g><g><title>Coin::Coin (254 samples, 0.37%)</title><rect x="40.3355%" y="949" width="0.3667%" height="15" fill="rgb(243,200,47)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="959.50"></text></g><g><title>CTxOut::CTxOut (254 samples, 0.37%)</title><rect x="40.3355%" y="933" width="0.3667%" height="15" fill="rgb(224,166,26)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="943.50"></text></g><g><title>CScript::CScript (254 samples, 0.37%)</title><rect x="40.3355%" y="917" width="0.3667%" height="15" fill="rgb(233,0,47)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="927.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (254 samples, 0.37%)</title><rect x="40.3355%" y="901" width="0.3667%" height="15" fill="rgb(253,80,5)" fg:x="27942" fg:w="254"/><text x="40.5855%" y="911.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (250 samples, 0.36%)</title><rect x="40.3413%" y="885" width="0.3609%" height="15" fill="rgb(214,133,25)" fg:x="27946" fg:w="250"/><text x="40.5913%" y="895.50"></text></g><g><title>CTransaction::IsCoinBase (7 samples, 0.01%)</title><rect x="40.7036%" y="1045" width="0.0101%" height="15" fill="rgb(209,27,14)" fg:x="28197" fg:w="7"/><text x="40.9536%" y="1055.50"></text></g><g><title>COutPoint::IsNull (7 samples, 0.01%)</title><rect x="40.7036%" y="1029" width="0.0101%" height="15" fill="rgb(219,102,51)" fg:x="28197" fg:w="7"/><text x="40.9536%" y="1039.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (7 samples, 0.01%)</title><rect x="40.7036%" y="1013" width="0.0101%" height="15" fill="rgb(237,18,16)" fg:x="28197" fg:w="7"/><text x="40.9536%" y="1023.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (7 samples, 0.01%)</title><rect x="40.7036%" y="997" width="0.0101%" height="15" fill="rgb(241,85,17)" fg:x="28197" fg:w="7"/><text x="40.9536%" y="1007.50"></text></g><g><title>Chainstate::ConnectBlock (11 samples, 0.02%)</title><rect x="40.7021%" y="1061" width="0.0159%" height="15" fill="rgb(236,90,42)" fg:x="28196" fg:w="11"/><text x="40.9521%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (283 samples, 0.41%)</title><rect x="40.3124%" y="1093" width="0.4085%" height="15" fill="rgb(249,57,21)" fg:x="27926" fg:w="283"/><text x="40.5624%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (283 samples, 0.41%)</title><rect x="40.3124%" y="1077" width="0.4085%" height="15" fill="rgb(243,12,36)" fg:x="27926" fg:w="283"/><text x="40.5624%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (6,850 samples, 9.89%)</title><rect x="30.8355%" y="1141" width="9.8883%" height="15" fill="rgb(253,128,47)" fg:x="21361" fg:w="6850"/><text x="31.0855%" y="1151.50">CCoinsViewCach..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1,214 samples, 1.75%)</title><rect x="38.9713%" y="1125" width="1.7525%" height="15" fill="rgb(207,33,20)" fg:x="26997" fg:w="1214"/><text x="39.2213%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1,211 samples, 1.75%)</title><rect x="38.9757%" y="1109" width="1.7481%" height="15" fill="rgb(233,215,35)" fg:x="27000" fg:w="1211"/><text x="39.2257%" y="1119.50"></text></g><g><title>CCoinsViewCache::GetCoin (508 samples, 0.73%)</title><rect x="40.7238%" y="1141" width="0.7333%" height="15" fill="rgb(249,188,52)" fg:x="28211" fg:w="508"/><text x="40.9738%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (506 samples, 0.73%)</title><rect x="40.7267%" y="1125" width="0.7304%" height="15" fill="rgb(225,12,32)" fg:x="28213" fg:w="506"/><text x="40.9767%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (505 samples, 0.73%)</title><rect x="40.7281%" y="1109" width="0.7290%" height="15" fill="rgb(247,98,14)" fg:x="28214" fg:w="505"/><text x="40.9781%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (505 samples, 0.73%)</title><rect x="40.7281%" y="1093" width="0.7290%" height="15" fill="rgb(247,219,48)" fg:x="28214" fg:w="505"/><text x="40.9781%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (505 samples, 0.73%)</title><rect x="40.7281%" y="1077" width="0.7290%" height="15" fill="rgb(253,60,48)" fg:x="28214" fg:w="505"/><text x="40.9781%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (505 samples, 0.73%)</title><rect x="40.7281%" y="1061" width="0.7290%" height="15" fill="rgb(245,15,52)" fg:x="28214" fg:w="505"/><text x="40.9781%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (505 samples, 0.73%)</title><rect x="40.7281%" y="1045" width="0.7290%" height="15" fill="rgb(220,133,28)" fg:x="28214" fg:w="505"/><text x="40.9781%" y="1055.50"></text></g><g><title>Coin::Coin (505 samples, 0.73%)</title><rect x="40.7281%" y="1029" width="0.7290%" height="15" fill="rgb(217,180,4)" fg:x="28214" fg:w="505"/><text x="40.9781%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (505 samples, 0.73%)</title><rect x="40.7281%" y="1013" width="0.7290%" height="15" fill="rgb(251,24,1)" fg:x="28214" fg:w="505"/><text x="40.9781%" y="1023.50"></text></g><g><title>CScript::CScript (505 samples, 0.73%)</title><rect x="40.7281%" y="997" width="0.7290%" height="15" fill="rgb(212,185,49)" fg:x="28214" fg:w="505"/><text x="40.9781%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (505 samples, 0.73%)</title><rect x="40.7281%" y="981" width="0.7290%" height="15" fill="rgb(215,175,22)" fg:x="28214" fg:w="505"/><text x="40.9781%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (488 samples, 0.70%)</title><rect x="40.7527%" y="965" width="0.7044%" height="15" fill="rgb(250,205,14)" fg:x="28231" fg:w="488"/><text x="41.0027%" y="975.50"></text></g><g><title>SipHashUint256Extra (18 samples, 0.03%)</title><rect x="41.4744%" y="1141" width="0.0260%" height="15" fill="rgb(225,211,22)" fg:x="28731" fg:w="18"/><text x="41.7244%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (11 samples, 0.02%)</title><rect x="41.4845%" y="1125" width="0.0159%" height="15" fill="rgb(251,179,42)" fg:x="28738" fg:w="11"/><text x="41.7345%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (11 samples, 0.02%)</title><rect x="41.4845%" y="1109" width="0.0159%" height="15" fill="rgb(208,216,51)" fg:x="28738" fg:w="11"/><text x="41.7345%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (24 samples, 0.03%)</title><rect x="41.5004%" y="1141" width="0.0346%" height="15" fill="rgb(235,36,11)" fg:x="28749" fg:w="24"/><text x="41.7504%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (12 samples, 0.02%)</title><rect x="41.5177%" y="1125" width="0.0173%" height="15" fill="rgb(213,189,28)" fg:x="28761" fg:w="12"/><text x="41.7677%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (12 samples, 0.02%)</title><rect x="41.5177%" y="1109" width="0.0173%" height="15" fill="rgb(227,203,42)" fg:x="28761" fg:w="12"/><text x="41.7677%" y="1119.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (12 samples, 0.02%)</title><rect x="41.5177%" y="1093" width="0.0173%" height="15" fill="rgb(244,72,36)" fg:x="28761" fg:w="12"/><text x="41.7677%" y="1103.50"></text></g><g><title>operator== (12 samples, 0.02%)</title><rect x="41.5177%" y="1077" width="0.0173%" height="15" fill="rgb(213,53,17)" fg:x="28761" fg:w="12"/><text x="41.7677%" y="1087.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (12 samples, 0.02%)</title><rect x="41.5177%" y="1061" width="0.0173%" height="15" fill="rgb(207,167,3)" fg:x="28761" fg:w="12"/><text x="41.7677%" y="1071.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (12 samples, 0.02%)</title><rect x="41.5177%" y="1045" width="0.0173%" height="15" fill="rgb(216,98,30)" fg:x="28761" fg:w="12"/><text x="41.7677%" y="1055.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (12 samples, 0.02%)</title><rect x="41.5177%" y="1029" width="0.0173%" height="15" fill="rgb(236,123,15)" fg:x="28761" fg:w="12"/><text x="41.7677%" y="1039.50"></text></g><g><title>CCoinsViewCache::HaveCoin (7,428 samples, 10.72%)</title><rect x="30.8182%" y="1157" width="10.7226%" height="15" fill="rgb(248,81,50)" fg:x="21349" fg:w="7428"/><text x="31.0682%" y="1167.50">CCoinsViewCache:..</text></g><g><title>CCoinsViewCache::HaveInputs (7,431 samples, 10.73%)</title><rect x="30.8168%" y="1173" width="10.7270%" height="15" fill="rgb(214,120,4)" fg:x="21348" fg:w="7431"/><text x="31.0668%" y="1183.50">CCoinsViewCache:..</text></g><g><title>SipHashUint256Extra (78 samples, 0.11%)</title><rect x="41.5582%" y="1173" width="0.1126%" height="15" fill="rgb(208,179,34)" fg:x="28789" fg:w="78"/><text x="41.8082%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (30 samples, 0.04%)</title><rect x="41.6275%" y="1157" width="0.0433%" height="15" fill="rgb(227,140,7)" fg:x="28837" fg:w="30"/><text x="41.8775%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (30 samples, 0.04%)</title><rect x="41.6275%" y="1141" width="0.0433%" height="15" fill="rgb(214,22,6)" fg:x="28837" fg:w="30"/><text x="41.8775%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (23 samples, 0.03%)</title><rect x="41.6708%" y="1173" width="0.0332%" height="15" fill="rgb(207,137,27)" fg:x="28867" fg:w="23"/><text x="41.9208%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (9 samples, 0.01%)</title><rect x="41.6910%" y="1157" width="0.0130%" height="15" fill="rgb(210,8,46)" fg:x="28881" fg:w="9"/><text x="41.9410%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (9 samples, 0.01%)</title><rect x="41.6910%" y="1141" width="0.0130%" height="15" fill="rgb(240,16,54)" fg:x="28881" fg:w="9"/><text x="41.9410%" y="1151.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (9 samples, 0.01%)</title><rect x="41.6910%" y="1125" width="0.0130%" height="15" fill="rgb(211,209,29)" fg:x="28881" fg:w="9"/><text x="41.9410%" y="1135.50"></text></g><g><title>operator== (9 samples, 0.01%)</title><rect x="41.6910%" y="1109" width="0.0130%" height="15" fill="rgb(226,228,24)" fg:x="28881" fg:w="9"/><text x="41.9410%" y="1119.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (9 samples, 0.01%)</title><rect x="41.6910%" y="1093" width="0.0130%" height="15" fill="rgb(222,84,9)" fg:x="28881" fg:w="9"/><text x="41.9410%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (9 samples, 0.01%)</title><rect x="41.6910%" y="1077" width="0.0130%" height="15" fill="rgb(234,203,30)" fg:x="28881" fg:w="9"/><text x="41.9410%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (9 samples, 0.01%)</title><rect x="41.6910%" y="1061" width="0.0130%" height="15" fill="rgb(238,109,14)" fg:x="28881" fg:w="9"/><text x="41.9410%" y="1071.50"></text></g><g><title>Consensus::CheckTxInputs (8,644 samples, 12.48%)</title><rect x="29.2274%" y="1189" width="12.4780%" height="15" fill="rgb(233,206,34)" fg:x="20247" fg:w="8644"/><text x="29.4774%" y="1199.50">Consensus::CheckTxI..</text></g><g><title>CBlockIndex::GetMedianTimePast (27 samples, 0.04%)</title><rect x="41.7141%" y="1173" width="0.0390%" height="15" fill="rgb(220,167,47)" fg:x="28897" fg:w="27"/><text x="41.9641%" y="1183.50"></text></g><g><title>void std::sort&lt;long*&gt; (24 samples, 0.03%)</title><rect x="41.7184%" y="1157" width="0.0346%" height="15" fill="rgb(238,105,10)" fg:x="28900" fg:w="24"/><text x="41.9684%" y="1167.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (24 samples, 0.03%)</title><rect x="41.7184%" y="1141" width="0.0346%" height="15" fill="rgb(213,227,17)" fg:x="28900" fg:w="24"/><text x="41.9684%" y="1151.50"></text></g><g><title>SipHashUint256Extra (23 samples, 0.03%)</title><rect x="41.7198%" y="1125" width="0.0332%" height="15" fill="rgb(217,132,38)" fg:x="28901" fg:w="23"/><text x="41.9698%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="41.7429%" y="1109" width="0.0101%" height="15" fill="rgb(242,146,4)" fg:x="28917" fg:w="7"/><text x="41.9929%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="41.7429%" y="1093" width="0.0101%" height="15" fill="rgb(212,61,9)" fg:x="28917" fg:w="7"/><text x="41.9929%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (14 samples, 0.02%)</title><rect x="41.7588%" y="1173" width="0.0202%" height="15" fill="rgb(247,126,22)" fg:x="28928" fg:w="14"/><text x="42.0088%" y="1183.50"></text></g><g><title>Chainstate::ConnectBlock (24 samples, 0.03%)</title><rect x="41.7906%" y="1173" width="0.0346%" height="15" fill="rgb(220,196,2)" fg:x="28950" fg:w="24"/><text x="42.0406%" y="1183.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (13 samples, 0.02%)</title><rect x="41.8064%" y="1157" width="0.0188%" height="15" fill="rgb(208,46,4)" fg:x="28961" fg:w="13"/><text x="42.0564%" y="1167.50"></text></g><g><title>Consensus::CheckTxInputs (8 samples, 0.01%)</title><rect x="41.8252%" y="1173" width="0.0115%" height="15" fill="rgb(252,104,46)" fg:x="28974" fg:w="8"/><text x="42.0752%" y="1183.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (8 samples, 0.01%)</title><rect x="41.9436%" y="1157" width="0.0115%" height="15" fill="rgb(237,152,48)" fg:x="29056" fg:w="8"/><text x="42.1936%" y="1167.50"></text></g><g><title>ReadLE64 (8 samples, 0.01%)</title><rect x="41.9436%" y="1141" width="0.0115%" height="15" fill="rgb(221,59,37)" fg:x="29056" fg:w="8"/><text x="42.1936%" y="1151.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.01%)</title><rect x="41.9436%" y="1125" width="0.0115%" height="15" fill="rgb(209,202,51)" fg:x="29056" fg:w="8"/><text x="42.1936%" y="1135.50"></text></g><g><title>SipHashUint256Extra (122 samples, 0.18%)</title><rect x="41.8411%" y="1173" width="0.1761%" height="15" fill="rgb(228,81,30)" fg:x="28985" fg:w="122"/><text x="42.0911%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (43 samples, 0.06%)</title><rect x="41.9551%" y="1157" width="0.0621%" height="15" fill="rgb(227,42,39)" fg:x="29064" fg:w="43"/><text x="42.2051%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (43 samples, 0.06%)</title><rect x="41.9551%" y="1141" width="0.0621%" height="15" fill="rgb(221,26,2)" fg:x="29064" fg:w="43"/><text x="42.2051%" y="1151.50"></text></g><g><title>EvaluateSequenceLocks (223 samples, 0.32%)</title><rect x="41.7141%" y="1189" width="0.3219%" height="15" fill="rgb(254,61,31)" fg:x="28897" fg:w="223"/><text x="41.9641%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.02%)</title><rect x="42.0172%" y="1173" width="0.0188%" height="15" fill="rgb(222,173,38)" fg:x="29107" fg:w="13"/><text x="42.2672%" y="1183.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (7 samples, 0.01%)</title><rect x="42.0504%" y="1173" width="0.0101%" height="15" fill="rgb(218,50,12)" fg:x="29130" fg:w="7"/><text x="42.3004%" y="1183.50"></text></g><g><title>CTransaction::IsCoinBase (9 samples, 0.01%)</title><rect x="42.1558%" y="1077" width="0.0130%" height="15" fill="rgb(223,88,40)" fg:x="29203" fg:w="9"/><text x="42.4058%" y="1087.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (7 samples, 0.01%)</title><rect x="42.1587%" y="1061" width="0.0101%" height="15" fill="rgb(237,54,19)" fg:x="29205" fg:w="7"/><text x="42.4087%" y="1071.50"></text></g><g><title>GetP2SHSigOpCount (72 samples, 0.10%)</title><rect x="42.0706%" y="1093" width="0.1039%" height="15" fill="rgb(251,129,25)" fg:x="29144" fg:w="72"/><text x="42.3206%" y="1103.50"></text></g><g><title>SipHashUint256Extra (13 samples, 0.02%)</title><rect x="42.1760%" y="1093" width="0.0188%" height="15" fill="rgb(238,97,19)" fg:x="29217" fg:w="13"/><text x="42.4260%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (95 samples, 0.14%)</title><rect x="42.0648%" y="1109" width="0.1371%" height="15" fill="rgb(240,169,18)" fg:x="29140" fg:w="95"/><text x="42.3148%" y="1119.50"></text></g><g><title>CScript::GetSigOpCount (9 samples, 0.01%)</title><rect x="42.2049%" y="1077" width="0.0130%" height="15" fill="rgb(230,187,49)" fg:x="29237" fg:w="9"/><text x="42.4549%" y="1087.50"></text></g><g><title>GetP2SHSigOpCount (16 samples, 0.02%)</title><rect x="42.2337%" y="1077" width="0.0231%" height="15" fill="rgb(209,44,26)" fg:x="29257" fg:w="16"/><text x="42.4837%" y="1087.50"></text></g><g><title>GetTransactionSigOpCost (7 samples, 0.01%)</title><rect x="42.2626%" y="1077" width="0.0101%" height="15" fill="rgb(244,0,6)" fg:x="29277" fg:w="7"/><text x="42.5126%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (150 samples, 0.22%)</title><rect x="42.0648%" y="1157" width="0.2165%" height="15" fill="rgb(248,18,21)" fg:x="29140" fg:w="150"/><text x="42.3148%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (150 samples, 0.22%)</title><rect x="42.0648%" y="1141" width="0.2165%" height="15" fill="rgb(245,180,19)" fg:x="29140" fg:w="150"/><text x="42.3148%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (150 samples, 0.22%)</title><rect x="42.0648%" y="1125" width="0.2165%" height="15" fill="rgb(252,118,36)" fg:x="29140" fg:w="150"/><text x="42.3148%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (55 samples, 0.08%)</title><rect x="42.2020%" y="1109" width="0.0794%" height="15" fill="rgb(210,224,19)" fg:x="29235" fg:w="55"/><text x="42.4520%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (55 samples, 0.08%)</title><rect x="42.2020%" y="1093" width="0.0794%" height="15" fill="rgb(218,30,24)" fg:x="29235" fg:w="55"/><text x="42.4520%" y="1103.50"></text></g><g><title>CScript::IsWitnessProgram (7 samples, 0.01%)</title><rect x="42.2814%" y="1157" width="0.0101%" height="15" fill="rgb(219,75,50)" fg:x="29290" fg:w="7"/><text x="42.5314%" y="1167.50"></text></g><g><title>GetP2SHSigOpCount (29 samples, 0.04%)</title><rect x="42.2944%" y="1157" width="0.0419%" height="15" fill="rgb(234,72,50)" fg:x="29299" fg:w="29"/><text x="42.5444%" y="1167.50"></text></g><g><title>CCoinsViewCache::AccessCoin (202 samples, 0.29%)</title><rect x="42.0605%" y="1173" width="0.2916%" height="15" fill="rgb(219,100,48)" fg:x="29137" fg:w="202"/><text x="42.3105%" y="1183.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.01%)</title><rect x="42.3391%" y="1157" width="0.0130%" height="15" fill="rgb(253,5,41)" fg:x="29330" fg:w="9"/><text x="42.5891%" y="1167.50"></text></g><g><title>CScript::GetSigOpCount (14 samples, 0.02%)</title><rect x="42.3608%" y="1173" width="0.0202%" height="15" fill="rgb(247,181,11)" fg:x="29345" fg:w="14"/><text x="42.6108%" y="1183.50"></text></g><g><title>CScript::IsWitnessProgram (26 samples, 0.04%)</title><rect x="42.3824%" y="1173" width="0.0375%" height="15" fill="rgb(222,223,25)" fg:x="29360" fg:w="26"/><text x="42.6324%" y="1183.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (23 samples, 0.03%)</title><rect x="42.3868%" y="1157" width="0.0332%" height="15" fill="rgb(214,198,28)" fg:x="29363" fg:w="23"/><text x="42.6368%" y="1167.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (23 samples, 0.03%)</title><rect x="42.3868%" y="1141" width="0.0332%" height="15" fill="rgb(230,46,43)" fg:x="29363" fg:w="23"/><text x="42.6368%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (22 samples, 0.03%)</title><rect x="42.3882%" y="1125" width="0.0318%" height="15" fill="rgb(233,65,53)" fg:x="29364" fg:w="22"/><text x="42.6382%" y="1135.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (22 samples, 0.03%)</title><rect x="42.3882%" y="1109" width="0.0318%" height="15" fill="rgb(221,121,27)" fg:x="29364" fg:w="22"/><text x="42.6382%" y="1119.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (22 samples, 0.03%)</title><rect x="42.3882%" y="1093" width="0.0318%" height="15" fill="rgb(247,70,47)" fg:x="29364" fg:w="22"/><text x="42.6382%" y="1103.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (22 samples, 0.03%)</title><rect x="42.3882%" y="1077" width="0.0318%" height="15" fill="rgb(228,85,35)" fg:x="29364" fg:w="22"/><text x="42.6382%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (22 samples, 0.03%)</title><rect x="42.3882%" y="1061" width="0.0318%" height="15" fill="rgb(209,50,18)" fg:x="29364" fg:w="22"/><text x="42.6382%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (22 samples, 0.03%)</title><rect x="42.3882%" y="1045" width="0.0318%" height="15" fill="rgb(250,19,35)" fg:x="29364" fg:w="22"/><text x="42.6382%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (22 samples, 0.03%)</title><rect x="42.3882%" y="1029" width="0.0318%" height="15" fill="rgb(253,107,29)" fg:x="29364" fg:w="22"/><text x="42.6382%" y="1039.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (22 samples, 0.03%)</title><rect x="42.3882%" y="1013" width="0.0318%" height="15" fill="rgb(252,179,29)" fg:x="29364" fg:w="22"/><text x="42.6382%" y="1023.50"></text></g><g><title>CalculateSequenceLocks (11 samples, 0.02%)</title><rect x="42.4200%" y="1173" width="0.0159%" height="15" fill="rgb(238,194,6)" fg:x="29386" fg:w="11"/><text x="42.6700%" y="1183.50"></text></g><g><title>CCoinsViewCache::AccessCoin (8 samples, 0.01%)</title><rect x="42.4416%" y="1157" width="0.0115%" height="15" fill="rgb(238,164,29)" fg:x="29401" fg:w="8"/><text x="42.6916%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (20 samples, 0.03%)</title><rect x="42.4532%" y="1157" width="0.0289%" height="15" fill="rgb(224,25,9)" fg:x="29409" fg:w="20"/><text x="42.7032%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (15 samples, 0.02%)</title><rect x="42.4604%" y="1141" width="0.0217%" height="15" fill="rgb(244,153,23)" fg:x="29414" fg:w="15"/><text x="42.7104%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (15 samples, 0.02%)</title><rect x="42.4604%" y="1125" width="0.0217%" height="15" fill="rgb(212,203,14)" fg:x="29414" fg:w="15"/><text x="42.7104%" y="1135.50"></text></g><g><title>GetScriptOp (9 samples, 0.01%)</title><rect x="42.5051%" y="1141" width="0.0130%" height="15" fill="rgb(220,164,20)" fg:x="29445" fg:w="9"/><text x="42.7551%" y="1151.50"></text></g><g><title>CScript::GetOp (25 samples, 0.04%)</title><rect x="42.4849%" y="1157" width="0.0361%" height="15" fill="rgb(222,203,48)" fg:x="29431" fg:w="25"/><text x="42.7349%" y="1167.50"></text></g><g><title>operator new (13 samples, 0.02%)</title><rect x="42.5340%" y="1029" width="0.0188%" height="15" fill="rgb(215,159,22)" fg:x="29465" fg:w="13"/><text x="42.7840%" y="1039.50"></text></g><g><title>malloc (13 samples, 0.02%)</title><rect x="42.5340%" y="1013" width="0.0188%" height="15" fill="rgb(216,183,47)" fg:x="29465" fg:w="13"/><text x="42.7840%" y="1023.50"></text></g><g><title>_int_malloc (12 samples, 0.02%)</title><rect x="42.5354%" y="997" width="0.0173%" height="15" fill="rgb(229,195,25)" fg:x="29466" fg:w="12"/><text x="42.7854%" y="1007.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (14 samples, 0.02%)</title><rect x="42.5340%" y="1109" width="0.0202%" height="15" fill="rgb(224,132,51)" fg:x="29465" fg:w="14"/><text x="42.7840%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (14 samples, 0.02%)</title><rect x="42.5340%" y="1093" width="0.0202%" height="15" fill="rgb(240,63,7)" fg:x="29465" fg:w="14"/><text x="42.7840%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (14 samples, 0.02%)</title><rect x="42.5340%" y="1077" width="0.0202%" height="15" fill="rgb(249,182,41)" fg:x="29465" fg:w="14"/><text x="42.7840%" y="1087.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (14 samples, 0.02%)</title><rect x="42.5340%" y="1061" width="0.0202%" height="15" fill="rgb(243,47,26)" fg:x="29465" fg:w="14"/><text x="42.7840%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (14 samples, 0.02%)</title><rect x="42.5340%" y="1045" width="0.0202%" height="15" fill="rgb(233,48,2)" fg:x="29465" fg:w="14"/><text x="42.7840%" y="1055.50"></text></g><g><title>CScript::IsWitnessProgram (17 samples, 0.02%)</title><rect x="42.5311%" y="1157" width="0.0245%" height="15" fill="rgb(244,165,34)" fg:x="29463" fg:w="17"/><text x="42.7811%" y="1167.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (15 samples, 0.02%)</title><rect x="42.5340%" y="1141" width="0.0217%" height="15" fill="rgb(207,89,7)" fg:x="29465" fg:w="15"/><text x="42.7840%" y="1151.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (15 samples, 0.02%)</title><rect x="42.5340%" y="1125" width="0.0217%" height="15" fill="rgb(244,117,36)" fg:x="29465" fg:w="15"/><text x="42.7840%" y="1135.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="42.5614%" y="1141" width="0.0115%" height="15" fill="rgb(226,144,34)" fg:x="29484" fg:w="8"/><text x="42.8114%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="42.5614%" y="1125" width="0.0115%" height="15" fill="rgb(213,23,19)" fg:x="29484" fg:w="8"/><text x="42.8114%" y="1135.50"></text></g><g><title>CountWitnessSigOps (13 samples, 0.02%)</title><rect x="42.5556%" y="1157" width="0.0188%" height="15" fill="rgb(217,75,12)" fg:x="29480" fg:w="13"/><text x="42.8056%" y="1167.50"></text></g><g><title>GetP2SHSigOpCount (7 samples, 0.01%)</title><rect x="42.5744%" y="1157" width="0.0101%" height="15" fill="rgb(224,159,17)" fg:x="29493" fg:w="7"/><text x="42.8244%" y="1167.50"></text></g><g><title>GetScriptOp (9 samples, 0.01%)</title><rect x="42.5845%" y="1157" width="0.0130%" height="15" fill="rgb(217,118,1)" fg:x="29500" fg:w="9"/><text x="42.8345%" y="1167.50"></text></g><g><title>GetTransactionSigOpCost (13 samples, 0.02%)</title><rect x="42.5975%" y="1157" width="0.0188%" height="15" fill="rgb(232,180,48)" fg:x="29509" fg:w="13"/><text x="42.8475%" y="1167.50"></text></g><g><title>SipHashUint256Extra (170 samples, 0.25%)</title><rect x="42.6163%" y="1157" width="0.2454%" height="15" fill="rgb(230,27,33)" fg:x="29522" fg:w="170"/><text x="42.8663%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (70 samples, 0.10%)</title><rect x="42.7606%" y="1141" width="0.1010%" height="15" fill="rgb(205,31,21)" fg:x="29622" fg:w="70"/><text x="43.0106%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (70 samples, 0.10%)</title><rect x="42.7606%" y="1125" width="0.1010%" height="15" fill="rgb(253,59,4)" fg:x="29622" fg:w="70"/><text x="43.0106%" y="1135.50"></text></g><g><title>CScript::GetOp (21 samples, 0.03%)</title><rect x="42.8718%" y="1125" width="0.0303%" height="15" fill="rgb(224,201,9)" fg:x="29699" fg:w="21"/><text x="43.1218%" y="1135.50"></text></g><g><title>WitnessSigOps (16 samples, 0.02%)</title><rect x="42.8790%" y="1109" width="0.0231%" height="15" fill="rgb(229,206,30)" fg:x="29704" fg:w="16"/><text x="43.1290%" y="1119.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="42.8790%" y="1093" width="0.0231%" height="15" fill="rgb(212,67,47)" fg:x="29704" fg:w="16"/><text x="43.1290%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="42.8790%" y="1077" width="0.0231%" height="15" fill="rgb(211,96,50)" fg:x="29704" fg:w="16"/><text x="43.1290%" y="1087.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="42.8804%" y="1061" width="0.0217%" height="15" fill="rgb(252,114,18)" fg:x="29705" fg:w="15"/><text x="43.1304%" y="1071.50"></text></g><g><title>CScript::GetSigOpCount (23 samples, 0.03%)</title><rect x="42.8703%" y="1141" width="0.0332%" height="15" fill="rgb(223,58,37)" fg:x="29698" fg:w="23"/><text x="43.1203%" y="1151.50"></text></g><g><title>WitnessSigOps (13 samples, 0.02%)</title><rect x="42.9035%" y="1141" width="0.0188%" height="15" fill="rgb(237,70,4)" fg:x="29721" fg:w="13"/><text x="43.1535%" y="1151.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="42.9050%" y="1125" width="0.0173%" height="15" fill="rgb(244,85,46)" fg:x="29722" fg:w="12"/><text x="43.1550%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="42.9050%" y="1109" width="0.0173%" height="15" fill="rgb(223,39,52)" fg:x="29722" fg:w="12"/><text x="43.1550%" y="1119.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="42.9050%" y="1093" width="0.0173%" height="15" fill="rgb(218,200,14)" fg:x="29722" fg:w="12"/><text x="43.1550%" y="1103.50"></text></g><g><title>WitnessSigOps (45 samples, 0.06%)</title><rect x="42.8617%" y="1157" width="0.0650%" height="15" fill="rgb(208,171,16)" fg:x="29692" fg:w="45"/><text x="43.1117%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (24 samples, 0.03%)</title><rect x="42.9266%" y="1157" width="0.0346%" height="15" fill="rgb(234,200,18)" fg:x="29737" fg:w="24"/><text x="43.1766%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (9 samples, 0.01%)</title><rect x="42.9483%" y="1141" width="0.0130%" height="15" fill="rgb(228,45,11)" fg:x="29752" fg:w="9"/><text x="43.1983%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (9 samples, 0.01%)</title><rect x="42.9483%" y="1125" width="0.0130%" height="15" fill="rgb(237,182,11)" fg:x="29752" fg:w="9"/><text x="43.1983%" y="1135.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (9 samples, 0.01%)</title><rect x="42.9483%" y="1109" width="0.0130%" height="15" fill="rgb(241,175,49)" fg:x="29752" fg:w="9"/><text x="43.1983%" y="1119.50"></text></g><g><title>operator== (9 samples, 0.01%)</title><rect x="42.9483%" y="1093" width="0.0130%" height="15" fill="rgb(247,38,35)" fg:x="29752" fg:w="9"/><text x="43.1983%" y="1103.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (8 samples, 0.01%)</title><rect x="42.9497%" y="1077" width="0.0115%" height="15" fill="rgb(228,39,49)" fg:x="29753" fg:w="8"/><text x="43.1997%" y="1087.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (8 samples, 0.01%)</title><rect x="42.9497%" y="1061" width="0.0115%" height="15" fill="rgb(226,101,26)" fg:x="29753" fg:w="8"/><text x="43.1997%" y="1071.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (8 samples, 0.01%)</title><rect x="42.9497%" y="1045" width="0.0115%" height="15" fill="rgb(206,141,19)" fg:x="29753" fg:w="8"/><text x="43.1997%" y="1055.50"></text></g><g><title>CountWitnessSigOps (366 samples, 0.53%)</title><rect x="42.4358%" y="1173" width="0.5283%" height="15" fill="rgb(211,200,13)" fg:x="29397" fg:w="366"/><text x="42.6858%" y="1183.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (55 samples, 0.08%)</title><rect x="42.9699%" y="1157" width="0.0794%" height="15" fill="rgb(241,121,6)" fg:x="29767" fg:w="55"/><text x="43.2199%" y="1167.50"></text></g><g><title>void std::sort&lt;long*&gt; (25 samples, 0.04%)</title><rect x="43.0133%" y="1141" width="0.0361%" height="15" fill="rgb(234,221,29)" fg:x="29797" fg:w="25"/><text x="43.2633%" y="1151.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (25 samples, 0.04%)</title><rect x="43.0133%" y="1125" width="0.0361%" height="15" fill="rgb(229,136,5)" fg:x="29797" fg:w="25"/><text x="43.2633%" y="1135.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (20 samples, 0.03%)</title><rect x="43.0205%" y="1109" width="0.0289%" height="15" fill="rgb(238,36,11)" fg:x="29802" fg:w="20"/><text x="43.2705%" y="1119.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (20 samples, 0.03%)</title><rect x="43.0205%" y="1093" width="0.0289%" height="15" fill="rgb(251,55,41)" fg:x="29802" fg:w="20"/><text x="43.2705%" y="1103.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (28 samples, 0.04%)</title><rect x="43.0797%" y="1125" width="0.0404%" height="15" fill="rgb(242,34,40)" fg:x="29843" fg:w="28"/><text x="43.3297%" y="1135.50"></text></g><g><title>void std::sort&lt;long*&gt; (21 samples, 0.03%)</title><rect x="43.0898%" y="1109" width="0.0303%" height="15" fill="rgb(215,42,17)" fg:x="29850" fg:w="21"/><text x="43.3398%" y="1119.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (21 samples, 0.03%)</title><rect x="43.0898%" y="1093" width="0.0303%" height="15" fill="rgb(207,44,46)" fg:x="29850" fg:w="21"/><text x="43.3398%" y="1103.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (20 samples, 0.03%)</title><rect x="43.0912%" y="1077" width="0.0289%" height="15" fill="rgb(211,206,28)" fg:x="29851" fg:w="20"/><text x="43.3412%" y="1087.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (20 samples, 0.03%)</title><rect x="43.0912%" y="1061" width="0.0289%" height="15" fill="rgb(237,167,16)" fg:x="29851" fg:w="20"/><text x="43.3412%" y="1071.50"></text></g><g><title>CScript::GetOp (23 samples, 0.03%)</title><rect x="43.1706%" y="1109" width="0.0332%" height="15" fill="rgb(233,66,6)" fg:x="29906" fg:w="23"/><text x="43.4206%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (19 samples, 0.03%)</title><rect x="43.2081%" y="1093" width="0.0274%" height="15" fill="rgb(246,123,29)" fg:x="29932" fg:w="19"/><text x="43.4581%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::indirect_ptr (17 samples, 0.02%)</title><rect x="43.2110%" y="1077" width="0.0245%" height="15" fill="rgb(209,62,40)" fg:x="29934" fg:w="17"/><text x="43.4610%" y="1087.50"></text></g><g><title>CScript::GetSigOpCount (89 samples, 0.13%)</title><rect x="43.1201%" y="1125" width="0.1285%" height="15" fill="rgb(218,4,25)" fg:x="29871" fg:w="89"/><text x="43.3701%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (28 samples, 0.04%)</title><rect x="43.2081%" y="1109" width="0.0404%" height="15" fill="rgb(253,91,49)" fg:x="29932" fg:w="28"/><text x="43.4581%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (9 samples, 0.01%)</title><rect x="43.2356%" y="1093" width="0.0130%" height="15" fill="rgb(228,155,29)" fg:x="29951" fg:w="9"/><text x="43.4856%" y="1103.50"></text></g><g><title>GetLegacySigOpCount (19 samples, 0.03%)</title><rect x="43.2500%" y="1125" width="0.0274%" height="15" fill="rgb(243,57,37)" fg:x="29961" fg:w="19"/><text x="43.5000%" y="1135.50"></text></g><g><title>GetScriptOp (75 samples, 0.11%)</title><rect x="43.2774%" y="1125" width="0.1083%" height="15" fill="rgb(244,167,17)" fg:x="29980" fg:w="75"/><text x="43.5274%" y="1135.50"></text></g><g><title>CScript::GetOp (229 samples, 0.33%)</title><rect x="43.0710%" y="1141" width="0.3306%" height="15" fill="rgb(207,181,38)" fg:x="29837" fg:w="229"/><text x="43.3210%" y="1151.50"></text></g><g><title>CScript::GetSigOpCount (255 samples, 0.37%)</title><rect x="43.0493%" y="1157" width="0.3681%" height="15" fill="rgb(211,8,23)" fg:x="29822" fg:w="255"/><text x="43.2993%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (8 samples, 0.01%)</title><rect x="43.4059%" y="1141" width="0.0115%" height="15" fill="rgb(235,11,44)" fg:x="30069" fg:w="8"/><text x="43.6559%" y="1151.50"></text></g><g><title>GetLegacySigOpCount (18 samples, 0.03%)</title><rect x="43.4319%" y="1157" width="0.0260%" height="15" fill="rgb(248,18,52)" fg:x="30087" fg:w="18"/><text x="43.6819%" y="1167.50"></text></g><g><title>GetScriptOp (59 samples, 0.09%)</title><rect x="43.4579%" y="1157" width="0.0852%" height="15" fill="rgb(208,4,7)" fg:x="30105" fg:w="59"/><text x="43.7079%" y="1167.50"></text></g><g><title>GetLegacySigOpCount (431 samples, 0.62%)</title><rect x="42.9642%" y="1173" width="0.6222%" height="15" fill="rgb(240,17,39)" fg:x="29763" fg:w="431"/><text x="43.2142%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (19 samples, 0.03%)</title><rect x="43.5589%" y="1157" width="0.0274%" height="15" fill="rgb(207,170,3)" fg:x="30175" fg:w="19"/><text x="43.8089%" y="1167.50"></text></g><g><title>GetP2SHSigOpCount (8 samples, 0.01%)</title><rect x="43.5979%" y="1061" width="0.0115%" height="15" fill="rgb(236,100,52)" fg:x="30202" fg:w="8"/><text x="43.8479%" y="1071.50"></text></g><g><title>GetScriptOp (11 samples, 0.02%)</title><rect x="43.6094%" y="1061" width="0.0159%" height="15" fill="rgb(246,78,51)" fg:x="30210" fg:w="11"/><text x="43.8594%" y="1071.50"></text></g><g><title>SipHashUint256Extra (19 samples, 0.03%)</title><rect x="43.6253%" y="1061" width="0.0274%" height="15" fill="rgb(211,17,15)" fg:x="30221" fg:w="19"/><text x="43.8753%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="43.6412%" y="1045" width="0.0115%" height="15" fill="rgb(209,59,46)" fg:x="30232" fg:w="8"/><text x="43.8912%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="43.6412%" y="1029" width="0.0115%" height="15" fill="rgb(210,92,25)" fg:x="30232" fg:w="8"/><text x="43.8912%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (46 samples, 0.07%)</title><rect x="43.5921%" y="1077" width="0.0664%" height="15" fill="rgb(238,174,52)" fg:x="30198" fg:w="46"/><text x="43.8421%" y="1087.50"></text></g><g><title>CScript::GetSigOpCount (10 samples, 0.01%)</title><rect x="43.6585%" y="1045" width="0.0144%" height="15" fill="rgb(230,73,7)" fg:x="30244" fg:w="10"/><text x="43.9085%" y="1055.50"></text></g><g><title>GetScriptOp (11 samples, 0.02%)</title><rect x="43.6802%" y="1045" width="0.0159%" height="15" fill="rgb(243,124,40)" fg:x="30259" fg:w="11"/><text x="43.9302%" y="1055.50"></text></g><g><title>CCoinsViewCache::FetchCoin (76 samples, 0.11%)</title><rect x="43.5907%" y="1125" width="0.1097%" height="15" fill="rgb(244,170,11)" fg:x="30197" fg:w="76"/><text x="43.8407%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (76 samples, 0.11%)</title><rect x="43.5907%" y="1109" width="0.1097%" height="15" fill="rgb(207,114,54)" fg:x="30197" fg:w="76"/><text x="43.8407%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (76 samples, 0.11%)</title><rect x="43.5907%" y="1093" width="0.1097%" height="15" fill="rgb(205,42,20)" fg:x="30197" fg:w="76"/><text x="43.8407%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (29 samples, 0.04%)</title><rect x="43.6585%" y="1077" width="0.0419%" height="15" fill="rgb(230,30,28)" fg:x="30244" fg:w="29"/><text x="43.9085%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (29 samples, 0.04%)</title><rect x="43.6585%" y="1061" width="0.0419%" height="15" fill="rgb(205,73,54)" fg:x="30244" fg:w="29"/><text x="43.9085%" y="1071.50"></text></g><g><title>CScript::GetSigOpCount (9 samples, 0.01%)</title><rect x="43.7004%" y="1125" width="0.0130%" height="15" fill="rgb(254,227,23)" fg:x="30273" fg:w="9"/><text x="43.9504%" y="1135.50"></text></g><g><title>GetScriptOp (7 samples, 0.01%)</title><rect x="43.7191%" y="1125" width="0.0101%" height="15" fill="rgb(228,202,34)" fg:x="30286" fg:w="7"/><text x="43.9691%" y="1135.50"></text></g><g><title>CCoinsViewCache::AccessCoin (107 samples, 0.15%)</title><rect x="43.5863%" y="1141" width="0.1545%" height="15" fill="rgb(222,225,37)" fg:x="30194" fg:w="107"/><text x="43.8363%" y="1151.50"></text></g><g><title>SipHashUint256Extra (16 samples, 0.02%)</title><rect x="43.7769%" y="1109" width="0.0231%" height="15" fill="rgb(221,14,54)" fg:x="30326" fg:w="16"/><text x="44.0269%" y="1119.50"></text></g><g><title>CScript::GetOp (31 samples, 0.04%)</title><rect x="43.7596%" y="1125" width="0.0447%" height="15" fill="rgb(254,102,2)" fg:x="30314" fg:w="31"/><text x="44.0096%" y="1135.50"></text></g><g><title>CScript::GetSigOpCount (12 samples, 0.02%)</title><rect x="43.8043%" y="1125" width="0.0173%" height="15" fill="rgb(232,104,17)" fg:x="30345" fg:w="12"/><text x="44.0543%" y="1135.50"></text></g><g><title>CScript::GetOp (7 samples, 0.01%)</title><rect x="43.8115%" y="1109" width="0.0101%" height="15" fill="rgb(250,220,14)" fg:x="30350" fg:w="7"/><text x="44.0615%" y="1119.50"></text></g><g><title>GetScriptOp (8 samples, 0.01%)</title><rect x="43.8231%" y="1125" width="0.0115%" height="15" fill="rgb(241,158,9)" fg:x="30358" fg:w="8"/><text x="44.0731%" y="1135.50"></text></g><g><title>CScript::GetSigOpCount (62 samples, 0.09%)</title><rect x="43.7466%" y="1141" width="0.0895%" height="15" fill="rgb(246,9,43)" fg:x="30305" fg:w="62"/><text x="43.9966%" y="1151.50"></text></g><g><title>GetScriptOp (13 samples, 0.02%)</title><rect x="43.8375%" y="1141" width="0.0188%" height="15" fill="rgb(206,73,33)" fg:x="30368" fg:w="13"/><text x="44.0875%" y="1151.50"></text></g><g><title>SipHashUint256Extra (15 samples, 0.02%)</title><rect x="43.8592%" y="1141" width="0.0217%" height="15" fill="rgb(222,79,8)" fg:x="30383" fg:w="15"/><text x="44.1092%" y="1151.50"></text></g><g><title>GetP2SHSigOpCount (205 samples, 0.30%)</title><rect x="43.5863%" y="1157" width="0.2959%" height="15" fill="rgb(234,8,54)" fg:x="30194" fg:w="205"/><text x="43.8363%" y="1167.50"></text></g><g><title>GetP2SHSigOpCount (206 samples, 0.30%)</title><rect x="43.5863%" y="1173" width="0.2974%" height="15" fill="rgb(209,134,38)" fg:x="30194" fg:w="206"/><text x="43.8363%" y="1183.50"></text></g><g><title>GetScriptOp (37 samples, 0.05%)</title><rect x="43.8837%" y="1173" width="0.0534%" height="15" fill="rgb(230,127,29)" fg:x="30400" fg:w="37"/><text x="44.1337%" y="1183.50"></text></g><g><title>SipHashUint256Extra (24 samples, 0.03%)</title><rect x="43.9414%" y="1173" width="0.0346%" height="15" fill="rgb(242,44,41)" fg:x="30440" fg:w="24"/><text x="44.1914%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%)</title><rect x="43.9804%" y="1173" width="0.0101%" height="15" fill="rgb(222,56,43)" fg:x="30467" fg:w="7"/><text x="44.2304%" y="1183.50"></text></g><g><title>GetTransactionSigOpCost (1,345 samples, 1.94%)</title><rect x="42.0504%" y="1189" width="1.9416%" height="15" fill="rgb(238,39,47)" fg:x="29130" fg:w="1345"/><text x="42.3004%" y="1199.50">G..</text></g><g><title>SipHashUint256Extra (17 samples, 0.02%)</title><rect x="43.9992%" y="1173" width="0.0245%" height="15" fill="rgb(226,79,43)" fg:x="30480" fg:w="17"/><text x="44.2492%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="44.0122%" y="1157" width="0.0115%" height="15" fill="rgb(242,105,53)" fg:x="30489" fg:w="8"/><text x="44.2622%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="44.0122%" y="1141" width="0.0115%" height="15" fill="rgb(251,132,46)" fg:x="30489" fg:w="8"/><text x="44.2622%" y="1151.50"></text></g><g><title>SequenceLocks (30 samples, 0.04%)</title><rect x="43.9920%" y="1189" width="0.0433%" height="15" fill="rgb(231,77,14)" fg:x="30475" fg:w="30"/><text x="44.2420%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="44.0237%" y="1173" width="0.0115%" height="15" fill="rgb(240,135,9)" fg:x="30497" fg:w="8"/><text x="44.2737%" y="1183.50"></text></g><g><title>SipHashUint256Extra (163 samples, 0.24%)</title><rect x="44.0353%" y="1189" width="0.2353%" height="15" fill="rgb(248,109,14)" fg:x="30505" fg:w="163"/><text x="44.2853%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (47 samples, 0.07%)</title><rect x="44.2027%" y="1173" width="0.0678%" height="15" fill="rgb(227,146,52)" fg:x="30621" fg:w="47"/><text x="44.4527%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (47 samples, 0.07%)</title><rect x="44.2027%" y="1157" width="0.0678%" height="15" fill="rgb(232,54,3)" fg:x="30621" fg:w="47"/><text x="44.4527%" y="1167.50"></text></g><g><title>TxValidationState::~TxValidationState (13 samples, 0.02%)</title><rect x="44.2706%" y="1189" width="0.0188%" height="15" fill="rgb(229,201,43)" fg:x="30668" fg:w="13"/><text x="44.5206%" y="1199.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::~ValidationState (13 samples, 0.02%)</title><rect x="44.2706%" y="1173" width="0.0188%" height="15" fill="rgb(252,161,33)" fg:x="30668" fg:w="13"/><text x="44.5206%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (13 samples, 0.02%)</title><rect x="44.2706%" y="1157" width="0.0188%" height="15" fill="rgb(226,146,40)" fg:x="30668" fg:w="13"/><text x="44.5206%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (37 samples, 0.05%)</title><rect x="44.2908%" y="1173" width="0.0534%" height="15" fill="rgb(219,47,25)" fg:x="30682" fg:w="37"/><text x="44.5408%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (11 samples, 0.02%)</title><rect x="44.3283%" y="1157" width="0.0159%" height="15" fill="rgb(250,135,13)" fg:x="30708" fg:w="11"/><text x="44.5783%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (10 samples, 0.01%)</title><rect x="44.3298%" y="1141" width="0.0144%" height="15" fill="rgb(219,229,18)" fg:x="30709" fg:w="10"/><text x="44.5798%" y="1151.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (8 samples, 0.01%)</title><rect x="44.3687%" y="1157" width="0.0115%" height="15" fill="rgb(217,152,27)" fg:x="30736" fg:w="8"/><text x="44.6187%" y="1167.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.01%)</title><rect x="44.3962%" y="1077" width="0.0101%" height="15" fill="rgb(225,71,47)" fg:x="30755" fg:w="7"/><text x="44.6462%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (22 samples, 0.03%)</title><rect x="44.3817%" y="1157" width="0.0318%" height="15" fill="rgb(220,139,14)" fg:x="30745" fg:w="22"/><text x="44.6317%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (22 samples, 0.03%)</title><rect x="44.3817%" y="1141" width="0.0318%" height="15" fill="rgb(247,54,32)" fg:x="30745" fg:w="22"/><text x="44.6317%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (22 samples, 0.03%)</title><rect x="44.3817%" y="1125" width="0.0318%" height="15" fill="rgb(252,131,39)" fg:x="30745" fg:w="22"/><text x="44.6317%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (17 samples, 0.02%)</title><rect x="44.3889%" y="1109" width="0.0245%" height="15" fill="rgb(210,108,39)" fg:x="30750" fg:w="17"/><text x="44.6389%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (17 samples, 0.02%)</title><rect x="44.3889%" y="1093" width="0.0245%" height="15" fill="rgb(205,23,29)" fg:x="30750" fg:w="17"/><text x="44.6389%" y="1103.50"></text></g><g><title>Chainstate::ConnectBlock (10 samples, 0.01%)</title><rect x="44.4164%" y="1157" width="0.0144%" height="15" fill="rgb(246,139,46)" fg:x="30769" fg:w="10"/><text x="44.6664%" y="1167.50"></text></g><g><title>CTxOut::SetNull (10 samples, 0.01%)</title><rect x="44.4308%" y="1141" width="0.0144%" height="15" fill="rgb(250,81,26)" fg:x="30779" fg:w="10"/><text x="44.6808%" y="1151.50"></text></g><g><title>CScript::clear (9 samples, 0.01%)</title><rect x="44.4323%" y="1125" width="0.0130%" height="15" fill="rgb(214,104,7)" fg:x="30780" fg:w="9"/><text x="44.6823%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (9 samples, 0.01%)</title><rect x="44.4323%" y="1109" width="0.0130%" height="15" fill="rgb(233,189,8)" fg:x="30780" fg:w="9"/><text x="44.6823%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (9 samples, 0.01%)</title><rect x="44.4323%" y="1093" width="0.0130%" height="15" fill="rgb(228,141,17)" fg:x="30780" fg:w="9"/><text x="44.6823%" y="1103.50"></text></g><g><title>Coin::Clear (11 samples, 0.02%)</title><rect x="44.4308%" y="1157" width="0.0159%" height="15" fill="rgb(247,157,1)" fg:x="30779" fg:w="11"/><text x="44.6808%" y="1167.50"></text></g><g><title>CCoinsViewCache::SpendCoin (8 samples, 0.01%)</title><rect x="44.4626%" y="1125" width="0.0115%" height="15" fill="rgb(249,225,5)" fg:x="30801" fg:w="8"/><text x="44.7126%" y="1135.50"></text></g><g><title>SipHashUint256Extra (23 samples, 0.03%)</title><rect x="44.4741%" y="1125" width="0.0332%" height="15" fill="rgb(242,55,13)" fg:x="30809" fg:w="23"/><text x="44.7241%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="44.4943%" y="1109" width="0.0130%" height="15" fill="rgb(230,49,50)" fg:x="30823" fg:w="9"/><text x="44.7443%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="44.4943%" y="1093" width="0.0130%" height="15" fill="rgb(241,111,38)" fg:x="30823" fg:w="9"/><text x="44.7443%" y="1103.50"></text></g><g><title>SipHashUint256Extra (11 samples, 0.02%)</title><rect x="44.5232%" y="1045" width="0.0159%" height="15" fill="rgb(252,155,4)" fg:x="30843" fg:w="11"/><text x="44.7732%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="44.5290%" y="1029" width="0.0101%" height="15" fill="rgb(212,69,32)" fg:x="30847" fg:w="7"/><text x="44.7790%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="44.5290%" y="1013" width="0.0101%" height="15" fill="rgb(243,107,47)" fg:x="30847" fg:w="7"/><text x="44.7790%" y="1023.50"></text></g><g><title>CCoinsViewCache::SpendCoin (140 samples, 0.20%)</title><rect x="44.3442%" y="1173" width="0.2021%" height="15" fill="rgb(247,130,12)" fg:x="30719" fg:w="140"/><text x="44.5942%" y="1183.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (60 samples, 0.09%)</title><rect x="44.4597%" y="1157" width="0.0866%" height="15" fill="rgb(233,74,16)" fg:x="30799" fg:w="60"/><text x="44.7097%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (60 samples, 0.09%)</title><rect x="44.4597%" y="1141" width="0.0866%" height="15" fill="rgb(208,58,18)" fg:x="30799" fg:w="60"/><text x="44.7097%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (22 samples, 0.03%)</title><rect x="44.5145%" y="1125" width="0.0318%" height="15" fill="rgb(242,225,1)" fg:x="30837" fg:w="22"/><text x="44.7645%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (22 samples, 0.03%)</title><rect x="44.5145%" y="1109" width="0.0318%" height="15" fill="rgb(249,39,40)" fg:x="30837" fg:w="22"/><text x="44.7645%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (22 samples, 0.03%)</title><rect x="44.5145%" y="1093" width="0.0318%" height="15" fill="rgb(207,72,44)" fg:x="30837" fg:w="22"/><text x="44.7645%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (22 samples, 0.03%)</title><rect x="44.5145%" y="1077" width="0.0318%" height="15" fill="rgb(215,193,12)" fg:x="30837" fg:w="22"/><text x="44.7645%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (22 samples, 0.03%)</title><rect x="44.5145%" y="1061" width="0.0318%" height="15" fill="rgb(248,41,39)" fg:x="30837" fg:w="22"/><text x="44.7645%" y="1071.50"></text></g><g><title>SipHashUint256Extra (134 samples, 0.19%)</title><rect x="44.5535%" y="1173" width="0.1934%" height="15" fill="rgb(253,85,4)" fg:x="30864" fg:w="134"/><text x="44.8035%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (60 samples, 0.09%)</title><rect x="44.6603%" y="1157" width="0.0866%" height="15" fill="rgb(243,70,31)" fg:x="30938" fg:w="60"/><text x="44.9103%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (60 samples, 0.09%)</title><rect x="44.6603%" y="1141" width="0.0866%" height="15" fill="rgb(253,195,26)" fg:x="30938" fg:w="60"/><text x="44.9103%" y="1151.50"></text></g><g><title>Coin&amp; std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::emplace_back&lt;&gt; (15 samples, 0.02%)</title><rect x="44.7542%" y="1157" width="0.0217%" height="15" fill="rgb(243,42,11)" fg:x="31003" fg:w="15"/><text x="45.0042%" y="1167.50"></text></g><g><title>UpdateCoins (37 samples, 0.05%)</title><rect x="44.7469%" y="1173" width="0.0534%" height="15" fill="rgb(239,66,17)" fg:x="30998" fg:w="37"/><text x="44.9969%" y="1183.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (11 samples, 0.02%)</title><rect x="44.7845%" y="1157" width="0.0159%" height="15" fill="rgb(217,132,21)" fg:x="31024" fg:w="11"/><text x="45.0345%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.01%)</title><rect x="44.8004%" y="1173" width="0.0130%" height="15" fill="rgb(252,202,21)" fg:x="31035" fg:w="9"/><text x="45.0504%" y="1183.50"></text></g><g><title>malloc (14 samples, 0.02%)</title><rect x="44.8206%" y="1061" width="0.0202%" height="15" fill="rgb(233,98,36)" fg:x="31049" fg:w="14"/><text x="45.0706%" y="1071.50"></text></g><g><title>_int_malloc (13 samples, 0.02%)</title><rect x="44.8220%" y="1045" width="0.0188%" height="15" fill="rgb(216,153,54)" fg:x="31050" fg:w="13"/><text x="45.0720%" y="1055.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (20 samples, 0.03%)</title><rect x="44.8133%" y="1173" width="0.0289%" height="15" fill="rgb(250,99,7)" fg:x="31044" fg:w="20"/><text x="45.0633%" y="1183.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (20 samples, 0.03%)</title><rect x="44.8133%" y="1157" width="0.0289%" height="15" fill="rgb(207,56,50)" fg:x="31044" fg:w="20"/><text x="45.0633%" y="1167.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (20 samples, 0.03%)</title><rect x="44.8133%" y="1141" width="0.0289%" height="15" fill="rgb(244,61,34)" fg:x="31044" fg:w="20"/><text x="45.0633%" y="1151.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (20 samples, 0.03%)</title><rect x="44.8133%" y="1125" width="0.0289%" height="15" fill="rgb(241,50,38)" fg:x="31044" fg:w="20"/><text x="45.0633%" y="1135.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (20 samples, 0.03%)</title><rect x="44.8133%" y="1109" width="0.0289%" height="15" fill="rgb(212,166,30)" fg:x="31044" fg:w="20"/><text x="45.0633%" y="1119.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (20 samples, 0.03%)</title><rect x="44.8133%" y="1093" width="0.0289%" height="15" fill="rgb(249,127,32)" fg:x="31044" fg:w="20"/><text x="45.0633%" y="1103.50"></text></g><g><title>operator new (19 samples, 0.03%)</title><rect x="44.8148%" y="1077" width="0.0274%" height="15" fill="rgb(209,103,0)" fg:x="31045" fg:w="19"/><text x="45.0648%" y="1087.50"></text></g><g><title>UpdateCoins (384 samples, 0.55%)</title><rect x="44.2893%" y="1189" width="0.5543%" height="15" fill="rgb(238,209,51)" fg:x="30681" fg:w="384"/><text x="44.5393%" y="1199.50"></text></g><g><title>WitnessSigOps (9 samples, 0.01%)</title><rect x="44.8437%" y="1189" width="0.0130%" height="15" fill="rgb(237,56,23)" fg:x="31065" fg:w="9"/><text x="45.0937%" y="1199.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (14 samples, 0.02%)</title><rect x="44.8682%" y="1157" width="0.0202%" height="15" fill="rgb(215,153,46)" fg:x="31082" fg:w="14"/><text x="45.1182%" y="1167.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (14 samples, 0.02%)</title><rect x="44.8682%" y="1141" width="0.0202%" height="15" fill="rgb(224,49,31)" fg:x="31082" fg:w="14"/><text x="45.1182%" y="1151.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (14 samples, 0.02%)</title><rect x="44.8682%" y="1125" width="0.0202%" height="15" fill="rgb(250,18,42)" fg:x="31082" fg:w="14"/><text x="45.1182%" y="1135.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (14 samples, 0.02%)</title><rect x="44.8682%" y="1109" width="0.0202%" height="15" fill="rgb(215,176,39)" fg:x="31082" fg:w="14"/><text x="45.1182%" y="1119.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (14 samples, 0.02%)</title><rect x="44.8682%" y="1093" width="0.0202%" height="15" fill="rgb(223,77,29)" fg:x="31082" fg:w="14"/><text x="45.1182%" y="1103.50"></text></g><g><title>AutoFile::write (42 samples, 0.06%)</title><rect x="44.8567%" y="1173" width="0.0606%" height="15" fill="rgb(234,94,52)" fg:x="31074" fg:w="42"/><text x="45.1067%" y="1183.50"></text></g><g><title>util::Xor (20 samples, 0.03%)</title><rect x="44.8884%" y="1157" width="0.0289%" height="15" fill="rgb(220,154,50)" fg:x="31096" fg:w="20"/><text x="45.1384%" y="1167.50"></text></g><g><title>CSHA256::Write (48 samples, 0.07%)</title><rect x="44.9173%" y="1173" width="0.0693%" height="15" fill="rgb(212,11,10)" fg:x="31116" fg:w="48"/><text x="45.1673%" y="1183.50"></text></g><g><title>memcpy (9 samples, 0.01%)</title><rect x="44.9736%" y="1157" width="0.0130%" height="15" fill="rgb(205,166,19)" fg:x="31155" fg:w="9"/><text x="45.2236%" y="1167.50"></text></g><g><title>CompressAmount (9 samples, 0.01%)</title><rect x="44.9866%" y="1173" width="0.0130%" height="15" fill="rgb(244,198,16)" fg:x="31164" fg:w="9"/><text x="45.2366%" y="1183.50"></text></g><g><title>AllocateFileRange (8 samples, 0.01%)</title><rect x="45.0068%" y="1141" width="0.0115%" height="15" fill="rgb(219,69,12)" fg:x="31178" fg:w="8"/><text x="45.2568%" y="1151.50"></text></g><g><title>posix_fallocate (8 samples, 0.01%)</title><rect x="45.0068%" y="1125" width="0.0115%" height="15" fill="rgb(245,30,7)" fg:x="31178" fg:w="8"/><text x="45.2568%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.0068%" y="1109" width="0.0115%" height="15" fill="rgb(218,221,48)" fg:x="31178" fg:w="8"/><text x="45.2568%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.0068%" y="1093" width="0.0115%" height="15" fill="rgb(216,66,15)" fg:x="31178" fg:w="8"/><text x="45.2568%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.0068%" y="1077" width="0.0115%" height="15" fill="rgb(226,122,50)" fg:x="31178" fg:w="8"/><text x="45.2568%" y="1087.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.0068%" y="1061" width="0.0115%" height="15" fill="rgb(239,156,16)" fg:x="31178" fg:w="8"/><text x="45.2568%" y="1071.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="45.0068%" y="1045" width="0.0115%" height="15" fill="rgb(224,27,38)" fg:x="31178" fg:w="8"/><text x="45.2568%" y="1055.50"></text></g><g><title>node::BlockManager::FindUndoPos (21 samples, 0.03%)</title><rect x="45.0068%" y="1173" width="0.0303%" height="15" fill="rgb(224,39,27)" fg:x="31178" fg:w="21"/><text x="45.2568%" y="1183.50"></text></g><g><title>FlatFileSeq::Allocate (21 samples, 0.03%)</title><rect x="45.0068%" y="1157" width="0.0303%" height="15" fill="rgb(215,92,29)" fg:x="31178" fg:w="21"/><text x="45.2568%" y="1167.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="45.0371%" y="709" width="0.0101%" height="15" fill="rgb(207,159,16)" fg:x="31199" fg:w="7"/><text x="45.2871%" y="719.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (7 samples, 0.01%)</title><rect x="45.0371%" y="693" width="0.0101%" height="15" fill="rgb(238,163,47)" fg:x="31199" fg:w="7"/><text x="45.2871%" y="703.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (7 samples, 0.01%)</title><rect x="45.0371%" y="677" width="0.0101%" height="15" fill="rgb(219,91,49)" fg:x="31199" fg:w="7"/><text x="45.2871%" y="687.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (13 samples, 0.02%)</title><rect x="45.0472%" y="661" width="0.0188%" height="15" fill="rgb(227,167,31)" fg:x="31206" fg:w="13"/><text x="45.2972%" y="671.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (13 samples, 0.02%)</title><rect x="45.0472%" y="645" width="0.0188%" height="15" fill="rgb(234,80,54)" fg:x="31206" fg:w="13"/><text x="45.2972%" y="655.50"></text></g><g><title>AutoFile::write (13 samples, 0.02%)</title><rect x="45.0472%" y="629" width="0.0188%" height="15" fill="rgb(212,114,2)" fg:x="31206" fg:w="13"/><text x="45.2972%" y="639.50"></text></g><g><title>util::Xor (8 samples, 0.01%)</title><rect x="45.0544%" y="613" width="0.0115%" height="15" fill="rgb(234,50,24)" fg:x="31211" fg:w="8"/><text x="45.3044%" y="623.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (30 samples, 0.04%)</title><rect x="45.0371%" y="805" width="0.0433%" height="15" fill="rgb(221,68,8)" fg:x="31199" fg:w="30"/><text x="45.2871%" y="815.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (30 samples, 0.04%)</title><rect x="45.0371%" y="789" width="0.0433%" height="15" fill="rgb(254,180,31)" fg:x="31199" fg:w="30"/><text x="45.2871%" y="799.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (30 samples, 0.04%)</title><rect x="45.0371%" y="773" width="0.0433%" height="15" fill="rgb(247,130,50)" fg:x="31199" fg:w="30"/><text x="45.2871%" y="783.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (30 samples, 0.04%)</title><rect x="45.0371%" y="757" width="0.0433%" height="15" fill="rgb(211,109,4)" fg:x="31199" fg:w="30"/><text x="45.2871%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (30 samples, 0.04%)</title><rect x="45.0371%" y="741" width="0.0433%" height="15" fill="rgb(238,50,21)" fg:x="31199" fg:w="30"/><text x="45.2871%" y="751.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (30 samples, 0.04%)</title><rect x="45.0371%" y="725" width="0.0433%" height="15" fill="rgb(225,57,45)" fg:x="31199" fg:w="30"/><text x="45.2871%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (23 samples, 0.03%)</title><rect x="45.0472%" y="709" width="0.0332%" height="15" fill="rgb(209,196,50)" fg:x="31206" fg:w="23"/><text x="45.2972%" y="719.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (23 samples, 0.03%)</title><rect x="45.0472%" y="693" width="0.0332%" height="15" fill="rgb(242,140,13)" fg:x="31206" fg:w="23"/><text x="45.2972%" y="703.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (23 samples, 0.03%)</title><rect x="45.0472%" y="677" width="0.0332%" height="15" fill="rgb(217,111,7)" fg:x="31206" fg:w="23"/><text x="45.2972%" y="687.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (36 samples, 0.05%)</title><rect x="45.0371%" y="1157" width="0.0520%" height="15" fill="rgb(253,193,51)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1167.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="1141" width="0.0520%" height="15" fill="rgb(252,70,29)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1151.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="1125" width="0.0520%" height="15" fill="rgb(232,127,12)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1135.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="1109" width="0.0520%" height="15" fill="rgb(211,180,21)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1119.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="1093" width="0.0520%" height="15" fill="rgb(229,72,13)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="1077" width="0.0520%" height="15" fill="rgb(240,211,49)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1087.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="1061" width="0.0520%" height="15" fill="rgb(219,149,40)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="1045" width="0.0520%" height="15" fill="rgb(210,127,46)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1055.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="1029" width="0.0520%" height="15" fill="rgb(220,106,7)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1039.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="1013" width="0.0520%" height="15" fill="rgb(249,31,22)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1023.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="997" width="0.0520%" height="15" fill="rgb(253,1,49)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="1007.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="981" width="0.0520%" height="15" fill="rgb(227,144,33)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="991.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="965" width="0.0520%" height="15" fill="rgb(249,163,44)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="975.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="949" width="0.0520%" height="15" fill="rgb(234,15,39)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="959.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="933" width="0.0520%" height="15" fill="rgb(207,66,16)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="943.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="917" width="0.0520%" height="15" fill="rgb(233,112,24)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="901" width="0.0520%" height="15" fill="rgb(230,90,22)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="911.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="885" width="0.0520%" height="15" fill="rgb(229,61,13)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="895.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="869" width="0.0520%" height="15" fill="rgb(225,57,24)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="853" width="0.0520%" height="15" fill="rgb(208,169,48)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="863.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="837" width="0.0520%" height="15" fill="rgb(244,218,51)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="847.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (36 samples, 0.05%)</title><rect x="45.0371%" y="821" width="0.0520%" height="15" fill="rgb(214,148,10)" fg:x="31199" fg:w="36"/><text x="45.2871%" y="831.50"></text></g><g><title>AutoFile::~AutoFile (11 samples, 0.02%)</title><rect x="45.0891%" y="1157" width="0.0159%" height="15" fill="rgb(225,174,27)" fg:x="31235" fg:w="11"/><text x="45.3391%" y="1167.50"></text></g><g><title>AutoFile::fclose (11 samples, 0.02%)</title><rect x="45.0891%" y="1141" width="0.0159%" height="15" fill="rgb(230,96,26)" fg:x="31235" fg:w="11"/><text x="45.3391%" y="1151.50"></text></g><g><title>fclose@@GLIBC_2.2.5 (11 samples, 0.02%)</title><rect x="45.0891%" y="1125" width="0.0159%" height="15" fill="rgb(232,10,30)" fg:x="31235" fg:w="11"/><text x="45.3391%" y="1135.50"></text></g><g><title>_IO_file_close_it@@GLIBC_2.2.5 (11 samples, 0.02%)</title><rect x="45.0891%" y="1109" width="0.0159%" height="15" fill="rgb(222,8,50)" fg:x="31235" fg:w="11"/><text x="45.3391%" y="1119.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (11 samples, 0.02%)</title><rect x="45.0891%" y="1093" width="0.0159%" height="15" fill="rgb(213,81,27)" fg:x="31235" fg:w="11"/><text x="45.3391%" y="1103.50"></text></g><g><title>new_do_write (11 samples, 0.02%)</title><rect x="45.0891%" y="1077" width="0.0159%" height="15" fill="rgb(245,50,10)" fg:x="31235" fg:w="11"/><text x="45.3391%" y="1087.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (11 samples, 0.02%)</title><rect x="45.0891%" y="1061" width="0.0159%" height="15" fill="rgb(216,100,18)" fg:x="31235" fg:w="11"/><text x="45.3391%" y="1071.50"></text></g><g><title>__GI___libc_write (11 samples, 0.02%)</title><rect x="45.0891%" y="1045" width="0.0159%" height="15" fill="rgb(236,147,54)" fg:x="31235" fg:w="11"/><text x="45.3391%" y="1055.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="45.0891%" y="1029" width="0.0159%" height="15" fill="rgb(205,143,26)" fg:x="31235" fg:w="11"/><text x="45.3391%" y="1039.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="45.0905%" y="1013" width="0.0144%" height="15" fill="rgb(236,26,9)" fg:x="31236" fg:w="10"/><text x="45.3405%" y="1023.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="45.0905%" y="997" width="0.0144%" height="15" fill="rgb(221,165,53)" fg:x="31236" fg:w="10"/><text x="45.3405%" y="1007.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="45.0905%" y="981" width="0.0144%" height="15" fill="rgb(214,110,17)" fg:x="31236" fg:w="10"/><text x="45.3405%" y="991.50"></text></g><g><title>[[ext4]] (10 samples, 0.01%)</title><rect x="45.0905%" y="965" width="0.0144%" height="15" fill="rgb(237,197,12)" fg:x="31236" fg:w="10"/><text x="45.3405%" y="975.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="45.0905%" y="949" width="0.0144%" height="15" fill="rgb(205,84,17)" fg:x="31236" fg:w="10"/><text x="45.3405%" y="959.50"></text></g><g><title>CSHA256::Write (7 samples, 0.01%)</title><rect x="45.1093%" y="661" width="0.0101%" height="15" fill="rgb(237,18,45)" fg:x="31249" fg:w="7"/><text x="45.3593%" y="671.50"></text></g><g><title>__memmove_avx512_unaligned_erms (17 samples, 0.02%)</title><rect x="45.2002%" y="517" width="0.0245%" height="15" fill="rgb(221,87,14)" fg:x="31312" fg:w="17"/><text x="45.4502%" y="527.50"></text></g><g><title>CSHA256::Write (22 samples, 0.03%)</title><rect x="45.1944%" y="533" width="0.0318%" height="15" fill="rgb(238,186,15)" fg:x="31308" fg:w="22"/><text x="45.4444%" y="543.50"></text></g><g><title>CSHA256::Write (77 samples, 0.11%)</title><rect x="45.1266%" y="549" width="0.1112%" height="15" fill="rgb(208,115,11)" fg:x="31261" fg:w="77"/><text x="45.3766%" y="559.50"></text></g><g><title>CompressAmount (9 samples, 0.01%)</title><rect x="45.2378%" y="549" width="0.0130%" height="15" fill="rgb(254,175,0)" fg:x="31338" fg:w="9"/><text x="45.4878%" y="559.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.01%)</title><rect x="45.2507%" y="549" width="0.0130%" height="15" fill="rgb(227,24,42)" fg:x="31347" fg:w="9"/><text x="45.5007%" y="559.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (12 samples, 0.02%)</title><rect x="45.2637%" y="549" width="0.0173%" height="15" fill="rgb(223,211,37)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="559.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (12 samples, 0.02%)</title><rect x="45.2637%" y="533" width="0.0173%" height="15" fill="rgb(235,49,27)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="517" width="0.0173%" height="15" fill="rgb(254,97,51)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="527.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="501" width="0.0173%" height="15" fill="rgb(249,51,40)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="511.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="485" width="0.0173%" height="15" fill="rgb(210,128,45)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="495.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="469" width="0.0173%" height="15" fill="rgb(224,137,50)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="479.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="453" width="0.0173%" height="15" fill="rgb(242,15,9)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="463.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="437" width="0.0173%" height="15" fill="rgb(233,187,41)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="447.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="421" width="0.0173%" height="15" fill="rgb(227,2,29)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="405" width="0.0173%" height="15" fill="rgb(222,70,3)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="415.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="389" width="0.0173%" height="15" fill="rgb(213,11,42)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="399.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="373" width="0.0173%" height="15" fill="rgb(225,150,9)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="383.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="357" width="0.0173%" height="15" fill="rgb(230,162,45)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="367.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="341" width="0.0173%" height="15" fill="rgb(222,14,52)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="351.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="325" width="0.0173%" height="15" fill="rgb(254,198,14)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="335.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="309" width="0.0173%" height="15" fill="rgb(220,217,30)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="319.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="293" width="0.0173%" height="15" fill="rgb(215,146,41)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="303.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="277" width="0.0173%" height="15" fill="rgb(217,27,36)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="287.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="261" width="0.0173%" height="15" fill="rgb(219,218,39)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="271.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="245" width="0.0173%" height="15" fill="rgb(219,4,42)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="255.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="229" width="0.0173%" height="15" fill="rgb(249,119,36)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="239.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="213" width="0.0173%" height="15" fill="rgb(209,23,33)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="223.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.2637%" y="197" width="0.0173%" height="15" fill="rgb(211,10,0)" fg:x="31356" fg:w="12"/><text x="45.5137%" y="207.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.01%)</title><rect x="45.2811%" y="549" width="0.0130%" height="15" fill="rgb(208,99,37)" fg:x="31368" fg:w="9"/><text x="45.5311%" y="559.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (136 samples, 0.20%)</title><rect x="45.1194%" y="661" width="0.1963%" height="15" fill="rgb(213,132,31)" fg:x="31256" fg:w="136"/><text x="45.3694%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (136 samples, 0.20%)</title><rect x="45.1194%" y="645" width="0.1963%" height="15" fill="rgb(243,129,40)" fg:x="31256" fg:w="136"/><text x="45.3694%" y="655.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (136 samples, 0.20%)</title><rect x="45.1194%" y="629" width="0.1963%" height="15" fill="rgb(210,66,33)" fg:x="31256" fg:w="136"/><text x="45.3694%" y="639.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (136 samples, 0.20%)</title><rect x="45.1194%" y="613" width="0.1963%" height="15" fill="rgb(209,189,4)" fg:x="31256" fg:w="136"/><text x="45.3694%" y="623.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (136 samples, 0.20%)</title><rect x="45.1194%" y="597" width="0.1963%" height="15" fill="rgb(214,107,37)" fg:x="31256" fg:w="136"/><text x="45.3694%" y="607.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (133 samples, 0.19%)</title><rect x="45.1237%" y="581" width="0.1920%" height="15" fill="rgb(245,88,54)" fg:x="31259" fg:w="133"/><text x="45.3737%" y="591.50"></text></g><g><title>HashWriter::write (133 samples, 0.19%)</title><rect x="45.1237%" y="565" width="0.1920%" height="15" fill="rgb(205,146,20)" fg:x="31259" fg:w="133"/><text x="45.3737%" y="575.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (15 samples, 0.02%)</title><rect x="45.2940%" y="549" width="0.0217%" height="15" fill="rgb(220,161,25)" fg:x="31377" fg:w="15"/><text x="45.5440%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (155 samples, 0.22%)</title><rect x="45.1078%" y="709" width="0.2237%" height="15" fill="rgb(215,152,15)" fg:x="31248" fg:w="155"/><text x="45.3578%" y="719.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (155 samples, 0.22%)</title><rect x="45.1078%" y="693" width="0.2237%" height="15" fill="rgb(233,192,44)" fg:x="31248" fg:w="155"/><text x="45.3578%" y="703.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (155 samples, 0.22%)</title><rect x="45.1078%" y="677" width="0.2237%" height="15" fill="rgb(240,170,46)" fg:x="31248" fg:w="155"/><text x="45.3578%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (10 samples, 0.01%)</title><rect x="45.3171%" y="661" width="0.0144%" height="15" fill="rgb(207,104,33)" fg:x="31393" fg:w="10"/><text x="45.5671%" y="671.50"></text></g><g><title>CSHA256::Write (11 samples, 0.02%)</title><rect x="45.3532%" y="645" width="0.0159%" height="15" fill="rgb(219,21,39)" fg:x="31418" fg:w="11"/><text x="45.6032%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="277" width="0.0159%" height="15" fill="rgb(214,133,29)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="287.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="261" width="0.0159%" height="15" fill="rgb(226,93,6)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="271.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="245" width="0.0159%" height="15" fill="rgb(252,222,34)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="255.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="229" width="0.0159%" height="15" fill="rgb(252,92,48)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="239.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="213" width="0.0159%" height="15" fill="rgb(245,223,24)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="223.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="197" width="0.0159%" height="15" fill="rgb(205,176,3)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="207.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="181" width="0.0159%" height="15" fill="rgb(235,151,15)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="191.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="165" width="0.0159%" height="15" fill="rgb(237,209,11)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="175.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="149" width="0.0159%" height="15" fill="rgb(243,227,24)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="159.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (11 samples, 0.02%)</title><rect x="45.3734%" y="133" width="0.0159%" height="15" fill="rgb(239,193,16)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="143.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="117" width="0.0159%" height="15" fill="rgb(231,27,9)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="127.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="101" width="0.0159%" height="15" fill="rgb(219,169,10)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="111.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="85" width="0.0159%" height="15" fill="rgb(244,229,43)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="95.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (11 samples, 0.02%)</title><rect x="45.3734%" y="69" width="0.0159%" height="15" fill="rgb(254,38,20)" fg:x="31432" fg:w="11"/><text x="45.6234%" y="79.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (12 samples, 0.02%)</title><rect x="45.3734%" y="645" width="0.0173%" height="15" fill="rgb(250,47,30)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="655.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (12 samples, 0.02%)</title><rect x="45.3734%" y="629" width="0.0173%" height="15" fill="rgb(224,124,36)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="639.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="613" width="0.0173%" height="15" fill="rgb(246,68,51)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="623.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="597" width="0.0173%" height="15" fill="rgb(253,43,49)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="607.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="581" width="0.0173%" height="15" fill="rgb(219,54,36)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="591.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="565" width="0.0173%" height="15" fill="rgb(227,133,34)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="575.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="549" width="0.0173%" height="15" fill="rgb(247,227,15)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="559.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="533" width="0.0173%" height="15" fill="rgb(229,96,14)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="517" width="0.0173%" height="15" fill="rgb(220,79,17)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="527.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="501" width="0.0173%" height="15" fill="rgb(205,131,53)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="485" width="0.0173%" height="15" fill="rgb(209,50,29)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="495.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="469" width="0.0173%" height="15" fill="rgb(245,86,46)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="479.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="453" width="0.0173%" height="15" fill="rgb(235,66,46)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="463.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="437" width="0.0173%" height="15" fill="rgb(232,148,31)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="447.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="421" width="0.0173%" height="15" fill="rgb(217,149,8)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="431.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="405" width="0.0173%" height="15" fill="rgb(209,183,11)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="415.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="389" width="0.0173%" height="15" fill="rgb(208,55,20)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="399.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="373" width="0.0173%" height="15" fill="rgb(218,39,14)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="383.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="357" width="0.0173%" height="15" fill="rgb(216,169,33)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="367.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="341" width="0.0173%" height="15" fill="rgb(233,80,24)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="351.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="325" width="0.0173%" height="15" fill="rgb(213,179,31)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="335.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="309" width="0.0173%" height="15" fill="rgb(209,19,5)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="319.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.3734%" y="293" width="0.0173%" height="15" fill="rgb(219,18,35)" fg:x="31432" fg:w="12"/><text x="45.6234%" y="303.50"></text></g><g><title>CompressScript (30 samples, 0.04%)</title><rect x="45.3532%" y="661" width="0.0433%" height="15" fill="rgb(209,169,16)" fg:x="31418" fg:w="30"/><text x="45.6032%" y="671.50"></text></g><g><title>CSHA256::Write (15 samples, 0.02%)</title><rect x="45.4427%" y="597" width="0.0217%" height="15" fill="rgb(245,90,51)" fg:x="31480" fg:w="15"/><text x="45.6927%" y="607.50"></text></g><g><title>CSHA256::Write (63 samples, 0.09%)</title><rect x="45.3965%" y="613" width="0.0909%" height="15" fill="rgb(220,99,45)" fg:x="31448" fg:w="63"/><text x="45.6465%" y="623.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="45.4933%" y="149" width="0.0144%" height="15" fill="rgb(249,89,25)" fg:x="31515" fg:w="10"/><text x="45.7433%" y="159.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (10 samples, 0.01%)</title><rect x="45.4933%" y="133" width="0.0144%" height="15" fill="rgb(239,193,0)" fg:x="31515" fg:w="10"/><text x="45.7433%" y="143.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (10 samples, 0.01%)</title><rect x="45.4933%" y="117" width="0.0144%" height="15" fill="rgb(231,126,1)" fg:x="31515" fg:w="10"/><text x="45.7433%" y="127.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (10 samples, 0.01%)</title><rect x="45.4933%" y="101" width="0.0144%" height="15" fill="rgb(243,166,3)" fg:x="31515" fg:w="10"/><text x="45.7433%" y="111.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="45.4933%" y="85" width="0.0144%" height="15" fill="rgb(223,22,34)" fg:x="31515" fg:w="10"/><text x="45.7433%" y="95.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (10 samples, 0.01%)</title><rect x="45.4933%" y="69" width="0.0144%" height="15" fill="rgb(251,52,51)" fg:x="31515" fg:w="10"/><text x="45.7433%" y="79.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (10 samples, 0.01%)</title><rect x="45.4933%" y="53" width="0.0144%" height="15" fill="rgb(221,165,28)" fg:x="31515" fg:w="10"/><text x="45.7433%" y="63.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (10 samples, 0.01%)</title><rect x="45.4933%" y="37" width="0.0144%" height="15" fill="rgb(218,121,47)" fg:x="31515" fg:w="10"/><text x="45.7433%" y="47.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (12 samples, 0.02%)</title><rect x="45.4933%" y="613" width="0.0173%" height="15" fill="rgb(209,120,9)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="623.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (12 samples, 0.02%)</title><rect x="45.4933%" y="597" width="0.0173%" height="15" fill="rgb(236,68,12)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="581" width="0.0173%" height="15" fill="rgb(225,194,26)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="591.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="565" width="0.0173%" height="15" fill="rgb(231,84,39)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="575.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="549" width="0.0173%" height="15" fill="rgb(210,11,45)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="559.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="533" width="0.0173%" height="15" fill="rgb(224,54,52)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="517" width="0.0173%" height="15" fill="rgb(238,102,14)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="527.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="501" width="0.0173%" height="15" fill="rgb(243,160,52)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="485" width="0.0173%" height="15" fill="rgb(216,114,19)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="469" width="0.0173%" height="15" fill="rgb(244,166,37)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="453" width="0.0173%" height="15" fill="rgb(246,29,44)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="437" width="0.0173%" height="15" fill="rgb(215,56,53)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="421" width="0.0173%" height="15" fill="rgb(217,60,2)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="405" width="0.0173%" height="15" fill="rgb(207,26,24)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="415.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="389" width="0.0173%" height="15" fill="rgb(252,210,15)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="399.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="373" width="0.0173%" height="15" fill="rgb(253,209,26)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="383.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="357" width="0.0173%" height="15" fill="rgb(238,170,14)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="341" width="0.0173%" height="15" fill="rgb(216,178,15)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="351.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="325" width="0.0173%" height="15" fill="rgb(250,197,2)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="309" width="0.0173%" height="15" fill="rgb(212,70,42)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="319.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="293" width="0.0173%" height="15" fill="rgb(227,213,9)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="303.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="277" width="0.0173%" height="15" fill="rgb(245,99,25)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="287.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="261" width="0.0173%" height="15" fill="rgb(250,82,29)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="271.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="245" width="0.0173%" height="15" fill="rgb(241,226,54)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="255.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="229" width="0.0173%" height="15" fill="rgb(221,99,41)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="239.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="213" width="0.0173%" height="15" fill="rgb(213,90,21)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="223.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="197" width="0.0173%" height="15" fill="rgb(205,208,24)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="207.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="181" width="0.0173%" height="15" fill="rgb(246,31,12)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="191.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (12 samples, 0.02%)</title><rect x="45.4933%" y="165" width="0.0173%" height="15" fill="rgb(213,154,6)" fg:x="31515" fg:w="12"/><text x="45.7433%" y="175.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (88 samples, 0.13%)</title><rect x="45.3965%" y="661" width="0.1270%" height="15" fill="rgb(222,163,29)" fg:x="31448" fg:w="88"/><text x="45.6465%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (88 samples, 0.13%)</title><rect x="45.3965%" y="645" width="0.1270%" height="15" fill="rgb(227,201,8)" fg:x="31448" fg:w="88"/><text x="45.6465%" y="655.50"></text></g><g><title>HashWriter::write (88 samples, 0.13%)</title><rect x="45.3965%" y="629" width="0.1270%" height="15" fill="rgb(233,9,32)" fg:x="31448" fg:w="88"/><text x="45.6465%" y="639.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (11 samples, 0.02%)</title><rect x="45.5236%" y="661" width="0.0159%" height="15" fill="rgb(217,54,24)" fg:x="31536" fg:w="11"/><text x="45.7736%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char&gt; (11 samples, 0.02%)</title><rect x="45.5236%" y="645" width="0.0159%" height="15" fill="rgb(235,192,0)" fg:x="31536" fg:w="11"/><text x="45.7736%" y="655.50"></text></g><g><title>HashWriter::write (11 samples, 0.02%)</title><rect x="45.5236%" y="629" width="0.0159%" height="15" fill="rgb(235,45,9)" fg:x="31536" fg:w="11"/><text x="45.7736%" y="639.50"></text></g><g><title>CSHA256::Write (9 samples, 0.01%)</title><rect x="45.5395%" y="597" width="0.0130%" height="15" fill="rgb(246,42,40)" fg:x="31547" fg:w="9"/><text x="45.7895%" y="607.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (8 samples, 0.01%)</title><rect x="45.5524%" y="597" width="0.0115%" height="15" fill="rgb(248,111,24)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="607.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (8 samples, 0.01%)</title><rect x="45.5524%" y="581" width="0.0115%" height="15" fill="rgb(249,65,22)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="591.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="565" width="0.0115%" height="15" fill="rgb(238,111,51)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="575.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="549" width="0.0115%" height="15" fill="rgb(250,118,22)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="559.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="533" width="0.0115%" height="15" fill="rgb(234,84,26)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="543.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="517" width="0.0115%" height="15" fill="rgb(243,172,12)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="501" width="0.0115%" height="15" fill="rgb(236,150,49)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="511.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="485" width="0.0115%" height="15" fill="rgb(225,197,26)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="469" width="0.0115%" height="15" fill="rgb(214,17,42)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="479.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="453" width="0.0115%" height="15" fill="rgb(224,165,40)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="463.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="437" width="0.0115%" height="15" fill="rgb(246,100,4)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="447.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="421" width="0.0115%" height="15" fill="rgb(222,103,0)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="431.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="405" width="0.0115%" height="15" fill="rgb(227,189,26)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="415.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="389" width="0.0115%" height="15" fill="rgb(214,202,17)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="399.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="373" width="0.0115%" height="15" fill="rgb(229,111,3)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="383.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="357" width="0.0115%" height="15" fill="rgb(229,172,15)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="367.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="341" width="0.0115%" height="15" fill="rgb(230,224,35)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="351.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="325" width="0.0115%" height="15" fill="rgb(251,141,6)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="335.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="309" width="0.0115%" height="15" fill="rgb(225,208,6)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="319.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="293" width="0.0115%" height="15" fill="rgb(246,181,16)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="303.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="277" width="0.0115%" height="15" fill="rgb(227,129,36)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="287.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="261" width="0.0115%" height="15" fill="rgb(248,117,24)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="271.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="245" width="0.0115%" height="15" fill="rgb(214,185,35)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="255.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="229" width="0.0115%" height="15" fill="rgb(236,150,34)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="239.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="213" width="0.0115%" height="15" fill="rgb(243,228,27)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="223.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="197" width="0.0115%" height="15" fill="rgb(245,77,44)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="207.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="181" width="0.0115%" height="15" fill="rgb(235,214,42)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="191.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="165" width="0.0115%" height="15" fill="rgb(221,74,3)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="175.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="149" width="0.0115%" height="15" fill="rgb(206,121,29)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="159.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="133" width="0.0115%" height="15" fill="rgb(249,131,53)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="143.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="117" width="0.0115%" height="15" fill="rgb(236,170,29)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="127.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (8 samples, 0.01%)</title><rect x="45.5524%" y="101" width="0.0115%" height="15" fill="rgb(247,96,15)" fg:x="31556" fg:w="8"/><text x="45.8024%" y="111.50"></text></g><g><title>CSHA256::Write (15 samples, 0.02%)</title><rect x="45.5640%" y="549" width="0.0217%" height="15" fill="rgb(211,210,7)" fg:x="31564" fg:w="15"/><text x="45.8140%" y="559.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (39 samples, 0.06%)</title><rect x="45.5395%" y="661" width="0.0563%" height="15" fill="rgb(240,88,50)" fg:x="31547" fg:w="39"/><text x="45.7895%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (39 samples, 0.06%)</title><rect x="45.5395%" y="645" width="0.0563%" height="15" fill="rgb(209,229,26)" fg:x="31547" fg:w="39"/><text x="45.7895%" y="655.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (39 samples, 0.06%)</title><rect x="45.5395%" y="629" width="0.0563%" height="15" fill="rgb(210,68,23)" fg:x="31547" fg:w="39"/><text x="45.7895%" y="639.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (39 samples, 0.06%)</title><rect x="45.5395%" y="613" width="0.0563%" height="15" fill="rgb(229,180,13)" fg:x="31547" fg:w="39"/><text x="45.7895%" y="623.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (22 samples, 0.03%)</title><rect x="45.5640%" y="597" width="0.0318%" height="15" fill="rgb(236,53,44)" fg:x="31564" fg:w="22"/><text x="45.8140%" y="607.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (22 samples, 0.03%)</title><rect x="45.5640%" y="581" width="0.0318%" height="15" fill="rgb(244,214,29)" fg:x="31564" fg:w="22"/><text x="45.8140%" y="591.50"></text></g><g><title>HashWriter::write (22 samples, 0.03%)</title><rect x="45.5640%" y="565" width="0.0318%" height="15" fill="rgb(220,75,29)" fg:x="31564" fg:w="22"/><text x="45.8140%" y="575.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (344 samples, 0.50%)</title><rect x="45.1078%" y="805" width="0.4966%" height="15" fill="rgb(214,183,37)" fg:x="31248" fg:w="344"/><text x="45.3578%" y="815.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (344 samples, 0.50%)</title><rect x="45.1078%" y="789" width="0.4966%" height="15" fill="rgb(239,117,29)" fg:x="31248" fg:w="344"/><text x="45.3578%" y="799.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (344 samples, 0.50%)</title><rect x="45.1078%" y="773" width="0.4966%" height="15" fill="rgb(237,171,35)" fg:x="31248" fg:w="344"/><text x="45.3578%" y="783.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (344 samples, 0.50%)</title><rect x="45.1078%" y="757" width="0.4966%" height="15" fill="rgb(229,178,53)" fg:x="31248" fg:w="344"/><text x="45.3578%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (344 samples, 0.50%)</title><rect x="45.1078%" y="741" width="0.4966%" height="15" fill="rgb(210,102,19)" fg:x="31248" fg:w="344"/><text x="45.3578%" y="751.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (344 samples, 0.50%)</title><rect x="45.1078%" y="725" width="0.4966%" height="15" fill="rgb(235,127,22)" fg:x="31248" fg:w="344"/><text x="45.3578%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (189 samples, 0.27%)</title><rect x="45.3316%" y="709" width="0.2728%" height="15" fill="rgb(244,31,31)" fg:x="31403" fg:w="189"/><text x="45.5816%" y="719.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (189 samples, 0.27%)</title><rect x="45.3316%" y="693" width="0.2728%" height="15" fill="rgb(231,43,21)" fg:x="31403" fg:w="189"/><text x="45.5816%" y="703.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (189 samples, 0.27%)</title><rect x="45.3316%" y="677" width="0.2728%" height="15" fill="rgb(217,131,35)" fg:x="31403" fg:w="189"/><text x="45.5816%" y="687.50"></text></g><g><title>CSHA256::Write (11 samples, 0.02%)</title><rect x="45.6044%" y="757" width="0.0159%" height="15" fill="rgb(221,149,4)" fg:x="31592" fg:w="11"/><text x="45.8544%" y="767.50"></text></g><g><title>QuadRound (7 samples, 0.01%)</title><rect x="45.6246%" y="741" width="0.0101%" height="15" fill="rgb(232,170,28)" fg:x="31606" fg:w="7"/><text x="45.8746%" y="751.50"></text></g><g><title>ShiftMessageA (9 samples, 0.01%)</title><rect x="45.6347%" y="725" width="0.0130%" height="15" fill="rgb(238,56,10)" fg:x="31613" fg:w="9"/><text x="45.8847%" y="735.50"></text></g><g><title>_mm_sha256msg1_epu32 (9 samples, 0.01%)</title><rect x="45.6347%" y="709" width="0.0130%" height="15" fill="rgb(235,196,14)" fg:x="31613" fg:w="9"/><text x="45.8847%" y="719.50"></text></g><g><title>sha256_x86_shani::Transform (21 samples, 0.03%)</title><rect x="45.6232%" y="757" width="0.0303%" height="15" fill="rgb(216,45,48)" fg:x="31605" fg:w="21"/><text x="45.8732%" y="767.50"></text></g><g><title>ShiftMessageB (13 samples, 0.02%)</title><rect x="45.6347%" y="741" width="0.0188%" height="15" fill="rgb(238,213,17)" fg:x="31613" fg:w="13"/><text x="45.8847%" y="751.50"></text></g><g><title>CSHA256::Write (10 samples, 0.01%)</title><rect x="45.6867%" y="693" width="0.0144%" height="15" fill="rgb(212,13,2)" fg:x="31649" fg:w="10"/><text x="45.9367%" y="703.50"></text></g><g><title>CSHA256::Write (36 samples, 0.05%)</title><rect x="45.6636%" y="709" width="0.0520%" height="15" fill="rgb(240,114,20)" fg:x="31633" fg:w="36"/><text x="45.9136%" y="719.50"></text></g><g><title>_mm_add_epi32 (7 samples, 0.01%)</title><rect x="45.7300%" y="677" width="0.0101%" height="15" fill="rgb(228,41,40)" fg:x="31679" fg:w="7"/><text x="45.9800%" y="687.50"></text></g><g><title>QuadRound (15 samples, 0.02%)</title><rect x="45.7300%" y="693" width="0.0217%" height="15" fill="rgb(244,132,35)" fg:x="31679" fg:w="15"/><text x="45.9800%" y="703.50"></text></g><g><title>ShiftMessageA (21 samples, 0.03%)</title><rect x="45.7517%" y="677" width="0.0303%" height="15" fill="rgb(253,189,4)" fg:x="31694" fg:w="21"/><text x="46.0017%" y="687.50"></text></g><g><title>_mm_sha256msg1_epu32 (21 samples, 0.03%)</title><rect x="45.7517%" y="661" width="0.0303%" height="15" fill="rgb(224,37,19)" fg:x="31694" fg:w="21"/><text x="46.0017%" y="671.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.02%)</title><rect x="45.7820%" y="661" width="0.0231%" height="15" fill="rgb(235,223,18)" fg:x="31715" fg:w="16"/><text x="46.0320%" y="671.50"></text></g><g><title>ShiftMessageB (46 samples, 0.07%)</title><rect x="45.7517%" y="693" width="0.0664%" height="15" fill="rgb(235,163,25)" fg:x="31694" fg:w="46"/><text x="46.0017%" y="703.50"></text></g><g><title>ShiftMessageC (25 samples, 0.04%)</title><rect x="45.7820%" y="677" width="0.0361%" height="15" fill="rgb(217,145,28)" fg:x="31715" fg:w="25"/><text x="46.0320%" y="687.50"></text></g><g><title>_mm_sha256msg2_epu32 (7 samples, 0.01%)</title><rect x="45.8080%" y="661" width="0.0101%" height="15" fill="rgb(223,223,32)" fg:x="31733" fg:w="7"/><text x="46.0580%" y="671.50"></text></g><g><title>sha256_x86_shani::Transform (71 samples, 0.10%)</title><rect x="45.7271%" y="709" width="0.1025%" height="15" fill="rgb(227,189,39)" fg:x="31677" fg:w="71"/><text x="45.9771%" y="719.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (162 samples, 0.23%)</title><rect x="45.6044%" y="805" width="0.2339%" height="15" fill="rgb(248,10,22)" fg:x="31592" fg:w="162"/><text x="45.8544%" y="815.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (162 samples, 0.23%)</title><rect x="45.6044%" y="789" width="0.2339%" height="15" fill="rgb(248,46,39)" fg:x="31592" fg:w="162"/><text x="45.8544%" y="799.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (162 samples, 0.23%)</title><rect x="45.6044%" y="773" width="0.2339%" height="15" fill="rgb(248,113,48)" fg:x="31592" fg:w="162"/><text x="45.8544%" y="783.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (128 samples, 0.18%)</title><rect x="45.6535%" y="757" width="0.1848%" height="15" fill="rgb(245,16,25)" fg:x="31626" fg:w="128"/><text x="45.9035%" y="767.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (121 samples, 0.17%)</title><rect x="45.6636%" y="741" width="0.1747%" height="15" fill="rgb(249,152,16)" fg:x="31633" fg:w="121"/><text x="45.9136%" y="751.50"></text></g><g><title>HashWriter::write (121 samples, 0.17%)</title><rect x="45.6636%" y="725" width="0.1747%" height="15" fill="rgb(250,16,1)" fg:x="31633" fg:w="121"/><text x="45.9136%" y="735.50"></text></g><g><title>CSHA256::Write (35 samples, 0.05%)</title><rect x="45.8397%" y="757" width="0.0505%" height="15" fill="rgb(249,138,3)" fg:x="31755" fg:w="35"/><text x="46.0897%" y="767.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (10 samples, 0.01%)</title><rect x="45.8931%" y="757" width="0.0144%" height="15" fill="rgb(227,71,41)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="767.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (10 samples, 0.01%)</title><rect x="45.8931%" y="741" width="0.0144%" height="15" fill="rgb(209,184,23)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="751.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="725" width="0.0144%" height="15" fill="rgb(223,215,31)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="735.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="709" width="0.0144%" height="15" fill="rgb(210,146,28)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="719.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="693" width="0.0144%" height="15" fill="rgb(209,183,41)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="703.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="677" width="0.0144%" height="15" fill="rgb(209,224,45)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="661" width="0.0144%" height="15" fill="rgb(224,209,51)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="671.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="645" width="0.0144%" height="15" fill="rgb(223,17,39)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="629" width="0.0144%" height="15" fill="rgb(234,204,37)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="639.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="613" width="0.0144%" height="15" fill="rgb(236,120,5)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="597" width="0.0144%" height="15" fill="rgb(248,97,27)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="581" width="0.0144%" height="15" fill="rgb(240,66,17)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="591.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="565" width="0.0144%" height="15" fill="rgb(210,79,3)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="575.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="549" width="0.0144%" height="15" fill="rgb(214,176,27)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="559.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="533" width="0.0144%" height="15" fill="rgb(235,185,3)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="543.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="517" width="0.0144%" height="15" fill="rgb(227,24,12)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="527.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="501" width="0.0144%" height="15" fill="rgb(252,169,48)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="485" width="0.0144%" height="15" fill="rgb(212,65,1)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="495.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="469" width="0.0144%" height="15" fill="rgb(242,39,24)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="479.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="453" width="0.0144%" height="15" fill="rgb(249,32,23)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="463.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="437" width="0.0144%" height="15" fill="rgb(251,195,23)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="447.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="45.8931%" y="421" width="0.0144%" height="15" fill="rgb(236,174,8)" fg:x="31792" fg:w="10"/><text x="46.1431%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.01%)</title><rect x="45.9076%" y="757" width="0.0101%" height="15" fill="rgb(220,197,8)" fg:x="31802" fg:w="7"/><text x="46.1576%" y="767.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (589 samples, 0.85%)</title><rect x="45.1049%" y="821" width="0.8502%" height="15" fill="rgb(240,108,37)" fg:x="31246" fg:w="589"/><text x="45.3549%" y="831.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (81 samples, 0.12%)</title><rect x="45.8383%" y="805" width="0.1169%" height="15" fill="rgb(232,176,24)" fg:x="31754" fg:w="81"/><text x="46.0883%" y="815.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (81 samples, 0.12%)</title><rect x="45.8383%" y="789" width="0.1169%" height="15" fill="rgb(243,35,29)" fg:x="31754" fg:w="81"/><text x="46.0883%" y="799.50"></text></g><g><title>HashWriter::write (81 samples, 0.12%)</title><rect x="45.8383%" y="773" width="0.1169%" height="15" fill="rgb(210,37,18)" fg:x="31754" fg:w="81"/><text x="46.0883%" y="783.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (23 samples, 0.03%)</title><rect x="45.9220%" y="757" width="0.0332%" height="15" fill="rgb(224,184,40)" fg:x="31812" fg:w="23"/><text x="46.1720%" y="767.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (592 samples, 0.85%)</title><rect x="45.1049%" y="1157" width="0.8546%" height="15" fill="rgb(236,39,29)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1167.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="1141" width="0.8546%" height="15" fill="rgb(232,48,39)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1151.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="1125" width="0.8546%" height="15" fill="rgb(236,34,42)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1135.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="1109" width="0.8546%" height="15" fill="rgb(243,106,37)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1119.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="1093" width="0.8546%" height="15" fill="rgb(218,96,6)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="1077" width="0.8546%" height="15" fill="rgb(235,130,12)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1087.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="1061" width="0.8546%" height="15" fill="rgb(231,95,0)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1071.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="1045" width="0.8546%" height="15" fill="rgb(228,12,23)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1055.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="1029" width="0.8546%" height="15" fill="rgb(216,12,1)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1039.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="1013" width="0.8546%" height="15" fill="rgb(219,59,3)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1023.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="997" width="0.8546%" height="15" fill="rgb(215,208,46)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="1007.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="981" width="0.8546%" height="15" fill="rgb(254,224,29)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="991.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="965" width="0.8546%" height="15" fill="rgb(232,14,29)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="975.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="949" width="0.8546%" height="15" fill="rgb(208,45,52)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="959.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="933" width="0.8546%" height="15" fill="rgb(234,191,28)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="943.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="917" width="0.8546%" height="15" fill="rgb(244,67,43)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="901" width="0.8546%" height="15" fill="rgb(236,189,24)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="911.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="885" width="0.8546%" height="15" fill="rgb(239,214,33)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="895.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="869" width="0.8546%" height="15" fill="rgb(226,176,41)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="853" width="0.8546%" height="15" fill="rgb(248,47,8)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="863.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (592 samples, 0.85%)</title><rect x="45.1049%" y="837" width="0.8546%" height="15" fill="rgb(218,81,44)" fg:x="31246" fg:w="592"/><text x="45.3549%" y="847.50"></text></g><g><title>__fopen_internal (9 samples, 0.01%)</title><rect x="45.9667%" y="1125" width="0.0130%" height="15" fill="rgb(213,98,6)" fg:x="31843" fg:w="9"/><text x="46.2167%" y="1135.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (9 samples, 0.01%)</title><rect x="45.9667%" y="1109" width="0.0130%" height="15" fill="rgb(222,85,22)" fg:x="31843" fg:w="9"/><text x="46.2167%" y="1119.50"></text></g><g><title>_IO_file_open (9 samples, 0.01%)</title><rect x="45.9667%" y="1093" width="0.0130%" height="15" fill="rgb(239,46,39)" fg:x="31843" fg:w="9"/><text x="46.2167%" y="1103.50"></text></g><g><title>__GI___libc_open (9 samples, 0.01%)</title><rect x="45.9667%" y="1077" width="0.0130%" height="15" fill="rgb(237,12,29)" fg:x="31843" fg:w="9"/><text x="46.2167%" y="1087.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="45.9667%" y="1061" width="0.0130%" height="15" fill="rgb(214,77,8)" fg:x="31843" fg:w="9"/><text x="46.2167%" y="1071.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.9682%" y="1045" width="0.0115%" height="15" fill="rgb(217,168,37)" fg:x="31844" fg:w="8"/><text x="46.2182%" y="1055.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.9682%" y="1029" width="0.0115%" height="15" fill="rgb(221,217,23)" fg:x="31844" fg:w="8"/><text x="46.2182%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="45.9696%" y="1013" width="0.0101%" height="15" fill="rgb(243,229,36)" fg:x="31845" fg:w="7"/><text x="46.2196%" y="1023.50"></text></g><g><title>node::BlockManager::OpenUndoFile (27 samples, 0.04%)</title><rect x="45.9595%" y="1157" width="0.0390%" height="15" fill="rgb(251,163,40)" fg:x="31838" fg:w="27"/><text x="46.2095%" y="1167.50"></text></g><g><title>FlatFileSeq::Open (26 samples, 0.04%)</title><rect x="45.9610%" y="1141" width="0.0375%" height="15" fill="rgb(237,222,12)" fg:x="31839" fg:w="26"/><text x="46.2110%" y="1151.50"></text></g><g><title>fseek (8 samples, 0.01%)</title><rect x="45.9870%" y="1125" width="0.0115%" height="15" fill="rgb(248,132,6)" fg:x="31857" fg:w="8"/><text x="46.2370%" y="1135.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (8 samples, 0.01%)</title><rect x="45.9870%" y="1109" width="0.0115%" height="15" fill="rgb(227,167,50)" fg:x="31857" fg:w="8"/><text x="46.2370%" y="1119.50"></text></g><g><title>CompressAmount (22 samples, 0.03%)</title><rect x="45.9985%" y="981" width="0.0318%" height="15" fill="rgb(242,84,37)" fg:x="31865" fg:w="22"/><text x="46.2485%" y="991.50"></text></g><g><title>CompressScript (8 samples, 0.01%)</title><rect x="46.0303%" y="981" width="0.0115%" height="15" fill="rgb(212,4,50)" fg:x="31887" fg:w="8"/><text x="46.2803%" y="991.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (16 samples, 0.02%)</title><rect x="46.0562%" y="693" width="0.0231%" height="15" fill="rgb(230,228,32)" fg:x="31905" fg:w="16"/><text x="46.3062%" y="703.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (16 samples, 0.02%)</title><rect x="46.0562%" y="677" width="0.0231%" height="15" fill="rgb(248,217,23)" fg:x="31905" fg:w="16"/><text x="46.3062%" y="687.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (16 samples, 0.02%)</title><rect x="46.0562%" y="661" width="0.0231%" height="15" fill="rgb(238,197,32)" fg:x="31905" fg:w="16"/><text x="46.3062%" y="671.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="645" width="0.0101%" height="15" fill="rgb(236,106,1)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="655.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="629" width="0.0101%" height="15" fill="rgb(219,228,13)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="639.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="613" width="0.0101%" height="15" fill="rgb(238,30,35)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="623.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="597" width="0.0101%" height="15" fill="rgb(236,70,23)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="607.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="581" width="0.0101%" height="15" fill="rgb(249,104,48)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="591.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="565" width="0.0101%" height="15" fill="rgb(254,117,50)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="575.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="549" width="0.0101%" height="15" fill="rgb(223,152,4)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="559.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="533" width="0.0101%" height="15" fill="rgb(245,6,2)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="543.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="517" width="0.0101%" height="15" fill="rgb(249,150,24)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="501" width="0.0101%" height="15" fill="rgb(228,185,42)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="511.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="485" width="0.0101%" height="15" fill="rgb(226,39,33)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="495.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="46.0692%" y="469" width="0.0101%" height="15" fill="rgb(221,166,19)" fg:x="31914" fg:w="7"/><text x="46.3192%" y="479.50"></text></g><g><title>CompressAmount (12 samples, 0.02%)</title><rect x="46.0938%" y="629" width="0.0173%" height="15" fill="rgb(209,109,2)" fg:x="31931" fg:w="12"/><text x="46.3438%" y="639.50"></text></g><g><title>CompressScript (12 samples, 0.02%)</title><rect x="46.1111%" y="629" width="0.0173%" height="15" fill="rgb(252,216,26)" fg:x="31943" fg:w="12"/><text x="46.3611%" y="639.50"></text></g><g><title>CompressScript (42 samples, 0.06%)</title><rect x="46.0923%" y="645" width="0.0606%" height="15" fill="rgb(227,173,36)" fg:x="31930" fg:w="42"/><text x="46.3423%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="46.1371%" y="629" width="0.0159%" height="15" fill="rgb(209,90,7)" fg:x="31961" fg:w="11"/><text x="46.3871%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="613" width="0.0144%" height="15" fill="rgb(250,194,11)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="623.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="597" width="0.0144%" height="15" fill="rgb(220,72,50)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="607.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="581" width="0.0144%" height="15" fill="rgb(222,106,48)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="591.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="565" width="0.0144%" height="15" fill="rgb(216,220,45)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="575.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="549" width="0.0144%" height="15" fill="rgb(234,112,18)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="559.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="533" width="0.0144%" height="15" fill="rgb(206,179,9)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="543.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="517" width="0.0144%" height="15" fill="rgb(215,115,40)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="527.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="501" width="0.0144%" height="15" fill="rgb(222,69,34)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="485" width="0.0144%" height="15" fill="rgb(209,161,10)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="495.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="46.1385%" y="469" width="0.0144%" height="15" fill="rgb(217,6,38)" fg:x="31962" fg:w="10"/><text x="46.3885%" y="479.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="46.1400%" y="453" width="0.0130%" height="15" fill="rgb(229,229,48)" fg:x="31963" fg:w="9"/><text x="46.3900%" y="463.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (80 samples, 0.12%)</title><rect x="46.0562%" y="789" width="0.1155%" height="15" fill="rgb(225,21,28)" fg:x="31905" fg:w="80"/><text x="46.3062%" y="799.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (80 samples, 0.12%)</title><rect x="46.0562%" y="773" width="0.1155%" height="15" fill="rgb(206,33,13)" fg:x="31905" fg:w="80"/><text x="46.3062%" y="783.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (80 samples, 0.12%)</title><rect x="46.0562%" y="757" width="0.1155%" height="15" fill="rgb(242,178,17)" fg:x="31905" fg:w="80"/><text x="46.3062%" y="767.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (80 samples, 0.12%)</title><rect x="46.0562%" y="741" width="0.1155%" height="15" fill="rgb(220,162,5)" fg:x="31905" fg:w="80"/><text x="46.3062%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (80 samples, 0.12%)</title><rect x="46.0562%" y="725" width="0.1155%" height="15" fill="rgb(210,33,43)" fg:x="31905" fg:w="80"/><text x="46.3062%" y="735.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (80 samples, 0.12%)</title><rect x="46.0562%" y="709" width="0.1155%" height="15" fill="rgb(216,116,54)" fg:x="31905" fg:w="80"/><text x="46.3062%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (64 samples, 0.09%)</title><rect x="46.0793%" y="693" width="0.0924%" height="15" fill="rgb(249,92,24)" fg:x="31921" fg:w="64"/><text x="46.3293%" y="703.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (64 samples, 0.09%)</title><rect x="46.0793%" y="677" width="0.0924%" height="15" fill="rgb(231,189,14)" fg:x="31921" fg:w="64"/><text x="46.3293%" y="687.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (64 samples, 0.09%)</title><rect x="46.0793%" y="661" width="0.0924%" height="15" fill="rgb(230,8,41)" fg:x="31921" fg:w="64"/><text x="46.3293%" y="671.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="645" width="0.0130%" height="15" fill="rgb(249,7,27)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="655.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="629" width="0.0130%" height="15" fill="rgb(232,86,5)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="639.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="613" width="0.0130%" height="15" fill="rgb(224,175,18)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="623.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="597" width="0.0130%" height="15" fill="rgb(220,129,12)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="607.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="581" width="0.0130%" height="15" fill="rgb(210,19,36)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="591.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="565" width="0.0130%" height="15" fill="rgb(219,96,14)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="575.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="549" width="0.0130%" height="15" fill="rgb(249,106,1)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="559.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="533" width="0.0130%" height="15" fill="rgb(249,155,20)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="543.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="517" width="0.0130%" height="15" fill="rgb(244,168,9)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="501" width="0.0130%" height="15" fill="rgb(216,23,50)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="511.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.1587%" y="485" width="0.0130%" height="15" fill="rgb(224,219,20)" fg:x="31976" fg:w="9"/><text x="46.4087%" y="495.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="46.1602%" y="469" width="0.0115%" height="15" fill="rgb(222,156,15)" fg:x="31977" fg:w="8"/><text x="46.4102%" y="479.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (795 samples, 1.15%)</title><rect x="45.0371%" y="1173" width="1.1476%" height="15" fill="rgb(231,97,17)" fg:x="31199" fg:w="795"/><text x="45.2871%" y="1183.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="1157" width="0.1862%" height="15" fill="rgb(218,70,48)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1167.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (129 samples, 0.19%)</title><rect x="45.9985%" y="1141" width="0.1862%" height="15" fill="rgb(212,196,52)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1151.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="1125" width="0.1862%" height="15" fill="rgb(243,203,18)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1135.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="1109" width="0.1862%" height="15" fill="rgb(252,125,41)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1119.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="1093" width="0.1862%" height="15" fill="rgb(223,180,33)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1103.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="1077" width="0.1862%" height="15" fill="rgb(254,159,46)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="1061" width="0.1862%" height="15" fill="rgb(254,38,10)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1071.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="1045" width="0.1862%" height="15" fill="rgb(208,217,32)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1055.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="1029" width="0.1862%" height="15" fill="rgb(221,120,13)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="1013" width="0.1862%" height="15" fill="rgb(246,54,52)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1023.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (129 samples, 0.19%)</title><rect x="45.9985%" y="997" width="0.1862%" height="15" fill="rgb(242,34,25)" fg:x="31865" fg:w="129"/><text x="46.2485%" y="1007.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (99 samples, 0.14%)</title><rect x="46.0418%" y="981" width="0.1429%" height="15" fill="rgb(247,209,9)" fg:x="31895" fg:w="99"/><text x="46.2918%" y="991.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="965" width="0.1415%" height="15" fill="rgb(228,71,26)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="975.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="949" width="0.1415%" height="15" fill="rgb(222,145,49)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="959.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="933" width="0.1415%" height="15" fill="rgb(218,121,17)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="943.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="917" width="0.1415%" height="15" fill="rgb(244,50,7)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="927.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="901" width="0.1415%" height="15" fill="rgb(246,229,37)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="911.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="885" width="0.1415%" height="15" fill="rgb(225,18,5)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="895.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="869" width="0.1415%" height="15" fill="rgb(213,204,8)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="879.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="853" width="0.1415%" height="15" fill="rgb(238,103,6)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="837" width="0.1415%" height="15" fill="rgb(222,25,35)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="847.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (98 samples, 0.14%)</title><rect x="46.0432%" y="821" width="0.1415%" height="15" fill="rgb(213,203,35)" fg:x="31896" fg:w="98"/><text x="46.2932%" y="831.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (91 samples, 0.13%)</title><rect x="46.0534%" y="805" width="0.1314%" height="15" fill="rgb(221,79,53)" fg:x="31903" fg:w="91"/><text x="46.3034%" y="815.50"></text></g><g><title>QuadRound (7 samples, 0.01%)</title><rect x="46.1919%" y="1157" width="0.0101%" height="15" fill="rgb(243,200,35)" fg:x="31999" fg:w="7"/><text x="46.4419%" y="1167.50"></text></g><g><title>ShiftMessageA (10 samples, 0.01%)</title><rect x="46.2020%" y="1141" width="0.0144%" height="15" fill="rgb(248,60,25)" fg:x="32006" fg:w="10"/><text x="46.4520%" y="1151.50"></text></g><g><title>_mm_sha256msg1_epu32 (10 samples, 0.01%)</title><rect x="46.2020%" y="1125" width="0.0144%" height="15" fill="rgb(227,53,46)" fg:x="32006" fg:w="10"/><text x="46.4520%" y="1135.50"></text></g><g><title>ShiftMessageB (18 samples, 0.03%)</title><rect x="46.2020%" y="1157" width="0.0260%" height="15" fill="rgb(216,120,32)" fg:x="32006" fg:w="18"/><text x="46.4520%" y="1167.50"></text></g><g><title>ShiftMessageC (8 samples, 0.01%)</title><rect x="46.2165%" y="1141" width="0.0115%" height="15" fill="rgb(220,134,1)" fg:x="32016" fg:w="8"/><text x="46.4665%" y="1151.50"></text></g><g><title>sha256_x86_shani::Transform (32 samples, 0.05%)</title><rect x="46.1862%" y="1173" width="0.0462%" height="15" fill="rgb(237,168,5)" fg:x="31995" fg:w="32"/><text x="46.4362%" y="1183.50"></text></g><g><title>CompressAmount (22 samples, 0.03%)</title><rect x="46.2324%" y="997" width="0.0318%" height="15" fill="rgb(231,100,33)" fg:x="32027" fg:w="22"/><text x="46.4824%" y="1007.50"></text></g><g><title>CompressScript (13 samples, 0.02%)</title><rect x="46.2641%" y="997" width="0.0188%" height="15" fill="rgb(236,177,47)" fg:x="32049" fg:w="13"/><text x="46.5141%" y="1007.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (11 samples, 0.02%)</title><rect x="46.3146%" y="661" width="0.0159%" height="15" fill="rgb(235,7,49)" fg:x="32084" fg:w="11"/><text x="46.5646%" y="671.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="46.3146%" y="645" width="0.0159%" height="15" fill="rgb(232,119,22)" fg:x="32084" fg:w="11"/><text x="46.5646%" y="655.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (11 samples, 0.02%)</title><rect x="46.3146%" y="629" width="0.0159%" height="15" fill="rgb(254,73,53)" fg:x="32084" fg:w="11"/><text x="46.5646%" y="639.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (11 samples, 0.02%)</title><rect x="46.3146%" y="613" width="0.0159%" height="15" fill="rgb(251,35,20)" fg:x="32084" fg:w="11"/><text x="46.5646%" y="623.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (11 samples, 0.02%)</title><rect x="46.3146%" y="597" width="0.0159%" height="15" fill="rgb(241,119,20)" fg:x="32084" fg:w="11"/><text x="46.5646%" y="607.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (23 samples, 0.03%)</title><rect x="46.3103%" y="709" width="0.0332%" height="15" fill="rgb(207,102,14)" fg:x="32081" fg:w="23"/><text x="46.5603%" y="719.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (23 samples, 0.03%)</title><rect x="46.3103%" y="693" width="0.0332%" height="15" fill="rgb(248,201,50)" fg:x="32081" fg:w="23"/><text x="46.5603%" y="703.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (23 samples, 0.03%)</title><rect x="46.3103%" y="677" width="0.0332%" height="15" fill="rgb(222,185,44)" fg:x="32081" fg:w="23"/><text x="46.5603%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.3305%" y="661" width="0.0130%" height="15" fill="rgb(218,107,18)" fg:x="32095" fg:w="9"/><text x="46.5805%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="645" width="0.0115%" height="15" fill="rgb(237,177,39)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="655.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="629" width="0.0115%" height="15" fill="rgb(246,69,6)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="639.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="613" width="0.0115%" height="15" fill="rgb(234,208,37)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="623.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="597" width="0.0115%" height="15" fill="rgb(225,4,6)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="607.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="581" width="0.0115%" height="15" fill="rgb(233,45,0)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="565" width="0.0115%" height="15" fill="rgb(226,136,5)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="575.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="549" width="0.0115%" height="15" fill="rgb(211,91,47)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="559.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="533" width="0.0115%" height="15" fill="rgb(242,88,51)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="517" width="0.0115%" height="15" fill="rgb(230,91,28)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="527.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="46.3320%" y="501" width="0.0115%" height="15" fill="rgb(254,186,29)" fg:x="32096" fg:w="8"/><text x="46.5820%" y="511.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="46.3334%" y="485" width="0.0101%" height="15" fill="rgb(238,6,4)" fg:x="32097" fg:w="7"/><text x="46.5834%" y="495.50"></text></g><g><title>CompressAmount (8 samples, 0.01%)</title><rect x="46.3652%" y="645" width="0.0115%" height="15" fill="rgb(221,151,16)" fg:x="32119" fg:w="8"/><text x="46.6152%" y="655.50"></text></g><g><title>CompressScript (32 samples, 0.05%)</title><rect x="46.3637%" y="661" width="0.0462%" height="15" fill="rgb(251,143,52)" fg:x="32118" fg:w="32"/><text x="46.6137%" y="671.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="645" width="0.0159%" height="15" fill="rgb(206,90,15)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="655.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="629" width="0.0159%" height="15" fill="rgb(218,35,8)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="639.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="613" width="0.0159%" height="15" fill="rgb(239,215,6)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="623.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="597" width="0.0159%" height="15" fill="rgb(245,116,39)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="607.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="581" width="0.0159%" height="15" fill="rgb(242,65,28)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="591.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="565" width="0.0159%" height="15" fill="rgb(252,132,53)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="575.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="549" width="0.0159%" height="15" fill="rgb(224,159,50)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="559.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="533" width="0.0159%" height="15" fill="rgb(224,93,4)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="543.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="517" width="0.0159%" height="15" fill="rgb(208,81,34)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="501" width="0.0159%" height="15" fill="rgb(233,92,54)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="511.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="46.3940%" y="485" width="0.0159%" height="15" fill="rgb(237,21,14)" fg:x="32139" fg:w="11"/><text x="46.6440%" y="495.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (10 samples, 0.01%)</title><rect x="46.3955%" y="469" width="0.0144%" height="15" fill="rgb(249,128,51)" fg:x="32140" fg:w="10"/><text x="46.6455%" y="479.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.4200%" y="469" width="0.0115%" height="15" fill="rgb(223,129,24)" fg:x="32157" fg:w="8"/><text x="46.6700%" y="479.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="46.4200%" y="453" width="0.0115%" height="15" fill="rgb(231,168,25)" fg:x="32157" fg:w="8"/><text x="46.6700%" y="463.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="46.4200%" y="437" width="0.0115%" height="15" fill="rgb(224,39,20)" fg:x="32157" fg:w="8"/><text x="46.6700%" y="447.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="46.4200%" y="421" width="0.0115%" height="15" fill="rgb(225,152,53)" fg:x="32157" fg:w="8"/><text x="46.6700%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.4200%" y="405" width="0.0115%" height="15" fill="rgb(252,17,24)" fg:x="32157" fg:w="8"/><text x="46.6700%" y="415.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.4200%" y="389" width="0.0115%" height="15" fill="rgb(250,114,30)" fg:x="32157" fg:w="8"/><text x="46.6700%" y="399.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (92 samples, 0.13%)</title><rect x="46.3074%" y="805" width="0.1328%" height="15" fill="rgb(229,5,4)" fg:x="32079" fg:w="92"/><text x="46.5574%" y="815.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (92 samples, 0.13%)</title><rect x="46.3074%" y="789" width="0.1328%" height="15" fill="rgb(225,176,49)" fg:x="32079" fg:w="92"/><text x="46.5574%" y="799.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (92 samples, 0.13%)</title><rect x="46.3074%" y="773" width="0.1328%" height="15" fill="rgb(224,221,49)" fg:x="32079" fg:w="92"/><text x="46.5574%" y="783.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (92 samples, 0.13%)</title><rect x="46.3074%" y="757" width="0.1328%" height="15" fill="rgb(253,169,27)" fg:x="32079" fg:w="92"/><text x="46.5574%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (90 samples, 0.13%)</title><rect x="46.3103%" y="741" width="0.1299%" height="15" fill="rgb(211,206,16)" fg:x="32081" fg:w="90"/><text x="46.5603%" y="751.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (90 samples, 0.13%)</title><rect x="46.3103%" y="725" width="0.1299%" height="15" fill="rgb(244,87,35)" fg:x="32081" fg:w="90"/><text x="46.5603%" y="735.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (67 samples, 0.10%)</title><rect x="46.3435%" y="709" width="0.0967%" height="15" fill="rgb(246,28,10)" fg:x="32104" fg:w="67"/><text x="46.5935%" y="719.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (67 samples, 0.10%)</title><rect x="46.3435%" y="693" width="0.0967%" height="15" fill="rgb(229,12,44)" fg:x="32104" fg:w="67"/><text x="46.5935%" y="703.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (67 samples, 0.10%)</title><rect x="46.3435%" y="677" width="0.0967%" height="15" fill="rgb(210,145,37)" fg:x="32104" fg:w="67"/><text x="46.5935%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="661" width="0.0231%" height="15" fill="rgb(227,112,52)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="645" width="0.0231%" height="15" fill="rgb(238,155,34)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="655.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="629" width="0.0231%" height="15" fill="rgb(239,226,36)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="639.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="613" width="0.0231%" height="15" fill="rgb(230,16,23)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="623.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="597" width="0.0231%" height="15" fill="rgb(236,171,36)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="607.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="581" width="0.0231%" height="15" fill="rgb(221,22,14)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="565" width="0.0231%" height="15" fill="rgb(242,43,11)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="575.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="549" width="0.0231%" height="15" fill="rgb(232,69,23)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="559.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="533" width="0.0231%" height="15" fill="rgb(216,180,54)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="517" width="0.0231%" height="15" fill="rgb(216,5,24)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="527.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="501" width="0.0231%" height="15" fill="rgb(225,89,9)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="511.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (16 samples, 0.02%)</title><rect x="46.4171%" y="485" width="0.0231%" height="15" fill="rgb(243,75,33)" fg:x="32155" fg:w="16"/><text x="46.6671%" y="495.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="46.4402%" y="805" width="0.0144%" height="15" fill="rgb(247,141,45)" fg:x="32171" fg:w="10"/><text x="46.6902%" y="815.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (10 samples, 0.01%)</title><rect x="46.4402%" y="789" width="0.0144%" height="15" fill="rgb(232,177,36)" fg:x="32171" fg:w="10"/><text x="46.6902%" y="799.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (10 samples, 0.01%)</title><rect x="46.4402%" y="773" width="0.0144%" height="15" fill="rgb(219,125,36)" fg:x="32171" fg:w="10"/><text x="46.6902%" y="783.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (10 samples, 0.01%)</title><rect x="46.4402%" y="757" width="0.0144%" height="15" fill="rgb(227,94,9)" fg:x="32171" fg:w="10"/><text x="46.6902%" y="767.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1173" width="0.2266%" height="15" fill="rgb(240,34,52)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1183.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (157 samples, 0.23%)</title><rect x="46.2324%" y="1157" width="0.2266%" height="15" fill="rgb(216,45,12)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1167.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1141" width="0.2266%" height="15" fill="rgb(246,21,19)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1151.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1125" width="0.2266%" height="15" fill="rgb(213,98,42)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1135.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1109" width="0.2266%" height="15" fill="rgb(250,136,47)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1119.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1093" width="0.2266%" height="15" fill="rgb(251,124,27)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1077" width="0.2266%" height="15" fill="rgb(229,180,14)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1087.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1061" width="0.2266%" height="15" fill="rgb(245,216,25)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1071.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1045" width="0.2266%" height="15" fill="rgb(251,43,5)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1055.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1029" width="0.2266%" height="15" fill="rgb(250,128,24)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1039.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (157 samples, 0.23%)</title><rect x="46.2324%" y="1013" width="0.2266%" height="15" fill="rgb(217,117,27)" fg:x="32027" fg:w="157"/><text x="46.4824%" y="1023.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="997" width="0.1732%" height="15" fill="rgb(245,147,4)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="1007.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="981" width="0.1732%" height="15" fill="rgb(242,201,35)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="991.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="965" width="0.1732%" height="15" fill="rgb(218,181,1)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="975.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="949" width="0.1732%" height="15" fill="rgb(222,6,29)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="959.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="933" width="0.1732%" height="15" fill="rgb(208,186,3)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="943.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="917" width="0.1732%" height="15" fill="rgb(216,36,26)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="901" width="0.1732%" height="15" fill="rgb(248,201,23)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="911.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="885" width="0.1732%" height="15" fill="rgb(251,170,31)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="895.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="869" width="0.1732%" height="15" fill="rgb(207,110,25)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (120 samples, 0.17%)</title><rect x="46.2858%" y="853" width="0.1732%" height="15" fill="rgb(250,54,15)" fg:x="32064" fg:w="120"/><text x="46.5358%" y="863.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (119 samples, 0.17%)</title><rect x="46.2872%" y="837" width="0.1718%" height="15" fill="rgb(227,68,33)" fg:x="32065" fg:w="119"/><text x="46.5372%" y="847.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (114 samples, 0.16%)</title><rect x="46.2944%" y="821" width="0.1646%" height="15" fill="rgb(238,34,41)" fg:x="32070" fg:w="114"/><text x="46.5444%" y="831.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (1,121 samples, 1.62%)</title><rect x="44.8567%" y="1189" width="1.6182%" height="15" fill="rgb(220,11,15)" fg:x="31074" fg:w="1121"/><text x="45.1067%" y="1199.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (10 samples, 0.01%)</title><rect x="46.4604%" y="1173" width="0.0144%" height="15" fill="rgb(246,111,35)" fg:x="32185" fg:w="10"/><text x="46.7104%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (10 samples, 0.01%)</title><rect x="46.4749%" y="1189" width="0.0144%" height="15" fill="rgb(209,88,53)" fg:x="32195" fg:w="10"/><text x="46.7249%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.02%)</title><rect x="46.4893%" y="1189" width="0.0202%" height="15" fill="rgb(231,185,47)" fg:x="32205" fg:w="14"/><text x="46.7393%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (16 samples, 0.02%)</title><rect x="46.5095%" y="1189" width="0.0231%" height="15" fill="rgb(233,154,1)" fg:x="32219" fg:w="16"/><text x="46.7595%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_Vector_base (11 samples, 0.02%)</title><rect x="46.5442%" y="1173" width="0.0159%" height="15" fill="rgb(225,15,46)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1183.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_create_storage (11 samples, 0.02%)</title><rect x="46.5442%" y="1157" width="0.0159%" height="15" fill="rgb(211,135,41)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1167.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_allocate (11 samples, 0.02%)</title><rect x="46.5442%" y="1141" width="0.0159%" height="15" fill="rgb(208,54,0)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_allocate (11 samples, 0.02%)</title><rect x="46.5442%" y="1125" width="0.0159%" height="15" fill="rgb(244,136,14)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1135.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;PrecomputedTransactionData&gt; &gt;::allocate (11 samples, 0.02%)</title><rect x="46.5442%" y="1109" width="0.0159%" height="15" fill="rgb(241,56,14)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1119.50"></text></g><g><title>std::allocator&lt;PrecomputedTransactionData&gt;::allocate (11 samples, 0.02%)</title><rect x="46.5442%" y="1093" width="0.0159%" height="15" fill="rgb(205,80,24)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1103.50"></text></g><g><title>std::__new_allocator&lt;PrecomputedTransactionData&gt;::allocate (11 samples, 0.02%)</title><rect x="46.5442%" y="1077" width="0.0159%" height="15" fill="rgb(220,57,4)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1087.50"></text></g><g><title>operator new (11 samples, 0.02%)</title><rect x="46.5442%" y="1061" width="0.0159%" height="15" fill="rgb(226,193,50)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1071.50"></text></g><g><title>malloc (11 samples, 0.02%)</title><rect x="46.5442%" y="1045" width="0.0159%" height="15" fill="rgb(231,168,22)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1055.50"></text></g><g><title>_int_malloc (11 samples, 0.02%)</title><rect x="46.5442%" y="1029" width="0.0159%" height="15" fill="rgb(254,215,14)" fg:x="32243" fg:w="11"/><text x="46.7942%" y="1039.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::vector (119 samples, 0.17%)</title><rect x="46.5442%" y="1189" width="0.1718%" height="15" fill="rgb(211,115,16)" fg:x="32243" fg:w="119"/><text x="46.7942%" y="1199.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_default_initialize (108 samples, 0.16%)</title><rect x="46.5600%" y="1173" width="0.1559%" height="15" fill="rgb(236,210,16)" fg:x="32254" fg:w="108"/><text x="46.8100%" y="1183.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_a&lt;PrecomputedTransactionData*, unsigned long, PrecomputedTransactionData&gt; (108 samples, 0.16%)</title><rect x="46.5600%" y="1157" width="0.1559%" height="15" fill="rgb(221,94,12)" fg:x="32254" fg:w="108"/><text x="46.8100%" y="1167.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (108 samples, 0.16%)</title><rect x="46.5600%" y="1141" width="0.1559%" height="15" fill="rgb(235,218,49)" fg:x="32254" fg:w="108"/><text x="46.8100%" y="1151.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (108 samples, 0.16%)</title><rect x="46.5600%" y="1125" width="0.1559%" height="15" fill="rgb(217,114,14)" fg:x="32254" fg:w="108"/><text x="46.8100%" y="1135.50"></text></g><g><title>void std::_Construct&lt;PrecomputedTransactionData&gt; (106 samples, 0.15%)</title><rect x="46.5629%" y="1109" width="0.1530%" height="15" fill="rgb(216,145,22)" fg:x="32256" fg:w="106"/><text x="46.8129%" y="1119.50"></text></g><g><title>[unknown] (52 samples, 0.08%)</title><rect x="46.6409%" y="1093" width="0.0751%" height="15" fill="rgb(217,112,39)" fg:x="32310" fg:w="52"/><text x="46.8909%" y="1103.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="46.6438%" y="1077" width="0.0722%" height="15" fill="rgb(225,85,32)" fg:x="32312" fg:w="50"/><text x="46.8938%" y="1087.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="46.6452%" y="1061" width="0.0707%" height="15" fill="rgb(245,209,47)" fg:x="32313" fg:w="49"/><text x="46.8952%" y="1071.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="46.6495%" y="1045" width="0.0664%" height="15" fill="rgb(218,220,15)" fg:x="32316" fg:w="46"/><text x="46.8995%" y="1055.50"></text></g><g><title>[unknown] (45 samples, 0.06%)</title><rect x="46.6510%" y="1029" width="0.0650%" height="15" fill="rgb(222,202,31)" fg:x="32317" fg:w="45"/><text x="46.9010%" y="1039.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="46.6640%" y="1013" width="0.0520%" height="15" fill="rgb(243,203,4)" fg:x="32326" fg:w="36"/><text x="46.9140%" y="1023.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="46.6697%" y="997" width="0.0462%" height="15" fill="rgb(237,92,17)" fg:x="32330" fg:w="32"/><text x="46.9197%" y="1007.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="46.6799%" y="981" width="0.0361%" height="15" fill="rgb(231,119,7)" fg:x="32337" fg:w="25"/><text x="46.9299%" y="991.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="46.6914%" y="965" width="0.0245%" height="15" fill="rgb(237,82,41)" fg:x="32345" fg:w="17"/><text x="46.9414%" y="975.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.7015%" y="949" width="0.0144%" height="15" fill="rgb(226,81,48)" fg:x="32352" fg:w="10"/><text x="46.9515%" y="959.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (7 samples, 0.01%)</title><rect x="46.7260%" y="1061" width="0.0101%" height="15" fill="rgb(234,70,51)" fg:x="32369" fg:w="7"/><text x="46.9760%" y="1071.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (7 samples, 0.01%)</title><rect x="46.7260%" y="1045" width="0.0101%" height="15" fill="rgb(251,86,4)" fg:x="32369" fg:w="7"/><text x="46.9760%" y="1055.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::~vector (17 samples, 0.02%)</title><rect x="46.7159%" y="1189" width="0.0245%" height="15" fill="rgb(244,144,28)" fg:x="32362" fg:w="17"/><text x="46.9659%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*, PrecomputedTransactionData&gt; (17 samples, 0.02%)</title><rect x="46.7159%" y="1173" width="0.0245%" height="15" fill="rgb(232,161,39)" fg:x="32362" fg:w="17"/><text x="46.9659%" y="1183.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*&gt; (17 samples, 0.02%)</title><rect x="46.7159%" y="1157" width="0.0245%" height="15" fill="rgb(247,34,51)" fg:x="32362" fg:w="17"/><text x="46.9659%" y="1167.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;PrecomputedTransactionData*&gt; (17 samples, 0.02%)</title><rect x="46.7159%" y="1141" width="0.0245%" height="15" fill="rgb(225,132,2)" fg:x="32362" fg:w="17"/><text x="46.9659%" y="1151.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData&gt; (11 samples, 0.02%)</title><rect x="46.7246%" y="1125" width="0.0159%" height="15" fill="rgb(209,159,44)" fg:x="32368" fg:w="11"/><text x="46.9746%" y="1135.50"></text></g><g><title>void std::destroy_at&lt;PrecomputedTransactionData&gt; (11 samples, 0.02%)</title><rect x="46.7246%" y="1109" width="0.0159%" height="15" fill="rgb(251,214,1)" fg:x="32368" fg:w="11"/><text x="46.9746%" y="1119.50"></text></g><g><title>PrecomputedTransactionData::~PrecomputedTransactionData (11 samples, 0.02%)</title><rect x="46.7246%" y="1093" width="0.0159%" height="15" fill="rgb(247,84,47)" fg:x="32368" fg:w="11"/><text x="46.9746%" y="1103.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (11 samples, 0.02%)</title><rect x="46.7246%" y="1077" width="0.0159%" height="15" fill="rgb(240,111,43)" fg:x="32368" fg:w="11"/><text x="46.9746%" y="1087.50"></text></g><g><title>BCLog::Logger::LogPrintStr (11 samples, 0.02%)</title><rect x="46.7419%" y="1173" width="0.0159%" height="15" fill="rgb(215,214,35)" fg:x="32380" fg:w="11"/><text x="46.9919%" y="1183.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (11 samples, 0.02%)</title><rect x="46.7419%" y="1157" width="0.0159%" height="15" fill="rgb(248,207,23)" fg:x="32380" fg:w="11"/><text x="46.9919%" y="1167.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (10 samples, 0.01%)</title><rect x="46.7434%" y="1141" width="0.0144%" height="15" fill="rgb(214,186,4)" fg:x="32381" fg:w="10"/><text x="46.9934%" y="1151.50"></text></g><g><title>_IO_fwrite (10 samples, 0.01%)</title><rect x="46.7434%" y="1125" width="0.0144%" height="15" fill="rgb(220,133,22)" fg:x="32381" fg:w="10"/><text x="46.9934%" y="1135.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (10 samples, 0.01%)</title><rect x="46.7434%" y="1109" width="0.0144%" height="15" fill="rgb(239,134,19)" fg:x="32381" fg:w="10"/><text x="46.9934%" y="1119.50"></text></g><g><title>new_do_write (10 samples, 0.01%)</title><rect x="46.7434%" y="1093" width="0.0144%" height="15" fill="rgb(250,140,9)" fg:x="32381" fg:w="10"/><text x="46.9934%" y="1103.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (9 samples, 0.01%)</title><rect x="46.7448%" y="1077" width="0.0130%" height="15" fill="rgb(225,59,14)" fg:x="32382" fg:w="9"/><text x="46.9948%" y="1087.50"></text></g><g><title>__GI___libc_write (9 samples, 0.01%)</title><rect x="46.7448%" y="1061" width="0.0130%" height="15" fill="rgb(214,152,51)" fg:x="32382" fg:w="9"/><text x="46.9948%" y="1071.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="46.7448%" y="1045" width="0.0130%" height="15" fill="rgb(251,227,43)" fg:x="32382" fg:w="9"/><text x="46.9948%" y="1055.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="46.7448%" y="1029" width="0.0130%" height="15" fill="rgb(241,96,17)" fg:x="32382" fg:w="9"/><text x="46.9948%" y="1039.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="46.7448%" y="1013" width="0.0130%" height="15" fill="rgb(234,198,43)" fg:x="32382" fg:w="9"/><text x="46.9948%" y="1023.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="46.7448%" y="997" width="0.0130%" height="15" fill="rgb(220,108,29)" fg:x="32382" fg:w="9"/><text x="46.9948%" y="1007.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (12 samples, 0.02%)</title><rect x="46.7419%" y="1189" width="0.0173%" height="15" fill="rgb(226,163,33)" fg:x="32380" fg:w="12"/><text x="46.9919%" y="1199.50"></text></g><g><title>Chainstate::ConnectBlock (14,282 samples, 20.62%)</title><rect x="26.1541%" y="1205" width="20.6167%" height="15" fill="rgb(205,194,45)" fg:x="18118" fg:w="14282"/><text x="26.4041%" y="1215.50">Chainstate::ConnectBlock</text></g><g><title>void LogPrintFormatInternal&lt;unsigned int, double, double, double, double, double&gt; (7 samples, 0.01%)</title><rect x="46.7607%" y="1189" width="0.0101%" height="15" fill="rgb(206,143,44)" fg:x="32393" fg:w="7"/><text x="47.0107%" y="1199.50"></text></g><g><title>SipHashUint256Extra (23 samples, 0.03%)</title><rect x="46.7867%" y="1205" width="0.0332%" height="15" fill="rgb(236,136,36)" fg:x="32411" fg:w="23"/><text x="47.0367%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (11 samples, 0.02%)</title><rect x="46.8040%" y="1189" width="0.0159%" height="15" fill="rgb(249,172,42)" fg:x="32423" fg:w="11"/><text x="47.0540%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (11 samples, 0.02%)</title><rect x="46.8040%" y="1173" width="0.0159%" height="15" fill="rgb(216,139,23)" fg:x="32423" fg:w="11"/><text x="47.0540%" y="1183.50"></text></g><g><title>ValidationSignals::BlockChecked (11 samples, 0.02%)</title><rect x="46.8199%" y="1205" width="0.0159%" height="15" fill="rgb(207,166,20)" fg:x="32434" fg:w="11"/><text x="47.0699%" y="1215.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [13], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="46.8256%" y="1189" width="0.0101%" height="15" fill="rgb(210,209,22)" fg:x="32438" fg:w="7"/><text x="47.0756%" y="1199.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint const*, std::pair&lt;COutPoint const* const, CTransaction const*&gt;, std::_Select1st&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt;, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (8 samples, 0.01%)</title><rect x="46.8401%" y="1205" width="0.0115%" height="15" fill="rgb(232,118,20)" fg:x="32448" fg:w="8"/><text x="47.0901%" y="1215.50"></text></g><g><title>BCLog::Logger::LogPrintStr (14 samples, 0.02%)</title><rect x="46.8690%" y="1189" width="0.0202%" height="15" fill="rgb(238,113,42)" fg:x="32468" fg:w="14"/><text x="47.1190%" y="1199.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (14 samples, 0.02%)</title><rect x="46.8690%" y="1173" width="0.0202%" height="15" fill="rgb(231,42,5)" fg:x="32468" fg:w="14"/><text x="47.1190%" y="1183.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (11 samples, 0.02%)</title><rect x="46.8733%" y="1157" width="0.0159%" height="15" fill="rgb(243,166,24)" fg:x="32471" fg:w="11"/><text x="47.1233%" y="1167.50"></text></g><g><title>_IO_fwrite (11 samples, 0.02%)</title><rect x="46.8733%" y="1141" width="0.0159%" height="15" fill="rgb(237,226,12)" fg:x="32471" fg:w="11"/><text x="47.1233%" y="1151.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (10 samples, 0.01%)</title><rect x="46.8747%" y="1125" width="0.0144%" height="15" fill="rgb(229,133,24)" fg:x="32472" fg:w="10"/><text x="47.1247%" y="1135.50"></text></g><g><title>new_do_write (10 samples, 0.01%)</title><rect x="46.8747%" y="1109" width="0.0144%" height="15" fill="rgb(238,33,43)" fg:x="32472" fg:w="10"/><text x="47.1247%" y="1119.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (10 samples, 0.01%)</title><rect x="46.8747%" y="1093" width="0.0144%" height="15" fill="rgb(227,59,38)" fg:x="32472" fg:w="10"/><text x="47.1247%" y="1103.50"></text></g><g><title>__GI___libc_write (10 samples, 0.01%)</title><rect x="46.8747%" y="1077" width="0.0144%" height="15" fill="rgb(230,97,0)" fg:x="32472" fg:w="10"/><text x="47.1247%" y="1087.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.8747%" y="1061" width="0.0144%" height="15" fill="rgb(250,173,50)" fg:x="32472" fg:w="10"/><text x="47.1247%" y="1071.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.8747%" y="1045" width="0.0144%" height="15" fill="rgb(240,15,50)" fg:x="32472" fg:w="10"/><text x="47.1247%" y="1055.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.8747%" y="1029" width="0.0144%" height="15" fill="rgb(221,93,22)" fg:x="32472" fg:w="10"/><text x="47.1247%" y="1039.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="46.8776%" y="1013" width="0.0115%" height="15" fill="rgb(245,180,53)" fg:x="32474" fg:w="8"/><text x="47.1276%" y="1023.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (17 samples, 0.02%)</title><rect x="46.8690%" y="1205" width="0.0245%" height="15" fill="rgb(231,88,51)" fg:x="32468" fg:w="17"/><text x="47.1190%" y="1215.50"></text></g><g><title>Chainstate::ConnectTip (22,645 samples, 32.69%)</title><rect x="14.2102%" y="1221" width="32.6890%" height="15" fill="rgb(240,58,21)" fg:x="9844" fg:w="22645"/><text x="14.4602%" y="1231.50">Chainstate::ConnectTip</text></g><g><title>Chainstate::ActivateBestChainStep (22,647 samples, 32.69%)</title><rect x="14.2102%" y="1237" width="32.6919%" height="15" fill="rgb(237,21,10)" fg:x="9844" fg:w="22647"/><text x="14.4602%" y="1247.50">Chainstate::ActivateBestChainStep</text></g><g><title>Chainstate::ActivateBestChain (22,663 samples, 32.72%)</title><rect x="14.2074%" y="1253" width="32.7150%" height="15" fill="rgb(218,43,11)" fg:x="9842" fg:w="22663"/><text x="14.4574%" y="1263.50">Chainstate::ActivateBestChain</text></g><g><title>ContextualCheckBlock (10 samples, 0.01%)</title><rect x="46.9310%" y="1221" width="0.0144%" height="15" fill="rgb(218,221,29)" fg:x="32511" fg:w="10"/><text x="47.1810%" y="1231.50"></text></g><g><title>ContextualCheckBlock (9 samples, 0.01%)</title><rect x="46.9469%" y="917" width="0.0130%" height="15" fill="rgb(214,118,42)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="927.50"></text></g><g><title>GetBlockWeight (9 samples, 0.01%)</title><rect x="46.9469%" y="901" width="0.0130%" height="15" fill="rgb(251,200,26)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="911.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="885" width="0.0130%" height="15" fill="rgb(237,101,39)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="895.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (9 samples, 0.01%)</title><rect x="46.9469%" y="869" width="0.0130%" height="15" fill="rgb(251,117,11)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="879.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="853" width="0.0130%" height="15" fill="rgb(216,223,23)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="863.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="837" width="0.0130%" height="15" fill="rgb(251,54,12)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="821" width="0.0130%" height="15" fill="rgb(254,176,54)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="831.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="805" width="0.0130%" height="15" fill="rgb(210,32,8)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="815.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="789" width="0.0130%" height="15" fill="rgb(235,52,38)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="799.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="773" width="0.0130%" height="15" fill="rgb(231,4,44)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="757" width="0.0130%" height="15" fill="rgb(249,2,32)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="741" width="0.0130%" height="15" fill="rgb(224,65,26)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="725" width="0.0130%" height="15" fill="rgb(250,73,40)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="709" width="0.0130%" height="15" fill="rgb(253,177,16)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="693" width="0.0130%" height="15" fill="rgb(217,32,34)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.9469%" y="677" width="0.0130%" height="15" fill="rgb(212,7,10)" fg:x="32522" fg:w="9"/><text x="47.1969%" y="687.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (7 samples, 0.01%)</title><rect x="46.9498%" y="661" width="0.0101%" height="15" fill="rgb(245,89,8)" fg:x="32524" fg:w="7"/><text x="47.1998%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="46.9498%" y="645" width="0.0101%" height="15" fill="rgb(237,16,53)" fg:x="32524" fg:w="7"/><text x="47.1998%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="46.9498%" y="629" width="0.0101%" height="15" fill="rgb(250,204,30)" fg:x="32524" fg:w="7"/><text x="47.1998%" y="639.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="46.9498%" y="613" width="0.0101%" height="15" fill="rgb(208,77,27)" fg:x="32524" fg:w="7"/><text x="47.1998%" y="623.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (7 samples, 0.01%)</title><rect x="47.0609%" y="821" width="0.0101%" height="15" fill="rgb(250,204,28)" fg:x="32601" fg:w="7"/><text x="47.3109%" y="831.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (7 samples, 0.01%)</title><rect x="47.0869%" y="597" width="0.0101%" height="15" fill="rgb(244,63,21)" fg:x="32619" fg:w="7"/><text x="47.3369%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (21 samples, 0.03%)</title><rect x="47.0711%" y="821" width="0.0303%" height="15" fill="rgb(236,85,44)" fg:x="32608" fg:w="21"/><text x="47.3211%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (21 samples, 0.03%)</title><rect x="47.0711%" y="805" width="0.0303%" height="15" fill="rgb(215,98,4)" fg:x="32608" fg:w="21"/><text x="47.3211%" y="815.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (21 samples, 0.03%)</title><rect x="47.0711%" y="789" width="0.0303%" height="15" fill="rgb(235,38,11)" fg:x="32608" fg:w="21"/><text x="47.3211%" y="799.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (21 samples, 0.03%)</title><rect x="47.0711%" y="773" width="0.0303%" height="15" fill="rgb(254,186,25)" fg:x="32608" fg:w="21"/><text x="47.3211%" y="783.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (21 samples, 0.03%)</title><rect x="47.0711%" y="757" width="0.0303%" height="15" fill="rgb(225,55,31)" fg:x="32608" fg:w="21"/><text x="47.3211%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (21 samples, 0.03%)</title><rect x="47.0711%" y="741" width="0.0303%" height="15" fill="rgb(211,15,21)" fg:x="32608" fg:w="21"/><text x="47.3211%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (21 samples, 0.03%)</title><rect x="47.0711%" y="725" width="0.0303%" height="15" fill="rgb(215,187,41)" fg:x="32608" fg:w="21"/><text x="47.3211%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (17 samples, 0.02%)</title><rect x="47.0768%" y="709" width="0.0245%" height="15" fill="rgb(248,69,32)" fg:x="32612" fg:w="17"/><text x="47.3268%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="47.0768%" y="693" width="0.0245%" height="15" fill="rgb(252,102,52)" fg:x="32612" fg:w="17"/><text x="47.3268%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="47.0768%" y="677" width="0.0245%" height="15" fill="rgb(253,140,32)" fg:x="32612" fg:w="17"/><text x="47.3268%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (17 samples, 0.02%)</title><rect x="47.0768%" y="661" width="0.0245%" height="15" fill="rgb(216,56,42)" fg:x="32612" fg:w="17"/><text x="47.3268%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.02%)</title><rect x="47.0768%" y="645" width="0.0245%" height="15" fill="rgb(216,184,14)" fg:x="32612" fg:w="17"/><text x="47.3268%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.02%)</title><rect x="47.0768%" y="629" width="0.0245%" height="15" fill="rgb(237,187,27)" fg:x="32612" fg:w="17"/><text x="47.3268%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (15 samples, 0.02%)</title><rect x="47.0797%" y="613" width="0.0217%" height="15" fill="rgb(219,65,3)" fg:x="32614" fg:w="15"/><text x="47.3297%" y="623.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.02%)</title><rect x="47.1014%" y="821" width="0.0217%" height="15" fill="rgb(245,83,25)" fg:x="32629" fg:w="15"/><text x="47.3514%" y="831.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (84 samples, 0.12%)</title><rect x="47.0407%" y="901" width="0.1213%" height="15" fill="rgb(214,205,45)" fg:x="32587" fg:w="84"/><text x="47.2907%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (84 samples, 0.12%)</title><rect x="47.0407%" y="885" width="0.1213%" height="15" fill="rgb(241,20,18)" fg:x="32587" fg:w="84"/><text x="47.2907%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (84 samples, 0.12%)</title><rect x="47.0407%" y="869" width="0.1213%" height="15" fill="rgb(232,163,23)" fg:x="32587" fg:w="84"/><text x="47.2907%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.12%)</title><rect x="47.0407%" y="853" width="0.1213%" height="15" fill="rgb(214,5,46)" fg:x="32587" fg:w="84"/><text x="47.2907%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (83 samples, 0.12%)</title><rect x="47.0422%" y="837" width="0.1198%" height="15" fill="rgb(229,78,17)" fg:x="32588" fg:w="83"/><text x="47.2922%" y="847.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.04%)</title><rect x="47.1230%" y="821" width="0.0390%" height="15" fill="rgb(248,89,10)" fg:x="32644" fg:w="27"/><text x="47.3730%" y="831.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="47.1447%" y="805" width="0.0173%" height="15" fill="rgb(248,54,15)" fg:x="32659" fg:w="12"/><text x="47.3947%" y="815.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (12 samples, 0.02%)</title><rect x="47.1447%" y="789" width="0.0173%" height="15" fill="rgb(223,116,6)" fg:x="32659" fg:w="12"/><text x="47.3947%" y="799.50"></text></g><g><title>SizeComputer::write (12 samples, 0.02%)</title><rect x="47.1447%" y="773" width="0.0173%" height="15" fill="rgb(205,125,38)" fg:x="32659" fg:w="12"/><text x="47.3947%" y="783.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (11 samples, 0.02%)</title><rect x="47.2039%" y="821" width="0.0159%" height="15" fill="rgb(251,78,38)" fg:x="32700" fg:w="11"/><text x="47.4539%" y="831.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (10 samples, 0.01%)</title><rect x="47.2342%" y="597" width="0.0144%" height="15" fill="rgb(253,78,28)" fg:x="32721" fg:w="10"/><text x="47.4842%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (28 samples, 0.04%)</title><rect x="47.2197%" y="821" width="0.0404%" height="15" fill="rgb(209,120,3)" fg:x="32711" fg:w="28"/><text x="47.4697%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (28 samples, 0.04%)</title><rect x="47.2197%" y="805" width="0.0404%" height="15" fill="rgb(238,229,9)" fg:x="32711" fg:w="28"/><text x="47.4697%" y="815.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.04%)</title><rect x="47.2197%" y="789" width="0.0404%" height="15" fill="rgb(253,159,18)" fg:x="32711" fg:w="28"/><text x="47.4697%" y="799.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.04%)</title><rect x="47.2197%" y="773" width="0.0404%" height="15" fill="rgb(244,42,34)" fg:x="32711" fg:w="28"/><text x="47.4697%" y="783.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (28 samples, 0.04%)</title><rect x="47.2197%" y="757" width="0.0404%" height="15" fill="rgb(224,8,7)" fg:x="32711" fg:w="28"/><text x="47.4697%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (28 samples, 0.04%)</title><rect x="47.2197%" y="741" width="0.0404%" height="15" fill="rgb(210,201,45)" fg:x="32711" fg:w="28"/><text x="47.4697%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (28 samples, 0.04%)</title><rect x="47.2197%" y="725" width="0.0404%" height="15" fill="rgb(252,185,21)" fg:x="32711" fg:w="28"/><text x="47.4697%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (23 samples, 0.03%)</title><rect x="47.2270%" y="709" width="0.0332%" height="15" fill="rgb(223,131,1)" fg:x="32716" fg:w="23"/><text x="47.4770%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.03%)</title><rect x="47.2270%" y="693" width="0.0332%" height="15" fill="rgb(245,141,16)" fg:x="32716" fg:w="23"/><text x="47.4770%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.03%)</title><rect x="47.2270%" y="677" width="0.0332%" height="15" fill="rgb(229,55,45)" fg:x="32716" fg:w="23"/><text x="47.4770%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (23 samples, 0.03%)</title><rect x="47.2270%" y="661" width="0.0332%" height="15" fill="rgb(208,92,15)" fg:x="32716" fg:w="23"/><text x="47.4770%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (23 samples, 0.03%)</title><rect x="47.2270%" y="645" width="0.0332%" height="15" fill="rgb(234,185,47)" fg:x="32716" fg:w="23"/><text x="47.4770%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (23 samples, 0.03%)</title><rect x="47.2270%" y="629" width="0.0332%" height="15" fill="rgb(253,104,50)" fg:x="32716" fg:w="23"/><text x="47.4770%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (23 samples, 0.03%)</title><rect x="47.2270%" y="613" width="0.0332%" height="15" fill="rgb(205,70,7)" fg:x="32716" fg:w="23"/><text x="47.4770%" y="623.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="47.2486%" y="597" width="0.0115%" height="15" fill="rgb(240,178,43)" fg:x="32731" fg:w="8"/><text x="47.4986%" y="607.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="47.2486%" y="581" width="0.0115%" height="15" fill="rgb(214,112,2)" fg:x="32731" fg:w="8"/><text x="47.4986%" y="591.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (8 samples, 0.01%)</title><rect x="47.2486%" y="565" width="0.0115%" height="15" fill="rgb(206,46,17)" fg:x="32731" fg:w="8"/><text x="47.4986%" y="575.50"></text></g><g><title>SizeComputer::write (8 samples, 0.01%)</title><rect x="47.2486%" y="549" width="0.0115%" height="15" fill="rgb(225,220,16)" fg:x="32731" fg:w="8"/><text x="47.4986%" y="559.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (10 samples, 0.01%)</title><rect x="47.2616%" y="805" width="0.0144%" height="15" fill="rgb(238,65,40)" fg:x="32740" fg:w="10"/><text x="47.5116%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (10 samples, 0.01%)</title><rect x="47.2616%" y="789" width="0.0144%" height="15" fill="rgb(230,151,21)" fg:x="32740" fg:w="10"/><text x="47.5116%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="47.2616%" y="773" width="0.0144%" height="15" fill="rgb(218,58,49)" fg:x="32740" fg:w="10"/><text x="47.5116%" y="783.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="47.2616%" y="757" width="0.0144%" height="15" fill="rgb(219,179,14)" fg:x="32740" fg:w="10"/><text x="47.5116%" y="767.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="47.2616%" y="741" width="0.0144%" height="15" fill="rgb(223,72,1)" fg:x="32740" fg:w="10"/><text x="47.5116%" y="751.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (12 samples, 0.02%)</title><rect x="47.2602%" y="821" width="0.0173%" height="15" fill="rgb(238,126,10)" fg:x="32739" fg:w="12"/><text x="47.5102%" y="831.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (83 samples, 0.12%)</title><rect x="47.1620%" y="901" width="0.1198%" height="15" fill="rgb(224,206,38)" fg:x="32671" fg:w="83"/><text x="47.4120%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (83 samples, 0.12%)</title><rect x="47.1620%" y="885" width="0.1198%" height="15" fill="rgb(212,201,54)" fg:x="32671" fg:w="83"/><text x="47.4120%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (83 samples, 0.12%)</title><rect x="47.1620%" y="869" width="0.1198%" height="15" fill="rgb(218,154,48)" fg:x="32671" fg:w="83"/><text x="47.4120%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (83 samples, 0.12%)</title><rect x="47.1620%" y="853" width="0.1198%" height="15" fill="rgb(232,93,24)" fg:x="32671" fg:w="83"/><text x="47.4120%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (82 samples, 0.12%)</title><rect x="47.1634%" y="837" width="0.1184%" height="15" fill="rgb(245,30,21)" fg:x="32672" fg:w="82"/><text x="47.4134%" y="847.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (7 samples, 0.01%)</title><rect x="47.3251%" y="789" width="0.0101%" height="15" fill="rgb(242,148,29)" fg:x="32784" fg:w="7"/><text x="47.5751%" y="799.50"></text></g><g><title>SizeComputer::write (7 samples, 0.01%)</title><rect x="47.3251%" y="773" width="0.0101%" height="15" fill="rgb(244,153,54)" fg:x="32784" fg:w="7"/><text x="47.5751%" y="783.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (8 samples, 0.01%)</title><rect x="47.3352%" y="789" width="0.0115%" height="15" fill="rgb(252,87,22)" fg:x="32791" fg:w="8"/><text x="47.5852%" y="799.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (18 samples, 0.03%)</title><rect x="47.3468%" y="789" width="0.0260%" height="15" fill="rgb(210,51,29)" fg:x="32799" fg:w="18"/><text x="47.5968%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (51 samples, 0.07%)</title><rect x="47.3092%" y="821" width="0.0736%" height="15" fill="rgb(242,136,47)" fg:x="32773" fg:w="51"/><text x="47.5592%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (50 samples, 0.07%)</title><rect x="47.3107%" y="805" width="0.0722%" height="15" fill="rgb(238,68,4)" fg:x="32774" fg:w="50"/><text x="47.5607%" y="815.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="47.3728%" y="789" width="0.0101%" height="15" fill="rgb(242,161,30)" fg:x="32817" fg:w="7"/><text x="47.6228%" y="799.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.02%)</title><rect x="47.3829%" y="821" width="0.0217%" height="15" fill="rgb(218,58,44)" fg:x="32824" fg:w="15"/><text x="47.6329%" y="831.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (14 samples, 0.02%)</title><rect x="47.3843%" y="805" width="0.0202%" height="15" fill="rgb(252,125,32)" fg:x="32825" fg:w="14"/><text x="47.6343%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="47.3843%" y="789" width="0.0202%" height="15" fill="rgb(219,178,0)" fg:x="32825" fg:w="14"/><text x="47.6343%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (14 samples, 0.02%)</title><rect x="47.3843%" y="773" width="0.0202%" height="15" fill="rgb(213,152,7)" fg:x="32825" fg:w="14"/><text x="47.6343%" y="783.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="47.3843%" y="757" width="0.0202%" height="15" fill="rgb(249,109,34)" fg:x="32825" fg:w="14"/><text x="47.6343%" y="767.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="47.3843%" y="741" width="0.0202%" height="15" fill="rgb(232,96,21)" fg:x="32825" fg:w="14"/><text x="47.6343%" y="751.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="47.3915%" y="725" width="0.0130%" height="15" fill="rgb(228,27,39)" fg:x="32830" fg:w="9"/><text x="47.6415%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (9 samples, 0.01%)</title><rect x="47.3915%" y="709" width="0.0130%" height="15" fill="rgb(211,182,52)" fg:x="32830" fg:w="9"/><text x="47.6415%" y="719.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (86 samples, 0.12%)</title><rect x="47.2818%" y="901" width="0.1241%" height="15" fill="rgb(234,178,38)" fg:x="32754" fg:w="86"/><text x="47.5318%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (86 samples, 0.12%)</title><rect x="47.2818%" y="885" width="0.1241%" height="15" fill="rgb(221,111,3)" fg:x="32754" fg:w="86"/><text x="47.5318%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (86 samples, 0.12%)</title><rect x="47.2818%" y="869" width="0.1241%" height="15" fill="rgb(228,175,21)" fg:x="32754" fg:w="86"/><text x="47.5318%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (86 samples, 0.12%)</title><rect x="47.2818%" y="853" width="0.1241%" height="15" fill="rgb(228,174,43)" fg:x="32754" fg:w="86"/><text x="47.5318%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (85 samples, 0.12%)</title><rect x="47.2833%" y="837" width="0.1227%" height="15" fill="rgb(211,191,0)" fg:x="32755" fg:w="85"/><text x="47.5333%" y="847.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (319 samples, 0.46%)</title><rect x="46.9599%" y="917" width="0.4605%" height="15" fill="rgb(253,117,3)" fg:x="32531" fg:w="319"/><text x="47.2099%" y="927.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (7 samples, 0.01%)</title><rect x="47.4103%" y="901" width="0.0101%" height="15" fill="rgb(241,127,19)" fg:x="32843" fg:w="7"/><text x="47.6603%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="47.4103%" y="885" width="0.0101%" height="15" fill="rgb(218,103,12)" fg:x="32843" fg:w="7"/><text x="47.6603%" y="895.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="47.4103%" y="869" width="0.0101%" height="15" fill="rgb(236,214,43)" fg:x="32843" fg:w="7"/><text x="47.6603%" y="879.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (7 samples, 0.01%)</title><rect x="47.4103%" y="853" width="0.0101%" height="15" fill="rgb(244,144,19)" fg:x="32843" fg:w="7"/><text x="47.6603%" y="863.50"></text></g><g><title>GetBlockWeight (405 samples, 0.58%)</title><rect x="46.9455%" y="1221" width="0.5846%" height="15" fill="rgb(246,188,10)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1231.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1205" width="0.5846%" height="15" fill="rgb(212,193,33)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1215.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (405 samples, 0.58%)</title><rect x="46.9455%" y="1189" width="0.5846%" height="15" fill="rgb(241,51,29)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1199.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1173" width="0.5846%" height="15" fill="rgb(211,58,19)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1183.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1157" width="0.5846%" height="15" fill="rgb(229,111,26)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1141" width="0.5846%" height="15" fill="rgb(213,115,40)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1151.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1125" width="0.5846%" height="15" fill="rgb(209,56,44)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1135.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1109" width="0.5846%" height="15" fill="rgb(230,108,32)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1119.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1093" width="0.5846%" height="15" fill="rgb(216,165,31)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1077" width="0.5846%" height="15" fill="rgb(218,122,21)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1087.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1061" width="0.5846%" height="15" fill="rgb(223,224,47)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1045" width="0.5846%" height="15" fill="rgb(238,102,44)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1029" width="0.5846%" height="15" fill="rgb(236,46,40)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1039.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="1013" width="0.5846%" height="15" fill="rgb(247,202,50)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1023.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (405 samples, 0.58%)</title><rect x="46.9455%" y="997" width="0.5846%" height="15" fill="rgb(209,99,20)" fg:x="32521" fg:w="405"/><text x="47.1955%" y="1007.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (404 samples, 0.58%)</title><rect x="46.9469%" y="981" width="0.5832%" height="15" fill="rgb(252,27,34)" fg:x="32522" fg:w="404"/><text x="47.1969%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (404 samples, 0.58%)</title><rect x="46.9469%" y="965" width="0.5832%" height="15" fill="rgb(215,206,23)" fg:x="32522" fg:w="404"/><text x="47.1969%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (404 samples, 0.58%)</title><rect x="46.9469%" y="949" width="0.5832%" height="15" fill="rgb(212,135,36)" fg:x="32522" fg:w="404"/><text x="47.1969%" y="959.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (404 samples, 0.58%)</title><rect x="46.9469%" y="933" width="0.5832%" height="15" fill="rgb(240,189,1)" fg:x="32522" fg:w="404"/><text x="47.1969%" y="943.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (76 samples, 0.11%)</title><rect x="47.4204%" y="917" width="0.1097%" height="15" fill="rgb(242,56,20)" fg:x="32850" fg:w="76"/><text x="47.6704%" y="927.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.04%)</title><rect x="47.4926%" y="901" width="0.0375%" height="15" fill="rgb(247,132,33)" fg:x="32900" fg:w="26"/><text x="47.7426%" y="911.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (26 samples, 0.04%)</title><rect x="47.4926%" y="885" width="0.0375%" height="15" fill="rgb(208,149,11)" fg:x="32900" fg:w="26"/><text x="47.7426%" y="895.50"></text></g><g><title>SizeComputer::write (26 samples, 0.04%)</title><rect x="47.4926%" y="869" width="0.0375%" height="15" fill="rgb(211,33,11)" fg:x="32900" fg:w="26"/><text x="47.7426%" y="879.50"></text></g><g><title>ContextualCheckBlock (421 samples, 0.61%)</title><rect x="46.9253%" y="1237" width="0.6077%" height="15" fill="rgb(221,29,38)" fg:x="32507" fg:w="421"/><text x="47.1753%" y="1247.50"></text></g><g><title>FlatFileSeq::Allocate (12 samples, 0.02%)</title><rect x="47.5359%" y="1205" width="0.0173%" height="15" fill="rgb(206,182,49)" fg:x="32930" fg:w="12"/><text x="47.7859%" y="1215.50"></text></g><g><title>[[ext4]] (111 samples, 0.16%)</title><rect x="47.5979%" y="949" width="0.1602%" height="15" fill="rgb(216,140,1)" fg:x="32973" fg:w="111"/><text x="47.8479%" y="959.50"></text></g><g><title>[unknown] (82 samples, 0.12%)</title><rect x="47.6398%" y="933" width="0.1184%" height="15" fill="rgb(232,57,40)" fg:x="33002" fg:w="82"/><text x="47.8898%" y="943.50"></text></g><g><title>[unknown] (41 samples, 0.06%)</title><rect x="47.6990%" y="917" width="0.0592%" height="15" fill="rgb(224,186,18)" fg:x="33043" fg:w="41"/><text x="47.9490%" y="927.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="47.7365%" y="901" width="0.0217%" height="15" fill="rgb(215,121,11)" fg:x="33069" fg:w="15"/><text x="47.9865%" y="911.50"></text></g><g><title>[[ext4]] (169 samples, 0.24%)</title><rect x="47.5835%" y="965" width="0.2440%" height="15" fill="rgb(245,147,10)" fg:x="32963" fg:w="169"/><text x="47.8335%" y="975.50"></text></g><g><title>[unknown] (48 samples, 0.07%)</title><rect x="47.7582%" y="949" width="0.0693%" height="15" fill="rgb(238,153,13)" fg:x="33084" fg:w="48"/><text x="48.0082%" y="959.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="47.7943%" y="933" width="0.0332%" height="15" fill="rgb(233,108,0)" fg:x="33109" fg:w="23"/><text x="48.0443%" y="943.50"></text></g><g><title>[[nvme]] (14 samples, 0.02%)</title><rect x="47.8737%" y="885" width="0.0202%" height="15" fill="rgb(212,157,17)" fg:x="33164" fg:w="14"/><text x="48.1237%" y="895.50"></text></g><g><title>[[nvme]] (13 samples, 0.02%)</title><rect x="47.8751%" y="869" width="0.0188%" height="15" fill="rgb(225,213,38)" fg:x="33165" fg:w="13"/><text x="48.1251%" y="879.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="47.8780%" y="853" width="0.0159%" height="15" fill="rgb(248,16,11)" fg:x="33167" fg:w="11"/><text x="48.1280%" y="863.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="47.8823%" y="837" width="0.0115%" height="15" fill="rgb(241,33,4)" fg:x="33170" fg:w="8"/><text x="48.1323%" y="847.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="47.8838%" y="821" width="0.0101%" height="15" fill="rgb(222,26,43)" fg:x="33171" fg:w="7"/><text x="48.1338%" y="831.50"></text></g><g><title>[[ext4]] (250 samples, 0.36%)</title><rect x="47.5532%" y="981" width="0.3609%" height="15" fill="rgb(243,29,36)" fg:x="32942" fg:w="250"/><text x="47.8032%" y="991.50"></text></g><g><title>[unknown] (60 samples, 0.09%)</title><rect x="47.8275%" y="965" width="0.0866%" height="15" fill="rgb(241,9,27)" fg:x="33132" fg:w="60"/><text x="48.0775%" y="975.50"></text></g><g><title>[unknown] (41 samples, 0.06%)</title><rect x="47.8549%" y="949" width="0.0592%" height="15" fill="rgb(205,117,26)" fg:x="33151" fg:w="41"/><text x="48.1049%" y="959.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="47.8679%" y="933" width="0.0462%" height="15" fill="rgb(209,80,39)" fg:x="33160" fg:w="32"/><text x="48.1179%" y="943.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="47.8679%" y="917" width="0.0462%" height="15" fill="rgb(239,155,6)" fg:x="33160" fg:w="32"/><text x="48.1179%" y="927.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="47.8693%" y="901" width="0.0447%" height="15" fill="rgb(212,104,12)" fg:x="33161" fg:w="31"/><text x="48.1193%" y="911.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="47.8939%" y="885" width="0.0202%" height="15" fill="rgb(234,204,3)" fg:x="33178" fg:w="14"/><text x="48.1439%" y="895.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="47.8968%" y="869" width="0.0173%" height="15" fill="rgb(251,218,7)" fg:x="33180" fg:w="12"/><text x="48.1468%" y="879.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="47.9011%" y="853" width="0.0130%" height="15" fill="rgb(221,81,32)" fg:x="33183" fg:w="9"/><text x="48.1511%" y="863.50"></text></g><g><title>[[ext4]] (254 samples, 0.37%)</title><rect x="47.5532%" y="1013" width="0.3667%" height="15" fill="rgb(214,152,26)" fg:x="32942" fg:w="254"/><text x="47.8032%" y="1023.50"></text></g><g><title>[[ext4]] (254 samples, 0.37%)</title><rect x="47.5532%" y="997" width="0.3667%" height="15" fill="rgb(223,22,3)" fg:x="32942" fg:w="254"/><text x="47.8032%" y="1007.50"></text></g><g><title>FileCommit (258 samples, 0.37%)</title><rect x="47.5532%" y="1173" width="0.3724%" height="15" fill="rgb(207,174,7)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1183.50"></text></g><g><title>fdatasync (258 samples, 0.37%)</title><rect x="47.5532%" y="1157" width="0.3724%" height="15" fill="rgb(224,19,52)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1167.50"></text></g><g><title>[unknown] (258 samples, 0.37%)</title><rect x="47.5532%" y="1141" width="0.3724%" height="15" fill="rgb(228,24,14)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1151.50"></text></g><g><title>[unknown] (258 samples, 0.37%)</title><rect x="47.5532%" y="1125" width="0.3724%" height="15" fill="rgb(230,153,43)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1135.50"></text></g><g><title>[unknown] (258 samples, 0.37%)</title><rect x="47.5532%" y="1109" width="0.3724%" height="15" fill="rgb(231,106,12)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1119.50"></text></g><g><title>[[ext4]] (258 samples, 0.37%)</title><rect x="47.5532%" y="1093" width="0.3724%" height="15" fill="rgb(215,92,2)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1103.50"></text></g><g><title>[unknown] (258 samples, 0.37%)</title><rect x="47.5532%" y="1077" width="0.3724%" height="15" fill="rgb(249,143,25)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1087.50"></text></g><g><title>[unknown] (258 samples, 0.37%)</title><rect x="47.5532%" y="1061" width="0.3724%" height="15" fill="rgb(252,7,35)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1071.50"></text></g><g><title>[unknown] (258 samples, 0.37%)</title><rect x="47.5532%" y="1045" width="0.3724%" height="15" fill="rgb(216,69,40)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1055.50"></text></g><g><title>[unknown] (258 samples, 0.37%)</title><rect x="47.5532%" y="1029" width="0.3724%" height="15" fill="rgb(240,36,33)" fg:x="32942" fg:w="258"/><text x="47.8032%" y="1039.50"></text></g><g><title>FlatFileSeq::Flush (260 samples, 0.38%)</title><rect x="47.5532%" y="1189" width="0.3753%" height="15" fill="rgb(231,128,14)" fg:x="32942" fg:w="260"/><text x="47.8032%" y="1199.50"></text></g><g><title>[[ext4]] (23 samples, 0.03%)</title><rect x="47.9372%" y="933" width="0.0332%" height="15" fill="rgb(245,143,14)" fg:x="33208" fg:w="23"/><text x="48.1872%" y="943.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="47.9444%" y="917" width="0.0260%" height="15" fill="rgb(222,130,28)" fg:x="33213" fg:w="18"/><text x="48.1944%" y="927.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="47.9559%" y="901" width="0.0144%" height="15" fill="rgb(212,10,48)" fg:x="33221" fg:w="10"/><text x="48.2059%" y="911.50"></text></g><g><title>[[ext4]] (31 samples, 0.04%)</title><rect x="47.9372%" y="949" width="0.0447%" height="15" fill="rgb(254,118,45)" fg:x="33208" fg:w="31"/><text x="48.1872%" y="959.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="47.9704%" y="933" width="0.0115%" height="15" fill="rgb(228,6,45)" fg:x="33231" fg:w="8"/><text x="48.2204%" y="943.50"></text></g><g><title>[[ext4]] (45 samples, 0.06%)</title><rect x="47.9300%" y="965" width="0.0650%" height="15" fill="rgb(241,18,35)" fg:x="33203" fg:w="45"/><text x="48.1800%" y="975.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="47.9819%" y="949" width="0.0130%" height="15" fill="rgb(227,214,53)" fg:x="33239" fg:w="9"/><text x="48.2319%" y="959.50"></text></g><g><title>[[ext4]] (47 samples, 0.07%)</title><rect x="47.9300%" y="997" width="0.0678%" height="15" fill="rgb(224,107,51)" fg:x="33203" fg:w="47"/><text x="48.1800%" y="1007.50"></text></g><g><title>[[ext4]] (47 samples, 0.07%)</title><rect x="47.9300%" y="981" width="0.0678%" height="15" fill="rgb(248,60,28)" fg:x="33203" fg:w="47"/><text x="48.1800%" y="991.50"></text></g><g><title>node::BlockManager::FindNextBlockPos (323 samples, 0.47%)</title><rect x="47.5359%" y="1221" width="0.4663%" height="15" fill="rgb(249,101,23)" fg:x="32930" fg:w="323"/><text x="47.7859%" y="1231.50"></text></g><g><title>node::BlockManager::FlushBlockFile (311 samples, 0.45%)</title><rect x="47.5532%" y="1205" width="0.4489%" height="15" fill="rgb(228,51,19)" fg:x="32942" fg:w="311"/><text x="47.8032%" y="1215.50"></text></g><g><title>node::BlockManager::FlushUndoFile (51 samples, 0.07%)</title><rect x="47.9285%" y="1189" width="0.0736%" height="15" fill="rgb(213,20,6)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1199.50"></text></g><g><title>FlatFileSeq::Flush (51 samples, 0.07%)</title><rect x="47.9285%" y="1173" width="0.0736%" height="15" fill="rgb(212,124,10)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1183.50"></text></g><g><title>FileCommit (51 samples, 0.07%)</title><rect x="47.9285%" y="1157" width="0.0736%" height="15" fill="rgb(248,3,40)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1167.50"></text></g><g><title>fdatasync (51 samples, 0.07%)</title><rect x="47.9285%" y="1141" width="0.0736%" height="15" fill="rgb(223,178,23)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1151.50"></text></g><g><title>[unknown] (51 samples, 0.07%)</title><rect x="47.9285%" y="1125" width="0.0736%" height="15" fill="rgb(240,132,45)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1135.50"></text></g><g><title>[unknown] (51 samples, 0.07%)</title><rect x="47.9285%" y="1109" width="0.0736%" height="15" fill="rgb(245,164,36)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1119.50"></text></g><g><title>[unknown] (51 samples, 0.07%)</title><rect x="47.9285%" y="1093" width="0.0736%" height="15" fill="rgb(231,188,53)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1103.50"></text></g><g><title>[[ext4]] (51 samples, 0.07%)</title><rect x="47.9285%" y="1077" width="0.0736%" height="15" fill="rgb(237,198,39)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1087.50"></text></g><g><title>[unknown] (51 samples, 0.07%)</title><rect x="47.9285%" y="1061" width="0.0736%" height="15" fill="rgb(223,120,35)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1071.50"></text></g><g><title>[unknown] (51 samples, 0.07%)</title><rect x="47.9285%" y="1045" width="0.0736%" height="15" fill="rgb(253,107,49)" fg:x="33202" fg:w="51"/><text x="48.1785%" y="1055.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="47.9300%" y="1029" width="0.0722%" height="15" fill="rgb(216,44,31)" fg:x="33203" fg:w="50"/><text x="48.1800%" y="1039.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="47.9300%" y="1013" width="0.0722%" height="15" fill="rgb(253,87,21)" fg:x="33203" fg:w="50"/><text x="48.1800%" y="1023.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (40 samples, 0.06%)</title><rect x="48.0310%" y="1061" width="0.0577%" height="15" fill="rgb(226,18,2)" fg:x="33273" fg:w="40"/><text x="48.2810%" y="1071.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (40 samples, 0.06%)</title><rect x="48.0310%" y="1045" width="0.0577%" height="15" fill="rgb(216,8,46)" fg:x="33273" fg:w="40"/><text x="48.2810%" y="1055.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (40 samples, 0.06%)</title><rect x="48.0310%" y="1029" width="0.0577%" height="15" fill="rgb(226,140,39)" fg:x="33273" fg:w="40"/><text x="48.2810%" y="1039.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (40 samples, 0.06%)</title><rect x="48.0310%" y="1013" width="0.0577%" height="15" fill="rgb(221,194,54)" fg:x="33273" fg:w="40"/><text x="48.2810%" y="1023.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (40 samples, 0.06%)</title><rect x="48.0310%" y="997" width="0.0577%" height="15" fill="rgb(213,92,11)" fg:x="33273" fg:w="40"/><text x="48.2810%" y="1007.50"></text></g><g><title>AutoFile::write (149 samples, 0.22%)</title><rect x="48.0021%" y="1077" width="0.2151%" height="15" fill="rgb(229,162,46)" fg:x="33253" fg:w="149"/><text x="48.2521%" y="1087.50"></text></g><g><title>util::Xor (88 samples, 0.13%)</title><rect x="48.0902%" y="1061" width="0.1270%" height="15" fill="rgb(214,111,36)" fg:x="33314" fg:w="88"/><text x="48.3402%" y="1071.50"></text></g><g><title>std::operator^= (32 samples, 0.05%)</title><rect x="48.1710%" y="1045" width="0.0462%" height="15" fill="rgb(207,6,21)" fg:x="33370" fg:w="32"/><text x="48.4210%" y="1055.50"></text></g><g><title>std::operator^ (32 samples, 0.05%)</title><rect x="48.1710%" y="1029" width="0.0462%" height="15" fill="rgb(213,127,38)" fg:x="33370" fg:w="32"/><text x="48.4210%" y="1039.50"></text></g><g><title>AutoFile::write (7 samples, 0.01%)</title><rect x="48.2187%" y="837" width="0.0101%" height="15" fill="rgb(238,118,32)" fg:x="33403" fg:w="7"/><text x="48.4687%" y="847.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="48.2187%" y="821" width="0.0101%" height="15" fill="rgb(240,139,39)" fg:x="33403" fg:w="7"/><text x="48.4687%" y="831.50"></text></g><g><title>[[ext4]] (10 samples, 0.01%)</title><rect x="48.2533%" y="501" width="0.0144%" height="15" fill="rgb(235,10,37)" fg:x="33427" fg:w="10"/><text x="48.5033%" y="511.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="48.2533%" y="485" width="0.0144%" height="15" fill="rgb(249,171,38)" fg:x="33427" fg:w="10"/><text x="48.5033%" y="495.50"></text></g><g><title>[[ext4]] (10 samples, 0.01%)</title><rect x="48.2533%" y="469" width="0.0144%" height="15" fill="rgb(242,144,32)" fg:x="33427" fg:w="10"/><text x="48.5033%" y="479.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="48.2562%" y="453" width="0.0115%" height="15" fill="rgb(217,117,21)" fg:x="33429" fg:w="8"/><text x="48.5062%" y="463.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="48.2562%" y="437" width="0.0115%" height="15" fill="rgb(249,87,1)" fg:x="33429" fg:w="8"/><text x="48.5062%" y="447.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="48.2576%" y="421" width="0.0101%" height="15" fill="rgb(248,196,48)" fg:x="33430" fg:w="7"/><text x="48.5076%" y="431.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (14 samples, 0.02%)</title><rect x="48.2504%" y="629" width="0.0202%" height="15" fill="rgb(251,206,33)" fg:x="33425" fg:w="14"/><text x="48.5004%" y="639.50"></text></g><g><title>new_do_write (14 samples, 0.02%)</title><rect x="48.2504%" y="613" width="0.0202%" height="15" fill="rgb(232,141,28)" fg:x="33425" fg:w="14"/><text x="48.5004%" y="623.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (14 samples, 0.02%)</title><rect x="48.2504%" y="597" width="0.0202%" height="15" fill="rgb(209,167,14)" fg:x="33425" fg:w="14"/><text x="48.5004%" y="607.50"></text></g><g><title>__GI___libc_write (14 samples, 0.02%)</title><rect x="48.2504%" y="581" width="0.0202%" height="15" fill="rgb(225,11,50)" fg:x="33425" fg:w="14"/><text x="48.5004%" y="591.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="48.2504%" y="565" width="0.0202%" height="15" fill="rgb(209,50,20)" fg:x="33425" fg:w="14"/><text x="48.5004%" y="575.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="48.2519%" y="549" width="0.0188%" height="15" fill="rgb(212,17,46)" fg:x="33426" fg:w="13"/><text x="48.5019%" y="559.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="48.2519%" y="533" width="0.0188%" height="15" fill="rgb(216,101,39)" fg:x="33426" fg:w="13"/><text x="48.5019%" y="543.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="48.2533%" y="517" width="0.0173%" height="15" fill="rgb(212,228,48)" fg:x="33427" fg:w="12"/><text x="48.5033%" y="527.50"></text></g><g><title>_IO_fwrite (31 samples, 0.04%)</title><rect x="48.2288%" y="661" width="0.0447%" height="15" fill="rgb(250,6,50)" fg:x="33410" fg:w="31"/><text x="48.4788%" y="671.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (18 samples, 0.03%)</title><rect x="48.2475%" y="645" width="0.0260%" height="15" fill="rgb(250,160,48)" fg:x="33423" fg:w="18"/><text x="48.4975%" y="655.50"></text></g><g><title>AutoFile::write (32 samples, 0.05%)</title><rect x="48.2288%" y="677" width="0.0462%" height="15" fill="rgb(244,216,33)" fg:x="33410" fg:w="32"/><text x="48.4788%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="48.2288%" y="725" width="0.0491%" height="15" fill="rgb(207,157,5)" fg:x="33410" fg:w="34"/><text x="48.4788%" y="735.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="48.2288%" y="709" width="0.0491%" height="15" fill="rgb(228,199,8)" fg:x="33410" fg:w="34"/><text x="48.4788%" y="719.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (34 samples, 0.05%)</title><rect x="48.2288%" y="693" width="0.0491%" height="15" fill="rgb(227,80,20)" fg:x="33410" fg:w="34"/><text x="48.4788%" y="703.50"></text></g><g><title>[[ext4]] (11 samples, 0.02%)</title><rect x="48.3212%" y="373" width="0.0159%" height="15" fill="rgb(222,9,33)" fg:x="33474" fg:w="11"/><text x="48.5712%" y="383.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="48.3226%" y="357" width="0.0144%" height="15" fill="rgb(239,44,28)" fg:x="33475" fg:w="10"/><text x="48.5726%" y="367.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="48.3226%" y="341" width="0.0144%" height="15" fill="rgb(249,187,43)" fg:x="33475" fg:w="10"/><text x="48.5726%" y="351.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="48.3240%" y="325" width="0.0130%" height="15" fill="rgb(216,141,28)" fg:x="33476" fg:w="9"/><text x="48.5740%" y="335.50"></text></g><g><title>[[ext4]] (14 samples, 0.02%)</title><rect x="48.3212%" y="405" width="0.0202%" height="15" fill="rgb(230,154,53)" fg:x="33474" fg:w="14"/><text x="48.5712%" y="415.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="48.3212%" y="389" width="0.0202%" height="15" fill="rgb(227,82,4)" fg:x="33474" fg:w="14"/><text x="48.5712%" y="399.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (17 samples, 0.02%)</title><rect x="48.3197%" y="533" width="0.0245%" height="15" fill="rgb(220,107,16)" fg:x="33473" fg:w="17"/><text x="48.5697%" y="543.50"></text></g><g><title>new_do_write (17 samples, 0.02%)</title><rect x="48.3197%" y="517" width="0.0245%" height="15" fill="rgb(207,187,2)" fg:x="33473" fg:w="17"/><text x="48.5697%" y="527.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (17 samples, 0.02%)</title><rect x="48.3197%" y="501" width="0.0245%" height="15" fill="rgb(210,162,52)" fg:x="33473" fg:w="17"/><text x="48.5697%" y="511.50"></text></g><g><title>__GI___libc_write (17 samples, 0.02%)</title><rect x="48.3197%" y="485" width="0.0245%" height="15" fill="rgb(217,216,49)" fg:x="33473" fg:w="17"/><text x="48.5697%" y="495.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="48.3197%" y="469" width="0.0245%" height="15" fill="rgb(218,146,49)" fg:x="33473" fg:w="17"/><text x="48.5697%" y="479.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="48.3212%" y="453" width="0.0231%" height="15" fill="rgb(216,55,40)" fg:x="33474" fg:w="16"/><text x="48.5712%" y="463.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="48.3212%" y="437" width="0.0231%" height="15" fill="rgb(208,196,21)" fg:x="33474" fg:w="16"/><text x="48.5712%" y="447.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="48.3212%" y="421" width="0.0231%" height="15" fill="rgb(242,117,42)" fg:x="33474" fg:w="16"/><text x="48.5712%" y="431.50"></text></g><g><title>_IO_fwrite (46 samples, 0.07%)</title><rect x="48.2836%" y="565" width="0.0664%" height="15" fill="rgb(210,11,23)" fg:x="33448" fg:w="46"/><text x="48.5336%" y="575.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (23 samples, 0.03%)</title><rect x="48.3168%" y="549" width="0.0332%" height="15" fill="rgb(217,110,2)" fg:x="33471" fg:w="23"/><text x="48.5668%" y="559.50"></text></g><g><title>AutoFile::write (52 samples, 0.08%)</title><rect x="48.2793%" y="581" width="0.0751%" height="15" fill="rgb(229,77,54)" fg:x="33445" fg:w="52"/><text x="48.5293%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (53 samples, 0.08%)</title><rect x="48.2793%" y="629" width="0.0765%" height="15" fill="rgb(218,53,16)" fg:x="33445" fg:w="53"/><text x="48.5293%" y="639.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (53 samples, 0.08%)</title><rect x="48.2793%" y="613" width="0.0765%" height="15" fill="rgb(215,38,13)" fg:x="33445" fg:w="53"/><text x="48.5293%" y="623.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (53 samples, 0.08%)</title><rect x="48.2793%" y="597" width="0.0765%" height="15" fill="rgb(235,42,18)" fg:x="33445" fg:w="53"/><text x="48.5293%" y="607.50"></text></g><g><title>[[ext4]] (30 samples, 0.04%)</title><rect x="48.4034%" y="309" width="0.0433%" height="15" fill="rgb(219,66,54)" fg:x="33531" fg:w="30"/><text x="48.6534%" y="319.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="48.4150%" y="293" width="0.0318%" height="15" fill="rgb(222,205,4)" fg:x="33539" fg:w="22"/><text x="48.6650%" y="303.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="48.4208%" y="277" width="0.0260%" height="15" fill="rgb(227,213,46)" fg:x="33543" fg:w="18"/><text x="48.6708%" y="287.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="48.4208%" y="261" width="0.0260%" height="15" fill="rgb(250,145,42)" fg:x="33543" fg:w="18"/><text x="48.6708%" y="271.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="48.4237%" y="245" width="0.0231%" height="15" fill="rgb(219,15,2)" fg:x="33545" fg:w="16"/><text x="48.6737%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="48.4366%" y="229" width="0.0101%" height="15" fill="rgb(231,181,52)" fg:x="33554" fg:w="7"/><text x="48.6866%" y="239.50"></text></g><g><title>[[ext4]] (113 samples, 0.16%)</title><rect x="48.4020%" y="325" width="0.1631%" height="15" fill="rgb(235,1,42)" fg:x="33530" fg:w="113"/><text x="48.6520%" y="335.50"></text></g><g><title>[unknown] (82 samples, 0.12%)</title><rect x="48.4467%" y="309" width="0.1184%" height="15" fill="rgb(249,88,27)" fg:x="33561" fg:w="82"/><text x="48.6967%" y="319.50"></text></g><g><title>[unknown] (77 samples, 0.11%)</title><rect x="48.4540%" y="293" width="0.1112%" height="15" fill="rgb(235,145,16)" fg:x="33566" fg:w="77"/><text x="48.7040%" y="303.50"></text></g><g><title>[unknown] (69 samples, 0.10%)</title><rect x="48.4655%" y="277" width="0.0996%" height="15" fill="rgb(237,114,19)" fg:x="33574" fg:w="69"/><text x="48.7155%" y="287.50"></text></g><g><title>[unknown] (56 samples, 0.08%)</title><rect x="48.4843%" y="261" width="0.0808%" height="15" fill="rgb(238,51,50)" fg:x="33587" fg:w="56"/><text x="48.7343%" y="271.50"></text></g><g><title>[unknown] (40 samples, 0.06%)</title><rect x="48.5074%" y="245" width="0.0577%" height="15" fill="rgb(205,194,25)" fg:x="33603" fg:w="40"/><text x="48.7574%" y="255.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="48.5406%" y="229" width="0.0245%" height="15" fill="rgb(215,203,17)" fg:x="33626" fg:w="17"/><text x="48.7906%" y="239.50"></text></g><g><title>[[ext4]] (134 samples, 0.19%)</title><rect x="48.3933%" y="357" width="0.1934%" height="15" fill="rgb(233,112,49)" fg:x="33524" fg:w="134"/><text x="48.6433%" y="367.50"></text></g><g><title>[unknown] (129 samples, 0.19%)</title><rect x="48.4006%" y="341" width="0.1862%" height="15" fill="rgb(241,130,26)" fg:x="33529" fg:w="129"/><text x="48.6506%" y="351.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="48.5651%" y="325" width="0.0217%" height="15" fill="rgb(252,223,19)" fg:x="33643" fg:w="15"/><text x="48.8151%" y="335.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="48.5738%" y="309" width="0.0130%" height="15" fill="rgb(211,95,25)" fg:x="33649" fg:w="9"/><text x="48.8238%" y="319.50"></text></g><g><title>[unknown] (157 samples, 0.23%)</title><rect x="48.3775%" y="421" width="0.2266%" height="15" fill="rgb(251,182,27)" fg:x="33513" fg:w="157"/><text x="48.6275%" y="431.50"></text></g><g><title>[unknown] (157 samples, 0.23%)</title><rect x="48.3775%" y="405" width="0.2266%" height="15" fill="rgb(238,24,4)" fg:x="33513" fg:w="157"/><text x="48.6275%" y="415.50"></text></g><g><title>[unknown] (155 samples, 0.22%)</title><rect x="48.3803%" y="389" width="0.2237%" height="15" fill="rgb(224,220,25)" fg:x="33515" fg:w="155"/><text x="48.6303%" y="399.50"></text></g><g><title>[unknown] (150 samples, 0.22%)</title><rect x="48.3876%" y="373" width="0.2165%" height="15" fill="rgb(239,133,26)" fg:x="33520" fg:w="150"/><text x="48.6376%" y="383.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="48.5868%" y="357" width="0.0173%" height="15" fill="rgb(211,94,48)" fg:x="33658" fg:w="12"/><text x="48.8368%" y="367.50"></text></g><g><title>_IO_fwrite (162 samples, 0.23%)</title><rect x="48.3717%" y="517" width="0.2339%" height="15" fill="rgb(239,87,6)" fg:x="33509" fg:w="162"/><text x="48.6217%" y="527.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (161 samples, 0.23%)</title><rect x="48.3731%" y="501" width="0.2324%" height="15" fill="rgb(227,62,0)" fg:x="33510" fg:w="161"/><text x="48.6231%" y="511.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (159 samples, 0.23%)</title><rect x="48.3760%" y="485" width="0.2295%" height="15" fill="rgb(211,226,4)" fg:x="33512" fg:w="159"/><text x="48.6260%" y="495.50"></text></g><g><title>new_do_write (159 samples, 0.23%)</title><rect x="48.3760%" y="469" width="0.2295%" height="15" fill="rgb(253,38,52)" fg:x="33512" fg:w="159"/><text x="48.6260%" y="479.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (159 samples, 0.23%)</title><rect x="48.3760%" y="453" width="0.2295%" height="15" fill="rgb(229,126,40)" fg:x="33512" fg:w="159"/><text x="48.6260%" y="463.50"></text></g><g><title>__GI___libc_write (158 samples, 0.23%)</title><rect x="48.3775%" y="437" width="0.2281%" height="15" fill="rgb(229,165,44)" fg:x="33513" fg:w="158"/><text x="48.6275%" y="447.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (19 samples, 0.03%)</title><rect x="48.6055%" y="517" width="0.0274%" height="15" fill="rgb(247,95,47)" fg:x="33671" fg:w="19"/><text x="48.8555%" y="527.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (19 samples, 0.03%)</title><rect x="48.6055%" y="501" width="0.0274%" height="15" fill="rgb(216,140,30)" fg:x="33671" fg:w="19"/><text x="48.8555%" y="511.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (19 samples, 0.03%)</title><rect x="48.6055%" y="485" width="0.0274%" height="15" fill="rgb(246,214,8)" fg:x="33671" fg:w="19"/><text x="48.8555%" y="495.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (19 samples, 0.03%)</title><rect x="48.6055%" y="469" width="0.0274%" height="15" fill="rgb(227,224,15)" fg:x="33671" fg:w="19"/><text x="48.8555%" y="479.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (19 samples, 0.03%)</title><rect x="48.6055%" y="453" width="0.0274%" height="15" fill="rgb(233,175,4)" fg:x="33671" fg:w="19"/><text x="48.8555%" y="463.50"></text></g><g><title>AutoFile::write (240 samples, 0.35%)</title><rect x="48.3558%" y="533" width="0.3465%" height="15" fill="rgb(221,66,45)" fg:x="33498" fg:w="240"/><text x="48.6058%" y="543.50"></text></g><g><title>util::Xor (48 samples, 0.07%)</title><rect x="48.6330%" y="517" width="0.0693%" height="15" fill="rgb(221,178,18)" fg:x="33690" fg:w="48"/><text x="48.8830%" y="527.50"></text></g><g><title>std::operator^= (10 samples, 0.01%)</title><rect x="48.6878%" y="501" width="0.0144%" height="15" fill="rgb(213,81,29)" fg:x="33728" fg:w="10"/><text x="48.9378%" y="511.50"></text></g><g><title>std::operator^ (10 samples, 0.01%)</title><rect x="48.6878%" y="485" width="0.0144%" height="15" fill="rgb(220,89,49)" fg:x="33728" fg:w="10"/><text x="48.9378%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="533" width="0.0115%" height="15" fill="rgb(227,60,33)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="517" width="0.0115%" height="15" fill="rgb(205,113,12)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="501" width="0.0115%" height="15" fill="rgb(211,32,1)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="485" width="0.0115%" height="15" fill="rgb(246,2,12)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="495.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="469" width="0.0115%" height="15" fill="rgb(243,37,27)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="479.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="453" width="0.0115%" height="15" fill="rgb(248,211,31)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="437" width="0.0115%" height="15" fill="rgb(242,146,47)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="421" width="0.0115%" height="15" fill="rgb(206,70,20)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="431.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="405" width="0.0115%" height="15" fill="rgb(215,10,51)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="415.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="389" width="0.0115%" height="15" fill="rgb(243,178,53)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="399.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (8 samples, 0.01%)</title><rect x="48.7023%" y="373" width="0.0115%" height="15" fill="rgb(233,221,20)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="357" width="0.0115%" height="15" fill="rgb(218,95,35)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="341" width="0.0115%" height="15" fill="rgb(229,13,5)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="351.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="325" width="0.0115%" height="15" fill="rgb(252,164,30)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="335.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="48.7023%" y="309" width="0.0115%" height="15" fill="rgb(232,68,36)" fg:x="33738" fg:w="8"/><text x="48.9523%" y="319.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (306 samples, 0.44%)</title><rect x="48.2779%" y="725" width="0.4417%" height="15" fill="rgb(219,59,54)" fg:x="33444" fg:w="306"/><text x="48.5279%" y="735.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (306 samples, 0.44%)</title><rect x="48.2779%" y="709" width="0.4417%" height="15" fill="rgb(250,92,33)" fg:x="33444" fg:w="306"/><text x="48.5279%" y="719.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (306 samples, 0.44%)</title><rect x="48.2779%" y="693" width="0.4417%" height="15" fill="rgb(229,162,54)" fg:x="33444" fg:w="306"/><text x="48.5279%" y="703.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (306 samples, 0.44%)</title><rect x="48.2779%" y="677" width="0.4417%" height="15" fill="rgb(244,114,52)" fg:x="33444" fg:w="306"/><text x="48.5279%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (306 samples, 0.44%)</title><rect x="48.2779%" y="661" width="0.4417%" height="15" fill="rgb(212,211,43)" fg:x="33444" fg:w="306"/><text x="48.5279%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (306 samples, 0.44%)</title><rect x="48.2779%" y="645" width="0.4417%" height="15" fill="rgb(226,147,8)" fg:x="33444" fg:w="306"/><text x="48.5279%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (252 samples, 0.36%)</title><rect x="48.3558%" y="629" width="0.3638%" height="15" fill="rgb(226,23,13)" fg:x="33498" fg:w="252"/><text x="48.6058%" y="639.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (252 samples, 0.36%)</title><rect x="48.3558%" y="613" width="0.3638%" height="15" fill="rgb(240,63,4)" fg:x="33498" fg:w="252"/><text x="48.6058%" y="623.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (252 samples, 0.36%)</title><rect x="48.3558%" y="597" width="0.3638%" height="15" fill="rgb(221,1,32)" fg:x="33498" fg:w="252"/><text x="48.6058%" y="607.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (252 samples, 0.36%)</title><rect x="48.3558%" y="581" width="0.3638%" height="15" fill="rgb(242,117,10)" fg:x="33498" fg:w="252"/><text x="48.6058%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (252 samples, 0.36%)</title><rect x="48.3558%" y="565" width="0.3638%" height="15" fill="rgb(249,172,44)" fg:x="33498" fg:w="252"/><text x="48.6058%" y="575.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (252 samples, 0.36%)</title><rect x="48.3558%" y="549" width="0.3638%" height="15" fill="rgb(244,46,45)" fg:x="33498" fg:w="252"/><text x="48.6058%" y="559.50"></text></g><g><title>[[ext4]] (14 samples, 0.02%)</title><rect x="48.7658%" y="373" width="0.0202%" height="15" fill="rgb(206,43,17)" fg:x="33782" fg:w="14"/><text x="49.0158%" y="383.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="48.7701%" y="357" width="0.0159%" height="15" fill="rgb(239,218,39)" fg:x="33785" fg:w="11"/><text x="49.0201%" y="367.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="48.7715%" y="341" width="0.0144%" height="15" fill="rgb(208,169,54)" fg:x="33786" fg:w="10"/><text x="49.0215%" y="351.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="48.7715%" y="325" width="0.0144%" height="15" fill="rgb(247,25,42)" fg:x="33786" fg:w="10"/><text x="49.0215%" y="335.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="48.7744%" y="309" width="0.0115%" height="15" fill="rgb(226,23,31)" fg:x="33788" fg:w="8"/><text x="49.0244%" y="319.50"></text></g><g><title>[[ext4]] (67 samples, 0.10%)</title><rect x="48.7614%" y="389" width="0.0967%" height="15" fill="rgb(247,16,28)" fg:x="33779" fg:w="67"/><text x="49.0114%" y="399.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="48.7860%" y="373" width="0.0722%" height="15" fill="rgb(231,147,38)" fg:x="33796" fg:w="50"/><text x="49.0360%" y="383.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="48.7918%" y="357" width="0.0664%" height="15" fill="rgb(253,81,48)" fg:x="33800" fg:w="46"/><text x="49.0418%" y="367.50"></text></g><g><title>[unknown] (40 samples, 0.06%)</title><rect x="48.8004%" y="341" width="0.0577%" height="15" fill="rgb(249,222,43)" fg:x="33806" fg:w="40"/><text x="49.0504%" y="351.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="48.8134%" y="325" width="0.0447%" height="15" fill="rgb(221,3,27)" fg:x="33815" fg:w="31"/><text x="49.0634%" y="335.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="48.8293%" y="309" width="0.0289%" height="15" fill="rgb(228,180,5)" fg:x="33826" fg:w="20"/><text x="49.0793%" y="319.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="48.8452%" y="293" width="0.0130%" height="15" fill="rgb(227,131,42)" fg:x="33837" fg:w="9"/><text x="49.0952%" y="303.50"></text></g><g><title>[[ext4]] (85 samples, 0.12%)</title><rect x="48.7528%" y="421" width="0.1227%" height="15" fill="rgb(212,3,39)" fg:x="33773" fg:w="85"/><text x="49.0028%" y="431.50"></text></g><g><title>[unknown] (83 samples, 0.12%)</title><rect x="48.7557%" y="405" width="0.1198%" height="15" fill="rgb(226,45,5)" fg:x="33775" fg:w="83"/><text x="49.0057%" y="415.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="48.8582%" y="389" width="0.0173%" height="15" fill="rgb(215,167,45)" fg:x="33846" fg:w="12"/><text x="49.1082%" y="399.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="48.8639%" y="373" width="0.0115%" height="15" fill="rgb(250,218,53)" fg:x="33850" fg:w="8"/><text x="49.1139%" y="383.50"></text></g><g><title>_IO_fwrite (104 samples, 0.15%)</title><rect x="48.7282%" y="581" width="0.1501%" height="15" fill="rgb(207,140,0)" fg:x="33756" fg:w="104"/><text x="48.9782%" y="591.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (100 samples, 0.14%)</title><rect x="48.7340%" y="565" width="0.1444%" height="15" fill="rgb(238,133,51)" fg:x="33760" fg:w="100"/><text x="48.9840%" y="575.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (98 samples, 0.14%)</title><rect x="48.7369%" y="549" width="0.1415%" height="15" fill="rgb(218,203,53)" fg:x="33762" fg:w="98"/><text x="48.9869%" y="559.50"></text></g><g><title>new_do_write (98 samples, 0.14%)</title><rect x="48.7369%" y="533" width="0.1415%" height="15" fill="rgb(226,184,25)" fg:x="33762" fg:w="98"/><text x="48.9869%" y="543.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (98 samples, 0.14%)</title><rect x="48.7369%" y="517" width="0.1415%" height="15" fill="rgb(231,121,21)" fg:x="33762" fg:w="98"/><text x="48.9869%" y="527.50"></text></g><g><title>__GI___libc_write (97 samples, 0.14%)</title><rect x="48.7383%" y="501" width="0.1400%" height="15" fill="rgb(251,14,34)" fg:x="33763" fg:w="97"/><text x="48.9883%" y="511.50"></text></g><g><title>[unknown] (97 samples, 0.14%)</title><rect x="48.7383%" y="485" width="0.1400%" height="15" fill="rgb(249,193,11)" fg:x="33763" fg:w="97"/><text x="48.9883%" y="495.50"></text></g><g><title>[unknown] (97 samples, 0.14%)</title><rect x="48.7383%" y="469" width="0.1400%" height="15" fill="rgb(220,172,37)" fg:x="33763" fg:w="97"/><text x="48.9883%" y="479.50"></text></g><g><title>[unknown] (97 samples, 0.14%)</title><rect x="48.7383%" y="453" width="0.1400%" height="15" fill="rgb(231,229,43)" fg:x="33763" fg:w="97"/><text x="48.9883%" y="463.50"></text></g><g><title>[unknown] (92 samples, 0.13%)</title><rect x="48.7456%" y="437" width="0.1328%" height="15" fill="rgb(250,161,5)" fg:x="33768" fg:w="92"/><text x="48.9956%" y="447.50"></text></g><g><title>AutoFile::write (155 samples, 0.22%)</title><rect x="48.7225%" y="597" width="0.2237%" height="15" fill="rgb(218,225,18)" fg:x="33752" fg:w="155"/><text x="48.9725%" y="607.50"></text></g><g><title>util::Xor (43 samples, 0.06%)</title><rect x="48.8841%" y="581" width="0.0621%" height="15" fill="rgb(245,45,42)" fg:x="33864" fg:w="43"/><text x="49.1341%" y="591.50"></text></g><g><title>std::operator^= (22 samples, 0.03%)</title><rect x="48.9145%" y="565" width="0.0318%" height="15" fill="rgb(211,115,1)" fg:x="33885" fg:w="22"/><text x="49.1645%" y="575.50"></text></g><g><title>std::operator^ (22 samples, 0.03%)</title><rect x="48.9145%" y="549" width="0.0318%" height="15" fill="rgb(248,133,52)" fg:x="33885" fg:w="22"/><text x="49.1645%" y="559.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (157 samples, 0.23%)</title><rect x="48.7225%" y="613" width="0.2266%" height="15" fill="rgb(238,100,21)" fg:x="33752" fg:w="157"/><text x="48.9725%" y="623.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="49.0054%" y="357" width="0.0115%" height="15" fill="rgb(247,144,11)" fg:x="33948" fg:w="8"/><text x="49.2554%" y="367.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (13 samples, 0.02%)</title><rect x="49.0040%" y="533" width="0.0188%" height="15" fill="rgb(206,164,16)" fg:x="33947" fg:w="13"/><text x="49.2540%" y="543.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="49.0054%" y="517" width="0.0173%" height="15" fill="rgb(222,34,3)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="527.50"></text></g><g><title>new_do_write (12 samples, 0.02%)</title><rect x="49.0054%" y="501" width="0.0173%" height="15" fill="rgb(248,82,4)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="511.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="49.0054%" y="485" width="0.0173%" height="15" fill="rgb(228,81,46)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="495.50"></text></g><g><title>__GI___libc_write (12 samples, 0.02%)</title><rect x="49.0054%" y="469" width="0.0173%" height="15" fill="rgb(227,67,47)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="479.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.0054%" y="453" width="0.0173%" height="15" fill="rgb(215,93,53)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="463.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.0054%" y="437" width="0.0173%" height="15" fill="rgb(248,194,39)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="447.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.0054%" y="421" width="0.0173%" height="15" fill="rgb(215,5,19)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="431.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.0054%" y="405" width="0.0173%" height="15" fill="rgb(226,215,51)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="415.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="49.0054%" y="389" width="0.0173%" height="15" fill="rgb(225,56,26)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="399.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.0054%" y="373" width="0.0173%" height="15" fill="rgb(222,75,29)" fg:x="33948" fg:w="12"/><text x="49.2554%" y="383.50"></text></g><g><title>_IO_fwrite (51 samples, 0.07%)</title><rect x="48.9505%" y="549" width="0.0736%" height="15" fill="rgb(236,139,6)" fg:x="33910" fg:w="51"/><text x="49.2005%" y="559.50"></text></g><g><title>AutoFile::write (53 samples, 0.08%)</title><rect x="48.9505%" y="565" width="0.0765%" height="15" fill="rgb(223,137,36)" fg:x="33910" fg:w="53"/><text x="49.2005%" y="575.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (555 samples, 0.80%)</title><rect x="48.2288%" y="837" width="0.8012%" height="15" fill="rgb(226,99,2)" fg:x="33410" fg:w="555"/><text x="48.4788%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (555 samples, 0.80%)</title><rect x="48.2288%" y="821" width="0.8012%" height="15" fill="rgb(206,133,23)" fg:x="33410" fg:w="555"/><text x="48.4788%" y="831.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (555 samples, 0.80%)</title><rect x="48.2288%" y="805" width="0.8012%" height="15" fill="rgb(243,173,15)" fg:x="33410" fg:w="555"/><text x="48.4788%" y="815.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (555 samples, 0.80%)</title><rect x="48.2288%" y="789" width="0.8012%" height="15" fill="rgb(228,69,28)" fg:x="33410" fg:w="555"/><text x="48.4788%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (555 samples, 0.80%)</title><rect x="48.2288%" y="773" width="0.8012%" height="15" fill="rgb(212,51,22)" fg:x="33410" fg:w="555"/><text x="48.4788%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (555 samples, 0.80%)</title><rect x="48.2288%" y="757" width="0.8012%" height="15" fill="rgb(227,113,0)" fg:x="33410" fg:w="555"/><text x="48.4788%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (555 samples, 0.80%)</title><rect x="48.2288%" y="741" width="0.8012%" height="15" fill="rgb(252,84,27)" fg:x="33410" fg:w="555"/><text x="48.4788%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (215 samples, 0.31%)</title><rect x="48.7196%" y="725" width="0.3104%" height="15" fill="rgb(223,145,39)" fg:x="33750" fg:w="215"/><text x="48.9696%" y="735.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (215 samples, 0.31%)</title><rect x="48.7196%" y="709" width="0.3104%" height="15" fill="rgb(239,219,30)" fg:x="33750" fg:w="215"/><text x="48.9696%" y="719.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (215 samples, 0.31%)</title><rect x="48.7196%" y="693" width="0.3104%" height="15" fill="rgb(224,196,39)" fg:x="33750" fg:w="215"/><text x="48.9696%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (215 samples, 0.31%)</title><rect x="48.7196%" y="677" width="0.3104%" height="15" fill="rgb(205,35,43)" fg:x="33750" fg:w="215"/><text x="48.9696%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (215 samples, 0.31%)</title><rect x="48.7196%" y="661" width="0.3104%" height="15" fill="rgb(228,201,21)" fg:x="33750" fg:w="215"/><text x="48.9696%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (215 samples, 0.31%)</title><rect x="48.7196%" y="645" width="0.3104%" height="15" fill="rgb(237,118,16)" fg:x="33750" fg:w="215"/><text x="48.9696%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (215 samples, 0.31%)</title><rect x="48.7196%" y="629" width="0.3104%" height="15" fill="rgb(241,17,19)" fg:x="33750" fg:w="215"/><text x="48.9696%" y="639.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (56 samples, 0.08%)</title><rect x="48.9491%" y="613" width="0.0808%" height="15" fill="rgb(214,10,25)" fg:x="33909" fg:w="56"/><text x="49.1991%" y="623.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (56 samples, 0.08%)</title><rect x="48.9491%" y="597" width="0.0808%" height="15" fill="rgb(238,37,29)" fg:x="33909" fg:w="56"/><text x="49.1991%" y="607.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (56 samples, 0.08%)</title><rect x="48.9491%" y="581" width="0.0808%" height="15" fill="rgb(253,83,25)" fg:x="33909" fg:w="56"/><text x="49.1991%" y="591.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="49.0805%" y="613" width="0.0101%" height="15" fill="rgb(234,192,12)" fg:x="34000" fg:w="7"/><text x="49.3305%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="49.0805%" y="597" width="0.0101%" height="15" fill="rgb(241,216,45)" fg:x="34000" fg:w="7"/><text x="49.3305%" y="607.50"></text></g><g><title>_IO_fwrite (43 samples, 0.06%)</title><rect x="49.0299%" y="773" width="0.0621%" height="15" fill="rgb(242,22,33)" fg:x="33965" fg:w="43"/><text x="49.2799%" y="783.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.01%)</title><rect x="49.0805%" y="757" width="0.0115%" height="15" fill="rgb(231,105,49)" fg:x="34000" fg:w="8"/><text x="49.3305%" y="767.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (8 samples, 0.01%)</title><rect x="49.0805%" y="741" width="0.0115%" height="15" fill="rgb(218,204,15)" fg:x="34000" fg:w="8"/><text x="49.3305%" y="751.50"></text></g><g><title>new_do_write (8 samples, 0.01%)</title><rect x="49.0805%" y="725" width="0.0115%" height="15" fill="rgb(235,138,41)" fg:x="34000" fg:w="8"/><text x="49.3305%" y="735.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (8 samples, 0.01%)</title><rect x="49.0805%" y="709" width="0.0115%" height="15" fill="rgb(246,0,9)" fg:x="34000" fg:w="8"/><text x="49.3305%" y="719.50"></text></g><g><title>__GI___libc_write (8 samples, 0.01%)</title><rect x="49.0805%" y="693" width="0.0115%" height="15" fill="rgb(210,74,4)" fg:x="34000" fg:w="8"/><text x="49.3305%" y="703.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.0805%" y="677" width="0.0115%" height="15" fill="rgb(250,60,41)" fg:x="34000" fg:w="8"/><text x="49.3305%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.0805%" y="661" width="0.0115%" height="15" fill="rgb(220,115,12)" fg:x="34000" fg:w="8"/><text x="49.3305%" y="671.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.0805%" y="645" width="0.0115%" height="15" fill="rgb(237,100,13)" fg:x="34000" fg:w="8"/><text x="49.3305%" y="655.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.0805%" y="629" width="0.0115%" height="15" fill="rgb(213,55,26)" fg:x="34000" fg:w="8"/><text x="49.3305%" y="639.50"></text></g><g><title>AutoFile::write (44 samples, 0.06%)</title><rect x="49.0299%" y="789" width="0.0635%" height="15" fill="rgb(216,17,4)" fg:x="33965" fg:w="44"/><text x="49.2799%" y="799.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (607 samples, 0.88%)</title><rect x="48.2187%" y="917" width="0.8762%" height="15" fill="rgb(220,153,47)" fg:x="33403" fg:w="607"/><text x="48.4687%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (607 samples, 0.88%)</title><rect x="48.2187%" y="901" width="0.8762%" height="15" fill="rgb(215,131,9)" fg:x="33403" fg:w="607"/><text x="48.4687%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (607 samples, 0.88%)</title><rect x="48.2187%" y="885" width="0.8762%" height="15" fill="rgb(233,46,42)" fg:x="33403" fg:w="607"/><text x="48.4687%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (607 samples, 0.88%)</title><rect x="48.2187%" y="869" width="0.8762%" height="15" fill="rgb(226,86,7)" fg:x="33403" fg:w="607"/><text x="48.4687%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (607 samples, 0.88%)</title><rect x="48.2187%" y="853" width="0.8762%" height="15" fill="rgb(239,226,21)" fg:x="33403" fg:w="607"/><text x="48.4687%" y="863.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (45 samples, 0.06%)</title><rect x="49.0299%" y="837" width="0.0650%" height="15" fill="rgb(244,137,22)" fg:x="33965" fg:w="45"/><text x="49.2799%" y="847.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (45 samples, 0.06%)</title><rect x="49.0299%" y="821" width="0.0650%" height="15" fill="rgb(211,139,35)" fg:x="33965" fg:w="45"/><text x="49.2799%" y="831.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (45 samples, 0.06%)</title><rect x="49.0299%" y="805" width="0.0650%" height="15" fill="rgb(214,62,50)" fg:x="33965" fg:w="45"/><text x="49.2799%" y="815.50"></text></g><g><title>[[ext4]] (11 samples, 0.02%)</title><rect x="49.1238%" y="453" width="0.0159%" height="15" fill="rgb(212,113,44)" fg:x="34030" fg:w="11"/><text x="49.3738%" y="463.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="49.1267%" y="437" width="0.0130%" height="15" fill="rgb(226,150,43)" fg:x="34032" fg:w="9"/><text x="49.3767%" y="447.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="49.1267%" y="421" width="0.0130%" height="15" fill="rgb(250,71,37)" fg:x="34032" fg:w="9"/><text x="49.3767%" y="431.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="49.1267%" y="405" width="0.0130%" height="15" fill="rgb(219,76,19)" fg:x="34032" fg:w="9"/><text x="49.3767%" y="415.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.1281%" y="389" width="0.0115%" height="15" fill="rgb(250,39,11)" fg:x="34033" fg:w="8"/><text x="49.3781%" y="399.50"></text></g><g><title>[[ext4]] (37 samples, 0.05%)</title><rect x="49.1238%" y="469" width="0.0534%" height="15" fill="rgb(230,64,31)" fg:x="34030" fg:w="37"/><text x="49.3738%" y="479.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="49.1396%" y="453" width="0.0375%" height="15" fill="rgb(208,222,23)" fg:x="34041" fg:w="26"/><text x="49.3896%" y="463.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="49.1396%" y="437" width="0.0375%" height="15" fill="rgb(227,125,18)" fg:x="34041" fg:w="26"/><text x="49.3896%" y="447.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="49.1454%" y="421" width="0.0318%" height="15" fill="rgb(234,210,9)" fg:x="34045" fg:w="22"/><text x="49.3954%" y="431.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="49.1498%" y="405" width="0.0274%" height="15" fill="rgb(217,127,24)" fg:x="34048" fg:w="19"/><text x="49.3998%" y="415.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.1599%" y="389" width="0.0173%" height="15" fill="rgb(239,141,48)" fg:x="34055" fg:w="12"/><text x="49.4099%" y="399.50"></text></g><g><title>[[ext4]] (44 samples, 0.06%)</title><rect x="49.1166%" y="501" width="0.0635%" height="15" fill="rgb(227,109,8)" fg:x="34025" fg:w="44"/><text x="49.3666%" y="511.50"></text></g><g><title>[unknown] (42 samples, 0.06%)</title><rect x="49.1194%" y="485" width="0.0606%" height="15" fill="rgb(235,184,23)" fg:x="34027" fg:w="42"/><text x="49.3694%" y="495.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (49 samples, 0.07%)</title><rect x="49.1108%" y="629" width="0.0707%" height="15" fill="rgb(227,226,48)" fg:x="34021" fg:w="49"/><text x="49.3608%" y="639.50"></text></g><g><title>new_do_write (49 samples, 0.07%)</title><rect x="49.1108%" y="613" width="0.0707%" height="15" fill="rgb(206,150,11)" fg:x="34021" fg:w="49"/><text x="49.3608%" y="623.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (49 samples, 0.07%)</title><rect x="49.1108%" y="597" width="0.0707%" height="15" fill="rgb(254,2,33)" fg:x="34021" fg:w="49"/><text x="49.3608%" y="607.50"></text></g><g><title>__GI___libc_write (49 samples, 0.07%)</title><rect x="49.1108%" y="581" width="0.0707%" height="15" fill="rgb(243,160,20)" fg:x="34021" fg:w="49"/><text x="49.3608%" y="591.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="49.1108%" y="565" width="0.0707%" height="15" fill="rgb(218,208,30)" fg:x="34021" fg:w="49"/><text x="49.3608%" y="575.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="49.1108%" y="549" width="0.0707%" height="15" fill="rgb(224,120,49)" fg:x="34021" fg:w="49"/><text x="49.3608%" y="559.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="49.1108%" y="533" width="0.0707%" height="15" fill="rgb(246,12,2)" fg:x="34021" fg:w="49"/><text x="49.3608%" y="543.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="49.1108%" y="517" width="0.0707%" height="15" fill="rgb(236,117,3)" fg:x="34021" fg:w="49"/><text x="49.3608%" y="527.50"></text></g><g><title>_IO_fwrite (7 samples, 0.01%)</title><rect x="49.1830%" y="629" width="0.0101%" height="15" fill="rgb(216,128,52)" fg:x="34071" fg:w="7"/><text x="49.4330%" y="639.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (63 samples, 0.09%)</title><rect x="49.1050%" y="645" width="0.0909%" height="15" fill="rgb(246,145,19)" fg:x="34017" fg:w="63"/><text x="49.3550%" y="655.50"></text></g><g><title>_IO_fwrite (67 samples, 0.10%)</title><rect x="49.1007%" y="661" width="0.0967%" height="15" fill="rgb(222,11,46)" fg:x="34014" fg:w="67"/><text x="49.3507%" y="671.50"></text></g><g><title>AutoFile::write (77 samples, 0.11%)</title><rect x="49.0978%" y="677" width="0.1112%" height="15" fill="rgb(245,82,36)" fg:x="34012" fg:w="77"/><text x="49.3478%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (79 samples, 0.11%)</title><rect x="49.0963%" y="725" width="0.1140%" height="15" fill="rgb(250,73,51)" fg:x="34011" fg:w="79"/><text x="49.3463%" y="735.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (79 samples, 0.11%)</title><rect x="49.0963%" y="709" width="0.1140%" height="15" fill="rgb(221,189,23)" fg:x="34011" fg:w="79"/><text x="49.3463%" y="719.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (79 samples, 0.11%)</title><rect x="49.0963%" y="693" width="0.1140%" height="15" fill="rgb(210,33,7)" fg:x="34011" fg:w="79"/><text x="49.3463%" y="703.50"></text></g><g><title>[[ext4]] (26 samples, 0.04%)</title><rect x="49.2956%" y="373" width="0.0375%" height="15" fill="rgb(210,107,22)" fg:x="34149" fg:w="26"/><text x="49.5456%" y="383.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="49.3042%" y="357" width="0.0289%" height="15" fill="rgb(222,116,37)" fg:x="34155" fg:w="20"/><text x="49.5542%" y="367.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="49.3071%" y="341" width="0.0260%" height="15" fill="rgb(254,17,48)" fg:x="34157" fg:w="18"/><text x="49.5571%" y="351.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="49.3114%" y="325" width="0.0217%" height="15" fill="rgb(224,36,32)" fg:x="34160" fg:w="15"/><text x="49.5614%" y="335.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="49.3114%" y="309" width="0.0217%" height="15" fill="rgb(232,90,46)" fg:x="34160" fg:w="15"/><text x="49.5614%" y="319.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.3158%" y="293" width="0.0173%" height="15" fill="rgb(241,66,40)" fg:x="34163" fg:w="12"/><text x="49.5658%" y="303.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.3215%" y="277" width="0.0115%" height="15" fill="rgb(249,184,29)" fg:x="34167" fg:w="8"/><text x="49.5715%" y="287.50"></text></g><g><title>[[ext4]] (118 samples, 0.17%)</title><rect x="49.2883%" y="389" width="0.1703%" height="15" fill="rgb(231,181,1)" fg:x="34144" fg:w="118"/><text x="49.5383%" y="399.50"></text></g><g><title>[unknown] (87 samples, 0.13%)</title><rect x="49.3331%" y="373" width="0.1256%" height="15" fill="rgb(224,94,2)" fg:x="34175" fg:w="87"/><text x="49.5831%" y="383.50"></text></g><g><title>[unknown] (84 samples, 0.12%)</title><rect x="49.3374%" y="357" width="0.1213%" height="15" fill="rgb(229,170,15)" fg:x="34178" fg:w="84"/><text x="49.5874%" y="367.50"></text></g><g><title>[unknown] (70 samples, 0.10%)</title><rect x="49.3576%" y="341" width="0.1010%" height="15" fill="rgb(240,127,35)" fg:x="34192" fg:w="70"/><text x="49.6076%" y="351.50"></text></g><g><title>[unknown] (52 samples, 0.08%)</title><rect x="49.3836%" y="325" width="0.0751%" height="15" fill="rgb(248,196,34)" fg:x="34210" fg:w="52"/><text x="49.6336%" y="335.50"></text></g><g><title>[unknown] (33 samples, 0.05%)</title><rect x="49.4110%" y="309" width="0.0476%" height="15" fill="rgb(236,137,7)" fg:x="34229" fg:w="33"/><text x="49.6610%" y="319.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.4413%" y="293" width="0.0173%" height="15" fill="rgb(235,127,16)" fg:x="34250" fg:w="12"/><text x="49.6913%" y="303.50"></text></g><g><title>[[ext4]] (142 samples, 0.20%)</title><rect x="49.2768%" y="421" width="0.2050%" height="15" fill="rgb(250,192,54)" fg:x="34136" fg:w="142"/><text x="49.5268%" y="431.50"></text></g><g><title>[unknown] (137 samples, 0.20%)</title><rect x="49.2840%" y="405" width="0.1978%" height="15" fill="rgb(218,98,20)" fg:x="34141" fg:w="137"/><text x="49.5340%" y="415.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="49.4587%" y="389" width="0.0231%" height="15" fill="rgb(230,176,47)" fg:x="34262" fg:w="16"/><text x="49.7087%" y="399.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="49.4673%" y="373" width="0.0144%" height="15" fill="rgb(244,2,33)" fg:x="34268" fg:w="10"/><text x="49.7173%" y="383.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (166 samples, 0.24%)</title><rect x="49.2537%" y="549" width="0.2396%" height="15" fill="rgb(231,100,17)" fg:x="34120" fg:w="166"/><text x="49.5037%" y="559.50"></text></g><g><title>new_do_write (165 samples, 0.24%)</title><rect x="49.2551%" y="533" width="0.2382%" height="15" fill="rgb(245,23,12)" fg:x="34121" fg:w="165"/><text x="49.5051%" y="543.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (163 samples, 0.24%)</title><rect x="49.2580%" y="517" width="0.2353%" height="15" fill="rgb(249,55,22)" fg:x="34123" fg:w="163"/><text x="49.5080%" y="527.50"></text></g><g><title>__GI___libc_write (162 samples, 0.23%)</title><rect x="49.2595%" y="501" width="0.2339%" height="15" fill="rgb(207,134,9)" fg:x="34124" fg:w="162"/><text x="49.5095%" y="511.50"></text></g><g><title>[unknown] (162 samples, 0.23%)</title><rect x="49.2595%" y="485" width="0.2339%" height="15" fill="rgb(218,134,0)" fg:x="34124" fg:w="162"/><text x="49.5095%" y="495.50"></text></g><g><title>[unknown] (162 samples, 0.23%)</title><rect x="49.2595%" y="469" width="0.2339%" height="15" fill="rgb(213,212,33)" fg:x="34124" fg:w="162"/><text x="49.5095%" y="479.50"></text></g><g><title>[unknown] (162 samples, 0.23%)</title><rect x="49.2595%" y="453" width="0.2339%" height="15" fill="rgb(252,106,18)" fg:x="34124" fg:w="162"/><text x="49.5095%" y="463.50"></text></g><g><title>[unknown] (158 samples, 0.23%)</title><rect x="49.2652%" y="437" width="0.2281%" height="15" fill="rgb(208,126,42)" fg:x="34128" fg:w="158"/><text x="49.5152%" y="447.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.4818%" y="421" width="0.0115%" height="15" fill="rgb(246,175,29)" fg:x="34278" fg:w="8"/><text x="49.7318%" y="431.50"></text></g><g><title>_IO_fwrite (181 samples, 0.26%)</title><rect x="49.2349%" y="581" width="0.2613%" height="15" fill="rgb(215,13,50)" fg:x="34107" fg:w="181"/><text x="49.4849%" y="591.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (168 samples, 0.24%)</title><rect x="49.2537%" y="565" width="0.2425%" height="15" fill="rgb(216,172,15)" fg:x="34120" fg:w="168"/><text x="49.5037%" y="575.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (23 samples, 0.03%)</title><rect x="49.4962%" y="581" width="0.0332%" height="15" fill="rgb(212,103,13)" fg:x="34288" fg:w="23"/><text x="49.7462%" y="591.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (23 samples, 0.03%)</title><rect x="49.4962%" y="565" width="0.0332%" height="15" fill="rgb(231,171,36)" fg:x="34288" fg:w="23"/><text x="49.7462%" y="575.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (23 samples, 0.03%)</title><rect x="49.4962%" y="549" width="0.0332%" height="15" fill="rgb(250,123,20)" fg:x="34288" fg:w="23"/><text x="49.7462%" y="559.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (23 samples, 0.03%)</title><rect x="49.4962%" y="533" width="0.0332%" height="15" fill="rgb(212,53,50)" fg:x="34288" fg:w="23"/><text x="49.7462%" y="543.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (23 samples, 0.03%)</title><rect x="49.4962%" y="517" width="0.0332%" height="15" fill="rgb(243,54,12)" fg:x="34288" fg:w="23"/><text x="49.7462%" y="527.50"></text></g><g><title>AutoFile::write (267 samples, 0.39%)</title><rect x="49.2118%" y="597" width="0.3854%" height="15" fill="rgb(234,101,34)" fg:x="34091" fg:w="267"/><text x="49.4618%" y="607.50"></text></g><g><title>util::Xor (47 samples, 0.07%)</title><rect x="49.5294%" y="581" width="0.0678%" height="15" fill="rgb(254,67,22)" fg:x="34311" fg:w="47"/><text x="49.7794%" y="591.50"></text></g><g><title>std::operator^= (19 samples, 0.03%)</title><rect x="49.5698%" y="565" width="0.0274%" height="15" fill="rgb(250,35,47)" fg:x="34339" fg:w="19"/><text x="49.8198%" y="575.50"></text></g><g><title>std::operator^ (19 samples, 0.03%)</title><rect x="49.5698%" y="549" width="0.0274%" height="15" fill="rgb(226,126,38)" fg:x="34339" fg:w="19"/><text x="49.8198%" y="559.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="597" width="0.0101%" height="15" fill="rgb(216,138,53)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="581" width="0.0101%" height="15" fill="rgb(246,199,43)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="565" width="0.0101%" height="15" fill="rgb(232,125,11)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="549" width="0.0101%" height="15" fill="rgb(218,219,45)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="533" width="0.0101%" height="15" fill="rgb(216,102,54)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="543.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="517" width="0.0101%" height="15" fill="rgb(250,228,7)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="501" width="0.0101%" height="15" fill="rgb(226,125,25)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="485" width="0.0101%" height="15" fill="rgb(224,165,27)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="495.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="469" width="0.0101%" height="15" fill="rgb(233,86,3)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="479.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="453" width="0.0101%" height="15" fill="rgb(228,116,20)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="463.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (7 samples, 0.01%)</title><rect x="49.5973%" y="437" width="0.0101%" height="15" fill="rgb(209,192,17)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="421" width="0.0101%" height="15" fill="rgb(224,88,34)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="405" width="0.0101%" height="15" fill="rgb(233,38,6)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="415.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="389" width="0.0101%" height="15" fill="rgb(212,59,30)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="399.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="373" width="0.0101%" height="15" fill="rgb(213,80,3)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="383.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="357" width="0.0101%" height="15" fill="rgb(251,178,7)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="341" width="0.0101%" height="15" fill="rgb(213,154,26)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="351.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="325" width="0.0101%" height="15" fill="rgb(238,165,49)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="335.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="309" width="0.0101%" height="15" fill="rgb(248,91,46)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="319.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="293" width="0.0101%" height="15" fill="rgb(244,21,52)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="303.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="277" width="0.0101%" height="15" fill="rgb(247,122,20)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="287.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="261" width="0.0101%" height="15" fill="rgb(218,27,9)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="271.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="245" width="0.0101%" height="15" fill="rgb(246,7,6)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="255.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="229" width="0.0101%" height="15" fill="rgb(227,135,54)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="239.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="213" width="0.0101%" height="15" fill="rgb(247,14,11)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="223.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="197" width="0.0101%" height="15" fill="rgb(206,149,34)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="207.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="181" width="0.0101%" height="15" fill="rgb(227,228,4)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="191.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="165" width="0.0101%" height="15" fill="rgb(238,218,28)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="175.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (7 samples, 0.01%)</title><rect x="49.5973%" y="149" width="0.0101%" height="15" fill="rgb(252,86,40)" fg:x="34358" fg:w="7"/><text x="49.8473%" y="159.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (276 samples, 0.40%)</title><rect x="49.2118%" y="613" width="0.3984%" height="15" fill="rgb(251,225,11)" fg:x="34091" fg:w="276"/><text x="49.4618%" y="623.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="49.6593%" y="533" width="0.0173%" height="15" fill="rgb(206,46,49)" fg:x="34401" fg:w="12"/><text x="49.9093%" y="543.50"></text></g><g><title>AutoFile::write (46 samples, 0.07%)</title><rect x="49.6117%" y="565" width="0.0664%" height="15" fill="rgb(245,128,24)" fg:x="34368" fg:w="46"/><text x="49.8617%" y="575.50"></text></g><g><title>_IO_fwrite (45 samples, 0.06%)</title><rect x="49.6131%" y="549" width="0.0650%" height="15" fill="rgb(219,177,34)" fg:x="34369" fg:w="45"/><text x="49.8631%" y="559.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (405 samples, 0.58%)</title><rect x="49.0949%" y="837" width="0.5846%" height="15" fill="rgb(218,60,48)" fg:x="34010" fg:w="405"/><text x="49.3449%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (405 samples, 0.58%)</title><rect x="49.0949%" y="821" width="0.5846%" height="15" fill="rgb(221,11,5)" fg:x="34010" fg:w="405"/><text x="49.3449%" y="831.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (405 samples, 0.58%)</title><rect x="49.0949%" y="805" width="0.5846%" height="15" fill="rgb(220,148,13)" fg:x="34010" fg:w="405"/><text x="49.3449%" y="815.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (405 samples, 0.58%)</title><rect x="49.0949%" y="789" width="0.5846%" height="15" fill="rgb(210,16,3)" fg:x="34010" fg:w="405"/><text x="49.3449%" y="799.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (405 samples, 0.58%)</title><rect x="49.0949%" y="773" width="0.5846%" height="15" fill="rgb(236,80,2)" fg:x="34010" fg:w="405"/><text x="49.3449%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (405 samples, 0.58%)</title><rect x="49.0949%" y="757" width="0.5846%" height="15" fill="rgb(239,129,19)" fg:x="34010" fg:w="405"/><text x="49.3449%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (405 samples, 0.58%)</title><rect x="49.0949%" y="741" width="0.5846%" height="15" fill="rgb(220,106,35)" fg:x="34010" fg:w="405"/><text x="49.3449%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (325 samples, 0.47%)</title><rect x="49.2104%" y="725" width="0.4692%" height="15" fill="rgb(252,139,45)" fg:x="34090" fg:w="325"/><text x="49.4604%" y="735.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (325 samples, 0.47%)</title><rect x="49.2104%" y="709" width="0.4692%" height="15" fill="rgb(229,8,36)" fg:x="34090" fg:w="325"/><text x="49.4604%" y="719.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (325 samples, 0.47%)</title><rect x="49.2104%" y="693" width="0.4692%" height="15" fill="rgb(230,126,33)" fg:x="34090" fg:w="325"/><text x="49.4604%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (325 samples, 0.47%)</title><rect x="49.2104%" y="677" width="0.4692%" height="15" fill="rgb(239,140,21)" fg:x="34090" fg:w="325"/><text x="49.4604%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (325 samples, 0.47%)</title><rect x="49.2104%" y="661" width="0.4692%" height="15" fill="rgb(254,104,9)" fg:x="34090" fg:w="325"/><text x="49.4604%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (325 samples, 0.47%)</title><rect x="49.2104%" y="645" width="0.4692%" height="15" fill="rgb(239,52,14)" fg:x="34090" fg:w="325"/><text x="49.4604%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (325 samples, 0.47%)</title><rect x="49.2104%" y="629" width="0.4692%" height="15" fill="rgb(208,227,44)" fg:x="34090" fg:w="325"/><text x="49.4604%" y="639.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.07%)</title><rect x="49.6102%" y="613" width="0.0693%" height="15" fill="rgb(246,18,19)" fg:x="34367" fg:w="48"/><text x="49.8602%" y="623.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.07%)</title><rect x="49.6117%" y="597" width="0.0678%" height="15" fill="rgb(235,228,25)" fg:x="34368" fg:w="47"/><text x="49.8617%" y="607.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (47 samples, 0.07%)</title><rect x="49.6117%" y="581" width="0.0678%" height="15" fill="rgb(240,156,20)" fg:x="34368" fg:w="47"/><text x="49.8617%" y="591.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (438 samples, 0.63%)</title><rect x="49.0949%" y="917" width="0.6323%" height="15" fill="rgb(224,8,20)" fg:x="34010" fg:w="438"/><text x="49.3449%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (438 samples, 0.63%)</title><rect x="49.0949%" y="901" width="0.6323%" height="15" fill="rgb(214,12,52)" fg:x="34010" fg:w="438"/><text x="49.3449%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (438 samples, 0.63%)</title><rect x="49.0949%" y="885" width="0.6323%" height="15" fill="rgb(211,220,47)" fg:x="34010" fg:w="438"/><text x="49.3449%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (438 samples, 0.63%)</title><rect x="49.0949%" y="869" width="0.6323%" height="15" fill="rgb(250,173,5)" fg:x="34010" fg:w="438"/><text x="49.3449%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (438 samples, 0.63%)</title><rect x="49.0949%" y="853" width="0.6323%" height="15" fill="rgb(250,125,52)" fg:x="34010" fg:w="438"/><text x="49.3449%" y="863.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.05%)</title><rect x="49.6795%" y="837" width="0.0476%" height="15" fill="rgb(209,133,18)" fg:x="34415" fg:w="33"/><text x="49.9295%" y="847.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.05%)</title><rect x="49.6810%" y="821" width="0.0462%" height="15" fill="rgb(216,173,22)" fg:x="34416" fg:w="32"/><text x="49.9310%" y="831.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (32 samples, 0.05%)</title><rect x="49.6810%" y="805" width="0.0462%" height="15" fill="rgb(205,3,22)" fg:x="34416" fg:w="32"/><text x="49.9310%" y="815.50"></text></g><g><title>AutoFile::write (32 samples, 0.05%)</title><rect x="49.6810%" y="789" width="0.0462%" height="15" fill="rgb(248,22,20)" fg:x="34416" fg:w="32"/><text x="49.9310%" y="799.50"></text></g><g><title>_IO_fwrite (32 samples, 0.05%)</title><rect x="49.6810%" y="773" width="0.0462%" height="15" fill="rgb(233,6,29)" fg:x="34416" fg:w="32"/><text x="49.9310%" y="783.50"></text></g><g><title>[[ext4]] (16 samples, 0.02%)</title><rect x="49.9004%" y="549" width="0.0231%" height="15" fill="rgb(240,22,54)" fg:x="34568" fg:w="16"/><text x="50.1504%" y="559.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="49.9062%" y="533" width="0.0173%" height="15" fill="rgb(231,133,32)" fg:x="34572" fg:w="12"/><text x="50.1562%" y="543.50"></text></g><g><title>[[ext4]] (69 samples, 0.10%)</title><rect x="49.8946%" y="565" width="0.0996%" height="15" fill="rgb(248,193,4)" fg:x="34564" fg:w="69"/><text x="50.1446%" y="575.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="49.9235%" y="549" width="0.0707%" height="15" fill="rgb(211,178,46)" fg:x="34584" fg:w="49"/><text x="50.1735%" y="559.50"></text></g><g><title>[unknown] (41 samples, 0.06%)</title><rect x="49.9350%" y="533" width="0.0592%" height="15" fill="rgb(224,5,42)" fg:x="34592" fg:w="41"/><text x="50.1850%" y="543.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="49.9423%" y="517" width="0.0520%" height="15" fill="rgb(239,176,25)" fg:x="34597" fg:w="36"/><text x="50.1923%" y="527.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="49.9437%" y="501" width="0.0505%" height="15" fill="rgb(245,187,50)" fg:x="34598" fg:w="35"/><text x="50.1937%" y="511.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="49.9567%" y="485" width="0.0375%" height="15" fill="rgb(248,24,15)" fg:x="34607" fg:w="26"/><text x="50.2067%" y="495.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="49.9783%" y="469" width="0.0159%" height="15" fill="rgb(205,166,13)" fg:x="34622" fg:w="11"/><text x="50.2283%" y="479.50"></text></g><g><title>[[ext4]] (350 samples, 0.51%)</title><rect x="49.8874%" y="581" width="0.5052%" height="15" fill="rgb(208,114,23)" fg:x="34559" fg:w="350"/><text x="50.1374%" y="591.50"></text></g><g><title>[unknown] (276 samples, 0.40%)</title><rect x="49.9942%" y="565" width="0.3984%" height="15" fill="rgb(239,127,18)" fg:x="34633" fg:w="276"/><text x="50.2442%" y="575.50"></text></g><g><title>[unknown] (266 samples, 0.38%)</title><rect x="50.0087%" y="549" width="0.3840%" height="15" fill="rgb(219,154,28)" fg:x="34643" fg:w="266"/><text x="50.2587%" y="559.50"></text></g><g><title>[unknown] (222 samples, 0.32%)</title><rect x="50.0722%" y="533" width="0.3205%" height="15" fill="rgb(225,157,23)" fg:x="34687" fg:w="222"/><text x="50.3222%" y="543.50"></text></g><g><title>[unknown] (181 samples, 0.26%)</title><rect x="50.1314%" y="517" width="0.2613%" height="15" fill="rgb(219,8,6)" fg:x="34728" fg:w="181"/><text x="50.3814%" y="527.50"></text></g><g><title>[unknown] (121 samples, 0.17%)</title><rect x="50.2180%" y="501" width="0.1747%" height="15" fill="rgb(212,47,6)" fg:x="34788" fg:w="121"/><text x="50.4680%" y="511.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="50.3392%" y="485" width="0.0534%" height="15" fill="rgb(224,190,4)" fg:x="34872" fg:w="37"/><text x="50.5892%" y="495.50"></text></g><g><title>[[ext4]] (439 samples, 0.63%)</title><rect x="49.8427%" y="613" width="0.6337%" height="15" fill="rgb(239,183,29)" fg:x="34528" fg:w="439"/><text x="50.0927%" y="623.50"></text></g><g><title>[unknown] (423 samples, 0.61%)</title><rect x="49.8658%" y="597" width="0.6106%" height="15" fill="rgb(213,57,7)" fg:x="34544" fg:w="423"/><text x="50.1158%" y="607.50"></text></g><g><title>[unknown] (58 samples, 0.08%)</title><rect x="50.3926%" y="581" width="0.0837%" height="15" fill="rgb(216,148,1)" fg:x="34909" fg:w="58"/><text x="50.6426%" y="591.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="50.4201%" y="565" width="0.0563%" height="15" fill="rgb(236,182,29)" fg:x="34928" fg:w="39"/><text x="50.6701%" y="575.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (505 samples, 0.73%)</title><rect x="49.7763%" y="741" width="0.7290%" height="15" fill="rgb(244,120,48)" fg:x="34482" fg:w="505"/><text x="50.0263%" y="751.50"></text></g><g><title>new_do_write (503 samples, 0.73%)</title><rect x="49.7791%" y="725" width="0.7261%" height="15" fill="rgb(206,71,34)" fg:x="34484" fg:w="503"/><text x="50.0291%" y="735.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (503 samples, 0.73%)</title><rect x="49.7791%" y="709" width="0.7261%" height="15" fill="rgb(242,32,6)" fg:x="34484" fg:w="503"/><text x="50.0291%" y="719.50"></text></g><g><title>__GI___libc_write (499 samples, 0.72%)</title><rect x="49.7849%" y="693" width="0.7203%" height="15" fill="rgb(241,35,3)" fg:x="34488" fg:w="499"/><text x="50.0349%" y="703.50"></text></g><g><title>[unknown] (499 samples, 0.72%)</title><rect x="49.7849%" y="677" width="0.7203%" height="15" fill="rgb(222,62,19)" fg:x="34488" fg:w="499"/><text x="50.0349%" y="687.50"></text></g><g><title>[unknown] (496 samples, 0.72%)</title><rect x="49.7892%" y="661" width="0.7160%" height="15" fill="rgb(223,110,41)" fg:x="34491" fg:w="496"/><text x="50.0392%" y="671.50"></text></g><g><title>[unknown] (494 samples, 0.71%)</title><rect x="49.7921%" y="645" width="0.7131%" height="15" fill="rgb(208,224,4)" fg:x="34493" fg:w="494"/><text x="50.0421%" y="655.50"></text></g><g><title>[unknown] (484 samples, 0.70%)</title><rect x="49.8066%" y="629" width="0.6987%" height="15" fill="rgb(241,137,19)" fg:x="34503" fg:w="484"/><text x="50.0566%" y="639.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="50.4764%" y="613" width="0.0289%" height="15" fill="rgb(244,24,17)" fg:x="34967" fg:w="20"/><text x="50.7264%" y="623.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (509 samples, 0.73%)</title><rect x="49.7734%" y="757" width="0.7348%" height="15" fill="rgb(245,178,49)" fg:x="34480" fg:w="509"/><text x="50.0234%" y="767.50"></text></g><g><title>_IO_fwrite (515 samples, 0.74%)</title><rect x="49.7676%" y="773" width="0.7434%" height="15" fill="rgb(219,160,38)" fg:x="34476" fg:w="515"/><text x="50.0176%" y="783.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (52 samples, 0.08%)</title><rect x="50.5110%" y="773" width="0.0751%" height="15" fill="rgb(228,137,14)" fg:x="34991" fg:w="52"/><text x="50.7610%" y="783.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (52 samples, 0.08%)</title><rect x="50.5110%" y="757" width="0.0751%" height="15" fill="rgb(237,134,11)" fg:x="34991" fg:w="52"/><text x="50.7610%" y="767.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (52 samples, 0.08%)</title><rect x="50.5110%" y="741" width="0.0751%" height="15" fill="rgb(211,126,44)" fg:x="34991" fg:w="52"/><text x="50.7610%" y="751.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (52 samples, 0.08%)</title><rect x="50.5110%" y="725" width="0.0751%" height="15" fill="rgb(226,171,33)" fg:x="34991" fg:w="52"/><text x="50.7610%" y="735.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (52 samples, 0.08%)</title><rect x="50.5110%" y="709" width="0.0751%" height="15" fill="rgb(253,99,13)" fg:x="34991" fg:w="52"/><text x="50.7610%" y="719.50"></text></g><g><title>AutoFile::write (823 samples, 1.19%)</title><rect x="49.7315%" y="789" width="1.1880%" height="15" fill="rgb(244,48,7)" fg:x="34451" fg:w="823"/><text x="49.9815%" y="799.50"></text></g><g><title>util::Xor (231 samples, 0.33%)</title><rect x="50.5861%" y="773" width="0.3335%" height="15" fill="rgb(244,217,54)" fg:x="35043" fg:w="231"/><text x="50.8361%" y="783.50"></text></g><g><title>std::operator^= (77 samples, 0.11%)</title><rect x="50.8084%" y="757" width="0.1112%" height="15" fill="rgb(224,15,18)" fg:x="35197" fg:w="77"/><text x="51.0584%" y="767.50"></text></g><g><title>std::operator^ (77 samples, 0.11%)</title><rect x="50.8084%" y="741" width="0.1112%" height="15" fill="rgb(244,99,12)" fg:x="35197" fg:w="77"/><text x="51.0584%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="789" width="0.0101%" height="15" fill="rgb(233,226,8)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="773" width="0.0101%" height="15" fill="rgb(229,211,3)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="757" width="0.0101%" height="15" fill="rgb(216,140,21)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="767.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="741" width="0.0101%" height="15" fill="rgb(234,122,30)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="725" width="0.0101%" height="15" fill="rgb(236,25,46)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="709" width="0.0101%" height="15" fill="rgb(217,52,54)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="693" width="0.0101%" height="15" fill="rgb(222,29,26)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="677" width="0.0101%" height="15" fill="rgb(216,177,29)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="687.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="661" width="0.0101%" height="15" fill="rgb(247,136,51)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="671.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="645" width="0.0101%" height="15" fill="rgb(231,47,47)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="655.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (7 samples, 0.01%)</title><rect x="50.9195%" y="629" width="0.0101%" height="15" fill="rgb(211,192,36)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="613" width="0.0101%" height="15" fill="rgb(229,156,32)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="597" width="0.0101%" height="15" fill="rgb(248,213,20)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="581" width="0.0101%" height="15" fill="rgb(217,64,7)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="591.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="565" width="0.0101%" height="15" fill="rgb(232,142,8)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="575.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="549" width="0.0101%" height="15" fill="rgb(224,92,44)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (7 samples, 0.01%)</title><rect x="50.9195%" y="533" width="0.0101%" height="15" fill="rgb(214,169,17)" fg:x="35274" fg:w="7"/><text x="51.1695%" y="543.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (835 samples, 1.21%)</title><rect x="49.7315%" y="805" width="1.2054%" height="15" fill="rgb(210,59,37)" fg:x="34451" fg:w="835"/><text x="49.9815%" y="815.50"></text></g><g><title>_IO_fwrite (39 samples, 0.06%)</title><rect x="50.9397%" y="741" width="0.0563%" height="15" fill="rgb(214,116,48)" fg:x="35288" fg:w="39"/><text x="51.1897%" y="751.50"></text></g><g><title>AutoFile::write (40 samples, 0.06%)</title><rect x="50.9397%" y="757" width="0.0577%" height="15" fill="rgb(244,191,6)" fg:x="35288" fg:w="40"/><text x="51.1897%" y="767.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (880 samples, 1.27%)</title><rect x="49.7301%" y="837" width="1.2703%" height="15" fill="rgb(241,50,52)" fg:x="34450" fg:w="880"/><text x="49.9801%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (880 samples, 1.27%)</title><rect x="49.7301%" y="821" width="1.2703%" height="15" fill="rgb(236,75,39)" fg:x="34450" fg:w="880"/><text x="49.9801%" y="831.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (43 samples, 0.06%)</title><rect x="50.9383%" y="805" width="0.0621%" height="15" fill="rgb(236,99,0)" fg:x="35287" fg:w="43"/><text x="51.1883%" y="815.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (42 samples, 0.06%)</title><rect x="50.9397%" y="789" width="0.0606%" height="15" fill="rgb(207,202,15)" fg:x="35288" fg:w="42"/><text x="51.1897%" y="799.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (42 samples, 0.06%)</title><rect x="50.9397%" y="773" width="0.0606%" height="15" fill="rgb(233,207,14)" fg:x="35288" fg:w="42"/><text x="51.1897%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (922 samples, 1.33%)</title><rect x="49.7272%" y="917" width="1.3309%" height="15" fill="rgb(226,27,51)" fg:x="34448" fg:w="922"/><text x="49.9772%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (922 samples, 1.33%)</title><rect x="49.7272%" y="901" width="1.3309%" height="15" fill="rgb(206,104,42)" fg:x="34448" fg:w="922"/><text x="49.9772%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (922 samples, 1.33%)</title><rect x="49.7272%" y="885" width="1.3309%" height="15" fill="rgb(212,225,4)" fg:x="34448" fg:w="922"/><text x="49.9772%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (922 samples, 1.33%)</title><rect x="49.7272%" y="869" width="1.3309%" height="15" fill="rgb(233,96,42)" fg:x="34448" fg:w="922"/><text x="49.9772%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (922 samples, 1.33%)</title><rect x="49.7272%" y="853" width="1.3309%" height="15" fill="rgb(229,21,32)" fg:x="34448" fg:w="922"/><text x="49.9772%" y="863.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="51.0004%" y="837" width="0.0577%" height="15" fill="rgb(226,216,24)" fg:x="35330" fg:w="40"/><text x="51.2504%" y="847.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="51.0004%" y="821" width="0.0577%" height="15" fill="rgb(221,163,17)" fg:x="35330" fg:w="40"/><text x="51.2504%" y="831.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (40 samples, 0.06%)</title><rect x="51.0004%" y="805" width="0.0577%" height="15" fill="rgb(216,216,42)" fg:x="35330" fg:w="40"/><text x="51.2504%" y="815.50"></text></g><g><title>AutoFile::write (40 samples, 0.06%)</title><rect x="51.0004%" y="789" width="0.0577%" height="15" fill="rgb(240,118,7)" fg:x="35330" fg:w="40"/><text x="51.2504%" y="799.50"></text></g><g><title>_IO_fwrite (38 samples, 0.05%)</title><rect x="51.0033%" y="773" width="0.0549%" height="15" fill="rgb(221,67,37)" fg:x="35332" fg:w="38"/><text x="51.2533%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (13 samples, 0.02%)</title><rect x="51.0581%" y="917" width="0.0188%" height="15" fill="rgb(241,32,44)" fg:x="35370" fg:w="13"/><text x="51.3081%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="51.0581%" y="901" width="0.0188%" height="15" fill="rgb(235,204,43)" fg:x="35370" fg:w="13"/><text x="51.3081%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="51.0581%" y="885" width="0.0188%" height="15" fill="rgb(213,116,10)" fg:x="35370" fg:w="13"/><text x="51.3081%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (13 samples, 0.02%)</title><rect x="51.0581%" y="869" width="0.0188%" height="15" fill="rgb(239,15,48)" fg:x="35370" fg:w="13"/><text x="51.3081%" y="879.50"></text></g><g><title>AutoFile::write (13 samples, 0.02%)</title><rect x="51.0581%" y="853" width="0.0188%" height="15" fill="rgb(207,123,36)" fg:x="35370" fg:w="13"/><text x="51.3081%" y="863.50"></text></g><g><title>_IO_fwrite (13 samples, 0.02%)</title><rect x="51.0581%" y="837" width="0.0188%" height="15" fill="rgb(209,103,30)" fg:x="35370" fg:w="13"/><text x="51.3081%" y="847.50"></text></g><g><title>[[ext4]] (20 samples, 0.03%)</title><rect x="51.1144%" y="645" width="0.0289%" height="15" fill="rgb(238,100,19)" fg:x="35409" fg:w="20"/><text x="51.3644%" y="655.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="51.1216%" y="629" width="0.0217%" height="15" fill="rgb(244,30,14)" fg:x="35414" fg:w="15"/><text x="51.3716%" y="639.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="51.1231%" y="613" width="0.0202%" height="15" fill="rgb(249,174,6)" fg:x="35415" fg:w="14"/><text x="51.3731%" y="623.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="51.1260%" y="597" width="0.0173%" height="15" fill="rgb(235,213,41)" fg:x="35417" fg:w="12"/><text x="51.3760%" y="607.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="51.1274%" y="581" width="0.0159%" height="15" fill="rgb(213,118,6)" fg:x="35418" fg:w="11"/><text x="51.3774%" y="591.50"></text></g><g><title>[[ext4]] (22 samples, 0.03%)</title><rect x="51.1130%" y="677" width="0.0318%" height="15" fill="rgb(235,44,51)" fg:x="35408" fg:w="22"/><text x="51.3630%" y="687.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="51.1144%" y="661" width="0.0303%" height="15" fill="rgb(217,9,53)" fg:x="35409" fg:w="21"/><text x="51.3644%" y="671.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (26 samples, 0.04%)</title><rect x="51.1101%" y="805" width="0.0375%" height="15" fill="rgb(237,172,34)" fg:x="35406" fg:w="26"/><text x="51.3601%" y="815.50"></text></g><g><title>new_do_write (25 samples, 0.04%)</title><rect x="51.1115%" y="789" width="0.0361%" height="15" fill="rgb(206,206,11)" fg:x="35407" fg:w="25"/><text x="51.3615%" y="799.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (25 samples, 0.04%)</title><rect x="51.1115%" y="773" width="0.0361%" height="15" fill="rgb(214,149,29)" fg:x="35407" fg:w="25"/><text x="51.3615%" y="783.50"></text></g><g><title>__GI___libc_write (25 samples, 0.04%)</title><rect x="51.1115%" y="757" width="0.0361%" height="15" fill="rgb(208,123,3)" fg:x="35407" fg:w="25"/><text x="51.3615%" y="767.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="51.1115%" y="741" width="0.0361%" height="15" fill="rgb(229,126,4)" fg:x="35407" fg:w="25"/><text x="51.3615%" y="751.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="51.1115%" y="725" width="0.0361%" height="15" fill="rgb(222,92,36)" fg:x="35407" fg:w="25"/><text x="51.3615%" y="735.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="51.1115%" y="709" width="0.0361%" height="15" fill="rgb(216,39,41)" fg:x="35407" fg:w="25"/><text x="51.3615%" y="719.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="51.1115%" y="693" width="0.0361%" height="15" fill="rgb(253,127,28)" fg:x="35407" fg:w="25"/><text x="51.3615%" y="703.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (2,187 samples, 3.16%)</title><rect x="48.0021%" y="1205" width="3.1570%" height="15" fill="rgb(249,152,51)" fg:x="33253" fg:w="2187"/><text x="48.2521%" y="1215.50">Aut..</text></g><g><title>void Serialize&lt;AutoFile, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (2,187 samples, 3.16%)</title><rect x="48.0021%" y="1189" width="3.1570%" height="15" fill="rgb(209,123,42)" fg:x="33253" fg:w="2187"/><text x="48.2521%" y="1199.50">voi..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;AutoFile&gt; (2,187 samples, 3.16%)</title><rect x="48.0021%" y="1173" width="3.1570%" height="15" fill="rgb(241,118,22)" fg:x="33253" fg:w="2187"/><text x="48.2521%" y="1183.50">voi..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock&gt; (2,187 samples, 3.16%)</title><rect x="48.0021%" y="1157" width="3.1570%" height="15" fill="rgb(208,25,7)" fg:x="33253" fg:w="2187"/><text x="48.2521%" y="1167.50">voi..</text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,187 samples, 3.16%)</title><rect x="48.0021%" y="1141" width="3.1570%" height="15" fill="rgb(243,144,39)" fg:x="33253" fg:w="2187"/><text x="48.2521%" y="1151.50">voi..</text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,187 samples, 3.16%)</title><rect x="48.0021%" y="1125" width="3.1570%" height="15" fill="rgb(250,50,5)" fg:x="33253" fg:w="2187"/><text x="48.2521%" y="1135.50">voi..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (2,187 samples, 3.16%)</title><rect x="48.0021%" y="1109" width="3.1570%" height="15" fill="rgb(207,67,11)" fg:x="33253" fg:w="2187"/><text x="48.2521%" y="1119.50">voi..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,187 samples, 3.16%)</title><rect x="48.0021%" y="1093" width="3.1570%" height="15" fill="rgb(245,204,40)" fg:x="33253" fg:w="2187"/><text x="48.2521%" y="1103.50">voi..</text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,038 samples, 2.94%)</title><rect x="48.2172%" y="1077" width="2.9419%" height="15" fill="rgb(238,228,24)" fg:x="33402" fg:w="2038"/><text x="48.4672%" y="1087.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2,038 samples, 2.94%)</title><rect x="48.2172%" y="1061" width="2.9419%" height="15" fill="rgb(217,116,22)" fg:x="33402" fg:w="2038"/><text x="48.4672%" y="1071.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2,038 samples, 2.94%)</title><rect x="48.2172%" y="1045" width="2.9419%" height="15" fill="rgb(234,98,12)" fg:x="33402" fg:w="2038"/><text x="48.4672%" y="1055.50">vo..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,038 samples, 2.94%)</title><rect x="48.2172%" y="1029" width="2.9419%" height="15" fill="rgb(242,170,50)" fg:x="33402" fg:w="2038"/><text x="48.4672%" y="1039.50">vo..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,038 samples, 2.94%)</title><rect x="48.2172%" y="1013" width="2.9419%" height="15" fill="rgb(235,7,5)" fg:x="33402" fg:w="2038"/><text x="48.4672%" y="1023.50">vo..</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2,038 samples, 2.94%)</title><rect x="48.2172%" y="997" width="2.9419%" height="15" fill="rgb(241,114,28)" fg:x="33402" fg:w="2038"/><text x="48.4672%" y="1007.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,038 samples, 2.94%)</title><rect x="48.2172%" y="981" width="2.9419%" height="15" fill="rgb(246,112,42)" fg:x="33402" fg:w="2038"/><text x="48.4672%" y="991.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,037 samples, 2.94%)</title><rect x="48.2187%" y="965" width="2.9405%" height="15" fill="rgb(248,228,14)" fg:x="33403" fg:w="2037"/><text x="48.4687%" y="975.50">vo..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,037 samples, 2.94%)</title><rect x="48.2187%" y="949" width="2.9405%" height="15" fill="rgb(208,133,18)" fg:x="33403" fg:w="2037"/><text x="48.4687%" y="959.50">vo..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,037 samples, 2.94%)</title><rect x="48.2187%" y="933" width="2.9405%" height="15" fill="rgb(207,35,49)" fg:x="33403" fg:w="2037"/><text x="48.4687%" y="943.50">vo..</text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (57 samples, 0.08%)</title><rect x="51.0769%" y="917" width="0.0823%" height="15" fill="rgb(205,68,36)" fg:x="35383" fg:w="57"/><text x="51.3269%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (56 samples, 0.08%)</title><rect x="51.0783%" y="901" width="0.0808%" height="15" fill="rgb(245,62,40)" fg:x="35384" fg:w="56"/><text x="51.3283%" y="911.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (56 samples, 0.08%)</title><rect x="51.0783%" y="885" width="0.0808%" height="15" fill="rgb(228,27,24)" fg:x="35384" fg:w="56"/><text x="51.3283%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (56 samples, 0.08%)</title><rect x="51.0783%" y="869" width="0.0808%" height="15" fill="rgb(253,19,12)" fg:x="35384" fg:w="56"/><text x="51.3283%" y="879.50"></text></g><g><title>AutoFile::write (56 samples, 0.08%)</title><rect x="51.0783%" y="853" width="0.0808%" height="15" fill="rgb(232,28,20)" fg:x="35384" fg:w="56"/><text x="51.3283%" y="863.50"></text></g><g><title>_IO_fwrite (56 samples, 0.08%)</title><rect x="51.0783%" y="837" width="0.0808%" height="15" fill="rgb(218,35,51)" fg:x="35384" fg:w="56"/><text x="51.3283%" y="847.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (34 samples, 0.05%)</title><rect x="51.1101%" y="821" width="0.0491%" height="15" fill="rgb(212,90,40)" fg:x="35406" fg:w="34"/><text x="51.3601%" y="831.50"></text></g><g><title>__fopen_internal (12 samples, 0.02%)</title><rect x="51.1794%" y="1173" width="0.0173%" height="15" fill="rgb(220,172,12)" fg:x="35454" fg:w="12"/><text x="51.4294%" y="1183.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="51.1794%" y="1157" width="0.0173%" height="15" fill="rgb(226,159,20)" fg:x="35454" fg:w="12"/><text x="51.4294%" y="1167.50"></text></g><g><title>_IO_file_open (12 samples, 0.02%)</title><rect x="51.1794%" y="1141" width="0.0173%" height="15" fill="rgb(234,205,16)" fg:x="35454" fg:w="12"/><text x="51.4294%" y="1151.50"></text></g><g><title>__GI___libc_open (12 samples, 0.02%)</title><rect x="51.1794%" y="1125" width="0.0173%" height="15" fill="rgb(207,9,39)" fg:x="35454" fg:w="12"/><text x="51.4294%" y="1135.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="51.1794%" y="1109" width="0.0173%" height="15" fill="rgb(249,143,15)" fg:x="35454" fg:w="12"/><text x="51.4294%" y="1119.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="51.1823%" y="1093" width="0.0144%" height="15" fill="rgb(253,133,29)" fg:x="35456" fg:w="10"/><text x="51.4323%" y="1103.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="51.1823%" y="1077" width="0.0144%" height="15" fill="rgb(221,187,0)" fg:x="35456" fg:w="10"/><text x="51.4323%" y="1087.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="51.1823%" y="1061" width="0.0144%" height="15" fill="rgb(205,204,26)" fg:x="35456" fg:w="10"/><text x="51.4323%" y="1071.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="51.1866%" y="1045" width="0.0101%" height="15" fill="rgb(224,68,54)" fg:x="35459" fg:w="7"/><text x="51.4366%" y="1055.50"></text></g><g><title>_IO_doallocbuf (22 samples, 0.03%)</title><rect x="51.2025%" y="1141" width="0.0318%" height="15" fill="rgb(209,67,4)" fg:x="35470" fg:w="22"/><text x="51.4525%" y="1151.50"></text></g><g><title>_IO_file_doallocate (22 samples, 0.03%)</title><rect x="51.2025%" y="1125" width="0.0318%" height="15" fill="rgb(228,229,18)" fg:x="35470" fg:w="22"/><text x="51.4525%" y="1135.50"></text></g><g><title>malloc (20 samples, 0.03%)</title><rect x="51.2054%" y="1109" width="0.0289%" height="15" fill="rgb(231,89,13)" fg:x="35472" fg:w="20"/><text x="51.4554%" y="1119.50"></text></g><g><title>_int_malloc (20 samples, 0.03%)</title><rect x="51.2054%" y="1093" width="0.0289%" height="15" fill="rgb(210,182,18)" fg:x="35472" fg:w="20"/><text x="51.4554%" y="1103.50"></text></g><g><title>malloc_consolidate (12 samples, 0.02%)</title><rect x="51.2169%" y="1077" width="0.0173%" height="15" fill="rgb(240,105,2)" fg:x="35480" fg:w="12"/><text x="51.4669%" y="1087.50"></text></g><g><title>node::BlockManager::OpenBlockFile (49 samples, 0.07%)</title><rect x="51.1678%" y="1205" width="0.0707%" height="15" fill="rgb(207,170,50)" fg:x="35446" fg:w="49"/><text x="51.4178%" y="1215.50"></text></g><g><title>FlatFileSeq::Open (49 samples, 0.07%)</title><rect x="51.1678%" y="1189" width="0.0707%" height="15" fill="rgb(232,133,24)" fg:x="35446" fg:w="49"/><text x="51.4178%" y="1199.50"></text></g><g><title>fseek (25 samples, 0.04%)</title><rect x="51.2025%" y="1173" width="0.0361%" height="15" fill="rgb(235,166,27)" fg:x="35470" fg:w="25"/><text x="51.4525%" y="1183.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (25 samples, 0.04%)</title><rect x="51.2025%" y="1157" width="0.0361%" height="15" fill="rgb(209,19,13)" fg:x="35470" fg:w="25"/><text x="51.4525%" y="1167.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (18 samples, 0.03%)</title><rect x="51.3006%" y="821" width="0.0260%" height="15" fill="rgb(226,79,39)" fg:x="35538" fg:w="18"/><text x="51.5506%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (18 samples, 0.03%)</title><rect x="51.3006%" y="805" width="0.0260%" height="15" fill="rgb(222,163,10)" fg:x="35538" fg:w="18"/><text x="51.5506%" y="815.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="51.3006%" y="789" width="0.0260%" height="15" fill="rgb(214,44,19)" fg:x="35538" fg:w="18"/><text x="51.5506%" y="799.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="51.3006%" y="773" width="0.0260%" height="15" fill="rgb(210,217,13)" fg:x="35538" fg:w="18"/><text x="51.5506%" y="783.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (18 samples, 0.03%)</title><rect x="51.3006%" y="757" width="0.0260%" height="15" fill="rgb(237,61,54)" fg:x="35538" fg:w="18"/><text x="51.5506%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (18 samples, 0.03%)</title><rect x="51.3006%" y="741" width="0.0260%" height="15" fill="rgb(226,184,24)" fg:x="35538" fg:w="18"/><text x="51.5506%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (18 samples, 0.03%)</title><rect x="51.3006%" y="725" width="0.0260%" height="15" fill="rgb(223,226,4)" fg:x="35538" fg:w="18"/><text x="51.5506%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (17 samples, 0.02%)</title><rect x="51.3021%" y="709" width="0.0245%" height="15" fill="rgb(210,26,41)" fg:x="35539" fg:w="17"/><text x="51.5521%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="51.3021%" y="693" width="0.0245%" height="15" fill="rgb(220,221,6)" fg:x="35539" fg:w="17"/><text x="51.5521%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="51.3021%" y="677" width="0.0245%" height="15" fill="rgb(225,89,49)" fg:x="35539" fg:w="17"/><text x="51.5521%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (17 samples, 0.02%)</title><rect x="51.3021%" y="661" width="0.0245%" height="15" fill="rgb(218,70,45)" fg:x="35539" fg:w="17"/><text x="51.5521%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.02%)</title><rect x="51.3021%" y="645" width="0.0245%" height="15" fill="rgb(238,166,21)" fg:x="35539" fg:w="17"/><text x="51.5521%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.02%)</title><rect x="51.3021%" y="629" width="0.0245%" height="15" fill="rgb(224,141,44)" fg:x="35539" fg:w="17"/><text x="51.5521%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (8 samples, 0.01%)</title><rect x="51.3151%" y="613" width="0.0115%" height="15" fill="rgb(230,12,49)" fg:x="35548" fg:w="8"/><text x="51.5651%" y="623.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (55 samples, 0.08%)</title><rect x="51.2617%" y="901" width="0.0794%" height="15" fill="rgb(212,174,12)" fg:x="35511" fg:w="55"/><text x="51.5117%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (55 samples, 0.08%)</title><rect x="51.2617%" y="885" width="0.0794%" height="15" fill="rgb(246,67,9)" fg:x="35511" fg:w="55"/><text x="51.5117%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (55 samples, 0.08%)</title><rect x="51.2617%" y="869" width="0.0794%" height="15" fill="rgb(239,35,23)" fg:x="35511" fg:w="55"/><text x="51.5117%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (55 samples, 0.08%)</title><rect x="51.2617%" y="853" width="0.0794%" height="15" fill="rgb(211,167,0)" fg:x="35511" fg:w="55"/><text x="51.5117%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (54 samples, 0.08%)</title><rect x="51.2631%" y="837" width="0.0780%" height="15" fill="rgb(225,119,45)" fg:x="35512" fg:w="54"/><text x="51.5131%" y="847.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="51.3281%" y="821" width="0.0130%" height="15" fill="rgb(210,162,6)" fg:x="35557" fg:w="9"/><text x="51.5781%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (15 samples, 0.02%)</title><rect x="51.3613%" y="821" width="0.0217%" height="15" fill="rgb(208,118,35)" fg:x="35580" fg:w="15"/><text x="51.6113%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (15 samples, 0.02%)</title><rect x="51.3613%" y="805" width="0.0217%" height="15" fill="rgb(239,4,53)" fg:x="35580" fg:w="15"/><text x="51.6113%" y="815.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="51.3613%" y="789" width="0.0217%" height="15" fill="rgb(213,130,21)" fg:x="35580" fg:w="15"/><text x="51.6113%" y="799.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="51.3613%" y="773" width="0.0217%" height="15" fill="rgb(235,148,0)" fg:x="35580" fg:w="15"/><text x="51.6113%" y="783.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (15 samples, 0.02%)</title><rect x="51.3613%" y="757" width="0.0217%" height="15" fill="rgb(244,224,18)" fg:x="35580" fg:w="15"/><text x="51.6113%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (15 samples, 0.02%)</title><rect x="51.3613%" y="741" width="0.0217%" height="15" fill="rgb(211,214,4)" fg:x="35580" fg:w="15"/><text x="51.6113%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (15 samples, 0.02%)</title><rect x="51.3613%" y="725" width="0.0217%" height="15" fill="rgb(206,119,25)" fg:x="35580" fg:w="15"/><text x="51.6113%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (11 samples, 0.02%)</title><rect x="51.3670%" y="709" width="0.0159%" height="15" fill="rgb(243,93,47)" fg:x="35584" fg:w="11"/><text x="51.6170%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="51.3670%" y="693" width="0.0159%" height="15" fill="rgb(224,194,6)" fg:x="35584" fg:w="11"/><text x="51.6170%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="51.3670%" y="677" width="0.0159%" height="15" fill="rgb(243,229,6)" fg:x="35584" fg:w="11"/><text x="51.6170%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="51.3670%" y="661" width="0.0159%" height="15" fill="rgb(207,23,50)" fg:x="35584" fg:w="11"/><text x="51.6170%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="51.3670%" y="645" width="0.0159%" height="15" fill="rgb(253,192,32)" fg:x="35584" fg:w="11"/><text x="51.6170%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="51.3670%" y="629" width="0.0159%" height="15" fill="rgb(213,21,6)" fg:x="35584" fg:w="11"/><text x="51.6170%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (11 samples, 0.02%)</title><rect x="51.3670%" y="613" width="0.0159%" height="15" fill="rgb(243,151,13)" fg:x="35584" fg:w="11"/><text x="51.6170%" y="623.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="821" width="0.0115%" height="15" fill="rgb(233,165,41)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="805" width="0.0115%" height="15" fill="rgb(246,176,45)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="789" width="0.0115%" height="15" fill="rgb(217,170,52)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="773" width="0.0115%" height="15" fill="rgb(214,203,54)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="757" width="0.0115%" height="15" fill="rgb(248,215,49)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="767.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="741" width="0.0115%" height="15" fill="rgb(208,46,10)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="725" width="0.0115%" height="15" fill="rgb(254,5,31)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="709" width="0.0115%" height="15" fill="rgb(222,104,33)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="719.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="693" width="0.0115%" height="15" fill="rgb(248,49,16)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="703.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="51.3829%" y="677" width="0.0115%" height="15" fill="rgb(232,198,41)" fg:x="35595" fg:w="8"/><text x="51.6329%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (38 samples, 0.05%)</title><rect x="51.3411%" y="901" width="0.0549%" height="15" fill="rgb(214,125,3)" fg:x="35566" fg:w="38"/><text x="51.5911%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (38 samples, 0.05%)</title><rect x="51.3411%" y="885" width="0.0549%" height="15" fill="rgb(229,220,28)" fg:x="35566" fg:w="38"/><text x="51.5911%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (38 samples, 0.05%)</title><rect x="51.3411%" y="869" width="0.0549%" height="15" fill="rgb(222,64,37)" fg:x="35566" fg:w="38"/><text x="51.5911%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.05%)</title><rect x="51.3411%" y="853" width="0.0549%" height="15" fill="rgb(249,184,13)" fg:x="35566" fg:w="38"/><text x="51.5911%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (36 samples, 0.05%)</title><rect x="51.3439%" y="837" width="0.0520%" height="15" fill="rgb(252,176,6)" fg:x="35568" fg:w="36"/><text x="51.5939%" y="847.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (10 samples, 0.01%)</title><rect x="51.4724%" y="629" width="0.0144%" height="15" fill="rgb(228,153,7)" fg:x="35657" fg:w="10"/><text x="51.7224%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (10 samples, 0.01%)</title><rect x="51.4724%" y="613" width="0.0144%" height="15" fill="rgb(242,193,5)" fg:x="35657" fg:w="10"/><text x="51.7224%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="51.4724%" y="597" width="0.0144%" height="15" fill="rgb(232,140,9)" fg:x="35657" fg:w="10"/><text x="51.7224%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="51.4724%" y="581" width="0.0144%" height="15" fill="rgb(213,222,16)" fg:x="35657" fg:w="10"/><text x="51.7224%" y="591.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="51.4724%" y="565" width="0.0144%" height="15" fill="rgb(222,75,50)" fg:x="35657" fg:w="10"/><text x="51.7224%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="789" width="0.0491%" height="15" fill="rgb(205,180,2)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="773" width="0.0491%" height="15" fill="rgb(216,34,7)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="757" width="0.0491%" height="15" fill="rgb(253,16,32)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="767.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="741" width="0.0491%" height="15" fill="rgb(208,97,28)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="725" width="0.0491%" height="15" fill="rgb(225,92,11)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="709" width="0.0491%" height="15" fill="rgb(243,38,12)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="693" width="0.0491%" height="15" fill="rgb(208,139,16)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="677" width="0.0491%" height="15" fill="rgb(227,24,9)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="687.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="661" width="0.0491%" height="15" fill="rgb(206,62,11)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="671.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (34 samples, 0.05%)</title><rect x="51.4609%" y="645" width="0.0491%" height="15" fill="rgb(228,134,27)" fg:x="35649" fg:w="34"/><text x="51.7109%" y="655.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (16 samples, 0.02%)</title><rect x="51.4868%" y="629" width="0.0231%" height="15" fill="rgb(205,55,33)" fg:x="35667" fg:w="16"/><text x="51.7368%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="51.4868%" y="613" width="0.0231%" height="15" fill="rgb(243,75,43)" fg:x="35667" fg:w="16"/><text x="51.7368%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (16 samples, 0.02%)</title><rect x="51.4868%" y="597" width="0.0231%" height="15" fill="rgb(223,27,42)" fg:x="35667" fg:w="16"/><text x="51.7368%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="51.4868%" y="581" width="0.0231%" height="15" fill="rgb(232,189,33)" fg:x="35667" fg:w="16"/><text x="51.7368%" y="591.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="51.4868%" y="565" width="0.0231%" height="15" fill="rgb(210,9,39)" fg:x="35667" fg:w="16"/><text x="51.7368%" y="575.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="51.4926%" y="549" width="0.0173%" height="15" fill="rgb(242,85,26)" fg:x="35671" fg:w="12"/><text x="51.7426%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (12 samples, 0.02%)</title><rect x="51.4926%" y="533" width="0.0173%" height="15" fill="rgb(248,44,4)" fg:x="35671" fg:w="12"/><text x="51.7426%" y="543.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (72 samples, 0.10%)</title><rect x="51.4161%" y="821" width="0.1039%" height="15" fill="rgb(250,96,46)" fg:x="35618" fg:w="72"/><text x="51.6661%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (72 samples, 0.10%)</title><rect x="51.4161%" y="805" width="0.1039%" height="15" fill="rgb(229,116,26)" fg:x="35618" fg:w="72"/><text x="51.6661%" y="815.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="51.5099%" y="789" width="0.0101%" height="15" fill="rgb(246,94,34)" fg:x="35683" fg:w="7"/><text x="51.7599%" y="799.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="821" width="0.0130%" height="15" fill="rgb(251,73,21)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="805" width="0.0130%" height="15" fill="rgb(254,121,25)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="789" width="0.0130%" height="15" fill="rgb(215,161,49)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="773" width="0.0130%" height="15" fill="rgb(221,43,13)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="757" width="0.0130%" height="15" fill="rgb(249,5,37)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="767.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="741" width="0.0130%" height="15" fill="rgb(226,25,44)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="725" width="0.0130%" height="15" fill="rgb(238,189,16)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="709" width="0.0130%" height="15" fill="rgb(251,186,8)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="719.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="693" width="0.0130%" height="15" fill="rgb(254,34,31)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="703.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.01%)</title><rect x="51.5201%" y="677" width="0.0130%" height="15" fill="rgb(225,215,27)" fg:x="35690" fg:w="9"/><text x="51.7701%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (97 samples, 0.14%)</title><rect x="51.3959%" y="901" width="0.1400%" height="15" fill="rgb(221,192,48)" fg:x="35604" fg:w="97"/><text x="51.6459%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (97 samples, 0.14%)</title><rect x="51.3959%" y="885" width="0.1400%" height="15" fill="rgb(219,137,20)" fg:x="35604" fg:w="97"/><text x="51.6459%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (97 samples, 0.14%)</title><rect x="51.3959%" y="869" width="0.1400%" height="15" fill="rgb(219,84,11)" fg:x="35604" fg:w="97"/><text x="51.6459%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (97 samples, 0.14%)</title><rect x="51.3959%" y="853" width="0.1400%" height="15" fill="rgb(224,10,23)" fg:x="35604" fg:w="97"/><text x="51.6459%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (97 samples, 0.14%)</title><rect x="51.3959%" y="837" width="0.1400%" height="15" fill="rgb(248,22,39)" fg:x="35604" fg:w="97"/><text x="51.6459%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (207 samples, 0.30%)</title><rect x="51.2386%" y="1061" width="0.2988%" height="15" fill="rgb(212,154,20)" fg:x="35495" fg:w="207"/><text x="51.4886%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (207 samples, 0.30%)</title><rect x="51.2386%" y="1045" width="0.2988%" height="15" fill="rgb(236,199,50)" fg:x="35495" fg:w="207"/><text x="51.4886%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (207 samples, 0.30%)</title><rect x="51.2386%" y="1029" width="0.2988%" height="15" fill="rgb(211,9,17)" fg:x="35495" fg:w="207"/><text x="51.4886%" y="1039.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (207 samples, 0.30%)</title><rect x="51.2386%" y="1013" width="0.2988%" height="15" fill="rgb(243,216,36)" fg:x="35495" fg:w="207"/><text x="51.4886%" y="1023.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (207 samples, 0.30%)</title><rect x="51.2386%" y="997" width="0.2988%" height="15" fill="rgb(250,2,10)" fg:x="35495" fg:w="207"/><text x="51.4886%" y="1007.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (203 samples, 0.29%)</title><rect x="51.2443%" y="981" width="0.2930%" height="15" fill="rgb(226,50,48)" fg:x="35499" fg:w="203"/><text x="51.4943%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (203 samples, 0.29%)</title><rect x="51.2443%" y="965" width="0.2930%" height="15" fill="rgb(243,81,16)" fg:x="35499" fg:w="203"/><text x="51.4943%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (203 samples, 0.29%)</title><rect x="51.2443%" y="949" width="0.2930%" height="15" fill="rgb(250,14,2)" fg:x="35499" fg:w="203"/><text x="51.4943%" y="959.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (203 samples, 0.29%)</title><rect x="51.2443%" y="933" width="0.2930%" height="15" fill="rgb(233,135,29)" fg:x="35499" fg:w="203"/><text x="51.4943%" y="943.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (203 samples, 0.29%)</title><rect x="51.2443%" y="917" width="0.2930%" height="15" fill="rgb(224,64,43)" fg:x="35499" fg:w="203"/><text x="51.4943%" y="927.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (2,527 samples, 3.65%)</title><rect x="48.0021%" y="1221" width="3.6478%" height="15" fill="rgb(238,84,13)" fg:x="33253" fg:w="2527"/><text x="48.2521%" y="1231.50">node..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (285 samples, 0.41%)</title><rect x="51.2386%" y="1205" width="0.4114%" height="15" fill="rgb(253,48,26)" fg:x="35495" fg:w="285"/><text x="51.4886%" y="1215.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (285 samples, 0.41%)</title><rect x="51.2386%" y="1189" width="0.4114%" height="15" fill="rgb(205,223,31)" fg:x="35495" fg:w="285"/><text x="51.4886%" y="1199.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (285 samples, 0.41%)</title><rect x="51.2386%" y="1173" width="0.4114%" height="15" fill="rgb(221,41,32)" fg:x="35495" fg:w="285"/><text x="51.4886%" y="1183.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (285 samples, 0.41%)</title><rect x="51.2386%" y="1157" width="0.4114%" height="15" fill="rgb(213,158,31)" fg:x="35495" fg:w="285"/><text x="51.4886%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (285 samples, 0.41%)</title><rect x="51.2386%" y="1141" width="0.4114%" height="15" fill="rgb(245,126,43)" fg:x="35495" fg:w="285"/><text x="51.4886%" y="1151.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (285 samples, 0.41%)</title><rect x="51.2386%" y="1125" width="0.4114%" height="15" fill="rgb(227,7,22)" fg:x="35495" fg:w="285"/><text x="51.4886%" y="1135.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (285 samples, 0.41%)</title><rect x="51.2386%" y="1109" width="0.4114%" height="15" fill="rgb(252,90,44)" fg:x="35495" fg:w="285"/><text x="51.4886%" y="1119.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (285 samples, 0.41%)</title><rect x="51.2386%" y="1093" width="0.4114%" height="15" fill="rgb(253,91,0)" fg:x="35495" fg:w="285"/><text x="51.4886%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (285 samples, 0.41%)</title><rect x="51.2386%" y="1077" width="0.4114%" height="15" fill="rgb(252,175,49)" fg:x="35495" fg:w="285"/><text x="51.4886%" y="1087.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (78 samples, 0.11%)</title><rect x="51.5374%" y="1061" width="0.1126%" height="15" fill="rgb(246,150,1)" fg:x="35702" fg:w="78"/><text x="51.7874%" y="1071.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.04%)</title><rect x="51.6067%" y="1045" width="0.0433%" height="15" fill="rgb(241,192,25)" fg:x="35750" fg:w="30"/><text x="51.8567%" y="1055.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (30 samples, 0.04%)</title><rect x="51.6067%" y="1029" width="0.0433%" height="15" fill="rgb(239,187,11)" fg:x="35750" fg:w="30"/><text x="51.8567%" y="1039.50"></text></g><g><title>SizeComputer::write (30 samples, 0.04%)</title><rect x="51.6067%" y="1013" width="0.0433%" height="15" fill="rgb(218,202,51)" fg:x="35750" fg:w="30"/><text x="51.8567%" y="1023.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (18 samples, 0.03%)</title><rect x="51.7063%" y="837" width="0.0260%" height="15" fill="rgb(225,176,8)" fg:x="35819" fg:w="18"/><text x="51.9563%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (18 samples, 0.03%)</title><rect x="51.7063%" y="821" width="0.0260%" height="15" fill="rgb(219,122,41)" fg:x="35819" fg:w="18"/><text x="51.9563%" y="831.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="51.7063%" y="805" width="0.0260%" height="15" fill="rgb(248,140,20)" fg:x="35819" fg:w="18"/><text x="51.9563%" y="815.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="51.7063%" y="789" width="0.0260%" height="15" fill="rgb(245,41,37)" fg:x="35819" fg:w="18"/><text x="51.9563%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (18 samples, 0.03%)</title><rect x="51.7063%" y="773" width="0.0260%" height="15" fill="rgb(235,82,39)" fg:x="35819" fg:w="18"/><text x="51.9563%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (18 samples, 0.03%)</title><rect x="51.7063%" y="757" width="0.0260%" height="15" fill="rgb(230,108,42)" fg:x="35819" fg:w="18"/><text x="51.9563%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (18 samples, 0.03%)</title><rect x="51.7063%" y="741" width="0.0260%" height="15" fill="rgb(215,150,50)" fg:x="35819" fg:w="18"/><text x="51.9563%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (17 samples, 0.02%)</title><rect x="51.7077%" y="725" width="0.0245%" height="15" fill="rgb(233,212,5)" fg:x="35820" fg:w="17"/><text x="51.9577%" y="735.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="51.7077%" y="709" width="0.0245%" height="15" fill="rgb(245,80,22)" fg:x="35820" fg:w="17"/><text x="51.9577%" y="719.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="51.7077%" y="693" width="0.0245%" height="15" fill="rgb(238,129,16)" fg:x="35820" fg:w="17"/><text x="51.9577%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (17 samples, 0.02%)</title><rect x="51.7077%" y="677" width="0.0245%" height="15" fill="rgb(240,19,0)" fg:x="35820" fg:w="17"/><text x="51.9577%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.02%)</title><rect x="51.7077%" y="661" width="0.0245%" height="15" fill="rgb(232,42,35)" fg:x="35820" fg:w="17"/><text x="51.9577%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.02%)</title><rect x="51.7077%" y="645" width="0.0245%" height="15" fill="rgb(223,130,24)" fg:x="35820" fg:w="17"/><text x="51.9577%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (13 samples, 0.02%)</title><rect x="51.7135%" y="629" width="0.0188%" height="15" fill="rgb(237,16,22)" fg:x="35824" fg:w="13"/><text x="51.9635%" y="639.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (49 samples, 0.07%)</title><rect x="51.6658%" y="917" width="0.0707%" height="15" fill="rgb(248,192,20)" fg:x="35791" fg:w="49"/><text x="51.9158%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (49 samples, 0.07%)</title><rect x="51.6658%" y="901" width="0.0707%" height="15" fill="rgb(233,167,2)" fg:x="35791" fg:w="49"/><text x="51.9158%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (49 samples, 0.07%)</title><rect x="51.6658%" y="885" width="0.0707%" height="15" fill="rgb(252,71,44)" fg:x="35791" fg:w="49"/><text x="51.9158%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (49 samples, 0.07%)</title><rect x="51.6658%" y="869" width="0.0707%" height="15" fill="rgb(238,37,47)" fg:x="35791" fg:w="49"/><text x="51.9158%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (43 samples, 0.06%)</title><rect x="51.6745%" y="853" width="0.0621%" height="15" fill="rgb(214,202,54)" fg:x="35797" fg:w="43"/><text x="51.9245%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="51.7525%" y="725" width="0.0173%" height="15" fill="rgb(254,165,40)" fg:x="35851" fg:w="12"/><text x="52.0025%" y="735.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="51.7525%" y="709" width="0.0173%" height="15" fill="rgb(246,173,38)" fg:x="35851" fg:w="12"/><text x="52.0025%" y="719.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (12 samples, 0.02%)</title><rect x="51.7525%" y="693" width="0.0173%" height="15" fill="rgb(215,3,27)" fg:x="35851" fg:w="12"/><text x="52.0025%" y="703.50"></text></g><g><title>SizeComputer::write (12 samples, 0.02%)</title><rect x="51.7525%" y="677" width="0.0173%" height="15" fill="rgb(239,169,51)" fg:x="35851" fg:w="12"/><text x="52.0025%" y="687.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (24 samples, 0.03%)</title><rect x="51.7525%" y="837" width="0.0346%" height="15" fill="rgb(212,5,25)" fg:x="35851" fg:w="24"/><text x="52.0025%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (24 samples, 0.03%)</title><rect x="51.7525%" y="821" width="0.0346%" height="15" fill="rgb(243,45,17)" fg:x="35851" fg:w="24"/><text x="52.0025%" y="831.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.03%)</title><rect x="51.7525%" y="805" width="0.0346%" height="15" fill="rgb(242,97,9)" fg:x="35851" fg:w="24"/><text x="52.0025%" y="815.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.03%)</title><rect x="51.7525%" y="789" width="0.0346%" height="15" fill="rgb(228,71,31)" fg:x="35851" fg:w="24"/><text x="52.0025%" y="799.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (24 samples, 0.03%)</title><rect x="51.7525%" y="773" width="0.0346%" height="15" fill="rgb(252,184,16)" fg:x="35851" fg:w="24"/><text x="52.0025%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (24 samples, 0.03%)</title><rect x="51.7525%" y="757" width="0.0346%" height="15" fill="rgb(236,169,46)" fg:x="35851" fg:w="24"/><text x="52.0025%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (24 samples, 0.03%)</title><rect x="51.7525%" y="741" width="0.0346%" height="15" fill="rgb(207,17,47)" fg:x="35851" fg:w="24"/><text x="52.0025%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (12 samples, 0.02%)</title><rect x="51.7698%" y="725" width="0.0173%" height="15" fill="rgb(206,201,28)" fg:x="35863" fg:w="12"/><text x="52.0198%" y="735.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="51.7698%" y="709" width="0.0173%" height="15" fill="rgb(224,184,23)" fg:x="35863" fg:w="12"/><text x="52.0198%" y="719.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="51.7698%" y="693" width="0.0173%" height="15" fill="rgb(208,139,48)" fg:x="35863" fg:w="12"/><text x="52.0198%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="51.7698%" y="677" width="0.0173%" height="15" fill="rgb(208,130,10)" fg:x="35863" fg:w="12"/><text x="52.0198%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.02%)</title><rect x="51.7698%" y="661" width="0.0173%" height="15" fill="rgb(211,213,45)" fg:x="35863" fg:w="12"/><text x="52.0198%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.02%)</title><rect x="51.7698%" y="645" width="0.0173%" height="15" fill="rgb(235,100,30)" fg:x="35863" fg:w="12"/><text x="52.0198%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (12 samples, 0.02%)</title><rect x="51.7698%" y="629" width="0.0173%" height="15" fill="rgb(206,144,31)" fg:x="35863" fg:w="12"/><text x="52.0198%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="837" width="0.0101%" height="15" fill="rgb(224,200,26)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="821" width="0.0101%" height="15" fill="rgb(247,104,53)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="805" width="0.0101%" height="15" fill="rgb(220,14,17)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="789" width="0.0101%" height="15" fill="rgb(230,140,40)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="773" width="0.0101%" height="15" fill="rgb(229,2,41)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="757" width="0.0101%" height="15" fill="rgb(232,89,16)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="741" width="0.0101%" height="15" fill="rgb(247,59,52)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="725" width="0.0101%" height="15" fill="rgb(226,110,21)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="735.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="709" width="0.0101%" height="15" fill="rgb(224,176,43)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="719.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="51.7871%" y="693" width="0.0101%" height="15" fill="rgb(221,73,6)" fg:x="35875" fg:w="7"/><text x="52.0371%" y="703.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (43 samples, 0.06%)</title><rect x="51.7366%" y="917" width="0.0621%" height="15" fill="rgb(232,78,19)" fg:x="35840" fg:w="43"/><text x="51.9866%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (43 samples, 0.06%)</title><rect x="51.7366%" y="901" width="0.0621%" height="15" fill="rgb(233,112,48)" fg:x="35840" fg:w="43"/><text x="51.9866%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (43 samples, 0.06%)</title><rect x="51.7366%" y="885" width="0.0621%" height="15" fill="rgb(243,131,47)" fg:x="35840" fg:w="43"/><text x="51.9866%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (43 samples, 0.06%)</title><rect x="51.7366%" y="869" width="0.0621%" height="15" fill="rgb(226,51,1)" fg:x="35840" fg:w="43"/><text x="51.9866%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (42 samples, 0.06%)</title><rect x="51.7380%" y="853" width="0.0606%" height="15" fill="rgb(247,58,7)" fg:x="35841" fg:w="42"/><text x="51.9880%" y="863.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (10 samples, 0.01%)</title><rect x="51.8362%" y="805" width="0.0144%" height="15" fill="rgb(209,7,32)" fg:x="35909" fg:w="10"/><text x="52.0862%" y="815.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (9 samples, 0.01%)</title><rect x="51.8564%" y="645" width="0.0130%" height="15" fill="rgb(209,39,41)" fg:x="35923" fg:w="9"/><text x="52.1064%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (9 samples, 0.01%)</title><rect x="51.8564%" y="629" width="0.0130%" height="15" fill="rgb(226,182,46)" fg:x="35923" fg:w="9"/><text x="52.1064%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="51.8564%" y="613" width="0.0130%" height="15" fill="rgb(230,219,10)" fg:x="35923" fg:w="9"/><text x="52.1064%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="51.8564%" y="597" width="0.0130%" height="15" fill="rgb(227,175,30)" fg:x="35923" fg:w="9"/><text x="52.1064%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="51.8564%" y="581" width="0.0130%" height="15" fill="rgb(217,2,50)" fg:x="35923" fg:w="9"/><text x="52.1064%" y="591.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (7 samples, 0.01%)</title><rect x="51.8593%" y="565" width="0.0101%" height="15" fill="rgb(229,160,0)" fg:x="35925" fg:w="7"/><text x="52.1093%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (7 samples, 0.01%)</title><rect x="51.8593%" y="549" width="0.0101%" height="15" fill="rgb(207,78,37)" fg:x="35925" fg:w="7"/><text x="52.1093%" y="559.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="51.8593%" y="533" width="0.0101%" height="15" fill="rgb(225,57,0)" fg:x="35925" fg:w="7"/><text x="52.1093%" y="543.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="51.8593%" y="517" width="0.0101%" height="15" fill="rgb(232,154,2)" fg:x="35925" fg:w="7"/><text x="52.1093%" y="527.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="51.8593%" y="501" width="0.0101%" height="15" fill="rgb(241,212,25)" fg:x="35925" fg:w="7"/><text x="52.1093%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (7 samples, 0.01%)</title><rect x="51.8593%" y="485" width="0.0101%" height="15" fill="rgb(226,69,20)" fg:x="35925" fg:w="7"/><text x="52.1093%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (7 samples, 0.01%)</title><rect x="51.8593%" y="469" width="0.0101%" height="15" fill="rgb(247,184,54)" fg:x="35925" fg:w="7"/><text x="52.1093%" y="479.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (27 samples, 0.04%)</title><rect x="51.8506%" y="805" width="0.0390%" height="15" fill="rgb(210,145,0)" fg:x="35919" fg:w="27"/><text x="52.1006%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (27 samples, 0.04%)</title><rect x="51.8506%" y="789" width="0.0390%" height="15" fill="rgb(253,82,12)" fg:x="35919" fg:w="27"/><text x="52.1006%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (27 samples, 0.04%)</title><rect x="51.8506%" y="773" width="0.0390%" height="15" fill="rgb(245,42,11)" fg:x="35919" fg:w="27"/><text x="52.1006%" y="783.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.04%)</title><rect x="51.8506%" y="757" width="0.0390%" height="15" fill="rgb(219,147,32)" fg:x="35919" fg:w="27"/><text x="52.1006%" y="767.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (27 samples, 0.04%)</title><rect x="51.8506%" y="741" width="0.0390%" height="15" fill="rgb(246,12,7)" fg:x="35919" fg:w="27"/><text x="52.1006%" y="751.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (26 samples, 0.04%)</title><rect x="51.8521%" y="725" width="0.0375%" height="15" fill="rgb(243,50,9)" fg:x="35920" fg:w="26"/><text x="52.1021%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (26 samples, 0.04%)</title><rect x="51.8521%" y="709" width="0.0375%" height="15" fill="rgb(219,149,6)" fg:x="35920" fg:w="26"/><text x="52.1021%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (26 samples, 0.04%)</title><rect x="51.8521%" y="693" width="0.0375%" height="15" fill="rgb(241,51,42)" fg:x="35920" fg:w="26"/><text x="52.1021%" y="703.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.04%)</title><rect x="51.8521%" y="677" width="0.0375%" height="15" fill="rgb(226,128,27)" fg:x="35920" fg:w="26"/><text x="52.1021%" y="687.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (26 samples, 0.04%)</title><rect x="51.8521%" y="661" width="0.0375%" height="15" fill="rgb(244,144,4)" fg:x="35920" fg:w="26"/><text x="52.1021%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (14 samples, 0.02%)</title><rect x="51.8694%" y="645" width="0.0202%" height="15" fill="rgb(221,4,13)" fg:x="35932" fg:w="14"/><text x="52.1194%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="51.8694%" y="629" width="0.0202%" height="15" fill="rgb(208,170,28)" fg:x="35932" fg:w="14"/><text x="52.1194%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (14 samples, 0.02%)</title><rect x="51.8694%" y="613" width="0.0202%" height="15" fill="rgb(226,131,13)" fg:x="35932" fg:w="14"/><text x="52.1194%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="51.8694%" y="597" width="0.0202%" height="15" fill="rgb(215,72,41)" fg:x="35932" fg:w="14"/><text x="52.1194%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="51.8694%" y="581" width="0.0202%" height="15" fill="rgb(243,108,20)" fg:x="35932" fg:w="14"/><text x="52.1194%" y="591.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="51.8752%" y="565" width="0.0144%" height="15" fill="rgb(230,189,17)" fg:x="35936" fg:w="10"/><text x="52.1252%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (10 samples, 0.01%)</title><rect x="51.8752%" y="549" width="0.0144%" height="15" fill="rgb(220,50,17)" fg:x="35936" fg:w="10"/><text x="52.1252%" y="559.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (70 samples, 0.10%)</title><rect x="51.8131%" y="837" width="0.1010%" height="15" fill="rgb(248,152,48)" fg:x="35893" fg:w="70"/><text x="52.0631%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (70 samples, 0.10%)</title><rect x="51.8131%" y="821" width="0.1010%" height="15" fill="rgb(244,91,11)" fg:x="35893" fg:w="70"/><text x="52.0631%" y="831.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="51.8896%" y="805" width="0.0245%" height="15" fill="rgb(220,157,5)" fg:x="35946" fg:w="17"/><text x="52.1396%" y="815.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="51.9026%" y="789" width="0.0115%" height="15" fill="rgb(253,137,8)" fg:x="35955" fg:w="8"/><text x="52.1526%" y="799.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (8 samples, 0.01%)</title><rect x="51.9026%" y="773" width="0.0115%" height="15" fill="rgb(217,137,51)" fg:x="35955" fg:w="8"/><text x="52.1526%" y="783.50"></text></g><g><title>SizeComputer::write (8 samples, 0.01%)</title><rect x="51.9026%" y="757" width="0.0115%" height="15" fill="rgb(218,209,53)" fg:x="35955" fg:w="8"/><text x="52.1526%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="837" width="0.0159%" height="15" fill="rgb(249,137,25)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="821" width="0.0159%" height="15" fill="rgb(239,155,26)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="805" width="0.0159%" height="15" fill="rgb(227,85,46)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="789" width="0.0159%" height="15" fill="rgb(251,107,43)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="773" width="0.0159%" height="15" fill="rgb(234,170,33)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="757" width="0.0159%" height="15" fill="rgb(206,29,35)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="741" width="0.0159%" height="15" fill="rgb(227,138,25)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="725" width="0.0159%" height="15" fill="rgb(249,131,35)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="735.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="709" width="0.0159%" height="15" fill="rgb(239,6,40)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="719.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="51.9141%" y="693" width="0.0159%" height="15" fill="rgb(246,136,47)" fg:x="35963" fg:w="11"/><text x="52.1641%" y="703.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (93 samples, 0.13%)</title><rect x="51.7987%" y="917" width="0.1342%" height="15" fill="rgb(253,58,26)" fg:x="35883" fg:w="93"/><text x="52.0487%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (93 samples, 0.13%)</title><rect x="51.7987%" y="901" width="0.1342%" height="15" fill="rgb(237,141,10)" fg:x="35883" fg:w="93"/><text x="52.0487%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (93 samples, 0.13%)</title><rect x="51.7987%" y="885" width="0.1342%" height="15" fill="rgb(234,156,12)" fg:x="35883" fg:w="93"/><text x="52.0487%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (93 samples, 0.13%)</title><rect x="51.7987%" y="869" width="0.1342%" height="15" fill="rgb(243,224,36)" fg:x="35883" fg:w="93"/><text x="52.0487%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (93 samples, 0.13%)</title><rect x="51.7987%" y="853" width="0.1342%" height="15" fill="rgb(205,229,51)" fg:x="35883" fg:w="93"/><text x="52.0487%" y="863.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="1077" width="0.2858%" height="15" fill="rgb(223,189,4)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="1061" width="0.2858%" height="15" fill="rgb(249,167,54)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="1045" width="0.2858%" height="15" fill="rgb(218,34,28)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="1055.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="1029" width="0.2858%" height="15" fill="rgb(232,109,42)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="1039.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="1013" width="0.2858%" height="15" fill="rgb(248,214,46)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="1023.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="997" width="0.2858%" height="15" fill="rgb(244,216,40)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="981" width="0.2858%" height="15" fill="rgb(231,226,31)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="965" width="0.2858%" height="15" fill="rgb(238,38,43)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="975.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="949" width="0.2858%" height="15" fill="rgb(208,88,43)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="959.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (198 samples, 0.29%)</title><rect x="51.6500%" y="933" width="0.2858%" height="15" fill="rgb(205,136,37)" fg:x="35780" fg:w="198"/><text x="51.9000%" y="943.50"></text></g><g><title>node::BlockManager::SaveBlockToDisk (3,117 samples, 4.50%)</title><rect x="47.5359%" y="1237" width="4.4995%" height="15" fill="rgb(237,34,14)" fg:x="32930" fg:w="3117"/><text x="47.7859%" y="1247.50">node:..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (267 samples, 0.39%)</title><rect x="51.6500%" y="1221" width="0.3854%" height="15" fill="rgb(236,193,44)" fg:x="35780" fg:w="267"/><text x="51.9000%" y="1231.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (267 samples, 0.39%)</title><rect x="51.6500%" y="1205" width="0.3854%" height="15" fill="rgb(231,48,10)" fg:x="35780" fg:w="267"/><text x="51.9000%" y="1215.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (267 samples, 0.39%)</title><rect x="51.6500%" y="1189" width="0.3854%" height="15" fill="rgb(213,141,34)" fg:x="35780" fg:w="267"/><text x="51.9000%" y="1199.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (267 samples, 0.39%)</title><rect x="51.6500%" y="1173" width="0.3854%" height="15" fill="rgb(249,130,34)" fg:x="35780" fg:w="267"/><text x="51.9000%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (267 samples, 0.39%)</title><rect x="51.6500%" y="1157" width="0.3854%" height="15" fill="rgb(219,42,41)" fg:x="35780" fg:w="267"/><text x="51.9000%" y="1167.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (267 samples, 0.39%)</title><rect x="51.6500%" y="1141" width="0.3854%" height="15" fill="rgb(224,100,54)" fg:x="35780" fg:w="267"/><text x="51.9000%" y="1151.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (267 samples, 0.39%)</title><rect x="51.6500%" y="1125" width="0.3854%" height="15" fill="rgb(229,200,27)" fg:x="35780" fg:w="267"/><text x="51.9000%" y="1135.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (267 samples, 0.39%)</title><rect x="51.6500%" y="1109" width="0.3854%" height="15" fill="rgb(217,118,10)" fg:x="35780" fg:w="267"/><text x="51.9000%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (267 samples, 0.39%)</title><rect x="51.6500%" y="1093" width="0.3854%" height="15" fill="rgb(206,22,3)" fg:x="35780" fg:w="267"/><text x="51.9000%" y="1103.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (69 samples, 0.10%)</title><rect x="51.9358%" y="1077" width="0.0996%" height="15" fill="rgb(232,163,46)" fg:x="35978" fg:w="69"/><text x="52.1858%" y="1087.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.03%)</title><rect x="52.0036%" y="1061" width="0.0318%" height="15" fill="rgb(206,95,13)" fg:x="36025" fg:w="22"/><text x="52.2536%" y="1071.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (22 samples, 0.03%)</title><rect x="52.0036%" y="1045" width="0.0318%" height="15" fill="rgb(253,154,18)" fg:x="36025" fg:w="22"/><text x="52.2536%" y="1055.50"></text></g><g><title>SizeComputer::write (22 samples, 0.03%)</title><rect x="52.0036%" y="1029" width="0.0318%" height="15" fill="rgb(219,32,23)" fg:x="36025" fg:w="22"/><text x="52.2536%" y="1039.50"></text></g><g><title>ChainstateManager::AcceptBlock (3,548 samples, 5.12%)</title><rect x="46.9224%" y="1253" width="5.1217%" height="15" fill="rgb(230,191,45)" fg:x="32505" fg:w="3548"/><text x="47.1724%" y="1263.50">Chains..</text></g><g><title>CScript::GetSigOpCount (14 samples, 0.02%)</title><rect x="52.0441%" y="1237" width="0.0202%" height="15" fill="rgb(229,64,36)" fg:x="36053" fg:w="14"/><text x="52.2941%" y="1247.50"></text></g><g><title>COutPoint::IsNull (7 samples, 0.01%)</title><rect x="52.0643%" y="1221" width="0.0101%" height="15" fill="rgb(205,129,25)" fg:x="36067" fg:w="7"/><text x="52.3143%" y="1231.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (7 samples, 0.01%)</title><rect x="52.0643%" y="1205" width="0.0101%" height="15" fill="rgb(254,112,7)" fg:x="36067" fg:w="7"/><text x="52.3143%" y="1215.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (7 samples, 0.01%)</title><rect x="52.0643%" y="1189" width="0.0101%" height="15" fill="rgb(226,53,48)" fg:x="36067" fg:w="7"/><text x="52.3143%" y="1199.50"></text></g><g><title>CTransaction::IsCoinBase (12 samples, 0.02%)</title><rect x="52.0643%" y="1237" width="0.0173%" height="15" fill="rgb(214,153,38)" fg:x="36067" fg:w="12"/><text x="52.3143%" y="1247.50"></text></g><g><title>CheckTransaction (25 samples, 0.04%)</title><rect x="52.0989%" y="1205" width="0.0361%" height="15" fill="rgb(243,101,7)" fg:x="36091" fg:w="25"/><text x="52.3489%" y="1215.50"></text></g><g><title>__memcmp_evex_movbe (23 samples, 0.03%)</title><rect x="52.2375%" y="1045" width="0.0332%" height="15" fill="rgb(240,140,22)" fg:x="36187" fg:w="23"/><text x="52.4875%" y="1055.50"></text></g><g><title>memcmp@plt (7 samples, 0.01%)</title><rect x="52.2721%" y="1045" width="0.0101%" height="15" fill="rgb(235,114,2)" fg:x="36211" fg:w="7"/><text x="52.5221%" y="1055.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (116 samples, 0.17%)</title><rect x="52.1538%" y="1189" width="0.1675%" height="15" fill="rgb(242,59,12)" fg:x="36129" fg:w="116"/><text x="52.4038%" y="1199.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (90 samples, 0.13%)</title><rect x="52.1913%" y="1173" width="0.1299%" height="15" fill="rgb(252,134,9)" fg:x="36155" fg:w="90"/><text x="52.4413%" y="1183.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (90 samples, 0.13%)</title><rect x="52.1913%" y="1157" width="0.1299%" height="15" fill="rgb(236,4,44)" fg:x="36155" fg:w="90"/><text x="52.4413%" y="1167.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (87 samples, 0.13%)</title><rect x="52.1956%" y="1141" width="0.1256%" height="15" fill="rgb(254,172,41)" fg:x="36158" fg:w="87"/><text x="52.4456%" y="1151.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (87 samples, 0.13%)</title><rect x="52.1956%" y="1125" width="0.1256%" height="15" fill="rgb(244,63,20)" fg:x="36158" fg:w="87"/><text x="52.4456%" y="1135.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (87 samples, 0.13%)</title><rect x="52.1956%" y="1109" width="0.1256%" height="15" fill="rgb(250,73,31)" fg:x="36158" fg:w="87"/><text x="52.4456%" y="1119.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (81 samples, 0.12%)</title><rect x="52.2043%" y="1093" width="0.1169%" height="15" fill="rgb(241,38,36)" fg:x="36164" fg:w="81"/><text x="52.4543%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (81 samples, 0.12%)</title><rect x="52.2043%" y="1077" width="0.1169%" height="15" fill="rgb(245,211,2)" fg:x="36164" fg:w="81"/><text x="52.4543%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (81 samples, 0.12%)</title><rect x="52.2043%" y="1061" width="0.1169%" height="15" fill="rgb(206,120,28)" fg:x="36164" fg:w="81"/><text x="52.4543%" y="1071.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (24 samples, 0.03%)</title><rect x="52.2866%" y="1045" width="0.0346%" height="15" fill="rgb(211,59,34)" fg:x="36221" fg:w="24"/><text x="52.5366%" y="1055.50"></text></g><g><title>__memcmp_evex_movbe (8 samples, 0.01%)</title><rect x="52.3357%" y="1173" width="0.0115%" height="15" fill="rgb(233,168,5)" fg:x="36255" fg:w="8"/><text x="52.5857%" y="1183.50"></text></g><g><title>_int_malloc (12 samples, 0.02%)</title><rect x="52.3631%" y="1045" width="0.0173%" height="15" fill="rgb(234,33,13)" fg:x="36274" fg:w="12"/><text x="52.6131%" y="1055.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (16 samples, 0.02%)</title><rect x="52.3587%" y="1173" width="0.0231%" height="15" fill="rgb(231,150,26)" fg:x="36271" fg:w="16"/><text x="52.6087%" y="1183.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (16 samples, 0.02%)</title><rect x="52.3587%" y="1157" width="0.0231%" height="15" fill="rgb(217,191,4)" fg:x="36271" fg:w="16"/><text x="52.6087%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_node (16 samples, 0.02%)</title><rect x="52.3587%" y="1141" width="0.0231%" height="15" fill="rgb(246,198,38)" fg:x="36271" fg:w="16"/><text x="52.6087%" y="1151.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::allocate (16 samples, 0.02%)</title><rect x="52.3587%" y="1125" width="0.0231%" height="15" fill="rgb(245,64,37)" fg:x="36271" fg:w="16"/><text x="52.6087%" y="1135.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (16 samples, 0.02%)</title><rect x="52.3587%" y="1109" width="0.0231%" height="15" fill="rgb(250,30,36)" fg:x="36271" fg:w="16"/><text x="52.6087%" y="1119.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (16 samples, 0.02%)</title><rect x="52.3587%" y="1093" width="0.0231%" height="15" fill="rgb(217,86,53)" fg:x="36271" fg:w="16"/><text x="52.6087%" y="1103.50"></text></g><g><title>operator new (16 samples, 0.02%)</title><rect x="52.3587%" y="1077" width="0.0231%" height="15" fill="rgb(228,157,16)" fg:x="36271" fg:w="16"/><text x="52.6087%" y="1087.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="52.3602%" y="1061" width="0.0217%" height="15" fill="rgb(217,59,31)" fg:x="36272" fg:w="15"/><text x="52.6102%" y="1071.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (209 samples, 0.30%)</title><rect x="52.0975%" y="1221" width="0.3017%" height="15" fill="rgb(237,138,41)" fg:x="36090" fg:w="209"/><text x="52.3475%" y="1231.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (179 samples, 0.26%)</title><rect x="52.1408%" y="1205" width="0.2584%" height="15" fill="rgb(227,91,49)" fg:x="36120" fg:w="179"/><text x="52.3908%" y="1215.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (54 samples, 0.08%)</title><rect x="52.3212%" y="1189" width="0.0780%" height="15" fill="rgb(247,21,44)" fg:x="36245" fg:w="54"/><text x="52.5712%" y="1199.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (12 samples, 0.02%)</title><rect x="52.3818%" y="1173" width="0.0173%" height="15" fill="rgb(219,210,51)" fg:x="36287" fg:w="12"/><text x="52.6318%" y="1183.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (12 samples, 0.02%)</title><rect x="52.3818%" y="1157" width="0.0173%" height="15" fill="rgb(209,140,6)" fg:x="36287" fg:w="12"/><text x="52.6318%" y="1167.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (12 samples, 0.02%)</title><rect x="52.3818%" y="1141" width="0.0173%" height="15" fill="rgb(221,188,24)" fg:x="36287" fg:w="12"/><text x="52.6318%" y="1151.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (12 samples, 0.02%)</title><rect x="52.3818%" y="1125" width="0.0173%" height="15" fill="rgb(232,154,20)" fg:x="36287" fg:w="12"/><text x="52.6318%" y="1135.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (12 samples, 0.02%)</title><rect x="52.3818%" y="1109" width="0.0173%" height="15" fill="rgb(244,137,50)" fg:x="36287" fg:w="12"/><text x="52.6318%" y="1119.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (10 samples, 0.01%)</title><rect x="52.3847%" y="1093" width="0.0144%" height="15" fill="rgb(225,185,43)" fg:x="36289" fg:w="10"/><text x="52.6347%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (10 samples, 0.01%)</title><rect x="52.3847%" y="1077" width="0.0144%" height="15" fill="rgb(213,205,38)" fg:x="36289" fg:w="10"/><text x="52.6347%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (10 samples, 0.01%)</title><rect x="52.3847%" y="1061" width="0.0144%" height="15" fill="rgb(236,73,12)" fg:x="36289" fg:w="10"/><text x="52.6347%" y="1071.50"></text></g><g><title>CheckTransaction (11 samples, 0.02%)</title><rect x="52.4035%" y="1189" width="0.0159%" height="15" fill="rgb(235,219,13)" fg:x="36302" fg:w="11"/><text x="52.6535%" y="1199.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (7 samples, 0.01%)</title><rect x="52.4093%" y="1173" width="0.0101%" height="15" fill="rgb(218,59,36)" fg:x="36306" fg:w="7"/><text x="52.6593%" y="1183.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (7 samples, 0.01%)</title><rect x="52.4093%" y="1157" width="0.0101%" height="15" fill="rgb(205,110,39)" fg:x="36306" fg:w="7"/><text x="52.6593%" y="1167.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (7 samples, 0.01%)</title><rect x="52.4093%" y="1141" width="0.0101%" height="15" fill="rgb(218,206,42)" fg:x="36306" fg:w="7"/><text x="52.6593%" y="1151.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="52.4093%" y="1125" width="0.0101%" height="15" fill="rgb(248,125,24)" fg:x="36306" fg:w="7"/><text x="52.6593%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="52.4093%" y="1109" width="0.0101%" height="15" fill="rgb(242,28,27)" fg:x="36306" fg:w="7"/><text x="52.6593%" y="1119.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="52.4093%" y="1093" width="0.0101%" height="15" fill="rgb(216,228,15)" fg:x="36306" fg:w="7"/><text x="52.6593%" y="1103.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="52.4093%" y="1077" width="0.0101%" height="15" fill="rgb(235,116,46)" fg:x="36306" fg:w="7"/><text x="52.6593%" y="1087.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (28 samples, 0.04%)</title><rect x="52.4280%" y="1189" width="0.0404%" height="15" fill="rgb(224,18,32)" fg:x="36319" fg:w="28"/><text x="52.6780%" y="1199.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (23 samples, 0.03%)</title><rect x="52.4353%" y="1173" width="0.0332%" height="15" fill="rgb(252,5,12)" fg:x="36324" fg:w="23"/><text x="52.6853%" y="1183.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (17 samples, 0.02%)</title><rect x="52.4439%" y="1157" width="0.0245%" height="15" fill="rgb(251,36,5)" fg:x="36330" fg:w="17"/><text x="52.6939%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (14 samples, 0.02%)</title><rect x="52.4482%" y="1141" width="0.0202%" height="15" fill="rgb(217,53,14)" fg:x="36333" fg:w="14"/><text x="52.6982%" y="1151.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (8 samples, 0.01%)</title><rect x="52.4569%" y="1125" width="0.0115%" height="15" fill="rgb(215,86,45)" fg:x="36339" fg:w="8"/><text x="52.7069%" y="1135.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (55 samples, 0.08%)</title><rect x="52.3992%" y="1221" width="0.0794%" height="15" fill="rgb(242,169,11)" fg:x="36299" fg:w="55"/><text x="52.6492%" y="1231.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (55 samples, 0.08%)</title><rect x="52.3992%" y="1205" width="0.0794%" height="15" fill="rgb(211,213,45)" fg:x="36299" fg:w="55"/><text x="52.6492%" y="1215.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (10 samples, 0.01%)</title><rect x="52.4800%" y="1109" width="0.0144%" height="15" fill="rgb(205,88,11)" fg:x="36355" fg:w="10"/><text x="52.7300%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (10 samples, 0.01%)</title><rect x="52.4800%" y="1093" width="0.0144%" height="15" fill="rgb(252,69,26)" fg:x="36355" fg:w="10"/><text x="52.7300%" y="1103.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="52.4800%" y="1077" width="0.0144%" height="15" fill="rgb(246,123,37)" fg:x="36355" fg:w="10"/><text x="52.7300%" y="1087.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="52.4800%" y="1061" width="0.0144%" height="15" fill="rgb(212,205,5)" fg:x="36355" fg:w="10"/><text x="52.7300%" y="1071.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="52.4800%" y="1045" width="0.0144%" height="15" fill="rgb(253,148,0)" fg:x="36355" fg:w="10"/><text x="52.7300%" y="1055.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (8 samples, 0.01%)</title><rect x="52.4944%" y="1109" width="0.0115%" height="15" fill="rgb(239,22,4)" fg:x="36365" fg:w="8"/><text x="52.7444%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (8 samples, 0.01%)</title><rect x="52.4944%" y="1093" width="0.0115%" height="15" fill="rgb(226,26,53)" fg:x="36365" fg:w="8"/><text x="52.7444%" y="1103.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="52.4944%" y="1077" width="0.0115%" height="15" fill="rgb(225,229,45)" fg:x="36365" fg:w="8"/><text x="52.7444%" y="1087.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="52.4944%" y="1061" width="0.0115%" height="15" fill="rgb(220,60,37)" fg:x="36365" fg:w="8"/><text x="52.7444%" y="1071.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="52.4944%" y="1045" width="0.0115%" height="15" fill="rgb(217,180,35)" fg:x="36365" fg:w="8"/><text x="52.7444%" y="1055.50"></text></g><g><title>CheckTransaction (293 samples, 0.42%)</title><rect x="52.0845%" y="1237" width="0.4230%" height="15" fill="rgb(229,7,53)" fg:x="36081" fg:w="293"/><text x="52.3345%" y="1247.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (19 samples, 0.03%)</title><rect x="52.4800%" y="1221" width="0.0274%" height="15" fill="rgb(254,137,3)" fg:x="36355" fg:w="19"/><text x="52.7300%" y="1231.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (19 samples, 0.03%)</title><rect x="52.4800%" y="1205" width="0.0274%" height="15" fill="rgb(215,140,41)" fg:x="36355" fg:w="19"/><text x="52.7300%" y="1215.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (19 samples, 0.03%)</title><rect x="52.4800%" y="1189" width="0.0274%" height="15" fill="rgb(250,80,15)" fg:x="36355" fg:w="19"/><text x="52.7300%" y="1199.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (19 samples, 0.03%)</title><rect x="52.4800%" y="1173" width="0.0274%" height="15" fill="rgb(252,191,6)" fg:x="36355" fg:w="19"/><text x="52.7300%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.03%)</title><rect x="52.4800%" y="1157" width="0.0274%" height="15" fill="rgb(246,217,18)" fg:x="36355" fg:w="19"/><text x="52.7300%" y="1167.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="52.4800%" y="1141" width="0.0274%" height="15" fill="rgb(223,93,7)" fg:x="36355" fg:w="19"/><text x="52.7300%" y="1151.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.03%)</title><rect x="52.4800%" y="1125" width="0.0274%" height="15" fill="rgb(225,55,52)" fg:x="36355" fg:w="19"/><text x="52.7300%" y="1135.50"></text></g><g><title>CScript::GetOp (9 samples, 0.01%)</title><rect x="52.6143%" y="1173" width="0.0130%" height="15" fill="rgb(240,31,24)" fg:x="36448" fg:w="9"/><text x="52.8643%" y="1183.50"></text></g><g><title>CScript::GetSigOpCount (52 samples, 0.08%)</title><rect x="52.5738%" y="1189" width="0.0751%" height="15" fill="rgb(205,56,52)" fg:x="36420" fg:w="52"/><text x="52.8238%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (10 samples, 0.01%)</title><rect x="52.6345%" y="1173" width="0.0144%" height="15" fill="rgb(246,146,12)" fg:x="36462" fg:w="10"/><text x="52.8845%" y="1183.50"></text></g><g><title>GetLegacySigOpCount (16 samples, 0.02%)</title><rect x="52.6489%" y="1189" width="0.0231%" height="15" fill="rgb(239,84,36)" fg:x="36472" fg:w="16"/><text x="52.8989%" y="1199.50"></text></g><g><title>operator- (7 samples, 0.01%)</title><rect x="52.7875%" y="1173" width="0.0101%" height="15" fill="rgb(207,41,40)" fg:x="36568" fg:w="7"/><text x="53.0375%" y="1183.50"></text></g><g><title>CScript::GetOp (180 samples, 0.26%)</title><rect x="52.5536%" y="1205" width="0.2598%" height="15" fill="rgb(241,179,25)" fg:x="36406" fg:w="180"/><text x="52.8036%" y="1215.50"></text></g><g><title>GetScriptOp (98 samples, 0.14%)</title><rect x="52.6720%" y="1189" width="0.1415%" height="15" fill="rgb(210,0,34)" fg:x="36488" fg:w="98"/><text x="52.9220%" y="1199.50"></text></g><g><title>CScript::GetSigOpCount (230 samples, 0.33%)</title><rect x="52.5089%" y="1221" width="0.3320%" height="15" fill="rgb(225,217,29)" fg:x="36375" fg:w="230"/><text x="52.7589%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (11 samples, 0.02%)</title><rect x="52.8250%" y="1205" width="0.0159%" height="15" fill="rgb(216,191,38)" fg:x="36594" fg:w="11"/><text x="53.0750%" y="1215.50"></text></g><g><title>GetLegacySigOpCount (18 samples, 0.03%)</title><rect x="52.8409%" y="1221" width="0.0260%" height="15" fill="rgb(232,140,52)" fg:x="36605" fg:w="18"/><text x="53.0909%" y="1231.50"></text></g><g><title>operator- (10 samples, 0.01%)</title><rect x="53.0286%" y="1205" width="0.0144%" height="15" fill="rgb(223,158,51)" fg:x="36735" fg:w="10"/><text x="53.2786%" y="1215.50"></text></g><g><title>GetScriptOp (134 samples, 0.19%)</title><rect x="52.8669%" y="1221" width="0.1934%" height="15" fill="rgb(235,29,51)" fg:x="36623" fg:w="134"/><text x="53.1169%" y="1231.50"></text></g><g><title>GetLegacySigOpCount (384 samples, 0.55%)</title><rect x="52.5074%" y="1237" width="0.5543%" height="15" fill="rgb(215,181,18)" fg:x="36374" fg:w="384"/><text x="52.7574%" y="1247.50"></text></g><g><title>GetScriptOp (33 samples, 0.05%)</title><rect x="53.0618%" y="1237" width="0.0476%" height="15" fill="rgb(227,125,34)" fg:x="36758" fg:w="33"/><text x="53.3118%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (13 samples, 0.02%)</title><rect x="53.1181%" y="1237" width="0.0188%" height="15" fill="rgb(230,197,49)" fg:x="36797" fg:w="13"/><text x="53.3681%" y="1247.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (13 samples, 0.02%)</title><rect x="53.1440%" y="1237" width="0.0188%" height="15" fill="rgb(239,141,16)" fg:x="36815" fg:w="13"/><text x="53.3940%" y="1247.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (17 samples, 0.02%)</title><rect x="53.1960%" y="853" width="0.0245%" height="15" fill="rgb(225,105,43)" fg:x="36851" fg:w="17"/><text x="53.4460%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (17 samples, 0.02%)</title><rect x="53.1960%" y="837" width="0.0245%" height="15" fill="rgb(214,131,14)" fg:x="36851" fg:w="17"/><text x="53.4460%" y="847.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="53.1960%" y="821" width="0.0245%" height="15" fill="rgb(229,177,11)" fg:x="36851" fg:w="17"/><text x="53.4460%" y="831.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="53.1960%" y="805" width="0.0245%" height="15" fill="rgb(231,180,14)" fg:x="36851" fg:w="17"/><text x="53.4460%" y="815.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (17 samples, 0.02%)</title><rect x="53.1960%" y="789" width="0.0245%" height="15" fill="rgb(232,88,2)" fg:x="36851" fg:w="17"/><text x="53.4460%" y="799.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (17 samples, 0.02%)</title><rect x="53.1960%" y="773" width="0.0245%" height="15" fill="rgb(205,220,8)" fg:x="36851" fg:w="17"/><text x="53.4460%" y="783.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (17 samples, 0.02%)</title><rect x="53.1960%" y="757" width="0.0245%" height="15" fill="rgb(225,23,53)" fg:x="36851" fg:w="17"/><text x="53.4460%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (15 samples, 0.02%)</title><rect x="53.1989%" y="741" width="0.0217%" height="15" fill="rgb(213,62,29)" fg:x="36853" fg:w="15"/><text x="53.4489%" y="751.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="53.1989%" y="725" width="0.0217%" height="15" fill="rgb(227,75,7)" fg:x="36853" fg:w="15"/><text x="53.4489%" y="735.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="53.1989%" y="709" width="0.0217%" height="15" fill="rgb(207,105,14)" fg:x="36853" fg:w="15"/><text x="53.4489%" y="719.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (15 samples, 0.02%)</title><rect x="53.1989%" y="693" width="0.0217%" height="15" fill="rgb(245,62,29)" fg:x="36853" fg:w="15"/><text x="53.4489%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (15 samples, 0.02%)</title><rect x="53.1989%" y="677" width="0.0217%" height="15" fill="rgb(236,202,4)" fg:x="36853" fg:w="15"/><text x="53.4489%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (15 samples, 0.02%)</title><rect x="53.1989%" y="661" width="0.0217%" height="15" fill="rgb(250,67,1)" fg:x="36853" fg:w="15"/><text x="53.4489%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (12 samples, 0.02%)</title><rect x="53.2032%" y="645" width="0.0173%" height="15" fill="rgb(253,115,44)" fg:x="36856" fg:w="12"/><text x="53.4532%" y="655.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.02%)</title><rect x="53.2205%" y="853" width="0.0217%" height="15" fill="rgb(251,139,18)" fg:x="36868" fg:w="15"/><text x="53.4705%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (14 samples, 0.02%)</title><rect x="53.2220%" y="837" width="0.0202%" height="15" fill="rgb(218,22,32)" fg:x="36869" fg:w="14"/><text x="53.4720%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (14 samples, 0.02%)</title><rect x="53.2220%" y="821" width="0.0202%" height="15" fill="rgb(243,53,5)" fg:x="36869" fg:w="14"/><text x="53.4720%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.02%)</title><rect x="53.2220%" y="805" width="0.0202%" height="15" fill="rgb(227,56,16)" fg:x="36869" fg:w="14"/><text x="53.4720%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="53.2220%" y="789" width="0.0202%" height="15" fill="rgb(245,53,0)" fg:x="36869" fg:w="14"/><text x="53.4720%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="53.2249%" y="773" width="0.0173%" height="15" fill="rgb(216,170,35)" fg:x="36871" fg:w="12"/><text x="53.4749%" y="783.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (49 samples, 0.07%)</title><rect x="53.1873%" y="933" width="0.0707%" height="15" fill="rgb(211,200,8)" fg:x="36845" fg:w="49"/><text x="53.4373%" y="943.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (49 samples, 0.07%)</title><rect x="53.1873%" y="917" width="0.0707%" height="15" fill="rgb(228,204,44)" fg:x="36845" fg:w="49"/><text x="53.4373%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (49 samples, 0.07%)</title><rect x="53.1873%" y="901" width="0.0707%" height="15" fill="rgb(214,121,17)" fg:x="36845" fg:w="49"/><text x="53.4373%" y="911.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (49 samples, 0.07%)</title><rect x="53.1873%" y="885" width="0.0707%" height="15" fill="rgb(233,64,38)" fg:x="36845" fg:w="49"/><text x="53.4373%" y="895.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (49 samples, 0.07%)</title><rect x="53.1873%" y="869" width="0.0707%" height="15" fill="rgb(253,54,19)" fg:x="36845" fg:w="49"/><text x="53.4373%" y="879.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="53.2422%" y="853" width="0.0159%" height="15" fill="rgb(253,94,18)" fg:x="36883" fg:w="11"/><text x="53.4922%" y="863.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.2480%" y="837" width="0.0101%" height="15" fill="rgb(227,57,52)" fg:x="36887" fg:w="7"/><text x="53.4980%" y="847.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (7 samples, 0.01%)</title><rect x="53.2480%" y="821" width="0.0101%" height="15" fill="rgb(230,228,50)" fg:x="36887" fg:w="7"/><text x="53.4980%" y="831.50"></text></g><g><title>SizeComputer::write (7 samples, 0.01%)</title><rect x="53.2480%" y="805" width="0.0101%" height="15" fill="rgb(217,205,27)" fg:x="36887" fg:w="7"/><text x="53.4980%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (11 samples, 0.02%)</title><rect x="53.2783%" y="853" width="0.0159%" height="15" fill="rgb(252,71,50)" fg:x="36908" fg:w="11"/><text x="53.5283%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (11 samples, 0.02%)</title><rect x="53.2783%" y="837" width="0.0159%" height="15" fill="rgb(209,86,4)" fg:x="36908" fg:w="11"/><text x="53.5283%" y="847.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="53.2783%" y="821" width="0.0159%" height="15" fill="rgb(229,94,0)" fg:x="36908" fg:w="11"/><text x="53.5283%" y="831.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="53.2783%" y="805" width="0.0159%" height="15" fill="rgb(252,223,21)" fg:x="36908" fg:w="11"/><text x="53.5283%" y="815.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="53.2783%" y="789" width="0.0159%" height="15" fill="rgb(230,210,4)" fg:x="36908" fg:w="11"/><text x="53.5283%" y="799.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (11 samples, 0.02%)</title><rect x="53.2783%" y="773" width="0.0159%" height="15" fill="rgb(240,149,38)" fg:x="36908" fg:w="11"/><text x="53.5283%" y="783.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (11 samples, 0.02%)</title><rect x="53.2783%" y="757" width="0.0159%" height="15" fill="rgb(254,105,20)" fg:x="36908" fg:w="11"/><text x="53.5283%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (29 samples, 0.04%)</title><rect x="53.2581%" y="933" width="0.0419%" height="15" fill="rgb(253,87,46)" fg:x="36894" fg:w="29"/><text x="53.5081%" y="943.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (29 samples, 0.04%)</title><rect x="53.2581%" y="917" width="0.0419%" height="15" fill="rgb(253,116,33)" fg:x="36894" fg:w="29"/><text x="53.5081%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (29 samples, 0.04%)</title><rect x="53.2581%" y="901" width="0.0419%" height="15" fill="rgb(229,198,5)" fg:x="36894" fg:w="29"/><text x="53.5081%" y="911.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (29 samples, 0.04%)</title><rect x="53.2581%" y="885" width="0.0419%" height="15" fill="rgb(242,38,37)" fg:x="36894" fg:w="29"/><text x="53.5081%" y="895.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (27 samples, 0.04%)</title><rect x="53.2610%" y="869" width="0.0390%" height="15" fill="rgb(242,69,53)" fg:x="36896" fg:w="27"/><text x="53.5110%" y="879.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (99 samples, 0.14%)</title><rect x="53.1657%" y="949" width="0.1429%" height="15" fill="rgb(249,80,16)" fg:x="36830" fg:w="99"/><text x="53.4157%" y="959.50"></text></g><g><title>CheckBlock (909 samples, 1.31%)</title><rect x="52.0441%" y="1253" width="1.3122%" height="15" fill="rgb(206,128,11)" fg:x="36053" fg:w="909"/><text x="52.2941%" y="1263.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1237" width="0.1934%" height="15" fill="rgb(212,35,20)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1247.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (134 samples, 0.19%)</title><rect x="53.1628%" y="1221" width="0.1934%" height="15" fill="rgb(236,79,13)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1231.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1205" width="0.1934%" height="15" fill="rgb(233,123,3)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1215.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1189" width="0.1934%" height="15" fill="rgb(214,93,52)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1173" width="0.1934%" height="15" fill="rgb(251,37,40)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1183.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1157" width="0.1934%" height="15" fill="rgb(227,80,54)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1167.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1141" width="0.1934%" height="15" fill="rgb(254,48,11)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1151.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1125" width="0.1934%" height="15" fill="rgb(235,193,26)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1135.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1109" width="0.1934%" height="15" fill="rgb(229,99,21)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1119.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1093" width="0.1934%" height="15" fill="rgb(211,140,41)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1103.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1077" width="0.1934%" height="15" fill="rgb(240,227,30)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1061" width="0.1934%" height="15" fill="rgb(215,224,45)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1071.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1045" width="0.1934%" height="15" fill="rgb(206,123,31)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1055.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1029" width="0.1934%" height="15" fill="rgb(210,138,16)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1039.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="1013" width="0.1934%" height="15" fill="rgb(228,57,28)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="997" width="0.1934%" height="15" fill="rgb(242,170,10)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="981" width="0.1934%" height="15" fill="rgb(228,214,39)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="991.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (134 samples, 0.19%)</title><rect x="53.1628%" y="965" width="0.1934%" height="15" fill="rgb(218,179,33)" fg:x="36828" fg:w="134"/><text x="53.4128%" y="975.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.05%)</title><rect x="53.3086%" y="949" width="0.0476%" height="15" fill="rgb(235,193,39)" fg:x="36929" fg:w="33"/><text x="53.5586%" y="959.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="53.3303%" y="933" width="0.0260%" height="15" fill="rgb(219,221,36)" fg:x="36944" fg:w="18"/><text x="53.5803%" y="943.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (18 samples, 0.03%)</title><rect x="53.3303%" y="917" width="0.0260%" height="15" fill="rgb(248,218,19)" fg:x="36944" fg:w="18"/><text x="53.5803%" y="927.50"></text></g><g><title>SizeComputer::write (18 samples, 0.03%)</title><rect x="53.3303%" y="901" width="0.0260%" height="15" fill="rgb(205,50,9)" fg:x="36944" fg:w="18"/><text x="53.5803%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="53.3692%" y="1253" width="0.0115%" height="15" fill="rgb(238,81,28)" fg:x="36971" fg:w="8"/><text x="53.6192%" y="1263.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (27,141 samples, 39.18%)</title><rect x="14.2045%" y="1269" width="39.1792%" height="15" fill="rgb(235,110,19)" fg:x="9840" fg:w="27141"/><text x="14.4545%" y="1279.50">ChainstateManager::ProcessNewBlock</text></g><g><title>ChainstateManager::ProcessNewBlockHeaders (9 samples, 0.01%)</title><rect x="53.3837%" y="1269" width="0.0130%" height="15" fill="rgb(214,7,14)" fg:x="36981" fg:w="9"/><text x="53.6337%" y="1279.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (9 samples, 0.01%)</title><rect x="53.3837%" y="1253" width="0.0130%" height="15" fill="rgb(211,77,3)" fg:x="36981" fg:w="9"/><text x="53.6337%" y="1263.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::reserve (17 samples, 0.02%)</title><rect x="53.4039%" y="1061" width="0.0245%" height="15" fill="rgb(229,5,9)" fg:x="36995" fg:w="17"/><text x="53.6539%" y="1071.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (17 samples, 0.02%)</title><rect x="53.4039%" y="1045" width="0.0245%" height="15" fill="rgb(225,90,11)" fg:x="36995" fg:w="17"/><text x="53.6539%" y="1055.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (17 samples, 0.02%)</title><rect x="53.4039%" y="1029" width="0.0245%" height="15" fill="rgb(242,56,8)" fg:x="36995" fg:w="17"/><text x="53.6539%" y="1039.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::allocate (17 samples, 0.02%)</title><rect x="53.4039%" y="1013" width="0.0245%" height="15" fill="rgb(249,212,39)" fg:x="36995" fg:w="17"/><text x="53.6539%" y="1023.50"></text></g><g><title>std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (17 samples, 0.02%)</title><rect x="53.4039%" y="997" width="0.0245%" height="15" fill="rgb(236,90,9)" fg:x="36995" fg:w="17"/><text x="53.6539%" y="1007.50"></text></g><g><title>std::__new_allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (17 samples, 0.02%)</title><rect x="53.4039%" y="981" width="0.0245%" height="15" fill="rgb(206,88,35)" fg:x="36995" fg:w="17"/><text x="53.6539%" y="991.50"></text></g><g><title>operator new (17 samples, 0.02%)</title><rect x="53.4039%" y="965" width="0.0245%" height="15" fill="rgb(205,126,30)" fg:x="36995" fg:w="17"/><text x="53.6539%" y="975.50"></text></g><g><title>malloc (17 samples, 0.02%)</title><rect x="53.4039%" y="949" width="0.0245%" height="15" fill="rgb(230,176,12)" fg:x="36995" fg:w="17"/><text x="53.6539%" y="959.50"></text></g><g><title>_int_malloc (17 samples, 0.02%)</title><rect x="53.4039%" y="933" width="0.0245%" height="15" fill="rgb(243,19,9)" fg:x="36995" fg:w="17"/><text x="53.6539%" y="943.50"></text></g><g><title>malloc_consolidate (11 samples, 0.02%)</title><rect x="53.4125%" y="917" width="0.0159%" height="15" fill="rgb(245,171,17)" fg:x="37001" fg:w="11"/><text x="53.6625%" y="927.50"></text></g><g><title>QuadRound (11 samples, 0.02%)</title><rect x="53.4400%" y="1029" width="0.0159%" height="15" fill="rgb(227,52,21)" fg:x="37020" fg:w="11"/><text x="53.6900%" y="1039.50"></text></g><g><title>ShiftMessageB (15 samples, 0.02%)</title><rect x="53.4573%" y="1029" width="0.0217%" height="15" fill="rgb(238,69,14)" fg:x="37032" fg:w="15"/><text x="53.7073%" y="1039.50"></text></g><g><title>ShiftMessageC (11 samples, 0.02%)</title><rect x="53.4631%" y="1013" width="0.0159%" height="15" fill="rgb(241,156,39)" fg:x="37036" fg:w="11"/><text x="53.7131%" y="1023.50"></text></g><g><title>sha256_x86_shani::Transform (35 samples, 0.05%)</title><rect x="53.4356%" y="1045" width="0.0505%" height="15" fill="rgb(212,227,28)" fg:x="37017" fg:w="35"/><text x="53.6856%" y="1055.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (14 samples, 0.02%)</title><rect x="53.4862%" y="1045" width="0.0202%" height="15" fill="rgb(209,118,27)" fg:x="37052" fg:w="14"/><text x="53.7362%" y="1055.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="53.5064%" y="1045" width="0.0260%" height="15" fill="rgb(226,102,5)" fg:x="37066" fg:w="18"/><text x="53.7564%" y="1055.50"></text></g><g><title>DataStream::read (7 samples, 0.01%)</title><rect x="53.5598%" y="1013" width="0.0101%" height="15" fill="rgb(223,34,3)" fg:x="37103" fg:w="7"/><text x="53.8098%" y="1023.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (8 samples, 0.01%)</title><rect x="53.5598%" y="1029" width="0.0115%" height="15" fill="rgb(221,81,38)" fg:x="37103" fg:w="8"/><text x="53.8098%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (8 samples, 0.01%)</title><rect x="53.5728%" y="1029" width="0.0115%" height="15" fill="rgb(236,219,28)" fg:x="37112" fg:w="8"/><text x="53.8228%" y="1039.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (37 samples, 0.05%)</title><rect x="53.5323%" y="1045" width="0.0534%" height="15" fill="rgb(213,200,14)" fg:x="37084" fg:w="37"/><text x="53.7823%" y="1055.50"></text></g><g><title>DataStream::read (13 samples, 0.02%)</title><rect x="53.6132%" y="789" width="0.0188%" height="15" fill="rgb(240,33,19)" fg:x="37140" fg:w="13"/><text x="53.8632%" y="799.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.01%)</title><rect x="53.6320%" y="789" width="0.0130%" height="15" fill="rgb(233,113,27)" fg:x="37153" fg:w="9"/><text x="53.8820%" y="799.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="53.6449%" y="789" width="0.0202%" height="15" fill="rgb(220,221,18)" fg:x="37162" fg:w="14"/><text x="53.8949%" y="799.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (15 samples, 0.02%)</title><rect x="53.6652%" y="789" width="0.0217%" height="15" fill="rgb(238,92,8)" fg:x="37176" fg:w="15"/><text x="53.9152%" y="799.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="53.6969%" y="645" width="0.0245%" height="15" fill="rgb(222,164,16)" fg:x="37198" fg:w="17"/><text x="53.9469%" y="655.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="53.7056%" y="629" width="0.0159%" height="15" fill="rgb(241,119,3)" fg:x="37204" fg:w="11"/><text x="53.9556%" y="639.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (11 samples, 0.02%)</title><rect x="53.7056%" y="613" width="0.0159%" height="15" fill="rgb(241,44,8)" fg:x="37204" fg:w="11"/><text x="53.9556%" y="623.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (21 samples, 0.03%)</title><rect x="53.6940%" y="773" width="0.0303%" height="15" fill="rgb(230,36,40)" fg:x="37196" fg:w="21"/><text x="53.9440%" y="783.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (21 samples, 0.03%)</title><rect x="53.6940%" y="757" width="0.0303%" height="15" fill="rgb(243,16,36)" fg:x="37196" fg:w="21"/><text x="53.9440%" y="767.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (21 samples, 0.03%)</title><rect x="53.6940%" y="741" width="0.0303%" height="15" fill="rgb(231,4,26)" fg:x="37196" fg:w="21"/><text x="53.9440%" y="751.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (21 samples, 0.03%)</title><rect x="53.6940%" y="725" width="0.0303%" height="15" fill="rgb(240,9,31)" fg:x="37196" fg:w="21"/><text x="53.9440%" y="735.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (21 samples, 0.03%)</title><rect x="53.6940%" y="709" width="0.0303%" height="15" fill="rgb(207,173,15)" fg:x="37196" fg:w="21"/><text x="53.9440%" y="719.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (19 samples, 0.03%)</title><rect x="53.6969%" y="693" width="0.0274%" height="15" fill="rgb(224,192,53)" fg:x="37198" fg:w="19"/><text x="53.9469%" y="703.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (19 samples, 0.03%)</title><rect x="53.6969%" y="677" width="0.0274%" height="15" fill="rgb(223,67,28)" fg:x="37198" fg:w="19"/><text x="53.9469%" y="687.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="53.6969%" y="661" width="0.0274%" height="15" fill="rgb(211,20,47)" fg:x="37198" fg:w="19"/><text x="53.9469%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (27 samples, 0.04%)</title><rect x="53.6868%" y="789" width="0.0390%" height="15" fill="rgb(240,228,2)" fg:x="37191" fg:w="27"/><text x="53.9368%" y="799.50"></text></g><g><title>DataStream::read (18 samples, 0.03%)</title><rect x="53.7446%" y="773" width="0.0260%" height="15" fill="rgb(248,151,12)" fg:x="37231" fg:w="18"/><text x="53.9946%" y="783.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (8 samples, 0.01%)</title><rect x="53.7590%" y="757" width="0.0115%" height="15" fill="rgb(244,8,39)" fg:x="37241" fg:w="8"/><text x="54.0090%" y="767.50"></text></g><g><title>__lll_lock_wait_private (7 samples, 0.01%)</title><rect x="53.7864%" y="645" width="0.0101%" height="15" fill="rgb(222,26,8)" fg:x="37260" fg:w="7"/><text x="54.0364%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="53.7864%" y="629" width="0.0101%" height="15" fill="rgb(213,106,44)" fg:x="37260" fg:w="7"/><text x="54.0364%" y="639.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="53.7864%" y="613" width="0.0101%" height="15" fill="rgb(214,129,20)" fg:x="37260" fg:w="7"/><text x="54.0364%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="53.7864%" y="597" width="0.0101%" height="15" fill="rgb(212,32,13)" fg:x="37260" fg:w="7"/><text x="54.0364%" y="607.50"></text></g><g><title>__lll_lock_wake_private (115 samples, 0.17%)</title><rect x="53.7965%" y="645" width="0.1660%" height="15" fill="rgb(208,168,33)" fg:x="37267" fg:w="115"/><text x="54.0465%" y="655.50"></text></g><g><title>[unknown] (115 samples, 0.17%)</title><rect x="53.7965%" y="629" width="0.1660%" height="15" fill="rgb(231,207,8)" fg:x="37267" fg:w="115"/><text x="54.0465%" y="639.50"></text></g><g><title>[unknown] (112 samples, 0.16%)</title><rect x="53.8008%" y="613" width="0.1617%" height="15" fill="rgb(235,219,23)" fg:x="37270" fg:w="112"/><text x="54.0508%" y="623.50"></text></g><g><title>[unknown] (112 samples, 0.16%)</title><rect x="53.8008%" y="597" width="0.1617%" height="15" fill="rgb(226,216,26)" fg:x="37270" fg:w="112"/><text x="54.0508%" y="607.50"></text></g><g><title>[unknown] (102 samples, 0.15%)</title><rect x="53.8153%" y="581" width="0.1472%" height="15" fill="rgb(239,137,16)" fg:x="37280" fg:w="102"/><text x="54.0653%" y="591.50"></text></g><g><title>[unknown] (96 samples, 0.14%)</title><rect x="53.8239%" y="565" width="0.1386%" height="15" fill="rgb(207,12,36)" fg:x="37286" fg:w="96"/><text x="54.0739%" y="575.50"></text></g><g><title>[unknown] (83 samples, 0.12%)</title><rect x="53.8427%" y="549" width="0.1198%" height="15" fill="rgb(210,214,24)" fg:x="37299" fg:w="83"/><text x="54.0927%" y="559.50"></text></g><g><title>[unknown] (75 samples, 0.11%)</title><rect x="53.8543%" y="533" width="0.1083%" height="15" fill="rgb(206,56,30)" fg:x="37307" fg:w="75"/><text x="54.1043%" y="543.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="53.9337%" y="517" width="0.0289%" height="15" fill="rgb(228,143,26)" fg:x="37362" fg:w="20"/><text x="54.1837%" y="527.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="53.9452%" y="501" width="0.0173%" height="15" fill="rgb(216,218,46)" fg:x="37370" fg:w="12"/><text x="54.1952%" y="511.50"></text></g><g><title>[[igc]] (7 samples, 0.01%)</title><rect x="54.9600%" y="517" width="0.0101%" height="15" fill="rgb(206,6,19)" fg:x="38073" fg:w="7"/><text x="55.2100%" y="527.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="54.9571%" y="613" width="0.0202%" height="15" fill="rgb(239,177,51)" fg:x="38071" fg:w="14"/><text x="55.2071%" y="623.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="54.9571%" y="597" width="0.0202%" height="15" fill="rgb(216,55,25)" fg:x="38071" fg:w="14"/><text x="55.2071%" y="607.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="54.9571%" y="581" width="0.0202%" height="15" fill="rgb(231,163,29)" fg:x="38071" fg:w="14"/><text x="55.2071%" y="591.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="54.9571%" y="565" width="0.0202%" height="15" fill="rgb(232,149,50)" fg:x="38071" fg:w="14"/><text x="55.2071%" y="575.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="54.9600%" y="549" width="0.0173%" height="15" fill="rgb(223,142,48)" fg:x="38073" fg:w="12"/><text x="55.2100%" y="559.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="54.9600%" y="533" width="0.0173%" height="15" fill="rgb(245,83,23)" fg:x="38073" fg:w="12"/><text x="55.2100%" y="543.50"></text></g><g><title>operator new (829 samples, 1.20%)</title><rect x="53.7835%" y="677" width="1.1967%" height="15" fill="rgb(224,63,2)" fg:x="37258" fg:w="829"/><text x="54.0335%" y="687.50"></text></g><g><title>malloc (828 samples, 1.20%)</title><rect x="53.7850%" y="661" width="1.1953%" height="15" fill="rgb(218,65,53)" fg:x="37259" fg:w="828"/><text x="54.0350%" y="671.50"></text></g><g><title>_int_malloc (705 samples, 1.02%)</title><rect x="53.9625%" y="645" width="1.0177%" height="15" fill="rgb(221,84,29)" fg:x="37382" fg:w="705"/><text x="54.2125%" y="655.50"></text></g><g><title>malloc_consolidate (414 samples, 0.60%)</title><rect x="54.3826%" y="629" width="0.5976%" height="15" fill="rgb(234,0,32)" fg:x="37673" fg:w="414"/><text x="54.6326%" y="639.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (834 samples, 1.20%)</title><rect x="53.7778%" y="757" width="1.2039%" height="15" fill="rgb(206,20,16)" fg:x="37254" fg:w="834"/><text x="54.0278%" y="767.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (834 samples, 1.20%)</title><rect x="53.7778%" y="741" width="1.2039%" height="15" fill="rgb(244,172,18)" fg:x="37254" fg:w="834"/><text x="54.0278%" y="751.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (834 samples, 1.20%)</title><rect x="53.7778%" y="725" width="1.2039%" height="15" fill="rgb(254,133,1)" fg:x="37254" fg:w="834"/><text x="54.0278%" y="735.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (834 samples, 1.20%)</title><rect x="53.7778%" y="709" width="1.2039%" height="15" fill="rgb(222,206,41)" fg:x="37254" fg:w="834"/><text x="54.0278%" y="719.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (834 samples, 1.20%)</title><rect x="53.7778%" y="693" width="1.2039%" height="15" fill="rgb(212,3,42)" fg:x="37254" fg:w="834"/><text x="54.0278%" y="703.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (839 samples, 1.21%)</title><rect x="53.7763%" y="773" width="1.2111%" height="15" fill="rgb(241,11,4)" fg:x="37253" fg:w="839"/><text x="54.0263%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (8 samples, 0.01%)</title><rect x="54.9961%" y="661" width="0.0115%" height="15" fill="rgb(205,19,26)" fg:x="38098" fg:w="8"/><text x="55.2461%" y="671.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="54.9961%" y="645" width="0.0115%" height="15" fill="rgb(210,179,32)" fg:x="38098" fg:w="8"/><text x="55.2461%" y="655.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="54.9961%" y="629" width="0.0115%" height="15" fill="rgb(227,116,49)" fg:x="38098" fg:w="8"/><text x="55.2461%" y="639.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (8 samples, 0.01%)</title><rect x="54.9961%" y="613" width="0.0115%" height="15" fill="rgb(211,146,6)" fg:x="38098" fg:w="8"/><text x="55.2461%" y="623.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (8 samples, 0.01%)</title><rect x="54.9961%" y="597" width="0.0115%" height="15" fill="rgb(219,44,39)" fg:x="38098" fg:w="8"/><text x="55.2461%" y="607.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (8 samples, 0.01%)</title><rect x="54.9961%" y="581" width="0.0115%" height="15" fill="rgb(234,128,11)" fg:x="38098" fg:w="8"/><text x="55.2461%" y="591.50"></text></g><g><title>__lll_lock_wait_private (7 samples, 0.01%)</title><rect x="55.0380%" y="485" width="0.0101%" height="15" fill="rgb(220,183,53)" fg:x="38127" fg:w="7"/><text x="55.2880%" y="495.50"></text></g><g><title>__lll_lock_wake_private (8 samples, 0.01%)</title><rect x="55.0481%" y="485" width="0.0115%" height="15" fill="rgb(213,219,32)" fg:x="38134" fg:w="8"/><text x="55.2981%" y="495.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="55.0481%" y="469" width="0.0115%" height="15" fill="rgb(232,156,16)" fg:x="38134" fg:w="8"/><text x="55.2981%" y="479.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (23 samples, 0.03%)</title><rect x="55.0365%" y="549" width="0.0332%" height="15" fill="rgb(246,135,34)" fg:x="38126" fg:w="23"/><text x="55.2865%" y="559.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (23 samples, 0.03%)</title><rect x="55.0365%" y="533" width="0.0332%" height="15" fill="rgb(241,99,0)" fg:x="38126" fg:w="23"/><text x="55.2865%" y="543.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (23 samples, 0.03%)</title><rect x="55.0365%" y="517" width="0.0332%" height="15" fill="rgb(222,103,45)" fg:x="38126" fg:w="23"/><text x="55.2865%" y="527.50"></text></g><g><title>malloc (22 samples, 0.03%)</title><rect x="55.0380%" y="501" width="0.0318%" height="15" fill="rgb(212,57,4)" fg:x="38127" fg:w="22"/><text x="55.2880%" y="511.50"></text></g><g><title>_int_malloc (7 samples, 0.01%)</title><rect x="55.0596%" y="485" width="0.0101%" height="15" fill="rgb(215,68,47)" fg:x="38142" fg:w="7"/><text x="55.3096%" y="495.50"></text></g><g><title>DataStream::read (10 samples, 0.01%)</title><rect x="55.0870%" y="261" width="0.0144%" height="15" fill="rgb(230,84,2)" fg:x="38161" fg:w="10"/><text x="55.3370%" y="271.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (7 samples, 0.01%)</title><rect x="55.0914%" y="245" width="0.0101%" height="15" fill="rgb(220,102,14)" fg:x="38164" fg:w="7"/><text x="55.3414%" y="255.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (62 samples, 0.09%)</title><rect x="55.0163%" y="565" width="0.0895%" height="15" fill="rgb(240,10,32)" fg:x="38112" fg:w="62"/><text x="55.2663%" y="575.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (18 samples, 0.03%)</title><rect x="55.0798%" y="549" width="0.0260%" height="15" fill="rgb(215,47,27)" fg:x="38156" fg:w="18"/><text x="55.3298%" y="559.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (14 samples, 0.02%)</title><rect x="55.0856%" y="533" width="0.0202%" height="15" fill="rgb(233,188,43)" fg:x="38160" fg:w="14"/><text x="55.3356%" y="543.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (14 samples, 0.02%)</title><rect x="55.0856%" y="517" width="0.0202%" height="15" fill="rgb(253,190,1)" fg:x="38160" fg:w="14"/><text x="55.3356%" y="527.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="55.0856%" y="501" width="0.0202%" height="15" fill="rgb(206,114,52)" fg:x="38160" fg:w="14"/><text x="55.3356%" y="511.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="55.0856%" y="485" width="0.0202%" height="15" fill="rgb(233,120,37)" fg:x="38160" fg:w="14"/><text x="55.3356%" y="495.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (14 samples, 0.02%)</title><rect x="55.0856%" y="469" width="0.0202%" height="15" fill="rgb(214,52,39)" fg:x="38160" fg:w="14"/><text x="55.3356%" y="479.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (14 samples, 0.02%)</title><rect x="55.0856%" y="453" width="0.0202%" height="15" fill="rgb(223,80,29)" fg:x="38160" fg:w="14"/><text x="55.3356%" y="463.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (14 samples, 0.02%)</title><rect x="55.0856%" y="437" width="0.0202%" height="15" fill="rgb(230,101,40)" fg:x="38160" fg:w="14"/><text x="55.3356%" y="447.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (13 samples, 0.02%)</title><rect x="55.0870%" y="421" width="0.0188%" height="15" fill="rgb(219,211,8)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="431.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="55.0870%" y="405" width="0.0188%" height="15" fill="rgb(252,126,28)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="415.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="55.0870%" y="389" width="0.0188%" height="15" fill="rgb(215,56,38)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="399.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (13 samples, 0.02%)</title><rect x="55.0870%" y="373" width="0.0188%" height="15" fill="rgb(249,55,44)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="383.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (13 samples, 0.02%)</title><rect x="55.0870%" y="357" width="0.0188%" height="15" fill="rgb(220,221,32)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="367.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (13 samples, 0.02%)</title><rect x="55.0870%" y="341" width="0.0188%" height="15" fill="rgb(212,216,41)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="351.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (13 samples, 0.02%)</title><rect x="55.0870%" y="325" width="0.0188%" height="15" fill="rgb(228,213,43)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="335.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="55.0870%" y="309" width="0.0188%" height="15" fill="rgb(211,31,26)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="319.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="55.0870%" y="293" width="0.0188%" height="15" fill="rgb(229,202,19)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="303.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (13 samples, 0.02%)</title><rect x="55.0870%" y="277" width="0.0188%" height="15" fill="rgb(229,105,46)" fg:x="38161" fg:w="13"/><text x="55.3370%" y="287.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (92 samples, 0.13%)</title><rect x="54.9903%" y="773" width="0.1328%" height="15" fill="rgb(235,108,1)" fg:x="38094" fg:w="92"/><text x="55.2403%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (92 samples, 0.13%)</title><rect x="54.9903%" y="757" width="0.1328%" height="15" fill="rgb(245,111,35)" fg:x="38094" fg:w="92"/><text x="55.2403%" y="767.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (92 samples, 0.13%)</title><rect x="54.9903%" y="741" width="0.1328%" height="15" fill="rgb(219,185,31)" fg:x="38094" fg:w="92"/><text x="55.2403%" y="751.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (92 samples, 0.13%)</title><rect x="54.9903%" y="725" width="0.1328%" height="15" fill="rgb(214,4,43)" fg:x="38094" fg:w="92"/><text x="55.2403%" y="735.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (92 samples, 0.13%)</title><rect x="54.9903%" y="709" width="0.1328%" height="15" fill="rgb(235,227,40)" fg:x="38094" fg:w="92"/><text x="55.2403%" y="719.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (92 samples, 0.13%)</title><rect x="54.9903%" y="693" width="0.1328%" height="15" fill="rgb(230,88,30)" fg:x="38094" fg:w="92"/><text x="55.2403%" y="703.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (92 samples, 0.13%)</title><rect x="54.9903%" y="677" width="0.1328%" height="15" fill="rgb(216,217,1)" fg:x="38094" fg:w="92"/><text x="55.2403%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (80 samples, 0.12%)</title><rect x="55.0077%" y="661" width="0.1155%" height="15" fill="rgb(248,139,50)" fg:x="38106" fg:w="80"/><text x="55.2577%" y="671.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (80 samples, 0.12%)</title><rect x="55.0077%" y="645" width="0.1155%" height="15" fill="rgb(233,1,21)" fg:x="38106" fg:w="80"/><text x="55.2577%" y="655.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (80 samples, 0.12%)</title><rect x="55.0077%" y="629" width="0.1155%" height="15" fill="rgb(215,183,12)" fg:x="38106" fg:w="80"/><text x="55.2577%" y="639.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (80 samples, 0.12%)</title><rect x="55.0077%" y="613" width="0.1155%" height="15" fill="rgb(229,104,42)" fg:x="38106" fg:w="80"/><text x="55.2577%" y="623.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (80 samples, 0.12%)</title><rect x="55.0077%" y="597" width="0.1155%" height="15" fill="rgb(243,34,48)" fg:x="38106" fg:w="80"/><text x="55.2577%" y="607.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (80 samples, 0.12%)</title><rect x="55.0077%" y="581" width="0.1155%" height="15" fill="rgb(239,11,44)" fg:x="38106" fg:w="80"/><text x="55.2577%" y="591.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="55.1073%" y="565" width="0.0159%" height="15" fill="rgb(231,98,35)" fg:x="38175" fg:w="11"/><text x="55.3573%" y="575.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="55.1231%" y="773" width="0.0188%" height="15" fill="rgb(233,28,25)" fg:x="38186" fg:w="13"/><text x="55.3731%" y="783.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="757" width="0.0144%" height="15" fill="rgb(234,123,11)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="767.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="741" width="0.0144%" height="15" fill="rgb(220,69,3)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="751.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="725" width="0.0144%" height="15" fill="rgb(214,64,36)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="735.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="709" width="0.0144%" height="15" fill="rgb(211,138,32)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="719.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="693" width="0.0144%" height="15" fill="rgb(213,118,47)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="703.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="677" width="0.0144%" height="15" fill="rgb(243,124,49)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="687.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="661" width="0.0144%" height="15" fill="rgb(221,30,28)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="671.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="645" width="0.0144%" height="15" fill="rgb(246,37,13)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="655.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="629" width="0.0144%" height="15" fill="rgb(249,66,14)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="639.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="55.1275%" y="613" width="0.0144%" height="15" fill="rgb(213,166,5)" fg:x="38189" fg:w="10"/><text x="55.3775%" y="623.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (8 samples, 0.01%)</title><rect x="55.1304%" y="597" width="0.0115%" height="15" fill="rgb(221,66,24)" fg:x="38191" fg:w="8"/><text x="55.3804%" y="607.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (8 samples, 0.01%)</title><rect x="55.1304%" y="581" width="0.0115%" height="15" fill="rgb(210,132,17)" fg:x="38191" fg:w="8"/><text x="55.3804%" y="591.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="55.1304%" y="565" width="0.0115%" height="15" fill="rgb(243,202,5)" fg:x="38191" fg:w="8"/><text x="55.3804%" y="575.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="55.1304%" y="549" width="0.0115%" height="15" fill="rgb(233,70,48)" fg:x="38191" fg:w="8"/><text x="55.3804%" y="559.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (8 samples, 0.01%)</title><rect x="55.1304%" y="533" width="0.0115%" height="15" fill="rgb(238,41,26)" fg:x="38191" fg:w="8"/><text x="55.3804%" y="543.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::size (8 samples, 0.01%)</title><rect x="55.1448%" y="757" width="0.0115%" height="15" fill="rgb(241,19,31)" fg:x="38201" fg:w="8"/><text x="55.3948%" y="767.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (992 samples, 1.43%)</title><rect x="53.7258%" y="789" width="1.4320%" height="15" fill="rgb(214,76,10)" fg:x="37218" fg:w="992"/><text x="53.9758%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="55.1419%" y="773" width="0.0159%" height="15" fill="rgb(254,202,22)" fg:x="38199" fg:w="11"/><text x="55.3919%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (1,082 samples, 1.56%)</title><rect x="53.5988%" y="853" width="1.5619%" height="15" fill="rgb(214,72,24)" fg:x="37130" fg:w="1082"/><text x="53.8488%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1,082 samples, 1.56%)</title><rect x="53.5988%" y="837" width="1.5619%" height="15" fill="rgb(221,92,46)" fg:x="37130" fg:w="1082"/><text x="53.8488%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (1,082 samples, 1.56%)</title><rect x="53.5988%" y="821" width="1.5619%" height="15" fill="rgb(246,13,50)" fg:x="37130" fg:w="1082"/><text x="53.8488%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1,082 samples, 1.56%)</title><rect x="53.5988%" y="805" width="1.5619%" height="15" fill="rgb(240,165,38)" fg:x="37130" fg:w="1082"/><text x="53.8488%" y="815.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="55.1650%" y="789" width="0.0188%" height="15" fill="rgb(241,24,51)" fg:x="38215" fg:w="13"/><text x="55.4150%" y="799.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (18 samples, 0.03%)</title><rect x="55.1838%" y="789" width="0.0260%" height="15" fill="rgb(227,51,44)" fg:x="38228" fg:w="18"/><text x="55.4338%" y="799.50"></text></g><g><title>DataStream::read (8 samples, 0.01%)</title><rect x="55.2271%" y="501" width="0.0115%" height="15" fill="rgb(231,121,3)" fg:x="38258" fg:w="8"/><text x="55.4771%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (21 samples, 0.03%)</title><rect x="55.2097%" y="789" width="0.0303%" height="15" fill="rgb(245,3,41)" fg:x="38246" fg:w="21"/><text x="55.4597%" y="799.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (11 samples, 0.02%)</title><rect x="55.2242%" y="773" width="0.0159%" height="15" fill="rgb(214,13,26)" fg:x="38256" fg:w="11"/><text x="55.4742%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (11 samples, 0.02%)</title><rect x="55.2242%" y="757" width="0.0159%" height="15" fill="rgb(252,75,11)" fg:x="38256" fg:w="11"/><text x="55.4742%" y="767.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="55.2242%" y="741" width="0.0159%" height="15" fill="rgb(218,226,17)" fg:x="38256" fg:w="11"/><text x="55.4742%" y="751.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="55.2242%" y="725" width="0.0159%" height="15" fill="rgb(248,89,38)" fg:x="38256" fg:w="11"/><text x="55.4742%" y="735.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (11 samples, 0.02%)</title><rect x="55.2242%" y="709" width="0.0159%" height="15" fill="rgb(237,73,46)" fg:x="38256" fg:w="11"/><text x="55.4742%" y="719.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (11 samples, 0.02%)</title><rect x="55.2242%" y="693" width="0.0159%" height="15" fill="rgb(242,78,33)" fg:x="38256" fg:w="11"/><text x="55.4742%" y="703.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (11 samples, 0.02%)</title><rect x="55.2242%" y="677" width="0.0159%" height="15" fill="rgb(235,60,3)" fg:x="38256" fg:w="11"/><text x="55.4742%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (10 samples, 0.01%)</title><rect x="55.2256%" y="661" width="0.0144%" height="15" fill="rgb(216,172,19)" fg:x="38257" fg:w="10"/><text x="55.4756%" y="671.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="55.2256%" y="645" width="0.0144%" height="15" fill="rgb(227,6,42)" fg:x="38257" fg:w="10"/><text x="55.4756%" y="655.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="55.2256%" y="629" width="0.0144%" height="15" fill="rgb(223,207,42)" fg:x="38257" fg:w="10"/><text x="55.4756%" y="639.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (10 samples, 0.01%)</title><rect x="55.2256%" y="613" width="0.0144%" height="15" fill="rgb(246,138,30)" fg:x="38257" fg:w="10"/><text x="55.4756%" y="623.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (10 samples, 0.01%)</title><rect x="55.2256%" y="597" width="0.0144%" height="15" fill="rgb(251,199,47)" fg:x="38257" fg:w="10"/><text x="55.4756%" y="607.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (10 samples, 0.01%)</title><rect x="55.2256%" y="581" width="0.0144%" height="15" fill="rgb(228,218,44)" fg:x="38257" fg:w="10"/><text x="55.4756%" y="591.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (9 samples, 0.01%)</title><rect x="55.2271%" y="565" width="0.0130%" height="15" fill="rgb(220,68,6)" fg:x="38258" fg:w="9"/><text x="55.4771%" y="575.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="55.2271%" y="549" width="0.0130%" height="15" fill="rgb(240,60,26)" fg:x="38258" fg:w="9"/><text x="55.4771%" y="559.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="55.2271%" y="533" width="0.0130%" height="15" fill="rgb(211,200,19)" fg:x="38258" fg:w="9"/><text x="55.4771%" y="543.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (9 samples, 0.01%)</title><rect x="55.2271%" y="517" width="0.0130%" height="15" fill="rgb(242,145,30)" fg:x="38258" fg:w="9"/><text x="55.4771%" y="527.50"></text></g><g><title>__lll_lock_wake_private (100 samples, 0.14%)</title><rect x="55.2733%" y="645" width="0.1444%" height="15" fill="rgb(225,64,13)" fg:x="38290" fg:w="100"/><text x="55.5233%" y="655.50"></text></g><g><title>[unknown] (99 samples, 0.14%)</title><rect x="55.2747%" y="629" width="0.1429%" height="15" fill="rgb(218,103,35)" fg:x="38291" fg:w="99"/><text x="55.5247%" y="639.50"></text></g><g><title>[unknown] (97 samples, 0.14%)</title><rect x="55.2776%" y="613" width="0.1400%" height="15" fill="rgb(216,93,46)" fg:x="38293" fg:w="97"/><text x="55.5276%" y="623.50"></text></g><g><title>[unknown] (97 samples, 0.14%)</title><rect x="55.2776%" y="597" width="0.1400%" height="15" fill="rgb(225,159,27)" fg:x="38293" fg:w="97"/><text x="55.5276%" y="607.50"></text></g><g><title>[unknown] (92 samples, 0.13%)</title><rect x="55.2848%" y="581" width="0.1328%" height="15" fill="rgb(225,204,11)" fg:x="38298" fg:w="92"/><text x="55.5348%" y="591.50"></text></g><g><title>[unknown] (90 samples, 0.13%)</title><rect x="55.2877%" y="565" width="0.1299%" height="15" fill="rgb(205,56,4)" fg:x="38300" fg:w="90"/><text x="55.5377%" y="575.50"></text></g><g><title>[unknown] (80 samples, 0.12%)</title><rect x="55.3021%" y="549" width="0.1155%" height="15" fill="rgb(206,6,35)" fg:x="38310" fg:w="80"/><text x="55.5521%" y="559.50"></text></g><g><title>[unknown] (73 samples, 0.11%)</title><rect x="55.3122%" y="533" width="0.1054%" height="15" fill="rgb(247,73,52)" fg:x="38317" fg:w="73"/><text x="55.5622%" y="543.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="55.3931%" y="517" width="0.0245%" height="15" fill="rgb(246,97,4)" fg:x="38373" fg:w="17"/><text x="55.6431%" y="527.50"></text></g><g><title>_int_malloc (233 samples, 0.34%)</title><rect x="55.4176%" y="645" width="0.3363%" height="15" fill="rgb(212,37,15)" fg:x="38390" fg:w="233"/><text x="55.6676%" y="655.50"></text></g><g><title>malloc_consolidate (104 samples, 0.15%)</title><rect x="55.6038%" y="629" width="0.1501%" height="15" fill="rgb(208,130,40)" fg:x="38519" fg:w="104"/><text x="55.8538%" y="639.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (341 samples, 0.49%)</title><rect x="55.2632%" y="757" width="0.4922%" height="15" fill="rgb(236,55,29)" fg:x="38283" fg:w="341"/><text x="55.5132%" y="767.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (341 samples, 0.49%)</title><rect x="55.2632%" y="741" width="0.4922%" height="15" fill="rgb(209,156,45)" fg:x="38283" fg:w="341"/><text x="55.5132%" y="751.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (341 samples, 0.49%)</title><rect x="55.2632%" y="725" width="0.4922%" height="15" fill="rgb(249,107,4)" fg:x="38283" fg:w="341"/><text x="55.5132%" y="735.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::allocate (341 samples, 0.49%)</title><rect x="55.2632%" y="709" width="0.4922%" height="15" fill="rgb(227,7,13)" fg:x="38283" fg:w="341"/><text x="55.5132%" y="719.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::allocate (341 samples, 0.49%)</title><rect x="55.2632%" y="693" width="0.4922%" height="15" fill="rgb(250,129,14)" fg:x="38283" fg:w="341"/><text x="55.5132%" y="703.50"></text></g><g><title>operator new (340 samples, 0.49%)</title><rect x="55.2646%" y="677" width="0.4908%" height="15" fill="rgb(229,92,13)" fg:x="38284" fg:w="340"/><text x="55.5146%" y="687.50"></text></g><g><title>malloc (340 samples, 0.49%)</title><rect x="55.2646%" y="661" width="0.4908%" height="15" fill="rgb(245,98,39)" fg:x="38284" fg:w="340"/><text x="55.5146%" y="671.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (345 samples, 0.50%)</title><rect x="55.2632%" y="773" width="0.4980%" height="15" fill="rgb(234,135,48)" fg:x="38283" fg:w="345"/><text x="55.5132%" y="783.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.04%)</title><rect x="55.7684%" y="565" width="0.0361%" height="15" fill="rgb(230,98,28)" fg:x="38633" fg:w="25"/><text x="56.0184%" y="575.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="55.7915%" y="549" width="0.0130%" height="15" fill="rgb(223,121,0)" fg:x="38649" fg:w="9"/><text x="56.0415%" y="559.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (9 samples, 0.01%)</title><rect x="55.7915%" y="533" width="0.0130%" height="15" fill="rgb(234,173,33)" fg:x="38649" fg:w="9"/><text x="56.0415%" y="543.50"></text></g><g><title>DataStream::read (9 samples, 0.01%)</title><rect x="55.7915%" y="517" width="0.0130%" height="15" fill="rgb(245,47,8)" fg:x="38649" fg:w="9"/><text x="56.0415%" y="527.50"></text></g><g><title>DataStream::read (10 samples, 0.01%)</title><rect x="55.8233%" y="533" width="0.0144%" height="15" fill="rgb(205,17,20)" fg:x="38671" fg:w="10"/><text x="56.0733%" y="543.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (12 samples, 0.02%)</title><rect x="55.8233%" y="549" width="0.0173%" height="15" fill="rgb(232,151,16)" fg:x="38671" fg:w="12"/><text x="56.0733%" y="559.50"></text></g><g><title>__lll_lock_wake_private (99 samples, 0.14%)</title><rect x="55.8637%" y="485" width="0.1429%" height="15" fill="rgb(208,30,32)" fg:x="38699" fg:w="99"/><text x="56.1137%" y="495.50"></text></g><g><title>[unknown] (99 samples, 0.14%)</title><rect x="55.8637%" y="469" width="0.1429%" height="15" fill="rgb(254,26,3)" fg:x="38699" fg:w="99"/><text x="56.1137%" y="479.50"></text></g><g><title>[unknown] (99 samples, 0.14%)</title><rect x="55.8637%" y="453" width="0.1429%" height="15" fill="rgb(240,177,30)" fg:x="38699" fg:w="99"/><text x="56.1137%" y="463.50"></text></g><g><title>[unknown] (99 samples, 0.14%)</title><rect x="55.8637%" y="437" width="0.1429%" height="15" fill="rgb(248,76,44)" fg:x="38699" fg:w="99"/><text x="56.1137%" y="447.50"></text></g><g><title>[unknown] (95 samples, 0.14%)</title><rect x="55.8694%" y="421" width="0.1371%" height="15" fill="rgb(241,186,54)" fg:x="38703" fg:w="95"/><text x="56.1194%" y="431.50"></text></g><g><title>[unknown] (92 samples, 0.13%)</title><rect x="55.8738%" y="405" width="0.1328%" height="15" fill="rgb(249,171,29)" fg:x="38706" fg:w="92"/><text x="56.1238%" y="415.50"></text></g><g><title>[unknown] (81 samples, 0.12%)</title><rect x="55.8897%" y="389" width="0.1169%" height="15" fill="rgb(237,151,44)" fg:x="38717" fg:w="81"/><text x="56.1397%" y="399.50"></text></g><g><title>[unknown] (79 samples, 0.11%)</title><rect x="55.8925%" y="373" width="0.1140%" height="15" fill="rgb(228,174,30)" fg:x="38719" fg:w="79"/><text x="56.1425%" y="383.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="55.9792%" y="357" width="0.0274%" height="15" fill="rgb(252,14,37)" fg:x="38779" fg:w="19"/><text x="56.2292%" y="367.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (151 samples, 0.22%)</title><rect x="55.8435%" y="549" width="0.2180%" height="15" fill="rgb(207,111,40)" fg:x="38685" fg:w="151"/><text x="56.0935%" y="559.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (149 samples, 0.22%)</title><rect x="55.8463%" y="533" width="0.2151%" height="15" fill="rgb(248,171,54)" fg:x="38687" fg:w="149"/><text x="56.0963%" y="543.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (148 samples, 0.21%)</title><rect x="55.8478%" y="517" width="0.2136%" height="15" fill="rgb(211,127,2)" fg:x="38688" fg:w="148"/><text x="56.0978%" y="527.50"></text></g><g><title>malloc (146 samples, 0.21%)</title><rect x="55.8507%" y="501" width="0.2108%" height="15" fill="rgb(236,87,47)" fg:x="38690" fg:w="146"/><text x="56.1007%" y="511.50"></text></g><g><title>_int_malloc (38 samples, 0.05%)</title><rect x="56.0066%" y="485" width="0.0549%" height="15" fill="rgb(223,190,45)" fg:x="38798" fg:w="38"/><text x="56.2566%" y="495.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (189 samples, 0.27%)</title><rect x="55.8045%" y="565" width="0.2728%" height="15" fill="rgb(215,5,16)" fg:x="38658" fg:w="189"/><text x="56.0545%" y="575.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="56.0773%" y="565" width="0.0173%" height="15" fill="rgb(252,82,33)" fg:x="38847" fg:w="12"/><text x="56.3273%" y="575.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (9 samples, 0.01%)</title><rect x="56.0816%" y="549" width="0.0130%" height="15" fill="rgb(247,213,44)" fg:x="38850" fg:w="9"/><text x="56.3316%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (9 samples, 0.01%)</title><rect x="56.0816%" y="533" width="0.0130%" height="15" fill="rgb(205,196,44)" fg:x="38850" fg:w="9"/><text x="56.3316%" y="543.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="56.0816%" y="517" width="0.0130%" height="15" fill="rgb(237,96,54)" fg:x="38850" fg:w="9"/><text x="56.3316%" y="527.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="56.0816%" y="501" width="0.0130%" height="15" fill="rgb(230,113,34)" fg:x="38850" fg:w="9"/><text x="56.3316%" y="511.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (9 samples, 0.01%)</title><rect x="56.0816%" y="485" width="0.0130%" height="15" fill="rgb(221,224,12)" fg:x="38850" fg:w="9"/><text x="56.3316%" y="495.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (9 samples, 0.01%)</title><rect x="56.0816%" y="469" width="0.0130%" height="15" fill="rgb(219,112,44)" fg:x="38850" fg:w="9"/><text x="56.3316%" y="479.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (9 samples, 0.01%)</title><rect x="56.0816%" y="453" width="0.0130%" height="15" fill="rgb(210,31,13)" fg:x="38850" fg:w="9"/><text x="56.3316%" y="463.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (7 samples, 0.01%)</title><rect x="56.1105%" y="549" width="0.0101%" height="15" fill="rgb(230,25,16)" fg:x="38870" fg:w="7"/><text x="56.3605%" y="559.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (255 samples, 0.37%)</title><rect x="55.7626%" y="773" width="0.3681%" height="15" fill="rgb(246,108,53)" fg:x="38629" fg:w="255"/><text x="56.0126%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (255 samples, 0.37%)</title><rect x="55.7626%" y="757" width="0.3681%" height="15" fill="rgb(241,172,50)" fg:x="38629" fg:w="255"/><text x="56.0126%" y="767.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (255 samples, 0.37%)</title><rect x="55.7626%" y="741" width="0.3681%" height="15" fill="rgb(235,141,10)" fg:x="38629" fg:w="255"/><text x="56.0126%" y="751.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (255 samples, 0.37%)</title><rect x="55.7626%" y="725" width="0.3681%" height="15" fill="rgb(220,174,43)" fg:x="38629" fg:w="255"/><text x="56.0126%" y="735.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (255 samples, 0.37%)</title><rect x="55.7626%" y="709" width="0.3681%" height="15" fill="rgb(215,181,40)" fg:x="38629" fg:w="255"/><text x="56.0126%" y="719.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (255 samples, 0.37%)</title><rect x="55.7626%" y="693" width="0.3681%" height="15" fill="rgb(230,97,2)" fg:x="38629" fg:w="255"/><text x="56.0126%" y="703.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (255 samples, 0.37%)</title><rect x="55.7626%" y="677" width="0.3681%" height="15" fill="rgb(211,25,27)" fg:x="38629" fg:w="255"/><text x="56.0126%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (252 samples, 0.36%)</title><rect x="55.7670%" y="661" width="0.3638%" height="15" fill="rgb(230,87,26)" fg:x="38632" fg:w="252"/><text x="56.0170%" y="671.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (252 samples, 0.36%)</title><rect x="55.7670%" y="645" width="0.3638%" height="15" fill="rgb(227,160,17)" fg:x="38632" fg:w="252"/><text x="56.0170%" y="655.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (252 samples, 0.36%)</title><rect x="55.7670%" y="629" width="0.3638%" height="15" fill="rgb(244,85,34)" fg:x="38632" fg:w="252"/><text x="56.0170%" y="639.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (252 samples, 0.36%)</title><rect x="55.7670%" y="613" width="0.3638%" height="15" fill="rgb(207,70,0)" fg:x="38632" fg:w="252"/><text x="56.0170%" y="623.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (252 samples, 0.36%)</title><rect x="55.7670%" y="597" width="0.3638%" height="15" fill="rgb(223,129,7)" fg:x="38632" fg:w="252"/><text x="56.0170%" y="607.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (252 samples, 0.36%)</title><rect x="55.7670%" y="581" width="0.3638%" height="15" fill="rgb(246,105,7)" fg:x="38632" fg:w="252"/><text x="56.0170%" y="591.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (25 samples, 0.04%)</title><rect x="56.0946%" y="565" width="0.0361%" height="15" fill="rgb(215,154,42)" fg:x="38859" fg:w="25"/><text x="56.3446%" y="575.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (7 samples, 0.01%)</title><rect x="56.1206%" y="549" width="0.0101%" height="15" fill="rgb(220,215,30)" fg:x="38877" fg:w="7"/><text x="56.3706%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (7 samples, 0.01%)</title><rect x="56.1206%" y="533" width="0.0101%" height="15" fill="rgb(228,81,51)" fg:x="38877" fg:w="7"/><text x="56.3706%" y="543.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="56.1206%" y="517" width="0.0101%" height="15" fill="rgb(247,71,54)" fg:x="38877" fg:w="7"/><text x="56.3706%" y="527.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="56.1206%" y="501" width="0.0101%" height="15" fill="rgb(234,176,34)" fg:x="38877" fg:w="7"/><text x="56.3706%" y="511.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (7 samples, 0.01%)</title><rect x="56.1206%" y="485" width="0.0101%" height="15" fill="rgb(241,103,54)" fg:x="38877" fg:w="7"/><text x="56.3706%" y="495.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (7 samples, 0.01%)</title><rect x="56.1206%" y="469" width="0.0101%" height="15" fill="rgb(228,22,34)" fg:x="38877" fg:w="7"/><text x="56.3706%" y="479.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (7 samples, 0.01%)</title><rect x="56.1206%" y="453" width="0.0101%" height="15" fill="rgb(241,179,48)" fg:x="38877" fg:w="7"/><text x="56.3706%" y="463.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (676 samples, 0.98%)</title><rect x="55.1607%" y="853" width="0.9758%" height="15" fill="rgb(235,167,37)" fg:x="38212" fg:w="676"/><text x="55.4107%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (676 samples, 0.98%)</title><rect x="55.1607%" y="837" width="0.9758%" height="15" fill="rgb(213,109,30)" fg:x="38212" fg:w="676"/><text x="55.4107%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (676 samples, 0.98%)</title><rect x="55.1607%" y="821" width="0.9758%" height="15" fill="rgb(222,172,16)" fg:x="38212" fg:w="676"/><text x="55.4107%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (676 samples, 0.98%)</title><rect x="55.1607%" y="805" width="0.9758%" height="15" fill="rgb(233,192,5)" fg:x="38212" fg:w="676"/><text x="55.4107%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (621 samples, 0.90%)</title><rect x="55.2401%" y="789" width="0.8964%" height="15" fill="rgb(247,189,41)" fg:x="38267" fg:w="621"/><text x="55.4901%" y="799.50"></text></g><g><title>__lll_lock_wake_private (174 samples, 0.25%)</title><rect x="56.1914%" y="645" width="0.2512%" height="15" fill="rgb(218,134,47)" fg:x="38926" fg:w="174"/><text x="56.4414%" y="655.50"></text></g><g><title>[unknown] (174 samples, 0.25%)</title><rect x="56.1914%" y="629" width="0.2512%" height="15" fill="rgb(216,29,3)" fg:x="38926" fg:w="174"/><text x="56.4414%" y="639.50"></text></g><g><title>[unknown] (173 samples, 0.25%)</title><rect x="56.1928%" y="613" width="0.2497%" height="15" fill="rgb(246,140,12)" fg:x="38927" fg:w="173"/><text x="56.4428%" y="623.50"></text></g><g><title>[unknown] (172 samples, 0.25%)</title><rect x="56.1942%" y="597" width="0.2483%" height="15" fill="rgb(230,136,11)" fg:x="38928" fg:w="172"/><text x="56.4442%" y="607.50"></text></g><g><title>[unknown] (163 samples, 0.24%)</title><rect x="56.2072%" y="581" width="0.2353%" height="15" fill="rgb(247,22,47)" fg:x="38937" fg:w="163"/><text x="56.4572%" y="591.50"></text></g><g><title>[unknown] (156 samples, 0.23%)</title><rect x="56.2173%" y="565" width="0.2252%" height="15" fill="rgb(218,84,22)" fg:x="38944" fg:w="156"/><text x="56.4673%" y="575.50"></text></g><g><title>[unknown] (132 samples, 0.19%)</title><rect x="56.2520%" y="549" width="0.1905%" height="15" fill="rgb(216,87,39)" fg:x="38968" fg:w="132"/><text x="56.5020%" y="559.50"></text></g><g><title>[unknown] (123 samples, 0.18%)</title><rect x="56.2650%" y="533" width="0.1776%" height="15" fill="rgb(221,178,8)" fg:x="38977" fg:w="123"/><text x="56.5150%" y="543.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="56.3935%" y="517" width="0.0491%" height="15" fill="rgb(230,42,11)" fg:x="39066" fg:w="34"/><text x="56.6435%" y="527.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="56.4180%" y="501" width="0.0245%" height="15" fill="rgb(237,229,4)" fg:x="39083" fg:w="17"/><text x="56.6680%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="56.4310%" y="485" width="0.0115%" height="15" fill="rgb(222,31,33)" fg:x="39092" fg:w="8"/><text x="56.6810%" y="495.50"></text></g><g><title>malloc (337 samples, 0.49%)</title><rect x="56.1755%" y="661" width="0.4865%" height="15" fill="rgb(210,17,39)" fg:x="38915" fg:w="337"/><text x="56.4255%" y="671.50"></text></g><g><title>_int_malloc (152 samples, 0.22%)</title><rect x="56.4425%" y="645" width="0.2194%" height="15" fill="rgb(244,93,20)" fg:x="39100" fg:w="152"/><text x="56.6925%" y="655.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (341 samples, 0.49%)</title><rect x="56.1711%" y="757" width="0.4922%" height="15" fill="rgb(210,40,47)" fg:x="38912" fg:w="341"/><text x="56.4211%" y="767.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (341 samples, 0.49%)</title><rect x="56.1711%" y="741" width="0.4922%" height="15" fill="rgb(239,211,47)" fg:x="38912" fg:w="341"/><text x="56.4211%" y="751.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (341 samples, 0.49%)</title><rect x="56.1711%" y="725" width="0.4922%" height="15" fill="rgb(251,223,49)" fg:x="38912" fg:w="341"/><text x="56.4211%" y="735.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (341 samples, 0.49%)</title><rect x="56.1711%" y="709" width="0.4922%" height="15" fill="rgb(221,149,5)" fg:x="38912" fg:w="341"/><text x="56.4211%" y="719.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (341 samples, 0.49%)</title><rect x="56.1711%" y="693" width="0.4922%" height="15" fill="rgb(219,224,51)" fg:x="38912" fg:w="341"/><text x="56.4211%" y="703.50"></text></g><g><title>operator new (340 samples, 0.49%)</title><rect x="56.1726%" y="677" width="0.4908%" height="15" fill="rgb(223,7,8)" fg:x="38913" fg:w="340"/><text x="56.4226%" y="687.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (365 samples, 0.53%)</title><rect x="56.1452%" y="773" width="0.5269%" height="15" fill="rgb(241,217,22)" fg:x="38894" fg:w="365"/><text x="56.3952%" y="783.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (7 samples, 0.01%)</title><rect x="56.6721%" y="773" width="0.0101%" height="15" fill="rgb(248,209,0)" fg:x="39259" fg:w="7"/><text x="56.9221%" y="783.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (12 samples, 0.02%)</title><rect x="56.6822%" y="773" width="0.0173%" height="15" fill="rgb(217,205,4)" fg:x="39266" fg:w="12"/><text x="56.9322%" y="783.50"></text></g><g><title>__memmove_avx512_unaligned_erms (12 samples, 0.02%)</title><rect x="56.7298%" y="693" width="0.0173%" height="15" fill="rgb(228,124,39)" fg:x="39299" fg:w="12"/><text x="56.9798%" y="703.50"></text></g><g><title>DataStream::read (19 samples, 0.03%)</title><rect x="56.7211%" y="725" width="0.0274%" height="15" fill="rgb(250,116,42)" fg:x="39293" fg:w="19"/><text x="56.9711%" y="735.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="56.7298%" y="709" width="0.0188%" height="15" fill="rgb(223,202,9)" fg:x="39299" fg:w="13"/><text x="56.9798%" y="719.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (22 samples, 0.03%)</title><rect x="56.7211%" y="741" width="0.0318%" height="15" fill="rgb(242,222,40)" fg:x="39293" fg:w="22"/><text x="56.9711%" y="751.50"></text></g><g><title>__lll_lock_wait_private (10 samples, 0.01%)</title><rect x="56.8511%" y="597" width="0.0144%" height="15" fill="rgb(229,99,46)" fg:x="39383" fg:w="10"/><text x="57.1011%" y="607.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="56.8525%" y="581" width="0.0130%" height="15" fill="rgb(225,56,46)" fg:x="39384" fg:w="9"/><text x="57.1025%" y="591.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="56.8525%" y="565" width="0.0130%" height="15" fill="rgb(227,94,5)" fg:x="39384" fg:w="9"/><text x="57.1025%" y="575.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="56.8525%" y="549" width="0.0130%" height="15" fill="rgb(205,112,38)" fg:x="39384" fg:w="9"/><text x="57.1025%" y="559.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="56.8539%" y="533" width="0.0115%" height="15" fill="rgb(231,133,46)" fg:x="39385" fg:w="8"/><text x="57.1039%" y="543.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="56.8554%" y="517" width="0.0101%" height="15" fill="rgb(217,16,9)" fg:x="39386" fg:w="7"/><text x="57.1054%" y="527.50"></text></g><g><title>__lll_lock_wake_private (359 samples, 0.52%)</title><rect x="56.8655%" y="597" width="0.5182%" height="15" fill="rgb(249,173,9)" fg:x="39393" fg:w="359"/><text x="57.1155%" y="607.50"></text></g><g><title>[unknown] (358 samples, 0.52%)</title><rect x="56.8669%" y="581" width="0.5168%" height="15" fill="rgb(205,163,53)" fg:x="39394" fg:w="358"/><text x="57.1169%" y="591.50"></text></g><g><title>[unknown] (353 samples, 0.51%)</title><rect x="56.8742%" y="565" width="0.5096%" height="15" fill="rgb(217,54,41)" fg:x="39399" fg:w="353"/><text x="57.1242%" y="575.50"></text></g><g><title>[unknown] (351 samples, 0.51%)</title><rect x="56.8770%" y="549" width="0.5067%" height="15" fill="rgb(228,216,12)" fg:x="39401" fg:w="351"/><text x="57.1270%" y="559.50"></text></g><g><title>[unknown] (334 samples, 0.48%)</title><rect x="56.9016%" y="533" width="0.4821%" height="15" fill="rgb(244,228,15)" fg:x="39418" fg:w="334"/><text x="57.1516%" y="543.50"></text></g><g><title>[unknown] (323 samples, 0.47%)</title><rect x="56.9175%" y="517" width="0.4663%" height="15" fill="rgb(221,176,53)" fg:x="39429" fg:w="323"/><text x="57.1675%" y="527.50"></text></g><g><title>[unknown] (294 samples, 0.42%)</title><rect x="56.9593%" y="501" width="0.4244%" height="15" fill="rgb(205,94,34)" fg:x="39458" fg:w="294"/><text x="57.2093%" y="511.50"></text></g><g><title>[unknown] (286 samples, 0.41%)</title><rect x="56.9709%" y="485" width="0.4129%" height="15" fill="rgb(213,110,48)" fg:x="39466" fg:w="286"/><text x="57.2209%" y="495.50"></text></g><g><title>[unknown] (70 samples, 0.10%)</title><rect x="57.2827%" y="469" width="0.1010%" height="15" fill="rgb(236,142,28)" fg:x="39682" fg:w="70"/><text x="57.5327%" y="479.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="57.3303%" y="453" width="0.0534%" height="15" fill="rgb(225,135,29)" fg:x="39715" fg:w="37"/><text x="57.5803%" y="463.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="57.3563%" y="437" width="0.0274%" height="15" fill="rgb(252,45,31)" fg:x="39733" fg:w="19"/><text x="57.6063%" y="447.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="57.3736%" y="421" width="0.0101%" height="15" fill="rgb(211,187,50)" fg:x="39745" fg:w="7"/><text x="57.6236%" y="431.50"></text></g><g><title>malloc_consolidate (33 samples, 0.05%)</title><rect x="57.6796%" y="581" width="0.0476%" height="15" fill="rgb(229,109,7)" fg:x="39957" fg:w="33"/><text x="57.9296%" y="591.50"></text></g><g><title>_int_malloc (238 samples, 0.34%)</title><rect x="57.3852%" y="597" width="0.3436%" height="15" fill="rgb(251,131,51)" fg:x="39753" fg:w="238"/><text x="57.6352%" y="607.50"></text></g><g><title>malloc (625 samples, 0.90%)</title><rect x="56.8280%" y="613" width="0.9022%" height="15" fill="rgb(251,180,35)" fg:x="39367" fg:w="625"/><text x="57.0780%" y="623.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (639 samples, 0.92%)</title><rect x="56.8106%" y="709" width="0.9224%" height="15" fill="rgb(211,46,32)" fg:x="39355" fg:w="639"/><text x="57.0606%" y="719.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (639 samples, 0.92%)</title><rect x="56.8106%" y="693" width="0.9224%" height="15" fill="rgb(248,123,17)" fg:x="39355" fg:w="639"/><text x="57.0606%" y="703.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (639 samples, 0.92%)</title><rect x="56.8106%" y="677" width="0.9224%" height="15" fill="rgb(227,141,18)" fg:x="39355" fg:w="639"/><text x="57.0606%" y="687.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (639 samples, 0.92%)</title><rect x="56.8106%" y="661" width="0.9224%" height="15" fill="rgb(216,102,9)" fg:x="39355" fg:w="639"/><text x="57.0606%" y="671.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (639 samples, 0.92%)</title><rect x="56.8106%" y="645" width="0.9224%" height="15" fill="rgb(253,47,13)" fg:x="39355" fg:w="639"/><text x="57.0606%" y="655.50"></text></g><g><title>operator new (636 samples, 0.92%)</title><rect x="56.8150%" y="629" width="0.9181%" height="15" fill="rgb(226,93,23)" fg:x="39358" fg:w="636"/><text x="57.0650%" y="639.50"></text></g><g><title>__memset_avx512_unaligned_erms (12 samples, 0.02%)</title><rect x="57.7489%" y="581" width="0.0173%" height="15" fill="rgb(247,104,17)" fg:x="40005" fg:w="12"/><text x="57.9989%" y="591.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (20 samples, 0.03%)</title><rect x="57.7403%" y="645" width="0.0289%" height="15" fill="rgb(233,203,26)" fg:x="39999" fg:w="20"/><text x="57.9903%" y="655.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (20 samples, 0.03%)</title><rect x="57.7403%" y="629" width="0.0289%" height="15" fill="rgb(244,98,49)" fg:x="39999" fg:w="20"/><text x="57.9903%" y="639.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (20 samples, 0.03%)</title><rect x="57.7403%" y="613" width="0.0289%" height="15" fill="rgb(235,134,22)" fg:x="39999" fg:w="20"/><text x="57.9903%" y="623.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (20 samples, 0.03%)</title><rect x="57.7403%" y="597" width="0.0289%" height="15" fill="rgb(221,70,32)" fg:x="39999" fg:w="20"/><text x="57.9903%" y="607.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (701 samples, 1.01%)</title><rect x="56.7587%" y="725" width="1.0119%" height="15" fill="rgb(238,15,50)" fg:x="39319" fg:w="701"/><text x="57.0087%" y="735.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (22 samples, 0.03%)</title><rect x="57.7388%" y="709" width="0.0318%" height="15" fill="rgb(215,221,48)" fg:x="39998" fg:w="22"/><text x="57.9888%" y="719.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (22 samples, 0.03%)</title><rect x="57.7388%" y="693" width="0.0318%" height="15" fill="rgb(236,73,3)" fg:x="39998" fg:w="22"/><text x="57.9888%" y="703.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (22 samples, 0.03%)</title><rect x="57.7388%" y="677" width="0.0318%" height="15" fill="rgb(250,107,11)" fg:x="39998" fg:w="22"/><text x="57.9888%" y="687.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (22 samples, 0.03%)</title><rect x="57.7388%" y="661" width="0.0318%" height="15" fill="rgb(242,39,14)" fg:x="39998" fg:w="22"/><text x="57.9888%" y="671.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.05%)</title><rect x="57.7706%" y="725" width="0.0476%" height="15" fill="rgb(248,164,37)" fg:x="40020" fg:w="33"/><text x="58.0206%" y="735.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="57.7951%" y="709" width="0.0231%" height="15" fill="rgb(217,60,12)" fg:x="40037" fg:w="16"/><text x="58.0451%" y="719.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (16 samples, 0.02%)</title><rect x="57.7951%" y="693" width="0.0231%" height="15" fill="rgb(240,125,29)" fg:x="40037" fg:w="16"/><text x="58.0451%" y="703.50"></text></g><g><title>DataStream::read (16 samples, 0.02%)</title><rect x="57.7951%" y="677" width="0.0231%" height="15" fill="rgb(208,207,28)" fg:x="40037" fg:w="16"/><text x="58.0451%" y="687.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (7 samples, 0.01%)</title><rect x="57.8081%" y="661" width="0.0101%" height="15" fill="rgb(209,159,27)" fg:x="40046" fg:w="7"/><text x="58.0581%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (12 samples, 0.02%)</title><rect x="57.8182%" y="725" width="0.0173%" height="15" fill="rgb(251,176,53)" fg:x="40053" fg:w="12"/><text x="58.0682%" y="735.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (13 samples, 0.02%)</title><rect x="57.8601%" y="453" width="0.0188%" height="15" fill="rgb(211,85,7)" fg:x="40082" fg:w="13"/><text x="58.1101%" y="463.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (8 samples, 0.01%)</title><rect x="57.8803%" y="453" width="0.0115%" height="15" fill="rgb(216,64,54)" fg:x="40096" fg:w="8"/><text x="58.1303%" y="463.50"></text></g><g><title>DataStream::read (11 samples, 0.02%)</title><rect x="57.9048%" y="405" width="0.0159%" height="15" fill="rgb(217,54,24)" fg:x="40113" fg:w="11"/><text x="58.1548%" y="415.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (12 samples, 0.02%)</title><rect x="57.9048%" y="421" width="0.0173%" height="15" fill="rgb(208,206,53)" fg:x="40113" fg:w="12"/><text x="58.1548%" y="431.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (56 samples, 0.08%)</title><rect x="57.8442%" y="533" width="0.0808%" height="15" fill="rgb(251,74,39)" fg:x="40071" fg:w="56"/><text x="58.0942%" y="543.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (56 samples, 0.08%)</title><rect x="57.8442%" y="517" width="0.0808%" height="15" fill="rgb(226,47,5)" fg:x="40071" fg:w="56"/><text x="58.0942%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (56 samples, 0.08%)</title><rect x="57.8442%" y="501" width="0.0808%" height="15" fill="rgb(234,111,33)" fg:x="40071" fg:w="56"/><text x="58.0942%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (56 samples, 0.08%)</title><rect x="57.8442%" y="485" width="0.0808%" height="15" fill="rgb(251,14,10)" fg:x="40071" fg:w="56"/><text x="58.0942%" y="495.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (56 samples, 0.08%)</title><rect x="57.8442%" y="469" width="0.0808%" height="15" fill="rgb(232,43,0)" fg:x="40071" fg:w="56"/><text x="58.0942%" y="479.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (23 samples, 0.03%)</title><rect x="57.8918%" y="453" width="0.0332%" height="15" fill="rgb(222,68,43)" fg:x="40104" fg:w="23"/><text x="58.1418%" y="463.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (23 samples, 0.03%)</title><rect x="57.8918%" y="437" width="0.0332%" height="15" fill="rgb(217,24,23)" fg:x="40104" fg:w="23"/><text x="58.1418%" y="447.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="725" width="0.0967%" height="15" fill="rgb(229,209,14)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="735.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="709" width="0.0967%" height="15" fill="rgb(250,149,48)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="719.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="693" width="0.0967%" height="15" fill="rgb(210,120,37)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="703.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="677" width="0.0967%" height="15" fill="rgb(210,21,8)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="687.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="661" width="0.0967%" height="15" fill="rgb(243,145,7)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="671.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="645" width="0.0967%" height="15" fill="rgb(238,178,32)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="655.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="629" width="0.0967%" height="15" fill="rgb(222,4,10)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="639.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="613" width="0.0967%" height="15" fill="rgb(239,7,37)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="623.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="597" width="0.0967%" height="15" fill="rgb(215,31,37)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="607.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="581" width="0.0967%" height="15" fill="rgb(224,83,33)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="591.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="565" width="0.0967%" height="15" fill="rgb(239,55,3)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="575.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (67 samples, 0.10%)</title><rect x="57.8356%" y="549" width="0.0967%" height="15" fill="rgb(247,92,11)" fg:x="40065" fg:w="67"/><text x="58.0856%" y="559.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (821 samples, 1.19%)</title><rect x="56.7572%" y="741" width="1.1851%" height="15" fill="rgb(239,200,7)" fg:x="39318" fg:w="821"/><text x="57.0072%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="57.9323%" y="725" width="0.0101%" height="15" fill="rgb(227,115,8)" fg:x="40132" fg:w="7"/><text x="58.1823%" y="735.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (863 samples, 1.25%)</title><rect x="56.7067%" y="773" width="1.2458%" height="15" fill="rgb(215,189,27)" fg:x="39283" fg:w="863"/><text x="56.9567%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (863 samples, 1.25%)</title><rect x="56.7067%" y="757" width="1.2458%" height="15" fill="rgb(251,216,39)" fg:x="39283" fg:w="863"/><text x="56.9567%" y="767.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (1,263 samples, 1.82%)</title><rect x="56.1365%" y="853" width="1.8232%" height="15" fill="rgb(207,29,47)" fg:x="38888" fg:w="1263"/><text x="56.3865%" y="863.50">P..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1,263 samples, 1.82%)</title><rect x="56.1365%" y="837" width="1.8232%" height="15" fill="rgb(210,71,34)" fg:x="38888" fg:w="1263"/><text x="56.3865%" y="847.50">v..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (1,263 samples, 1.82%)</title><rect x="56.1365%" y="821" width="1.8232%" height="15" fill="rgb(253,217,51)" fg:x="38888" fg:w="1263"/><text x="56.3865%" y="831.50">v..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1,263 samples, 1.82%)</title><rect x="56.1365%" y="805" width="1.8232%" height="15" fill="rgb(222,117,46)" fg:x="38888" fg:w="1263"/><text x="56.3865%" y="815.50">v..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1,263 samples, 1.82%)</title><rect x="56.1365%" y="789" width="1.8232%" height="15" fill="rgb(226,132,6)" fg:x="38888" fg:w="1263"/><text x="56.3865%" y="799.50">v..</text></g><g><title>QuadRound (13 samples, 0.02%)</title><rect x="57.9770%" y="773" width="0.0188%" height="15" fill="rgb(254,145,51)" fg:x="40163" fg:w="13"/><text x="58.2270%" y="783.50"></text></g><g><title>_mm_add_epi32 (9 samples, 0.01%)</title><rect x="58.0016%" y="741" width="0.0130%" height="15" fill="rgb(231,199,27)" fg:x="40180" fg:w="9"/><text x="58.2516%" y="751.50"></text></g><g><title>ShiftMessageB (24 samples, 0.03%)</title><rect x="57.9958%" y="773" width="0.0346%" height="15" fill="rgb(245,158,14)" fg:x="40176" fg:w="24"/><text x="58.2458%" y="783.50"></text></g><g><title>ShiftMessageC (20 samples, 0.03%)</title><rect x="58.0016%" y="757" width="0.0289%" height="15" fill="rgb(240,113,14)" fg:x="40180" fg:w="20"/><text x="58.2516%" y="767.50"></text></g><g><title>_mm_sha256msg2_epu32 (8 samples, 0.01%)</title><rect x="58.0189%" y="741" width="0.0115%" height="15" fill="rgb(210,20,13)" fg:x="40192" fg:w="8"/><text x="58.2689%" y="751.50"></text></g><g><title>sha256_x86_shani::Transform (48 samples, 0.07%)</title><rect x="57.9712%" y="789" width="0.0693%" height="15" fill="rgb(241,144,13)" fg:x="40159" fg:w="48"/><text x="58.2212%" y="799.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (56 samples, 0.08%)</title><rect x="57.9626%" y="853" width="0.0808%" height="15" fill="rgb(235,43,34)" fg:x="40153" fg:w="56"/><text x="58.2126%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (56 samples, 0.08%)</title><rect x="57.9626%" y="837" width="0.0808%" height="15" fill="rgb(208,36,20)" fg:x="40153" fg:w="56"/><text x="58.2126%" y="847.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (56 samples, 0.08%)</title><rect x="57.9626%" y="821" width="0.0808%" height="15" fill="rgb(239,204,10)" fg:x="40153" fg:w="56"/><text x="58.2126%" y="831.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (56 samples, 0.08%)</title><rect x="57.9626%" y="805" width="0.0808%" height="15" fill="rgb(217,84,43)" fg:x="40153" fg:w="56"/><text x="58.2126%" y="815.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3,085 samples, 4.45%)</title><rect x="53.5930%" y="901" width="4.4533%" height="15" fill="rgb(241,170,50)" fg:x="37126" fg:w="3085"/><text x="53.8430%" y="911.50">CMuta..</text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3,083 samples, 4.45%)</title><rect x="53.5959%" y="885" width="4.4504%" height="15" fill="rgb(226,205,29)" fg:x="37128" fg:w="3083"/><text x="53.8459%" y="895.50">void ..</text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (3,082 samples, 4.45%)</title><rect x="53.5973%" y="869" width="4.4490%" height="15" fill="rgb(233,113,1)" fg:x="37129" fg:w="3082"/><text x="53.8473%" y="879.50">void ..</text></g><g><title>CSHA256::Write (9 samples, 0.01%)</title><rect x="58.0521%" y="885" width="0.0130%" height="15" fill="rgb(253,98,13)" fg:x="40215" fg:w="9"/><text x="58.3021%" y="895.50"></text></g><g><title>CSHA256::Write (33 samples, 0.05%)</title><rect x="58.0680%" y="789" width="0.0476%" height="15" fill="rgb(211,115,12)" fg:x="40226" fg:w="33"/><text x="58.3180%" y="799.50"></text></g><g><title>CTransaction::CTransaction (7 samples, 0.01%)</title><rect x="58.1156%" y="789" width="0.0101%" height="15" fill="rgb(208,12,16)" fg:x="40259" fg:w="7"/><text x="58.3656%" y="799.50"></text></g><g><title>CTransaction::ComputeHash (11 samples, 0.02%)</title><rect x="58.1271%" y="789" width="0.0159%" height="15" fill="rgb(237,193,54)" fg:x="40267" fg:w="11"/><text x="58.3771%" y="799.50"></text></g><g><title>QuadRound (8 samples, 0.01%)</title><rect x="58.1546%" y="773" width="0.0115%" height="15" fill="rgb(243,22,42)" fg:x="40286" fg:w="8"/><text x="58.4046%" y="783.50"></text></g><g><title>sha256_x86_shani::Transform (19 samples, 0.03%)</title><rect x="58.1474%" y="789" width="0.0274%" height="15" fill="rgb(233,151,36)" fg:x="40281" fg:w="19"/><text x="58.3974%" y="799.50"></text></g><g><title>CTransaction::ComputeHasWitness (8 samples, 0.01%)</title><rect x="58.1748%" y="693" width="0.0115%" height="15" fill="rgb(237,57,45)" fg:x="40300" fg:w="8"/><text x="58.4248%" y="703.50"></text></g><g><title>CSHA256::Write (11 samples, 0.02%)</title><rect x="58.2152%" y="501" width="0.0159%" height="15" fill="rgb(221,88,17)" fg:x="40328" fg:w="11"/><text x="58.4652%" y="511.50"></text></g><g><title>CSHA256::Write (35 samples, 0.05%)</title><rect x="58.1936%" y="517" width="0.0505%" height="15" fill="rgb(230,79,15)" fg:x="40313" fg:w="35"/><text x="58.4436%" y="527.50"></text></g><g><title>ShiftMessageA (9 samples, 0.01%)</title><rect x="58.2643%" y="485" width="0.0130%" height="15" fill="rgb(213,57,13)" fg:x="40362" fg:w="9"/><text x="58.5143%" y="495.50"></text></g><g><title>_mm_sha256msg1_epu32 (9 samples, 0.01%)</title><rect x="58.2643%" y="469" width="0.0130%" height="15" fill="rgb(222,116,39)" fg:x="40362" fg:w="9"/><text x="58.5143%" y="479.50"></text></g><g><title>_mm_add_epi32 (7 samples, 0.01%)</title><rect x="58.2773%" y="469" width="0.0101%" height="15" fill="rgb(245,107,2)" fg:x="40371" fg:w="7"/><text x="58.5273%" y="479.50"></text></g><g><title>ShiftMessageB (26 samples, 0.04%)</title><rect x="58.2643%" y="501" width="0.0375%" height="15" fill="rgb(238,1,10)" fg:x="40362" fg:w="26"/><text x="58.5143%" y="511.50"></text></g><g><title>ShiftMessageC (17 samples, 0.02%)</title><rect x="58.2773%" y="485" width="0.0245%" height="15" fill="rgb(249,4,48)" fg:x="40371" fg:w="17"/><text x="58.5273%" y="495.50"></text></g><g><title>_mm_sha256msg2_epu32 (8 samples, 0.01%)</title><rect x="58.2903%" y="469" width="0.0115%" height="15" fill="rgb(223,151,18)" fg:x="40380" fg:w="8"/><text x="58.5403%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (42 samples, 0.06%)</title><rect x="58.2470%" y="517" width="0.0606%" height="15" fill="rgb(227,65,43)" fg:x="40350" fg:w="42"/><text x="58.4970%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.12%)</title><rect x="58.1936%" y="581" width="0.1213%" height="15" fill="rgb(218,40,45)" fg:x="40313" fg:w="84"/><text x="58.4436%" y="591.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.12%)</title><rect x="58.1936%" y="565" width="0.1213%" height="15" fill="rgb(252,121,31)" fg:x="40313" fg:w="84"/><text x="58.4436%" y="575.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (84 samples, 0.12%)</title><rect x="58.1936%" y="549" width="0.1213%" height="15" fill="rgb(219,158,43)" fg:x="40313" fg:w="84"/><text x="58.4436%" y="559.50"></text></g><g><title>HashWriter::write (84 samples, 0.12%)</title><rect x="58.1936%" y="533" width="0.1213%" height="15" fill="rgb(231,162,42)" fg:x="40313" fg:w="84"/><text x="58.4436%" y="543.50"></text></g><g><title>CSHA256::Write (11 samples, 0.02%)</title><rect x="58.3220%" y="421" width="0.0159%" height="15" fill="rgb(217,179,25)" fg:x="40402" fg:w="11"/><text x="58.5720%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.01%)</title><rect x="58.3393%" y="421" width="0.0130%" height="15" fill="rgb(206,212,31)" fg:x="40414" fg:w="9"/><text x="58.5893%" y="431.50"></text></g><g><title>ShiftMessageB (8 samples, 0.01%)</title><rect x="58.3408%" y="405" width="0.0115%" height="15" fill="rgb(235,144,12)" fg:x="40415" fg:w="8"/><text x="58.5908%" y="415.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.02%)</title><rect x="58.3523%" y="421" width="0.0202%" height="15" fill="rgb(213,51,10)" fg:x="40423" fg:w="14"/><text x="58.6023%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.06%)</title><rect x="58.3148%" y="485" width="0.0592%" height="15" fill="rgb(231,145,14)" fg:x="40397" fg:w="41"/><text x="58.5648%" y="495.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.06%)</title><rect x="58.3148%" y="469" width="0.0592%" height="15" fill="rgb(235,15,28)" fg:x="40397" fg:w="41"/><text x="58.5648%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (41 samples, 0.06%)</title><rect x="58.3148%" y="453" width="0.0592%" height="15" fill="rgb(237,206,10)" fg:x="40397" fg:w="41"/><text x="58.5648%" y="463.50"></text></g><g><title>HashWriter::write (41 samples, 0.06%)</title><rect x="58.3148%" y="437" width="0.0592%" height="15" fill="rgb(236,227,27)" fg:x="40397" fg:w="41"/><text x="58.5648%" y="447.50"></text></g><g><title>CSHA256::Write (15 samples, 0.02%)</title><rect x="58.3870%" y="357" width="0.0217%" height="15" fill="rgb(246,83,35)" fg:x="40447" fg:w="15"/><text x="58.6370%" y="367.50"></text></g><g><title>sha256_x86_shani::Transform (13 samples, 0.02%)</title><rect x="58.4086%" y="357" width="0.0188%" height="15" fill="rgb(220,136,24)" fg:x="40462" fg:w="13"/><text x="58.6586%" y="367.50"></text></g><g><title>CSHA256::Write (42 samples, 0.06%)</title><rect x="58.3827%" y="373" width="0.0606%" height="15" fill="rgb(217,3,25)" fg:x="40444" fg:w="42"/><text x="58.6327%" y="383.50"></text></g><g><title>CTransaction::ComputeHash (11 samples, 0.02%)</title><rect x="58.4433%" y="373" width="0.0159%" height="15" fill="rgb(239,24,14)" fg:x="40486" fg:w="11"/><text x="58.6933%" y="383.50"></text></g><g><title>sha256_x86_shani::Transform (12 samples, 0.02%)</title><rect x="58.4592%" y="373" width="0.0173%" height="15" fill="rgb(244,16,53)" fg:x="40497" fg:w="12"/><text x="58.7092%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (120 samples, 0.17%)</title><rect x="58.3148%" y="581" width="0.1732%" height="15" fill="rgb(208,175,44)" fg:x="40397" fg:w="120"/><text x="58.5648%" y="591.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (120 samples, 0.17%)</title><rect x="58.3148%" y="565" width="0.1732%" height="15" fill="rgb(252,18,48)" fg:x="40397" fg:w="120"/><text x="58.5648%" y="575.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (120 samples, 0.17%)</title><rect x="58.3148%" y="549" width="0.1732%" height="15" fill="rgb(234,199,32)" fg:x="40397" fg:w="120"/><text x="58.5648%" y="559.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (120 samples, 0.17%)</title><rect x="58.3148%" y="533" width="0.1732%" height="15" fill="rgb(225,77,54)" fg:x="40397" fg:w="120"/><text x="58.5648%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (120 samples, 0.17%)</title><rect x="58.3148%" y="517" width="0.1732%" height="15" fill="rgb(225,42,25)" fg:x="40397" fg:w="120"/><text x="58.5648%" y="527.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (120 samples, 0.17%)</title><rect x="58.3148%" y="501" width="0.1732%" height="15" fill="rgb(242,227,46)" fg:x="40397" fg:w="120"/><text x="58.5648%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (79 samples, 0.11%)</title><rect x="58.3740%" y="485" width="0.1140%" height="15" fill="rgb(246,197,35)" fg:x="40438" fg:w="79"/><text x="58.6240%" y="495.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (79 samples, 0.11%)</title><rect x="58.3740%" y="469" width="0.1140%" height="15" fill="rgb(215,159,26)" fg:x="40438" fg:w="79"/><text x="58.6240%" y="479.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (79 samples, 0.11%)</title><rect x="58.3740%" y="453" width="0.1140%" height="15" fill="rgb(212,194,50)" fg:x="40438" fg:w="79"/><text x="58.6240%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (79 samples, 0.11%)</title><rect x="58.3740%" y="437" width="0.1140%" height="15" fill="rgb(246,132,1)" fg:x="40438" fg:w="79"/><text x="58.6240%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (79 samples, 0.11%)</title><rect x="58.3740%" y="421" width="0.1140%" height="15" fill="rgb(217,71,7)" fg:x="40438" fg:w="79"/><text x="58.6240%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (79 samples, 0.11%)</title><rect x="58.3740%" y="405" width="0.1140%" height="15" fill="rgb(252,59,32)" fg:x="40438" fg:w="79"/><text x="58.6240%" y="415.50"></text></g><g><title>HashWriter::write (79 samples, 0.11%)</title><rect x="58.3740%" y="389" width="0.1140%" height="15" fill="rgb(253,204,25)" fg:x="40438" fg:w="79"/><text x="58.6240%" y="399.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="58.4765%" y="373" width="0.0115%" height="15" fill="rgb(232,21,16)" fg:x="40509" fg:w="8"/><text x="58.7265%" y="383.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (8 samples, 0.01%)</title><rect x="58.4765%" y="357" width="0.0115%" height="15" fill="rgb(248,90,29)" fg:x="40509" fg:w="8"/><text x="58.7265%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="58.4765%" y="341" width="0.0115%" height="15" fill="rgb(249,223,7)" fg:x="40509" fg:w="8"/><text x="58.7265%" y="351.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="58.4765%" y="325" width="0.0115%" height="15" fill="rgb(231,119,42)" fg:x="40509" fg:w="8"/><text x="58.7265%" y="335.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (8 samples, 0.01%)</title><rect x="58.4765%" y="309" width="0.0115%" height="15" fill="rgb(215,41,35)" fg:x="40509" fg:w="8"/><text x="58.7265%" y="319.50"></text></g><g><title>HashWriter::write (8 samples, 0.01%)</title><rect x="58.4765%" y="293" width="0.0115%" height="15" fill="rgb(220,44,45)" fg:x="40509" fg:w="8"/><text x="58.7265%" y="303.50"></text></g><g><title>CSHA256::Write (15 samples, 0.02%)</title><rect x="58.4880%" y="469" width="0.0217%" height="15" fill="rgb(253,197,36)" fg:x="40517" fg:w="15"/><text x="58.7380%" y="479.50"></text></g><g><title>CSHA256::Write (7 samples, 0.01%)</title><rect x="58.5270%" y="421" width="0.0101%" height="15" fill="rgb(245,225,54)" fg:x="40544" fg:w="7"/><text x="58.7770%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (11 samples, 0.02%)</title><rect x="58.5386%" y="421" width="0.0159%" height="15" fill="rgb(239,94,37)" fg:x="40552" fg:w="11"/><text x="58.7886%" y="431.50"></text></g><g><title>CSHA256::Write (38 samples, 0.05%)</title><rect x="58.5097%" y="437" width="0.0549%" height="15" fill="rgb(242,217,10)" fg:x="40532" fg:w="38"/><text x="58.7597%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (51 samples, 0.07%)</title><rect x="58.5097%" y="469" width="0.0736%" height="15" fill="rgb(250,193,7)" fg:x="40532" fg:w="51"/><text x="58.7597%" y="479.50"></text></g><g><title>HashWriter::write (51 samples, 0.07%)</title><rect x="58.5097%" y="453" width="0.0736%" height="15" fill="rgb(230,104,19)" fg:x="40532" fg:w="51"/><text x="58.7597%" y="463.50"></text></g><g><title>sha256_x86_shani::Transform (13 samples, 0.02%)</title><rect x="58.5645%" y="437" width="0.0188%" height="15" fill="rgb(230,181,4)" fg:x="40570" fg:w="13"/><text x="58.8145%" y="447.50"></text></g><g><title>sha256_x86_shani::Transform (14 samples, 0.02%)</title><rect x="58.5876%" y="469" width="0.0202%" height="15" fill="rgb(216,219,49)" fg:x="40586" fg:w="14"/><text x="58.8376%" y="479.50"></text></g><g><title>ShiftMessageB (9 samples, 0.01%)</title><rect x="58.5949%" y="453" width="0.0130%" height="15" fill="rgb(254,144,0)" fg:x="40591" fg:w="9"/><text x="58.8449%" y="463.50"></text></g><g><title>memcpy (7 samples, 0.01%)</title><rect x="58.6396%" y="389" width="0.0101%" height="15" fill="rgb(205,209,38)" fg:x="40622" fg:w="7"/><text x="58.8896%" y="399.50"></text></g><g><title>CSHA256::Write (22 samples, 0.03%)</title><rect x="58.6194%" y="405" width="0.0318%" height="15" fill="rgb(240,21,42)" fg:x="40608" fg:w="22"/><text x="58.8694%" y="415.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.01%)</title><rect x="58.6555%" y="405" width="0.0101%" height="15" fill="rgb(241,132,3)" fg:x="40633" fg:w="7"/><text x="58.9055%" y="415.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (339 samples, 0.49%)</title><rect x="58.1936%" y="693" width="0.4894%" height="15" fill="rgb(225,14,2)" fg:x="40313" fg:w="339"/><text x="58.4436%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (339 samples, 0.49%)</title><rect x="58.1936%" y="677" width="0.4894%" height="15" fill="rgb(210,141,35)" fg:x="40313" fg:w="339"/><text x="58.4436%" y="687.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (339 samples, 0.49%)</title><rect x="58.1936%" y="661" width="0.4894%" height="15" fill="rgb(251,14,44)" fg:x="40313" fg:w="339"/><text x="58.4436%" y="671.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (339 samples, 0.49%)</title><rect x="58.1936%" y="645" width="0.4894%" height="15" fill="rgb(247,48,18)" fg:x="40313" fg:w="339"/><text x="58.4436%" y="655.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (339 samples, 0.49%)</title><rect x="58.1936%" y="629" width="0.4894%" height="15" fill="rgb(225,0,40)" fg:x="40313" fg:w="339"/><text x="58.4436%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (339 samples, 0.49%)</title><rect x="58.1936%" y="613" width="0.4894%" height="15" fill="rgb(221,31,33)" fg:x="40313" fg:w="339"/><text x="58.4436%" y="623.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (339 samples, 0.49%)</title><rect x="58.1936%" y="597" width="0.4894%" height="15" fill="rgb(237,42,40)" fg:x="40313" fg:w="339"/><text x="58.4436%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (135 samples, 0.19%)</title><rect x="58.4880%" y="581" width="0.1949%" height="15" fill="rgb(233,51,29)" fg:x="40517" fg:w="135"/><text x="58.7380%" y="591.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (135 samples, 0.19%)</title><rect x="58.4880%" y="565" width="0.1949%" height="15" fill="rgb(226,58,20)" fg:x="40517" fg:w="135"/><text x="58.7380%" y="575.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (135 samples, 0.19%)</title><rect x="58.4880%" y="549" width="0.1949%" height="15" fill="rgb(208,98,7)" fg:x="40517" fg:w="135"/><text x="58.7380%" y="559.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (135 samples, 0.19%)</title><rect x="58.4880%" y="533" width="0.1949%" height="15" fill="rgb(228,143,44)" fg:x="40517" fg:w="135"/><text x="58.7380%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (135 samples, 0.19%)</title><rect x="58.4880%" y="517" width="0.1949%" height="15" fill="rgb(246,55,38)" fg:x="40517" fg:w="135"/><text x="58.7380%" y="527.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (135 samples, 0.19%)</title><rect x="58.4880%" y="501" width="0.1949%" height="15" fill="rgb(247,87,16)" fg:x="40517" fg:w="135"/><text x="58.7380%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (135 samples, 0.19%)</title><rect x="58.4880%" y="485" width="0.1949%" height="15" fill="rgb(234,129,42)" fg:x="40517" fg:w="135"/><text x="58.7380%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (49 samples, 0.07%)</title><rect x="58.6122%" y="469" width="0.0707%" height="15" fill="rgb(220,82,16)" fg:x="40603" fg:w="49"/><text x="58.8622%" y="479.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.06%)</title><rect x="58.6194%" y="453" width="0.0635%" height="15" fill="rgb(211,88,4)" fg:x="40608" fg:w="44"/><text x="58.8694%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (44 samples, 0.06%)</title><rect x="58.6194%" y="437" width="0.0635%" height="15" fill="rgb(248,151,21)" fg:x="40608" fg:w="44"/><text x="58.8694%" y="447.50"></text></g><g><title>HashWriter::write (44 samples, 0.06%)</title><rect x="58.6194%" y="421" width="0.0635%" height="15" fill="rgb(238,163,6)" fg:x="40608" fg:w="44"/><text x="58.8694%" y="431.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="58.6714%" y="405" width="0.0115%" height="15" fill="rgb(209,183,11)" fg:x="40644" fg:w="8"/><text x="58.9214%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (355 samples, 0.51%)</title><rect x="58.1748%" y="773" width="0.5125%" height="15" fill="rgb(219,37,20)" fg:x="40300" fg:w="355"/><text x="58.4248%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (355 samples, 0.51%)</title><rect x="58.1748%" y="757" width="0.5125%" height="15" fill="rgb(210,158,4)" fg:x="40300" fg:w="355"/><text x="58.4248%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (355 samples, 0.51%)</title><rect x="58.1748%" y="741" width="0.5125%" height="15" fill="rgb(221,167,53)" fg:x="40300" fg:w="355"/><text x="58.4248%" y="751.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (355 samples, 0.51%)</title><rect x="58.1748%" y="725" width="0.5125%" height="15" fill="rgb(237,151,45)" fg:x="40300" fg:w="355"/><text x="58.4248%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (355 samples, 0.51%)</title><rect x="58.1748%" y="709" width="0.5125%" height="15" fill="rgb(231,39,3)" fg:x="40300" fg:w="355"/><text x="58.4248%" y="719.50"></text></g><g><title>CSHA256::Write (17 samples, 0.02%)</title><rect x="58.7161%" y="501" width="0.0245%" height="15" fill="rgb(212,167,28)" fg:x="40675" fg:w="17"/><text x="58.9661%" y="511.50"></text></g><g><title>memcpy (7 samples, 0.01%)</title><rect x="58.7305%" y="485" width="0.0101%" height="15" fill="rgb(232,178,8)" fg:x="40685" fg:w="7"/><text x="58.9805%" y="495.50"></text></g><g><title>CSHA256::Write (40 samples, 0.06%)</title><rect x="58.6973%" y="517" width="0.0577%" height="15" fill="rgb(225,151,20)" fg:x="40662" fg:w="40"/><text x="58.9473%" y="527.50"></text></g><g><title>sha256_x86_shani::Transform (18 samples, 0.03%)</title><rect x="58.7551%" y="517" width="0.0260%" height="15" fill="rgb(238,3,37)" fg:x="40702" fg:w="18"/><text x="59.0051%" y="527.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="58.7811%" y="517" width="0.0101%" height="15" fill="rgb(251,147,42)" fg:x="40720" fg:w="7"/><text x="59.0311%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (70 samples, 0.10%)</title><rect x="58.6973%" y="581" width="0.1010%" height="15" fill="rgb(208,173,10)" fg:x="40662" fg:w="70"/><text x="58.9473%" y="591.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (70 samples, 0.10%)</title><rect x="58.6973%" y="565" width="0.1010%" height="15" fill="rgb(246,225,4)" fg:x="40662" fg:w="70"/><text x="58.9473%" y="575.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (70 samples, 0.10%)</title><rect x="58.6973%" y="549" width="0.1010%" height="15" fill="rgb(248,102,6)" fg:x="40662" fg:w="70"/><text x="58.9473%" y="559.50"></text></g><g><title>HashWriter::write (70 samples, 0.10%)</title><rect x="58.6973%" y="533" width="0.1010%" height="15" fill="rgb(232,6,21)" fg:x="40662" fg:w="70"/><text x="58.9473%" y="543.50"></text></g><g><title>CSHA256::Write (51 samples, 0.07%)</title><rect x="58.8302%" y="421" width="0.0736%" height="15" fill="rgb(221,179,22)" fg:x="40754" fg:w="51"/><text x="59.0802%" y="431.50"></text></g><g><title>memcpy (7 samples, 0.01%)</title><rect x="58.9052%" y="421" width="0.0101%" height="15" fill="rgb(252,50,20)" fg:x="40806" fg:w="7"/><text x="59.1552%" y="431.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.01%)</title><rect x="58.9182%" y="421" width="0.0144%" height="15" fill="rgb(222,56,38)" fg:x="40815" fg:w="10"/><text x="59.1682%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (10 samples, 0.01%)</title><rect x="58.9182%" y="405" width="0.0144%" height="15" fill="rgb(206,193,29)" fg:x="40815" fg:w="10"/><text x="59.1682%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (10 samples, 0.01%)</title><rect x="58.9182%" y="389" width="0.0144%" height="15" fill="rgb(239,192,45)" fg:x="40815" fg:w="10"/><text x="59.1682%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="58.9182%" y="373" width="0.0144%" height="15" fill="rgb(254,18,36)" fg:x="40815" fg:w="10"/><text x="59.1682%" y="383.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="58.9182%" y="357" width="0.0144%" height="15" fill="rgb(221,127,11)" fg:x="40815" fg:w="10"/><text x="59.1682%" y="367.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="58.9182%" y="341" width="0.0144%" height="15" fill="rgb(234,146,35)" fg:x="40815" fg:w="10"/><text x="59.1682%" y="351.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="325" width="0.0130%" height="15" fill="rgb(254,201,37)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="309" width="0.0130%" height="15" fill="rgb(211,202,23)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="319.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="293" width="0.0130%" height="15" fill="rgb(237,91,2)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="303.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="277" width="0.0130%" height="15" fill="rgb(226,228,36)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="287.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="261" width="0.0130%" height="15" fill="rgb(213,63,50)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="271.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="245" width="0.0130%" height="15" fill="rgb(235,194,19)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="255.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="229" width="0.0130%" height="15" fill="rgb(207,204,18)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="239.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="213" width="0.0130%" height="15" fill="rgb(248,8,7)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="223.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="197" width="0.0130%" height="15" fill="rgb(223,145,47)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="207.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="181" width="0.0130%" height="15" fill="rgb(228,84,11)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="191.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="165" width="0.0130%" height="15" fill="rgb(218,76,45)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="175.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="149" width="0.0130%" height="15" fill="rgb(223,80,15)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="159.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="133" width="0.0130%" height="15" fill="rgb(219,218,33)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="143.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (9 samples, 0.01%)</title><rect x="58.9197%" y="117" width="0.0130%" height="15" fill="rgb(208,51,11)" fg:x="40816" fg:w="9"/><text x="59.1697%" y="127.50"></text></g><g><title>CSHA256::Write (100 samples, 0.14%)</title><rect x="58.8085%" y="437" width="0.1444%" height="15" fill="rgb(229,165,39)" fg:x="40739" fg:w="100"/><text x="59.0585%" y="447.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="58.9326%" y="421" width="0.0202%" height="15" fill="rgb(241,100,24)" fg:x="40825" fg:w="14"/><text x="59.1826%" y="431.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="58.9413%" y="405" width="0.0115%" height="15" fill="rgb(228,14,23)" fg:x="40831" fg:w="8"/><text x="59.1913%" y="415.50"></text></g><g><title>_mm_add_epi32 (22 samples, 0.03%)</title><rect x="58.9644%" y="405" width="0.0318%" height="15" fill="rgb(247,116,52)" fg:x="40847" fg:w="22"/><text x="59.2144%" y="415.50"></text></g><g><title>_mm_sha256rnds2_epu32 (11 samples, 0.02%)</title><rect x="58.9962%" y="405" width="0.0159%" height="15" fill="rgb(216,149,33)" fg:x="40869" fg:w="11"/><text x="59.2462%" y="415.50"></text></g><g><title>QuadRound (41 samples, 0.06%)</title><rect x="58.9644%" y="421" width="0.0592%" height="15" fill="rgb(238,142,29)" fg:x="40847" fg:w="41"/><text x="59.2144%" y="431.50"></text></g><g><title>_mm_shuffle_epi32 (8 samples, 0.01%)</title><rect x="59.0120%" y="405" width="0.0115%" height="15" fill="rgb(224,83,40)" fg:x="40880" fg:w="8"/><text x="59.2620%" y="415.50"></text></g><g><title>ShiftMessageA (20 samples, 0.03%)</title><rect x="59.0236%" y="405" width="0.0289%" height="15" fill="rgb(234,165,11)" fg:x="40888" fg:w="20"/><text x="59.2736%" y="415.50"></text></g><g><title>_mm_sha256msg1_epu32 (20 samples, 0.03%)</title><rect x="59.0236%" y="389" width="0.0289%" height="15" fill="rgb(215,96,23)" fg:x="40888" fg:w="20"/><text x="59.2736%" y="399.50"></text></g><g><title>_mm_add_epi32 (9 samples, 0.01%)</title><rect x="59.0525%" y="389" width="0.0130%" height="15" fill="rgb(233,179,26)" fg:x="40908" fg:w="9"/><text x="59.3025%" y="399.50"></text></g><g><title>_mm_alignr_epi8 (7 samples, 0.01%)</title><rect x="59.0655%" y="389" width="0.0101%" height="15" fill="rgb(225,129,33)" fg:x="40917" fg:w="7"/><text x="59.3155%" y="399.50"></text></g><g><title>ShiftMessageB (56 samples, 0.08%)</title><rect x="59.0236%" y="421" width="0.0808%" height="15" fill="rgb(237,49,13)" fg:x="40888" fg:w="56"/><text x="59.2736%" y="431.50"></text></g><g><title>ShiftMessageC (36 samples, 0.05%)</title><rect x="59.0525%" y="405" width="0.0520%" height="15" fill="rgb(211,3,31)" fg:x="40908" fg:w="36"/><text x="59.3025%" y="415.50"></text></g><g><title>_mm_sha256msg2_epu32 (20 samples, 0.03%)</title><rect x="59.0756%" y="389" width="0.0289%" height="15" fill="rgb(216,152,19)" fg:x="40924" fg:w="20"/><text x="59.3256%" y="399.50"></text></g><g><title>ShiftMessageC (10 samples, 0.01%)</title><rect x="59.1044%" y="421" width="0.0144%" height="15" fill="rgb(251,121,35)" fg:x="40944" fg:w="10"/><text x="59.3544%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (115 samples, 0.17%)</title><rect x="58.9543%" y="437" width="0.1660%" height="15" fill="rgb(210,217,47)" fg:x="40840" fg:w="115"/><text x="59.2043%" y="447.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.02%)</title><rect x="59.1203%" y="437" width="0.0202%" height="15" fill="rgb(244,116,22)" fg:x="40955" fg:w="14"/><text x="59.3703%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (11 samples, 0.02%)</title><rect x="59.1246%" y="421" width="0.0159%" height="15" fill="rgb(228,17,21)" fg:x="40958" fg:w="11"/><text x="59.3746%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (11 samples, 0.02%)</title><rect x="59.1246%" y="405" width="0.0159%" height="15" fill="rgb(240,149,34)" fg:x="40958" fg:w="11"/><text x="59.3746%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="59.1246%" y="389" width="0.0159%" height="15" fill="rgb(208,125,47)" fg:x="40958" fg:w="11"/><text x="59.3746%" y="399.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="59.1246%" y="373" width="0.0159%" height="15" fill="rgb(249,186,39)" fg:x="40958" fg:w="11"/><text x="59.3746%" y="383.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="59.1246%" y="357" width="0.0159%" height="15" fill="rgb(240,220,33)" fg:x="40958" fg:w="11"/><text x="59.3746%" y="367.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (235 samples, 0.34%)</title><rect x="58.8085%" y="469" width="0.3392%" height="15" fill="rgb(243,110,23)" fg:x="40739" fg:w="235"/><text x="59.0585%" y="479.50"></text></g><g><title>HashWriter::write (235 samples, 0.34%)</title><rect x="58.8085%" y="453" width="0.3392%" height="15" fill="rgb(219,163,46)" fg:x="40739" fg:w="235"/><text x="59.0585%" y="463.50"></text></g><g><title>CSHA256::Write (14 samples, 0.02%)</title><rect x="59.1549%" y="405" width="0.0202%" height="15" fill="rgb(216,126,30)" fg:x="40979" fg:w="14"/><text x="59.4049%" y="415.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (339 samples, 0.49%)</title><rect x="58.6973%" y="693" width="0.4894%" height="15" fill="rgb(208,139,11)" fg:x="40662" fg:w="339"/><text x="58.9473%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (339 samples, 0.49%)</title><rect x="58.6973%" y="677" width="0.4894%" height="15" fill="rgb(213,118,36)" fg:x="40662" fg:w="339"/><text x="58.9473%" y="687.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (339 samples, 0.49%)</title><rect x="58.6973%" y="661" width="0.4894%" height="15" fill="rgb(226,43,17)" fg:x="40662" fg:w="339"/><text x="58.9473%" y="671.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (339 samples, 0.49%)</title><rect x="58.6973%" y="645" width="0.4894%" height="15" fill="rgb(254,217,4)" fg:x="40662" fg:w="339"/><text x="58.9473%" y="655.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (339 samples, 0.49%)</title><rect x="58.6973%" y="629" width="0.4894%" height="15" fill="rgb(210,134,47)" fg:x="40662" fg:w="339"/><text x="58.9473%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (339 samples, 0.49%)</title><rect x="58.6973%" y="613" width="0.4894%" height="15" fill="rgb(237,24,49)" fg:x="40662" fg:w="339"/><text x="58.9473%" y="623.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (339 samples, 0.49%)</title><rect x="58.6973%" y="597" width="0.4894%" height="15" fill="rgb(251,39,46)" fg:x="40662" fg:w="339"/><text x="58.9473%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (269 samples, 0.39%)</title><rect x="58.7984%" y="581" width="0.3883%" height="15" fill="rgb(251,220,3)" fg:x="40732" fg:w="269"/><text x="59.0484%" y="591.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (269 samples, 0.39%)</title><rect x="58.7984%" y="565" width="0.3883%" height="15" fill="rgb(228,105,12)" fg:x="40732" fg:w="269"/><text x="59.0484%" y="575.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (269 samples, 0.39%)</title><rect x="58.7984%" y="549" width="0.3883%" height="15" fill="rgb(215,196,1)" fg:x="40732" fg:w="269"/><text x="59.0484%" y="559.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (269 samples, 0.39%)</title><rect x="58.7984%" y="533" width="0.3883%" height="15" fill="rgb(214,33,39)" fg:x="40732" fg:w="269"/><text x="59.0484%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (269 samples, 0.39%)</title><rect x="58.7984%" y="517" width="0.3883%" height="15" fill="rgb(220,19,52)" fg:x="40732" fg:w="269"/><text x="59.0484%" y="527.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (269 samples, 0.39%)</title><rect x="58.7984%" y="501" width="0.3883%" height="15" fill="rgb(221,78,38)" fg:x="40732" fg:w="269"/><text x="59.0484%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (269 samples, 0.39%)</title><rect x="58.7984%" y="485" width="0.3883%" height="15" fill="rgb(253,30,16)" fg:x="40732" fg:w="269"/><text x="59.0484%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.03%)</title><rect x="59.1535%" y="469" width="0.0332%" height="15" fill="rgb(242,65,0)" fg:x="40978" fg:w="23"/><text x="59.4035%" y="479.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.03%)</title><rect x="59.1535%" y="453" width="0.0332%" height="15" fill="rgb(235,201,12)" fg:x="40978" fg:w="23"/><text x="59.4035%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (22 samples, 0.03%)</title><rect x="59.1549%" y="437" width="0.0318%" height="15" fill="rgb(233,161,9)" fg:x="40979" fg:w="22"/><text x="59.4049%" y="447.50"></text></g><g><title>HashWriter::write (22 samples, 0.03%)</title><rect x="59.1549%" y="421" width="0.0318%" height="15" fill="rgb(241,207,41)" fg:x="40979" fg:w="22"/><text x="59.4049%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (351 samples, 0.51%)</title><rect x="58.6872%" y="773" width="0.5067%" height="15" fill="rgb(212,69,46)" fg:x="40655" fg:w="351"/><text x="58.9372%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (351 samples, 0.51%)</title><rect x="58.6872%" y="757" width="0.5067%" height="15" fill="rgb(239,69,45)" fg:x="40655" fg:w="351"/><text x="58.9372%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (351 samples, 0.51%)</title><rect x="58.6872%" y="741" width="0.5067%" height="15" fill="rgb(242,117,48)" fg:x="40655" fg:w="351"/><text x="58.9372%" y="751.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (351 samples, 0.51%)</title><rect x="58.6872%" y="725" width="0.5067%" height="15" fill="rgb(228,41,36)" fg:x="40655" fg:w="351"/><text x="58.9372%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (351 samples, 0.51%)</title><rect x="58.6872%" y="709" width="0.5067%" height="15" fill="rgb(212,3,32)" fg:x="40655" fg:w="351"/><text x="58.9372%" y="719.50"></text></g><g><title>CSHA256::Write (11 samples, 0.02%)</title><rect x="59.1997%" y="693" width="0.0159%" height="15" fill="rgb(233,41,49)" fg:x="41010" fg:w="11"/><text x="59.4497%" y="703.50"></text></g><g><title>CTransaction::CTransaction (19 samples, 0.03%)</title><rect x="59.2156%" y="693" width="0.0274%" height="15" fill="rgb(252,170,49)" fg:x="41021" fg:w="19"/><text x="59.4656%" y="703.50"></text></g><g><title>QuadRound (7 samples, 0.01%)</title><rect x="59.2517%" y="677" width="0.0101%" height="15" fill="rgb(229,53,26)" fg:x="41046" fg:w="7"/><text x="59.5017%" y="687.50"></text></g><g><title>ShiftMessageB (16 samples, 0.02%)</title><rect x="59.2618%" y="677" width="0.0231%" height="15" fill="rgb(217,157,12)" fg:x="41053" fg:w="16"/><text x="59.5118%" y="687.50"></text></g><g><title>ShiftMessageC (11 samples, 0.02%)</title><rect x="59.2690%" y="661" width="0.0159%" height="15" fill="rgb(227,17,9)" fg:x="41058" fg:w="11"/><text x="59.5190%" y="671.50"></text></g><g><title>sha256_x86_shani::Transform (27 samples, 0.04%)</title><rect x="59.2502%" y="693" width="0.0390%" height="15" fill="rgb(218,84,12)" fg:x="41045" fg:w="27"/><text x="59.5002%" y="703.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (773 samples, 1.12%)</title><rect x="58.1748%" y="789" width="1.1159%" height="15" fill="rgb(212,79,24)" fg:x="40300" fg:w="773"/><text x="58.4248%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (67 samples, 0.10%)</title><rect x="59.1939%" y="773" width="0.0967%" height="15" fill="rgb(217,222,37)" fg:x="41006" fg:w="67"/><text x="59.4439%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (67 samples, 0.10%)</title><rect x="59.1939%" y="757" width="0.0967%" height="15" fill="rgb(246,208,8)" fg:x="41006" fg:w="67"/><text x="59.4439%" y="767.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (67 samples, 0.10%)</title><rect x="59.1939%" y="741" width="0.0967%" height="15" fill="rgb(244,133,10)" fg:x="41006" fg:w="67"/><text x="59.4439%" y="751.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (67 samples, 0.10%)</title><rect x="59.1939%" y="725" width="0.0967%" height="15" fill="rgb(209,219,41)" fg:x="41006" fg:w="67"/><text x="59.4439%" y="735.50"></text></g><g><title>HashWriter::write (67 samples, 0.10%)</title><rect x="59.1939%" y="709" width="0.0967%" height="15" fill="rgb(253,175,45)" fg:x="41006" fg:w="67"/><text x="59.4439%" y="719.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (862 samples, 1.24%)</title><rect x="58.0680%" y="869" width="1.2443%" height="15" fill="rgb(235,100,37)" fg:x="40226" fg:w="862"/><text x="58.3180%" y="879.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (862 samples, 1.24%)</title><rect x="58.0680%" y="853" width="1.2443%" height="15" fill="rgb(225,87,19)" fg:x="40226" fg:w="862"/><text x="58.3180%" y="863.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (862 samples, 1.24%)</title><rect x="58.0680%" y="837" width="1.2443%" height="15" fill="rgb(217,152,17)" fg:x="40226" fg:w="862"/><text x="58.3180%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (862 samples, 1.24%)</title><rect x="58.0680%" y="821" width="1.2443%" height="15" fill="rgb(235,72,13)" fg:x="40226" fg:w="862"/><text x="58.3180%" y="831.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (862 samples, 1.24%)</title><rect x="58.0680%" y="805" width="1.2443%" height="15" fill="rgb(233,140,18)" fg:x="40226" fg:w="862"/><text x="58.3180%" y="815.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="59.2935%" y="789" width="0.0188%" height="15" fill="rgb(207,212,28)" fg:x="41075" fg:w="13"/><text x="59.5435%" y="799.50"></text></g><g><title>CSHA256::Finalize (27 samples, 0.04%)</title><rect x="59.3455%" y="821" width="0.0390%" height="15" fill="rgb(220,130,25)" fg:x="41111" fg:w="27"/><text x="59.5955%" y="831.50"></text></g><g><title>CSHA256::Reset (8 samples, 0.01%)</title><rect x="59.3845%" y="821" width="0.0115%" height="15" fill="rgb(205,55,34)" fg:x="41138" fg:w="8"/><text x="59.6345%" y="831.50"></text></g><g><title>memcpy (16 samples, 0.02%)</title><rect x="59.5187%" y="805" width="0.0231%" height="15" fill="rgb(237,54,35)" fg:x="41231" fg:w="16"/><text x="59.7687%" y="815.50"></text></g><g><title>CSHA256::Write (102 samples, 0.15%)</title><rect x="59.3960%" y="821" width="0.1472%" height="15" fill="rgb(208,67,23)" fg:x="41146" fg:w="102"/><text x="59.6460%" y="831.50"></text></g><g><title>CTransaction::ComputeHash (12 samples, 0.02%)</title><rect x="59.5433%" y="821" width="0.0173%" height="15" fill="rgb(206,207,50)" fg:x="41248" fg:w="12"/><text x="59.7933%" y="831.50"></text></g><g><title>HashWriter::GetHash (12 samples, 0.02%)</title><rect x="59.5433%" y="805" width="0.0173%" height="15" fill="rgb(213,211,42)" fg:x="41248" fg:w="12"/><text x="59.7933%" y="815.50"></text></g><g><title>_mm_add_epi32 (12 samples, 0.02%)</title><rect x="59.5794%" y="789" width="0.0173%" height="15" fill="rgb(252,197,50)" fg:x="41273" fg:w="12"/><text x="59.8294%" y="799.50"></text></g><g><title>QuadRound (24 samples, 0.03%)</title><rect x="59.5794%" y="805" width="0.0346%" height="15" fill="rgb(251,211,41)" fg:x="41273" fg:w="24"/><text x="59.8294%" y="815.50"></text></g><g><title>ShiftMessageA (10 samples, 0.01%)</title><rect x="59.6140%" y="789" width="0.0144%" height="15" fill="rgb(229,211,5)" fg:x="41297" fg:w="10"/><text x="59.8640%" y="799.50"></text></g><g><title>_mm_sha256msg1_epu32 (10 samples, 0.01%)</title><rect x="59.6140%" y="773" width="0.0144%" height="15" fill="rgb(239,36,31)" fg:x="41297" fg:w="10"/><text x="59.8640%" y="783.50"></text></g><g><title>ShiftMessageB (29 samples, 0.04%)</title><rect x="59.6140%" y="805" width="0.0419%" height="15" fill="rgb(248,67,31)" fg:x="41297" fg:w="29"/><text x="59.8640%" y="815.50"></text></g><g><title>ShiftMessageC (19 samples, 0.03%)</title><rect x="59.6284%" y="789" width="0.0274%" height="15" fill="rgb(249,55,44)" fg:x="41307" fg:w="19"/><text x="59.8784%" y="799.50"></text></g><g><title>_mm_sha256msg2_epu32 (11 samples, 0.02%)</title><rect x="59.6400%" y="773" width="0.0159%" height="15" fill="rgb(216,82,12)" fg:x="41315" fg:w="11"/><text x="59.8900%" y="783.50"></text></g><g><title>sha256_x86_shani::Transform (64 samples, 0.09%)</title><rect x="59.5736%" y="821" width="0.0924%" height="15" fill="rgb(242,174,1)" fg:x="41269" fg:w="64"/><text x="59.8236%" y="831.50"></text></g><g><title>CSHA256::Write (255 samples, 0.37%)</title><rect x="59.3166%" y="837" width="0.3681%" height="15" fill="rgb(208,120,29)" fg:x="41091" fg:w="255"/><text x="59.5666%" y="847.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="59.6660%" y="821" width="0.0188%" height="15" fill="rgb(221,105,43)" fg:x="41333" fg:w="13"/><text x="59.9160%" y="831.50"></text></g><g><title>_mm_add_epi32 (12 samples, 0.02%)</title><rect x="59.6876%" y="805" width="0.0173%" height="15" fill="rgb(234,124,22)" fg:x="41348" fg:w="12"/><text x="59.9376%" y="815.50"></text></g><g><title>QuadRound (25 samples, 0.04%)</title><rect x="59.6876%" y="821" width="0.0361%" height="15" fill="rgb(212,23,30)" fg:x="41348" fg:w="25"/><text x="59.9376%" y="831.50"></text></g><g><title>_mm_shuffle_epi32 (8 samples, 0.01%)</title><rect x="59.7122%" y="805" width="0.0115%" height="15" fill="rgb(219,122,53)" fg:x="41365" fg:w="8"/><text x="59.9622%" y="815.50"></text></g><g><title>ShiftMessageA (16 samples, 0.02%)</title><rect x="59.7266%" y="805" width="0.0231%" height="15" fill="rgb(248,84,24)" fg:x="41375" fg:w="16"/><text x="59.9766%" y="815.50"></text></g><g><title>_mm_sha256msg1_epu32 (16 samples, 0.02%)</title><rect x="59.7266%" y="789" width="0.0231%" height="15" fill="rgb(245,115,18)" fg:x="41375" fg:w="16"/><text x="59.9766%" y="799.50"></text></g><g><title>_mm_add_epi32 (13 samples, 0.02%)</title><rect x="59.7497%" y="789" width="0.0188%" height="15" fill="rgb(227,176,51)" fg:x="41391" fg:w="13"/><text x="59.9997%" y="799.50"></text></g><g><title>ShiftMessageB (48 samples, 0.07%)</title><rect x="59.7266%" y="821" width="0.0693%" height="15" fill="rgb(229,63,42)" fg:x="41375" fg:w="48"/><text x="59.9766%" y="831.50"></text></g><g><title>ShiftMessageC (32 samples, 0.05%)</title><rect x="59.7497%" y="805" width="0.0462%" height="15" fill="rgb(247,202,24)" fg:x="41391" fg:w="32"/><text x="59.9997%" y="815.50"></text></g><g><title>_mm_sha256msg2_epu32 (14 samples, 0.02%)</title><rect x="59.7757%" y="789" width="0.0202%" height="15" fill="rgb(244,173,20)" fg:x="41409" fg:w="14"/><text x="60.0257%" y="799.50"></text></g><g><title>ShiftMessageC (10 samples, 0.01%)</title><rect x="59.7959%" y="821" width="0.0144%" height="15" fill="rgb(242,81,47)" fg:x="41423" fg:w="10"/><text x="60.0459%" y="831.50"></text></g><g><title>sha256_x86_shani::Transform (87 samples, 0.13%)</title><rect x="59.6862%" y="837" width="0.1256%" height="15" fill="rgb(231,185,54)" fg:x="41347" fg:w="87"/><text x="59.9362%" y="847.50"></text></g><g><title>CSHA256::Finalize (353 samples, 0.51%)</title><rect x="59.3123%" y="853" width="0.5096%" height="15" fill="rgb(243,55,32)" fg:x="41088" fg:w="353"/><text x="59.5623%" y="863.50"></text></g><g><title>CSHA256::Write (8 samples, 0.01%)</title><rect x="59.8219%" y="853" width="0.0115%" height="15" fill="rgb(208,167,19)" fg:x="41441" fg:w="8"/><text x="60.0719%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.01%)</title><rect x="59.8334%" y="853" width="0.0115%" height="15" fill="rgb(231,72,35)" fg:x="41449" fg:w="8"/><text x="60.0834%" y="863.50"></text></g><g><title>HashWriter::GetHash (374 samples, 0.54%)</title><rect x="59.3123%" y="869" width="0.5399%" height="15" fill="rgb(250,173,51)" fg:x="41088" fg:w="374"/><text x="59.5623%" y="879.50"></text></g><g><title>CTransaction::ComputeHash (1,237 samples, 1.79%)</title><rect x="58.0680%" y="885" width="1.7857%" height="15" fill="rgb(209,5,22)" fg:x="40226" fg:w="1237"/><text x="58.3180%" y="895.50">C..</text></g><g><title>CSHA256::Write (49 samples, 0.07%)</title><rect x="59.8608%" y="773" width="0.0707%" height="15" fill="rgb(250,174,19)" fg:x="41468" fg:w="49"/><text x="60.1108%" y="783.50"></text></g><g><title>memcpy (9 samples, 0.01%)</title><rect x="59.9186%" y="757" width="0.0130%" height="15" fill="rgb(217,3,49)" fg:x="41508" fg:w="9"/><text x="60.1686%" y="767.50"></text></g><g><title>QuadRound (8 samples, 0.01%)</title><rect x="59.9374%" y="757" width="0.0115%" height="15" fill="rgb(218,225,5)" fg:x="41521" fg:w="8"/><text x="60.1874%" y="767.50"></text></g><g><title>ShiftMessageA (8 samples, 0.01%)</title><rect x="59.9503%" y="741" width="0.0115%" height="15" fill="rgb(236,89,11)" fg:x="41530" fg:w="8"/><text x="60.2003%" y="751.50"></text></g><g><title>_mm_sha256msg1_epu32 (8 samples, 0.01%)</title><rect x="59.9503%" y="725" width="0.0115%" height="15" fill="rgb(206,33,28)" fg:x="41530" fg:w="8"/><text x="60.2003%" y="735.50"></text></g><g><title>_mm_add_epi32 (12 samples, 0.02%)</title><rect x="59.9619%" y="725" width="0.0173%" height="15" fill="rgb(241,56,42)" fg:x="41538" fg:w="12"/><text x="60.2119%" y="735.50"></text></g><g><title>ShiftMessageB (26 samples, 0.04%)</title><rect x="59.9503%" y="757" width="0.0375%" height="15" fill="rgb(222,44,11)" fg:x="41530" fg:w="26"/><text x="60.2003%" y="767.50"></text></g><g><title>ShiftMessageC (18 samples, 0.03%)</title><rect x="59.9619%" y="741" width="0.0260%" height="15" fill="rgb(234,111,20)" fg:x="41538" fg:w="18"/><text x="60.2119%" y="751.50"></text></g><g><title>sha256_x86_shani::Transform (42 samples, 0.06%)</title><rect x="59.9359%" y="773" width="0.0606%" height="15" fill="rgb(237,77,6)" fg:x="41520" fg:w="42"/><text x="60.1859%" y="783.50"></text></g><g><title>CSHA256::Write (26 samples, 0.04%)</title><rect x="60.0196%" y="501" width="0.0375%" height="15" fill="rgb(235,111,23)" fg:x="41578" fg:w="26"/><text x="60.2696%" y="511.50"></text></g><g><title>QuadRound (7 samples, 0.01%)</title><rect x="60.0601%" y="485" width="0.0101%" height="15" fill="rgb(251,135,29)" fg:x="41606" fg:w="7"/><text x="60.3101%" y="495.50"></text></g><g><title>ShiftMessageB (17 samples, 0.02%)</title><rect x="60.0702%" y="485" width="0.0245%" height="15" fill="rgb(217,57,1)" fg:x="41613" fg:w="17"/><text x="60.3202%" y="495.50"></text></g><g><title>ShiftMessageC (13 samples, 0.02%)</title><rect x="60.0759%" y="469" width="0.0188%" height="15" fill="rgb(249,119,31)" fg:x="41617" fg:w="13"/><text x="60.3259%" y="479.50"></text></g><g><title>_mm_sha256msg2_epu32 (8 samples, 0.01%)</title><rect x="60.0831%" y="453" width="0.0115%" height="15" fill="rgb(233,164,33)" fg:x="41622" fg:w="8"/><text x="60.3331%" y="463.50"></text></g><g><title>sha256_x86_shani::Transform (27 samples, 0.04%)</title><rect x="60.0572%" y="501" width="0.0390%" height="15" fill="rgb(250,217,43)" fg:x="41604" fg:w="27"/><text x="60.3072%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (61 samples, 0.09%)</title><rect x="60.0182%" y="565" width="0.0881%" height="15" fill="rgb(232,154,50)" fg:x="41577" fg:w="61"/><text x="60.2682%" y="575.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (61 samples, 0.09%)</title><rect x="60.0182%" y="549" width="0.0881%" height="15" fill="rgb(227,190,8)" fg:x="41577" fg:w="61"/><text x="60.2682%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (61 samples, 0.09%)</title><rect x="60.0182%" y="533" width="0.0881%" height="15" fill="rgb(209,217,32)" fg:x="41577" fg:w="61"/><text x="60.2682%" y="543.50"></text></g><g><title>HashWriter::write (61 samples, 0.09%)</title><rect x="60.0182%" y="517" width="0.0881%" height="15" fill="rgb(243,203,50)" fg:x="41577" fg:w="61"/><text x="60.2682%" y="527.50"></text></g><g><title>CSHA256::Write (12 samples, 0.02%)</title><rect x="60.1062%" y="405" width="0.0173%" height="15" fill="rgb(232,152,27)" fg:x="41638" fg:w="12"/><text x="60.3562%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="60.1062%" y="469" width="0.0274%" height="15" fill="rgb(240,34,29)" fg:x="41638" fg:w="19"/><text x="60.3562%" y="479.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="60.1062%" y="453" width="0.0274%" height="15" fill="rgb(215,185,52)" fg:x="41638" fg:w="19"/><text x="60.3562%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (19 samples, 0.03%)</title><rect x="60.1062%" y="437" width="0.0274%" height="15" fill="rgb(240,89,49)" fg:x="41638" fg:w="19"/><text x="60.3562%" y="447.50"></text></g><g><title>HashWriter::write (19 samples, 0.03%)</title><rect x="60.1062%" y="421" width="0.0274%" height="15" fill="rgb(225,12,52)" fg:x="41638" fg:w="19"/><text x="60.3562%" y="431.50"></text></g><g><title>CSHA256::Write (15 samples, 0.02%)</title><rect x="60.1496%" y="341" width="0.0217%" height="15" fill="rgb(239,128,45)" fg:x="41668" fg:w="15"/><text x="60.3996%" y="351.50"></text></g><g><title>CSHA256::Write (35 samples, 0.05%)</title><rect x="60.1337%" y="357" width="0.0505%" height="15" fill="rgb(211,78,47)" fg:x="41657" fg:w="35"/><text x="60.3837%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (65 samples, 0.09%)</title><rect x="60.1062%" y="565" width="0.0938%" height="15" fill="rgb(232,31,21)" fg:x="41638" fg:w="65"/><text x="60.3562%" y="575.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (65 samples, 0.09%)</title><rect x="60.1062%" y="549" width="0.0938%" height="15" fill="rgb(222,168,14)" fg:x="41638" fg:w="65"/><text x="60.3562%" y="559.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (65 samples, 0.09%)</title><rect x="60.1062%" y="533" width="0.0938%" height="15" fill="rgb(209,128,24)" fg:x="41638" fg:w="65"/><text x="60.3562%" y="543.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (65 samples, 0.09%)</title><rect x="60.1062%" y="517" width="0.0938%" height="15" fill="rgb(249,35,13)" fg:x="41638" fg:w="65"/><text x="60.3562%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (65 samples, 0.09%)</title><rect x="60.1062%" y="501" width="0.0938%" height="15" fill="rgb(218,7,2)" fg:x="41638" fg:w="65"/><text x="60.3562%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (65 samples, 0.09%)</title><rect x="60.1062%" y="485" width="0.0938%" height="15" fill="rgb(238,107,27)" fg:x="41638" fg:w="65"/><text x="60.3562%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (46 samples, 0.07%)</title><rect x="60.1337%" y="469" width="0.0664%" height="15" fill="rgb(217,88,38)" fg:x="41657" fg:w="46"/><text x="60.3837%" y="479.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (46 samples, 0.07%)</title><rect x="60.1337%" y="453" width="0.0664%" height="15" fill="rgb(230,207,0)" fg:x="41657" fg:w="46"/><text x="60.3837%" y="463.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (46 samples, 0.07%)</title><rect x="60.1337%" y="437" width="0.0664%" height="15" fill="rgb(249,64,54)" fg:x="41657" fg:w="46"/><text x="60.3837%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (46 samples, 0.07%)</title><rect x="60.1337%" y="421" width="0.0664%" height="15" fill="rgb(231,7,11)" fg:x="41657" fg:w="46"/><text x="60.3837%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (46 samples, 0.07%)</title><rect x="60.1337%" y="405" width="0.0664%" height="15" fill="rgb(205,149,21)" fg:x="41657" fg:w="46"/><text x="60.3837%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (46 samples, 0.07%)</title><rect x="60.1337%" y="389" width="0.0664%" height="15" fill="rgb(215,126,34)" fg:x="41657" fg:w="46"/><text x="60.3837%" y="399.50"></text></g><g><title>HashWriter::write (46 samples, 0.07%)</title><rect x="60.1337%" y="373" width="0.0664%" height="15" fill="rgb(241,132,45)" fg:x="41657" fg:w="46"/><text x="60.3837%" y="383.50"></text></g><g><title>CSHA256::Write (8 samples, 0.01%)</title><rect x="60.2001%" y="453" width="0.0115%" height="15" fill="rgb(252,69,32)" fg:x="41703" fg:w="8"/><text x="60.4501%" y="463.50"></text></g><g><title>CSHA256::Write (9 samples, 0.01%)</title><rect x="60.2188%" y="405" width="0.0130%" height="15" fill="rgb(232,204,19)" fg:x="41716" fg:w="9"/><text x="60.4688%" y="415.50"></text></g><g><title>CSHA256::Write (22 samples, 0.03%)</title><rect x="60.2116%" y="421" width="0.0318%" height="15" fill="rgb(249,15,47)" fg:x="41711" fg:w="22"/><text x="60.4616%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (29 samples, 0.04%)</title><rect x="60.2116%" y="453" width="0.0419%" height="15" fill="rgb(209,227,23)" fg:x="41711" fg:w="29"/><text x="60.4616%" y="463.50"></text></g><g><title>HashWriter::write (29 samples, 0.04%)</title><rect x="60.2116%" y="437" width="0.0419%" height="15" fill="rgb(248,92,24)" fg:x="41711" fg:w="29"/><text x="60.4616%" y="447.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.01%)</title><rect x="60.2535%" y="453" width="0.0101%" height="15" fill="rgb(247,59,2)" fg:x="41740" fg:w="7"/><text x="60.5035%" y="463.50"></text></g><g><title>CSHA256::Write (16 samples, 0.02%)</title><rect x="60.2708%" y="389" width="0.0231%" height="15" fill="rgb(221,30,5)" fg:x="41752" fg:w="16"/><text x="60.5208%" y="399.50"></text></g><g><title>memcpy (7 samples, 0.01%)</title><rect x="60.2838%" y="373" width="0.0101%" height="15" fill="rgb(208,108,53)" fg:x="41761" fg:w="7"/><text x="60.5338%" y="383.50"></text></g><g><title>ShiftMessageB (8 samples, 0.01%)</title><rect x="60.3026%" y="373" width="0.0115%" height="15" fill="rgb(211,183,26)" fg:x="41774" fg:w="8"/><text x="60.5526%" y="383.50"></text></g><g><title>sha256_x86_shani::Transform (15 samples, 0.02%)</title><rect x="60.2939%" y="389" width="0.0217%" height="15" fill="rgb(232,132,4)" fg:x="41768" fg:w="15"/><text x="60.5439%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (222 samples, 0.32%)</title><rect x="60.0182%" y="677" width="0.3205%" height="15" fill="rgb(253,128,37)" fg:x="41577" fg:w="222"/><text x="60.2682%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (222 samples, 0.32%)</title><rect x="60.0182%" y="661" width="0.3205%" height="15" fill="rgb(221,58,24)" fg:x="41577" fg:w="222"/><text x="60.2682%" y="671.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (222 samples, 0.32%)</title><rect x="60.0182%" y="645" width="0.3205%" height="15" fill="rgb(230,54,45)" fg:x="41577" fg:w="222"/><text x="60.2682%" y="655.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (222 samples, 0.32%)</title><rect x="60.0182%" y="629" width="0.3205%" height="15" fill="rgb(254,21,18)" fg:x="41577" fg:w="222"/><text x="60.2682%" y="639.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (222 samples, 0.32%)</title><rect x="60.0182%" y="613" width="0.3205%" height="15" fill="rgb(221,108,0)" fg:x="41577" fg:w="222"/><text x="60.2682%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (222 samples, 0.32%)</title><rect x="60.0182%" y="597" width="0.3205%" height="15" fill="rgb(206,95,1)" fg:x="41577" fg:w="222"/><text x="60.2682%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (222 samples, 0.32%)</title><rect x="60.0182%" y="581" width="0.3205%" height="15" fill="rgb(237,52,5)" fg:x="41577" fg:w="222"/><text x="60.2682%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (96 samples, 0.14%)</title><rect x="60.2001%" y="565" width="0.1386%" height="15" fill="rgb(218,150,34)" fg:x="41703" fg:w="96"/><text x="60.4501%" y="575.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (96 samples, 0.14%)</title><rect x="60.2001%" y="549" width="0.1386%" height="15" fill="rgb(235,194,28)" fg:x="41703" fg:w="96"/><text x="60.4501%" y="559.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (96 samples, 0.14%)</title><rect x="60.2001%" y="533" width="0.1386%" height="15" fill="rgb(245,92,18)" fg:x="41703" fg:w="96"/><text x="60.4501%" y="543.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (96 samples, 0.14%)</title><rect x="60.2001%" y="517" width="0.1386%" height="15" fill="rgb(253,203,53)" fg:x="41703" fg:w="96"/><text x="60.4501%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (96 samples, 0.14%)</title><rect x="60.2001%" y="501" width="0.1386%" height="15" fill="rgb(249,185,47)" fg:x="41703" fg:w="96"/><text x="60.4501%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (96 samples, 0.14%)</title><rect x="60.2001%" y="485" width="0.1386%" height="15" fill="rgb(252,194,52)" fg:x="41703" fg:w="96"/><text x="60.4501%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (96 samples, 0.14%)</title><rect x="60.2001%" y="469" width="0.1386%" height="15" fill="rgb(210,53,36)" fg:x="41703" fg:w="96"/><text x="60.4501%" y="479.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.07%)</title><rect x="60.2665%" y="453" width="0.0722%" height="15" fill="rgb(237,37,25)" fg:x="41749" fg:w="50"/><text x="60.5165%" y="463.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.07%)</title><rect x="60.2694%" y="437" width="0.0693%" height="15" fill="rgb(242,116,27)" fg:x="41751" fg:w="48"/><text x="60.5194%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (47 samples, 0.07%)</title><rect x="60.2708%" y="421" width="0.0678%" height="15" fill="rgb(213,185,26)" fg:x="41752" fg:w="47"/><text x="60.5208%" y="431.50"></text></g><g><title>HashWriter::write (47 samples, 0.07%)</title><rect x="60.2708%" y="405" width="0.0678%" height="15" fill="rgb(225,204,8)" fg:x="41752" fg:w="47"/><text x="60.5208%" y="415.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="60.3242%" y="389" width="0.0144%" height="15" fill="rgb(254,111,37)" fg:x="41789" fg:w="10"/><text x="60.5742%" y="399.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="60.3387%" y="677" width="0.0115%" height="15" fill="rgb(242,35,9)" fg:x="41799" fg:w="8"/><text x="60.5887%" y="687.50"></text></g><g><title>CSHA256::Write (7 samples, 0.01%)</title><rect x="60.3531%" y="613" width="0.0101%" height="15" fill="rgb(232,138,49)" fg:x="41809" fg:w="7"/><text x="60.6031%" y="623.50"></text></g><g><title>CTransaction::ComputeWitnessHash (26 samples, 0.04%)</title><rect x="60.3646%" y="613" width="0.0375%" height="15" fill="rgb(247,56,4)" fg:x="41817" fg:w="26"/><text x="60.6146%" y="623.50"></text></g><g><title>CTransaction::ComputeWitnessHash (19 samples, 0.03%)</title><rect x="60.3747%" y="597" width="0.0274%" height="15" fill="rgb(226,179,17)" fg:x="41824" fg:w="19"/><text x="60.6247%" y="607.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (279 samples, 0.40%)</title><rect x="60.0066%" y="757" width="0.4027%" height="15" fill="rgb(216,163,45)" fg:x="41569" fg:w="279"/><text x="60.2566%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (279 samples, 0.40%)</title><rect x="60.0066%" y="741" width="0.4027%" height="15" fill="rgb(211,157,3)" fg:x="41569" fg:w="279"/><text x="60.2566%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (279 samples, 0.40%)</title><rect x="60.0066%" y="725" width="0.4027%" height="15" fill="rgb(234,44,20)" fg:x="41569" fg:w="279"/><text x="60.2566%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (279 samples, 0.40%)</title><rect x="60.0066%" y="709" width="0.4027%" height="15" fill="rgb(254,138,23)" fg:x="41569" fg:w="279"/><text x="60.2566%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (279 samples, 0.40%)</title><rect x="60.0066%" y="693" width="0.4027%" height="15" fill="rgb(206,119,39)" fg:x="41569" fg:w="279"/><text x="60.2566%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.06%)</title><rect x="60.3502%" y="677" width="0.0592%" height="15" fill="rgb(231,105,52)" fg:x="41807" fg:w="41"/><text x="60.6002%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="60.3516%" y="661" width="0.0577%" height="15" fill="rgb(250,20,5)" fg:x="41808" fg:w="40"/><text x="60.6016%" y="671.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (40 samples, 0.06%)</title><rect x="60.3516%" y="645" width="0.0577%" height="15" fill="rgb(215,198,30)" fg:x="41808" fg:w="40"/><text x="60.6016%" y="655.50"></text></g><g><title>HashWriter::write (40 samples, 0.06%)</title><rect x="60.3516%" y="629" width="0.0577%" height="15" fill="rgb(246,142,8)" fg:x="41808" fg:w="40"/><text x="60.6016%" y="639.50"></text></g><g><title>CSHA256::Write (11 samples, 0.02%)</title><rect x="60.4411%" y="485" width="0.0159%" height="15" fill="rgb(243,26,38)" fg:x="41870" fg:w="11"/><text x="60.6911%" y="495.50"></text></g><g><title>CSHA256::Write (35 samples, 0.05%)</title><rect x="60.4152%" y="501" width="0.0505%" height="15" fill="rgb(205,133,28)" fg:x="41852" fg:w="35"/><text x="60.6652%" y="511.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.01%)</title><rect x="60.4657%" y="501" width="0.0101%" height="15" fill="rgb(212,34,0)" fg:x="41887" fg:w="7"/><text x="60.7157%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (52 samples, 0.08%)</title><rect x="60.4137%" y="565" width="0.0751%" height="15" fill="rgb(251,226,22)" fg:x="41851" fg:w="52"/><text x="60.6637%" y="575.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (52 samples, 0.08%)</title><rect x="60.4137%" y="549" width="0.0751%" height="15" fill="rgb(252,119,9)" fg:x="41851" fg:w="52"/><text x="60.6637%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (52 samples, 0.08%)</title><rect x="60.4137%" y="533" width="0.0751%" height="15" fill="rgb(213,150,50)" fg:x="41851" fg:w="52"/><text x="60.6637%" y="543.50"></text></g><g><title>HashWriter::write (52 samples, 0.08%)</title><rect x="60.4137%" y="517" width="0.0751%" height="15" fill="rgb(212,24,39)" fg:x="41851" fg:w="52"/><text x="60.6637%" y="527.50"></text></g><g><title>memcpy (7 samples, 0.01%)</title><rect x="60.5797%" y="389" width="0.0101%" height="15" fill="rgb(213,46,39)" fg:x="41966" fg:w="7"/><text x="60.8297%" y="399.50"></text></g><g><title>CSHA256::Write (49 samples, 0.07%)</title><rect x="60.5205%" y="405" width="0.0707%" height="15" fill="rgb(239,106,12)" fg:x="41925" fg:w="49"/><text x="60.7705%" y="415.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="60.6043%" y="405" width="0.0101%" height="15" fill="rgb(249,229,21)" fg:x="41983" fg:w="7"/><text x="60.8543%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (7 samples, 0.01%)</title><rect x="60.6043%" y="389" width="0.0101%" height="15" fill="rgb(212,158,3)" fg:x="41983" fg:w="7"/><text x="60.8543%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (7 samples, 0.01%)</title><rect x="60.6043%" y="373" width="0.0101%" height="15" fill="rgb(253,26,48)" fg:x="41983" fg:w="7"/><text x="60.8543%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="60.6043%" y="357" width="0.0101%" height="15" fill="rgb(238,178,20)" fg:x="41983" fg:w="7"/><text x="60.8543%" y="367.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="60.6043%" y="341" width="0.0101%" height="15" fill="rgb(208,86,15)" fg:x="41983" fg:w="7"/><text x="60.8543%" y="351.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="60.6043%" y="325" width="0.0101%" height="15" fill="rgb(239,42,53)" fg:x="41983" fg:w="7"/><text x="60.8543%" y="335.50"></text></g><g><title>CSHA256::Write (104 samples, 0.15%)</title><rect x="60.4917%" y="421" width="0.1501%" height="15" fill="rgb(245,226,8)" fg:x="41905" fg:w="104"/><text x="60.7417%" y="431.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="60.6144%" y="405" width="0.0274%" height="15" fill="rgb(216,176,32)" fg:x="41990" fg:w="19"/><text x="60.8644%" y="415.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="60.6303%" y="389" width="0.0115%" height="15" fill="rgb(231,186,21)" fg:x="42001" fg:w="8"/><text x="60.8803%" y="399.50"></text></g><g><title>Load (8 samples, 0.01%)</title><rect x="60.6476%" y="405" width="0.0115%" height="15" fill="rgb(205,95,49)" fg:x="42013" fg:w="8"/><text x="60.8976%" y="415.50"></text></g><g><title>_mm_shuffle_epi8 (8 samples, 0.01%)</title><rect x="60.6476%" y="389" width="0.0115%" height="15" fill="rgb(217,145,8)" fg:x="42013" fg:w="8"/><text x="60.8976%" y="399.50"></text></g><g><title>_mm_add_epi32 (23 samples, 0.03%)</title><rect x="60.6591%" y="389" width="0.0332%" height="15" fill="rgb(239,144,48)" fg:x="42021" fg:w="23"/><text x="60.9091%" y="399.50"></text></g><g><title>_mm_sha256rnds2_epu32 (9 samples, 0.01%)</title><rect x="60.6923%" y="389" width="0.0130%" height="15" fill="rgb(214,189,23)" fg:x="42044" fg:w="9"/><text x="60.9423%" y="399.50"></text></g><g><title>QuadRound (37 samples, 0.05%)</title><rect x="60.6591%" y="405" width="0.0534%" height="15" fill="rgb(229,157,17)" fg:x="42021" fg:w="37"/><text x="60.9091%" y="415.50"></text></g><g><title>ShiftMessageA (25 samples, 0.04%)</title><rect x="60.7125%" y="389" width="0.0361%" height="15" fill="rgb(230,5,48)" fg:x="42058" fg:w="25"/><text x="60.9625%" y="399.50"></text></g><g><title>_mm_sha256msg1_epu32 (25 samples, 0.04%)</title><rect x="60.7125%" y="373" width="0.0361%" height="15" fill="rgb(224,156,48)" fg:x="42058" fg:w="25"/><text x="60.9625%" y="383.50"></text></g><g><title>_mm_add_epi32 (15 samples, 0.02%)</title><rect x="60.7486%" y="373" width="0.0217%" height="15" fill="rgb(223,14,29)" fg:x="42083" fg:w="15"/><text x="60.9986%" y="383.50"></text></g><g><title>_mm_alignr_epi8 (12 samples, 0.02%)</title><rect x="60.7703%" y="373" width="0.0173%" height="15" fill="rgb(229,96,36)" fg:x="42098" fg:w="12"/><text x="61.0203%" y="383.50"></text></g><g><title>ShiftMessageB (71 samples, 0.10%)</title><rect x="60.7125%" y="405" width="0.1025%" height="15" fill="rgb(231,102,53)" fg:x="42058" fg:w="71"/><text x="60.9625%" y="415.50"></text></g><g><title>ShiftMessageC (46 samples, 0.07%)</title><rect x="60.7486%" y="389" width="0.0664%" height="15" fill="rgb(210,77,38)" fg:x="42083" fg:w="46"/><text x="60.9986%" y="399.50"></text></g><g><title>_mm_sha256msg2_epu32 (19 samples, 0.03%)</title><rect x="60.7876%" y="373" width="0.0274%" height="15" fill="rgb(235,131,6)" fg:x="42110" fg:w="19"/><text x="61.0376%" y="383.50"></text></g><g><title>_mm_add_epi32 (11 samples, 0.02%)</title><rect x="60.8150%" y="389" width="0.0159%" height="15" fill="rgb(252,55,38)" fg:x="42129" fg:w="11"/><text x="61.0650%" y="399.50"></text></g><g><title>ShiftMessageC (16 samples, 0.02%)</title><rect x="60.8150%" y="405" width="0.0231%" height="15" fill="rgb(246,38,14)" fg:x="42129" fg:w="16"/><text x="61.0650%" y="415.50"></text></g><g><title>sha256_x86_shani::Transform (138 samples, 0.20%)</title><rect x="60.6418%" y="421" width="0.1992%" height="15" fill="rgb(242,27,5)" fg:x="42009" fg:w="138"/><text x="60.8918%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (253 samples, 0.37%)</title><rect x="60.4917%" y="453" width="0.3652%" height="15" fill="rgb(228,65,35)" fg:x="41905" fg:w="253"/><text x="60.7417%" y="463.50"></text></g><g><title>HashWriter::write (253 samples, 0.37%)</title><rect x="60.4917%" y="437" width="0.3652%" height="15" fill="rgb(245,93,11)" fg:x="41905" fg:w="253"/><text x="60.7417%" y="447.50"></text></g><g><title>CSHA256::Write (9 samples, 0.01%)</title><rect x="60.8670%" y="389" width="0.0130%" height="15" fill="rgb(213,1,31)" fg:x="42165" fg:w="9"/><text x="61.1170%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (332 samples, 0.48%)</title><rect x="60.4137%" y="677" width="0.4793%" height="15" fill="rgb(237,205,14)" fg:x="41851" fg:w="332"/><text x="60.6637%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (332 samples, 0.48%)</title><rect x="60.4137%" y="661" width="0.4793%" height="15" fill="rgb(232,118,45)" fg:x="41851" fg:w="332"/><text x="60.6637%" y="671.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (332 samples, 0.48%)</title><rect x="60.4137%" y="645" width="0.4793%" height="15" fill="rgb(218,5,6)" fg:x="41851" fg:w="332"/><text x="60.6637%" y="655.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (332 samples, 0.48%)</title><rect x="60.4137%" y="629" width="0.4793%" height="15" fill="rgb(251,87,51)" fg:x="41851" fg:w="332"/><text x="60.6637%" y="639.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (332 samples, 0.48%)</title><rect x="60.4137%" y="613" width="0.4793%" height="15" fill="rgb(207,225,20)" fg:x="41851" fg:w="332"/><text x="60.6637%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (332 samples, 0.48%)</title><rect x="60.4137%" y="597" width="0.4793%" height="15" fill="rgb(222,78,54)" fg:x="41851" fg:w="332"/><text x="60.6637%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (332 samples, 0.48%)</title><rect x="60.4137%" y="581" width="0.4793%" height="15" fill="rgb(232,85,16)" fg:x="41851" fg:w="332"/><text x="60.6637%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (280 samples, 0.40%)</title><rect x="60.4888%" y="565" width="0.4042%" height="15" fill="rgb(244,25,33)" fg:x="41903" fg:w="280"/><text x="60.7388%" y="575.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (280 samples, 0.40%)</title><rect x="60.4888%" y="549" width="0.4042%" height="15" fill="rgb(233,24,36)" fg:x="41903" fg:w="280"/><text x="60.7388%" y="559.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (280 samples, 0.40%)</title><rect x="60.4888%" y="533" width="0.4042%" height="15" fill="rgb(253,49,54)" fg:x="41903" fg:w="280"/><text x="60.7388%" y="543.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (280 samples, 0.40%)</title><rect x="60.4888%" y="517" width="0.4042%" height="15" fill="rgb(245,12,22)" fg:x="41903" fg:w="280"/><text x="60.7388%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (280 samples, 0.40%)</title><rect x="60.4888%" y="501" width="0.4042%" height="15" fill="rgb(253,141,28)" fg:x="41903" fg:w="280"/><text x="60.7388%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (280 samples, 0.40%)</title><rect x="60.4888%" y="485" width="0.4042%" height="15" fill="rgb(225,207,27)" fg:x="41903" fg:w="280"/><text x="60.7388%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (280 samples, 0.40%)</title><rect x="60.4888%" y="469" width="0.4042%" height="15" fill="rgb(220,84,2)" fg:x="41903" fg:w="280"/><text x="60.7388%" y="479.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="60.8670%" y="453" width="0.0260%" height="15" fill="rgb(224,37,37)" fg:x="42165" fg:w="18"/><text x="61.1170%" y="463.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="60.8670%" y="437" width="0.0260%" height="15" fill="rgb(220,143,18)" fg:x="42165" fg:w="18"/><text x="61.1170%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (18 samples, 0.03%)</title><rect x="60.8670%" y="421" width="0.0260%" height="15" fill="rgb(210,88,33)" fg:x="42165" fg:w="18"/><text x="61.1170%" y="431.50"></text></g><g><title>HashWriter::write (18 samples, 0.03%)</title><rect x="60.8670%" y="405" width="0.0260%" height="15" fill="rgb(219,87,51)" fg:x="42165" fg:w="18"/><text x="61.1170%" y="415.50"></text></g><g><title>CSHA256::Write (8 samples, 0.01%)</title><rect x="60.8930%" y="613" width="0.0115%" height="15" fill="rgb(211,7,35)" fg:x="42183" fg:w="8"/><text x="61.1430%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (348 samples, 0.50%)</title><rect x="60.4094%" y="757" width="0.5024%" height="15" fill="rgb(232,77,2)" fg:x="41848" fg:w="348"/><text x="60.6594%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (348 samples, 0.50%)</title><rect x="60.4094%" y="741" width="0.5024%" height="15" fill="rgb(249,94,25)" fg:x="41848" fg:w="348"/><text x="60.6594%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (348 samples, 0.50%)</title><rect x="60.4094%" y="725" width="0.5024%" height="15" fill="rgb(215,112,2)" fg:x="41848" fg:w="348"/><text x="60.6594%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (348 samples, 0.50%)</title><rect x="60.4094%" y="709" width="0.5024%" height="15" fill="rgb(226,115,48)" fg:x="41848" fg:w="348"/><text x="60.6594%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (348 samples, 0.50%)</title><rect x="60.4094%" y="693" width="0.5024%" height="15" fill="rgb(249,196,10)" fg:x="41848" fg:w="348"/><text x="60.6594%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="60.8930%" y="677" width="0.0188%" height="15" fill="rgb(237,109,14)" fg:x="42183" fg:w="13"/><text x="61.1430%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="60.8930%" y="661" width="0.0188%" height="15" fill="rgb(217,103,53)" fg:x="42183" fg:w="13"/><text x="61.1430%" y="671.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (13 samples, 0.02%)</title><rect x="60.8930%" y="645" width="0.0188%" height="15" fill="rgb(244,137,9)" fg:x="42183" fg:w="13"/><text x="61.1430%" y="655.50"></text></g><g><title>HashWriter::write (13 samples, 0.02%)</title><rect x="60.8930%" y="629" width="0.0188%" height="15" fill="rgb(227,201,3)" fg:x="42183" fg:w="13"/><text x="61.1430%" y="639.50"></text></g><g><title>CSHA256::Write (7 samples, 0.01%)</title><rect x="60.9175%" y="645" width="0.0101%" height="15" fill="rgb(243,94,6)" fg:x="42200" fg:w="7"/><text x="61.1675%" y="655.50"></text></g><g><title>CSHA256::Write (133 samples, 0.19%)</title><rect x="60.9377%" y="597" width="0.1920%" height="15" fill="rgb(235,118,5)" fg:x="42214" fg:w="133"/><text x="61.1877%" y="607.50"></text></g><g><title>memcpy (20 samples, 0.03%)</title><rect x="61.1008%" y="581" width="0.0289%" height="15" fill="rgb(247,10,30)" fg:x="42327" fg:w="20"/><text x="61.3508%" y="591.50"></text></g><g><title>memcpy (7 samples, 0.01%)</title><rect x="61.1326%" y="597" width="0.0101%" height="15" fill="rgb(205,26,28)" fg:x="42349" fg:w="7"/><text x="61.3826%" y="607.50"></text></g><g><title>_mm_add_epi32 (22 samples, 0.03%)</title><rect x="61.1499%" y="565" width="0.0318%" height="15" fill="rgb(206,99,35)" fg:x="42361" fg:w="22"/><text x="61.3999%" y="575.50"></text></g><g><title>_mm_sha256rnds2_epu32 (14 samples, 0.02%)</title><rect x="61.1817%" y="565" width="0.0202%" height="15" fill="rgb(238,130,40)" fg:x="42383" fg:w="14"/><text x="61.4317%" y="575.50"></text></g><g><title>QuadRound (48 samples, 0.07%)</title><rect x="61.1499%" y="581" width="0.0693%" height="15" fill="rgb(224,126,31)" fg:x="42361" fg:w="48"/><text x="61.3999%" y="591.50"></text></g><g><title>_mm_shuffle_epi32 (12 samples, 0.02%)</title><rect x="61.2019%" y="565" width="0.0173%" height="15" fill="rgb(254,105,17)" fg:x="42397" fg:w="12"/><text x="61.4519%" y="575.50"></text></g><g><title>ShiftMessageA (33 samples, 0.05%)</title><rect x="61.2207%" y="565" width="0.0476%" height="15" fill="rgb(216,87,36)" fg:x="42410" fg:w="33"/><text x="61.4707%" y="575.50"></text></g><g><title>_mm_sha256msg1_epu32 (33 samples, 0.05%)</title><rect x="61.2207%" y="549" width="0.0476%" height="15" fill="rgb(240,21,12)" fg:x="42410" fg:w="33"/><text x="61.4707%" y="559.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.02%)</title><rect x="61.2683%" y="549" width="0.0231%" height="15" fill="rgb(245,192,34)" fg:x="42443" fg:w="16"/><text x="61.5183%" y="559.50"></text></g><g><title>_mm_alignr_epi8 (17 samples, 0.02%)</title><rect x="61.2914%" y="549" width="0.0245%" height="15" fill="rgb(226,100,49)" fg:x="42459" fg:w="17"/><text x="61.5414%" y="559.50"></text></g><g><title>ShiftMessageB (89 samples, 0.13%)</title><rect x="61.2207%" y="581" width="0.1285%" height="15" fill="rgb(245,188,27)" fg:x="42410" fg:w="89"/><text x="61.4707%" y="591.50"></text></g><g><title>ShiftMessageC (56 samples, 0.08%)</title><rect x="61.2683%" y="565" width="0.0808%" height="15" fill="rgb(212,170,8)" fg:x="42443" fg:w="56"/><text x="61.5183%" y="575.50"></text></g><g><title>_mm_sha256msg2_epu32 (23 samples, 0.03%)</title><rect x="61.3159%" y="549" width="0.0332%" height="15" fill="rgb(217,113,29)" fg:x="42476" fg:w="23"/><text x="61.5659%" y="559.50"></text></g><g><title>ShiftMessageC (7 samples, 0.01%)</title><rect x="61.3491%" y="581" width="0.0101%" height="15" fill="rgb(237,30,3)" fg:x="42499" fg:w="7"/><text x="61.5991%" y="591.50"></text></g><g><title>Shuffle (7 samples, 0.01%)</title><rect x="61.3592%" y="581" width="0.0101%" height="15" fill="rgb(227,19,28)" fg:x="42506" fg:w="7"/><text x="61.6092%" y="591.50"></text></g><g><title>sha256_x86_shani::Transform (158 samples, 0.23%)</title><rect x="61.1427%" y="597" width="0.2281%" height="15" fill="rgb(239,172,45)" fg:x="42356" fg:w="158"/><text x="61.3927%" y="607.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (8 samples, 0.01%)</title><rect x="61.3809%" y="581" width="0.0115%" height="15" fill="rgb(254,55,39)" fg:x="42521" fg:w="8"/><text x="61.6309%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="61.3809%" y="565" width="0.0115%" height="15" fill="rgb(249,208,12)" fg:x="42521" fg:w="8"/><text x="61.6309%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="61.3809%" y="549" width="0.0115%" height="15" fill="rgb(240,52,13)" fg:x="42521" fg:w="8"/><text x="61.6309%" y="559.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="61.3809%" y="533" width="0.0115%" height="15" fill="rgb(252,149,13)" fg:x="42521" fg:w="8"/><text x="61.6309%" y="543.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="61.3809%" y="517" width="0.0115%" height="15" fill="rgb(232,81,48)" fg:x="42521" fg:w="8"/><text x="61.6309%" y="527.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (17 samples, 0.02%)</title><rect x="61.3708%" y="597" width="0.0245%" height="15" fill="rgb(222,144,2)" fg:x="42514" fg:w="17"/><text x="61.6208%" y="607.50"></text></g><g><title>CSHA256::Write (363 samples, 0.52%)</title><rect x="60.9276%" y="613" width="0.5240%" height="15" fill="rgb(216,81,32)" fg:x="42207" fg:w="363"/><text x="61.1776%" y="623.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (39 samples, 0.06%)</title><rect x="61.3953%" y="597" width="0.0563%" height="15" fill="rgb(244,78,51)" fg:x="42531" fg:w="39"/><text x="61.6453%" y="607.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="61.4285%" y="581" width="0.0231%" height="15" fill="rgb(217,66,21)" fg:x="42554" fg:w="16"/><text x="61.6785%" y="591.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (10 samples, 0.01%)</title><rect x="61.4372%" y="565" width="0.0144%" height="15" fill="rgb(247,101,42)" fg:x="42560" fg:w="10"/><text x="61.6872%" y="575.50"></text></g><g><title>HashWriter::write (10 samples, 0.01%)</title><rect x="61.4372%" y="549" width="0.0144%" height="15" fill="rgb(227,81,39)" fg:x="42560" fg:w="10"/><text x="61.6872%" y="559.50"></text></g><g><title>_mm_add_epi32 (15 samples, 0.02%)</title><rect x="61.4632%" y="581" width="0.0217%" height="15" fill="rgb(220,223,44)" fg:x="42578" fg:w="15"/><text x="61.7132%" y="591.50"></text></g><g><title>_mm_sha256rnds2_epu32 (9 samples, 0.01%)</title><rect x="61.4848%" y="581" width="0.0130%" height="15" fill="rgb(205,218,2)" fg:x="42593" fg:w="9"/><text x="61.7348%" y="591.50"></text></g><g><title>QuadRound (26 samples, 0.04%)</title><rect x="61.4632%" y="597" width="0.0375%" height="15" fill="rgb(212,207,28)" fg:x="42578" fg:w="26"/><text x="61.7132%" y="607.50"></text></g><g><title>ShiftMessageA (12 samples, 0.02%)</title><rect x="61.5007%" y="581" width="0.0173%" height="15" fill="rgb(224,12,41)" fg:x="42604" fg:w="12"/><text x="61.7507%" y="591.50"></text></g><g><title>_mm_sha256msg1_epu32 (12 samples, 0.02%)</title><rect x="61.5007%" y="565" width="0.0173%" height="15" fill="rgb(216,118,12)" fg:x="42604" fg:w="12"/><text x="61.7507%" y="575.50"></text></g><g><title>ShiftMessageB (37 samples, 0.05%)</title><rect x="61.5007%" y="597" width="0.0534%" height="15" fill="rgb(252,97,46)" fg:x="42604" fg:w="37"/><text x="61.7507%" y="607.50"></text></g><g><title>ShiftMessageC (25 samples, 0.04%)</title><rect x="61.5180%" y="581" width="0.0361%" height="15" fill="rgb(244,206,19)" fg:x="42616" fg:w="25"/><text x="61.7680%" y="591.50"></text></g><g><title>_mm_sha256msg2_epu32 (14 samples, 0.02%)</title><rect x="61.5339%" y="565" width="0.0202%" height="15" fill="rgb(231,84,31)" fg:x="42627" fg:w="14"/><text x="61.7839%" y="575.50"></text></g><g><title>_mm_add_epi32 (8 samples, 0.01%)</title><rect x="61.5541%" y="581" width="0.0115%" height="15" fill="rgb(244,133,0)" fg:x="42641" fg:w="8"/><text x="61.8041%" y="591.50"></text></g><g><title>ShiftMessageC (12 samples, 0.02%)</title><rect x="61.5541%" y="597" width="0.0173%" height="15" fill="rgb(223,15,50)" fg:x="42641" fg:w="12"/><text x="61.8041%" y="607.50"></text></g><g><title>sha256_x86_shani::Transform (87 samples, 0.13%)</title><rect x="61.4516%" y="613" width="0.1256%" height="15" fill="rgb(250,118,49)" fg:x="42570" fg:w="87"/><text x="61.7016%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (451 samples, 0.65%)</title><rect x="60.9276%" y="645" width="0.6510%" height="15" fill="rgb(248,25,38)" fg:x="42207" fg:w="451"/><text x="61.1776%" y="655.50"></text></g><g><title>HashWriter::write (451 samples, 0.65%)</title><rect x="60.9276%" y="629" width="0.6510%" height="15" fill="rgb(215,70,14)" fg:x="42207" fg:w="451"/><text x="61.1776%" y="639.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.01%)</title><rect x="61.5787%" y="645" width="0.0130%" height="15" fill="rgb(215,28,15)" fg:x="42658" fg:w="9"/><text x="61.8287%" y="655.50"></text></g><g><title>CSHA256::Write (26 samples, 0.04%)</title><rect x="61.5960%" y="581" width="0.0375%" height="15" fill="rgb(243,6,28)" fg:x="42670" fg:w="26"/><text x="61.8460%" y="591.50"></text></g><g><title>sha256_x86_shani::Transform (12 samples, 0.02%)</title><rect x="61.6335%" y="581" width="0.0173%" height="15" fill="rgb(222,130,1)" fg:x="42696" fg:w="12"/><text x="61.8835%" y="591.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="581" width="0.0115%" height="15" fill="rgb(236,166,44)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="591.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (8 samples, 0.01%)</title><rect x="61.6508%" y="565" width="0.0115%" height="15" fill="rgb(221,108,14)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="549" width="0.0115%" height="15" fill="rgb(252,3,45)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="533" width="0.0115%" height="15" fill="rgb(237,68,30)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="517" width="0.0115%" height="15" fill="rgb(211,79,22)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="501" width="0.0115%" height="15" fill="rgb(252,185,21)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="485" width="0.0115%" height="15" fill="rgb(225,189,26)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="469" width="0.0115%" height="15" fill="rgb(241,30,40)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="479.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="453" width="0.0115%" height="15" fill="rgb(235,215,44)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="463.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="437" width="0.0115%" height="15" fill="rgb(205,8,29)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="447.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="421" width="0.0115%" height="15" fill="rgb(241,137,42)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="405" width="0.0115%" height="15" fill="rgb(237,155,2)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="415.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="389" width="0.0115%" height="15" fill="rgb(245,29,42)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="373" width="0.0115%" height="15" fill="rgb(234,101,35)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="383.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="357" width="0.0115%" height="15" fill="rgb(228,64,37)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="367.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="341" width="0.0115%" height="15" fill="rgb(217,214,36)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="351.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="325" width="0.0115%" height="15" fill="rgb(243,70,3)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="335.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="309" width="0.0115%" height="15" fill="rgb(253,158,52)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="319.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="293" width="0.0115%" height="15" fill="rgb(234,111,54)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="303.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (8 samples, 0.01%)</title><rect x="61.6508%" y="277" width="0.0115%" height="15" fill="rgb(217,70,32)" fg:x="42708" fg:w="8"/><text x="61.9008%" y="287.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (529 samples, 0.76%)</title><rect x="60.9175%" y="677" width="0.7636%" height="15" fill="rgb(234,18,33)" fg:x="42200" fg:w="529"/><text x="61.1675%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (529 samples, 0.76%)</title><rect x="60.9175%" y="661" width="0.7636%" height="15" fill="rgb(234,12,49)" fg:x="42200" fg:w="529"/><text x="61.1675%" y="671.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (61 samples, 0.09%)</title><rect x="61.5931%" y="645" width="0.0881%" height="15" fill="rgb(236,10,21)" fg:x="42668" fg:w="61"/><text x="61.8431%" y="655.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (61 samples, 0.09%)</title><rect x="61.5931%" y="629" width="0.0881%" height="15" fill="rgb(248,182,45)" fg:x="42668" fg:w="61"/><text x="61.8431%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (59 samples, 0.09%)</title><rect x="61.5960%" y="613" width="0.0852%" height="15" fill="rgb(217,95,36)" fg:x="42670" fg:w="59"/><text x="61.8460%" y="623.50"></text></g><g><title>HashWriter::write (59 samples, 0.09%)</title><rect x="61.5960%" y="597" width="0.0852%" height="15" fill="rgb(212,110,31)" fg:x="42670" fg:w="59"/><text x="61.8460%" y="607.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="61.6624%" y="581" width="0.0188%" height="15" fill="rgb(206,32,53)" fg:x="42716" fg:w="13"/><text x="61.9124%" y="591.50"></text></g><g><title>CSHA256::Write (14 samples, 0.02%)</title><rect x="61.6840%" y="613" width="0.0202%" height="15" fill="rgb(246,141,37)" fg:x="42731" fg:w="14"/><text x="61.9340%" y="623.50"></text></g><g><title>QuadRound (9 samples, 0.01%)</title><rect x="61.7086%" y="597" width="0.0130%" height="15" fill="rgb(219,16,7)" fg:x="42748" fg:w="9"/><text x="61.9586%" y="607.50"></text></g><g><title>ShiftMessageA (9 samples, 0.01%)</title><rect x="61.7216%" y="581" width="0.0130%" height="15" fill="rgb(230,205,45)" fg:x="42757" fg:w="9"/><text x="61.9716%" y="591.50"></text></g><g><title>_mm_sha256msg1_epu32 (9 samples, 0.01%)</title><rect x="61.7216%" y="565" width="0.0130%" height="15" fill="rgb(231,43,49)" fg:x="42757" fg:w="9"/><text x="61.9716%" y="575.50"></text></g><g><title>ShiftMessageB (24 samples, 0.03%)</title><rect x="61.7216%" y="597" width="0.0346%" height="15" fill="rgb(212,106,34)" fg:x="42757" fg:w="24"/><text x="61.9716%" y="607.50"></text></g><g><title>ShiftMessageC (15 samples, 0.02%)</title><rect x="61.7346%" y="581" width="0.0217%" height="15" fill="rgb(206,83,17)" fg:x="42766" fg:w="15"/><text x="61.9846%" y="591.50"></text></g><g><title>sha256_x86_shani::Transform (36 samples, 0.05%)</title><rect x="61.7057%" y="613" width="0.0520%" height="15" fill="rgb(244,154,49)" fg:x="42746" fg:w="36"/><text x="61.9557%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (589 samples, 0.85%)</title><rect x="60.9117%" y="757" width="0.8502%" height="15" fill="rgb(244,149,49)" fg:x="42196" fg:w="589"/><text x="61.1617%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (589 samples, 0.85%)</title><rect x="60.9117%" y="741" width="0.8502%" height="15" fill="rgb(227,134,18)" fg:x="42196" fg:w="589"/><text x="61.1617%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (589 samples, 0.85%)</title><rect x="60.9117%" y="725" width="0.8502%" height="15" fill="rgb(237,116,36)" fg:x="42196" fg:w="589"/><text x="61.1617%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (589 samples, 0.85%)</title><rect x="60.9117%" y="709" width="0.8502%" height="15" fill="rgb(205,129,40)" fg:x="42196" fg:w="589"/><text x="61.1617%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (589 samples, 0.85%)</title><rect x="60.9117%" y="693" width="0.8502%" height="15" fill="rgb(236,178,4)" fg:x="42196" fg:w="589"/><text x="61.1617%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (55 samples, 0.08%)</title><rect x="61.6826%" y="677" width="0.0794%" height="15" fill="rgb(251,76,53)" fg:x="42730" fg:w="55"/><text x="61.9326%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.08%)</title><rect x="61.6840%" y="661" width="0.0780%" height="15" fill="rgb(242,92,40)" fg:x="42731" fg:w="54"/><text x="61.9340%" y="671.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (54 samples, 0.08%)</title><rect x="61.6840%" y="645" width="0.0780%" height="15" fill="rgb(209,45,30)" fg:x="42731" fg:w="54"/><text x="61.9340%" y="655.50"></text></g><g><title>HashWriter::write (54 samples, 0.08%)</title><rect x="61.6840%" y="629" width="0.0780%" height="15" fill="rgb(218,157,36)" fg:x="42731" fg:w="54"/><text x="61.9340%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (22 samples, 0.03%)</title><rect x="61.7620%" y="757" width="0.0318%" height="15" fill="rgb(222,186,16)" fg:x="42785" fg:w="22"/><text x="62.0120%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.03%)</title><rect x="61.7620%" y="741" width="0.0318%" height="15" fill="rgb(254,72,35)" fg:x="42785" fg:w="22"/><text x="62.0120%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.03%)</title><rect x="61.7620%" y="725" width="0.0318%" height="15" fill="rgb(224,25,35)" fg:x="42785" fg:w="22"/><text x="62.0120%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (22 samples, 0.03%)</title><rect x="61.7620%" y="709" width="0.0318%" height="15" fill="rgb(206,135,52)" fg:x="42785" fg:w="22"/><text x="62.0120%" y="719.50"></text></g><g><title>HashWriter::write (22 samples, 0.03%)</title><rect x="61.7620%" y="693" width="0.0318%" height="15" fill="rgb(229,174,47)" fg:x="42785" fg:w="22"/><text x="62.0120%" y="703.50"></text></g><g><title>CTransaction::ComputeWitnessHash (19 samples, 0.03%)</title><rect x="61.7663%" y="677" width="0.0274%" height="15" fill="rgb(242,184,21)" fg:x="42788" fg:w="19"/><text x="62.0163%" y="687.50"></text></g><g><title>CTransaction::ComputeWitnessHash (19 samples, 0.03%)</title><rect x="61.7663%" y="661" width="0.0274%" height="15" fill="rgb(213,22,45)" fg:x="42788" fg:w="19"/><text x="62.0163%" y="671.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.01%)</title><rect x="61.8284%" y="661" width="0.0130%" height="15" fill="rgb(237,81,54)" fg:x="42831" fg:w="9"/><text x="62.0784%" y="671.50"></text></g><g><title>CSHA256::Write (26 samples, 0.04%)</title><rect x="61.8067%" y="677" width="0.0375%" height="15" fill="rgb(248,177,18)" fg:x="42816" fg:w="26"/><text x="62.0567%" y="687.50"></text></g><g><title>_mm_add_epi32 (21 samples, 0.03%)</title><rect x="61.8515%" y="645" width="0.0303%" height="15" fill="rgb(254,31,16)" fg:x="42847" fg:w="21"/><text x="62.1015%" y="655.50"></text></g><g><title>_mm_sha256rnds2_epu32 (13 samples, 0.02%)</title><rect x="61.8818%" y="645" width="0.0188%" height="15" fill="rgb(235,20,31)" fg:x="42868" fg:w="13"/><text x="62.1318%" y="655.50"></text></g><g><title>QuadRound (38 samples, 0.05%)</title><rect x="61.8515%" y="661" width="0.0549%" height="15" fill="rgb(240,56,43)" fg:x="42847" fg:w="38"/><text x="62.1015%" y="671.50"></text></g><g><title>ShiftMessageA (14 samples, 0.02%)</title><rect x="61.9063%" y="645" width="0.0202%" height="15" fill="rgb(237,197,51)" fg:x="42885" fg:w="14"/><text x="62.1563%" y="655.50"></text></g><g><title>_mm_sha256msg1_epu32 (14 samples, 0.02%)</title><rect x="61.9063%" y="629" width="0.0202%" height="15" fill="rgb(241,162,44)" fg:x="42885" fg:w="14"/><text x="62.1563%" y="639.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.02%)</title><rect x="61.9266%" y="629" width="0.0231%" height="15" fill="rgb(224,23,20)" fg:x="42899" fg:w="16"/><text x="62.1766%" y="639.50"></text></g><g><title>_mm_alignr_epi8 (9 samples, 0.01%)</title><rect x="61.9496%" y="629" width="0.0130%" height="15" fill="rgb(250,109,34)" fg:x="42915" fg:w="9"/><text x="62.1996%" y="639.50"></text></g><g><title>ShiftMessageB (53 samples, 0.08%)</title><rect x="61.9063%" y="661" width="0.0765%" height="15" fill="rgb(214,175,50)" fg:x="42885" fg:w="53"/><text x="62.1563%" y="671.50"></text></g><g><title>ShiftMessageC (39 samples, 0.06%)</title><rect x="61.9266%" y="645" width="0.0563%" height="15" fill="rgb(213,182,5)" fg:x="42899" fg:w="39"/><text x="62.1766%" y="655.50"></text></g><g><title>_mm_sha256msg2_epu32 (14 samples, 0.02%)</title><rect x="61.9626%" y="629" width="0.0202%" height="15" fill="rgb(209,199,19)" fg:x="42924" fg:w="14"/><text x="62.2126%" y="639.50"></text></g><g><title>ShiftMessageC (8 samples, 0.01%)</title><rect x="61.9829%" y="661" width="0.0115%" height="15" fill="rgb(236,224,42)" fg:x="42938" fg:w="8"/><text x="62.2329%" y="671.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1,389 samples, 2.01%)</title><rect x="59.9965%" y="773" width="2.0051%" height="15" fill="rgb(246,226,29)" fg:x="41562" fg:w="1389"/><text x="60.2465%" y="783.50">v..</text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (144 samples, 0.21%)</title><rect x="61.7937%" y="757" width="0.2079%" height="15" fill="rgb(227,223,11)" fg:x="42807" fg:w="144"/><text x="62.0437%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (144 samples, 0.21%)</title><rect x="61.7937%" y="741" width="0.2079%" height="15" fill="rgb(219,7,51)" fg:x="42807" fg:w="144"/><text x="62.0437%" y="751.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (144 samples, 0.21%)</title><rect x="61.7937%" y="725" width="0.2079%" height="15" fill="rgb(245,167,10)" fg:x="42807" fg:w="144"/><text x="62.0437%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (144 samples, 0.21%)</title><rect x="61.7937%" y="709" width="0.2079%" height="15" fill="rgb(237,224,16)" fg:x="42807" fg:w="144"/><text x="62.0437%" y="719.50"></text></g><g><title>HashWriter::write (144 samples, 0.21%)</title><rect x="61.7937%" y="693" width="0.2079%" height="15" fill="rgb(226,132,13)" fg:x="42807" fg:w="144"/><text x="62.0437%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (107 samples, 0.15%)</title><rect x="61.8472%" y="677" width="0.1545%" height="15" fill="rgb(214,140,3)" fg:x="42844" fg:w="107"/><text x="62.0972%" y="687.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1,502 samples, 2.17%)</title><rect x="59.8536%" y="853" width="2.1682%" height="15" fill="rgb(221,177,4)" fg:x="41463" fg:w="1502"/><text x="60.1036%" y="863.50">H..</text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1,502 samples, 2.17%)</title><rect x="59.8536%" y="837" width="2.1682%" height="15" fill="rgb(238,139,3)" fg:x="41463" fg:w="1502"/><text x="60.1036%" y="847.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (1,502 samples, 2.17%)</title><rect x="59.8536%" y="821" width="2.1682%" height="15" fill="rgb(216,17,39)" fg:x="41463" fg:w="1502"/><text x="60.1036%" y="831.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1,502 samples, 2.17%)</title><rect x="59.8536%" y="805" width="2.1682%" height="15" fill="rgb(238,120,9)" fg:x="41463" fg:w="1502"/><text x="60.1036%" y="815.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1,502 samples, 2.17%)</title><rect x="59.8536%" y="789" width="2.1682%" height="15" fill="rgb(244,92,53)" fg:x="41463" fg:w="1502"/><text x="60.1036%" y="799.50">v..</text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="62.0016%" y="773" width="0.0202%" height="15" fill="rgb(224,148,33)" fg:x="42951" fg:w="14"/><text x="62.2516%" y="783.50"></text></g><g><title>CSHA256::Finalize (17 samples, 0.02%)</title><rect x="62.0348%" y="805" width="0.0245%" height="15" fill="rgb(243,6,36)" fg:x="42974" fg:w="17"/><text x="62.2848%" y="815.50"></text></g><g><title>CSHA256::Write (112 samples, 0.16%)</title><rect x="62.0651%" y="805" width="0.1617%" height="15" fill="rgb(230,102,11)" fg:x="42995" fg:w="112"/><text x="62.3151%" y="815.50"></text></g><g><title>memcpy (9 samples, 0.01%)</title><rect x="62.2138%" y="789" width="0.0130%" height="15" fill="rgb(234,148,36)" fg:x="43098" fg:w="9"/><text x="62.4638%" y="799.50"></text></g><g><title>CTransaction::ComputeWitnessHash (9 samples, 0.01%)</title><rect x="62.2268%" y="805" width="0.0130%" height="15" fill="rgb(251,153,25)" fg:x="43107" fg:w="9"/><text x="62.4768%" y="815.50"></text></g><g><title>CTransaction::ComputeWitnessHash (9 samples, 0.01%)</title><rect x="62.2268%" y="789" width="0.0130%" height="15" fill="rgb(215,129,8)" fg:x="43107" fg:w="9"/><text x="62.4768%" y="799.50"></text></g><g><title>HashWriter::GetHash (9 samples, 0.01%)</title><rect x="62.2268%" y="773" width="0.0130%" height="15" fill="rgb(224,128,35)" fg:x="43107" fg:w="9"/><text x="62.4768%" y="783.50"></text></g><g><title>QuadRound (7 samples, 0.01%)</title><rect x="62.2470%" y="789" width="0.0101%" height="15" fill="rgb(237,56,52)" fg:x="43121" fg:w="7"/><text x="62.4970%" y="799.50"></text></g><g><title>ShiftMessageB (12 samples, 0.02%)</title><rect x="62.2571%" y="789" width="0.0173%" height="15" fill="rgb(234,213,19)" fg:x="43128" fg:w="12"/><text x="62.5071%" y="799.50"></text></g><g><title>ShiftMessageC (9 samples, 0.01%)</title><rect x="62.2615%" y="773" width="0.0130%" height="15" fill="rgb(252,82,23)" fg:x="43131" fg:w="9"/><text x="62.5115%" y="783.50"></text></g><g><title>sha256_x86_shani::Transform (21 samples, 0.03%)</title><rect x="62.2470%" y="805" width="0.0303%" height="15" fill="rgb(254,201,21)" fg:x="43121" fg:w="21"/><text x="62.4970%" y="815.50"></text></g><g><title>CSHA256::Write (187 samples, 0.27%)</title><rect x="62.0233%" y="821" width="0.2699%" height="15" fill="rgb(250,186,11)" fg:x="42966" fg:w="187"/><text x="62.2733%" y="831.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="62.2773%" y="805" width="0.0159%" height="15" fill="rgb(211,174,5)" fg:x="43142" fg:w="11"/><text x="62.5273%" y="815.50"></text></g><g><title>_mm_add_epi32 (33 samples, 0.05%)</title><rect x="62.3134%" y="789" width="0.0476%" height="15" fill="rgb(214,121,10)" fg:x="43167" fg:w="33"/><text x="62.5634%" y="799.50"></text></g><g><title>_mm_sha256rnds2_epu32 (19 samples, 0.03%)</title><rect x="62.3611%" y="789" width="0.0274%" height="15" fill="rgb(241,66,2)" fg:x="43200" fg:w="19"/><text x="62.6111%" y="799.50"></text></g><g><title>QuadRound (63 samples, 0.09%)</title><rect x="62.3134%" y="805" width="0.0909%" height="15" fill="rgb(220,167,19)" fg:x="43167" fg:w="63"/><text x="62.5634%" y="815.50"></text></g><g><title>_mm_shuffle_epi32 (11 samples, 0.02%)</title><rect x="62.3885%" y="789" width="0.0159%" height="15" fill="rgb(231,54,50)" fg:x="43219" fg:w="11"/><text x="62.6385%" y="799.50"></text></g><g><title>ShiftMessageA (29 samples, 0.04%)</title><rect x="62.4058%" y="789" width="0.0419%" height="15" fill="rgb(239,217,53)" fg:x="43231" fg:w="29"/><text x="62.6558%" y="799.50"></text></g><g><title>_mm_sha256msg1_epu32 (29 samples, 0.04%)</title><rect x="62.4058%" y="773" width="0.0419%" height="15" fill="rgb(248,8,0)" fg:x="43231" fg:w="29"/><text x="62.6558%" y="783.50"></text></g><g><title>_mm_add_epi32 (23 samples, 0.03%)</title><rect x="62.4477%" y="773" width="0.0332%" height="15" fill="rgb(229,118,37)" fg:x="43260" fg:w="23"/><text x="62.6977%" y="783.50"></text></g><g><title>_mm_alignr_epi8 (19 samples, 0.03%)</title><rect x="62.4809%" y="773" width="0.0274%" height="15" fill="rgb(253,223,43)" fg:x="43283" fg:w="19"/><text x="62.7309%" y="783.50"></text></g><g><title>ShiftMessageB (100 samples, 0.14%)</title><rect x="62.4058%" y="805" width="0.1444%" height="15" fill="rgb(211,77,36)" fg:x="43231" fg:w="100"/><text x="62.6558%" y="815.50"></text></g><g><title>ShiftMessageC (71 samples, 0.10%)</title><rect x="62.4477%" y="789" width="0.1025%" height="15" fill="rgb(219,3,53)" fg:x="43260" fg:w="71"/><text x="62.6977%" y="799.50"></text></g><g><title>_mm_sha256msg2_epu32 (29 samples, 0.04%)</title><rect x="62.5083%" y="773" width="0.0419%" height="15" fill="rgb(244,45,42)" fg:x="43302" fg:w="29"/><text x="62.7583%" y="783.50"></text></g><g><title>_mm_add_epi32 (10 samples, 0.01%)</title><rect x="62.5502%" y="789" width="0.0144%" height="15" fill="rgb(225,95,27)" fg:x="43331" fg:w="10"/><text x="62.8002%" y="799.50"></text></g><g><title>ShiftMessageC (16 samples, 0.02%)</title><rect x="62.5502%" y="805" width="0.0231%" height="15" fill="rgb(207,74,8)" fg:x="43331" fg:w="16"/><text x="62.8002%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (199 samples, 0.29%)</title><rect x="62.2932%" y="821" width="0.2873%" height="15" fill="rgb(243,63,36)" fg:x="43153" fg:w="199"/><text x="62.5432%" y="831.50"></text></g><g><title>CSHA256::Finalize (389 samples, 0.56%)</title><rect x="62.0218%" y="837" width="0.5615%" height="15" fill="rgb(211,180,12)" fg:x="42965" fg:w="389"/><text x="62.2718%" y="847.50"></text></g><g><title>_mm_add_epi32 (8 samples, 0.01%)</title><rect x="62.5877%" y="805" width="0.0115%" height="15" fill="rgb(254,166,49)" fg:x="43357" fg:w="8"/><text x="62.8377%" y="815.50"></text></g><g><title>QuadRound (11 samples, 0.02%)</title><rect x="62.5877%" y="821" width="0.0159%" height="15" fill="rgb(205,19,0)" fg:x="43357" fg:w="11"/><text x="62.8377%" y="831.50"></text></g><g><title>HashWriter::GetHash (411 samples, 0.59%)</title><rect x="62.0218%" y="853" width="0.5933%" height="15" fill="rgb(224,172,32)" fg:x="42965" fg:w="411"/><text x="62.2718%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (20 samples, 0.03%)</title><rect x="62.5863%" y="837" width="0.0289%" height="15" fill="rgb(254,136,30)" fg:x="43356" fg:w="20"/><text x="62.8363%" y="847.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1,914 samples, 2.76%)</title><rect x="59.8536%" y="885" width="2.7629%" height="15" fill="rgb(246,19,35)" fg:x="41463" fg:w="1914"/><text x="60.1036%" y="895.50">CT..</text></g><g><title>CTransaction::ComputeWitnessHash (1,914 samples, 2.76%)</title><rect x="59.8536%" y="869" width="2.7629%" height="15" fill="rgb(219,24,36)" fg:x="41463" fg:w="1914"/><text x="60.1036%" y="879.50">CT..</text></g><g><title>sha256_x86_shani::Transform (13 samples, 0.02%)</title><rect x="62.6296%" y="885" width="0.0188%" height="15" fill="rgb(251,55,1)" fg:x="43386" fg:w="13"/><text x="62.8796%" y="895.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (14 samples, 0.02%)</title><rect x="62.6599%" y="693" width="0.0202%" height="15" fill="rgb(218,117,39)" fg:x="43407" fg:w="14"/><text x="62.9099%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="62.6599%" y="677" width="0.0202%" height="15" fill="rgb(248,169,11)" fg:x="43407" fg:w="14"/><text x="62.9099%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (14 samples, 0.02%)</title><rect x="62.6599%" y="661" width="0.0202%" height="15" fill="rgb(244,40,44)" fg:x="43407" fg:w="14"/><text x="62.9099%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="62.6599%" y="645" width="0.0202%" height="15" fill="rgb(234,62,37)" fg:x="43407" fg:w="14"/><text x="62.9099%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="62.6599%" y="629" width="0.0202%" height="15" fill="rgb(207,117,42)" fg:x="43407" fg:w="14"/><text x="62.9099%" y="639.50"></text></g><g><title>CTransaction::CTransaction (3,214 samples, 4.64%)</title><rect x="58.0521%" y="901" width="4.6395%" height="15" fill="rgb(213,43,2)" fg:x="40215" fg:w="3214"/><text x="58.3021%" y="911.50">CTran..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="885" width="0.0390%" height="15" fill="rgb(244,202,51)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="895.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="869" width="0.0390%" height="15" fill="rgb(253,174,46)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="879.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="853" width="0.0390%" height="15" fill="rgb(251,23,1)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="863.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="837" width="0.0390%" height="15" fill="rgb(253,26,1)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="847.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="821" width="0.0390%" height="15" fill="rgb(216,89,31)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="831.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="805" width="0.0390%" height="15" fill="rgb(209,109,5)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="815.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="789" width="0.0390%" height="15" fill="rgb(229,63,13)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="799.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="773" width="0.0390%" height="15" fill="rgb(238,137,54)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="783.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="757" width="0.0390%" height="15" fill="rgb(228,1,9)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="767.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="741" width="0.0390%" height="15" fill="rgb(249,120,48)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="751.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="725" width="0.0390%" height="15" fill="rgb(209,72,36)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="735.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (27 samples, 0.04%)</title><rect x="62.6527%" y="709" width="0.0390%" height="15" fill="rgb(247,98,49)" fg:x="43402" fg:w="27"/><text x="62.9027%" y="719.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (32 samples, 0.05%)</title><rect x="62.6945%" y="901" width="0.0462%" height="15" fill="rgb(233,75,36)" fg:x="43431" fg:w="32"/><text x="62.9445%" y="911.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (8 samples, 0.01%)</title><rect x="62.7292%" y="885" width="0.0115%" height="15" fill="rgb(225,14,24)" fg:x="43455" fg:w="8"/><text x="62.9792%" y="895.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (8 samples, 0.01%)</title><rect x="62.7292%" y="869" width="0.0115%" height="15" fill="rgb(237,193,20)" fg:x="43455" fg:w="8"/><text x="62.9792%" y="879.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (8 samples, 0.01%)</title><rect x="62.7292%" y="853" width="0.0115%" height="15" fill="rgb(239,122,19)" fg:x="43455" fg:w="8"/><text x="62.9792%" y="863.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (8 samples, 0.01%)</title><rect x="62.7292%" y="837" width="0.0115%" height="15" fill="rgb(231,220,10)" fg:x="43455" fg:w="8"/><text x="62.9792%" y="847.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="62.7407%" y="901" width="0.0274%" height="15" fill="rgb(220,66,15)" fg:x="43463" fg:w="19"/><text x="62.9907%" y="911.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (7 samples, 0.01%)</title><rect x="62.7855%" y="629" width="0.0101%" height="15" fill="rgb(215,171,52)" fg:x="43494" fg:w="7"/><text x="63.0355%" y="639.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (8 samples, 0.01%)</title><rect x="62.8057%" y="597" width="0.0115%" height="15" fill="rgb(241,169,50)" fg:x="43508" fg:w="8"/><text x="63.0557%" y="607.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (30 samples, 0.04%)</title><rect x="62.7754%" y="709" width="0.0433%" height="15" fill="rgb(236,189,0)" fg:x="43487" fg:w="30"/><text x="63.0254%" y="719.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (30 samples, 0.04%)</title><rect x="62.7754%" y="693" width="0.0433%" height="15" fill="rgb(217,147,20)" fg:x="43487" fg:w="30"/><text x="63.0254%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (30 samples, 0.04%)</title><rect x="62.7754%" y="677" width="0.0433%" height="15" fill="rgb(206,188,39)" fg:x="43487" fg:w="30"/><text x="63.0254%" y="687.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.04%)</title><rect x="62.7754%" y="661" width="0.0433%" height="15" fill="rgb(227,118,25)" fg:x="43487" fg:w="30"/><text x="63.0254%" y="671.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (30 samples, 0.04%)</title><rect x="62.7754%" y="645" width="0.0433%" height="15" fill="rgb(248,171,40)" fg:x="43487" fg:w="30"/><text x="63.0254%" y="655.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="62.7956%" y="629" width="0.0231%" height="15" fill="rgb(251,90,54)" fg:x="43501" fg:w="16"/><text x="63.0456%" y="639.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (16 samples, 0.02%)</title><rect x="62.7956%" y="613" width="0.0231%" height="15" fill="rgb(234,11,46)" fg:x="43501" fg:w="16"/><text x="63.0456%" y="623.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,394 samples, 9.23%)</title><rect x="53.5915%" y="965" width="9.2300%" height="15" fill="rgb(229,134,13)" fg:x="37125" fg:w="6394"/><text x="53.8415%" y="975.50">std::_Sp_coun..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,393 samples, 9.23%)</title><rect x="53.5930%" y="949" width="9.2286%" height="15" fill="rgb(223,129,3)" fg:x="37126" fg:w="6393"/><text x="53.8430%" y="959.50">void std::all..</text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,393 samples, 9.23%)</title><rect x="53.5930%" y="933" width="9.2286%" height="15" fill="rgb(221,124,13)" fg:x="37126" fg:w="6393"/><text x="53.8430%" y="943.50">void std::_Co..</text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,393 samples, 9.23%)</title><rect x="53.5930%" y="917" width="9.2286%" height="15" fill="rgb(234,3,18)" fg:x="37126" fg:w="6393"/><text x="53.8430%" y="927.50">CTransaction:..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="901" width="0.0491%" height="15" fill="rgb(249,199,20)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="911.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="885" width="0.0491%" height="15" fill="rgb(224,134,6)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="895.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="869" width="0.0491%" height="15" fill="rgb(254,83,26)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="879.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="853" width="0.0491%" height="15" fill="rgb(217,88,9)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="863.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="837" width="0.0491%" height="15" fill="rgb(225,73,2)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="847.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="821" width="0.0491%" height="15" fill="rgb(226,44,39)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="831.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="805" width="0.0491%" height="15" fill="rgb(228,53,17)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="815.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="789" width="0.0491%" height="15" fill="rgb(212,27,27)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="799.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="773" width="0.0491%" height="15" fill="rgb(241,50,6)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="783.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="757" width="0.0491%" height="15" fill="rgb(225,28,51)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="767.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="741" width="0.0491%" height="15" fill="rgb(215,33,16)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="751.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (34 samples, 0.05%)</title><rect x="62.7725%" y="725" width="0.0491%" height="15" fill="rgb(243,40,39)" fg:x="43485" fg:w="34"/><text x="63.0225%" y="735.50"></text></g><g><title>__lll_lock_wake_private (45 samples, 0.06%)</title><rect x="62.8331%" y="869" width="0.0650%" height="15" fill="rgb(225,11,42)" fg:x="43527" fg:w="45"/><text x="63.0831%" y="879.50"></text></g><g><title>[unknown] (44 samples, 0.06%)</title><rect x="62.8345%" y="853" width="0.0635%" height="15" fill="rgb(241,220,38)" fg:x="43528" fg:w="44"/><text x="63.0845%" y="863.50"></text></g><g><title>[unknown] (43 samples, 0.06%)</title><rect x="62.8360%" y="837" width="0.0621%" height="15" fill="rgb(244,52,35)" fg:x="43529" fg:w="43"/><text x="63.0860%" y="847.50"></text></g><g><title>[unknown] (42 samples, 0.06%)</title><rect x="62.8374%" y="821" width="0.0606%" height="15" fill="rgb(246,42,46)" fg:x="43530" fg:w="42"/><text x="63.0874%" y="831.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="62.8461%" y="805" width="0.0520%" height="15" fill="rgb(205,184,13)" fg:x="43536" fg:w="36"/><text x="63.0961%" y="815.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="62.8519%" y="789" width="0.0462%" height="15" fill="rgb(209,48,36)" fg:x="43540" fg:w="32"/><text x="63.1019%" y="799.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="62.8721%" y="773" width="0.0260%" height="15" fill="rgb(244,34,51)" fg:x="43554" fg:w="18"/><text x="63.1221%" y="783.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="62.8735%" y="757" width="0.0245%" height="15" fill="rgb(221,107,33)" fg:x="43555" fg:w="17"/><text x="63.1235%" y="767.50"></text></g><g><title>malloc (88 samples, 0.13%)</title><rect x="62.8230%" y="885" width="0.1270%" height="15" fill="rgb(224,203,12)" fg:x="43520" fg:w="88"/><text x="63.0730%" y="895.50"></text></g><g><title>_int_malloc (36 samples, 0.05%)</title><rect x="62.8981%" y="869" width="0.0520%" height="15" fill="rgb(230,215,18)" fg:x="43572" fg:w="36"/><text x="63.1481%" y="879.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (6,488 samples, 9.37%)</title><rect x="53.5858%" y="1045" width="9.3657%" height="15" fill="rgb(206,185,35)" fg:x="37121" fg:w="6488"/><text x="53.8358%" y="1055.50">void Unserial..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,484 samples, 9.36%)</title><rect x="53.5915%" y="1029" width="9.3599%" height="15" fill="rgb(228,140,34)" fg:x="37125" fg:w="6484"/><text x="53.8415%" y="1039.50">std::shared_p..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,484 samples, 9.36%)</title><rect x="53.5915%" y="1013" width="9.3599%" height="15" fill="rgb(208,93,13)" fg:x="37125" fg:w="6484"/><text x="53.8415%" y="1023.50">std::shared_p..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,484 samples, 9.36%)</title><rect x="53.5915%" y="997" width="9.3599%" height="15" fill="rgb(221,193,39)" fg:x="37125" fg:w="6484"/><text x="53.8415%" y="1007.50">std::__shared..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,484 samples, 9.36%)</title><rect x="53.5915%" y="981" width="9.3599%" height="15" fill="rgb(241,132,34)" fg:x="37125" fg:w="6484"/><text x="53.8415%" y="991.50">std::__shared..</text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (90 samples, 0.13%)</title><rect x="62.8215%" y="965" width="0.1299%" height="15" fill="rgb(221,141,10)" fg:x="43519" fg:w="90"/><text x="63.0715%" y="975.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (90 samples, 0.13%)</title><rect x="62.8215%" y="949" width="0.1299%" height="15" fill="rgb(226,90,31)" fg:x="43519" fg:w="90"/><text x="63.0715%" y="959.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (90 samples, 0.13%)</title><rect x="62.8215%" y="933" width="0.1299%" height="15" fill="rgb(243,75,5)" fg:x="43519" fg:w="90"/><text x="63.0715%" y="943.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (90 samples, 0.13%)</title><rect x="62.8215%" y="917" width="0.1299%" height="15" fill="rgb(227,156,21)" fg:x="43519" fg:w="90"/><text x="63.0715%" y="927.50"></text></g><g><title>operator new (89 samples, 0.13%)</title><rect x="62.8230%" y="901" width="0.1285%" height="15" fill="rgb(250,195,8)" fg:x="43520" fg:w="89"/><text x="63.0730%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="62.9601%" y="917" width="0.0115%" height="15" fill="rgb(220,134,5)" fg:x="43615" fg:w="8"/><text x="63.2101%" y="927.50"></text></g><g><title>unsigned long ser_readdata64&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="62.9616%" y="901" width="0.0101%" height="15" fill="rgb(246,106,34)" fg:x="43616" fg:w="7"/><text x="63.2116%" y="911.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (7 samples, 0.01%)</title><rect x="62.9616%" y="885" width="0.0101%" height="15" fill="rgb(205,1,4)" fg:x="43616" fg:w="7"/><text x="63.2116%" y="895.50"></text></g><g><title>DataStream::read (7 samples, 0.01%)</title><rect x="62.9616%" y="869" width="0.0101%" height="15" fill="rgb(224,151,29)" fg:x="43616" fg:w="7"/><text x="63.2116%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="62.9515%" y="1045" width="0.0217%" height="15" fill="rgb(251,196,0)" fg:x="43609" fg:w="15"/><text x="63.2015%" y="1055.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (9 samples, 0.01%)</title><rect x="62.9601%" y="1029" width="0.0130%" height="15" fill="rgb(212,127,0)" fg:x="43615" fg:w="9"/><text x="63.2101%" y="1039.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (9 samples, 0.01%)</title><rect x="62.9601%" y="1013" width="0.0130%" height="15" fill="rgb(236,71,53)" fg:x="43615" fg:w="9"/><text x="63.2101%" y="1023.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="62.9601%" y="997" width="0.0130%" height="15" fill="rgb(227,99,0)" fg:x="43615" fg:w="9"/><text x="63.2101%" y="1007.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="62.9601%" y="981" width="0.0130%" height="15" fill="rgb(239,89,21)" fg:x="43615" fg:w="9"/><text x="63.2101%" y="991.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (9 samples, 0.01%)</title><rect x="62.9601%" y="965" width="0.0130%" height="15" fill="rgb(243,122,19)" fg:x="43615" fg:w="9"/><text x="63.2101%" y="975.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (9 samples, 0.01%)</title><rect x="62.9601%" y="949" width="0.0130%" height="15" fill="rgb(229,192,45)" fg:x="43615" fg:w="9"/><text x="63.2101%" y="959.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (9 samples, 0.01%)</title><rect x="62.9601%" y="933" width="0.0130%" height="15" fill="rgb(235,165,35)" fg:x="43615" fg:w="9"/><text x="63.2101%" y="943.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (6,635 samples, 9.58%)</title><rect x="53.3967%" y="1269" width="9.5779%" height="15" fill="rgb(253,202,0)" fg:x="36990" fg:w="6635"/><text x="53.6467%" y="1279.50">DataStream&amp; Da..</text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (6,635 samples, 9.58%)</title><rect x="53.3967%" y="1253" width="9.5779%" height="15" fill="rgb(235,51,20)" fg:x="36990" fg:w="6635"/><text x="53.6467%" y="1263.50">void Unseriali..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (6,635 samples, 9.58%)</title><rect x="53.3967%" y="1237" width="9.5779%" height="15" fill="rgb(218,95,46)" fg:x="36990" fg:w="6635"/><text x="53.6467%" y="1247.50">void ParamsWra..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (6,634 samples, 9.58%)</title><rect x="53.3981%" y="1221" width="9.5765%" height="15" fill="rgb(212,81,10)" fg:x="36991" fg:w="6634"/><text x="53.6481%" y="1231.50">void Unseriali..</text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,634 samples, 9.58%)</title><rect x="53.3981%" y="1205" width="9.5765%" height="15" fill="rgb(240,59,0)" fg:x="36991" fg:w="6634"/><text x="53.6481%" y="1215.50">void CBlock::U..</text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,634 samples, 9.58%)</title><rect x="53.3981%" y="1189" width="9.5765%" height="15" fill="rgb(212,191,42)" fg:x="36991" fg:w="6634"/><text x="53.6481%" y="1199.50">void CBlock::U..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (6,634 samples, 9.58%)</title><rect x="53.3981%" y="1173" width="9.5765%" height="15" fill="rgb(233,140,3)" fg:x="36991" fg:w="6634"/><text x="53.6481%" y="1183.50">void CBlock::S..</text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (6,634 samples, 9.58%)</title><rect x="53.3981%" y="1157" width="9.5765%" height="15" fill="rgb(215,69,23)" fg:x="36991" fg:w="6634"/><text x="53.6481%" y="1167.50">void ActionUns..</text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (6,634 samples, 9.58%)</title><rect x="53.3981%" y="1141" width="9.5765%" height="15" fill="rgb(240,202,20)" fg:x="36991" fg:w="6634"/><text x="53.6481%" y="1151.50">void Unseriali..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (6,634 samples, 9.58%)</title><rect x="53.3981%" y="1125" width="9.5765%" height="15" fill="rgb(209,146,50)" fg:x="36991" fg:w="6634"/><text x="53.6481%" y="1135.50">void Unseriali..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (6,634 samples, 9.58%)</title><rect x="53.3981%" y="1109" width="9.5765%" height="15" fill="rgb(253,102,54)" fg:x="36991" fg:w="6634"/><text x="53.6481%" y="1119.50">void Unseriali..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,634 samples, 9.58%)</title><rect x="53.3981%" y="1093" width="9.5765%" height="15" fill="rgb(250,173,47)" fg:x="36991" fg:w="6634"/><text x="53.6481%" y="1103.50">void Wrapper&lt;V..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6,630 samples, 9.57%)</title><rect x="53.4039%" y="1077" width="9.5707%" height="15" fill="rgb(232,142,7)" fg:x="36995" fg:w="6630"/><text x="53.6539%" y="1087.50">void VectorFor..</text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (6,613 samples, 9.55%)</title><rect x="53.4284%" y="1061" width="9.5462%" height="15" fill="rgb(230,157,47)" fg:x="37012" fg:w="6613"/><text x="53.6784%" y="1071.50">void DefaultFo..</text></g><g><title>_mm_add_epi32 (28 samples, 0.04%)</title><rect x="63.0107%" y="1157" width="0.0404%" height="15" fill="rgb(214,177,35)" fg:x="43650" fg:w="28"/><text x="63.2607%" y="1167.50"></text></g><g><title>_mm_sha256rnds2_epu32 (71 samples, 0.10%)</title><rect x="63.0511%" y="1157" width="0.1025%" height="15" fill="rgb(234,119,46)" fg:x="43678" fg:w="71"/><text x="63.3011%" y="1167.50"></text></g><g><title>QuadRound (116 samples, 0.17%)</title><rect x="63.0107%" y="1173" width="0.1675%" height="15" fill="rgb(241,180,50)" fg:x="43650" fg:w="116"/><text x="63.2607%" y="1183.50"></text></g><g><title>_mm_shuffle_epi32 (17 samples, 0.02%)</title><rect x="63.1536%" y="1157" width="0.0245%" height="15" fill="rgb(221,54,25)" fg:x="43749" fg:w="17"/><text x="63.4036%" y="1167.50"></text></g><g><title>ShiftMessageA (21 samples, 0.03%)</title><rect x="63.1868%" y="1157" width="0.0303%" height="15" fill="rgb(209,157,44)" fg:x="43772" fg:w="21"/><text x="63.4368%" y="1167.50"></text></g><g><title>_mm_sha256msg1_epu32 (21 samples, 0.03%)</title><rect x="63.1868%" y="1141" width="0.0303%" height="15" fill="rgb(246,115,41)" fg:x="43772" fg:w="21"/><text x="63.4368%" y="1151.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.02%)</title><rect x="63.2171%" y="1141" width="0.0231%" height="15" fill="rgb(229,86,1)" fg:x="43793" fg:w="16"/><text x="63.4671%" y="1151.50"></text></g><g><title>_mm_alignr_epi8 (29 samples, 0.04%)</title><rect x="63.2402%" y="1141" width="0.0419%" height="15" fill="rgb(240,108,53)" fg:x="43809" fg:w="29"/><text x="63.4902%" y="1151.50"></text></g><g><title>ShiftMessageB (127 samples, 0.18%)</title><rect x="63.1868%" y="1173" width="0.1833%" height="15" fill="rgb(227,134,2)" fg:x="43772" fg:w="127"/><text x="63.4368%" y="1183.50"></text></g><g><title>ShiftMessageC (106 samples, 0.15%)</title><rect x="63.2171%" y="1157" width="0.1530%" height="15" fill="rgb(213,129,25)" fg:x="43793" fg:w="106"/><text x="63.4671%" y="1167.50"></text></g><g><title>_mm_sha256msg2_epu32 (61 samples, 0.09%)</title><rect x="63.2820%" y="1141" width="0.0881%" height="15" fill="rgb(226,35,21)" fg:x="43838" fg:w="61"/><text x="63.5320%" y="1151.50"></text></g><g><title>ShiftMessageC (14 samples, 0.02%)</title><rect x="63.3701%" y="1173" width="0.0202%" height="15" fill="rgb(208,129,26)" fg:x="43899" fg:w="14"/><text x="63.6201%" y="1183.50"></text></g><g><title>_mm_sha256msg2_epu32 (9 samples, 0.01%)</title><rect x="63.3773%" y="1157" width="0.0130%" height="15" fill="rgb(224,83,6)" fg:x="43904" fg:w="9"/><text x="63.6273%" y="1167.50"></text></g><g><title>Unshuffle (7 samples, 0.01%)</title><rect x="63.3903%" y="1173" width="0.0101%" height="15" fill="rgb(227,52,39)" fg:x="43913" fg:w="7"/><text x="63.6403%" y="1183.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (277 samples, 0.40%)</title><rect x="63.0049%" y="1189" width="0.3999%" height="15" fill="rgb(241,30,17)" fg:x="43646" fg:w="277"/><text x="63.2549%" y="1199.50"></text></g><g><title>SHA256D64 (281 samples, 0.41%)</title><rect x="63.0020%" y="1205" width="0.4056%" height="15" fill="rgb(246,186,42)" fg:x="43644" fg:w="281"/><text x="63.2520%" y="1215.50"></text></g><g><title>ComputeMerkleRoot (288 samples, 0.42%)</title><rect x="63.0020%" y="1221" width="0.4157%" height="15" fill="rgb(221,169,15)" fg:x="43644" fg:w="288"/><text x="63.2520%" y="1231.50"></text></g><g><title>CheckMerkleRoot (316 samples, 0.46%)</title><rect x="62.9775%" y="1253" width="0.4562%" height="15" fill="rgb(235,108,21)" fg:x="43627" fg:w="316"/><text x="63.2275%" y="1263.50"></text></g><g><title>BlockMerkleRoot (316 samples, 0.46%)</title><rect x="62.9775%" y="1237" width="0.4562%" height="15" fill="rgb(219,148,30)" fg:x="43627" fg:w="316"/><text x="63.2275%" y="1247.50"></text></g><g><title>_mm_add_epi32 (30 samples, 0.04%)</title><rect x="63.4582%" y="1157" width="0.0433%" height="15" fill="rgb(220,109,5)" fg:x="43960" fg:w="30"/><text x="63.7082%" y="1167.50"></text></g><g><title>_mm_sha256rnds2_epu32 (64 samples, 0.09%)</title><rect x="63.5015%" y="1157" width="0.0924%" height="15" fill="rgb(213,203,48)" fg:x="43990" fg:w="64"/><text x="63.7515%" y="1167.50"></text></g><g><title>QuadRound (110 samples, 0.16%)</title><rect x="63.4582%" y="1173" width="0.1588%" height="15" fill="rgb(244,71,33)" fg:x="43960" fg:w="110"/><text x="63.7082%" y="1183.50"></text></g><g><title>_mm_shuffle_epi32 (16 samples, 0.02%)</title><rect x="63.5938%" y="1157" width="0.0231%" height="15" fill="rgb(209,23,2)" fg:x="44054" fg:w="16"/><text x="63.8438%" y="1167.50"></text></g><g><title>ShiftMessageA (9 samples, 0.01%)</title><rect x="63.6213%" y="1173" width="0.0130%" height="15" fill="rgb(219,97,7)" fg:x="44073" fg:w="9"/><text x="63.8713%" y="1183.50"></text></g><g><title>_mm_sha256msg1_epu32 (9 samples, 0.01%)</title><rect x="63.6213%" y="1157" width="0.0130%" height="15" fill="rgb(216,161,23)" fg:x="44073" fg:w="9"/><text x="63.8713%" y="1167.50"></text></g><g><title>ShiftMessageA (30 samples, 0.04%)</title><rect x="63.6343%" y="1157" width="0.0433%" height="15" fill="rgb(207,45,42)" fg:x="44082" fg:w="30"/><text x="63.8843%" y="1167.50"></text></g><g><title>_mm_sha256msg1_epu32 (30 samples, 0.04%)</title><rect x="63.6343%" y="1141" width="0.0433%" height="15" fill="rgb(241,61,4)" fg:x="44082" fg:w="30"/><text x="63.8843%" y="1151.50"></text></g><g><title>_mm_add_epi32 (12 samples, 0.02%)</title><rect x="63.6776%" y="1141" width="0.0173%" height="15" fill="rgb(236,170,1)" fg:x="44112" fg:w="12"/><text x="63.9276%" y="1151.50"></text></g><g><title>_mm_alignr_epi8 (17 samples, 0.02%)</title><rect x="63.6949%" y="1141" width="0.0245%" height="15" fill="rgb(239,72,5)" fg:x="44124" fg:w="17"/><text x="63.9449%" y="1151.50"></text></g><g><title>ShiftMessageB (111 samples, 0.16%)</title><rect x="63.6343%" y="1173" width="0.1602%" height="15" fill="rgb(214,13,50)" fg:x="44082" fg:w="111"/><text x="63.8843%" y="1183.50"></text></g><g><title>ShiftMessageC (81 samples, 0.12%)</title><rect x="63.6776%" y="1157" width="0.1169%" height="15" fill="rgb(224,88,9)" fg:x="44112" fg:w="81"/><text x="63.9276%" y="1167.50"></text></g><g><title>_mm_sha256msg2_epu32 (52 samples, 0.08%)</title><rect x="63.7194%" y="1141" width="0.0751%" height="15" fill="rgb(238,192,34)" fg:x="44141" fg:w="52"/><text x="63.9694%" y="1151.50"></text></g><g><title>ShiftMessageC (10 samples, 0.01%)</title><rect x="63.7945%" y="1173" width="0.0144%" height="15" fill="rgb(217,203,50)" fg:x="44193" fg:w="10"/><text x="64.0445%" y="1183.50"></text></g><g><title>_mm_sha256msg2_epu32 (8 samples, 0.01%)</title><rect x="63.7974%" y="1157" width="0.0115%" height="15" fill="rgb(241,123,32)" fg:x="44195" fg:w="8"/><text x="64.0474%" y="1167.50"></text></g><g><title>Unshuffle (13 samples, 0.02%)</title><rect x="63.8089%" y="1173" width="0.0188%" height="15" fill="rgb(248,151,39)" fg:x="44203" fg:w="13"/><text x="64.0589%" y="1183.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (262 samples, 0.38%)</title><rect x="63.4553%" y="1189" width="0.3782%" height="15" fill="rgb(208,89,6)" fg:x="43958" fg:w="262"/><text x="63.7053%" y="1199.50"></text></g><g><title>SHA256D64 (266 samples, 0.38%)</title><rect x="63.4509%" y="1205" width="0.3840%" height="15" fill="rgb(254,43,26)" fg:x="43955" fg:w="266"/><text x="63.7009%" y="1215.50"></text></g><g><title>ComputeMerkleRoot (270 samples, 0.39%)</title><rect x="63.4509%" y="1221" width="0.3898%" height="15" fill="rgb(216,158,13)" fg:x="43955" fg:w="270"/><text x="63.7009%" y="1231.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (7 samples, 0.01%)</title><rect x="63.8421%" y="1221" width="0.0101%" height="15" fill="rgb(212,47,37)" fg:x="44226" fg:w="7"/><text x="64.0921%" y="1231.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (7 samples, 0.01%)</title><rect x="63.8421%" y="1205" width="0.0101%" height="15" fill="rgb(254,16,10)" fg:x="44226" fg:w="7"/><text x="64.0921%" y="1215.50"></text></g><g><title>IsBlockMutated (607 samples, 0.88%)</title><rect x="62.9775%" y="1269" width="0.8762%" height="15" fill="rgb(223,228,16)" fg:x="43627" fg:w="607"/><text x="63.2275%" y="1279.50"></text></g><g><title>CheckWitnessMalleation (291 samples, 0.42%)</title><rect x="63.4336%" y="1253" width="0.4201%" height="15" fill="rgb(249,108,50)" fg:x="43943" fg:w="291"/><text x="63.6836%" y="1263.50"></text></g><g><title>BlockWitnessMerkleRoot (291 samples, 0.42%)</title><rect x="63.4336%" y="1237" width="0.4201%" height="15" fill="rgb(208,220,5)" fg:x="43943" fg:w="291"/><text x="63.6836%" y="1247.50"></text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::~optional (54 samples, 0.08%)</title><rect x="63.8696%" y="1269" width="0.0780%" height="15" fill="rgb(217,89,48)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1279.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::~_Optional_base (54 samples, 0.08%)</title><rect x="63.8696%" y="1253" width="0.0780%" height="15" fill="rgb(212,113,41)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1263.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::~_Optional_payload (54 samples, 0.08%)</title><rect x="63.8696%" y="1237" width="0.0780%" height="15" fill="rgb(231,127,5)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1247.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_reset (54 samples, 0.08%)</title><rect x="63.8696%" y="1221" width="0.0780%" height="15" fill="rgb(217,141,17)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1231.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_destroy (54 samples, 0.08%)</title><rect x="63.8696%" y="1205" width="0.0780%" height="15" fill="rgb(245,125,54)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1215.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::~pair (54 samples, 0.08%)</title><rect x="63.8696%" y="1189" width="0.0780%" height="15" fill="rgb(248,125,3)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1199.50"></text></g><g><title>CNetMessage::~CNetMessage (54 samples, 0.08%)</title><rect x="63.8696%" y="1173" width="0.0780%" height="15" fill="rgb(236,119,51)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1183.50"></text></g><g><title>DataStream::~DataStream (54 samples, 0.08%)</title><rect x="63.8696%" y="1157" width="0.0780%" height="15" fill="rgb(239,99,8)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1167.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (54 samples, 0.08%)</title><rect x="63.8696%" y="1141" width="0.0780%" height="15" fill="rgb(224,228,4)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (54 samples, 0.08%)</title><rect x="63.8696%" y="1125" width="0.0780%" height="15" fill="rgb(220,131,45)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (54 samples, 0.08%)</title><rect x="63.8696%" y="1109" width="0.0780%" height="15" fill="rgb(215,62,5)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1119.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (54 samples, 0.08%)</title><rect x="63.8696%" y="1093" width="0.0780%" height="15" fill="rgb(253,12,24)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1103.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (54 samples, 0.08%)</title><rect x="63.8696%" y="1077" width="0.0780%" height="15" fill="rgb(248,120,50)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1087.50"></text></g><g><title>memory_cleanse (54 samples, 0.08%)</title><rect x="63.8696%" y="1061" width="0.0780%" height="15" fill="rgb(245,194,10)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1071.50"></text></g><g><title>memset (54 samples, 0.08%)</title><rect x="63.8696%" y="1045" width="0.0780%" height="15" fill="rgb(241,149,38)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1055.50"></text></g><g><title>__memset_avx512_unaligned_erms (54 samples, 0.08%)</title><rect x="63.8696%" y="1029" width="0.0780%" height="15" fill="rgb(219,215,7)" fg:x="44245" fg:w="54"/><text x="64.1196%" y="1039.50"></text></g><g><title>__clone (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1445" width="49.8268%" height="15" fill="rgb(208,120,31)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1455.50">__clone</text></g><g><title>start_thread (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1429" width="49.8268%" height="15" fill="rgb(244,30,8)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1439.50">start_thread</text></g><g><title>execute_native_thread_routine (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1413" width="49.8268%" height="15" fill="rgb(238,35,44)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1423.50">execute_native_thread_routine</text></g><g><title>_M_run (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1397" width="49.8268%" height="15" fill="rgb(243,218,37)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1407.50">_M_run</text></g><g><title>operator (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1381" width="49.8268%" height="15" fill="rgb(218,169,10)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1391.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1365" width="49.8268%" height="15" fill="rgb(221,144,10)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1375.50">_M_invoke&lt;0, 1, 2&gt;</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1349" width="49.8268%" height="15" fill="rgb(226,41,38)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1359.50">__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1333" width="49.8268%" height="15" fill="rgb(228,3,1)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1343.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_stri..</text></g><g><title>util::TraceThread (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1317" width="49.8268%" height="15" fill="rgb(209,129,12)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1327.50">util::TraceThread</text></g><g><title>std::function&lt;void ()&gt;::operator (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1301" width="49.8268%" height="15" fill="rgb(213,136,33)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1311.50">std::function&lt;void ()&gt;::operator</text></g><g><title>CConnman::ThreadMessageHandler (34,517 samples, 49.83%)</title><rect x="14.1640%" y="1285" width="49.8268%" height="15" fill="rgb(209,181,29)" fg:x="9812" fg:w="34517"/><text x="14.4140%" y="1295.50">CConnman::ThreadMessageHandler</text></g><g><title>void (anonymous namespace)::PeerManagerImpl::MakeAndPushMessage&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (30 samples, 0.04%)</title><rect x="63.9475%" y="1269" width="0.0433%" height="15" fill="rgb(234,173,18)" fg:x="44299" fg:w="30"/><text x="64.1975%" y="1279.50"></text></g><g><title>CConnman::PushMessage (30 samples, 0.04%)</title><rect x="63.9475%" y="1253" width="0.0433%" height="15" fill="rgb(227,73,47)" fg:x="44299" fg:w="30"/><text x="64.1975%" y="1263.50"></text></g><g><title>CConnman::SocketSendData (29 samples, 0.04%)</title><rect x="63.9490%" y="1237" width="0.0419%" height="15" fill="rgb(234,9,34)" fg:x="44300" fg:w="29"/><text x="64.1990%" y="1247.50"></text></g><g><title>__send (23 samples, 0.03%)</title><rect x="63.9576%" y="1221" width="0.0332%" height="15" fill="rgb(235,172,15)" fg:x="44306" fg:w="23"/><text x="64.2076%" y="1231.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="63.9576%" y="1205" width="0.0332%" height="15" fill="rgb(245,61,2)" fg:x="44306" fg:w="23"/><text x="64.2076%" y="1215.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="63.9576%" y="1189" width="0.0332%" height="15" fill="rgb(238,39,47)" fg:x="44306" fg:w="23"/><text x="64.2076%" y="1199.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="63.9576%" y="1173" width="0.0332%" height="15" fill="rgb(234,37,24)" fg:x="44306" fg:w="23"/><text x="64.2076%" y="1183.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="63.9576%" y="1157" width="0.0332%" height="15" fill="rgb(248,223,24)" fg:x="44306" fg:w="23"/><text x="64.2076%" y="1167.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="63.9591%" y="1141" width="0.0318%" height="15" fill="rgb(223,12,15)" fg:x="44307" fg:w="22"/><text x="64.2091%" y="1151.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="63.9634%" y="1125" width="0.0274%" height="15" fill="rgb(249,6,3)" fg:x="44310" fg:w="19"/><text x="64.2134%" y="1135.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="63.9663%" y="1109" width="0.0245%" height="15" fill="rgb(237,105,33)" fg:x="44312" fg:w="17"/><text x="64.2163%" y="1119.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="63.9677%" y="1093" width="0.0231%" height="15" fill="rgb(252,208,35)" fg:x="44313" fg:w="16"/><text x="64.2177%" y="1103.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="63.9692%" y="1077" width="0.0217%" height="15" fill="rgb(215,181,35)" fg:x="44314" fg:w="15"/><text x="64.2192%" y="1087.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="63.9706%" y="1061" width="0.0202%" height="15" fill="rgb(246,212,3)" fg:x="44315" fg:w="14"/><text x="64.2206%" y="1071.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="63.9735%" y="1045" width="0.0173%" height="15" fill="rgb(247,156,24)" fg:x="44317" fg:w="12"/><text x="64.2235%" y="1055.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="63.9778%" y="1029" width="0.0130%" height="15" fill="rgb(248,9,31)" fg:x="44320" fg:w="9"/><text x="64.2278%" y="1039.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (10 samples, 0.01%)</title><rect x="63.9908%" y="1429" width="0.0144%" height="15" fill="rgb(234,26,45)" fg:x="44329" fg:w="10"/><text x="64.2408%" y="1439.50"></text></g><g><title>__io_vtables (18 samples, 0.03%)</title><rect x="63.9908%" y="1445" width="0.0260%" height="15" fill="rgb(249,11,32)" fg:x="44329" fg:w="18"/><text x="64.2408%" y="1455.50"></text></g><g><title>__memcmp_evex_movbe (19 samples, 0.03%)</title><rect x="64.0211%" y="1445" width="0.0274%" height="15" fill="rgb(249,162,33)" fg:x="44350" fg:w="19"/><text x="64.2711%" y="1455.50"></text></g><g><title>__memmove_avx512_unaligned_erms (27 samples, 0.04%)</title><rect x="64.0486%" y="1445" width="0.0390%" height="15" fill="rgb(232,4,32)" fg:x="44369" fg:w="27"/><text x="64.2986%" y="1455.50"></text></g><g><title>_int_free (44 samples, 0.06%)</title><rect x="64.0933%" y="1445" width="0.0635%" height="15" fill="rgb(212,5,45)" fg:x="44400" fg:w="44"/><text x="64.3433%" y="1455.50"></text></g><g><title>_int_malloc (133 samples, 0.19%)</title><rect x="64.1612%" y="1445" width="0.1920%" height="15" fill="rgb(227,95,13)" fg:x="44447" fg:w="133"/><text x="64.4112%" y="1455.50"></text></g><g><title>cfree@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="64.3560%" y="1445" width="0.0173%" height="15" fill="rgb(223,205,10)" fg:x="44582" fg:w="12"/><text x="64.6060%" y="1455.50"></text></g><g><title>_mm_crc32_u64 (35 samples, 0.05%)</title><rect x="64.4239%" y="1429" width="0.0505%" height="15" fill="rgb(222,178,8)" fg:x="44629" fg:w="35"/><text x="64.6739%" y="1439.50"></text></g><g><title>crc32c::ExtendSse42 (71 samples, 0.10%)</title><rect x="64.3748%" y="1445" width="0.1025%" height="15" fill="rgb(216,13,22)" fg:x="44595" fg:w="71"/><text x="64.6248%" y="1455.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (10 samples, 0.01%)</title><rect x="64.4917%" y="1413" width="0.0144%" height="15" fill="rgb(240,167,12)" fg:x="44676" fg:w="10"/><text x="64.7417%" y="1423.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (13 samples, 0.02%)</title><rect x="64.5091%" y="1413" width="0.0188%" height="15" fill="rgb(235,68,35)" fg:x="44688" fg:w="13"/><text x="64.7591%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (32 samples, 0.05%)</title><rect x="64.4831%" y="1445" width="0.0462%" height="15" fill="rgb(253,40,27)" fg:x="44670" fg:w="32"/><text x="64.7331%" y="1455.50"></text></g><g><title>leveldb::Slice::compare (28 samples, 0.04%)</title><rect x="64.4888%" y="1429" width="0.0404%" height="15" fill="rgb(214,19,28)" fg:x="44674" fg:w="28"/><text x="64.7388%" y="1439.50"></text></g><g><title>leveldb::Block::Iter::Seek (9 samples, 0.01%)</title><rect x="64.5408%" y="1445" width="0.0130%" height="15" fill="rgb(210,167,45)" fg:x="44710" fg:w="9"/><text x="64.7908%" y="1455.50"></text></g><g><title>leveldb::Block::Iter::Seek (7 samples, 0.01%)</title><rect x="64.5437%" y="1429" width="0.0101%" height="15" fill="rgb(232,97,40)" fg:x="44712" fg:w="7"/><text x="64.7937%" y="1439.50"></text></g><g><title>leveldb::Block::Iter::status (7 samples, 0.01%)</title><rect x="64.5567%" y="1445" width="0.0101%" height="15" fill="rgb(250,35,23)" fg:x="44721" fg:w="7"/><text x="64.8067%" y="1455.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.01%)</title><rect x="64.5812%" y="1445" width="0.0115%" height="15" fill="rgb(248,47,53)" fg:x="44738" fg:w="8"/><text x="64.8312%" y="1455.50"></text></g><g><title>leveldb::ReadBlock (7 samples, 0.01%)</title><rect x="64.5971%" y="1445" width="0.0101%" height="15" fill="rgb(226,58,50)" fg:x="44749" fg:w="7"/><text x="64.8471%" y="1455.50"></text></g><g><title>leveldb::SaveValue (7 samples, 0.01%)</title><rect x="64.6072%" y="1445" width="0.0101%" height="15" fill="rgb(217,105,26)" fg:x="44756" fg:w="7"/><text x="64.8572%" y="1455.50"></text></g><g><title>leveldb::Table::InternalGet (11 samples, 0.02%)</title><rect x="64.6231%" y="1445" width="0.0159%" height="15" fill="rgb(208,64,1)" fg:x="44767" fg:w="11"/><text x="64.8731%" y="1455.50"></text></g><g><title>malloc (31 samples, 0.04%)</title><rect x="64.6433%" y="1445" width="0.0447%" height="15" fill="rgb(214,80,1)" fg:x="44781" fg:w="31"/><text x="64.8933%" y="1455.50"></text></g><g><title>malloc_consolidate (16 samples, 0.02%)</title><rect x="64.6909%" y="1445" width="0.0231%" height="15" fill="rgb(206,175,26)" fg:x="44814" fg:w="16"/><text x="64.9409%" y="1455.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (38 samples, 0.05%)</title><rect x="64.7516%" y="981" width="0.0549%" height="15" fill="rgb(235,156,37)" fg:x="44856" fg:w="38"/><text x="65.0016%" y="991.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (38 samples, 0.05%)</title><rect x="64.7516%" y="965" width="0.0549%" height="15" fill="rgb(213,100,9)" fg:x="44856" fg:w="38"/><text x="65.0016%" y="975.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (38 samples, 0.05%)</title><rect x="64.7516%" y="949" width="0.0549%" height="15" fill="rgb(241,15,13)" fg:x="44856" fg:w="38"/><text x="65.0016%" y="959.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (37 samples, 0.05%)</title><rect x="64.7530%" y="933" width="0.0534%" height="15" fill="rgb(205,97,43)" fg:x="44857" fg:w="37"/><text x="65.0030%" y="943.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (37 samples, 0.05%)</title><rect x="64.7530%" y="917" width="0.0534%" height="15" fill="rgb(216,106,32)" fg:x="44857" fg:w="37"/><text x="65.0030%" y="927.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (37 samples, 0.05%)</title><rect x="64.7530%" y="901" width="0.0534%" height="15" fill="rgb(226,200,8)" fg:x="44857" fg:w="37"/><text x="65.0030%" y="911.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (37 samples, 0.05%)</title><rect x="64.7530%" y="885" width="0.0534%" height="15" fill="rgb(244,54,29)" fg:x="44857" fg:w="37"/><text x="65.0030%" y="895.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (37 samples, 0.05%)</title><rect x="64.7530%" y="869" width="0.0534%" height="15" fill="rgb(252,169,12)" fg:x="44857" fg:w="37"/><text x="65.0030%" y="879.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (9 samples, 0.01%)</title><rect x="64.7934%" y="853" width="0.0130%" height="15" fill="rgb(231,199,11)" fg:x="44885" fg:w="9"/><text x="65.0434%" y="863.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (52 samples, 0.08%)</title><rect x="64.7516%" y="1077" width="0.0751%" height="15" fill="rgb(233,191,18)" fg:x="44856" fg:w="52"/><text x="65.0016%" y="1087.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (52 samples, 0.08%)</title><rect x="64.7516%" y="1061" width="0.0751%" height="15" fill="rgb(215,83,47)" fg:x="44856" fg:w="52"/><text x="65.0016%" y="1071.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (52 samples, 0.08%)</title><rect x="64.7516%" y="1045" width="0.0751%" height="15" fill="rgb(251,67,19)" fg:x="44856" fg:w="52"/><text x="65.0016%" y="1055.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (52 samples, 0.08%)</title><rect x="64.7516%" y="1029" width="0.0751%" height="15" fill="rgb(240,7,20)" fg:x="44856" fg:w="52"/><text x="65.0016%" y="1039.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (52 samples, 0.08%)</title><rect x="64.7516%" y="1013" width="0.0751%" height="15" fill="rgb(210,150,26)" fg:x="44856" fg:w="52"/><text x="65.0016%" y="1023.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (52 samples, 0.08%)</title><rect x="64.7516%" y="997" width="0.0751%" height="15" fill="rgb(228,75,42)" fg:x="44856" fg:w="52"/><text x="65.0016%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (14 samples, 0.02%)</title><rect x="64.8064%" y="981" width="0.0202%" height="15" fill="rgb(237,134,48)" fg:x="44894" fg:w="14"/><text x="65.0564%" y="991.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (14 samples, 0.02%)</title><rect x="64.8064%" y="965" width="0.0202%" height="15" fill="rgb(205,80,50)" fg:x="44894" fg:w="14"/><text x="65.0564%" y="975.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (14 samples, 0.02%)</title><rect x="64.8064%" y="949" width="0.0202%" height="15" fill="rgb(217,74,48)" fg:x="44894" fg:w="14"/><text x="65.0564%" y="959.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (77 samples, 0.11%)</title><rect x="64.7314%" y="1429" width="0.1112%" height="15" fill="rgb(205,82,50)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1439.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1413" width="0.1112%" height="15" fill="rgb(228,1,33)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1423.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1397" width="0.1112%" height="15" fill="rgb(214,50,23)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1407.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1381" width="0.1112%" height="15" fill="rgb(210,62,9)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1391.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1365" width="0.1112%" height="15" fill="rgb(210,104,37)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1375.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1349" width="0.1112%" height="15" fill="rgb(232,104,43)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1359.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1333" width="0.1112%" height="15" fill="rgb(244,52,6)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1343.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1317" width="0.1112%" height="15" fill="rgb(211,174,52)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1327.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1301" width="0.1112%" height="15" fill="rgb(229,48,4)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1311.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1285" width="0.1112%" height="15" fill="rgb(205,155,16)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1295.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (77 samples, 0.11%)</title><rect x="64.7314%" y="1269" width="0.1112%" height="15" fill="rgb(211,141,53)" fg:x="44842" fg:w="77"/><text x="64.9814%" y="1279.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1253" width="0.1083%" height="15" fill="rgb(240,148,11)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1263.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1237" width="0.1083%" height="15" fill="rgb(214,45,23)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1247.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1221" width="0.1083%" height="15" fill="rgb(248,74,26)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1231.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1205" width="0.1083%" height="15" fill="rgb(218,121,16)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1215.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1189" width="0.1083%" height="15" fill="rgb(218,10,47)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1199.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1173" width="0.1083%" height="15" fill="rgb(227,99,14)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1183.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1157" width="0.1083%" height="15" fill="rgb(229,83,46)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1167.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1141" width="0.1083%" height="15" fill="rgb(228,25,1)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1151.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1125" width="0.1083%" height="15" fill="rgb(252,190,15)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1135.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (75 samples, 0.11%)</title><rect x="64.7342%" y="1109" width="0.1083%" height="15" fill="rgb(213,103,51)" fg:x="44844" fg:w="75"/><text x="64.9842%" y="1119.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (69 samples, 0.10%)</title><rect x="64.7429%" y="1093" width="0.0996%" height="15" fill="rgb(220,38,44)" fg:x="44850" fg:w="69"/><text x="64.9929%" y="1103.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (7 samples, 0.01%)</title><rect x="64.8324%" y="1077" width="0.0101%" height="15" fill="rgb(210,45,26)" fg:x="44912" fg:w="7"/><text x="65.0824%" y="1087.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (7 samples, 0.01%)</title><rect x="64.8324%" y="1061" width="0.0101%" height="15" fill="rgb(205,95,48)" fg:x="44912" fg:w="7"/><text x="65.0824%" y="1071.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (79 samples, 0.11%)</title><rect x="64.7314%" y="1445" width="0.1140%" height="15" fill="rgb(225,179,37)" fg:x="44842" fg:w="79"/><text x="64.9814%" y="1455.50"></text></g><g><title>operator delete (8 samples, 0.01%)</title><rect x="64.8454%" y="1445" width="0.0115%" height="15" fill="rgb(230,209,3)" fg:x="44921" fg:w="8"/><text x="65.0954%" y="1455.50"></text></g><g><title>operator new (14 samples, 0.02%)</title><rect x="64.8569%" y="1445" width="0.0202%" height="15" fill="rgb(248,12,46)" fg:x="44929" fg:w="14"/><text x="65.1069%" y="1455.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (8 samples, 0.01%)</title><rect x="64.8786%" y="1445" width="0.0115%" height="15" fill="rgb(234,18,0)" fg:x="44944" fg:w="8"/><text x="65.1286%" y="1455.50"></text></g><g><title>QuadRound (13 samples, 0.02%)</title><rect x="64.8916%" y="1429" width="0.0188%" height="15" fill="rgb(238,197,14)" fg:x="44953" fg:w="13"/><text x="65.1416%" y="1439.50"></text></g><g><title>ShiftMessageB (13 samples, 0.02%)</title><rect x="64.9104%" y="1429" width="0.0188%" height="15" fill="rgb(251,162,48)" fg:x="44966" fg:w="13"/><text x="65.1604%" y="1439.50"></text></g><g><title>ShiftMessageC (8 samples, 0.01%)</title><rect x="64.9176%" y="1413" width="0.0115%" height="15" fill="rgb(237,73,42)" fg:x="44971" fg:w="8"/><text x="65.1676%" y="1423.50"></text></g><g><title>sha256_x86_shani::Transform (30 samples, 0.04%)</title><rect x="64.8901%" y="1445" width="0.0433%" height="15" fill="rgb(211,108,8)" fg:x="44952" fg:w="30"/><text x="65.1401%" y="1455.50"></text></g><g><title>start_thread (7 samples, 0.01%)</title><rect x="64.9335%" y="1445" width="0.0101%" height="15" fill="rgb(213,45,22)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1455.50"></text></g><g><title>execute_native_thread_routine (7 samples, 0.01%)</title><rect x="64.9335%" y="1429" width="0.0101%" height="15" fill="rgb(252,154,5)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1439.50"></text></g><g><title>_M_run (7 samples, 0.01%)</title><rect x="64.9335%" y="1413" width="0.0101%" height="15" fill="rgb(221,79,52)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1423.50"></text></g><g><title>operator (7 samples, 0.01%)</title><rect x="64.9335%" y="1397" width="0.0101%" height="15" fill="rgb(229,220,36)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1407.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (7 samples, 0.01%)</title><rect x="64.9335%" y="1381" width="0.0101%" height="15" fill="rgb(211,17,16)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1391.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (7 samples, 0.01%)</title><rect x="64.9335%" y="1365" width="0.0101%" height="15" fill="rgb(222,55,31)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1375.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (7 samples, 0.01%)</title><rect x="64.9335%" y="1349" width="0.0101%" height="15" fill="rgb(221,221,31)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1359.50"></text></g><g><title>util::TraceThread (7 samples, 0.01%)</title><rect x="64.9335%" y="1333" width="0.0101%" height="15" fill="rgb(227,168,26)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1343.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (7 samples, 0.01%)</title><rect x="64.9335%" y="1317" width="0.0101%" height="15" fill="rgb(224,139,9)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1327.50"></text></g><g><title>CConnman::ThreadMessageHandler (7 samples, 0.01%)</title><rect x="64.9335%" y="1301" width="0.0101%" height="15" fill="rgb(254,172,0)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1311.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (7 samples, 0.01%)</title><rect x="64.9335%" y="1285" width="0.0101%" height="15" fill="rgb(235,203,1)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1295.50"></text></g><g><title>Chainstate::ActivateBestChain (7 samples, 0.01%)</title><rect x="64.9335%" y="1269" width="0.0101%" height="15" fill="rgb(216,205,24)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1279.50"></text></g><g><title>Chainstate::ActivateBestChainStep (7 samples, 0.01%)</title><rect x="64.9335%" y="1253" width="0.0101%" height="15" fill="rgb(233,24,6)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1263.50"></text></g><g><title>Chainstate::ConnectTip (7 samples, 0.01%)</title><rect x="64.9335%" y="1237" width="0.0101%" height="15" fill="rgb(244,110,9)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1247.50"></text></g><g><title>Chainstate::ConnectBlock (7 samples, 0.01%)</title><rect x="64.9335%" y="1221" width="0.0101%" height="15" fill="rgb(239,222,42)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1231.50"></text></g><g><title>Consensus::CheckTxInputs (7 samples, 0.01%)</title><rect x="64.9335%" y="1205" width="0.0101%" height="15" fill="rgb(218,145,13)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1215.50"></text></g><g><title>CCoinsViewCache::HaveInputs (7 samples, 0.01%)</title><rect x="64.9335%" y="1189" width="0.0101%" height="15" fill="rgb(207,69,11)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1199.50"></text></g><g><title>CCoinsViewCache::HaveCoin (7 samples, 0.01%)</title><rect x="64.9335%" y="1173" width="0.0101%" height="15" fill="rgb(220,223,22)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1183.50"></text></g><g><title>CCoinsViewCache::FetchCoin (7 samples, 0.01%)</title><rect x="64.9335%" y="1157" width="0.0101%" height="15" fill="rgb(245,102,5)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1167.50"></text></g><g><title>CCoinsViewCache::GetCoin (7 samples, 0.01%)</title><rect x="64.9335%" y="1141" width="0.0101%" height="15" fill="rgb(211,148,2)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (7 samples, 0.01%)</title><rect x="64.9335%" y="1125" width="0.0101%" height="15" fill="rgb(241,13,44)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1135.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (7 samples, 0.01%)</title><rect x="64.9335%" y="1109" width="0.0101%" height="15" fill="rgb(219,137,21)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1119.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (7 samples, 0.01%)</title><rect x="64.9335%" y="1093" width="0.0101%" height="15" fill="rgb(242,206,5)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1103.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (7 samples, 0.01%)</title><rect x="64.9335%" y="1077" width="0.0101%" height="15" fill="rgb(217,114,22)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1087.50"></text></g><g><title>CCoinsViewBacked::GetCoin (7 samples, 0.01%)</title><rect x="64.9335%" y="1061" width="0.0101%" height="15" fill="rgb(253,206,42)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1071.50"></text></g><g><title>CCoinsViewDB::GetCoin (7 samples, 0.01%)</title><rect x="64.9335%" y="1045" width="0.0101%" height="15" fill="rgb(236,102,18)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1055.50"></text></g><g><title>CCoinsViewDB::GetCoin (7 samples, 0.01%)</title><rect x="64.9335%" y="1029" width="0.0101%" height="15" fill="rgb(208,59,49)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1039.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (7 samples, 0.01%)</title><rect x="64.9335%" y="1013" width="0.0101%" height="15" fill="rgb(215,194,28)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1023.50"></text></g><g><title>leveldb::DBImpl::Get (7 samples, 0.01%)</title><rect x="64.9335%" y="997" width="0.0101%" height="15" fill="rgb(243,207,11)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="1007.50"></text></g><g><title>leveldb::Version::Get (7 samples, 0.01%)</title><rect x="64.9335%" y="981" width="0.0101%" height="15" fill="rgb(254,179,35)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="991.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (7 samples, 0.01%)</title><rect x="64.9335%" y="965" width="0.0101%" height="15" fill="rgb(235,97,3)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="975.50"></text></g><g><title>leveldb::Version::Get (7 samples, 0.01%)</title><rect x="64.9335%" y="949" width="0.0101%" height="15" fill="rgb(215,155,33)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="959.50"></text></g><g><title>leveldb::TableCache::Get (7 samples, 0.01%)</title><rect x="64.9335%" y="933" width="0.0101%" height="15" fill="rgb(223,128,12)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="943.50"></text></g><g><title>leveldb::Table::InternalGet (7 samples, 0.01%)</title><rect x="64.9335%" y="917" width="0.0101%" height="15" fill="rgb(208,157,18)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="927.50"></text></g><g><title>leveldb::Table::BlockReader (7 samples, 0.01%)</title><rect x="64.9335%" y="901" width="0.0101%" height="15" fill="rgb(249,70,54)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="911.50"></text></g><g><title>leveldb::ReadBlock (7 samples, 0.01%)</title><rect x="64.9335%" y="885" width="0.0101%" height="15" fill="rgb(244,118,24)" fg:x="44982" fg:w="7"/><text x="65.1835%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.02%)</title><rect x="64.9450%" y="1445" width="0.0217%" height="15" fill="rgb(211,54,0)" fg:x="44990" fg:w="15"/><text x="65.1950%" y="1455.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (12 samples, 0.02%)</title><rect x="64.9811%" y="1445" width="0.0173%" height="15" fill="rgb(245,137,45)" fg:x="45015" fg:w="12"/><text x="65.2311%" y="1455.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (10 samples, 0.01%)</title><rect x="64.9840%" y="1429" width="0.0144%" height="15" fill="rgb(232,154,31)" fg:x="45017" fg:w="10"/><text x="65.2340%" y="1439.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (10 samples, 0.01%)</title><rect x="64.9840%" y="1413" width="0.0144%" height="15" fill="rgb(253,6,39)" fg:x="45017" fg:w="10"/><text x="65.2340%" y="1423.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (10 samples, 0.01%)</title><rect x="65.0027%" y="1445" width="0.0144%" height="15" fill="rgb(234,183,24)" fg:x="45030" fg:w="10"/><text x="65.2527%" y="1455.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (15 samples, 0.02%)</title><rect x="65.0576%" y="1429" width="0.0217%" height="15" fill="rgb(252,84,40)" fg:x="45068" fg:w="15"/><text x="65.3076%" y="1439.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (24 samples, 0.03%)</title><rect x="65.0518%" y="1445" width="0.0346%" height="15" fill="rgb(224,65,2)" fg:x="45064" fg:w="24"/><text x="65.3018%" y="1455.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (33 samples, 0.05%)</title><rect x="65.0894%" y="1445" width="0.0476%" height="15" fill="rgb(229,38,24)" fg:x="45090" fg:w="33"/><text x="65.3394%" y="1455.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (46 samples, 0.07%)</title><rect x="65.1485%" y="1445" width="0.0664%" height="15" fill="rgb(218,131,50)" fg:x="45131" fg:w="46"/><text x="65.3985%" y="1455.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (16 samples, 0.02%)</title><rect x="65.2193%" y="1445" width="0.0231%" height="15" fill="rgb(233,106,18)" fg:x="45180" fg:w="16"/><text x="65.4693%" y="1455.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (23 samples, 0.03%)</title><rect x="65.2698%" y="1285" width="0.0332%" height="15" fill="rgb(220,216,11)" fg:x="45215" fg:w="23"/><text x="65.5198%" y="1295.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (23 samples, 0.03%)</title><rect x="65.2698%" y="1269" width="0.0332%" height="15" fill="rgb(251,100,45)" fg:x="45215" fg:w="23"/><text x="65.5198%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (23 samples, 0.03%)</title><rect x="65.2698%" y="1253" width="0.0332%" height="15" fill="rgb(235,143,32)" fg:x="45215" fg:w="23"/><text x="65.5198%" y="1263.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.03%)</title><rect x="65.2698%" y="1237" width="0.0332%" height="15" fill="rgb(248,124,34)" fg:x="45215" fg:w="23"/><text x="65.5198%" y="1247.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (23 samples, 0.03%)</title><rect x="65.2698%" y="1221" width="0.0332%" height="15" fill="rgb(225,221,4)" fg:x="45215" fg:w="23"/><text x="65.5198%" y="1231.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (11 samples, 0.02%)</title><rect x="65.2871%" y="1205" width="0.0159%" height="15" fill="rgb(242,27,43)" fg:x="45227" fg:w="11"/><text x="65.5371%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (11 samples, 0.02%)</title><rect x="65.2871%" y="1189" width="0.0159%" height="15" fill="rgb(227,54,8)" fg:x="45227" fg:w="11"/><text x="65.5371%" y="1199.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="65.2871%" y="1173" width="0.0159%" height="15" fill="rgb(253,139,49)" fg:x="45227" fg:w="11"/><text x="65.5371%" y="1183.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="65.2871%" y="1157" width="0.0159%" height="15" fill="rgb(231,26,43)" fg:x="45227" fg:w="11"/><text x="65.5371%" y="1167.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="65.2871%" y="1141" width="0.0159%" height="15" fill="rgb(207,121,39)" fg:x="45227" fg:w="11"/><text x="65.5371%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (11 samples, 0.02%)</title><rect x="65.2871%" y="1125" width="0.0159%" height="15" fill="rgb(223,101,35)" fg:x="45227" fg:w="11"/><text x="65.5371%" y="1135.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (11 samples, 0.02%)</title><rect x="65.2871%" y="1109" width="0.0159%" height="15" fill="rgb(232,87,23)" fg:x="45227" fg:w="11"/><text x="65.5371%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (8 samples, 0.01%)</title><rect x="65.2915%" y="1093" width="0.0115%" height="15" fill="rgb(225,180,29)" fg:x="45230" fg:w="8"/><text x="65.5415%" y="1103.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="65.2915%" y="1077" width="0.0115%" height="15" fill="rgb(225,25,17)" fg:x="45230" fg:w="8"/><text x="65.5415%" y="1087.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="65.2915%" y="1061" width="0.0115%" height="15" fill="rgb(223,8,52)" fg:x="45230" fg:w="8"/><text x="65.5415%" y="1071.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="65.2915%" y="1045" width="0.0115%" height="15" fill="rgb(246,42,21)" fg:x="45230" fg:w="8"/><text x="65.5415%" y="1055.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.01%)</title><rect x="65.2915%" y="1029" width="0.0115%" height="15" fill="rgb(205,64,43)" fg:x="45230" fg:w="8"/><text x="65.5415%" y="1039.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.01%)</title><rect x="65.2915%" y="1013" width="0.0115%" height="15" fill="rgb(221,160,13)" fg:x="45230" fg:w="8"/><text x="65.5415%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (8 samples, 0.01%)</title><rect x="65.2915%" y="997" width="0.0115%" height="15" fill="rgb(239,58,35)" fg:x="45230" fg:w="8"/><text x="65.5415%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (9 samples, 0.01%)</title><rect x="65.3348%" y="981" width="0.0130%" height="15" fill="rgb(251,26,40)" fg:x="45260" fg:w="9"/><text x="65.5848%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (9 samples, 0.01%)</title><rect x="65.3348%" y="965" width="0.0130%" height="15" fill="rgb(247,0,4)" fg:x="45260" fg:w="9"/><text x="65.5848%" y="975.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (8 samples, 0.01%)</title><rect x="65.3362%" y="949" width="0.0115%" height="15" fill="rgb(218,130,10)" fg:x="45261" fg:w="8"/><text x="65.5862%" y="959.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (40 samples, 0.06%)</title><rect x="65.3030%" y="1285" width="0.0577%" height="15" fill="rgb(239,32,7)" fg:x="45238" fg:w="40"/><text x="65.5530%" y="1295.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (40 samples, 0.06%)</title><rect x="65.3030%" y="1269" width="0.0577%" height="15" fill="rgb(210,192,24)" fg:x="45238" fg:w="40"/><text x="65.5530%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (40 samples, 0.06%)</title><rect x="65.3030%" y="1253" width="0.0577%" height="15" fill="rgb(226,212,17)" fg:x="45238" fg:w="40"/><text x="65.5530%" y="1263.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="65.3030%" y="1237" width="0.0577%" height="15" fill="rgb(219,201,28)" fg:x="45238" fg:w="40"/><text x="65.5530%" y="1247.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (40 samples, 0.06%)</title><rect x="65.3030%" y="1221" width="0.0577%" height="15" fill="rgb(235,207,41)" fg:x="45238" fg:w="40"/><text x="65.5530%" y="1231.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (34 samples, 0.05%)</title><rect x="65.3117%" y="1205" width="0.0491%" height="15" fill="rgb(241,95,54)" fg:x="45244" fg:w="34"/><text x="65.5617%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (34 samples, 0.05%)</title><rect x="65.3117%" y="1189" width="0.0491%" height="15" fill="rgb(248,12,23)" fg:x="45244" fg:w="34"/><text x="65.5617%" y="1199.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="65.3117%" y="1173" width="0.0491%" height="15" fill="rgb(228,173,4)" fg:x="45244" fg:w="34"/><text x="65.5617%" y="1183.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="65.3117%" y="1157" width="0.0491%" height="15" fill="rgb(254,99,5)" fg:x="45244" fg:w="34"/><text x="65.5617%" y="1167.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (34 samples, 0.05%)</title><rect x="65.3117%" y="1141" width="0.0491%" height="15" fill="rgb(212,184,17)" fg:x="45244" fg:w="34"/><text x="65.5617%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (34 samples, 0.05%)</title><rect x="65.3117%" y="1125" width="0.0491%" height="15" fill="rgb(252,174,1)" fg:x="45244" fg:w="34"/><text x="65.5617%" y="1135.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (34 samples, 0.05%)</title><rect x="65.3117%" y="1109" width="0.0491%" height="15" fill="rgb(241,118,51)" fg:x="45244" fg:w="34"/><text x="65.5617%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (27 samples, 0.04%)</title><rect x="65.3218%" y="1093" width="0.0390%" height="15" fill="rgb(227,94,47)" fg:x="45251" fg:w="27"/><text x="65.5718%" y="1103.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.04%)</title><rect x="65.3218%" y="1077" width="0.0390%" height="15" fill="rgb(229,104,2)" fg:x="45251" fg:w="27"/><text x="65.5718%" y="1087.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.04%)</title><rect x="65.3218%" y="1061" width="0.0390%" height="15" fill="rgb(219,28,31)" fg:x="45251" fg:w="27"/><text x="65.5718%" y="1071.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (27 samples, 0.04%)</title><rect x="65.3218%" y="1045" width="0.0390%" height="15" fill="rgb(233,109,36)" fg:x="45251" fg:w="27"/><text x="65.5718%" y="1055.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (27 samples, 0.04%)</title><rect x="65.3218%" y="1029" width="0.0390%" height="15" fill="rgb(246,88,11)" fg:x="45251" fg:w="27"/><text x="65.5718%" y="1039.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (27 samples, 0.04%)</title><rect x="65.3218%" y="1013" width="0.0390%" height="15" fill="rgb(209,212,17)" fg:x="45251" fg:w="27"/><text x="65.5718%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (27 samples, 0.04%)</title><rect x="65.3218%" y="997" width="0.0390%" height="15" fill="rgb(243,59,29)" fg:x="45251" fg:w="27"/><text x="65.5718%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (9 samples, 0.01%)</title><rect x="65.3477%" y="981" width="0.0130%" height="15" fill="rgb(244,205,48)" fg:x="45269" fg:w="9"/><text x="65.5977%" y="991.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (36 samples, 0.05%)</title><rect x="65.3607%" y="1285" width="0.0520%" height="15" fill="rgb(227,30,6)" fg:x="45278" fg:w="36"/><text x="65.6107%" y="1295.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (36 samples, 0.05%)</title><rect x="65.3607%" y="1269" width="0.0520%" height="15" fill="rgb(220,205,48)" fg:x="45278" fg:w="36"/><text x="65.6107%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (36 samples, 0.05%)</title><rect x="65.3607%" y="1253" width="0.0520%" height="15" fill="rgb(250,94,14)" fg:x="45278" fg:w="36"/><text x="65.6107%" y="1263.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (36 samples, 0.05%)</title><rect x="65.3607%" y="1237" width="0.0520%" height="15" fill="rgb(216,119,42)" fg:x="45278" fg:w="36"/><text x="65.6107%" y="1247.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (36 samples, 0.05%)</title><rect x="65.3607%" y="1221" width="0.0520%" height="15" fill="rgb(232,155,0)" fg:x="45278" fg:w="36"/><text x="65.6107%" y="1231.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="65.4026%" y="1205" width="0.0101%" height="15" fill="rgb(212,24,32)" fg:x="45307" fg:w="7"/><text x="65.6526%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (7 samples, 0.01%)</title><rect x="65.4026%" y="1189" width="0.0101%" height="15" fill="rgb(216,69,20)" fg:x="45307" fg:w="7"/><text x="65.6526%" y="1199.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (132 samples, 0.19%)</title><rect x="65.2424%" y="1445" width="0.1905%" height="15" fill="rgb(229,73,31)" fg:x="45196" fg:w="132"/><text x="65.4924%" y="1455.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (132 samples, 0.19%)</title><rect x="65.2424%" y="1429" width="0.1905%" height="15" fill="rgb(224,219,20)" fg:x="45196" fg:w="132"/><text x="65.4924%" y="1439.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (132 samples, 0.19%)</title><rect x="65.2424%" y="1413" width="0.1905%" height="15" fill="rgb(215,146,41)" fg:x="45196" fg:w="132"/><text x="65.4924%" y="1423.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (132 samples, 0.19%)</title><rect x="65.2424%" y="1397" width="0.1905%" height="15" fill="rgb(244,71,31)" fg:x="45196" fg:w="132"/><text x="65.4924%" y="1407.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (132 samples, 0.19%)</title><rect x="65.2424%" y="1381" width="0.1905%" height="15" fill="rgb(224,24,11)" fg:x="45196" fg:w="132"/><text x="65.4924%" y="1391.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (129 samples, 0.19%)</title><rect x="65.2467%" y="1365" width="0.1862%" height="15" fill="rgb(229,76,15)" fg:x="45199" fg:w="129"/><text x="65.4967%" y="1375.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (129 samples, 0.19%)</title><rect x="65.2467%" y="1349" width="0.1862%" height="15" fill="rgb(209,93,2)" fg:x="45199" fg:w="129"/><text x="65.4967%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (127 samples, 0.18%)</title><rect x="65.2496%" y="1333" width="0.1833%" height="15" fill="rgb(216,200,50)" fg:x="45201" fg:w="127"/><text x="65.4996%" y="1343.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (127 samples, 0.18%)</title><rect x="65.2496%" y="1317" width="0.1833%" height="15" fill="rgb(211,67,34)" fg:x="45201" fg:w="127"/><text x="65.4996%" y="1327.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (125 samples, 0.18%)</title><rect x="65.2525%" y="1301" width="0.1804%" height="15" fill="rgb(225,87,47)" fg:x="45203" fg:w="125"/><text x="65.5025%" y="1311.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (10 samples, 0.01%)</title><rect x="65.4372%" y="1429" width="0.0144%" height="15" fill="rgb(217,185,16)" fg:x="45331" fg:w="10"/><text x="65.6872%" y="1439.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (10 samples, 0.01%)</title><rect x="65.4372%" y="1413" width="0.0144%" height="15" fill="rgb(205,0,0)" fg:x="45331" fg:w="10"/><text x="65.6872%" y="1423.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="65.4372%" y="1397" width="0.0144%" height="15" fill="rgb(207,116,45)" fg:x="45331" fg:w="10"/><text x="65.6872%" y="1407.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="65.4372%" y="1381" width="0.0144%" height="15" fill="rgb(221,156,26)" fg:x="45331" fg:w="10"/><text x="65.6872%" y="1391.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="65.4372%" y="1365" width="0.0144%" height="15" fill="rgb(213,140,4)" fg:x="45331" fg:w="10"/><text x="65.6872%" y="1375.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (9 samples, 0.01%)</title><rect x="65.4387%" y="1349" width="0.0130%" height="15" fill="rgb(231,224,15)" fg:x="45332" fg:w="9"/><text x="65.6887%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (9 samples, 0.01%)</title><rect x="65.4387%" y="1333" width="0.0130%" height="15" fill="rgb(244,76,20)" fg:x="45332" fg:w="9"/><text x="65.6887%" y="1343.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="65.4387%" y="1317" width="0.0130%" height="15" fill="rgb(238,117,7)" fg:x="45332" fg:w="9"/><text x="65.6887%" y="1327.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="65.4387%" y="1301" width="0.0130%" height="15" fill="rgb(235,1,10)" fg:x="45332" fg:w="9"/><text x="65.6887%" y="1311.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (9 samples, 0.01%)</title><rect x="65.4387%" y="1285" width="0.0130%" height="15" fill="rgb(216,165,6)" fg:x="45332" fg:w="9"/><text x="65.6887%" y="1295.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (9 samples, 0.01%)</title><rect x="65.4387%" y="1269" width="0.0130%" height="15" fill="rgb(246,91,35)" fg:x="45332" fg:w="9"/><text x="65.6887%" y="1279.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (9 samples, 0.01%)</title><rect x="65.4387%" y="1253" width="0.0130%" height="15" fill="rgb(228,96,24)" fg:x="45332" fg:w="9"/><text x="65.6887%" y="1263.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (16 samples, 0.02%)</title><rect x="65.4372%" y="1445" width="0.0231%" height="15" fill="rgb(254,217,53)" fg:x="45331" fg:w="16"/><text x="65.6872%" y="1455.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (12 samples, 0.02%)</title><rect x="65.4603%" y="1445" width="0.0173%" height="15" fill="rgb(209,60,0)" fg:x="45347" fg:w="12"/><text x="65.7103%" y="1455.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (32 samples, 0.05%)</title><rect x="65.4777%" y="1445" width="0.0462%" height="15" fill="rgb(250,93,26)" fg:x="45359" fg:w="32"/><text x="65.7277%" y="1455.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (14 samples, 0.02%)</title><rect x="65.5527%" y="1173" width="0.0202%" height="15" fill="rgb(211,9,40)" fg:x="45411" fg:w="14"/><text x="65.8027%" y="1183.50"></text></g><g><title>_int_malloc (7 samples, 0.01%)</title><rect x="65.6177%" y="1125" width="0.0101%" height="15" fill="rgb(242,57,20)" fg:x="45456" fg:w="7"/><text x="65.8677%" y="1135.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (9 samples, 0.01%)</title><rect x="65.6177%" y="1141" width="0.0130%" height="15" fill="rgb(248,85,48)" fg:x="45456" fg:w="9"/><text x="65.8677%" y="1151.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (66 samples, 0.10%)</title><rect x="65.5397%" y="1253" width="0.0953%" height="15" fill="rgb(212,117,2)" fg:x="45402" fg:w="66"/><text x="65.7897%" y="1263.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (66 samples, 0.10%)</title><rect x="65.5397%" y="1237" width="0.0953%" height="15" fill="rgb(243,19,3)" fg:x="45402" fg:w="66"/><text x="65.7897%" y="1247.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (66 samples, 0.10%)</title><rect x="65.5397%" y="1221" width="0.0953%" height="15" fill="rgb(232,217,24)" fg:x="45402" fg:w="66"/><text x="65.7897%" y="1231.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (66 samples, 0.10%)</title><rect x="65.5397%" y="1205" width="0.0953%" height="15" fill="rgb(224,175,40)" fg:x="45402" fg:w="66"/><text x="65.7897%" y="1215.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (66 samples, 0.10%)</title><rect x="65.5397%" y="1189" width="0.0953%" height="15" fill="rgb(212,162,32)" fg:x="45402" fg:w="66"/><text x="65.7897%" y="1199.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (31 samples, 0.04%)</title><rect x="65.5903%" y="1173" width="0.0447%" height="15" fill="rgb(215,9,4)" fg:x="45437" fg:w="31"/><text x="65.8403%" y="1183.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (31 samples, 0.04%)</title><rect x="65.5903%" y="1157" width="0.0447%" height="15" fill="rgb(242,42,7)" fg:x="45437" fg:w="31"/><text x="65.8403%" y="1167.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (73 samples, 0.11%)</title><rect x="65.5340%" y="1301" width="0.1054%" height="15" fill="rgb(242,184,45)" fg:x="45398" fg:w="73"/><text x="65.7840%" y="1311.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (73 samples, 0.11%)</title><rect x="65.5340%" y="1285" width="0.1054%" height="15" fill="rgb(228,111,51)" fg:x="45398" fg:w="73"/><text x="65.7840%" y="1295.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (73 samples, 0.11%)</title><rect x="65.5340%" y="1269" width="0.1054%" height="15" fill="rgb(236,147,17)" fg:x="45398" fg:w="73"/><text x="65.7840%" y="1279.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.15%)</title><rect x="65.5340%" y="1365" width="0.1472%" height="15" fill="rgb(210,75,22)" fg:x="45398" fg:w="102"/><text x="65.7840%" y="1375.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.15%)</title><rect x="65.5340%" y="1349" width="0.1472%" height="15" fill="rgb(217,159,45)" fg:x="45398" fg:w="102"/><text x="65.7840%" y="1359.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.15%)</title><rect x="65.5340%" y="1333" width="0.1472%" height="15" fill="rgb(245,165,53)" fg:x="45398" fg:w="102"/><text x="65.7840%" y="1343.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (102 samples, 0.15%)</title><rect x="65.5340%" y="1317" width="0.1472%" height="15" fill="rgb(251,190,50)" fg:x="45398" fg:w="102"/><text x="65.7840%" y="1327.50"></text></g><g><title>malloc (27 samples, 0.04%)</title><rect x="65.6422%" y="1301" width="0.0390%" height="15" fill="rgb(208,203,29)" fg:x="45473" fg:w="27"/><text x="65.8922%" y="1311.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (103 samples, 0.15%)</title><rect x="65.5340%" y="1429" width="0.1487%" height="15" fill="rgb(207,209,35)" fg:x="45398" fg:w="103"/><text x="65.7840%" y="1439.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (103 samples, 0.15%)</title><rect x="65.5340%" y="1413" width="0.1487%" height="15" fill="rgb(230,144,49)" fg:x="45398" fg:w="103"/><text x="65.7840%" y="1423.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (103 samples, 0.15%)</title><rect x="65.5340%" y="1397" width="0.1487%" height="15" fill="rgb(229,31,6)" fg:x="45398" fg:w="103"/><text x="65.7840%" y="1407.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (103 samples, 0.15%)</title><rect x="65.5340%" y="1381" width="0.1487%" height="15" fill="rgb(251,129,24)" fg:x="45398" fg:w="103"/><text x="65.7840%" y="1391.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (111 samples, 0.16%)</title><rect x="65.5239%" y="1445" width="0.1602%" height="15" fill="rgb(235,105,15)" fg:x="45391" fg:w="111"/><text x="65.7739%" y="1455.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="65.7231%" y="1317" width="0.0130%" height="15" fill="rgb(216,52,43)" fg:x="45529" fg:w="9"/><text x="65.9731%" y="1327.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="65.7260%" y="1301" width="0.0101%" height="15" fill="rgb(238,144,41)" fg:x="45531" fg:w="7"/><text x="65.9760%" y="1311.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (7 samples, 0.01%)</title><rect x="65.7260%" y="1285" width="0.0101%" height="15" fill="rgb(243,63,9)" fg:x="45531" fg:w="7"/><text x="65.9760%" y="1295.50"></text></g><g><title>DataStream::read (7 samples, 0.01%)</title><rect x="65.7260%" y="1269" width="0.0101%" height="15" fill="rgb(246,208,1)" fg:x="45531" fg:w="7"/><text x="65.9760%" y="1279.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (40 samples, 0.06%)</title><rect x="65.6899%" y="1445" width="0.0577%" height="15" fill="rgb(233,182,18)" fg:x="45506" fg:w="40"/><text x="65.9399%" y="1455.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (17 samples, 0.02%)</title><rect x="65.7231%" y="1429" width="0.0245%" height="15" fill="rgb(242,224,8)" fg:x="45529" fg:w="17"/><text x="65.9731%" y="1439.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (17 samples, 0.02%)</title><rect x="65.7231%" y="1413" width="0.0245%" height="15" fill="rgb(243,54,37)" fg:x="45529" fg:w="17"/><text x="65.9731%" y="1423.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="65.7231%" y="1397" width="0.0245%" height="15" fill="rgb(233,192,12)" fg:x="45529" fg:w="17"/><text x="65.9731%" y="1407.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.02%)</title><rect x="65.7231%" y="1381" width="0.0245%" height="15" fill="rgb(251,192,53)" fg:x="45529" fg:w="17"/><text x="65.9731%" y="1391.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (17 samples, 0.02%)</title><rect x="65.7231%" y="1365" width="0.0245%" height="15" fill="rgb(246,141,26)" fg:x="45529" fg:w="17"/><text x="65.9731%" y="1375.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (17 samples, 0.02%)</title><rect x="65.7231%" y="1349" width="0.0245%" height="15" fill="rgb(239,195,19)" fg:x="45529" fg:w="17"/><text x="65.9731%" y="1359.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (17 samples, 0.02%)</title><rect x="65.7231%" y="1333" width="0.0245%" height="15" fill="rgb(241,16,39)" fg:x="45529" fg:w="17"/><text x="65.9731%" y="1343.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (8 samples, 0.01%)</title><rect x="65.7361%" y="1317" width="0.0115%" height="15" fill="rgb(223,13,53)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1327.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="65.7361%" y="1301" width="0.0115%" height="15" fill="rgb(214,227,0)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1311.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="65.7361%" y="1285" width="0.0115%" height="15" fill="rgb(228,103,26)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1295.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (8 samples, 0.01%)</title><rect x="65.7361%" y="1269" width="0.0115%" height="15" fill="rgb(254,177,53)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1279.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (8 samples, 0.01%)</title><rect x="65.7361%" y="1253" width="0.0115%" height="15" fill="rgb(208,201,34)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1263.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (8 samples, 0.01%)</title><rect x="65.7361%" y="1237" width="0.0115%" height="15" fill="rgb(212,39,5)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1247.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="65.7361%" y="1221" width="0.0115%" height="15" fill="rgb(246,117,3)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1231.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="65.7361%" y="1205" width="0.0115%" height="15" fill="rgb(244,118,39)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1215.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="65.7361%" y="1189" width="0.0115%" height="15" fill="rgb(241,64,10)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1199.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (8 samples, 0.01%)</title><rect x="65.7361%" y="1173" width="0.0115%" height="15" fill="rgb(229,39,44)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1183.50"></text></g><g><title>DataStream::read (8 samples, 0.01%)</title><rect x="65.7361%" y="1157" width="0.0115%" height="15" fill="rgb(230,226,3)" fg:x="45538" fg:w="8"/><text x="65.9861%" y="1167.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (28 samples, 0.04%)</title><rect x="65.7476%" y="1445" width="0.0404%" height="15" fill="rgb(222,13,42)" fg:x="45546" fg:w="28"/><text x="65.9976%" y="1455.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (7 samples, 0.01%)</title><rect x="65.7952%" y="1445" width="0.0101%" height="15" fill="rgb(247,180,54)" fg:x="45579" fg:w="7"/><text x="66.0452%" y="1455.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (68 samples, 0.10%)</title><rect x="65.8054%" y="1445" width="0.0982%" height="15" fill="rgb(205,96,16)" fg:x="45586" fg:w="68"/><text x="66.0554%" y="1455.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="65.8804%" y="1429" width="0.0231%" height="15" fill="rgb(205,100,21)" fg:x="45638" fg:w="16"/><text x="66.1304%" y="1439.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (11 samples, 0.02%)</title><rect x="65.8876%" y="1413" width="0.0159%" height="15" fill="rgb(248,51,4)" fg:x="45643" fg:w="11"/><text x="66.1376%" y="1423.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (37 samples, 0.05%)</title><rect x="65.9107%" y="1445" width="0.0534%" height="15" fill="rgb(217,197,30)" fg:x="45659" fg:w="37"/><text x="66.1607%" y="1455.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (59 samples, 0.09%)</title><rect x="65.9641%" y="1445" width="0.0852%" height="15" fill="rgb(240,179,40)" fg:x="45696" fg:w="59"/><text x="66.2141%" y="1455.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (11 samples, 0.02%)</title><rect x="66.0334%" y="1429" width="0.0159%" height="15" fill="rgb(212,185,35)" fg:x="45744" fg:w="11"/><text x="66.2834%" y="1439.50"></text></g><g><title>b-msghand (45,767 samples, 66.07%)</title><rect x="0.0115%" y="1461" width="66.0666%" height="15" fill="rgb(251,222,31)" fg:x="8" fg:w="45767"/><text x="0.2615%" y="1471.50">b-msghand</text></g><g><title>vtable for std::ios_base (12 samples, 0.02%)</title><rect x="66.0609%" y="1445" width="0.0173%" height="15" fill="rgb(208,140,36)" fg:x="45763" fg:w="12"/><text x="66.3109%" y="1455.50"></text></g><g><title>DataStream::resize (305 samples, 0.44%)</title><rect x="66.0840%" y="1397" width="0.4403%" height="15" fill="rgb(220,148,1)" fg:x="45779" fg:w="305"/><text x="66.3340%" y="1407.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::resize (305 samples, 0.44%)</title><rect x="66.0840%" y="1381" width="0.4403%" height="15" fill="rgb(254,4,28)" fg:x="45779" fg:w="305"/><text x="66.3340%" y="1391.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (305 samples, 0.44%)</title><rect x="66.0840%" y="1365" width="0.4403%" height="15" fill="rgb(222,185,44)" fg:x="45779" fg:w="305"/><text x="66.3340%" y="1375.50"></text></g><g><title>std::byte* std::__uninitialized_fill_n_a&lt;std::byte*, unsigned long, std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; (305 samples, 0.44%)</title><rect x="66.0840%" y="1349" width="0.4403%" height="15" fill="rgb(215,74,39)" fg:x="45779" fg:w="305"/><text x="66.3340%" y="1359.50"></text></g><g><title>decltype  (149 samples, 0.22%)</title><rect x="66.3091%" y="1333" width="0.2151%" height="15" fill="rgb(247,86,4)" fg:x="45935" fg:w="149"/><text x="66.5591%" y="1343.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (149 samples, 0.22%)</title><rect x="66.3091%" y="1317" width="0.2151%" height="15" fill="rgb(231,105,32)" fg:x="45935" fg:w="149"/><text x="66.5591%" y="1327.50"></text></g><g><title>decltype (149 samples, 0.22%)</title><rect x="66.3091%" y="1301" width="0.2151%" height="15" fill="rgb(222,65,35)" fg:x="45935" fg:w="149"/><text x="66.5591%" y="1311.50"></text></g><g><title>V2Transport::GetReceivedMessage (345 samples, 0.50%)</title><rect x="66.0840%" y="1413" width="0.4980%" height="15" fill="rgb(218,145,35)" fg:x="45779" fg:w="345"/><text x="66.3340%" y="1423.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (39 samples, 0.06%)</title><rect x="66.5257%" y="1397" width="0.0563%" height="15" fill="rgb(208,7,15)" fg:x="46085" fg:w="39"/><text x="66.7757%" y="1407.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (39 samples, 0.06%)</title><rect x="66.5257%" y="1381" width="0.0563%" height="15" fill="rgb(209,83,13)" fg:x="46085" fg:w="39"/><text x="66.7757%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (39 samples, 0.06%)</title><rect x="66.5257%" y="1365" width="0.0563%" height="15" fill="rgb(218,3,10)" fg:x="46085" fg:w="39"/><text x="66.7757%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (39 samples, 0.06%)</title><rect x="66.5257%" y="1349" width="0.0563%" height="15" fill="rgb(211,219,4)" fg:x="46085" fg:w="39"/><text x="66.7757%" y="1359.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (39 samples, 0.06%)</title><rect x="66.5257%" y="1333" width="0.0563%" height="15" fill="rgb(228,194,12)" fg:x="46085" fg:w="39"/><text x="66.7757%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (39 samples, 0.06%)</title><rect x="66.5257%" y="1317" width="0.0563%" height="15" fill="rgb(210,175,7)" fg:x="46085" fg:w="39"/><text x="66.7757%" y="1327.50"></text></g><g><title>ChaCha20Aligned::Crypt (22 samples, 0.03%)</title><rect x="69.2092%" y="1285" width="0.0318%" height="15" fill="rgb(243,132,6)" fg:x="47944" fg:w="22"/><text x="69.4592%" y="1295.50"></text></g><g><title>WriteLE32 (23 samples, 0.03%)</title><rect x="69.2092%" y="1301" width="0.0332%" height="15" fill="rgb(207,72,18)" fg:x="47944" fg:w="23"/><text x="69.4592%" y="1311.50"></text></g><g><title>[[igc]] (9 samples, 0.01%)</title><rect x="69.2496%" y="1205" width="0.0130%" height="15" fill="rgb(236,1,18)" fg:x="47972" fg:w="9"/><text x="69.4996%" y="1215.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="69.2424%" y="1301" width="0.0260%" height="15" fill="rgb(227,0,18)" fg:x="47967" fg:w="18"/><text x="69.4924%" y="1311.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="69.2439%" y="1285" width="0.0245%" height="15" fill="rgb(247,37,5)" fg:x="47968" fg:w="17"/><text x="69.4939%" y="1295.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="69.2453%" y="1269" width="0.0231%" height="15" fill="rgb(237,179,24)" fg:x="47969" fg:w="16"/><text x="69.4953%" y="1279.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="69.2468%" y="1253" width="0.0217%" height="15" fill="rgb(226,53,20)" fg:x="47970" fg:w="15"/><text x="69.4968%" y="1263.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="69.2468%" y="1237" width="0.0217%" height="15" fill="rgb(247,75,7)" fg:x="47970" fg:w="15"/><text x="69.4968%" y="1247.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="69.2496%" y="1221" width="0.0188%" height="15" fill="rgb(233,96,12)" fg:x="47972" fg:w="13"/><text x="69.4996%" y="1231.50"></text></g><g><title>ChaCha20::Crypt (2,729 samples, 3.94%)</title><rect x="66.5849%" y="1333" width="3.9394%" height="15" fill="rgb(224,125,0)" fg:x="46126" fg:w="2729"/><text x="66.8349%" y="1343.50">ChaC..</text></g><g><title>ChaCha20Aligned::Crypt (2,729 samples, 3.94%)</title><rect x="66.5849%" y="1317" width="3.9394%" height="15" fill="rgb(224,92,25)" fg:x="46126" fg:w="2729"/><text x="66.8349%" y="1327.50">ChaC..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (870 samples, 1.26%)</title><rect x="69.2684%" y="1301" width="1.2559%" height="15" fill="rgb(224,42,24)" fg:x="47985" fg:w="870"/><text x="69.5184%" y="1311.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (870 samples, 1.26%)</title><rect x="69.2684%" y="1285" width="1.2559%" height="15" fill="rgb(234,132,49)" fg:x="47985" fg:w="870"/><text x="69.5184%" y="1295.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="70.5127%" y="1269" width="0.0115%" height="15" fill="rgb(248,100,35)" fg:x="48847" fg:w="8"/><text x="70.7627%" y="1279.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="70.5127%" y="1253" width="0.0115%" height="15" fill="rgb(239,94,40)" fg:x="48847" fg:w="8"/><text x="70.7627%" y="1263.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="70.5127%" y="1237" width="0.0115%" height="15" fill="rgb(235,139,28)" fg:x="48847" fg:w="8"/><text x="70.7627%" y="1247.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="70.5127%" y="1221" width="0.0115%" height="15" fill="rgb(217,144,7)" fg:x="48847" fg:w="8"/><text x="70.7627%" y="1231.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="70.5142%" y="1205" width="0.0101%" height="15" fill="rgb(227,55,4)" fg:x="48848" fg:w="7"/><text x="70.7642%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="70.5142%" y="1189" width="0.0101%" height="15" fill="rgb(252,82,54)" fg:x="48848" fg:w="7"/><text x="70.7642%" y="1199.50"></text></g><g><title>BIP324Cipher::Decrypt (3,958 samples, 5.71%)</title><rect x="66.5849%" y="1381" width="5.7135%" height="15" fill="rgb(245,172,4)" fg:x="46126" fg:w="3958"/><text x="66.8349%" y="1391.50">BIP324C..</text></g><g><title>FSChaCha20Poly1305::Decrypt (3,958 samples, 5.71%)</title><rect x="66.5849%" y="1365" width="5.7135%" height="15" fill="rgb(207,26,27)" fg:x="46126" fg:w="3958"/><text x="66.8349%" y="1375.50">FSChaCh..</text></g><g><title>AEADChaCha20Poly1305::Decrypt (3,958 samples, 5.71%)</title><rect x="66.5849%" y="1349" width="5.7135%" height="15" fill="rgb(252,98,18)" fg:x="46126" fg:w="3958"/><text x="66.8349%" y="1359.50">AEADCha..</text></g><g><title>ComputeTag (1,228 samples, 1.77%)</title><rect x="70.5257%" y="1333" width="1.7727%" height="15" fill="rgb(244,8,26)" fg:x="48856" fg:w="1228"/><text x="70.7757%" y="1343.50">C..</text></g><g><title>Poly1305::Update (1,228 samples, 1.77%)</title><rect x="70.5257%" y="1317" width="1.7727%" height="15" fill="rgb(237,173,45)" fg:x="48856" fg:w="1228"/><text x="70.7757%" y="1327.50">P..</text></g><g><title>poly1305_donna::poly1305_update (1,228 samples, 1.77%)</title><rect x="70.5257%" y="1301" width="1.7727%" height="15" fill="rgb(208,213,49)" fg:x="48856" fg:w="1228"/><text x="70.7757%" y="1311.50">p..</text></g><g><title>poly1305_donna::poly1305_blocks (1,228 samples, 1.77%)</title><rect x="70.5257%" y="1285" width="1.7727%" height="15" fill="rgb(212,122,37)" fg:x="48856" fg:w="1228"/><text x="70.7757%" y="1295.50">p..</text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="72.2710%" y="1269" width="0.0274%" height="15" fill="rgb(213,80,17)" fg:x="50065" fg:w="19"/><text x="72.5210%" y="1279.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="72.2710%" y="1253" width="0.0274%" height="15" fill="rgb(206,210,43)" fg:x="50065" fg:w="19"/><text x="72.5210%" y="1263.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="72.2710%" y="1237" width="0.0274%" height="15" fill="rgb(229,214,3)" fg:x="50065" fg:w="19"/><text x="72.5210%" y="1247.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="72.2724%" y="1221" width="0.0260%" height="15" fill="rgb(235,213,29)" fg:x="50066" fg:w="18"/><text x="72.5224%" y="1231.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="72.2739%" y="1205" width="0.0245%" height="15" fill="rgb(248,135,26)" fg:x="50067" fg:w="17"/><text x="72.5239%" y="1215.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="72.2739%" y="1189" width="0.0245%" height="15" fill="rgb(242,188,12)" fg:x="50067" fg:w="17"/><text x="72.5239%" y="1199.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="72.2811%" y="1173" width="0.0173%" height="15" fill="rgb(245,38,12)" fg:x="50072" fg:w="12"/><text x="72.5311%" y="1183.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="72.2840%" y="1157" width="0.0144%" height="15" fill="rgb(218,42,13)" fg:x="50074" fg:w="10"/><text x="72.5340%" y="1167.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="72.2840%" y="1141" width="0.0144%" height="15" fill="rgb(238,132,49)" fg:x="50074" fg:w="10"/><text x="72.5340%" y="1151.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="72.2840%" y="1125" width="0.0144%" height="15" fill="rgb(209,196,19)" fg:x="50074" fg:w="10"/><text x="72.5340%" y="1135.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="72.2840%" y="1109" width="0.0144%" height="15" fill="rgb(244,131,22)" fg:x="50074" fg:w="10"/><text x="72.5340%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="72.2883%" y="1093" width="0.0101%" height="15" fill="rgb(223,18,34)" fg:x="50077" fg:w="7"/><text x="72.5383%" y="1103.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (4,001 samples, 5.78%)</title><rect x="66.5849%" y="1397" width="5.7756%" height="15" fill="rgb(252,124,54)" fg:x="46126" fg:w="4001"/><text x="66.8349%" y="1407.50">V2Trans..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (42 samples, 0.06%)</title><rect x="72.2999%" y="1381" width="0.0606%" height="15" fill="rgb(229,106,42)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1391.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (42 samples, 0.06%)</title><rect x="72.2999%" y="1365" width="0.0606%" height="15" fill="rgb(221,129,1)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1375.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (42 samples, 0.06%)</title><rect x="72.2999%" y="1349" width="0.0606%" height="15" fill="rgb(229,74,15)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1359.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (42 samples, 0.06%)</title><rect x="72.2999%" y="1333" width="0.0606%" height="15" fill="rgb(210,206,50)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1343.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (42 samples, 0.06%)</title><rect x="72.2999%" y="1317" width="0.0606%" height="15" fill="rgb(251,114,31)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1327.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (42 samples, 0.06%)</title><rect x="72.2999%" y="1301" width="0.0606%" height="15" fill="rgb(215,225,28)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1311.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (42 samples, 0.06%)</title><rect x="72.2999%" y="1285" width="0.0606%" height="15" fill="rgb(237,109,14)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1295.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (42 samples, 0.06%)</title><rect x="72.2999%" y="1269" width="0.0606%" height="15" fill="rgb(230,13,37)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1279.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (42 samples, 0.06%)</title><rect x="72.2999%" y="1253" width="0.0606%" height="15" fill="rgb(231,40,28)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1263.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (42 samples, 0.06%)</title><rect x="72.2999%" y="1237" width="0.0606%" height="15" fill="rgb(231,202,18)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1247.50"></text></g><g><title>__memset_avx512_unaligned_erms (42 samples, 0.06%)</title><rect x="72.2999%" y="1221" width="0.0606%" height="15" fill="rgb(225,33,18)" fg:x="50085" fg:w="42"/><text x="72.5499%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1397" width="0.1054%" height="15" fill="rgb(223,64,47)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1407.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1381" width="0.1054%" height="15" fill="rgb(234,114,13)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1391.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1365" width="0.1054%" height="15" fill="rgb(248,56,40)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1375.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1349" width="0.1054%" height="15" fill="rgb(221,194,21)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1359.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1333" width="0.1054%" height="15" fill="rgb(242,108,46)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1343.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1317" width="0.1054%" height="15" fill="rgb(220,106,10)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1327.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1301" width="0.1054%" height="15" fill="rgb(211,88,4)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1311.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1285" width="0.1054%" height="15" fill="rgb(214,95,34)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1295.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1269" width="0.1054%" height="15" fill="rgb(250,160,33)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1279.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (73 samples, 0.11%)</title><rect x="72.3605%" y="1253" width="0.1054%" height="15" fill="rgb(225,29,10)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (73 samples, 0.11%)</title><rect x="72.3605%" y="1237" width="0.1054%" height="15" fill="rgb(224,28,30)" fg:x="50127" fg:w="73"/><text x="72.6105%" y="1247.50"></text></g><g><title>V2Transport::ReceivedBytes (4,262 samples, 6.15%)</title><rect x="66.5820%" y="1413" width="6.1524%" height="15" fill="rgb(231,77,4)" fg:x="46124" fg:w="4262"/><text x="66.8320%" y="1423.50">V2Transp..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (186 samples, 0.27%)</title><rect x="72.4659%" y="1397" width="0.2685%" height="15" fill="rgb(209,63,21)" fg:x="50200" fg:w="186"/><text x="72.7159%" y="1407.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (184 samples, 0.27%)</title><rect x="72.4687%" y="1381" width="0.2656%" height="15" fill="rgb(226,22,11)" fg:x="50202" fg:w="184"/><text x="72.7187%" y="1391.50"></text></g><g><title>unsigned char* std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (184 samples, 0.27%)</title><rect x="72.4687%" y="1365" width="0.2656%" height="15" fill="rgb(216,82,30)" fg:x="50202" fg:w="184"/><text x="72.7187%" y="1375.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;unsigned char, void&gt;::value, unsigned char*&gt;::type std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (184 samples, 0.27%)</title><rect x="72.4687%" y="1349" width="0.2656%" height="15" fill="rgb(246,227,38)" fg:x="50202" fg:w="184"/><text x="72.7187%" y="1359.50"></text></g><g><title>__memmove_avx512_unaligned_erms (184 samples, 0.27%)</title><rect x="72.4687%" y="1333" width="0.2656%" height="15" fill="rgb(251,203,53)" fg:x="50202" fg:w="184"/><text x="72.7187%" y="1343.50"></text></g><g><title>CNode::ReceiveMsgBytes (4,611 samples, 6.66%)</title><rect x="66.0840%" y="1429" width="6.6562%" height="15" fill="rgb(254,101,1)" fg:x="45779" fg:w="4611"/><text x="66.3340%" y="1439.50">CNode::Re..</text></g><g><title>[[nf_conntrack]] (15 samples, 0.02%)</title><rect x="73.4691%" y="1205" width="0.0217%" height="15" fill="rgb(241,180,5)" fg:x="50895" fg:w="15"/><text x="73.7191%" y="1215.50"></text></g><g><title>[[nf_conntrack]] (15 samples, 0.02%)</title><rect x="73.4691%" y="1189" width="0.0217%" height="15" fill="rgb(218,168,4)" fg:x="50895" fg:w="15"/><text x="73.7191%" y="1199.50"></text></g><g><title>[[igc]] (25 samples, 0.04%)</title><rect x="73.5153%" y="1189" width="0.0361%" height="15" fill="rgb(224,223,32)" fg:x="50927" fg:w="25"/><text x="73.7653%" y="1199.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="73.5254%" y="1173" width="0.0260%" height="15" fill="rgb(236,106,22)" fg:x="50934" fg:w="18"/><text x="73.7754%" y="1183.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="73.5312%" y="1157" width="0.0202%" height="15" fill="rgb(206,121,5)" fg:x="50938" fg:w="14"/><text x="73.7812%" y="1167.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="73.5341%" y="1141" width="0.0173%" height="15" fill="rgb(233,87,28)" fg:x="50940" fg:w="12"/><text x="73.7841%" y="1151.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="73.5384%" y="1125" width="0.0130%" height="15" fill="rgb(236,137,17)" fg:x="50943" fg:w="9"/><text x="73.7884%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="73.5399%" y="1109" width="0.0115%" height="15" fill="rgb(209,183,38)" fg:x="50944" fg:w="8"/><text x="73.7899%" y="1119.50"></text></g><g><title>__libc_recv (587 samples, 0.85%)</title><rect x="72.7459%" y="1429" width="0.8474%" height="15" fill="rgb(206,162,44)" fg:x="50394" fg:w="587"/><text x="72.9959%" y="1439.50"></text></g><g><title>[unknown] (587 samples, 0.85%)</title><rect x="72.7459%" y="1413" width="0.8474%" height="15" fill="rgb(237,70,39)" fg:x="50394" fg:w="587"/><text x="72.9959%" y="1423.50"></text></g><g><title>[unknown] (585 samples, 0.84%)</title><rect x="72.7488%" y="1397" width="0.8445%" height="15" fill="rgb(212,176,5)" fg:x="50396" fg:w="585"/><text x="72.9988%" y="1407.50"></text></g><g><title>[unknown] (583 samples, 0.84%)</title><rect x="72.7517%" y="1381" width="0.8416%" height="15" fill="rgb(232,95,16)" fg:x="50398" fg:w="583"/><text x="73.0017%" y="1391.50"></text></g><g><title>[unknown] (579 samples, 0.84%)</title><rect x="72.7575%" y="1365" width="0.8358%" height="15" fill="rgb(219,115,35)" fg:x="50402" fg:w="579"/><text x="73.0075%" y="1375.50"></text></g><g><title>[unknown] (576 samples, 0.83%)</title><rect x="72.7618%" y="1349" width="0.8315%" height="15" fill="rgb(251,67,27)" fg:x="50405" fg:w="576"/><text x="73.0118%" y="1359.50"></text></g><g><title>[unknown] (571 samples, 0.82%)</title><rect x="72.7690%" y="1333" width="0.8243%" height="15" fill="rgb(222,95,40)" fg:x="50410" fg:w="571"/><text x="73.0190%" y="1343.50"></text></g><g><title>[unknown] (566 samples, 0.82%)</title><rect x="72.7762%" y="1317" width="0.8170%" height="15" fill="rgb(250,35,16)" fg:x="50415" fg:w="566"/><text x="73.0262%" y="1327.50"></text></g><g><title>[unknown] (560 samples, 0.81%)</title><rect x="72.7849%" y="1301" width="0.8084%" height="15" fill="rgb(224,86,44)" fg:x="50421" fg:w="560"/><text x="73.0349%" y="1311.50"></text></g><g><title>[unknown] (545 samples, 0.79%)</title><rect x="72.8065%" y="1285" width="0.7867%" height="15" fill="rgb(237,53,53)" fg:x="50436" fg:w="545"/><text x="73.0565%" y="1295.50"></text></g><g><title>[unknown] (513 samples, 0.74%)</title><rect x="72.8527%" y="1269" width="0.7405%" height="15" fill="rgb(208,171,33)" fg:x="50468" fg:w="513"/><text x="73.1027%" y="1279.50"></text></g><g><title>[unknown] (476 samples, 0.69%)</title><rect x="72.9061%" y="1253" width="0.6871%" height="15" fill="rgb(222,64,27)" fg:x="50505" fg:w="476"/><text x="73.1561%" y="1263.50"></text></g><g><title>[unknown] (438 samples, 0.63%)</title><rect x="72.9610%" y="1237" width="0.6323%" height="15" fill="rgb(221,121,35)" fg:x="50543" fg:w="438"/><text x="73.2110%" y="1247.50"></text></g><g><title>[unknown] (172 samples, 0.25%)</title><rect x="73.3450%" y="1221" width="0.2483%" height="15" fill="rgb(228,137,42)" fg:x="50809" fg:w="172"/><text x="73.5950%" y="1231.50"></text></g><g><title>[unknown] (71 samples, 0.10%)</title><rect x="73.4908%" y="1205" width="0.1025%" height="15" fill="rgb(227,54,21)" fg:x="50910" fg:w="71"/><text x="73.7408%" y="1215.50"></text></g><g><title>[unknown] (29 samples, 0.04%)</title><rect x="73.5514%" y="1189" width="0.0419%" height="15" fill="rgb(240,168,33)" fg:x="50952" fg:w="29"/><text x="73.8014%" y="1199.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="73.5731%" y="1173" width="0.0202%" height="15" fill="rgb(243,159,6)" fg:x="50967" fg:w="14"/><text x="73.8231%" y="1183.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="73.5803%" y="1157" width="0.0130%" height="15" fill="rgb(205,211,41)" fg:x="50972" fg:w="9"/><text x="73.8303%" y="1167.50"></text></g><g><title>CConnman::SocketHandlerConnected (5,208 samples, 7.52%)</title><rect x="66.0782%" y="1445" width="7.5180%" height="15" fill="rgb(253,30,1)" fg:x="45775" fg:w="5208"/><text x="66.3282%" y="1455.50">CConnman::..</text></g><g><title>[anon] (17 samples, 0.02%)</title><rect x="73.6019%" y="1445" width="0.0245%" height="15" fill="rgb(226,80,18)" fg:x="50987" fg:w="17"/><text x="73.8519%" y="1455.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="73.6265%" y="1445" width="0.0217%" height="15" fill="rgb(253,156,46)" fg:x="51004" fg:w="15"/><text x="73.8765%" y="1455.50"></text></g><g><title>Sock::WaitMany (176 samples, 0.25%)</title><rect x="73.6712%" y="1237" width="0.2541%" height="15" fill="rgb(248,87,27)" fg:x="51035" fg:w="176"/><text x="73.9212%" y="1247.50"></text></g><g><title>__poll (176 samples, 0.25%)</title><rect x="73.6712%" y="1221" width="0.2541%" height="15" fill="rgb(227,122,2)" fg:x="51035" fg:w="176"/><text x="73.9212%" y="1231.50"></text></g><g><title>[unknown] (176 samples, 0.25%)</title><rect x="73.6712%" y="1205" width="0.2541%" height="15" fill="rgb(229,94,39)" fg:x="51035" fg:w="176"/><text x="73.9212%" y="1215.50"></text></g><g><title>[unknown] (175 samples, 0.25%)</title><rect x="73.6727%" y="1189" width="0.2526%" height="15" fill="rgb(225,173,31)" fg:x="51036" fg:w="175"/><text x="73.9227%" y="1199.50"></text></g><g><title>[unknown] (171 samples, 0.25%)</title><rect x="73.6784%" y="1173" width="0.2468%" height="15" fill="rgb(239,176,30)" fg:x="51040" fg:w="171"/><text x="73.9284%" y="1183.50"></text></g><g><title>[unknown] (164 samples, 0.24%)</title><rect x="73.6885%" y="1157" width="0.2367%" height="15" fill="rgb(212,104,21)" fg:x="51047" fg:w="164"/><text x="73.9385%" y="1167.50"></text></g><g><title>[unknown] (144 samples, 0.21%)</title><rect x="73.7174%" y="1141" width="0.2079%" height="15" fill="rgb(240,209,40)" fg:x="51067" fg:w="144"/><text x="73.9674%" y="1151.50"></text></g><g><title>[unknown] (120 samples, 0.17%)</title><rect x="73.7521%" y="1125" width="0.1732%" height="15" fill="rgb(234,195,5)" fg:x="51091" fg:w="120"/><text x="74.0021%" y="1135.50"></text></g><g><title>[unknown] (107 samples, 0.15%)</title><rect x="73.7708%" y="1109" width="0.1545%" height="15" fill="rgb(238,213,1)" fg:x="51104" fg:w="107"/><text x="74.0208%" y="1119.50"></text></g><g><title>[unknown] (101 samples, 0.15%)</title><rect x="73.7795%" y="1093" width="0.1458%" height="15" fill="rgb(235,182,54)" fg:x="51110" fg:w="101"/><text x="74.0295%" y="1103.50"></text></g><g><title>[unknown] (73 samples, 0.11%)</title><rect x="73.8199%" y="1077" width="0.1054%" height="15" fill="rgb(229,50,46)" fg:x="51138" fg:w="73"/><text x="74.0699%" y="1087.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="73.8589%" y="1061" width="0.0664%" height="15" fill="rgb(219,145,13)" fg:x="51165" fg:w="46"/><text x="74.1089%" y="1071.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="73.8935%" y="1045" width="0.0318%" height="15" fill="rgb(220,226,10)" fg:x="51189" fg:w="22"/><text x="74.1435%" y="1055.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="73.9036%" y="1029" width="0.0217%" height="15" fill="rgb(248,47,30)" fg:x="51196" fg:w="15"/><text x="74.1536%" y="1039.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="73.9137%" y="1013" width="0.0115%" height="15" fill="rgb(231,209,44)" fg:x="51203" fg:w="8"/><text x="74.1637%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="73.9152%" y="997" width="0.0101%" height="15" fill="rgb(209,80,30)" fg:x="51204" fg:w="7"/><text x="74.1652%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="73.9152%" y="981" width="0.0101%" height="15" fill="rgb(232,9,14)" fg:x="51204" fg:w="7"/><text x="74.1652%" y="991.50"></text></g><g><title>Sock::WaitMany (180 samples, 0.26%)</title><rect x="73.6669%" y="1253" width="0.2598%" height="15" fill="rgb(243,91,43)" fg:x="51032" fg:w="180"/><text x="73.9169%" y="1263.50"></text></g><g><title>CConnman::SocketHandler (194 samples, 0.28%)</title><rect x="73.6553%" y="1269" width="0.2800%" height="15" fill="rgb(231,90,52)" fg:x="51024" fg:w="194"/><text x="73.9053%" y="1279.50"></text></g><g><title>__clone (202 samples, 0.29%)</title><rect x="73.6510%" y="1445" width="0.2916%" height="15" fill="rgb(253,192,44)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1455.50"></text></g><g><title>start_thread (202 samples, 0.29%)</title><rect x="73.6510%" y="1429" width="0.2916%" height="15" fill="rgb(241,66,31)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1439.50"></text></g><g><title>execute_native_thread_routine (202 samples, 0.29%)</title><rect x="73.6510%" y="1413" width="0.2916%" height="15" fill="rgb(235,81,37)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1423.50"></text></g><g><title>_M_run (202 samples, 0.29%)</title><rect x="73.6510%" y="1397" width="0.2916%" height="15" fill="rgb(223,221,9)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1407.50"></text></g><g><title>operator (202 samples, 0.29%)</title><rect x="73.6510%" y="1381" width="0.2916%" height="15" fill="rgb(242,180,7)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1391.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (202 samples, 0.29%)</title><rect x="73.6510%" y="1365" width="0.2916%" height="15" fill="rgb(243,78,19)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1375.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (202 samples, 0.29%)</title><rect x="73.6510%" y="1349" width="0.2916%" height="15" fill="rgb(233,23,17)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1359.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (202 samples, 0.29%)</title><rect x="73.6510%" y="1333" width="0.2916%" height="15" fill="rgb(252,122,45)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1343.50"></text></g><g><title>util::TraceThread (202 samples, 0.29%)</title><rect x="73.6510%" y="1317" width="0.2916%" height="15" fill="rgb(247,108,20)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1327.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (202 samples, 0.29%)</title><rect x="73.6510%" y="1301" width="0.2916%" height="15" fill="rgb(235,84,21)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1311.50"></text></g><g><title>CConnman::ThreadSocketHandler (202 samples, 0.29%)</title><rect x="73.6510%" y="1285" width="0.2916%" height="15" fill="rgb(247,129,10)" fg:x="51021" fg:w="202"/><text x="73.9010%" y="1295.50"></text></g><g><title>b-net (5,455 samples, 7.87%)</title><rect x="66.0782%" y="1461" width="7.8745%" height="15" fill="rgb(208,173,14)" fg:x="45775" fg:w="5455"/><text x="66.3282%" y="1471.50">b-net</text></g><g><title>b-opencon (10 samples, 0.01%)</title><rect x="73.9527%" y="1461" width="0.0144%" height="15" fill="rgb(236,31,38)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1471.50"></text></g><g><title>__clone (10 samples, 0.01%)</title><rect x="73.9527%" y="1445" width="0.0144%" height="15" fill="rgb(232,65,17)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1455.50"></text></g><g><title>start_thread (10 samples, 0.01%)</title><rect x="73.9527%" y="1429" width="0.0144%" height="15" fill="rgb(224,45,49)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1439.50"></text></g><g><title>execute_native_thread_routine (10 samples, 0.01%)</title><rect x="73.9527%" y="1413" width="0.0144%" height="15" fill="rgb(225,2,53)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1423.50"></text></g><g><title>_M_run (10 samples, 0.01%)</title><rect x="73.9527%" y="1397" width="0.0144%" height="15" fill="rgb(248,210,53)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1407.50"></text></g><g><title>operator (10 samples, 0.01%)</title><rect x="73.9527%" y="1381" width="0.0144%" height="15" fill="rgb(211,1,30)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1391.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (10 samples, 0.01%)</title><rect x="73.9527%" y="1365" width="0.0144%" height="15" fill="rgb(224,96,15)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1375.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (10 samples, 0.01%)</title><rect x="73.9527%" y="1349" width="0.0144%" height="15" fill="rgb(252,45,11)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1359.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt; &gt; &gt;::_M_run (10 samples, 0.01%)</title><rect x="73.9527%" y="1333" width="0.0144%" height="15" fill="rgb(220,125,38)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1343.50"></text></g><g><title>util::TraceThread (10 samples, 0.01%)</title><rect x="73.9527%" y="1317" width="0.0144%" height="15" fill="rgb(243,161,33)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1327.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (10 samples, 0.01%)</title><rect x="73.9527%" y="1301" width="0.0144%" height="15" fill="rgb(248,197,34)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1311.50"></text></g><g><title>_M_invoke (10 samples, 0.01%)</title><rect x="73.9527%" y="1285" width="0.0144%" height="15" fill="rgb(228,165,23)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1295.50"></text></g><g><title>__invoke_r&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="73.9527%" y="1269" width="0.0144%" height="15" fill="rgb(236,94,38)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1279.50"></text></g><g><title>__invoke_impl&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="73.9527%" y="1253" width="0.0144%" height="15" fill="rgb(220,13,23)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1263.50"></text></g><g><title>std::_Function_handler&lt;void (), CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt;::_M_invoke (10 samples, 0.01%)</title><rect x="73.9527%" y="1237" width="0.0144%" height="15" fill="rgb(234,26,39)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1247.50"></text></g><g><title>CConnman::ThreadOpenConnections (10 samples, 0.01%)</title><rect x="73.9527%" y="1221" width="0.0144%" height="15" fill="rgb(205,117,44)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1231.50"></text></g><g><title>CThreadInterrupt::sleep_for (10 samples, 0.01%)</title><rect x="73.9527%" y="1205" width="0.0144%" height="15" fill="rgb(250,42,2)" fg:x="51230" fg:w="10"/><text x="74.2027%" y="1215.50"></text></g><g><title>MurmurHash3 (42 samples, 0.06%)</title><rect x="73.9700%" y="1445" width="0.0606%" height="15" fill="rgb(223,83,14)" fg:x="51242" fg:w="42"/><text x="74.2200%" y="1455.50"></text></g><g><title>MurmurHash3 (44 samples, 0.06%)</title><rect x="74.0379%" y="1429" width="0.0635%" height="15" fill="rgb(241,147,50)" fg:x="51289" fg:w="44"/><text x="74.2879%" y="1439.50"></text></g><g><title>[[heap]] (58 samples, 0.08%)</title><rect x="74.0364%" y="1445" width="0.0837%" height="15" fill="rgb(218,90,6)" fg:x="51288" fg:w="58"/><text x="74.2864%" y="1455.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.01%)</title><rect x="74.1288%" y="1429" width="0.0101%" height="15" fill="rgb(210,191,5)" fg:x="51352" fg:w="7"/><text x="74.3788%" y="1439.50"></text></g><g><title>_int_free (572 samples, 0.83%)</title><rect x="74.1389%" y="1429" width="0.8257%" height="15" fill="rgb(225,139,19)" fg:x="51359" fg:w="572"/><text x="74.3889%" y="1439.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="74.9401%" y="1413" width="0.0245%" height="15" fill="rgb(210,1,33)" fg:x="51914" fg:w="17"/><text x="75.1901%" y="1423.50"></text></g><g><title>_int_free_create_chunk (10 samples, 0.01%)</title><rect x="74.9646%" y="1429" width="0.0144%" height="15" fill="rgb(213,50,3)" fg:x="51931" fg:w="10"/><text x="75.2146%" y="1439.50"></text></g><g><title>cfree@GLIBC_2.2.5 (380 samples, 0.55%)</title><rect x="74.9863%" y="1429" width="0.5485%" height="15" fill="rgb(234,227,4)" fg:x="51946" fg:w="380"/><text x="75.2363%" y="1439.50"></text></g><g><title>free@plt (17 samples, 0.02%)</title><rect x="75.5348%" y="1429" width="0.0245%" height="15" fill="rgb(246,63,5)" fg:x="52326" fg:w="17"/><text x="75.7848%" y="1439.50"></text></g><g><title>malloc_consolidate (8 samples, 0.01%)</title><rect x="75.5594%" y="1429" width="0.0115%" height="15" fill="rgb(245,136,27)" fg:x="52343" fg:w="8"/><text x="75.8094%" y="1439.50"></text></g><g><title>operator delete (58 samples, 0.08%)</title><rect x="75.5709%" y="1429" width="0.0837%" height="15" fill="rgb(247,199,27)" fg:x="52351" fg:w="58"/><text x="75.8209%" y="1439.50"></text></g><g><title>[anon] (1,068 samples, 1.54%)</title><rect x="74.1202%" y="1445" width="1.5417%" height="15" fill="rgb(252,158,49)" fg:x="51346" fg:w="1068"/><text x="74.3702%" y="1455.50"></text></g><g><title>MurmurHash3 (48 samples, 0.07%)</title><rect x="75.6691%" y="1429" width="0.0693%" height="15" fill="rgb(254,73,1)" fg:x="52419" fg:w="48"/><text x="75.9191%" y="1439.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="75.7384%" y="1429" width="0.0375%" height="15" fill="rgb(248,93,19)" fg:x="52467" fg:w="26"/><text x="75.9884%" y="1439.50"></text></g><g><title>[unknown] (24 samples, 0.03%)</title><rect x="75.7413%" y="1413" width="0.0346%" height="15" fill="rgb(206,67,5)" fg:x="52469" fg:w="24"/><text x="75.9913%" y="1423.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="75.7441%" y="1397" width="0.0318%" height="15" fill="rgb(209,210,4)" fg:x="52471" fg:w="22"/><text x="75.9941%" y="1407.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="75.7470%" y="1381" width="0.0289%" height="15" fill="rgb(214,185,36)" fg:x="52473" fg:w="20"/><text x="75.9970%" y="1391.50"></text></g><g><title>_int_free (82 samples, 0.12%)</title><rect x="75.7860%" y="1429" width="0.1184%" height="15" fill="rgb(233,191,26)" fg:x="52500" fg:w="82"/><text x="76.0360%" y="1439.50"></text></g><g><title>cfree@GLIBC_2.2.5 (72 samples, 0.10%)</title><rect x="75.9073%" y="1429" width="0.1039%" height="15" fill="rgb(248,94,17)" fg:x="52584" fg:w="72"/><text x="76.1573%" y="1439.50"></text></g><g><title>free@plt (9 samples, 0.01%)</title><rect x="76.0112%" y="1429" width="0.0130%" height="15" fill="rgb(250,64,4)" fg:x="52656" fg:w="9"/><text x="76.2612%" y="1439.50"></text></g><g><title>operator delete (30 samples, 0.04%)</title><rect x="76.0242%" y="1429" width="0.0433%" height="15" fill="rgb(218,41,53)" fg:x="52665" fg:w="30"/><text x="76.2742%" y="1439.50"></text></g><g><title>[unknown] (285 samples, 0.41%)</title><rect x="75.6619%" y="1445" width="0.4114%" height="15" fill="rgb(251,176,28)" fg:x="52414" fg:w="285"/><text x="75.9119%" y="1455.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (26 samples, 0.04%)</title><rect x="76.0733%" y="1269" width="0.0375%" height="15" fill="rgb(247,22,9)" fg:x="52699" fg:w="26"/><text x="76.3233%" y="1279.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (26 samples, 0.04%)</title><rect x="76.0733%" y="1253" width="0.0375%" height="15" fill="rgb(218,201,14)" fg:x="52699" fg:w="26"/><text x="76.3233%" y="1263.50"></text></g><g><title>std::__condvar::wait_until (26 samples, 0.04%)</title><rect x="76.0733%" y="1237" width="0.0375%" height="15" fill="rgb(218,94,10)" fg:x="52699" fg:w="26"/><text x="76.3233%" y="1247.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (26 samples, 0.04%)</title><rect x="76.0733%" y="1221" width="0.0375%" height="15" fill="rgb(222,183,52)" fg:x="52699" fg:w="26"/><text x="76.3233%" y="1231.50"></text></g><g><title>__futex_abstimed_wait_common (24 samples, 0.03%)</title><rect x="76.0762%" y="1205" width="0.0346%" height="15" fill="rgb(242,140,25)" fg:x="52701" fg:w="24"/><text x="76.3262%" y="1215.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="76.0776%" y="1189" width="0.0332%" height="15" fill="rgb(235,197,38)" fg:x="52702" fg:w="23"/><text x="76.3276%" y="1199.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="76.0776%" y="1173" width="0.0332%" height="15" fill="rgb(237,136,15)" fg:x="52702" fg:w="23"/><text x="76.3276%" y="1183.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="76.0776%" y="1157" width="0.0332%" height="15" fill="rgb(223,44,49)" fg:x="52702" fg:w="23"/><text x="76.3276%" y="1167.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="76.0790%" y="1141" width="0.0318%" height="15" fill="rgb(227,71,15)" fg:x="52703" fg:w="22"/><text x="76.3290%" y="1151.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="76.0790%" y="1125" width="0.0318%" height="15" fill="rgb(225,153,20)" fg:x="52703" fg:w="22"/><text x="76.3290%" y="1135.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="76.0790%" y="1109" width="0.0318%" height="15" fill="rgb(210,190,26)" fg:x="52703" fg:w="22"/><text x="76.3290%" y="1119.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="76.0805%" y="1093" width="0.0303%" height="15" fill="rgb(223,147,5)" fg:x="52704" fg:w="21"/><text x="76.3305%" y="1103.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="76.0848%" y="1077" width="0.0260%" height="15" fill="rgb(207,14,23)" fg:x="52707" fg:w="18"/><text x="76.3348%" y="1087.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="76.0892%" y="1061" width="0.0217%" height="15" fill="rgb(211,195,53)" fg:x="52710" fg:w="15"/><text x="76.3392%" y="1071.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="76.0935%" y="1045" width="0.0173%" height="15" fill="rgb(237,75,46)" fg:x="52713" fg:w="12"/><text x="76.3435%" y="1055.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="76.0993%" y="1029" width="0.0115%" height="15" fill="rgb(254,55,14)" fg:x="52717" fg:w="8"/><text x="76.3493%" y="1039.50"></text></g><g><title>CRollingBloomFilter::insert (12 samples, 0.02%)</title><rect x="76.1137%" y="1109" width="0.0173%" height="15" fill="rgb(230,185,30)" fg:x="52727" fg:w="12"/><text x="76.3637%" y="1119.50"></text></g><g><title>MurmurHash3 (9 samples, 0.01%)</title><rect x="76.1310%" y="1109" width="0.0130%" height="15" fill="rgb(220,14,11)" fg:x="52739" fg:w="9"/><text x="76.3810%" y="1119.50"></text></g><g><title>CRollingBloomFilter::insert (56 samples, 0.08%)</title><rect x="77.2166%" y="1045" width="0.0808%" height="15" fill="rgb(215,169,44)" fg:x="53491" fg:w="56"/><text x="77.4666%" y="1055.50"></text></g><g><title>FastRange32 (65 samples, 0.09%)</title><rect x="77.2974%" y="1045" width="0.0938%" height="15" fill="rgb(253,203,20)" fg:x="53547" fg:w="65"/><text x="77.5474%" y="1055.50"></text></g><g><title>RollingBloomHash (38 samples, 0.05%)</title><rect x="77.3912%" y="1045" width="0.0549%" height="15" fill="rgb(229,225,17)" fg:x="53612" fg:w="38"/><text x="77.6412%" y="1055.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (76 samples, 0.11%)</title><rect x="77.4461%" y="1045" width="0.1097%" height="15" fill="rgb(236,76,26)" fg:x="53650" fg:w="76"/><text x="77.6961%" y="1055.50"></text></g><g><title>CRollingBloomFilter::insert (575 samples, 0.83%)</title><rect x="76.7590%" y="1061" width="0.8300%" height="15" fill="rgb(234,15,30)" fg:x="53174" fg:w="575"/><text x="77.0090%" y="1071.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (23 samples, 0.03%)</title><rect x="77.5558%" y="1045" width="0.0332%" height="15" fill="rgb(211,113,48)" fg:x="53726" fg:w="23"/><text x="77.8058%" y="1055.50"></text></g><g><title>[[igc]] (13 samples, 0.02%)</title><rect x="78.6168%" y="949" width="0.0188%" height="15" fill="rgb(221,31,36)" fg:x="54461" fg:w="13"/><text x="78.8668%" y="959.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="78.6168%" y="933" width="0.0188%" height="15" fill="rgb(215,118,52)" fg:x="54461" fg:w="13"/><text x="78.8668%" y="943.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="78.6197%" y="917" width="0.0159%" height="15" fill="rgb(241,151,27)" fg:x="54463" fg:w="11"/><text x="78.8697%" y="927.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="78.6255%" y="901" width="0.0101%" height="15" fill="rgb(253,51,3)" fg:x="54467" fg:w="7"/><text x="78.8755%" y="911.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="78.6125%" y="1045" width="0.0318%" height="15" fill="rgb(216,201,24)" fg:x="54458" fg:w="22"/><text x="78.8625%" y="1055.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="78.6154%" y="1029" width="0.0289%" height="15" fill="rgb(231,107,4)" fg:x="54460" fg:w="20"/><text x="78.8654%" y="1039.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="78.6154%" y="1013" width="0.0289%" height="15" fill="rgb(243,97,54)" fg:x="54460" fg:w="20"/><text x="78.8654%" y="1023.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="78.6154%" y="997" width="0.0289%" height="15" fill="rgb(221,32,51)" fg:x="54460" fg:w="20"/><text x="78.8654%" y="1007.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="78.6154%" y="981" width="0.0289%" height="15" fill="rgb(218,171,35)" fg:x="54460" fg:w="20"/><text x="78.8654%" y="991.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="78.6168%" y="965" width="0.0274%" height="15" fill="rgb(214,20,53)" fg:x="54461" fg:w="19"/><text x="78.8668%" y="975.50"></text></g><g><title>MurmurHash3 (873 samples, 1.26%)</title><rect x="77.5890%" y="1061" width="1.2602%" height="15" fill="rgb(239,9,52)" fg:x="53749" fg:w="873"/><text x="77.8390%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (142 samples, 0.20%)</title><rect x="78.6442%" y="1045" width="0.2050%" height="15" fill="rgb(215,114,45)" fg:x="54480" fg:w="142"/><text x="78.8942%" y="1055.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (142 samples, 0.20%)</title><rect x="78.6442%" y="1029" width="0.2050%" height="15" fill="rgb(208,118,9)" fg:x="54480" fg:w="142"/><text x="78.8942%" y="1039.50"></text></g><g><title>TxRequestTracker::ForgetTxHash (7 samples, 0.01%)</title><rect x="78.8492%" y="1061" width="0.0101%" height="15" fill="rgb(235,7,39)" fg:x="54622" fg:w="7"/><text x="79.0992%" y="1071.50"></text></g><g><title>CRollingBloomFilter::insert (1,540 samples, 2.22%)</title><rect x="76.6406%" y="1077" width="2.2231%" height="15" fill="rgb(243,225,15)" fg:x="53092" fg:w="1540"/><text x="76.8906%" y="1087.50">C..</text></g><g><title>FastRange32 (75 samples, 0.11%)</title><rect x="78.8636%" y="1077" width="0.1083%" height="15" fill="rgb(225,216,18)" fg:x="54632" fg:w="75"/><text x="79.1136%" y="1087.50"></text></g><g><title>RollingBloomHash (30 samples, 0.04%)</title><rect x="78.9719%" y="1077" width="0.0433%" height="15" fill="rgb(233,36,38)" fg:x="54707" fg:w="30"/><text x="79.2219%" y="1087.50"></text></g><g><title>[[igc]] (19 samples, 0.03%)</title><rect x="79.0195%" y="981" width="0.0274%" height="15" fill="rgb(239,88,23)" fg:x="54740" fg:w="19"/><text x="79.2695%" y="991.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="79.0253%" y="965" width="0.0217%" height="15" fill="rgb(219,181,35)" fg:x="54744" fg:w="15"/><text x="79.2753%" y="975.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="79.0297%" y="949" width="0.0173%" height="15" fill="rgb(215,18,46)" fg:x="54747" fg:w="12"/><text x="79.2797%" y="959.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="79.0340%" y="933" width="0.0130%" height="15" fill="rgb(241,38,11)" fg:x="54750" fg:w="9"/><text x="79.2840%" y="943.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="79.0369%" y="917" width="0.0101%" height="15" fill="rgb(248,169,45)" fg:x="54752" fg:w="7"/><text x="79.2869%" y="927.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="79.0152%" y="1077" width="0.0404%" height="15" fill="rgb(239,50,49)" fg:x="54737" fg:w="28"/><text x="79.2652%" y="1087.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="79.0152%" y="1061" width="0.0404%" height="15" fill="rgb(231,96,31)" fg:x="54737" fg:w="28"/><text x="79.2652%" y="1071.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="79.0152%" y="1045" width="0.0404%" height="15" fill="rgb(224,193,37)" fg:x="54737" fg:w="28"/><text x="79.2652%" y="1055.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="79.0167%" y="1029" width="0.0390%" height="15" fill="rgb(227,153,50)" fg:x="54738" fg:w="27"/><text x="79.2667%" y="1039.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="79.0167%" y="1013" width="0.0390%" height="15" fill="rgb(249,228,3)" fg:x="54738" fg:w="27"/><text x="79.2667%" y="1023.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="79.0167%" y="997" width="0.0390%" height="15" fill="rgb(219,164,43)" fg:x="54738" fg:w="27"/><text x="79.2667%" y="1007.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (88 samples, 0.13%)</title><rect x="79.0556%" y="1077" width="0.1270%" height="15" fill="rgb(216,45,41)" fg:x="54765" fg:w="88"/><text x="79.3056%" y="1087.50"></text></g><g><title>CRollingBloomFilter::insert (2,124 samples, 3.07%)</title><rect x="76.1498%" y="1093" width="3.0661%" height="15" fill="rgb(210,226,51)" fg:x="52752" fg:w="2124"/><text x="76.3998%" y="1103.50">CRo..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (23 samples, 0.03%)</title><rect x="79.1827%" y="1077" width="0.0332%" height="15" fill="rgb(209,117,49)" fg:x="54853" fg:w="23"/><text x="79.4327%" y="1087.50"></text></g><g><title>MurmurHash3 (923 samples, 1.33%)</title><rect x="79.2159%" y="1093" width="1.3324%" height="15" fill="rgb(206,196,24)" fg:x="54876" fg:w="923"/><text x="79.4659%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (114 samples, 0.16%)</title><rect x="80.3837%" y="1077" width="0.1646%" height="15" fill="rgb(253,218,3)" fg:x="55685" fg:w="114"/><text x="80.6337%" y="1087.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (114 samples, 0.16%)</title><rect x="80.3837%" y="1061" width="0.1646%" height="15" fill="rgb(252,166,2)" fg:x="55685" fg:w="114"/><text x="80.6337%" y="1071.50"></text></g><g><title>TxOrphanage::EraseForBlock (13 samples, 0.02%)</title><rect x="80.6190%" y="1061" width="0.0188%" height="15" fill="rgb(236,218,26)" fg:x="55848" fg:w="13"/><text x="80.8690%" y="1071.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (39 samples, 0.06%)</title><rect x="80.5916%" y="1077" width="0.0563%" height="15" fill="rgb(254,84,19)" fg:x="55829" fg:w="39"/><text x="80.8416%" y="1087.50"></text></g><g><title>TxOrphanage::EraseForBlock (70 samples, 0.10%)</title><rect x="80.5483%" y="1093" width="0.1010%" height="15" fill="rgb(219,137,29)" fg:x="55799" fg:w="70"/><text x="80.7983%" y="1103.50"></text></g><g><title>TxRequestTracker::ForgetTxHash (7 samples, 0.01%)</title><rect x="80.6493%" y="1093" width="0.0101%" height="15" fill="rgb(227,47,52)" fg:x="55869" fg:w="7"/><text x="80.8993%" y="1103.50"></text></g><g><title>operator (3,162 samples, 4.56%)</title><rect x="76.1137%" y="1173" width="4.5645%" height="15" fill="rgb(229,167,24)" fg:x="52727" fg:w="3162"/><text x="76.3637%" y="1183.50">opera..</text></g><g><title>operator (3,162 samples, 4.56%)</title><rect x="76.1137%" y="1157" width="4.5645%" height="15" fill="rgb(233,164,1)" fg:x="52727" fg:w="3162"/><text x="76.3637%" y="1167.50">opera..</text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (3,162 samples, 4.56%)</title><rect x="76.1137%" y="1141" width="4.5645%" height="15" fill="rgb(218,88,48)" fg:x="52727" fg:w="3162"/><text x="76.3637%" y="1151.50">Itera..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (3,162 samples, 4.56%)</title><rect x="76.1137%" y="1125" width="4.5645%" height="15" fill="rgb(226,214,24)" fg:x="52727" fg:w="3162"/><text x="76.3637%" y="1135.50">std::..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (3,137 samples, 4.53%)</title><rect x="76.1498%" y="1109" width="4.5284%" height="15" fill="rgb(233,29,12)" fg:x="52752" fg:w="3137"/><text x="76.3998%" y="1119.50">node:..</text></g><g><title>std::_Rb_tree&lt;COutPoint, std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (10 samples, 0.01%)</title><rect x="80.6637%" y="1093" width="0.0144%" height="15" fill="rgb(219,120,34)" fg:x="55879" fg:w="10"/><text x="80.9137%" y="1103.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (3,167 samples, 4.57%)</title><rect x="76.1137%" y="1205" width="4.5717%" height="15" fill="rgb(226,78,44)" fg:x="52727" fg:w="3167"/><text x="76.3637%" y="1215.50">__inv..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (3,167 samples, 4.57%)</title><rect x="76.1137%" y="1189" width="4.5717%" height="15" fill="rgb(240,15,48)" fg:x="52727" fg:w="3167"/><text x="76.3637%" y="1199.50">__inv..</text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (18 samples, 0.03%)</title><rect x="80.7431%" y="1077" width="0.0260%" height="15" fill="rgb(253,176,7)" fg:x="55934" fg:w="18"/><text x="80.9931%" y="1087.50"></text></g><g><title>operator (60 samples, 0.09%)</title><rect x="80.6854%" y="1173" width="0.0866%" height="15" fill="rgb(206,166,28)" fg:x="55894" fg:w="60"/><text x="80.9354%" y="1183.50"></text></g><g><title>operator (60 samples, 0.09%)</title><rect x="80.6854%" y="1157" width="0.0866%" height="15" fill="rgb(241,53,51)" fg:x="55894" fg:w="60"/><text x="80.9354%" y="1167.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (60 samples, 0.09%)</title><rect x="80.6854%" y="1141" width="0.0866%" height="15" fill="rgb(249,112,30)" fg:x="55894" fg:w="60"/><text x="80.9354%" y="1151.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (60 samples, 0.09%)</title><rect x="80.6854%" y="1125" width="0.0866%" height="15" fill="rgb(217,85,30)" fg:x="55894" fg:w="60"/><text x="80.9354%" y="1135.50"></text></g><g><title>CBlockPolicyEstimator::processBlock (60 samples, 0.09%)</title><rect x="80.6854%" y="1109" width="0.0866%" height="15" fill="rgb(233,49,7)" fg:x="55894" fg:w="60"/><text x="80.9354%" y="1119.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (59 samples, 0.09%)</title><rect x="80.6868%" y="1093" width="0.0852%" height="15" fill="rgb(234,109,9)" fg:x="55895" fg:w="59"/><text x="80.9368%" y="1103.50"></text></g><g><title>BCLog::Logger::LogPrintStr (8 samples, 0.01%)</title><rect x="80.7720%" y="1141" width="0.0115%" height="15" fill="rgb(253,95,22)" fg:x="55954" fg:w="8"/><text x="81.0220%" y="1151.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (8 samples, 0.01%)</title><rect x="80.7720%" y="1125" width="0.0115%" height="15" fill="rgb(233,176,25)" fg:x="55954" fg:w="8"/><text x="81.0220%" y="1135.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (69 samples, 0.10%)</title><rect x="80.6854%" y="1205" width="0.0996%" height="15" fill="rgb(236,33,39)" fg:x="55894" fg:w="69"/><text x="80.9354%" y="1215.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (69 samples, 0.10%)</title><rect x="80.6854%" y="1189" width="0.0996%" height="15" fill="rgb(223,226,42)" fg:x="55894" fg:w="69"/><text x="80.9354%" y="1199.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (9 samples, 0.01%)</title><rect x="80.7720%" y="1173" width="0.0130%" height="15" fill="rgb(216,99,33)" fg:x="55954" fg:w="9"/><text x="81.0220%" y="1183.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, unsigned int, unsigned long&gt; (9 samples, 0.01%)</title><rect x="80.7720%" y="1157" width="0.0130%" height="15" fill="rgb(235,84,23)" fg:x="55954" fg:w="9"/><text x="81.0220%" y="1167.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (3,238 samples, 4.67%)</title><rect x="76.1137%" y="1237" width="4.6742%" height="15" fill="rgb(232,2,27)" fg:x="52727" fg:w="3238"/><text x="76.3637%" y="1247.50">std::..</text></g><g><title>_M_invoke (3,238 samples, 4.67%)</title><rect x="76.1137%" y="1221" width="4.6742%" height="15" fill="rgb(241,23,22)" fg:x="52727" fg:w="3238"/><text x="76.3637%" y="1231.50">_M_in..</text></g><g><title>cfree@GLIBC_2.2.5 (32 samples, 0.05%)</title><rect x="80.7879%" y="1061" width="0.0462%" height="15" fill="rgb(211,73,27)" fg:x="55965" fg:w="32"/><text x="81.0379%" y="1071.50"></text></g><g><title>_int_free (31 samples, 0.04%)</title><rect x="80.7893%" y="1045" width="0.0447%" height="15" fill="rgb(235,109,49)" fg:x="55966" fg:w="31"/><text x="81.0393%" y="1055.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (30 samples, 0.04%)</title><rect x="80.7908%" y="1029" width="0.0433%" height="15" fill="rgb(230,99,29)" fg:x="55967" fg:w="30"/><text x="81.0408%" y="1039.50"></text></g><g><title>malloc_consolidate (30 samples, 0.04%)</title><rect x="80.7908%" y="1013" width="0.0433%" height="15" fill="rgb(245,199,7)" fg:x="55967" fg:w="30"/><text x="81.0408%" y="1023.50"></text></g><g><title>__lll_lock_wait_private (7 samples, 0.01%)</title><rect x="80.8846%" y="789" width="0.0101%" height="15" fill="rgb(217,179,10)" fg:x="56032" fg:w="7"/><text x="81.1346%" y="799.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="80.8846%" y="773" width="0.0101%" height="15" fill="rgb(254,99,47)" fg:x="56032" fg:w="7"/><text x="81.1346%" y="783.50"></text></g><g><title>__lll_lock_wake_private (175 samples, 0.25%)</title><rect x="80.8947%" y="789" width="0.2526%" height="15" fill="rgb(251,121,7)" fg:x="56039" fg:w="175"/><text x="81.1447%" y="799.50"></text></g><g><title>[unknown] (172 samples, 0.25%)</title><rect x="80.8990%" y="773" width="0.2483%" height="15" fill="rgb(250,177,26)" fg:x="56042" fg:w="172"/><text x="81.1490%" y="783.50"></text></g><g><title>[unknown] (165 samples, 0.24%)</title><rect x="80.9091%" y="757" width="0.2382%" height="15" fill="rgb(232,88,15)" fg:x="56049" fg:w="165"/><text x="81.1591%" y="767.50"></text></g><g><title>[unknown] (152 samples, 0.22%)</title><rect x="80.9279%" y="741" width="0.2194%" height="15" fill="rgb(251,54,54)" fg:x="56062" fg:w="152"/><text x="81.1779%" y="751.50"></text></g><g><title>[unknown] (105 samples, 0.15%)</title><rect x="80.9958%" y="725" width="0.1516%" height="15" fill="rgb(208,177,15)" fg:x="56109" fg:w="105"/><text x="81.2458%" y="735.50"></text></g><g><title>[unknown] (81 samples, 0.12%)</title><rect x="81.0304%" y="709" width="0.1169%" height="15" fill="rgb(205,97,32)" fg:x="56133" fg:w="81"/><text x="81.2804%" y="719.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="81.1112%" y="693" width="0.0361%" height="15" fill="rgb(217,192,13)" fg:x="56189" fg:w="25"/><text x="81.3612%" y="703.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="81.1286%" y="677" width="0.0188%" height="15" fill="rgb(215,163,41)" fg:x="56201" fg:w="13"/><text x="81.3786%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="81.1358%" y="661" width="0.0115%" height="15" fill="rgb(246,83,29)" fg:x="56206" fg:w="8"/><text x="81.3858%" y="671.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="81.1372%" y="645" width="0.0101%" height="15" fill="rgb(219,2,45)" fg:x="56207" fg:w="7"/><text x="81.3872%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="81.1372%" y="629" width="0.0101%" height="15" fill="rgb(242,215,33)" fg:x="56207" fg:w="7"/><text x="81.3872%" y="639.50"></text></g><g><title>__lll_lock_wait_private (946 samples, 1.37%)</title><rect x="81.4736%" y="773" width="1.3656%" height="15" fill="rgb(217,1,6)" fg:x="56440" fg:w="946"/><text x="81.7236%" y="783.50"></text></g><g><title>[unknown] (920 samples, 1.33%)</title><rect x="81.5111%" y="757" width="1.3281%" height="15" fill="rgb(207,85,52)" fg:x="56466" fg:w="920"/><text x="81.7611%" y="767.50"></text></g><g><title>[unknown] (901 samples, 1.30%)</title><rect x="81.5385%" y="741" width="1.3006%" height="15" fill="rgb(231,171,19)" fg:x="56485" fg:w="901"/><text x="81.7885%" y="751.50"></text></g><g><title>[unknown] (886 samples, 1.28%)</title><rect x="81.5602%" y="725" width="1.2790%" height="15" fill="rgb(207,128,4)" fg:x="56500" fg:w="886"/><text x="81.8102%" y="735.50"></text></g><g><title>[unknown] (835 samples, 1.21%)</title><rect x="81.6338%" y="709" width="1.2054%" height="15" fill="rgb(219,208,4)" fg:x="56551" fg:w="835"/><text x="81.8838%" y="719.50"></text></g><g><title>[unknown] (805 samples, 1.16%)</title><rect x="81.6771%" y="693" width="1.1621%" height="15" fill="rgb(235,161,42)" fg:x="56581" fg:w="805"/><text x="81.9271%" y="703.50"></text></g><g><title>[unknown] (716 samples, 1.03%)</title><rect x="81.8056%" y="677" width="1.0336%" height="15" fill="rgb(247,218,18)" fg:x="56670" fg:w="716"/><text x="82.0556%" y="687.50"></text></g><g><title>[unknown] (673 samples, 0.97%)</title><rect x="81.8677%" y="661" width="0.9715%" height="15" fill="rgb(232,114,51)" fg:x="56713" fg:w="673"/><text x="82.1177%" y="671.50"></text></g><g><title>[unknown] (611 samples, 0.88%)</title><rect x="81.9572%" y="645" width="0.8820%" height="15" fill="rgb(222,95,3)" fg:x="56775" fg:w="611"/><text x="82.2072%" y="655.50"></text></g><g><title>[unknown] (549 samples, 0.79%)</title><rect x="82.0467%" y="629" width="0.7925%" height="15" fill="rgb(240,65,29)" fg:x="56837" fg:w="549"/><text x="82.2967%" y="639.50"></text></g><g><title>[unknown] (428 samples, 0.62%)</title><rect x="82.2213%" y="613" width="0.6178%" height="15" fill="rgb(249,209,20)" fg:x="56958" fg:w="428"/><text x="82.4713%" y="623.50"></text></g><g><title>[unknown] (267 samples, 0.39%)</title><rect x="82.4537%" y="597" width="0.3854%" height="15" fill="rgb(241,48,37)" fg:x="57119" fg:w="267"/><text x="82.7037%" y="607.50"></text></g><g><title>[unknown] (152 samples, 0.22%)</title><rect x="82.6197%" y="581" width="0.2194%" height="15" fill="rgb(230,140,42)" fg:x="57234" fg:w="152"/><text x="82.8697%" y="591.50"></text></g><g><title>[unknown] (88 samples, 0.13%)</title><rect x="82.7121%" y="565" width="0.1270%" height="15" fill="rgb(230,176,45)" fg:x="57298" fg:w="88"/><text x="82.9621%" y="575.50"></text></g><g><title>[unknown] (58 samples, 0.08%)</title><rect x="82.7554%" y="549" width="0.0837%" height="15" fill="rgb(245,112,21)" fg:x="57328" fg:w="58"/><text x="83.0054%" y="559.50"></text></g><g><title>[unknown] (42 samples, 0.06%)</title><rect x="82.7785%" y="533" width="0.0606%" height="15" fill="rgb(207,183,35)" fg:x="57344" fg:w="42"/><text x="83.0285%" y="543.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="82.8132%" y="517" width="0.0260%" height="15" fill="rgb(227,44,33)" fg:x="57368" fg:w="18"/><text x="83.0632%" y="527.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (23 samples, 0.03%)</title><rect x="82.8449%" y="773" width="0.0332%" height="15" fill="rgb(246,120,21)" fg:x="57390" fg:w="23"/><text x="83.0949%" y="783.50"></text></g><g><title>malloc_consolidate (23 samples, 0.03%)</title><rect x="82.8449%" y="757" width="0.0332%" height="15" fill="rgb(235,57,52)" fg:x="57390" fg:w="23"/><text x="83.0949%" y="767.50"></text></g><g><title>_int_free_create_chunk (8 samples, 0.01%)</title><rect x="82.8868%" y="757" width="0.0115%" height="15" fill="rgb(238,84,10)" fg:x="57419" fg:w="8"/><text x="83.1368%" y="767.50"></text></g><g><title>_int_free_merge_chunk (16 samples, 0.02%)</title><rect x="82.8781%" y="773" width="0.0231%" height="15" fill="rgb(251,200,32)" fg:x="57413" fg:w="16"/><text x="83.1281%" y="783.50"></text></g><g><title>_int_free (1,217 samples, 1.76%)</title><rect x="81.1473%" y="789" width="1.7568%" height="15" fill="rgb(247,159,13)" fg:x="56214" fg:w="1217"/><text x="81.3973%" y="799.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,417 samples, 2.05%)</title><rect x="80.8658%" y="805" width="2.0455%" height="15" fill="rgb(238,64,4)" fg:x="56019" fg:w="1417"/><text x="81.1158%" y="815.50">c..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (8 samples, 0.01%)</title><rect x="82.9142%" y="805" width="0.0115%" height="15" fill="rgb(221,131,51)" fg:x="57438" fg:w="8"/><text x="83.1642%" y="815.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (8 samples, 0.01%)</title><rect x="82.9142%" y="789" width="0.0115%" height="15" fill="rgb(242,5,29)" fg:x="57438" fg:w="8"/><text x="83.1642%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (8 samples, 0.01%)</title><rect x="82.9142%" y="773" width="0.0115%" height="15" fill="rgb(214,130,32)" fg:x="57438" fg:w="8"/><text x="83.1642%" y="783.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (8 samples, 0.01%)</title><rect x="82.9142%" y="757" width="0.0115%" height="15" fill="rgb(244,210,16)" fg:x="57438" fg:w="8"/><text x="83.1642%" y="767.50"></text></g><g><title>CBlock::~CBlock (8 samples, 0.01%)</title><rect x="82.9142%" y="741" width="0.0115%" height="15" fill="rgb(234,48,26)" fg:x="57438" fg:w="8"/><text x="83.1642%" y="751.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (8 samples, 0.01%)</title><rect x="82.9142%" y="725" width="0.0115%" height="15" fill="rgb(231,82,38)" fg:x="57438" fg:w="8"/><text x="83.1642%" y="735.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (8 samples, 0.01%)</title><rect x="82.9142%" y="709" width="0.0115%" height="15" fill="rgb(254,128,41)" fg:x="57438" fg:w="8"/><text x="83.1642%" y="719.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (8 samples, 0.01%)</title><rect x="82.9142%" y="693" width="0.0115%" height="15" fill="rgb(212,73,49)" fg:x="57438" fg:w="8"/><text x="83.1642%" y="703.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (8 samples, 0.01%)</title><rect x="82.9142%" y="677" width="0.0115%" height="15" fill="rgb(205,62,54)" fg:x="57438" fg:w="8"/><text x="83.1642%" y="687.50"></text></g><g><title>__lll_lock_wake_private (8 samples, 0.01%)</title><rect x="82.9532%" y="565" width="0.0115%" height="15" fill="rgb(228,0,8)" fg:x="57465" fg:w="8"/><text x="83.2032%" y="575.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="82.9532%" y="549" width="0.0115%" height="15" fill="rgb(251,28,17)" fg:x="57465" fg:w="8"/><text x="83.2032%" y="559.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="82.9532%" y="533" width="0.0115%" height="15" fill="rgb(238,105,27)" fg:x="57465" fg:w="8"/><text x="83.2032%" y="543.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="82.9532%" y="517" width="0.0115%" height="15" fill="rgb(237,216,33)" fg:x="57465" fg:w="8"/><text x="83.2032%" y="527.50"></text></g><g><title>__lll_lock_wait_private (22 samples, 0.03%)</title><rect x="82.9763%" y="549" width="0.0318%" height="15" fill="rgb(229,228,25)" fg:x="57481" fg:w="22"/><text x="83.2263%" y="559.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="82.9763%" y="533" width="0.0318%" height="15" fill="rgb(233,75,23)" fg:x="57481" fg:w="22"/><text x="83.2263%" y="543.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="82.9777%" y="517" width="0.0303%" height="15" fill="rgb(231,207,16)" fg:x="57482" fg:w="21"/><text x="83.2277%" y="527.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="82.9777%" y="501" width="0.0303%" height="15" fill="rgb(231,191,45)" fg:x="57482" fg:w="21"/><text x="83.2277%" y="511.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="82.9850%" y="485" width="0.0231%" height="15" fill="rgb(224,133,17)" fg:x="57487" fg:w="16"/><text x="83.2350%" y="495.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="82.9850%" y="469" width="0.0231%" height="15" fill="rgb(209,178,27)" fg:x="57487" fg:w="16"/><text x="83.2350%" y="479.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="82.9850%" y="453" width="0.0231%" height="15" fill="rgb(218,37,11)" fg:x="57487" fg:w="16"/><text x="83.2350%" y="463.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="82.9850%" y="437" width="0.0231%" height="15" fill="rgb(251,226,25)" fg:x="57487" fg:w="16"/><text x="83.2350%" y="447.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="82.9893%" y="421" width="0.0188%" height="15" fill="rgb(209,222,27)" fg:x="57490" fg:w="13"/><text x="83.2393%" y="431.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="82.9893%" y="405" width="0.0188%" height="15" fill="rgb(238,22,21)" fg:x="57490" fg:w="13"/><text x="83.2393%" y="415.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="82.9936%" y="389" width="0.0144%" height="15" fill="rgb(233,161,25)" fg:x="57493" fg:w="10"/><text x="83.2436%" y="399.50"></text></g><g><title>CScript::~CScript (44 samples, 0.06%)</title><rect x="82.9489%" y="613" width="0.0635%" height="15" fill="rgb(226,122,53)" fg:x="57462" fg:w="44"/><text x="83.1989%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (44 samples, 0.06%)</title><rect x="82.9489%" y="597" width="0.0635%" height="15" fill="rgb(220,123,17)" fg:x="57462" fg:w="44"/><text x="83.1989%" y="607.50"></text></g><g><title>cfree@GLIBC_2.2.5 (44 samples, 0.06%)</title><rect x="82.9489%" y="581" width="0.0635%" height="15" fill="rgb(230,224,35)" fg:x="57462" fg:w="44"/><text x="83.1989%" y="591.50"></text></g><g><title>_int_free (33 samples, 0.05%)</title><rect x="82.9647%" y="565" width="0.0476%" height="15" fill="rgb(246,83,8)" fg:x="57473" fg:w="33"/><text x="83.2147%" y="575.50"></text></g><g><title>_int_free (121 samples, 0.17%)</title><rect x="83.0499%" y="485" width="0.1747%" height="15" fill="rgb(230,214,17)" fg:x="57532" fg:w="121"/><text x="83.2999%" y="495.50"></text></g><g><title>cfree@GLIBC_2.2.5 (140 samples, 0.20%)</title><rect x="83.0312%" y="501" width="0.2021%" height="15" fill="rgb(222,97,18)" fg:x="57519" fg:w="140"/><text x="83.2812%" y="511.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (153 samples, 0.22%)</title><rect x="83.0196%" y="581" width="0.2209%" height="15" fill="rgb(206,79,1)" fg:x="57511" fg:w="153"/><text x="83.2696%" y="591.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (152 samples, 0.22%)</title><rect x="83.0210%" y="565" width="0.2194%" height="15" fill="rgb(214,121,34)" fg:x="57512" fg:w="152"/><text x="83.2710%" y="575.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (147 samples, 0.21%)</title><rect x="83.0283%" y="549" width="0.2122%" height="15" fill="rgb(249,199,46)" fg:x="57517" fg:w="147"/><text x="83.2783%" y="559.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (147 samples, 0.21%)</title><rect x="83.0283%" y="533" width="0.2122%" height="15" fill="rgb(214,222,46)" fg:x="57517" fg:w="147"/><text x="83.2783%" y="543.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (147 samples, 0.21%)</title><rect x="83.0283%" y="517" width="0.2122%" height="15" fill="rgb(248,168,30)" fg:x="57517" fg:w="147"/><text x="83.2783%" y="527.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="83.3329%" y="389" width="0.0173%" height="15" fill="rgb(226,14,28)" fg:x="57728" fg:w="12"/><text x="83.5829%" y="399.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="83.3329%" y="373" width="0.0173%" height="15" fill="rgb(253,123,1)" fg:x="57728" fg:w="12"/><text x="83.5829%" y="383.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="83.3343%" y="357" width="0.0159%" height="15" fill="rgb(225,24,42)" fg:x="57729" fg:w="11"/><text x="83.5843%" y="367.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="83.3357%" y="341" width="0.0144%" height="15" fill="rgb(216,161,37)" fg:x="57730" fg:w="10"/><text x="83.5857%" y="351.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="83.3357%" y="325" width="0.0144%" height="15" fill="rgb(251,164,26)" fg:x="57730" fg:w="10"/><text x="83.5857%" y="335.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="83.3372%" y="309" width="0.0130%" height="15" fill="rgb(219,177,3)" fg:x="57731" fg:w="9"/><text x="83.5872%" y="319.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.01%)</title><rect x="83.3502%" y="389" width="0.0101%" height="15" fill="rgb(222,65,0)" fg:x="57740" fg:w="7"/><text x="83.6002%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="83.3502%" y="373" width="0.0101%" height="15" fill="rgb(223,69,54)" fg:x="57740" fg:w="7"/><text x="83.6002%" y="383.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="83.3502%" y="357" width="0.0101%" height="15" fill="rgb(235,30,27)" fg:x="57740" fg:w="7"/><text x="83.6002%" y="367.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="83.3502%" y="341" width="0.0101%" height="15" fill="rgb(220,183,50)" fg:x="57740" fg:w="7"/><text x="83.6002%" y="351.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="83.3502%" y="325" width="0.0101%" height="15" fill="rgb(248,198,15)" fg:x="57740" fg:w="7"/><text x="83.6002%" y="335.50"></text></g><g><title>__lll_lock_wait_private (40 samples, 0.06%)</title><rect x="83.5104%" y="373" width="0.0577%" height="15" fill="rgb(222,211,4)" fg:x="57851" fg:w="40"/><text x="83.7604%" y="383.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="83.5119%" y="357" width="0.0563%" height="15" fill="rgb(214,102,34)" fg:x="57852" fg:w="39"/><text x="83.7619%" y="367.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="83.5119%" y="341" width="0.0563%" height="15" fill="rgb(245,92,5)" fg:x="57852" fg:w="39"/><text x="83.7619%" y="351.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="83.5133%" y="325" width="0.0549%" height="15" fill="rgb(252,72,51)" fg:x="57853" fg:w="38"/><text x="83.7633%" y="335.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="83.5147%" y="309" width="0.0534%" height="15" fill="rgb(252,208,19)" fg:x="57854" fg:w="37"/><text x="83.7647%" y="319.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="83.5176%" y="293" width="0.0505%" height="15" fill="rgb(211,69,7)" fg:x="57856" fg:w="35"/><text x="83.7676%" y="303.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="83.5234%" y="277" width="0.0447%" height="15" fill="rgb(211,27,16)" fg:x="57860" fg:w="31"/><text x="83.7734%" y="287.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="83.5248%" y="261" width="0.0433%" height="15" fill="rgb(219,216,14)" fg:x="57861" fg:w="30"/><text x="83.7748%" y="271.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="83.5306%" y="245" width="0.0375%" height="15" fill="rgb(219,71,8)" fg:x="57865" fg:w="26"/><text x="83.7806%" y="255.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="83.5378%" y="229" width="0.0303%" height="15" fill="rgb(223,170,53)" fg:x="57870" fg:w="21"/><text x="83.7878%" y="239.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="83.5422%" y="213" width="0.0260%" height="15" fill="rgb(246,21,26)" fg:x="57873" fg:w="18"/><text x="83.7922%" y="223.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="83.5537%" y="197" width="0.0144%" height="15" fill="rgb(248,20,46)" fg:x="57881" fg:w="10"/><text x="83.8037%" y="207.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="83.5566%" y="181" width="0.0115%" height="15" fill="rgb(252,94,11)" fg:x="57883" fg:w="8"/><text x="83.8066%" y="191.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (9 samples, 0.01%)</title><rect x="83.5681%" y="373" width="0.0130%" height="15" fill="rgb(236,163,8)" fg:x="57891" fg:w="9"/><text x="83.8181%" y="383.50"></text></g><g><title>malloc_consolidate (9 samples, 0.01%)</title><rect x="83.5681%" y="357" width="0.0130%" height="15" fill="rgb(217,221,45)" fg:x="57891" fg:w="9"/><text x="83.8181%" y="367.50"></text></g><g><title>_int_free (156 samples, 0.23%)</title><rect x="83.3603%" y="389" width="0.2252%" height="15" fill="rgb(238,38,17)" fg:x="57747" fg:w="156"/><text x="83.6103%" y="399.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="83.5898%" y="389" width="0.0101%" height="15" fill="rgb(242,210,23)" fg:x="57906" fg:w="7"/><text x="83.8398%" y="399.50"></text></g><g><title>cfree@GLIBC_2.2.5 (230 samples, 0.33%)</title><rect x="83.2794%" y="405" width="0.3320%" height="15" fill="rgb(250,86,53)" fg:x="57691" fg:w="230"/><text x="83.5294%" y="415.50"></text></g><g><title>operator delete (7 samples, 0.01%)</title><rect x="83.6014%" y="389" width="0.0101%" height="15" fill="rgb(223,168,25)" fg:x="57914" fg:w="7"/><text x="83.8514%" y="399.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (473 samples, 0.68%)</title><rect x="82.9402%" y="725" width="0.6828%" height="15" fill="rgb(251,189,4)" fg:x="57456" fg:w="473"/><text x="83.1902%" y="735.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (470 samples, 0.68%)</title><rect x="82.9445%" y="709" width="0.6785%" height="15" fill="rgb(245,19,28)" fg:x="57459" fg:w="470"/><text x="83.1945%" y="719.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (470 samples, 0.68%)</title><rect x="82.9445%" y="693" width="0.6785%" height="15" fill="rgb(207,10,34)" fg:x="57459" fg:w="470"/><text x="83.1945%" y="703.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (470 samples, 0.68%)</title><rect x="82.9445%" y="677" width="0.6785%" height="15" fill="rgb(235,153,31)" fg:x="57459" fg:w="470"/><text x="83.1945%" y="687.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (467 samples, 0.67%)</title><rect x="82.9489%" y="661" width="0.6741%" height="15" fill="rgb(228,72,37)" fg:x="57462" fg:w="467"/><text x="83.1989%" y="671.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (467 samples, 0.67%)</title><rect x="82.9489%" y="645" width="0.6741%" height="15" fill="rgb(215,15,16)" fg:x="57462" fg:w="467"/><text x="83.1989%" y="655.50"></text></g><g><title>CTxIn::~CTxIn (467 samples, 0.67%)</title><rect x="82.9489%" y="629" width="0.6741%" height="15" fill="rgb(250,119,29)" fg:x="57462" fg:w="467"/><text x="83.1989%" y="639.50"></text></g><g><title>CScriptWitness::~CScriptWitness (423 samples, 0.61%)</title><rect x="83.0124%" y="613" width="0.6106%" height="15" fill="rgb(214,59,1)" fg:x="57506" fg:w="423"/><text x="83.2624%" y="623.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (423 samples, 0.61%)</title><rect x="83.0124%" y="597" width="0.6106%" height="15" fill="rgb(223,109,25)" fg:x="57506" fg:w="423"/><text x="83.2624%" y="607.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (265 samples, 0.38%)</title><rect x="83.2405%" y="581" width="0.3825%" height="15" fill="rgb(230,198,22)" fg:x="57664" fg:w="265"/><text x="83.4905%" y="591.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (265 samples, 0.38%)</title><rect x="83.2405%" y="565" width="0.3825%" height="15" fill="rgb(245,184,46)" fg:x="57664" fg:w="265"/><text x="83.4905%" y="575.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (265 samples, 0.38%)</title><rect x="83.2405%" y="549" width="0.3825%" height="15" fill="rgb(253,73,16)" fg:x="57664" fg:w="265"/><text x="83.4905%" y="559.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (256 samples, 0.37%)</title><rect x="83.2535%" y="533" width="0.3695%" height="15" fill="rgb(206,94,45)" fg:x="57673" fg:w="256"/><text x="83.5035%" y="543.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (256 samples, 0.37%)</title><rect x="83.2535%" y="517" width="0.3695%" height="15" fill="rgb(236,83,27)" fg:x="57673" fg:w="256"/><text x="83.5035%" y="527.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (256 samples, 0.37%)</title><rect x="83.2535%" y="501" width="0.3695%" height="15" fill="rgb(220,196,8)" fg:x="57673" fg:w="256"/><text x="83.5035%" y="511.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (256 samples, 0.37%)</title><rect x="83.2535%" y="485" width="0.3695%" height="15" fill="rgb(254,185,14)" fg:x="57673" fg:w="256"/><text x="83.5035%" y="495.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (248 samples, 0.36%)</title><rect x="83.2650%" y="469" width="0.3580%" height="15" fill="rgb(226,50,22)" fg:x="57681" fg:w="248"/><text x="83.5150%" y="479.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (243 samples, 0.35%)</title><rect x="83.2722%" y="453" width="0.3508%" height="15" fill="rgb(253,147,0)" fg:x="57686" fg:w="243"/><text x="83.5222%" y="463.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (243 samples, 0.35%)</title><rect x="83.2722%" y="437" width="0.3508%" height="15" fill="rgb(252,46,33)" fg:x="57686" fg:w="243"/><text x="83.5222%" y="447.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (243 samples, 0.35%)</title><rect x="83.2722%" y="421" width="0.3508%" height="15" fill="rgb(242,22,54)" fg:x="57686" fg:w="243"/><text x="83.5222%" y="431.50"></text></g><g><title>__lll_lock_wake_private (8 samples, 0.01%)</title><rect x="83.6374%" y="613" width="0.0115%" height="15" fill="rgb(223,178,32)" fg:x="57939" fg:w="8"/><text x="83.8874%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="83.6389%" y="597" width="0.0101%" height="15" fill="rgb(214,106,53)" fg:x="57940" fg:w="7"/><text x="83.8889%" y="607.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="83.6389%" y="581" width="0.0101%" height="15" fill="rgb(232,65,50)" fg:x="57940" fg:w="7"/><text x="83.8889%" y="591.50"></text></g><g><title>__lll_lock_wait_private (54 samples, 0.08%)</title><rect x="83.6952%" y="597" width="0.0780%" height="15" fill="rgb(231,110,28)" fg:x="57979" fg:w="54"/><text x="83.9452%" y="607.50"></text></g><g><title>[unknown] (54 samples, 0.08%)</title><rect x="83.6952%" y="581" width="0.0780%" height="15" fill="rgb(216,71,40)" fg:x="57979" fg:w="54"/><text x="83.9452%" y="591.50"></text></g><g><title>[unknown] (53 samples, 0.08%)</title><rect x="83.6966%" y="565" width="0.0765%" height="15" fill="rgb(229,89,53)" fg:x="57980" fg:w="53"/><text x="83.9466%" y="575.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="83.7010%" y="549" width="0.0722%" height="15" fill="rgb(210,124,14)" fg:x="57983" fg:w="50"/><text x="83.9510%" y="559.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="83.7067%" y="533" width="0.0664%" height="15" fill="rgb(236,213,6)" fg:x="57987" fg:w="46"/><text x="83.9567%" y="543.50"></text></g><g><title>[unknown] (45 samples, 0.06%)</title><rect x="83.7082%" y="517" width="0.0650%" height="15" fill="rgb(228,41,5)" fg:x="57988" fg:w="45"/><text x="83.9582%" y="527.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="83.7168%" y="501" width="0.0563%" height="15" fill="rgb(221,167,25)" fg:x="57994" fg:w="39"/><text x="83.9668%" y="511.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="83.7168%" y="485" width="0.0563%" height="15" fill="rgb(228,144,37)" fg:x="57994" fg:w="39"/><text x="83.9668%" y="495.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="83.7226%" y="469" width="0.0505%" height="15" fill="rgb(227,189,38)" fg:x="57998" fg:w="35"/><text x="83.9726%" y="479.50"></text></g><g><title>[unknown] (33 samples, 0.05%)</title><rect x="83.7255%" y="453" width="0.0476%" height="15" fill="rgb(218,8,2)" fg:x="58000" fg:w="33"/><text x="83.9755%" y="463.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="83.7428%" y="437" width="0.0303%" height="15" fill="rgb(209,61,28)" fg:x="58012" fg:w="21"/><text x="83.9928%" y="447.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="83.7471%" y="421" width="0.0260%" height="15" fill="rgb(233,140,39)" fg:x="58015" fg:w="18"/><text x="83.9971%" y="431.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="83.7573%" y="405" width="0.0159%" height="15" fill="rgb(251,66,48)" fg:x="58022" fg:w="11"/><text x="84.0073%" y="415.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (7 samples, 0.01%)</title><rect x="83.7731%" y="597" width="0.0101%" height="15" fill="rgb(210,44,45)" fg:x="58033" fg:w="7"/><text x="84.0231%" y="607.50"></text></g><g><title>malloc_consolidate (7 samples, 0.01%)</title><rect x="83.7731%" y="581" width="0.0101%" height="15" fill="rgb(214,136,46)" fg:x="58033" fg:w="7"/><text x="84.0231%" y="591.50"></text></g><g><title>_int_free (94 samples, 0.14%)</title><rect x="83.6490%" y="613" width="0.1357%" height="15" fill="rgb(207,130,50)" fg:x="57947" fg:w="94"/><text x="83.8990%" y="623.50"></text></g><g><title>cfree@GLIBC_2.2.5 (106 samples, 0.15%)</title><rect x="83.6346%" y="629" width="0.1530%" height="15" fill="rgb(228,102,49)" fg:x="57937" fg:w="106"/><text x="83.8846%" y="639.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (118 samples, 0.17%)</title><rect x="83.6230%" y="709" width="0.1703%" height="15" fill="rgb(253,55,1)" fg:x="57929" fg:w="118"/><text x="83.8730%" y="719.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (113 samples, 0.16%)</title><rect x="83.6302%" y="693" width="0.1631%" height="15" fill="rgb(238,222,9)" fg:x="57934" fg:w="113"/><text x="83.8802%" y="703.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::deallocate (112 samples, 0.16%)</title><rect x="83.6317%" y="677" width="0.1617%" height="15" fill="rgb(246,99,6)" fg:x="57935" fg:w="112"/><text x="83.8817%" y="687.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::deallocate (112 samples, 0.16%)</title><rect x="83.6317%" y="661" width="0.1617%" height="15" fill="rgb(219,110,26)" fg:x="57935" fg:w="112"/><text x="83.8817%" y="671.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::deallocate (112 samples, 0.16%)</title><rect x="83.6317%" y="645" width="0.1617%" height="15" fill="rgb(239,160,33)" fg:x="57935" fg:w="112"/><text x="83.8817%" y="655.50"></text></g><g><title>_int_free (14 samples, 0.02%)</title><rect x="83.8468%" y="565" width="0.0202%" height="15" fill="rgb(220,202,23)" fg:x="58084" fg:w="14"/><text x="84.0968%" y="575.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (2,106 samples, 3.04%)</title><rect x="80.8341%" y="1061" width="3.0401%" height="15" fill="rgb(208,80,26)" fg:x="55997" fg:w="2106"/><text x="81.0841%" y="1071.50">std..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (2,106 samples, 3.04%)</title><rect x="80.8341%" y="1045" width="3.0401%" height="15" fill="rgb(243,85,7)" fg:x="55997" fg:w="2106"/><text x="81.0841%" y="1055.50">voi..</text></g><g><title>void std::_Destroy&lt;CBlock&gt; (2,106 samples, 3.04%)</title><rect x="80.8341%" y="1029" width="3.0401%" height="15" fill="rgb(228,77,47)" fg:x="55997" fg:w="2106"/><text x="81.0841%" y="1039.50">voi..</text></g><g><title>void std::destroy_at&lt;CBlock&gt; (2,106 samples, 3.04%)</title><rect x="80.8341%" y="1013" width="3.0401%" height="15" fill="rgb(212,226,8)" fg:x="55997" fg:w="2106"/><text x="81.0841%" y="1023.50">voi..</text></g><g><title>CBlock::~CBlock (2,106 samples, 3.04%)</title><rect x="80.8341%" y="997" width="3.0401%" height="15" fill="rgb(241,120,54)" fg:x="55997" fg:w="2106"/><text x="81.0841%" y="1007.50">CBl..</text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (2,106 samples, 3.04%)</title><rect x="80.8341%" y="981" width="3.0401%" height="15" fill="rgb(226,80,16)" fg:x="55997" fg:w="2106"/><text x="81.0841%" y="991.50">std..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (2,106 samples, 3.04%)</title><rect x="80.8341%" y="965" width="3.0401%" height="15" fill="rgb(240,76,13)" fg:x="55997" fg:w="2106"/><text x="81.0841%" y="975.50">voi..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (2,106 samples, 3.04%)</title><rect x="80.8341%" y="949" width="3.0401%" height="15" fill="rgb(252,74,8)" fg:x="55997" fg:w="2106"/><text x="81.0841%" y="959.50">voi..</text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (2,106 samples, 3.04%)</title><rect x="80.8341%" y="933" width="3.0401%" height="15" fill="rgb(244,155,2)" fg:x="55997" fg:w="2106"/><text x="81.0841%" y="943.50">voi..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (2,100 samples, 3.03%)</title><rect x="80.8427%" y="917" width="3.0314%" height="15" fill="rgb(215,81,35)" fg:x="56003" fg:w="2100"/><text x="81.0927%" y="927.50">voi..</text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (2,100 samples, 3.03%)</title><rect x="80.8427%" y="901" width="3.0314%" height="15" fill="rgb(206,55,2)" fg:x="56003" fg:w="2100"/><text x="81.0927%" y="911.50">voi..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (2,100 samples, 3.03%)</title><rect x="80.8427%" y="885" width="3.0314%" height="15" fill="rgb(231,2,34)" fg:x="56003" fg:w="2100"/><text x="81.0927%" y="895.50">std..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (2,100 samples, 3.03%)</title><rect x="80.8427%" y="869" width="3.0314%" height="15" fill="rgb(242,176,48)" fg:x="56003" fg:w="2100"/><text x="81.0927%" y="879.50">std..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (2,100 samples, 3.03%)</title><rect x="80.8427%" y="853" width="3.0314%" height="15" fill="rgb(249,31,36)" fg:x="56003" fg:w="2100"/><text x="81.0927%" y="863.50">std..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (2,100 samples, 3.03%)</title><rect x="80.8427%" y="837" width="3.0314%" height="15" fill="rgb(205,18,17)" fg:x="56003" fg:w="2100"/><text x="81.0927%" y="847.50">std..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (2,085 samples, 3.01%)</title><rect x="80.8644%" y="821" width="3.0098%" height="15" fill="rgb(254,130,5)" fg:x="56018" fg:w="2085"/><text x="81.1144%" y="831.50">std..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (655 samples, 0.95%)</title><rect x="82.9287%" y="805" width="0.9455%" height="15" fill="rgb(229,42,45)" fg:x="57448" fg:w="655"/><text x="83.1787%" y="815.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (647 samples, 0.93%)</title><rect x="82.9402%" y="789" width="0.9340%" height="15" fill="rgb(245,95,25)" fg:x="57456" fg:w="647"/><text x="83.1902%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (647 samples, 0.93%)</title><rect x="82.9402%" y="773" width="0.9340%" height="15" fill="rgb(249,193,38)" fg:x="57456" fg:w="647"/><text x="83.1902%" y="783.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (647 samples, 0.93%)</title><rect x="82.9402%" y="757" width="0.9340%" height="15" fill="rgb(241,140,43)" fg:x="57456" fg:w="647"/><text x="83.1902%" y="767.50"></text></g><g><title>CTransaction::~CTransaction (647 samples, 0.93%)</title><rect x="82.9402%" y="741" width="0.9340%" height="15" fill="rgb(245,78,48)" fg:x="57456" fg:w="647"/><text x="83.1902%" y="751.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (174 samples, 0.25%)</title><rect x="83.6230%" y="725" width="0.2512%" height="15" fill="rgb(214,92,39)" fg:x="57929" fg:w="174"/><text x="83.8730%" y="735.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (56 samples, 0.08%)</title><rect x="83.7933%" y="709" width="0.0808%" height="15" fill="rgb(211,189,14)" fg:x="58047" fg:w="56"/><text x="84.0433%" y="719.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (56 samples, 0.08%)</title><rect x="83.7933%" y="693" width="0.0808%" height="15" fill="rgb(218,7,24)" fg:x="58047" fg:w="56"/><text x="84.0433%" y="703.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (56 samples, 0.08%)</title><rect x="83.7933%" y="677" width="0.0808%" height="15" fill="rgb(224,200,49)" fg:x="58047" fg:w="56"/><text x="84.0433%" y="687.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (42 samples, 0.06%)</title><rect x="83.8136%" y="661" width="0.0606%" height="15" fill="rgb(218,210,14)" fg:x="58061" fg:w="42"/><text x="84.0636%" y="671.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (42 samples, 0.06%)</title><rect x="83.8136%" y="645" width="0.0606%" height="15" fill="rgb(234,142,31)" fg:x="58061" fg:w="42"/><text x="84.0636%" y="655.50"></text></g><g><title>CTxOut::~CTxOut (42 samples, 0.06%)</title><rect x="83.8136%" y="629" width="0.0606%" height="15" fill="rgb(227,165,2)" fg:x="58061" fg:w="42"/><text x="84.0636%" y="639.50"></text></g><g><title>CScript::~CScript (42 samples, 0.06%)</title><rect x="83.8136%" y="613" width="0.0606%" height="15" fill="rgb(232,44,46)" fg:x="58061" fg:w="42"/><text x="84.0636%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (42 samples, 0.06%)</title><rect x="83.8136%" y="597" width="0.0606%" height="15" fill="rgb(236,149,47)" fg:x="58061" fg:w="42"/><text x="84.0636%" y="607.50"></text></g><g><title>cfree@GLIBC_2.2.5 (29 samples, 0.04%)</title><rect x="83.8323%" y="581" width="0.0419%" height="15" fill="rgb(227,45,31)" fg:x="58074" fg:w="29"/><text x="84.0823%" y="591.50"></text></g><g><title>SerialTaskRunner::ProcessQueue (5,379 samples, 7.76%)</title><rect x="76.1108%" y="1253" width="7.7648%" height="15" fill="rgb(240,176,51)" fg:x="52725" fg:w="5379"/><text x="76.3608%" y="1263.50">SerialTaskR..</text></g><g><title>std::function&lt;void ()&gt;::~function (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1237" width="3.0877%" height="15" fill="rgb(249,146,41)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1247.50">std..</text></g><g><title>std::_Function_base::~_Function_base (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1221" width="3.0877%" height="15" fill="rgb(213,208,4)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1231.50">std..</text></g><g><title>_M_manager (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1205" width="3.0877%" height="15" fill="rgb(245,84,36)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1215.50">_M_..</text></g><g><title>_M_manager (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1189" width="3.0877%" height="15" fill="rgb(254,84,18)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1199.50">_M_..</text></g><g><title>_M_destroy (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1173" width="3.0877%" height="15" fill="rgb(225,38,54)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1183.50">_M_..</text></g><g><title>~&lt;lambda&gt; (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1157" width="3.0877%" height="15" fill="rgb(246,50,30)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1167.50">~&lt;l..</text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1141" width="3.0877%" height="15" fill="rgb(246,148,9)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1151.50">std..</text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1125" width="3.0877%" height="15" fill="rgb(223,75,4)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1135.50">std..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1109" width="3.0877%" height="15" fill="rgb(239,148,41)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1119.50">std..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1093" width="3.0877%" height="15" fill="rgb(205,195,3)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1103.50">std..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (2,139 samples, 3.09%)</title><rect x="80.7879%" y="1077" width="3.0877%" height="15" fill="rgb(254,161,1)" fg:x="55965" fg:w="2139"/><text x="81.0379%" y="1087.50">std..</text></g><g><title>CScheduler::serviceQueue (5,412 samples, 7.81%)</title><rect x="76.0733%" y="1285" width="7.8125%" height="15" fill="rgb(211,229,8)" fg:x="52699" fg:w="5412"/><text x="76.3233%" y="1295.50">CScheduler:..</text></g><g><title>std::function&lt;void ()&gt;::operator (5,386 samples, 7.77%)</title><rect x="76.1108%" y="1269" width="7.7749%" height="15" fill="rgb(220,97,9)" fg:x="52725" fg:w="5386"/><text x="76.3608%" y="1279.50">std::functi..</text></g><g><title>_M_invoke (7 samples, 0.01%)</title><rect x="83.8756%" y="1253" width="0.0101%" height="15" fill="rgb(240,218,8)" fg:x="58104" fg:w="7"/><text x="84.1256%" y="1263.50"></text></g><g><title>__clone (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1445" width="7.8139%" height="15" fill="rgb(250,44,0)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1455.50">__clone</text></g><g><title>start_thread (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1429" width="7.8139%" height="15" fill="rgb(236,41,53)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1439.50">start_thread</text></g><g><title>execute_native_thread_routine (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1413" width="7.8139%" height="15" fill="rgb(218,227,13)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1423.50">execute_nat..</text></g><g><title>_M_run (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1397" width="7.8139%" height="15" fill="rgb(217,94,32)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1407.50">_M_run</text></g><g><title>operator (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1381" width="7.8139%" height="15" fill="rgb(213,217,12)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1391.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1365" width="7.8139%" height="15" fill="rgb(229,13,46)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1375.50">_M_invoke&lt;0..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1349" width="7.8139%" height="15" fill="rgb(243,139,5)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1359.50">__invoke&lt;vo..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1333" width="7.8139%" height="15" fill="rgb(249,38,45)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1343.50">std::thread..</text></g><g><title>util::TraceThread (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1317" width="7.8139%" height="15" fill="rgb(216,70,11)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1327.50">util::Trace..</text></g><g><title>std::function&lt;void ()&gt;::operator (5,413 samples, 7.81%)</title><rect x="76.0733%" y="1301" width="7.8139%" height="15" fill="rgb(253,101,25)" fg:x="52699" fg:w="5413"/><text x="76.3233%" y="1311.50">std::functi..</text></g><g><title>_int_free (56 samples, 0.08%)</title><rect x="83.8872%" y="1445" width="0.0808%" height="15" fill="rgb(207,197,30)" fg:x="58112" fg:w="56"/><text x="84.1372%" y="1455.50"></text></g><g><title>cfree@GLIBC_2.2.5 (303 samples, 0.44%)</title><rect x="83.9810%" y="1445" width="0.4374%" height="15" fill="rgb(238,87,13)" fg:x="58177" fg:w="303"/><text x="84.2310%" y="1455.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (148 samples, 0.21%)</title><rect x="84.4242%" y="1445" width="0.2136%" height="15" fill="rgb(215,155,8)" fg:x="58484" fg:w="148"/><text x="84.6742%" y="1455.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (148 samples, 0.21%)</title><rect x="84.4242%" y="1429" width="0.2136%" height="15" fill="rgb(239,166,38)" fg:x="58484" fg:w="148"/><text x="84.6742%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (148 samples, 0.21%)</title><rect x="84.4242%" y="1413" width="0.2136%" height="15" fill="rgb(240,194,35)" fg:x="58484" fg:w="148"/><text x="84.6742%" y="1423.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (148 samples, 0.21%)</title><rect x="84.4242%" y="1397" width="0.2136%" height="15" fill="rgb(219,10,44)" fg:x="58484" fg:w="148"/><text x="84.6742%" y="1407.50"></text></g><g><title>CBlock::~CBlock (148 samples, 0.21%)</title><rect x="84.4242%" y="1381" width="0.2136%" height="15" fill="rgb(251,220,35)" fg:x="58484" fg:w="148"/><text x="84.6742%" y="1391.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (148 samples, 0.21%)</title><rect x="84.4242%" y="1365" width="0.2136%" height="15" fill="rgb(218,117,13)" fg:x="58484" fg:w="148"/><text x="84.6742%" y="1375.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (148 samples, 0.21%)</title><rect x="84.4242%" y="1349" width="0.2136%" height="15" fill="rgb(221,213,40)" fg:x="58484" fg:w="148"/><text x="84.6742%" y="1359.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (148 samples, 0.21%)</title><rect x="84.4242%" y="1333" width="0.2136%" height="15" fill="rgb(251,224,35)" fg:x="58484" fg:w="148"/><text x="84.6742%" y="1343.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (148 samples, 0.21%)</title><rect x="84.4242%" y="1317" width="0.2136%" height="15" fill="rgb(241,33,39)" fg:x="58484" fg:w="148"/><text x="84.6742%" y="1327.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (145 samples, 0.21%)</title><rect x="84.4285%" y="1301" width="0.2093%" height="15" fill="rgb(222,74,17)" fg:x="58487" fg:w="145"/><text x="84.6785%" y="1311.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (145 samples, 0.21%)</title><rect x="84.4285%" y="1285" width="0.2093%" height="15" fill="rgb(225,103,0)" fg:x="58487" fg:w="145"/><text x="84.6785%" y="1295.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (145 samples, 0.21%)</title><rect x="84.4285%" y="1269" width="0.2093%" height="15" fill="rgb(240,0,12)" fg:x="58487" fg:w="145"/><text x="84.6785%" y="1279.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (145 samples, 0.21%)</title><rect x="84.4285%" y="1253" width="0.2093%" height="15" fill="rgb(233,213,37)" fg:x="58487" fg:w="145"/><text x="84.6785%" y="1263.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (145 samples, 0.21%)</title><rect x="84.4285%" y="1237" width="0.2093%" height="15" fill="rgb(225,84,52)" fg:x="58487" fg:w="145"/><text x="84.6785%" y="1247.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (143 samples, 0.21%)</title><rect x="84.4314%" y="1221" width="0.2064%" height="15" fill="rgb(247,160,51)" fg:x="58489" fg:w="143"/><text x="84.6814%" y="1231.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (142 samples, 0.20%)</title><rect x="84.4328%" y="1205" width="0.2050%" height="15" fill="rgb(244,60,51)" fg:x="58490" fg:w="142"/><text x="84.6828%" y="1215.50"></text></g><g><title>_int_free (137 samples, 0.20%)</title><rect x="84.4400%" y="1189" width="0.1978%" height="15" fill="rgb(233,114,7)" fg:x="58495" fg:w="137"/><text x="84.6900%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (21 samples, 0.03%)</title><rect x="84.6652%" y="1221" width="0.0303%" height="15" fill="rgb(246,136,16)" fg:x="58651" fg:w="21"/><text x="84.9152%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (19 samples, 0.03%)</title><rect x="84.6681%" y="1205" width="0.0274%" height="15" fill="rgb(243,114,45)" fg:x="58653" fg:w="19"/><text x="84.9181%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (11 samples, 0.02%)</title><rect x="84.6797%" y="1189" width="0.0159%" height="15" fill="rgb(247,183,43)" fg:x="58661" fg:w="11"/><text x="84.9297%" y="1199.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (11 samples, 0.02%)</title><rect x="84.6797%" y="1173" width="0.0159%" height="15" fill="rgb(251,210,42)" fg:x="58661" fg:w="11"/><text x="84.9297%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (11 samples, 0.02%)</title><rect x="84.6797%" y="1157" width="0.0159%" height="15" fill="rgb(221,88,35)" fg:x="58661" fg:w="11"/><text x="84.9297%" y="1167.50"></text></g><g><title>_int_free (12 samples, 0.02%)</title><rect x="84.7288%" y="1045" width="0.0173%" height="15" fill="rgb(242,21,20)" fg:x="58695" fg:w="12"/><text x="84.9788%" y="1055.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (71 samples, 0.10%)</title><rect x="84.6508%" y="1365" width="0.1025%" height="15" fill="rgb(233,226,36)" fg:x="58641" fg:w="71"/><text x="84.9008%" y="1375.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (66 samples, 0.10%)</title><rect x="84.6580%" y="1349" width="0.0953%" height="15" fill="rgb(243,189,34)" fg:x="58646" fg:w="66"/><text x="84.9080%" y="1359.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (66 samples, 0.10%)</title><rect x="84.6580%" y="1333" width="0.0953%" height="15" fill="rgb(207,145,50)" fg:x="58646" fg:w="66"/><text x="84.9080%" y="1343.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (66 samples, 0.10%)</title><rect x="84.6580%" y="1317" width="0.0953%" height="15" fill="rgb(242,1,50)" fg:x="58646" fg:w="66"/><text x="84.9080%" y="1327.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (65 samples, 0.09%)</title><rect x="84.6595%" y="1301" width="0.0938%" height="15" fill="rgb(231,65,32)" fg:x="58647" fg:w="65"/><text x="84.9095%" y="1311.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (65 samples, 0.09%)</title><rect x="84.6595%" y="1285" width="0.0938%" height="15" fill="rgb(208,68,49)" fg:x="58647" fg:w="65"/><text x="84.9095%" y="1295.50"></text></g><g><title>CTxIn::~CTxIn (65 samples, 0.09%)</title><rect x="84.6595%" y="1269" width="0.0938%" height="15" fill="rgb(253,54,49)" fg:x="58647" fg:w="65"/><text x="84.9095%" y="1279.50"></text></g><g><title>CScriptWitness::~CScriptWitness (61 samples, 0.09%)</title><rect x="84.6652%" y="1253" width="0.0881%" height="15" fill="rgb(245,186,24)" fg:x="58651" fg:w="61"/><text x="84.9152%" y="1263.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (61 samples, 0.09%)</title><rect x="84.6652%" y="1237" width="0.0881%" height="15" fill="rgb(209,2,41)" fg:x="58651" fg:w="61"/><text x="84.9152%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (40 samples, 0.06%)</title><rect x="84.6956%" y="1221" width="0.0577%" height="15" fill="rgb(242,208,54)" fg:x="58672" fg:w="40"/><text x="84.9456%" y="1231.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (40 samples, 0.06%)</title><rect x="84.6956%" y="1205" width="0.0577%" height="15" fill="rgb(225,9,51)" fg:x="58672" fg:w="40"/><text x="84.9456%" y="1215.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (40 samples, 0.06%)</title><rect x="84.6956%" y="1189" width="0.0577%" height="15" fill="rgb(207,207,25)" fg:x="58672" fg:w="40"/><text x="84.9456%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (35 samples, 0.05%)</title><rect x="84.7028%" y="1173" width="0.0505%" height="15" fill="rgb(253,96,18)" fg:x="58677" fg:w="35"/><text x="84.9528%" y="1183.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (35 samples, 0.05%)</title><rect x="84.7028%" y="1157" width="0.0505%" height="15" fill="rgb(252,215,20)" fg:x="58677" fg:w="35"/><text x="84.9528%" y="1167.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (35 samples, 0.05%)</title><rect x="84.7028%" y="1141" width="0.0505%" height="15" fill="rgb(245,227,26)" fg:x="58677" fg:w="35"/><text x="84.9528%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (35 samples, 0.05%)</title><rect x="84.7028%" y="1125" width="0.0505%" height="15" fill="rgb(241,208,0)" fg:x="58677" fg:w="35"/><text x="84.9528%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (27 samples, 0.04%)</title><rect x="84.7143%" y="1109" width="0.0390%" height="15" fill="rgb(224,130,10)" fg:x="58685" fg:w="27"/><text x="84.9643%" y="1119.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (22 samples, 0.03%)</title><rect x="84.7215%" y="1093" width="0.0318%" height="15" fill="rgb(237,29,0)" fg:x="58690" fg:w="22"/><text x="84.9715%" y="1103.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (22 samples, 0.03%)</title><rect x="84.7215%" y="1077" width="0.0318%" height="15" fill="rgb(219,27,41)" fg:x="58690" fg:w="22"/><text x="84.9715%" y="1087.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (22 samples, 0.03%)</title><rect x="84.7215%" y="1061" width="0.0318%" height="15" fill="rgb(245,101,19)" fg:x="58690" fg:w="22"/><text x="84.9715%" y="1071.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (7 samples, 0.01%)</title><rect x="84.7533%" y="1349" width="0.0101%" height="15" fill="rgb(243,44,37)" fg:x="58712" fg:w="7"/><text x="85.0033%" y="1359.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (106 samples, 0.15%)</title><rect x="84.6436%" y="1445" width="0.1530%" height="15" fill="rgb(228,213,43)" fg:x="58636" fg:w="106"/><text x="84.8936%" y="1455.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (101 samples, 0.15%)</title><rect x="84.6508%" y="1429" width="0.1458%" height="15" fill="rgb(219,163,21)" fg:x="58641" fg:w="101"/><text x="84.9008%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (101 samples, 0.15%)</title><rect x="84.6508%" y="1413" width="0.1458%" height="15" fill="rgb(234,86,24)" fg:x="58641" fg:w="101"/><text x="84.9008%" y="1423.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (101 samples, 0.15%)</title><rect x="84.6508%" y="1397" width="0.1458%" height="15" fill="rgb(225,10,24)" fg:x="58641" fg:w="101"/><text x="84.9008%" y="1407.50"></text></g><g><title>CTransaction::~CTransaction (101 samples, 0.15%)</title><rect x="84.6508%" y="1381" width="0.1458%" height="15" fill="rgb(218,109,7)" fg:x="58641" fg:w="101"/><text x="84.9008%" y="1391.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (30 samples, 0.04%)</title><rect x="84.7533%" y="1365" width="0.0433%" height="15" fill="rgb(210,20,26)" fg:x="58712" fg:w="30"/><text x="85.0033%" y="1375.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (23 samples, 0.03%)</title><rect x="84.7634%" y="1349" width="0.0332%" height="15" fill="rgb(216,18,1)" fg:x="58719" fg:w="23"/><text x="85.0134%" y="1359.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (23 samples, 0.03%)</title><rect x="84.7634%" y="1333" width="0.0332%" height="15" fill="rgb(206,163,23)" fg:x="58719" fg:w="23"/><text x="85.0134%" y="1343.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (23 samples, 0.03%)</title><rect x="84.7634%" y="1317" width="0.0332%" height="15" fill="rgb(229,150,31)" fg:x="58719" fg:w="23"/><text x="85.0134%" y="1327.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (18 samples, 0.03%)</title><rect x="84.7706%" y="1301" width="0.0260%" height="15" fill="rgb(231,10,5)" fg:x="58724" fg:w="18"/><text x="85.0206%" y="1311.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (18 samples, 0.03%)</title><rect x="84.7706%" y="1285" width="0.0260%" height="15" fill="rgb(250,40,50)" fg:x="58724" fg:w="18"/><text x="85.0206%" y="1295.50"></text></g><g><title>CTxOut::~CTxOut (18 samples, 0.03%)</title><rect x="84.7706%" y="1269" width="0.0260%" height="15" fill="rgb(217,119,7)" fg:x="58724" fg:w="18"/><text x="85.0206%" y="1279.50"></text></g><g><title>CScript::~CScript (18 samples, 0.03%)</title><rect x="84.7706%" y="1253" width="0.0260%" height="15" fill="rgb(245,214,40)" fg:x="58724" fg:w="18"/><text x="85.0206%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (18 samples, 0.03%)</title><rect x="84.7706%" y="1237" width="0.0260%" height="15" fill="rgb(216,187,1)" fg:x="58724" fg:w="18"/><text x="85.0206%" y="1247.50"></text></g><g><title>b-scheduler (7,508 samples, 10.84%)</title><rect x="73.9671%" y="1461" width="10.8381%" height="15" fill="rgb(237,146,21)" fg:x="51240" fg:w="7508"/><text x="74.2171%" y="1471.50">b-scheduler</text></g><g><title>b-scriptch.7 (8 samples, 0.01%)</title><rect x="84.8284%" y="1461" width="0.0115%" height="15" fill="rgb(210,174,47)" fg:x="58764" fg:w="8"/><text x="85.0784%" y="1471.50"></text></g><g><title>__clone (8 samples, 0.01%)</title><rect x="84.8284%" y="1445" width="0.0115%" height="15" fill="rgb(218,111,39)" fg:x="58764" fg:w="8"/><text x="85.0784%" y="1455.50"></text></g><g><title>start_thread (8 samples, 0.01%)</title><rect x="84.8284%" y="1429" width="0.0115%" height="15" fill="rgb(224,95,19)" fg:x="58764" fg:w="8"/><text x="85.0784%" y="1439.50"></text></g><g><title>execute_native_thread_routine (8 samples, 0.01%)</title><rect x="84.8284%" y="1413" width="0.0115%" height="15" fill="rgb(234,15,38)" fg:x="58764" fg:w="8"/><text x="85.0784%" y="1423.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (8 samples, 0.01%)</title><rect x="84.8284%" y="1397" width="0.0115%" height="15" fill="rgb(246,56,12)" fg:x="58764" fg:w="8"/><text x="85.0784%" y="1407.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (8 samples, 0.01%)</title><rect x="84.8284%" y="1381" width="0.0115%" height="15" fill="rgb(247,16,17)" fg:x="58764" fg:w="8"/><text x="85.0784%" y="1391.50"></text></g><g><title>__futex_abstimed_wait_common (8 samples, 0.01%)</title><rect x="84.8284%" y="1365" width="0.0115%" height="15" fill="rgb(215,151,11)" fg:x="58764" fg:w="8"/><text x="85.0784%" y="1375.50"></text></g><g><title>__memcmp_evex_movbe (28 samples, 0.04%)</title><rect x="84.8572%" y="1429" width="0.0404%" height="15" fill="rgb(225,16,24)" fg:x="58784" fg:w="28"/><text x="85.1072%" y="1439.50"></text></g><g><title>__memmove_avx512_unaligned_erms (8 samples, 0.01%)</title><rect x="84.8977%" y="1429" width="0.0115%" height="15" fill="rgb(217,117,5)" fg:x="58812" fg:w="8"/><text x="85.1477%" y="1439.50"></text></g><g><title>_int_free (34 samples, 0.05%)</title><rect x="84.9092%" y="1429" width="0.0491%" height="15" fill="rgb(246,187,53)" fg:x="58820" fg:w="34"/><text x="85.1592%" y="1439.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.02%)</title><rect x="84.9597%" y="1429" width="0.0202%" height="15" fill="rgb(241,71,40)" fg:x="58855" fg:w="14"/><text x="85.2097%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (25 samples, 0.04%)</title><rect x="84.9814%" y="1429" width="0.0361%" height="15" fill="rgb(231,67,39)" fg:x="58870" fg:w="25"/><text x="85.2314%" y="1439.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (25 samples, 0.04%)</title><rect x="85.0232%" y="1429" width="0.0361%" height="15" fill="rgb(222,120,24)" fg:x="58899" fg:w="25"/><text x="85.2732%" y="1439.50"></text></g><g><title>malloc_consolidate (50 samples, 0.07%)</title><rect x="85.0680%" y="1429" width="0.0722%" height="15" fill="rgb(248,3,3)" fg:x="58930" fg:w="50"/><text x="85.3180%" y="1439.50"></text></g><g><title>[[heap]] (204 samples, 0.29%)</title><rect x="84.8572%" y="1445" width="0.2945%" height="15" fill="rgb(228,218,5)" fg:x="58784" fg:w="204"/><text x="85.1072%" y="1455.50"></text></g><g><title>__memcmp_evex_movbe (29 samples, 0.04%)</title><rect x="85.1532%" y="1429" width="0.0419%" height="15" fill="rgb(212,202,43)" fg:x="58989" fg:w="29"/><text x="85.4032%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (17 samples, 0.02%)</title><rect x="85.2080%" y="1429" width="0.0245%" height="15" fill="rgb(235,183,2)" fg:x="59027" fg:w="17"/><text x="85.4580%" y="1439.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (21 samples, 0.03%)</title><rect x="85.2383%" y="1429" width="0.0303%" height="15" fill="rgb(230,165,10)" fg:x="59048" fg:w="21"/><text x="85.4883%" y="1439.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (28 samples, 0.04%)</title><rect x="85.2701%" y="1429" width="0.0404%" height="15" fill="rgb(219,54,40)" fg:x="59070" fg:w="28"/><text x="85.5201%" y="1439.50"></text></g><g><title>[[stack]] (135 samples, 0.19%)</title><rect x="85.1517%" y="1445" width="0.1949%" height="15" fill="rgb(244,73,9)" fg:x="58988" fg:w="135"/><text x="85.4017%" y="1455.50"></text></g><g><title>unlink_chunk.isra.0 (9 samples, 0.01%)</title><rect x="85.3480%" y="1429" width="0.0130%" height="15" fill="rgb(212,32,45)" fg:x="59124" fg:w="9"/><text x="85.5980%" y="1439.50"></text></g><g><title>[anon] (11 samples, 0.02%)</title><rect x="85.3466%" y="1445" width="0.0159%" height="15" fill="rgb(205,58,31)" fg:x="59123" fg:w="11"/><text x="85.5966%" y="1455.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="85.3682%" y="1429" width="0.0390%" height="15" fill="rgb(250,120,43)" fg:x="59138" fg:w="27"/><text x="85.6182%" y="1439.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="85.3682%" y="1413" width="0.0390%" height="15" fill="rgb(235,13,10)" fg:x="59138" fg:w="27"/><text x="85.6182%" y="1423.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="85.3682%" y="1397" width="0.0390%" height="15" fill="rgb(232,219,31)" fg:x="59138" fg:w="27"/><text x="85.6182%" y="1407.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="85.3682%" y="1381" width="0.0390%" height="15" fill="rgb(218,157,51)" fg:x="59138" fg:w="27"/><text x="85.6182%" y="1391.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="85.3697%" y="1365" width="0.0375%" height="15" fill="rgb(211,91,52)" fg:x="59139" fg:w="26"/><text x="85.6197%" y="1375.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="85.3697%" y="1349" width="0.0375%" height="15" fill="rgb(240,173,1)" fg:x="59139" fg:w="26"/><text x="85.6197%" y="1359.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="85.3697%" y="1333" width="0.0375%" height="15" fill="rgb(248,20,47)" fg:x="59139" fg:w="26"/><text x="85.6197%" y="1343.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="85.3697%" y="1317" width="0.0375%" height="15" fill="rgb(217,221,40)" fg:x="59139" fg:w="26"/><text x="85.6197%" y="1327.50"></text></g><g><title>[unknown] (24 samples, 0.03%)</title><rect x="85.3726%" y="1301" width="0.0346%" height="15" fill="rgb(226,149,51)" fg:x="59141" fg:w="24"/><text x="85.6226%" y="1311.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="85.3740%" y="1285" width="0.0332%" height="15" fill="rgb(252,193,7)" fg:x="59142" fg:w="23"/><text x="85.6240%" y="1295.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="85.3755%" y="1269" width="0.0318%" height="15" fill="rgb(205,123,0)" fg:x="59143" fg:w="22"/><text x="85.6255%" y="1279.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3885%" y="1253" width="0.0188%" height="15" fill="rgb(233,173,25)" fg:x="59152" fg:w="13"/><text x="85.6385%" y="1263.50"></text></g><g><title>__memcmp_evex_movbe (45 samples, 0.06%)</title><rect x="85.4072%" y="1429" width="0.0650%" height="15" fill="rgb(216,63,32)" fg:x="59165" fg:w="45"/><text x="85.6572%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (27 samples, 0.04%)</title><rect x="85.4794%" y="1429" width="0.0390%" height="15" fill="rgb(209,56,45)" fg:x="59215" fg:w="27"/><text x="85.7294%" y="1439.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (17 samples, 0.02%)</title><rect x="85.5242%" y="1429" width="0.0245%" height="15" fill="rgb(226,111,49)" fg:x="59246" fg:w="17"/><text x="85.7742%" y="1439.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (12 samples, 0.02%)</title><rect x="85.5501%" y="1429" width="0.0173%" height="15" fill="rgb(244,181,21)" fg:x="59264" fg:w="12"/><text x="85.8001%" y="1439.50"></text></g><g><title>[unknown] (155 samples, 0.22%)</title><rect x="85.3668%" y="1445" width="0.2237%" height="15" fill="rgb(222,126,15)" fg:x="59137" fg:w="155"/><text x="85.6168%" y="1455.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (50 samples, 0.07%)</title><rect x="85.5949%" y="1301" width="0.0722%" height="15" fill="rgb(222,95,17)" fg:x="59295" fg:w="50"/><text x="85.8449%" y="1311.50"></text></g><g><title>cfree@GLIBC_2.2.5 (50 samples, 0.07%)</title><rect x="85.5949%" y="1285" width="0.0722%" height="15" fill="rgb(254,46,5)" fg:x="59295" fg:w="50"/><text x="85.8449%" y="1295.50"></text></g><g><title>_int_free (50 samples, 0.07%)</title><rect x="85.5949%" y="1269" width="0.0722%" height="15" fill="rgb(236,216,35)" fg:x="59295" fg:w="50"/><text x="85.8449%" y="1279.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (50 samples, 0.07%)</title><rect x="85.5949%" y="1253" width="0.0722%" height="15" fill="rgb(217,187,26)" fg:x="59295" fg:w="50"/><text x="85.8449%" y="1263.50"></text></g><g><title>malloc_consolidate (50 samples, 0.07%)</title><rect x="85.5949%" y="1237" width="0.0722%" height="15" fill="rgb(207,192,25)" fg:x="59295" fg:w="50"/><text x="85.8449%" y="1247.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (53 samples, 0.08%)</title><rect x="85.5949%" y="1317" width="0.0765%" height="15" fill="rgb(253,135,27)" fg:x="59295" fg:w="53"/><text x="85.8449%" y="1327.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (11 samples, 0.02%)</title><rect x="85.6743%" y="1269" width="0.0159%" height="15" fill="rgb(211,122,29)" fg:x="59350" fg:w="11"/><text x="85.9243%" y="1279.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (7 samples, 0.01%)</title><rect x="85.6801%" y="1253" width="0.0101%" height="15" fill="rgb(233,162,40)" fg:x="59354" fg:w="7"/><text x="85.9301%" y="1263.50"></text></g><g><title>leveldb::WriteBatch::Delete (10 samples, 0.01%)</title><rect x="85.6916%" y="1269" width="0.0144%" height="15" fill="rgb(222,184,47)" fg:x="59362" fg:w="10"/><text x="85.9416%" y="1279.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (9 samples, 0.01%)</title><rect x="85.6930%" y="1253" width="0.0130%" height="15" fill="rgb(249,99,23)" fg:x="59363" fg:w="9"/><text x="85.9430%" y="1263.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (9 samples, 0.01%)</title><rect x="85.6930%" y="1237" width="0.0130%" height="15" fill="rgb(214,60,12)" fg:x="59363" fg:w="9"/><text x="85.9430%" y="1247.50"></text></g><g><title>decltype  (7 samples, 0.01%)</title><rect x="85.6959%" y="1221" width="0.0101%" height="15" fill="rgb(250,229,36)" fg:x="59365" fg:w="7"/><text x="85.9459%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (7 samples, 0.01%)</title><rect x="85.6959%" y="1205" width="0.0101%" height="15" fill="rgb(232,195,10)" fg:x="59365" fg:w="7"/><text x="85.9459%" y="1215.50"></text></g><g><title>decltype (7 samples, 0.01%)</title><rect x="85.6959%" y="1189" width="0.0101%" height="15" fill="rgb(205,213,31)" fg:x="59365" fg:w="7"/><text x="85.9459%" y="1199.50"></text></g><g><title>CDBBatch::EraseImpl (91 samples, 0.13%)</title><rect x="85.6728%" y="1285" width="0.1314%" height="15" fill="rgb(237,43,8)" fg:x="59349" fg:w="91"/><text x="85.9228%" y="1295.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (67 samples, 0.10%)</title><rect x="85.7075%" y="1269" width="0.0967%" height="15" fill="rgb(216,208,3)" fg:x="59373" fg:w="67"/><text x="85.9575%" y="1279.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (65 samples, 0.09%)</title><rect x="85.7104%" y="1253" width="0.0938%" height="15" fill="rgb(228,179,44)" fg:x="59375" fg:w="65"/><text x="85.9604%" y="1263.50"></text></g><g><title>decltype  (48 samples, 0.07%)</title><rect x="85.7349%" y="1237" width="0.0693%" height="15" fill="rgb(230,192,27)" fg:x="59392" fg:w="48"/><text x="85.9849%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (48 samples, 0.07%)</title><rect x="85.7349%" y="1221" width="0.0693%" height="15" fill="rgb(251,30,38)" fg:x="59392" fg:w="48"/><text x="85.9849%" y="1231.50"></text></g><g><title>decltype (48 samples, 0.07%)</title><rect x="85.7349%" y="1205" width="0.0693%" height="15" fill="rgb(246,55,52)" fg:x="59392" fg:w="48"/><text x="85.9849%" y="1215.50"></text></g><g><title>DataStream::Xor (19 samples, 0.03%)</title><rect x="85.8114%" y="1253" width="0.0274%" height="15" fill="rgb(249,79,26)" fg:x="59445" fg:w="19"/><text x="86.0614%" y="1263.50"></text></g><g><title>util::Xor (19 samples, 0.03%)</title><rect x="85.8114%" y="1237" width="0.0274%" height="15" fill="rgb(220,202,16)" fg:x="59445" fg:w="19"/><text x="86.0614%" y="1247.50"></text></g><g><title>CDBBatch::WriteImpl (23 samples, 0.03%)</title><rect x="85.8071%" y="1269" width="0.0332%" height="15" fill="rgb(250,170,23)" fg:x="59442" fg:w="23"/><text x="86.0571%" y="1279.50"></text></g><g><title>DataStream::Xor (22 samples, 0.03%)</title><rect x="85.8504%" y="1237" width="0.0318%" height="15" fill="rgb(230,7,37)" fg:x="59472" fg:w="22"/><text x="86.1004%" y="1247.50"></text></g><g><title>util::Xor (22 samples, 0.03%)</title><rect x="85.8504%" y="1221" width="0.0318%" height="15" fill="rgb(213,71,1)" fg:x="59472" fg:w="22"/><text x="86.1004%" y="1231.50"></text></g><g><title>std::operator^= (7 samples, 0.01%)</title><rect x="85.8720%" y="1205" width="0.0101%" height="15" fill="rgb(227,87,39)" fg:x="59487" fg:w="7"/><text x="86.1220%" y="1215.50"></text></g><g><title>std::operator^ (7 samples, 0.01%)</title><rect x="85.8720%" y="1189" width="0.0101%" height="15" fill="rgb(210,41,29)" fg:x="59487" fg:w="7"/><text x="86.1220%" y="1199.50"></text></g><g><title>CDBBatch::WriteImpl (23 samples, 0.03%)</title><rect x="85.8504%" y="1253" width="0.0332%" height="15" fill="rgb(206,191,31)" fg:x="59472" fg:w="23"/><text x="86.1004%" y="1263.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (27 samples, 0.04%)</title><rect x="85.8504%" y="1269" width="0.0390%" height="15" fill="rgb(247,75,54)" fg:x="59472" fg:w="27"/><text x="86.1004%" y="1279.50"></text></g><g><title>CDBBatch::WriteImpl (9 samples, 0.01%)</title><rect x="85.8894%" y="1253" width="0.0130%" height="15" fill="rgb(208,54,50)" fg:x="59499" fg:w="9"/><text x="86.1394%" y="1263.50"></text></g><g><title>DataStream::Xor (8 samples, 0.01%)</title><rect x="85.8908%" y="1237" width="0.0115%" height="15" fill="rgb(214,90,37)" fg:x="59500" fg:w="8"/><text x="86.1408%" y="1247.50"></text></g><g><title>util::Xor (8 samples, 0.01%)</title><rect x="85.8908%" y="1221" width="0.0115%" height="15" fill="rgb(220,132,6)" fg:x="59500" fg:w="8"/><text x="86.1408%" y="1231.50"></text></g><g><title>leveldb::WriteBatch::Put (29 samples, 0.04%)</title><rect x="85.8894%" y="1269" width="0.0419%" height="15" fill="rgb(213,167,7)" fg:x="59499" fg:w="29"/><text x="86.1394%" y="1279.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (14 samples, 0.02%)</title><rect x="85.9110%" y="1253" width="0.0202%" height="15" fill="rgb(243,36,27)" fg:x="59514" fg:w="14"/><text x="86.1610%" y="1263.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (13 samples, 0.02%)</title><rect x="85.9125%" y="1237" width="0.0188%" height="15" fill="rgb(235,147,12)" fg:x="59515" fg:w="13"/><text x="86.1625%" y="1247.50"></text></g><g><title>CDBBatch::WriteImpl (100 samples, 0.14%)</title><rect x="85.8042%" y="1285" width="0.1444%" height="15" fill="rgb(212,198,44)" fg:x="59440" fg:w="100"/><text x="86.0542%" y="1295.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (11 samples, 0.02%)</title><rect x="85.9327%" y="1269" width="0.0159%" height="15" fill="rgb(218,68,50)" fg:x="59529" fg:w="11"/><text x="86.1827%" y="1279.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (11 samples, 0.02%)</title><rect x="85.9327%" y="1253" width="0.0159%" height="15" fill="rgb(224,79,48)" fg:x="59529" fg:w="11"/><text x="86.1827%" y="1263.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (100 samples, 0.14%)</title><rect x="85.9529%" y="1269" width="0.1444%" height="15" fill="rgb(213,191,50)" fg:x="59543" fg:w="100"/><text x="86.2029%" y="1279.50"></text></g><g><title>decltype  (10 samples, 0.01%)</title><rect x="86.0828%" y="1253" width="0.0144%" height="15" fill="rgb(254,146,10)" fg:x="59633" fg:w="10"/><text x="86.3328%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (10 samples, 0.01%)</title><rect x="86.0828%" y="1237" width="0.0144%" height="15" fill="rgb(215,175,11)" fg:x="59633" fg:w="10"/><text x="86.3328%" y="1247.50"></text></g><g><title>decltype (10 samples, 0.01%)</title><rect x="86.0828%" y="1221" width="0.0144%" height="15" fill="rgb(207,49,7)" fg:x="59633" fg:w="10"/><text x="86.3328%" y="1231.50"></text></g><g><title>CCoinsViewDB::BatchWrite (296 samples, 0.43%)</title><rect x="85.6714%" y="1301" width="0.4273%" height="15" fill="rgb(234,144,29)" fg:x="59348" fg:w="296"/><text x="85.9214%" y="1311.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (101 samples, 0.15%)</title><rect x="85.9529%" y="1285" width="0.1458%" height="15" fill="rgb(213,222,48)" fg:x="59543" fg:w="101"/><text x="86.2029%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.01%)</title><rect x="86.1160%" y="1221" width="0.0115%" height="15" fill="rgb(222,8,6)" fg:x="59656" fg:w="8"/><text x="86.3660%" y="1231.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (12 samples, 0.02%)</title><rect x="86.1304%" y="1221" width="0.0173%" height="15" fill="rgb(221,114,49)" fg:x="59666" fg:w="12"/><text x="86.3804%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (10 samples, 0.01%)</title><rect x="86.1478%" y="1221" width="0.0144%" height="15" fill="rgb(250,140,42)" fg:x="59678" fg:w="10"/><text x="86.3978%" y="1231.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (37 samples, 0.05%)</title><rect x="86.1160%" y="1237" width="0.0534%" height="15" fill="rgb(250,150,27)" fg:x="59656" fg:w="37"/><text x="86.3660%" y="1247.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (8 samples, 0.01%)</title><rect x="86.1737%" y="1237" width="0.0115%" height="15" fill="rgb(252,159,3)" fg:x="59696" fg:w="8"/><text x="86.4237%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (14 samples, 0.02%)</title><rect x="86.1853%" y="1237" width="0.0202%" height="15" fill="rgb(241,182,3)" fg:x="59704" fg:w="14"/><text x="86.4353%" y="1247.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (8 samples, 0.01%)</title><rect x="86.2171%" y="1221" width="0.0115%" height="15" fill="rgb(236,3,9)" fg:x="59726" fg:w="8"/><text x="86.4671%" y="1231.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.02%)</title><rect x="86.2907%" y="1189" width="0.0217%" height="15" fill="rgb(223,227,51)" fg:x="59777" fg:w="15"/><text x="86.5407%" y="1199.50"></text></g><g><title>GetLengthPrefixedSlice (21 samples, 0.03%)</title><rect x="86.3643%" y="1173" width="0.0303%" height="15" fill="rgb(232,133,30)" fg:x="59828" fg:w="21"/><text x="86.6143%" y="1183.50"></text></g><g><title>leveldb::GetVarint32Ptr (16 samples, 0.02%)</title><rect x="86.3715%" y="1157" width="0.0231%" height="15" fill="rgb(209,93,27)" fg:x="59833" fg:w="16"/><text x="86.6215%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (57 samples, 0.08%)</title><rect x="86.3167%" y="1189" width="0.0823%" height="15" fill="rgb(208,108,34)" fg:x="59795" fg:w="57"/><text x="86.5667%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.01%)</title><rect x="86.4148%" y="1141" width="0.0101%" height="15" fill="rgb(215,189,13)" fg:x="59863" fg:w="7"/><text x="86.6648%" y="1151.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (21 samples, 0.03%)</title><rect x="86.4105%" y="1157" width="0.0303%" height="15" fill="rgb(206,88,23)" fg:x="59860" fg:w="21"/><text x="86.6605%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (21 samples, 0.03%)</title><rect x="86.4408%" y="1157" width="0.0303%" height="15" fill="rgb(240,173,0)" fg:x="59881" fg:w="21"/><text x="86.6908%" y="1167.50"></text></g><g><title>GetLengthPrefixedSlice (9 samples, 0.01%)</title><rect x="86.4581%" y="1141" width="0.0130%" height="15" fill="rgb(223,106,52)" fg:x="59893" fg:w="9"/><text x="86.7081%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (52 samples, 0.08%)</title><rect x="86.4004%" y="1173" width="0.0751%" height="15" fill="rgb(206,130,16)" fg:x="59853" fg:w="52"/><text x="86.6504%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (54 samples, 0.08%)</title><rect x="86.3989%" y="1189" width="0.0780%" height="15" fill="rgb(220,54,25)" fg:x="59852" fg:w="54"/><text x="86.6489%" y="1199.50"></text></g><g><title>leveldb::MemTable::Add (9 samples, 0.01%)</title><rect x="86.5058%" y="1157" width="0.0130%" height="15" fill="rgb(210,4,38)" fg:x="59926" fg:w="9"/><text x="86.7558%" y="1167.50"></text></g><g><title>GetLengthPrefixedSlice (21 samples, 0.03%)</title><rect x="86.5866%" y="1141" width="0.0303%" height="15" fill="rgb(238,94,39)" fg:x="59982" fg:w="21"/><text x="86.8366%" y="1151.50"></text></g><g><title>leveldb::GetVarint32Ptr (18 samples, 0.03%)</title><rect x="86.5909%" y="1125" width="0.0260%" height="15" fill="rgb(234,124,34)" fg:x="59985" fg:w="18"/><text x="86.8409%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (47 samples, 0.07%)</title><rect x="86.6212%" y="1141" width="0.0678%" height="15" fill="rgb(221,91,40)" fg:x="60006" fg:w="47"/><text x="86.8712%" y="1151.50"></text></g><g><title>leveldb::Slice::compare (24 samples, 0.03%)</title><rect x="86.6544%" y="1125" width="0.0346%" height="15" fill="rgb(246,53,28)" fg:x="60029" fg:w="24"/><text x="86.9044%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (109 samples, 0.16%)</title><rect x="86.8262%" y="1125" width="0.1573%" height="15" fill="rgb(229,109,7)" fg:x="60148" fg:w="109"/><text x="87.0762%" y="1135.50"></text></g><g><title>leveldb::Slice::compare (61 samples, 0.09%)</title><rect x="86.8955%" y="1109" width="0.0881%" height="15" fill="rgb(249,117,8)" fg:x="60196" fg:w="61"/><text x="87.1455%" y="1119.50"></text></g><g><title>leveldb::ExtractUserKey (26 samples, 0.04%)</title><rect x="86.9850%" y="1125" width="0.0375%" height="15" fill="rgb(210,181,1)" fg:x="60258" fg:w="26"/><text x="87.2350%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (110 samples, 0.16%)</title><rect x="87.0225%" y="1125" width="0.1588%" height="15" fill="rgb(211,66,1)" fg:x="60284" fg:w="110"/><text x="87.2725%" y="1135.50"></text></g><g><title>leveldb::ExtractUserKey (21 samples, 0.03%)</title><rect x="87.1510%" y="1109" width="0.0303%" height="15" fill="rgb(221,90,14)" fg:x="60373" fg:w="21"/><text x="87.4010%" y="1119.50"></text></g><g><title>GetLengthPrefixedSlice (10 samples, 0.01%)</title><rect x="87.2636%" y="1109" width="0.0144%" height="15" fill="rgb(219,222,44)" fg:x="60451" fg:w="10"/><text x="87.5136%" y="1119.50"></text></g><g><title>leveldb::GetVarint32Ptr (9 samples, 0.01%)</title><rect x="87.2651%" y="1093" width="0.0130%" height="15" fill="rgb(246,34,33)" fg:x="60452" fg:w="9"/><text x="87.5151%" y="1103.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (66 samples, 0.10%)</title><rect x="87.1842%" y="1125" width="0.0953%" height="15" fill="rgb(227,135,41)" fg:x="60396" fg:w="66"/><text x="87.4342%" y="1135.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (35 samples, 0.05%)</title><rect x="87.3863%" y="1109" width="0.0505%" height="15" fill="rgb(226,15,14)" fg:x="60536" fg:w="35"/><text x="87.6363%" y="1119.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (536 samples, 0.77%)</title><rect x="86.6905%" y="1141" width="0.7737%" height="15" fill="rgb(236,148,47)" fg:x="60054" fg:w="536"/><text x="86.9405%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (128 samples, 0.18%)</title><rect x="87.2795%" y="1125" width="0.1848%" height="15" fill="rgb(233,162,52)" fg:x="60462" fg:w="128"/><text x="87.5295%" y="1135.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (19 samples, 0.03%)</title><rect x="87.4368%" y="1109" width="0.0274%" height="15" fill="rgb(244,35,28)" fg:x="60571" fg:w="19"/><text x="87.6868%" y="1119.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (16 samples, 0.02%)</title><rect x="87.4412%" y="1093" width="0.0231%" height="15" fill="rgb(205,121,10)" fg:x="60574" fg:w="16"/><text x="87.6912%" y="1103.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (16 samples, 0.02%)</title><rect x="87.4412%" y="1077" width="0.0231%" height="15" fill="rgb(250,58,18)" fg:x="60574" fg:w="16"/><text x="87.6912%" y="1087.50"></text></g><g><title>GetLengthPrefixedSlice (148 samples, 0.21%)</title><rect x="87.6895%" y="1125" width="0.2136%" height="15" fill="rgb(216,37,13)" fg:x="60746" fg:w="148"/><text x="87.9395%" y="1135.50"></text></g><g><title>leveldb::GetVarint32Ptr (115 samples, 0.17%)</title><rect x="87.7371%" y="1109" width="0.1660%" height="15" fill="rgb(221,215,42)" fg:x="60779" fg:w="115"/><text x="87.9871%" y="1119.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (321 samples, 0.46%)</title><rect x="87.4715%" y="1141" width="0.4634%" height="15" fill="rgb(217,214,19)" fg:x="60595" fg:w="321"/><text x="87.7215%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (22 samples, 0.03%)</title><rect x="87.9031%" y="1125" width="0.0318%" height="15" fill="rgb(233,139,13)" fg:x="60894" fg:w="22"/><text x="88.1531%" y="1135.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (17 samples, 0.02%)</title><rect x="87.9609%" y="1125" width="0.0245%" height="15" fill="rgb(247,168,23)" fg:x="60934" fg:w="17"/><text x="88.2109%" y="1135.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (38 samples, 0.05%)</title><rect x="87.9349%" y="1141" width="0.0549%" height="15" fill="rgb(207,202,1)" fg:x="60916" fg:w="38"/><text x="88.1849%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1,021 samples, 1.47%)</title><rect x="86.5188%" y="1157" width="1.4739%" height="15" fill="rgb(220,155,48)" fg:x="59935" fg:w="1021"/><text x="86.7688%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (10 samples, 0.01%)</title><rect x="88.0070%" y="1141" width="0.0144%" height="15" fill="rgb(250,43,26)" fg:x="60966" fg:w="10"/><text x="88.2570%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (25 samples, 0.04%)</title><rect x="87.9926%" y="1157" width="0.0361%" height="15" fill="rgb(212,190,23)" fg:x="60956" fg:w="25"/><text x="88.2426%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1,079 samples, 1.56%)</title><rect x="86.4827%" y="1173" width="1.5576%" height="15" fill="rgb(216,39,24)" fg:x="59910" fg:w="1079"/><text x="86.7327%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,086 samples, 1.57%)</title><rect x="86.4769%" y="1189" width="1.5677%" height="15" fill="rgb(252,113,16)" fg:x="59906" fg:w="1086"/><text x="86.7269%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1,239 samples, 1.79%)</title><rect x="86.2661%" y="1205" width="1.7885%" height="15" fill="rgb(208,113,19)" fg:x="59760" fg:w="1239"/><text x="86.5161%" y="1215.50">l..</text></g><g><title>leveldb::MemTable::Add (1,261 samples, 1.82%)</title><rect x="86.2373%" y="1221" width="1.8203%" height="15" fill="rgb(234,107,25)" fg:x="59740" fg:w="1261"/><text x="86.4873%" y="1231.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (7 samples, 0.01%)</title><rect x="88.0633%" y="1221" width="0.0101%" height="15" fill="rgb(234,217,51)" fg:x="61005" fg:w="7"/><text x="88.3133%" y="1231.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (1,374 samples, 1.98%)</title><rect x="86.1001%" y="1269" width="1.9834%" height="15" fill="rgb(251,29,42)" fg:x="59645" fg:w="1374"/><text x="86.3501%" y="1279.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (1,365 samples, 1.97%)</title><rect x="86.1131%" y="1253" width="1.9704%" height="15" fill="rgb(221,62,51)" fg:x="59654" fg:w="1365"/><text x="86.3631%" y="1263.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (1,297 samples, 1.87%)</title><rect x="86.2113%" y="1237" width="1.8723%" height="15" fill="rgb(240,192,43)" fg:x="59722" fg:w="1297"/><text x="86.4613%" y="1247.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (7 samples, 0.01%)</title><rect x="88.0734%" y="1221" width="0.0101%" height="15" fill="rgb(224,157,47)" fg:x="61012" fg:w="7"/><text x="88.3234%" y="1231.50"></text></g><g><title>[[ext4]] (10 samples, 0.01%)</title><rect x="88.0937%" y="1045" width="0.0144%" height="15" fill="rgb(226,84,45)" fg:x="61026" fg:w="10"/><text x="88.3437%" y="1055.50"></text></g><g><title>[[ext4]] (24 samples, 0.03%)</title><rect x="88.0922%" y="1061" width="0.0346%" height="15" fill="rgb(208,207,23)" fg:x="61025" fg:w="24"/><text x="88.3422%" y="1071.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="88.1081%" y="1045" width="0.0188%" height="15" fill="rgb(253,34,51)" fg:x="61036" fg:w="13"/><text x="88.3581%" y="1055.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="88.1124%" y="1029" width="0.0144%" height="15" fill="rgb(227,26,34)" fg:x="61039" fg:w="10"/><text x="88.3624%" y="1039.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="88.1124%" y="1013" width="0.0144%" height="15" fill="rgb(245,75,19)" fg:x="61039" fg:w="10"/><text x="88.3624%" y="1023.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="88.1124%" y="997" width="0.0144%" height="15" fill="rgb(250,191,31)" fg:x="61039" fg:w="10"/><text x="88.3624%" y="1007.50"></text></g><g><title>[[ext4]] (84 samples, 0.12%)</title><rect x="88.0908%" y="1077" width="0.1213%" height="15" fill="rgb(224,11,50)" fg:x="61024" fg:w="84"/><text x="88.3408%" y="1087.50"></text></g><g><title>[unknown] (59 samples, 0.09%)</title><rect x="88.1269%" y="1061" width="0.0852%" height="15" fill="rgb(231,171,7)" fg:x="61049" fg:w="59"/><text x="88.3769%" y="1071.50"></text></g><g><title>[unknown] (58 samples, 0.08%)</title><rect x="88.1283%" y="1045" width="0.0837%" height="15" fill="rgb(252,214,10)" fg:x="61050" fg:w="58"/><text x="88.3783%" y="1055.50"></text></g><g><title>[unknown] (51 samples, 0.07%)</title><rect x="88.1384%" y="1029" width="0.0736%" height="15" fill="rgb(249,45,46)" fg:x="61057" fg:w="51"/><text x="88.3884%" y="1039.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="88.1557%" y="1013" width="0.0563%" height="15" fill="rgb(240,173,7)" fg:x="61069" fg:w="39"/><text x="88.4057%" y="1023.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="88.1687%" y="997" width="0.0433%" height="15" fill="rgb(235,214,13)" fg:x="61078" fg:w="30"/><text x="88.4187%" y="1007.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="88.1990%" y="981" width="0.0130%" height="15" fill="rgb(245,156,8)" fg:x="61099" fg:w="9"/><text x="88.4490%" y="991.50"></text></g><g><title>Flush (92 samples, 0.13%)</title><rect x="88.0908%" y="1237" width="0.1328%" height="15" fill="rgb(235,46,12)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1247.50"></text></g><g><title>FlushBuffer (92 samples, 0.13%)</title><rect x="88.0908%" y="1221" width="0.1328%" height="15" fill="rgb(221,81,14)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (92 samples, 0.13%)</title><rect x="88.0908%" y="1205" width="0.1328%" height="15" fill="rgb(238,207,9)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1215.50"></text></g><g><title>__GI___libc_write (92 samples, 0.13%)</title><rect x="88.0908%" y="1189" width="0.1328%" height="15" fill="rgb(224,129,35)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1199.50"></text></g><g><title>[unknown] (92 samples, 0.13%)</title><rect x="88.0908%" y="1173" width="0.1328%" height="15" fill="rgb(243,218,34)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1183.50"></text></g><g><title>[unknown] (92 samples, 0.13%)</title><rect x="88.0908%" y="1157" width="0.1328%" height="15" fill="rgb(220,166,13)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1167.50"></text></g><g><title>[unknown] (92 samples, 0.13%)</title><rect x="88.0908%" y="1141" width="0.1328%" height="15" fill="rgb(227,167,49)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1151.50"></text></g><g><title>[unknown] (92 samples, 0.13%)</title><rect x="88.0908%" y="1125" width="0.1328%" height="15" fill="rgb(234,142,12)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1135.50"></text></g><g><title>[[ext4]] (92 samples, 0.13%)</title><rect x="88.0908%" y="1109" width="0.1328%" height="15" fill="rgb(207,100,48)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1119.50"></text></g><g><title>[unknown] (92 samples, 0.13%)</title><rect x="88.0908%" y="1093" width="0.1328%" height="15" fill="rgb(210,25,14)" fg:x="61024" fg:w="92"/><text x="88.3408%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="88.2120%" y="1077" width="0.0115%" height="15" fill="rgb(246,116,27)" fg:x="61108" fg:w="8"/><text x="88.4620%" y="1087.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="88.2135%" y="1061" width="0.0101%" height="15" fill="rgb(214,193,42)" fg:x="61109" fg:w="7"/><text x="88.4635%" y="1071.50"></text></g><g><title>CDBWrapper::WriteBatch (1,487 samples, 2.15%)</title><rect x="86.0987%" y="1301" width="2.1465%" height="15" fill="rgb(214,122,8)" fg:x="59644" fg:w="1487"/><text x="86.3487%" y="1311.50">C..</text></g><g><title>leveldb::DBImpl::Write (1,487 samples, 2.15%)</title><rect x="86.0987%" y="1285" width="2.1465%" height="15" fill="rgb(244,173,18)" fg:x="59644" fg:w="1487"/><text x="86.3487%" y="1295.50">l..</text></g><g><title>leveldb::log::Writer::AddRecord (112 samples, 0.16%)</title><rect x="88.0836%" y="1269" width="0.1617%" height="15" fill="rgb(232,68,19)" fg:x="61019" fg:w="112"/><text x="88.3336%" y="1279.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (111 samples, 0.16%)</title><rect x="88.0850%" y="1253" width="0.1602%" height="15" fill="rgb(236,224,1)" fg:x="61020" fg:w="111"/><text x="88.3350%" y="1263.50"></text></g><g><title>crc32c::ExtendSse42 (15 samples, 0.02%)</title><rect x="88.2236%" y="1237" width="0.0217%" height="15" fill="rgb(240,11,8)" fg:x="61116" fg:w="15"/><text x="88.4736%" y="1247.50"></text></g><g><title>_mm_crc32_u64 (14 samples, 0.02%)</title><rect x="88.2250%" y="1221" width="0.0202%" height="15" fill="rgb(244,159,20)" fg:x="61117" fg:w="14"/><text x="88.4750%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::capacity (8 samples, 0.01%)</title><rect x="88.2539%" y="997" width="0.0115%" height="15" fill="rgb(240,223,54)" fg:x="61137" fg:w="8"/><text x="88.5039%" y="1007.50"></text></g><g><title>CCoinsViewDB::BatchWrite (16 samples, 0.02%)</title><rect x="88.2467%" y="1061" width="0.0231%" height="15" fill="rgb(237,146,5)" fg:x="61132" fg:w="16"/><text x="88.4967%" y="1071.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (15 samples, 0.02%)</title><rect x="88.2481%" y="1045" width="0.0217%" height="15" fill="rgb(218,221,32)" fg:x="61133" fg:w="15"/><text x="88.4981%" y="1055.50"></text></g><g><title>DataStream::reserve (15 samples, 0.02%)</title><rect x="88.2481%" y="1029" width="0.0217%" height="15" fill="rgb(244,96,26)" fg:x="61133" fg:w="15"/><text x="88.4981%" y="1039.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (15 samples, 0.02%)</title><rect x="88.2481%" y="1013" width="0.0217%" height="15" fill="rgb(245,184,37)" fg:x="61133" fg:w="15"/><text x="88.4981%" y="1023.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (24 samples, 0.03%)</title><rect x="88.2467%" y="1173" width="0.0346%" height="15" fill="rgb(248,91,47)" fg:x="61132" fg:w="24"/><text x="88.4967%" y="1183.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (24 samples, 0.03%)</title><rect x="88.2467%" y="1157" width="0.0346%" height="15" fill="rgb(243,199,8)" fg:x="61132" fg:w="24"/><text x="88.4967%" y="1167.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (24 samples, 0.03%)</title><rect x="88.2467%" y="1141" width="0.0346%" height="15" fill="rgb(249,12,15)" fg:x="61132" fg:w="24"/><text x="88.4967%" y="1151.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (24 samples, 0.03%)</title><rect x="88.2467%" y="1125" width="0.0346%" height="15" fill="rgb(245,97,12)" fg:x="61132" fg:w="24"/><text x="88.4967%" y="1135.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (24 samples, 0.03%)</title><rect x="88.2467%" y="1109" width="0.0346%" height="15" fill="rgb(244,61,1)" fg:x="61132" fg:w="24"/><text x="88.4967%" y="1119.50"></text></g><g><title>DataStream::write (24 samples, 0.03%)</title><rect x="88.2467%" y="1093" width="0.0346%" height="15" fill="rgb(222,194,10)" fg:x="61132" fg:w="24"/><text x="88.4967%" y="1103.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (24 samples, 0.03%)</title><rect x="88.2467%" y="1077" width="0.0346%" height="15" fill="rgb(226,178,8)" fg:x="61132" fg:w="24"/><text x="88.4967%" y="1087.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (28 samples, 0.04%)</title><rect x="88.2452%" y="1301" width="0.0404%" height="15" fill="rgb(241,32,34)" fg:x="61131" fg:w="28"/><text x="88.4952%" y="1311.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (27 samples, 0.04%)</title><rect x="88.2467%" y="1285" width="0.0390%" height="15" fill="rgb(254,26,6)" fg:x="61132" fg:w="27"/><text x="88.4967%" y="1295.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (27 samples, 0.04%)</title><rect x="88.2467%" y="1269" width="0.0390%" height="15" fill="rgb(249,71,11)" fg:x="61132" fg:w="27"/><text x="88.4967%" y="1279.50"></text></g><g><title>Serialize&lt;DataStream&gt; (27 samples, 0.04%)</title><rect x="88.2467%" y="1253" width="0.0390%" height="15" fill="rgb(232,170,27)" fg:x="61132" fg:w="27"/><text x="88.4967%" y="1263.50"></text></g><g><title>Ser&lt;DataStream&gt; (27 samples, 0.04%)</title><rect x="88.2467%" y="1237" width="0.0390%" height="15" fill="rgb(214,223,17)" fg:x="61132" fg:w="27"/><text x="88.4967%" y="1247.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (27 samples, 0.04%)</title><rect x="88.2467%" y="1221" width="0.0390%" height="15" fill="rgb(250,18,15)" fg:x="61132" fg:w="27"/><text x="88.4967%" y="1231.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (27 samples, 0.04%)</title><rect x="88.2467%" y="1205" width="0.0390%" height="15" fill="rgb(212,153,51)" fg:x="61132" fg:w="27"/><text x="88.4967%" y="1215.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (27 samples, 0.04%)</title><rect x="88.2467%" y="1189" width="0.0390%" height="15" fill="rgb(219,194,12)" fg:x="61132" fg:w="27"/><text x="88.4967%" y="1199.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (11 samples, 0.02%)</title><rect x="88.2885%" y="1093" width="0.0159%" height="15" fill="rgb(212,58,17)" fg:x="61161" fg:w="11"/><text x="88.5385%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="88.2885%" y="1077" width="0.0159%" height="15" fill="rgb(254,5,10)" fg:x="61161" fg:w="11"/><text x="88.5385%" y="1087.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (11 samples, 0.02%)</title><rect x="88.2885%" y="1061" width="0.0159%" height="15" fill="rgb(246,91,7)" fg:x="61161" fg:w="11"/><text x="88.5385%" y="1071.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (11 samples, 0.02%)</title><rect x="88.2885%" y="1045" width="0.0159%" height="15" fill="rgb(218,108,49)" fg:x="61161" fg:w="11"/><text x="88.5385%" y="1055.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (11 samples, 0.02%)</title><rect x="88.2885%" y="1029" width="0.0159%" height="15" fill="rgb(238,123,20)" fg:x="61161" fg:w="11"/><text x="88.5385%" y="1039.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (10 samples, 0.01%)</title><rect x="88.2900%" y="1013" width="0.0144%" height="15" fill="rgb(231,69,23)" fg:x="61162" fg:w="10"/><text x="88.5400%" y="1023.50"></text></g><g><title>DataStream::write (10 samples, 0.01%)</title><rect x="88.2900%" y="997" width="0.0144%" height="15" fill="rgb(230,209,3)" fg:x="61162" fg:w="10"/><text x="88.5400%" y="1007.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (10 samples, 0.01%)</title><rect x="88.2900%" y="981" width="0.0144%" height="15" fill="rgb(231,19,0)" fg:x="61162" fg:w="10"/><text x="88.5400%" y="991.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (8 samples, 0.01%)</title><rect x="88.2929%" y="965" width="0.0115%" height="15" fill="rgb(226,192,25)" fg:x="61164" fg:w="8"/><text x="88.5429%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (15 samples, 0.02%)</title><rect x="88.2871%" y="1141" width="0.0217%" height="15" fill="rgb(223,175,53)" fg:x="61160" fg:w="15"/><text x="88.5371%" y="1151.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (15 samples, 0.02%)</title><rect x="88.2871%" y="1125" width="0.0217%" height="15" fill="rgb(248,35,51)" fg:x="61160" fg:w="15"/><text x="88.5371%" y="1135.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (15 samples, 0.02%)</title><rect x="88.2871%" y="1109" width="0.0217%" height="15" fill="rgb(230,37,26)" fg:x="61160" fg:w="15"/><text x="88.5371%" y="1119.50"></text></g><g><title>CompressScript (10 samples, 0.01%)</title><rect x="88.3116%" y="1093" width="0.0144%" height="15" fill="rgb(206,120,22)" fg:x="61177" fg:w="10"/><text x="88.5616%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (18 samples, 0.03%)</title><rect x="88.3261%" y="1093" width="0.0260%" height="15" fill="rgb(207,165,28)" fg:x="61187" fg:w="18"/><text x="88.5761%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (18 samples, 0.03%)</title><rect x="88.3261%" y="1077" width="0.0260%" height="15" fill="rgb(226,23,46)" fg:x="61187" fg:w="18"/><text x="88.5761%" y="1087.50"></text></g><g><title>DataStream::write (18 samples, 0.03%)</title><rect x="88.3261%" y="1061" width="0.0260%" height="15" fill="rgb(208,130,44)" fg:x="61187" fg:w="18"/><text x="88.5761%" y="1071.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (18 samples, 0.03%)</title><rect x="88.3261%" y="1045" width="0.0260%" height="15" fill="rgb(231,67,8)" fg:x="61187" fg:w="18"/><text x="88.5761%" y="1055.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (10 samples, 0.01%)</title><rect x="88.3376%" y="1029" width="0.0144%" height="15" fill="rgb(205,183,22)" fg:x="61195" fg:w="10"/><text x="88.5876%" y="1039.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (7 samples, 0.01%)</title><rect x="88.3419%" y="1013" width="0.0101%" height="15" fill="rgb(224,47,9)" fg:x="61198" fg:w="7"/><text x="88.5919%" y="1023.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (10 samples, 0.01%)</title><rect x="88.3564%" y="1093" width="0.0144%" height="15" fill="rgb(250,183,49)" fg:x="61208" fg:w="10"/><text x="88.6064%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="88.3564%" y="1077" width="0.0144%" height="15" fill="rgb(220,151,39)" fg:x="61208" fg:w="10"/><text x="88.6064%" y="1087.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (10 samples, 0.01%)</title><rect x="88.3564%" y="1061" width="0.0144%" height="15" fill="rgb(220,118,20)" fg:x="61208" fg:w="10"/><text x="88.6064%" y="1071.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (10 samples, 0.01%)</title><rect x="88.3564%" y="1045" width="0.0144%" height="15" fill="rgb(231,65,51)" fg:x="61208" fg:w="10"/><text x="88.6064%" y="1055.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (62 samples, 0.09%)</title><rect x="88.2871%" y="1237" width="0.0895%" height="15" fill="rgb(253,125,37)" fg:x="61160" fg:w="62"/><text x="88.5371%" y="1247.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (62 samples, 0.09%)</title><rect x="88.2871%" y="1221" width="0.0895%" height="15" fill="rgb(232,102,6)" fg:x="61160" fg:w="62"/><text x="88.5371%" y="1231.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (62 samples, 0.09%)</title><rect x="88.2871%" y="1205" width="0.0895%" height="15" fill="rgb(251,105,13)" fg:x="61160" fg:w="62"/><text x="88.5371%" y="1215.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (62 samples, 0.09%)</title><rect x="88.2871%" y="1189" width="0.0895%" height="15" fill="rgb(222,179,29)" fg:x="61160" fg:w="62"/><text x="88.5371%" y="1199.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (62 samples, 0.09%)</title><rect x="88.2871%" y="1173" width="0.0895%" height="15" fill="rgb(229,180,53)" fg:x="61160" fg:w="62"/><text x="88.5371%" y="1183.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (62 samples, 0.09%)</title><rect x="88.2871%" y="1157" width="0.0895%" height="15" fill="rgb(238,104,13)" fg:x="61160" fg:w="62"/><text x="88.5371%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (47 samples, 0.07%)</title><rect x="88.3087%" y="1141" width="0.0678%" height="15" fill="rgb(210,130,5)" fg:x="61175" fg:w="47"/><text x="88.5587%" y="1151.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (47 samples, 0.07%)</title><rect x="88.3087%" y="1125" width="0.0678%" height="15" fill="rgb(233,87,49)" fg:x="61175" fg:w="47"/><text x="88.5587%" y="1135.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (47 samples, 0.07%)</title><rect x="88.3087%" y="1109" width="0.0678%" height="15" fill="rgb(243,34,9)" fg:x="61175" fg:w="47"/><text x="88.5587%" y="1119.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (138 samples, 0.20%)</title><rect x="88.3939%" y="1109" width="0.1992%" height="15" fill="rgb(235,225,10)" fg:x="61234" fg:w="138"/><text x="88.6439%" y="1119.50"></text></g><g><title>decltype  (108 samples, 0.16%)</title><rect x="88.4372%" y="1093" width="0.1559%" height="15" fill="rgb(212,0,30)" fg:x="61264" fg:w="108"/><text x="88.6872%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (108 samples, 0.16%)</title><rect x="88.4372%" y="1077" width="0.1559%" height="15" fill="rgb(211,177,0)" fg:x="61264" fg:w="108"/><text x="88.6872%" y="1087.50"></text></g><g><title>decltype (108 samples, 0.16%)</title><rect x="88.4372%" y="1061" width="0.1559%" height="15" fill="rgb(225,220,11)" fg:x="61264" fg:w="108"/><text x="88.6872%" y="1071.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (149 samples, 0.22%)</title><rect x="88.3795%" y="1189" width="0.2151%" height="15" fill="rgb(215,10,13)" fg:x="61224" fg:w="149"/><text x="88.6295%" y="1199.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (147 samples, 0.21%)</title><rect x="88.3824%" y="1173" width="0.2122%" height="15" fill="rgb(240,177,14)" fg:x="61226" fg:w="147"/><text x="88.6324%" y="1183.50"></text></g><g><title>DataStream::write (147 samples, 0.21%)</title><rect x="88.3824%" y="1157" width="0.2122%" height="15" fill="rgb(243,7,39)" fg:x="61226" fg:w="147"/><text x="88.6324%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (147 samples, 0.21%)</title><rect x="88.3824%" y="1141" width="0.2122%" height="15" fill="rgb(212,99,0)" fg:x="61226" fg:w="147"/><text x="88.6324%" y="1151.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (142 samples, 0.20%)</title><rect x="88.3896%" y="1125" width="0.2050%" height="15" fill="rgb(225,162,48)" fg:x="61231" fg:w="142"/><text x="88.6396%" y="1135.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (104 samples, 0.15%)</title><rect x="88.6003%" y="1173" width="0.1501%" height="15" fill="rgb(246,16,25)" fg:x="61377" fg:w="104"/><text x="88.8503%" y="1183.50"></text></g><g><title>decltype  (83 samples, 0.12%)</title><rect x="88.6307%" y="1157" width="0.1198%" height="15" fill="rgb(220,150,2)" fg:x="61398" fg:w="83"/><text x="88.8807%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (83 samples, 0.12%)</title><rect x="88.6307%" y="1141" width="0.1198%" height="15" fill="rgb(237,113,11)" fg:x="61398" fg:w="83"/><text x="88.8807%" y="1151.50"></text></g><g><title>decltype (83 samples, 0.12%)</title><rect x="88.6307%" y="1125" width="0.1198%" height="15" fill="rgb(236,70,20)" fg:x="61398" fg:w="83"/><text x="88.8807%" y="1135.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (323 samples, 0.47%)</title><rect x="88.2856%" y="1285" width="0.4663%" height="15" fill="rgb(234,94,7)" fg:x="61159" fg:w="323"/><text x="88.5356%" y="1295.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (323 samples, 0.47%)</title><rect x="88.2856%" y="1269" width="0.4663%" height="15" fill="rgb(250,221,0)" fg:x="61159" fg:w="323"/><text x="88.5356%" y="1279.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (323 samples, 0.47%)</title><rect x="88.2856%" y="1253" width="0.4663%" height="15" fill="rgb(245,149,46)" fg:x="61159" fg:w="323"/><text x="88.5356%" y="1263.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (260 samples, 0.38%)</title><rect x="88.3766%" y="1237" width="0.3753%" height="15" fill="rgb(215,37,27)" fg:x="61222" fg:w="260"/><text x="88.6266%" y="1247.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (260 samples, 0.38%)</title><rect x="88.3766%" y="1221" width="0.3753%" height="15" fill="rgb(232,65,3)" fg:x="61222" fg:w="260"/><text x="88.6266%" y="1231.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (260 samples, 0.38%)</title><rect x="88.3766%" y="1205" width="0.3753%" height="15" fill="rgb(214,2,16)" fg:x="61222" fg:w="260"/><text x="88.6266%" y="1215.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (109 samples, 0.16%)</title><rect x="88.5946%" y="1189" width="0.1573%" height="15" fill="rgb(227,131,50)" fg:x="61373" fg:w="109"/><text x="88.8446%" y="1199.50"></text></g><g><title>CCoinsViewDB::BatchWrite (34 samples, 0.05%)</title><rect x="88.7548%" y="1061" width="0.0491%" height="15" fill="rgb(247,131,45)" fg:x="61484" fg:w="34"/><text x="89.0048%" y="1071.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (31 samples, 0.04%)</title><rect x="88.7591%" y="1045" width="0.0447%" height="15" fill="rgb(215,97,47)" fg:x="61487" fg:w="31"/><text x="89.0091%" y="1055.50"></text></g><g><title>DataStream::reserve (31 samples, 0.04%)</title><rect x="88.7591%" y="1029" width="0.0447%" height="15" fill="rgb(233,143,12)" fg:x="61487" fg:w="31"/><text x="89.0091%" y="1039.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (31 samples, 0.04%)</title><rect x="88.7591%" y="1013" width="0.0447%" height="15" fill="rgb(222,57,17)" fg:x="61487" fg:w="31"/><text x="89.0091%" y="1023.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::capacity (10 samples, 0.01%)</title><rect x="88.7894%" y="997" width="0.0144%" height="15" fill="rgb(214,119,38)" fg:x="61508" fg:w="10"/><text x="89.0394%" y="1007.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (7 samples, 0.01%)</title><rect x="88.8053%" y="1061" width="0.0101%" height="15" fill="rgb(217,28,47)" fg:x="61519" fg:w="7"/><text x="89.0553%" y="1071.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (45 samples, 0.06%)</title><rect x="88.7548%" y="1173" width="0.0650%" height="15" fill="rgb(231,14,52)" fg:x="61484" fg:w="45"/><text x="89.0048%" y="1183.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (45 samples, 0.06%)</title><rect x="88.7548%" y="1157" width="0.0650%" height="15" fill="rgb(220,158,18)" fg:x="61484" fg:w="45"/><text x="89.0048%" y="1167.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (45 samples, 0.06%)</title><rect x="88.7548%" y="1141" width="0.0650%" height="15" fill="rgb(222,143,46)" fg:x="61484" fg:w="45"/><text x="89.0048%" y="1151.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (45 samples, 0.06%)</title><rect x="88.7548%" y="1125" width="0.0650%" height="15" fill="rgb(227,165,5)" fg:x="61484" fg:w="45"/><text x="89.0048%" y="1135.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (45 samples, 0.06%)</title><rect x="88.7548%" y="1109" width="0.0650%" height="15" fill="rgb(216,222,49)" fg:x="61484" fg:w="45"/><text x="89.0048%" y="1119.50"></text></g><g><title>DataStream::write (45 samples, 0.06%)</title><rect x="88.7548%" y="1093" width="0.0650%" height="15" fill="rgb(238,73,39)" fg:x="61484" fg:w="45"/><text x="89.0048%" y="1103.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (45 samples, 0.06%)</title><rect x="88.7548%" y="1077" width="0.0650%" height="15" fill="rgb(252,115,9)" fg:x="61484" fg:w="45"/><text x="89.0048%" y="1087.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (372 samples, 0.54%)</title><rect x="88.2856%" y="1301" width="0.5370%" height="15" fill="rgb(238,202,4)" fg:x="61159" fg:w="372"/><text x="88.5356%" y="1311.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (49 samples, 0.07%)</title><rect x="88.7519%" y="1285" width="0.0707%" height="15" fill="rgb(252,153,44)" fg:x="61482" fg:w="49"/><text x="89.0019%" y="1295.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (49 samples, 0.07%)</title><rect x="88.7519%" y="1269" width="0.0707%" height="15" fill="rgb(235,128,27)" fg:x="61482" fg:w="49"/><text x="89.0019%" y="1279.50"></text></g><g><title>Serialize&lt;DataStream&gt; (49 samples, 0.07%)</title><rect x="88.7519%" y="1253" width="0.0707%" height="15" fill="rgb(221,121,47)" fg:x="61482" fg:w="49"/><text x="89.0019%" y="1263.50"></text></g><g><title>Ser&lt;DataStream&gt; (49 samples, 0.07%)</title><rect x="88.7519%" y="1237" width="0.0707%" height="15" fill="rgb(247,211,47)" fg:x="61482" fg:w="49"/><text x="89.0019%" y="1247.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (49 samples, 0.07%)</title><rect x="88.7519%" y="1221" width="0.0707%" height="15" fill="rgb(252,47,49)" fg:x="61482" fg:w="49"/><text x="89.0019%" y="1231.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (49 samples, 0.07%)</title><rect x="88.7519%" y="1205" width="0.0707%" height="15" fill="rgb(219,119,53)" fg:x="61482" fg:w="49"/><text x="89.0019%" y="1215.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (49 samples, 0.07%)</title><rect x="88.7519%" y="1189" width="0.0707%" height="15" fill="rgb(243,165,53)" fg:x="61482" fg:w="49"/><text x="89.0019%" y="1199.50"></text></g><g><title>CCoinsViewDB::BatchWrite (2,189 samples, 3.16%)</title><rect x="85.6714%" y="1317" width="3.1599%" height="15" fill="rgb(230,12,35)" fg:x="59348" fg:w="2189"/><text x="85.9214%" y="1327.50">CCo..</text></g><g><title>leveldb::PutLengthPrefixedSlice (9 samples, 0.01%)</title><rect x="88.8356%" y="1317" width="0.0130%" height="15" fill="rgb(239,57,49)" fg:x="61540" fg:w="9"/><text x="89.0856%" y="1327.50"></text></g><g><title>leveldb::PutVarint32 (10 samples, 0.01%)</title><rect x="88.8486%" y="1317" width="0.0144%" height="15" fill="rgb(231,154,7)" fg:x="61549" fg:w="10"/><text x="89.0986%" y="1327.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (32 samples, 0.05%)</title><rect x="88.9035%" y="1269" width="0.0462%" height="15" fill="rgb(248,81,34)" fg:x="61587" fg:w="32"/><text x="89.1535%" y="1279.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (64 samples, 0.09%)</title><rect x="88.9497%" y="1253" width="0.0924%" height="15" fill="rgb(247,9,5)" fg:x="61619" fg:w="64"/><text x="89.1997%" y="1263.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (64 samples, 0.09%)</title><rect x="88.9497%" y="1237" width="0.0924%" height="15" fill="rgb(228,172,27)" fg:x="61619" fg:w="64"/><text x="89.1997%" y="1247.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (64 samples, 0.09%)</title><rect x="88.9497%" y="1221" width="0.0924%" height="15" fill="rgb(230,57,44)" fg:x="61619" fg:w="64"/><text x="89.1997%" y="1231.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (45 samples, 0.06%)</title><rect x="88.9771%" y="1205" width="0.0650%" height="15" fill="rgb(249,35,22)" fg:x="61638" fg:w="45"/><text x="89.2271%" y="1215.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (45 samples, 0.06%)</title><rect x="88.9771%" y="1189" width="0.0650%" height="15" fill="rgb(250,137,27)" fg:x="61638" fg:w="45"/><text x="89.2271%" y="1199.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (45 samples, 0.06%)</title><rect x="88.9771%" y="1173" width="0.0650%" height="15" fill="rgb(251,57,31)" fg:x="61638" fg:w="45"/><text x="89.2271%" y="1183.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (14 samples, 0.02%)</title><rect x="89.0219%" y="1157" width="0.0202%" height="15" fill="rgb(238,60,0)" fg:x="61669" fg:w="14"/><text x="89.2719%" y="1167.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (68 samples, 0.10%)</title><rect x="89.0854%" y="1141" width="0.0982%" height="15" fill="rgb(242,185,39)" fg:x="61713" fg:w="68"/><text x="89.3354%" y="1151.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (107 samples, 0.15%)</title><rect x="89.0421%" y="1157" width="0.1545%" height="15" fill="rgb(240,63,43)" fg:x="61683" fg:w="107"/><text x="89.2921%" y="1167.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="89.1835%" y="1141" width="0.0130%" height="15" fill="rgb(236,155,6)" fg:x="61781" fg:w="9"/><text x="89.4335%" y="1151.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="89.1835%" y="1125" width="0.0130%" height="15" fill="rgb(215,11,29)" fg:x="61781" fg:w="9"/><text x="89.4335%" y="1135.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="89.1835%" y="1109" width="0.0130%" height="15" fill="rgb(228,180,48)" fg:x="61781" fg:w="9"/><text x="89.4335%" y="1119.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="89.1835%" y="1093" width="0.0130%" height="15" fill="rgb(241,102,12)" fg:x="61781" fg:w="9"/><text x="89.4335%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="89.1850%" y="1077" width="0.0115%" height="15" fill="rgb(246,213,4)" fg:x="61782" fg:w="8"/><text x="89.4350%" y="1087.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="89.1850%" y="1061" width="0.0115%" height="15" fill="rgb(218,134,35)" fg:x="61782" fg:w="8"/><text x="89.4350%" y="1071.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="89.1850%" y="1045" width="0.0115%" height="15" fill="rgb(251,117,35)" fg:x="61782" fg:w="8"/><text x="89.4350%" y="1055.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="89.1864%" y="1029" width="0.0101%" height="15" fill="rgb(206,156,45)" fg:x="61783" fg:w="7"/><text x="89.4364%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="89.1864%" y="1013" width="0.0101%" height="15" fill="rgb(218,52,27)" fg:x="61783" fg:w="7"/><text x="89.4364%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="89.1864%" y="997" width="0.0101%" height="15" fill="rgb(238,83,36)" fg:x="61783" fg:w="7"/><text x="89.4364%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="89.1864%" y="981" width="0.0101%" height="15" fill="rgb(218,53,43)" fg:x="61783" fg:w="7"/><text x="89.4364%" y="991.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="89.1864%" y="965" width="0.0101%" height="15" fill="rgb(239,54,39)" fg:x="61783" fg:w="7"/><text x="89.4364%" y="975.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (316 samples, 0.46%)</title><rect x="88.8674%" y="1317" width="0.4562%" height="15" fill="rgb(212,198,13)" fg:x="61562" fg:w="316"/><text x="89.1174%" y="1327.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (316 samples, 0.46%)</title><rect x="88.8674%" y="1301" width="0.4562%" height="15" fill="rgb(234,54,46)" fg:x="61562" fg:w="316"/><text x="89.1174%" y="1311.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (315 samples, 0.45%)</title><rect x="88.8688%" y="1285" width="0.4547%" height="15" fill="rgb(217,120,7)" fg:x="61563" fg:w="315"/><text x="89.1188%" y="1295.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (259 samples, 0.37%)</title><rect x="88.9497%" y="1269" width="0.3739%" height="15" fill="rgb(246,39,15)" fg:x="61619" fg:w="259"/><text x="89.1997%" y="1279.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (195 samples, 0.28%)</title><rect x="89.0421%" y="1253" width="0.2815%" height="15" fill="rgb(242,143,31)" fg:x="61683" fg:w="195"/><text x="89.2921%" y="1263.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (195 samples, 0.28%)</title><rect x="89.0421%" y="1237" width="0.2815%" height="15" fill="rgb(252,60,24)" fg:x="61683" fg:w="195"/><text x="89.2921%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (195 samples, 0.28%)</title><rect x="89.0421%" y="1221" width="0.2815%" height="15" fill="rgb(249,220,7)" fg:x="61683" fg:w="195"/><text x="89.2921%" y="1231.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (195 samples, 0.28%)</title><rect x="89.0421%" y="1205" width="0.2815%" height="15" fill="rgb(236,67,13)" fg:x="61683" fg:w="195"/><text x="89.2921%" y="1215.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (195 samples, 0.28%)</title><rect x="89.0421%" y="1189" width="0.2815%" height="15" fill="rgb(210,62,39)" fg:x="61683" fg:w="195"/><text x="89.2921%" y="1199.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (195 samples, 0.28%)</title><rect x="89.0421%" y="1173" width="0.2815%" height="15" fill="rgb(219,122,53)" fg:x="61683" fg:w="195"/><text x="89.2921%" y="1183.50"></text></g><g><title>Coin::~Coin (88 samples, 0.13%)</title><rect x="89.1965%" y="1157" width="0.1270%" height="15" fill="rgb(218,87,25)" fg:x="61790" fg:w="88"/><text x="89.4465%" y="1167.50"></text></g><g><title>CTxOut::~CTxOut (88 samples, 0.13%)</title><rect x="89.1965%" y="1141" width="0.1270%" height="15" fill="rgb(234,179,48)" fg:x="61790" fg:w="88"/><text x="89.4465%" y="1151.50"></text></g><g><title>CScript::~CScript (88 samples, 0.13%)</title><rect x="89.1965%" y="1125" width="0.1270%" height="15" fill="rgb(248,90,0)" fg:x="61790" fg:w="88"/><text x="89.4465%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (88 samples, 0.13%)</title><rect x="89.1965%" y="1109" width="0.1270%" height="15" fill="rgb(207,228,37)" fg:x="61790" fg:w="88"/><text x="89.4465%" y="1119.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (16 samples, 0.02%)</title><rect x="89.3467%" y="1301" width="0.0231%" height="15" fill="rgb(235,214,15)" fg:x="61894" fg:w="16"/><text x="89.5967%" y="1311.50"></text></g><g><title>decltype  (12 samples, 0.02%)</title><rect x="89.3524%" y="1285" width="0.0173%" height="15" fill="rgb(210,144,39)" fg:x="61898" fg:w="12"/><text x="89.6024%" y="1295.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (12 samples, 0.02%)</title><rect x="89.3524%" y="1269" width="0.0173%" height="15" fill="rgb(222,67,41)" fg:x="61898" fg:w="12"/><text x="89.6024%" y="1279.50"></text></g><g><title>decltype (12 samples, 0.02%)</title><rect x="89.3524%" y="1253" width="0.0173%" height="15" fill="rgb(205,35,37)" fg:x="61898" fg:w="12"/><text x="89.6024%" y="1263.50"></text></g><g><title>CCoinsViewCache::Flush (2,616 samples, 3.78%)</title><rect x="85.5949%" y="1333" width="3.7763%" height="15" fill="rgb(216,125,40)" fg:x="59295" fg:w="2616"/><text x="85.8449%" y="1343.50">CCoi..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (30 samples, 0.04%)</title><rect x="89.3279%" y="1317" width="0.0433%" height="15" fill="rgb(228,227,20)" fg:x="61881" fg:w="30"/><text x="89.5779%" y="1327.50"></text></g><g><title>Chainstate::ForceFlushStateToDisk (2,624 samples, 3.79%)</title><rect x="85.5949%" y="1365" width="3.7879%" height="15" fill="rgb(242,173,45)" fg:x="59295" fg:w="2624"/><text x="85.8449%" y="1375.50">Chai..</text></g><g><title>Chainstate::FlushStateToDisk (2,624 samples, 3.79%)</title><rect x="85.5949%" y="1349" width="3.7879%" height="15" fill="rgb(215,79,24)" fg:x="59295" fg:w="2624"/><text x="85.8449%" y="1359.50">Chai..</text></g><g><title>Chainstate::ResetCoinsViews (21 samples, 0.03%)</title><rect x="89.3827%" y="1365" width="0.0303%" height="15" fill="rgb(238,164,38)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1375.50"></text></g><g><title>std::unique_ptr&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (21 samples, 0.03%)</title><rect x="89.3827%" y="1349" width="0.0303%" height="15" fill="rgb(245,196,38)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1359.50"></text></g><g><title>std::__uniq_ptr_impl&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (21 samples, 0.03%)</title><rect x="89.3827%" y="1333" width="0.0303%" height="15" fill="rgb(231,217,29)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1343.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (21 samples, 0.03%)</title><rect x="89.3827%" y="1317" width="0.0303%" height="15" fill="rgb(245,6,4)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1327.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (21 samples, 0.03%)</title><rect x="89.3827%" y="1301" width="0.0303%" height="15" fill="rgb(214,76,49)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1311.50"></text></g><g><title>CoinsViews::~CoinsViews (21 samples, 0.03%)</title><rect x="89.3827%" y="1285" width="0.0303%" height="15" fill="rgb(205,96,12)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1295.50"></text></g><g><title>CCoinsViewDB::~CCoinsViewDB (21 samples, 0.03%)</title><rect x="89.3827%" y="1269" width="0.0303%" height="15" fill="rgb(243,131,4)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1279.50"></text></g><g><title>std::unique_ptr&lt;CDBWrapper, std::default_delete&lt;CDBWrapper&gt; &gt;::~unique_ptr (21 samples, 0.03%)</title><rect x="89.3827%" y="1253" width="0.0303%" height="15" fill="rgb(214,114,4)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1263.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (21 samples, 0.03%)</title><rect x="89.3827%" y="1237" width="0.0303%" height="15" fill="rgb(234,215,15)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1247.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (21 samples, 0.03%)</title><rect x="89.3827%" y="1221" width="0.0303%" height="15" fill="rgb(250,216,45)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1231.50"></text></g><g><title>CDBWrapper::~CDBWrapper (21 samples, 0.03%)</title><rect x="89.3827%" y="1205" width="0.0303%" height="15" fill="rgb(236,128,4)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1215.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (21 samples, 0.03%)</title><rect x="89.3827%" y="1189" width="0.0303%" height="15" fill="rgb(234,50,33)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1199.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (21 samples, 0.03%)</title><rect x="89.3827%" y="1173" width="0.0303%" height="15" fill="rgb(253,131,37)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1183.50"></text></g><g><title>leveldb::TableCache::~TableCache (21 samples, 0.03%)</title><rect x="89.3827%" y="1157" width="0.0303%" height="15" fill="rgb(218,55,27)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1167.50"></text></g><g><title>~ShardedLRUCache (21 samples, 0.03%)</title><rect x="89.3827%" y="1141" width="0.0303%" height="15" fill="rgb(241,220,28)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::~ShardedLRUCache (21 samples, 0.03%)</title><rect x="89.3827%" y="1125" width="0.0303%" height="15" fill="rgb(241,90,48)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1135.50"></text></g><g><title>~LRUCache (21 samples, 0.03%)</title><rect x="89.3827%" y="1109" width="0.0303%" height="15" fill="rgb(216,43,37)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::~LRUCache (21 samples, 0.03%)</title><rect x="89.3827%" y="1093" width="0.0303%" height="15" fill="rgb(207,173,9)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1103.50"></text></g><g><title>leveldb::DeleteEntry (21 samples, 0.03%)</title><rect x="89.3827%" y="1077" width="0.0303%" height="15" fill="rgb(240,126,30)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1087.50"></text></g><g><title>~PosixMmapReadableFile (21 samples, 0.03%)</title><rect x="89.3827%" y="1061" width="0.0303%" height="15" fill="rgb(228,178,53)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1071.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (21 samples, 0.03%)</title><rect x="89.3827%" y="1045" width="0.0303%" height="15" fill="rgb(217,33,4)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1055.50"></text></g><g><title>__munmap (21 samples, 0.03%)</title><rect x="89.3827%" y="1029" width="0.0303%" height="15" fill="rgb(206,124,34)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1039.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.3827%" y="1013" width="0.0303%" height="15" fill="rgb(208,122,53)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1023.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.3827%" y="997" width="0.0303%" height="15" fill="rgb(215,202,26)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="1007.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.3827%" y="981" width="0.0303%" height="15" fill="rgb(232,198,31)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="991.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.3827%" y="965" width="0.0303%" height="15" fill="rgb(222,23,35)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="975.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.3827%" y="949" width="0.0303%" height="15" fill="rgb(242,27,53)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="959.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.3827%" y="933" width="0.0303%" height="15" fill="rgb(210,216,42)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="943.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.3827%" y="917" width="0.0303%" height="15" fill="rgb(234,39,38)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="927.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.3827%" y="901" width="0.0303%" height="15" fill="rgb(235,126,54)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="911.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.3827%" y="885" width="0.0303%" height="15" fill="rgb(235,150,33)" fg:x="61919" fg:w="21"/><text x="89.6327%" y="895.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="89.3928%" y="869" width="0.0202%" height="15" fill="rgb(249,49,53)" fg:x="61926" fg:w="14"/><text x="89.6428%" y="879.50"></text></g><g><title>_start (2,654 samples, 3.83%)</title><rect x="85.5934%" y="1445" width="3.8312%" height="15" fill="rgb(238,60,50)" fg:x="59294" fg:w="2654"/><text x="85.8434%" y="1455.50">_sta..</text></g><g><title>__libc_start_main@@GLIBC_2.34 (2,654 samples, 3.83%)</title><rect x="85.5934%" y="1429" width="3.8312%" height="15" fill="rgb(210,5,2)" fg:x="59294" fg:w="2654"/><text x="85.8434%" y="1439.50">__li..</text></g><g><title>__libc_start_call_main (2,654 samples, 3.83%)</title><rect x="85.5934%" y="1413" width="3.8312%" height="15" fill="rgb(214,207,24)" fg:x="59294" fg:w="2654"/><text x="85.8434%" y="1423.50">__li..</text></g><g><title>main (2,653 samples, 3.83%)</title><rect x="85.5949%" y="1397" width="3.8297%" height="15" fill="rgb(228,173,2)" fg:x="59295" fg:w="2653"/><text x="85.8449%" y="1407.50">main</text></g><g><title>Shutdown (2,653 samples, 3.83%)</title><rect x="85.5949%" y="1381" width="3.8297%" height="15" fill="rgb(244,26,8)" fg:x="59295" fg:w="2653"/><text x="85.8449%" y="1391.50">Shut..</text></g><g><title>std::unique_ptr&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (8 samples, 0.01%)</title><rect x="89.4131%" y="1365" width="0.0115%" height="15" fill="rgb(249,153,35)" fg:x="61940" fg:w="8"/><text x="89.6631%" y="1375.50"></text></g><g><title>std::__uniq_ptr_impl&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (8 samples, 0.01%)</title><rect x="89.4131%" y="1349" width="0.0115%" height="15" fill="rgb(221,215,40)" fg:x="61940" fg:w="8"/><text x="89.6631%" y="1359.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (8 samples, 0.01%)</title><rect x="89.4131%" y="1333" width="0.0115%" height="15" fill="rgb(238,106,35)" fg:x="61940" fg:w="8"/><text x="89.6631%" y="1343.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (8 samples, 0.01%)</title><rect x="89.4131%" y="1317" width="0.0115%" height="15" fill="rgb(207,195,21)" fg:x="61940" fg:w="8"/><text x="89.6631%" y="1327.50"></text></g><g><title>ChainstateManager::~ChainstateManager (8 samples, 0.01%)</title><rect x="89.4131%" y="1301" width="0.0115%" height="15" fill="rgb(205,43,29)" fg:x="61940" fg:w="8"/><text x="89.6631%" y="1311.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::~CCheckQueue (8 samples, 0.01%)</title><rect x="89.4131%" y="1285" width="0.0115%" height="15" fill="rgb(236,35,21)" fg:x="61940" fg:w="8"/><text x="89.6631%" y="1295.50"></text></g><g><title>std::thread::join (8 samples, 0.01%)</title><rect x="89.4131%" y="1269" width="0.0115%" height="15" fill="rgb(244,74,8)" fg:x="61940" fg:w="8"/><text x="89.6631%" y="1279.50"></text></g><g><title>__pthread_clockjoin_ex (8 samples, 0.01%)</title><rect x="89.4131%" y="1253" width="0.0115%" height="15" fill="rgb(241,229,7)" fg:x="61940" fg:w="8"/><text x="89.6631%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (65 samples, 0.09%)</title><rect x="89.4578%" y="1445" width="0.0938%" height="15" fill="rgb(212,223,25)" fg:x="61971" fg:w="65"/><text x="89.7078%" y="1455.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (65 samples, 0.09%)</title><rect x="89.4578%" y="1429" width="0.0938%" height="15" fill="rgb(234,58,53)" fg:x="61971" fg:w="65"/><text x="89.7078%" y="1439.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (64 samples, 0.09%)</title><rect x="89.4592%" y="1413" width="0.0924%" height="15" fill="rgb(244,36,1)" fg:x="61972" fg:w="64"/><text x="89.7092%" y="1423.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (61 samples, 0.09%)</title><rect x="89.4636%" y="1397" width="0.0881%" height="15" fill="rgb(222,40,54)" fg:x="61975" fg:w="61"/><text x="89.7136%" y="1407.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (61 samples, 0.09%)</title><rect x="89.4636%" y="1381" width="0.0881%" height="15" fill="rgb(210,207,39)" fg:x="61975" fg:w="61"/><text x="89.7136%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (61 samples, 0.09%)</title><rect x="89.4636%" y="1365" width="0.0881%" height="15" fill="rgb(234,52,14)" fg:x="61975" fg:w="61"/><text x="89.7136%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (61 samples, 0.09%)</title><rect x="89.4636%" y="1349" width="0.0881%" height="15" fill="rgb(239,108,46)" fg:x="61975" fg:w="61"/><text x="89.7136%" y="1359.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (61 samples, 0.09%)</title><rect x="89.4636%" y="1333" width="0.0881%" height="15" fill="rgb(252,223,5)" fg:x="61975" fg:w="61"/><text x="89.7136%" y="1343.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (61 samples, 0.09%)</title><rect x="89.4636%" y="1317" width="0.0881%" height="15" fill="rgb(227,181,11)" fg:x="61975" fg:w="61"/><text x="89.7136%" y="1327.50"></text></g><g><title>Coin::~Coin (58 samples, 0.08%)</title><rect x="89.4679%" y="1301" width="0.0837%" height="15" fill="rgb(248,126,40)" fg:x="61978" fg:w="58"/><text x="89.7179%" y="1311.50"></text></g><g><title>CTxOut::~CTxOut (58 samples, 0.08%)</title><rect x="89.4679%" y="1285" width="0.0837%" height="15" fill="rgb(243,1,18)" fg:x="61978" fg:w="58"/><text x="89.7179%" y="1295.50"></text></g><g><title>CScript::~CScript (58 samples, 0.08%)</title><rect x="89.4679%" y="1269" width="0.0837%" height="15" fill="rgb(214,145,23)" fg:x="61978" fg:w="58"/><text x="89.7179%" y="1279.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (58 samples, 0.08%)</title><rect x="89.4679%" y="1253" width="0.0837%" height="15" fill="rgb(241,218,11)" fg:x="61978" fg:w="58"/><text x="89.7179%" y="1263.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.01%)</title><rect x="89.5516%" y="1445" width="0.0101%" height="15" fill="rgb(214,219,24)" fg:x="62036" fg:w="7"/><text x="89.8016%" y="1455.50"></text></g><g><title>b-shutoff (3,264 samples, 4.71%)</title><rect x="84.8515%" y="1461" width="4.7117%" height="15" fill="rgb(235,32,7)" fg:x="58780" fg:w="3264"/><text x="85.1015%" y="1471.50">b-shu..</text></g><g><title>[000420.ldb] (9 samples, 0.01%)</title><rect x="89.5690%" y="1445" width="0.0130%" height="15" fill="rgb(227,121,28)" fg:x="62048" fg:w="9"/><text x="89.8190%" y="1455.50"></text></g><g><title>[000612.ldb] (24 samples, 0.03%)</title><rect x="89.5863%" y="1445" width="0.0346%" height="15" fill="rgb(216,129,49)" fg:x="62060" fg:w="24"/><text x="89.8363%" y="1455.50"></text></g><g><title>[001204.ldb] (8 samples, 0.01%)</title><rect x="89.6238%" y="1445" width="0.0115%" height="15" fill="rgb(207,194,50)" fg:x="62086" fg:w="8"/><text x="89.8738%" y="1455.50"></text></g><g><title>__memmove_avx512_unaligned_erms (8 samples, 0.01%)</title><rect x="89.6368%" y="1429" width="0.0115%" height="15" fill="rgb(207,4,18)" fg:x="62095" fg:w="8"/><text x="89.8868%" y="1439.50"></text></g><g><title>[001355.ldb] (10 samples, 0.01%)</title><rect x="89.6368%" y="1445" width="0.0144%" height="15" fill="rgb(213,50,30)" fg:x="62095" fg:w="10"/><text x="89.8868%" y="1455.50"></text></g><g><title>__clone (64 samples, 0.09%)</title><rect x="89.6700%" y="1429" width="0.0924%" height="15" fill="rgb(208,77,22)" fg:x="62118" fg:w="64"/><text x="89.9200%" y="1439.50"></text></g><g><title>[unknown] (63 samples, 0.09%)</title><rect x="89.6714%" y="1413" width="0.0909%" height="15" fill="rgb(244,204,34)" fg:x="62119" fg:w="63"/><text x="89.9214%" y="1423.50"></text></g><g><title>[unknown] (59 samples, 0.09%)</title><rect x="89.6772%" y="1397" width="0.0852%" height="15" fill="rgb(230,20,17)" fg:x="62123" fg:w="59"/><text x="89.9272%" y="1407.50"></text></g><g><title>[unknown] (58 samples, 0.08%)</title><rect x="89.6787%" y="1381" width="0.0837%" height="15" fill="rgb(237,83,15)" fg:x="62124" fg:w="58"/><text x="89.9287%" y="1391.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="89.6801%" y="1365" width="0.0823%" height="15" fill="rgb(221,109,25)" fg:x="62125" fg:w="57"/><text x="89.9301%" y="1375.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="89.6801%" y="1349" width="0.0823%" height="15" fill="rgb(205,194,52)" fg:x="62125" fg:w="57"/><text x="89.9301%" y="1359.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="89.6801%" y="1333" width="0.0823%" height="15" fill="rgb(244,173,54)" fg:x="62125" fg:w="57"/><text x="89.9301%" y="1343.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="89.6801%" y="1317" width="0.0823%" height="15" fill="rgb(227,181,18)" fg:x="62125" fg:w="57"/><text x="89.9301%" y="1327.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="89.6801%" y="1301" width="0.0823%" height="15" fill="rgb(238,36,30)" fg:x="62125" fg:w="57"/><text x="89.9301%" y="1311.50"></text></g><g><title>[unknown] (54 samples, 0.08%)</title><rect x="89.6844%" y="1285" width="0.0780%" height="15" fill="rgb(254,85,0)" fg:x="62128" fg:w="54"/><text x="89.9344%" y="1295.50"></text></g><g><title>[unknown] (24 samples, 0.03%)</title><rect x="89.7277%" y="1269" width="0.0346%" height="15" fill="rgb(247,63,33)" fg:x="62158" fg:w="24"/><text x="89.9777%" y="1279.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="89.7451%" y="1253" width="0.0173%" height="15" fill="rgb(220,7,54)" fg:x="62170" fg:w="12"/><text x="89.9951%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.02%)</title><rect x="89.7768%" y="1429" width="0.0217%" height="15" fill="rgb(238,227,21)" fg:x="62192" fg:w="15"/><text x="90.0268%" y="1439.50"></text></g><g><title>[[heap]] (96 samples, 0.14%)</title><rect x="89.6700%" y="1445" width="0.1386%" height="15" fill="rgb(237,29,31)" fg:x="62118" fg:w="96"/><text x="89.9200%" y="1455.50"></text></g><g><title>[[stack]] (10 samples, 0.01%)</title><rect x="89.8086%" y="1445" width="0.0144%" height="15" fill="rgb(211,21,50)" fg:x="62214" fg:w="10"/><text x="90.0586%" y="1455.50"></text></g><g><title>__GI___libc_write (7 samples, 0.01%)</title><rect x="89.8230%" y="1429" width="0.0101%" height="15" fill="rgb(239,119,2)" fg:x="62224" fg:w="7"/><text x="90.0730%" y="1439.50"></text></g><g><title>__memcmp_evex_movbe (80 samples, 0.12%)</title><rect x="89.8346%" y="1429" width="0.1155%" height="15" fill="rgb(250,2,39)" fg:x="62232" fg:w="80"/><text x="90.0846%" y="1439.50"></text></g><g><title>__memmove_avx512_unaligned_erms (152 samples, 0.22%)</title><rect x="89.9501%" y="1429" width="0.2194%" height="15" fill="rgb(244,46,53)" fg:x="62312" fg:w="152"/><text x="90.2001%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (54 samples, 0.08%)</title><rect x="90.1752%" y="1429" width="0.0780%" height="15" fill="rgb(209,21,19)" fg:x="62468" fg:w="54"/><text x="90.4252%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (7 samples, 0.01%)</title><rect x="90.2777%" y="1429" width="0.0101%" height="15" fill="rgb(236,145,4)" fg:x="62539" fg:w="7"/><text x="90.5277%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (11 samples, 0.02%)</title><rect x="90.2979%" y="1429" width="0.0159%" height="15" fill="rgb(220,133,36)" fg:x="62553" fg:w="11"/><text x="90.5479%" y="1439.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (11 samples, 0.02%)</title><rect x="90.3210%" y="1429" width="0.0159%" height="15" fill="rgb(244,18,3)" fg:x="62569" fg:w="11"/><text x="90.5710%" y="1439.50"></text></g><g><title>leveldb::Block::Iter::Valid (10 samples, 0.01%)</title><rect x="90.3369%" y="1429" width="0.0144%" height="15" fill="rgb(232,171,48)" fg:x="62580" fg:w="10"/><text x="90.5869%" y="1439.50"></text></g><g><title>leveldb::BlockBuilder::Add (11 samples, 0.02%)</title><rect x="90.3615%" y="1429" width="0.0159%" height="15" fill="rgb(223,223,53)" fg:x="62597" fg:w="11"/><text x="90.6115%" y="1439.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (11 samples, 0.02%)</title><rect x="90.3874%" y="1429" width="0.0159%" height="15" fill="rgb(246,92,13)" fg:x="62615" fg:w="11"/><text x="90.6374%" y="1439.50"></text></g><g><title>leveldb::EncodeVarint32 (9 samples, 0.01%)</title><rect x="90.4033%" y="1429" width="0.0130%" height="15" fill="rgb(229,171,10)" fg:x="62626" fg:w="9"/><text x="90.6533%" y="1439.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (9 samples, 0.01%)</title><rect x="90.4163%" y="1429" width="0.0130%" height="15" fill="rgb(213,131,26)" fg:x="62635" fg:w="9"/><text x="90.6663%" y="1439.50"></text></g><g><title>leveldb::Hash (21 samples, 0.03%)</title><rect x="90.4308%" y="1429" width="0.0303%" height="15" fill="rgb(242,87,54)" fg:x="62645" fg:w="21"/><text x="90.6808%" y="1439.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (79 samples, 0.11%)</title><rect x="90.4625%" y="1429" width="0.1140%" height="15" fill="rgb(237,21,35)" fg:x="62667" fg:w="79"/><text x="90.7125%" y="1439.50"></text></g><g><title>memcmp@plt (19 samples, 0.03%)</title><rect x="90.6227%" y="1429" width="0.0274%" height="15" fill="rgb(253,13,47)" fg:x="62778" fg:w="19"/><text x="90.8727%" y="1439.50"></text></g><g><title>memcpy@plt (16 samples, 0.02%)</title><rect x="90.6502%" y="1429" width="0.0231%" height="15" fill="rgb(215,122,49)" fg:x="62797" fg:w="16"/><text x="90.9002%" y="1439.50"></text></g><g><title>[anon] (598 samples, 0.86%)</title><rect x="89.8230%" y="1445" width="0.8632%" height="15" fill="rgb(209,179,30)" fg:x="62224" fg:w="598"/><text x="90.0730%" y="1455.50"></text></g><g><title>__memcmp_evex_movbe (14 samples, 0.02%)</title><rect x="90.7050%" y="1429" width="0.0202%" height="15" fill="rgb(235,100,24)" fg:x="62835" fg:w="14"/><text x="90.9550%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (11 samples, 0.02%)</title><rect x="90.7512%" y="1429" width="0.0159%" height="15" fill="rgb(209,67,24)" fg:x="62867" fg:w="11"/><text x="91.0012%" y="1439.50"></text></g><g><title>leveldb::Hash (10 samples, 0.01%)</title><rect x="90.8220%" y="1429" width="0.0144%" height="15" fill="rgb(206,74,32)" fg:x="62916" fg:w="10"/><text x="91.0720%" y="1439.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (12 samples, 0.02%)</title><rect x="90.8364%" y="1429" width="0.0173%" height="15" fill="rgb(212,45,25)" fg:x="62926" fg:w="12"/><text x="91.0864%" y="1439.50"></text></g><g><title>[unknown] (130 samples, 0.19%)</title><rect x="90.6877%" y="1445" width="0.1877%" height="15" fill="rgb(239,26,3)" fg:x="62823" fg:w="130"/><text x="90.9377%" y="1455.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (36 samples, 0.05%)</title><rect x="90.8855%" y="1333" width="0.0520%" height="15" fill="rgb(218,36,15)" fg:x="62960" fg:w="36"/><text x="91.1355%" y="1343.50"></text></g><g><title>leveldb::Slice::compare (15 samples, 0.02%)</title><rect x="90.9158%" y="1317" width="0.0217%" height="15" fill="rgb(206,108,24)" fg:x="62981" fg:w="15"/><text x="91.1658%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (53 samples, 0.08%)</title><rect x="90.9374%" y="1333" width="0.0765%" height="15" fill="rgb(234,204,42)" fg:x="62996" fg:w="53"/><text x="91.1874%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (12 samples, 0.02%)</title><rect x="91.0139%" y="1333" width="0.0173%" height="15" fill="rgb(229,2,11)" fg:x="63049" fg:w="12"/><text x="91.2639%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (7 samples, 0.01%)</title><rect x="91.0313%" y="1333" width="0.0101%" height="15" fill="rgb(221,20,48)" fg:x="63061" fg:w="7"/><text x="91.2813%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (13 samples, 0.02%)</title><rect x="91.0457%" y="1333" width="0.0188%" height="15" fill="rgb(244,164,10)" fg:x="63071" fg:w="13"/><text x="91.2957%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (9 samples, 0.01%)</title><rect x="91.0515%" y="1317" width="0.0130%" height="15" fill="rgb(243,229,2)" fg:x="63075" fg:w="9"/><text x="91.3015%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (8 samples, 0.01%)</title><rect x="91.0529%" y="1301" width="0.0115%" height="15" fill="rgb(232,131,37)" fg:x="63076" fg:w="8"/><text x="91.3029%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (16 samples, 0.02%)</title><rect x="91.0645%" y="1333" width="0.0231%" height="15" fill="rgb(217,156,11)" fg:x="63084" fg:w="16"/><text x="91.3145%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (7 samples, 0.01%)</title><rect x="91.0876%" y="1333" width="0.0101%" height="15" fill="rgb(239,99,48)" fg:x="63100" fg:w="7"/><text x="91.3376%" y="1343.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (10 samples, 0.01%)</title><rect x="91.1208%" y="1333" width="0.0144%" height="15" fill="rgb(231,209,9)" fg:x="63123" fg:w="10"/><text x="91.3708%" y="1343.50"></text></g><g><title>[[jbd2]] (11 samples, 0.02%)</title><rect x="91.1468%" y="1157" width="0.0159%" height="15" fill="rgb(254,97,27)" fg:x="63141" fg:w="11"/><text x="91.3968%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (147 samples, 0.21%)</title><rect x="91.1352%" y="1317" width="0.2122%" height="15" fill="rgb(223,151,38)" fg:x="63133" fg:w="147"/><text x="91.3852%" y="1327.50"></text></g><g><title>__unlink (147 samples, 0.21%)</title><rect x="91.1352%" y="1301" width="0.2122%" height="15" fill="rgb(219,206,35)" fg:x="63133" fg:w="147"/><text x="91.3852%" y="1311.50"></text></g><g><title>[unknown] (147 samples, 0.21%)</title><rect x="91.1352%" y="1285" width="0.2122%" height="15" fill="rgb(216,130,31)" fg:x="63133" fg:w="147"/><text x="91.3852%" y="1295.50"></text></g><g><title>[unknown] (147 samples, 0.21%)</title><rect x="91.1352%" y="1269" width="0.2122%" height="15" fill="rgb(251,97,34)" fg:x="63133" fg:w="147"/><text x="91.3852%" y="1279.50"></text></g><g><title>[unknown] (147 samples, 0.21%)</title><rect x="91.1352%" y="1253" width="0.2122%" height="15" fill="rgb(246,159,47)" fg:x="63133" fg:w="147"/><text x="91.3852%" y="1263.50"></text></g><g><title>[unknown] (147 samples, 0.21%)</title><rect x="91.1352%" y="1237" width="0.2122%" height="15" fill="rgb(232,87,10)" fg:x="63133" fg:w="147"/><text x="91.3852%" y="1247.50"></text></g><g><title>[unknown] (147 samples, 0.21%)</title><rect x="91.1352%" y="1221" width="0.2122%" height="15" fill="rgb(249,1,37)" fg:x="63133" fg:w="147"/><text x="91.3852%" y="1231.50"></text></g><g><title>[[ext4]] (147 samples, 0.21%)</title><rect x="91.1352%" y="1205" width="0.2122%" height="15" fill="rgb(239,135,14)" fg:x="63133" fg:w="147"/><text x="91.3852%" y="1215.50"></text></g><g><title>[unknown] (146 samples, 0.21%)</title><rect x="91.1366%" y="1189" width="0.2108%" height="15" fill="rgb(253,116,46)" fg:x="63134" fg:w="146"/><text x="91.3866%" y="1199.50"></text></g><g><title>[unknown] (145 samples, 0.21%)</title><rect x="91.1381%" y="1173" width="0.2093%" height="15" fill="rgb(222,217,37)" fg:x="63135" fg:w="145"/><text x="91.3881%" y="1183.50"></text></g><g><title>[unknown] (128 samples, 0.18%)</title><rect x="91.1626%" y="1157" width="0.1848%" height="15" fill="rgb(252,96,8)" fg:x="63152" fg:w="128"/><text x="91.4126%" y="1167.50"></text></g><g><title>[unknown] (94 samples, 0.14%)</title><rect x="91.2117%" y="1141" width="0.1357%" height="15" fill="rgb(254,103,41)" fg:x="63186" fg:w="94"/><text x="91.4617%" y="1151.50"></text></g><g><title>[unknown] (52 samples, 0.08%)</title><rect x="91.2723%" y="1125" width="0.0751%" height="15" fill="rgb(218,213,19)" fg:x="63228" fg:w="52"/><text x="91.5223%" y="1135.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="91.3185%" y="1109" width="0.0289%" height="15" fill="rgb(253,95,21)" fg:x="63260" fg:w="20"/><text x="91.5685%" y="1119.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (181 samples, 0.26%)</title><rect x="91.1352%" y="1333" width="0.2613%" height="15" fill="rgb(229,26,28)" fg:x="63133" fg:w="181"/><text x="91.3852%" y="1343.50"></text></g><g><title>leveldb::TableCache::Evict (31 samples, 0.04%)</title><rect x="91.3517%" y="1317" width="0.0447%" height="15" fill="rgb(230,129,16)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1327.50"></text></g><g><title>Erase (31 samples, 0.04%)</title><rect x="91.3517%" y="1301" width="0.0447%" height="15" fill="rgb(236,126,17)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (31 samples, 0.04%)</title><rect x="91.3517%" y="1285" width="0.0447%" height="15" fill="rgb(209,33,33)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (31 samples, 0.04%)</title><rect x="91.3517%" y="1269" width="0.0447%" height="15" fill="rgb(227,85,29)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (31 samples, 0.04%)</title><rect x="91.3517%" y="1253" width="0.0447%" height="15" fill="rgb(241,53,46)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1263.50"></text></g><g><title>leveldb::DeleteEntry (31 samples, 0.04%)</title><rect x="91.3517%" y="1237" width="0.0447%" height="15" fill="rgb(228,167,53)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1247.50"></text></g><g><title>~PosixMmapReadableFile (31 samples, 0.04%)</title><rect x="91.3517%" y="1221" width="0.0447%" height="15" fill="rgb(238,195,45)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (31 samples, 0.04%)</title><rect x="91.3517%" y="1205" width="0.0447%" height="15" fill="rgb(252,124,45)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1215.50"></text></g><g><title>__munmap (31 samples, 0.04%)</title><rect x="91.3517%" y="1189" width="0.0447%" height="15" fill="rgb(251,38,35)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1199.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="91.3517%" y="1173" width="0.0447%" height="15" fill="rgb(227,33,2)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1183.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="91.3517%" y="1157" width="0.0447%" height="15" fill="rgb(223,157,46)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1167.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="91.3517%" y="1141" width="0.0447%" height="15" fill="rgb(222,78,41)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1151.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="91.3517%" y="1125" width="0.0447%" height="15" fill="rgb(248,176,11)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1135.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="91.3517%" y="1109" width="0.0447%" height="15" fill="rgb(241,221,18)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1119.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="91.3517%" y="1093" width="0.0447%" height="15" fill="rgb(218,85,22)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1103.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="91.3517%" y="1077" width="0.0447%" height="15" fill="rgb(222,223,7)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1087.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="91.3517%" y="1061" width="0.0447%" height="15" fill="rgb(254,59,39)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1071.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="91.3517%" y="1045" width="0.0447%" height="15" fill="rgb(247,100,27)" fg:x="63283" fg:w="31"/><text x="91.6017%" y="1055.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="91.3691%" y="1029" width="0.0274%" height="15" fill="rgb(237,207,10)" fg:x="63295" fg:w="19"/><text x="91.6191%" y="1039.50"></text></g><g><title>Next (10 samples, 0.01%)</title><rect x="91.4268%" y="1285" width="0.0144%" height="15" fill="rgb(220,121,28)" fg:x="63335" fg:w="10"/><text x="91.6768%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (10 samples, 0.01%)</title><rect x="91.4268%" y="1269" width="0.0144%" height="15" fill="rgb(213,223,20)" fg:x="63335" fg:w="10"/><text x="91.6768%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Update (10 samples, 0.01%)</title><rect x="91.4268%" y="1253" width="0.0144%" height="15" fill="rgb(205,121,27)" fg:x="63335" fg:w="10"/><text x="91.6768%" y="1263.50"></text></g><g><title>leveldb::crc32c::Unmask (7 samples, 0.01%)</title><rect x="91.4513%" y="1205" width="0.0101%" height="15" fill="rgb(253,24,53)" fg:x="63352" fg:w="7"/><text x="91.7013%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="91.4513%" y="1189" width="0.0101%" height="15" fill="rgb(224,224,47)" fg:x="63352" fg:w="7"/><text x="91.7013%" y="1199.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="91.4513%" y="1173" width="0.0101%" height="15" fill="rgb(250,125,36)" fg:x="63352" fg:w="7"/><text x="91.7013%" y="1183.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="91.4513%" y="1157" width="0.0101%" height="15" fill="rgb(240,144,38)" fg:x="63352" fg:w="7"/><text x="91.7013%" y="1167.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="91.4513%" y="1141" width="0.0101%" height="15" fill="rgb(250,15,50)" fg:x="63352" fg:w="7"/><text x="91.7013%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="91.4513%" y="1125" width="0.0101%" height="15" fill="rgb(210,24,26)" fg:x="63352" fg:w="7"/><text x="91.7013%" y="1135.50"></text></g><g><title>crc32c::ExtendSse42 (31 samples, 0.04%)</title><rect x="91.4614%" y="1189" width="0.0447%" height="15" fill="rgb(234,53,53)" fg:x="63359" fg:w="31"/><text x="91.7114%" y="1199.50"></text></g><g><title>_mm_crc32_u64 (17 samples, 0.02%)</title><rect x="91.4817%" y="1173" width="0.0245%" height="15" fill="rgb(208,108,28)" fg:x="63373" fg:w="17"/><text x="91.7317%" y="1183.50"></text></g><g><title>SkipEmptyDataBlocksForward (46 samples, 0.07%)</title><rect x="91.4412%" y="1285" width="0.0664%" height="15" fill="rgb(227,143,7)" fg:x="63345" fg:w="46"/><text x="91.6912%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (46 samples, 0.07%)</title><rect x="91.4412%" y="1269" width="0.0664%" height="15" fill="rgb(238,189,38)" fg:x="63345" fg:w="46"/><text x="91.6912%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (46 samples, 0.07%)</title><rect x="91.4412%" y="1253" width="0.0664%" height="15" fill="rgb(222,69,15)" fg:x="63345" fg:w="46"/><text x="91.6912%" y="1263.50"></text></g><g><title>leveldb::Table::BlockReader (43 samples, 0.06%)</title><rect x="91.4456%" y="1237" width="0.0621%" height="15" fill="rgb(213,169,7)" fg:x="63348" fg:w="43"/><text x="91.6956%" y="1247.50"></text></g><g><title>leveldb::ReadBlock (39 samples, 0.06%)</title><rect x="91.4513%" y="1221" width="0.0563%" height="15" fill="rgb(251,219,4)" fg:x="63352" fg:w="39"/><text x="91.7013%" y="1231.50"></text></g><g><title>leveldb::crc32c::Value (32 samples, 0.05%)</title><rect x="91.4614%" y="1205" width="0.0462%" height="15" fill="rgb(241,55,40)" fg:x="63359" fg:w="32"/><text x="91.7114%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (26 samples, 0.04%)</title><rect x="91.5105%" y="1285" width="0.0375%" height="15" fill="rgb(243,57,30)" fg:x="63393" fg:w="26"/><text x="91.7605%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (12 samples, 0.02%)</title><rect x="91.5307%" y="1269" width="0.0173%" height="15" fill="rgb(234,50,30)" fg:x="63407" fg:w="12"/><text x="91.7807%" y="1279.50"></text></g><g><title>leveldb::BlockBuilder::Add (11 samples, 0.02%)</title><rect x="91.5914%" y="1189" width="0.0159%" height="15" fill="rgb(239,23,42)" fg:x="63449" fg:w="11"/><text x="91.8414%" y="1199.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (7 samples, 0.01%)</title><rect x="91.6072%" y="1189" width="0.0101%" height="15" fill="rgb(217,38,19)" fg:x="63460" fg:w="7"/><text x="91.8572%" y="1199.50"></text></g><g><title>Next (28 samples, 0.04%)</title><rect x="91.5784%" y="1253" width="0.0404%" height="15" fill="rgb(215,179,16)" fg:x="63440" fg:w="28"/><text x="91.8284%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (28 samples, 0.04%)</title><rect x="91.5784%" y="1237" width="0.0404%" height="15" fill="rgb(254,21,37)" fg:x="63440" fg:w="28"/><text x="91.8284%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (28 samples, 0.04%)</title><rect x="91.5784%" y="1221" width="0.0404%" height="15" fill="rgb(219,207,48)" fg:x="63440" fg:w="28"/><text x="91.8284%" y="1231.50"></text></g><g><title>leveldb::IteratorWrapper::Update (25 samples, 0.04%)</title><rect x="91.5827%" y="1205" width="0.0361%" height="15" fill="rgb(227,225,41)" fg:x="63443" fg:w="25"/><text x="91.8327%" y="1215.50"></text></g><g><title>SetDataIterator (7 samples, 0.01%)</title><rect x="91.6188%" y="1205" width="0.0101%" height="15" fill="rgb(223,130,1)" fg:x="63468" fg:w="7"/><text x="91.8688%" y="1215.50"></text></g><g><title>leveldb::IteratorWrapper::Set (7 samples, 0.01%)</title><rect x="91.6188%" y="1189" width="0.0101%" height="15" fill="rgb(249,54,42)" fg:x="63468" fg:w="7"/><text x="91.8688%" y="1199.50"></text></g><g><title>leveldb::crc32c::Unmask (41 samples, 0.06%)</title><rect x="91.6765%" y="1173" width="0.0592%" height="15" fill="rgb(248,69,25)" fg:x="63508" fg:w="41"/><text x="91.9265%" y="1183.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="91.6794%" y="1157" width="0.0563%" height="15" fill="rgb(234,21,32)" fg:x="63510" fg:w="39"/><text x="91.9294%" y="1167.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="91.6794%" y="1141" width="0.0563%" height="15" fill="rgb(252,136,6)" fg:x="63510" fg:w="39"/><text x="91.9294%" y="1151.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="91.6837%" y="1125" width="0.0520%" height="15" fill="rgb(245,87,12)" fg:x="63513" fg:w="36"/><text x="91.9337%" y="1135.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="91.6837%" y="1109" width="0.0520%" height="15" fill="rgb(208,12,15)" fg:x="63513" fg:w="36"/><text x="91.9337%" y="1119.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="91.6895%" y="1093" width="0.0462%" height="15" fill="rgb(250,98,2)" fg:x="63517" fg:w="32"/><text x="91.9395%" y="1103.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="91.6895%" y="1077" width="0.0462%" height="15" fill="rgb(205,213,15)" fg:x="63517" fg:w="32"/><text x="91.9395%" y="1087.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="91.6895%" y="1061" width="0.0462%" height="15" fill="rgb(248,192,44)" fg:x="63517" fg:w="32"/><text x="91.9395%" y="1071.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="91.7025%" y="1045" width="0.0332%" height="15" fill="rgb(221,89,17)" fg:x="63526" fg:w="23"/><text x="91.9525%" y="1055.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="91.7227%" y="1029" width="0.0130%" height="15" fill="rgb(209,55,3)" fg:x="63540" fg:w="9"/><text x="91.9727%" y="1039.50"></text></g><g><title>crc32c::ExtendSse42 (128 samples, 0.18%)</title><rect x="91.7357%" y="1157" width="0.1848%" height="15" fill="rgb(247,23,45)" fg:x="63549" fg:w="128"/><text x="91.9857%" y="1167.50"></text></g><g><title>_mm_crc32_u64 (64 samples, 0.09%)</title><rect x="91.8281%" y="1141" width="0.0924%" height="15" fill="rgb(235,152,23)" fg:x="63613" fg:w="64"/><text x="92.0781%" y="1151.50"></text></g><g><title>leveldb::crc32c::Value (130 samples, 0.19%)</title><rect x="91.7357%" y="1173" width="0.1877%" height="15" fill="rgb(244,63,13)" fg:x="63549" fg:w="130"/><text x="91.9857%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (212 samples, 0.31%)</title><rect x="91.6188%" y="1221" width="0.3060%" height="15" fill="rgb(227,30,37)" fg:x="63468" fg:w="212"/><text x="91.8688%" y="1231.50"></text></g><g><title>leveldb::Table::BlockReader (199 samples, 0.29%)</title><rect x="91.6376%" y="1205" width="0.2873%" height="15" fill="rgb(224,49,42)" fg:x="63481" fg:w="199"/><text x="91.8876%" y="1215.50"></text></g><g><title>leveldb::ReadBlock (175 samples, 0.25%)</title><rect x="91.6722%" y="1189" width="0.2526%" height="15" fill="rgb(218,129,5)" fg:x="63505" fg:w="175"/><text x="91.9222%" y="1199.50"></text></g><g><title>SkipEmptyDataBlocksForward (214 samples, 0.31%)</title><rect x="91.6188%" y="1253" width="0.3089%" height="15" fill="rgb(240,199,54)" fg:x="63468" fg:w="214"/><text x="91.8688%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (214 samples, 0.31%)</title><rect x="91.6188%" y="1237" width="0.3089%" height="15" fill="rgb(234,31,13)" fg:x="63468" fg:w="214"/><text x="91.8688%" y="1247.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (9 samples, 0.01%)</title><rect x="91.9450%" y="1221" width="0.0130%" height="15" fill="rgb(219,73,54)" fg:x="63694" fg:w="9"/><text x="92.1950%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (9 samples, 0.01%)</title><rect x="91.9450%" y="1205" width="0.0130%" height="15" fill="rgb(251,162,10)" fg:x="63694" fg:w="9"/><text x="92.1950%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (9 samples, 0.01%)</title><rect x="91.9450%" y="1189" width="0.0130%" height="15" fill="rgb(240,138,47)" fg:x="63694" fg:w="9"/><text x="92.1950%" y="1199.50"></text></g><g><title>leveldb::operator== (10 samples, 0.01%)</title><rect x="91.9609%" y="1205" width="0.0144%" height="15" fill="rgb(216,138,26)" fg:x="63705" fg:w="10"/><text x="92.2109%" y="1215.50"></text></g><g><title>leveldb::BlockBuilder::Add (19 samples, 0.03%)</title><rect x="91.9580%" y="1221" width="0.0274%" height="15" fill="rgb(243,17,35)" fg:x="63703" fg:w="19"/><text x="92.2080%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (7 samples, 0.01%)</title><rect x="91.9753%" y="1205" width="0.0101%" height="15" fill="rgb(241,60,18)" fg:x="63715" fg:w="7"/><text x="92.2253%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (7 samples, 0.01%)</title><rect x="91.9753%" y="1189" width="0.0101%" height="15" fill="rgb(234,2,44)" fg:x="63715" fg:w="7"/><text x="92.2253%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (43 samples, 0.06%)</title><rect x="91.9277%" y="1253" width="0.0621%" height="15" fill="rgb(225,225,33)" fg:x="63682" fg:w="43"/><text x="92.1777%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (39 samples, 0.06%)</title><rect x="91.9335%" y="1237" width="0.0563%" height="15" fill="rgb(234,50,31)" fg:x="63686" fg:w="39"/><text x="92.1835%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::Add (12 samples, 0.02%)</title><rect x="92.0230%" y="1253" width="0.0173%" height="15" fill="rgb(249,6,25)" fg:x="63748" fg:w="12"/><text x="92.2730%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (342 samples, 0.49%)</title><rect x="91.5481%" y="1285" width="0.4937%" height="15" fill="rgb(241,5,17)" fg:x="63419" fg:w="342"/><text x="91.7981%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (330 samples, 0.48%)</title><rect x="91.5654%" y="1269" width="0.4764%" height="15" fill="rgb(207,116,10)" fg:x="63431" fg:w="330"/><text x="91.8154%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (11 samples, 0.02%)</title><rect x="92.0490%" y="1285" width="0.0159%" height="15" fill="rgb(222,128,18)" fg:x="63766" fg:w="11"/><text x="92.2990%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (21 samples, 0.03%)</title><rect x="92.0735%" y="1285" width="0.0303%" height="15" fill="rgb(229,109,25)" fg:x="63783" fg:w="21"/><text x="92.3235%" y="1295.50"></text></g><g><title>Next (485 samples, 0.70%)</title><rect x="91.4268%" y="1317" width="0.7001%" height="15" fill="rgb(222,102,25)" fg:x="63335" fg:w="485"/><text x="91.6768%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (485 samples, 0.70%)</title><rect x="91.4268%" y="1301" width="0.7001%" height="15" fill="rgb(239,211,5)" fg:x="63335" fg:w="485"/><text x="91.6768%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::FileSize (11 samples, 0.02%)</title><rect x="92.1110%" y="1285" width="0.0159%" height="15" fill="rgb(223,136,26)" fg:x="63809" fg:w="11"/><text x="92.3610%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (7 samples, 0.01%)</title><rect x="92.1269%" y="1317" width="0.0101%" height="15" fill="rgb(227,30,15)" fg:x="63820" fg:w="7"/><text x="92.3769%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (72 samples, 0.10%)</title><rect x="92.1457%" y="1317" width="0.1039%" height="15" fill="rgb(247,76,4)" fg:x="63833" fg:w="72"/><text x="92.3957%" y="1327.50"></text></g><g><title>leveldb::Slice::compare (30 samples, 0.04%)</title><rect x="92.2063%" y="1301" width="0.0433%" height="15" fill="rgb(245,38,48)" fg:x="63875" fg:w="30"/><text x="92.4563%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (41 samples, 0.06%)</title><rect x="92.2496%" y="1317" width="0.0592%" height="15" fill="rgb(210,220,14)" fg:x="63905" fg:w="41"/><text x="92.4996%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (29 samples, 0.04%)</title><rect x="92.3232%" y="1285" width="0.0419%" height="15" fill="rgb(224,60,51)" fg:x="63956" fg:w="29"/><text x="92.5732%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (19 samples, 0.03%)</title><rect x="92.3680%" y="1285" width="0.0274%" height="15" fill="rgb(212,133,49)" fg:x="63987" fg:w="19"/><text x="92.6180%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (17 samples, 0.02%)</title><rect x="92.3709%" y="1269" width="0.0245%" height="15" fill="rgb(231,39,22)" fg:x="63989" fg:w="17"/><text x="92.6209%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Update (17 samples, 0.02%)</title><rect x="92.3709%" y="1253" width="0.0245%" height="15" fill="rgb(236,173,22)" fg:x="63989" fg:w="17"/><text x="92.6209%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (16 samples, 0.02%)</title><rect x="92.4344%" y="1269" width="0.0231%" height="15" fill="rgb(210,70,0)" fg:x="64033" fg:w="16"/><text x="92.6844%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (10 samples, 0.01%)</title><rect x="92.4589%" y="1237" width="0.0144%" height="15" fill="rgb(215,170,11)" fg:x="64050" fg:w="10"/><text x="92.7089%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (19 samples, 0.03%)</title><rect x="92.4575%" y="1253" width="0.0274%" height="15" fill="rgb(220,154,28)" fg:x="64049" fg:w="19"/><text x="92.7075%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (8 samples, 0.01%)</title><rect x="92.4734%" y="1237" width="0.0115%" height="15" fill="rgb(240,160,41)" fg:x="64060" fg:w="8"/><text x="92.7234%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (8 samples, 0.01%)</title><rect x="92.4734%" y="1221" width="0.0115%" height="15" fill="rgb(243,215,41)" fg:x="64060" fg:w="8"/><text x="92.7234%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (20 samples, 0.03%)</title><rect x="92.4575%" y="1269" width="0.0289%" height="15" fill="rgb(214,208,31)" fg:x="64049" fg:w="20"/><text x="92.7075%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (59 samples, 0.09%)</title><rect x="92.4041%" y="1285" width="0.0852%" height="15" fill="rgb(247,57,22)" fg:x="64012" fg:w="59"/><text x="92.6541%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::Valid (8 samples, 0.01%)</title><rect x="92.4892%" y="1285" width="0.0115%" height="15" fill="rgb(228,73,52)" fg:x="64071" fg:w="8"/><text x="92.7392%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (11 samples, 0.02%)</title><rect x="92.5773%" y="1237" width="0.0159%" height="15" fill="rgb(252,60,9)" fg:x="64132" fg:w="11"/><text x="92.8273%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (62 samples, 0.09%)</title><rect x="92.5066%" y="1269" width="0.0895%" height="15" fill="rgb(233,9,51)" fg:x="64083" fg:w="62"/><text x="92.7566%" y="1279.50"></text></g><g><title>leveldb::Slice::compare (32 samples, 0.05%)</title><rect x="92.5499%" y="1253" width="0.0462%" height="15" fill="rgb(223,67,14)" fg:x="64113" fg:w="32"/><text x="92.7999%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (43 samples, 0.06%)</title><rect x="92.5961%" y="1269" width="0.0621%" height="15" fill="rgb(222,86,2)" fg:x="64145" fg:w="43"/><text x="92.8461%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (21 samples, 0.03%)</title><rect x="92.6610%" y="1269" width="0.0303%" height="15" fill="rgb(243,58,54)" fg:x="64190" fg:w="21"/><text x="92.9110%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (18 samples, 0.03%)</title><rect x="92.6654%" y="1253" width="0.0260%" height="15" fill="rgb(210,200,39)" fg:x="64193" fg:w="18"/><text x="92.9154%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (18 samples, 0.03%)</title><rect x="92.6654%" y="1237" width="0.0260%" height="15" fill="rgb(238,135,9)" fg:x="64193" fg:w="18"/><text x="92.9154%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (12 samples, 0.02%)</title><rect x="92.6740%" y="1221" width="0.0173%" height="15" fill="rgb(232,179,7)" fg:x="64199" fg:w="12"/><text x="92.9240%" y="1231.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (10 samples, 0.01%)</title><rect x="92.7087%" y="1269" width="0.0144%" height="15" fill="rgb(245,65,41)" fg:x="64223" fg:w="10"/><text x="92.9587%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::key (10 samples, 0.01%)</title><rect x="92.7303%" y="1269" width="0.0144%" height="15" fill="rgb(227,43,8)" fg:x="64238" fg:w="10"/><text x="92.9803%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (54 samples, 0.08%)</title><rect x="92.7462%" y="1269" width="0.0780%" height="15" fill="rgb(235,91,14)" fg:x="64249" fg:w="54"/><text x="92.9962%" y="1279.50"></text></g><g><title>leveldb::ExtractUserKey (12 samples, 0.02%)</title><rect x="92.8068%" y="1253" width="0.0173%" height="15" fill="rgb(235,219,31)" fg:x="64291" fg:w="12"/><text x="93.0568%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (224 samples, 0.32%)</title><rect x="92.5037%" y="1285" width="0.3234%" height="15" fill="rgb(227,121,25)" fg:x="64081" fg:w="224"/><text x="92.7537%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (357 samples, 0.52%)</title><rect x="92.3131%" y="1301" width="0.5153%" height="15" fill="rgb(254,129,24)" fg:x="63949" fg:w="357"/><text x="92.5631%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (9 samples, 0.01%)</title><rect x="92.8299%" y="1301" width="0.0130%" height="15" fill="rgb(226,144,49)" fg:x="64307" fg:w="9"/><text x="93.0799%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (15 samples, 0.02%)</title><rect x="92.8718%" y="1269" width="0.0217%" height="15" fill="rgb(214,187,32)" fg:x="64336" fg:w="15"/><text x="93.1218%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (17 samples, 0.02%)</title><rect x="92.8718%" y="1285" width="0.0245%" height="15" fill="rgb(243,129,46)" fg:x="64336" fg:w="17"/><text x="93.1218%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (37 samples, 0.05%)</title><rect x="92.8530%" y="1301" width="0.0534%" height="15" fill="rgb(221,185,35)" fg:x="64323" fg:w="37"/><text x="93.1030%" y="1311.50"></text></g><g><title>DecodeEntry (7 samples, 0.01%)</title><rect x="92.9497%" y="1237" width="0.0101%" height="15" fill="rgb(205,0,32)" fg:x="64390" fg:w="7"/><text x="93.1997%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (452 samples, 0.65%)</title><rect x="92.3088%" y="1317" width="0.6525%" height="15" fill="rgb(229,179,12)" fg:x="63946" fg:w="452"/><text x="92.5588%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (29 samples, 0.04%)</title><rect x="92.9194%" y="1301" width="0.0419%" height="15" fill="rgb(252,107,19)" fg:x="64369" fg:w="29"/><text x="93.1694%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (29 samples, 0.04%)</title><rect x="92.9194%" y="1285" width="0.0419%" height="15" fill="rgb(220,95,27)" fg:x="64369" fg:w="29"/><text x="93.1694%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Update (17 samples, 0.02%)</title><rect x="92.9367%" y="1269" width="0.0245%" height="15" fill="rgb(240,113,40)" fg:x="64381" fg:w="17"/><text x="93.1867%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (13 samples, 0.02%)</title><rect x="92.9425%" y="1253" width="0.0188%" height="15" fill="rgb(208,4,43)" fg:x="64385" fg:w="13"/><text x="93.1925%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (10 samples, 0.01%)</title><rect x="92.9916%" y="1253" width="0.0144%" height="15" fill="rgb(247,189,30)" fg:x="64419" fg:w="10"/><text x="93.2416%" y="1263.50"></text></g><g><title>leveldb::Table::BlockReader (9 samples, 0.01%)</title><rect x="92.9930%" y="1237" width="0.0130%" height="15" fill="rgb(231,157,17)" fg:x="64420" fg:w="9"/><text x="93.2430%" y="1247.50"></text></g><g><title>leveldb::ReadBlock (8 samples, 0.01%)</title><rect x="92.9945%" y="1221" width="0.0115%" height="15" fill="rgb(224,139,6)" fg:x="64421" fg:w="8"/><text x="93.2445%" y="1231.50"></text></g><g><title>SkipEmptyDataBlocksForward (11 samples, 0.02%)</title><rect x="92.9916%" y="1285" width="0.0159%" height="15" fill="rgb(223,83,16)" fg:x="64419" fg:w="11"/><text x="93.2416%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (11 samples, 0.02%)</title><rect x="92.9916%" y="1269" width="0.0159%" height="15" fill="rgb(232,211,20)" fg:x="64419" fg:w="11"/><text x="93.2416%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (40 samples, 0.06%)</title><rect x="92.9714%" y="1317" width="0.0577%" height="15" fill="rgb(225,203,35)" fg:x="64405" fg:w="40"/><text x="93.2214%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (39 samples, 0.06%)</title><rect x="92.9728%" y="1301" width="0.0563%" height="15" fill="rgb(215,211,44)" fg:x="64406" fg:w="39"/><text x="93.2228%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (12 samples, 0.02%)</title><rect x="93.0118%" y="1285" width="0.0173%" height="15" fill="rgb(248,213,26)" fg:x="64433" fg:w="12"/><text x="93.2618%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (17 samples, 0.02%)</title><rect x="93.0291%" y="1317" width="0.0245%" height="15" fill="rgb(214,23,52)" fg:x="64445" fg:w="17"/><text x="93.2791%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (14 samples, 0.02%)</title><rect x="93.0638%" y="1317" width="0.0202%" height="15" fill="rgb(225,173,50)" fg:x="64469" fg:w="14"/><text x="93.3138%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::value (12 samples, 0.02%)</title><rect x="93.0667%" y="1301" width="0.0173%" height="15" fill="rgb(206,150,22)" fg:x="64471" fg:w="12"/><text x="93.3167%" y="1311.50"></text></g><g><title>value (8 samples, 0.01%)</title><rect x="93.0724%" y="1285" width="0.0115%" height="15" fill="rgb(239,64,23)" fg:x="64475" fg:w="8"/><text x="93.3224%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::value (7 samples, 0.01%)</title><rect x="93.0739%" y="1269" width="0.0101%" height="15" fill="rgb(242,50,38)" fg:x="64476" fg:w="7"/><text x="93.3239%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (18 samples, 0.03%)</title><rect x="93.0869%" y="1317" width="0.0260%" height="15" fill="rgb(217,91,15)" fg:x="64485" fg:w="18"/><text x="93.3369%" y="1327.50"></text></g><g><title>leveldb::Block::Iter::value (15 samples, 0.02%)</title><rect x="93.1172%" y="1317" width="0.0217%" height="15" fill="rgb(230,172,6)" fg:x="64506" fg:w="15"/><text x="93.3672%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (7 samples, 0.01%)</title><rect x="93.1403%" y="1301" width="0.0101%" height="15" fill="rgb(221,98,26)" fg:x="64522" fg:w="7"/><text x="93.3903%" y="1311.50"></text></g><g><title>leveldb::BlockBuilder::Add (9 samples, 0.01%)</title><rect x="93.1388%" y="1317" width="0.0130%" height="15" fill="rgb(227,210,45)" fg:x="64521" fg:w="9"/><text x="93.3888%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (19 samples, 0.03%)</title><rect x="93.1749%" y="1301" width="0.0274%" height="15" fill="rgb(206,8,30)" fg:x="64546" fg:w="19"/><text x="93.4249%" y="1311.50"></text></g><g><title>leveldb::Slice::compare (12 samples, 0.02%)</title><rect x="93.1850%" y="1285" width="0.0173%" height="15" fill="rgb(241,219,17)" fg:x="64553" fg:w="12"/><text x="93.4350%" y="1295.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (10 samples, 0.01%)</title><rect x="93.2081%" y="1301" width="0.0144%" height="15" fill="rgb(247,121,29)" fg:x="64569" fg:w="10"/><text x="93.4581%" y="1311.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (13 samples, 0.02%)</title><rect x="93.2226%" y="1301" width="0.0188%" height="15" fill="rgb(219,169,49)" fg:x="64579" fg:w="13"/><text x="93.4726%" y="1311.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (13 samples, 0.02%)</title><rect x="93.2500%" y="1301" width="0.0188%" height="15" fill="rgb(253,49,49)" fg:x="64598" fg:w="13"/><text x="93.5000%" y="1311.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (83 samples, 0.12%)</title><rect x="93.1518%" y="1317" width="0.1198%" height="15" fill="rgb(217,178,3)" fg:x="64530" fg:w="83"/><text x="93.4018%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (7 samples, 0.01%)</title><rect x="93.3135%" y="1301" width="0.0101%" height="15" fill="rgb(234,73,37)" fg:x="64642" fg:w="7"/><text x="93.5635%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.01%)</title><rect x="93.3510%" y="1285" width="0.0115%" height="15" fill="rgb(250,98,22)" fg:x="64668" fg:w="8"/><text x="93.6010%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (21 samples, 0.03%)</title><rect x="93.3626%" y="1285" width="0.0303%" height="15" fill="rgb(220,108,37)" fg:x="64676" fg:w="21"/><text x="93.6126%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (13 samples, 0.02%)</title><rect x="93.3929%" y="1285" width="0.0188%" height="15" fill="rgb(225,168,10)" fg:x="64697" fg:w="13"/><text x="93.6429%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (8 samples, 0.01%)</title><rect x="93.4001%" y="1269" width="0.0115%" height="15" fill="rgb(247,215,21)" fg:x="64702" fg:w="8"/><text x="93.6501%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Update (8 samples, 0.01%)</title><rect x="93.4001%" y="1253" width="0.0115%" height="15" fill="rgb(253,189,31)" fg:x="64702" fg:w="8"/><text x="93.6501%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (61 samples, 0.09%)</title><rect x="93.3453%" y="1301" width="0.0881%" height="15" fill="rgb(241,54,22)" fg:x="64664" fg:w="61"/><text x="93.5953%" y="1311.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (115 samples, 0.17%)</title><rect x="93.2716%" y="1317" width="0.1660%" height="15" fill="rgb(211,87,4)" fg:x="64613" fg:w="115"/><text x="93.5216%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (28 samples, 0.04%)</title><rect x="93.4377%" y="1285" width="0.0404%" height="15" fill="rgb(245,112,24)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1295.50"></text></g><g><title>__unlink (28 samples, 0.04%)</title><rect x="93.4377%" y="1269" width="0.0404%" height="15" fill="rgb(235,190,41)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1279.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="93.4377%" y="1253" width="0.0404%" height="15" fill="rgb(214,89,8)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1263.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="93.4377%" y="1237" width="0.0404%" height="15" fill="rgb(249,155,35)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1247.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="93.4377%" y="1221" width="0.0404%" height="15" fill="rgb(249,88,26)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1231.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="93.4377%" y="1205" width="0.0404%" height="15" fill="rgb(232,56,8)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1215.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="93.4377%" y="1189" width="0.0404%" height="15" fill="rgb(240,95,3)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1199.50"></text></g><g><title>[[ext4]] (28 samples, 0.04%)</title><rect x="93.4377%" y="1173" width="0.0404%" height="15" fill="rgb(222,44,28)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1183.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="93.4377%" y="1157" width="0.0404%" height="15" fill="rgb(234,16,30)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1167.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="93.4377%" y="1141" width="0.0404%" height="15" fill="rgb(223,26,17)" fg:x="64728" fg:w="28"/><text x="93.6877%" y="1151.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="93.4449%" y="1125" width="0.0332%" height="15" fill="rgb(239,187,47)" fg:x="64733" fg:w="23"/><text x="93.6949%" y="1135.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="93.4478%" y="1109" width="0.0303%" height="15" fill="rgb(247,102,50)" fg:x="64735" fg:w="21"/><text x="93.6978%" y="1119.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="93.4593%" y="1093" width="0.0188%" height="15" fill="rgb(231,216,22)" fg:x="64743" fg:w="13"/><text x="93.7093%" y="1103.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="93.4651%" y="1077" width="0.0130%" height="15" fill="rgb(216,201,26)" fg:x="64747" fg:w="9"/><text x="93.7151%" y="1087.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (29 samples, 0.04%)</title><rect x="93.4377%" y="1301" width="0.0419%" height="15" fill="rgb(214,186,23)" fg:x="64728" fg:w="29"/><text x="93.6877%" y="1311.50"></text></g><g><title>[[ext4]] (11 samples, 0.02%)</title><rect x="93.4867%" y="1029" width="0.0159%" height="15" fill="rgb(235,184,4)" fg:x="64762" fg:w="11"/><text x="93.7367%" y="1039.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="93.4911%" y="1013" width="0.0115%" height="15" fill="rgb(244,46,17)" fg:x="64765" fg:w="8"/><text x="93.7411%" y="1023.50"></text></g><g><title>[[ext4]] (16 samples, 0.02%)</title><rect x="93.4853%" y="1045" width="0.0231%" height="15" fill="rgb(248,74,46)" fg:x="64761" fg:w="16"/><text x="93.7353%" y="1055.50"></text></g><g><title>[[ext4]] (24 samples, 0.03%)</title><rect x="93.4810%" y="1093" width="0.0346%" height="15" fill="rgb(243,79,5)" fg:x="64758" fg:w="24"/><text x="93.7310%" y="1103.50"></text></g><g><title>[[ext4]] (24 samples, 0.03%)</title><rect x="93.4810%" y="1077" width="0.0346%" height="15" fill="rgb(213,148,1)" fg:x="64758" fg:w="24"/><text x="93.7310%" y="1087.50"></text></g><g><title>[[ext4]] (24 samples, 0.03%)</title><rect x="93.4810%" y="1061" width="0.0346%" height="15" fill="rgb(221,30,0)" fg:x="64758" fg:w="24"/><text x="93.7310%" y="1071.50"></text></g><g><title>Sync (31 samples, 0.04%)</title><rect x="93.4795%" y="1269" width="0.0447%" height="15" fill="rgb(207,85,29)" fg:x="64757" fg:w="31"/><text x="93.7295%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (31 samples, 0.04%)</title><rect x="93.4795%" y="1253" width="0.0447%" height="15" fill="rgb(239,31,46)" fg:x="64757" fg:w="31"/><text x="93.7295%" y="1263.50"></text></g><g><title>fdatasync (31 samples, 0.04%)</title><rect x="93.4795%" y="1237" width="0.0447%" height="15" fill="rgb(219,6,1)" fg:x="64757" fg:w="31"/><text x="93.7295%" y="1247.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="93.4795%" y="1221" width="0.0447%" height="15" fill="rgb(229,90,29)" fg:x="64757" fg:w="31"/><text x="93.7295%" y="1231.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="93.4795%" y="1205" width="0.0447%" height="15" fill="rgb(242,201,42)" fg:x="64757" fg:w="31"/><text x="93.7295%" y="1215.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="93.4795%" y="1189" width="0.0447%" height="15" fill="rgb(243,80,54)" fg:x="64757" fg:w="31"/><text x="93.7295%" y="1199.50"></text></g><g><title>[[ext4]] (31 samples, 0.04%)</title><rect x="93.4795%" y="1173" width="0.0447%" height="15" fill="rgb(223,166,15)" fg:x="64757" fg:w="31"/><text x="93.7295%" y="1183.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="93.4810%" y="1157" width="0.0433%" height="15" fill="rgb(238,78,27)" fg:x="64758" fg:w="30"/><text x="93.7310%" y="1167.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="93.4810%" y="1141" width="0.0433%" height="15" fill="rgb(235,28,43)" fg:x="64758" fg:w="30"/><text x="93.7310%" y="1151.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="93.4810%" y="1125" width="0.0433%" height="15" fill="rgb(240,210,28)" fg:x="64758" fg:w="30"/><text x="93.7310%" y="1135.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="93.4810%" y="1109" width="0.0433%" height="15" fill="rgb(253,6,46)" fg:x="64758" fg:w="30"/><text x="93.7310%" y="1119.50"></text></g><g><title>leveldb::BlockBuilder::Add (8 samples, 0.01%)</title><rect x="93.5272%" y="1269" width="0.0115%" height="15" fill="rgb(250,159,47)" fg:x="64790" fg:w="8"/><text x="93.7772%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (82 samples, 0.12%)</title><rect x="93.7278%" y="1221" width="0.1184%" height="15" fill="rgb(216,139,2)" fg:x="64929" fg:w="82"/><text x="93.9778%" y="1231.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (166 samples, 0.24%)</title><rect x="93.6123%" y="1237" width="0.2396%" height="15" fill="rgb(221,124,44)" fg:x="64849" fg:w="166"/><text x="93.8623%" y="1247.50"></text></g><g><title>leveldb::PutVarint32 (9 samples, 0.01%)</title><rect x="93.8520%" y="1237" width="0.0130%" height="15" fill="rgb(205,37,22)" fg:x="65015" fg:w="9"/><text x="94.1020%" y="1247.50"></text></g><g><title>leveldb::Slice::operator[] (7 samples, 0.01%)</title><rect x="93.8649%" y="1237" width="0.0101%" height="15" fill="rgb(250,55,8)" fg:x="65024" fg:w="7"/><text x="94.1149%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::Add (15 samples, 0.02%)</title><rect x="93.8779%" y="1237" width="0.0217%" height="15" fill="rgb(215,83,48)" fg:x="65033" fg:w="15"/><text x="94.1279%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.01%)</title><rect x="93.8996%" y="1221" width="0.0130%" height="15" fill="rgb(253,2,32)" fg:x="65048" fg:w="9"/><text x="94.1496%" y="1231.50"></text></g><g><title>leveldb::operator== (10 samples, 0.01%)</title><rect x="93.8996%" y="1237" width="0.0144%" height="15" fill="rgb(236,67,28)" fg:x="65048" fg:w="10"/><text x="94.1496%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (14 samples, 0.02%)</title><rect x="93.9169%" y="1205" width="0.0202%" height="15" fill="rgb(252,55,15)" fg:x="65060" fg:w="14"/><text x="94.1669%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (13 samples, 0.02%)</title><rect x="93.9184%" y="1189" width="0.0188%" height="15" fill="rgb(243,173,17)" fg:x="65061" fg:w="13"/><text x="94.1684%" y="1199.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (10 samples, 0.01%)</title><rect x="93.9227%" y="1173" width="0.0144%" height="15" fill="rgb(215,212,13)" fg:x="65064" fg:w="10"/><text x="94.1727%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (18 samples, 0.03%)</title><rect x="93.9140%" y="1221" width="0.0260%" height="15" fill="rgb(253,176,6)" fg:x="65058" fg:w="18"/><text x="94.1640%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (19 samples, 0.03%)</title><rect x="93.9140%" y="1237" width="0.0274%" height="15" fill="rgb(236,105,26)" fg:x="65058" fg:w="19"/><text x="94.1640%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::Add (263 samples, 0.38%)</title><rect x="93.5719%" y="1253" width="0.3797%" height="15" fill="rgb(239,226,32)" fg:x="64821" fg:w="263"/><text x="93.8219%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (8 samples, 0.01%)</title><rect x="93.9689%" y="1189" width="0.0115%" height="15" fill="rgb(236,104,51)" fg:x="65096" fg:w="8"/><text x="94.2189%" y="1199.50"></text></g><g><title>CreateFilter (11 samples, 0.02%)</title><rect x="93.9689%" y="1221" width="0.0159%" height="15" fill="rgb(220,172,33)" fg:x="65096" fg:w="11"/><text x="94.2189%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (11 samples, 0.02%)</title><rect x="93.9689%" y="1205" width="0.0159%" height="15" fill="rgb(224,182,25)" fg:x="65096" fg:w="11"/><text x="94.2189%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (31 samples, 0.04%)</title><rect x="93.9848%" y="1221" width="0.0447%" height="15" fill="rgb(236,184,24)" fg:x="65107" fg:w="31"/><text x="94.2348%" y="1231.50"></text></g><g><title>leveldb::Hash (13 samples, 0.02%)</title><rect x="94.0295%" y="1221" width="0.0188%" height="15" fill="rgb(241,221,14)" fg:x="65138" fg:w="13"/><text x="94.2795%" y="1231.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (65 samples, 0.09%)</title><rect x="93.9660%" y="1237" width="0.0938%" height="15" fill="rgb(227,146,5)" fg:x="65094" fg:w="65"/><text x="94.2160%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (67 samples, 0.10%)</title><rect x="93.9660%" y="1253" width="0.0967%" height="15" fill="rgb(214,15,23)" fg:x="65094" fg:w="67"/><text x="94.2160%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (24 samples, 0.03%)</title><rect x="94.0627%" y="1253" width="0.0346%" height="15" fill="rgb(233,157,31)" fg:x="65161" fg:w="24"/><text x="94.3127%" y="1263.50"></text></g><g><title>leveldb::MemTableIterator::value (7 samples, 0.01%)</title><rect x="94.1002%" y="1253" width="0.0101%" height="15" fill="rgb(211,27,52)" fg:x="65187" fg:w="7"/><text x="94.3502%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (16 samples, 0.02%)</title><rect x="94.1233%" y="1221" width="0.0231%" height="15" fill="rgb(212,223,15)" fg:x="65203" fg:w="16"/><text x="94.3733%" y="1231.50"></text></g><g><title>leveldb::PutVarint32 (26 samples, 0.04%)</title><rect x="94.1103%" y="1253" width="0.0375%" height="15" fill="rgb(254,211,0)" fg:x="65194" fg:w="26"/><text x="94.3603%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (17 samples, 0.02%)</title><rect x="94.1233%" y="1237" width="0.0245%" height="15" fill="rgb(205,43,38)" fg:x="65203" fg:w="17"/><text x="94.3733%" y="1247.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="94.1926%" y="1013" width="0.0115%" height="15" fill="rgb(242,206,46)" fg:x="65251" fg:w="8"/><text x="94.4426%" y="1023.50"></text></g><g><title>[[ext4]] (16 samples, 0.02%)</title><rect x="94.1854%" y="1045" width="0.0231%" height="15" fill="rgb(220,221,12)" fg:x="65246" fg:w="16"/><text x="94.4354%" y="1055.50"></text></g><g><title>[[ext4]] (13 samples, 0.02%)</title><rect x="94.1897%" y="1029" width="0.0188%" height="15" fill="rgb(217,156,35)" fg:x="65249" fg:w="13"/><text x="94.4397%" y="1039.50"></text></g><g><title>[[ext4]] (28 samples, 0.04%)</title><rect x="94.1854%" y="1061" width="0.0404%" height="15" fill="rgb(207,181,49)" fg:x="65246" fg:w="28"/><text x="94.4354%" y="1071.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="94.2085%" y="1045" width="0.0173%" height="15" fill="rgb(235,103,47)" fg:x="65262" fg:w="12"/><text x="94.4585%" y="1055.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="94.2099%" y="1029" width="0.0159%" height="15" fill="rgb(222,63,28)" fg:x="65263" fg:w="11"/><text x="94.4599%" y="1039.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="94.2099%" y="1013" width="0.0159%" height="15" fill="rgb(244,137,21)" fg:x="65263" fg:w="11"/><text x="94.4599%" y="1023.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="94.2128%" y="997" width="0.0130%" height="15" fill="rgb(228,35,27)" fg:x="65265" fg:w="9"/><text x="94.4628%" y="1007.50"></text></g><g><title>[[ext4]] (100 samples, 0.14%)</title><rect x="94.1811%" y="1077" width="0.1444%" height="15" fill="rgb(226,191,41)" fg:x="65243" fg:w="100"/><text x="94.4311%" y="1087.50"></text></g><g><title>[unknown] (69 samples, 0.10%)</title><rect x="94.2258%" y="1061" width="0.0996%" height="15" fill="rgb(210,154,3)" fg:x="65274" fg:w="69"/><text x="94.4758%" y="1071.50"></text></g><g><title>[unknown] (61 samples, 0.09%)</title><rect x="94.2374%" y="1045" width="0.0881%" height="15" fill="rgb(216,60,49)" fg:x="65282" fg:w="61"/><text x="94.4874%" y="1055.50"></text></g><g><title>[unknown] (47 samples, 0.07%)</title><rect x="94.2576%" y="1029" width="0.0678%" height="15" fill="rgb(226,17,20)" fg:x="65296" fg:w="47"/><text x="94.5076%" y="1039.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="94.2720%" y="1013" width="0.0534%" height="15" fill="rgb(206,115,35)" fg:x="65306" fg:w="37"/><text x="94.5220%" y="1023.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="94.2937%" y="997" width="0.0318%" height="15" fill="rgb(227,88,1)" fg:x="65321" fg:w="22"/><text x="94.5437%" y="1007.50"></text></g><g><title>[[ext4]] (122 samples, 0.18%)</title><rect x="94.1623%" y="1109" width="0.1761%" height="15" fill="rgb(230,222,24)" fg:x="65230" fg:w="122"/><text x="94.4123%" y="1119.50"></text></g><g><title>[unknown] (117 samples, 0.17%)</title><rect x="94.1695%" y="1093" width="0.1689%" height="15" fill="rgb(214,124,32)" fg:x="65235" fg:w="117"/><text x="94.4195%" y="1103.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="94.3254%" y="1077" width="0.0130%" height="15" fill="rgb(240,41,36)" fg:x="65343" fg:w="9"/><text x="94.5754%" y="1087.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="94.3269%" y="1061" width="0.0115%" height="15" fill="rgb(221,17,52)" fg:x="65344" fg:w="8"/><text x="94.5769%" y="1071.50"></text></g><g><title>Flush (132 samples, 0.19%)</title><rect x="94.1537%" y="1237" width="0.1905%" height="15" fill="rgb(252,70,16)" fg:x="65224" fg:w="132"/><text x="94.4037%" y="1247.50"></text></g><g><title>FlushBuffer (132 samples, 0.19%)</title><rect x="94.1537%" y="1221" width="0.1905%" height="15" fill="rgb(250,177,4)" fg:x="65224" fg:w="132"/><text x="94.4037%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (132 samples, 0.19%)</title><rect x="94.1537%" y="1205" width="0.1905%" height="15" fill="rgb(240,188,47)" fg:x="65224" fg:w="132"/><text x="94.4037%" y="1215.50"></text></g><g><title>__GI___libc_write (132 samples, 0.19%)</title><rect x="94.1537%" y="1189" width="0.1905%" height="15" fill="rgb(215,92,12)" fg:x="65224" fg:w="132"/><text x="94.4037%" y="1199.50"></text></g><g><title>[unknown] (132 samples, 0.19%)</title><rect x="94.1537%" y="1173" width="0.1905%" height="15" fill="rgb(242,110,29)" fg:x="65224" fg:w="132"/><text x="94.4037%" y="1183.50"></text></g><g><title>[unknown] (132 samples, 0.19%)</title><rect x="94.1537%" y="1157" width="0.1905%" height="15" fill="rgb(208,211,26)" fg:x="65224" fg:w="132"/><text x="94.4037%" y="1167.50"></text></g><g><title>[unknown] (132 samples, 0.19%)</title><rect x="94.1537%" y="1141" width="0.1905%" height="15" fill="rgb(244,147,6)" fg:x="65224" fg:w="132"/><text x="94.4037%" y="1151.50"></text></g><g><title>[unknown] (132 samples, 0.19%)</title><rect x="94.1537%" y="1125" width="0.1905%" height="15" fill="rgb(211,130,42)" fg:x="65224" fg:w="132"/><text x="94.4037%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (13 samples, 0.02%)</title><rect x="94.3456%" y="1237" width="0.0188%" height="15" fill="rgb(220,63,1)" fg:x="65357" fg:w="13"/><text x="94.5956%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (10 samples, 0.01%)</title><rect x="94.3500%" y="1221" width="0.0144%" height="15" fill="rgb(241,212,30)" fg:x="65360" fg:w="10"/><text x="94.6000%" y="1231.50"></text></g><g><title>leveldb::TableBuilder::Flush (147 samples, 0.21%)</title><rect x="94.1537%" y="1253" width="0.2122%" height="15" fill="rgb(233,153,17)" fg:x="65224" fg:w="147"/><text x="94.4037%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Add (565 samples, 0.82%)</title><rect x="93.5546%" y="1269" width="0.8156%" height="15" fill="rgb(236,3,10)" fg:x="64809" fg:w="565"/><text x="93.8046%" y="1279.50"></text></g><g><title>leveldb::BuildTable (625 samples, 0.90%)</title><rect x="93.4795%" y="1285" width="0.9022%" height="15" fill="rgb(232,41,21)" fg:x="64757" fg:w="625"/><text x="93.7295%" y="1295.50"></text></g><g><title>leveldb::DBImpl::CompactMemTable (655 samples, 0.95%)</title><rect x="93.4377%" y="1317" width="0.9455%" height="15" fill="rgb(206,63,51)" fg:x="64728" fg:w="655"/><text x="93.6877%" y="1327.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (626 samples, 0.90%)</title><rect x="93.4795%" y="1301" width="0.9037%" height="15" fill="rgb(250,214,3)" fg:x="64757" fg:w="626"/><text x="93.7295%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (15 samples, 0.02%)</title><rect x="94.4525%" y="1301" width="0.0217%" height="15" fill="rgb(254,89,27)" fg:x="65431" fg:w="15"/><text x="94.7025%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (15 samples, 0.02%)</title><rect x="94.4525%" y="1285" width="0.0217%" height="15" fill="rgb(249,41,14)" fg:x="65431" fg:w="15"/><text x="94.7025%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (64 samples, 0.09%)</title><rect x="94.3832%" y="1317" width="0.0924%" height="15" fill="rgb(221,196,51)" fg:x="65383" fg:w="64"/><text x="94.6332%" y="1327.50"></text></g><g><title>[[nvme]] (10 samples, 0.01%)</title><rect x="94.6286%" y="965" width="0.0144%" height="15" fill="rgb(214,116,26)" fg:x="65553" fg:w="10"/><text x="94.8786%" y="975.50"></text></g><g><title>[[nvme]] (10 samples, 0.01%)</title><rect x="94.6286%" y="949" width="0.0144%" height="15" fill="rgb(236,67,7)" fg:x="65553" fg:w="10"/><text x="94.8786%" y="959.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="94.6300%" y="933" width="0.0130%" height="15" fill="rgb(253,179,32)" fg:x="65554" fg:w="9"/><text x="94.8800%" y="943.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="94.6315%" y="917" width="0.0115%" height="15" fill="rgb(218,33,15)" fg:x="65555" fg:w="8"/><text x="94.8815%" y="927.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="94.6315%" y="901" width="0.0115%" height="15" fill="rgb(217,202,41)" fg:x="65555" fg:w="8"/><text x="94.8815%" y="911.50"></text></g><g><title>[[ext4]] (77 samples, 0.11%)</title><rect x="94.5362%" y="1061" width="0.1112%" height="15" fill="rgb(234,133,5)" fg:x="65489" fg:w="77"/><text x="94.7862%" y="1071.50"></text></g><g><title>[unknown] (61 samples, 0.09%)</title><rect x="94.5593%" y="1045" width="0.0881%" height="15" fill="rgb(240,47,40)" fg:x="65505" fg:w="61"/><text x="94.8093%" y="1055.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="94.5968%" y="1029" width="0.0505%" height="15" fill="rgb(234,166,26)" fg:x="65531" fg:w="35"/><text x="94.8468%" y="1039.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.6214%" y="1013" width="0.0260%" height="15" fill="rgb(244,125,51)" fg:x="65548" fg:w="18"/><text x="94.8714%" y="1023.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="94.6257%" y="997" width="0.0217%" height="15" fill="rgb(229,171,11)" fg:x="65551" fg:w="15"/><text x="94.8757%" y="1007.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="94.6257%" y="981" width="0.0217%" height="15" fill="rgb(224,38,45)" fg:x="65551" fg:w="15"/><text x="94.8757%" y="991.50"></text></g><g><title>[[ext4]] (108 samples, 0.16%)</title><rect x="94.5246%" y="1077" width="0.1559%" height="15" fill="rgb(237,27,7)" fg:x="65481" fg:w="108"/><text x="94.7746%" y="1087.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="94.6473%" y="1061" width="0.0332%" height="15" fill="rgb(216,52,7)" fg:x="65566" fg:w="23"/><text x="94.8973%" y="1071.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="94.6560%" y="1045" width="0.0245%" height="15" fill="rgb(243,11,11)" fg:x="65572" fg:w="17"/><text x="94.9060%" y="1055.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="94.6661%" y="1029" width="0.0144%" height="15" fill="rgb(253,167,20)" fg:x="65579" fg:w="10"/><text x="94.9161%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="94.6704%" y="1013" width="0.0101%" height="15" fill="rgb(215,207,5)" fg:x="65582" fg:w="7"/><text x="94.9204%" y="1023.50"></text></g><g><title>[[ext4]] (169 samples, 0.24%)</title><rect x="94.4900%" y="1093" width="0.2440%" height="15" fill="rgb(252,127,31)" fg:x="65457" fg:w="169"/><text x="94.7400%" y="1103.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="94.6805%" y="1077" width="0.0534%" height="15" fill="rgb(209,106,27)" fg:x="65589" fg:w="37"/><text x="94.9305%" y="1087.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="94.6979%" y="1061" width="0.0361%" height="15" fill="rgb(214,220,18)" fg:x="65601" fg:w="25"/><text x="94.9479%" y="1071.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="94.7094%" y="1045" width="0.0245%" height="15" fill="rgb(237,89,12)" fg:x="65609" fg:w="17"/><text x="94.9594%" y="1055.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="94.7109%" y="1029" width="0.0231%" height="15" fill="rgb(209,167,36)" fg:x="65610" fg:w="16"/><text x="94.9609%" y="1039.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="94.7123%" y="1013" width="0.0217%" height="15" fill="rgb(243,45,22)" fg:x="65611" fg:w="15"/><text x="94.9623%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="94.7239%" y="997" width="0.0101%" height="15" fill="rgb(239,2,46)" fg:x="65619" fg:w="7"/><text x="94.9739%" y="1007.50"></text></g><g><title>[[ext4]] (175 samples, 0.25%)</title><rect x="94.4886%" y="1125" width="0.2526%" height="15" fill="rgb(241,101,0)" fg:x="65456" fg:w="175"/><text x="94.7386%" y="1135.50"></text></g><g><title>[[ext4]] (175 samples, 0.25%)</title><rect x="94.4886%" y="1109" width="0.2526%" height="15" fill="rgb(244,34,31)" fg:x="65456" fg:w="175"/><text x="94.7386%" y="1119.50"></text></g><g><title>Sync (223 samples, 0.32%)</title><rect x="94.4756%" y="1301" width="0.3219%" height="15" fill="rgb(248,23,22)" fg:x="65447" fg:w="223"/><text x="94.7256%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (223 samples, 0.32%)</title><rect x="94.4756%" y="1285" width="0.3219%" height="15" fill="rgb(218,27,48)" fg:x="65447" fg:w="223"/><text x="94.7256%" y="1295.50"></text></g><g><title>fdatasync (223 samples, 0.32%)</title><rect x="94.4756%" y="1269" width="0.3219%" height="15" fill="rgb(232,78,1)" fg:x="65447" fg:w="223"/><text x="94.7256%" y="1279.50"></text></g><g><title>[unknown] (223 samples, 0.32%)</title><rect x="94.4756%" y="1253" width="0.3219%" height="15" fill="rgb(233,169,12)" fg:x="65447" fg:w="223"/><text x="94.7256%" y="1263.50"></text></g><g><title>[unknown] (223 samples, 0.32%)</title><rect x="94.4756%" y="1237" width="0.3219%" height="15" fill="rgb(225,222,54)" fg:x="65447" fg:w="223"/><text x="94.7256%" y="1247.50"></text></g><g><title>[unknown] (223 samples, 0.32%)</title><rect x="94.4756%" y="1221" width="0.3219%" height="15" fill="rgb(245,126,29)" fg:x="65447" fg:w="223"/><text x="94.7256%" y="1231.50"></text></g><g><title>[[ext4]] (223 samples, 0.32%)</title><rect x="94.4756%" y="1205" width="0.3219%" height="15" fill="rgb(241,63,48)" fg:x="65447" fg:w="223"/><text x="94.7256%" y="1215.50"></text></g><g><title>[unknown] (222 samples, 0.32%)</title><rect x="94.4770%" y="1189" width="0.3205%" height="15" fill="rgb(235,126,38)" fg:x="65448" fg:w="222"/><text x="94.7270%" y="1199.50"></text></g><g><title>[unknown] (222 samples, 0.32%)</title><rect x="94.4770%" y="1173" width="0.3205%" height="15" fill="rgb(232,96,49)" fg:x="65448" fg:w="222"/><text x="94.7270%" y="1183.50"></text></g><g><title>[unknown] (221 samples, 0.32%)</title><rect x="94.4784%" y="1157" width="0.3190%" height="15" fill="rgb(211,146,40)" fg:x="65449" fg:w="221"/><text x="94.7284%" y="1167.50"></text></g><g><title>[unknown] (219 samples, 0.32%)</title><rect x="94.4813%" y="1141" width="0.3161%" height="15" fill="rgb(247,93,44)" fg:x="65451" fg:w="219"/><text x="94.7313%" y="1151.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="94.7412%" y="1125" width="0.0563%" height="15" fill="rgb(251,41,49)" fg:x="65631" fg:w="39"/><text x="94.9912%" y="1135.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="94.7412%" y="1109" width="0.0563%" height="15" fill="rgb(218,155,12)" fg:x="65631" fg:w="39"/><text x="94.9912%" y="1119.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="94.7412%" y="1093" width="0.0563%" height="15" fill="rgb(221,161,30)" fg:x="65631" fg:w="39"/><text x="94.9912%" y="1103.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="94.7426%" y="1077" width="0.0549%" height="15" fill="rgb(221,179,11)" fg:x="65632" fg:w="38"/><text x="94.9926%" y="1087.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="94.7542%" y="1061" width="0.0433%" height="15" fill="rgb(224,170,48)" fg:x="65640" fg:w="30"/><text x="95.0042%" y="1071.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="94.7657%" y="1045" width="0.0318%" height="15" fill="rgb(223,117,5)" fg:x="65648" fg:w="22"/><text x="95.0157%" y="1055.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="94.7773%" y="1029" width="0.0202%" height="15" fill="rgb(209,52,20)" fg:x="65656" fg:w="14"/><text x="95.0273%" y="1039.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="94.7816%" y="1013" width="0.0159%" height="15" fill="rgb(209,19,41)" fg:x="65659" fg:w="11"/><text x="95.0316%" y="1023.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="94.7859%" y="997" width="0.0115%" height="15" fill="rgb(210,177,12)" fg:x="65662" fg:w="8"/><text x="95.0359%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="94.7874%" y="981" width="0.0101%" height="15" fill="rgb(211,159,37)" fg:x="65663" fg:w="7"/><text x="95.0374%" y="991.50"></text></g><g><title>[[ext4]] (10 samples, 0.01%)</title><rect x="94.8119%" y="1125" width="0.0144%" height="15" fill="rgb(209,20,2)" fg:x="65680" fg:w="10"/><text x="95.0619%" y="1135.50"></text></g><g><title>Append (17 samples, 0.02%)</title><rect x="94.8047%" y="1269" width="0.0245%" height="15" fill="rgb(244,3,46)" fg:x="65675" fg:w="17"/><text x="95.0547%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (12 samples, 0.02%)</title><rect x="94.8119%" y="1253" width="0.0173%" height="15" fill="rgb(220,94,38)" fg:x="65680" fg:w="12"/><text x="95.0619%" y="1263.50"></text></g><g><title>__GI___libc_write (12 samples, 0.02%)</title><rect x="94.8119%" y="1237" width="0.0173%" height="15" fill="rgb(253,14,31)" fg:x="65680" fg:w="12"/><text x="95.0619%" y="1247.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="94.8119%" y="1221" width="0.0173%" height="15" fill="rgb(234,176,13)" fg:x="65680" fg:w="12"/><text x="95.0619%" y="1231.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="94.8119%" y="1205" width="0.0173%" height="15" fill="rgb(218,62,25)" fg:x="65680" fg:w="12"/><text x="95.0619%" y="1215.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="94.8119%" y="1189" width="0.0173%" height="15" fill="rgb(216,124,40)" fg:x="65680" fg:w="12"/><text x="95.0619%" y="1199.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="94.8119%" y="1173" width="0.0173%" height="15" fill="rgb(228,170,12)" fg:x="65680" fg:w="12"/><text x="95.0619%" y="1183.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="94.8119%" y="1157" width="0.0173%" height="15" fill="rgb(231,226,5)" fg:x="65680" fg:w="12"/><text x="95.0619%" y="1167.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="94.8119%" y="1141" width="0.0173%" height="15" fill="rgb(237,122,22)" fg:x="65680" fg:w="12"/><text x="95.0619%" y="1151.50"></text></g><g><title>leveldb::TableBuilder::Finish (23 samples, 0.03%)</title><rect x="94.7975%" y="1301" width="0.0332%" height="15" fill="rgb(209,185,25)" fg:x="65670" fg:w="23"/><text x="95.0475%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (18 samples, 0.03%)</title><rect x="94.8047%" y="1285" width="0.0260%" height="15" fill="rgb(228,200,32)" fg:x="65675" fg:w="18"/><text x="95.0547%" y="1295.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (253 samples, 0.37%)</title><rect x="94.4756%" y="1317" width="0.3652%" height="15" fill="rgb(217,140,10)" fg:x="65447" fg:w="253"/><text x="94.7256%" y="1327.50"></text></g><g><title>leveldb::TableCache::NewIterator (7 samples, 0.01%)</title><rect x="94.8307%" y="1301" width="0.0101%" height="15" fill="rgb(253,17,24)" fg:x="65693" fg:w="7"/><text x="95.0807%" y="1311.50"></text></g><g><title>leveldb::TableCache::FindTable (7 samples, 0.01%)</title><rect x="94.8307%" y="1285" width="0.0101%" height="15" fill="rgb(212,61,6)" fg:x="65693" fg:w="7"/><text x="95.0807%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (39 samples, 0.06%)</title><rect x="94.8552%" y="1317" width="0.0563%" height="15" fill="rgb(205,14,25)" fg:x="65710" fg:w="39"/><text x="95.1052%" y="1327.50"></text></g><g><title>leveldb::ExtractUserKey (7 samples, 0.01%)</title><rect x="94.9014%" y="1301" width="0.0101%" height="15" fill="rgb(232,69,41)" fg:x="65742" fg:w="7"/><text x="95.1514%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (48 samples, 0.07%)</title><rect x="94.9346%" y="1301" width="0.0693%" height="15" fill="rgb(241,106,47)" fg:x="65765" fg:w="48"/><text x="95.1846%" y="1311.50"></text></g><g><title>leveldb::Slice::compare (18 samples, 0.03%)</title><rect x="94.9779%" y="1285" width="0.0260%" height="15" fill="rgb(210,213,53)" fg:x="65795" fg:w="18"/><text x="95.2279%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::value (17 samples, 0.02%)</title><rect x="95.0039%" y="1301" width="0.0245%" height="15" fill="rgb(253,175,27)" fg:x="65813" fg:w="17"/><text x="95.2539%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::value (10 samples, 0.01%)</title><rect x="95.0140%" y="1285" width="0.0144%" height="15" fill="rgb(211,171,24)" fg:x="65820" fg:w="10"/><text x="95.2640%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (27 samples, 0.04%)</title><rect x="95.0284%" y="1301" width="0.0390%" height="15" fill="rgb(229,80,7)" fg:x="65830" fg:w="27"/><text x="95.2784%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::value (9 samples, 0.01%)</title><rect x="95.0544%" y="1285" width="0.0130%" height="15" fill="rgb(212,46,39)" fg:x="65848" fg:w="9"/><text x="95.3044%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::value (12 samples, 0.02%)</title><rect x="95.0674%" y="1301" width="0.0173%" height="15" fill="rgb(240,80,45)" fg:x="65857" fg:w="12"/><text x="95.3174%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.01%)</title><rect x="95.3244%" y="1285" width="0.0115%" height="15" fill="rgb(253,177,40)" fg:x="66035" fg:w="8"/><text x="95.5744%" y="1295.50"></text></g><g><title>leveldb::BlockBuilder::Add (19 samples, 0.03%)</title><rect x="95.3359%" y="1285" width="0.0274%" height="15" fill="rgb(249,200,15)" fg:x="66043" fg:w="19"/><text x="95.5859%" y="1295.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (15 samples, 0.02%)</title><rect x="95.3706%" y="1285" width="0.0217%" height="15" fill="rgb(217,78,26)" fg:x="66067" fg:w="15"/><text x="95.6206%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (36 samples, 0.05%)</title><rect x="95.4124%" y="1269" width="0.0520%" height="15" fill="rgb(254,151,32)" fg:x="66096" fg:w="36"/><text x="95.6624%" y="1279.50"></text></g><g><title>leveldb::Slice::compare (11 samples, 0.02%)</title><rect x="95.4485%" y="1253" width="0.0159%" height="15" fill="rgb(226,165,27)" fg:x="66121" fg:w="11"/><text x="95.6985%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (36 samples, 0.05%)</title><rect x="95.4745%" y="1269" width="0.0520%" height="15" fill="rgb(250,206,4)" fg:x="66139" fg:w="36"/><text x="95.7245%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (106 samples, 0.15%)</title><rect x="95.3922%" y="1285" width="0.1530%" height="15" fill="rgb(231,229,27)" fg:x="66082" fg:w="106"/><text x="95.6422%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Add (12 samples, 0.02%)</title><rect x="95.5279%" y="1269" width="0.0173%" height="15" fill="rgb(239,217,8)" fg:x="66176" fg:w="12"/><text x="95.7779%" y="1279.50"></text></g><g><title>leveldb::BlockBuilder::Add (11 samples, 0.02%)</title><rect x="95.5481%" y="1269" width="0.0159%" height="15" fill="rgb(225,204,27)" fg:x="66190" fg:w="11"/><text x="95.7981%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (8 samples, 0.01%)</title><rect x="95.5799%" y="1253" width="0.0115%" height="15" fill="rgb(230,56,32)" fg:x="66212" fg:w="8"/><text x="95.8299%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (8 samples, 0.01%)</title><rect x="95.5799%" y="1237" width="0.0115%" height="15" fill="rgb(222,56,27)" fg:x="66212" fg:w="8"/><text x="95.8299%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (20 samples, 0.03%)</title><rect x="95.5654%" y="1269" width="0.0289%" height="15" fill="rgb(253,108,27)" fg:x="66202" fg:w="20"/><text x="95.8154%" y="1279.50"></text></g><g><title>leveldb::PutVarint32 (50 samples, 0.07%)</title><rect x="95.5452%" y="1285" width="0.0722%" height="15" fill="rgb(212,87,36)" fg:x="66188" fg:w="50"/><text x="95.7952%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Add (14 samples, 0.02%)</title><rect x="95.5972%" y="1269" width="0.0202%" height="15" fill="rgb(247,82,36)" fg:x="66224" fg:w="14"/><text x="95.8472%" y="1279.50"></text></g><g><title>leveldb::Slice::operator[] (85 samples, 0.12%)</title><rect x="95.6275%" y="1285" width="0.1227%" height="15" fill="rgb(222,143,9)" fg:x="66245" fg:w="85"/><text x="95.8775%" y="1295.50"></text></g><g><title>leveldb::Slice::size (7 samples, 0.01%)</title><rect x="95.7502%" y="1285" width="0.0101%" height="15" fill="rgb(238,162,48)" fg:x="66330" fg:w="7"/><text x="96.0002%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::ok (8 samples, 0.01%)</title><rect x="95.8065%" y="1269" width="0.0115%" height="15" fill="rgb(221,59,43)" fg:x="66369" fg:w="8"/><text x="96.0565%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (18 samples, 0.03%)</title><rect x="95.8181%" y="1253" width="0.0260%" height="15" fill="rgb(205,166,41)" fg:x="66377" fg:w="18"/><text x="96.0681%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Add (59 samples, 0.09%)</title><rect x="95.7603%" y="1285" width="0.0852%" height="15" fill="rgb(241,186,40)" fg:x="66337" fg:w="59"/><text x="96.0103%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (19 samples, 0.03%)</title><rect x="95.8181%" y="1269" width="0.0274%" height="15" fill="rgb(216,119,35)" fg:x="66377" fg:w="19"/><text x="96.0681%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::status (14 samples, 0.02%)</title><rect x="95.8455%" y="1285" width="0.0202%" height="15" fill="rgb(208,68,38)" fg:x="66396" fg:w="14"/><text x="96.0955%" y="1295.50"></text></g><g><title>__memmove_avx512_unaligned_erms (73 samples, 0.11%)</title><rect x="95.8671%" y="1269" width="0.1054%" height="15" fill="rgb(217,113,1)" fg:x="66411" fg:w="73"/><text x="96.1171%" y="1279.50"></text></g><g><title>leveldb::operator== (88 samples, 0.13%)</title><rect x="95.8657%" y="1285" width="0.1270%" height="15" fill="rgb(242,153,3)" fg:x="66410" fg:w="88"/><text x="96.1157%" y="1295.50"></text></g><g><title>memcpy@plt (7 samples, 0.01%)</title><rect x="95.9826%" y="1269" width="0.0101%" height="15" fill="rgb(229,76,35)" fg:x="66491" fg:w="7"/><text x="96.2326%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (18 samples, 0.03%)</title><rect x="96.0288%" y="1253" width="0.0260%" height="15" fill="rgb(229,125,34)" fg:x="66523" fg:w="18"/><text x="96.2788%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (11 samples, 0.02%)</title><rect x="96.0389%" y="1237" width="0.0159%" height="15" fill="rgb(238,179,36)" fg:x="66530" fg:w="11"/><text x="96.2889%" y="1247.50"></text></g><g><title>__memcmp_evex_movbe (13 samples, 0.02%)</title><rect x="96.0923%" y="1205" width="0.0188%" height="15" fill="rgb(244,183,19)" fg:x="66567" fg:w="13"/><text x="96.3423%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (43 samples, 0.06%)</title><rect x="96.0548%" y="1253" width="0.0621%" height="15" fill="rgb(216,85,49)" fg:x="66541" fg:w="43"/><text x="96.3048%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (40 samples, 0.06%)</title><rect x="96.0591%" y="1237" width="0.0577%" height="15" fill="rgb(208,161,47)" fg:x="66544" fg:w="40"/><text x="96.3091%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (36 samples, 0.05%)</title><rect x="96.0649%" y="1221" width="0.0520%" height="15" fill="rgb(233,210,18)" fg:x="66548" fg:w="36"/><text x="96.3149%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (101 samples, 0.15%)</title><rect x="95.9942%" y="1269" width="0.1458%" height="15" fill="rgb(205,104,42)" fg:x="66499" fg:w="101"/><text x="96.2442%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (16 samples, 0.02%)</title><rect x="96.1169%" y="1253" width="0.0231%" height="15" fill="rgb(248,90,43)" fg:x="66584" fg:w="16"/><text x="96.3669%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (13 samples, 0.02%)</title><rect x="96.1212%" y="1237" width="0.0188%" height="15" fill="rgb(206,198,11)" fg:x="66587" fg:w="13"/><text x="96.3712%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (118 samples, 0.17%)</title><rect x="95.9942%" y="1285" width="0.1703%" height="15" fill="rgb(239,165,27)" fg:x="66499" fg:w="118"/><text x="96.2442%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (17 samples, 0.02%)</title><rect x="96.1400%" y="1269" width="0.0245%" height="15" fill="rgb(246,44,32)" fg:x="66600" fg:w="17"/><text x="96.3900%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (17 samples, 0.02%)</title><rect x="96.1645%" y="1285" width="0.0245%" height="15" fill="rgb(252,65,42)" fg:x="66617" fg:w="17"/><text x="96.4145%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (17 samples, 0.02%)</title><rect x="96.1645%" y="1269" width="0.0245%" height="15" fill="rgb(246,197,18)" fg:x="66617" fg:w="17"/><text x="96.4145%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (12 samples, 0.02%)</title><rect x="96.1717%" y="1253" width="0.0173%" height="15" fill="rgb(216,192,4)" fg:x="66622" fg:w="12"/><text x="96.4217%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (11 samples, 0.02%)</title><rect x="96.1732%" y="1237" width="0.0159%" height="15" fill="rgb(208,117,10)" fg:x="66623" fg:w="11"/><text x="96.4232%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (7 samples, 0.01%)</title><rect x="96.1789%" y="1221" width="0.0101%" height="15" fill="rgb(240,61,47)" fg:x="66627" fg:w="7"/><text x="96.4289%" y="1231.50"></text></g><g><title>leveldb::BlockBuilder::Add (769 samples, 1.11%)</title><rect x="95.0847%" y="1301" width="1.1101%" height="15" fill="rgb(228,178,21)" fg:x="65869" fg:w="769"/><text x="95.3347%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (7 samples, 0.01%)</title><rect x="96.2569%" y="1221" width="0.0101%" height="15" fill="rgb(219,96,54)" fg:x="66681" fg:w="7"/><text x="96.5069%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (11 samples, 0.02%)</title><rect x="96.2569%" y="1237" width="0.0159%" height="15" fill="rgb(250,177,24)" fg:x="66681" fg:w="11"/><text x="96.5069%" y="1247.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (23 samples, 0.03%)</title><rect x="96.2511%" y="1285" width="0.0332%" height="15" fill="rgb(242,154,46)" fg:x="66677" fg:w="23"/><text x="96.5011%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (23 samples, 0.03%)</title><rect x="96.2511%" y="1269" width="0.0332%" height="15" fill="rgb(226,176,29)" fg:x="66677" fg:w="23"/><text x="96.5011%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (23 samples, 0.03%)</title><rect x="96.2511%" y="1253" width="0.0332%" height="15" fill="rgb(226,29,2)" fg:x="66677" fg:w="23"/><text x="96.5011%" y="1263.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (58 samples, 0.08%)</title><rect x="96.2078%" y="1301" width="0.0837%" height="15" fill="rgb(237,104,14)" fg:x="66647" fg:w="58"/><text x="96.4578%" y="1311.50"></text></g><g><title>leveldb::EncodeVarint32 (48 samples, 0.07%)</title><rect x="96.2915%" y="1301" width="0.0693%" height="15" fill="rgb(245,207,31)" fg:x="66705" fg:w="48"/><text x="96.5415%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (12 samples, 0.02%)</title><rect x="96.3782%" y="1253" width="0.0173%" height="15" fill="rgb(229,211,45)" fg:x="66765" fg:w="12"/><text x="96.6282%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (12 samples, 0.02%)</title><rect x="96.3782%" y="1237" width="0.0173%" height="15" fill="rgb(229,113,15)" fg:x="66765" fg:w="12"/><text x="96.6282%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (12 samples, 0.02%)</title><rect x="96.3782%" y="1221" width="0.0173%" height="15" fill="rgb(237,147,15)" fg:x="66765" fg:w="12"/><text x="96.6282%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (18 samples, 0.03%)</title><rect x="96.3709%" y="1269" width="0.0260%" height="15" fill="rgb(244,120,12)" fg:x="66760" fg:w="18"/><text x="96.6209%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (20 samples, 0.03%)</title><rect x="96.3709%" y="1285" width="0.0289%" height="15" fill="rgb(205,120,12)" fg:x="66760" fg:w="20"/><text x="96.6209%" y="1295.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (32 samples, 0.05%)</title><rect x="96.3608%" y="1301" width="0.0462%" height="15" fill="rgb(231,26,45)" fg:x="66753" fg:w="32"/><text x="96.6108%" y="1311.50"></text></g><g><title>BloomHash (9 samples, 0.01%)</title><rect x="96.4893%" y="1221" width="0.0130%" height="15" fill="rgb(246,98,1)" fg:x="66842" fg:w="9"/><text x="96.7393%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (56 samples, 0.08%)</title><rect x="96.4229%" y="1237" width="0.0808%" height="15" fill="rgb(207,68,45)" fg:x="66796" fg:w="56"/><text x="96.6729%" y="1247.50"></text></g><g><title>leveldb::Hash (47 samples, 0.07%)</title><rect x="96.5037%" y="1237" width="0.0678%" height="15" fill="rgb(231,27,38)" fg:x="66852" fg:w="47"/><text x="96.7537%" y="1247.50"></text></g><g><title>CreateFilter (107 samples, 0.15%)</title><rect x="96.4229%" y="1269" width="0.1545%" height="15" fill="rgb(214,223,3)" fg:x="66796" fg:w="107"/><text x="96.6729%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (107 samples, 0.15%)</title><rect x="96.4229%" y="1253" width="0.1545%" height="15" fill="rgb(228,195,46)" fg:x="66796" fg:w="107"/><text x="96.6729%" y="1263.50"></text></g><g><title>BloomHash (19 samples, 0.03%)</title><rect x="96.7737%" y="1253" width="0.0274%" height="15" fill="rgb(231,100,42)" fg:x="67039" fg:w="19"/><text x="97.0237%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (163 samples, 0.24%)</title><rect x="96.5774%" y="1269" width="0.2353%" height="15" fill="rgb(236,53,4)" fg:x="66903" fg:w="163"/><text x="96.8274%" y="1279.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (13 samples, 0.02%)</title><rect x="96.8127%" y="1269" width="0.0188%" height="15" fill="rgb(230,152,12)" fg:x="67066" fg:w="13"/><text x="97.0627%" y="1279.50"></text></g><g><title>leveldb::Hash (132 samples, 0.19%)</title><rect x="96.8314%" y="1269" width="0.1905%" height="15" fill="rgb(226,101,19)" fg:x="67079" fg:w="132"/><text x="97.0814%" y="1279.50"></text></g><g><title>leveldb::InternalFilterPolicy::CreateFilter (22 samples, 0.03%)</title><rect x="97.0220%" y="1269" width="0.0318%" height="15" fill="rgb(250,149,32)" fg:x="67211" fg:w="22"/><text x="97.2720%" y="1279.50"></text></g><g><title>leveldb::ExtractUserKey (11 samples, 0.02%)</title><rect x="97.0378%" y="1253" width="0.0159%" height="15" fill="rgb(232,178,12)" fg:x="67222" fg:w="11"/><text x="97.2878%" y="1263.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (21 samples, 0.03%)</title><rect x="97.0537%" y="1269" width="0.0303%" height="15" fill="rgb(246,151,17)" fg:x="67233" fg:w="21"/><text x="97.3037%" y="1279.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (13 samples, 0.02%)</title><rect x="97.0653%" y="1253" width="0.0188%" height="15" fill="rgb(252,17,51)" fg:x="67241" fg:w="13"/><text x="97.3153%" y="1263.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (13 samples, 0.02%)</title><rect x="97.0653%" y="1237" width="0.0188%" height="15" fill="rgb(250,207,23)" fg:x="67241" fg:w="13"/><text x="97.3153%" y="1247.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (13 samples, 0.02%)</title><rect x="97.0653%" y="1221" width="0.0188%" height="15" fill="rgb(205,27,5)" fg:x="67241" fg:w="13"/><text x="97.3153%" y="1231.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (13 samples, 0.02%)</title><rect x="97.0653%" y="1205" width="0.0188%" height="15" fill="rgb(224,32,19)" fg:x="67241" fg:w="13"/><text x="97.3153%" y="1215.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (473 samples, 0.68%)</title><rect x="96.4099%" y="1285" width="0.6828%" height="15" fill="rgb(247,214,40)" fg:x="66787" fg:w="473"/><text x="96.6599%" y="1295.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (485 samples, 0.70%)</title><rect x="96.4070%" y="1301" width="0.7001%" height="15" fill="rgb(239,199,17)" fg:x="66785" fg:w="485"/><text x="96.6570%" y="1311.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (10 samples, 0.01%)</title><rect x="97.0927%" y="1285" width="0.0144%" height="15" fill="rgb(251,159,9)" fg:x="67260" fg:w="10"/><text x="97.3427%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (7 samples, 0.01%)</title><rect x="97.1663%" y="1237" width="0.0101%" height="15" fill="rgb(225,78,32)" fg:x="67311" fg:w="7"/><text x="97.4163%" y="1247.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (8 samples, 0.01%)</title><rect x="97.1663%" y="1269" width="0.0115%" height="15" fill="rgb(206,97,47)" fg:x="67311" fg:w="8"/><text x="97.4163%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (8 samples, 0.01%)</title><rect x="97.1663%" y="1253" width="0.0115%" height="15" fill="rgb(227,107,4)" fg:x="67311" fg:w="8"/><text x="97.4163%" y="1263.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (24 samples, 0.03%)</title><rect x="97.1519%" y="1285" width="0.0346%" height="15" fill="rgb(241,146,50)" fg:x="67301" fg:w="24"/><text x="97.4019%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (68 samples, 0.10%)</title><rect x="97.1071%" y="1301" width="0.0982%" height="15" fill="rgb(232,92,30)" fg:x="67270" fg:w="68"/><text x="97.3571%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (7 samples, 0.01%)</title><rect x="97.1952%" y="1285" width="0.0101%" height="15" fill="rgb(222,0,40)" fg:x="67331" fg:w="7"/><text x="97.4452%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (10 samples, 0.01%)</title><rect x="97.2053%" y="1301" width="0.0144%" height="15" fill="rgb(219,54,33)" fg:x="67338" fg:w="10"/><text x="97.4553%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (13 samples, 0.02%)</title><rect x="97.3857%" y="1253" width="0.0188%" height="15" fill="rgb(226,209,28)" fg:x="67463" fg:w="13"/><text x="97.6357%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (7 samples, 0.01%)</title><rect x="97.3944%" y="1237" width="0.0101%" height="15" fill="rgb(254,205,35)" fg:x="67469" fg:w="7"/><text x="97.6444%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (22 samples, 0.03%)</title><rect x="97.4045%" y="1253" width="0.0318%" height="15" fill="rgb(230,159,3)" fg:x="67476" fg:w="22"/><text x="97.6545%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (19 samples, 0.03%)</title><rect x="97.4088%" y="1237" width="0.0274%" height="15" fill="rgb(232,190,24)" fg:x="67479" fg:w="19"/><text x="97.6588%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (55 samples, 0.08%)</title><rect x="97.3684%" y="1269" width="0.0794%" height="15" fill="rgb(217,227,44)" fg:x="67451" fg:w="55"/><text x="97.6184%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (8 samples, 0.01%)</title><rect x="97.4363%" y="1253" width="0.0115%" height="15" fill="rgb(236,211,1)" fg:x="67498" fg:w="8"/><text x="97.6863%" y="1263.50"></text></g><g><title>leveldb::PutVarint32 (173 samples, 0.25%)</title><rect x="97.2197%" y="1301" width="0.2497%" height="15" fill="rgb(250,127,46)" fg:x="67348" fg:w="173"/><text x="97.4697%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (70 samples, 0.10%)</title><rect x="97.3684%" y="1285" width="0.1010%" height="15" fill="rgb(229,213,6)" fg:x="67451" fg:w="70"/><text x="97.6184%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (15 samples, 0.02%)</title><rect x="97.4478%" y="1269" width="0.0217%" height="15" fill="rgb(237,15,36)" fg:x="67506" fg:w="15"/><text x="97.6978%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (18 samples, 0.03%)</title><rect x="97.4709%" y="1301" width="0.0260%" height="15" fill="rgb(213,131,41)" fg:x="67522" fg:w="18"/><text x="97.7209%" y="1311.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="97.5965%" y="1141" width="0.0115%" height="15" fill="rgb(225,82,44)" fg:x="67609" fg:w="8"/><text x="97.8465%" y="1151.50"></text></g><g><title>[[ext4]] (25 samples, 0.04%)</title><rect x="97.7538%" y="1061" width="0.0361%" height="15" fill="rgb(249,42,11)" fg:x="67718" fg:w="25"/><text x="98.0038%" y="1071.50"></text></g><g><title>[[ext4]] (84 samples, 0.12%)</title><rect x="97.7206%" y="1077" width="0.1213%" height="15" fill="rgb(253,11,29)" fg:x="67695" fg:w="84"/><text x="97.9706%" y="1087.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="97.7899%" y="1061" width="0.0520%" height="15" fill="rgb(206,8,54)" fg:x="67743" fg:w="36"/><text x="98.0399%" y="1071.50"></text></g><g><title>[[ext4]] (124 samples, 0.18%)</title><rect x="97.6831%" y="1093" width="0.1790%" height="15" fill="rgb(222,186,2)" fg:x="67669" fg:w="124"/><text x="97.9331%" y="1103.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="97.8419%" y="1077" width="0.0202%" height="15" fill="rgb(221,206,53)" fg:x="67779" fg:w="14"/><text x="98.0919%" y="1087.50"></text></g><g><title>[[ext4]] (220 samples, 0.32%)</title><rect x="97.6687%" y="1109" width="0.3176%" height="15" fill="rgb(230,150,21)" fg:x="67659" fg:w="220"/><text x="97.9187%" y="1119.50"></text></g><g><title>[unknown] (86 samples, 0.12%)</title><rect x="97.8621%" y="1093" width="0.1241%" height="15" fill="rgb(253,202,10)" fg:x="67793" fg:w="86"/><text x="98.1121%" y="1103.50"></text></g><g><title>[unknown] (71 samples, 0.10%)</title><rect x="97.8838%" y="1077" width="0.1025%" height="15" fill="rgb(238,109,40)" fg:x="67808" fg:w="71"/><text x="98.1338%" y="1087.50"></text></g><g><title>[unknown] (62 samples, 0.09%)</title><rect x="97.8968%" y="1061" width="0.0895%" height="15" fill="rgb(247,120,22)" fg:x="67817" fg:w="62"/><text x="98.1468%" y="1071.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="97.9040%" y="1045" width="0.0823%" height="15" fill="rgb(207,43,30)" fg:x="67822" fg:w="57"/><text x="98.1540%" y="1055.50"></text></g><g><title>[unknown] (44 samples, 0.06%)</title><rect x="97.9227%" y="1029" width="0.0635%" height="15" fill="rgb(213,211,24)" fg:x="67835" fg:w="44"/><text x="98.1727%" y="1039.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="97.9646%" y="1013" width="0.0217%" height="15" fill="rgb(239,73,39)" fg:x="67864" fg:w="15"/><text x="98.2146%" y="1023.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="97.9733%" y="997" width="0.0130%" height="15" fill="rgb(245,182,19)" fg:x="67870" fg:w="9"/><text x="98.2233%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="97.9762%" y="981" width="0.0101%" height="15" fill="rgb(247,143,26)" fg:x="67872" fg:w="7"/><text x="98.2262%" y="991.50"></text></g><g><title>[[ext4]] (693 samples, 1.00%)</title><rect x="97.6441%" y="1125" width="1.0004%" height="15" fill="rgb(228,191,23)" fg:x="67642" fg:w="693"/><text x="97.8941%" y="1135.50"></text></g><g><title>[unknown] (456 samples, 0.66%)</title><rect x="97.9863%" y="1109" width="0.6583%" height="15" fill="rgb(253,165,31)" fg:x="67879" fg:w="456"/><text x="98.2363%" y="1119.50"></text></g><g><title>[unknown] (420 samples, 0.61%)</title><rect x="98.0382%" y="1093" width="0.6063%" height="15" fill="rgb(234,138,20)" fg:x="67915" fg:w="420"/><text x="98.2882%" y="1103.50"></text></g><g><title>[unknown] (344 samples, 0.50%)</title><rect x="98.1479%" y="1077" width="0.4966%" height="15" fill="rgb(218,191,29)" fg:x="67991" fg:w="344"/><text x="98.3979%" y="1087.50"></text></g><g><title>[unknown] (272 samples, 0.39%)</title><rect x="98.2519%" y="1061" width="0.3926%" height="15" fill="rgb(221,157,19)" fg:x="68063" fg:w="272"/><text x="98.5019%" y="1071.50"></text></g><g><title>[unknown] (182 samples, 0.26%)</title><rect x="98.3818%" y="1045" width="0.2627%" height="15" fill="rgb(237,26,42)" fg:x="68153" fg:w="182"/><text x="98.6318%" y="1055.50"></text></g><g><title>[unknown] (74 samples, 0.11%)</title><rect x="98.5377%" y="1029" width="0.1068%" height="15" fill="rgb(220,163,24)" fg:x="68261" fg:w="74"/><text x="98.7877%" y="1039.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="98.6229%" y="1013" width="0.0217%" height="15" fill="rgb(242,115,20)" fg:x="68320" fg:w="15"/><text x="98.8729%" y="1023.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="98.7946%" y="1093" width="0.0101%" height="15" fill="rgb(210,206,9)" fg:x="68439" fg:w="7"/><text x="99.0446%" y="1103.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="98.7946%" y="1077" width="0.0101%" height="15" fill="rgb(208,71,17)" fg:x="68439" fg:w="7"/><text x="99.0446%" y="1087.50"></text></g><g><title>[[ext4]] (850 samples, 1.23%)</title><rect x="97.5850%" y="1157" width="1.2270%" height="15" fill="rgb(233,7,5)" fg:x="67601" fg:w="850"/><text x="97.8350%" y="1167.50"></text></g><g><title>[unknown] (834 samples, 1.20%)</title><rect x="97.6080%" y="1141" width="1.2039%" height="15" fill="rgb(207,92,33)" fg:x="67617" fg:w="834"/><text x="97.8580%" y="1151.50"></text></g><g><title>[unknown] (116 samples, 0.17%)</title><rect x="98.6445%" y="1125" width="0.1675%" height="15" fill="rgb(218,87,9)" fg:x="68335" fg:w="116"/><text x="98.8945%" y="1135.50"></text></g><g><title>[unknown] (73 samples, 0.11%)</title><rect x="98.7066%" y="1109" width="0.1054%" height="15" fill="rgb(219,47,37)" fg:x="68378" fg:w="73"/><text x="98.9566%" y="1119.50"></text></g><g><title>[unknown] (945 samples, 1.36%)</title><rect x="97.5027%" y="1221" width="1.3641%" height="15" fill="rgb(221,152,34)" fg:x="67544" fg:w="945"/><text x="97.7527%" y="1231.50"></text></g><g><title>[unknown] (943 samples, 1.36%)</title><rect x="97.5056%" y="1205" width="1.3613%" height="15" fill="rgb(235,176,21)" fg:x="67546" fg:w="943"/><text x="97.7556%" y="1215.50"></text></g><g><title>[unknown] (942 samples, 1.36%)</title><rect x="97.5070%" y="1189" width="1.3598%" height="15" fill="rgb(232,212,21)" fg:x="67547" fg:w="942"/><text x="97.7570%" y="1199.50"></text></g><g><title>[unknown] (927 samples, 1.34%)</title><rect x="97.5287%" y="1173" width="1.3382%" height="15" fill="rgb(245,82,39)" fg:x="67562" fg:w="927"/><text x="97.7787%" y="1183.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="98.8120%" y="1157" width="0.0549%" height="15" fill="rgb(241,52,51)" fg:x="68451" fg:w="38"/><text x="99.0620%" y="1167.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="98.8481%" y="1141" width="0.0188%" height="15" fill="rgb(219,91,24)" fg:x="68476" fg:w="13"/><text x="99.0981%" y="1151.50"></text></g><g><title>Flush (951 samples, 1.37%)</title><rect x="97.4969%" y="1285" width="1.3728%" height="15" fill="rgb(241,142,12)" fg:x="67540" fg:w="951"/><text x="97.7469%" y="1295.50"></text></g><g><title>FlushBuffer (951 samples, 1.37%)</title><rect x="97.4969%" y="1269" width="1.3728%" height="15" fill="rgb(230,27,9)" fg:x="67540" fg:w="951"/><text x="97.7469%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (949 samples, 1.37%)</title><rect x="97.4998%" y="1253" width="1.3699%" height="15" fill="rgb(249,181,32)" fg:x="67542" fg:w="949"/><text x="97.7498%" y="1263.50"></text></g><g><title>__GI___libc_write (949 samples, 1.37%)</title><rect x="97.4998%" y="1237" width="1.3699%" height="15" fill="rgb(230,107,3)" fg:x="67542" fg:w="949"/><text x="97.7498%" y="1247.50"></text></g><g><title>Append (8 samples, 0.01%)</title><rect x="98.8928%" y="1253" width="0.0115%" height="15" fill="rgb(246,204,14)" fg:x="68507" fg:w="8"/><text x="99.1428%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (8 samples, 0.01%)</title><rect x="98.8928%" y="1237" width="0.0115%" height="15" fill="rgb(213,192,47)" fg:x="68507" fg:w="8"/><text x="99.1428%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (8 samples, 0.01%)</title><rect x="98.8928%" y="1221" width="0.0115%" height="15" fill="rgb(240,44,36)" fg:x="68507" fg:w="8"/><text x="99.1428%" y="1231.50"></text></g><g><title>crc32c::ExtendSse42 (8 samples, 0.01%)</title><rect x="98.9044%" y="1253" width="0.0115%" height="15" fill="rgb(244,209,38)" fg:x="68515" fg:w="8"/><text x="99.1544%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (64 samples, 0.09%)</title><rect x="98.8813%" y="1285" width="0.0924%" height="15" fill="rgb(219,34,37)" fg:x="68499" fg:w="64"/><text x="99.1313%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (56 samples, 0.08%)</title><rect x="98.8928%" y="1269" width="0.0808%" height="15" fill="rgb(210,28,6)" fg:x="68507" fg:w="56"/><text x="99.1428%" y="1279.50"></text></g><g><title>leveldb::crc32c::Value (37 samples, 0.05%)</title><rect x="98.9202%" y="1253" width="0.0534%" height="15" fill="rgb(244,110,52)" fg:x="68526" fg:w="37"/><text x="99.1702%" y="1263.50"></text></g><g><title>crc32c::ExtendSse42 (36 samples, 0.05%)</title><rect x="98.9217%" y="1237" width="0.0520%" height="15" fill="rgb(254,124,47)" fg:x="68527" fg:w="36"/><text x="99.1717%" y="1247.50"></text></g><g><title>_mm_crc32_u64 (24 samples, 0.03%)</title><rect x="98.9390%" y="1221" width="0.0346%" height="15" fill="rgb(254,110,13)" fg:x="68539" fg:w="24"/><text x="99.1890%" y="1231.50"></text></g><g><title>leveldb::TableBuilder::Flush (1,024 samples, 1.48%)</title><rect x="97.4969%" y="1301" width="1.4782%" height="15" fill="rgb(252,57,21)" fg:x="67540" fg:w="1024"/><text x="97.7469%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (10 samples, 0.01%)</title><rect x="98.9823%" y="1285" width="0.0144%" height="15" fill="rgb(242,60,45)" fg:x="68569" fg:w="10"/><text x="99.2323%" y="1295.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (7 samples, 0.01%)</title><rect x="98.9967%" y="1285" width="0.0101%" height="15" fill="rgb(234,49,30)" fg:x="68579" fg:w="7"/><text x="99.2467%" y="1295.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (13 samples, 0.02%)</title><rect x="99.0068%" y="1285" width="0.0188%" height="15" fill="rgb(218,98,6)" fg:x="68586" fg:w="13"/><text x="99.2568%" y="1295.50"></text></g><g><title>leveldb::ParseInternalKey (8 samples, 0.01%)</title><rect x="99.0588%" y="1269" width="0.0115%" height="15" fill="rgb(220,174,29)" fg:x="68622" fg:w="8"/><text x="99.3088%" y="1279.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (36 samples, 0.05%)</title><rect x="99.0256%" y="1285" width="0.0520%" height="15" fill="rgb(236,163,23)" fg:x="68599" fg:w="36"/><text x="99.2756%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::ok (73 samples, 0.11%)</title><rect x="98.9765%" y="1301" width="0.1054%" height="15" fill="rgb(242,114,45)" fg:x="68565" fg:w="73"/><text x="99.2265%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::Add (2,901 samples, 4.19%)</title><rect x="94.9158%" y="1317" width="4.1877%" height="15" fill="rgb(232,10,53)" fg:x="65752" fg:w="2901"/><text x="95.1658%" y="1327.50">level..</text></g><g><title>leveldb::DBImpl::DoCompactionWork (5,364 samples, 7.74%)</title><rect x="91.3965%" y="1333" width="7.7432%" height="15" fill="rgb(245,108,29)" fg:x="63314" fg:w="5364"/><text x="91.6465%" y="1343.50">leveldb::DB..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (9 samples, 0.01%)</title><rect x="99.1267%" y="1317" width="0.0130%" height="15" fill="rgb(240,89,53)" fg:x="68669" fg:w="9"/><text x="99.3767%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (9 samples, 0.01%)</title><rect x="99.1267%" y="1301" width="0.0130%" height="15" fill="rgb(226,60,45)" fg:x="68669" fg:w="9"/><text x="99.3767%" y="1311.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (5,750 samples, 8.30%)</title><rect x="90.8855%" y="1349" width="8.3004%" height="15" fill="rgb(230,41,44)" fg:x="62960" fg:w="5750"/><text x="91.1355%" y="1359.50">leveldb::DBI..</text></g><g><title>leveldb::InternalKeyComparator::Compare (32 samples, 0.05%)</title><rect x="99.1396%" y="1333" width="0.0462%" height="15" fill="rgb(230,26,20)" fg:x="68678" fg:w="32"/><text x="99.3896%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.02%)</title><rect x="99.2061%" y="1269" width="0.0159%" height="15" fill="rgb(237,170,32)" fg:x="68724" fg:w="11"/><text x="99.4561%" y="1279.50"></text></g><g><title>leveldb::BlockBuilder::Add (17 samples, 0.02%)</title><rect x="99.2003%" y="1285" width="0.0245%" height="15" fill="rgb(212,35,42)" fg:x="68720" fg:w="17"/><text x="99.4503%" y="1295.50"></text></g><g><title>[[ext4]] (10 samples, 0.01%)</title><rect x="99.2378%" y="1109" width="0.0144%" height="15" fill="rgb(227,31,34)" fg:x="68746" fg:w="10"/><text x="99.4878%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.2407%" y="1093" width="0.0115%" height="15" fill="rgb(216,19,18)" fg:x="68748" fg:w="8"/><text x="99.4907%" y="1103.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="99.2364%" y="1141" width="0.0173%" height="15" fill="rgb(211,133,42)" fg:x="68745" fg:w="12"/><text x="99.4864%" y="1151.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="99.2378%" y="1125" width="0.0159%" height="15" fill="rgb(244,66,13)" fg:x="68746" fg:w="11"/><text x="99.4878%" y="1135.50"></text></g><g><title>BackgroundThreadEntryPoint (5,798 samples, 8.37%)</title><rect x="90.8855%" y="1397" width="8.3697%" height="15" fill="rgb(218,185,50)" fg:x="62960" fg:w="5798"/><text x="91.1355%" y="1407.50">BackgroundTh..</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (5,798 samples, 8.37%)</title><rect x="90.8855%" y="1381" width="8.3697%" height="15" fill="rgb(219,149,13)" fg:x="62960" fg:w="5798"/><text x="91.1355%" y="1391.50">leveldb::(an..</text></g><g><title>leveldb::DBImpl::BackgroundCall (5,798 samples, 8.37%)</title><rect x="90.8855%" y="1365" width="8.3697%" height="15" fill="rgb(221,125,0)" fg:x="62960" fg:w="5798"/><text x="91.1355%" y="1375.50">leveldb::DBI..</text></g><g><title>leveldb::DBImpl::CompactMemTable (48 samples, 0.07%)</title><rect x="99.1858%" y="1349" width="0.0693%" height="15" fill="rgb(247,126,27)" fg:x="68710" fg:w="48"/><text x="99.4358%" y="1359.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (43 samples, 0.06%)</title><rect x="99.1931%" y="1333" width="0.0621%" height="15" fill="rgb(250,138,30)" fg:x="68715" fg:w="43"/><text x="99.4431%" y="1343.50"></text></g><g><title>leveldb::BuildTable (43 samples, 0.06%)</title><rect x="99.1931%" y="1317" width="0.0621%" height="15" fill="rgb(230,151,9)" fg:x="68715" fg:w="43"/><text x="99.4431%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Add (38 samples, 0.05%)</title><rect x="99.2003%" y="1301" width="0.0549%" height="15" fill="rgb(233,80,38)" fg:x="68720" fg:w="38"/><text x="99.4503%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::Flush (13 samples, 0.02%)</title><rect x="99.2364%" y="1285" width="0.0188%" height="15" fill="rgb(232,68,43)" fg:x="68745" fg:w="13"/><text x="99.4864%" y="1295.50"></text></g><g><title>Flush (13 samples, 0.02%)</title><rect x="99.2364%" y="1269" width="0.0188%" height="15" fill="rgb(254,5,50)" fg:x="68745" fg:w="13"/><text x="99.4864%" y="1279.50"></text></g><g><title>FlushBuffer (13 samples, 0.02%)</title><rect x="99.2364%" y="1253" width="0.0188%" height="15" fill="rgb(225,45,5)" fg:x="68745" fg:w="13"/><text x="99.4864%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (13 samples, 0.02%)</title><rect x="99.2364%" y="1237" width="0.0188%" height="15" fill="rgb(239,22,3)" fg:x="68745" fg:w="13"/><text x="99.4864%" y="1247.50"></text></g><g><title>__GI___libc_write (13 samples, 0.02%)</title><rect x="99.2364%" y="1221" width="0.0188%" height="15" fill="rgb(243,129,0)" fg:x="68745" fg:w="13"/><text x="99.4864%" y="1231.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="99.2364%" y="1205" width="0.0188%" height="15" fill="rgb(223,164,0)" fg:x="68745" fg:w="13"/><text x="99.4864%" y="1215.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="99.2364%" y="1189" width="0.0188%" height="15" fill="rgb(221,46,29)" fg:x="68745" fg:w="13"/><text x="99.4864%" y="1199.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="99.2364%" y="1173" width="0.0188%" height="15" fill="rgb(205,97,47)" fg:x="68745" fg:w="13"/><text x="99.4864%" y="1183.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="99.2364%" y="1157" width="0.0188%" height="15" fill="rgb(249,14,8)" fg:x="68745" fg:w="13"/><text x="99.4864%" y="1167.50"></text></g><g><title>execute_native_thread_routine (5,799 samples, 8.37%)</title><rect x="90.8855%" y="1413" width="8.3711%" height="15" fill="rgb(216,77,3)" fg:x="62960" fg:w="5799"/><text x="91.1355%" y="1423.50">execute_nati..</text></g><g><title>__clone (5,806 samples, 8.38%)</title><rect x="90.8768%" y="1445" width="8.3812%" height="15" fill="rgb(206,168,54)" fg:x="62954" fg:w="5806"/><text x="91.1268%" y="1455.50">__clone</text></g><g><title>start_thread (5,806 samples, 8.38%)</title><rect x="90.8768%" y="1429" width="8.3812%" height="15" fill="rgb(236,3,41)" fg:x="62954" fg:w="5806"/><text x="91.1268%" y="1439.50">start_thread</text></g><g><title>__libc_start_call_main (8 samples, 0.01%)</title><rect x="99.2580%" y="1445" width="0.0115%" height="15" fill="rgb(231,132,24)" fg:x="68760" fg:w="8"/><text x="99.5080%" y="1455.50"></text></g><g><title>main (8 samples, 0.01%)</title><rect x="99.2580%" y="1429" width="0.0115%" height="15" fill="rgb(227,221,40)" fg:x="68760" fg:w="8"/><text x="99.5080%" y="1439.50"></text></g><g><title>main (8 samples, 0.01%)</title><rect x="99.2580%" y="1413" width="0.0115%" height="15" fill="rgb(233,151,11)" fg:x="68760" fg:w="8"/><text x="99.5080%" y="1423.50"></text></g><g><title>AppInitMain (8 samples, 0.01%)</title><rect x="99.2580%" y="1397" width="0.0115%" height="15" fill="rgb(247,81,35)" fg:x="68760" fg:w="8"/><text x="99.5080%" y="1407.50"></text></g><g><title>InitAndLoadChainstate (8 samples, 0.01%)</title><rect x="99.2580%" y="1381" width="0.0115%" height="15" fill="rgb(243,128,48)" fg:x="68760" fg:w="8"/><text x="99.5080%" y="1391.50"></text></g><g><title>operator (8 samples, 0.01%)</title><rect x="99.2580%" y="1365" width="0.0115%" height="15" fill="rgb(253,16,10)" fg:x="68760" fg:w="8"/><text x="99.5080%" y="1375.50"></text></g><g><title>InitAndLoadChainstate (8 samples, 0.01%)</title><rect x="99.2580%" y="1349" width="0.0115%" height="15" fill="rgb(228,67,27)" fg:x="68760" fg:w="8"/><text x="99.5080%" y="1359.50"></text></g><g><title>node::LoadChainstate (8 samples, 0.01%)</title><rect x="99.2580%" y="1333" width="0.0115%" height="15" fill="rgb(231,105,25)" fg:x="68760" fg:w="8"/><text x="99.5080%" y="1343.50"></text></g><g><title>AppInit (15 samples, 0.02%)</title><rect x="99.2811%" y="1381" width="0.0217%" height="15" fill="rgb(213,166,47)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1391.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::Context&gt;::__single_object std::make_unique&lt;kernel::Context&gt; (15 samples, 0.02%)</title><rect x="99.2811%" y="1365" width="0.0217%" height="15" fill="rgb(209,27,10)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1375.50"></text></g><g><title>kernel::Context::Context (15 samples, 0.02%)</title><rect x="99.2811%" y="1349" width="0.0217%" height="15" fill="rgb(241,44,30)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1359.50"></text></g><g><title>call_once&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (15 samples, 0.02%)</title><rect x="99.2811%" y="1333" width="0.0217%" height="15" fill="rgb(223,216,15)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1343.50"></text></g><g><title>kernel::Context::Context (15 samples, 0.02%)</title><rect x="99.2811%" y="1317" width="0.0217%" height="15" fill="rgb(227,14,7)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1327.50"></text></g><g><title>__pthread_once_slow (15 samples, 0.02%)</title><rect x="99.2811%" y="1301" width="0.0217%" height="15" fill="rgb(237,14,5)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1311.50"></text></g><g><title>_FUN (15 samples, 0.02%)</title><rect x="99.2811%" y="1285" width="0.0217%" height="15" fill="rgb(232,14,36)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1295.50"></text></g><g><title>operator (15 samples, 0.02%)</title><rect x="99.2811%" y="1269" width="0.0217%" height="15" fill="rgb(234,0,38)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1279.50"></text></g><g><title>operator (15 samples, 0.02%)</title><rect x="99.2811%" y="1253" width="0.0217%" height="15" fill="rgb(207,170,14)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1263.50"></text></g><g><title>__invoke&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (15 samples, 0.02%)</title><rect x="99.2811%" y="1237" width="0.0217%" height="15" fill="rgb(252,45,13)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1247.50"></text></g><g><title>__invoke_impl&lt;void, kernel::Context::Context()::&lt;lambda()&gt; &gt; (15 samples, 0.02%)</title><rect x="99.2811%" y="1221" width="0.0217%" height="15" fill="rgb(213,142,7)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1231.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;kernel::Context::Context()::{lambda()#1}&gt;(std::once_flag&amp;, kernel::Context::Context()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (15 samples, 0.02%)</title><rect x="99.2811%" y="1205" width="0.0217%" height="15" fill="rgb(216,157,23)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1215.50"></text></g><g><title>RandomInit (15 samples, 0.02%)</title><rect x="99.2811%" y="1189" width="0.0217%" height="15" fill="rgb(212,145,33)" fg:x="68776" fg:w="15"/><text x="99.5311%" y="1199.50"></text></g><g><title>CSHA512::Finalize (13 samples, 0.02%)</title><rect x="99.2840%" y="1173" width="0.0188%" height="15" fill="rgb(233,26,13)" fg:x="68778" fg:w="13"/><text x="99.5340%" y="1183.50"></text></g><g><title>CSHA512::Write (13 samples, 0.02%)</title><rect x="99.2840%" y="1157" width="0.0188%" height="15" fill="rgb(219,196,19)" fg:x="68778" fg:w="13"/><text x="99.5340%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.2912%" y="1141" width="0.0115%" height="15" fill="rgb(246,56,21)" fg:x="68783" fg:w="8"/><text x="99.5412%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.2912%" y="1125" width="0.0115%" height="15" fill="rgb(222,28,53)" fg:x="68783" fg:w="8"/><text x="99.5412%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.2912%" y="1109" width="0.0115%" height="15" fill="rgb(224,5,27)" fg:x="68783" fg:w="8"/><text x="99.5412%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="99.2927%" y="1093" width="0.0101%" height="15" fill="rgb(220,153,33)" fg:x="68784" fg:w="7"/><text x="99.5427%" y="1103.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (7 samples, 0.01%)</title><rect x="99.3143%" y="1253" width="0.0101%" height="15" fill="rgb(226,58,19)" fg:x="68799" fg:w="7"/><text x="99.5643%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (9 samples, 0.01%)</title><rect x="99.3475%" y="1173" width="0.0130%" height="15" fill="rgb(239,112,23)" fg:x="68822" fg:w="9"/><text x="99.5975%" y="1183.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (31 samples, 0.04%)</title><rect x="99.3648%" y="1173" width="0.0447%" height="15" fill="rgb(251,213,20)" fg:x="68834" fg:w="31"/><text x="99.6148%" y="1183.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (54 samples, 0.08%)</title><rect x="99.3374%" y="1189" width="0.0780%" height="15" fill="rgb(215,181,21)" fg:x="68815" fg:w="54"/><text x="99.5874%" y="1199.50"></text></g><g><title>GetBlockProof (81 samples, 0.12%)</title><rect x="99.3360%" y="1221" width="0.1169%" height="15" fill="rgb(240,8,35)" fg:x="68814" fg:w="81"/><text x="99.5860%" y="1231.50"></text></g><g><title>operator/ (80 samples, 0.12%)</title><rect x="99.3374%" y="1205" width="0.1155%" height="15" fill="rgb(232,203,3)" fg:x="68815" fg:w="80"/><text x="99.5874%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (26 samples, 0.04%)</title><rect x="99.4154%" y="1189" width="0.0375%" height="15" fill="rgb(214,202,43)" fg:x="68869" fg:w="26"/><text x="99.6654%" y="1199.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (7 samples, 0.01%)</title><rect x="99.4529%" y="1221" width="0.0101%" height="15" fill="rgb(254,35,11)" fg:x="68895" fg:w="7"/><text x="99.7029%" y="1231.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (8 samples, 0.01%)</title><rect x="99.4630%" y="1205" width="0.0115%" height="15" fill="rgb(239,173,13)" fg:x="68902" fg:w="8"/><text x="99.7130%" y="1215.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (8 samples, 0.01%)</title><rect x="99.4818%" y="1189" width="0.0115%" height="15" fill="rgb(220,141,0)" fg:x="68915" fg:w="8"/><text x="99.7318%" y="1199.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (8 samples, 0.01%)</title><rect x="99.4818%" y="1173" width="0.0115%" height="15" fill="rgb(210,98,12)" fg:x="68915" fg:w="8"/><text x="99.7318%" y="1183.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (8 samples, 0.01%)</title><rect x="99.4818%" y="1157" width="0.0115%" height="15" fill="rgb(254,153,22)" fg:x="68915" fg:w="8"/><text x="99.7318%" y="1167.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (8 samples, 0.01%)</title><rect x="99.4818%" y="1141" width="0.0115%" height="15" fill="rgb(247,223,17)" fg:x="68915" fg:w="8"/><text x="99.7318%" y="1151.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (8 samples, 0.01%)</title><rect x="99.4818%" y="1125" width="0.0115%" height="15" fill="rgb(246,56,7)" fg:x="68915" fg:w="8"/><text x="99.7318%" y="1135.50"></text></g><g><title>DataStream::DataStream (8 samples, 0.01%)</title><rect x="99.4933%" y="1189" width="0.0115%" height="15" fill="rgb(240,226,12)" fg:x="68923" fg:w="8"/><text x="99.7433%" y="1199.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (8 samples, 0.01%)</title><rect x="99.4933%" y="1173" width="0.0115%" height="15" fill="rgb(205,87,46)" fg:x="68923" fg:w="8"/><text x="99.7433%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (8 samples, 0.01%)</title><rect x="99.4933%" y="1157" width="0.0115%" height="15" fill="rgb(245,214,51)" fg:x="68923" fg:w="8"/><text x="99.7433%" y="1167.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (8 samples, 0.01%)</title><rect x="99.4933%" y="1141" width="0.0115%" height="15" fill="rgb(223,172,33)" fg:x="68923" fg:w="8"/><text x="99.7433%" y="1151.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (20 samples, 0.03%)</title><rect x="99.4818%" y="1205" width="0.0289%" height="15" fill="rgb(227,203,34)" fg:x="68915" fg:w="20"/><text x="99.7318%" y="1215.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (52 samples, 0.08%)</title><rect x="99.4630%" y="1221" width="0.0751%" height="15" fill="rgb(248,143,44)" fg:x="68902" fg:w="52"/><text x="99.7130%" y="1231.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (13 samples, 0.02%)</title><rect x="99.5193%" y="1205" width="0.0188%" height="15" fill="rgb(226,162,5)" fg:x="68941" fg:w="13"/><text x="99.7693%" y="1215.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (13 samples, 0.02%)</title><rect x="99.5193%" y="1189" width="0.0188%" height="15" fill="rgb(211,143,1)" fg:x="68941" fg:w="13"/><text x="99.7693%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (13 samples, 0.02%)</title><rect x="99.5193%" y="1173" width="0.0188%" height="15" fill="rgb(224,96,15)" fg:x="68941" fg:w="13"/><text x="99.7693%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (13 samples, 0.02%)</title><rect x="99.5193%" y="1157" width="0.0188%" height="15" fill="rgb(222,4,38)" fg:x="68941" fg:w="13"/><text x="99.7693%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (8 samples, 0.01%)</title><rect x="99.5265%" y="1141" width="0.0115%" height="15" fill="rgb(253,228,15)" fg:x="68946" fg:w="8"/><text x="99.7765%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.01%)</title><rect x="99.5265%" y="1125" width="0.0115%" height="15" fill="rgb(242,194,12)" fg:x="68946" fg:w="8"/><text x="99.7765%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.01%)</title><rect x="99.5265%" y="1109" width="0.0115%" height="15" fill="rgb(214,177,31)" fg:x="68946" fg:w="8"/><text x="99.7765%" y="1119.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (7 samples, 0.01%)</title><rect x="99.5395%" y="1221" width="0.0101%" height="15" fill="rgb(226,58,51)" fg:x="68955" fg:w="7"/><text x="99.7895%" y="1231.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (7 samples, 0.01%)</title><rect x="99.5395%" y="1205" width="0.0101%" height="15" fill="rgb(250,119,16)" fg:x="68955" fg:w="7"/><text x="99.7895%" y="1215.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (7 samples, 0.01%)</title><rect x="99.5395%" y="1189" width="0.0101%" height="15" fill="rgb(223,128,53)" fg:x="68955" fg:w="7"/><text x="99.7895%" y="1199.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (163 samples, 0.24%)</title><rect x="99.3345%" y="1237" width="0.2353%" height="15" fill="rgb(251,199,15)" fg:x="68813" fg:w="163"/><text x="99.5845%" y="1247.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (14 samples, 0.02%)</title><rect x="99.5496%" y="1221" width="0.0202%" height="15" fill="rgb(235,168,42)" fg:x="68962" fg:w="14"/><text x="99.7996%" y="1231.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (14 samples, 0.02%)</title><rect x="99.5496%" y="1205" width="0.0202%" height="15" fill="rgb(250,210,17)" fg:x="68962" fg:w="14"/><text x="99.7996%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (9 samples, 0.01%)</title><rect x="99.5568%" y="1189" width="0.0130%" height="15" fill="rgb(226,36,41)" fg:x="68967" fg:w="9"/><text x="99.8068%" y="1199.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (172 samples, 0.25%)</title><rect x="99.3244%" y="1253" width="0.2483%" height="15" fill="rgb(225,87,10)" fg:x="68806" fg:w="172"/><text x="99.5744%" y="1263.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (199 samples, 0.29%)</title><rect x="99.3129%" y="1269" width="0.2873%" height="15" fill="rgb(228,83,9)" fg:x="68798" fg:w="199"/><text x="99.5629%" y="1279.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (17 samples, 0.02%)</title><rect x="99.5756%" y="1253" width="0.0245%" height="15" fill="rgb(225,16,36)" fg:x="68980" fg:w="17"/><text x="99.8256%" y="1263.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (17 samples, 0.02%)</title><rect x="99.5756%" y="1237" width="0.0245%" height="15" fill="rgb(242,198,13)" fg:x="68980" fg:w="17"/><text x="99.8256%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (13 samples, 0.02%)</title><rect x="99.5814%" y="1221" width="0.0188%" height="15" fill="rgb(239,25,51)" fg:x="68984" fg:w="13"/><text x="99.8314%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (7 samples, 0.01%)</title><rect x="99.5900%" y="1205" width="0.0101%" height="15" fill="rgb(239,28,37)" fg:x="68990" fg:w="7"/><text x="99.8400%" y="1215.50"></text></g><g><title>_start (226 samples, 0.33%)</title><rect x="99.2811%" y="1445" width="0.3262%" height="15" fill="rgb(234,70,17)" fg:x="68776" fg:w="226"/><text x="99.5311%" y="1455.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (226 samples, 0.33%)</title><rect x="99.2811%" y="1429" width="0.3262%" height="15" fill="rgb(231,215,53)" fg:x="68776" fg:w="226"/><text x="99.5311%" y="1439.50"></text></g><g><title>__libc_start_call_main (226 samples, 0.33%)</title><rect x="99.2811%" y="1413" width="0.3262%" height="15" fill="rgb(218,140,42)" fg:x="68776" fg:w="226"/><text x="99.5311%" y="1423.50"></text></g><g><title>main (226 samples, 0.33%)</title><rect x="99.2811%" y="1397" width="0.3262%" height="15" fill="rgb(233,227,45)" fg:x="68776" fg:w="226"/><text x="99.5311%" y="1407.50"></text></g><g><title>main (211 samples, 0.30%)</title><rect x="99.3028%" y="1381" width="0.3046%" height="15" fill="rgb(225,189,21)" fg:x="68791" fg:w="211"/><text x="99.5528%" y="1391.50"></text></g><g><title>AppInitMain (211 samples, 0.30%)</title><rect x="99.3028%" y="1365" width="0.3046%" height="15" fill="rgb(237,176,54)" fg:x="68791" fg:w="211"/><text x="99.5528%" y="1375.50"></text></g><g><title>InitAndLoadChainstate (211 samples, 0.30%)</title><rect x="99.3028%" y="1349" width="0.3046%" height="15" fill="rgb(215,131,46)" fg:x="68791" fg:w="211"/><text x="99.5528%" y="1359.50"></text></g><g><title>operator (211 samples, 0.30%)</title><rect x="99.3028%" y="1333" width="0.3046%" height="15" fill="rgb(218,95,20)" fg:x="68791" fg:w="211"/><text x="99.5528%" y="1343.50"></text></g><g><title>InitAndLoadChainstate (211 samples, 0.30%)</title><rect x="99.3028%" y="1317" width="0.3046%" height="15" fill="rgb(208,198,12)" fg:x="68791" fg:w="211"/><text x="99.5528%" y="1327.50"></text></g><g><title>node::LoadChainstate (211 samples, 0.30%)</title><rect x="99.3028%" y="1301" width="0.3046%" height="15" fill="rgb(239,107,50)" fg:x="68791" fg:w="211"/><text x="99.5528%" y="1311.50"></text></g><g><title>node::CompleteChainstateInitialization (210 samples, 0.30%)</title><rect x="99.3042%" y="1285" width="0.3031%" height="15" fill="rgb(240,217,37)" fg:x="68792" fg:w="210"/><text x="99.5542%" y="1295.50"></text></g><g><title>_mm_crc32_u64 (8 samples, 0.01%)</title><rect x="99.6160%" y="1429" width="0.0115%" height="15" fill="rgb(242,197,49)" fg:x="69008" fg:w="8"/><text x="99.8660%" y="1439.50"></text></g><g><title>crc32c::ExtendSse42 (15 samples, 0.02%)</title><rect x="99.6088%" y="1445" width="0.0217%" height="15" fill="rgb(219,171,17)" fg:x="69003" fg:w="15"/><text x="99.8588%" y="1455.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (16 samples, 0.02%)</title><rect x="99.6333%" y="1413" width="0.0231%" height="15" fill="rgb(209,81,40)" fg:x="69020" fg:w="16"/><text x="99.8833%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (35 samples, 0.05%)</title><rect x="99.6319%" y="1445" width="0.0505%" height="15" fill="rgb(237,156,30)" fg:x="69019" fg:w="35"/><text x="99.8819%" y="1455.50"></text></g><g><title>leveldb::Slice::compare (34 samples, 0.05%)</title><rect x="99.6333%" y="1429" width="0.0491%" height="15" fill="rgb(212,127,16)" fg:x="69020" fg:w="34"/><text x="99.8833%" y="1439.50"></text></g><g><title>leveldb::EncodeVarint32 (20 samples, 0.03%)</title><rect x="99.7041%" y="1413" width="0.0289%" height="15" fill="rgb(226,66,32)" fg:x="69069" fg:w="20"/><text x="99.9541%" y="1423.50"></text></g><g><title>leveldb::operator== (54 samples, 0.08%)</title><rect x="99.7041%" y="1429" width="0.0780%" height="15" fill="rgb(245,22,46)" fg:x="69069" fg:w="54"/><text x="99.9541%" y="1439.50"></text></g><g><title>leveldb::PutVarint32 (34 samples, 0.05%)</title><rect x="99.7329%" y="1413" width="0.0491%" height="15" fill="rgb(210,112,21)" fg:x="69089" fg:w="34"/><text x="99.9829%" y="1423.50"></text></g><g><title>leveldb::BlockBuilder::Add (64 samples, 0.09%)</title><rect x="99.7026%" y="1445" width="0.0924%" height="15" fill="rgb(207,118,39)" fg:x="69068" fg:w="64"/><text x="99.9526%" y="1455.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (9 samples, 0.01%)</title><rect x="99.7820%" y="1429" width="0.0130%" height="15" fill="rgb(205,206,35)" fg:x="69123" fg:w="9"/><text x="100.0320%" y="1439.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (9 samples, 0.01%)</title><rect x="99.7820%" y="1413" width="0.0130%" height="15" fill="rgb(222,120,2)" fg:x="69123" fg:w="9"/><text x="100.0320%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (9 samples, 0.01%)</title><rect x="99.7820%" y="1397" width="0.0130%" height="15" fill="rgb(205,38,18)" fg:x="69123" fg:w="9"/><text x="100.0320%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (9 samples, 0.01%)</title><rect x="99.7820%" y="1381" width="0.0130%" height="15" fill="rgb(226,61,2)" fg:x="69123" fg:w="9"/><text x="100.0320%" y="1391.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (9 samples, 0.01%)</title><rect x="99.7820%" y="1365" width="0.0130%" height="15" fill="rgb(242,161,23)" fg:x="69123" fg:w="9"/><text x="100.0320%" y="1375.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (11 samples, 0.02%)</title><rect x="99.7965%" y="1445" width="0.0159%" height="15" fill="rgb(213,13,52)" fg:x="69133" fg:w="11"/><text x="100.0465%" y="1455.50"></text></g><g><title>leveldb::TableBuilder::Add (9 samples, 0.01%)</title><rect x="99.8297%" y="1445" width="0.0130%" height="15" fill="rgb(246,209,47)" fg:x="69156" fg:w="9"/><text x="100.0797%" y="1455.50"></text></g><g><title>leveldb::BlockBuilder::Add (7 samples, 0.01%)</title><rect x="99.8470%" y="1173" width="0.0101%" height="15" fill="rgb(214,41,3)" fg:x="69168" fg:w="7"/><text x="100.0970%" y="1183.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (21 samples, 0.03%)</title><rect x="99.8441%" y="1221" width="0.0303%" height="15" fill="rgb(236,119,38)" fg:x="69166" fg:w="21"/><text x="100.0941%" y="1231.50"></text></g><g><title>leveldb::BuildTable (21 samples, 0.03%)</title><rect x="99.8441%" y="1205" width="0.0303%" height="15" fill="rgb(218,50,11)" fg:x="69166" fg:w="21"/><text x="100.0941%" y="1215.50"></text></g><g><title>leveldb::TableBuilder::Add (19 samples, 0.03%)</title><rect x="99.8470%" y="1189" width="0.0274%" height="15" fill="rgb(228,38,11)" fg:x="69168" fg:w="19"/><text x="100.0970%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (7 samples, 0.01%)</title><rect x="99.8888%" y="1141" width="0.0101%" height="15" fill="rgb(212,13,9)" fg:x="69197" fg:w="7"/><text x="100.1388%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (16 samples, 0.02%)</title><rect x="99.9033%" y="1109" width="0.0231%" height="15" fill="rgb(208,211,9)" fg:x="69207" fg:w="16"/><text x="100.1533%" y="1119.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (21 samples, 0.03%)</title><rect x="99.9033%" y="1125" width="0.0303%" height="15" fill="rgb(239,39,32)" fg:x="69207" fg:w="21"/><text x="100.1533%" y="1135.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (24 samples, 0.03%)</title><rect x="99.9018%" y="1141" width="0.0346%" height="15" fill="rgb(254,179,26)" fg:x="69206" fg:w="24"/><text x="100.1518%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (37 samples, 0.05%)</title><rect x="99.8845%" y="1157" width="0.0534%" height="15" fill="rgb(249,165,28)" fg:x="69194" fg:w="37"/><text x="100.1345%" y="1167.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (45 samples, 0.06%)</title><rect x="99.8744%" y="1221" width="0.0650%" height="15" fill="rgb(225,59,50)" fg:x="69187" fg:w="45"/><text x="100.1244%" y="1231.50"></text></g><g><title>leveldb::WriteBatch::Iterate (45 samples, 0.06%)</title><rect x="99.8744%" y="1205" width="0.0650%" height="15" fill="rgb(209,122,5)" fg:x="69187" fg:w="45"/><text x="100.1244%" y="1215.50"></text></g><g><title>leveldb::WriteBatch::Iterate (43 samples, 0.06%)</title><rect x="99.8773%" y="1189" width="0.0621%" height="15" fill="rgb(214,65,34)" fg:x="69189" fg:w="43"/><text x="100.1273%" y="1199.50"></text></g><g><title>leveldb::MemTable::Add (43 samples, 0.06%)</title><rect x="99.8773%" y="1173" width="0.0621%" height="15" fill="rgb(249,183,32)" fg:x="69189" fg:w="43"/><text x="100.1273%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (7 samples, 0.01%)</title><rect x="99.9466%" y="1173" width="0.0101%" height="15" fill="rgb(218,122,24)" fg:x="69237" fg:w="7"/><text x="100.1966%" y="1183.50"></text></g><g><title>CompleteChainstateInitialization (79 samples, 0.11%)</title><rect x="99.8441%" y="1333" width="0.1140%" height="15" fill="rgb(224,109,18)" fg:x="69166" fg:w="79"/><text x="100.0941%" y="1343.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (79 samples, 0.11%)</title><rect x="99.8441%" y="1317" width="0.1140%" height="15" fill="rgb(210,68,50)" fg:x="69166" fg:w="79"/><text x="100.0941%" y="1327.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (79 samples, 0.11%)</title><rect x="99.8441%" y="1301" width="0.1140%" height="15" fill="rgb(212,184,34)" fg:x="69166" fg:w="79"/><text x="100.0941%" y="1311.50"></text></g><g><title>CDBWrapper::CDBWrapper (79 samples, 0.11%)</title><rect x="99.8441%" y="1285" width="0.1140%" height="15" fill="rgb(238,105,48)" fg:x="69166" fg:w="79"/><text x="100.0941%" y="1295.50"></text></g><g><title>leveldb::DB::Open (79 samples, 0.11%)</title><rect x="99.8441%" y="1269" width="0.1140%" height="15" fill="rgb(222,134,54)" fg:x="69166" fg:w="79"/><text x="100.0941%" y="1279.50"></text></g><g><title>leveldb::DBImpl::Recover (79 samples, 0.11%)</title><rect x="99.8441%" y="1253" width="0.1140%" height="15" fill="rgb(246,24,43)" fg:x="69166" fg:w="79"/><text x="100.0941%" y="1263.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (79 samples, 0.11%)</title><rect x="99.8441%" y="1237" width="0.1140%" height="15" fill="rgb(227,169,22)" fg:x="69166" fg:w="79"/><text x="100.0941%" y="1247.50"></text></g><g><title>leveldb::log::Reader::ReadRecord (9 samples, 0.01%)</title><rect x="99.9451%" y="1221" width="0.0130%" height="15" fill="rgb(253,152,4)" fg:x="69236" fg:w="9"/><text x="100.1951%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (8 samples, 0.01%)</title><rect x="99.9466%" y="1205" width="0.0115%" height="15" fill="rgb(219,158,36)" fg:x="69237" fg:w="8"/><text x="100.1966%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (8 samples, 0.01%)</title><rect x="99.9466%" y="1189" width="0.0115%" height="15" fill="rgb(251,128,40)" fg:x="69237" fg:w="8"/><text x="100.1966%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (8 samples, 0.01%)</title><rect x="99.9596%" y="1253" width="0.0115%" height="15" fill="rgb(254,101,39)" fg:x="69246" fg:w="8"/><text x="100.2096%" y="1263.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (10 samples, 0.01%)</title><rect x="99.9596%" y="1269" width="0.0144%" height="15" fill="rgb(221,168,40)" fg:x="69246" fg:w="10"/><text x="100.2096%" y="1279.50"></text></g><g><title>main (91 samples, 0.13%)</title><rect x="99.8441%" y="1445" width="0.1314%" height="15" fill="rgb(221,14,27)" fg:x="69166" fg:w="91"/><text x="100.0941%" y="1455.50"></text></g><g><title>main (91 samples, 0.13%)</title><rect x="99.8441%" y="1429" width="0.1314%" height="15" fill="rgb(207,36,43)" fg:x="69166" fg:w="91"/><text x="100.0941%" y="1439.50"></text></g><g><title>AppInitMain (91 samples, 0.13%)</title><rect x="99.8441%" y="1413" width="0.1314%" height="15" fill="rgb(240,172,53)" fg:x="69166" fg:w="91"/><text x="100.0941%" y="1423.50"></text></g><g><title>InitAndLoadChainstate (91 samples, 0.13%)</title><rect x="99.8441%" y="1397" width="0.1314%" height="15" fill="rgb(241,138,43)" fg:x="69166" fg:w="91"/><text x="100.0941%" y="1407.50"></text></g><g><title>operator (91 samples, 0.13%)</title><rect x="99.8441%" y="1381" width="0.1314%" height="15" fill="rgb(227,78,19)" fg:x="69166" fg:w="91"/><text x="100.0941%" y="1391.50"></text></g><g><title>InitAndLoadChainstate (91 samples, 0.13%)</title><rect x="99.8441%" y="1365" width="0.1314%" height="15" fill="rgb(215,127,44)" fg:x="69166" fg:w="91"/><text x="100.0941%" y="1375.50"></text></g><g><title>node::LoadChainstate (91 samples, 0.13%)</title><rect x="99.8441%" y="1349" width="0.1314%" height="15" fill="rgb(227,13,10)" fg:x="69166" fg:w="91"/><text x="100.0941%" y="1359.50"></text></g><g><title>node::CompleteChainstateInitialization (12 samples, 0.02%)</title><rect x="99.9581%" y="1333" width="0.0173%" height="15" fill="rgb(249,177,6)" fg:x="69245" fg:w="12"/><text x="100.2081%" y="1343.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (11 samples, 0.02%)</title><rect x="99.9596%" y="1317" width="0.0159%" height="15" fill="rgb(215,154,26)" fg:x="69246" fg:w="11"/><text x="100.2096%" y="1327.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (11 samples, 0.02%)</title><rect x="99.9596%" y="1301" width="0.0159%" height="15" fill="rgb(250,168,20)" fg:x="69246" fg:w="11"/><text x="100.2096%" y="1311.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (11 samples, 0.02%)</title><rect x="99.9596%" y="1285" width="0.0159%" height="15" fill="rgb(222,53,38)" fg:x="69246" fg:w="11"/><text x="100.2096%" y="1295.50"></text></g><g><title>bitcoind-base (7,221 samples, 10.42%)</title><rect x="89.5632%" y="1461" width="10.4238%" height="15" fill="rgb(245,154,5)" fg:x="62044" fg:w="7221"/><text x="89.8132%" y="1471.50">bitcoind-base</text></g><g><title>all (69,274 samples, 100%)</title><rect x="0.0000%" y="1477" width="100.0000%" height="15" fill="rgb(214,89,50)" fg:x="0" fg:w="69274"/><text x="0.2500%" y="1487.50"></text></g></svg></svg>