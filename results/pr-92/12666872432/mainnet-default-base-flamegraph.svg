<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1510" onload="init(evt)" viewBox="0 0 1200 1510" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1510" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1493.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1493.00"> </text><svg id="frames" x="10" width="1180" total_samples="117720"><g><title>_IO_fwrite (20 samples, 0.02%)</title><rect x="0.5182%" y="1413" width="0.0170%" height="15" fill="rgb(227,0,7)" fg:x="610" fg:w="20"/><text x="0.7682%" y="1423.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (254 samples, 0.22%)</title><rect x="0.5352%" y="1413" width="0.2158%" height="15" fill="rgb(217,0,24)" fg:x="630" fg:w="254"/><text x="0.7852%" y="1423.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (254 samples, 0.22%)</title><rect x="0.5352%" y="1397" width="0.2158%" height="15" fill="rgb(221,193,54)" fg:x="630" fg:w="254"/><text x="0.7852%" y="1407.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (254 samples, 0.22%)</title><rect x="0.5352%" y="1381" width="0.2158%" height="15" fill="rgb(248,212,6)" fg:x="630" fg:w="254"/><text x="0.7852%" y="1391.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (254 samples, 0.22%)</title><rect x="0.5352%" y="1365" width="0.2158%" height="15" fill="rgb(208,68,35)" fg:x="630" fg:w="254"/><text x="0.7852%" y="1375.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (254 samples, 0.22%)</title><rect x="0.5352%" y="1349" width="0.2158%" height="15" fill="rgb(232,128,0)" fg:x="630" fg:w="254"/><text x="0.7852%" y="1359.50"></text></g><g><title>void std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;std::byte, std::byte const&gt; (66 samples, 0.06%)</title><rect x="0.6949%" y="1333" width="0.0561%" height="15" fill="rgb(207,160,47)" fg:x="818" fg:w="66"/><text x="0.9449%" y="1343.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (22 samples, 0.02%)</title><rect x="0.7509%" y="1413" width="0.0187%" height="15" fill="rgb(228,23,34)" fg:x="884" fg:w="22"/><text x="1.0009%" y="1423.50"></text></g><g><title>AutoFile::write (2,324 samples, 1.97%)</title><rect x="0.0153%" y="1429" width="1.9742%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="2324"/><text x="0.2653%" y="1439.50">A..</text></g><g><title>util::Xor (1,436 samples, 1.22%)</title><rect x="0.7696%" y="1413" width="1.2198%" height="15" fill="rgb(220,122,19)" fg:x="906" fg:w="1436"/><text x="1.0196%" y="1423.50"></text></g><g><title>std::operator^= (488 samples, 0.41%)</title><rect x="1.5749%" y="1397" width="0.4145%" height="15" fill="rgb(250,228,42)" fg:x="1854" fg:w="488"/><text x="1.8249%" y="1407.50"></text></g><g><title>std::operator^ (488 samples, 0.41%)</title><rect x="1.5749%" y="1381" width="0.4145%" height="15" fill="rgb(240,193,28)" fg:x="1854" fg:w="488"/><text x="1.8249%" y="1391.50"></text></g><g><title>CCoinsViewCache::BatchWrite (29 samples, 0.02%)</title><rect x="2.0048%" y="1429" width="0.0246%" height="15" fill="rgb(216,20,37)" fg:x="2360" fg:w="29"/><text x="2.2548%" y="1439.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (27 samples, 0.02%)</title><rect x="2.0065%" y="1413" width="0.0229%" height="15" fill="rgb(206,188,39)" fg:x="2362" fg:w="27"/><text x="2.2565%" y="1423.50"></text></g><g><title>_int_free (27 samples, 0.02%)</title><rect x="2.0065%" y="1397" width="0.0229%" height="15" fill="rgb(217,207,13)" fg:x="2362" fg:w="27"/><text x="2.2565%" y="1407.50"></text></g><g><title>CCoinsViewCache::FetchCoin (14 samples, 0.01%)</title><rect x="2.0294%" y="1429" width="0.0119%" height="15" fill="rgb(231,73,38)" fg:x="2389" fg:w="14"/><text x="2.2794%" y="1439.50"></text></g><g><title>CCoinsViewCache::GetCoin (20 samples, 0.02%)</title><rect x="2.0421%" y="1429" width="0.0170%" height="15" fill="rgb(225,20,46)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1439.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (20 samples, 0.02%)</title><rect x="2.0421%" y="1413" width="0.0170%" height="15" fill="rgb(210,31,41)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1423.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (20 samples, 0.02%)</title><rect x="2.0421%" y="1397" width="0.0170%" height="15" fill="rgb(221,200,47)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1407.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (20 samples, 0.02%)</title><rect x="2.0421%" y="1381" width="0.0170%" height="15" fill="rgb(226,26,5)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1391.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (20 samples, 0.02%)</title><rect x="2.0421%" y="1365" width="0.0170%" height="15" fill="rgb(249,33,26)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1375.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (20 samples, 0.02%)</title><rect x="2.0421%" y="1349" width="0.0170%" height="15" fill="rgb(235,183,28)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1359.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (20 samples, 0.02%)</title><rect x="2.0421%" y="1333" width="0.0170%" height="15" fill="rgb(221,5,38)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1343.50"></text></g><g><title>Coin::Coin (20 samples, 0.02%)</title><rect x="2.0421%" y="1317" width="0.0170%" height="15" fill="rgb(247,18,42)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1327.50"></text></g><g><title>CTxOut::CTxOut (20 samples, 0.02%)</title><rect x="2.0421%" y="1301" width="0.0170%" height="15" fill="rgb(241,131,45)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1311.50"></text></g><g><title>CScript::CScript (20 samples, 0.02%)</title><rect x="2.0421%" y="1285" width="0.0170%" height="15" fill="rgb(249,31,29)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (20 samples, 0.02%)</title><rect x="2.0421%" y="1269" width="0.0170%" height="15" fill="rgb(225,111,53)" fg:x="2404" fg:w="20"/><text x="2.2921%" y="1279.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (13 samples, 0.01%)</title><rect x="2.0481%" y="1253" width="0.0110%" height="15" fill="rgb(238,160,17)" fg:x="2411" fg:w="13"/><text x="2.2981%" y="1263.50"></text></g><g><title>CCoinsViewDB::GetCoin (19 samples, 0.02%)</title><rect x="2.0685%" y="1429" width="0.0161%" height="15" fill="rgb(214,148,48)" fg:x="2435" fg:w="19"/><text x="2.3185%" y="1439.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (19 samples, 0.02%)</title><rect x="2.0685%" y="1413" width="0.0161%" height="15" fill="rgb(232,36,49)" fg:x="2435" fg:w="19"/><text x="2.3185%" y="1423.50"></text></g><g><title>CSHA256::Write (14 samples, 0.01%)</title><rect x="2.0965%" y="1397" width="0.0119%" height="15" fill="rgb(209,103,24)" fg:x="2468" fg:w="14"/><text x="2.3465%" y="1407.50"></text></g><g><title>memcpy (19 samples, 0.02%)</title><rect x="2.0965%" y="1413" width="0.0161%" height="15" fill="rgb(229,88,8)" fg:x="2468" fg:w="19"/><text x="2.3465%" y="1423.50"></text></g><g><title>CSHA256::Write (27 samples, 0.02%)</title><rect x="2.0906%" y="1429" width="0.0229%" height="15" fill="rgb(213,181,19)" fg:x="2461" fg:w="27"/><text x="2.3406%" y="1439.50"></text></g><g><title>CScript::GetSigOpCount (13 samples, 0.01%)</title><rect x="2.1135%" y="1429" width="0.0110%" height="15" fill="rgb(254,191,54)" fg:x="2488" fg:w="13"/><text x="2.3635%" y="1439.50"></text></g><g><title>CScript::IsWitnessProgram (27 samples, 0.02%)</title><rect x="2.1262%" y="1429" width="0.0229%" height="15" fill="rgb(241,83,37)" fg:x="2503" fg:w="27"/><text x="2.3762%" y="1439.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (13 samples, 0.01%)</title><rect x="2.1381%" y="1413" width="0.0110%" height="15" fill="rgb(233,36,39)" fg:x="2517" fg:w="13"/><text x="2.3881%" y="1423.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (13 samples, 0.01%)</title><rect x="2.1381%" y="1397" width="0.0110%" height="15" fill="rgb(226,3,54)" fg:x="2517" fg:w="13"/><text x="2.3881%" y="1407.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (12 samples, 0.01%)</title><rect x="2.1390%" y="1381" width="0.0102%" height="15" fill="rgb(245,192,40)" fg:x="2518" fg:w="12"/><text x="2.3890%" y="1391.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="2.1390%" y="1365" width="0.0102%" height="15" fill="rgb(238,167,29)" fg:x="2518" fg:w="12"/><text x="2.3890%" y="1375.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="2.1390%" y="1349" width="0.0102%" height="15" fill="rgb(232,182,51)" fg:x="2518" fg:w="12"/><text x="2.3890%" y="1359.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="2.1390%" y="1333" width="0.0102%" height="15" fill="rgb(231,60,39)" fg:x="2518" fg:w="12"/><text x="2.3890%" y="1343.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="2.1390%" y="1317" width="0.0102%" height="15" fill="rgb(208,69,12)" fg:x="2518" fg:w="12"/><text x="2.3890%" y="1327.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="2.1390%" y="1301" width="0.0102%" height="15" fill="rgb(235,93,37)" fg:x="2518" fg:w="12"/><text x="2.3890%" y="1311.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="2.1390%" y="1285" width="0.0102%" height="15" fill="rgb(213,116,39)" fg:x="2518" fg:w="12"/><text x="2.3890%" y="1295.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="2.1390%" y="1269" width="0.0102%" height="15" fill="rgb(222,207,29)" fg:x="2518" fg:w="12"/><text x="2.3890%" y="1279.50"></text></g><g><title>Chainstate::ConnectBlock (27 samples, 0.02%)</title><rect x="2.1568%" y="1429" width="0.0229%" height="15" fill="rgb(206,96,30)" fg:x="2539" fg:w="27"/><text x="2.4068%" y="1439.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="2.2834%" y="517" width="0.0110%" height="15" fill="rgb(218,138,4)" fg:x="2688" fg:w="13"/><text x="2.5334%" y="527.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (16 samples, 0.01%)</title><rect x="2.2825%" y="677" width="0.0136%" height="15" fill="rgb(250,191,14)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="687.50"></text></g><g><title>new_do_write (16 samples, 0.01%)</title><rect x="2.2825%" y="661" width="0.0136%" height="15" fill="rgb(239,60,40)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="671.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (16 samples, 0.01%)</title><rect x="2.2825%" y="645" width="0.0136%" height="15" fill="rgb(206,27,48)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="655.50"></text></g><g><title>__GI___libc_write (16 samples, 0.01%)</title><rect x="2.2825%" y="629" width="0.0136%" height="15" fill="rgb(225,35,8)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="639.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="2.2825%" y="613" width="0.0136%" height="15" fill="rgb(250,213,24)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="623.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="2.2825%" y="597" width="0.0136%" height="15" fill="rgb(247,123,22)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="607.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="2.2825%" y="581" width="0.0136%" height="15" fill="rgb(231,138,38)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="591.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="2.2825%" y="565" width="0.0136%" height="15" fill="rgb(231,145,46)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="575.50"></text></g><g><title>[[ext4]] (16 samples, 0.01%)</title><rect x="2.2825%" y="549" width="0.0136%" height="15" fill="rgb(251,118,11)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="559.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="2.2825%" y="533" width="0.0136%" height="15" fill="rgb(217,147,25)" fg:x="2687" fg:w="16"/><text x="2.5325%" y="543.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (21 samples, 0.02%)</title><rect x="2.2800%" y="693" width="0.0178%" height="15" fill="rgb(247,81,37)" fg:x="2684" fg:w="21"/><text x="2.5300%" y="703.50"></text></g><g><title>_IO_fwrite (137 samples, 0.12%)</title><rect x="2.1831%" y="709" width="0.1164%" height="15" fill="rgb(209,12,38)" fg:x="2570" fg:w="137"/><text x="2.4331%" y="719.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (144 samples, 0.12%)</title><rect x="2.1797%" y="869" width="0.1223%" height="15" fill="rgb(227,1,9)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="879.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (144 samples, 0.12%)</title><rect x="2.1797%" y="853" width="0.1223%" height="15" fill="rgb(248,47,43)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="863.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (144 samples, 0.12%)</title><rect x="2.1797%" y="837" width="0.1223%" height="15" fill="rgb(221,10,30)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="847.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (144 samples, 0.12%)</title><rect x="2.1797%" y="821" width="0.1223%" height="15" fill="rgb(210,229,1)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="831.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (144 samples, 0.12%)</title><rect x="2.1797%" y="805" width="0.1223%" height="15" fill="rgb(222,148,37)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="815.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (144 samples, 0.12%)</title><rect x="2.1797%" y="789" width="0.1223%" height="15" fill="rgb(234,67,33)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="799.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (144 samples, 0.12%)</title><rect x="2.1797%" y="773" width="0.1223%" height="15" fill="rgb(247,98,35)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="783.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (144 samples, 0.12%)</title><rect x="2.1797%" y="757" width="0.1223%" height="15" fill="rgb(247,138,52)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="767.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (144 samples, 0.12%)</title><rect x="2.1797%" y="741" width="0.1223%" height="15" fill="rgb(213,79,30)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="751.50"></text></g><g><title>AutoFile::write (144 samples, 0.12%)</title><rect x="2.1797%" y="725" width="0.1223%" height="15" fill="rgb(246,177,23)" fg:x="2566" fg:w="144"/><text x="2.4297%" y="735.50"></text></g><g><title>[[ext4]] (17 samples, 0.01%)</title><rect x="2.3318%" y="565" width="0.0144%" height="15" fill="rgb(230,62,27)" fg:x="2745" fg:w="17"/><text x="2.5818%" y="575.50"></text></g><g><title>[[ext4]] (93 samples, 0.08%)</title><rect x="2.3284%" y="581" width="0.0790%" height="15" fill="rgb(216,154,8)" fg:x="2741" fg:w="93"/><text x="2.5784%" y="591.50"></text></g><g><title>[unknown] (72 samples, 0.06%)</title><rect x="2.3462%" y="565" width="0.0612%" height="15" fill="rgb(244,35,45)" fg:x="2762" fg:w="72"/><text x="2.5962%" y="575.50"></text></g><g><title>[unknown] (69 samples, 0.06%)</title><rect x="2.3488%" y="549" width="0.0586%" height="15" fill="rgb(251,115,12)" fg:x="2765" fg:w="69"/><text x="2.5988%" y="559.50"></text></g><g><title>[unknown] (57 samples, 0.05%)</title><rect x="2.3590%" y="533" width="0.0484%" height="15" fill="rgb(240,54,50)" fg:x="2777" fg:w="57"/><text x="2.6090%" y="543.50"></text></g><g><title>[unknown] (50 samples, 0.04%)</title><rect x="2.3649%" y="517" width="0.0425%" height="15" fill="rgb(233,84,52)" fg:x="2784" fg:w="50"/><text x="2.6149%" y="527.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="2.3811%" y="501" width="0.0263%" height="15" fill="rgb(207,117,47)" fg:x="2803" fg:w="31"/><text x="2.6311%" y="511.50"></text></g><g><title>[[ext4]] (114 samples, 0.10%)</title><rect x="2.3216%" y="613" width="0.0968%" height="15" fill="rgb(249,43,39)" fg:x="2733" fg:w="114"/><text x="2.5716%" y="623.50"></text></g><g><title>[unknown] (113 samples, 0.10%)</title><rect x="2.3225%" y="597" width="0.0960%" height="15" fill="rgb(209,38,44)" fg:x="2734" fg:w="113"/><text x="2.5725%" y="607.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="2.4074%" y="581" width="0.0110%" height="15" fill="rgb(236,212,23)" fg:x="2834" fg:w="13"/><text x="2.6574%" y="591.50"></text></g><g><title>__GI___libc_write (121 samples, 0.10%)</title><rect x="2.3174%" y="693" width="0.1028%" height="15" fill="rgb(242,79,21)" fg:x="2728" fg:w="121"/><text x="2.5674%" y="703.50"></text></g><g><title>[unknown] (121 samples, 0.10%)</title><rect x="2.3174%" y="677" width="0.1028%" height="15" fill="rgb(211,96,35)" fg:x="2728" fg:w="121"/><text x="2.5674%" y="687.50"></text></g><g><title>[unknown] (121 samples, 0.10%)</title><rect x="2.3174%" y="661" width="0.1028%" height="15" fill="rgb(253,215,40)" fg:x="2728" fg:w="121"/><text x="2.5674%" y="671.50"></text></g><g><title>[unknown] (121 samples, 0.10%)</title><rect x="2.3174%" y="645" width="0.1028%" height="15" fill="rgb(211,81,21)" fg:x="2728" fg:w="121"/><text x="2.5674%" y="655.50"></text></g><g><title>[unknown] (118 samples, 0.10%)</title><rect x="2.3199%" y="629" width="0.1002%" height="15" fill="rgb(208,190,38)" fg:x="2731" fg:w="118"/><text x="2.5699%" y="639.50"></text></g><g><title>_IO_fwrite (135 samples, 0.11%)</title><rect x="2.3063%" y="773" width="0.1147%" height="15" fill="rgb(235,213,38)" fg:x="2715" fg:w="135"/><text x="2.5563%" y="783.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (125 samples, 0.11%)</title><rect x="2.3148%" y="757" width="0.1062%" height="15" fill="rgb(237,122,38)" fg:x="2725" fg:w="125"/><text x="2.5648%" y="767.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (124 samples, 0.11%)</title><rect x="2.3157%" y="741" width="0.1053%" height="15" fill="rgb(244,218,35)" fg:x="2726" fg:w="124"/><text x="2.5657%" y="751.50"></text></g><g><title>new_do_write (124 samples, 0.11%)</title><rect x="2.3157%" y="725" width="0.1053%" height="15" fill="rgb(240,68,47)" fg:x="2726" fg:w="124"/><text x="2.5657%" y="735.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (122 samples, 0.10%)</title><rect x="2.3174%" y="709" width="0.1036%" height="15" fill="rgb(210,16,53)" fg:x="2728" fg:w="122"/><text x="2.5674%" y="719.50"></text></g><g><title>AutoFile::write (173 samples, 0.15%)</title><rect x="2.3021%" y="789" width="0.1470%" height="15" fill="rgb(235,124,12)" fg:x="2710" fg:w="173"/><text x="2.5521%" y="799.50"></text></g><g><title>util::Xor (24 samples, 0.02%)</title><rect x="2.4286%" y="773" width="0.0204%" height="15" fill="rgb(224,169,11)" fg:x="2859" fg:w="24"/><text x="2.6786%" y="783.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (176 samples, 0.15%)</title><rect x="2.3021%" y="821" width="0.1495%" height="15" fill="rgb(250,166,2)" fg:x="2710" fg:w="176"/><text x="2.5521%" y="831.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (176 samples, 0.15%)</title><rect x="2.3021%" y="805" width="0.1495%" height="15" fill="rgb(242,216,29)" fg:x="2710" fg:w="176"/><text x="2.5521%" y="815.50"></text></g><g><title>[[ext4]] (25 samples, 0.02%)</title><rect x="2.4533%" y="581" width="0.0212%" height="15" fill="rgb(230,116,27)" fg:x="2888" fg:w="25"/><text x="2.7033%" y="591.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="2.4601%" y="565" width="0.0144%" height="15" fill="rgb(228,99,48)" fg:x="2896" fg:w="17"/><text x="2.7101%" y="575.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="2.4601%" y="549" width="0.0144%" height="15" fill="rgb(253,11,6)" fg:x="2896" fg:w="17"/><text x="2.7101%" y="559.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="2.4609%" y="533" width="0.0136%" height="15" fill="rgb(247,143,39)" fg:x="2897" fg:w="16"/><text x="2.7109%" y="543.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="2.4643%" y="517" width="0.0102%" height="15" fill="rgb(236,97,10)" fg:x="2901" fg:w="12"/><text x="2.7143%" y="527.50"></text></g><g><title>[[ext4]] (27 samples, 0.02%)</title><rect x="2.4533%" y="613" width="0.0229%" height="15" fill="rgb(233,208,19)" fg:x="2888" fg:w="27"/><text x="2.7033%" y="623.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="2.4533%" y="597" width="0.0229%" height="15" fill="rgb(216,164,2)" fg:x="2888" fg:w="27"/><text x="2.7033%" y="607.50"></text></g><g><title>_IO_fwrite (31 samples, 0.03%)</title><rect x="2.4524%" y="773" width="0.0263%" height="15" fill="rgb(220,129,5)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="783.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (31 samples, 0.03%)</title><rect x="2.4524%" y="757" width="0.0263%" height="15" fill="rgb(242,17,10)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="767.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (31 samples, 0.03%)</title><rect x="2.4524%" y="741" width="0.0263%" height="15" fill="rgb(242,107,0)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="751.50"></text></g><g><title>new_do_write (31 samples, 0.03%)</title><rect x="2.4524%" y="725" width="0.0263%" height="15" fill="rgb(251,28,31)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="735.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (31 samples, 0.03%)</title><rect x="2.4524%" y="709" width="0.0263%" height="15" fill="rgb(233,223,10)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="719.50"></text></g><g><title>__GI___libc_write (31 samples, 0.03%)</title><rect x="2.4524%" y="693" width="0.0263%" height="15" fill="rgb(215,21,27)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="703.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="2.4524%" y="677" width="0.0263%" height="15" fill="rgb(232,23,21)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="687.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="2.4524%" y="661" width="0.0263%" height="15" fill="rgb(244,5,23)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="671.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="2.4524%" y="645" width="0.0263%" height="15" fill="rgb(226,81,46)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="655.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="2.4524%" y="629" width="0.0263%" height="15" fill="rgb(247,70,30)" fg:x="2887" fg:w="31"/><text x="2.7024%" y="639.50"></text></g><g><title>AutoFile::write (38 samples, 0.03%)</title><rect x="2.4516%" y="789" width="0.0323%" height="15" fill="rgb(212,68,19)" fg:x="2886" fg:w="38"/><text x="2.7016%" y="799.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (52 samples, 0.04%)</title><rect x="2.4516%" y="821" width="0.0442%" height="15" fill="rgb(240,187,13)" fg:x="2886" fg:w="52"/><text x="2.7016%" y="831.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char&gt; (52 samples, 0.04%)</title><rect x="2.4516%" y="805" width="0.0442%" height="15" fill="rgb(223,113,26)" fg:x="2886" fg:w="52"/><text x="2.7016%" y="815.50"></text></g><g><title>AutoFile::write (21 samples, 0.02%)</title><rect x="2.4958%" y="725" width="0.0178%" height="15" fill="rgb(206,192,2)" fg:x="2938" fg:w="21"/><text x="2.7458%" y="735.50"></text></g><g><title>_IO_fwrite (21 samples, 0.02%)</title><rect x="2.4958%" y="709" width="0.0178%" height="15" fill="rgb(241,108,4)" fg:x="2938" fg:w="21"/><text x="2.7458%" y="719.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (394 samples, 0.33%)</title><rect x="2.1797%" y="965" width="0.3347%" height="15" fill="rgb(247,173,49)" fg:x="2566" fg:w="394"/><text x="2.4297%" y="975.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (394 samples, 0.33%)</title><rect x="2.1797%" y="949" width="0.3347%" height="15" fill="rgb(224,114,35)" fg:x="2566" fg:w="394"/><text x="2.4297%" y="959.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (394 samples, 0.33%)</title><rect x="2.1797%" y="933" width="0.3347%" height="15" fill="rgb(245,159,27)" fg:x="2566" fg:w="394"/><text x="2.4297%" y="943.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (394 samples, 0.33%)</title><rect x="2.1797%" y="917" width="0.3347%" height="15" fill="rgb(245,172,44)" fg:x="2566" fg:w="394"/><text x="2.4297%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (394 samples, 0.33%)</title><rect x="2.1797%" y="901" width="0.3347%" height="15" fill="rgb(236,23,11)" fg:x="2566" fg:w="394"/><text x="2.4297%" y="911.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (394 samples, 0.33%)</title><rect x="2.1797%" y="885" width="0.3347%" height="15" fill="rgb(205,117,38)" fg:x="2566" fg:w="394"/><text x="2.4297%" y="895.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (250 samples, 0.21%)</title><rect x="2.3021%" y="869" width="0.2124%" height="15" fill="rgb(237,72,25)" fg:x="2710" fg:w="250"/><text x="2.5521%" y="879.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (250 samples, 0.21%)</title><rect x="2.3021%" y="853" width="0.2124%" height="15" fill="rgb(244,70,9)" fg:x="2710" fg:w="250"/><text x="2.5521%" y="863.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (250 samples, 0.21%)</title><rect x="2.3021%" y="837" width="0.2124%" height="15" fill="rgb(217,125,39)" fg:x="2710" fg:w="250"/><text x="2.5521%" y="847.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (22 samples, 0.02%)</title><rect x="2.4958%" y="821" width="0.0187%" height="15" fill="rgb(235,36,10)" fg:x="2938" fg:w="22"/><text x="2.7458%" y="831.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (22 samples, 0.02%)</title><rect x="2.4958%" y="805" width="0.0187%" height="15" fill="rgb(251,123,47)" fg:x="2938" fg:w="22"/><text x="2.7458%" y="815.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (22 samples, 0.02%)</title><rect x="2.4958%" y="789" width="0.0187%" height="15" fill="rgb(221,13,13)" fg:x="2938" fg:w="22"/><text x="2.7458%" y="799.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (22 samples, 0.02%)</title><rect x="2.4958%" y="773" width="0.0187%" height="15" fill="rgb(238,131,9)" fg:x="2938" fg:w="22"/><text x="2.7458%" y="783.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (22 samples, 0.02%)</title><rect x="2.4958%" y="757" width="0.0187%" height="15" fill="rgb(211,50,8)" fg:x="2938" fg:w="22"/><text x="2.7458%" y="767.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (22 samples, 0.02%)</title><rect x="2.4958%" y="741" width="0.0187%" height="15" fill="rgb(245,182,24)" fg:x="2938" fg:w="22"/><text x="2.7458%" y="751.50"></text></g><g><title>[[ext4]] (21 samples, 0.02%)</title><rect x="2.6113%" y="677" width="0.0178%" height="15" fill="rgb(242,14,37)" fg:x="3074" fg:w="21"/><text x="2.8613%" y="687.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="2.6138%" y="661" width="0.0153%" height="15" fill="rgb(246,228,12)" fg:x="3077" fg:w="18"/><text x="2.8638%" y="671.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="2.6147%" y="645" width="0.0144%" height="15" fill="rgb(213,55,15)" fg:x="3078" fg:w="17"/><text x="2.8647%" y="655.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="2.6172%" y="629" width="0.0119%" height="15" fill="rgb(209,9,3)" fg:x="3081" fg:w="14"/><text x="2.8672%" y="639.50"></text></g><g><title>[[ext4]] (24 samples, 0.02%)</title><rect x="2.6104%" y="709" width="0.0204%" height="15" fill="rgb(230,59,30)" fg:x="3073" fg:w="24"/><text x="2.8604%" y="719.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="2.6104%" y="693" width="0.0204%" height="15" fill="rgb(209,121,21)" fg:x="3073" fg:w="24"/><text x="2.8604%" y="703.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (30 samples, 0.03%)</title><rect x="2.6070%" y="853" width="0.0255%" height="15" fill="rgb(220,109,13)" fg:x="3069" fg:w="30"/><text x="2.8570%" y="863.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (30 samples, 0.03%)</title><rect x="2.6070%" y="837" width="0.0255%" height="15" fill="rgb(232,18,1)" fg:x="3069" fg:w="30"/><text x="2.8570%" y="847.50"></text></g><g><title>new_do_write (30 samples, 0.03%)</title><rect x="2.6070%" y="821" width="0.0255%" height="15" fill="rgb(215,41,42)" fg:x="3069" fg:w="30"/><text x="2.8570%" y="831.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (30 samples, 0.03%)</title><rect x="2.6070%" y="805" width="0.0255%" height="15" fill="rgb(224,123,36)" fg:x="3069" fg:w="30"/><text x="2.8570%" y="815.50"></text></g><g><title>__GI___libc_write (29 samples, 0.02%)</title><rect x="2.6079%" y="789" width="0.0246%" height="15" fill="rgb(240,125,3)" fg:x="3070" fg:w="29"/><text x="2.8579%" y="799.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="2.6079%" y="773" width="0.0246%" height="15" fill="rgb(205,98,50)" fg:x="3070" fg:w="29"/><text x="2.8579%" y="783.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="2.6079%" y="757" width="0.0246%" height="15" fill="rgb(205,185,37)" fg:x="3070" fg:w="29"/><text x="2.8579%" y="767.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="2.6079%" y="741" width="0.0246%" height="15" fill="rgb(238,207,15)" fg:x="3070" fg:w="29"/><text x="2.8579%" y="751.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="2.6096%" y="725" width="0.0229%" height="15" fill="rgb(213,199,42)" fg:x="3072" fg:w="27"/><text x="2.8596%" y="735.50"></text></g><g><title>_IO_fwrite (139 samples, 0.12%)</title><rect x="2.5170%" y="869" width="0.1181%" height="15" fill="rgb(235,201,11)" fg:x="2963" fg:w="139"/><text x="2.7670%" y="879.50"></text></g><g><title>AutoFile::write (143 samples, 0.12%)</title><rect x="2.5144%" y="885" width="0.1215%" height="15" fill="rgb(207,46,11)" fg:x="2960" fg:w="143"/><text x="2.7644%" y="895.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (153 samples, 0.13%)</title><rect x="2.5144%" y="965" width="0.1300%" height="15" fill="rgb(241,35,35)" fg:x="2960" fg:w="153"/><text x="2.7644%" y="975.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (153 samples, 0.13%)</title><rect x="2.5144%" y="949" width="0.1300%" height="15" fill="rgb(243,32,47)" fg:x="2960" fg:w="153"/><text x="2.7644%" y="959.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (153 samples, 0.13%)</title><rect x="2.5144%" y="933" width="0.1300%" height="15" fill="rgb(247,202,23)" fg:x="2960" fg:w="153"/><text x="2.7644%" y="943.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (153 samples, 0.13%)</title><rect x="2.5144%" y="917" width="0.1300%" height="15" fill="rgb(219,102,11)" fg:x="2960" fg:w="153"/><text x="2.7644%" y="927.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (153 samples, 0.13%)</title><rect x="2.5144%" y="901" width="0.1300%" height="15" fill="rgb(243,110,44)" fg:x="2960" fg:w="153"/><text x="2.7644%" y="911.50"></text></g><g><title>_IO_fwrite (43 samples, 0.04%)</title><rect x="2.6453%" y="917" width="0.0365%" height="15" fill="rgb(222,74,54)" fg:x="3114" fg:w="43"/><text x="2.8953%" y="927.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (592 samples, 0.50%)</title><rect x="2.1797%" y="981" width="0.5029%" height="15" fill="rgb(216,99,12)" fg:x="2566" fg:w="592"/><text x="2.4297%" y="991.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (45 samples, 0.04%)</title><rect x="2.6444%" y="965" width="0.0382%" height="15" fill="rgb(226,22,26)" fg:x="3113" fg:w="45"/><text x="2.8944%" y="975.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (45 samples, 0.04%)</title><rect x="2.6444%" y="949" width="0.0382%" height="15" fill="rgb(217,163,10)" fg:x="3113" fg:w="45"/><text x="2.8944%" y="959.50"></text></g><g><title>AutoFile::write (45 samples, 0.04%)</title><rect x="2.6444%" y="933" width="0.0382%" height="15" fill="rgb(213,25,53)" fg:x="3113" fg:w="45"/><text x="2.8944%" y="943.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (611 samples, 0.52%)</title><rect x="2.1797%" y="1429" width="0.5190%" height="15" fill="rgb(252,105,26)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1439.50"></text></g><g><title>Chainstate::ActivateBestChain (611 samples, 0.52%)</title><rect x="2.1797%" y="1413" width="0.5190%" height="15" fill="rgb(220,39,43)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1423.50"></text></g><g><title>Chainstate::ActivateBestChainStep (611 samples, 0.52%)</title><rect x="2.1797%" y="1397" width="0.5190%" height="15" fill="rgb(229,68,48)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1407.50"></text></g><g><title>Chainstate::ConnectTip (611 samples, 0.52%)</title><rect x="2.1797%" y="1381" width="0.5190%" height="15" fill="rgb(252,8,32)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1391.50"></text></g><g><title>Chainstate::ConnectBlock (611 samples, 0.52%)</title><rect x="2.1797%" y="1365" width="0.5190%" height="15" fill="rgb(223,20,43)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1375.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (611 samples, 0.52%)</title><rect x="2.1797%" y="1349" width="0.5190%" height="15" fill="rgb(229,81,49)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1359.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (611 samples, 0.52%)</title><rect x="2.1797%" y="1333" width="0.5190%" height="15" fill="rgb(236,28,36)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1343.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (611 samples, 0.52%)</title><rect x="2.1797%" y="1317" width="0.5190%" height="15" fill="rgb(249,185,26)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1327.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1301" width="0.5190%" height="15" fill="rgb(249,174,33)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1311.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1285" width="0.5190%" height="15" fill="rgb(233,201,37)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1295.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1269" width="0.5190%" height="15" fill="rgb(221,78,26)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1279.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1253" width="0.5190%" height="15" fill="rgb(250,127,30)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1237" width="0.5190%" height="15" fill="rgb(230,49,44)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1247.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1221" width="0.5190%" height="15" fill="rgb(229,67,23)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1205" width="0.5190%" height="15" fill="rgb(249,83,47)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1215.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1189" width="0.5190%" height="15" fill="rgb(215,43,3)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1199.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1173" width="0.5190%" height="15" fill="rgb(238,154,13)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1183.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1157" width="0.5190%" height="15" fill="rgb(219,56,2)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1167.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1141" width="0.5190%" height="15" fill="rgb(233,0,4)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1151.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1125" width="0.5190%" height="15" fill="rgb(235,30,7)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1135.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1109" width="0.5190%" height="15" fill="rgb(250,79,13)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1119.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1093" width="0.5190%" height="15" fill="rgb(211,146,34)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1103.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1077" width="0.5190%" height="15" fill="rgb(228,22,38)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1061" width="0.5190%" height="15" fill="rgb(235,168,5)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1071.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1045" width="0.5190%" height="15" fill="rgb(221,155,16)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1055.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1029" width="0.5190%" height="15" fill="rgb(215,215,53)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1039.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="1013" width="0.5190%" height="15" fill="rgb(223,4,10)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1023.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (611 samples, 0.52%)</title><rect x="2.1797%" y="997" width="0.5190%" height="15" fill="rgb(234,103,6)" fg:x="2566" fg:w="611"/><text x="2.4297%" y="1007.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (19 samples, 0.02%)</title><rect x="2.6826%" y="981" width="0.0161%" height="15" fill="rgb(227,97,0)" fg:x="3158" fg:w="19"/><text x="2.9326%" y="991.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (19 samples, 0.02%)</title><rect x="2.6826%" y="965" width="0.0161%" height="15" fill="rgb(234,150,53)" fg:x="3158" fg:w="19"/><text x="2.9326%" y="975.50"></text></g><g><title>AutoFile::write (19 samples, 0.02%)</title><rect x="2.6826%" y="949" width="0.0161%" height="15" fill="rgb(228,201,54)" fg:x="3158" fg:w="19"/><text x="2.9326%" y="959.50"></text></g><g><title>_IO_fwrite (19 samples, 0.02%)</title><rect x="2.6826%" y="933" width="0.0161%" height="15" fill="rgb(222,22,37)" fg:x="3158" fg:w="19"/><text x="2.9326%" y="943.50"></text></g><g><title>CheckTransaction (41 samples, 0.03%)</title><rect x="2.7005%" y="1429" width="0.0348%" height="15" fill="rgb(237,53,32)" fg:x="3179" fg:w="41"/><text x="2.9505%" y="1439.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1413" width="0.0136%" height="15" fill="rgb(233,25,53)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1423.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (16 samples, 0.01%)</title><rect x="2.7217%" y="1397" width="0.0136%" height="15" fill="rgb(210,40,34)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1407.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1381" width="0.0136%" height="15" fill="rgb(241,220,44)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1391.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1365" width="0.0136%" height="15" fill="rgb(235,28,35)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1375.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1349" width="0.0136%" height="15" fill="rgb(210,56,17)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1359.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1333" width="0.0136%" height="15" fill="rgb(224,130,29)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1343.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1317" width="0.0136%" height="15" fill="rgb(235,212,8)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1327.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (16 samples, 0.01%)</title><rect x="2.7217%" y="1301" width="0.0136%" height="15" fill="rgb(223,33,50)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1311.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1285" width="0.0136%" height="15" fill="rgb(219,149,13)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1295.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1269" width="0.0136%" height="15" fill="rgb(250,156,29)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1279.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1253" width="0.0136%" height="15" fill="rgb(216,193,19)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1263.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (16 samples, 0.01%)</title><rect x="2.7217%" y="1237" width="0.0136%" height="15" fill="rgb(216,135,14)" fg:x="3204" fg:w="16"/><text x="2.9717%" y="1247.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1221" width="0.0127%" height="15" fill="rgb(241,47,5)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1205" width="0.0127%" height="15" fill="rgb(233,42,35)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1215.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1189" width="0.0127%" height="15" fill="rgb(231,13,6)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1199.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1173" width="0.0127%" height="15" fill="rgb(207,181,40)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1183.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1157" width="0.0127%" height="15" fill="rgb(254,173,49)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1141" width="0.0127%" height="15" fill="rgb(221,1,38)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1151.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1125" width="0.0127%" height="15" fill="rgb(206,124,46)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1109" width="0.0127%" height="15" fill="rgb(249,21,11)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1119.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1093" width="0.0127%" height="15" fill="rgb(222,201,40)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1103.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1077" width="0.0127%" height="15" fill="rgb(235,61,29)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1087.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1061" width="0.0127%" height="15" fill="rgb(219,207,3)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1045" width="0.0127%" height="15" fill="rgb(222,56,46)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1055.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (15 samples, 0.01%)</title><rect x="2.7226%" y="1029" width="0.0127%" height="15" fill="rgb(239,76,54)" fg:x="3205" fg:w="15"/><text x="2.9726%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (13 samples, 0.01%)</title><rect x="2.7243%" y="1013" width="0.0110%" height="15" fill="rgb(231,124,27)" fg:x="3207" fg:w="13"/><text x="2.9743%" y="1023.50"></text></g><g><title>CompressAmount (33 samples, 0.03%)</title><rect x="2.7362%" y="1429" width="0.0280%" height="15" fill="rgb(249,195,6)" fg:x="3221" fg:w="33"/><text x="2.9862%" y="1439.50"></text></g><g><title>CompressScript (27 samples, 0.02%)</title><rect x="2.7642%" y="1429" width="0.0229%" height="15" fill="rgb(237,174,47)" fg:x="3254" fg:w="27"/><text x="3.0142%" y="1439.50"></text></g><g><title>_int_malloc (17 samples, 0.01%)</title><rect x="2.7965%" y="1413" width="0.0144%" height="15" fill="rgb(206,201,31)" fg:x="3292" fg:w="17"/><text x="3.0465%" y="1423.50"></text></g><g><title>CountWitnessSigOps (32 samples, 0.03%)</title><rect x="2.7880%" y="1429" width="0.0272%" height="15" fill="rgb(231,57,52)" fg:x="3282" fg:w="32"/><text x="3.0380%" y="1439.50"></text></g><g><title>GetScriptOp (13 samples, 0.01%)</title><rect x="2.8389%" y="1429" width="0.0110%" height="15" fill="rgb(248,177,22)" fg:x="3342" fg:w="13"/><text x="3.0889%" y="1439.50"></text></g><g><title>GetTransactionSigOpCost (12 samples, 0.01%)</title><rect x="2.8500%" y="1429" width="0.0102%" height="15" fill="rgb(215,211,37)" fg:x="3355" fg:w="12"/><text x="3.1000%" y="1439.50"></text></g><g><title>SipHashUint256Extra (88 samples, 0.07%)</title><rect x="2.8610%" y="1429" width="0.0748%" height="15" fill="rgb(241,128,51)" fg:x="3368" fg:w="88"/><text x="3.1110%" y="1439.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (26 samples, 0.02%)</title><rect x="2.9137%" y="1413" width="0.0221%" height="15" fill="rgb(227,165,31)" fg:x="3430" fg:w="26"/><text x="3.1637%" y="1423.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (26 samples, 0.02%)</title><rect x="2.9137%" y="1397" width="0.0221%" height="15" fill="rgb(228,167,24)" fg:x="3430" fg:w="26"/><text x="3.1637%" y="1407.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (18 samples, 0.02%)</title><rect x="2.9451%" y="1397" width="0.0153%" height="15" fill="rgb(228,143,12)" fg:x="3467" fg:w="18"/><text x="3.1951%" y="1407.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (18 samples, 0.02%)</title><rect x="2.9451%" y="1381" width="0.0153%" height="15" fill="rgb(249,149,8)" fg:x="3467" fg:w="18"/><text x="3.1951%" y="1391.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (18 samples, 0.02%)</title><rect x="2.9451%" y="1365" width="0.0153%" height="15" fill="rgb(243,35,44)" fg:x="3467" fg:w="18"/><text x="3.1951%" y="1375.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (18 samples, 0.02%)</title><rect x="2.9451%" y="1349" width="0.0153%" height="15" fill="rgb(246,89,9)" fg:x="3467" fg:w="18"/><text x="3.1951%" y="1359.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (18 samples, 0.02%)</title><rect x="2.9451%" y="1333" width="0.0153%" height="15" fill="rgb(233,213,13)" fg:x="3467" fg:w="18"/><text x="3.1951%" y="1343.50"></text></g><g><title>operator new (13 samples, 0.01%)</title><rect x="2.9494%" y="1317" width="0.0110%" height="15" fill="rgb(233,141,41)" fg:x="3472" fg:w="13"/><text x="3.1994%" y="1327.50"></text></g><g><title>UpdateCoins (32 samples, 0.03%)</title><rect x="2.9358%" y="1429" width="0.0272%" height="15" fill="rgb(239,167,4)" fg:x="3456" fg:w="32"/><text x="3.1858%" y="1439.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (22 samples, 0.02%)</title><rect x="2.9443%" y="1413" width="0.0187%" height="15" fill="rgb(209,217,16)" fg:x="3466" fg:w="22"/><text x="3.1943%" y="1423.50"></text></g><g><title>_int_free (46 samples, 0.04%)</title><rect x="3.0691%" y="1413" width="0.0391%" height="15" fill="rgb(219,88,35)" fg:x="3613" fg:w="46"/><text x="3.3191%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.01%)</title><rect x="3.1184%" y="1413" width="0.0119%" height="15" fill="rgb(220,193,23)" fg:x="3671" fg:w="14"/><text x="3.3684%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (12 samples, 0.01%)</title><rect x="3.1303%" y="1413" width="0.0102%" height="15" fill="rgb(230,90,52)" fg:x="3685" fg:w="12"/><text x="3.3803%" y="1423.50"></text></g><g><title>malloc_consolidate (28 samples, 0.02%)</title><rect x="3.1583%" y="1413" width="0.0238%" height="15" fill="rgb(252,106,19)" fg:x="3718" fg:w="28"/><text x="3.4083%" y="1423.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (13 samples, 0.01%)</title><rect x="3.1872%" y="1413" width="0.0110%" height="15" fill="rgb(206,74,20)" fg:x="3752" fg:w="13"/><text x="3.4372%" y="1423.50"></text></g><g><title>[[heap]] (215 samples, 0.18%)</title><rect x="3.0360%" y="1429" width="0.1826%" height="15" fill="rgb(230,138,44)" fg:x="3574" fg:w="215"/><text x="3.2860%" y="1439.50"></text></g><g><title>AutoFile::write (73 samples, 0.06%)</title><rect x="3.2195%" y="1413" width="0.0620%" height="15" fill="rgb(235,182,43)" fg:x="3790" fg:w="73"/><text x="3.4695%" y="1423.50"></text></g><g><title>CCoinsViewCache::FetchCoin (50 samples, 0.04%)</title><rect x="3.3045%" y="1413" width="0.0425%" height="15" fill="rgb(242,16,51)" fg:x="3890" fg:w="50"/><text x="3.5545%" y="1423.50"></text></g><g><title>CSHA256::Write (196 samples, 0.17%)</title><rect x="3.3767%" y="1413" width="0.1665%" height="15" fill="rgb(248,9,4)" fg:x="3975" fg:w="196"/><text x="3.6267%" y="1423.50"></text></g><g><title>CScript::GetSigOpCount (37 samples, 0.03%)</title><rect x="3.5432%" y="1413" width="0.0314%" height="15" fill="rgb(210,31,22)" fg:x="4171" fg:w="37"/><text x="3.7932%" y="1423.50"></text></g><g><title>CompressAmount (19 samples, 0.02%)</title><rect x="3.6009%" y="1413" width="0.0161%" height="15" fill="rgb(239,54,39)" fg:x="4239" fg:w="19"/><text x="3.8509%" y="1423.50"></text></g><g><title>CompressScript (14 samples, 0.01%)</title><rect x="3.6171%" y="1413" width="0.0119%" height="15" fill="rgb(230,99,41)" fg:x="4258" fg:w="14"/><text x="3.8671%" y="1423.50"></text></g><g><title>GetScriptOp (57 samples, 0.05%)</title><rect x="3.6493%" y="1413" width="0.0484%" height="15" fill="rgb(253,106,12)" fg:x="4296" fg:w="57"/><text x="3.8993%" y="1423.50"></text></g><g><title>SipHashUint256Extra (103 samples, 0.09%)</title><rect x="3.7029%" y="1413" width="0.0875%" height="15" fill="rgb(213,46,41)" fg:x="4359" fg:w="103"/><text x="3.9529%" y="1423.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (217 samples, 0.18%)</title><rect x="3.8073%" y="1413" width="0.1843%" height="15" fill="rgb(215,133,35)" fg:x="4482" fg:w="217"/><text x="4.0573%" y="1423.50"></text></g><g><title>_IO_fwrite (413 samples, 0.35%)</title><rect x="3.9917%" y="1413" width="0.3508%" height="15" fill="rgb(213,28,5)" fg:x="4699" fg:w="413"/><text x="4.2417%" y="1423.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (30 samples, 0.03%)</title><rect x="4.3476%" y="1413" width="0.0255%" height="15" fill="rgb(215,77,49)" fg:x="5118" fg:w="30"/><text x="4.5976%" y="1423.50"></text></g><g><title>__memcmp_evex_movbe (700 samples, 0.59%)</title><rect x="4.3773%" y="1413" width="0.5946%" height="15" fill="rgb(248,100,22)" fg:x="5153" fg:w="700"/><text x="4.6273%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (631 samples, 0.54%)</title><rect x="4.9720%" y="1413" width="0.5360%" height="15" fill="rgb(208,67,9)" fg:x="5853" fg:w="631"/><text x="5.2220%" y="1423.50"></text></g><g><title>__mempcpy@plt (18 samples, 0.02%)</title><rect x="5.5080%" y="1413" width="0.0153%" height="15" fill="rgb(219,133,21)" fg:x="6484" fg:w="18"/><text x="5.7580%" y="1423.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (18 samples, 0.02%)</title><rect x="5.5233%" y="1413" width="0.0153%" height="15" fill="rgb(246,46,29)" fg:x="6502" fg:w="18"/><text x="5.7733%" y="1423.50"></text></g><g><title>_int_free (144 samples, 0.12%)</title><rect x="5.5454%" y="1413" width="0.1223%" height="15" fill="rgb(246,185,52)" fg:x="6528" fg:w="144"/><text x="5.7954%" y="1423.50"></text></g><g><title>_int_malloc (286 samples, 0.24%)</title><rect x="5.6762%" y="1413" width="0.2429%" height="15" fill="rgb(252,136,11)" fg:x="6682" fg:w="286"/><text x="5.9262%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (76 samples, 0.06%)</title><rect x="5.9217%" y="1413" width="0.0646%" height="15" fill="rgb(219,138,53)" fg:x="6971" fg:w="76"/><text x="6.1717%" y="1423.50"></text></g><g><title>free@plt (21 samples, 0.02%)</title><rect x="5.9871%" y="1413" width="0.0178%" height="15" fill="rgb(211,51,23)" fg:x="7048" fg:w="21"/><text x="6.2371%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (150 samples, 0.13%)</title><rect x="6.0160%" y="1413" width="0.1274%" height="15" fill="rgb(247,221,28)" fg:x="7082" fg:w="150"/><text x="6.2660%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (13 samples, 0.01%)</title><rect x="6.1553%" y="1413" width="0.0110%" height="15" fill="rgb(251,222,45)" fg:x="7246" fg:w="13"/><text x="6.4053%" y="1423.50"></text></g><g><title>leveldb::Hash (13 samples, 0.01%)</title><rect x="6.2351%" y="1413" width="0.0110%" height="15" fill="rgb(217,162,53)" fg:x="7340" fg:w="13"/><text x="6.4851%" y="1423.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (437 samples, 0.37%)</title><rect x="6.2496%" y="1413" width="0.3712%" height="15" fill="rgb(229,93,14)" fg:x="7357" fg:w="437"/><text x="6.4996%" y="1423.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (84 samples, 0.07%)</title><rect x="6.6420%" y="1413" width="0.0714%" height="15" fill="rgb(209,67,49)" fg:x="7819" fg:w="84"/><text x="6.8920%" y="1423.50"></text></g><g><title>malloc (211 samples, 0.18%)</title><rect x="6.7525%" y="1413" width="0.1792%" height="15" fill="rgb(213,87,29)" fg:x="7949" fg:w="211"/><text x="7.0025%" y="1423.50"></text></g><g><title>malloc@plt (12 samples, 0.01%)</title><rect x="6.9317%" y="1413" width="0.0102%" height="15" fill="rgb(205,151,52)" fg:x="8160" fg:w="12"/><text x="7.1817%" y="1423.50"></text></g><g><title>malloc_consolidate (26 samples, 0.02%)</title><rect x="6.9419%" y="1413" width="0.0221%" height="15" fill="rgb(253,215,39)" fg:x="8172" fg:w="26"/><text x="7.1919%" y="1423.50"></text></g><g><title>memcmp@plt (48 samples, 0.04%)</title><rect x="6.9648%" y="1413" width="0.0408%" height="15" fill="rgb(221,220,41)" fg:x="8199" fg:w="48"/><text x="7.2148%" y="1423.50"></text></g><g><title>memcpy@plt (64 samples, 0.05%)</title><rect x="7.0056%" y="1413" width="0.0544%" height="15" fill="rgb(218,133,21)" fg:x="8247" fg:w="64"/><text x="7.2556%" y="1423.50"></text></g><g><title>operator delete (33 samples, 0.03%)</title><rect x="7.0702%" y="1413" width="0.0280%" height="15" fill="rgb(221,193,43)" fg:x="8323" fg:w="33"/><text x="7.3202%" y="1423.50"></text></g><g><title>operator new (49 samples, 0.04%)</title><rect x="7.0982%" y="1413" width="0.0416%" height="15" fill="rgb(240,128,52)" fg:x="8356" fg:w="49"/><text x="7.3482%" y="1423.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (23 samples, 0.02%)</title><rect x="7.1407%" y="1413" width="0.0195%" height="15" fill="rgb(253,114,12)" fg:x="8406" fg:w="23"/><text x="7.3907%" y="1423.50"></text></g><g><title>sha256_x86_shani::Transform (18 samples, 0.02%)</title><rect x="7.1696%" y="1413" width="0.0153%" height="15" fill="rgb(215,223,47)" fg:x="8440" fg:w="18"/><text x="7.4196%" y="1423.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (19 samples, 0.02%)</title><rect x="7.1865%" y="1413" width="0.0161%" height="15" fill="rgb(248,225,23)" fg:x="8460" fg:w="19"/><text x="7.4365%" y="1423.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (33 samples, 0.03%)</title><rect x="7.2273%" y="1413" width="0.0280%" height="15" fill="rgb(250,108,0)" fg:x="8508" fg:w="33"/><text x="7.4773%" y="1423.50"></text></g><g><title>unlink_chunk.isra.0 (31 samples, 0.03%)</title><rect x="7.2944%" y="1413" width="0.0263%" height="15" fill="rgb(228,208,7)" fg:x="8587" fg:w="31"/><text x="7.5444%" y="1423.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="7.3242%" y="1413" width="0.0136%" height="15" fill="rgb(244,45,10)" fg:x="8622" fg:w="16"/><text x="7.5742%" y="1423.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (43 samples, 0.04%)</title><rect x="7.3751%" y="1413" width="0.0365%" height="15" fill="rgb(207,125,25)" fg:x="8682" fg:w="43"/><text x="7.6251%" y="1423.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (95 samples, 0.08%)</title><rect x="7.4117%" y="1413" width="0.0807%" height="15" fill="rgb(210,195,18)" fg:x="8725" fg:w="95"/><text x="7.6617%" y="1423.50"></text></g><g><title>[anon] (5,082 samples, 4.32%)</title><rect x="3.2187%" y="1429" width="4.3170%" height="15" fill="rgb(249,80,12)" fg:x="3789" fg:w="5082"/><text x="3.4687%" y="1439.50">[anon]</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (22 samples, 0.02%)</title><rect x="7.5170%" y="1413" width="0.0187%" height="15" fill="rgb(221,65,9)" fg:x="8849" fg:w="22"/><text x="7.7670%" y="1423.50"></text></g><g><title>[bitcoind-base] (23 samples, 0.02%)</title><rect x="7.5357%" y="1429" width="0.0195%" height="15" fill="rgb(235,49,36)" fg:x="8871" fg:w="23"/><text x="7.7857%" y="1439.50"></text></g><g><title>AutoFile::write (53 samples, 0.05%)</title><rect x="7.5824%" y="1413" width="0.0450%" height="15" fill="rgb(225,32,20)" fg:x="8926" fg:w="53"/><text x="7.8324%" y="1423.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (12 samples, 0.01%)</title><rect x="7.6172%" y="1397" width="0.0102%" height="15" fill="rgb(215,141,46)" fg:x="8967" fg:w="12"/><text x="7.8672%" y="1407.50"></text></g><g><title>CCoinsViewCache::FetchCoin (30 samples, 0.03%)</title><rect x="7.6402%" y="1413" width="0.0255%" height="15" fill="rgb(250,160,47)" fg:x="8994" fg:w="30"/><text x="7.8902%" y="1423.50"></text></g><g><title>CSHA256::Write (33 samples, 0.03%)</title><rect x="7.6818%" y="1413" width="0.0280%" height="15" fill="rgb(216,222,40)" fg:x="9043" fg:w="33"/><text x="7.9318%" y="1423.50"></text></g><g><title>DataStream::read (19 samples, 0.02%)</title><rect x="7.7328%" y="1413" width="0.0161%" height="15" fill="rgb(234,217,39)" fg:x="9103" fg:w="19"/><text x="7.9828%" y="1423.50"></text></g><g><title>GetScriptOp (32 samples, 0.03%)</title><rect x="7.7506%" y="1413" width="0.0272%" height="15" fill="rgb(207,178,40)" fg:x="9124" fg:w="32"/><text x="8.0006%" y="1423.50"></text></g><g><title>SipHashUint256Extra (128 samples, 0.11%)</title><rect x="7.7795%" y="1413" width="0.1087%" height="15" fill="rgb(221,136,13)" fg:x="9158" fg:w="128"/><text x="8.0295%" y="1423.50"></text></g><g><title>[unknown] (75 samples, 0.06%)</title><rect x="7.8925%" y="1413" width="0.0637%" height="15" fill="rgb(249,199,10)" fg:x="9291" fg:w="75"/><text x="8.1425%" y="1423.50"></text></g><g><title>[unknown] (45 samples, 0.04%)</title><rect x="7.9179%" y="1397" width="0.0382%" height="15" fill="rgb(249,222,13)" fg:x="9321" fg:w="45"/><text x="8.1679%" y="1407.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="7.9273%" y="1381" width="0.0289%" height="15" fill="rgb(244,185,38)" fg:x="9332" fg:w="34"/><text x="8.1773%" y="1391.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="7.9375%" y="1365" width="0.0187%" height="15" fill="rgb(236,202,9)" fg:x="9344" fg:w="22"/><text x="8.1875%" y="1375.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (361 samples, 0.31%)</title><rect x="7.9638%" y="1413" width="0.3067%" height="15" fill="rgb(250,229,37)" fg:x="9375" fg:w="361"/><text x="8.2138%" y="1423.50"></text></g><g><title>_IO_fwrite (352 samples, 0.30%)</title><rect x="8.2705%" y="1413" width="0.2990%" height="15" fill="rgb(206,174,23)" fg:x="9736" fg:w="352"/><text x="8.5205%" y="1423.50"></text></g><g><title>__memcmp_evex_movbe (50 samples, 0.04%)</title><rect x="8.5797%" y="1413" width="0.0425%" height="15" fill="rgb(211,33,43)" fg:x="10100" fg:w="50"/><text x="8.8297%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (209 samples, 0.18%)</title><rect x="8.6222%" y="1413" width="0.1775%" height="15" fill="rgb(245,58,50)" fg:x="10150" fg:w="209"/><text x="8.8722%" y="1423.50"></text></g><g><title>__mempcpy@plt (14 samples, 0.01%)</title><rect x="8.7997%" y="1413" width="0.0119%" height="15" fill="rgb(244,68,36)" fg:x="10359" fg:w="14"/><text x="9.0497%" y="1423.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (16 samples, 0.01%)</title><rect x="8.8116%" y="1413" width="0.0136%" height="15" fill="rgb(232,229,15)" fg:x="10373" fg:w="16"/><text x="9.0616%" y="1423.50"></text></g><g><title>_int_free (60 samples, 0.05%)</title><rect x="8.8388%" y="1413" width="0.0510%" height="15" fill="rgb(254,30,23)" fg:x="10405" fg:w="60"/><text x="9.0888%" y="1423.50"></text></g><g><title>_int_free_create_chunk (15 samples, 0.01%)</title><rect x="8.8897%" y="1413" width="0.0127%" height="15" fill="rgb(235,160,14)" fg:x="10465" fg:w="15"/><text x="9.1397%" y="1423.50"></text></g><g><title>_int_malloc (345 samples, 0.29%)</title><rect x="8.9042%" y="1413" width="0.2931%" height="15" fill="rgb(212,155,44)" fg:x="10482" fg:w="345"/><text x="9.1542%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (50 samples, 0.04%)</title><rect x="9.1989%" y="1413" width="0.0425%" height="15" fill="rgb(226,2,50)" fg:x="10829" fg:w="50"/><text x="9.4489%" y="1423.50"></text></g><g><title>free@plt (12 samples, 0.01%)</title><rect x="9.2423%" y="1413" width="0.0102%" height="15" fill="rgb(234,177,6)" fg:x="10880" fg:w="12"/><text x="9.4923%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (44 samples, 0.04%)</title><rect x="9.2601%" y="1413" width="0.0374%" height="15" fill="rgb(217,24,9)" fg:x="10901" fg:w="44"/><text x="9.5101%" y="1423.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (70 samples, 0.06%)</title><rect x="9.3238%" y="1413" width="0.0595%" height="15" fill="rgb(220,13,46)" fg:x="10976" fg:w="70"/><text x="9.5738%" y="1423.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (23 samples, 0.02%)</title><rect x="9.3875%" y="1413" width="0.0195%" height="15" fill="rgb(239,221,27)" fg:x="11051" fg:w="23"/><text x="9.6375%" y="1423.50"></text></g><g><title>malloc (261 samples, 0.22%)</title><rect x="9.4258%" y="1413" width="0.2217%" height="15" fill="rgb(222,198,25)" fg:x="11096" fg:w="261"/><text x="9.6758%" y="1423.50"></text></g><g><title>memcmp@plt (12 samples, 0.01%)</title><rect x="9.6594%" y="1413" width="0.0102%" height="15" fill="rgb(211,99,13)" fg:x="11371" fg:w="12"/><text x="9.9094%" y="1423.50"></text></g><g><title>memcpy@plt (15 samples, 0.01%)</title><rect x="9.6696%" y="1413" width="0.0127%" height="15" fill="rgb(232,111,31)" fg:x="11383" fg:w="15"/><text x="9.9196%" y="1423.50"></text></g><g><title>operator delete (12 samples, 0.01%)</title><rect x="9.6874%" y="1413" width="0.0102%" height="15" fill="rgb(245,82,37)" fg:x="11404" fg:w="12"/><text x="9.9374%" y="1423.50"></text></g><g><title>operator new (38 samples, 0.03%)</title><rect x="9.6984%" y="1413" width="0.0323%" height="15" fill="rgb(227,149,46)" fg:x="11417" fg:w="38"/><text x="9.9484%" y="1423.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (14 samples, 0.01%)</title><rect x="9.7808%" y="1413" width="0.0119%" height="15" fill="rgb(218,36,50)" fg:x="11514" fg:w="14"/><text x="10.0308%" y="1423.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="9.8021%" y="1413" width="0.0187%" height="15" fill="rgb(226,80,48)" fg:x="11539" fg:w="22"/><text x="10.0521%" y="1423.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (109 samples, 0.09%)</title><rect x="9.8547%" y="1413" width="0.0926%" height="15" fill="rgb(238,224,15)" fg:x="11601" fg:w="109"/><text x="10.1047%" y="1423.50"></text></g><g><title>[unknown] (2,828 samples, 2.40%)</title><rect x="7.5552%" y="1429" width="2.4023%" height="15" fill="rgb(241,136,10)" fg:x="8894" fg:w="2828"/><text x="7.8052%" y="1439.50">[u..</text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (138 samples, 0.12%)</title><rect x="9.9575%" y="1429" width="0.1172%" height="15" fill="rgb(208,32,45)" fg:x="11722" fg:w="138"/><text x="10.2075%" y="1439.50"></text></g><g><title>_IO_fwrite (39 samples, 0.03%)</title><rect x="10.0748%" y="1429" width="0.0331%" height="15" fill="rgb(207,135,9)" fg:x="11860" fg:w="39"/><text x="10.3248%" y="1439.50"></text></g><g><title>SipHashUint256Extra (21 samples, 0.02%)</title><rect x="10.1690%" y="1125" width="0.0178%" height="15" fill="rgb(206,86,44)" fg:x="11971" fg:w="21"/><text x="10.4190%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (17 samples, 0.01%)</title><rect x="10.1886%" y="1125" width="0.0144%" height="15" fill="rgb(245,177,15)" fg:x="11994" fg:w="17"/><text x="10.4386%" y="1135.50"></text></g><g><title>SipHashUint256Extra (264 samples, 0.22%)</title><rect x="10.2047%" y="1109" width="0.2243%" height="15" fill="rgb(206,64,50)" fg:x="12013" fg:w="264"/><text x="10.4547%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (126 samples, 0.11%)</title><rect x="10.3220%" y="1093" width="0.1070%" height="15" fill="rgb(234,36,40)" fg:x="12151" fg:w="126"/><text x="10.5720%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (126 samples, 0.11%)</title><rect x="10.3220%" y="1077" width="0.1070%" height="15" fill="rgb(213,64,8)" fg:x="12151" fg:w="126"/><text x="10.5720%" y="1087.50"></text></g><g><title>SipHashUint256Extra (1,131 samples, 0.96%)</title><rect x="10.4494%" y="1029" width="0.9608%" height="15" fill="rgb(210,75,36)" fg:x="12301" fg:w="1131"/><text x="10.6994%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (453 samples, 0.38%)</title><rect x="11.0253%" y="1013" width="0.3848%" height="15" fill="rgb(229,88,21)" fg:x="12979" fg:w="453"/><text x="11.2753%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (453 samples, 0.38%)</title><rect x="11.0253%" y="997" width="0.3848%" height="15" fill="rgb(252,204,47)" fg:x="12979" fg:w="453"/><text x="11.2753%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (58 samples, 0.05%)</title><rect x="11.4467%" y="1013" width="0.0493%" height="15" fill="rgb(208,77,27)" fg:x="13475" fg:w="58"/><text x="11.6967%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (57 samples, 0.05%)</title><rect x="11.4475%" y="997" width="0.0484%" height="15" fill="rgb(221,76,26)" fg:x="13476" fg:w="57"/><text x="11.6975%" y="1007.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (57 samples, 0.05%)</title><rect x="11.4475%" y="981" width="0.0484%" height="15" fill="rgb(225,139,18)" fg:x="13476" fg:w="57"/><text x="11.6975%" y="991.50"></text></g><g><title>SaltedOutpointHasher::operator (57 samples, 0.05%)</title><rect x="11.4475%" y="965" width="0.0484%" height="15" fill="rgb(230,137,11)" fg:x="13476" fg:w="57"/><text x="11.6975%" y="975.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (13 samples, 0.01%)</title><rect x="11.4849%" y="949" width="0.0110%" height="15" fill="rgb(212,28,1)" fg:x="13520" fg:w="13"/><text x="11.7349%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (103 samples, 0.09%)</title><rect x="11.4101%" y="1029" width="0.0875%" height="15" fill="rgb(248,164,17)" fg:x="13432" fg:w="103"/><text x="11.6601%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,264 samples, 1.07%)</title><rect x="10.4290%" y="1109" width="1.0737%" height="15" fill="rgb(222,171,42)" fg:x="12277" fg:w="1264"/><text x="10.6790%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,247 samples, 1.06%)</title><rect x="10.4434%" y="1093" width="1.0593%" height="15" fill="rgb(243,84,45)" fg:x="12294" fg:w="1247"/><text x="10.6934%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,247 samples, 1.06%)</title><rect x="10.4434%" y="1077" width="1.0593%" height="15" fill="rgb(252,49,23)" fg:x="12294" fg:w="1247"/><text x="10.6934%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1,247 samples, 1.06%)</title><rect x="10.4434%" y="1061" width="1.0593%" height="15" fill="rgb(215,19,7)" fg:x="12294" fg:w="1247"/><text x="10.6934%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (1,247 samples, 1.06%)</title><rect x="10.4434%" y="1045" width="1.0593%" height="15" fill="rgb(238,81,41)" fg:x="12294" fg:w="1247"/><text x="10.6934%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,531 samples, 1.30%)</title><rect x="10.2030%" y="1125" width="1.3005%" height="15" fill="rgb(210,199,37)" fg:x="12011" fg:w="1531"/><text x="10.4530%" y="1135.50"></text></g><g><title>SipHashUint256Extra (822 samples, 0.70%)</title><rect x="11.5036%" y="1109" width="0.6983%" height="15" fill="rgb(244,192,49)" fg:x="13542" fg:w="822"/><text x="11.7536%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (422 samples, 0.36%)</title><rect x="11.8434%" y="1093" width="0.3585%" height="15" fill="rgb(226,211,11)" fg:x="13942" fg:w="422"/><text x="12.0934%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (422 samples, 0.36%)</title><rect x="11.8434%" y="1077" width="0.3585%" height="15" fill="rgb(236,162,54)" fg:x="13942" fg:w="422"/><text x="12.0934%" y="1087.50"></text></g><g><title>SipHashUint256Extra (156 samples, 0.13%)</title><rect x="12.2035%" y="1029" width="0.1325%" height="15" fill="rgb(220,229,9)" fg:x="14366" fg:w="156"/><text x="12.4535%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (53 samples, 0.05%)</title><rect x="12.2910%" y="1013" width="0.0450%" height="15" fill="rgb(250,87,22)" fg:x="14469" fg:w="53"/><text x="12.5410%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (53 samples, 0.05%)</title><rect x="12.2910%" y="997" width="0.0450%" height="15" fill="rgb(239,43,17)" fg:x="14469" fg:w="53"/><text x="12.5410%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (281 samples, 0.24%)</title><rect x="12.3369%" y="1029" width="0.2387%" height="15" fill="rgb(231,177,25)" fg:x="14523" fg:w="281"/><text x="12.5869%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (441 samples, 0.37%)</title><rect x="12.2018%" y="1109" width="0.3746%" height="15" fill="rgb(219,179,1)" fg:x="14364" fg:w="441"/><text x="12.4518%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (441 samples, 0.37%)</title><rect x="12.2018%" y="1093" width="0.3746%" height="15" fill="rgb(238,219,53)" fg:x="14364" fg:w="441"/><text x="12.4518%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (441 samples, 0.37%)</title><rect x="12.2018%" y="1077" width="0.3746%" height="15" fill="rgb(232,167,36)" fg:x="14364" fg:w="441"/><text x="12.4518%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (441 samples, 0.37%)</title><rect x="12.2018%" y="1061" width="0.3746%" height="15" fill="rgb(244,19,51)" fg:x="14364" fg:w="441"/><text x="12.4518%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (441 samples, 0.37%)</title><rect x="12.2018%" y="1045" width="0.3746%" height="15" fill="rgb(224,6,22)" fg:x="14364" fg:w="441"/><text x="12.4518%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (21 samples, 0.02%)</title><rect x="12.6376%" y="1077" width="0.0178%" height="15" fill="rgb(224,145,5)" fg:x="14877" fg:w="21"/><text x="12.8876%" y="1087.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (21 samples, 0.02%)</title><rect x="12.6376%" y="1061" width="0.0178%" height="15" fill="rgb(234,130,49)" fg:x="14877" fg:w="21"/><text x="12.8876%" y="1071.50"></text></g><g><title>__memset_avx512_unaligned_erms (21 samples, 0.02%)</title><rect x="12.6376%" y="1045" width="0.0178%" height="15" fill="rgb(254,6,2)" fg:x="14877" fg:w="21"/><text x="12.8876%" y="1055.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="12.6419%" y="1029" width="0.0136%" height="15" fill="rgb(208,96,46)" fg:x="14882" fg:w="16"/><text x="12.8919%" y="1039.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="12.6419%" y="1013" width="0.0136%" height="15" fill="rgb(239,3,39)" fg:x="14882" fg:w="16"/><text x="12.8919%" y="1023.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="12.6419%" y="997" width="0.0136%" height="15" fill="rgb(233,210,1)" fg:x="14882" fg:w="16"/><text x="12.8919%" y="1007.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="12.6419%" y="981" width="0.0136%" height="15" fill="rgb(244,137,37)" fg:x="14882" fg:w="16"/><text x="12.8919%" y="991.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="12.6419%" y="965" width="0.0136%" height="15" fill="rgb(240,136,2)" fg:x="14882" fg:w="16"/><text x="12.8919%" y="975.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="12.6436%" y="949" width="0.0119%" height="15" fill="rgb(239,18,37)" fg:x="14884" fg:w="14"/><text x="12.8936%" y="959.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="12.6436%" y="933" width="0.0119%" height="15" fill="rgb(218,185,22)" fg:x="14884" fg:w="14"/><text x="12.8936%" y="943.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="12.6453%" y="917" width="0.0102%" height="15" fill="rgb(225,218,4)" fg:x="14886" fg:w="12"/><text x="12.8953%" y="927.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (14 samples, 0.01%)</title><rect x="12.6555%" y="1061" width="0.0119%" height="15" fill="rgb(230,182,32)" fg:x="14898" fg:w="14"/><text x="12.9055%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (14 samples, 0.01%)</title><rect x="12.6555%" y="1045" width="0.0119%" height="15" fill="rgb(242,56,43)" fg:x="14898" fg:w="14"/><text x="12.9055%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (15 samples, 0.01%)</title><rect x="12.6555%" y="1077" width="0.0127%" height="15" fill="rgb(233,99,24)" fg:x="14898" fg:w="15"/><text x="12.9055%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (109 samples, 0.09%)</title><rect x="12.5765%" y="1109" width="0.0926%" height="15" fill="rgb(234,209,42)" fg:x="14805" fg:w="109"/><text x="12.8265%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (109 samples, 0.09%)</title><rect x="12.5765%" y="1093" width="0.0926%" height="15" fill="rgb(227,7,12)" fg:x="14805" fg:w="109"/><text x="12.8265%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1,373 samples, 1.17%)</title><rect x="11.5036%" y="1125" width="1.1663%" height="15" fill="rgb(245,203,43)" fg:x="13542" fg:w="1373"/><text x="11.7536%" y="1135.50"></text></g><g><title>SipHashUint256Extra (22 samples, 0.02%)</title><rect x="12.6724%" y="1109" width="0.0187%" height="15" fill="rgb(238,205,33)" fg:x="14918" fg:w="22"/><text x="12.9224%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.02%)</title><rect x="12.6911%" y="1109" width="0.0187%" height="15" fill="rgb(231,56,7)" fg:x="14940" fg:w="22"/><text x="12.9411%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (104 samples, 0.09%)</title><rect x="12.7141%" y="1029" width="0.0883%" height="15" fill="rgb(244,186,29)" fg:x="14967" fg:w="104"/><text x="12.9641%" y="1039.50"></text></g><g><title>operator new (104 samples, 0.09%)</title><rect x="12.7141%" y="1013" width="0.0883%" height="15" fill="rgb(234,111,31)" fg:x="14967" fg:w="104"/><text x="12.9641%" y="1023.50"></text></g><g><title>__posix_memalign (104 samples, 0.09%)</title><rect x="12.7141%" y="997" width="0.0883%" height="15" fill="rgb(241,149,10)" fg:x="14967" fg:w="104"/><text x="12.9641%" y="1007.50"></text></g><g><title>malloc (104 samples, 0.09%)</title><rect x="12.7141%" y="981" width="0.0883%" height="15" fill="rgb(249,206,44)" fg:x="14967" fg:w="104"/><text x="12.9641%" y="991.50"></text></g><g><title>_int_malloc (104 samples, 0.09%)</title><rect x="12.7141%" y="965" width="0.0883%" height="15" fill="rgb(251,153,30)" fg:x="14967" fg:w="104"/><text x="12.9641%" y="975.50"></text></g><g><title>malloc_consolidate (20 samples, 0.02%)</title><rect x="12.7854%" y="949" width="0.0170%" height="15" fill="rgb(239,152,38)" fg:x="15051" fg:w="20"/><text x="13.0354%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (158 samples, 0.13%)</title><rect x="12.6699%" y="1125" width="0.1342%" height="15" fill="rgb(249,139,47)" fg:x="14915" fg:w="158"/><text x="12.9199%" y="1135.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (109 samples, 0.09%)</title><rect x="12.7115%" y="1109" width="0.0926%" height="15" fill="rgb(244,64,35)" fg:x="14964" fg:w="109"/><text x="12.9615%" y="1119.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (106 samples, 0.09%)</title><rect x="12.7141%" y="1093" width="0.0900%" height="15" fill="rgb(216,46,15)" fg:x="14967" fg:w="106"/><text x="12.9641%" y="1103.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (106 samples, 0.09%)</title><rect x="12.7141%" y="1077" width="0.0900%" height="15" fill="rgb(250,74,19)" fg:x="14967" fg:w="106"/><text x="12.9641%" y="1087.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (106 samples, 0.09%)</title><rect x="12.7141%" y="1061" width="0.0900%" height="15" fill="rgb(249,42,33)" fg:x="14967" fg:w="106"/><text x="12.9641%" y="1071.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (106 samples, 0.09%)</title><rect x="12.7141%" y="1045" width="0.0900%" height="15" fill="rgb(242,149,17)" fg:x="14967" fg:w="106"/><text x="12.9641%" y="1055.50"></text></g><g><title>SipHashUint256Extra (13 samples, 0.01%)</title><rect x="12.8092%" y="1093" width="0.0110%" height="15" fill="rgb(244,29,21)" fg:x="15079" fg:w="13"/><text x="13.0592%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (22 samples, 0.02%)</title><rect x="12.8067%" y="1125" width="0.0187%" height="15" fill="rgb(220,130,37)" fg:x="15076" fg:w="22"/><text x="13.0567%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (22 samples, 0.02%)</title><rect x="12.8067%" y="1109" width="0.0187%" height="15" fill="rgb(211,67,2)" fg:x="15076" fg:w="22"/><text x="13.0567%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (3,131 samples, 2.66%)</title><rect x="10.1673%" y="1157" width="2.6597%" height="15" fill="rgb(235,68,52)" fg:x="11969" fg:w="3131"/><text x="10.4173%" y="1167.50">st..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (3,131 samples, 2.66%)</title><rect x="10.1673%" y="1141" width="2.6597%" height="15" fill="rgb(246,142,3)" fg:x="11969" fg:w="3131"/><text x="10.4173%" y="1151.50">st..</text></g><g><title>Coin::DynamicMemoryUsage (12 samples, 0.01%)</title><rect x="12.8568%" y="1109" width="0.0102%" height="15" fill="rgb(241,25,7)" fg:x="15135" fg:w="12"/><text x="13.1068%" y="1119.50"></text></g><g><title>CCoinsViewCache::BatchWrite (55 samples, 0.05%)</title><rect x="12.8270%" y="1125" width="0.0467%" height="15" fill="rgb(242,119,39)" fg:x="15100" fg:w="55"/><text x="13.0770%" y="1135.50"></text></g><g><title>SipHashUint256Extra (851 samples, 0.72%)</title><rect x="12.8738%" y="1125" width="0.7229%" height="15" fill="rgb(241,98,45)" fg:x="15155" fg:w="851"/><text x="13.1238%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (447 samples, 0.38%)</title><rect x="13.2170%" y="1109" width="0.3797%" height="15" fill="rgb(254,28,30)" fg:x="15559" fg:w="447"/><text x="13.4670%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (447 samples, 0.38%)</title><rect x="13.2170%" y="1093" width="0.3797%" height="15" fill="rgb(241,142,54)" fg:x="15559" fg:w="447"/><text x="13.4670%" y="1103.50"></text></g><g><title>SipHashUint256Extra (16 samples, 0.01%)</title><rect x="13.6009%" y="1045" width="0.0136%" height="15" fill="rgb(222,85,15)" fg:x="16011" fg:w="16"/><text x="13.8509%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20 samples, 0.02%)</title><rect x="13.6154%" y="1045" width="0.0170%" height="15" fill="rgb(210,85,47)" fg:x="16028" fg:w="20"/><text x="13.8654%" y="1055.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (17 samples, 0.01%)</title><rect x="13.6179%" y="1029" width="0.0144%" height="15" fill="rgb(224,206,25)" fg:x="16031" fg:w="17"/><text x="13.8679%" y="1039.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (17 samples, 0.01%)</title><rect x="13.6179%" y="1013" width="0.0144%" height="15" fill="rgb(243,201,19)" fg:x="16031" fg:w="17"/><text x="13.8679%" y="1023.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (17 samples, 0.01%)</title><rect x="13.6179%" y="997" width="0.0144%" height="15" fill="rgb(236,59,4)" fg:x="16031" fg:w="17"/><text x="13.8679%" y="1007.50"></text></g><g><title>operator== (17 samples, 0.01%)</title><rect x="13.6179%" y="981" width="0.0144%" height="15" fill="rgb(254,179,45)" fg:x="16031" fg:w="17"/><text x="13.8679%" y="991.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (17 samples, 0.01%)</title><rect x="13.6179%" y="965" width="0.0144%" height="15" fill="rgb(226,14,10)" fg:x="16031" fg:w="17"/><text x="13.8679%" y="975.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (17 samples, 0.01%)</title><rect x="13.6179%" y="949" width="0.0144%" height="15" fill="rgb(244,27,41)" fg:x="16031" fg:w="17"/><text x="13.8679%" y="959.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (17 samples, 0.01%)</title><rect x="13.6179%" y="933" width="0.0144%" height="15" fill="rgb(235,35,32)" fg:x="16031" fg:w="17"/><text x="13.8679%" y="943.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (50 samples, 0.04%)</title><rect x="13.5984%" y="1077" width="0.0425%" height="15" fill="rgb(218,68,31)" fg:x="16008" fg:w="50"/><text x="13.8484%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (50 samples, 0.04%)</title><rect x="13.5984%" y="1061" width="0.0425%" height="15" fill="rgb(207,120,37)" fg:x="16008" fg:w="50"/><text x="13.8484%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (51 samples, 0.04%)</title><rect x="13.5984%" y="1109" width="0.0433%" height="15" fill="rgb(227,98,0)" fg:x="16008" fg:w="51"/><text x="13.8484%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (51 samples, 0.04%)</title><rect x="13.5984%" y="1093" width="0.0433%" height="15" fill="rgb(207,7,3)" fg:x="16008" fg:w="51"/><text x="13.8484%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (56 samples, 0.05%)</title><rect x="13.5967%" y="1125" width="0.0476%" height="15" fill="rgb(206,98,19)" fg:x="16006" fg:w="56"/><text x="13.8467%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (90 samples, 0.08%)</title><rect x="13.6442%" y="1125" width="0.0765%" height="15" fill="rgb(217,5,26)" fg:x="16062" fg:w="90"/><text x="13.8942%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (57 samples, 0.05%)</title><rect x="13.6723%" y="1109" width="0.0484%" height="15" fill="rgb(235,190,38)" fg:x="16095" fg:w="57"/><text x="13.9223%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (57 samples, 0.05%)</title><rect x="13.6723%" y="1093" width="0.0484%" height="15" fill="rgb(247,86,24)" fg:x="16095" fg:w="57"/><text x="13.9223%" y="1103.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (57 samples, 0.05%)</title><rect x="13.6723%" y="1077" width="0.0484%" height="15" fill="rgb(205,101,16)" fg:x="16095" fg:w="57"/><text x="13.9223%" y="1087.50"></text></g><g><title>operator== (57 samples, 0.05%)</title><rect x="13.6723%" y="1061" width="0.0484%" height="15" fill="rgb(246,168,33)" fg:x="16095" fg:w="57"/><text x="13.9223%" y="1071.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (57 samples, 0.05%)</title><rect x="13.6723%" y="1045" width="0.0484%" height="15" fill="rgb(231,114,1)" fg:x="16095" fg:w="57"/><text x="13.9223%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (57 samples, 0.05%)</title><rect x="13.6723%" y="1029" width="0.0484%" height="15" fill="rgb(207,184,53)" fg:x="16095" fg:w="57"/><text x="13.9223%" y="1039.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (57 samples, 0.05%)</title><rect x="13.6723%" y="1013" width="0.0484%" height="15" fill="rgb(224,95,51)" fg:x="16095" fg:w="57"/><text x="13.9223%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (21 samples, 0.02%)</title><rect x="13.7266%" y="1109" width="0.0178%" height="15" fill="rgb(212,188,45)" fg:x="16159" fg:w="21"/><text x="13.9766%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (21 samples, 0.02%)</title><rect x="13.7266%" y="1093" width="0.0178%" height="15" fill="rgb(223,154,38)" fg:x="16159" fg:w="21"/><text x="13.9766%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (21 samples, 0.02%)</title><rect x="13.7266%" y="1077" width="0.0178%" height="15" fill="rgb(251,22,52)" fg:x="16159" fg:w="21"/><text x="13.9766%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (21 samples, 0.02%)</title><rect x="13.7266%" y="1061" width="0.0178%" height="15" fill="rgb(229,209,22)" fg:x="16159" fg:w="21"/><text x="13.9766%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (12 samples, 0.01%)</title><rect x="13.7343%" y="1045" width="0.0102%" height="15" fill="rgb(234,138,34)" fg:x="16168" fg:w="12"/><text x="13.9843%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (29 samples, 0.02%)</title><rect x="13.7207%" y="1125" width="0.0246%" height="15" fill="rgb(212,95,11)" fg:x="16152" fg:w="29"/><text x="13.9707%" y="1135.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (1,084 samples, 0.92%)</title><rect x="12.8270%" y="1157" width="0.9208%" height="15" fill="rgb(240,179,47)" fg:x="15100" fg:w="1084"/><text x="13.0770%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1,084 samples, 0.92%)</title><rect x="12.8270%" y="1141" width="0.9208%" height="15" fill="rgb(240,163,11)" fg:x="15100" fg:w="1084"/><text x="13.0770%" y="1151.50"></text></g><g><title>SipHashUint256Extra (62 samples, 0.05%)</title><rect x="13.7530%" y="1141" width="0.0527%" height="15" fill="rgb(236,37,12)" fg:x="16190" fg:w="62"/><text x="14.0030%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (30 samples, 0.03%)</title><rect x="13.7802%" y="1125" width="0.0255%" height="15" fill="rgb(232,164,16)" fg:x="16222" fg:w="30"/><text x="14.0302%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (30 samples, 0.03%)</title><rect x="13.7802%" y="1109" width="0.0255%" height="15" fill="rgb(244,205,15)" fg:x="16222" fg:w="30"/><text x="14.0302%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (14 samples, 0.01%)</title><rect x="13.8320%" y="1077" width="0.0119%" height="15" fill="rgb(223,117,47)" fg:x="16283" fg:w="14"/><text x="14.0820%" y="1087.50"></text></g><g><title>Coin::operator= (21 samples, 0.02%)</title><rect x="13.8490%" y="1077" width="0.0178%" height="15" fill="rgb(244,107,35)" fg:x="16303" fg:w="21"/><text x="14.0990%" y="1087.50"></text></g><g><title>CTxOut::operator= (14 samples, 0.01%)</title><rect x="13.8549%" y="1061" width="0.0119%" height="15" fill="rgb(205,140,8)" fg:x="16310" fg:w="14"/><text x="14.1049%" y="1071.50"></text></g><g><title>CCoinsViewCache::BatchWrite (87 samples, 0.07%)</title><rect x="13.8158%" y="1093" width="0.0739%" height="15" fill="rgb(228,84,46)" fg:x="16264" fg:w="87"/><text x="14.0658%" y="1103.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (16 samples, 0.01%)</title><rect x="14.7001%" y="1077" width="0.0136%" height="15" fill="rgb(254,188,9)" fg:x="17305" fg:w="16"/><text x="14.9501%" y="1087.50"></text></g><g><title>ReadLE64 (16 samples, 0.01%)</title><rect x="14.7001%" y="1061" width="0.0136%" height="15" fill="rgb(206,112,54)" fg:x="17305" fg:w="16"/><text x="14.9501%" y="1071.50"></text></g><g><title>SipHashUint256Extra (16 samples, 0.01%)</title><rect x="14.7001%" y="1045" width="0.0136%" height="15" fill="rgb(216,84,49)" fg:x="17305" fg:w="16"/><text x="14.9501%" y="1055.50"></text></g><g><title>SipHashUint256Extra (1,585 samples, 1.35%)</title><rect x="13.8897%" y="1093" width="1.3464%" height="15" fill="rgb(214,194,35)" fg:x="16351" fg:w="1585"/><text x="14.1397%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (615 samples, 0.52%)</title><rect x="14.7137%" y="1077" width="0.5224%" height="15" fill="rgb(249,28,3)" fg:x="17321" fg:w="615"/><text x="14.9637%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (615 samples, 0.52%)</title><rect x="14.7137%" y="1061" width="0.5224%" height="15" fill="rgb(222,56,52)" fg:x="17321" fg:w="615"/><text x="14.9637%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (20 samples, 0.02%)</title><rect x="15.2362%" y="1093" width="0.0170%" height="15" fill="rgb(245,217,50)" fg:x="17936" fg:w="20"/><text x="15.4862%" y="1103.50"></text></g><g><title>[[igc]] (22 samples, 0.02%)</title><rect x="15.3848%" y="981" width="0.0187%" height="15" fill="rgb(213,201,24)" fg:x="18111" fg:w="22"/><text x="15.6348%" y="991.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="15.3899%" y="965" width="0.0136%" height="15" fill="rgb(248,116,28)" fg:x="18117" fg:w="16"/><text x="15.6399%" y="975.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="15.3925%" y="949" width="0.0110%" height="15" fill="rgb(219,72,43)" fg:x="18120" fg:w="13"/><text x="15.6425%" y="959.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="15.3789%" y="1077" width="0.0272%" height="15" fill="rgb(209,138,14)" fg:x="18104" fg:w="32"/><text x="15.6289%" y="1087.50"></text></g><g><title>[unknown] (30 samples, 0.03%)</title><rect x="15.3806%" y="1061" width="0.0255%" height="15" fill="rgb(222,18,33)" fg:x="18106" fg:w="30"/><text x="15.6306%" y="1071.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="15.3814%" y="1045" width="0.0246%" height="15" fill="rgb(213,199,7)" fg:x="18107" fg:w="29"/><text x="15.6314%" y="1055.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="15.3831%" y="1029" width="0.0229%" height="15" fill="rgb(250,110,10)" fg:x="18109" fg:w="27"/><text x="15.6331%" y="1039.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="15.3840%" y="1013" width="0.0221%" height="15" fill="rgb(248,123,6)" fg:x="18110" fg:w="26"/><text x="15.6340%" y="1023.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="15.3848%" y="997" width="0.0212%" height="15" fill="rgb(206,91,31)" fg:x="18111" fg:w="25"/><text x="15.6348%" y="1007.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="15.4324%" y="1013" width="0.0110%" height="15" fill="rgb(211,154,13)" fg:x="18167" fg:w="13"/><text x="15.6824%" y="1023.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="15.4324%" y="997" width="0.0110%" height="15" fill="rgb(225,148,7)" fg:x="18167" fg:w="13"/><text x="15.6824%" y="1007.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="15.4332%" y="981" width="0.0102%" height="15" fill="rgb(220,160,43)" fg:x="18168" fg:w="12"/><text x="15.6832%" y="991.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="15.4332%" y="965" width="0.0102%" height="15" fill="rgb(213,52,39)" fg:x="18168" fg:w="12"/><text x="15.6832%" y="975.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="15.4332%" y="949" width="0.0102%" height="15" fill="rgb(243,137,7)" fg:x="18168" fg:w="12"/><text x="15.6832%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (19 samples, 0.02%)</title><rect x="15.4434%" y="1013" width="0.0161%" height="15" fill="rgb(230,79,13)" fg:x="18180" fg:w="19"/><text x="15.6934%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (76 samples, 0.06%)</title><rect x="15.4060%" y="1045" width="0.0646%" height="15" fill="rgb(247,105,23)" fg:x="18136" fg:w="76"/><text x="15.6560%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (76 samples, 0.06%)</title><rect x="15.4060%" y="1029" width="0.0646%" height="15" fill="rgb(223,179,41)" fg:x="18136" fg:w="76"/><text x="15.6560%" y="1039.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (12 samples, 0.01%)</title><rect x="15.4604%" y="1013" width="0.0102%" height="15" fill="rgb(218,9,34)" fg:x="18200" fg:w="12"/><text x="15.7104%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (77 samples, 0.07%)</title><rect x="15.4060%" y="1077" width="0.0654%" height="15" fill="rgb(222,106,8)" fg:x="18136" fg:w="77"/><text x="15.6560%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (77 samples, 0.07%)</title><rect x="15.4060%" y="1061" width="0.0654%" height="15" fill="rgb(211,220,0)" fg:x="18136" fg:w="77"/><text x="15.6560%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (271 samples, 0.23%)</title><rect x="15.2531%" y="1093" width="0.2302%" height="15" fill="rgb(229,52,16)" fg:x="17956" fg:w="271"/><text x="15.5031%" y="1103.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (14 samples, 0.01%)</title><rect x="15.4715%" y="1077" width="0.0119%" height="15" fill="rgb(212,155,18)" fg:x="18213" fg:w="14"/><text x="15.7215%" y="1087.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (14 samples, 0.01%)</title><rect x="15.4715%" y="1061" width="0.0119%" height="15" fill="rgb(242,21,14)" fg:x="18213" fg:w="14"/><text x="15.7215%" y="1071.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (14 samples, 0.01%)</title><rect x="15.4715%" y="1045" width="0.0119%" height="15" fill="rgb(222,19,48)" fg:x="18213" fg:w="14"/><text x="15.7215%" y="1055.50"></text></g><g><title>operator== (14 samples, 0.01%)</title><rect x="15.4715%" y="1029" width="0.0119%" height="15" fill="rgb(232,45,27)" fg:x="18213" fg:w="14"/><text x="15.7215%" y="1039.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (14 samples, 0.01%)</title><rect x="15.4715%" y="1013" width="0.0119%" height="15" fill="rgb(249,103,42)" fg:x="18213" fg:w="14"/><text x="15.7215%" y="1023.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (14 samples, 0.01%)</title><rect x="15.4715%" y="997" width="0.0119%" height="15" fill="rgb(246,81,33)" fg:x="18213" fg:w="14"/><text x="15.7215%" y="1007.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (14 samples, 0.01%)</title><rect x="15.4715%" y="981" width="0.0119%" height="15" fill="rgb(252,33,42)" fg:x="18213" fg:w="14"/><text x="15.7215%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (55 samples, 0.05%)</title><rect x="15.4834%" y="1093" width="0.0467%" height="15" fill="rgb(209,212,41)" fg:x="18227" fg:w="55"/><text x="15.7334%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (37 samples, 0.03%)</title><rect x="15.4986%" y="1077" width="0.0314%" height="15" fill="rgb(207,154,6)" fg:x="18245" fg:w="37"/><text x="15.7486%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (29 samples, 0.02%)</title><rect x="15.5054%" y="1061" width="0.0246%" height="15" fill="rgb(223,64,47)" fg:x="18253" fg:w="29"/><text x="15.7554%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (29 samples, 0.02%)</title><rect x="15.5054%" y="1045" width="0.0246%" height="15" fill="rgb(211,161,38)" fg:x="18253" fg:w="29"/><text x="15.7554%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,024 samples, 1.72%)</title><rect x="13.8158%" y="1109" width="1.7193%" height="15" fill="rgb(219,138,40)" fg:x="16264" fg:w="2024"/><text x="14.0658%" y="1119.50"></text></g><g><title>SipHashUint256Extra (77 samples, 0.07%)</title><rect x="15.5411%" y="1077" width="0.0654%" height="15" fill="rgb(241,228,46)" fg:x="18295" fg:w="77"/><text x="15.7911%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (34 samples, 0.03%)</title><rect x="15.5776%" y="1061" width="0.0289%" height="15" fill="rgb(223,209,38)" fg:x="18338" fg:w="34"/><text x="15.8276%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (34 samples, 0.03%)</title><rect x="15.5776%" y="1045" width="0.0289%" height="15" fill="rgb(236,164,45)" fg:x="18338" fg:w="34"/><text x="15.8276%" y="1055.50"></text></g><g><title>CCoinsViewCache::BatchWrite (6,432 samples, 5.46%)</title><rect x="10.1555%" y="1173" width="5.4638%" height="15" fill="rgb(231,15,5)" fg:x="11955" fg:w="6432"/><text x="10.4055%" y="1183.50">CCoinsV..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (2,203 samples, 1.87%)</title><rect x="13.7479%" y="1157" width="1.8714%" height="15" fill="rgb(252,35,15)" fg:x="16184" fg:w="2203"/><text x="13.9979%" y="1167.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,123 samples, 1.80%)</title><rect x="13.8158%" y="1141" width="1.8034%" height="15" fill="rgb(248,181,18)" fg:x="16264" fg:w="2123"/><text x="14.0658%" y="1151.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,123 samples, 1.80%)</title><rect x="13.8158%" y="1125" width="1.8034%" height="15" fill="rgb(233,39,42)" fg:x="16264" fg:w="2123"/><text x="14.0658%" y="1135.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (99 samples, 0.08%)</title><rect x="15.5352%" y="1109" width="0.0841%" height="15" fill="rgb(238,110,33)" fg:x="18288" fg:w="99"/><text x="15.7852%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (99 samples, 0.08%)</title><rect x="15.5352%" y="1093" width="0.0841%" height="15" fill="rgb(233,195,10)" fg:x="18288" fg:w="99"/><text x="15.7852%" y="1103.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (23 samples, 0.02%)</title><rect x="15.6193%" y="1157" width="0.0195%" height="15" fill="rgb(254,105,3)" fg:x="18387" fg:w="23"/><text x="15.8693%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (23 samples, 0.02%)</title><rect x="15.6193%" y="1141" width="0.0195%" height="15" fill="rgb(221,225,9)" fg:x="18387" fg:w="23"/><text x="15.8693%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (23 samples, 0.02%)</title><rect x="15.6193%" y="1125" width="0.0195%" height="15" fill="rgb(224,227,45)" fg:x="18387" fg:w="23"/><text x="15.8693%" y="1135.50"></text></g><g><title>operator new (23 samples, 0.02%)</title><rect x="15.6193%" y="1109" width="0.0195%" height="15" fill="rgb(229,198,43)" fg:x="18387" fg:w="23"/><text x="15.8693%" y="1119.50"></text></g><g><title>__posix_memalign (23 samples, 0.02%)</title><rect x="15.6193%" y="1093" width="0.0195%" height="15" fill="rgb(206,209,35)" fg:x="18387" fg:w="23"/><text x="15.8693%" y="1103.50"></text></g><g><title>malloc (23 samples, 0.02%)</title><rect x="15.6193%" y="1077" width="0.0195%" height="15" fill="rgb(245,195,53)" fg:x="18387" fg:w="23"/><text x="15.8693%" y="1087.50"></text></g><g><title>_int_malloc (23 samples, 0.02%)</title><rect x="15.6193%" y="1061" width="0.0195%" height="15" fill="rgb(240,92,26)" fg:x="18387" fg:w="23"/><text x="15.8693%" y="1071.50"></text></g><g><title>cfree@GLIBC_2.2.5 (26 samples, 0.02%)</title><rect x="15.6439%" y="1141" width="0.0221%" height="15" fill="rgb(207,40,23)" fg:x="18416" fg:w="26"/><text x="15.8939%" y="1151.50"></text></g><g><title>_int_free (26 samples, 0.02%)</title><rect x="15.6439%" y="1125" width="0.0221%" height="15" fill="rgb(223,111,35)" fg:x="18416" fg:w="26"/><text x="15.8939%" y="1135.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (26 samples, 0.02%)</title><rect x="15.6439%" y="1109" width="0.0221%" height="15" fill="rgb(229,147,28)" fg:x="18416" fg:w="26"/><text x="15.8939%" y="1119.50"></text></g><g><title>malloc_consolidate (26 samples, 0.02%)</title><rect x="15.6439%" y="1093" width="0.0221%" height="15" fill="rgb(211,29,28)" fg:x="18416" fg:w="26"/><text x="15.8939%" y="1103.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (57 samples, 0.05%)</title><rect x="15.6193%" y="1173" width="0.0484%" height="15" fill="rgb(228,72,33)" fg:x="18387" fg:w="57"/><text x="15.8693%" y="1183.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (28 samples, 0.02%)</title><rect x="15.6439%" y="1157" width="0.0238%" height="15" fill="rgb(205,214,31)" fg:x="18416" fg:w="28"/><text x="15.8939%" y="1167.50"></text></g><g><title>SipHashUint256Extra (265 samples, 0.23%)</title><rect x="15.6677%" y="1173" width="0.2251%" height="15" fill="rgb(224,111,15)" fg:x="18444" fg:w="265"/><text x="15.9177%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (100 samples, 0.08%)</title><rect x="15.8078%" y="1157" width="0.0849%" height="15" fill="rgb(253,21,26)" fg:x="18609" fg:w="100"/><text x="16.0578%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (100 samples, 0.08%)</title><rect x="15.8078%" y="1141" width="0.0849%" height="15" fill="rgb(245,139,43)" fg:x="18609" fg:w="100"/><text x="16.0578%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (52 samples, 0.04%)</title><rect x="15.8928%" y="1173" width="0.0442%" height="15" fill="rgb(252,170,7)" fg:x="18709" fg:w="52"/><text x="16.1428%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (12 samples, 0.01%)</title><rect x="15.9268%" y="1157" width="0.0102%" height="15" fill="rgb(231,118,14)" fg:x="18749" fg:w="12"/><text x="16.1768%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (12 samples, 0.01%)</title><rect x="15.9268%" y="1141" width="0.0102%" height="15" fill="rgb(238,83,0)" fg:x="18749" fg:w="12"/><text x="16.1768%" y="1151.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (12 samples, 0.01%)</title><rect x="15.9268%" y="1125" width="0.0102%" height="15" fill="rgb(221,39,39)" fg:x="18749" fg:w="12"/><text x="16.1768%" y="1135.50"></text></g><g><title>operator== (12 samples, 0.01%)</title><rect x="15.9268%" y="1109" width="0.0102%" height="15" fill="rgb(222,119,46)" fg:x="18749" fg:w="12"/><text x="16.1768%" y="1119.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (12 samples, 0.01%)</title><rect x="15.9268%" y="1093" width="0.0102%" height="15" fill="rgb(222,165,49)" fg:x="18749" fg:w="12"/><text x="16.1768%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (12 samples, 0.01%)</title><rect x="15.9268%" y="1077" width="0.0102%" height="15" fill="rgb(219,113,52)" fg:x="18749" fg:w="12"/><text x="16.1768%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (12 samples, 0.01%)</title><rect x="15.9268%" y="1061" width="0.0102%" height="15" fill="rgb(214,7,15)" fg:x="18749" fg:w="12"/><text x="16.1768%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (26 samples, 0.02%)</title><rect x="15.9370%" y="1173" width="0.0221%" height="15" fill="rgb(235,32,4)" fg:x="18761" fg:w="26"/><text x="16.1870%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (25 samples, 0.02%)</title><rect x="15.9616%" y="1173" width="0.0212%" height="15" fill="rgb(238,90,54)" fg:x="18790" fg:w="25"/><text x="16.2116%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (18 samples, 0.02%)</title><rect x="15.9956%" y="1109" width="0.0153%" height="15" fill="rgb(213,208,19)" fg:x="18830" fg:w="18"/><text x="16.2456%" y="1119.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (18 samples, 0.02%)</title><rect x="15.9956%" y="1093" width="0.0153%" height="15" fill="rgb(233,156,4)" fg:x="18830" fg:w="18"/><text x="16.2456%" y="1103.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (18 samples, 0.02%)</title><rect x="15.9956%" y="1077" width="0.0153%" height="15" fill="rgb(207,194,5)" fg:x="18830" fg:w="18"/><text x="16.2456%" y="1087.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (17 samples, 0.01%)</title><rect x="15.9964%" y="1061" width="0.0144%" height="15" fill="rgb(206,111,30)" fg:x="18831" fg:w="17"/><text x="16.2464%" y="1071.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (17 samples, 0.01%)</title><rect x="15.9964%" y="1045" width="0.0144%" height="15" fill="rgb(243,70,54)" fg:x="18831" fg:w="17"/><text x="16.2464%" y="1055.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (17 samples, 0.01%)</title><rect x="15.9964%" y="1029" width="0.0144%" height="15" fill="rgb(242,28,8)" fg:x="18831" fg:w="17"/><text x="16.2464%" y="1039.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (37 samples, 0.03%)</title><rect x="16.0177%" y="997" width="0.0314%" height="15" fill="rgb(219,106,18)" fg:x="18856" fg:w="37"/><text x="16.2677%" y="1007.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (47 samples, 0.04%)</title><rect x="16.0109%" y="1013" width="0.0399%" height="15" fill="rgb(244,222,10)" fg:x="18848" fg:w="47"/><text x="16.2609%" y="1023.50"></text></g><g><title>CCoinsViewCache::Flush (6,965 samples, 5.92%)</title><rect x="10.1555%" y="1189" width="5.9166%" height="15" fill="rgb(236,179,52)" fg:x="11955" fg:w="6965"/><text x="10.4055%" y="1199.50">CCoinsVi..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (105 samples, 0.09%)</title><rect x="15.9828%" y="1173" width="0.0892%" height="15" fill="rgb(213,23,39)" fg:x="18815" fg:w="105"/><text x="16.2328%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (105 samples, 0.09%)</title><rect x="15.9828%" y="1157" width="0.0892%" height="15" fill="rgb(238,48,10)" fg:x="18815" fg:w="105"/><text x="16.2328%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (101 samples, 0.09%)</title><rect x="15.9862%" y="1141" width="0.0858%" height="15" fill="rgb(251,196,23)" fg:x="18819" fg:w="101"/><text x="16.2362%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (90 samples, 0.08%)</title><rect x="15.9956%" y="1125" width="0.0765%" height="15" fill="rgb(250,152,24)" fg:x="18830" fg:w="90"/><text x="16.2456%" y="1135.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (72 samples, 0.06%)</title><rect x="16.0109%" y="1109" width="0.0612%" height="15" fill="rgb(209,150,17)" fg:x="18848" fg:w="72"/><text x="16.2609%" y="1119.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (72 samples, 0.06%)</title><rect x="16.0109%" y="1093" width="0.0612%" height="15" fill="rgb(234,202,34)" fg:x="18848" fg:w="72"/><text x="16.2609%" y="1103.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (72 samples, 0.06%)</title><rect x="16.0109%" y="1077" width="0.0612%" height="15" fill="rgb(253,148,53)" fg:x="18848" fg:w="72"/><text x="16.2609%" y="1087.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (72 samples, 0.06%)</title><rect x="16.0109%" y="1061" width="0.0612%" height="15" fill="rgb(218,129,16)" fg:x="18848" fg:w="72"/><text x="16.2609%" y="1071.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (72 samples, 0.06%)</title><rect x="16.0109%" y="1045" width="0.0612%" height="15" fill="rgb(216,85,19)" fg:x="18848" fg:w="72"/><text x="16.2609%" y="1055.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (72 samples, 0.06%)</title><rect x="16.0109%" y="1029" width="0.0612%" height="15" fill="rgb(235,228,7)" fg:x="18848" fg:w="72"/><text x="16.2609%" y="1039.50"></text></g><g><title>Coin::~Coin (25 samples, 0.02%)</title><rect x="16.0508%" y="1013" width="0.0212%" height="15" fill="rgb(245,175,0)" fg:x="18895" fg:w="25"/><text x="16.3008%" y="1023.50"></text></g><g><title>CTxOut::~CTxOut (25 samples, 0.02%)</title><rect x="16.0508%" y="997" width="0.0212%" height="15" fill="rgb(208,168,36)" fg:x="18895" fg:w="25"/><text x="16.3008%" y="1007.50"></text></g><g><title>CScript::~CScript (25 samples, 0.02%)</title><rect x="16.0508%" y="981" width="0.0212%" height="15" fill="rgb(246,171,24)" fg:x="18895" fg:w="25"/><text x="16.3008%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (25 samples, 0.02%)</title><rect x="16.0508%" y="965" width="0.0212%" height="15" fill="rgb(215,142,24)" fg:x="18895" fg:w="25"/><text x="16.3008%" y="975.50"></text></g><g><title>CScript::IsWitnessProgram (17 samples, 0.01%)</title><rect x="16.0729%" y="1189" width="0.0144%" height="15" fill="rgb(250,187,7)" fg:x="18921" fg:w="17"/><text x="16.3229%" y="1199.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (15 samples, 0.01%)</title><rect x="16.0746%" y="1173" width="0.0127%" height="15" fill="rgb(228,66,33)" fg:x="18923" fg:w="15"/><text x="16.3246%" y="1183.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (15 samples, 0.01%)</title><rect x="16.0746%" y="1157" width="0.0127%" height="15" fill="rgb(234,215,21)" fg:x="18923" fg:w="15"/><text x="16.3246%" y="1167.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (14 samples, 0.01%)</title><rect x="16.0754%" y="1141" width="0.0119%" height="15" fill="rgb(222,191,20)" fg:x="18924" fg:w="14"/><text x="16.3254%" y="1151.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (14 samples, 0.01%)</title><rect x="16.0754%" y="1125" width="0.0119%" height="15" fill="rgb(245,79,54)" fg:x="18924" fg:w="14"/><text x="16.3254%" y="1135.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (14 samples, 0.01%)</title><rect x="16.0754%" y="1109" width="0.0119%" height="15" fill="rgb(240,10,37)" fg:x="18924" fg:w="14"/><text x="16.3254%" y="1119.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (14 samples, 0.01%)</title><rect x="16.0754%" y="1093" width="0.0119%" height="15" fill="rgb(214,192,32)" fg:x="18924" fg:w="14"/><text x="16.3254%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (14 samples, 0.01%)</title><rect x="16.0754%" y="1077" width="0.0119%" height="15" fill="rgb(209,36,54)" fg:x="18924" fg:w="14"/><text x="16.3254%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (14 samples, 0.01%)</title><rect x="16.0754%" y="1061" width="0.0119%" height="15" fill="rgb(220,10,11)" fg:x="18924" fg:w="14"/><text x="16.3254%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (14 samples, 0.01%)</title><rect x="16.0754%" y="1045" width="0.0119%" height="15" fill="rgb(221,106,17)" fg:x="18924" fg:w="14"/><text x="16.3254%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (14 samples, 0.01%)</title><rect x="16.0754%" y="1029" width="0.0119%" height="15" fill="rgb(251,142,44)" fg:x="18924" fg:w="14"/><text x="16.3254%" y="1039.50"></text></g><g><title>indirectmap&lt;COutPoint, CTransaction const*&gt;::find (19 samples, 0.02%)</title><rect x="16.1001%" y="1157" width="0.0161%" height="15" fill="rgb(238,13,15)" fg:x="18953" fg:w="19"/><text x="16.3501%" y="1167.50"></text></g><g><title>std::map&lt;COutPoint const*, CTransaction const*, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (19 samples, 0.02%)</title><rect x="16.1001%" y="1141" width="0.0161%" height="15" fill="rgb(208,107,27)" fg:x="18953" fg:w="19"/><text x="16.3501%" y="1151.50"></text></g><g><title>CTxMemPool::removeConflicts (21 samples, 0.02%)</title><rect x="16.0992%" y="1173" width="0.0178%" height="15" fill="rgb(205,136,37)" fg:x="18952" fg:w="21"/><text x="16.3492%" y="1183.50"></text></g><g><title>SipHashUint256 (212 samples, 0.18%)</title><rect x="16.1179%" y="1173" width="0.1801%" height="15" fill="rgb(250,205,27)" fg:x="18974" fg:w="212"/><text x="16.3679%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (79 samples, 0.07%)</title><rect x="16.2309%" y="1157" width="0.0671%" height="15" fill="rgb(210,80,43)" fg:x="19107" fg:w="79"/><text x="16.4809%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (79 samples, 0.07%)</title><rect x="16.2309%" y="1141" width="0.0671%" height="15" fill="rgb(247,160,36)" fg:x="19107" fg:w="79"/><text x="16.4809%" y="1151.50"></text></g><g><title>SaltedTxidHasher::operator (36 samples, 0.03%)</title><rect x="16.3048%" y="1109" width="0.0306%" height="15" fill="rgb(234,13,49)" fg:x="19194" fg:w="36"/><text x="16.5548%" y="1119.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt; &gt; (39 samples, 0.03%)</title><rect x="16.3039%" y="1173" width="0.0331%" height="15" fill="rgb(234,122,0)" fg:x="19193" fg:w="39"/><text x="16.5539%" y="1183.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt;, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (39 samples, 0.03%)</title><rect x="16.3039%" y="1157" width="0.0331%" height="15" fill="rgb(207,146,38)" fg:x="19193" fg:w="39"/><text x="16.5539%" y="1167.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (39 samples, 0.03%)</title><rect x="16.3039%" y="1141" width="0.0331%" height="15" fill="rgb(207,177,25)" fg:x="19193" fg:w="39"/><text x="16.5539%" y="1151.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;uint256, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (39 samples, 0.03%)</title><rect x="16.3039%" y="1125" width="0.0331%" height="15" fill="rgb(211,178,42)" fg:x="19193" fg:w="39"/><text x="16.5539%" y="1135.50"></text></g><g><title>SipHashUint256 (22 samples, 0.02%)</title><rect x="16.3490%" y="1157" width="0.0187%" height="15" fill="rgb(230,69,54)" fg:x="19246" fg:w="22"/><text x="16.5990%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (22 samples, 0.02%)</title><rect x="16.3719%" y="1157" width="0.0187%" height="15" fill="rgb(214,135,41)" fg:x="19273" fg:w="22"/><text x="16.6219%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (21 samples, 0.02%)</title><rect x="16.3727%" y="1141" width="0.0178%" height="15" fill="rgb(237,67,25)" fg:x="19274" fg:w="21"/><text x="16.6227%" y="1151.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (62 samples, 0.05%)</title><rect x="16.3456%" y="1173" width="0.0527%" height="15" fill="rgb(222,189,50)" fg:x="19242" fg:w="62"/><text x="16.5956%" y="1183.50"></text></g><g><title>CTxMemPool::removeForBlock (360 samples, 0.31%)</title><rect x="16.0941%" y="1189" width="0.3058%" height="15" fill="rgb(245,148,34)" fg:x="18946" fg:w="360"/><text x="16.3441%" y="1199.50"></text></g><g><title>Coin::Coin (55 samples, 0.05%)</title><rect x="16.4135%" y="1141" width="0.0467%" height="15" fill="rgb(222,29,6)" fg:x="19322" fg:w="55"/><text x="16.6635%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (55 samples, 0.05%)</title><rect x="16.4135%" y="1125" width="0.0467%" height="15" fill="rgb(221,189,43)" fg:x="19322" fg:w="55"/><text x="16.6635%" y="1135.50"></text></g><g><title>CScript::CScript (55 samples, 0.05%)</title><rect x="16.4135%" y="1109" width="0.0467%" height="15" fill="rgb(207,36,27)" fg:x="19322" fg:w="55"/><text x="16.6635%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (55 samples, 0.05%)</title><rect x="16.4135%" y="1093" width="0.0467%" height="15" fill="rgb(217,90,24)" fg:x="19322" fg:w="55"/><text x="16.6635%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (45 samples, 0.04%)</title><rect x="16.4220%" y="1077" width="0.0382%" height="15" fill="rgb(224,66,35)" fg:x="19332" fg:w="45"/><text x="16.6720%" y="1087.50"></text></g><g><title>AddCoins (61 samples, 0.05%)</title><rect x="16.4093%" y="1157" width="0.0518%" height="15" fill="rgb(221,13,50)" fg:x="19317" fg:w="61"/><text x="16.6593%" y="1167.50"></text></g><g><title>SipHashUint256Extra (25 samples, 0.02%)</title><rect x="16.4891%" y="1093" width="0.0212%" height="15" fill="rgb(236,68,49)" fg:x="19411" fg:w="25"/><text x="16.7391%" y="1103.50"></text></g><g><title>AddCoins (15 samples, 0.01%)</title><rect x="16.5206%" y="1077" width="0.0127%" height="15" fill="rgb(229,146,28)" fg:x="19448" fg:w="15"/><text x="16.7706%" y="1087.50"></text></g><g><title>CCoinsViewCache::AddCoin (20 samples, 0.02%)</title><rect x="16.5333%" y="1077" width="0.0170%" height="15" fill="rgb(225,31,38)" fg:x="19463" fg:w="20"/><text x="16.7833%" y="1087.50"></text></g><g><title>SipHashUint256Extra (135 samples, 0.11%)</title><rect x="16.5503%" y="1077" width="0.1147%" height="15" fill="rgb(250,208,3)" fg:x="19483" fg:w="135"/><text x="16.8003%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (45 samples, 0.04%)</title><rect x="16.6267%" y="1061" width="0.0382%" height="15" fill="rgb(246,54,23)" fg:x="19573" fg:w="45"/><text x="16.8767%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (45 samples, 0.04%)</title><rect x="16.6267%" y="1045" width="0.0382%" height="15" fill="rgb(243,76,11)" fg:x="19573" fg:w="45"/><text x="16.8767%" y="1055.50"></text></g><g><title>SipHashUint256Extra (56 samples, 0.05%)</title><rect x="16.6811%" y="997" width="0.0476%" height="15" fill="rgb(245,21,50)" fg:x="19637" fg:w="56"/><text x="16.9311%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (15 samples, 0.01%)</title><rect x="16.7159%" y="981" width="0.0127%" height="15" fill="rgb(228,9,43)" fg:x="19678" fg:w="15"/><text x="16.9659%" y="991.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (15 samples, 0.01%)</title><rect x="16.7159%" y="965" width="0.0127%" height="15" fill="rgb(208,100,47)" fg:x="19678" fg:w="15"/><text x="16.9659%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (78 samples, 0.07%)</title><rect x="16.6726%" y="1061" width="0.0663%" height="15" fill="rgb(232,26,8)" fg:x="19627" fg:w="78"/><text x="16.9226%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (78 samples, 0.07%)</title><rect x="16.6726%" y="1045" width="0.0663%" height="15" fill="rgb(216,166,38)" fg:x="19627" fg:w="78"/><text x="16.9226%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (78 samples, 0.07%)</title><rect x="16.6726%" y="1029" width="0.0663%" height="15" fill="rgb(251,202,51)" fg:x="19627" fg:w="78"/><text x="16.9226%" y="1039.50"></text></g><g><title>SaltedOutpointHasher::operator (78 samples, 0.07%)</title><rect x="16.6726%" y="1013" width="0.0663%" height="15" fill="rgb(254,216,34)" fg:x="19627" fg:w="78"/><text x="16.9226%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (90 samples, 0.08%)</title><rect x="16.6650%" y="1077" width="0.0765%" height="15" fill="rgb(251,32,27)" fg:x="19618" fg:w="90"/><text x="16.9150%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (276 samples, 0.23%)</title><rect x="16.5163%" y="1093" width="0.2345%" height="15" fill="rgb(208,127,28)" fg:x="19443" fg:w="276"/><text x="16.7663%" y="1103.50"></text></g><g><title>SipHashUint256Extra (102 samples, 0.09%)</title><rect x="16.7516%" y="1077" width="0.0866%" height="15" fill="rgb(224,137,22)" fg:x="19720" fg:w="102"/><text x="17.0016%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (47 samples, 0.04%)</title><rect x="16.7983%" y="1061" width="0.0399%" height="15" fill="rgb(254,70,32)" fg:x="19775" fg:w="47"/><text x="17.0483%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (47 samples, 0.04%)</title><rect x="16.7983%" y="1045" width="0.0399%" height="15" fill="rgb(229,75,37)" fg:x="19775" fg:w="47"/><text x="17.0483%" y="1055.50"></text></g><g><title>SipHashUint256Extra (14 samples, 0.01%)</title><rect x="16.8425%" y="997" width="0.0119%" height="15" fill="rgb(252,64,23)" fg:x="19827" fg:w="14"/><text x="17.0925%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (20 samples, 0.02%)</title><rect x="16.8383%" y="1077" width="0.0170%" height="15" fill="rgb(232,162,48)" fg:x="19822" fg:w="20"/><text x="17.0883%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (20 samples, 0.02%)</title><rect x="16.8383%" y="1061" width="0.0170%" height="15" fill="rgb(246,160,12)" fg:x="19822" fg:w="20"/><text x="17.0883%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (20 samples, 0.02%)</title><rect x="16.8383%" y="1045" width="0.0170%" height="15" fill="rgb(247,166,0)" fg:x="19822" fg:w="20"/><text x="17.0883%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (20 samples, 0.02%)</title><rect x="16.8383%" y="1029" width="0.0170%" height="15" fill="rgb(249,219,21)" fg:x="19822" fg:w="20"/><text x="17.0883%" y="1039.50"></text></g><g><title>SaltedOutpointHasher::operator (20 samples, 0.02%)</title><rect x="16.8383%" y="1013" width="0.0170%" height="15" fill="rgb(205,209,3)" fg:x="19822" fg:w="20"/><text x="17.0883%" y="1023.50"></text></g><g><title>SipHashUint256Extra (115 samples, 0.10%)</title><rect x="16.8722%" y="997" width="0.0977%" height="15" fill="rgb(243,44,1)" fg:x="19862" fg:w="115"/><text x="17.1222%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (43 samples, 0.04%)</title><rect x="16.9334%" y="981" width="0.0365%" height="15" fill="rgb(206,159,16)" fg:x="19934" fg:w="43"/><text x="17.1834%" y="991.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (43 samples, 0.04%)</title><rect x="16.9334%" y="965" width="0.0365%" height="15" fill="rgb(244,77,30)" fg:x="19934" fg:w="43"/><text x="17.1834%" y="975.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (130 samples, 0.11%)</title><rect x="16.8714%" y="1029" width="0.1104%" height="15" fill="rgb(218,69,12)" fg:x="19861" fg:w="130"/><text x="17.1214%" y="1039.50"></text></g><g><title>SaltedOutpointHasher::operator (130 samples, 0.11%)</title><rect x="16.8714%" y="1013" width="0.1104%" height="15" fill="rgb(212,87,7)" fg:x="19861" fg:w="130"/><text x="17.1214%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (14 samples, 0.01%)</title><rect x="16.9699%" y="997" width="0.0119%" height="15" fill="rgb(245,114,25)" fg:x="19977" fg:w="14"/><text x="17.2199%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (14 samples, 0.01%)</title><rect x="16.9699%" y="981" width="0.0119%" height="15" fill="rgb(210,61,42)" fg:x="19977" fg:w="14"/><text x="17.2199%" y="991.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (131 samples, 0.11%)</title><rect x="16.8714%" y="1045" width="0.1113%" height="15" fill="rgb(211,52,33)" fg:x="19861" fg:w="131"/><text x="17.1214%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (274 samples, 0.23%)</title><rect x="16.7508%" y="1093" width="0.2328%" height="15" fill="rgb(234,58,33)" fg:x="19719" fg:w="274"/><text x="17.0008%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (151 samples, 0.13%)</title><rect x="16.8552%" y="1077" width="0.1283%" height="15" fill="rgb(220,115,36)" fg:x="19842" fg:w="151"/><text x="17.1052%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (151 samples, 0.13%)</title><rect x="16.8552%" y="1061" width="0.1283%" height="15" fill="rgb(243,153,54)" fg:x="19842" fg:w="151"/><text x="17.1052%" y="1071.50"></text></g><g><title>AddCoins (71 samples, 0.06%)</title><rect x="16.9835%" y="1077" width="0.0603%" height="15" fill="rgb(251,47,18)" fg:x="19993" fg:w="71"/><text x="17.2335%" y="1087.50"></text></g><g><title>Coin::Coin (69 samples, 0.06%)</title><rect x="16.9852%" y="1061" width="0.0586%" height="15" fill="rgb(242,102,42)" fg:x="19995" fg:w="69"/><text x="17.2352%" y="1071.50"></text></g><g><title>CTxOut::CTxOut (68 samples, 0.06%)</title><rect x="16.9861%" y="1045" width="0.0578%" height="15" fill="rgb(234,31,38)" fg:x="19996" fg:w="68"/><text x="17.2361%" y="1055.50"></text></g><g><title>CScript::CScript (68 samples, 0.06%)</title><rect x="16.9861%" y="1029" width="0.0578%" height="15" fill="rgb(221,117,51)" fg:x="19996" fg:w="68"/><text x="17.2361%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (68 samples, 0.06%)</title><rect x="16.9861%" y="1013" width="0.0578%" height="15" fill="rgb(212,20,18)" fg:x="19996" fg:w="68"/><text x="17.2361%" y="1023.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (65 samples, 0.06%)</title><rect x="16.9886%" y="997" width="0.0552%" height="15" fill="rgb(245,133,36)" fg:x="19999" fg:w="65"/><text x="17.2386%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (74 samples, 0.06%)</title><rect x="16.9835%" y="1093" width="0.0629%" height="15" fill="rgb(212,6,19)" fg:x="19993" fg:w="74"/><text x="17.2335%" y="1103.50"></text></g><g><title>CCoinsViewCache::AddCoin (698 samples, 0.59%)</title><rect x="16.4611%" y="1157" width="0.5929%" height="15" fill="rgb(218,1,36)" fg:x="19378" fg:w="698"/><text x="16.7111%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (685 samples, 0.58%)</title><rect x="16.4721%" y="1141" width="0.5819%" height="15" fill="rgb(246,84,54)" fg:x="19391" fg:w="685"/><text x="16.7221%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (683 samples, 0.58%)</title><rect x="16.4738%" y="1125" width="0.5802%" height="15" fill="rgb(242,110,6)" fg:x="19393" fg:w="683"/><text x="16.7238%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (683 samples, 0.58%)</title><rect x="16.4738%" y="1109" width="0.5802%" height="15" fill="rgb(214,47,5)" fg:x="19393" fg:w="683"/><text x="16.7238%" y="1119.50"></text></g><g><title>Coin::Coin (38 samples, 0.03%)</title><rect x="17.0583%" y="1157" width="0.0323%" height="15" fill="rgb(218,159,25)" fg:x="20081" fg:w="38"/><text x="17.3083%" y="1167.50"></text></g><g><title>CTxOut::CTxOut (38 samples, 0.03%)</title><rect x="17.0583%" y="1141" width="0.0323%" height="15" fill="rgb(215,211,28)" fg:x="20081" fg:w="38"/><text x="17.3083%" y="1151.50"></text></g><g><title>CScript::CScript (38 samples, 0.03%)</title><rect x="17.0583%" y="1125" width="0.0323%" height="15" fill="rgb(238,59,32)" fg:x="20081" fg:w="38"/><text x="17.3083%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (38 samples, 0.03%)</title><rect x="17.0583%" y="1109" width="0.0323%" height="15" fill="rgb(226,82,3)" fg:x="20081" fg:w="38"/><text x="17.3083%" y="1119.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (26 samples, 0.02%)</title><rect x="17.0685%" y="1093" width="0.0221%" height="15" fill="rgb(240,164,32)" fg:x="20093" fg:w="26"/><text x="17.3185%" y="1103.50"></text></g><g><title>SipHashUint256Extra (454 samples, 0.39%)</title><rect x="17.0940%" y="1157" width="0.3857%" height="15" fill="rgb(232,46,7)" fg:x="20123" fg:w="454"/><text x="17.3440%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (174 samples, 0.15%)</title><rect x="17.3318%" y="1141" width="0.1478%" height="15" fill="rgb(229,129,53)" fg:x="20403" fg:w="174"/><text x="17.5818%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (174 samples, 0.15%)</title><rect x="17.3318%" y="1125" width="0.1478%" height="15" fill="rgb(234,188,29)" fg:x="20403" fg:w="174"/><text x="17.5818%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (66 samples, 0.06%)</title><rect x="17.4822%" y="1157" width="0.0561%" height="15" fill="rgb(246,141,4)" fg:x="20580" fg:w="66"/><text x="17.7322%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (19 samples, 0.02%)</title><rect x="17.5382%" y="1157" width="0.0161%" height="15" fill="rgb(229,23,39)" fg:x="20646" fg:w="19"/><text x="17.7882%" y="1167.50"></text></g><g><title>AddCoins (1,368 samples, 1.16%)</title><rect x="16.4025%" y="1173" width="1.1621%" height="15" fill="rgb(206,12,3)" fg:x="19309" fg:w="1368"/><text x="16.6525%" y="1183.50"></text></g><g><title>CBlockIndex::GetAncestor (13 samples, 0.01%)</title><rect x="17.5654%" y="1173" width="0.0110%" height="15" fill="rgb(252,226,20)" fg:x="20678" fg:w="13"/><text x="17.8154%" y="1183.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~_Vector_base (49 samples, 0.04%)</title><rect x="17.5773%" y="1141" width="0.0416%" height="15" fill="rgb(216,123,35)" fg:x="20692" fg:w="49"/><text x="17.8273%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::_M_deallocate (49 samples, 0.04%)</title><rect x="17.5773%" y="1125" width="0.0416%" height="15" fill="rgb(212,68,40)" fg:x="20692" fg:w="49"/><text x="17.8273%" y="1135.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxUndo&gt; &gt;::deallocate (49 samples, 0.04%)</title><rect x="17.5773%" y="1109" width="0.0416%" height="15" fill="rgb(254,125,32)" fg:x="20692" fg:w="49"/><text x="17.8273%" y="1119.50"></text></g><g><title>std::allocator&lt;CTxUndo&gt;::deallocate (49 samples, 0.04%)</title><rect x="17.5773%" y="1093" width="0.0416%" height="15" fill="rgb(253,97,22)" fg:x="20692" fg:w="49"/><text x="17.8273%" y="1103.50"></text></g><g><title>std::__new_allocator&lt;CTxUndo&gt;::deallocate (49 samples, 0.04%)</title><rect x="17.5773%" y="1077" width="0.0416%" height="15" fill="rgb(241,101,14)" fg:x="20692" fg:w="49"/><text x="17.8273%" y="1087.50"></text></g><g><title>cfree@GLIBC_2.2.5 (49 samples, 0.04%)</title><rect x="17.5773%" y="1061" width="0.0416%" height="15" fill="rgb(238,103,29)" fg:x="20692" fg:w="49"/><text x="17.8273%" y="1071.50"></text></g><g><title>_int_free (49 samples, 0.04%)</title><rect x="17.5773%" y="1045" width="0.0416%" height="15" fill="rgb(233,195,47)" fg:x="20692" fg:w="49"/><text x="17.8273%" y="1055.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (49 samples, 0.04%)</title><rect x="17.5773%" y="1029" width="0.0416%" height="15" fill="rgb(246,218,30)" fg:x="20692" fg:w="49"/><text x="17.8273%" y="1039.50"></text></g><g><title>malloc_consolidate (49 samples, 0.04%)</title><rect x="17.5773%" y="1013" width="0.0416%" height="15" fill="rgb(219,145,47)" fg:x="20692" fg:w="49"/><text x="17.8273%" y="1023.50"></text></g><g><title>_int_free (34 samples, 0.03%)</title><rect x="17.6223%" y="933" width="0.0289%" height="15" fill="rgb(243,12,26)" fg:x="20745" fg:w="34"/><text x="17.8723%" y="943.50"></text></g><g><title>cfree@GLIBC_2.2.5 (36 samples, 0.03%)</title><rect x="17.6215%" y="949" width="0.0306%" height="15" fill="rgb(214,87,16)" fg:x="20744" fg:w="36"/><text x="17.8715%" y="959.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~_Vector_base (41 samples, 0.03%)</title><rect x="17.6189%" y="1029" width="0.0348%" height="15" fill="rgb(208,99,42)" fg:x="20741" fg:w="41"/><text x="17.8689%" y="1039.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_deallocate (39 samples, 0.03%)</title><rect x="17.6206%" y="1013" width="0.0331%" height="15" fill="rgb(253,99,2)" fg:x="20743" fg:w="39"/><text x="17.8706%" y="1023.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::deallocate (39 samples, 0.03%)</title><rect x="17.6206%" y="997" width="0.0331%" height="15" fill="rgb(220,168,23)" fg:x="20743" fg:w="39"/><text x="17.8706%" y="1007.50"></text></g><g><title>std::allocator&lt;Coin&gt;::deallocate (39 samples, 0.03%)</title><rect x="17.6206%" y="981" width="0.0331%" height="15" fill="rgb(242,38,24)" fg:x="20743" fg:w="39"/><text x="17.8706%" y="991.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::deallocate (39 samples, 0.03%)</title><rect x="17.6206%" y="965" width="0.0331%" height="15" fill="rgb(225,182,9)" fg:x="20743" fg:w="39"/><text x="17.8706%" y="975.50"></text></g><g><title>cfree@GLIBC_2.2.5 (15 samples, 0.01%)</title><rect x="17.6580%" y="885" width="0.0127%" height="15" fill="rgb(243,178,37)" fg:x="20787" fg:w="15"/><text x="17.9080%" y="895.50"></text></g><g><title>_int_free (12 samples, 0.01%)</title><rect x="17.6606%" y="869" width="0.0102%" height="15" fill="rgb(232,139,19)" fg:x="20790" fg:w="12"/><text x="17.9106%" y="879.50"></text></g><g><title>CBlockUndo::~CBlockUndo (111 samples, 0.09%)</title><rect x="17.5773%" y="1173" width="0.0943%" height="15" fill="rgb(225,201,24)" fg:x="20692" fg:w="111"/><text x="17.8273%" y="1183.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (111 samples, 0.09%)</title><rect x="17.5773%" y="1157" width="0.0943%" height="15" fill="rgb(221,47,46)" fg:x="20692" fg:w="111"/><text x="17.8273%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (62 samples, 0.05%)</title><rect x="17.6189%" y="1141" width="0.0527%" height="15" fill="rgb(249,23,13)" fg:x="20741" fg:w="62"/><text x="17.8689%" y="1151.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (62 samples, 0.05%)</title><rect x="17.6189%" y="1125" width="0.0527%" height="15" fill="rgb(219,9,5)" fg:x="20741" fg:w="62"/><text x="17.8689%" y="1135.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (62 samples, 0.05%)</title><rect x="17.6189%" y="1109" width="0.0527%" height="15" fill="rgb(254,171,16)" fg:x="20741" fg:w="62"/><text x="17.8689%" y="1119.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (62 samples, 0.05%)</title><rect x="17.6189%" y="1093" width="0.0527%" height="15" fill="rgb(230,171,20)" fg:x="20741" fg:w="62"/><text x="17.8689%" y="1103.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (62 samples, 0.05%)</title><rect x="17.6189%" y="1077" width="0.0527%" height="15" fill="rgb(210,71,41)" fg:x="20741" fg:w="62"/><text x="17.8689%" y="1087.50"></text></g><g><title>CTxUndo::~CTxUndo (62 samples, 0.05%)</title><rect x="17.6189%" y="1061" width="0.0527%" height="15" fill="rgb(206,173,20)" fg:x="20741" fg:w="62"/><text x="17.8689%" y="1071.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (62 samples, 0.05%)</title><rect x="17.6189%" y="1045" width="0.0527%" height="15" fill="rgb(233,88,34)" fg:x="20741" fg:w="62"/><text x="17.8689%" y="1055.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (21 samples, 0.02%)</title><rect x="17.6538%" y="1029" width="0.0178%" height="15" fill="rgb(223,209,46)" fg:x="20782" fg:w="21"/><text x="17.9038%" y="1039.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (21 samples, 0.02%)</title><rect x="17.6538%" y="1013" width="0.0178%" height="15" fill="rgb(250,43,18)" fg:x="20782" fg:w="21"/><text x="17.9038%" y="1023.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (21 samples, 0.02%)</title><rect x="17.6538%" y="997" width="0.0178%" height="15" fill="rgb(208,13,10)" fg:x="20782" fg:w="21"/><text x="17.9038%" y="1007.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (21 samples, 0.02%)</title><rect x="17.6538%" y="981" width="0.0178%" height="15" fill="rgb(212,200,36)" fg:x="20782" fg:w="21"/><text x="17.9038%" y="991.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (21 samples, 0.02%)</title><rect x="17.6538%" y="965" width="0.0178%" height="15" fill="rgb(225,90,30)" fg:x="20782" fg:w="21"/><text x="17.9038%" y="975.50"></text></g><g><title>Coin::~Coin (21 samples, 0.02%)</title><rect x="17.6538%" y="949" width="0.0178%" height="15" fill="rgb(236,182,39)" fg:x="20782" fg:w="21"/><text x="17.9038%" y="959.50"></text></g><g><title>CTxOut::~CTxOut (21 samples, 0.02%)</title><rect x="17.6538%" y="933" width="0.0178%" height="15" fill="rgb(212,144,35)" fg:x="20782" fg:w="21"/><text x="17.9038%" y="943.50"></text></g><g><title>CScript::~CScript (21 samples, 0.02%)</title><rect x="17.6538%" y="917" width="0.0178%" height="15" fill="rgb(228,63,44)" fg:x="20782" fg:w="21"/><text x="17.9038%" y="927.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (21 samples, 0.02%)</title><rect x="17.6538%" y="901" width="0.0178%" height="15" fill="rgb(228,109,6)" fg:x="20782" fg:w="21"/><text x="17.9038%" y="911.50"></text></g><g><title>SipHashUint256Extra (38 samples, 0.03%)</title><rect x="17.6835%" y="1093" width="0.0323%" height="15" fill="rgb(238,117,24)" fg:x="20817" fg:w="38"/><text x="17.9335%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (12 samples, 0.01%)</title><rect x="17.7056%" y="1077" width="0.0102%" height="15" fill="rgb(242,26,26)" fg:x="20843" fg:w="12"/><text x="17.9556%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (12 samples, 0.01%)</title><rect x="17.7056%" y="1061" width="0.0102%" height="15" fill="rgb(221,92,48)" fg:x="20843" fg:w="12"/><text x="17.9556%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (49 samples, 0.04%)</title><rect x="17.6758%" y="1109" width="0.0416%" height="15" fill="rgb(209,209,32)" fg:x="20808" fg:w="49"/><text x="17.9258%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (13 samples, 0.01%)</title><rect x="17.7192%" y="1077" width="0.0110%" height="15" fill="rgb(221,70,22)" fg:x="20859" fg:w="13"/><text x="17.9692%" y="1087.50"></text></g><g><title>SipHashUint256Extra (90 samples, 0.08%)</title><rect x="17.7396%" y="1077" width="0.0765%" height="15" fill="rgb(248,145,5)" fg:x="20883" fg:w="90"/><text x="17.9896%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (41 samples, 0.03%)</title><rect x="17.7812%" y="1061" width="0.0348%" height="15" fill="rgb(226,116,26)" fg:x="20932" fg:w="41"/><text x="18.0312%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (41 samples, 0.03%)</title><rect x="17.7812%" y="1045" width="0.0348%" height="15" fill="rgb(244,5,17)" fg:x="20932" fg:w="41"/><text x="18.0312%" y="1055.50"></text></g><g><title>CCoinsViewCache::FetchCoin (172 samples, 0.15%)</title><rect x="17.6750%" y="1157" width="0.1461%" height="15" fill="rgb(252,159,33)" fg:x="20807" fg:w="172"/><text x="17.9250%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (171 samples, 0.15%)</title><rect x="17.6758%" y="1141" width="0.1453%" height="15" fill="rgb(206,71,0)" fg:x="20808" fg:w="171"/><text x="17.9258%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (171 samples, 0.15%)</title><rect x="17.6758%" y="1125" width="0.1453%" height="15" fill="rgb(233,118,54)" fg:x="20808" fg:w="171"/><text x="17.9258%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (122 samples, 0.10%)</title><rect x="17.7175%" y="1109" width="0.1036%" height="15" fill="rgb(234,83,48)" fg:x="20857" fg:w="122"/><text x="17.9675%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (122 samples, 0.10%)</title><rect x="17.7175%" y="1093" width="0.1036%" height="15" fill="rgb(228,3,54)" fg:x="20857" fg:w="122"/><text x="17.9675%" y="1103.50"></text></g><g><title>SipHashUint256Extra (22 samples, 0.02%)</title><rect x="17.8262%" y="1157" width="0.0187%" height="15" fill="rgb(226,155,13)" fg:x="20985" fg:w="22"/><text x="18.0762%" y="1167.50"></text></g><g><title>CCoinsViewCache::AccessCoin (206 samples, 0.17%)</title><rect x="17.6716%" y="1173" width="0.1750%" height="15" fill="rgb(241,28,37)" fg:x="20803" fg:w="206"/><text x="17.9216%" y="1183.50"></text></g><g><title>CCoinsViewCache::AddCoin (20 samples, 0.02%)</title><rect x="17.8466%" y="1173" width="0.0170%" height="15" fill="rgb(233,93,10)" fg:x="21009" fg:w="20"/><text x="18.0966%" y="1183.50"></text></g><g><title>CCoinsViewCache::FetchCoin (31 samples, 0.03%)</title><rect x="17.8636%" y="1173" width="0.0263%" height="15" fill="rgb(225,113,19)" fg:x="21029" fg:w="31"/><text x="18.1136%" y="1183.50"></text></g><g><title>CCoinsViewCache::GetCoin (148 samples, 0.13%)</title><rect x="17.8899%" y="1173" width="0.1257%" height="15" fill="rgb(241,2,18)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1183.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (148 samples, 0.13%)</title><rect x="17.8899%" y="1157" width="0.1257%" height="15" fill="rgb(228,207,21)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1167.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (148 samples, 0.13%)</title><rect x="17.8899%" y="1141" width="0.1257%" height="15" fill="rgb(213,211,35)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1151.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (148 samples, 0.13%)</title><rect x="17.8899%" y="1125" width="0.1257%" height="15" fill="rgb(209,83,10)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (148 samples, 0.13%)</title><rect x="17.8899%" y="1109" width="0.1257%" height="15" fill="rgb(209,164,1)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1119.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (148 samples, 0.13%)</title><rect x="17.8899%" y="1093" width="0.1257%" height="15" fill="rgb(213,184,43)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (148 samples, 0.13%)</title><rect x="17.8899%" y="1077" width="0.1257%" height="15" fill="rgb(231,61,34)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1087.50"></text></g><g><title>Coin::Coin (148 samples, 0.13%)</title><rect x="17.8899%" y="1061" width="0.1257%" height="15" fill="rgb(235,75,3)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1071.50"></text></g><g><title>CTxOut::CTxOut (148 samples, 0.13%)</title><rect x="17.8899%" y="1045" width="0.1257%" height="15" fill="rgb(220,106,47)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1055.50"></text></g><g><title>CScript::CScript (148 samples, 0.13%)</title><rect x="17.8899%" y="1029" width="0.1257%" height="15" fill="rgb(210,196,33)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (148 samples, 0.13%)</title><rect x="17.8899%" y="1013" width="0.1257%" height="15" fill="rgb(229,154,42)" fg:x="21060" fg:w="148"/><text x="18.1399%" y="1023.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (138 samples, 0.12%)</title><rect x="17.8984%" y="997" width="0.1172%" height="15" fill="rgb(228,114,26)" fg:x="21070" fg:w="138"/><text x="18.1484%" y="1007.50"></text></g><g><title>CCoinsViewCache::SpendCoin (13 samples, 0.01%)</title><rect x="18.0165%" y="1173" width="0.0110%" height="15" fill="rgb(208,144,1)" fg:x="21209" fg:w="13"/><text x="18.2665%" y="1183.50"></text></g><g><title>CScript::IsWitnessProgram (37 samples, 0.03%)</title><rect x="18.0309%" y="1173" width="0.0314%" height="15" fill="rgb(239,112,37)" fg:x="21226" fg:w="37"/><text x="18.2809%" y="1183.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (27 samples, 0.02%)</title><rect x="18.0394%" y="1157" width="0.0229%" height="15" fill="rgb(210,96,50)" fg:x="21236" fg:w="27"/><text x="18.2894%" y="1167.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (27 samples, 0.02%)</title><rect x="18.0394%" y="1141" width="0.0229%" height="15" fill="rgb(222,178,2)" fg:x="21236" fg:w="27"/><text x="18.2894%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (26 samples, 0.02%)</title><rect x="18.0403%" y="1125" width="0.0221%" height="15" fill="rgb(226,74,18)" fg:x="21237" fg:w="26"/><text x="18.2903%" y="1135.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (26 samples, 0.02%)</title><rect x="18.0403%" y="1109" width="0.0221%" height="15" fill="rgb(225,67,54)" fg:x="21237" fg:w="26"/><text x="18.2903%" y="1119.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (26 samples, 0.02%)</title><rect x="18.0403%" y="1093" width="0.0221%" height="15" fill="rgb(251,92,32)" fg:x="21237" fg:w="26"/><text x="18.2903%" y="1103.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (26 samples, 0.02%)</title><rect x="18.0403%" y="1077" width="0.0221%" height="15" fill="rgb(228,149,22)" fg:x="21237" fg:w="26"/><text x="18.2903%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (26 samples, 0.02%)</title><rect x="18.0403%" y="1061" width="0.0221%" height="15" fill="rgb(243,54,13)" fg:x="21237" fg:w="26"/><text x="18.2903%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (26 samples, 0.02%)</title><rect x="18.0403%" y="1045" width="0.0221%" height="15" fill="rgb(243,180,28)" fg:x="21237" fg:w="26"/><text x="18.2903%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (26 samples, 0.02%)</title><rect x="18.0403%" y="1029" width="0.0221%" height="15" fill="rgb(208,167,24)" fg:x="21237" fg:w="26"/><text x="18.2903%" y="1039.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (26 samples, 0.02%)</title><rect x="18.0403%" y="1013" width="0.0221%" height="15" fill="rgb(245,73,45)" fg:x="21237" fg:w="26"/><text x="18.2903%" y="1023.50"></text></g><g><title>CCoinsViewCache::FetchCoin (49 samples, 0.04%)</title><rect x="18.0980%" y="1077" width="0.0416%" height="15" fill="rgb(237,203,48)" fg:x="21305" fg:w="49"/><text x="18.3480%" y="1087.50"></text></g><g><title>CCoinsViewCache::GetCoin (15 samples, 0.01%)</title><rect x="18.1397%" y="1077" width="0.0127%" height="15" fill="rgb(211,197,16)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="1087.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (15 samples, 0.01%)</title><rect x="18.1397%" y="1061" width="0.0127%" height="15" fill="rgb(243,99,51)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="1071.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (15 samples, 0.01%)</title><rect x="18.1397%" y="1045" width="0.0127%" height="15" fill="rgb(215,123,29)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="1055.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (15 samples, 0.01%)</title><rect x="18.1397%" y="1029" width="0.0127%" height="15" fill="rgb(239,186,37)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (15 samples, 0.01%)</title><rect x="18.1397%" y="1013" width="0.0127%" height="15" fill="rgb(252,136,39)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="1023.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (15 samples, 0.01%)</title><rect x="18.1397%" y="997" width="0.0127%" height="15" fill="rgb(223,213,32)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (15 samples, 0.01%)</title><rect x="18.1397%" y="981" width="0.0127%" height="15" fill="rgb(233,115,5)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="991.50"></text></g><g><title>Coin::Coin (15 samples, 0.01%)</title><rect x="18.1397%" y="965" width="0.0127%" height="15" fill="rgb(207,226,44)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="975.50"></text></g><g><title>CTxOut::CTxOut (15 samples, 0.01%)</title><rect x="18.1397%" y="949" width="0.0127%" height="15" fill="rgb(208,126,0)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="959.50"></text></g><g><title>CScript::CScript (15 samples, 0.01%)</title><rect x="18.1397%" y="933" width="0.0127%" height="15" fill="rgb(244,66,21)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="943.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (15 samples, 0.01%)</title><rect x="18.1397%" y="917" width="0.0127%" height="15" fill="rgb(222,97,12)" fg:x="21354" fg:w="15"/><text x="18.3897%" y="927.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (14 samples, 0.01%)</title><rect x="18.1405%" y="901" width="0.0119%" height="15" fill="rgb(219,213,19)" fg:x="21355" fg:w="14"/><text x="18.3905%" y="911.50"></text></g><g><title>SipHashUint256Extra (69 samples, 0.06%)</title><rect x="18.1694%" y="1077" width="0.0586%" height="15" fill="rgb(252,169,30)" fg:x="21389" fg:w="69"/><text x="18.4194%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (27 samples, 0.02%)</title><rect x="18.2051%" y="1061" width="0.0229%" height="15" fill="rgb(206,32,51)" fg:x="21431" fg:w="27"/><text x="18.4551%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (27 samples, 0.02%)</title><rect x="18.2051%" y="1045" width="0.0229%" height="15" fill="rgb(250,172,42)" fg:x="21431" fg:w="27"/><text x="18.4551%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (159 samples, 0.14%)</title><rect x="18.0963%" y="1093" width="0.1351%" height="15" fill="rgb(209,34,43)" fg:x="21303" fg:w="159"/><text x="18.3463%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (44 samples, 0.04%)</title><rect x="18.2322%" y="1061" width="0.0374%" height="15" fill="rgb(223,11,35)" fg:x="21463" fg:w="44"/><text x="18.4822%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (23 samples, 0.02%)</title><rect x="18.2696%" y="1061" width="0.0195%" height="15" fill="rgb(251,219,26)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="1071.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (23 samples, 0.02%)</title><rect x="18.2696%" y="1045" width="0.0195%" height="15" fill="rgb(231,119,3)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="1055.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (23 samples, 0.02%)</title><rect x="18.2696%" y="1029" width="0.0195%" height="15" fill="rgb(216,97,11)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (23 samples, 0.02%)</title><rect x="18.2696%" y="1013" width="0.0195%" height="15" fill="rgb(223,59,9)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="1023.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (23 samples, 0.02%)</title><rect x="18.2696%" y="997" width="0.0195%" height="15" fill="rgb(233,93,31)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (23 samples, 0.02%)</title><rect x="18.2696%" y="981" width="0.0195%" height="15" fill="rgb(239,81,33)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="991.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (23 samples, 0.02%)</title><rect x="18.2696%" y="965" width="0.0195%" height="15" fill="rgb(213,120,34)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="975.50"></text></g><g><title>Coin::Coin (23 samples, 0.02%)</title><rect x="18.2696%" y="949" width="0.0195%" height="15" fill="rgb(243,49,53)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="959.50"></text></g><g><title>CTxOut::CTxOut (23 samples, 0.02%)</title><rect x="18.2696%" y="933" width="0.0195%" height="15" fill="rgb(247,216,33)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="943.50"></text></g><g><title>CScript::CScript (23 samples, 0.02%)</title><rect x="18.2696%" y="917" width="0.0195%" height="15" fill="rgb(226,26,14)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="927.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (23 samples, 0.02%)</title><rect x="18.2696%" y="901" width="0.0195%" height="15" fill="rgb(215,49,53)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="911.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (23 samples, 0.02%)</title><rect x="18.2696%" y="885" width="0.0195%" height="15" fill="rgb(245,162,40)" fg:x="21507" fg:w="23"/><text x="18.5196%" y="895.50"></text></g><g><title>SipHashUint256Extra (24 samples, 0.02%)</title><rect x="18.3028%" y="1061" width="0.0204%" height="15" fill="rgb(229,68,17)" fg:x="21546" fg:w="24"/><text x="18.5528%" y="1071.50"></text></g><g><title>CCoinsViewCache::FetchCoin (302 samples, 0.26%)</title><rect x="18.0725%" y="1141" width="0.2565%" height="15" fill="rgb(213,182,10)" fg:x="21275" fg:w="302"/><text x="18.3225%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (278 samples, 0.24%)</title><rect x="18.0929%" y="1125" width="0.2362%" height="15" fill="rgb(245,125,30)" fg:x="21299" fg:w="278"/><text x="18.3429%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (274 samples, 0.23%)</title><rect x="18.0963%" y="1109" width="0.2328%" height="15" fill="rgb(232,202,2)" fg:x="21303" fg:w="274"/><text x="18.3463%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (115 samples, 0.10%)</title><rect x="18.2314%" y="1093" width="0.0977%" height="15" fill="rgb(237,140,51)" fg:x="21462" fg:w="115"/><text x="18.4814%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (115 samples, 0.10%)</title><rect x="18.2314%" y="1077" width="0.0977%" height="15" fill="rgb(236,157,25)" fg:x="21462" fg:w="115"/><text x="18.4814%" y="1087.50"></text></g><g><title>CCoinsViewCache::GetCoin (64 samples, 0.05%)</title><rect x="18.3291%" y="1141" width="0.0544%" height="15" fill="rgb(219,209,0)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (64 samples, 0.05%)</title><rect x="18.3291%" y="1125" width="0.0544%" height="15" fill="rgb(240,116,54)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (64 samples, 0.05%)</title><rect x="18.3291%" y="1109" width="0.0544%" height="15" fill="rgb(216,10,36)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (64 samples, 0.05%)</title><rect x="18.3291%" y="1093" width="0.0544%" height="15" fill="rgb(222,72,44)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (64 samples, 0.05%)</title><rect x="18.3291%" y="1077" width="0.0544%" height="15" fill="rgb(232,159,9)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (64 samples, 0.05%)</title><rect x="18.3291%" y="1061" width="0.0544%" height="15" fill="rgb(210,39,32)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (64 samples, 0.05%)</title><rect x="18.3291%" y="1045" width="0.0544%" height="15" fill="rgb(216,194,45)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1055.50"></text></g><g><title>Coin::Coin (64 samples, 0.05%)</title><rect x="18.3291%" y="1029" width="0.0544%" height="15" fill="rgb(218,18,35)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (64 samples, 0.05%)</title><rect x="18.3291%" y="1013" width="0.0544%" height="15" fill="rgb(207,83,51)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1023.50"></text></g><g><title>CScript::CScript (64 samples, 0.05%)</title><rect x="18.3291%" y="997" width="0.0544%" height="15" fill="rgb(225,63,43)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (64 samples, 0.05%)</title><rect x="18.3291%" y="981" width="0.0544%" height="15" fill="rgb(207,57,36)" fg:x="21577" fg:w="64"/><text x="18.5791%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (63 samples, 0.05%)</title><rect x="18.3299%" y="965" width="0.0535%" height="15" fill="rgb(216,99,33)" fg:x="21578" fg:w="63"/><text x="18.5799%" y="975.50"></text></g><g><title>SipHashUint256Extra (19 samples, 0.02%)</title><rect x="18.3902%" y="1141" width="0.0161%" height="15" fill="rgb(225,42,16)" fg:x="21649" fg:w="19"/><text x="18.6402%" y="1151.50"></text></g><g><title>CCoinsViewCache::AccessCoin (396 samples, 0.34%)</title><rect x="18.0717%" y="1157" width="0.3364%" height="15" fill="rgb(220,201,45)" fg:x="21274" fg:w="396"/><text x="18.3217%" y="1167.50"></text></g><g><title>Coin::operator= (12 samples, 0.01%)</title><rect x="18.4344%" y="1141" width="0.0102%" height="15" fill="rgb(225,33,4)" fg:x="21701" fg:w="12"/><text x="18.6844%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (47 samples, 0.04%)</title><rect x="18.4098%" y="1157" width="0.0399%" height="15" fill="rgb(224,33,50)" fg:x="21672" fg:w="47"/><text x="18.6598%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (12 samples, 0.01%)</title><rect x="18.4548%" y="981" width="0.0102%" height="15" fill="rgb(246,198,51)" fg:x="21725" fg:w="12"/><text x="18.7048%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (12 samples, 0.01%)</title><rect x="18.4548%" y="965" width="0.0102%" height="15" fill="rgb(205,22,4)" fg:x="21725" fg:w="12"/><text x="18.7048%" y="975.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (12 samples, 0.01%)</title><rect x="18.4548%" y="949" width="0.0102%" height="15" fill="rgb(206,3,8)" fg:x="21725" fg:w="12"/><text x="18.7048%" y="959.50"></text></g><g><title>CCoinsViewCache::GetCoin (356 samples, 0.30%)</title><rect x="18.4497%" y="1157" width="0.3024%" height="15" fill="rgb(251,23,15)" fg:x="21719" fg:w="356"/><text x="18.6997%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (354 samples, 0.30%)</title><rect x="18.4514%" y="1141" width="0.3007%" height="15" fill="rgb(252,88,28)" fg:x="21721" fg:w="354"/><text x="18.7014%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (353 samples, 0.30%)</title><rect x="18.4523%" y="1125" width="0.2999%" height="15" fill="rgb(212,127,14)" fg:x="21722" fg:w="353"/><text x="18.7023%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (353 samples, 0.30%)</title><rect x="18.4523%" y="1109" width="0.2999%" height="15" fill="rgb(247,145,37)" fg:x="21722" fg:w="353"/><text x="18.7023%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (353 samples, 0.30%)</title><rect x="18.4523%" y="1093" width="0.2999%" height="15" fill="rgb(209,117,53)" fg:x="21722" fg:w="353"/><text x="18.7023%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (353 samples, 0.30%)</title><rect x="18.4523%" y="1077" width="0.2999%" height="15" fill="rgb(212,90,42)" fg:x="21722" fg:w="353"/><text x="18.7023%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (352 samples, 0.30%)</title><rect x="18.4531%" y="1061" width="0.2990%" height="15" fill="rgb(218,164,37)" fg:x="21723" fg:w="352"/><text x="18.7031%" y="1071.50"></text></g><g><title>Coin::Coin (352 samples, 0.30%)</title><rect x="18.4531%" y="1045" width="0.2990%" height="15" fill="rgb(246,65,34)" fg:x="21723" fg:w="352"/><text x="18.7031%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (352 samples, 0.30%)</title><rect x="18.4531%" y="1029" width="0.2990%" height="15" fill="rgb(231,100,33)" fg:x="21723" fg:w="352"/><text x="18.7031%" y="1039.50"></text></g><g><title>CScript::CScript (352 samples, 0.30%)</title><rect x="18.4531%" y="1013" width="0.2990%" height="15" fill="rgb(228,126,14)" fg:x="21723" fg:w="352"/><text x="18.7031%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (352 samples, 0.30%)</title><rect x="18.4531%" y="997" width="0.2990%" height="15" fill="rgb(215,173,21)" fg:x="21723" fg:w="352"/><text x="18.7031%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (336 samples, 0.29%)</title><rect x="18.4667%" y="981" width="0.2854%" height="15" fill="rgb(210,6,40)" fg:x="21739" fg:w="336"/><text x="18.7167%" y="991.50"></text></g><g><title>Compare (16 samples, 0.01%)</title><rect x="18.8430%" y="917" width="0.0136%" height="15" fill="rgb(212,48,18)" fg:x="22182" fg:w="16"/><text x="19.0930%" y="927.50"></text></g><g><title>leveldb::Slice::compare (16 samples, 0.01%)</title><rect x="18.8430%" y="901" width="0.0136%" height="15" fill="rgb(230,214,11)" fg:x="22182" fg:w="16"/><text x="19.0930%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (52 samples, 0.04%)</title><rect x="18.8566%" y="917" width="0.0442%" height="15" fill="rgb(254,105,39)" fg:x="22198" fg:w="52"/><text x="19.1066%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (58 samples, 0.05%)</title><rect x="18.9025%" y="917" width="0.0493%" height="15" fill="rgb(245,158,5)" fg:x="22252" fg:w="58"/><text x="19.1525%" y="927.50"></text></g><g><title>GetLengthPrefixedSlice (264 samples, 0.22%)</title><rect x="19.6687%" y="901" width="0.2243%" height="15" fill="rgb(249,208,11)" fg:x="23154" fg:w="264"/><text x="19.9187%" y="911.50"></text></g><g><title>leveldb::GetVarint32Ptr (244 samples, 0.21%)</title><rect x="19.6857%" y="885" width="0.2073%" height="15" fill="rgb(210,39,28)" fg:x="23174" fg:w="244"/><text x="19.9357%" y="895.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1,128 samples, 0.96%)</title><rect x="18.9526%" y="917" width="0.9582%" height="15" fill="rgb(211,56,53)" fg:x="22311" fg:w="1128"/><text x="19.2026%" y="927.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (21 samples, 0.02%)</title><rect x="19.8930%" y="901" width="0.0178%" height="15" fill="rgb(226,201,30)" fg:x="23418" fg:w="21"/><text x="20.1430%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (23 samples, 0.02%)</title><rect x="19.9635%" y="885" width="0.0195%" height="15" fill="rgb(239,101,34)" fg:x="23501" fg:w="23"/><text x="20.2135%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (29 samples, 0.02%)</title><rect x="19.9864%" y="885" width="0.0246%" height="15" fill="rgb(226,209,5)" fg:x="23528" fg:w="29"/><text x="20.2364%" y="895.50"></text></g><g><title>GetLengthPrefixedSlice (61 samples, 0.05%)</title><rect x="20.1911%" y="869" width="0.0518%" height="15" fill="rgb(250,105,47)" fg:x="23769" fg:w="61"/><text x="20.4411%" y="879.50"></text></g><g><title>leveldb::GetVarint32Ptr (56 samples, 0.05%)</title><rect x="20.1954%" y="853" width="0.0476%" height="15" fill="rgb(230,72,3)" fg:x="23774" fg:w="56"/><text x="20.4454%" y="863.50"></text></g><g><title>__memcmp_evex_movbe (21 samples, 0.02%)</title><rect x="20.3033%" y="821" width="0.0178%" height="15" fill="rgb(232,218,39)" fg:x="23901" fg:w="21"/><text x="20.5533%" y="831.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (57 samples, 0.05%)</title><rect x="20.2812%" y="853" width="0.0484%" height="15" fill="rgb(248,166,6)" fg:x="23875" fg:w="57"/><text x="20.5312%" y="863.50"></text></g><g><title>leveldb::Slice::compare (39 samples, 0.03%)</title><rect x="20.2965%" y="837" width="0.0331%" height="15" fill="rgb(247,89,20)" fg:x="23893" fg:w="39"/><text x="20.5465%" y="847.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (79 samples, 0.07%)</title><rect x="20.3372%" y="853" width="0.0671%" height="15" fill="rgb(248,130,54)" fg:x="23941" fg:w="79"/><text x="20.5872%" y="863.50"></text></g><g><title>GetLengthPrefixedSlice (27 samples, 0.02%)</title><rect x="20.4927%" y="837" width="0.0229%" height="15" fill="rgb(234,196,4)" fg:x="24124" fg:w="27"/><text x="20.7427%" y="847.50"></text></g><g><title>leveldb::GetVarint32Ptr (26 samples, 0.02%)</title><rect x="20.4935%" y="821" width="0.0221%" height="15" fill="rgb(250,143,31)" fg:x="24125" fg:w="26"/><text x="20.7435%" y="831.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (131 samples, 0.11%)</title><rect x="20.4094%" y="853" width="0.1113%" height="15" fill="rgb(211,110,34)" fg:x="24026" fg:w="131"/><text x="20.6594%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (354 samples, 0.30%)</title><rect x="20.2565%" y="869" width="0.3007%" height="15" fill="rgb(215,124,48)" fg:x="23846" fg:w="354"/><text x="20.5065%" y="879.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (43 samples, 0.04%)</title><rect x="20.5207%" y="853" width="0.0365%" height="15" fill="rgb(216,46,13)" fg:x="24157" fg:w="43"/><text x="20.7707%" y="863.50"></text></g><g><title>GetLengthPrefixedSlice (73 samples, 0.06%)</title><rect x="20.6481%" y="853" width="0.0620%" height="15" fill="rgb(205,184,25)" fg:x="24307" fg:w="73"/><text x="20.8981%" y="863.50"></text></g><g><title>leveldb::GetVarint32Ptr (64 samples, 0.05%)</title><rect x="20.6558%" y="837" width="0.0544%" height="15" fill="rgb(228,1,10)" fg:x="24316" fg:w="64"/><text x="20.9058%" y="847.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (177 samples, 0.15%)</title><rect x="20.5649%" y="869" width="0.1504%" height="15" fill="rgb(213,116,27)" fg:x="24209" fg:w="177"/><text x="20.8149%" y="879.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (834 samples, 0.71%)</title><rect x="20.0153%" y="885" width="0.7085%" height="15" fill="rgb(241,95,50)" fg:x="23562" fg:w="834"/><text x="20.2653%" y="895.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (20 samples, 0.02%)</title><rect x="20.7399%" y="869" width="0.0170%" height="15" fill="rgb(238,48,32)" fg:x="24415" fg:w="20"/><text x="20.9899%" y="879.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (55 samples, 0.05%)</title><rect x="20.7238%" y="885" width="0.0467%" height="15" fill="rgb(235,113,49)" fg:x="24396" fg:w="55"/><text x="20.9738%" y="895.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (16 samples, 0.01%)</title><rect x="20.7569%" y="869" width="0.0136%" height="15" fill="rgb(205,127,43)" fg:x="24435" fg:w="16"/><text x="21.0069%" y="879.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (12 samples, 0.01%)</title><rect x="20.7603%" y="853" width="0.0102%" height="15" fill="rgb(250,162,2)" fg:x="24439" fg:w="12"/><text x="21.0103%" y="863.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (12 samples, 0.01%)</title><rect x="20.7603%" y="837" width="0.0102%" height="15" fill="rgb(220,13,41)" fg:x="24439" fg:w="12"/><text x="21.0103%" y="847.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (980 samples, 0.83%)</title><rect x="19.9388%" y="901" width="0.8325%" height="15" fill="rgb(249,221,25)" fg:x="23472" fg:w="980"/><text x="20.1888%" y="911.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,051 samples, 0.89%)</title><rect x="19.9108%" y="917" width="0.8928%" height="15" fill="rgb(215,208,19)" fg:x="23439" fg:w="1051"/><text x="20.1608%" y="927.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (38 samples, 0.03%)</title><rect x="20.7713%" y="901" width="0.0323%" height="15" fill="rgb(236,175,2)" fg:x="24452" fg:w="38"/><text x="21.0213%" y="911.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (33 samples, 0.03%)</title><rect x="20.7756%" y="885" width="0.0280%" height="15" fill="rgb(241,52,2)" fg:x="24457" fg:w="33"/><text x="21.0256%" y="895.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (33 samples, 0.03%)</title><rect x="20.7756%" y="869" width="0.0280%" height="15" fill="rgb(248,140,14)" fg:x="24457" fg:w="33"/><text x="21.0256%" y="879.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="20.7883%" y="853" width="0.0153%" height="15" fill="rgb(253,22,42)" fg:x="24472" fg:w="18"/><text x="21.0383%" y="863.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="20.7883%" y="837" width="0.0153%" height="15" fill="rgb(234,61,47)" fg:x="24472" fg:w="18"/><text x="21.0383%" y="847.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="20.7900%" y="821" width="0.0136%" height="15" fill="rgb(208,226,15)" fg:x="24474" fg:w="16"/><text x="21.0400%" y="831.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="20.7900%" y="805" width="0.0136%" height="15" fill="rgb(217,221,4)" fg:x="24474" fg:w="16"/><text x="21.0400%" y="815.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="20.7909%" y="789" width="0.0127%" height="15" fill="rgb(212,174,34)" fg:x="24475" fg:w="15"/><text x="21.0409%" y="799.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="20.7926%" y="773" width="0.0110%" height="15" fill="rgb(253,83,4)" fg:x="24477" fg:w="13"/><text x="21.0426%" y="783.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Seek (2,309 samples, 1.96%)</title><rect x="18.8430%" y="933" width="1.9614%" height="15" fill="rgb(250,195,49)" fg:x="22182" fg:w="2309"/><text x="19.0930%" y="943.50">l..</text></g><g><title>leveldb::MemTable::Get (2,324 samples, 1.97%)</title><rect x="18.8320%" y="949" width="1.9742%" height="15" fill="rgb(241,192,25)" fg:x="22169" fg:w="2324"/><text x="19.0820%" y="959.50">l..</text></g><g><title>GetLengthPrefixedSlice (23 samples, 0.02%)</title><rect x="20.8716%" y="933" width="0.0195%" height="15" fill="rgb(208,124,10)" fg:x="24570" fg:w="23"/><text x="21.1216%" y="943.50"></text></g><g><title>leveldb::GetVarint32Ptr (22 samples, 0.02%)</title><rect x="20.8724%" y="917" width="0.0187%" height="15" fill="rgb(222,33,0)" fg:x="24571" fg:w="22"/><text x="21.1224%" y="927.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (102 samples, 0.09%)</title><rect x="20.8062%" y="949" width="0.0866%" height="15" fill="rgb(234,209,28)" fg:x="24493" fg:w="102"/><text x="21.0562%" y="959.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (91 samples, 0.08%)</title><rect x="20.9463%" y="933" width="0.0773%" height="15" fill="rgb(224,11,23)" fg:x="24658" fg:w="91"/><text x="21.1963%" y="943.50"></text></g><g><title>GetLengthPrefixedSlice (24 samples, 0.02%)</title><rect x="21.0032%" y="917" width="0.0204%" height="15" fill="rgb(232,99,1)" fg:x="24725" fg:w="24"/><text x="21.2532%" y="927.50"></text></g><g><title>leveldb::GetVarint32Ptr (23 samples, 0.02%)</title><rect x="21.0041%" y="901" width="0.0195%" height="15" fill="rgb(237,95,45)" fg:x="24726" fg:w="23"/><text x="21.2541%" y="911.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (15 samples, 0.01%)</title><rect x="21.0245%" y="933" width="0.0127%" height="15" fill="rgb(208,109,11)" fg:x="24750" fg:w="15"/><text x="21.2745%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (59 samples, 0.05%)</title><rect x="21.0440%" y="917" width="0.0501%" height="15" fill="rgb(216,190,48)" fg:x="24773" fg:w="59"/><text x="21.2940%" y="927.50"></text></g><g><title>leveldb::Slice::compare (27 samples, 0.02%)</title><rect x="21.0712%" y="901" width="0.0229%" height="15" fill="rgb(251,171,36)" fg:x="24805" fg:w="27"/><text x="21.3212%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (13 samples, 0.01%)</title><rect x="21.1281%" y="901" width="0.0110%" height="15" fill="rgb(230,62,22)" fg:x="24872" fg:w="13"/><text x="21.3781%" y="911.50"></text></g><g><title>leveldb::FindFile (20 samples, 0.02%)</title><rect x="21.1391%" y="901" width="0.0170%" height="15" fill="rgb(225,114,35)" fg:x="24885" fg:w="20"/><text x="21.3891%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (66 samples, 0.06%)</title><rect x="21.1757%" y="885" width="0.0561%" height="15" fill="rgb(215,118,42)" fg:x="24928" fg:w="66"/><text x="21.4257%" y="895.50"></text></g><g><title>leveldb::Slice::compare (36 samples, 0.03%)</title><rect x="21.2012%" y="869" width="0.0306%" height="15" fill="rgb(243,119,21)" fg:x="24958" fg:w="36"/><text x="21.4512%" y="879.50"></text></g><g><title>leveldb::FindFile (39 samples, 0.03%)</title><rect x="21.2351%" y="885" width="0.0331%" height="15" fill="rgb(252,177,53)" fg:x="24998" fg:w="39"/><text x="21.4851%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (33 samples, 0.03%)</title><rect x="21.2683%" y="885" width="0.0280%" height="15" fill="rgb(237,209,29)" fg:x="25037" fg:w="33"/><text x="21.5183%" y="895.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (18 samples, 0.02%)</title><rect x="21.2971%" y="885" width="0.0153%" height="15" fill="rgb(212,65,23)" fg:x="25071" fg:w="18"/><text x="21.5471%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (182 samples, 0.15%)</title><rect x="21.1612%" y="901" width="0.1546%" height="15" fill="rgb(230,222,46)" fg:x="24911" fg:w="182"/><text x="21.4112%" y="911.50"></text></g><g><title>leveldb::FindFile (269 samples, 0.23%)</title><rect x="21.1026%" y="917" width="0.2285%" height="15" fill="rgb(215,135,32)" fg:x="24842" fg:w="269"/><text x="21.3526%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (23 samples, 0.02%)</title><rect x="21.3328%" y="917" width="0.0195%" height="15" fill="rgb(246,101,22)" fg:x="25113" fg:w="23"/><text x="21.5828%" y="927.50"></text></g><g><title>leveldb::MemTable::Get (23 samples, 0.02%)</title><rect x="21.3566%" y="917" width="0.0195%" height="15" fill="rgb(206,107,13)" fg:x="25141" fg:w="23"/><text x="21.6066%" y="927.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (13 samples, 0.01%)</title><rect x="21.3761%" y="917" width="0.0110%" height="15" fill="rgb(250,100,44)" fg:x="25164" fg:w="13"/><text x="21.6261%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (33 samples, 0.03%)</title><rect x="21.4220%" y="885" width="0.0280%" height="15" fill="rgb(231,147,38)" fg:x="25218" fg:w="33"/><text x="21.6720%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Release (17 samples, 0.01%)</title><rect x="21.4645%" y="885" width="0.0144%" height="15" fill="rgb(229,8,40)" fg:x="25268" fg:w="17"/><text x="21.7145%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Release (14 samples, 0.01%)</title><rect x="21.4670%" y="869" width="0.0119%" height="15" fill="rgb(221,135,30)" fg:x="25271" fg:w="14"/><text x="21.7170%" y="879.50"></text></g><g><title>leveldb::Block::Iter::status (14 samples, 0.01%)</title><rect x="21.4857%" y="885" width="0.0119%" height="15" fill="rgb(249,193,18)" fg:x="25293" fg:w="14"/><text x="21.7357%" y="895.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 0.01%)</title><rect x="21.5528%" y="869" width="0.0110%" height="15" fill="rgb(209,133,39)" fg:x="25372" fg:w="13"/><text x="21.8028%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (919 samples, 0.78%)</title><rect x="21.5639%" y="869" width="0.7807%" height="15" fill="rgb(232,100,14)" fg:x="25385" fg:w="919"/><text x="21.8139%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (50 samples, 0.04%)</title><rect x="22.3445%" y="869" width="0.0425%" height="15" fill="rgb(224,185,1)" fg:x="26304" fg:w="50"/><text x="22.5945%" y="879.50"></text></g><g><title>leveldb::Slice::compare (17 samples, 0.01%)</title><rect x="22.3726%" y="853" width="0.0144%" height="15" fill="rgb(223,139,8)" fg:x="26337" fg:w="17"/><text x="22.6226%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (14 samples, 0.01%)</title><rect x="22.3870%" y="869" width="0.0119%" height="15" fill="rgb(232,213,38)" fg:x="26354" fg:w="14"/><text x="22.6370%" y="879.50"></text></g><g><title>leveldb::Block::Block (12 samples, 0.01%)</title><rect x="22.4040%" y="869" width="0.0102%" height="15" fill="rgb(207,94,22)" fg:x="26374" fg:w="12"/><text x="22.6540%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (15 samples, 0.01%)</title><rect x="22.4456%" y="853" width="0.0127%" height="15" fill="rgb(219,183,54)" fg:x="26423" fg:w="15"/><text x="22.6956%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (18 samples, 0.02%)</title><rect x="22.4584%" y="837" width="0.0153%" height="15" fill="rgb(216,185,54)" fg:x="26438" fg:w="18"/><text x="22.7084%" y="847.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (71 samples, 0.06%)</title><rect x="22.4142%" y="869" width="0.0603%" height="15" fill="rgb(254,217,39)" fg:x="26386" fg:w="71"/><text x="22.6642%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (19 samples, 0.02%)</title><rect x="22.4584%" y="853" width="0.0161%" height="15" fill="rgb(240,178,23)" fg:x="26438" fg:w="19"/><text x="22.7084%" y="863.50"></text></g><g><title>[[igc]] (14 samples, 0.01%)</title><rect x="22.7090%" y="741" width="0.0119%" height="15" fill="rgb(218,11,47)" fg:x="26733" fg:w="14"/><text x="22.9590%" y="751.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="22.7107%" y="725" width="0.0102%" height="15" fill="rgb(218,51,51)" fg:x="26735" fg:w="12"/><text x="22.9607%" y="735.50"></text></g><g><title>DecodeEntry (56 samples, 0.05%)</title><rect x="22.6775%" y="853" width="0.0476%" height="15" fill="rgb(238,126,27)" fg:x="26696" fg:w="56"/><text x="22.9275%" y="863.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="22.7064%" y="837" width="0.0187%" height="15" fill="rgb(249,202,22)" fg:x="26730" fg:w="22"/><text x="22.9564%" y="847.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="22.7064%" y="821" width="0.0187%" height="15" fill="rgb(254,195,49)" fg:x="26730" fg:w="22"/><text x="22.9564%" y="831.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="22.7064%" y="805" width="0.0187%" height="15" fill="rgb(208,123,14)" fg:x="26730" fg:w="22"/><text x="22.9564%" y="815.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="22.7081%" y="789" width="0.0170%" height="15" fill="rgb(224,200,8)" fg:x="26732" fg:w="20"/><text x="22.9581%" y="799.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="22.7081%" y="773" width="0.0170%" height="15" fill="rgb(217,61,36)" fg:x="26732" fg:w="20"/><text x="22.9581%" y="783.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="22.7090%" y="757" width="0.0161%" height="15" fill="rgb(206,35,45)" fg:x="26733" fg:w="19"/><text x="22.9590%" y="767.50"></text></g><g><title>leveldb::Block::Iter::Seek (26 samples, 0.02%)</title><rect x="23.0377%" y="837" width="0.0221%" height="15" fill="rgb(217,65,33)" fg:x="27120" fg:w="26"/><text x="23.2877%" y="847.50"></text></g><g><title>leveldb::Block::NewIterator (16 samples, 0.01%)</title><rect x="23.0598%" y="837" width="0.0136%" height="15" fill="rgb(222,158,48)" fg:x="27146" fg:w="16"/><text x="23.3098%" y="847.50"></text></g><g><title>__memcmp_evex_movbe (102 samples, 0.09%)</title><rect x="23.1091%" y="789" width="0.0866%" height="15" fill="rgb(254,2,54)" fg:x="27204" fg:w="102"/><text x="23.3591%" y="799.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (16 samples, 0.01%)</title><rect x="23.1983%" y="789" width="0.0136%" height="15" fill="rgb(250,143,38)" fg:x="27309" fg:w="16"/><text x="23.4483%" y="799.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (151 samples, 0.13%)</title><rect x="23.0904%" y="821" width="0.1283%" height="15" fill="rgb(248,25,0)" fg:x="27182" fg:w="151"/><text x="23.3404%" y="831.50"></text></g><g><title>leveldb::Slice::compare (133 samples, 0.11%)</title><rect x="23.1057%" y="805" width="0.1130%" height="15" fill="rgb(206,152,27)" fg:x="27200" fg:w="133"/><text x="23.3557%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Compare (43 samples, 0.04%)</title><rect x="23.3078%" y="805" width="0.0365%" height="15" fill="rgb(240,77,30)" fg:x="27438" fg:w="43"/><text x="23.5578%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Seek (163 samples, 0.14%)</title><rect x="23.2187%" y="821" width="0.1385%" height="15" fill="rgb(231,5,3)" fg:x="27333" fg:w="163"/><text x="23.4687%" y="831.50"></text></g><g><title>leveldb::Block::NewIterator (36 samples, 0.03%)</title><rect x="23.3571%" y="821" width="0.0306%" height="15" fill="rgb(207,226,32)" fg:x="27496" fg:w="36"/><text x="23.6071%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Iter (18 samples, 0.02%)</title><rect x="23.3724%" y="805" width="0.0153%" height="15" fill="rgb(222,207,47)" fg:x="27514" fg:w="18"/><text x="23.6224%" y="815.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (80 samples, 0.07%)</title><rect x="23.3877%" y="821" width="0.0680%" height="15" fill="rgb(229,115,45)" fg:x="27532" fg:w="80"/><text x="23.6377%" y="831.50"></text></g><g><title>leveldb::Iterator::Iterator (12 samples, 0.01%)</title><rect x="23.4557%" y="821" width="0.0102%" height="15" fill="rgb(224,191,6)" fg:x="27612" fg:w="12"/><text x="23.7057%" y="831.50"></text></g><g><title>leveldb::Iterator::RegisterCleanup (12 samples, 0.01%)</title><rect x="23.4659%" y="821" width="0.0102%" height="15" fill="rgb(230,227,24)" fg:x="27624" fg:w="12"/><text x="23.7159%" y="831.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (477 samples, 0.41%)</title><rect x="23.0734%" y="837" width="0.4052%" height="15" fill="rgb(228,80,19)" fg:x="27162" fg:w="477"/><text x="23.3234%" y="847.50"></text></g><g><title>leveldb::Block::Iter::Compare (899 samples, 0.76%)</title><rect x="22.7268%" y="853" width="0.7637%" height="15" fill="rgb(247,229,0)" fg:x="26754" fg:w="899"/><text x="22.9768%" y="863.50"></text></g><g><title>[[igc]] (14 samples, 0.01%)</title><rect x="23.5228%" y="741" width="0.0119%" height="15" fill="rgb(237,194,15)" fg:x="27691" fg:w="14"/><text x="23.7728%" y="751.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="23.5168%" y="837" width="0.0263%" height="15" fill="rgb(219,203,20)" fg:x="27684" fg:w="31"/><text x="23.7668%" y="847.50"></text></g><g><title>[unknown] (30 samples, 0.03%)</title><rect x="23.5177%" y="821" width="0.0255%" height="15" fill="rgb(234,128,8)" fg:x="27685" fg:w="30"/><text x="23.7677%" y="831.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="23.5185%" y="805" width="0.0246%" height="15" fill="rgb(248,202,8)" fg:x="27686" fg:w="29"/><text x="23.7685%" y="815.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="23.5219%" y="789" width="0.0212%" height="15" fill="rgb(206,104,37)" fg:x="27690" fg:w="25"/><text x="23.7719%" y="799.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="23.5219%" y="773" width="0.0212%" height="15" fill="rgb(223,8,27)" fg:x="27690" fg:w="25"/><text x="23.7719%" y="783.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="23.5219%" y="757" width="0.0212%" height="15" fill="rgb(216,217,28)" fg:x="27690" fg:w="25"/><text x="23.7719%" y="767.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (13 samples, 0.01%)</title><rect x="23.5432%" y="837" width="0.0110%" height="15" fill="rgb(249,199,1)" fg:x="27715" fg:w="13"/><text x="23.7932%" y="847.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (29 samples, 0.02%)</title><rect x="23.5720%" y="821" width="0.0246%" height="15" fill="rgb(240,85,17)" fg:x="27749" fg:w="29"/><text x="23.8220%" y="831.50"></text></g><g><title>__memcmp_evex_movbe (33 samples, 0.03%)</title><rect x="23.6485%" y="773" width="0.0280%" height="15" fill="rgb(206,108,45)" fg:x="27839" fg:w="33"/><text x="23.8985%" y="783.50"></text></g><g><title>__memmove_avx512_unaligned_erms (47 samples, 0.04%)</title><rect x="23.6765%" y="773" width="0.0399%" height="15" fill="rgb(245,210,41)" fg:x="27872" fg:w="47"/><text x="23.9265%" y="783.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (150 samples, 0.13%)</title><rect x="23.6154%" y="805" width="0.1274%" height="15" fill="rgb(206,13,37)" fg:x="27800" fg:w="150"/><text x="23.8654%" y="815.50"></text></g><g><title>leveldb::Slice::compare (122 samples, 0.10%)</title><rect x="23.6391%" y="789" width="0.1036%" height="15" fill="rgb(250,61,18)" fg:x="27828" fg:w="122"/><text x="23.8891%" y="799.50"></text></g><g><title>DecodeEntry (22 samples, 0.02%)</title><rect x="23.7734%" y="789" width="0.0187%" height="15" fill="rgb(235,172,48)" fg:x="27986" fg:w="22"/><text x="24.0234%" y="799.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (14 samples, 0.01%)</title><rect x="23.8337%" y="757" width="0.0119%" height="15" fill="rgb(249,201,17)" fg:x="28057" fg:w="14"/><text x="24.0837%" y="767.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (68 samples, 0.06%)</title><rect x="23.8022%" y="773" width="0.0578%" height="15" fill="rgb(219,208,6)" fg:x="28020" fg:w="68"/><text x="24.0522%" y="783.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (17 samples, 0.01%)</title><rect x="23.8456%" y="757" width="0.0144%" height="15" fill="rgb(248,31,23)" fg:x="28071" fg:w="17"/><text x="24.0956%" y="767.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (78 samples, 0.07%)</title><rect x="23.8022%" y="789" width="0.0663%" height="15" fill="rgb(245,15,42)" fg:x="28020" fg:w="78"/><text x="24.0522%" y="799.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (13 samples, 0.01%)</title><rect x="23.8685%" y="789" width="0.0110%" height="15" fill="rgb(222,217,39)" fg:x="28098" fg:w="13"/><text x="24.1185%" y="799.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (13 samples, 0.01%)</title><rect x="23.8685%" y="773" width="0.0110%" height="15" fill="rgb(210,219,27)" fg:x="28098" fg:w="13"/><text x="24.1185%" y="783.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (162 samples, 0.14%)</title><rect x="23.7428%" y="805" width="0.1376%" height="15" fill="rgb(252,166,36)" fg:x="27950" fg:w="162"/><text x="23.9928%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Compare (15 samples, 0.01%)</title><rect x="23.9050%" y="773" width="0.0127%" height="15" fill="rgb(245,132,34)" fg:x="28141" fg:w="15"/><text x="24.1550%" y="783.50"></text></g><g><title>leveldb::Block::Iter::Seek (37 samples, 0.03%)</title><rect x="23.8880%" y="789" width="0.0314%" height="15" fill="rgb(236,54,3)" fg:x="28121" fg:w="37"/><text x="24.1380%" y="799.50"></text></g><g><title>leveldb::Block::Iter::Seek (64 samples, 0.05%)</title><rect x="23.8804%" y="805" width="0.0544%" height="15" fill="rgb(241,173,43)" fg:x="28112" fg:w="64"/><text x="24.1304%" y="815.50"></text></g><g><title>leveldb::Block::Iter::SeekToRestartPoint (18 samples, 0.02%)</title><rect x="23.9195%" y="789" width="0.0153%" height="15" fill="rgb(215,190,9)" fg:x="28158" fg:w="18"/><text x="24.1695%" y="799.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (91 samples, 0.08%)</title><rect x="23.9348%" y="805" width="0.0773%" height="15" fill="rgb(242,101,16)" fg:x="28176" fg:w="91"/><text x="24.1848%" y="815.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (499 samples, 0.42%)</title><rect x="23.6035%" y="821" width="0.4239%" height="15" fill="rgb(223,190,21)" fg:x="27786" fg:w="499"/><text x="23.8535%" y="831.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (18 samples, 0.02%)</title><rect x="24.0121%" y="805" width="0.0153%" height="15" fill="rgb(215,228,25)" fg:x="28267" fg:w="18"/><text x="24.2621%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Compare (563 samples, 0.48%)</title><rect x="23.5542%" y="837" width="0.4783%" height="15" fill="rgb(225,36,22)" fg:x="27728" fg:w="563"/><text x="23.8042%" y="847.50"></text></g><g><title>leveldb::Block::Iter::Seek (25 samples, 0.02%)</title><rect x="24.0528%" y="789" width="0.0212%" height="15" fill="rgb(251,106,46)" fg:x="28315" fg:w="25"/><text x="24.3028%" y="799.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (17 samples, 0.01%)</title><rect x="24.0741%" y="789" width="0.0144%" height="15" fill="rgb(208,90,1)" fg:x="28340" fg:w="17"/><text x="24.3241%" y="799.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (71 samples, 0.06%)</title><rect x="24.0435%" y="821" width="0.0603%" height="15" fill="rgb(243,10,4)" fg:x="28304" fg:w="71"/><text x="24.2935%" y="831.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (71 samples, 0.06%)</title><rect x="24.0435%" y="805" width="0.0603%" height="15" fill="rgb(212,137,27)" fg:x="28304" fg:w="71"/><text x="24.2935%" y="815.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (86 samples, 0.07%)</title><rect x="24.0324%" y="837" width="0.0731%" height="15" fill="rgb(231,220,49)" fg:x="28291" fg:w="86"/><text x="24.2824%" y="847.50"></text></g><g><title>leveldb::Block::Iter::Compare (14 samples, 0.01%)</title><rect x="24.1293%" y="821" width="0.0119%" height="15" fill="rgb(237,96,20)" fg:x="28405" fg:w="14"/><text x="24.3793%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Seek (53 samples, 0.05%)</title><rect x="24.1055%" y="837" width="0.0450%" height="15" fill="rgb(239,229,30)" fg:x="28377" fg:w="53"/><text x="24.3555%" y="847.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (41 samples, 0.03%)</title><rect x="24.1505%" y="837" width="0.0348%" height="15" fill="rgb(219,65,33)" fg:x="28430" fg:w="41"/><text x="24.4005%" y="847.50"></text></g><g><title>leveldb::Block::Iter::Seek (823 samples, 0.70%)</title><rect x="23.4956%" y="853" width="0.6991%" height="15" fill="rgb(243,134,7)" fg:x="27659" fg:w="823"/><text x="23.7456%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (2,061 samples, 1.75%)</title><rect x="22.4745%" y="869" width="1.7508%" height="15" fill="rgb(216,177,54)" fg:x="26457" fg:w="2061"/><text x="22.7245%" y="879.50"></text></g><g><title>leveldb::Slice::Slice (35 samples, 0.03%)</title><rect x="24.1955%" y="853" width="0.0297%" height="15" fill="rgb(211,160,20)" fg:x="28483" fg:w="35"/><text x="24.4455%" y="863.50"></text></g><g><title>leveldb::Iterator::~Iterator (13 samples, 0.01%)</title><rect x="24.2406%" y="837" width="0.0110%" height="15" fill="rgb(239,85,39)" fg:x="28536" fg:w="13"/><text x="24.4906%" y="847.50"></text></g><g><title>leveldb::SaveValue (14 samples, 0.01%)</title><rect x="24.2516%" y="837" width="0.0119%" height="15" fill="rgb(232,125,22)" fg:x="28549" fg:w="14"/><text x="24.5016%" y="847.50"></text></g><g><title>leveldb::Block::Iter::~Iter (38 samples, 0.03%)</title><rect x="24.2363%" y="869" width="0.0323%" height="15" fill="rgb(244,57,34)" fg:x="28531" fg:w="38"/><text x="24.4863%" y="879.50"></text></g><g><title>leveldb::Block::Iter::~Iter (38 samples, 0.03%)</title><rect x="24.2363%" y="853" width="0.0323%" height="15" fill="rgb(214,203,32)" fg:x="28531" fg:w="38"/><text x="24.4863%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Iter (55 samples, 0.05%)</title><rect x="24.3298%" y="853" width="0.0467%" height="15" fill="rgb(207,58,43)" fg:x="28641" fg:w="55"/><text x="24.5798%" y="863.50"></text></g><g><title>leveldb::Block::NewIterator (136 samples, 0.12%)</title><rect x="24.2686%" y="869" width="0.1155%" height="15" fill="rgb(215,193,15)" fg:x="28569" fg:w="136"/><text x="24.5186%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (13 samples, 0.01%)</title><rect x="24.3952%" y="853" width="0.0110%" height="15" fill="rgb(232,15,44)" fg:x="28718" fg:w="13"/><text x="24.6452%" y="863.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (37 samples, 0.03%)</title><rect x="24.3841%" y="869" width="0.0314%" height="15" fill="rgb(212,3,48)" fg:x="28705" fg:w="37"/><text x="24.6341%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (22 samples, 0.02%)</title><rect x="24.4258%" y="837" width="0.0187%" height="15" fill="rgb(218,128,7)" fg:x="28754" fg:w="22"/><text x="24.6758%" y="847.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (23 samples, 0.02%)</title><rect x="24.4470%" y="837" width="0.0195%" height="15" fill="rgb(226,216,39)" fg:x="28779" fg:w="23"/><text x="24.6970%" y="847.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (75 samples, 0.06%)</title><rect x="24.4156%" y="869" width="0.0637%" height="15" fill="rgb(243,47,51)" fg:x="28742" fg:w="75"/><text x="24.6656%" y="879.50"></text></g><g><title>leveldb::InternalFilterPolicy::KeyMayMatch (63 samples, 0.05%)</title><rect x="24.4258%" y="853" width="0.0535%" height="15" fill="rgb(241,183,40)" fg:x="28754" fg:w="63"/><text x="24.6758%" y="863.50"></text></g><g><title>leveldb::GetVarint64Ptr (26 samples, 0.02%)</title><rect x="24.4878%" y="869" width="0.0221%" height="15" fill="rgb(231,217,32)" fg:x="28827" fg:w="26"/><text x="24.7378%" y="879.50"></text></g><g><title>leveldb::Hash (26 samples, 0.02%)</title><rect x="24.5099%" y="869" width="0.0221%" height="15" fill="rgb(229,61,38)" fg:x="28853" fg:w="26"/><text x="24.7599%" y="879.50"></text></g><g><title>leveldb::ExtractUserKey (18 samples, 0.02%)</title><rect x="24.8284%" y="853" width="0.0153%" height="15" fill="rgb(225,210,5)" fg:x="29228" fg:w="18"/><text x="25.0784%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (365 samples, 0.31%)</title><rect x="24.5345%" y="869" width="0.3101%" height="15" fill="rgb(231,79,45)" fg:x="28882" fg:w="365"/><text x="24.7845%" y="879.50"></text></g><g><title>leveldb::Iterator::Iterator (21 samples, 0.02%)</title><rect x="24.8445%" y="869" width="0.0178%" height="15" fill="rgb(224,100,7)" fg:x="29247" fg:w="21"/><text x="25.0945%" y="879.50"></text></g><g><title>leveldb::SaveValue (19 samples, 0.02%)</title><rect x="24.8632%" y="869" width="0.0161%" height="15" fill="rgb(241,198,18)" fg:x="29269" fg:w="19"/><text x="25.1132%" y="879.50"></text></g><g><title>leveldb::Table::BlockReader (12 samples, 0.01%)</title><rect x="24.8972%" y="821" width="0.0102%" height="15" fill="rgb(252,97,53)" fg:x="29309" fg:w="12"/><text x="25.1472%" y="831.50"></text></g><g><title>Lookup (18 samples, 0.02%)</title><rect x="24.8938%" y="853" width="0.0153%" height="15" fill="rgb(220,88,7)" fg:x="29305" fg:w="18"/><text x="25.1438%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (18 samples, 0.02%)</title><rect x="24.8938%" y="837" width="0.0153%" height="15" fill="rgb(213,176,14)" fg:x="29305" fg:w="18"/><text x="25.1438%" y="847.50"></text></g><g><title>_mm_crc32_u64 (22 samples, 0.02%)</title><rect x="24.9312%" y="837" width="0.0187%" height="15" fill="rgb(246,73,7)" fg:x="29349" fg:w="22"/><text x="25.1812%" y="847.50"></text></g><g><title>crc32c::ExtendSse42 (50 samples, 0.04%)</title><rect x="24.9091%" y="853" width="0.0425%" height="15" fill="rgb(245,64,36)" fg:x="29323" fg:w="50"/><text x="25.1591%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (41 samples, 0.03%)</title><rect x="24.9516%" y="853" width="0.0348%" height="15" fill="rgb(245,80,10)" fg:x="29373" fg:w="41"/><text x="25.2016%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (19 samples, 0.02%)</title><rect x="24.9975%" y="837" width="0.0161%" height="15" fill="rgb(232,107,50)" fg:x="29427" fg:w="19"/><text x="25.2475%" y="847.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (22 samples, 0.02%)</title><rect x="25.0136%" y="821" width="0.0187%" height="15" fill="rgb(253,3,0)" fg:x="29446" fg:w="22"/><text x="25.2636%" y="831.50"></text></g><g><title>leveldb::GetVarint64 (26 samples, 0.02%)</title><rect x="25.0136%" y="837" width="0.0221%" height="15" fill="rgb(212,99,53)" fg:x="29446" fg:w="26"/><text x="25.2636%" y="847.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (48 samples, 0.04%)</title><rect x="24.9958%" y="853" width="0.0408%" height="15" fill="rgb(249,111,54)" fg:x="29425" fg:w="48"/><text x="25.2458%" y="863.50"></text></g><g><title>leveldb::GetVarint64Ptr (22 samples, 0.02%)</title><rect x="25.0450%" y="853" width="0.0187%" height="15" fill="rgb(249,55,30)" fg:x="29483" fg:w="22"/><text x="25.2950%" y="863.50"></text></g><g><title>leveldb::crc32c::Unmask (595 samples, 0.51%)</title><rect x="25.1002%" y="837" width="0.5054%" height="15" fill="rgb(237,47,42)" fg:x="29548" fg:w="595"/><text x="25.3502%" y="847.50"></text></g><g><title>[unknown] (583 samples, 0.50%)</title><rect x="25.1104%" y="821" width="0.4952%" height="15" fill="rgb(211,20,18)" fg:x="29560" fg:w="583"/><text x="25.3604%" y="831.50"></text></g><g><title>[unknown] (566 samples, 0.48%)</title><rect x="25.1249%" y="805" width="0.4808%" height="15" fill="rgb(231,203,46)" fg:x="29577" fg:w="566"/><text x="25.3749%" y="815.50"></text></g><g><title>[unknown] (559 samples, 0.47%)</title><rect x="25.1308%" y="789" width="0.4749%" height="15" fill="rgb(237,142,3)" fg:x="29584" fg:w="559"/><text x="25.3808%" y="799.50"></text></g><g><title>[unknown] (548 samples, 0.47%)</title><rect x="25.1402%" y="773" width="0.4655%" height="15" fill="rgb(241,107,1)" fg:x="29595" fg:w="548"/><text x="25.3902%" y="783.50"></text></g><g><title>[unknown] (521 samples, 0.44%)</title><rect x="25.1631%" y="757" width="0.4426%" height="15" fill="rgb(229,83,13)" fg:x="29622" fg:w="521"/><text x="25.4131%" y="767.50"></text></g><g><title>[unknown] (470 samples, 0.40%)</title><rect x="25.2064%" y="741" width="0.3993%" height="15" fill="rgb(241,91,40)" fg:x="29673" fg:w="470"/><text x="25.4564%" y="751.50"></text></g><g><title>[unknown] (439 samples, 0.37%)</title><rect x="25.2328%" y="725" width="0.3729%" height="15" fill="rgb(225,3,45)" fg:x="29704" fg:w="439"/><text x="25.4828%" y="735.50"></text></g><g><title>[unknown] (335 samples, 0.28%)</title><rect x="25.3211%" y="709" width="0.2846%" height="15" fill="rgb(244,223,14)" fg:x="29808" fg:w="335"/><text x="25.5711%" y="719.50"></text></g><g><title>[unknown] (188 samples, 0.16%)</title><rect x="25.4460%" y="693" width="0.1597%" height="15" fill="rgb(224,124,37)" fg:x="29955" fg:w="188"/><text x="25.6960%" y="703.50"></text></g><g><title>[unknown] (107 samples, 0.09%)</title><rect x="25.5148%" y="677" width="0.0909%" height="15" fill="rgb(251,171,30)" fg:x="30036" fg:w="107"/><text x="25.7648%" y="687.50"></text></g><g><title>[unknown] (74 samples, 0.06%)</title><rect x="25.5428%" y="661" width="0.0629%" height="15" fill="rgb(236,46,54)" fg:x="30069" fg:w="74"/><text x="25.7928%" y="671.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="25.5844%" y="645" width="0.0212%" height="15" fill="rgb(245,213,5)" fg:x="30118" fg:w="25"/><text x="25.8344%" y="655.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="26.3532%" y="805" width="0.0102%" height="15" fill="rgb(230,144,27)" fg:x="31023" fg:w="12"/><text x="26.6032%" y="815.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="26.3532%" y="789" width="0.0102%" height="15" fill="rgb(220,86,6)" fg:x="31023" fg:w="12"/><text x="26.6032%" y="799.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="26.3532%" y="773" width="0.0102%" height="15" fill="rgb(240,20,13)" fg:x="31023" fg:w="12"/><text x="26.6032%" y="783.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="26.3532%" y="757" width="0.0102%" height="15" fill="rgb(217,89,34)" fg:x="31023" fg:w="12"/><text x="26.6032%" y="767.50"></text></g><g><title>_mm_crc32_u64 (1,253 samples, 1.06%)</title><rect x="26.3634%" y="805" width="1.0644%" height="15" fill="rgb(229,13,5)" fg:x="31035" fg:w="1253"/><text x="26.6134%" y="815.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="27.4168%" y="789" width="0.0110%" height="15" fill="rgb(244,67,35)" fg:x="32275" fg:w="13"/><text x="27.6668%" y="799.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="27.4168%" y="773" width="0.0110%" height="15" fill="rgb(221,40,2)" fg:x="32275" fg:w="13"/><text x="27.6668%" y="783.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="27.4168%" y="757" width="0.0110%" height="15" fill="rgb(237,157,21)" fg:x="32275" fg:w="13"/><text x="27.6668%" y="767.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="27.4176%" y="741" width="0.0102%" height="15" fill="rgb(222,94,11)" fg:x="32276" fg:w="12"/><text x="27.6676%" y="751.50"></text></g><g><title>crc32c::ExtendSse42 (2,183 samples, 1.85%)</title><rect x="25.6133%" y="821" width="1.8544%" height="15" fill="rgb(249,113,6)" fg:x="30152" fg:w="2183"/><text x="25.8633%" y="831.50">c..</text></g><g><title>_mm_crc32_u8 (47 samples, 0.04%)</title><rect x="27.4278%" y="805" width="0.0399%" height="15" fill="rgb(238,137,36)" fg:x="32288" fg:w="47"/><text x="27.6778%" y="815.50"></text></g><g><title>[unknown] (44 samples, 0.04%)</title><rect x="27.4303%" y="789" width="0.0374%" height="15" fill="rgb(210,102,26)" fg:x="32291" fg:w="44"/><text x="27.6803%" y="799.50"></text></g><g><title>[unknown] (43 samples, 0.04%)</title><rect x="27.4312%" y="773" width="0.0365%" height="15" fill="rgb(218,30,30)" fg:x="32292" fg:w="43"/><text x="27.6812%" y="783.50"></text></g><g><title>[unknown] (43 samples, 0.04%)</title><rect x="27.4312%" y="757" width="0.0365%" height="15" fill="rgb(214,67,26)" fg:x="32292" fg:w="43"/><text x="27.6812%" y="767.50"></text></g><g><title>[unknown] (42 samples, 0.04%)</title><rect x="27.4320%" y="741" width="0.0357%" height="15" fill="rgb(251,9,53)" fg:x="32293" fg:w="42"/><text x="27.6820%" y="751.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="27.4354%" y="725" width="0.0323%" height="15" fill="rgb(228,204,25)" fg:x="32297" fg:w="38"/><text x="27.6854%" y="735.50"></text></g><g><title>[unknown] (35 samples, 0.03%)</title><rect x="27.4380%" y="709" width="0.0297%" height="15" fill="rgb(207,153,8)" fg:x="32300" fg:w="35"/><text x="27.6880%" y="719.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="27.4388%" y="693" width="0.0289%" height="15" fill="rgb(242,9,16)" fg:x="32301" fg:w="34"/><text x="27.6888%" y="703.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="27.4448%" y="677" width="0.0229%" height="15" fill="rgb(217,211,10)" fg:x="32308" fg:w="27"/><text x="27.6948%" y="687.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="27.4558%" y="661" width="0.0119%" height="15" fill="rgb(219,228,52)" fg:x="32321" fg:w="14"/><text x="27.7058%" y="671.50"></text></g><g><title>leveldb::crc32c::Value (2,219 samples, 1.88%)</title><rect x="25.6057%" y="837" width="1.8850%" height="15" fill="rgb(231,92,29)" fg:x="30143" fg:w="2219"/><text x="25.8557%" y="847.50">l..</text></g><g><title>leveldb::crc32c::Extend (15 samples, 0.01%)</title><rect x="27.4779%" y="821" width="0.0127%" height="15" fill="rgb(232,8,23)" fg:x="32347" fg:w="15"/><text x="27.7279%" y="831.50"></text></g><g><title>operator new (20 samples, 0.02%)</title><rect x="27.4907%" y="837" width="0.0170%" height="15" fill="rgb(216,211,34)" fg:x="32362" fg:w="20"/><text x="27.7407%" y="847.50"></text></g><g><title>malloc (20 samples, 0.02%)</title><rect x="27.4907%" y="821" width="0.0170%" height="15" fill="rgb(236,151,0)" fg:x="32362" fg:w="20"/><text x="27.7407%" y="831.50"></text></g><g><title>_int_malloc (18 samples, 0.02%)</title><rect x="27.4924%" y="805" width="0.0153%" height="15" fill="rgb(209,168,3)" fg:x="32364" fg:w="18"/><text x="27.7424%" y="815.50"></text></g><g><title>leveldb::ReadBlock (2,876 samples, 2.44%)</title><rect x="25.0688%" y="853" width="2.4431%" height="15" fill="rgb(208,129,28)" fg:x="29511" fg:w="2876"/><text x="25.3188%" y="863.50">le..</text></g><g><title>leveldb::Table::BlockReader (39 samples, 0.03%)</title><rect x="27.5127%" y="853" width="0.0331%" height="15" fill="rgb(229,78,22)" fg:x="32388" fg:w="39"/><text x="27.7627%" y="863.50"></text></g><g><title>leveldb::Table::BlockReader (3,135 samples, 2.66%)</title><rect x="24.8836%" y="869" width="2.6631%" height="15" fill="rgb(228,187,13)" fg:x="29293" fg:w="3135"/><text x="25.1336%" y="879.50">le..</text></g><g><title>leveldb::Table::InternalGet (84 samples, 0.07%)</title><rect x="27.5467%" y="869" width="0.0714%" height="15" fill="rgb(240,119,24)" fg:x="32428" fg:w="84"/><text x="27.7967%" y="879.50"></text></g><g><title>leveldb::TableCache::Get (12 samples, 0.01%)</title><rect x="27.6232%" y="869" width="0.0102%" height="15" fill="rgb(209,194,42)" fg:x="32518" fg:w="12"/><text x="27.8732%" y="879.50"></text></g><g><title>leveldb::Table::InternalGet (7,182 samples, 6.10%)</title><rect x="21.5350%" y="885" width="6.1009%" height="15" fill="rgb(247,200,46)" fg:x="25351" fg:w="7182"/><text x="21.7850%" y="895.50">leveldb:..</text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (13 samples, 0.01%)</title><rect x="27.6436%" y="837" width="0.0110%" height="15" fill="rgb(218,76,16)" fg:x="32542" fg:w="13"/><text x="27.8936%" y="847.50"></text></g><g><title>leveldb::FindFile (13 samples, 0.01%)</title><rect x="27.6546%" y="837" width="0.0110%" height="15" fill="rgb(225,21,48)" fg:x="32555" fg:w="13"/><text x="27.9046%" y="847.50"></text></g><g><title>Lookup (41 samples, 0.03%)</title><rect x="27.6402%" y="869" width="0.0348%" height="15" fill="rgb(239,223,50)" fg:x="32538" fg:w="41"/><text x="27.8902%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (41 samples, 0.03%)</title><rect x="27.6402%" y="853" width="0.0348%" height="15" fill="rgb(244,45,21)" fg:x="32538" fg:w="41"/><text x="27.8902%" y="863.50"></text></g><g><title>FindPointer (15 samples, 0.01%)</title><rect x="27.6911%" y="821" width="0.0127%" height="15" fill="rgb(232,33,43)" fg:x="32598" fg:w="15"/><text x="27.9411%" y="831.50"></text></g><g><title>Lookup (17 samples, 0.01%)</title><rect x="27.6911%" y="837" width="0.0144%" height="15" fill="rgb(209,8,3)" fg:x="32598" fg:w="17"/><text x="27.9411%" y="847.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (34 samples, 0.03%)</title><rect x="27.6843%" y="869" width="0.0289%" height="15" fill="rgb(214,25,53)" fg:x="32590" fg:w="34"/><text x="27.9343%" y="879.50"></text></g><g><title>Lookup (27 samples, 0.02%)</title><rect x="27.6903%" y="853" width="0.0229%" height="15" fill="rgb(254,186,54)" fg:x="32597" fg:w="27"/><text x="27.9403%" y="863.50"></text></g><g><title>leveldb::FindFile (16 samples, 0.01%)</title><rect x="27.7132%" y="869" width="0.0136%" height="15" fill="rgb(208,174,49)" fg:x="32624" fg:w="16"/><text x="27.9632%" y="879.50"></text></g><g><title>leveldb::TableCache::FindTable (65 samples, 0.06%)</title><rect x="27.7429%" y="869" width="0.0552%" height="15" fill="rgb(233,191,51)" fg:x="32659" fg:w="65"/><text x="27.9929%" y="879.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (16 samples, 0.01%)</title><rect x="27.8075%" y="869" width="0.0136%" height="15" fill="rgb(222,134,10)" fg:x="32735" fg:w="16"/><text x="28.0575%" y="879.50"></text></g><g><title>leveldb::Version::Get (13 samples, 0.01%)</title><rect x="27.8211%" y="869" width="0.0110%" height="15" fill="rgb(230,226,20)" fg:x="32751" fg:w="13"/><text x="28.0711%" y="879.50"></text></g><g><title>leveldb::TableCache::FindTable (232 samples, 0.20%)</title><rect x="27.6359%" y="885" width="0.1971%" height="15" fill="rgb(251,111,25)" fg:x="32533" fg:w="232"/><text x="27.8859%" y="895.50"></text></g><g><title>leveldb::TableCache::Get (7,562 samples, 6.42%)</title><rect x="21.4144%" y="901" width="6.4237%" height="15" fill="rgb(224,40,46)" fg:x="25209" fg:w="7562"/><text x="21.6644%" y="911.50">leveldb:..</text></g><g><title>leveldb::Version::Get (7,595 samples, 6.45%)</title><rect x="21.3872%" y="917" width="6.4517%" height="15" fill="rgb(236,108,47)" fg:x="25177" fg:w="7595"/><text x="21.6372%" y="927.50">leveldb:..</text></g><g><title>leveldb::Version::Get (8,168 samples, 6.94%)</title><rect x="20.9021%" y="949" width="6.9385%" height="15" fill="rgb(234,93,0)" fg:x="24606" fg:w="8168"/><text x="21.1521%" y="959.50">leveldb::..</text></g><g><title>leveldb::Version::ForEachOverlapping (8,009 samples, 6.80%)</title><rect x="21.0372%" y="933" width="6.8034%" height="15" fill="rgb(224,213,32)" fg:x="24765" fg:w="8009"/><text x="21.2872%" y="943.50">leveldb::..</text></g><g><title>leveldb::DBImpl::Get (10,645 samples, 9.04%)</title><rect x="18.8073%" y="965" width="9.0426%" height="15" fill="rgb(251,11,48)" fg:x="22140" fg:w="10645"/><text x="19.0573%" y="975.50">leveldb::DBIm..</text></g><g><title>leveldb::Version::Get (15 samples, 0.01%)</title><rect x="27.8661%" y="965" width="0.0127%" height="15" fill="rgb(236,173,5)" fg:x="32804" fg:w="15"/><text x="28.1161%" y="975.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (25 samples, 0.02%)</title><rect x="27.8806%" y="965" width="0.0212%" height="15" fill="rgb(230,95,12)" fg:x="32821" fg:w="25"/><text x="28.1306%" y="975.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (10,793 samples, 9.17%)</title><rect x="18.7954%" y="981" width="9.1684%" height="15" fill="rgb(232,209,1)" fg:x="22126" fg:w="10793"/><text x="19.0454%" y="991.50">CDBWrapper::R..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (73 samples, 0.06%)</title><rect x="27.9018%" y="965" width="0.0620%" height="15" fill="rgb(232,6,1)" fg:x="32846" fg:w="73"/><text x="28.1518%" y="975.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (54 samples, 0.05%)</title><rect x="27.9179%" y="949" width="0.0459%" height="15" fill="rgb(210,224,50)" fg:x="32865" fg:w="54"/><text x="28.1679%" y="959.50"></text></g><g><title>decltype  (21 samples, 0.02%)</title><rect x="27.9460%" y="933" width="0.0178%" height="15" fill="rgb(228,127,35)" fg:x="32898" fg:w="21"/><text x="28.1960%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (21 samples, 0.02%)</title><rect x="27.9460%" y="917" width="0.0178%" height="15" fill="rgb(245,102,45)" fg:x="32898" fg:w="21"/><text x="28.1960%" y="927.50"></text></g><g><title>decltype (21 samples, 0.02%)</title><rect x="27.9460%" y="901" width="0.0178%" height="15" fill="rgb(214,1,49)" fg:x="32898" fg:w="21"/><text x="28.1960%" y="911.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (15 samples, 0.01%)</title><rect x="27.9723%" y="965" width="0.0127%" height="15" fill="rgb(226,163,40)" fg:x="32929" fg:w="15"/><text x="28.2223%" y="975.50"></text></g><g><title>CCoinsViewDB::GetCoin (10,820 samples, 9.19%)</title><rect x="18.7954%" y="997" width="9.1913%" height="15" fill="rgb(239,212,28)" fg:x="22126" fg:w="10820"/><text x="19.0454%" y="1007.50">CCoinsViewDB:..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (25 samples, 0.02%)</title><rect x="27.9655%" y="981" width="0.0212%" height="15" fill="rgb(220,20,13)" fg:x="32921" fg:w="25"/><text x="28.2155%" y="991.50"></text></g><g><title>CCoinsViewDB::GetCoin (22 samples, 0.02%)</title><rect x="27.9910%" y="789" width="0.0187%" height="15" fill="rgb(210,164,35)" fg:x="32951" fg:w="22"/><text x="28.2410%" y="799.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (22 samples, 0.02%)</title><rect x="27.9910%" y="773" width="0.0187%" height="15" fill="rgb(248,109,41)" fg:x="32951" fg:w="22"/><text x="28.2410%" y="783.50"></text></g><g><title>DataStream::Xor (15 samples, 0.01%)</title><rect x="27.9969%" y="757" width="0.0127%" height="15" fill="rgb(238,23,50)" fg:x="32958" fg:w="15"/><text x="28.2469%" y="767.50"></text></g><g><title>util::Xor (15 samples, 0.01%)</title><rect x="27.9969%" y="741" width="0.0127%" height="15" fill="rgb(211,48,49)" fg:x="32958" fg:w="15"/><text x="28.2469%" y="751.50"></text></g><g><title>CCoinsViewDB::GetCoin (14 samples, 0.01%)</title><rect x="28.0097%" y="725" width="0.0119%" height="15" fill="rgb(223,36,21)" fg:x="32973" fg:w="14"/><text x="28.2597%" y="735.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (14 samples, 0.01%)</title><rect x="28.0097%" y="709" width="0.0119%" height="15" fill="rgb(207,123,46)" fg:x="32973" fg:w="14"/><text x="28.2597%" y="719.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;&gt; (38 samples, 0.03%)</title><rect x="27.9910%" y="837" width="0.0323%" height="15" fill="rgb(240,218,32)" fg:x="32951" fg:w="38"/><text x="28.2410%" y="847.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long&amp;&gt;::Unserialize&lt;DataStream&gt; (38 samples, 0.03%)</title><rect x="27.9910%" y="821" width="0.0323%" height="15" fill="rgb(252,5,43)" fg:x="32951" fg:w="38"/><text x="28.2410%" y="831.50"></text></g><g><title>void AmountCompression::Unser&lt;DataStream, long&gt; (38 samples, 0.03%)</title><rect x="27.9910%" y="805" width="0.0323%" height="15" fill="rgb(252,84,19)" fg:x="32951" fg:w="38"/><text x="28.2410%" y="815.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&amp;) (16 samples, 0.01%)</title><rect x="28.0097%" y="789" width="0.0136%" height="15" fill="rgb(243,152,39)" fg:x="32973" fg:w="16"/><text x="28.2597%" y="799.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&gt; (16 samples, 0.01%)</title><rect x="28.0097%" y="773" width="0.0136%" height="15" fill="rgb(234,160,15)" fg:x="32973" fg:w="16"/><text x="28.2597%" y="783.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Unserialize&lt;DataStream&gt; (16 samples, 0.01%)</title><rect x="28.0097%" y="757" width="0.0136%" height="15" fill="rgb(237,34,20)" fg:x="32973" fg:w="16"/><text x="28.2597%" y="767.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned long&gt; (16 samples, 0.01%)</title><rect x="28.0097%" y="741" width="0.0136%" height="15" fill="rgb(229,97,13)" fg:x="32973" fg:w="16"/><text x="28.2597%" y="751.50"></text></g><g><title>DataStream::DataStream (26 samples, 0.02%)</title><rect x="28.0241%" y="773" width="0.0221%" height="15" fill="rgb(234,71,50)" fg:x="32990" fg:w="26"/><text x="28.2741%" y="783.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (26 samples, 0.02%)</title><rect x="28.0241%" y="757" width="0.0221%" height="15" fill="rgb(253,155,4)" fg:x="32990" fg:w="26"/><text x="28.2741%" y="767.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (26 samples, 0.02%)</title><rect x="28.0241%" y="741" width="0.0221%" height="15" fill="rgb(222,185,37)" fg:x="32990" fg:w="26"/><text x="28.2741%" y="751.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (25 samples, 0.02%)</title><rect x="28.0250%" y="725" width="0.0212%" height="15" fill="rgb(251,177,13)" fg:x="32991" fg:w="25"/><text x="28.2750%" y="735.50"></text></g><g><title>CCoinsViewDB::GetCoin (51 samples, 0.04%)</title><rect x="28.0233%" y="805" width="0.0433%" height="15" fill="rgb(250,179,40)" fg:x="32989" fg:w="51"/><text x="28.2733%" y="815.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (51 samples, 0.04%)</title><rect x="28.0233%" y="789" width="0.0433%" height="15" fill="rgb(242,44,2)" fg:x="32989" fg:w="51"/><text x="28.2733%" y="799.50"></text></g><g><title>DataStream::Xor (24 samples, 0.02%)</title><rect x="28.0462%" y="773" width="0.0204%" height="15" fill="rgb(216,177,13)" fg:x="33016" fg:w="24"/><text x="28.2962%" y="783.50"></text></g><g><title>util::Xor (24 samples, 0.02%)</title><rect x="28.0462%" y="757" width="0.0204%" height="15" fill="rgb(216,106,43)" fg:x="33016" fg:w="24"/><text x="28.2962%" y="767.50"></text></g><g><title>unsigned int ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (12 samples, 0.01%)</title><rect x="28.0751%" y="805" width="0.0102%" height="15" fill="rgb(216,183,2)" fg:x="33050" fg:w="12"/><text x="28.3251%" y="815.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (13 samples, 0.01%)</title><rect x="28.0853%" y="805" width="0.0110%" height="15" fill="rgb(249,75,3)" fg:x="33062" fg:w="13"/><text x="28.3353%" y="815.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&amp;) (16 samples, 0.01%)</title><rect x="28.1065%" y="789" width="0.0136%" height="15" fill="rgb(219,67,39)" fg:x="33087" fg:w="16"/><text x="28.3565%" y="799.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (16 samples, 0.01%)</title><rect x="28.1065%" y="773" width="0.0136%" height="15" fill="rgb(253,228,2)" fg:x="33087" fg:w="16"/><text x="28.3565%" y="783.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Unserialize&lt;DataStream&gt; (16 samples, 0.01%)</title><rect x="28.1065%" y="757" width="0.0136%" height="15" fill="rgb(235,138,27)" fg:x="33087" fg:w="16"/><text x="28.3565%" y="767.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned int&gt; (16 samples, 0.01%)</title><rect x="28.1065%" y="741" width="0.0136%" height="15" fill="rgb(236,97,51)" fg:x="33087" fg:w="16"/><text x="28.3565%" y="751.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut&amp;&gt; &gt; (162 samples, 0.14%)</title><rect x="27.9910%" y="933" width="0.1376%" height="15" fill="rgb(240,80,30)" fg:x="32951" fg:w="162"/><text x="28.2410%" y="943.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut&amp;&gt;::Unserialize&lt;DataStream&gt; (162 samples, 0.14%)</title><rect x="27.9910%" y="917" width="0.1376%" height="15" fill="rgb(230,178,19)" fg:x="32951" fg:w="162"/><text x="28.2410%" y="927.50"></text></g><g><title>void TxOutCompression::Unser&lt;DataStream&gt; (162 samples, 0.14%)</title><rect x="27.9910%" y="901" width="0.1376%" height="15" fill="rgb(210,190,27)" fg:x="32951" fg:w="162"/><text x="28.2410%" y="911.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut, ActionUnserialize&gt; (162 samples, 0.14%)</title><rect x="27.9910%" y="885" width="0.1376%" height="15" fill="rgb(222,107,31)" fg:x="32951" fg:w="162"/><text x="28.2410%" y="895.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;, Wrapper&lt;ScriptCompression, CScript&amp;&gt; &gt; (162 samples, 0.14%)</title><rect x="27.9910%" y="869" width="0.1376%" height="15" fill="rgb(216,127,34)" fg:x="32951" fg:w="162"/><text x="28.2410%" y="879.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (162 samples, 0.14%)</title><rect x="27.9910%" y="853" width="0.1376%" height="15" fill="rgb(234,116,52)" fg:x="32951" fg:w="162"/><text x="28.2410%" y="863.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (124 samples, 0.11%)</title><rect x="28.0233%" y="837" width="0.1053%" height="15" fill="rgb(222,124,15)" fg:x="32989" fg:w="124"/><text x="28.2733%" y="847.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript&amp;&gt;::Unserialize&lt;DataStream&gt; (124 samples, 0.11%)</title><rect x="28.0233%" y="821" width="0.1053%" height="15" fill="rgb(231,179,28)" fg:x="32989" fg:w="124"/><text x="28.2733%" y="831.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (38 samples, 0.03%)</title><rect x="28.0963%" y="805" width="0.0323%" height="15" fill="rgb(226,93,45)" fg:x="33075" fg:w="38"/><text x="28.3463%" y="815.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Coin&amp;&gt;(Coin&amp;) (166 samples, 0.14%)</title><rect x="27.9910%" y="981" width="0.1410%" height="15" fill="rgb(215,8,51)" fg:x="32951" fg:w="166"/><text x="28.2410%" y="991.50"></text></g><g><title>void Unserialize&lt;DataStream, Coin&amp;&gt; (166 samples, 0.14%)</title><rect x="27.9910%" y="965" width="0.1410%" height="15" fill="rgb(223,106,5)" fg:x="32951" fg:w="166"/><text x="28.2410%" y="975.50"></text></g><g><title>void Coin::Unserialize&lt;DataStream&gt; (166 samples, 0.14%)</title><rect x="27.9910%" y="949" width="0.1410%" height="15" fill="rgb(250,191,5)" fg:x="32951" fg:w="166"/><text x="28.2410%" y="959.50"></text></g><g><title>DataStream::DataStream (14 samples, 0.01%)</title><rect x="28.1320%" y="981" width="0.0119%" height="15" fill="rgb(242,132,44)" fg:x="33117" fg:w="14"/><text x="28.3820%" y="991.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (14 samples, 0.01%)</title><rect x="28.1320%" y="965" width="0.0119%" height="15" fill="rgb(251,152,29)" fg:x="33117" fg:w="14"/><text x="28.3820%" y="975.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (14 samples, 0.01%)</title><rect x="28.1320%" y="949" width="0.0119%" height="15" fill="rgb(218,179,5)" fg:x="33117" fg:w="14"/><text x="28.3820%" y="959.50"></text></g><g><title>DataStream::Xor (14 samples, 0.01%)</title><rect x="28.1439%" y="981" width="0.0119%" height="15" fill="rgb(227,67,19)" fg:x="33131" fg:w="14"/><text x="28.3939%" y="991.50"></text></g><g><title>util::Xor (14 samples, 0.01%)</title><rect x="28.1439%" y="965" width="0.0119%" height="15" fill="rgb(233,119,31)" fg:x="33131" fg:w="14"/><text x="28.3939%" y="975.50"></text></g><g><title>CScript::CScript (16 samples, 0.01%)</title><rect x="28.1906%" y="709" width="0.0136%" height="15" fill="rgb(241,120,22)" fg:x="33186" fg:w="16"/><text x="28.4406%" y="719.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (16 samples, 0.01%)</title><rect x="28.1906%" y="693" width="0.0136%" height="15" fill="rgb(224,102,30)" fg:x="33186" fg:w="16"/><text x="28.4406%" y="703.50"></text></g><g><title>Coin::Coin (21 samples, 0.02%)</title><rect x="28.1898%" y="741" width="0.0178%" height="15" fill="rgb(210,164,37)" fg:x="33185" fg:w="21"/><text x="28.4398%" y="751.50"></text></g><g><title>CTxOut::CTxOut (20 samples, 0.02%)</title><rect x="28.1906%" y="725" width="0.0170%" height="15" fill="rgb(226,191,16)" fg:x="33186" fg:w="20"/><text x="28.4406%" y="735.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (21 samples, 0.02%)</title><rect x="28.2076%" y="741" width="0.0178%" height="15" fill="rgb(214,40,45)" fg:x="33206" fg:w="21"/><text x="28.4576%" y="751.50"></text></g><g><title>CCoinsViewDB::GetCoin (67 samples, 0.06%)</title><rect x="28.1711%" y="757" width="0.0569%" height="15" fill="rgb(244,29,26)" fg:x="33163" fg:w="67"/><text x="28.4211%" y="767.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (75 samples, 0.06%)</title><rect x="28.1651%" y="869" width="0.0637%" height="15" fill="rgb(216,16,5)" fg:x="33156" fg:w="75"/><text x="28.4151%" y="879.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (75 samples, 0.06%)</title><rect x="28.1651%" y="853" width="0.0637%" height="15" fill="rgb(249,76,35)" fg:x="33156" fg:w="75"/><text x="28.4151%" y="863.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (75 samples, 0.06%)</title><rect x="28.1651%" y="837" width="0.0637%" height="15" fill="rgb(207,11,44)" fg:x="33156" fg:w="75"/><text x="28.4151%" y="847.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (75 samples, 0.06%)</title><rect x="28.1651%" y="821" width="0.0637%" height="15" fill="rgb(228,190,49)" fg:x="33156" fg:w="75"/><text x="28.4151%" y="831.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (75 samples, 0.06%)</title><rect x="28.1651%" y="805" width="0.0637%" height="15" fill="rgb(214,173,12)" fg:x="33156" fg:w="75"/><text x="28.4151%" y="815.50"></text></g><g><title>DataStream::write (75 samples, 0.06%)</title><rect x="28.1651%" y="789" width="0.0637%" height="15" fill="rgb(218,26,35)" fg:x="33156" fg:w="75"/><text x="28.4151%" y="799.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (75 samples, 0.06%)</title><rect x="28.1651%" y="773" width="0.0637%" height="15" fill="rgb(220,200,19)" fg:x="33156" fg:w="75"/><text x="28.4151%" y="783.50"></text></g><g><title>SipHashUint256Extra (37 samples, 0.03%)</title><rect x="28.2373%" y="805" width="0.0314%" height="15" fill="rgb(239,95,49)" fg:x="33241" fg:w="37"/><text x="28.4873%" y="815.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (12 samples, 0.01%)</title><rect x="28.2586%" y="789" width="0.0102%" height="15" fill="rgb(235,85,53)" fg:x="33266" fg:w="12"/><text x="28.5086%" y="799.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (12 samples, 0.01%)</title><rect x="28.2586%" y="773" width="0.0102%" height="15" fill="rgb(233,133,31)" fg:x="33266" fg:w="12"/><text x="28.5086%" y="783.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (138 samples, 0.12%)</title><rect x="28.1600%" y="981" width="0.1172%" height="15" fill="rgb(218,25,20)" fg:x="33150" fg:w="138"/><text x="28.4100%" y="991.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (138 samples, 0.12%)</title><rect x="28.1600%" y="965" width="0.1172%" height="15" fill="rgb(252,210,38)" fg:x="33150" fg:w="138"/><text x="28.4100%" y="975.50"></text></g><g><title>Serialize&lt;DataStream&gt; (138 samples, 0.12%)</title><rect x="28.1600%" y="949" width="0.1172%" height="15" fill="rgb(242,134,21)" fg:x="33150" fg:w="138"/><text x="28.4100%" y="959.50"></text></g><g><title>Ser&lt;DataStream&gt; (138 samples, 0.12%)</title><rect x="28.1600%" y="933" width="0.1172%" height="15" fill="rgb(213,28,48)" fg:x="33150" fg:w="138"/><text x="28.4100%" y="943.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (138 samples, 0.12%)</title><rect x="28.1600%" y="917" width="0.1172%" height="15" fill="rgb(250,196,2)" fg:x="33150" fg:w="138"/><text x="28.4100%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (138 samples, 0.12%)</title><rect x="28.1600%" y="901" width="0.1172%" height="15" fill="rgb(227,5,17)" fg:x="33150" fg:w="138"/><text x="28.4100%" y="911.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (138 samples, 0.12%)</title><rect x="28.1600%" y="885" width="0.1172%" height="15" fill="rgb(221,226,24)" fg:x="33150" fg:w="138"/><text x="28.4100%" y="895.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (57 samples, 0.05%)</title><rect x="28.2288%" y="869" width="0.0484%" height="15" fill="rgb(211,5,48)" fg:x="33231" fg:w="57"/><text x="28.4788%" y="879.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (57 samples, 0.05%)</title><rect x="28.2288%" y="853" width="0.0484%" height="15" fill="rgb(219,150,6)" fg:x="33231" fg:w="57"/><text x="28.4788%" y="863.50"></text></g><g><title>DataStream::write (57 samples, 0.05%)</title><rect x="28.2288%" y="837" width="0.0484%" height="15" fill="rgb(251,46,16)" fg:x="33231" fg:w="57"/><text x="28.4788%" y="847.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (57 samples, 0.05%)</title><rect x="28.2288%" y="821" width="0.0484%" height="15" fill="rgb(220,204,40)" fg:x="33231" fg:w="57"/><text x="28.4788%" y="831.50"></text></g><g><title>CCoinsViewDB::GetCoin (11,169 samples, 9.49%)</title><rect x="18.7954%" y="1013" width="9.4878%" height="15" fill="rgb(211,85,2)" fg:x="22126" fg:w="11169"/><text x="19.0454%" y="1023.50">CCoinsViewDB::..</text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (349 samples, 0.30%)</title><rect x="27.9867%" y="997" width="0.2965%" height="15" fill="rgb(229,17,7)" fg:x="32946" fg:w="349"/><text x="28.2367%" y="1007.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (18 samples, 0.02%)</title><rect x="28.2858%" y="1013" width="0.0153%" height="15" fill="rgb(239,72,28)" fg:x="33298" fg:w="18"/><text x="28.5358%" y="1023.50"></text></g><g><title>SipHashUint256Extra (288 samples, 0.24%)</title><rect x="28.3019%" y="1013" width="0.2446%" height="15" fill="rgb(230,47,54)" fg:x="33317" fg:w="288"/><text x="28.5519%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (114 samples, 0.10%)</title><rect x="28.4497%" y="997" width="0.0968%" height="15" fill="rgb(214,50,8)" fg:x="33491" fg:w="114"/><text x="28.6997%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (114 samples, 0.10%)</title><rect x="28.4497%" y="981" width="0.0968%" height="15" fill="rgb(216,198,43)" fg:x="33491" fg:w="114"/><text x="28.6997%" y="991.50"></text></g><g><title>leveldb::DBImpl::Get (13 samples, 0.01%)</title><rect x="28.5483%" y="1013" width="0.0110%" height="15" fill="rgb(234,20,35)" fg:x="33607" fg:w="13"/><text x="28.7983%" y="1023.50"></text></g><g><title>CCoinsViewBacked::GetCoin (11,529 samples, 9.79%)</title><rect x="18.7946%" y="1029" width="9.7936%" height="15" fill="rgb(254,45,19)" fg:x="22125" fg:w="11529"/><text x="19.0446%" y="1039.50">CCoinsViewBack..</text></g><g><title>SipHashUint256Extra (207 samples, 0.18%)</title><rect x="28.5924%" y="1029" width="0.1758%" height="15" fill="rgb(219,14,44)" fg:x="33659" fg:w="207"/><text x="28.8424%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (90 samples, 0.08%)</title><rect x="28.6918%" y="1013" width="0.0765%" height="15" fill="rgb(217,220,26)" fg:x="33776" fg:w="90"/><text x="28.9418%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (90 samples, 0.08%)</title><rect x="28.6918%" y="997" width="0.0765%" height="15" fill="rgb(213,158,28)" fg:x="33776" fg:w="90"/><text x="28.9418%" y="1007.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (11,810 samples, 10.03%)</title><rect x="18.7946%" y="1061" width="10.0323%" height="15" fill="rgb(252,51,52)" fg:x="22125" fg:w="11810"/><text x="19.0446%" y="1071.50">ExecuteBackedWr..</text></g><g><title>CCoinsViewErrorCatcher::GetCoin (11,810 samples, 10.03%)</title><rect x="18.7946%" y="1045" width="10.0323%" height="15" fill="rgb(246,89,16)" fg:x="22125" fg:w="11810"/><text x="19.0446%" y="1055.50">CCoinsViewError..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (65 samples, 0.06%)</title><rect x="28.7717%" y="1029" width="0.0552%" height="15" fill="rgb(216,158,49)" fg:x="33870" fg:w="65"/><text x="29.0217%" y="1039.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (11,811 samples, 10.03%)</title><rect x="18.7946%" y="1077" width="10.0331%" height="15" fill="rgb(236,107,19)" fg:x="22125" fg:w="11811"/><text x="19.0446%" y="1087.50">CCoinsViewError..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (41 samples, 0.03%)</title><rect x="28.8379%" y="1077" width="0.0348%" height="15" fill="rgb(228,185,30)" fg:x="33948" fg:w="41"/><text x="29.0879%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (38 samples, 0.03%)</title><rect x="28.8897%" y="1029" width="0.0323%" height="15" fill="rgb(246,134,8)" fg:x="34009" fg:w="38"/><text x="29.1397%" y="1039.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (16 samples, 0.01%)</title><rect x="28.9084%" y="1013" width="0.0136%" height="15" fill="rgb(214,143,50)" fg:x="34031" fg:w="16"/><text x="29.1584%" y="1023.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (16 samples, 0.01%)</title><rect x="28.9084%" y="997" width="0.0136%" height="15" fill="rgb(228,75,8)" fg:x="34031" fg:w="16"/><text x="29.1584%" y="1007.50"></text></g><g><title>SipHashUint256Extra (454 samples, 0.39%)</title><rect x="28.9237%" y="1029" width="0.3857%" height="15" fill="rgb(207,175,4)" fg:x="34049" fg:w="454"/><text x="29.1737%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (171 samples, 0.15%)</title><rect x="29.1641%" y="1013" width="0.1453%" height="15" fill="rgb(205,108,24)" fg:x="34332" fg:w="171"/><text x="29.4141%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (171 samples, 0.15%)</title><rect x="29.1641%" y="997" width="0.1453%" height="15" fill="rgb(244,120,49)" fg:x="34332" fg:w="171"/><text x="29.4141%" y="1007.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="29.3731%" y="1013" width="0.0153%" height="15" fill="rgb(223,47,38)" fg:x="34578" fg:w="18"/><text x="29.6231%" y="1023.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="29.3739%" y="997" width="0.0144%" height="15" fill="rgb(229,179,11)" fg:x="34579" fg:w="17"/><text x="29.6239%" y="1007.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="29.3739%" y="981" width="0.0144%" height="15" fill="rgb(231,122,1)" fg:x="34579" fg:w="17"/><text x="29.6239%" y="991.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="29.3739%" y="965" width="0.0144%" height="15" fill="rgb(245,119,9)" fg:x="34579" fg:w="17"/><text x="29.6239%" y="975.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="29.3739%" y="949" width="0.0144%" height="15" fill="rgb(241,163,25)" fg:x="34579" fg:w="17"/><text x="29.6239%" y="959.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="29.3748%" y="933" width="0.0136%" height="15" fill="rgb(217,214,3)" fg:x="34580" fg:w="16"/><text x="29.6248%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.01%)</title><rect x="29.4045%" y="949" width="0.0119%" height="15" fill="rgb(240,86,28)" fg:x="34615" fg:w="14"/><text x="29.6545%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (34 samples, 0.03%)</title><rect x="29.3884%" y="1013" width="0.0289%" height="15" fill="rgb(215,47,9)" fg:x="34596" fg:w="34"/><text x="29.6384%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (33 samples, 0.03%)</title><rect x="29.3892%" y="997" width="0.0280%" height="15" fill="rgb(252,25,45)" fg:x="34597" fg:w="33"/><text x="29.6392%" y="1007.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (33 samples, 0.03%)</title><rect x="29.3892%" y="981" width="0.0280%" height="15" fill="rgb(251,164,9)" fg:x="34597" fg:w="33"/><text x="29.6392%" y="991.50"></text></g><g><title>SaltedOutpointHasher::operator (33 samples, 0.03%)</title><rect x="29.3892%" y="965" width="0.0280%" height="15" fill="rgb(233,194,0)" fg:x="34597" fg:w="33"/><text x="29.6392%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (135 samples, 0.11%)</title><rect x="29.3094%" y="1029" width="0.1147%" height="15" fill="rgb(249,111,24)" fg:x="34503" fg:w="135"/><text x="29.5594%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (22 samples, 0.02%)</title><rect x="29.4241%" y="1029" width="0.0187%" height="15" fill="rgb(250,223,3)" fg:x="34638" fg:w="22"/><text x="29.6741%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (661 samples, 0.56%)</title><rect x="28.8897%" y="1045" width="0.5615%" height="15" fill="rgb(236,178,37)" fg:x="34009" fg:w="661"/><text x="29.1397%" y="1055.50"></text></g><g><title>SipHashUint256Extra (344 samples, 0.29%)</title><rect x="29.4512%" y="1029" width="0.2922%" height="15" fill="rgb(241,158,50)" fg:x="34670" fg:w="344"/><text x="29.7012%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (168 samples, 0.14%)</title><rect x="29.6007%" y="1013" width="0.1427%" height="15" fill="rgb(213,121,41)" fg:x="34846" fg:w="168"/><text x="29.8507%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (168 samples, 0.14%)</title><rect x="29.6007%" y="997" width="0.1427%" height="15" fill="rgb(240,92,3)" fg:x="34846" fg:w="168"/><text x="29.8507%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (402 samples, 0.34%)</title><rect x="29.4512%" y="1045" width="0.3415%" height="15" fill="rgb(205,123,3)" fg:x="34670" fg:w="402"/><text x="29.7012%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (57 samples, 0.05%)</title><rect x="29.7443%" y="1029" width="0.0484%" height="15" fill="rgb(205,97,47)" fg:x="35015" fg:w="57"/><text x="29.9943%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (57 samples, 0.05%)</title><rect x="29.7443%" y="1013" width="0.0484%" height="15" fill="rgb(247,152,14)" fg:x="35015" fg:w="57"/><text x="29.9943%" y="1023.50"></text></g><g><title>SipHashUint256Extra (34 samples, 0.03%)</title><rect x="29.7936%" y="1029" width="0.0289%" height="15" fill="rgb(248,195,53)" fg:x="35073" fg:w="34"/><text x="30.0436%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (15 samples, 0.01%)</title><rect x="29.8097%" y="1013" width="0.0127%" height="15" fill="rgb(226,201,16)" fg:x="35092" fg:w="15"/><text x="30.0597%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (15 samples, 0.01%)</title><rect x="29.8097%" y="997" width="0.0127%" height="15" fill="rgb(205,98,0)" fg:x="35092" fg:w="15"/><text x="30.0597%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (12 samples, 0.01%)</title><rect x="29.8225%" y="1029" width="0.0102%" height="15" fill="rgb(214,191,48)" fg:x="35107" fg:w="12"/><text x="30.0725%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (48 samples, 0.04%)</title><rect x="29.7927%" y="1045" width="0.0408%" height="15" fill="rgb(237,112,39)" fg:x="35072" fg:w="48"/><text x="30.0427%" y="1055.50"></text></g><g><title>CCoinsViewCache::FetchCoin (13,018 samples, 11.06%)</title><rect x="18.7870%" y="1093" width="11.0584%" height="15" fill="rgb(247,203,27)" fg:x="22116" fg:w="13018"/><text x="19.0370%" y="1103.50">CCoinsViewCache:..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1,144 samples, 0.97%)</title><rect x="28.8736%" y="1077" width="0.9718%" height="15" fill="rgb(235,124,28)" fg:x="33990" fg:w="1144"/><text x="29.1236%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1,144 samples, 0.97%)</title><rect x="28.8736%" y="1061" width="0.9718%" height="15" fill="rgb(208,207,46)" fg:x="33990" fg:w="1144"/><text x="29.1236%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (14 samples, 0.01%)</title><rect x="29.8335%" y="1045" width="0.0119%" height="15" fill="rgb(234,176,4)" fg:x="35120" fg:w="14"/><text x="30.0835%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (14 samples, 0.01%)</title><rect x="29.8335%" y="1029" width="0.0119%" height="15" fill="rgb(230,133,28)" fg:x="35120" fg:w="14"/><text x="30.0835%" y="1039.50"></text></g><g><title>SipHashUint256Extra (181 samples, 0.15%)</title><rect x="29.8454%" y="1093" width="0.1538%" height="15" fill="rgb(211,137,40)" fg:x="35134" fg:w="181"/><text x="30.0954%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (69 samples, 0.06%)</title><rect x="29.9405%" y="1077" width="0.0586%" height="15" fill="rgb(254,35,13)" fg:x="35246" fg:w="69"/><text x="30.1905%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (69 samples, 0.06%)</title><rect x="29.9405%" y="1061" width="0.0586%" height="15" fill="rgb(225,49,51)" fg:x="35246" fg:w="69"/><text x="30.1905%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (48 samples, 0.04%)</title><rect x="30.0008%" y="1093" width="0.0408%" height="15" fill="rgb(251,10,15)" fg:x="35317" fg:w="48"/><text x="30.2508%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (17 samples, 0.01%)</title><rect x="30.0518%" y="933" width="0.0144%" height="15" fill="rgb(228,207,15)" fg:x="35377" fg:w="17"/><text x="30.3018%" y="943.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (22 samples, 0.02%)</title><rect x="30.0680%" y="933" width="0.0187%" height="15" fill="rgb(241,99,19)" fg:x="35396" fg:w="22"/><text x="30.3180%" y="943.50"></text></g><g><title>CCoinsViewCache::GetCoin (13,325 samples, 11.32%)</title><rect x="18.7861%" y="1109" width="11.3192%" height="15" fill="rgb(207,104,49)" fg:x="22115" fg:w="13325"/><text x="19.0361%" y="1119.50">CCoinsViewCache::..</text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (67 samples, 0.06%)</title><rect x="30.0484%" y="1093" width="0.0569%" height="15" fill="rgb(234,99,18)" fg:x="35373" fg:w="67"/><text x="30.2984%" y="1103.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (67 samples, 0.06%)</title><rect x="30.0484%" y="1077" width="0.0569%" height="15" fill="rgb(213,191,49)" fg:x="35373" fg:w="67"/><text x="30.2984%" y="1087.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (67 samples, 0.06%)</title><rect x="30.0484%" y="1061" width="0.0569%" height="15" fill="rgb(210,226,19)" fg:x="35373" fg:w="67"/><text x="30.2984%" y="1071.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (67 samples, 0.06%)</title><rect x="30.0484%" y="1045" width="0.0569%" height="15" fill="rgb(229,97,18)" fg:x="35373" fg:w="67"/><text x="30.2984%" y="1055.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (67 samples, 0.06%)</title><rect x="30.0484%" y="1029" width="0.0569%" height="15" fill="rgb(211,167,15)" fg:x="35373" fg:w="67"/><text x="30.2984%" y="1039.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (64 samples, 0.05%)</title><rect x="30.0510%" y="1013" width="0.0544%" height="15" fill="rgb(210,169,34)" fg:x="35376" fg:w="64"/><text x="30.3010%" y="1023.50"></text></g><g><title>Coin::Coin (64 samples, 0.05%)</title><rect x="30.0510%" y="997" width="0.0544%" height="15" fill="rgb(241,121,31)" fg:x="35376" fg:w="64"/><text x="30.3010%" y="1007.50"></text></g><g><title>CTxOut::CTxOut (64 samples, 0.05%)</title><rect x="30.0510%" y="981" width="0.0544%" height="15" fill="rgb(232,40,11)" fg:x="35376" fg:w="64"/><text x="30.3010%" y="991.50"></text></g><g><title>CScript::CScript (64 samples, 0.05%)</title><rect x="30.0510%" y="965" width="0.0544%" height="15" fill="rgb(205,86,26)" fg:x="35376" fg:w="64"/><text x="30.3010%" y="975.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (64 samples, 0.05%)</title><rect x="30.0510%" y="949" width="0.0544%" height="15" fill="rgb(231,126,28)" fg:x="35376" fg:w="64"/><text x="30.3010%" y="959.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (22 samples, 0.02%)</title><rect x="30.0866%" y="933" width="0.0187%" height="15" fill="rgb(219,221,18)" fg:x="35418" fg:w="22"/><text x="30.3366%" y="943.50"></text></g><g><title>SipHashUint256Extra (98 samples, 0.08%)</title><rect x="30.1181%" y="1109" width="0.0832%" height="15" fill="rgb(211,40,0)" fg:x="35455" fg:w="98"/><text x="30.3681%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (52 samples, 0.04%)</title><rect x="30.1572%" y="1093" width="0.0442%" height="15" fill="rgb(239,85,43)" fg:x="35501" fg:w="52"/><text x="30.4072%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (52 samples, 0.04%)</title><rect x="30.1572%" y="1077" width="0.0442%" height="15" fill="rgb(231,55,21)" fg:x="35501" fg:w="52"/><text x="30.4072%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (19 samples, 0.02%)</title><rect x="30.2362%" y="1093" width="0.0161%" height="15" fill="rgb(225,184,43)" fg:x="35594" fg:w="19"/><text x="30.4862%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (19 samples, 0.02%)</title><rect x="30.2362%" y="1077" width="0.0161%" height="15" fill="rgb(251,158,41)" fg:x="35594" fg:w="19"/><text x="30.4862%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (19 samples, 0.02%)</title><rect x="30.2362%" y="1061" width="0.0161%" height="15" fill="rgb(234,159,37)" fg:x="35594" fg:w="19"/><text x="30.4862%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (19 samples, 0.02%)</title><rect x="30.2362%" y="1045" width="0.0161%" height="15" fill="rgb(216,204,22)" fg:x="35594" fg:w="19"/><text x="30.4862%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (75 samples, 0.06%)</title><rect x="30.2013%" y="1109" width="0.0637%" height="15" fill="rgb(214,17,3)" fg:x="35553" fg:w="75"/><text x="30.4513%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (15 samples, 0.01%)</title><rect x="30.2523%" y="1093" width="0.0127%" height="15" fill="rgb(212,111,17)" fg:x="35613" fg:w="15"/><text x="30.5023%" y="1103.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (15 samples, 0.01%)</title><rect x="30.2523%" y="1077" width="0.0127%" height="15" fill="rgb(221,157,24)" fg:x="35613" fg:w="15"/><text x="30.5023%" y="1087.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (15 samples, 0.01%)</title><rect x="30.2523%" y="1061" width="0.0127%" height="15" fill="rgb(252,16,13)" fg:x="35613" fg:w="15"/><text x="30.5023%" y="1071.50"></text></g><g><title>operator== (15 samples, 0.01%)</title><rect x="30.2523%" y="1045" width="0.0127%" height="15" fill="rgb(221,62,2)" fg:x="35613" fg:w="15"/><text x="30.5023%" y="1055.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (14 samples, 0.01%)</title><rect x="30.2531%" y="1029" width="0.0119%" height="15" fill="rgb(247,87,22)" fg:x="35614" fg:w="14"/><text x="30.5031%" y="1039.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (14 samples, 0.01%)</title><rect x="30.2531%" y="1013" width="0.0119%" height="15" fill="rgb(215,73,9)" fg:x="35614" fg:w="14"/><text x="30.5031%" y="1023.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (14 samples, 0.01%)</title><rect x="30.2531%" y="997" width="0.0119%" height="15" fill="rgb(207,175,33)" fg:x="35614" fg:w="14"/><text x="30.5031%" y="1007.50"></text></g><g><title>CCoinsViewCache::FetchCoin (15 samples, 0.01%)</title><rect x="30.2676%" y="1077" width="0.0127%" height="15" fill="rgb(243,129,54)" fg:x="35631" fg:w="15"/><text x="30.5176%" y="1087.50"></text></g><g><title>SipHashUint256Extra (29 samples, 0.02%)</title><rect x="30.2897%" y="1077" width="0.0246%" height="15" fill="rgb(227,119,45)" fg:x="35657" fg:w="29"/><text x="30.5397%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (14 samples, 0.01%)</title><rect x="30.3024%" y="1061" width="0.0119%" height="15" fill="rgb(205,109,36)" fg:x="35672" fg:w="14"/><text x="30.5524%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (14 samples, 0.01%)</title><rect x="30.3024%" y="1045" width="0.0119%" height="15" fill="rgb(205,6,39)" fg:x="35672" fg:w="14"/><text x="30.5524%" y="1055.50"></text></g><g><title>Coin::operator= (22 samples, 0.02%)</title><rect x="30.3466%" y="1045" width="0.0187%" height="15" fill="rgb(221,32,16)" fg:x="35724" fg:w="22"/><text x="30.5966%" y="1055.50"></text></g><g><title>CTxOut::operator= (16 samples, 0.01%)</title><rect x="30.3517%" y="1029" width="0.0136%" height="15" fill="rgb(228,144,50)" fg:x="35730" fg:w="16"/><text x="30.6017%" y="1039.50"></text></g><g><title>CScript::operator= (13 samples, 0.01%)</title><rect x="30.3542%" y="1013" width="0.0110%" height="15" fill="rgb(229,201,53)" fg:x="35733" fg:w="13"/><text x="30.6042%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (13 samples, 0.01%)</title><rect x="30.3542%" y="997" width="0.0110%" height="15" fill="rgb(249,153,27)" fg:x="35733" fg:w="13"/><text x="30.6042%" y="1007.50"></text></g><g><title>CCoinsViewCache::FetchCoin (66 samples, 0.06%)</title><rect x="30.3177%" y="1061" width="0.0561%" height="15" fill="rgb(227,106,25)" fg:x="35690" fg:w="66"/><text x="30.5677%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (94 samples, 0.08%)</title><rect x="30.3738%" y="1061" width="0.0799%" height="15" fill="rgb(230,65,29)" fg:x="35756" fg:w="94"/><text x="30.6238%" y="1071.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (92 samples, 0.08%)</title><rect x="30.3755%" y="1045" width="0.0782%" height="15" fill="rgb(221,57,46)" fg:x="35758" fg:w="92"/><text x="30.6255%" y="1055.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (90 samples, 0.08%)</title><rect x="30.3772%" y="1029" width="0.0765%" height="15" fill="rgb(229,161,17)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (90 samples, 0.08%)</title><rect x="30.3772%" y="1013" width="0.0765%" height="15" fill="rgb(222,213,11)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="1023.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (90 samples, 0.08%)</title><rect x="30.3772%" y="997" width="0.0765%" height="15" fill="rgb(235,35,13)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (90 samples, 0.08%)</title><rect x="30.3772%" y="981" width="0.0765%" height="15" fill="rgb(233,158,34)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="991.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (90 samples, 0.08%)</title><rect x="30.3772%" y="965" width="0.0765%" height="15" fill="rgb(215,151,48)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="975.50"></text></g><g><title>Coin::Coin (90 samples, 0.08%)</title><rect x="30.3772%" y="949" width="0.0765%" height="15" fill="rgb(229,84,14)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="959.50"></text></g><g><title>CTxOut::CTxOut (90 samples, 0.08%)</title><rect x="30.3772%" y="933" width="0.0765%" height="15" fill="rgb(229,68,14)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="943.50"></text></g><g><title>CScript::CScript (90 samples, 0.08%)</title><rect x="30.3772%" y="917" width="0.0765%" height="15" fill="rgb(243,106,26)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="927.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (90 samples, 0.08%)</title><rect x="30.3772%" y="901" width="0.0765%" height="15" fill="rgb(206,45,38)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="911.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (90 samples, 0.08%)</title><rect x="30.3772%" y="885" width="0.0765%" height="15" fill="rgb(226,6,15)" fg:x="35760" fg:w="90"/><text x="30.6272%" y="895.50"></text></g><g><title>CCoinsViewCache::HaveInputs (12 samples, 0.01%)</title><rect x="30.4536%" y="1061" width="0.0102%" height="15" fill="rgb(232,22,54)" fg:x="35850" fg:w="12"/><text x="30.7036%" y="1071.50"></text></g><g><title>SipHashUint256Extra (129 samples, 0.11%)</title><rect x="30.4749%" y="1061" width="0.1096%" height="15" fill="rgb(229,222,32)" fg:x="35875" fg:w="129"/><text x="30.7249%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (49 samples, 0.04%)</title><rect x="30.5428%" y="1045" width="0.0416%" height="15" fill="rgb(228,62,29)" fg:x="35955" fg:w="49"/><text x="30.7928%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (49 samples, 0.04%)</title><rect x="30.5428%" y="1029" width="0.0416%" height="15" fill="rgb(251,103,34)" fg:x="35955" fg:w="49"/><text x="30.7928%" y="1039.50"></text></g><g><title>CCoinsViewCache::FetchCoin (13 samples, 0.01%)</title><rect x="30.5938%" y="981" width="0.0110%" height="15" fill="rgb(233,12,30)" fg:x="36015" fg:w="13"/><text x="30.8438%" y="991.50"></text></g><g><title>SipHashUint256Extra (28 samples, 0.02%)</title><rect x="30.6057%" y="981" width="0.0238%" height="15" fill="rgb(238,52,0)" fg:x="36029" fg:w="28"/><text x="30.8557%" y="991.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (48 samples, 0.04%)</title><rect x="30.5938%" y="1013" width="0.0408%" height="15" fill="rgb(223,98,5)" fg:x="36015" fg:w="48"/><text x="30.8438%" y="1023.50"></text></g><g><title>SaltedOutpointHasher::operator (48 samples, 0.04%)</title><rect x="30.5938%" y="997" width="0.0408%" height="15" fill="rgb(228,75,37)" fg:x="36015" fg:w="48"/><text x="30.8438%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (49 samples, 0.04%)</title><rect x="30.5938%" y="1045" width="0.0416%" height="15" fill="rgb(205,115,49)" fg:x="36015" fg:w="49"/><text x="30.8438%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (49 samples, 0.04%)</title><rect x="30.5938%" y="1029" width="0.0416%" height="15" fill="rgb(250,154,43)" fg:x="36015" fg:w="49"/><text x="30.8438%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (375 samples, 0.32%)</title><rect x="30.3177%" y="1077" width="0.3186%" height="15" fill="rgb(226,43,29)" fg:x="35690" fg:w="375"/><text x="30.5677%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (61 samples, 0.05%)</title><rect x="30.5844%" y="1061" width="0.0518%" height="15" fill="rgb(249,228,39)" fg:x="36004" fg:w="61"/><text x="30.8344%" y="1071.50"></text></g><g><title>SipHashUint256Extra (113 samples, 0.10%)</title><rect x="30.6363%" y="1061" width="0.0960%" height="15" fill="rgb(216,79,43)" fg:x="36065" fg:w="113"/><text x="30.8863%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (46 samples, 0.04%)</title><rect x="30.6932%" y="1045" width="0.0391%" height="15" fill="rgb(228,95,12)" fg:x="36132" fg:w="46"/><text x="30.9432%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (46 samples, 0.04%)</title><rect x="30.6932%" y="1029" width="0.0391%" height="15" fill="rgb(249,221,15)" fg:x="36132" fg:w="46"/><text x="30.9432%" y="1039.50"></text></g><g><title>CCoinsViewCache::FetchCoin (15 samples, 0.01%)</title><rect x="30.7322%" y="981" width="0.0127%" height="15" fill="rgb(233,34,13)" fg:x="36178" fg:w="15"/><text x="30.9822%" y="991.50"></text></g><g><title>SipHashUint256Extra (95 samples, 0.08%)</title><rect x="30.7450%" y="981" width="0.0807%" height="15" fill="rgb(214,103,39)" fg:x="36193" fg:w="95"/><text x="30.9950%" y="991.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (38 samples, 0.03%)</title><rect x="30.7934%" y="965" width="0.0323%" height="15" fill="rgb(251,126,39)" fg:x="36250" fg:w="38"/><text x="31.0434%" y="975.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (38 samples, 0.03%)</title><rect x="30.7934%" y="949" width="0.0323%" height="15" fill="rgb(214,216,36)" fg:x="36250" fg:w="38"/><text x="31.0434%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (112 samples, 0.10%)</title><rect x="30.7322%" y="1061" width="0.0951%" height="15" fill="rgb(220,221,8)" fg:x="36178" fg:w="112"/><text x="30.9822%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (112 samples, 0.10%)</title><rect x="30.7322%" y="1045" width="0.0951%" height="15" fill="rgb(240,216,3)" fg:x="36178" fg:w="112"/><text x="30.9822%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (112 samples, 0.10%)</title><rect x="30.7322%" y="1029" width="0.0951%" height="15" fill="rgb(232,218,17)" fg:x="36178" fg:w="112"/><text x="30.9822%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (112 samples, 0.10%)</title><rect x="30.7322%" y="1013" width="0.0951%" height="15" fill="rgb(229,163,45)" fg:x="36178" fg:w="112"/><text x="30.9822%" y="1023.50"></text></g><g><title>SaltedOutpointHasher::operator (112 samples, 0.10%)</title><rect x="30.7322%" y="997" width="0.0951%" height="15" fill="rgb(231,110,42)" fg:x="36178" fg:w="112"/><text x="30.9822%" y="1007.50"></text></g><g><title>SipHashUint256Extra (129 samples, 0.11%)</title><rect x="30.8427%" y="981" width="0.1096%" height="15" fill="rgb(208,170,48)" fg:x="36308" fg:w="129"/><text x="31.0927%" y="991.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (46 samples, 0.04%)</title><rect x="30.9132%" y="965" width="0.0391%" height="15" fill="rgb(239,116,25)" fg:x="36391" fg:w="46"/><text x="31.1632%" y="975.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (46 samples, 0.04%)</title><rect x="30.9132%" y="949" width="0.0391%" height="15" fill="rgb(219,200,50)" fg:x="36391" fg:w="46"/><text x="31.1632%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (13 samples, 0.01%)</title><rect x="30.9523%" y="981" width="0.0110%" height="15" fill="rgb(245,200,0)" fg:x="36437" fg:w="13"/><text x="31.2023%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (13 samples, 0.01%)</title><rect x="30.9523%" y="965" width="0.0110%" height="15" fill="rgb(245,119,33)" fg:x="36437" fg:w="13"/><text x="31.2023%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (386 samples, 0.33%)</title><rect x="30.6363%" y="1077" width="0.3279%" height="15" fill="rgb(231,125,12)" fg:x="36065" fg:w="386"/><text x="30.8863%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (161 samples, 0.14%)</title><rect x="30.8274%" y="1061" width="0.1368%" height="15" fill="rgb(216,96,41)" fg:x="36290" fg:w="161"/><text x="31.0774%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (161 samples, 0.14%)</title><rect x="30.8274%" y="1045" width="0.1368%" height="15" fill="rgb(248,43,45)" fg:x="36290" fg:w="161"/><text x="31.0774%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (144 samples, 0.12%)</title><rect x="30.8418%" y="1029" width="0.1223%" height="15" fill="rgb(217,222,7)" fg:x="36307" fg:w="144"/><text x="31.0918%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (144 samples, 0.12%)</title><rect x="30.8418%" y="1013" width="0.1223%" height="15" fill="rgb(233,28,6)" fg:x="36307" fg:w="144"/><text x="31.0918%" y="1023.50"></text></g><g><title>SaltedOutpointHasher::operator (144 samples, 0.12%)</title><rect x="30.8418%" y="997" width="0.1223%" height="15" fill="rgb(231,218,15)" fg:x="36307" fg:w="144"/><text x="31.0918%" y="1007.50"></text></g><g><title>CCoinsViewCache::FetchCoin (30 samples, 0.03%)</title><rect x="30.9650%" y="1061" width="0.0255%" height="15" fill="rgb(226,171,48)" fg:x="36452" fg:w="30"/><text x="31.2150%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (20 samples, 0.02%)</title><rect x="30.9905%" y="1061" width="0.0170%" height="15" fill="rgb(235,201,9)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="1071.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (20 samples, 0.02%)</title><rect x="30.9905%" y="1045" width="0.0170%" height="15" fill="rgb(217,80,15)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="1055.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (20 samples, 0.02%)</title><rect x="30.9905%" y="1029" width="0.0170%" height="15" fill="rgb(219,152,8)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (20 samples, 0.02%)</title><rect x="30.9905%" y="1013" width="0.0170%" height="15" fill="rgb(243,107,38)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="1023.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (20 samples, 0.02%)</title><rect x="30.9905%" y="997" width="0.0170%" height="15" fill="rgb(231,17,5)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (20 samples, 0.02%)</title><rect x="30.9905%" y="981" width="0.0170%" height="15" fill="rgb(209,25,54)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="991.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (20 samples, 0.02%)</title><rect x="30.9905%" y="965" width="0.0170%" height="15" fill="rgb(219,0,2)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="975.50"></text></g><g><title>Coin::Coin (20 samples, 0.02%)</title><rect x="30.9905%" y="949" width="0.0170%" height="15" fill="rgb(246,9,5)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="959.50"></text></g><g><title>CTxOut::CTxOut (20 samples, 0.02%)</title><rect x="30.9905%" y="933" width="0.0170%" height="15" fill="rgb(226,159,4)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="943.50"></text></g><g><title>CScript::CScript (20 samples, 0.02%)</title><rect x="30.9905%" y="917" width="0.0170%" height="15" fill="rgb(219,175,34)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="927.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (20 samples, 0.02%)</title><rect x="30.9905%" y="901" width="0.0170%" height="15" fill="rgb(236,10,46)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="911.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (20 samples, 0.02%)</title><rect x="30.9905%" y="885" width="0.0170%" height="15" fill="rgb(240,211,16)" fg:x="36482" fg:w="20"/><text x="31.2405%" y="895.50"></text></g><g><title>SipHashUint256Extra (12 samples, 0.01%)</title><rect x="31.0126%" y="1061" width="0.0102%" height="15" fill="rgb(205,3,43)" fg:x="36508" fg:w="12"/><text x="31.2626%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (74 samples, 0.06%)</title><rect x="30.9642%" y="1077" width="0.0629%" height="15" fill="rgb(245,7,22)" fg:x="36451" fg:w="74"/><text x="31.2142%" y="1087.50"></text></g><g><title>CCoinsViewCache::GetCoin (115 samples, 0.10%)</title><rect x="31.0364%" y="1045" width="0.0977%" height="15" fill="rgb(239,132,32)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="1055.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (115 samples, 0.10%)</title><rect x="31.0364%" y="1029" width="0.0977%" height="15" fill="rgb(228,202,34)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="1039.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (115 samples, 0.10%)</title><rect x="31.0364%" y="1013" width="0.0977%" height="15" fill="rgb(254,200,22)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="1023.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (115 samples, 0.10%)</title><rect x="31.0364%" y="997" width="0.0977%" height="15" fill="rgb(219,10,39)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="1007.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (115 samples, 0.10%)</title><rect x="31.0364%" y="981" width="0.0977%" height="15" fill="rgb(226,210,39)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="991.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (115 samples, 0.10%)</title><rect x="31.0364%" y="965" width="0.0977%" height="15" fill="rgb(208,219,16)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="975.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (115 samples, 0.10%)</title><rect x="31.0364%" y="949" width="0.0977%" height="15" fill="rgb(216,158,51)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="959.50"></text></g><g><title>Coin::Coin (115 samples, 0.10%)</title><rect x="31.0364%" y="933" width="0.0977%" height="15" fill="rgb(233,14,44)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="943.50"></text></g><g><title>CTxOut::CTxOut (115 samples, 0.10%)</title><rect x="31.0364%" y="917" width="0.0977%" height="15" fill="rgb(237,97,39)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="927.50"></text></g><g><title>CScript::CScript (115 samples, 0.10%)</title><rect x="31.0364%" y="901" width="0.0977%" height="15" fill="rgb(218,198,43)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="911.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (115 samples, 0.10%)</title><rect x="31.0364%" y="885" width="0.0977%" height="15" fill="rgb(231,104,20)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="895.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (115 samples, 0.10%)</title><rect x="31.0364%" y="869" width="0.0977%" height="15" fill="rgb(254,36,13)" fg:x="36536" fg:w="115"/><text x="31.2864%" y="879.50"></text></g><g><title>CTransaction::IsCoinBase (13 samples, 0.01%)</title><rect x="31.1383%" y="1029" width="0.0110%" height="15" fill="rgb(248,14,50)" fg:x="36656" fg:w="13"/><text x="31.3883%" y="1039.50"></text></g><g><title>Chainstate::ConnectBlock (26 samples, 0.02%)</title><rect x="31.1340%" y="1045" width="0.0221%" height="15" fill="rgb(217,107,29)" fg:x="36651" fg:w="26"/><text x="31.3840%" y="1055.50"></text></g><g><title>CCoinsViewCache::FetchCoin (14,594 samples, 12.40%)</title><rect x="18.7606%" y="1125" width="12.3972%" height="15" fill="rgb(251,169,33)" fg:x="22085" fg:w="14594"/><text x="19.0106%" y="1135.50">CCoinsViewCache::Fe..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1,049 samples, 0.89%)</title><rect x="30.2667%" y="1109" width="0.8911%" height="15" fill="rgb(217,108,32)" fg:x="35630" fg:w="1049"/><text x="30.5167%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1,048 samples, 0.89%)</title><rect x="30.2676%" y="1093" width="0.8902%" height="15" fill="rgb(219,66,42)" fg:x="35631" fg:w="1048"/><text x="30.5176%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (154 samples, 0.13%)</title><rect x="31.0270%" y="1077" width="0.1308%" height="15" fill="rgb(206,180,7)" fg:x="36525" fg:w="154"/><text x="31.2770%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (154 samples, 0.13%)</title><rect x="31.0270%" y="1061" width="0.1308%" height="15" fill="rgb(208,226,31)" fg:x="36525" fg:w="154"/><text x="31.2770%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (298 samples, 0.25%)</title><rect x="31.1578%" y="1125" width="0.2531%" height="15" fill="rgb(218,26,49)" fg:x="36679" fg:w="298"/><text x="31.4078%" y="1135.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (295 samples, 0.25%)</title><rect x="31.1604%" y="1109" width="0.2506%" height="15" fill="rgb(233,197,48)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="1119.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (295 samples, 0.25%)</title><rect x="31.1604%" y="1093" width="0.2506%" height="15" fill="rgb(252,181,51)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (295 samples, 0.25%)</title><rect x="31.1604%" y="1077" width="0.2506%" height="15" fill="rgb(253,90,19)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="1087.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (295 samples, 0.25%)</title><rect x="31.1604%" y="1061" width="0.2506%" height="15" fill="rgb(215,171,30)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (295 samples, 0.25%)</title><rect x="31.1604%" y="1045" width="0.2506%" height="15" fill="rgb(214,222,9)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="1055.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (295 samples, 0.25%)</title><rect x="31.1604%" y="1029" width="0.2506%" height="15" fill="rgb(223,3,22)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="1039.50"></text></g><g><title>Coin::Coin (295 samples, 0.25%)</title><rect x="31.1604%" y="1013" width="0.2506%" height="15" fill="rgb(225,196,46)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="1023.50"></text></g><g><title>CTxOut::CTxOut (295 samples, 0.25%)</title><rect x="31.1604%" y="997" width="0.2506%" height="15" fill="rgb(209,110,37)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="1007.50"></text></g><g><title>CScript::CScript (295 samples, 0.25%)</title><rect x="31.1604%" y="981" width="0.2506%" height="15" fill="rgb(249,89,12)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (295 samples, 0.25%)</title><rect x="31.1604%" y="965" width="0.2506%" height="15" fill="rgb(226,27,33)" fg:x="36682" fg:w="295"/><text x="31.4104%" y="975.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (284 samples, 0.24%)</title><rect x="31.1697%" y="949" width="0.2413%" height="15" fill="rgb(213,82,22)" fg:x="36693" fg:w="284"/><text x="31.4197%" y="959.50"></text></g><g><title>SipHashUint256Extra (29 samples, 0.02%)</title><rect x="31.4246%" y="1125" width="0.0246%" height="15" fill="rgb(248,140,0)" fg:x="36993" fg:w="29"/><text x="31.6746%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (19 samples, 0.02%)</title><rect x="31.4492%" y="1125" width="0.0161%" height="15" fill="rgb(228,106,3)" fg:x="37022" fg:w="19"/><text x="31.6992%" y="1135.50"></text></g><g><title>CCoinsViewCache::HaveCoin (14,967 samples, 12.71%)</title><rect x="18.7538%" y="1141" width="12.7141%" height="15" fill="rgb(209,23,37)" fg:x="22077" fg:w="14967"/><text x="19.0038%" y="1151.50">CCoinsViewCache::Ha..</text></g><g><title>CCoinsViewCache::HaveInputs (14,972 samples, 12.72%)</title><rect x="18.7521%" y="1157" width="12.7183%" height="15" fill="rgb(241,93,50)" fg:x="22075" fg:w="14972"/><text x="19.0021%" y="1167.50">CCoinsViewCache::Ha..</text></g><g><title>SipHashUint256Extra (67 samples, 0.06%)</title><rect x="31.4772%" y="1157" width="0.0569%" height="15" fill="rgb(253,46,43)" fg:x="37055" fg:w="67"/><text x="31.7272%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (22 samples, 0.02%)</title><rect x="31.5155%" y="1141" width="0.0187%" height="15" fill="rgb(226,206,43)" fg:x="37100" fg:w="22"/><text x="31.7655%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (22 samples, 0.02%)</title><rect x="31.5155%" y="1125" width="0.0187%" height="15" fill="rgb(217,54,7)" fg:x="37100" fg:w="22"/><text x="31.7655%" y="1135.50"></text></g><g><title>Consensus::CheckTxInputs (15,878 samples, 13.49%)</title><rect x="18.0691%" y="1173" width="13.4879%" height="15" fill="rgb(223,5,52)" fg:x="21271" fg:w="15878"/><text x="18.3191%" y="1183.50">Consensus::CheckTxIn..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (27 samples, 0.02%)</title><rect x="31.5341%" y="1157" width="0.0229%" height="15" fill="rgb(206,52,46)" fg:x="37122" fg:w="27"/><text x="31.7841%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (18 samples, 0.02%)</title><rect x="31.5418%" y="1141" width="0.0153%" height="15" fill="rgb(253,136,11)" fg:x="37131" fg:w="18"/><text x="31.7918%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (18 samples, 0.02%)</title><rect x="31.5418%" y="1125" width="0.0153%" height="15" fill="rgb(208,106,33)" fg:x="37131" fg:w="18"/><text x="31.7918%" y="1135.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (18 samples, 0.02%)</title><rect x="31.5418%" y="1109" width="0.0153%" height="15" fill="rgb(206,54,4)" fg:x="37131" fg:w="18"/><text x="31.7918%" y="1119.50"></text></g><g><title>operator== (18 samples, 0.02%)</title><rect x="31.5418%" y="1093" width="0.0153%" height="15" fill="rgb(213,3,15)" fg:x="37131" fg:w="18"/><text x="31.7918%" y="1103.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (15 samples, 0.01%)</title><rect x="31.5443%" y="1077" width="0.0127%" height="15" fill="rgb(252,211,39)" fg:x="37134" fg:w="15"/><text x="31.7943%" y="1087.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (15 samples, 0.01%)</title><rect x="31.5443%" y="1061" width="0.0127%" height="15" fill="rgb(223,6,36)" fg:x="37134" fg:w="15"/><text x="31.7943%" y="1071.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (15 samples, 0.01%)</title><rect x="31.5443%" y="1045" width="0.0127%" height="15" fill="rgb(252,169,45)" fg:x="37134" fg:w="15"/><text x="31.7943%" y="1055.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (26 samples, 0.02%)</title><rect x="31.5613%" y="1157" width="0.0221%" height="15" fill="rgb(212,48,26)" fg:x="37154" fg:w="26"/><text x="31.8113%" y="1167.50"></text></g><g><title>void std::sort&lt;long*&gt; (23 samples, 0.02%)</title><rect x="31.5639%" y="1141" width="0.0195%" height="15" fill="rgb(251,102,48)" fg:x="37157" fg:w="23"/><text x="31.8139%" y="1151.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (23 samples, 0.02%)</title><rect x="31.5639%" y="1125" width="0.0195%" height="15" fill="rgb(243,208,16)" fg:x="37157" fg:w="23"/><text x="31.8139%" y="1135.50"></text></g><g><title>SipHashUint256Extra (21 samples, 0.02%)</title><rect x="31.5656%" y="1109" width="0.0178%" height="15" fill="rgb(219,96,24)" fg:x="37159" fg:w="21"/><text x="31.8156%" y="1119.50"></text></g><g><title>Chainstate::ConnectBlock (23 samples, 0.02%)</title><rect x="31.6030%" y="1157" width="0.0195%" height="15" fill="rgb(219,33,29)" fg:x="37203" fg:w="23"/><text x="31.8530%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (12 samples, 0.01%)</title><rect x="31.6947%" y="1141" width="0.0102%" height="15" fill="rgb(223,176,5)" fg:x="37311" fg:w="12"/><text x="31.9447%" y="1151.50"></text></g><g><title>ReadLE64 (12 samples, 0.01%)</title><rect x="31.6947%" y="1125" width="0.0102%" height="15" fill="rgb(228,140,14)" fg:x="37311" fg:w="12"/><text x="31.9447%" y="1135.50"></text></g><g><title>SipHashUint256Extra (12 samples, 0.01%)</title><rect x="31.6947%" y="1109" width="0.0102%" height="15" fill="rgb(217,179,31)" fg:x="37311" fg:w="12"/><text x="31.9447%" y="1119.50"></text></g><g><title>SipHashUint256Extra (135 samples, 0.11%)</title><rect x="31.6284%" y="1157" width="0.1147%" height="15" fill="rgb(230,9,30)" fg:x="37233" fg:w="135"/><text x="31.8784%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (45 samples, 0.04%)</title><rect x="31.7049%" y="1141" width="0.0382%" height="15" fill="rgb(230,136,20)" fg:x="37323" fg:w="45"/><text x="31.9549%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (45 samples, 0.04%)</title><rect x="31.7049%" y="1125" width="0.0382%" height="15" fill="rgb(215,210,22)" fg:x="37323" fg:w="45"/><text x="31.9549%" y="1135.50"></text></g><g><title>EvaluateSequenceLocks (219 samples, 0.19%)</title><rect x="31.5613%" y="1173" width="0.1860%" height="15" fill="rgb(218,43,5)" fg:x="37154" fg:w="219"/><text x="31.8113%" y="1183.50"></text></g><g><title>GetP2SHSigOpCount (32 samples, 0.03%)</title><rect x="31.7703%" y="1077" width="0.0272%" height="15" fill="rgb(216,11,5)" fg:x="37400" fg:w="32"/><text x="32.0203%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (55 samples, 0.05%)</title><rect x="31.7635%" y="1093" width="0.0467%" height="15" fill="rgb(209,82,29)" fg:x="37392" fg:w="55"/><text x="32.0135%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (105 samples, 0.09%)</title><rect x="31.7627%" y="1141" width="0.0892%" height="15" fill="rgb(244,115,12)" fg:x="37391" fg:w="105"/><text x="32.0127%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (105 samples, 0.09%)</title><rect x="31.7627%" y="1125" width="0.0892%" height="15" fill="rgb(222,82,18)" fg:x="37391" fg:w="105"/><text x="32.0127%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (105 samples, 0.09%)</title><rect x="31.7627%" y="1109" width="0.0892%" height="15" fill="rgb(249,227,8)" fg:x="37391" fg:w="105"/><text x="32.0127%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (49 samples, 0.04%)</title><rect x="31.8102%" y="1093" width="0.0416%" height="15" fill="rgb(253,141,45)" fg:x="37447" fg:w="49"/><text x="32.0602%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (49 samples, 0.04%)</title><rect x="31.8102%" y="1077" width="0.0416%" height="15" fill="rgb(234,184,4)" fg:x="37447" fg:w="49"/><text x="32.0602%" y="1087.50"></text></g><g><title>CScript::IsWitnessProgram (15 samples, 0.01%)</title><rect x="31.8527%" y="1141" width="0.0127%" height="15" fill="rgb(218,194,23)" fg:x="37497" fg:w="15"/><text x="32.1027%" y="1151.50"></text></g><g><title>GetP2SHSigOpCount (24 samples, 0.02%)</title><rect x="31.8697%" y="1141" width="0.0204%" height="15" fill="rgb(235,66,41)" fg:x="37517" fg:w="24"/><text x="32.1197%" y="1151.50"></text></g><g><title>CCoinsViewCache::AccessCoin (159 samples, 0.14%)</title><rect x="31.7627%" y="1157" width="0.1351%" height="15" fill="rgb(245,217,1)" fg:x="37391" fg:w="159"/><text x="32.0127%" y="1167.50"></text></g><g><title>CScript::IsWitnessProgram (45 samples, 0.04%)</title><rect x="31.9105%" y="1157" width="0.0382%" height="15" fill="rgb(229,91,1)" fg:x="37565" fg:w="45"/><text x="32.1605%" y="1167.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (37 samples, 0.03%)</title><rect x="31.9173%" y="1141" width="0.0314%" height="15" fill="rgb(207,101,30)" fg:x="37573" fg:w="37"/><text x="32.1673%" y="1151.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (37 samples, 0.03%)</title><rect x="31.9173%" y="1125" width="0.0314%" height="15" fill="rgb(223,82,49)" fg:x="37573" fg:w="37"/><text x="32.1673%" y="1135.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (36 samples, 0.03%)</title><rect x="31.9181%" y="1109" width="0.0306%" height="15" fill="rgb(218,167,17)" fg:x="37574" fg:w="36"/><text x="32.1681%" y="1119.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (36 samples, 0.03%)</title><rect x="31.9181%" y="1093" width="0.0306%" height="15" fill="rgb(208,103,14)" fg:x="37574" fg:w="36"/><text x="32.1681%" y="1103.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (36 samples, 0.03%)</title><rect x="31.9181%" y="1077" width="0.0306%" height="15" fill="rgb(238,20,8)" fg:x="37574" fg:w="36"/><text x="32.1681%" y="1087.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (36 samples, 0.03%)</title><rect x="31.9181%" y="1061" width="0.0306%" height="15" fill="rgb(218,80,54)" fg:x="37574" fg:w="36"/><text x="32.1681%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (36 samples, 0.03%)</title><rect x="31.9181%" y="1045" width="0.0306%" height="15" fill="rgb(240,144,17)" fg:x="37574" fg:w="36"/><text x="32.1681%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (36 samples, 0.03%)</title><rect x="31.9181%" y="1029" width="0.0306%" height="15" fill="rgb(245,27,50)" fg:x="37574" fg:w="36"/><text x="32.1681%" y="1039.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (36 samples, 0.03%)</title><rect x="31.9181%" y="1013" width="0.0306%" height="15" fill="rgb(251,51,7)" fg:x="37574" fg:w="36"/><text x="32.1681%" y="1023.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (36 samples, 0.03%)</title><rect x="31.9181%" y="997" width="0.0306%" height="15" fill="rgb(245,217,29)" fg:x="37574" fg:w="36"/><text x="32.1681%" y="1007.50"></text></g><g><title>CCoinsViewCache::FetchCoin (30 samples, 0.03%)</title><rect x="31.9648%" y="1141" width="0.0255%" height="15" fill="rgb(221,176,29)" fg:x="37629" fg:w="30"/><text x="32.2148%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (14 samples, 0.01%)</title><rect x="31.9784%" y="1125" width="0.0119%" height="15" fill="rgb(212,180,24)" fg:x="37645" fg:w="14"/><text x="32.2284%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (14 samples, 0.01%)</title><rect x="31.9784%" y="1109" width="0.0119%" height="15" fill="rgb(254,24,2)" fg:x="37645" fg:w="14"/><text x="32.2284%" y="1119.50"></text></g><g><title>CScript::GetOp (31 samples, 0.03%)</title><rect x="31.9946%" y="1141" width="0.0263%" height="15" fill="rgb(230,100,2)" fg:x="37664" fg:w="31"/><text x="32.2446%" y="1151.50"></text></g><g><title>CScript::IsWitnessProgram (18 samples, 0.02%)</title><rect x="32.0294%" y="1141" width="0.0153%" height="15" fill="rgb(219,142,25)" fg:x="37705" fg:w="18"/><text x="32.2794%" y="1151.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (17 samples, 0.01%)</title><rect x="32.0302%" y="1125" width="0.0144%" height="15" fill="rgb(240,73,43)" fg:x="37706" fg:w="17"/><text x="32.2802%" y="1135.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (16 samples, 0.01%)</title><rect x="32.0311%" y="1109" width="0.0136%" height="15" fill="rgb(214,114,15)" fg:x="37707" fg:w="16"/><text x="32.2811%" y="1119.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="32.0481%" y="1125" width="0.0127%" height="15" fill="rgb(207,130,4)" fg:x="37727" fg:w="15"/><text x="32.2981%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="32.0481%" y="1109" width="0.0127%" height="15" fill="rgb(221,25,40)" fg:x="37727" fg:w="15"/><text x="32.2981%" y="1119.50"></text></g><g><title>CountWitnessSigOps (21 samples, 0.02%)</title><rect x="32.0447%" y="1141" width="0.0178%" height="15" fill="rgb(241,184,7)" fg:x="37723" fg:w="21"/><text x="32.2947%" y="1151.50"></text></g><g><title>GetScriptOp (12 samples, 0.01%)</title><rect x="32.0693%" y="1141" width="0.0102%" height="15" fill="rgb(235,159,4)" fg:x="37752" fg:w="12"/><text x="32.3193%" y="1151.50"></text></g><g><title>SipHashUint256Extra (164 samples, 0.14%)</title><rect x="32.0855%" y="1141" width="0.1393%" height="15" fill="rgb(214,87,48)" fg:x="37771" fg:w="164"/><text x="32.3355%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (64 samples, 0.05%)</title><rect x="32.1704%" y="1125" width="0.0544%" height="15" fill="rgb(246,198,24)" fg:x="37871" fg:w="64"/><text x="32.4204%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (64 samples, 0.05%)</title><rect x="32.1704%" y="1109" width="0.0544%" height="15" fill="rgb(209,66,40)" fg:x="37871" fg:w="64"/><text x="32.4204%" y="1119.50"></text></g><g><title>CScript::GetSigOpCount (17 samples, 0.01%)</title><rect x="32.2316%" y="1125" width="0.0144%" height="15" fill="rgb(233,147,39)" fg:x="37943" fg:w="17"/><text x="32.4816%" y="1135.50"></text></g><g><title>CScript::GetOp (17 samples, 0.01%)</title><rect x="32.2316%" y="1109" width="0.0144%" height="15" fill="rgb(231,145,52)" fg:x="37943" fg:w="17"/><text x="32.4816%" y="1119.50"></text></g><g><title>WitnessSigOps (12 samples, 0.01%)</title><rect x="32.2358%" y="1093" width="0.0102%" height="15" fill="rgb(206,20,26)" fg:x="37948" fg:w="12"/><text x="32.4858%" y="1103.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (12 samples, 0.01%)</title><rect x="32.2358%" y="1077" width="0.0102%" height="15" fill="rgb(238,220,4)" fg:x="37948" fg:w="12"/><text x="32.4858%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (12 samples, 0.01%)</title><rect x="32.2358%" y="1061" width="0.0102%" height="15" fill="rgb(252,195,42)" fg:x="37948" fg:w="12"/><text x="32.4858%" y="1071.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (12 samples, 0.01%)</title><rect x="32.2358%" y="1045" width="0.0102%" height="15" fill="rgb(209,10,6)" fg:x="37948" fg:w="12"/><text x="32.4858%" y="1055.50"></text></g><g><title>WitnessSigOps (34 samples, 0.03%)</title><rect x="32.2248%" y="1141" width="0.0289%" height="15" fill="rgb(229,3,52)" fg:x="37935" fg:w="34"/><text x="32.4748%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.01%)</title><rect x="32.2554%" y="1141" width="0.0127%" height="15" fill="rgb(253,49,37)" fg:x="37971" fg:w="15"/><text x="32.5054%" y="1151.50"></text></g><g><title>CountWitnessSigOps (369 samples, 0.31%)</title><rect x="31.9555%" y="1157" width="0.3135%" height="15" fill="rgb(240,103,49)" fg:x="37618" fg:w="369"/><text x="32.2055%" y="1167.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_less_iter::operator (12 samples, 0.01%)</title><rect x="32.3021%" y="1061" width="0.0102%" height="15" fill="rgb(250,182,30)" fg:x="38026" fg:w="12"/><text x="32.5521%" y="1071.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (61 samples, 0.05%)</title><rect x="32.2749%" y="1141" width="0.0518%" height="15" fill="rgb(248,8,30)" fg:x="37994" fg:w="61"/><text x="32.5249%" y="1151.50"></text></g><g><title>void std::sort&lt;long*&gt; (38 samples, 0.03%)</title><rect x="32.2944%" y="1125" width="0.0323%" height="15" fill="rgb(237,120,30)" fg:x="38017" fg:w="38"/><text x="32.5444%" y="1135.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (38 samples, 0.03%)</title><rect x="32.2944%" y="1109" width="0.0323%" height="15" fill="rgb(221,146,34)" fg:x="38017" fg:w="38"/><text x="32.5444%" y="1119.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (33 samples, 0.03%)</title><rect x="32.2987%" y="1093" width="0.0280%" height="15" fill="rgb(242,55,13)" fg:x="38022" fg:w="33"/><text x="32.5487%" y="1103.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (33 samples, 0.03%)</title><rect x="32.2987%" y="1077" width="0.0280%" height="15" fill="rgb(242,112,31)" fg:x="38022" fg:w="33"/><text x="32.5487%" y="1087.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;long*, __gnu_cxx::__ops::_Val_less_iter&gt; (17 samples, 0.01%)</title><rect x="32.3123%" y="1061" width="0.0144%" height="15" fill="rgb(249,192,27)" fg:x="38038" fg:w="17"/><text x="32.5623%" y="1071.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (24 samples, 0.02%)</title><rect x="32.3547%" y="1109" width="0.0204%" height="15" fill="rgb(208,204,44)" fg:x="38088" fg:w="24"/><text x="32.6047%" y="1119.50"></text></g><g><title>void std::sort&lt;long*&gt; (17 samples, 0.01%)</title><rect x="32.3607%" y="1093" width="0.0144%" height="15" fill="rgb(208,93,54)" fg:x="38095" fg:w="17"/><text x="32.6107%" y="1103.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (17 samples, 0.01%)</title><rect x="32.3607%" y="1077" width="0.0144%" height="15" fill="rgb(242,1,31)" fg:x="38095" fg:w="17"/><text x="32.6107%" y="1087.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (17 samples, 0.01%)</title><rect x="32.3607%" y="1061" width="0.0144%" height="15" fill="rgb(241,83,25)" fg:x="38095" fg:w="17"/><text x="32.6107%" y="1071.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (17 samples, 0.01%)</title><rect x="32.3607%" y="1045" width="0.0144%" height="15" fill="rgb(205,169,50)" fg:x="38095" fg:w="17"/><text x="32.6107%" y="1055.50"></text></g><g><title>CScript::GetOp (19 samples, 0.02%)</title><rect x="32.4066%" y="1093" width="0.0161%" height="15" fill="rgb(239,186,37)" fg:x="38149" fg:w="19"/><text x="32.6566%" y="1103.50"></text></g><g><title>CScript::GetSigOpCount (71 samples, 0.06%)</title><rect x="32.3751%" y="1109" width="0.0603%" height="15" fill="rgb(205,221,10)" fg:x="38112" fg:w="71"/><text x="32.6251%" y="1119.50"></text></g><g><title>GetLegacySigOpCount (31 samples, 0.03%)</title><rect x="32.4414%" y="1109" width="0.0263%" height="15" fill="rgb(218,196,15)" fg:x="38190" fg:w="31"/><text x="32.6914%" y="1119.50"></text></g><g><title>GetScriptOp (62 samples, 0.05%)</title><rect x="32.4677%" y="1109" width="0.0527%" height="15" fill="rgb(218,196,35)" fg:x="38221" fg:w="62"/><text x="32.7177%" y="1119.50"></text></g><g><title>CScript::GetOp (215 samples, 0.18%)</title><rect x="32.3454%" y="1125" width="0.1826%" height="15" fill="rgb(233,63,24)" fg:x="38077" fg:w="215"/><text x="32.5954%" y="1135.50"></text></g><g><title>CScript::GetSigOpCount (242 samples, 0.21%)</title><rect x="32.3267%" y="1141" width="0.2056%" height="15" fill="rgb(225,8,4)" fg:x="38055" fg:w="242"/><text x="32.5767%" y="1151.50"></text></g><g><title>GetLegacySigOpCount (18 samples, 0.02%)</title><rect x="32.5374%" y="1141" width="0.0153%" height="15" fill="rgb(234,105,35)" fg:x="38303" fg:w="18"/><text x="32.7874%" y="1151.50"></text></g><g><title>GetScriptOp (58 samples, 0.05%)</title><rect x="32.5527%" y="1141" width="0.0493%" height="15" fill="rgb(236,21,32)" fg:x="38321" fg:w="58"/><text x="32.8027%" y="1151.50"></text></g><g><title>GetLegacySigOpCount (415 samples, 0.35%)</title><rect x="32.2706%" y="1157" width="0.3525%" height="15" fill="rgb(228,109,6)" fg:x="37989" fg:w="415"/><text x="32.5206%" y="1167.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (12 samples, 0.01%)</title><rect x="32.6130%" y="1141" width="0.0102%" height="15" fill="rgb(229,215,31)" fg:x="38392" fg:w="12"/><text x="32.8630%" y="1151.50"></text></g><g><title>GetScriptOp (12 samples, 0.01%)</title><rect x="32.6402%" y="1045" width="0.0102%" height="15" fill="rgb(221,52,54)" fg:x="38424" fg:w="12"/><text x="32.8902%" y="1055.50"></text></g><g><title>SipHashUint256Extra (20 samples, 0.02%)</title><rect x="32.6504%" y="1045" width="0.0170%" height="15" fill="rgb(252,129,43)" fg:x="38436" fg:w="20"/><text x="32.9004%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (49 samples, 0.04%)</title><rect x="32.6266%" y="1061" width="0.0416%" height="15" fill="rgb(248,183,27)" fg:x="38408" fg:w="49"/><text x="32.8766%" y="1071.50"></text></g><g><title>CScript::GetSigOpCount (12 samples, 0.01%)</title><rect x="32.6707%" y="1029" width="0.0102%" height="15" fill="rgb(250,0,22)" fg:x="38460" fg:w="12"/><text x="32.9207%" y="1039.50"></text></g><g><title>GetScriptOp (12 samples, 0.01%)</title><rect x="32.6869%" y="1029" width="0.0102%" height="15" fill="rgb(213,166,10)" fg:x="38479" fg:w="12"/><text x="32.9369%" y="1039.50"></text></g><g><title>CCoinsViewCache::FetchCoin (96 samples, 0.08%)</title><rect x="32.6232%" y="1109" width="0.0815%" height="15" fill="rgb(207,163,36)" fg:x="38404" fg:w="96"/><text x="32.8732%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (94 samples, 0.08%)</title><rect x="32.6249%" y="1093" width="0.0799%" height="15" fill="rgb(208,122,22)" fg:x="38406" fg:w="94"/><text x="32.8749%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (93 samples, 0.08%)</title><rect x="32.6257%" y="1077" width="0.0790%" height="15" fill="rgb(207,104,49)" fg:x="38407" fg:w="93"/><text x="32.8757%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (43 samples, 0.04%)</title><rect x="32.6682%" y="1061" width="0.0365%" height="15" fill="rgb(248,211,50)" fg:x="38457" fg:w="43"/><text x="32.9182%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (43 samples, 0.04%)</title><rect x="32.6682%" y="1045" width="0.0365%" height="15" fill="rgb(217,13,45)" fg:x="38457" fg:w="43"/><text x="32.9182%" y="1055.50"></text></g><g><title>GetScriptOp (13 samples, 0.01%)</title><rect x="32.7073%" y="1109" width="0.0110%" height="15" fill="rgb(211,216,49)" fg:x="38503" fg:w="13"/><text x="32.9573%" y="1119.50"></text></g><g><title>CCoinsViewCache::AccessCoin (119 samples, 0.10%)</title><rect x="32.6232%" y="1125" width="0.1011%" height="15" fill="rgb(221,58,53)" fg:x="38404" fg:w="119"/><text x="32.8732%" y="1135.50"></text></g><g><title>SipHashUint256Extra (16 samples, 0.01%)</title><rect x="32.7506%" y="1093" width="0.0136%" height="15" fill="rgb(220,112,41)" fg:x="38554" fg:w="16"/><text x="33.0006%" y="1103.50"></text></g><g><title>CScript::GetOp (40 samples, 0.03%)</title><rect x="32.7328%" y="1109" width="0.0340%" height="15" fill="rgb(236,38,28)" fg:x="38533" fg:w="40"/><text x="32.9828%" y="1119.50"></text></g><g><title>CScript::GetSigOpCount (18 samples, 0.02%)</title><rect x="32.7667%" y="1109" width="0.0153%" height="15" fill="rgb(227,195,22)" fg:x="38573" fg:w="18"/><text x="33.0167%" y="1119.50"></text></g><g><title>CScript::GetSigOpCount (77 samples, 0.07%)</title><rect x="32.7268%" y="1125" width="0.0654%" height="15" fill="rgb(214,55,33)" fg:x="38526" fg:w="77"/><text x="32.9768%" y="1135.50"></text></g><g><title>GetScriptOp (14 samples, 0.01%)</title><rect x="32.7965%" y="1125" width="0.0119%" height="15" fill="rgb(248,80,13)" fg:x="38608" fg:w="14"/><text x="33.0465%" y="1135.50"></text></g><g><title>GetP2SHSigOpCount (227 samples, 0.19%)</title><rect x="32.6232%" y="1157" width="0.1928%" height="15" fill="rgb(238,52,6)" fg:x="38404" fg:w="227"/><text x="32.8732%" y="1167.50"></text></g><g><title>GetP2SHSigOpCount (227 samples, 0.19%)</title><rect x="32.6232%" y="1141" width="0.1928%" height="15" fill="rgb(224,198,47)" fg:x="38404" fg:w="227"/><text x="32.8732%" y="1151.50"></text></g><g><title>GetScriptOp (32 samples, 0.03%)</title><rect x="32.8160%" y="1157" width="0.0272%" height="15" fill="rgb(233,171,20)" fg:x="38631" fg:w="32"/><text x="33.0660%" y="1167.50"></text></g><g><title>SipHashUint256Extra (29 samples, 0.02%)</title><rect x="32.8457%" y="1157" width="0.0246%" height="15" fill="rgb(241,30,25)" fg:x="38666" fg:w="29"/><text x="33.0957%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (13 samples, 0.01%)</title><rect x="32.8593%" y="1141" width="0.0110%" height="15" fill="rgb(207,171,38)" fg:x="38682" fg:w="13"/><text x="33.1093%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (13 samples, 0.01%)</title><rect x="32.8593%" y="1125" width="0.0110%" height="15" fill="rgb(234,70,1)" fg:x="38682" fg:w="13"/><text x="33.1093%" y="1135.50"></text></g><g><title>GetTransactionSigOpCost (1,326 samples, 1.13%)</title><rect x="31.7542%" y="1173" width="1.1264%" height="15" fill="rgb(232,178,18)" fg:x="37381" fg:w="1326"/><text x="32.0042%" y="1183.50"></text></g><g><title>SequenceLocks (33 samples, 0.03%)</title><rect x="32.8806%" y="1173" width="0.0280%" height="15" fill="rgb(241,78,40)" fg:x="38707" fg:w="33"/><text x="33.1306%" y="1183.50"></text></g><g><title>SipHashUint256Extra (194 samples, 0.16%)</title><rect x="32.9086%" y="1173" width="0.1648%" height="15" fill="rgb(222,35,25)" fg:x="38740" fg:w="194"/><text x="33.1586%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (66 samples, 0.06%)</title><rect x="33.0173%" y="1157" width="0.0561%" height="15" fill="rgb(207,92,16)" fg:x="38868" fg:w="66"/><text x="33.2673%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (66 samples, 0.06%)</title><rect x="33.0173%" y="1141" width="0.0561%" height="15" fill="rgb(216,59,51)" fg:x="38868" fg:w="66"/><text x="33.2673%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (62 samples, 0.05%)</title><rect x="33.0878%" y="1157" width="0.0527%" height="15" fill="rgb(213,80,28)" fg:x="38951" fg:w="62"/><text x="33.3378%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (27 samples, 0.02%)</title><rect x="33.1176%" y="1141" width="0.0229%" height="15" fill="rgb(220,93,7)" fg:x="38986" fg:w="27"/><text x="33.3676%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (26 samples, 0.02%)</title><rect x="33.1184%" y="1125" width="0.0221%" height="15" fill="rgb(225,24,44)" fg:x="38987" fg:w="26"/><text x="33.3684%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (21 samples, 0.02%)</title><rect x="33.1227%" y="1109" width="0.0178%" height="15" fill="rgb(243,74,40)" fg:x="38992" fg:w="21"/><text x="33.3727%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (21 samples, 0.02%)</title><rect x="33.1227%" y="1093" width="0.0178%" height="15" fill="rgb(228,39,7)" fg:x="38992" fg:w="21"/><text x="33.3727%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (22 samples, 0.02%)</title><rect x="33.1583%" y="1141" width="0.0187%" height="15" fill="rgb(227,79,8)" fg:x="39034" fg:w="22"/><text x="33.4083%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (22 samples, 0.02%)</title><rect x="33.1583%" y="1125" width="0.0187%" height="15" fill="rgb(236,58,11)" fg:x="39034" fg:w="22"/><text x="33.4083%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (22 samples, 0.02%)</title><rect x="33.1583%" y="1109" width="0.0187%" height="15" fill="rgb(249,63,35)" fg:x="39034" fg:w="22"/><text x="33.4083%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (17 samples, 0.01%)</title><rect x="33.1626%" y="1093" width="0.0144%" height="15" fill="rgb(252,114,16)" fg:x="39039" fg:w="17"/><text x="33.4126%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (17 samples, 0.01%)</title><rect x="33.1626%" y="1077" width="0.0144%" height="15" fill="rgb(254,151,24)" fg:x="39039" fg:w="17"/><text x="33.4126%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (15 samples, 0.01%)</title><rect x="33.2025%" y="1109" width="0.0127%" height="15" fill="rgb(253,54,39)" fg:x="39086" fg:w="15"/><text x="33.4525%" y="1119.50"></text></g><g><title>SipHashUint256Extra (20 samples, 0.02%)</title><rect x="33.2212%" y="1109" width="0.0170%" height="15" fill="rgb(243,25,45)" fg:x="39108" fg:w="20"/><text x="33.4712%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (15 samples, 0.01%)</title><rect x="33.2424%" y="1061" width="0.0127%" height="15" fill="rgb(234,134,9)" fg:x="39133" fg:w="15"/><text x="33.4924%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (15 samples, 0.01%)</title><rect x="33.2424%" y="1045" width="0.0127%" height="15" fill="rgb(227,166,31)" fg:x="39133" fg:w="15"/><text x="33.4924%" y="1055.50"></text></g><g><title>CCoinsViewCache::SpendCoin (136 samples, 0.12%)</title><rect x="33.1405%" y="1157" width="0.1155%" height="15" fill="rgb(245,143,41)" fg:x="39013" fg:w="136"/><text x="33.3905%" y="1167.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (63 samples, 0.05%)</title><rect x="33.2025%" y="1141" width="0.0535%" height="15" fill="rgb(238,181,32)" fg:x="39086" fg:w="63"/><text x="33.4525%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (63 samples, 0.05%)</title><rect x="33.2025%" y="1125" width="0.0535%" height="15" fill="rgb(224,113,18)" fg:x="39086" fg:w="63"/><text x="33.4525%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (16 samples, 0.01%)</title><rect x="33.2424%" y="1109" width="0.0136%" height="15" fill="rgb(240,229,28)" fg:x="39133" fg:w="16"/><text x="33.4924%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (16 samples, 0.01%)</title><rect x="33.2424%" y="1093" width="0.0136%" height="15" fill="rgb(250,185,3)" fg:x="39133" fg:w="16"/><text x="33.4924%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (16 samples, 0.01%)</title><rect x="33.2424%" y="1077" width="0.0136%" height="15" fill="rgb(212,59,25)" fg:x="39133" fg:w="16"/><text x="33.4924%" y="1087.50"></text></g><g><title>SipHashUint256Extra (138 samples, 0.12%)</title><rect x="33.2645%" y="1157" width="0.1172%" height="15" fill="rgb(221,87,20)" fg:x="39159" fg:w="138"/><text x="33.5145%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (59 samples, 0.05%)</title><rect x="33.3316%" y="1141" width="0.0501%" height="15" fill="rgb(213,74,28)" fg:x="39238" fg:w="59"/><text x="33.5816%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (59 samples, 0.05%)</title><rect x="33.3316%" y="1125" width="0.0501%" height="15" fill="rgb(224,132,34)" fg:x="39238" fg:w="59"/><text x="33.5816%" y="1135.50"></text></g><g><title>UpdateCoins (19 samples, 0.02%)</title><rect x="33.3818%" y="1157" width="0.0161%" height="15" fill="rgb(222,101,24)" fg:x="39297" fg:w="19"/><text x="33.6318%" y="1167.50"></text></g><g><title>malloc (24 samples, 0.02%)</title><rect x="33.4098%" y="1045" width="0.0204%" height="15" fill="rgb(254,142,4)" fg:x="39330" fg:w="24"/><text x="33.6598%" y="1055.50"></text></g><g><title>_int_malloc (18 samples, 0.02%)</title><rect x="33.4149%" y="1029" width="0.0153%" height="15" fill="rgb(230,229,49)" fg:x="39336" fg:w="18"/><text x="33.6649%" y="1039.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (27 samples, 0.02%)</title><rect x="33.4081%" y="1141" width="0.0229%" height="15" fill="rgb(238,70,47)" fg:x="39328" fg:w="27"/><text x="33.6581%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (27 samples, 0.02%)</title><rect x="33.4081%" y="1125" width="0.0229%" height="15" fill="rgb(231,160,17)" fg:x="39328" fg:w="27"/><text x="33.6581%" y="1135.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (27 samples, 0.02%)</title><rect x="33.4081%" y="1109" width="0.0229%" height="15" fill="rgb(218,68,53)" fg:x="39328" fg:w="27"/><text x="33.6581%" y="1119.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (27 samples, 0.02%)</title><rect x="33.4081%" y="1093" width="0.0229%" height="15" fill="rgb(236,111,10)" fg:x="39328" fg:w="27"/><text x="33.6581%" y="1103.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (27 samples, 0.02%)</title><rect x="33.4081%" y="1077" width="0.0229%" height="15" fill="rgb(224,34,41)" fg:x="39328" fg:w="27"/><text x="33.6581%" y="1087.50"></text></g><g><title>operator new (25 samples, 0.02%)</title><rect x="33.4098%" y="1061" width="0.0212%" height="15" fill="rgb(241,118,19)" fg:x="39330" fg:w="25"/><text x="33.6598%" y="1071.50"></text></g><g><title>UpdateCoins (413 samples, 0.35%)</title><rect x="33.0819%" y="1173" width="0.3508%" height="15" fill="rgb(238,129,25)" fg:x="38944" fg:w="413"/><text x="33.3319%" y="1183.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (29 samples, 0.02%)</title><rect x="33.4081%" y="1157" width="0.0246%" height="15" fill="rgb(238,22,31)" fg:x="39328" fg:w="29"/><text x="33.6581%" y="1167.50"></text></g><g><title>WitnessSigOps (13 samples, 0.01%)</title><rect x="33.4327%" y="1173" width="0.0110%" height="15" fill="rgb(222,174,48)" fg:x="39357" fg:w="13"/><text x="33.6827%" y="1183.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (14 samples, 0.01%)</title><rect x="33.4548%" y="1141" width="0.0119%" height="15" fill="rgb(206,152,40)" fg:x="39383" fg:w="14"/><text x="33.7048%" y="1151.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (14 samples, 0.01%)</title><rect x="33.4548%" y="1125" width="0.0119%" height="15" fill="rgb(218,99,54)" fg:x="39383" fg:w="14"/><text x="33.7048%" y="1135.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (14 samples, 0.01%)</title><rect x="33.4548%" y="1109" width="0.0119%" height="15" fill="rgb(220,174,26)" fg:x="39383" fg:w="14"/><text x="33.7048%" y="1119.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (14 samples, 0.01%)</title><rect x="33.4548%" y="1093" width="0.0119%" height="15" fill="rgb(245,116,9)" fg:x="39383" fg:w="14"/><text x="33.7048%" y="1103.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (14 samples, 0.01%)</title><rect x="33.4548%" y="1077" width="0.0119%" height="15" fill="rgb(209,72,35)" fg:x="39383" fg:w="14"/><text x="33.7048%" y="1087.50"></text></g><g><title>AutoFile::write (44 samples, 0.04%)</title><rect x="33.4446%" y="1157" width="0.0374%" height="15" fill="rgb(226,126,21)" fg:x="39371" fg:w="44"/><text x="33.6946%" y="1167.50"></text></g><g><title>util::Xor (18 samples, 0.02%)</title><rect x="33.4667%" y="1141" width="0.0153%" height="15" fill="rgb(227,192,1)" fg:x="39397" fg:w="18"/><text x="33.7167%" y="1151.50"></text></g><g><title>CSHA256::Write (34 samples, 0.03%)</title><rect x="33.4820%" y="1157" width="0.0289%" height="15" fill="rgb(237,180,29)" fg:x="39415" fg:w="34"/><text x="33.7320%" y="1167.50"></text></g><g><title>node::BlockManager::FindUndoPos (23 samples, 0.02%)</title><rect x="33.5194%" y="1157" width="0.0195%" height="15" fill="rgb(230,197,35)" fg:x="39459" fg:w="23"/><text x="33.7694%" y="1167.50"></text></g><g><title>FlatFileSeq::Allocate (23 samples, 0.02%)</title><rect x="33.5194%" y="1141" width="0.0195%" height="15" fill="rgb(246,193,31)" fg:x="39459" fg:w="23"/><text x="33.7694%" y="1151.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (18 samples, 0.02%)</title><rect x="33.5449%" y="645" width="0.0153%" height="15" fill="rgb(241,36,4)" fg:x="39489" fg:w="18"/><text x="33.7949%" y="655.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (18 samples, 0.02%)</title><rect x="33.5449%" y="629" width="0.0153%" height="15" fill="rgb(241,130,17)" fg:x="39489" fg:w="18"/><text x="33.7949%" y="639.50"></text></g><g><title>AutoFile::write (17 samples, 0.01%)</title><rect x="33.5457%" y="613" width="0.0144%" height="15" fill="rgb(206,137,32)" fg:x="39490" fg:w="17"/><text x="33.7957%" y="623.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (38 samples, 0.03%)</title><rect x="33.5389%" y="789" width="0.0323%" height="15" fill="rgb(237,228,51)" fg:x="39482" fg:w="38"/><text x="33.7889%" y="799.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (38 samples, 0.03%)</title><rect x="33.5389%" y="773" width="0.0323%" height="15" fill="rgb(243,6,42)" fg:x="39482" fg:w="38"/><text x="33.7889%" y="783.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (38 samples, 0.03%)</title><rect x="33.5389%" y="757" width="0.0323%" height="15" fill="rgb(251,74,28)" fg:x="39482" fg:w="38"/><text x="33.7889%" y="767.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (38 samples, 0.03%)</title><rect x="33.5389%" y="741" width="0.0323%" height="15" fill="rgb(218,20,49)" fg:x="39482" fg:w="38"/><text x="33.7889%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (38 samples, 0.03%)</title><rect x="33.5389%" y="725" width="0.0323%" height="15" fill="rgb(238,28,14)" fg:x="39482" fg:w="38"/><text x="33.7889%" y="735.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (38 samples, 0.03%)</title><rect x="33.5389%" y="709" width="0.0323%" height="15" fill="rgb(229,40,46)" fg:x="39482" fg:w="38"/><text x="33.7889%" y="719.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (31 samples, 0.03%)</title><rect x="33.5449%" y="693" width="0.0263%" height="15" fill="rgb(244,195,20)" fg:x="39489" fg:w="31"/><text x="33.7949%" y="703.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (31 samples, 0.03%)</title><rect x="33.5449%" y="677" width="0.0263%" height="15" fill="rgb(253,56,35)" fg:x="39489" fg:w="31"/><text x="33.7949%" y="687.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (31 samples, 0.03%)</title><rect x="33.5449%" y="661" width="0.0263%" height="15" fill="rgb(210,149,44)" fg:x="39489" fg:w="31"/><text x="33.7949%" y="671.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (44 samples, 0.04%)</title><rect x="33.5389%" y="1141" width="0.0374%" height="15" fill="rgb(240,135,12)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1151.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="1125" width="0.0374%" height="15" fill="rgb(251,24,50)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1135.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="1109" width="0.0374%" height="15" fill="rgb(243,200,47)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1119.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="1093" width="0.0374%" height="15" fill="rgb(224,166,26)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1103.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="1077" width="0.0374%" height="15" fill="rgb(233,0,47)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="1061" width="0.0374%" height="15" fill="rgb(253,80,5)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1071.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="1045" width="0.0374%" height="15" fill="rgb(214,133,25)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1055.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="1029" width="0.0374%" height="15" fill="rgb(209,27,14)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1039.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="1013" width="0.0374%" height="15" fill="rgb(219,102,51)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1023.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="997" width="0.0374%" height="15" fill="rgb(237,18,16)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="1007.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="981" width="0.0374%" height="15" fill="rgb(241,85,17)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="991.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="965" width="0.0374%" height="15" fill="rgb(236,90,42)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="975.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="949" width="0.0374%" height="15" fill="rgb(249,57,21)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="959.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="933" width="0.0374%" height="15" fill="rgb(243,12,36)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="943.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="917" width="0.0374%" height="15" fill="rgb(253,128,47)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="927.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="901" width="0.0374%" height="15" fill="rgb(207,33,20)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="911.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="885" width="0.0374%" height="15" fill="rgb(233,215,35)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="895.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="869" width="0.0374%" height="15" fill="rgb(249,188,52)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="879.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="853" width="0.0374%" height="15" fill="rgb(225,12,32)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="837" width="0.0374%" height="15" fill="rgb(247,98,14)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="847.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="821" width="0.0374%" height="15" fill="rgb(247,219,48)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="831.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (44 samples, 0.04%)</title><rect x="33.5389%" y="805" width="0.0374%" height="15" fill="rgb(253,60,48)" fg:x="39482" fg:w="44"/><text x="33.7889%" y="815.50"></text></g><g><title>memcpy (13 samples, 0.01%)</title><rect x="33.6442%" y="517" width="0.0110%" height="15" fill="rgb(245,15,52)" fg:x="39606" fg:w="13"/><text x="33.8942%" y="527.50"></text></g><g><title>CSHA256::Write (77 samples, 0.07%)</title><rect x="33.5950%" y="533" width="0.0654%" height="15" fill="rgb(220,133,28)" fg:x="39548" fg:w="77"/><text x="33.8450%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (12 samples, 0.01%)</title><rect x="33.6723%" y="165" width="0.0102%" height="15" fill="rgb(217,180,4)" fg:x="39639" fg:w="12"/><text x="33.9223%" y="175.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.01%)</title><rect x="33.6723%" y="149" width="0.0102%" height="15" fill="rgb(251,24,1)" fg:x="39639" fg:w="12"/><text x="33.9223%" y="159.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (12 samples, 0.01%)</title><rect x="33.6723%" y="133" width="0.0102%" height="15" fill="rgb(212,185,49)" fg:x="39639" fg:w="12"/><text x="33.9223%" y="143.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (12 samples, 0.01%)</title><rect x="33.6723%" y="117" width="0.0102%" height="15" fill="rgb(215,175,22)" fg:x="39639" fg:w="12"/><text x="33.9223%" y="127.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (12 samples, 0.01%)</title><rect x="33.6723%" y="101" width="0.0102%" height="15" fill="rgb(250,205,14)" fg:x="39639" fg:w="12"/><text x="33.9223%" y="111.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (12 samples, 0.01%)</title><rect x="33.6723%" y="85" width="0.0102%" height="15" fill="rgb(225,211,22)" fg:x="39639" fg:w="12"/><text x="33.9223%" y="95.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (12 samples, 0.01%)</title><rect x="33.6723%" y="69" width="0.0102%" height="15" fill="rgb(251,179,42)" fg:x="39639" fg:w="12"/><text x="33.9223%" y="79.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.01%)</title><rect x="33.6723%" y="53" width="0.0102%" height="15" fill="rgb(208,216,51)" fg:x="39639" fg:w="12"/><text x="33.9223%" y="63.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (12 samples, 0.01%)</title><rect x="33.6723%" y="37" width="0.0102%" height="15" fill="rgb(235,36,11)" fg:x="39639" fg:w="12"/><text x="33.9223%" y="47.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (15 samples, 0.01%)</title><rect x="33.6723%" y="533" width="0.0127%" height="15" fill="rgb(213,189,28)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="543.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (15 samples, 0.01%)</title><rect x="33.6723%" y="517" width="0.0127%" height="15" fill="rgb(227,203,42)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="527.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="501" width="0.0127%" height="15" fill="rgb(244,72,36)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="511.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="485" width="0.0127%" height="15" fill="rgb(213,53,17)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="495.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="469" width="0.0127%" height="15" fill="rgb(207,167,3)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="479.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="453" width="0.0127%" height="15" fill="rgb(216,98,30)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="463.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="437" width="0.0127%" height="15" fill="rgb(236,123,15)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="447.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="421" width="0.0127%" height="15" fill="rgb(248,81,50)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="405" width="0.0127%" height="15" fill="rgb(214,120,4)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="415.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="389" width="0.0127%" height="15" fill="rgb(208,179,34)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="399.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="373" width="0.0127%" height="15" fill="rgb(227,140,7)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="383.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="357" width="0.0127%" height="15" fill="rgb(214,22,6)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="367.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="341" width="0.0127%" height="15" fill="rgb(207,137,27)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="351.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="325" width="0.0127%" height="15" fill="rgb(210,8,46)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="335.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="309" width="0.0127%" height="15" fill="rgb(240,16,54)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="319.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="293" width="0.0127%" height="15" fill="rgb(211,209,29)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="303.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="277" width="0.0127%" height="15" fill="rgb(226,228,24)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="287.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="261" width="0.0127%" height="15" fill="rgb(222,84,9)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="271.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="245" width="0.0127%" height="15" fill="rgb(234,203,30)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="255.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="229" width="0.0127%" height="15" fill="rgb(238,109,14)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="239.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="213" width="0.0127%" height="15" fill="rgb(233,206,34)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="223.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="197" width="0.0127%" height="15" fill="rgb(220,167,47)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="207.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (15 samples, 0.01%)</title><rect x="33.6723%" y="181" width="0.0127%" height="15" fill="rgb(238,105,10)" fg:x="39639" fg:w="15"/><text x="33.9223%" y="191.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (133 samples, 0.11%)</title><rect x="33.5882%" y="645" width="0.1130%" height="15" fill="rgb(213,227,17)" fg:x="39540" fg:w="133"/><text x="33.8382%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (133 samples, 0.11%)</title><rect x="33.5882%" y="629" width="0.1130%" height="15" fill="rgb(217,132,38)" fg:x="39540" fg:w="133"/><text x="33.8382%" y="639.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (133 samples, 0.11%)</title><rect x="33.5882%" y="613" width="0.1130%" height="15" fill="rgb(242,146,4)" fg:x="39540" fg:w="133"/><text x="33.8382%" y="623.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (133 samples, 0.11%)</title><rect x="33.5882%" y="597" width="0.1130%" height="15" fill="rgb(212,61,9)" fg:x="39540" fg:w="133"/><text x="33.8382%" y="607.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (133 samples, 0.11%)</title><rect x="33.5882%" y="581" width="0.1130%" height="15" fill="rgb(247,126,22)" fg:x="39540" fg:w="133"/><text x="33.8382%" y="591.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (128 samples, 0.11%)</title><rect x="33.5924%" y="565" width="0.1087%" height="15" fill="rgb(220,196,2)" fg:x="39545" fg:w="128"/><text x="33.8424%" y="575.50"></text></g><g><title>HashWriter::write (128 samples, 0.11%)</title><rect x="33.5924%" y="549" width="0.1087%" height="15" fill="rgb(208,46,4)" fg:x="39545" fg:w="128"/><text x="33.8424%" y="559.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (14 samples, 0.01%)</title><rect x="33.6893%" y="533" width="0.0119%" height="15" fill="rgb(252,104,46)" fg:x="39659" fg:w="14"/><text x="33.9393%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (140 samples, 0.12%)</title><rect x="33.5839%" y="693" width="0.1189%" height="15" fill="rgb(237,152,48)" fg:x="39535" fg:w="140"/><text x="33.8339%" y="703.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (140 samples, 0.12%)</title><rect x="33.5839%" y="677" width="0.1189%" height="15" fill="rgb(221,59,37)" fg:x="39535" fg:w="140"/><text x="33.8339%" y="687.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (140 samples, 0.12%)</title><rect x="33.5839%" y="661" width="0.1189%" height="15" fill="rgb(209,202,51)" fg:x="39535" fg:w="140"/><text x="33.8339%" y="671.50"></text></g><g><title>CSHA256::Write (19 samples, 0.02%)</title><rect x="33.7088%" y="629" width="0.0161%" height="15" fill="rgb(228,81,30)" fg:x="39682" fg:w="19"/><text x="33.9588%" y="639.50"></text></g><g><title>CompressScript (27 samples, 0.02%)</title><rect x="33.7088%" y="645" width="0.0229%" height="15" fill="rgb(227,42,39)" fg:x="39682" fg:w="27"/><text x="33.9588%" y="655.50"></text></g><g><title>CSHA256::Write (19 samples, 0.02%)</title><rect x="33.7504%" y="581" width="0.0161%" height="15" fill="rgb(221,26,2)" fg:x="39731" fg:w="19"/><text x="34.0004%" y="591.50"></text></g><g><title>memcpy (13 samples, 0.01%)</title><rect x="33.7700%" y="581" width="0.0110%" height="15" fill="rgb(254,61,31)" fg:x="39754" fg:w="13"/><text x="34.0200%" y="591.50"></text></g><g><title>CSHA256::Write (68 samples, 0.06%)</title><rect x="33.7326%" y="597" width="0.0578%" height="15" fill="rgb(222,173,38)" fg:x="39710" fg:w="68"/><text x="33.9826%" y="607.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (82 samples, 0.07%)</title><rect x="33.7317%" y="645" width="0.0697%" height="15" fill="rgb(218,50,12)" fg:x="39709" fg:w="82"/><text x="33.9817%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (82 samples, 0.07%)</title><rect x="33.7317%" y="629" width="0.0697%" height="15" fill="rgb(223,88,40)" fg:x="39709" fg:w="82"/><text x="33.9817%" y="639.50"></text></g><g><title>HashWriter::write (82 samples, 0.07%)</title><rect x="33.7317%" y="613" width="0.0697%" height="15" fill="rgb(237,54,19)" fg:x="39709" fg:w="82"/><text x="33.9817%" y="623.50"></text></g><g><title>CSHA256::Write (18 samples, 0.02%)</title><rect x="33.8277%" y="533" width="0.0153%" height="15" fill="rgb(251,129,25)" fg:x="39822" fg:w="18"/><text x="34.0777%" y="543.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (47 samples, 0.04%)</title><rect x="33.8107%" y="645" width="0.0399%" height="15" fill="rgb(238,97,19)" fg:x="39802" fg:w="47"/><text x="34.0607%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (47 samples, 0.04%)</title><rect x="33.8107%" y="629" width="0.0399%" height="15" fill="rgb(240,169,18)" fg:x="39802" fg:w="47"/><text x="34.0607%" y="639.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (47 samples, 0.04%)</title><rect x="33.8107%" y="613" width="0.0399%" height="15" fill="rgb(230,187,49)" fg:x="39802" fg:w="47"/><text x="34.0607%" y="623.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (47 samples, 0.04%)</title><rect x="33.8107%" y="597" width="0.0399%" height="15" fill="rgb(209,44,26)" fg:x="39802" fg:w="47"/><text x="34.0607%" y="607.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (27 samples, 0.02%)</title><rect x="33.8277%" y="581" width="0.0229%" height="15" fill="rgb(244,0,6)" fg:x="39822" fg:w="27"/><text x="34.0777%" y="591.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (27 samples, 0.02%)</title><rect x="33.8277%" y="565" width="0.0229%" height="15" fill="rgb(248,18,21)" fg:x="39822" fg:w="27"/><text x="34.0777%" y="575.50"></text></g><g><title>HashWriter::write (27 samples, 0.02%)</title><rect x="33.8277%" y="549" width="0.0229%" height="15" fill="rgb(245,180,19)" fg:x="39822" fg:w="27"/><text x="34.0777%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (321 samples, 0.27%)</title><rect x="33.5839%" y="789" width="0.2727%" height="15" fill="rgb(252,118,36)" fg:x="39535" fg:w="321"/><text x="33.8339%" y="799.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (321 samples, 0.27%)</title><rect x="33.5839%" y="773" width="0.2727%" height="15" fill="rgb(210,224,19)" fg:x="39535" fg:w="321"/><text x="33.8339%" y="783.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (321 samples, 0.27%)</title><rect x="33.5839%" y="757" width="0.2727%" height="15" fill="rgb(218,30,24)" fg:x="39535" fg:w="321"/><text x="33.8339%" y="767.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (321 samples, 0.27%)</title><rect x="33.5839%" y="741" width="0.2727%" height="15" fill="rgb(219,75,50)" fg:x="39535" fg:w="321"/><text x="33.8339%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (321 samples, 0.27%)</title><rect x="33.5839%" y="725" width="0.2727%" height="15" fill="rgb(234,72,50)" fg:x="39535" fg:w="321"/><text x="33.8339%" y="735.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (321 samples, 0.27%)</title><rect x="33.5839%" y="709" width="0.2727%" height="15" fill="rgb(219,100,48)" fg:x="39535" fg:w="321"/><text x="33.8339%" y="719.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (181 samples, 0.15%)</title><rect x="33.7029%" y="693" width="0.1538%" height="15" fill="rgb(253,5,41)" fg:x="39675" fg:w="181"/><text x="33.9529%" y="703.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (181 samples, 0.15%)</title><rect x="33.7029%" y="677" width="0.1538%" height="15" fill="rgb(247,181,11)" fg:x="39675" fg:w="181"/><text x="33.9529%" y="687.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (181 samples, 0.15%)</title><rect x="33.7029%" y="661" width="0.1538%" height="15" fill="rgb(222,223,25)" fg:x="39675" fg:w="181"/><text x="33.9529%" y="671.50"></text></g><g><title>sha256_x86_shani::Transform (18 samples, 0.02%)</title><rect x="33.8685%" y="741" width="0.0153%" height="15" fill="rgb(214,198,28)" fg:x="39870" fg:w="18"/><text x="34.1185%" y="751.50"></text></g><g><title>CSHA256::Write (37 samples, 0.03%)</title><rect x="33.8872%" y="693" width="0.0314%" height="15" fill="rgb(230,46,43)" fg:x="39892" fg:w="37"/><text x="34.1372%" y="703.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (14 samples, 0.01%)</title><rect x="33.9229%" y="693" width="0.0119%" height="15" fill="rgb(233,65,53)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="703.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (14 samples, 0.01%)</title><rect x="33.9229%" y="677" width="0.0119%" height="15" fill="rgb(221,121,27)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="687.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="661" width="0.0119%" height="15" fill="rgb(247,70,47)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="671.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="645" width="0.0119%" height="15" fill="rgb(228,85,35)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="655.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="629" width="0.0119%" height="15" fill="rgb(209,50,18)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="639.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="613" width="0.0119%" height="15" fill="rgb(250,19,35)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="597" width="0.0119%" height="15" fill="rgb(253,107,29)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="607.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="581" width="0.0119%" height="15" fill="rgb(252,179,29)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="591.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="565" width="0.0119%" height="15" fill="rgb(238,194,6)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="575.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="549" width="0.0119%" height="15" fill="rgb(238,164,29)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="559.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="533" width="0.0119%" height="15" fill="rgb(224,25,9)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="543.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="33.9229%" y="517" width="0.0119%" height="15" fill="rgb(244,153,23)" fg:x="39934" fg:w="14"/><text x="34.1729%" y="527.50"></text></g><g><title>QuadRound (17 samples, 0.01%)</title><rect x="33.9382%" y="677" width="0.0144%" height="15" fill="rgb(212,203,14)" fg:x="39952" fg:w="17"/><text x="34.1882%" y="687.50"></text></g><g><title>ShiftMessageA (16 samples, 0.01%)</title><rect x="33.9526%" y="661" width="0.0136%" height="15" fill="rgb(220,164,20)" fg:x="39969" fg:w="16"/><text x="34.2026%" y="671.50"></text></g><g><title>_mm_sha256msg1_epu32 (16 samples, 0.01%)</title><rect x="33.9526%" y="645" width="0.0136%" height="15" fill="rgb(222,203,48)" fg:x="39969" fg:w="16"/><text x="34.2026%" y="655.50"></text></g><g><title>ShiftMessageB (30 samples, 0.03%)</title><rect x="33.9526%" y="677" width="0.0255%" height="15" fill="rgb(215,159,22)" fg:x="39969" fg:w="30"/><text x="34.2026%" y="687.50"></text></g><g><title>ShiftMessageC (14 samples, 0.01%)</title><rect x="33.9662%" y="661" width="0.0119%" height="15" fill="rgb(216,183,47)" fg:x="39985" fg:w="14"/><text x="34.2162%" y="671.50"></text></g><g><title>sha256_x86_shani::Transform (55 samples, 0.05%)</title><rect x="33.9348%" y="693" width="0.0467%" height="15" fill="rgb(229,195,25)" fg:x="39948" fg:w="55"/><text x="34.1848%" y="703.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (150 samples, 0.13%)</title><rect x="33.8566%" y="789" width="0.1274%" height="15" fill="rgb(224,132,51)" fg:x="39856" fg:w="150"/><text x="34.1066%" y="799.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (150 samples, 0.13%)</title><rect x="33.8566%" y="773" width="0.1274%" height="15" fill="rgb(240,63,7)" fg:x="39856" fg:w="150"/><text x="34.1066%" y="783.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (150 samples, 0.13%)</title><rect x="33.8566%" y="757" width="0.1274%" height="15" fill="rgb(249,182,41)" fg:x="39856" fg:w="150"/><text x="34.1066%" y="767.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (118 samples, 0.10%)</title><rect x="33.8838%" y="741" width="0.1002%" height="15" fill="rgb(243,47,26)" fg:x="39888" fg:w="118"/><text x="34.1338%" y="751.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (115 samples, 0.10%)</title><rect x="33.8863%" y="725" width="0.0977%" height="15" fill="rgb(233,48,2)" fg:x="39891" fg:w="115"/><text x="34.1363%" y="735.50"></text></g><g><title>HashWriter::write (115 samples, 0.10%)</title><rect x="33.8863%" y="709" width="0.0977%" height="15" fill="rgb(244,165,34)" fg:x="39891" fg:w="115"/><text x="34.1363%" y="719.50"></text></g><g><title>CSHA256::Write (31 samples, 0.03%)</title><rect x="33.9840%" y="741" width="0.0263%" height="15" fill="rgb(207,89,7)" fg:x="40006" fg:w="31"/><text x="34.2340%" y="751.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (14 samples, 0.01%)</title><rect x="34.0112%" y="741" width="0.0119%" height="15" fill="rgb(244,117,36)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="751.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (14 samples, 0.01%)</title><rect x="34.0112%" y="725" width="0.0119%" height="15" fill="rgb(226,144,34)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="709" width="0.0119%" height="15" fill="rgb(213,23,19)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="719.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="693" width="0.0119%" height="15" fill="rgb(217,75,12)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="703.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="677" width="0.0119%" height="15" fill="rgb(224,159,17)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="687.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="661" width="0.0119%" height="15" fill="rgb(217,118,1)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="645" width="0.0119%" height="15" fill="rgb(232,180,48)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="655.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="629" width="0.0119%" height="15" fill="rgb(230,27,33)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="639.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="613" width="0.0119%" height="15" fill="rgb(205,31,21)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="623.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="597" width="0.0119%" height="15" fill="rgb(253,59,4)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="581" width="0.0119%" height="15" fill="rgb(224,201,9)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="591.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="565" width="0.0119%" height="15" fill="rgb(229,206,30)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="575.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="549" width="0.0119%" height="15" fill="rgb(212,67,47)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="533" width="0.0119%" height="15" fill="rgb(211,96,50)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="543.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="517" width="0.0119%" height="15" fill="rgb(252,114,18)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="527.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="501" width="0.0119%" height="15" fill="rgb(223,58,37)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="511.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="485" width="0.0119%" height="15" fill="rgb(237,70,4)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="495.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="469" width="0.0119%" height="15" fill="rgb(244,85,46)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="479.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="453" width="0.0119%" height="15" fill="rgb(223,39,52)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="463.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="437" width="0.0119%" height="15" fill="rgb(218,200,14)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="447.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="421" width="0.0119%" height="15" fill="rgb(208,171,16)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="431.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="34.0112%" y="405" width="0.0119%" height="15" fill="rgb(234,200,18)" fg:x="40038" fg:w="14"/><text x="34.2612%" y="415.50"></text></g><g><title>sha256_x86_shani::Transform (14 samples, 0.01%)</title><rect x="34.0231%" y="741" width="0.0119%" height="15" fill="rgb(228,45,11)" fg:x="40052" fg:w="14"/><text x="34.2731%" y="751.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (556 samples, 0.47%)</title><rect x="33.5839%" y="805" width="0.4723%" height="15" fill="rgb(237,182,11)" fg:x="39535" fg:w="556"/><text x="33.8339%" y="815.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (85 samples, 0.07%)</title><rect x="33.9840%" y="789" width="0.0722%" height="15" fill="rgb(241,175,49)" fg:x="40006" fg:w="85"/><text x="34.2340%" y="799.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (85 samples, 0.07%)</title><rect x="33.9840%" y="773" width="0.0722%" height="15" fill="rgb(247,38,35)" fg:x="40006" fg:w="85"/><text x="34.2340%" y="783.50"></text></g><g><title>HashWriter::write (85 samples, 0.07%)</title><rect x="33.9840%" y="757" width="0.0722%" height="15" fill="rgb(228,39,49)" fg:x="40006" fg:w="85"/><text x="34.2340%" y="767.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (19 samples, 0.02%)</title><rect x="34.0401%" y="741" width="0.0161%" height="15" fill="rgb(226,101,26)" fg:x="40072" fg:w="19"/><text x="34.2901%" y="751.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (559 samples, 0.47%)</title><rect x="33.5831%" y="1141" width="0.4749%" height="15" fill="rgb(206,141,19)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1151.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="1125" width="0.4749%" height="15" fill="rgb(211,200,13)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1135.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="1109" width="0.4749%" height="15" fill="rgb(241,121,6)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1119.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="1093" width="0.4749%" height="15" fill="rgb(234,221,29)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1103.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="1077" width="0.4749%" height="15" fill="rgb(229,136,5)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="1061" width="0.4749%" height="15" fill="rgb(238,36,11)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1071.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="1045" width="0.4749%" height="15" fill="rgb(251,55,41)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1055.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="1029" width="0.4749%" height="15" fill="rgb(242,34,40)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1039.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="1013" width="0.4749%" height="15" fill="rgb(215,42,17)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1023.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="997" width="0.4749%" height="15" fill="rgb(207,44,46)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="1007.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="981" width="0.4749%" height="15" fill="rgb(211,206,28)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="991.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="965" width="0.4749%" height="15" fill="rgb(237,167,16)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="975.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="949" width="0.4749%" height="15" fill="rgb(233,66,6)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="959.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="933" width="0.4749%" height="15" fill="rgb(246,123,29)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="943.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="917" width="0.4749%" height="15" fill="rgb(209,62,40)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="927.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="901" width="0.4749%" height="15" fill="rgb(218,4,25)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="911.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="885" width="0.4749%" height="15" fill="rgb(253,91,49)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="895.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="869" width="0.4749%" height="15" fill="rgb(228,155,29)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="879.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="853" width="0.4749%" height="15" fill="rgb(243,57,37)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="837" width="0.4749%" height="15" fill="rgb(244,167,17)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="847.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (559 samples, 0.47%)</title><rect x="33.5831%" y="821" width="0.4749%" height="15" fill="rgb(207,181,38)" fg:x="39534" fg:w="559"/><text x="33.8331%" y="831.50"></text></g><g><title>node::BlockManager::OpenUndoFile (13 samples, 0.01%)</title><rect x="34.0579%" y="1141" width="0.0110%" height="15" fill="rgb(211,8,23)" fg:x="40093" fg:w="13"/><text x="34.3079%" y="1151.50"></text></g><g><title>FlatFileSeq::Open (13 samples, 0.01%)</title><rect x="34.0579%" y="1125" width="0.0110%" height="15" fill="rgb(235,11,44)" fg:x="40093" fg:w="13"/><text x="34.3079%" y="1135.50"></text></g><g><title>CompressAmount (12 samples, 0.01%)</title><rect x="34.0690%" y="965" width="0.0102%" height="15" fill="rgb(248,18,52)" fg:x="40106" fg:w="12"/><text x="34.3190%" y="975.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (14 samples, 0.01%)</title><rect x="34.1123%" y="629" width="0.0119%" height="15" fill="rgb(208,4,7)" fg:x="40157" fg:w="14"/><text x="34.3623%" y="639.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (14 samples, 0.01%)</title><rect x="34.1123%" y="613" width="0.0119%" height="15" fill="rgb(240,17,39)" fg:x="40157" fg:w="14"/><text x="34.3623%" y="623.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (14 samples, 0.01%)</title><rect x="34.1123%" y="597" width="0.0119%" height="15" fill="rgb(207,170,3)" fg:x="40157" fg:w="14"/><text x="34.3623%" y="607.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (14 samples, 0.01%)</title><rect x="34.1123%" y="581" width="0.0119%" height="15" fill="rgb(236,100,52)" fg:x="40157" fg:w="14"/><text x="34.3623%" y="591.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (14 samples, 0.01%)</title><rect x="34.1123%" y="565" width="0.0119%" height="15" fill="rgb(246,78,51)" fg:x="40157" fg:w="14"/><text x="34.3623%" y="575.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (41 samples, 0.03%)</title><rect x="34.1021%" y="677" width="0.0348%" height="15" fill="rgb(211,17,15)" fg:x="40145" fg:w="41"/><text x="34.3521%" y="687.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (41 samples, 0.03%)</title><rect x="34.1021%" y="661" width="0.0348%" height="15" fill="rgb(209,59,46)" fg:x="40145" fg:w="41"/><text x="34.3521%" y="671.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (41 samples, 0.03%)</title><rect x="34.1021%" y="645" width="0.0348%" height="15" fill="rgb(210,92,25)" fg:x="40145" fg:w="41"/><text x="34.3521%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="629" width="0.0127%" height="15" fill="rgb(238,174,52)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="613" width="0.0127%" height="15" fill="rgb(230,73,7)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="623.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="597" width="0.0127%" height="15" fill="rgb(243,124,40)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="607.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="581" width="0.0127%" height="15" fill="rgb(244,170,11)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="591.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="565" width="0.0127%" height="15" fill="rgb(207,114,54)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="575.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="549" width="0.0127%" height="15" fill="rgb(205,42,20)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="559.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="533" width="0.0127%" height="15" fill="rgb(230,30,28)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="543.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="517" width="0.0127%" height="15" fill="rgb(205,73,54)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="527.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="501" width="0.0127%" height="15" fill="rgb(254,227,23)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="485" width="0.0127%" height="15" fill="rgb(228,202,34)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="495.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="34.1242%" y="469" width="0.0127%" height="15" fill="rgb(222,225,37)" fg:x="40171" fg:w="15"/><text x="34.3742%" y="479.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (13 samples, 0.01%)</title><rect x="34.1259%" y="453" width="0.0110%" height="15" fill="rgb(221,14,54)" fg:x="40173" fg:w="13"/><text x="34.3759%" y="463.50"></text></g><g><title>CompressScript (12 samples, 0.01%)</title><rect x="34.1539%" y="613" width="0.0102%" height="15" fill="rgb(254,102,2)" fg:x="40206" fg:w="12"/><text x="34.4039%" y="623.50"></text></g><g><title>CompressScript (41 samples, 0.03%)</title><rect x="34.1471%" y="629" width="0.0348%" height="15" fill="rgb(232,104,17)" fg:x="40198" fg:w="41"/><text x="34.3971%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="613" width="0.0127%" height="15" fill="rgb(250,220,14)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="597" width="0.0127%" height="15" fill="rgb(241,158,9)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="607.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="581" width="0.0127%" height="15" fill="rgb(246,9,43)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="591.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="565" width="0.0127%" height="15" fill="rgb(206,73,33)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="575.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="549" width="0.0127%" height="15" fill="rgb(222,79,8)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="559.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="533" width="0.0127%" height="15" fill="rgb(234,8,54)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="517" width="0.0127%" height="15" fill="rgb(209,134,38)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="527.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="501" width="0.0127%" height="15" fill="rgb(230,127,29)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="511.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="485" width="0.0127%" height="15" fill="rgb(242,44,41)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="495.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="469" width="0.0127%" height="15" fill="rgb(222,56,43)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="479.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="34.1692%" y="453" width="0.0127%" height="15" fill="rgb(238,39,47)" fg:x="40224" fg:w="15"/><text x="34.4192%" y="463.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (13 samples, 0.01%)</title><rect x="34.1709%" y="437" width="0.0110%" height="15" fill="rgb(226,79,43)" fg:x="40226" fg:w="13"/><text x="34.4209%" y="447.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (118 samples, 0.10%)</title><rect x="34.1004%" y="773" width="0.1002%" height="15" fill="rgb(242,105,53)" fg:x="40143" fg:w="118"/><text x="34.3504%" y="783.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (118 samples, 0.10%)</title><rect x="34.1004%" y="757" width="0.1002%" height="15" fill="rgb(251,132,46)" fg:x="40143" fg:w="118"/><text x="34.3504%" y="767.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (118 samples, 0.10%)</title><rect x="34.1004%" y="741" width="0.1002%" height="15" fill="rgb(231,77,14)" fg:x="40143" fg:w="118"/><text x="34.3504%" y="751.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (118 samples, 0.10%)</title><rect x="34.1004%" y="725" width="0.1002%" height="15" fill="rgb(240,135,9)" fg:x="40143" fg:w="118"/><text x="34.3504%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (116 samples, 0.10%)</title><rect x="34.1021%" y="709" width="0.0985%" height="15" fill="rgb(248,109,14)" fg:x="40145" fg:w="116"/><text x="34.3521%" y="719.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (116 samples, 0.10%)</title><rect x="34.1021%" y="693" width="0.0985%" height="15" fill="rgb(227,146,52)" fg:x="40145" fg:w="116"/><text x="34.3521%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (75 samples, 0.06%)</title><rect x="34.1369%" y="677" width="0.0637%" height="15" fill="rgb(232,54,3)" fg:x="40186" fg:w="75"/><text x="34.3869%" y="687.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (75 samples, 0.06%)</title><rect x="34.1369%" y="661" width="0.0637%" height="15" fill="rgb(229,201,43)" fg:x="40186" fg:w="75"/><text x="34.3869%" y="671.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (75 samples, 0.06%)</title><rect x="34.1369%" y="645" width="0.0637%" height="15" fill="rgb(252,161,33)" fg:x="40186" fg:w="75"/><text x="34.3869%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (18 samples, 0.02%)</title><rect x="34.1854%" y="629" width="0.0153%" height="15" fill="rgb(226,146,40)" fg:x="40243" fg:w="18"/><text x="34.4354%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="613" width="0.0144%" height="15" fill="rgb(219,47,25)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="623.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="597" width="0.0144%" height="15" fill="rgb(250,135,13)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="607.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="581" width="0.0144%" height="15" fill="rgb(219,229,18)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="591.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="565" width="0.0144%" height="15" fill="rgb(217,152,27)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="575.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="549" width="0.0144%" height="15" fill="rgb(225,71,47)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="559.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="533" width="0.0144%" height="15" fill="rgb(220,139,14)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="543.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="517" width="0.0144%" height="15" fill="rgb(247,54,32)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="527.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="501" width="0.0144%" height="15" fill="rgb(252,131,39)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="485" width="0.0144%" height="15" fill="rgb(210,108,39)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="495.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (17 samples, 0.01%)</title><rect x="34.1862%" y="469" width="0.0144%" height="15" fill="rgb(205,23,29)" fg:x="40244" fg:w="17"/><text x="34.4362%" y="479.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (16 samples, 0.01%)</title><rect x="34.1871%" y="453" width="0.0136%" height="15" fill="rgb(246,139,46)" fg:x="40245" fg:w="16"/><text x="34.4371%" y="463.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (790 samples, 0.67%)</title><rect x="33.5389%" y="1157" width="0.6711%" height="15" fill="rgb(250,81,26)" fg:x="39482" fg:w="790"/><text x="33.7889%" y="1167.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="1141" width="0.1410%" height="15" fill="rgb(214,104,7)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1151.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (166 samples, 0.14%)</title><rect x="34.0690%" y="1125" width="0.1410%" height="15" fill="rgb(233,189,8)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1135.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="1109" width="0.1410%" height="15" fill="rgb(228,141,17)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1119.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="1093" width="0.1410%" height="15" fill="rgb(247,157,1)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1103.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="1077" width="0.1410%" height="15" fill="rgb(249,225,5)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1087.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="1061" width="0.1410%" height="15" fill="rgb(242,55,13)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="1045" width="0.1410%" height="15" fill="rgb(230,49,50)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1055.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="1029" width="0.1410%" height="15" fill="rgb(241,111,38)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="1013" width="0.1410%" height="15" fill="rgb(252,155,4)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1023.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="997" width="0.1410%" height="15" fill="rgb(212,69,32)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="1007.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (166 samples, 0.14%)</title><rect x="34.0690%" y="981" width="0.1410%" height="15" fill="rgb(243,107,47)" fg:x="40106" fg:w="166"/><text x="34.3190%" y="991.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="965" width="0.1215%" height="15" fill="rgb(247,130,12)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="975.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="949" width="0.1215%" height="15" fill="rgb(233,74,16)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="959.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="933" width="0.1215%" height="15" fill="rgb(208,58,18)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="943.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="917" width="0.1215%" height="15" fill="rgb(242,225,1)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="927.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="901" width="0.1215%" height="15" fill="rgb(249,39,40)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="911.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="885" width="0.1215%" height="15" fill="rgb(207,72,44)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="895.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="869" width="0.1215%" height="15" fill="rgb(215,193,12)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="879.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="853" width="0.1215%" height="15" fill="rgb(248,41,39)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="863.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="837" width="0.1215%" height="15" fill="rgb(253,85,4)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (143 samples, 0.12%)</title><rect x="34.0885%" y="821" width="0.1215%" height="15" fill="rgb(243,70,31)" fg:x="40129" fg:w="143"/><text x="34.3385%" y="831.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (141 samples, 0.12%)</title><rect x="34.0902%" y="805" width="0.1198%" height="15" fill="rgb(253,195,26)" fg:x="40131" fg:w="141"/><text x="34.3402%" y="815.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (138 samples, 0.12%)</title><rect x="34.0928%" y="789" width="0.1172%" height="15" fill="rgb(243,42,11)" fg:x="40134" fg:w="138"/><text x="34.3428%" y="799.50"></text></g><g><title>sha256_x86_shani::Transform (17 samples, 0.01%)</title><rect x="34.2108%" y="1157" width="0.0144%" height="15" fill="rgb(239,66,17)" fg:x="40273" fg:w="17"/><text x="34.4608%" y="1167.50"></text></g><g><title>CompressAmount (27 samples, 0.02%)</title><rect x="34.2253%" y="981" width="0.0229%" height="15" fill="rgb(217,132,21)" fg:x="40290" fg:w="27"/><text x="34.4753%" y="991.50"></text></g><g><title>CompressScript (13 samples, 0.01%)</title><rect x="34.2482%" y="981" width="0.0110%" height="15" fill="rgb(252,202,21)" fg:x="40317" fg:w="13"/><text x="34.4982%" y="991.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (13 samples, 0.01%)</title><rect x="34.2771%" y="645" width="0.0110%" height="15" fill="rgb(233,98,36)" fg:x="40351" fg:w="13"/><text x="34.5271%" y="655.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (13 samples, 0.01%)</title><rect x="34.2771%" y="629" width="0.0110%" height="15" fill="rgb(216,153,54)" fg:x="40351" fg:w="13"/><text x="34.5271%" y="639.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (13 samples, 0.01%)</title><rect x="34.2771%" y="613" width="0.0110%" height="15" fill="rgb(250,99,7)" fg:x="40351" fg:w="13"/><text x="34.5271%" y="623.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (13 samples, 0.01%)</title><rect x="34.2771%" y="597" width="0.0110%" height="15" fill="rgb(207,56,50)" fg:x="40351" fg:w="13"/><text x="34.5271%" y="607.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (13 samples, 0.01%)</title><rect x="34.2771%" y="581" width="0.0110%" height="15" fill="rgb(244,61,34)" fg:x="40351" fg:w="13"/><text x="34.5271%" y="591.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (31 samples, 0.03%)</title><rect x="34.2712%" y="693" width="0.0263%" height="15" fill="rgb(241,50,38)" fg:x="40344" fg:w="31"/><text x="34.5212%" y="703.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (31 samples, 0.03%)</title><rect x="34.2712%" y="677" width="0.0263%" height="15" fill="rgb(212,166,30)" fg:x="40344" fg:w="31"/><text x="34.5212%" y="687.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (31 samples, 0.03%)</title><rect x="34.2712%" y="661" width="0.0263%" height="15" fill="rgb(249,127,32)" fg:x="40344" fg:w="31"/><text x="34.5212%" y="671.50"></text></g><g><title>CompressAmount (14 samples, 0.01%)</title><rect x="34.3085%" y="629" width="0.0119%" height="15" fill="rgb(209,103,0)" fg:x="40388" fg:w="14"/><text x="34.5585%" y="639.50"></text></g><g><title>CompressScript (12 samples, 0.01%)</title><rect x="34.3204%" y="629" width="0.0102%" height="15" fill="rgb(238,209,51)" fg:x="40402" fg:w="12"/><text x="34.5704%" y="639.50"></text></g><g><title>CompressScript (54 samples, 0.05%)</title><rect x="34.3068%" y="645" width="0.0459%" height="15" fill="rgb(237,56,23)" fg:x="40386" fg:w="54"/><text x="34.5568%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (16 samples, 0.01%)</title><rect x="34.3391%" y="629" width="0.0136%" height="15" fill="rgb(215,153,46)" fg:x="40424" fg:w="16"/><text x="34.5891%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="613" width="0.0127%" height="15" fill="rgb(224,49,31)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="623.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="597" width="0.0127%" height="15" fill="rgb(250,18,42)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="607.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="581" width="0.0127%" height="15" fill="rgb(215,176,39)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="591.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="565" width="0.0127%" height="15" fill="rgb(223,77,29)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="575.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="549" width="0.0127%" height="15" fill="rgb(234,94,52)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="559.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="533" width="0.0127%" height="15" fill="rgb(220,154,50)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="543.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="517" width="0.0127%" height="15" fill="rgb(212,11,10)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="527.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="501" width="0.0127%" height="15" fill="rgb(205,166,19)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="485" width="0.0127%" height="15" fill="rgb(244,198,16)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="495.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="34.3400%" y="469" width="0.0127%" height="15" fill="rgb(219,69,12)" fg:x="40425" fg:w="15"/><text x="34.5900%" y="479.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (13 samples, 0.01%)</title><rect x="34.3646%" y="453" width="0.0110%" height="15" fill="rgb(245,30,7)" fg:x="40454" fg:w="13"/><text x="34.6146%" y="463.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (13 samples, 0.01%)</title><rect x="34.3646%" y="437" width="0.0110%" height="15" fill="rgb(218,221,48)" fg:x="40454" fg:w="13"/><text x="34.6146%" y="447.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (13 samples, 0.01%)</title><rect x="34.3646%" y="421" width="0.0110%" height="15" fill="rgb(216,66,15)" fg:x="40454" fg:w="13"/><text x="34.6146%" y="431.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (13 samples, 0.01%)</title><rect x="34.3646%" y="405" width="0.0110%" height="15" fill="rgb(226,122,50)" fg:x="40454" fg:w="13"/><text x="34.6146%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (13 samples, 0.01%)</title><rect x="34.3646%" y="389" width="0.0110%" height="15" fill="rgb(239,156,16)" fg:x="40454" fg:w="13"/><text x="34.6146%" y="399.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (13 samples, 0.01%)</title><rect x="34.3646%" y="373" width="0.0110%" height="15" fill="rgb(224,27,38)" fg:x="40454" fg:w="13"/><text x="34.6146%" y="383.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (128 samples, 0.11%)</title><rect x="34.2703%" y="789" width="0.1087%" height="15" fill="rgb(224,39,27)" fg:x="40343" fg:w="128"/><text x="34.5203%" y="799.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (128 samples, 0.11%)</title><rect x="34.2703%" y="773" width="0.1087%" height="15" fill="rgb(215,92,29)" fg:x="40343" fg:w="128"/><text x="34.5203%" y="783.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (128 samples, 0.11%)</title><rect x="34.2703%" y="757" width="0.1087%" height="15" fill="rgb(207,159,16)" fg:x="40343" fg:w="128"/><text x="34.5203%" y="767.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (128 samples, 0.11%)</title><rect x="34.2703%" y="741" width="0.1087%" height="15" fill="rgb(238,163,47)" fg:x="40343" fg:w="128"/><text x="34.5203%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (127 samples, 0.11%)</title><rect x="34.2712%" y="725" width="0.1079%" height="15" fill="rgb(219,91,49)" fg:x="40344" fg:w="127"/><text x="34.5212%" y="735.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (127 samples, 0.11%)</title><rect x="34.2712%" y="709" width="0.1079%" height="15" fill="rgb(227,167,31)" fg:x="40344" fg:w="127"/><text x="34.5212%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (96 samples, 0.08%)</title><rect x="34.2975%" y="693" width="0.0815%" height="15" fill="rgb(234,80,54)" fg:x="40375" fg:w="96"/><text x="34.5475%" y="703.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (96 samples, 0.08%)</title><rect x="34.2975%" y="677" width="0.0815%" height="15" fill="rgb(212,114,2)" fg:x="40375" fg:w="96"/><text x="34.5475%" y="687.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (96 samples, 0.08%)</title><rect x="34.2975%" y="661" width="0.0815%" height="15" fill="rgb(234,50,24)" fg:x="40375" fg:w="96"/><text x="34.5475%" y="671.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="645" width="0.0170%" height="15" fill="rgb(221,68,8)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="655.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="629" width="0.0170%" height="15" fill="rgb(254,180,31)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="639.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="613" width="0.0170%" height="15" fill="rgb(247,130,50)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="623.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="597" width="0.0170%" height="15" fill="rgb(211,109,4)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="607.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="581" width="0.0170%" height="15" fill="rgb(238,50,21)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="591.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="565" width="0.0170%" height="15" fill="rgb(225,57,45)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="575.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="549" width="0.0170%" height="15" fill="rgb(209,196,50)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="559.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="533" width="0.0170%" height="15" fill="rgb(242,140,13)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="543.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="517" width="0.0170%" height="15" fill="rgb(217,111,7)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (20 samples, 0.02%)</title><rect x="34.3620%" y="501" width="0.0170%" height="15" fill="rgb(253,193,51)" fg:x="40451" fg:w="20"/><text x="34.6120%" y="511.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="34.3629%" y="485" width="0.0161%" height="15" fill="rgb(252,70,29)" fg:x="40452" fg:w="19"/><text x="34.6129%" y="495.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (19 samples, 0.02%)</title><rect x="34.3629%" y="469" width="0.0161%" height="15" fill="rgb(232,127,12)" fg:x="40452" fg:w="19"/><text x="34.6129%" y="479.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.3790%" y="789" width="0.0127%" height="15" fill="rgb(211,180,21)" fg:x="40471" fg:w="15"/><text x="34.6290%" y="799.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.3790%" y="773" width="0.0127%" height="15" fill="rgb(229,72,13)" fg:x="40471" fg:w="15"/><text x="34.6290%" y="783.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (15 samples, 0.01%)</title><rect x="34.3790%" y="757" width="0.0127%" height="15" fill="rgb(240,211,49)" fg:x="40471" fg:w="15"/><text x="34.6290%" y="767.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (15 samples, 0.01%)</title><rect x="34.3790%" y="741" width="0.0127%" height="15" fill="rgb(219,149,40)" fg:x="40471" fg:w="15"/><text x="34.6290%" y="751.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="1157" width="0.1716%" height="15" fill="rgb(210,127,46)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1167.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (202 samples, 0.17%)</title><rect x="34.2253%" y="1141" width="0.1716%" height="15" fill="rgb(220,106,7)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1151.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="1125" width="0.1716%" height="15" fill="rgb(249,31,22)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1135.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="1109" width="0.1716%" height="15" fill="rgb(253,1,49)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1119.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="1093" width="0.1716%" height="15" fill="rgb(227,144,33)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1103.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="1077" width="0.1716%" height="15" fill="rgb(249,163,44)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="1061" width="0.1716%" height="15" fill="rgb(234,15,39)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1071.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="1045" width="0.1716%" height="15" fill="rgb(207,66,16)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1055.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="1029" width="0.1716%" height="15" fill="rgb(233,112,24)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="1013" width="0.1716%" height="15" fill="rgb(230,90,22)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1023.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (202 samples, 0.17%)</title><rect x="34.2253%" y="997" width="0.1716%" height="15" fill="rgb(229,61,13)" fg:x="40290" fg:w="202"/><text x="34.4753%" y="1007.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (162 samples, 0.14%)</title><rect x="34.2593%" y="981" width="0.1376%" height="15" fill="rgb(225,57,24)" fg:x="40330" fg:w="162"/><text x="34.5093%" y="991.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (159 samples, 0.14%)</title><rect x="34.2618%" y="965" width="0.1351%" height="15" fill="rgb(208,169,48)" fg:x="40333" fg:w="159"/><text x="34.5118%" y="975.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (159 samples, 0.14%)</title><rect x="34.2618%" y="949" width="0.1351%" height="15" fill="rgb(244,218,51)" fg:x="40333" fg:w="159"/><text x="34.5118%" y="959.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (159 samples, 0.14%)</title><rect x="34.2618%" y="933" width="0.1351%" height="15" fill="rgb(214,148,10)" fg:x="40333" fg:w="159"/><text x="34.5118%" y="943.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (159 samples, 0.14%)</title><rect x="34.2618%" y="917" width="0.1351%" height="15" fill="rgb(225,174,27)" fg:x="40333" fg:w="159"/><text x="34.5118%" y="927.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (159 samples, 0.14%)</title><rect x="34.2618%" y="901" width="0.1351%" height="15" fill="rgb(230,96,26)" fg:x="40333" fg:w="159"/><text x="34.5118%" y="911.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (159 samples, 0.14%)</title><rect x="34.2618%" y="885" width="0.1351%" height="15" fill="rgb(232,10,30)" fg:x="40333" fg:w="159"/><text x="34.5118%" y="895.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (159 samples, 0.14%)</title><rect x="34.2618%" y="869" width="0.1351%" height="15" fill="rgb(222,8,50)" fg:x="40333" fg:w="159"/><text x="34.5118%" y="879.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (159 samples, 0.14%)</title><rect x="34.2618%" y="853" width="0.1351%" height="15" fill="rgb(213,81,27)" fg:x="40333" fg:w="159"/><text x="34.5118%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (159 samples, 0.14%)</title><rect x="34.2618%" y="837" width="0.1351%" height="15" fill="rgb(245,50,10)" fg:x="40333" fg:w="159"/><text x="34.5118%" y="847.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (158 samples, 0.13%)</title><rect x="34.2627%" y="821" width="0.1342%" height="15" fill="rgb(216,100,18)" fg:x="40334" fg:w="158"/><text x="34.5127%" y="831.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (153 samples, 0.13%)</title><rect x="34.2669%" y="805" width="0.1300%" height="15" fill="rgb(236,147,54)" fg:x="40339" fg:w="153"/><text x="34.5169%" y="815.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (1,135 samples, 0.96%)</title><rect x="33.4446%" y="1173" width="0.9642%" height="15" fill="rgb(205,143,26)" fg:x="39371" fg:w="1135"/><text x="33.6946%" y="1183.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (12 samples, 0.01%)</title><rect x="34.3986%" y="1157" width="0.0102%" height="15" fill="rgb(236,26,9)" fg:x="40494" fg:w="12"/><text x="34.6486%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (20 samples, 0.02%)</title><rect x="34.4088%" y="1173" width="0.0170%" height="15" fill="rgb(221,165,53)" fg:x="40506" fg:w="20"/><text x="34.6588%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (12 samples, 0.01%)</title><rect x="34.4258%" y="1173" width="0.0102%" height="15" fill="rgb(214,110,17)" fg:x="40526" fg:w="12"/><text x="34.6758%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (16 samples, 0.01%)</title><rect x="34.4359%" y="1173" width="0.0136%" height="15" fill="rgb(237,197,12)" fg:x="40538" fg:w="16"/><text x="34.6859%" y="1183.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::vector (63 samples, 0.05%)</title><rect x="34.4580%" y="1173" width="0.0535%" height="15" fill="rgb(205,84,17)" fg:x="40564" fg:w="63"/><text x="34.7080%" y="1183.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_default_initialize (62 samples, 0.05%)</title><rect x="34.4589%" y="1157" width="0.0527%" height="15" fill="rgb(237,18,45)" fg:x="40565" fg:w="62"/><text x="34.7089%" y="1167.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_a&lt;PrecomputedTransactionData*, unsigned long, PrecomputedTransactionData&gt; (62 samples, 0.05%)</title><rect x="34.4589%" y="1141" width="0.0527%" height="15" fill="rgb(221,87,14)" fg:x="40565" fg:w="62"/><text x="34.7089%" y="1151.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (62 samples, 0.05%)</title><rect x="34.4589%" y="1125" width="0.0527%" height="15" fill="rgb(238,186,15)" fg:x="40565" fg:w="62"/><text x="34.7089%" y="1135.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (62 samples, 0.05%)</title><rect x="34.4589%" y="1109" width="0.0527%" height="15" fill="rgb(208,115,11)" fg:x="40565" fg:w="62"/><text x="34.7089%" y="1119.50"></text></g><g><title>void std::_Construct&lt;PrecomputedTransactionData&gt; (60 samples, 0.05%)</title><rect x="34.4606%" y="1093" width="0.0510%" height="15" fill="rgb(254,175,0)" fg:x="40567" fg:w="60"/><text x="34.7106%" y="1103.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (13 samples, 0.01%)</title><rect x="34.5251%" y="1045" width="0.0110%" height="15" fill="rgb(227,24,42)" fg:x="40643" fg:w="13"/><text x="34.7751%" y="1055.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (13 samples, 0.01%)</title><rect x="34.5251%" y="1029" width="0.0110%" height="15" fill="rgb(223,211,37)" fg:x="40643" fg:w="13"/><text x="34.7751%" y="1039.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::~vector (44 samples, 0.04%)</title><rect x="34.5116%" y="1173" width="0.0374%" height="15" fill="rgb(235,49,27)" fg:x="40627" fg:w="44"/><text x="34.7616%" y="1183.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*, PrecomputedTransactionData&gt; (44 samples, 0.04%)</title><rect x="34.5116%" y="1157" width="0.0374%" height="15" fill="rgb(254,97,51)" fg:x="40627" fg:w="44"/><text x="34.7616%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*&gt; (44 samples, 0.04%)</title><rect x="34.5116%" y="1141" width="0.0374%" height="15" fill="rgb(249,51,40)" fg:x="40627" fg:w="44"/><text x="34.7616%" y="1151.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;PrecomputedTransactionData*&gt; (44 samples, 0.04%)</title><rect x="34.5116%" y="1125" width="0.0374%" height="15" fill="rgb(210,128,45)" fg:x="40627" fg:w="44"/><text x="34.7616%" y="1135.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData&gt; (35 samples, 0.03%)</title><rect x="34.5192%" y="1109" width="0.0297%" height="15" fill="rgb(224,137,50)" fg:x="40636" fg:w="35"/><text x="34.7692%" y="1119.50"></text></g><g><title>void std::destroy_at&lt;PrecomputedTransactionData&gt; (35 samples, 0.03%)</title><rect x="34.5192%" y="1093" width="0.0297%" height="15" fill="rgb(242,15,9)" fg:x="40636" fg:w="35"/><text x="34.7692%" y="1103.50"></text></g><g><title>PrecomputedTransactionData::~PrecomputedTransactionData (35 samples, 0.03%)</title><rect x="34.5192%" y="1077" width="0.0297%" height="15" fill="rgb(233,187,41)" fg:x="40636" fg:w="35"/><text x="34.7692%" y="1087.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (35 samples, 0.03%)</title><rect x="34.5192%" y="1061" width="0.0297%" height="15" fill="rgb(227,2,29)" fg:x="40636" fg:w="35"/><text x="34.7692%" y="1071.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (15 samples, 0.01%)</title><rect x="34.5362%" y="1045" width="0.0127%" height="15" fill="rgb(222,70,3)" fg:x="40656" fg:w="15"/><text x="34.7862%" y="1055.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (15 samples, 0.01%)</title><rect x="34.5362%" y="1029" width="0.0127%" height="15" fill="rgb(213,11,42)" fg:x="40656" fg:w="15"/><text x="34.7862%" y="1039.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (15 samples, 0.01%)</title><rect x="34.5362%" y="1013" width="0.0127%" height="15" fill="rgb(225,150,9)" fg:x="40656" fg:w="15"/><text x="34.7862%" y="1023.50"></text></g><g><title>Chainstate::ConnectBlock (21,378 samples, 18.16%)</title><rect x="16.4016%" y="1189" width="18.1600%" height="15" fill="rgb(230,162,45)" fg:x="19308" fg:w="21378"/><text x="16.6516%" y="1199.50">Chainstate::ConnectBlock</text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (13 samples, 0.01%)</title><rect x="34.5625%" y="1141" width="0.0110%" height="15" fill="rgb(222,14,52)" fg:x="40687" fg:w="13"/><text x="34.8125%" y="1151.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 0.01%)</title><rect x="34.5625%" y="1125" width="0.0110%" height="15" fill="rgb(254,198,14)" fg:x="40687" fg:w="13"/><text x="34.8125%" y="1135.50"></text></g><g><title>_int_free (13 samples, 0.01%)</title><rect x="34.5625%" y="1109" width="0.0110%" height="15" fill="rgb(220,217,30)" fg:x="40687" fg:w="13"/><text x="34.8125%" y="1119.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (13 samples, 0.01%)</title><rect x="34.5625%" y="1093" width="0.0110%" height="15" fill="rgb(215,146,41)" fg:x="40687" fg:w="13"/><text x="34.8125%" y="1103.50"></text></g><g><title>malloc_consolidate (13 samples, 0.01%)</title><rect x="34.5625%" y="1077" width="0.0110%" height="15" fill="rgb(217,27,36)" fg:x="40687" fg:w="13"/><text x="34.8125%" y="1087.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (17 samples, 0.01%)</title><rect x="34.5625%" y="1157" width="0.0144%" height="15" fill="rgb(219,218,39)" fg:x="40687" fg:w="17"/><text x="34.8125%" y="1167.50"></text></g><g><title>CDBBatch::EraseImpl (53 samples, 0.05%)</title><rect x="34.5770%" y="1125" width="0.0450%" height="15" fill="rgb(219,4,42)" fg:x="40704" fg:w="53"/><text x="34.8270%" y="1135.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (33 samples, 0.03%)</title><rect x="34.5940%" y="1109" width="0.0280%" height="15" fill="rgb(249,119,36)" fg:x="40724" fg:w="33"/><text x="34.8440%" y="1119.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (30 samples, 0.03%)</title><rect x="34.5965%" y="1093" width="0.0255%" height="15" fill="rgb(209,23,33)" fg:x="40727" fg:w="30"/><text x="34.8465%" y="1103.50"></text></g><g><title>decltype  (19 samples, 0.02%)</title><rect x="34.6058%" y="1077" width="0.0161%" height="15" fill="rgb(211,10,0)" fg:x="40738" fg:w="19"/><text x="34.8558%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (19 samples, 0.02%)</title><rect x="34.6058%" y="1061" width="0.0161%" height="15" fill="rgb(208,99,37)" fg:x="40738" fg:w="19"/><text x="34.8558%" y="1071.50"></text></g><g><title>decltype (19 samples, 0.02%)</title><rect x="34.6058%" y="1045" width="0.0161%" height="15" fill="rgb(213,132,31)" fg:x="40738" fg:w="19"/><text x="34.8558%" y="1055.50"></text></g><g><title>leveldb::WriteBatch::Put (24 samples, 0.02%)</title><rect x="34.6364%" y="1109" width="0.0204%" height="15" fill="rgb(243,129,40)" fg:x="40774" fg:w="24"/><text x="34.8864%" y="1119.50"></text></g><g><title>CDBBatch::WriteImpl (46 samples, 0.04%)</title><rect x="34.6220%" y="1125" width="0.0391%" height="15" fill="rgb(210,66,33)" fg:x="40757" fg:w="46"/><text x="34.8720%" y="1135.50"></text></g><g><title>CCoinsViewDB::BatchWrite (136 samples, 0.12%)</title><rect x="34.5770%" y="1141" width="0.1155%" height="15" fill="rgb(209,189,4)" fg:x="40704" fg:w="136"/><text x="34.8270%" y="1151.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (35 samples, 0.03%)</title><rect x="34.6628%" y="1125" width="0.0297%" height="15" fill="rgb(214,107,37)" fg:x="40805" fg:w="35"/><text x="34.9128%" y="1135.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (33 samples, 0.03%)</title><rect x="34.6645%" y="1109" width="0.0280%" height="15" fill="rgb(245,88,54)" fg:x="40807" fg:w="33"/><text x="34.9145%" y="1119.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (21 samples, 0.02%)</title><rect x="34.7035%" y="1077" width="0.0178%" height="15" fill="rgb(205,146,20)" fg:x="40853" fg:w="21"/><text x="34.9535%" y="1087.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (47 samples, 0.04%)</title><rect x="34.7757%" y="1029" width="0.0399%" height="15" fill="rgb(220,161,25)" fg:x="40938" fg:w="47"/><text x="35.0257%" y="1039.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (16 samples, 0.01%)</title><rect x="34.8250%" y="997" width="0.0136%" height="15" fill="rgb(215,152,15)" fg:x="40996" fg:w="16"/><text x="35.0750%" y="1007.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (37 samples, 0.03%)</title><rect x="34.8157%" y="1013" width="0.0314%" height="15" fill="rgb(233,192,44)" fg:x="40985" fg:w="37"/><text x="35.0657%" y="1023.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (38 samples, 0.03%)</title><rect x="34.8157%" y="1029" width="0.0323%" height="15" fill="rgb(240,170,46)" fg:x="40985" fg:w="38"/><text x="35.0657%" y="1039.50"></text></g><g><title>GetLengthPrefixedSlice (15 samples, 0.01%)</title><rect x="34.9218%" y="981" width="0.0127%" height="15" fill="rgb(207,104,33)" fg:x="41110" fg:w="15"/><text x="35.1718%" y="991.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (31 samples, 0.03%)</title><rect x="34.9354%" y="981" width="0.0263%" height="15" fill="rgb(219,21,39)" fg:x="41126" fg:w="31"/><text x="35.1854%" y="991.50"></text></g><g><title>Compare (12 samples, 0.01%)</title><rect x="35.0127%" y="965" width="0.0102%" height="15" fill="rgb(214,133,29)" fg:x="41217" fg:w="12"/><text x="35.2627%" y="975.50"></text></g><g><title>leveldb::Slice::compare (12 samples, 0.01%)</title><rect x="35.0127%" y="949" width="0.0102%" height="15" fill="rgb(226,93,6)" fg:x="41217" fg:w="12"/><text x="35.2627%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (54 samples, 0.05%)</title><rect x="35.0255%" y="965" width="0.0459%" height="15" fill="rgb(252,222,34)" fg:x="41232" fg:w="54"/><text x="35.2755%" y="975.50"></text></g><g><title>leveldb::Slice::compare (21 samples, 0.02%)</title><rect x="35.0535%" y="949" width="0.0178%" height="15" fill="rgb(252,92,48)" fg:x="41265" fg:w="21"/><text x="35.3035%" y="959.50"></text></g><g><title>leveldb::ExtractUserKey (16 samples, 0.01%)</title><rect x="35.0722%" y="965" width="0.0136%" height="15" fill="rgb(245,223,24)" fg:x="41287" fg:w="16"/><text x="35.3222%" y="975.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (79 samples, 0.07%)</title><rect x="35.0858%" y="965" width="0.0671%" height="15" fill="rgb(205,176,3)" fg:x="41303" fg:w="79"/><text x="35.3358%" y="975.50"></text></g><g><title>leveldb::ExtractUserKey (12 samples, 0.01%)</title><rect x="35.1427%" y="949" width="0.0102%" height="15" fill="rgb(235,151,15)" fg:x="41370" fg:w="12"/><text x="35.3927%" y="959.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (62 samples, 0.05%)</title><rect x="35.1538%" y="965" width="0.0527%" height="15" fill="rgb(237,209,11)" fg:x="41383" fg:w="62"/><text x="35.4038%" y="975.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (28 samples, 0.02%)</title><rect x="35.2438%" y="949" width="0.0238%" height="15" fill="rgb(243,227,24)" fg:x="41489" fg:w="28"/><text x="35.4938%" y="959.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (380 samples, 0.32%)</title><rect x="34.9618%" y="981" width="0.3228%" height="15" fill="rgb(239,193,16)" fg:x="41157" fg:w="380"/><text x="35.2118%" y="991.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (92 samples, 0.08%)</title><rect x="35.2064%" y="965" width="0.0782%" height="15" fill="rgb(231,27,9)" fg:x="41445" fg:w="92"/><text x="35.4564%" y="975.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (20 samples, 0.02%)</title><rect x="35.2676%" y="949" width="0.0170%" height="15" fill="rgb(219,169,10)" fg:x="41517" fg:w="20"/><text x="35.5176%" y="959.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (18 samples, 0.02%)</title><rect x="35.2693%" y="933" width="0.0153%" height="15" fill="rgb(244,229,43)" fg:x="41519" fg:w="18"/><text x="35.5193%" y="943.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (18 samples, 0.02%)</title><rect x="35.2693%" y="917" width="0.0153%" height="15" fill="rgb(254,38,20)" fg:x="41519" fg:w="18"/><text x="35.5193%" y="927.50"></text></g><g><title>GetLengthPrefixedSlice (116 samples, 0.10%)</title><rect x="35.3789%" y="965" width="0.0985%" height="15" fill="rgb(250,47,30)" fg:x="41648" fg:w="116"/><text x="35.6289%" y="975.50"></text></g><g><title>leveldb::GetVarint32Ptr (83 samples, 0.07%)</title><rect x="35.4069%" y="949" width="0.0705%" height="15" fill="rgb(224,124,36)" fg:x="41681" fg:w="83"/><text x="35.6569%" y="959.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (235 samples, 0.20%)</title><rect x="35.2863%" y="981" width="0.1996%" height="15" fill="rgb(246,68,51)" fg:x="41539" fg:w="235"/><text x="35.5363%" y="991.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (33 samples, 0.03%)</title><rect x="35.4859%" y="981" width="0.0280%" height="15" fill="rgb(253,43,49)" fg:x="41774" fg:w="33"/><text x="35.7359%" y="991.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (749 samples, 0.64%)</title><rect x="34.8785%" y="997" width="0.6363%" height="15" fill="rgb(219,54,36)" fg:x="41059" fg:w="749"/><text x="35.1285%" y="1007.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (16 samples, 0.01%)</title><rect x="35.5216%" y="981" width="0.0136%" height="15" fill="rgb(227,133,34)" fg:x="41816" fg:w="16"/><text x="35.7716%" y="991.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (30 samples, 0.03%)</title><rect x="35.5148%" y="997" width="0.0255%" height="15" fill="rgb(247,227,15)" fg:x="41808" fg:w="30"/><text x="35.7648%" y="1007.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (807 samples, 0.69%)</title><rect x="34.8573%" y="1013" width="0.6855%" height="15" fill="rgb(229,96,14)" fg:x="41034" fg:w="807"/><text x="35.1073%" y="1023.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (820 samples, 0.70%)</title><rect x="34.8479%" y="1029" width="0.6966%" height="15" fill="rgb(220,79,17)" fg:x="41023" fg:w="820"/><text x="35.0979%" y="1039.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (925 samples, 0.79%)</title><rect x="34.7613%" y="1045" width="0.7858%" height="15" fill="rgb(205,131,53)" fg:x="40921" fg:w="925"/><text x="35.0113%" y="1055.50"></text></g><g><title>leveldb::MemTable::Add (938 samples, 0.80%)</title><rect x="34.7511%" y="1061" width="0.7968%" height="15" fill="rgb(209,50,29)" fg:x="40909" fg:w="938"/><text x="35.0011%" y="1071.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (1,020 samples, 0.87%)</title><rect x="34.6933%" y="1109" width="0.8665%" height="15" fill="rgb(245,86,46)" fg:x="40841" fg:w="1020"/><text x="34.9433%" y="1119.50"></text></g><g><title>leveldb::WriteBatch::Iterate (1,009 samples, 0.86%)</title><rect x="34.7027%" y="1093" width="0.8571%" height="15" fill="rgb(235,66,46)" fg:x="40852" fg:w="1009"/><text x="34.9527%" y="1103.50"></text></g><g><title>leveldb::WriteBatch::Iterate (964 samples, 0.82%)</title><rect x="34.7409%" y="1077" width="0.8189%" height="15" fill="rgb(232,148,31)" fg:x="40897" fg:w="964"/><text x="34.9909%" y="1087.50"></text></g><g><title>[[ext4]] (15 samples, 0.01%)</title><rect x="35.5632%" y="885" width="0.0127%" height="15" fill="rgb(217,149,8)" fg:x="41865" fg:w="15"/><text x="35.8132%" y="895.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="35.5649%" y="869" width="0.0110%" height="15" fill="rgb(209,183,11)" fg:x="41867" fg:w="13"/><text x="35.8149%" y="879.50"></text></g><g><title>[[ext4]] (20 samples, 0.02%)</title><rect x="35.5624%" y="901" width="0.0170%" height="15" fill="rgb(208,55,20)" fg:x="41864" fg:w="20"/><text x="35.8124%" y="911.50"></text></g><g><title>[[ext4]] (54 samples, 0.05%)</title><rect x="35.5607%" y="917" width="0.0459%" height="15" fill="rgb(218,39,14)" fg:x="41862" fg:w="54"/><text x="35.8107%" y="927.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="35.5793%" y="901" width="0.0272%" height="15" fill="rgb(216,169,33)" fg:x="41884" fg:w="32"/><text x="35.8293%" y="911.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="35.5793%" y="885" width="0.0272%" height="15" fill="rgb(233,80,24)" fg:x="41884" fg:w="32"/><text x="35.8293%" y="895.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="35.5827%" y="869" width="0.0238%" height="15" fill="rgb(213,179,31)" fg:x="41888" fg:w="28"/><text x="35.8327%" y="879.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="35.5887%" y="853" width="0.0178%" height="15" fill="rgb(209,19,5)" fg:x="41895" fg:w="21"/><text x="35.8387%" y="863.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="35.5929%" y="837" width="0.0136%" height="15" fill="rgb(219,18,35)" fg:x="41900" fg:w="16"/><text x="35.8429%" y="847.50"></text></g><g><title>[[ext4]] (57 samples, 0.05%)</title><rect x="35.5607%" y="949" width="0.0484%" height="15" fill="rgb(209,169,16)" fg:x="41862" fg:w="57"/><text x="35.8107%" y="959.50"></text></g><g><title>[unknown] (57 samples, 0.05%)</title><rect x="35.5607%" y="933" width="0.0484%" height="15" fill="rgb(245,90,51)" fg:x="41862" fg:w="57"/><text x="35.8107%" y="943.50"></text></g><g><title>Flush (58 samples, 0.05%)</title><rect x="35.5607%" y="1077" width="0.0493%" height="15" fill="rgb(220,99,45)" fg:x="41862" fg:w="58"/><text x="35.8107%" y="1087.50"></text></g><g><title>FlushBuffer (58 samples, 0.05%)</title><rect x="35.5607%" y="1061" width="0.0493%" height="15" fill="rgb(249,89,25)" fg:x="41862" fg:w="58"/><text x="35.8107%" y="1071.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (58 samples, 0.05%)</title><rect x="35.5607%" y="1045" width="0.0493%" height="15" fill="rgb(239,193,0)" fg:x="41862" fg:w="58"/><text x="35.8107%" y="1055.50"></text></g><g><title>__GI___libc_write (58 samples, 0.05%)</title><rect x="35.5607%" y="1029" width="0.0493%" height="15" fill="rgb(231,126,1)" fg:x="41862" fg:w="58"/><text x="35.8107%" y="1039.50"></text></g><g><title>[unknown] (58 samples, 0.05%)</title><rect x="35.5607%" y="1013" width="0.0493%" height="15" fill="rgb(243,166,3)" fg:x="41862" fg:w="58"/><text x="35.8107%" y="1023.50"></text></g><g><title>[unknown] (58 samples, 0.05%)</title><rect x="35.5607%" y="997" width="0.0493%" height="15" fill="rgb(223,22,34)" fg:x="41862" fg:w="58"/><text x="35.8107%" y="1007.50"></text></g><g><title>[unknown] (58 samples, 0.05%)</title><rect x="35.5607%" y="981" width="0.0493%" height="15" fill="rgb(251,52,51)" fg:x="41862" fg:w="58"/><text x="35.8107%" y="991.50"></text></g><g><title>[unknown] (58 samples, 0.05%)</title><rect x="35.5607%" y="965" width="0.0493%" height="15" fill="rgb(221,165,28)" fg:x="41862" fg:w="58"/><text x="35.8107%" y="975.50"></text></g><g><title>CDBWrapper::WriteBatch (1,089 samples, 0.93%)</title><rect x="34.6925%" y="1141" width="0.9251%" height="15" fill="rgb(218,121,47)" fg:x="40840" fg:w="1089"/><text x="34.9425%" y="1151.50"></text></g><g><title>leveldb::DBImpl::Write (1,089 samples, 0.93%)</title><rect x="34.6925%" y="1125" width="0.9251%" height="15" fill="rgb(209,120,9)" fg:x="40840" fg:w="1089"/><text x="34.9425%" y="1135.50"></text></g><g><title>leveldb::log::Writer::AddRecord (68 samples, 0.06%)</title><rect x="35.5598%" y="1109" width="0.0578%" height="15" fill="rgb(236,68,12)" fg:x="41861" fg:w="68"/><text x="35.8098%" y="1119.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (68 samples, 0.06%)</title><rect x="35.5598%" y="1093" width="0.0578%" height="15" fill="rgb(225,194,26)" fg:x="41861" fg:w="68"/><text x="35.8098%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (22 samples, 0.02%)</title><rect x="35.6184%" y="1013" width="0.0187%" height="15" fill="rgb(231,84,39)" fg:x="41930" fg:w="22"/><text x="35.8684%" y="1023.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (22 samples, 0.02%)</title><rect x="35.6184%" y="997" width="0.0187%" height="15" fill="rgb(210,11,45)" fg:x="41930" fg:w="22"/><text x="35.8684%" y="1007.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (22 samples, 0.02%)</title><rect x="35.6184%" y="981" width="0.0187%" height="15" fill="rgb(224,54,52)" fg:x="41930" fg:w="22"/><text x="35.8684%" y="991.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (22 samples, 0.02%)</title><rect x="35.6184%" y="965" width="0.0187%" height="15" fill="rgb(238,102,14)" fg:x="41930" fg:w="22"/><text x="35.8684%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (22 samples, 0.02%)</title><rect x="35.6184%" y="949" width="0.0187%" height="15" fill="rgb(243,160,52)" fg:x="41930" fg:w="22"/><text x="35.8684%" y="959.50"></text></g><g><title>DataStream::write (22 samples, 0.02%)</title><rect x="35.6184%" y="933" width="0.0187%" height="15" fill="rgb(216,114,19)" fg:x="41930" fg:w="22"/><text x="35.8684%" y="943.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (22 samples, 0.02%)</title><rect x="35.6184%" y="917" width="0.0187%" height="15" fill="rgb(244,166,37)" fg:x="41930" fg:w="22"/><text x="35.8684%" y="927.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (26 samples, 0.02%)</title><rect x="35.6176%" y="1141" width="0.0221%" height="15" fill="rgb(246,29,44)" fg:x="41929" fg:w="26"/><text x="35.8676%" y="1151.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (26 samples, 0.02%)</title><rect x="35.6176%" y="1125" width="0.0221%" height="15" fill="rgb(215,56,53)" fg:x="41929" fg:w="26"/><text x="35.8676%" y="1135.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (26 samples, 0.02%)</title><rect x="35.6176%" y="1109" width="0.0221%" height="15" fill="rgb(217,60,2)" fg:x="41929" fg:w="26"/><text x="35.8676%" y="1119.50"></text></g><g><title>Serialize&lt;DataStream&gt; (26 samples, 0.02%)</title><rect x="35.6176%" y="1093" width="0.0221%" height="15" fill="rgb(207,26,24)" fg:x="41929" fg:w="26"/><text x="35.8676%" y="1103.50"></text></g><g><title>Ser&lt;DataStream&gt; (26 samples, 0.02%)</title><rect x="35.6176%" y="1077" width="0.0221%" height="15" fill="rgb(252,210,15)" fg:x="41929" fg:w="26"/><text x="35.8676%" y="1087.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (26 samples, 0.02%)</title><rect x="35.6176%" y="1061" width="0.0221%" height="15" fill="rgb(253,209,26)" fg:x="41929" fg:w="26"/><text x="35.8676%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (26 samples, 0.02%)</title><rect x="35.6176%" y="1045" width="0.0221%" height="15" fill="rgb(238,170,14)" fg:x="41929" fg:w="26"/><text x="35.8676%" y="1055.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (26 samples, 0.02%)</title><rect x="35.6176%" y="1029" width="0.0221%" height="15" fill="rgb(216,178,15)" fg:x="41929" fg:w="26"/><text x="35.8676%" y="1039.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (12 samples, 0.01%)</title><rect x="35.6397%" y="981" width="0.0102%" height="15" fill="rgb(250,197,2)" fg:x="41955" fg:w="12"/><text x="35.8897%" y="991.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (12 samples, 0.01%)</title><rect x="35.6397%" y="965" width="0.0102%" height="15" fill="rgb(212,70,42)" fg:x="41955" fg:w="12"/><text x="35.8897%" y="975.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (12 samples, 0.01%)</title><rect x="35.6397%" y="949" width="0.0102%" height="15" fill="rgb(227,213,9)" fg:x="41955" fg:w="12"/><text x="35.8897%" y="959.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (29 samples, 0.02%)</title><rect x="35.6397%" y="1077" width="0.0246%" height="15" fill="rgb(245,99,25)" fg:x="41955" fg:w="29"/><text x="35.8897%" y="1087.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (29 samples, 0.02%)</title><rect x="35.6397%" y="1061" width="0.0246%" height="15" fill="rgb(250,82,29)" fg:x="41955" fg:w="29"/><text x="35.8897%" y="1071.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (29 samples, 0.02%)</title><rect x="35.6397%" y="1045" width="0.0246%" height="15" fill="rgb(241,226,54)" fg:x="41955" fg:w="29"/><text x="35.8897%" y="1055.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (29 samples, 0.02%)</title><rect x="35.6397%" y="1029" width="0.0246%" height="15" fill="rgb(221,99,41)" fg:x="41955" fg:w="29"/><text x="35.8897%" y="1039.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (29 samples, 0.02%)</title><rect x="35.6397%" y="1013" width="0.0246%" height="15" fill="rgb(213,90,21)" fg:x="41955" fg:w="29"/><text x="35.8897%" y="1023.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (29 samples, 0.02%)</title><rect x="35.6397%" y="997" width="0.0246%" height="15" fill="rgb(205,208,24)" fg:x="41955" fg:w="29"/><text x="35.8897%" y="1007.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (17 samples, 0.01%)</title><rect x="35.6498%" y="981" width="0.0144%" height="15" fill="rgb(246,31,12)" fg:x="41967" fg:w="17"/><text x="35.8998%" y="991.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (17 samples, 0.01%)</title><rect x="35.6498%" y="965" width="0.0144%" height="15" fill="rgb(213,154,6)" fg:x="41967" fg:w="17"/><text x="35.8998%" y="975.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (17 samples, 0.01%)</title><rect x="35.6498%" y="949" width="0.0144%" height="15" fill="rgb(222,163,29)" fg:x="41967" fg:w="17"/><text x="35.8998%" y="959.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (90 samples, 0.08%)</title><rect x="35.6660%" y="1029" width="0.0765%" height="15" fill="rgb(227,201,8)" fg:x="41986" fg:w="90"/><text x="35.9160%" y="1039.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (90 samples, 0.08%)</title><rect x="35.6660%" y="1013" width="0.0765%" height="15" fill="rgb(233,9,32)" fg:x="41986" fg:w="90"/><text x="35.9160%" y="1023.50"></text></g><g><title>DataStream::write (90 samples, 0.08%)</title><rect x="35.6660%" y="997" width="0.0765%" height="15" fill="rgb(217,54,24)" fg:x="41986" fg:w="90"/><text x="35.9160%" y="1007.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (90 samples, 0.08%)</title><rect x="35.6660%" y="981" width="0.0765%" height="15" fill="rgb(235,192,0)" fg:x="41986" fg:w="90"/><text x="35.9160%" y="991.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (83 samples, 0.07%)</title><rect x="35.6719%" y="965" width="0.0705%" height="15" fill="rgb(235,45,9)" fg:x="41993" fg:w="83"/><text x="35.9219%" y="975.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (79 samples, 0.07%)</title><rect x="35.6753%" y="949" width="0.0671%" height="15" fill="rgb(246,42,40)" fg:x="41997" fg:w="79"/><text x="35.9253%" y="959.50"></text></g><g><title>decltype  (59 samples, 0.05%)</title><rect x="35.6923%" y="933" width="0.0501%" height="15" fill="rgb(248,111,24)" fg:x="42017" fg:w="59"/><text x="35.9423%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (59 samples, 0.05%)</title><rect x="35.6923%" y="917" width="0.0501%" height="15" fill="rgb(249,65,22)" fg:x="42017" fg:w="59"/><text x="35.9423%" y="927.50"></text></g><g><title>decltype (59 samples, 0.05%)</title><rect x="35.6923%" y="901" width="0.0501%" height="15" fill="rgb(238,111,51)" fg:x="42017" fg:w="59"/><text x="35.9423%" y="911.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (18 samples, 0.02%)</title><rect x="35.7450%" y="1013" width="0.0153%" height="15" fill="rgb(250,118,22)" fg:x="42079" fg:w="18"/><text x="35.9950%" y="1023.50"></text></g><g><title>decltype  (15 samples, 0.01%)</title><rect x="35.7475%" y="997" width="0.0127%" height="15" fill="rgb(234,84,26)" fg:x="42082" fg:w="15"/><text x="35.9975%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (15 samples, 0.01%)</title><rect x="35.7475%" y="981" width="0.0127%" height="15" fill="rgb(243,172,12)" fg:x="42082" fg:w="15"/><text x="35.9975%" y="991.50"></text></g><g><title>decltype (15 samples, 0.01%)</title><rect x="35.7475%" y="965" width="0.0127%" height="15" fill="rgb(236,150,49)" fg:x="42082" fg:w="15"/><text x="35.9975%" y="975.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (144 samples, 0.12%)</title><rect x="35.6397%" y="1125" width="0.1223%" height="15" fill="rgb(225,197,26)" fg:x="41955" fg:w="144"/><text x="35.8897%" y="1135.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (144 samples, 0.12%)</title><rect x="35.6397%" y="1109" width="0.1223%" height="15" fill="rgb(214,17,42)" fg:x="41955" fg:w="144"/><text x="35.8897%" y="1119.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (144 samples, 0.12%)</title><rect x="35.6397%" y="1093" width="0.1223%" height="15" fill="rgb(224,165,40)" fg:x="41955" fg:w="144"/><text x="35.8897%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (115 samples, 0.10%)</title><rect x="35.6643%" y="1077" width="0.0977%" height="15" fill="rgb(246,100,4)" fg:x="41984" fg:w="115"/><text x="35.9143%" y="1087.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (115 samples, 0.10%)</title><rect x="35.6643%" y="1061" width="0.0977%" height="15" fill="rgb(222,103,0)" fg:x="41984" fg:w="115"/><text x="35.9143%" y="1071.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (115 samples, 0.10%)</title><rect x="35.6643%" y="1045" width="0.0977%" height="15" fill="rgb(227,189,26)" fg:x="41984" fg:w="115"/><text x="35.9143%" y="1055.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (23 samples, 0.02%)</title><rect x="35.7424%" y="1029" width="0.0195%" height="15" fill="rgb(214,202,17)" fg:x="42076" fg:w="23"/><text x="35.9924%" y="1039.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (15 samples, 0.01%)</title><rect x="35.7645%" y="1013" width="0.0127%" height="15" fill="rgb(229,111,3)" fg:x="42102" fg:w="15"/><text x="36.0145%" y="1023.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (15 samples, 0.01%)</title><rect x="35.7645%" y="997" width="0.0127%" height="15" fill="rgb(229,172,15)" fg:x="42102" fg:w="15"/><text x="36.0145%" y="1007.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (15 samples, 0.01%)</title><rect x="35.7645%" y="981" width="0.0127%" height="15" fill="rgb(230,224,35)" fg:x="42102" fg:w="15"/><text x="36.0145%" y="991.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (15 samples, 0.01%)</title><rect x="35.7645%" y="965" width="0.0127%" height="15" fill="rgb(251,141,6)" fg:x="42102" fg:w="15"/><text x="36.0145%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (15 samples, 0.01%)</title><rect x="35.7645%" y="949" width="0.0127%" height="15" fill="rgb(225,208,6)" fg:x="42102" fg:w="15"/><text x="36.0145%" y="959.50"></text></g><g><title>DataStream::write (15 samples, 0.01%)</title><rect x="35.7645%" y="933" width="0.0127%" height="15" fill="rgb(246,181,16)" fg:x="42102" fg:w="15"/><text x="36.0145%" y="943.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (15 samples, 0.01%)</title><rect x="35.7645%" y="917" width="0.0127%" height="15" fill="rgb(227,129,36)" fg:x="42102" fg:w="15"/><text x="36.0145%" y="927.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1,415 samples, 1.20%)</title><rect x="34.5770%" y="1157" width="1.2020%" height="15" fill="rgb(248,117,24)" fg:x="40704" fg:w="1415"/><text x="34.8270%" y="1167.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (164 samples, 0.14%)</title><rect x="35.6397%" y="1141" width="0.1393%" height="15" fill="rgb(214,185,35)" fg:x="41955" fg:w="164"/><text x="35.8897%" y="1151.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (20 samples, 0.02%)</title><rect x="35.7620%" y="1125" width="0.0170%" height="15" fill="rgb(236,150,34)" fg:x="42099" fg:w="20"/><text x="36.0120%" y="1135.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (20 samples, 0.02%)</title><rect x="35.7620%" y="1109" width="0.0170%" height="15" fill="rgb(243,228,27)" fg:x="42099" fg:w="20"/><text x="36.0120%" y="1119.50"></text></g><g><title>Serialize&lt;DataStream&gt; (20 samples, 0.02%)</title><rect x="35.7620%" y="1093" width="0.0170%" height="15" fill="rgb(245,77,44)" fg:x="42099" fg:w="20"/><text x="36.0120%" y="1103.50"></text></g><g><title>Ser&lt;DataStream&gt; (20 samples, 0.02%)</title><rect x="35.7620%" y="1077" width="0.0170%" height="15" fill="rgb(235,214,42)" fg:x="42099" fg:w="20"/><text x="36.0120%" y="1087.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (20 samples, 0.02%)</title><rect x="35.7620%" y="1061" width="0.0170%" height="15" fill="rgb(221,74,3)" fg:x="42099" fg:w="20"/><text x="36.0120%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (20 samples, 0.02%)</title><rect x="35.7620%" y="1045" width="0.0170%" height="15" fill="rgb(206,121,29)" fg:x="42099" fg:w="20"/><text x="36.0120%" y="1055.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (20 samples, 0.02%)</title><rect x="35.7620%" y="1029" width="0.0170%" height="15" fill="rgb(249,131,53)" fg:x="42099" fg:w="20"/><text x="36.0120%" y="1039.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (20 samples, 0.02%)</title><rect x="35.8163%" y="1109" width="0.0170%" height="15" fill="rgb(236,170,29)" fg:x="42163" fg:w="20"/><text x="36.0663%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (59 samples, 0.05%)</title><rect x="35.8333%" y="1093" width="0.0501%" height="15" fill="rgb(247,96,15)" fg:x="42183" fg:w="59"/><text x="36.0833%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (59 samples, 0.05%)</title><rect x="35.8333%" y="1077" width="0.0501%" height="15" fill="rgb(211,210,7)" fg:x="42183" fg:w="59"/><text x="36.0833%" y="1087.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (59 samples, 0.05%)</title><rect x="35.8333%" y="1061" width="0.0501%" height="15" fill="rgb(240,88,50)" fg:x="42183" fg:w="59"/><text x="36.0833%" y="1071.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (47 samples, 0.04%)</title><rect x="35.8435%" y="1045" width="0.0399%" height="15" fill="rgb(209,229,26)" fg:x="42195" fg:w="47"/><text x="36.0935%" y="1055.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (47 samples, 0.04%)</title><rect x="35.8435%" y="1029" width="0.0399%" height="15" fill="rgb(210,68,23)" fg:x="42195" fg:w="47"/><text x="36.0935%" y="1039.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (47 samples, 0.04%)</title><rect x="35.8435%" y="1013" width="0.0399%" height="15" fill="rgb(229,180,13)" fg:x="42195" fg:w="47"/><text x="36.0935%" y="1023.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (18 samples, 0.02%)</title><rect x="35.8682%" y="997" width="0.0153%" height="15" fill="rgb(236,53,44)" fg:x="42224" fg:w="18"/><text x="36.1182%" y="1007.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (78 samples, 0.07%)</title><rect x="35.8835%" y="997" width="0.0663%" height="15" fill="rgb(244,214,29)" fg:x="42242" fg:w="78"/><text x="36.1335%" y="1007.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (63 samples, 0.05%)</title><rect x="35.8962%" y="981" width="0.0535%" height="15" fill="rgb(220,75,29)" fg:x="42257" fg:w="63"/><text x="36.1462%" y="991.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (241 samples, 0.20%)</title><rect x="35.8011%" y="1157" width="0.2047%" height="15" fill="rgb(214,183,37)" fg:x="42145" fg:w="241"/><text x="36.0511%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (241 samples, 0.20%)</title><rect x="35.8011%" y="1141" width="0.2047%" height="15" fill="rgb(239,117,29)" fg:x="42145" fg:w="241"/><text x="36.0511%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (240 samples, 0.20%)</title><rect x="35.8019%" y="1125" width="0.2039%" height="15" fill="rgb(237,171,35)" fg:x="42146" fg:w="240"/><text x="36.0519%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (203 samples, 0.17%)</title><rect x="35.8333%" y="1109" width="0.1724%" height="15" fill="rgb(229,178,53)" fg:x="42183" fg:w="203"/><text x="36.0833%" y="1119.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (144 samples, 0.12%)</title><rect x="35.8835%" y="1093" width="0.1223%" height="15" fill="rgb(210,102,19)" fg:x="42242" fg:w="144"/><text x="36.1335%" y="1103.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (144 samples, 0.12%)</title><rect x="35.8835%" y="1077" width="0.1223%" height="15" fill="rgb(235,127,22)" fg:x="42242" fg:w="144"/><text x="36.1335%" y="1087.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (144 samples, 0.12%)</title><rect x="35.8835%" y="1061" width="0.1223%" height="15" fill="rgb(244,31,31)" fg:x="42242" fg:w="144"/><text x="36.1335%" y="1071.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (144 samples, 0.12%)</title><rect x="35.8835%" y="1045" width="0.1223%" height="15" fill="rgb(231,43,21)" fg:x="42242" fg:w="144"/><text x="36.1335%" y="1055.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (144 samples, 0.12%)</title><rect x="35.8835%" y="1029" width="0.1223%" height="15" fill="rgb(217,131,35)" fg:x="42242" fg:w="144"/><text x="36.1335%" y="1039.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (144 samples, 0.12%)</title><rect x="35.8835%" y="1013" width="0.1223%" height="15" fill="rgb(221,149,4)" fg:x="42242" fg:w="144"/><text x="36.1335%" y="1023.50"></text></g><g><title>Coin::~Coin (66 samples, 0.06%)</title><rect x="35.9497%" y="997" width="0.0561%" height="15" fill="rgb(232,170,28)" fg:x="42320" fg:w="66"/><text x="36.1997%" y="1007.50"></text></g><g><title>CTxOut::~CTxOut (66 samples, 0.06%)</title><rect x="35.9497%" y="981" width="0.0561%" height="15" fill="rgb(238,56,10)" fg:x="42320" fg:w="66"/><text x="36.1997%" y="991.50"></text></g><g><title>CScript::~CScript (66 samples, 0.06%)</title><rect x="35.9497%" y="965" width="0.0561%" height="15" fill="rgb(235,196,14)" fg:x="42320" fg:w="66"/><text x="36.1997%" y="975.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (66 samples, 0.06%)</title><rect x="35.9497%" y="949" width="0.0561%" height="15" fill="rgb(216,45,48)" fg:x="42320" fg:w="66"/><text x="36.1997%" y="959.50"></text></g><g><title>CCoinsViewCache::Flush (1,719 samples, 1.46%)</title><rect x="34.5625%" y="1173" width="1.4602%" height="15" fill="rgb(238,213,17)" fg:x="40687" fg:w="1719"/><text x="34.8125%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (16 samples, 0.01%)</title><rect x="36.0092%" y="1157" width="0.0136%" height="15" fill="rgb(212,13,2)" fg:x="42390" fg:w="16"/><text x="36.2592%" y="1167.50"></text></g><g><title>Chainstate::FlushStateToDisk (1,726 samples, 1.47%)</title><rect x="34.5617%" y="1189" width="1.4662%" height="15" fill="rgb(240,114,20)" fg:x="40686" fg:w="1726"/><text x="34.8117%" y="1199.50"></text></g><g><title>SipHashUint256Extra (22 samples, 0.02%)</title><rect x="36.0440%" y="1189" width="0.0187%" height="15" fill="rgb(228,41,40)" fg:x="42431" fg:w="22"/><text x="36.2940%" y="1199.50"></text></g><g><title>ValidationSignals::BlockChecked (13 samples, 0.01%)</title><rect x="36.0627%" y="1189" width="0.0110%" height="15" fill="rgb(244,132,35)" fg:x="42453" fg:w="13"/><text x="36.3127%" y="1199.50"></text></g><g><title>BCLog::Logger::LogPrintStr (15 samples, 0.01%)</title><rect x="36.0958%" y="1173" width="0.0127%" height="15" fill="rgb(253,189,4)" fg:x="42492" fg:w="15"/><text x="36.3458%" y="1183.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (15 samples, 0.01%)</title><rect x="36.0958%" y="1157" width="0.0127%" height="15" fill="rgb(224,37,19)" fg:x="42492" fg:w="15"/><text x="36.3458%" y="1167.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (20 samples, 0.02%)</title><rect x="36.0958%" y="1189" width="0.0170%" height="15" fill="rgb(235,223,18)" fg:x="42492" fg:w="20"/><text x="36.3458%" y="1199.50"></text></g><g><title>Chainstate::ConnectTip (30,574 samples, 25.97%)</title><rect x="10.1444%" y="1205" width="25.9718%" height="15" fill="rgb(235,163,25)" fg:x="11942" fg:w="30574"/><text x="10.3944%" y="1215.50">Chainstate::ConnectTip</text></g><g><title>Chainstate::ActivateBestChainStep (30,580 samples, 25.98%)</title><rect x="10.1444%" y="1221" width="25.9769%" height="15" fill="rgb(217,145,28)" fg:x="11942" fg:w="30580"/><text x="10.3944%" y="1231.50">Chainstate::ActivateBestChainStep</text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (17 samples, 0.01%)</title><rect x="36.1213%" y="1173" width="0.0144%" height="15" fill="rgb(223,223,32)" fg:x="42522" fg:w="17"/><text x="36.3713%" y="1183.50"></text></g><g><title>cfree@GLIBC_2.2.5 (17 samples, 0.01%)</title><rect x="36.1213%" y="1157" width="0.0144%" height="15" fill="rgb(227,189,39)" fg:x="42522" fg:w="17"/><text x="36.3713%" y="1167.50"></text></g><g><title>_int_free (17 samples, 0.01%)</title><rect x="36.1213%" y="1141" width="0.0144%" height="15" fill="rgb(248,10,22)" fg:x="42522" fg:w="17"/><text x="36.3713%" y="1151.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (17 samples, 0.01%)</title><rect x="36.1213%" y="1125" width="0.0144%" height="15" fill="rgb(248,46,39)" fg:x="42522" fg:w="17"/><text x="36.3713%" y="1135.50"></text></g><g><title>malloc_consolidate (17 samples, 0.01%)</title><rect x="36.1213%" y="1109" width="0.0144%" height="15" fill="rgb(248,113,48)" fg:x="42522" fg:w="17"/><text x="36.3713%" y="1119.50"></text></g><g><title>cfree@GLIBC_2.2.5 (22 samples, 0.02%)</title><rect x="36.1357%" y="1157" width="0.0187%" height="15" fill="rgb(245,16,25)" fg:x="42539" fg:w="22"/><text x="36.3857%" y="1167.50"></text></g><g><title>_int_free (22 samples, 0.02%)</title><rect x="36.1357%" y="1141" width="0.0187%" height="15" fill="rgb(249,152,16)" fg:x="42539" fg:w="22"/><text x="36.3857%" y="1151.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (22 samples, 0.02%)</title><rect x="36.1357%" y="1125" width="0.0187%" height="15" fill="rgb(250,16,1)" fg:x="42539" fg:w="22"/><text x="36.3857%" y="1135.50"></text></g><g><title>malloc_consolidate (22 samples, 0.02%)</title><rect x="36.1357%" y="1109" width="0.0187%" height="15" fill="rgb(249,138,3)" fg:x="42539" fg:w="22"/><text x="36.3857%" y="1119.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (40 samples, 0.03%)</title><rect x="36.1213%" y="1189" width="0.0340%" height="15" fill="rgb(227,71,41)" fg:x="42522" fg:w="40"/><text x="36.3713%" y="1199.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (23 samples, 0.02%)</title><rect x="36.1357%" y="1173" width="0.0195%" height="15" fill="rgb(209,184,23)" fg:x="42539" fg:w="23"/><text x="36.3857%" y="1183.50"></text></g><g><title>CDBBatch::EraseImpl (33 samples, 0.03%)</title><rect x="36.1578%" y="1157" width="0.0280%" height="15" fill="rgb(223,215,31)" fg:x="42565" fg:w="33"/><text x="36.4078%" y="1167.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (14 samples, 0.01%)</title><rect x="36.1740%" y="1141" width="0.0119%" height="15" fill="rgb(210,146,28)" fg:x="42584" fg:w="14"/><text x="36.4240%" y="1151.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (13 samples, 0.01%)</title><rect x="36.1748%" y="1125" width="0.0110%" height="15" fill="rgb(209,183,41)" fg:x="42585" fg:w="13"/><text x="36.4248%" y="1135.50"></text></g><g><title>DataStream::Xor (24 samples, 0.02%)</title><rect x="36.1893%" y="1109" width="0.0204%" height="15" fill="rgb(209,224,45)" fg:x="42602" fg:w="24"/><text x="36.4393%" y="1119.50"></text></g><g><title>util::Xor (24 samples, 0.02%)</title><rect x="36.1893%" y="1093" width="0.0204%" height="15" fill="rgb(224,209,51)" fg:x="42602" fg:w="24"/><text x="36.4393%" y="1103.50"></text></g><g><title>CDBBatch::WriteImpl (25 samples, 0.02%)</title><rect x="36.1893%" y="1125" width="0.0212%" height="15" fill="rgb(223,17,39)" fg:x="42602" fg:w="25"/><text x="36.4393%" y="1135.50"></text></g><g><title>DataStream::Xor (16 samples, 0.01%)</title><rect x="36.2113%" y="1093" width="0.0136%" height="15" fill="rgb(234,204,37)" fg:x="42628" fg:w="16"/><text x="36.4613%" y="1103.50"></text></g><g><title>util::Xor (16 samples, 0.01%)</title><rect x="36.2113%" y="1077" width="0.0136%" height="15" fill="rgb(236,120,5)" fg:x="42628" fg:w="16"/><text x="36.4613%" y="1087.50"></text></g><g><title>CDBBatch::WriteImpl (17 samples, 0.01%)</title><rect x="36.2113%" y="1109" width="0.0144%" height="15" fill="rgb(248,97,27)" fg:x="42628" fg:w="17"/><text x="36.4613%" y="1119.50"></text></g><g><title>leveldb::PutVarint32 (19 samples, 0.02%)</title><rect x="36.2113%" y="1125" width="0.0161%" height="15" fill="rgb(240,66,17)" fg:x="42628" fg:w="19"/><text x="36.4613%" y="1135.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (50 samples, 0.04%)</title><rect x="36.1884%" y="1141" width="0.0425%" height="15" fill="rgb(210,79,3)" fg:x="42601" fg:w="50"/><text x="36.4384%" y="1151.50"></text></g><g><title>CDBBatch::WriteImpl (17 samples, 0.01%)</title><rect x="36.2317%" y="1125" width="0.0144%" height="15" fill="rgb(214,176,27)" fg:x="42652" fg:w="17"/><text x="36.4817%" y="1135.50"></text></g><g><title>DataStream::Xor (17 samples, 0.01%)</title><rect x="36.2317%" y="1109" width="0.0144%" height="15" fill="rgb(235,185,3)" fg:x="42652" fg:w="17"/><text x="36.4817%" y="1119.50"></text></g><g><title>util::Xor (16 samples, 0.01%)</title><rect x="36.2326%" y="1093" width="0.0136%" height="15" fill="rgb(227,24,12)" fg:x="42653" fg:w="16"/><text x="36.4826%" y="1103.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (17 samples, 0.01%)</title><rect x="36.2470%" y="1125" width="0.0144%" height="15" fill="rgb(252,169,48)" fg:x="42670" fg:w="17"/><text x="36.4970%" y="1135.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (12 samples, 0.01%)</title><rect x="36.2513%" y="1109" width="0.0102%" height="15" fill="rgb(212,65,1)" fg:x="42675" fg:w="12"/><text x="36.5013%" y="1119.50"></text></g><g><title>leveldb::WriteBatch::Put (44 samples, 0.04%)</title><rect x="36.2309%" y="1141" width="0.0374%" height="15" fill="rgb(242,39,24)" fg:x="42651" fg:w="44"/><text x="36.4809%" y="1151.50"></text></g><g><title>CDBBatch::WriteImpl (111 samples, 0.09%)</title><rect x="36.1859%" y="1157" width="0.0943%" height="15" fill="rgb(249,32,23)" fg:x="42598" fg:w="111"/><text x="36.4359%" y="1167.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (12 samples, 0.01%)</title><rect x="36.2700%" y="1141" width="0.0102%" height="15" fill="rgb(251,195,23)" fg:x="42697" fg:w="12"/><text x="36.5200%" y="1151.50"></text></g><g><title>CCoinsViewDB::BatchWrite (237 samples, 0.20%)</title><rect x="36.1561%" y="1173" width="0.2013%" height="15" fill="rgb(236,174,8)" fg:x="42563" fg:w="237"/><text x="36.4061%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (90 samples, 0.08%)</title><rect x="36.2810%" y="1157" width="0.0765%" height="15" fill="rgb(220,197,8)" fg:x="42710" fg:w="90"/><text x="36.5310%" y="1167.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (84 samples, 0.07%)</title><rect x="36.2861%" y="1141" width="0.0714%" height="15" fill="rgb(240,108,37)" fg:x="42716" fg:w="84"/><text x="36.5361%" y="1151.50"></text></g><g><title>decltype  (15 samples, 0.01%)</title><rect x="36.3447%" y="1125" width="0.0127%" height="15" fill="rgb(232,176,24)" fg:x="42785" fg:w="15"/><text x="36.5947%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (15 samples, 0.01%)</title><rect x="36.3447%" y="1109" width="0.0127%" height="15" fill="rgb(243,35,29)" fg:x="42785" fg:w="15"/><text x="36.5947%" y="1119.50"></text></g><g><title>decltype (15 samples, 0.01%)</title><rect x="36.3447%" y="1093" width="0.0127%" height="15" fill="rgb(210,37,18)" fg:x="42785" fg:w="15"/><text x="36.5947%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (13 samples, 0.01%)</title><rect x="36.3846%" y="1093" width="0.0110%" height="15" fill="rgb(224,184,40)" fg:x="42832" fg:w="13"/><text x="36.6346%" y="1103.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (32 samples, 0.03%)</title><rect x="36.3702%" y="1109" width="0.0272%" height="15" fill="rgb(236,39,29)" fg:x="42815" fg:w="32"/><text x="36.6202%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (34 samples, 0.03%)</title><rect x="36.4696%" y="1061" width="0.0289%" height="15" fill="rgb(232,48,39)" fg:x="42932" fg:w="34"/><text x="36.7196%" y="1071.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (43 samples, 0.04%)</title><rect x="36.5112%" y="1061" width="0.0365%" height="15" fill="rgb(236,34,42)" fg:x="42981" fg:w="43"/><text x="36.7612%" y="1071.50"></text></g><g><title>GetLengthPrefixedSlice (16 samples, 0.01%)</title><rect x="36.6004%" y="1045" width="0.0136%" height="15" fill="rgb(243,106,37)" fg:x="43086" fg:w="16"/><text x="36.8504%" y="1055.50"></text></g><g><title>leveldb::GetVarint32Ptr (13 samples, 0.01%)</title><rect x="36.6030%" y="1029" width="0.0110%" height="15" fill="rgb(218,96,6)" fg:x="43089" fg:w="13"/><text x="36.8530%" y="1039.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (77 samples, 0.07%)</title><rect x="36.5503%" y="1061" width="0.0654%" height="15" fill="rgb(235,130,12)" fg:x="43027" fg:w="77"/><text x="36.8003%" y="1071.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (14 samples, 0.01%)</title><rect x="36.6225%" y="1029" width="0.0119%" height="15" fill="rgb(231,95,0)" fg:x="43112" fg:w="14"/><text x="36.8725%" y="1039.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (26 samples, 0.02%)</title><rect x="36.6182%" y="1045" width="0.0221%" height="15" fill="rgb(228,12,23)" fg:x="43107" fg:w="26"/><text x="36.8682%" y="1055.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (30 samples, 0.03%)</title><rect x="36.6157%" y="1061" width="0.0255%" height="15" fill="rgb(216,12,1)" fg:x="43104" fg:w="30"/><text x="36.8657%" y="1071.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (35 samples, 0.03%)</title><rect x="36.6879%" y="1029" width="0.0297%" height="15" fill="rgb(219,59,3)" fg:x="43189" fg:w="35"/><text x="36.9379%" y="1039.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (48 samples, 0.04%)</title><rect x="36.7193%" y="1029" width="0.0408%" height="15" fill="rgb(215,208,46)" fg:x="43226" fg:w="48"/><text x="36.9693%" y="1039.50"></text></g><g><title>GetLengthPrefixedSlice (36 samples, 0.03%)</title><rect x="36.8417%" y="1013" width="0.0306%" height="15" fill="rgb(254,224,29)" fg:x="43370" fg:w="36"/><text x="37.0917%" y="1023.50"></text></g><g><title>leveldb::GetVarint32Ptr (26 samples, 0.02%)</title><rect x="36.8502%" y="997" width="0.0221%" height="15" fill="rgb(232,14,29)" fg:x="43380" fg:w="26"/><text x="37.1002%" y="1007.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (14 samples, 0.01%)</title><rect x="36.8765%" y="1013" width="0.0119%" height="15" fill="rgb(208,45,52)" fg:x="43411" fg:w="14"/><text x="37.1265%" y="1023.50"></text></g><g><title>Compare (12 samples, 0.01%)</title><rect x="36.9224%" y="997" width="0.0102%" height="15" fill="rgb(234,191,28)" fg:x="43465" fg:w="12"/><text x="37.1724%" y="1007.50"></text></g><g><title>leveldb::Slice::compare (12 samples, 0.01%)</title><rect x="36.9224%" y="981" width="0.0102%" height="15" fill="rgb(244,67,43)" fg:x="43465" fg:w="12"/><text x="37.1724%" y="991.50"></text></g><g><title>__memcmp_evex_movbe (19 samples, 0.02%)</title><rect x="36.9733%" y="965" width="0.0161%" height="15" fill="rgb(236,189,24)" fg:x="43525" fg:w="19"/><text x="37.2233%" y="975.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (64 samples, 0.05%)</title><rect x="36.9385%" y="997" width="0.0544%" height="15" fill="rgb(239,214,33)" fg:x="43484" fg:w="64"/><text x="37.1885%" y="1007.50"></text></g><g><title>leveldb::Slice::compare (32 samples, 0.03%)</title><rect x="36.9657%" y="981" width="0.0272%" height="15" fill="rgb(226,176,41)" fg:x="43516" fg:w="32"/><text x="37.2157%" y="991.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (104 samples, 0.09%)</title><rect x="36.9988%" y="997" width="0.0883%" height="15" fill="rgb(248,47,8)" fg:x="43555" fg:w="104"/><text x="37.2488%" y="1007.50"></text></g><g><title>leveldb::ExtractUserKey (29 samples, 0.02%)</title><rect x="37.0625%" y="981" width="0.0246%" height="15" fill="rgb(218,81,44)" fg:x="43630" fg:w="29"/><text x="37.3125%" y="991.50"></text></g><g><title>GetLengthPrefixedSlice (25 samples, 0.02%)</title><rect x="37.1322%" y="981" width="0.0212%" height="15" fill="rgb(213,98,6)" fg:x="43712" fg:w="25"/><text x="37.3822%" y="991.50"></text></g><g><title>leveldb::GetVarint32Ptr (21 samples, 0.02%)</title><rect x="37.1356%" y="965" width="0.0178%" height="15" fill="rgb(222,85,22)" fg:x="43716" fg:w="21"/><text x="37.3856%" y="975.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (80 samples, 0.07%)</title><rect x="37.0897%" y="997" width="0.0680%" height="15" fill="rgb(239,46,39)" fg:x="43662" fg:w="80"/><text x="37.3397%" y="1007.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (36 samples, 0.03%)</title><rect x="37.1577%" y="997" width="0.0306%" height="15" fill="rgb(237,12,29)" fg:x="43742" fg:w="36"/><text x="37.4077%" y="1007.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (351 samples, 0.30%)</title><rect x="36.8909%" y="1013" width="0.2982%" height="15" fill="rgb(214,77,8)" fg:x="43428" fg:w="351"/><text x="37.1409%" y="1023.50"></text></g><g><title>GetLengthPrefixedSlice (98 samples, 0.08%)</title><rect x="37.2715%" y="997" width="0.0832%" height="15" fill="rgb(217,168,37)" fg:x="43876" fg:w="98"/><text x="37.5215%" y="1007.50"></text></g><g><title>leveldb::GetVarint32Ptr (76 samples, 0.06%)</title><rect x="37.2902%" y="981" width="0.0646%" height="15" fill="rgb(221,217,23)" fg:x="43898" fg:w="76"/><text x="37.5402%" y="991.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (203 samples, 0.17%)</title><rect x="37.1916%" y="1013" width="0.1724%" height="15" fill="rgb(243,229,36)" fg:x="43782" fg:w="203"/><text x="37.4416%" y="1023.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (14 samples, 0.01%)</title><rect x="37.3768%" y="997" width="0.0119%" height="15" fill="rgb(251,163,40)" fg:x="44000" fg:w="14"/><text x="37.6268%" y="1007.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (31 samples, 0.03%)</title><rect x="37.3641%" y="1013" width="0.0263%" height="15" fill="rgb(237,222,12)" fg:x="43985" fg:w="31"/><text x="37.6141%" y="1023.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (737 samples, 0.63%)</title><rect x="36.7678%" y="1029" width="0.6261%" height="15" fill="rgb(248,132,6)" fg:x="43283" fg:w="737"/><text x="37.0178%" y="1039.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (30 samples, 0.03%)</title><rect x="37.4329%" y="1013" width="0.0255%" height="15" fill="rgb(227,167,50)" fg:x="44066" fg:w="30"/><text x="37.6829%" y="1023.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (85 samples, 0.07%)</title><rect x="37.3938%" y="1029" width="0.0722%" height="15" fill="rgb(242,84,37)" fg:x="44020" fg:w="85"/><text x="37.6438%" y="1039.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (951 samples, 0.81%)</title><rect x="36.6616%" y="1045" width="0.8078%" height="15" fill="rgb(212,4,50)" fg:x="43158" fg:w="951"/><text x="36.9116%" y="1055.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (983 samples, 0.84%)</title><rect x="36.6412%" y="1061" width="0.8350%" height="15" fill="rgb(230,228,32)" fg:x="43134" fg:w="983"/><text x="36.8912%" y="1071.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1,206 samples, 1.02%)</title><rect x="36.4594%" y="1077" width="1.0245%" height="15" fill="rgb(248,217,23)" fg:x="42920" fg:w="1206"/><text x="36.7094%" y="1087.50"></text></g><g><title>leveldb::MemTable::Add (1,245 samples, 1.06%)</title><rect x="36.4288%" y="1093" width="1.0576%" height="15" fill="rgb(238,197,32)" fg:x="42884" fg:w="1245"/><text x="36.6788%" y="1103.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (1,341 samples, 1.14%)</title><rect x="36.3583%" y="1141" width="1.1391%" height="15" fill="rgb(236,106,1)" fg:x="42801" fg:w="1341"/><text x="36.6083%" y="1151.50"></text></g><g><title>leveldb::WriteBatch::Iterate (1,332 samples, 1.13%)</title><rect x="36.3660%" y="1125" width="1.1315%" height="15" fill="rgb(219,228,13)" fg:x="42810" fg:w="1332"/><text x="36.6160%" y="1135.50"></text></g><g><title>leveldb::WriteBatch::Iterate (1,273 samples, 1.08%)</title><rect x="36.4161%" y="1109" width="1.0814%" height="15" fill="rgb(238,30,35)" fg:x="42869" fg:w="1273"/><text x="36.6661%" y="1119.50"></text></g><g><title>[[ext4]] (12 samples, 0.01%)</title><rect x="37.5051%" y="917" width="0.0102%" height="15" fill="rgb(236,70,23)" fg:x="44151" fg:w="12"/><text x="37.7551%" y="927.50"></text></g><g><title>[[ext4]] (27 samples, 0.02%)</title><rect x="37.5034%" y="933" width="0.0229%" height="15" fill="rgb(249,104,48)" fg:x="44149" fg:w="27"/><text x="37.7534%" y="943.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="37.5153%" y="917" width="0.0110%" height="15" fill="rgb(254,117,50)" fg:x="44163" fg:w="13"/><text x="37.7653%" y="927.50"></text></g><g><title>[[ext4]] (79 samples, 0.07%)</title><rect x="37.5017%" y="949" width="0.0671%" height="15" fill="rgb(223,152,4)" fg:x="44147" fg:w="79"/><text x="37.7517%" y="959.50"></text></g><g><title>[unknown] (50 samples, 0.04%)</title><rect x="37.5263%" y="933" width="0.0425%" height="15" fill="rgb(245,6,2)" fg:x="44176" fg:w="50"/><text x="37.7763%" y="943.50"></text></g><g><title>[unknown] (49 samples, 0.04%)</title><rect x="37.5272%" y="917" width="0.0416%" height="15" fill="rgb(249,150,24)" fg:x="44177" fg:w="49"/><text x="37.7772%" y="927.50"></text></g><g><title>[unknown] (42 samples, 0.04%)</title><rect x="37.5331%" y="901" width="0.0357%" height="15" fill="rgb(228,185,42)" fg:x="44184" fg:w="42"/><text x="37.7831%" y="911.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="37.5450%" y="885" width="0.0238%" height="15" fill="rgb(226,39,33)" fg:x="44198" fg:w="28"/><text x="37.7950%" y="895.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="37.5501%" y="869" width="0.0187%" height="15" fill="rgb(221,166,19)" fg:x="44204" fg:w="22"/><text x="37.8001%" y="879.50"></text></g><g><title>Flush (90 samples, 0.08%)</title><rect x="37.4992%" y="1109" width="0.0765%" height="15" fill="rgb(209,109,2)" fg:x="44144" fg:w="90"/><text x="37.7492%" y="1119.50"></text></g><g><title>FlushBuffer (90 samples, 0.08%)</title><rect x="37.4992%" y="1093" width="0.0765%" height="15" fill="rgb(252,216,26)" fg:x="44144" fg:w="90"/><text x="37.7492%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (89 samples, 0.08%)</title><rect x="37.5000%" y="1077" width="0.0756%" height="15" fill="rgb(227,173,36)" fg:x="44145" fg:w="89"/><text x="37.7500%" y="1087.50"></text></g><g><title>__GI___libc_write (89 samples, 0.08%)</title><rect x="37.5000%" y="1061" width="0.0756%" height="15" fill="rgb(209,90,7)" fg:x="44145" fg:w="89"/><text x="37.7500%" y="1071.50"></text></g><g><title>[unknown] (89 samples, 0.08%)</title><rect x="37.5000%" y="1045" width="0.0756%" height="15" fill="rgb(250,194,11)" fg:x="44145" fg:w="89"/><text x="37.7500%" y="1055.50"></text></g><g><title>[unknown] (89 samples, 0.08%)</title><rect x="37.5000%" y="1029" width="0.0756%" height="15" fill="rgb(220,72,50)" fg:x="44145" fg:w="89"/><text x="37.7500%" y="1039.50"></text></g><g><title>[unknown] (89 samples, 0.08%)</title><rect x="37.5000%" y="1013" width="0.0756%" height="15" fill="rgb(222,106,48)" fg:x="44145" fg:w="89"/><text x="37.7500%" y="1023.50"></text></g><g><title>[unknown] (89 samples, 0.08%)</title><rect x="37.5000%" y="997" width="0.0756%" height="15" fill="rgb(216,220,45)" fg:x="44145" fg:w="89"/><text x="37.7500%" y="1007.50"></text></g><g><title>[[ext4]] (89 samples, 0.08%)</title><rect x="37.5000%" y="981" width="0.0756%" height="15" fill="rgb(234,112,18)" fg:x="44145" fg:w="89"/><text x="37.7500%" y="991.50"></text></g><g><title>[unknown] (89 samples, 0.08%)</title><rect x="37.5000%" y="965" width="0.0756%" height="15" fill="rgb(206,179,9)" fg:x="44145" fg:w="89"/><text x="37.7500%" y="975.50"></text></g><g><title>_mm_crc32_u64 (15 samples, 0.01%)</title><rect x="37.5765%" y="1093" width="0.0127%" height="15" fill="rgb(215,115,40)" fg:x="44235" fg:w="15"/><text x="37.8265%" y="1103.50"></text></g><g><title>leveldb::DBImpl::Write (1,452 samples, 1.23%)</title><rect x="36.3575%" y="1157" width="1.2334%" height="15" fill="rgb(222,69,34)" fg:x="42800" fg:w="1452"/><text x="36.6075%" y="1167.50"></text></g><g><title>leveldb::log::Writer::AddRecord (110 samples, 0.09%)</title><rect x="37.4975%" y="1141" width="0.0934%" height="15" fill="rgb(209,161,10)" fg:x="44142" fg:w="110"/><text x="37.7475%" y="1151.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (110 samples, 0.09%)</title><rect x="37.4975%" y="1125" width="0.0934%" height="15" fill="rgb(217,6,38)" fg:x="44142" fg:w="110"/><text x="37.7475%" y="1135.50"></text></g><g><title>crc32c::ExtendSse42 (18 samples, 0.02%)</title><rect x="37.5756%" y="1109" width="0.0153%" height="15" fill="rgb(229,229,48)" fg:x="44234" fg:w="18"/><text x="37.8256%" y="1119.50"></text></g><g><title>CDBWrapper::WriteBatch (1,453 samples, 1.23%)</title><rect x="36.3575%" y="1173" width="1.2343%" height="15" fill="rgb(225,21,28)" fg:x="42800" fg:w="1453"/><text x="36.6075%" y="1183.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (16 samples, 0.01%)</title><rect x="37.5951%" y="1045" width="0.0136%" height="15" fill="rgb(206,33,13)" fg:x="44257" fg:w="16"/><text x="37.8451%" y="1055.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (16 samples, 0.01%)</title><rect x="37.5951%" y="1029" width="0.0136%" height="15" fill="rgb(242,178,17)" fg:x="44257" fg:w="16"/><text x="37.8451%" y="1039.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (16 samples, 0.01%)</title><rect x="37.5951%" y="1013" width="0.0136%" height="15" fill="rgb(220,162,5)" fg:x="44257" fg:w="16"/><text x="37.8451%" y="1023.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (16 samples, 0.01%)</title><rect x="37.5951%" y="997" width="0.0136%" height="15" fill="rgb(210,33,43)" fg:x="44257" fg:w="16"/><text x="37.8451%" y="1007.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (16 samples, 0.01%)</title><rect x="37.5951%" y="981" width="0.0136%" height="15" fill="rgb(216,116,54)" fg:x="44257" fg:w="16"/><text x="37.8451%" y="991.50"></text></g><g><title>DataStream::write (16 samples, 0.01%)</title><rect x="37.5951%" y="965" width="0.0136%" height="15" fill="rgb(249,92,24)" fg:x="44257" fg:w="16"/><text x="37.8451%" y="975.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (16 samples, 0.01%)</title><rect x="37.5951%" y="949" width="0.0136%" height="15" fill="rgb(231,189,14)" fg:x="44257" fg:w="16"/><text x="37.8451%" y="959.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (21 samples, 0.02%)</title><rect x="37.5917%" y="1173" width="0.0178%" height="15" fill="rgb(230,8,41)" fg:x="44253" fg:w="21"/><text x="37.8417%" y="1183.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (18 samples, 0.02%)</title><rect x="37.5943%" y="1157" width="0.0153%" height="15" fill="rgb(249,7,27)" fg:x="44256" fg:w="18"/><text x="37.8443%" y="1167.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (18 samples, 0.02%)</title><rect x="37.5943%" y="1141" width="0.0153%" height="15" fill="rgb(232,86,5)" fg:x="44256" fg:w="18"/><text x="37.8443%" y="1151.50"></text></g><g><title>Serialize&lt;DataStream&gt; (18 samples, 0.02%)</title><rect x="37.5943%" y="1125" width="0.0153%" height="15" fill="rgb(224,175,18)" fg:x="44256" fg:w="18"/><text x="37.8443%" y="1135.50"></text></g><g><title>Ser&lt;DataStream&gt; (18 samples, 0.02%)</title><rect x="37.5943%" y="1109" width="0.0153%" height="15" fill="rgb(220,129,12)" fg:x="44256" fg:w="18"/><text x="37.8443%" y="1119.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (18 samples, 0.02%)</title><rect x="37.5943%" y="1093" width="0.0153%" height="15" fill="rgb(210,19,36)" fg:x="44256" fg:w="18"/><text x="37.8443%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (18 samples, 0.02%)</title><rect x="37.5943%" y="1077" width="0.0153%" height="15" fill="rgb(219,96,14)" fg:x="44256" fg:w="18"/><text x="37.8443%" y="1087.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (18 samples, 0.02%)</title><rect x="37.5943%" y="1061" width="0.0153%" height="15" fill="rgb(249,106,1)" fg:x="44256" fg:w="18"/><text x="37.8443%" y="1071.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (16 samples, 0.01%)</title><rect x="37.6096%" y="965" width="0.0136%" height="15" fill="rgb(249,155,20)" fg:x="44274" fg:w="16"/><text x="37.8596%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (16 samples, 0.01%)</title><rect x="37.6096%" y="949" width="0.0136%" height="15" fill="rgb(244,168,9)" fg:x="44274" fg:w="16"/><text x="37.8596%" y="959.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (16 samples, 0.01%)</title><rect x="37.6096%" y="933" width="0.0136%" height="15" fill="rgb(216,23,50)" fg:x="44274" fg:w="16"/><text x="37.8596%" y="943.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (16 samples, 0.01%)</title><rect x="37.6096%" y="917" width="0.0136%" height="15" fill="rgb(224,219,20)" fg:x="44274" fg:w="16"/><text x="37.8596%" y="927.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (16 samples, 0.01%)</title><rect x="37.6096%" y="901" width="0.0136%" height="15" fill="rgb(222,156,15)" fg:x="44274" fg:w="16"/><text x="37.8596%" y="911.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (16 samples, 0.01%)</title><rect x="37.6096%" y="885" width="0.0136%" height="15" fill="rgb(231,97,17)" fg:x="44274" fg:w="16"/><text x="37.8596%" y="895.50"></text></g><g><title>DataStream::write (16 samples, 0.01%)</title><rect x="37.6096%" y="869" width="0.0136%" height="15" fill="rgb(218,70,48)" fg:x="44274" fg:w="16"/><text x="37.8596%" y="879.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (16 samples, 0.01%)</title><rect x="37.6096%" y="853" width="0.0136%" height="15" fill="rgb(212,196,52)" fg:x="44274" fg:w="16"/><text x="37.8596%" y="863.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (19 samples, 0.02%)</title><rect x="37.6096%" y="1013" width="0.0161%" height="15" fill="rgb(243,203,18)" fg:x="44274" fg:w="19"/><text x="37.8596%" y="1023.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (19 samples, 0.02%)</title><rect x="37.6096%" y="997" width="0.0161%" height="15" fill="rgb(252,125,41)" fg:x="44274" fg:w="19"/><text x="37.8596%" y="1007.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (19 samples, 0.02%)</title><rect x="37.6096%" y="981" width="0.0161%" height="15" fill="rgb(223,180,33)" fg:x="44274" fg:w="19"/><text x="37.8596%" y="991.50"></text></g><g><title>CompressScript (14 samples, 0.01%)</title><rect x="37.6283%" y="965" width="0.0119%" height="15" fill="rgb(254,159,46)" fg:x="44296" fg:w="14"/><text x="37.8783%" y="975.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (12 samples, 0.01%)</title><rect x="37.6495%" y="965" width="0.0102%" height="15" fill="rgb(254,38,10)" fg:x="44321" fg:w="12"/><text x="37.8995%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (12 samples, 0.01%)</title><rect x="37.6495%" y="949" width="0.0102%" height="15" fill="rgb(208,217,32)" fg:x="44321" fg:w="12"/><text x="37.8995%" y="959.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (12 samples, 0.01%)</title><rect x="37.6495%" y="933" width="0.0102%" height="15" fill="rgb(221,120,13)" fg:x="44321" fg:w="12"/><text x="37.8995%" y="943.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (12 samples, 0.01%)</title><rect x="37.6495%" y="917" width="0.0102%" height="15" fill="rgb(246,54,52)" fg:x="44321" fg:w="12"/><text x="37.8995%" y="927.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (64 samples, 0.05%)</title><rect x="37.6096%" y="1109" width="0.0544%" height="15" fill="rgb(242,34,25)" fg:x="44274" fg:w="64"/><text x="37.8596%" y="1119.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (64 samples, 0.05%)</title><rect x="37.6096%" y="1093" width="0.0544%" height="15" fill="rgb(247,209,9)" fg:x="44274" fg:w="64"/><text x="37.8596%" y="1103.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (64 samples, 0.05%)</title><rect x="37.6096%" y="1077" width="0.0544%" height="15" fill="rgb(228,71,26)" fg:x="44274" fg:w="64"/><text x="37.8596%" y="1087.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (64 samples, 0.05%)</title><rect x="37.6096%" y="1061" width="0.0544%" height="15" fill="rgb(222,145,49)" fg:x="44274" fg:w="64"/><text x="37.8596%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (64 samples, 0.05%)</title><rect x="37.6096%" y="1045" width="0.0544%" height="15" fill="rgb(218,121,17)" fg:x="44274" fg:w="64"/><text x="37.8596%" y="1055.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (64 samples, 0.05%)</title><rect x="37.6096%" y="1029" width="0.0544%" height="15" fill="rgb(244,50,7)" fg:x="44274" fg:w="64"/><text x="37.8596%" y="1039.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (45 samples, 0.04%)</title><rect x="37.6257%" y="1013" width="0.0382%" height="15" fill="rgb(246,229,37)" fg:x="44293" fg:w="45"/><text x="37.8757%" y="1023.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (45 samples, 0.04%)</title><rect x="37.6257%" y="997" width="0.0382%" height="15" fill="rgb(225,18,5)" fg:x="44293" fg:w="45"/><text x="37.8757%" y="1007.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (45 samples, 0.04%)</title><rect x="37.6257%" y="981" width="0.0382%" height="15" fill="rgb(213,204,8)" fg:x="44293" fg:w="45"/><text x="37.8757%" y="991.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (87 samples, 0.07%)</title><rect x="37.6758%" y="981" width="0.0739%" height="15" fill="rgb(238,103,6)" fg:x="44352" fg:w="87"/><text x="37.9258%" y="991.50"></text></g><g><title>decltype  (70 samples, 0.06%)</title><rect x="37.6903%" y="965" width="0.0595%" height="15" fill="rgb(222,25,35)" fg:x="44369" fg:w="70"/><text x="37.9403%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (70 samples, 0.06%)</title><rect x="37.6903%" y="949" width="0.0595%" height="15" fill="rgb(213,203,35)" fg:x="44369" fg:w="70"/><text x="37.9403%" y="959.50"></text></g><g><title>decltype (70 samples, 0.06%)</title><rect x="37.6903%" y="933" width="0.0595%" height="15" fill="rgb(221,79,53)" fg:x="44369" fg:w="70"/><text x="37.9403%" y="943.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (97 samples, 0.08%)</title><rect x="37.6682%" y="1061" width="0.0824%" height="15" fill="rgb(243,200,35)" fg:x="44343" fg:w="97"/><text x="37.9182%" y="1071.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (97 samples, 0.08%)</title><rect x="37.6682%" y="1045" width="0.0824%" height="15" fill="rgb(248,60,25)" fg:x="44343" fg:w="97"/><text x="37.9182%" y="1055.50"></text></g><g><title>DataStream::write (97 samples, 0.08%)</title><rect x="37.6682%" y="1029" width="0.0824%" height="15" fill="rgb(227,53,46)" fg:x="44343" fg:w="97"/><text x="37.9182%" y="1039.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (97 samples, 0.08%)</title><rect x="37.6682%" y="1013" width="0.0824%" height="15" fill="rgb(216,120,32)" fg:x="44343" fg:w="97"/><text x="37.9182%" y="1023.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (94 samples, 0.08%)</title><rect x="37.6707%" y="997" width="0.0799%" height="15" fill="rgb(220,134,1)" fg:x="44346" fg:w="94"/><text x="37.9207%" y="1007.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (230 samples, 0.20%)</title><rect x="37.6096%" y="1157" width="0.1954%" height="15" fill="rgb(237,168,5)" fg:x="44274" fg:w="230"/><text x="37.8596%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (230 samples, 0.20%)</title><rect x="37.6096%" y="1141" width="0.1954%" height="15" fill="rgb(231,100,33)" fg:x="44274" fg:w="230"/><text x="37.8596%" y="1151.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (230 samples, 0.20%)</title><rect x="37.6096%" y="1125" width="0.1954%" height="15" fill="rgb(236,177,47)" fg:x="44274" fg:w="230"/><text x="37.8596%" y="1135.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (166 samples, 0.14%)</title><rect x="37.6639%" y="1109" width="0.1410%" height="15" fill="rgb(235,7,49)" fg:x="44338" fg:w="166"/><text x="37.9139%" y="1119.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (166 samples, 0.14%)</title><rect x="37.6639%" y="1093" width="0.1410%" height="15" fill="rgb(232,119,22)" fg:x="44338" fg:w="166"/><text x="37.9139%" y="1103.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (166 samples, 0.14%)</title><rect x="37.6639%" y="1077" width="0.1410%" height="15" fill="rgb(254,73,53)" fg:x="44338" fg:w="166"/><text x="37.9139%" y="1087.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (64 samples, 0.05%)</title><rect x="37.7506%" y="1061" width="0.0544%" height="15" fill="rgb(251,35,20)" fg:x="44440" fg:w="64"/><text x="38.0006%" y="1071.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (59 samples, 0.05%)</title><rect x="37.7548%" y="1045" width="0.0501%" height="15" fill="rgb(241,119,20)" fg:x="44445" fg:w="59"/><text x="38.0048%" y="1055.50"></text></g><g><title>decltype  (48 samples, 0.04%)</title><rect x="37.7642%" y="1029" width="0.0408%" height="15" fill="rgb(207,102,14)" fg:x="44456" fg:w="48"/><text x="38.0142%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (48 samples, 0.04%)</title><rect x="37.7642%" y="1013" width="0.0408%" height="15" fill="rgb(248,201,50)" fg:x="44456" fg:w="48"/><text x="38.0142%" y="1023.50"></text></g><g><title>decltype (48 samples, 0.04%)</title><rect x="37.7642%" y="997" width="0.0408%" height="15" fill="rgb(222,185,44)" fg:x="44456" fg:w="48"/><text x="38.0142%" y="1007.50"></text></g><g><title>CCoinsViewDB::BatchWrite (15 samples, 0.01%)</title><rect x="37.8084%" y="933" width="0.0127%" height="15" fill="rgb(218,107,18)" fg:x="44508" fg:w="15"/><text x="38.0584%" y="943.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (260 samples, 0.22%)</title><rect x="37.6096%" y="1173" width="0.2209%" height="15" fill="rgb(237,177,39)" fg:x="44274" fg:w="260"/><text x="37.8596%" y="1183.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (29 samples, 0.02%)</title><rect x="37.8058%" y="1157" width="0.0246%" height="15" fill="rgb(246,69,6)" fg:x="44505" fg:w="29"/><text x="38.0558%" y="1167.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (29 samples, 0.02%)</title><rect x="37.8058%" y="1141" width="0.0246%" height="15" fill="rgb(234,208,37)" fg:x="44505" fg:w="29"/><text x="38.0558%" y="1151.50"></text></g><g><title>Serialize&lt;DataStream&gt; (29 samples, 0.02%)</title><rect x="37.8058%" y="1125" width="0.0246%" height="15" fill="rgb(225,4,6)" fg:x="44505" fg:w="29"/><text x="38.0558%" y="1135.50"></text></g><g><title>Ser&lt;DataStream&gt; (29 samples, 0.02%)</title><rect x="37.8058%" y="1109" width="0.0246%" height="15" fill="rgb(233,45,0)" fg:x="44505" fg:w="29"/><text x="38.0558%" y="1119.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (29 samples, 0.02%)</title><rect x="37.8058%" y="1093" width="0.0246%" height="15" fill="rgb(226,136,5)" fg:x="44505" fg:w="29"/><text x="38.0558%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (29 samples, 0.02%)</title><rect x="37.8058%" y="1077" width="0.0246%" height="15" fill="rgb(211,91,47)" fg:x="44505" fg:w="29"/><text x="38.0558%" y="1087.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (29 samples, 0.02%)</title><rect x="37.8058%" y="1061" width="0.0246%" height="15" fill="rgb(242,88,51)" fg:x="44505" fg:w="29"/><text x="38.0558%" y="1071.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (27 samples, 0.02%)</title><rect x="37.8075%" y="1045" width="0.0229%" height="15" fill="rgb(230,91,28)" fg:x="44507" fg:w="27"/><text x="38.0575%" y="1055.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (27 samples, 0.02%)</title><rect x="37.8075%" y="1029" width="0.0229%" height="15" fill="rgb(254,186,29)" fg:x="44507" fg:w="27"/><text x="38.0575%" y="1039.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (27 samples, 0.02%)</title><rect x="37.8075%" y="1013" width="0.0229%" height="15" fill="rgb(238,6,4)" fg:x="44507" fg:w="27"/><text x="38.0575%" y="1023.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (27 samples, 0.02%)</title><rect x="37.8075%" y="997" width="0.0229%" height="15" fill="rgb(221,151,16)" fg:x="44507" fg:w="27"/><text x="38.0575%" y="1007.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (27 samples, 0.02%)</title><rect x="37.8075%" y="981" width="0.0229%" height="15" fill="rgb(251,143,52)" fg:x="44507" fg:w="27"/><text x="38.0575%" y="991.50"></text></g><g><title>DataStream::write (27 samples, 0.02%)</title><rect x="37.8075%" y="965" width="0.0229%" height="15" fill="rgb(206,90,15)" fg:x="44507" fg:w="27"/><text x="38.0575%" y="975.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (27 samples, 0.02%)</title><rect x="37.8075%" y="949" width="0.0229%" height="15" fill="rgb(218,35,8)" fg:x="44507" fg:w="27"/><text x="38.0575%" y="959.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1,973 samples, 1.68%)</title><rect x="36.1553%" y="1189" width="1.6760%" height="15" fill="rgb(239,215,6)" fg:x="42562" fg:w="1973"/><text x="36.4053%" y="1199.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (26 samples, 0.02%)</title><rect x="37.8619%" y="1141" width="0.0221%" height="15" fill="rgb(245,116,39)" fg:x="44571" fg:w="26"/><text x="38.1119%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (71 samples, 0.06%)</title><rect x="37.8840%" y="1125" width="0.0603%" height="15" fill="rgb(242,65,28)" fg:x="44597" fg:w="71"/><text x="38.1340%" y="1135.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (71 samples, 0.06%)</title><rect x="37.8840%" y="1109" width="0.0603%" height="15" fill="rgb(252,132,53)" fg:x="44597" fg:w="71"/><text x="38.1340%" y="1119.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (71 samples, 0.06%)</title><rect x="37.8840%" y="1093" width="0.0603%" height="15" fill="rgb(224,159,50)" fg:x="44597" fg:w="71"/><text x="38.1340%" y="1103.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (54 samples, 0.05%)</title><rect x="37.8984%" y="1077" width="0.0459%" height="15" fill="rgb(224,93,4)" fg:x="44614" fg:w="54"/><text x="38.1484%" y="1087.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (54 samples, 0.05%)</title><rect x="37.8984%" y="1061" width="0.0459%" height="15" fill="rgb(208,81,34)" fg:x="44614" fg:w="54"/><text x="38.1484%" y="1071.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (54 samples, 0.05%)</title><rect x="37.8984%" y="1045" width="0.0459%" height="15" fill="rgb(233,92,54)" fg:x="44614" fg:w="54"/><text x="38.1484%" y="1055.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (20 samples, 0.02%)</title><rect x="37.9273%" y="1029" width="0.0170%" height="15" fill="rgb(237,21,14)" fg:x="44648" fg:w="20"/><text x="38.1773%" y="1039.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (52 samples, 0.04%)</title><rect x="37.9562%" y="1013" width="0.0442%" height="15" fill="rgb(249,128,51)" fg:x="44682" fg:w="52"/><text x="38.2062%" y="1023.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (69 samples, 0.06%)</title><rect x="37.9443%" y="1029" width="0.0586%" height="15" fill="rgb(223,129,24)" fg:x="44668" fg:w="69"/><text x="38.1943%" y="1039.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (279 samples, 0.24%)</title><rect x="37.8440%" y="1189" width="0.2370%" height="15" fill="rgb(231,168,25)" fg:x="44550" fg:w="279"/><text x="38.0940%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (279 samples, 0.24%)</title><rect x="37.8440%" y="1173" width="0.2370%" height="15" fill="rgb(224,39,20)" fg:x="44550" fg:w="279"/><text x="38.0940%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (277 samples, 0.24%)</title><rect x="37.8457%" y="1157" width="0.2353%" height="15" fill="rgb(225,152,53)" fg:x="44552" fg:w="277"/><text x="38.0957%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (232 samples, 0.20%)</title><rect x="37.8840%" y="1141" width="0.1971%" height="15" fill="rgb(252,17,24)" fg:x="44597" fg:w="232"/><text x="38.1340%" y="1151.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (161 samples, 0.14%)</title><rect x="37.9443%" y="1125" width="0.1368%" height="15" fill="rgb(250,114,30)" fg:x="44668" fg:w="161"/><text x="38.1943%" y="1135.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (161 samples, 0.14%)</title><rect x="37.9443%" y="1109" width="0.1368%" height="15" fill="rgb(229,5,4)" fg:x="44668" fg:w="161"/><text x="38.1943%" y="1119.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (161 samples, 0.14%)</title><rect x="37.9443%" y="1093" width="0.1368%" height="15" fill="rgb(225,176,49)" fg:x="44668" fg:w="161"/><text x="38.1943%" y="1103.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (161 samples, 0.14%)</title><rect x="37.9443%" y="1077" width="0.1368%" height="15" fill="rgb(224,221,49)" fg:x="44668" fg:w="161"/><text x="38.1943%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (161 samples, 0.14%)</title><rect x="37.9443%" y="1061" width="0.1368%" height="15" fill="rgb(253,169,27)" fg:x="44668" fg:w="161"/><text x="38.1943%" y="1071.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (161 samples, 0.14%)</title><rect x="37.9443%" y="1045" width="0.1368%" height="15" fill="rgb(211,206,16)" fg:x="44668" fg:w="161"/><text x="38.1943%" y="1055.50"></text></g><g><title>Coin::~Coin (92 samples, 0.08%)</title><rect x="38.0029%" y="1029" width="0.0782%" height="15" fill="rgb(244,87,35)" fg:x="44737" fg:w="92"/><text x="38.2529%" y="1039.50"></text></g><g><title>CTxOut::~CTxOut (92 samples, 0.08%)</title><rect x="38.0029%" y="1013" width="0.0782%" height="15" fill="rgb(246,28,10)" fg:x="44737" fg:w="92"/><text x="38.2529%" y="1023.50"></text></g><g><title>CScript::~CScript (92 samples, 0.08%)</title><rect x="38.0029%" y="997" width="0.0782%" height="15" fill="rgb(229,12,44)" fg:x="44737" fg:w="92"/><text x="38.2529%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (92 samples, 0.08%)</title><rect x="38.0029%" y="981" width="0.0782%" height="15" fill="rgb(210,145,37)" fg:x="44737" fg:w="92"/><text x="38.2529%" y="991.50"></text></g><g><title>CCoinsViewCache::Flush (2,334 samples, 1.98%)</title><rect x="36.1213%" y="1205" width="1.9827%" height="15" fill="rgb(227,112,52)" fg:x="42522" fg:w="2334"/><text x="36.3713%" y="1215.50">C..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (24 samples, 0.02%)</title><rect x="38.0836%" y="1189" width="0.0204%" height="15" fill="rgb(238,155,34)" fg:x="44832" fg:w="24"/><text x="38.3336%" y="1199.50"></text></g><g><title>Chainstate::FlushStateToDisk (2,347 samples, 1.99%)</title><rect x="36.1213%" y="1221" width="1.9937%" height="15" fill="rgb(239,226,36)" fg:x="42522" fg:w="2347"/><text x="36.3713%" y="1231.50">C..</text></g><g><title>Chainstate::ActivateBestChain (32,940 samples, 27.98%)</title><rect x="10.1436%" y="1237" width="27.9817%" height="15" fill="rgb(230,16,23)" fg:x="11941" fg:w="32940"/><text x="10.3936%" y="1247.50">Chainstate::ActivateBestChain</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (23 samples, 0.02%)</title><rect x="38.1889%" y="805" width="0.0195%" height="15" fill="rgb(236,171,36)" fg:x="44956" fg:w="23"/><text x="38.4389%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (23 samples, 0.02%)</title><rect x="38.1889%" y="789" width="0.0195%" height="15" fill="rgb(221,22,14)" fg:x="44956" fg:w="23"/><text x="38.4389%" y="799.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="38.1889%" y="773" width="0.0195%" height="15" fill="rgb(242,43,11)" fg:x="44956" fg:w="23"/><text x="38.4389%" y="783.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="38.1889%" y="757" width="0.0195%" height="15" fill="rgb(232,69,23)" fg:x="44956" fg:w="23"/><text x="38.4389%" y="767.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (23 samples, 0.02%)</title><rect x="38.1889%" y="741" width="0.0195%" height="15" fill="rgb(216,180,54)" fg:x="44956" fg:w="23"/><text x="38.4389%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (23 samples, 0.02%)</title><rect x="38.1889%" y="725" width="0.0195%" height="15" fill="rgb(216,5,24)" fg:x="44956" fg:w="23"/><text x="38.4389%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (23 samples, 0.02%)</title><rect x="38.1889%" y="709" width="0.0195%" height="15" fill="rgb(225,89,9)" fg:x="44956" fg:w="23"/><text x="38.4389%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (20 samples, 0.02%)</title><rect x="38.1915%" y="693" width="0.0170%" height="15" fill="rgb(243,75,33)" fg:x="44959" fg:w="20"/><text x="38.4415%" y="703.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.02%)</title><rect x="38.1915%" y="677" width="0.0170%" height="15" fill="rgb(247,141,45)" fg:x="44959" fg:w="20"/><text x="38.4415%" y="687.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.02%)</title><rect x="38.1915%" y="661" width="0.0170%" height="15" fill="rgb(232,177,36)" fg:x="44959" fg:w="20"/><text x="38.4415%" y="671.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (20 samples, 0.02%)</title><rect x="38.1915%" y="645" width="0.0170%" height="15" fill="rgb(219,125,36)" fg:x="44959" fg:w="20"/><text x="38.4415%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (20 samples, 0.02%)</title><rect x="38.1915%" y="629" width="0.0170%" height="15" fill="rgb(227,94,9)" fg:x="44959" fg:w="20"/><text x="38.4415%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (20 samples, 0.02%)</title><rect x="38.1915%" y="613" width="0.0170%" height="15" fill="rgb(240,34,52)" fg:x="44959" fg:w="20"/><text x="38.4415%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (18 samples, 0.02%)</title><rect x="38.1932%" y="597" width="0.0153%" height="15" fill="rgb(216,45,12)" fg:x="44961" fg:w="18"/><text x="38.4432%" y="607.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (20 samples, 0.02%)</title><rect x="38.2085%" y="805" width="0.0170%" height="15" fill="rgb(246,21,19)" fg:x="44979" fg:w="20"/><text x="38.4585%" y="815.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (86 samples, 0.07%)</title><rect x="38.1643%" y="885" width="0.0731%" height="15" fill="rgb(213,98,42)" fg:x="44927" fg:w="86"/><text x="38.4143%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (86 samples, 0.07%)</title><rect x="38.1643%" y="869" width="0.0731%" height="15" fill="rgb(250,136,47)" fg:x="44927" fg:w="86"/><text x="38.4143%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (86 samples, 0.07%)</title><rect x="38.1643%" y="853" width="0.0731%" height="15" fill="rgb(251,124,27)" fg:x="44927" fg:w="86"/><text x="38.4143%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (86 samples, 0.07%)</title><rect x="38.1643%" y="837" width="0.0731%" height="15" fill="rgb(229,180,14)" fg:x="44927" fg:w="86"/><text x="38.4143%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (85 samples, 0.07%)</title><rect x="38.1651%" y="821" width="0.0722%" height="15" fill="rgb(245,216,25)" fg:x="44928" fg:w="85"/><text x="38.4151%" y="831.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="38.2255%" y="805" width="0.0119%" height="15" fill="rgb(251,43,5)" fg:x="44999" fg:w="14"/><text x="38.4755%" y="815.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (24 samples, 0.02%)</title><rect x="38.2577%" y="805" width="0.0204%" height="15" fill="rgb(250,128,24)" fg:x="45037" fg:w="24"/><text x="38.5077%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (34 samples, 0.03%)</title><rect x="38.2781%" y="805" width="0.0289%" height="15" fill="rgb(217,117,27)" fg:x="45061" fg:w="34"/><text x="38.5281%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (34 samples, 0.03%)</title><rect x="38.2781%" y="789" width="0.0289%" height="15" fill="rgb(245,147,4)" fg:x="45061" fg:w="34"/><text x="38.5281%" y="799.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.03%)</title><rect x="38.2781%" y="773" width="0.0289%" height="15" fill="rgb(242,201,35)" fg:x="45061" fg:w="34"/><text x="38.5281%" y="783.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.03%)</title><rect x="38.2781%" y="757" width="0.0289%" height="15" fill="rgb(218,181,1)" fg:x="45061" fg:w="34"/><text x="38.5281%" y="767.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (34 samples, 0.03%)</title><rect x="38.2781%" y="741" width="0.0289%" height="15" fill="rgb(222,6,29)" fg:x="45061" fg:w="34"/><text x="38.5281%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (34 samples, 0.03%)</title><rect x="38.2781%" y="725" width="0.0289%" height="15" fill="rgb(208,186,3)" fg:x="45061" fg:w="34"/><text x="38.5281%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (34 samples, 0.03%)</title><rect x="38.2781%" y="709" width="0.0289%" height="15" fill="rgb(216,36,26)" fg:x="45061" fg:w="34"/><text x="38.5281%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (24 samples, 0.02%)</title><rect x="38.2866%" y="693" width="0.0204%" height="15" fill="rgb(248,201,23)" fg:x="45071" fg:w="24"/><text x="38.5366%" y="703.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.02%)</title><rect x="38.2866%" y="677" width="0.0204%" height="15" fill="rgb(251,170,31)" fg:x="45071" fg:w="24"/><text x="38.5366%" y="687.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.02%)</title><rect x="38.2866%" y="661" width="0.0204%" height="15" fill="rgb(207,110,25)" fg:x="45071" fg:w="24"/><text x="38.5366%" y="671.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (24 samples, 0.02%)</title><rect x="38.2866%" y="645" width="0.0204%" height="15" fill="rgb(250,54,15)" fg:x="45071" fg:w="24"/><text x="38.5366%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (24 samples, 0.02%)</title><rect x="38.2866%" y="629" width="0.0204%" height="15" fill="rgb(227,68,33)" fg:x="45071" fg:w="24"/><text x="38.5366%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (24 samples, 0.02%)</title><rect x="38.2866%" y="613" width="0.0204%" height="15" fill="rgb(238,34,41)" fg:x="45071" fg:w="24"/><text x="38.5366%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (24 samples, 0.02%)</title><rect x="38.2866%" y="597" width="0.0204%" height="15" fill="rgb(220,11,15)" fg:x="45071" fg:w="24"/><text x="38.5366%" y="607.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.01%)</title><rect x="38.3070%" y="805" width="0.0119%" height="15" fill="rgb(246,111,35)" fg:x="45095" fg:w="14"/><text x="38.5570%" y="815.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (100 samples, 0.08%)</title><rect x="38.2373%" y="885" width="0.0849%" height="15" fill="rgb(209,88,53)" fg:x="45013" fg:w="100"/><text x="38.4873%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (100 samples, 0.08%)</title><rect x="38.2373%" y="869" width="0.0849%" height="15" fill="rgb(231,185,47)" fg:x="45013" fg:w="100"/><text x="38.4873%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (100 samples, 0.08%)</title><rect x="38.2373%" y="853" width="0.0849%" height="15" fill="rgb(233,154,1)" fg:x="45013" fg:w="100"/><text x="38.4873%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (100 samples, 0.08%)</title><rect x="38.2373%" y="837" width="0.0849%" height="15" fill="rgb(225,15,46)" fg:x="45013" fg:w="100"/><text x="38.4873%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (96 samples, 0.08%)</title><rect x="38.2407%" y="821" width="0.0815%" height="15" fill="rgb(211,135,41)" fg:x="45017" fg:w="96"/><text x="38.4907%" y="831.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (23 samples, 0.02%)</title><rect x="38.3554%" y="773" width="0.0195%" height="15" fill="rgb(208,54,0)" fg:x="45152" fg:w="23"/><text x="38.6054%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (58 samples, 0.05%)</title><rect x="38.3359%" y="805" width="0.0493%" height="15" fill="rgb(244,136,14)" fg:x="45129" fg:w="58"/><text x="38.5859%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (57 samples, 0.05%)</title><rect x="38.3367%" y="789" width="0.0484%" height="15" fill="rgb(241,56,14)" fg:x="45130" fg:w="57"/><text x="38.5867%" y="799.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.01%)</title><rect x="38.3750%" y="773" width="0.0102%" height="15" fill="rgb(205,80,24)" fg:x="45175" fg:w="12"/><text x="38.6250%" y="783.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (86 samples, 0.07%)</title><rect x="38.3223%" y="885" width="0.0731%" height="15" fill="rgb(220,57,4)" fg:x="45113" fg:w="86"/><text x="38.5723%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (86 samples, 0.07%)</title><rect x="38.3223%" y="869" width="0.0731%" height="15" fill="rgb(226,193,50)" fg:x="45113" fg:w="86"/><text x="38.5723%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (86 samples, 0.07%)</title><rect x="38.3223%" y="853" width="0.0731%" height="15" fill="rgb(231,168,22)" fg:x="45113" fg:w="86"/><text x="38.5723%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (86 samples, 0.07%)</title><rect x="38.3223%" y="837" width="0.0731%" height="15" fill="rgb(254,215,14)" fg:x="45113" fg:w="86"/><text x="38.5723%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (86 samples, 0.07%)</title><rect x="38.3223%" y="821" width="0.0731%" height="15" fill="rgb(211,115,16)" fg:x="45113" fg:w="86"/><text x="38.5723%" y="831.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (314 samples, 0.27%)</title><rect x="38.1346%" y="901" width="0.2667%" height="15" fill="rgb(236,210,16)" fg:x="44892" fg:w="314"/><text x="38.3846%" y="911.50"></text></g><g><title>GetBlockWeight (409 samples, 0.35%)</title><rect x="38.1337%" y="1205" width="0.3474%" height="15" fill="rgb(221,94,12)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1215.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1189" width="0.3474%" height="15" fill="rgb(235,218,49)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1199.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (409 samples, 0.35%)</title><rect x="38.1337%" y="1173" width="0.3474%" height="15" fill="rgb(217,114,14)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1183.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1157" width="0.3474%" height="15" fill="rgb(216,145,22)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1167.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1141" width="0.3474%" height="15" fill="rgb(217,112,39)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1125" width="0.3474%" height="15" fill="rgb(225,85,32)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1135.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1109" width="0.3474%" height="15" fill="rgb(245,209,47)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1119.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1093" width="0.3474%" height="15" fill="rgb(218,220,15)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1103.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1077" width="0.3474%" height="15" fill="rgb(222,202,31)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1061" width="0.3474%" height="15" fill="rgb(243,203,4)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1071.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1045" width="0.3474%" height="15" fill="rgb(237,92,17)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1029" width="0.3474%" height="15" fill="rgb(231,119,7)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="1013" width="0.3474%" height="15" fill="rgb(237,82,41)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1023.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="997" width="0.3474%" height="15" fill="rgb(226,81,48)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="1007.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="981" width="0.3474%" height="15" fill="rgb(234,70,51)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="991.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="965" width="0.3474%" height="15" fill="rgb(251,86,4)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="949" width="0.3474%" height="15" fill="rgb(244,144,28)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="933" width="0.3474%" height="15" fill="rgb(232,161,39)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="943.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (409 samples, 0.35%)</title><rect x="38.1337%" y="917" width="0.3474%" height="15" fill="rgb(247,34,51)" fg:x="44891" fg:w="409"/><text x="38.3837%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (94 samples, 0.08%)</title><rect x="38.4013%" y="901" width="0.0799%" height="15" fill="rgb(225,132,2)" fg:x="45206" fg:w="94"/><text x="38.6513%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.03%)</title><rect x="38.4463%" y="885" width="0.0348%" height="15" fill="rgb(209,159,44)" fg:x="45259" fg:w="41"/><text x="38.6963%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (41 samples, 0.03%)</title><rect x="38.4463%" y="869" width="0.0348%" height="15" fill="rgb(251,214,1)" fg:x="45259" fg:w="41"/><text x="38.6963%" y="879.50"></text></g><g><title>SizeComputer::write (41 samples, 0.03%)</title><rect x="38.4463%" y="853" width="0.0348%" height="15" fill="rgb(247,84,47)" fg:x="45259" fg:w="41"/><text x="38.6963%" y="863.50"></text></g><g><title>ContextualCheckBlock (425 samples, 0.36%)</title><rect x="38.1269%" y="1221" width="0.3610%" height="15" fill="rgb(240,111,43)" fg:x="44883" fg:w="425"/><text x="38.3769%" y="1231.50"></text></g><g><title>[[ext4]] (109 samples, 0.09%)</title><rect x="38.5347%" y="933" width="0.0926%" height="15" fill="rgb(215,214,35)" fg:x="45363" fg:w="109"/><text x="38.7847%" y="943.50"></text></g><g><title>[unknown] (87 samples, 0.07%)</title><rect x="38.5533%" y="917" width="0.0739%" height="15" fill="rgb(248,207,23)" fg:x="45385" fg:w="87"/><text x="38.8033%" y="927.50"></text></g><g><title>[unknown] (45 samples, 0.04%)</title><rect x="38.5890%" y="901" width="0.0382%" height="15" fill="rgb(214,186,4)" fg:x="45427" fg:w="45"/><text x="38.8390%" y="911.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="38.6120%" y="885" width="0.0153%" height="15" fill="rgb(220,133,22)" fg:x="45454" fg:w="18"/><text x="38.8620%" y="895.50"></text></g><g><title>[[ext4]] (163 samples, 0.14%)</title><rect x="38.5211%" y="949" width="0.1385%" height="15" fill="rgb(239,134,19)" fg:x="45347" fg:w="163"/><text x="38.7711%" y="959.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="38.6273%" y="933" width="0.0323%" height="15" fill="rgb(250,140,9)" fg:x="45472" fg:w="38"/><text x="38.8773%" y="943.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="38.6374%" y="917" width="0.0221%" height="15" fill="rgb(225,59,14)" fg:x="45484" fg:w="26"/><text x="38.8874%" y="927.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="38.6485%" y="901" width="0.0110%" height="15" fill="rgb(214,152,51)" fg:x="45497" fg:w="13"/><text x="38.8985%" y="911.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="38.6485%" y="885" width="0.0110%" height="15" fill="rgb(251,227,43)" fg:x="45497" fg:w="13"/><text x="38.8985%" y="895.50"></text></g><g><title>[[nvme]] (16 samples, 0.01%)</title><rect x="38.6842%" y="853" width="0.0136%" height="15" fill="rgb(241,96,17)" fg:x="45539" fg:w="16"/><text x="38.9342%" y="863.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="38.6842%" y="837" width="0.0136%" height="15" fill="rgb(234,198,43)" fg:x="45539" fg:w="16"/><text x="38.9342%" y="847.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="38.6867%" y="821" width="0.0110%" height="15" fill="rgb(220,108,29)" fg:x="45542" fg:w="13"/><text x="38.9367%" y="831.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="38.6876%" y="805" width="0.0102%" height="15" fill="rgb(226,163,33)" fg:x="45543" fg:w="12"/><text x="38.9376%" y="815.50"></text></g><g><title>[[nvme]] (17 samples, 0.01%)</title><rect x="38.6842%" y="869" width="0.0144%" height="15" fill="rgb(205,194,45)" fg:x="45539" fg:w="17"/><text x="38.9342%" y="879.50"></text></g><g><title>[[ext4]] (241 samples, 0.20%)</title><rect x="38.4998%" y="965" width="0.2047%" height="15" fill="rgb(206,143,44)" fg:x="45322" fg:w="241"/><text x="38.7498%" y="975.50"></text></g><g><title>[unknown] (53 samples, 0.05%)</title><rect x="38.6595%" y="949" width="0.0450%" height="15" fill="rgb(236,136,36)" fg:x="45510" fg:w="53"/><text x="38.9095%" y="959.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="38.6740%" y="933" width="0.0306%" height="15" fill="rgb(249,172,42)" fg:x="45527" fg:w="36"/><text x="38.9240%" y="943.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="38.6816%" y="917" width="0.0229%" height="15" fill="rgb(216,139,23)" fg:x="45536" fg:w="27"/><text x="38.9316%" y="927.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="38.6825%" y="901" width="0.0221%" height="15" fill="rgb(207,166,20)" fg:x="45537" fg:w="26"/><text x="38.9325%" y="911.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="38.6833%" y="885" width="0.0212%" height="15" fill="rgb(210,209,22)" fg:x="45538" fg:w="25"/><text x="38.9333%" y="895.50"></text></g><g><title>[[ext4]] (249 samples, 0.21%)</title><rect x="38.4998%" y="997" width="0.2115%" height="15" fill="rgb(232,118,20)" fg:x="45322" fg:w="249"/><text x="38.7498%" y="1007.50"></text></g><g><title>[[ext4]] (249 samples, 0.21%)</title><rect x="38.4998%" y="981" width="0.2115%" height="15" fill="rgb(238,113,42)" fg:x="45322" fg:w="249"/><text x="38.7498%" y="991.50"></text></g><g><title>FlatFileSeq::Flush (266 samples, 0.23%)</title><rect x="38.4964%" y="1173" width="0.2260%" height="15" fill="rgb(231,42,5)" fg:x="45318" fg:w="266"/><text x="38.7464%" y="1183.50"></text></g><g><title>FileCommit (266 samples, 0.23%)</title><rect x="38.4964%" y="1157" width="0.2260%" height="15" fill="rgb(243,166,24)" fg:x="45318" fg:w="266"/><text x="38.7464%" y="1167.50"></text></g><g><title>fdatasync (266 samples, 0.23%)</title><rect x="38.4964%" y="1141" width="0.2260%" height="15" fill="rgb(237,226,12)" fg:x="45318" fg:w="266"/><text x="38.7464%" y="1151.50"></text></g><g><title>[unknown] (266 samples, 0.23%)</title><rect x="38.4964%" y="1125" width="0.2260%" height="15" fill="rgb(229,133,24)" fg:x="45318" fg:w="266"/><text x="38.7464%" y="1135.50"></text></g><g><title>[unknown] (266 samples, 0.23%)</title><rect x="38.4964%" y="1109" width="0.2260%" height="15" fill="rgb(238,33,43)" fg:x="45318" fg:w="266"/><text x="38.7464%" y="1119.50"></text></g><g><title>[unknown] (266 samples, 0.23%)</title><rect x="38.4964%" y="1093" width="0.2260%" height="15" fill="rgb(227,59,38)" fg:x="45318" fg:w="266"/><text x="38.7464%" y="1103.50"></text></g><g><title>[[ext4]] (266 samples, 0.23%)</title><rect x="38.4964%" y="1077" width="0.2260%" height="15" fill="rgb(230,97,0)" fg:x="45318" fg:w="266"/><text x="38.7464%" y="1087.50"></text></g><g><title>[unknown] (266 samples, 0.23%)</title><rect x="38.4964%" y="1061" width="0.2260%" height="15" fill="rgb(250,173,50)" fg:x="45318" fg:w="266"/><text x="38.7464%" y="1071.50"></text></g><g><title>[unknown] (266 samples, 0.23%)</title><rect x="38.4964%" y="1045" width="0.2260%" height="15" fill="rgb(240,15,50)" fg:x="45318" fg:w="266"/><text x="38.7464%" y="1055.50"></text></g><g><title>[unknown] (265 samples, 0.23%)</title><rect x="38.4973%" y="1029" width="0.2251%" height="15" fill="rgb(221,93,22)" fg:x="45319" fg:w="265"/><text x="38.7473%" y="1039.50"></text></g><g><title>[unknown] (264 samples, 0.22%)</title><rect x="38.4981%" y="1013" width="0.2243%" height="15" fill="rgb(245,180,53)" fg:x="45320" fg:w="264"/><text x="38.7481%" y="1023.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="38.7113%" y="997" width="0.0110%" height="15" fill="rgb(231,88,51)" fg:x="45571" fg:w="13"/><text x="38.9613%" y="1007.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="38.7113%" y="981" width="0.0110%" height="15" fill="rgb(240,58,21)" fg:x="45571" fg:w="13"/><text x="38.9613%" y="991.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="38.7113%" y="965" width="0.0110%" height="15" fill="rgb(237,21,10)" fg:x="45571" fg:w="13"/><text x="38.9613%" y="975.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="38.7122%" y="949" width="0.0102%" height="15" fill="rgb(218,43,11)" fg:x="45572" fg:w="12"/><text x="38.9622%" y="959.50"></text></g><g><title>[[ext4]] (27 samples, 0.02%)</title><rect x="38.7360%" y="917" width="0.0229%" height="15" fill="rgb(218,221,29)" fg:x="45600" fg:w="27"/><text x="38.9860%" y="927.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="38.7445%" y="901" width="0.0144%" height="15" fill="rgb(214,118,42)" fg:x="45610" fg:w="17"/><text x="38.9945%" y="911.50"></text></g><g><title>[[ext4]] (35 samples, 0.03%)</title><rect x="38.7360%" y="933" width="0.0297%" height="15" fill="rgb(251,200,26)" fg:x="45600" fg:w="35"/><text x="38.9860%" y="943.50"></text></g><g><title>[[ext4]] (68 samples, 0.06%)</title><rect x="38.7275%" y="949" width="0.0578%" height="15" fill="rgb(237,101,39)" fg:x="45590" fg:w="68"/><text x="38.9775%" y="959.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="38.7666%" y="933" width="0.0187%" height="15" fill="rgb(251,117,11)" fg:x="45636" fg:w="22"/><text x="39.0166%" y="943.50"></text></g><g><title>[[ext4]] (71 samples, 0.06%)</title><rect x="38.7266%" y="981" width="0.0603%" height="15" fill="rgb(216,223,23)" fg:x="45589" fg:w="71"/><text x="38.9766%" y="991.50"></text></g><g><title>[[ext4]] (71 samples, 0.06%)</title><rect x="38.7266%" y="965" width="0.0603%" height="15" fill="rgb(251,54,12)" fg:x="45589" fg:w="71"/><text x="38.9766%" y="975.50"></text></g><g><title>node::BlockManager::FlushBlockFile (351 samples, 0.30%)</title><rect x="38.4964%" y="1189" width="0.2982%" height="15" fill="rgb(254,176,54)" fg:x="45318" fg:w="351"/><text x="38.7464%" y="1199.50"></text></g><g><title>node::BlockManager::FlushUndoFile (85 samples, 0.07%)</title><rect x="38.7224%" y="1173" width="0.0722%" height="15" fill="rgb(210,32,8)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1183.50"></text></g><g><title>FlatFileSeq::Flush (85 samples, 0.07%)</title><rect x="38.7224%" y="1157" width="0.0722%" height="15" fill="rgb(235,52,38)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1167.50"></text></g><g><title>FileCommit (85 samples, 0.07%)</title><rect x="38.7224%" y="1141" width="0.0722%" height="15" fill="rgb(231,4,44)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1151.50"></text></g><g><title>fdatasync (85 samples, 0.07%)</title><rect x="38.7224%" y="1125" width="0.0722%" height="15" fill="rgb(249,2,32)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1135.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="38.7224%" y="1109" width="0.0722%" height="15" fill="rgb(224,65,26)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1119.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="38.7224%" y="1093" width="0.0722%" height="15" fill="rgb(250,73,40)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1103.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="38.7224%" y="1077" width="0.0722%" height="15" fill="rgb(253,177,16)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1087.50"></text></g><g><title>[[ext4]] (85 samples, 0.07%)</title><rect x="38.7224%" y="1061" width="0.0722%" height="15" fill="rgb(217,32,34)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1071.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="38.7224%" y="1045" width="0.0722%" height="15" fill="rgb(212,7,10)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1055.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="38.7224%" y="1029" width="0.0722%" height="15" fill="rgb(245,89,8)" fg:x="45584" fg:w="85"/><text x="38.9724%" y="1039.50"></text></g><g><title>[unknown] (84 samples, 0.07%)</title><rect x="38.7232%" y="1013" width="0.0714%" height="15" fill="rgb(237,16,53)" fg:x="45585" fg:w="84"/><text x="38.9732%" y="1023.50"></text></g><g><title>[unknown] (81 samples, 0.07%)</title><rect x="38.7258%" y="997" width="0.0688%" height="15" fill="rgb(250,204,30)" fg:x="45588" fg:w="81"/><text x="38.9758%" y="1007.50"></text></g><g><title>node::BlockManager::FindNextBlockPos (359 samples, 0.30%)</title><rect x="38.4905%" y="1205" width="0.3050%" height="15" fill="rgb(208,77,27)" fg:x="45311" fg:w="359"/><text x="38.7405%" y="1215.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (43 samples, 0.04%)</title><rect x="38.8141%" y="1045" width="0.0365%" height="15" fill="rgb(250,204,28)" fg:x="45692" fg:w="43"/><text x="39.0641%" y="1055.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (43 samples, 0.04%)</title><rect x="38.8141%" y="1029" width="0.0365%" height="15" fill="rgb(244,63,21)" fg:x="45692" fg:w="43"/><text x="39.0641%" y="1039.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (43 samples, 0.04%)</title><rect x="38.8141%" y="1013" width="0.0365%" height="15" fill="rgb(236,85,44)" fg:x="45692" fg:w="43"/><text x="39.0641%" y="1023.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (43 samples, 0.04%)</title><rect x="38.8141%" y="997" width="0.0365%" height="15" fill="rgb(215,98,4)" fg:x="45692" fg:w="43"/><text x="39.0641%" y="1007.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (43 samples, 0.04%)</title><rect x="38.8141%" y="981" width="0.0365%" height="15" fill="rgb(235,38,11)" fg:x="45692" fg:w="43"/><text x="39.0641%" y="991.50"></text></g><g><title>AutoFile::write (159 samples, 0.14%)</title><rect x="38.7954%" y="1061" width="0.1351%" height="15" fill="rgb(254,186,25)" fg:x="45670" fg:w="159"/><text x="39.0454%" y="1071.50"></text></g><g><title>util::Xor (93 samples, 0.08%)</title><rect x="38.8515%" y="1045" width="0.0790%" height="15" fill="rgb(225,55,31)" fg:x="45736" fg:w="93"/><text x="39.1015%" y="1055.50"></text></g><g><title>std::operator^= (26 samples, 0.02%)</title><rect x="38.9084%" y="1029" width="0.0221%" height="15" fill="rgb(211,15,21)" fg:x="45803" fg:w="26"/><text x="39.1584%" y="1039.50"></text></g><g><title>std::operator^ (26 samples, 0.02%)</title><rect x="38.9084%" y="1013" width="0.0221%" height="15" fill="rgb(215,187,41)" fg:x="45803" fg:w="26"/><text x="39.1584%" y="1023.50"></text></g><g><title>[[ext4]] (16 samples, 0.01%)</title><rect x="38.9602%" y="453" width="0.0136%" height="15" fill="rgb(248,69,32)" fg:x="45864" fg:w="16"/><text x="39.2102%" y="463.50"></text></g><g><title>[[ext4]] (17 samples, 0.01%)</title><rect x="38.9602%" y="485" width="0.0144%" height="15" fill="rgb(252,102,52)" fg:x="45864" fg:w="17"/><text x="39.2102%" y="495.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="38.9602%" y="469" width="0.0144%" height="15" fill="rgb(253,140,32)" fg:x="45864" fg:w="17"/><text x="39.2102%" y="479.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (22 samples, 0.02%)</title><rect x="38.9577%" y="613" width="0.0187%" height="15" fill="rgb(216,56,42)" fg:x="45861" fg:w="22"/><text x="39.2077%" y="623.50"></text></g><g><title>new_do_write (22 samples, 0.02%)</title><rect x="38.9577%" y="597" width="0.0187%" height="15" fill="rgb(216,184,14)" fg:x="45861" fg:w="22"/><text x="39.2077%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (22 samples, 0.02%)</title><rect x="38.9577%" y="581" width="0.0187%" height="15" fill="rgb(237,187,27)" fg:x="45861" fg:w="22"/><text x="39.2077%" y="591.50"></text></g><g><title>__GI___libc_write (22 samples, 0.02%)</title><rect x="38.9577%" y="565" width="0.0187%" height="15" fill="rgb(219,65,3)" fg:x="45861" fg:w="22"/><text x="39.2077%" y="575.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="38.9577%" y="549" width="0.0187%" height="15" fill="rgb(245,83,25)" fg:x="45861" fg:w="22"/><text x="39.2077%" y="559.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="38.9577%" y="533" width="0.0187%" height="15" fill="rgb(214,205,45)" fg:x="45861" fg:w="22"/><text x="39.2077%" y="543.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="38.9577%" y="517" width="0.0187%" height="15" fill="rgb(241,20,18)" fg:x="45861" fg:w="22"/><text x="39.2077%" y="527.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="38.9585%" y="501" width="0.0178%" height="15" fill="rgb(232,163,23)" fg:x="45862" fg:w="21"/><text x="39.2085%" y="511.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (24 samples, 0.02%)</title><rect x="38.9577%" y="629" width="0.0204%" height="15" fill="rgb(214,5,46)" fg:x="45861" fg:w="24"/><text x="39.2077%" y="639.50"></text></g><g><title>_IO_fwrite (49 samples, 0.04%)</title><rect x="38.9382%" y="645" width="0.0416%" height="15" fill="rgb(229,78,17)" fg:x="45838" fg:w="49"/><text x="39.1882%" y="655.50"></text></g><g><title>AutoFile::write (52 samples, 0.04%)</title><rect x="38.9365%" y="661" width="0.0442%" height="15" fill="rgb(248,89,10)" fg:x="45836" fg:w="52"/><text x="39.1865%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.05%)</title><rect x="38.9365%" y="709" width="0.0459%" height="15" fill="rgb(248,54,15)" fg:x="45836" fg:w="54"/><text x="39.1865%" y="719.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.05%)</title><rect x="38.9365%" y="693" width="0.0459%" height="15" fill="rgb(223,116,6)" fg:x="45836" fg:w="54"/><text x="39.1865%" y="703.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (54 samples, 0.05%)</title><rect x="38.9365%" y="677" width="0.0459%" height="15" fill="rgb(205,125,38)" fg:x="45836" fg:w="54"/><text x="39.1865%" y="687.50"></text></g><g><title>[[ext4]] (15 samples, 0.01%)</title><rect x="39.0019%" y="357" width="0.0127%" height="15" fill="rgb(251,78,38)" fg:x="45913" fg:w="15"/><text x="39.2519%" y="367.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="39.0036%" y="341" width="0.0110%" height="15" fill="rgb(253,78,28)" fg:x="45915" fg:w="13"/><text x="39.2536%" y="351.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="39.0036%" y="325" width="0.0110%" height="15" fill="rgb(209,120,3)" fg:x="45915" fg:w="13"/><text x="39.2536%" y="335.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (20 samples, 0.02%)</title><rect x="39.0002%" y="517" width="0.0170%" height="15" fill="rgb(238,229,9)" fg:x="45911" fg:w="20"/><text x="39.2502%" y="527.50"></text></g><g><title>new_do_write (20 samples, 0.02%)</title><rect x="39.0002%" y="501" width="0.0170%" height="15" fill="rgb(253,159,18)" fg:x="45911" fg:w="20"/><text x="39.2502%" y="511.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (20 samples, 0.02%)</title><rect x="39.0002%" y="485" width="0.0170%" height="15" fill="rgb(244,42,34)" fg:x="45911" fg:w="20"/><text x="39.2502%" y="495.50"></text></g><g><title>__GI___libc_write (20 samples, 0.02%)</title><rect x="39.0002%" y="469" width="0.0170%" height="15" fill="rgb(224,8,7)" fg:x="45911" fg:w="20"/><text x="39.2502%" y="479.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="39.0002%" y="453" width="0.0170%" height="15" fill="rgb(210,201,45)" fg:x="45911" fg:w="20"/><text x="39.2502%" y="463.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="39.0002%" y="437" width="0.0170%" height="15" fill="rgb(252,185,21)" fg:x="45911" fg:w="20"/><text x="39.2502%" y="447.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="39.0002%" y="421" width="0.0170%" height="15" fill="rgb(223,131,1)" fg:x="45911" fg:w="20"/><text x="39.2502%" y="431.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="39.0010%" y="405" width="0.0161%" height="15" fill="rgb(245,141,16)" fg:x="45912" fg:w="19"/><text x="39.2510%" y="415.50"></text></g><g><title>[[ext4]] (19 samples, 0.02%)</title><rect x="39.0010%" y="389" width="0.0161%" height="15" fill="rgb(229,55,45)" fg:x="45912" fg:w="19"/><text x="39.2510%" y="399.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="39.0010%" y="373" width="0.0161%" height="15" fill="rgb(208,92,15)" fg:x="45912" fg:w="19"/><text x="39.2510%" y="383.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (25 samples, 0.02%)</title><rect x="39.0002%" y="533" width="0.0212%" height="15" fill="rgb(234,185,47)" fg:x="45911" fg:w="25"/><text x="39.2502%" y="543.50"></text></g><g><title>_IO_fwrite (47 samples, 0.04%)</title><rect x="38.9823%" y="549" width="0.0399%" height="15" fill="rgb(253,104,50)" fg:x="45890" fg:w="47"/><text x="39.2323%" y="559.50"></text></g><g><title>AutoFile::write (50 samples, 0.04%)</title><rect x="38.9823%" y="565" width="0.0425%" height="15" fill="rgb(205,70,7)" fg:x="45890" fg:w="50"/><text x="39.2323%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (51 samples, 0.04%)</title><rect x="38.9823%" y="613" width="0.0433%" height="15" fill="rgb(240,178,43)" fg:x="45890" fg:w="51"/><text x="39.2323%" y="623.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (51 samples, 0.04%)</title><rect x="38.9823%" y="597" width="0.0433%" height="15" fill="rgb(214,112,2)" fg:x="45890" fg:w="51"/><text x="39.2323%" y="607.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (51 samples, 0.04%)</title><rect x="38.9823%" y="581" width="0.0433%" height="15" fill="rgb(206,46,17)" fg:x="45890" fg:w="51"/><text x="39.2323%" y="591.50"></text></g><g><title>[[ext4]] (25 samples, 0.02%)</title><rect x="39.0528%" y="293" width="0.0212%" height="15" fill="rgb(225,220,16)" fg:x="45973" fg:w="25"/><text x="39.3028%" y="303.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="39.0545%" y="277" width="0.0195%" height="15" fill="rgb(238,65,40)" fg:x="45975" fg:w="23"/><text x="39.3045%" y="287.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="39.0562%" y="261" width="0.0178%" height="15" fill="rgb(230,151,21)" fg:x="45977" fg:w="21"/><text x="39.3062%" y="271.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="39.0588%" y="245" width="0.0153%" height="15" fill="rgb(218,58,49)" fg:x="45980" fg:w="18"/><text x="39.3088%" y="255.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="39.0596%" y="229" width="0.0144%" height="15" fill="rgb(219,179,14)" fg:x="45981" fg:w="17"/><text x="39.3096%" y="239.50"></text></g><g><title>[[ext4]] (136 samples, 0.12%)</title><rect x="39.0494%" y="309" width="0.1155%" height="15" fill="rgb(223,72,1)" fg:x="45969" fg:w="136"/><text x="39.2994%" y="319.50"></text></g><g><title>[unknown] (107 samples, 0.09%)</title><rect x="39.0741%" y="293" width="0.0909%" height="15" fill="rgb(238,126,10)" fg:x="45998" fg:w="107"/><text x="39.3241%" y="303.50"></text></g><g><title>[unknown] (105 samples, 0.09%)</title><rect x="39.0758%" y="277" width="0.0892%" height="15" fill="rgb(224,206,38)" fg:x="46000" fg:w="105"/><text x="39.3258%" y="287.50"></text></g><g><title>[unknown] (80 samples, 0.07%)</title><rect x="39.0970%" y="261" width="0.0680%" height="15" fill="rgb(212,201,54)" fg:x="46025" fg:w="80"/><text x="39.3470%" y="271.50"></text></g><g><title>[unknown] (58 samples, 0.05%)</title><rect x="39.1157%" y="245" width="0.0493%" height="15" fill="rgb(218,154,48)" fg:x="46047" fg:w="58"/><text x="39.3657%" y="255.50"></text></g><g><title>[unknown] (42 samples, 0.04%)</title><rect x="39.1293%" y="229" width="0.0357%" height="15" fill="rgb(232,93,24)" fg:x="46063" fg:w="42"/><text x="39.3793%" y="239.50"></text></g><g><title>[[ext4]] (167 samples, 0.14%)</title><rect x="39.0435%" y="341" width="0.1419%" height="15" fill="rgb(245,30,21)" fg:x="45962" fg:w="167"/><text x="39.2935%" y="351.50"></text></g><g><title>[unknown] (162 samples, 0.14%)</title><rect x="39.0477%" y="325" width="0.1376%" height="15" fill="rgb(242,148,29)" fg:x="45967" fg:w="162"/><text x="39.2977%" y="335.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="39.1650%" y="309" width="0.0204%" height="15" fill="rgb(244,153,54)" fg:x="46105" fg:w="24"/><text x="39.4150%" y="319.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="39.1709%" y="293" width="0.0144%" height="15" fill="rgb(252,87,22)" fg:x="46112" fg:w="17"/><text x="39.4209%" y="303.50"></text></g><g><title>_IO_fwrite (188 samples, 0.16%)</title><rect x="39.0333%" y="501" width="0.1597%" height="15" fill="rgb(210,51,29)" fg:x="45950" fg:w="188"/><text x="39.2833%" y="511.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (186 samples, 0.16%)</title><rect x="39.0350%" y="485" width="0.1580%" height="15" fill="rgb(242,136,47)" fg:x="45952" fg:w="186"/><text x="39.2850%" y="495.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (185 samples, 0.16%)</title><rect x="39.0358%" y="469" width="0.1572%" height="15" fill="rgb(238,68,4)" fg:x="45953" fg:w="185"/><text x="39.2858%" y="479.50"></text></g><g><title>new_do_write (184 samples, 0.16%)</title><rect x="39.0367%" y="453" width="0.1563%" height="15" fill="rgb(242,161,30)" fg:x="45954" fg:w="184"/><text x="39.2867%" y="463.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (184 samples, 0.16%)</title><rect x="39.0367%" y="437" width="0.1563%" height="15" fill="rgb(218,58,44)" fg:x="45954" fg:w="184"/><text x="39.2867%" y="447.50"></text></g><g><title>__GI___libc_write (184 samples, 0.16%)</title><rect x="39.0367%" y="421" width="0.1563%" height="15" fill="rgb(252,125,32)" fg:x="45954" fg:w="184"/><text x="39.2867%" y="431.50"></text></g><g><title>[unknown] (184 samples, 0.16%)</title><rect x="39.0367%" y="405" width="0.1563%" height="15" fill="rgb(219,178,0)" fg:x="45954" fg:w="184"/><text x="39.2867%" y="415.50"></text></g><g><title>[unknown] (183 samples, 0.16%)</title><rect x="39.0375%" y="389" width="0.1555%" height="15" fill="rgb(213,152,7)" fg:x="45955" fg:w="183"/><text x="39.2875%" y="399.50"></text></g><g><title>[unknown] (182 samples, 0.15%)</title><rect x="39.0384%" y="373" width="0.1546%" height="15" fill="rgb(249,109,34)" fg:x="45956" fg:w="182"/><text x="39.2884%" y="383.50"></text></g><g><title>[unknown] (181 samples, 0.15%)</title><rect x="39.0392%" y="357" width="0.1538%" height="15" fill="rgb(232,96,21)" fg:x="45957" fg:w="181"/><text x="39.2892%" y="367.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (17 samples, 0.01%)</title><rect x="39.1930%" y="501" width="0.0144%" height="15" fill="rgb(228,27,39)" fg:x="46138" fg:w="17"/><text x="39.4430%" y="511.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (17 samples, 0.01%)</title><rect x="39.1930%" y="485" width="0.0144%" height="15" fill="rgb(211,182,52)" fg:x="46138" fg:w="17"/><text x="39.4430%" y="495.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (17 samples, 0.01%)</title><rect x="39.1930%" y="469" width="0.0144%" height="15" fill="rgb(234,178,38)" fg:x="46138" fg:w="17"/><text x="39.4430%" y="479.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (17 samples, 0.01%)</title><rect x="39.1930%" y="453" width="0.0144%" height="15" fill="rgb(221,111,3)" fg:x="46138" fg:w="17"/><text x="39.4430%" y="463.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (17 samples, 0.01%)</title><rect x="39.1930%" y="437" width="0.0144%" height="15" fill="rgb(228,175,21)" fg:x="46138" fg:w="17"/><text x="39.4430%" y="447.50"></text></g><g><title>AutoFile::write (275 samples, 0.23%)</title><rect x="39.0257%" y="517" width="0.2336%" height="15" fill="rgb(228,174,43)" fg:x="45941" fg:w="275"/><text x="39.2757%" y="527.50"></text></g><g><title>util::Xor (61 samples, 0.05%)</title><rect x="39.2074%" y="501" width="0.0518%" height="15" fill="rgb(211,191,0)" fg:x="46155" fg:w="61"/><text x="39.4574%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (330 samples, 0.28%)</title><rect x="38.9823%" y="709" width="0.2803%" height="15" fill="rgb(253,117,3)" fg:x="45890" fg:w="330"/><text x="39.2323%" y="719.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (330 samples, 0.28%)</title><rect x="38.9823%" y="693" width="0.2803%" height="15" fill="rgb(241,127,19)" fg:x="45890" fg:w="330"/><text x="39.2323%" y="703.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (330 samples, 0.28%)</title><rect x="38.9823%" y="677" width="0.2803%" height="15" fill="rgb(218,103,12)" fg:x="45890" fg:w="330"/><text x="39.2323%" y="687.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (330 samples, 0.28%)</title><rect x="38.9823%" y="661" width="0.2803%" height="15" fill="rgb(236,214,43)" fg:x="45890" fg:w="330"/><text x="39.2323%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (330 samples, 0.28%)</title><rect x="38.9823%" y="645" width="0.2803%" height="15" fill="rgb(244,144,19)" fg:x="45890" fg:w="330"/><text x="39.2323%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (330 samples, 0.28%)</title><rect x="38.9823%" y="629" width="0.2803%" height="15" fill="rgb(246,188,10)" fg:x="45890" fg:w="330"/><text x="39.2323%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (279 samples, 0.24%)</title><rect x="39.0257%" y="613" width="0.2370%" height="15" fill="rgb(212,193,33)" fg:x="45941" fg:w="279"/><text x="39.2757%" y="623.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (279 samples, 0.24%)</title><rect x="39.0257%" y="597" width="0.2370%" height="15" fill="rgb(241,51,29)" fg:x="45941" fg:w="279"/><text x="39.2757%" y="607.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (279 samples, 0.24%)</title><rect x="39.0257%" y="581" width="0.2370%" height="15" fill="rgb(211,58,19)" fg:x="45941" fg:w="279"/><text x="39.2757%" y="591.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (279 samples, 0.24%)</title><rect x="39.0257%" y="565" width="0.2370%" height="15" fill="rgb(229,111,26)" fg:x="45941" fg:w="279"/><text x="39.2757%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (279 samples, 0.24%)</title><rect x="39.0257%" y="549" width="0.2370%" height="15" fill="rgb(213,115,40)" fg:x="45941" fg:w="279"/><text x="39.2757%" y="559.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (279 samples, 0.24%)</title><rect x="39.0257%" y="533" width="0.2370%" height="15" fill="rgb(209,56,44)" fg:x="45941" fg:w="279"/><text x="39.2757%" y="543.50"></text></g><g><title>[[ext4]] (37 samples, 0.03%)</title><rect x="39.2822%" y="373" width="0.0314%" height="15" fill="rgb(230,108,32)" fg:x="46243" fg:w="37"/><text x="39.5322%" y="383.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="39.2907%" y="357" width="0.0229%" height="15" fill="rgb(216,165,31)" fg:x="46253" fg:w="27"/><text x="39.5407%" y="367.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="39.2932%" y="341" width="0.0204%" height="15" fill="rgb(218,122,21)" fg:x="46256" fg:w="24"/><text x="39.5432%" y="351.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="39.2966%" y="325" width="0.0170%" height="15" fill="rgb(223,224,47)" fg:x="46260" fg:w="20"/><text x="39.5466%" y="335.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="39.3000%" y="309" width="0.0136%" height="15" fill="rgb(238,102,44)" fg:x="46264" fg:w="16"/><text x="39.5500%" y="319.50"></text></g><g><title>[[ext4]] (52 samples, 0.04%)</title><rect x="39.2771%" y="405" width="0.0442%" height="15" fill="rgb(236,46,40)" fg:x="46237" fg:w="52"/><text x="39.5271%" y="415.50"></text></g><g><title>[unknown] (50 samples, 0.04%)</title><rect x="39.2788%" y="389" width="0.0425%" height="15" fill="rgb(247,202,50)" fg:x="46239" fg:w="50"/><text x="39.5288%" y="399.50"></text></g><g><title>__GI___libc_write (67 samples, 0.06%)</title><rect x="39.2712%" y="485" width="0.0569%" height="15" fill="rgb(209,99,20)" fg:x="46230" fg:w="67"/><text x="39.5212%" y="495.50"></text></g><g><title>[unknown] (67 samples, 0.06%)</title><rect x="39.2712%" y="469" width="0.0569%" height="15" fill="rgb(252,27,34)" fg:x="46230" fg:w="67"/><text x="39.5212%" y="479.50"></text></g><g><title>[unknown] (66 samples, 0.06%)</title><rect x="39.2720%" y="453" width="0.0561%" height="15" fill="rgb(215,206,23)" fg:x="46231" fg:w="66"/><text x="39.5220%" y="463.50"></text></g><g><title>[unknown] (66 samples, 0.06%)</title><rect x="39.2720%" y="437" width="0.0561%" height="15" fill="rgb(212,135,36)" fg:x="46231" fg:w="66"/><text x="39.5220%" y="447.50"></text></g><g><title>[unknown] (66 samples, 0.06%)</title><rect x="39.2720%" y="421" width="0.0561%" height="15" fill="rgb(240,189,1)" fg:x="46231" fg:w="66"/><text x="39.5220%" y="431.50"></text></g><g><title>_IO_fwrite (74 samples, 0.06%)</title><rect x="39.2661%" y="565" width="0.0629%" height="15" fill="rgb(242,56,20)" fg:x="46224" fg:w="74"/><text x="39.5161%" y="575.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (71 samples, 0.06%)</title><rect x="39.2686%" y="549" width="0.0603%" height="15" fill="rgb(247,132,33)" fg:x="46227" fg:w="71"/><text x="39.5186%" y="559.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (70 samples, 0.06%)</title><rect x="39.2695%" y="533" width="0.0595%" height="15" fill="rgb(208,149,11)" fg:x="46228" fg:w="70"/><text x="39.5195%" y="543.50"></text></g><g><title>new_do_write (68 samples, 0.06%)</title><rect x="39.2712%" y="517" width="0.0578%" height="15" fill="rgb(211,33,11)" fg:x="46230" fg:w="68"/><text x="39.5212%" y="527.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (68 samples, 0.06%)</title><rect x="39.2712%" y="501" width="0.0578%" height="15" fill="rgb(221,29,38)" fg:x="46230" fg:w="68"/><text x="39.5212%" y="511.50"></text></g><g><title>AutoFile::write (129 samples, 0.11%)</title><rect x="39.2644%" y="581" width="0.1096%" height="15" fill="rgb(206,182,49)" fg:x="46222" fg:w="129"/><text x="39.5144%" y="591.50"></text></g><g><title>util::Xor (46 samples, 0.04%)</title><rect x="39.3349%" y="565" width="0.0391%" height="15" fill="rgb(216,140,1)" fg:x="46305" fg:w="46"/><text x="39.5849%" y="575.50"></text></g><g><title>std::operator^= (13 samples, 0.01%)</title><rect x="39.3629%" y="549" width="0.0110%" height="15" fill="rgb(232,57,40)" fg:x="46338" fg:w="13"/><text x="39.6129%" y="559.50"></text></g><g><title>std::operator^ (13 samples, 0.01%)</title><rect x="39.3629%" y="533" width="0.0110%" height="15" fill="rgb(224,186,18)" fg:x="46338" fg:w="13"/><text x="39.6129%" y="543.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (130 samples, 0.11%)</title><rect x="39.2644%" y="597" width="0.1104%" height="15" fill="rgb(215,121,11)" fg:x="46222" fg:w="130"/><text x="39.5144%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (561 samples, 0.48%)</title><rect x="38.9365%" y="821" width="0.4766%" height="15" fill="rgb(245,147,10)" fg:x="45836" fg:w="561"/><text x="39.1865%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (561 samples, 0.48%)</title><rect x="38.9365%" y="805" width="0.4766%" height="15" fill="rgb(238,153,13)" fg:x="45836" fg:w="561"/><text x="39.1865%" y="815.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (561 samples, 0.48%)</title><rect x="38.9365%" y="789" width="0.4766%" height="15" fill="rgb(233,108,0)" fg:x="45836" fg:w="561"/><text x="39.1865%" y="799.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (561 samples, 0.48%)</title><rect x="38.9365%" y="773" width="0.4766%" height="15" fill="rgb(212,157,17)" fg:x="45836" fg:w="561"/><text x="39.1865%" y="783.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (561 samples, 0.48%)</title><rect x="38.9365%" y="757" width="0.4766%" height="15" fill="rgb(225,213,38)" fg:x="45836" fg:w="561"/><text x="39.1865%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (561 samples, 0.48%)</title><rect x="38.9365%" y="741" width="0.4766%" height="15" fill="rgb(248,16,11)" fg:x="45836" fg:w="561"/><text x="39.1865%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (561 samples, 0.48%)</title><rect x="38.9365%" y="725" width="0.4766%" height="15" fill="rgb(241,33,4)" fg:x="45836" fg:w="561"/><text x="39.1865%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (177 samples, 0.15%)</title><rect x="39.2627%" y="709" width="0.1504%" height="15" fill="rgb(222,26,43)" fg:x="46220" fg:w="177"/><text x="39.5127%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (177 samples, 0.15%)</title><rect x="39.2627%" y="693" width="0.1504%" height="15" fill="rgb(243,29,36)" fg:x="46220" fg:w="177"/><text x="39.5127%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (177 samples, 0.15%)</title><rect x="39.2627%" y="677" width="0.1504%" height="15" fill="rgb(241,9,27)" fg:x="46220" fg:w="177"/><text x="39.5127%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (177 samples, 0.15%)</title><rect x="39.2627%" y="661" width="0.1504%" height="15" fill="rgb(205,117,26)" fg:x="46220" fg:w="177"/><text x="39.5127%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (177 samples, 0.15%)</title><rect x="39.2627%" y="645" width="0.1504%" height="15" fill="rgb(209,80,39)" fg:x="46220" fg:w="177"/><text x="39.5127%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (177 samples, 0.15%)</title><rect x="39.2627%" y="629" width="0.1504%" height="15" fill="rgb(239,155,6)" fg:x="46220" fg:w="177"/><text x="39.5127%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (177 samples, 0.15%)</title><rect x="39.2627%" y="613" width="0.1504%" height="15" fill="rgb(212,104,12)" fg:x="46220" fg:w="177"/><text x="39.5127%" y="623.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (45 samples, 0.04%)</title><rect x="39.3748%" y="597" width="0.0382%" height="15" fill="rgb(234,204,3)" fg:x="46352" fg:w="45"/><text x="39.6248%" y="607.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.04%)</title><rect x="39.3756%" y="581" width="0.0374%" height="15" fill="rgb(251,218,7)" fg:x="46353" fg:w="44"/><text x="39.6256%" y="591.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (44 samples, 0.04%)</title><rect x="39.3756%" y="565" width="0.0374%" height="15" fill="rgb(221,81,32)" fg:x="46353" fg:w="44"/><text x="39.6256%" y="575.50"></text></g><g><title>AutoFile::write (44 samples, 0.04%)</title><rect x="39.3756%" y="549" width="0.0374%" height="15" fill="rgb(214,152,26)" fg:x="46353" fg:w="44"/><text x="39.6256%" y="559.50"></text></g><g><title>_IO_fwrite (44 samples, 0.04%)</title><rect x="39.3756%" y="533" width="0.0374%" height="15" fill="rgb(223,22,3)" fg:x="46353" fg:w="44"/><text x="39.6256%" y="543.50"></text></g><g><title>_IO_fwrite (35 samples, 0.03%)</title><rect x="39.4156%" y="757" width="0.0297%" height="15" fill="rgb(207,174,7)" fg:x="46400" fg:w="35"/><text x="39.6656%" y="767.50"></text></g><g><title>AutoFile::write (39 samples, 0.03%)</title><rect x="39.4130%" y="773" width="0.0331%" height="15" fill="rgb(224,19,52)" fg:x="46397" fg:w="39"/><text x="39.6630%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (607 samples, 0.52%)</title><rect x="38.9314%" y="901" width="0.5156%" height="15" fill="rgb(228,24,14)" fg:x="45830" fg:w="607"/><text x="39.1814%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (607 samples, 0.52%)</title><rect x="38.9314%" y="885" width="0.5156%" height="15" fill="rgb(230,153,43)" fg:x="45830" fg:w="607"/><text x="39.1814%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (607 samples, 0.52%)</title><rect x="38.9314%" y="869" width="0.5156%" height="15" fill="rgb(231,106,12)" fg:x="45830" fg:w="607"/><text x="39.1814%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (607 samples, 0.52%)</title><rect x="38.9314%" y="853" width="0.5156%" height="15" fill="rgb(215,92,2)" fg:x="45830" fg:w="607"/><text x="39.1814%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (607 samples, 0.52%)</title><rect x="38.9314%" y="837" width="0.5156%" height="15" fill="rgb(249,143,25)" fg:x="45830" fg:w="607"/><text x="39.1814%" y="847.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.03%)</title><rect x="39.4130%" y="821" width="0.0340%" height="15" fill="rgb(252,7,35)" fg:x="46397" fg:w="40"/><text x="39.6630%" y="831.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.03%)</title><rect x="39.4130%" y="805" width="0.0340%" height="15" fill="rgb(216,69,40)" fg:x="46397" fg:w="40"/><text x="39.6630%" y="815.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (40 samples, 0.03%)</title><rect x="39.4130%" y="789" width="0.0340%" height="15" fill="rgb(240,36,33)" fg:x="46397" fg:w="40"/><text x="39.6630%" y="799.50"></text></g><g><title>[[ext4]] (36 samples, 0.03%)</title><rect x="39.4716%" y="453" width="0.0306%" height="15" fill="rgb(231,128,14)" fg:x="46466" fg:w="36"/><text x="39.7216%" y="463.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="39.4810%" y="437" width="0.0212%" height="15" fill="rgb(245,143,14)" fg:x="46477" fg:w="25"/><text x="39.7310%" y="447.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="39.4835%" y="421" width="0.0187%" height="15" fill="rgb(222,130,28)" fg:x="46480" fg:w="22"/><text x="39.7335%" y="431.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="39.4886%" y="405" width="0.0136%" height="15" fill="rgb(212,10,48)" fg:x="46486" fg:w="16"/><text x="39.7386%" y="415.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="39.4903%" y="389" width="0.0119%" height="15" fill="rgb(254,118,45)" fg:x="46488" fg:w="14"/><text x="39.7403%" y="399.50"></text></g><g><title>[[ext4]] (41 samples, 0.03%)</title><rect x="39.4708%" y="485" width="0.0348%" height="15" fill="rgb(228,6,45)" fg:x="46465" fg:w="41"/><text x="39.7208%" y="495.50"></text></g><g><title>[unknown] (40 samples, 0.03%)</title><rect x="39.4716%" y="469" width="0.0340%" height="15" fill="rgb(241,18,35)" fg:x="46466" fg:w="40"/><text x="39.7216%" y="479.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (50 samples, 0.04%)</title><rect x="39.4648%" y="613" width="0.0425%" height="15" fill="rgb(227,214,53)" fg:x="46458" fg:w="50"/><text x="39.7148%" y="623.50"></text></g><g><title>new_do_write (48 samples, 0.04%)</title><rect x="39.4665%" y="597" width="0.0408%" height="15" fill="rgb(224,107,51)" fg:x="46460" fg:w="48"/><text x="39.7165%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (48 samples, 0.04%)</title><rect x="39.4665%" y="581" width="0.0408%" height="15" fill="rgb(248,60,28)" fg:x="46460" fg:w="48"/><text x="39.7165%" y="591.50"></text></g><g><title>__GI___libc_write (47 samples, 0.04%)</title><rect x="39.4674%" y="565" width="0.0399%" height="15" fill="rgb(249,101,23)" fg:x="46461" fg:w="47"/><text x="39.7174%" y="575.50"></text></g><g><title>[unknown] (47 samples, 0.04%)</title><rect x="39.4674%" y="549" width="0.0399%" height="15" fill="rgb(228,51,19)" fg:x="46461" fg:w="47"/><text x="39.7174%" y="559.50"></text></g><g><title>[unknown] (47 samples, 0.04%)</title><rect x="39.4674%" y="533" width="0.0399%" height="15" fill="rgb(213,20,6)" fg:x="46461" fg:w="47"/><text x="39.7174%" y="543.50"></text></g><g><title>[unknown] (47 samples, 0.04%)</title><rect x="39.4674%" y="517" width="0.0399%" height="15" fill="rgb(212,124,10)" fg:x="46461" fg:w="47"/><text x="39.7174%" y="527.50"></text></g><g><title>[unknown] (46 samples, 0.04%)</title><rect x="39.4682%" y="501" width="0.0391%" height="15" fill="rgb(248,3,40)" fg:x="46462" fg:w="46"/><text x="39.7182%" y="511.50"></text></g><g><title>_IO_fwrite (63 samples, 0.05%)</title><rect x="39.4631%" y="645" width="0.0535%" height="15" fill="rgb(223,178,23)" fg:x="46456" fg:w="63"/><text x="39.7131%" y="655.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (62 samples, 0.05%)</title><rect x="39.4640%" y="629" width="0.0527%" height="15" fill="rgb(240,132,45)" fg:x="46457" fg:w="62"/><text x="39.7140%" y="639.50"></text></g><g><title>AutoFile::write (92 samples, 0.08%)</title><rect x="39.4512%" y="661" width="0.0782%" height="15" fill="rgb(245,164,36)" fg:x="46442" fg:w="92"/><text x="39.7012%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (97 samples, 0.08%)</title><rect x="39.4504%" y="709" width="0.0824%" height="15" fill="rgb(231,188,53)" fg:x="46441" fg:w="97"/><text x="39.7004%" y="719.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (97 samples, 0.08%)</title><rect x="39.4504%" y="693" width="0.0824%" height="15" fill="rgb(237,198,39)" fg:x="46441" fg:w="97"/><text x="39.7004%" y="703.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (97 samples, 0.08%)</title><rect x="39.4504%" y="677" width="0.0824%" height="15" fill="rgb(223,120,35)" fg:x="46441" fg:w="97"/><text x="39.7004%" y="687.50"></text></g><g><title>[[ext4]] (30 samples, 0.03%)</title><rect x="39.5914%" y="357" width="0.0255%" height="15" fill="rgb(253,107,49)" fg:x="46607" fg:w="30"/><text x="39.8414%" y="367.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="39.5965%" y="341" width="0.0204%" height="15" fill="rgb(216,44,31)" fg:x="46613" fg:w="24"/><text x="39.8465%" y="351.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="39.6016%" y="325" width="0.0153%" height="15" fill="rgb(253,87,21)" fg:x="46619" fg:w="18"/><text x="39.8516%" y="335.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="39.6024%" y="309" width="0.0144%" height="15" fill="rgb(226,18,2)" fg:x="46620" fg:w="17"/><text x="39.8524%" y="319.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="39.6024%" y="293" width="0.0144%" height="15" fill="rgb(216,8,46)" fg:x="46620" fg:w="17"/><text x="39.8524%" y="303.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="39.6067%" y="277" width="0.0102%" height="15" fill="rgb(226,140,39)" fg:x="46625" fg:w="12"/><text x="39.8567%" y="287.50"></text></g><g><title>[[ext4]] (142 samples, 0.12%)</title><rect x="39.5863%" y="373" width="0.1206%" height="15" fill="rgb(221,194,54)" fg:x="46601" fg:w="142"/><text x="39.8363%" y="383.50"></text></g><g><title>[unknown] (106 samples, 0.09%)</title><rect x="39.6169%" y="357" width="0.0900%" height="15" fill="rgb(213,92,11)" fg:x="46637" fg:w="106"/><text x="39.8669%" y="367.50"></text></g><g><title>[unknown] (104 samples, 0.09%)</title><rect x="39.6186%" y="341" width="0.0883%" height="15" fill="rgb(229,162,46)" fg:x="46639" fg:w="104"/><text x="39.8686%" y="351.50"></text></g><g><title>[unknown] (88 samples, 0.07%)</title><rect x="39.6322%" y="325" width="0.0748%" height="15" fill="rgb(214,111,36)" fg:x="46655" fg:w="88"/><text x="39.8822%" y="335.50"></text></g><g><title>[unknown] (74 samples, 0.06%)</title><rect x="39.6441%" y="309" width="0.0629%" height="15" fill="rgb(207,6,21)" fg:x="46669" fg:w="74"/><text x="39.8941%" y="319.50"></text></g><g><title>[unknown] (44 samples, 0.04%)</title><rect x="39.6696%" y="293" width="0.0374%" height="15" fill="rgb(213,127,38)" fg:x="46699" fg:w="44"/><text x="39.9196%" y="303.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="39.6950%" y="277" width="0.0119%" height="15" fill="rgb(238,118,32)" fg:x="46729" fg:w="14"/><text x="39.9450%" y="287.50"></text></g><g><title>[[ext4]] (164 samples, 0.14%)</title><rect x="39.5829%" y="405" width="0.1393%" height="15" fill="rgb(240,139,39)" fg:x="46597" fg:w="164"/><text x="39.8329%" y="415.50"></text></g><g><title>[unknown] (163 samples, 0.14%)</title><rect x="39.5838%" y="389" width="0.1385%" height="15" fill="rgb(235,10,37)" fg:x="46598" fg:w="163"/><text x="39.8338%" y="399.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="39.7069%" y="373" width="0.0153%" height="15" fill="rgb(249,171,38)" fg:x="46743" fg:w="18"/><text x="39.9569%" y="383.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="39.7112%" y="357" width="0.0110%" height="15" fill="rgb(242,144,32)" fg:x="46748" fg:w="13"/><text x="39.9612%" y="367.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (190 samples, 0.16%)</title><rect x="39.5642%" y="533" width="0.1614%" height="15" fill="rgb(217,117,21)" fg:x="46575" fg:w="190"/><text x="39.8142%" y="543.50"></text></g><g><title>new_do_write (190 samples, 0.16%)</title><rect x="39.5642%" y="517" width="0.1614%" height="15" fill="rgb(249,87,1)" fg:x="46575" fg:w="190"/><text x="39.8142%" y="527.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (189 samples, 0.16%)</title><rect x="39.5651%" y="501" width="0.1606%" height="15" fill="rgb(248,196,48)" fg:x="46576" fg:w="189"/><text x="39.8151%" y="511.50"></text></g><g><title>__GI___libc_write (185 samples, 0.16%)</title><rect x="39.5685%" y="485" width="0.1572%" height="15" fill="rgb(251,206,33)" fg:x="46580" fg:w="185"/><text x="39.8185%" y="495.50"></text></g><g><title>[unknown] (185 samples, 0.16%)</title><rect x="39.5685%" y="469" width="0.1572%" height="15" fill="rgb(232,141,28)" fg:x="46580" fg:w="185"/><text x="39.8185%" y="479.50"></text></g><g><title>[unknown] (182 samples, 0.15%)</title><rect x="39.5710%" y="453" width="0.1546%" height="15" fill="rgb(209,167,14)" fg:x="46583" fg:w="182"/><text x="39.8210%" y="463.50"></text></g><g><title>[unknown] (182 samples, 0.15%)</title><rect x="39.5710%" y="437" width="0.1546%" height="15" fill="rgb(225,11,50)" fg:x="46583" fg:w="182"/><text x="39.8210%" y="447.50"></text></g><g><title>[unknown] (176 samples, 0.15%)</title><rect x="39.5761%" y="421" width="0.1495%" height="15" fill="rgb(209,50,20)" fg:x="46589" fg:w="176"/><text x="39.8261%" y="431.50"></text></g><g><title>_IO_fwrite (221 samples, 0.19%)</title><rect x="39.5413%" y="565" width="0.1877%" height="15" fill="rgb(212,17,46)" fg:x="46548" fg:w="221"/><text x="39.7913%" y="575.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (196 samples, 0.17%)</title><rect x="39.5625%" y="549" width="0.1665%" height="15" fill="rgb(216,101,39)" fg:x="46573" fg:w="196"/><text x="39.8125%" y="559.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (34 samples, 0.03%)</title><rect x="39.7290%" y="565" width="0.0289%" height="15" fill="rgb(212,228,48)" fg:x="46769" fg:w="34"/><text x="39.9790%" y="575.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (34 samples, 0.03%)</title><rect x="39.7290%" y="549" width="0.0289%" height="15" fill="rgb(250,6,50)" fg:x="46769" fg:w="34"/><text x="39.9790%" y="559.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (34 samples, 0.03%)</title><rect x="39.7290%" y="533" width="0.0289%" height="15" fill="rgb(250,160,48)" fg:x="46769" fg:w="34"/><text x="39.9790%" y="543.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (34 samples, 0.03%)</title><rect x="39.7290%" y="517" width="0.0289%" height="15" fill="rgb(244,216,33)" fg:x="46769" fg:w="34"/><text x="39.9790%" y="527.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (34 samples, 0.03%)</title><rect x="39.7290%" y="501" width="0.0289%" height="15" fill="rgb(207,157,5)" fg:x="46769" fg:w="34"/><text x="39.9790%" y="511.50"></text></g><g><title>AutoFile::write (300 samples, 0.25%)</title><rect x="39.5345%" y="581" width="0.2548%" height="15" fill="rgb(228,199,8)" fg:x="46540" fg:w="300"/><text x="39.7845%" y="591.50"></text></g><g><title>util::Xor (37 samples, 0.03%)</title><rect x="39.7579%" y="565" width="0.0314%" height="15" fill="rgb(227,80,20)" fg:x="46803" fg:w="37"/><text x="40.0079%" y="575.50"></text></g><g><title>std::operator^= (17 samples, 0.01%)</title><rect x="39.7749%" y="549" width="0.0144%" height="15" fill="rgb(222,9,33)" fg:x="46823" fg:w="17"/><text x="40.0249%" y="559.50"></text></g><g><title>std::operator^ (17 samples, 0.01%)</title><rect x="39.7749%" y="533" width="0.0144%" height="15" fill="rgb(239,44,28)" fg:x="46823" fg:w="17"/><text x="40.0249%" y="543.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (308 samples, 0.26%)</title><rect x="39.5345%" y="597" width="0.2616%" height="15" fill="rgb(249,187,43)" fg:x="46540" fg:w="308"/><text x="39.7845%" y="607.50"></text></g><g><title>_IO_fwrite (51 samples, 0.04%)</title><rect x="39.7961%" y="533" width="0.0433%" height="15" fill="rgb(216,141,28)" fg:x="46848" fg:w="51"/><text x="40.0461%" y="543.50"></text></g><g><title>AutoFile::write (52 samples, 0.04%)</title><rect x="39.7961%" y="549" width="0.0442%" height="15" fill="rgb(230,154,53)" fg:x="46848" fg:w="52"/><text x="40.0461%" y="559.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (467 samples, 0.40%)</title><rect x="39.4478%" y="821" width="0.3967%" height="15" fill="rgb(227,82,4)" fg:x="46438" fg:w="467"/><text x="39.6978%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (467 samples, 0.40%)</title><rect x="39.4478%" y="805" width="0.3967%" height="15" fill="rgb(220,107,16)" fg:x="46438" fg:w="467"/><text x="39.6978%" y="815.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (467 samples, 0.40%)</title><rect x="39.4478%" y="789" width="0.3967%" height="15" fill="rgb(207,187,2)" fg:x="46438" fg:w="467"/><text x="39.6978%" y="799.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (467 samples, 0.40%)</title><rect x="39.4478%" y="773" width="0.3967%" height="15" fill="rgb(210,162,52)" fg:x="46438" fg:w="467"/><text x="39.6978%" y="783.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (467 samples, 0.40%)</title><rect x="39.4478%" y="757" width="0.3967%" height="15" fill="rgb(217,216,49)" fg:x="46438" fg:w="467"/><text x="39.6978%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (467 samples, 0.40%)</title><rect x="39.4478%" y="741" width="0.3967%" height="15" fill="rgb(218,146,49)" fg:x="46438" fg:w="467"/><text x="39.6978%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (467 samples, 0.40%)</title><rect x="39.4478%" y="725" width="0.3967%" height="15" fill="rgb(216,55,40)" fg:x="46438" fg:w="467"/><text x="39.6978%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (367 samples, 0.31%)</title><rect x="39.5328%" y="709" width="0.3118%" height="15" fill="rgb(208,196,21)" fg:x="46538" fg:w="367"/><text x="39.7828%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (367 samples, 0.31%)</title><rect x="39.5328%" y="693" width="0.3118%" height="15" fill="rgb(242,117,42)" fg:x="46538" fg:w="367"/><text x="39.7828%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (367 samples, 0.31%)</title><rect x="39.5328%" y="677" width="0.3118%" height="15" fill="rgb(210,11,23)" fg:x="46538" fg:w="367"/><text x="39.7828%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (367 samples, 0.31%)</title><rect x="39.5328%" y="661" width="0.3118%" height="15" fill="rgb(217,110,2)" fg:x="46538" fg:w="367"/><text x="39.7828%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (367 samples, 0.31%)</title><rect x="39.5328%" y="645" width="0.3118%" height="15" fill="rgb(229,77,54)" fg:x="46538" fg:w="367"/><text x="39.7828%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (367 samples, 0.31%)</title><rect x="39.5328%" y="629" width="0.3118%" height="15" fill="rgb(218,53,16)" fg:x="46538" fg:w="367"/><text x="39.7828%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (367 samples, 0.31%)</title><rect x="39.5328%" y="613" width="0.3118%" height="15" fill="rgb(215,38,13)" fg:x="46538" fg:w="367"/><text x="39.7828%" y="623.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (57 samples, 0.05%)</title><rect x="39.7961%" y="597" width="0.0484%" height="15" fill="rgb(235,42,18)" fg:x="46848" fg:w="57"/><text x="40.0461%" y="607.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (57 samples, 0.05%)</title><rect x="39.7961%" y="581" width="0.0484%" height="15" fill="rgb(219,66,54)" fg:x="46848" fg:w="57"/><text x="40.0461%" y="591.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (57 samples, 0.05%)</title><rect x="39.7961%" y="565" width="0.0484%" height="15" fill="rgb(222,205,4)" fg:x="46848" fg:w="57"/><text x="40.0461%" y="575.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (498 samples, 0.42%)</title><rect x="39.4470%" y="901" width="0.4230%" height="15" fill="rgb(227,213,46)" fg:x="46437" fg:w="498"/><text x="39.6970%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (498 samples, 0.42%)</title><rect x="39.4470%" y="885" width="0.4230%" height="15" fill="rgb(250,145,42)" fg:x="46437" fg:w="498"/><text x="39.6970%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (498 samples, 0.42%)</title><rect x="39.4470%" y="869" width="0.4230%" height="15" fill="rgb(219,15,2)" fg:x="46437" fg:w="498"/><text x="39.6970%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (498 samples, 0.42%)</title><rect x="39.4470%" y="853" width="0.4230%" height="15" fill="rgb(231,181,52)" fg:x="46437" fg:w="498"/><text x="39.6970%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (498 samples, 0.42%)</title><rect x="39.4470%" y="837" width="0.4230%" height="15" fill="rgb(235,1,42)" fg:x="46437" fg:w="498"/><text x="39.6970%" y="847.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.03%)</title><rect x="39.8445%" y="821" width="0.0255%" height="15" fill="rgb(249,88,27)" fg:x="46905" fg:w="30"/><text x="40.0945%" y="831.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.03%)</title><rect x="39.8445%" y="805" width="0.0255%" height="15" fill="rgb(235,145,16)" fg:x="46905" fg:w="30"/><text x="40.0945%" y="815.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (30 samples, 0.03%)</title><rect x="39.8445%" y="789" width="0.0255%" height="15" fill="rgb(237,114,19)" fg:x="46905" fg:w="30"/><text x="40.0945%" y="799.50"></text></g><g><title>AutoFile::write (30 samples, 0.03%)</title><rect x="39.8445%" y="773" width="0.0255%" height="15" fill="rgb(238,51,50)" fg:x="46905" fg:w="30"/><text x="40.0945%" y="783.50"></text></g><g><title>_IO_fwrite (30 samples, 0.03%)</title><rect x="39.8445%" y="757" width="0.0255%" height="15" fill="rgb(205,194,25)" fg:x="46905" fg:w="30"/><text x="40.0945%" y="767.50"></text></g><g><title>[[ext4]] (15 samples, 0.01%)</title><rect x="39.9907%" y="533" width="0.0127%" height="15" fill="rgb(215,203,17)" fg:x="47077" fg:w="15"/><text x="40.2407%" y="543.50"></text></g><g><title>[[ext4]] (12 samples, 0.01%)</title><rect x="39.9932%" y="517" width="0.0102%" height="15" fill="rgb(233,112,49)" fg:x="47080" fg:w="12"/><text x="40.2432%" y="527.50"></text></g><g><title>[[ext4]] (82 samples, 0.07%)</title><rect x="39.9856%" y="549" width="0.0697%" height="15" fill="rgb(241,130,26)" fg:x="47071" fg:w="82"/><text x="40.2356%" y="559.50"></text></g><g><title>[unknown] (61 samples, 0.05%)</title><rect x="40.0034%" y="533" width="0.0518%" height="15" fill="rgb(252,223,19)" fg:x="47092" fg:w="61"/><text x="40.2534%" y="543.50"></text></g><g><title>[unknown] (54 samples, 0.05%)</title><rect x="40.0093%" y="517" width="0.0459%" height="15" fill="rgb(211,95,25)" fg:x="47099" fg:w="54"/><text x="40.2593%" y="527.50"></text></g><g><title>[unknown] (49 samples, 0.04%)</title><rect x="40.0136%" y="501" width="0.0416%" height="15" fill="rgb(251,182,27)" fg:x="47104" fg:w="49"/><text x="40.2636%" y="511.50"></text></g><g><title>[unknown] (44 samples, 0.04%)</title><rect x="40.0178%" y="485" width="0.0374%" height="15" fill="rgb(238,24,4)" fg:x="47109" fg:w="44"/><text x="40.2678%" y="495.50"></text></g><g><title>[unknown] (30 samples, 0.03%)</title><rect x="40.0297%" y="469" width="0.0255%" height="15" fill="rgb(224,220,25)" fg:x="47123" fg:w="30"/><text x="40.2797%" y="479.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="40.0442%" y="453" width="0.0110%" height="15" fill="rgb(239,133,26)" fg:x="47140" fg:w="13"/><text x="40.2942%" y="463.50"></text></g><g><title>[[ext4]] (394 samples, 0.33%)</title><rect x="39.9796%" y="565" width="0.3347%" height="15" fill="rgb(211,94,48)" fg:x="47064" fg:w="394"/><text x="40.2296%" y="575.50"></text></g><g><title>[unknown] (305 samples, 0.26%)</title><rect x="40.0552%" y="549" width="0.2591%" height="15" fill="rgb(239,87,6)" fg:x="47153" fg:w="305"/><text x="40.3052%" y="559.50"></text></g><g><title>[unknown] (289 samples, 0.25%)</title><rect x="40.0688%" y="533" width="0.2455%" height="15" fill="rgb(227,62,0)" fg:x="47169" fg:w="289"/><text x="40.3188%" y="543.50"></text></g><g><title>[unknown] (234 samples, 0.20%)</title><rect x="40.1155%" y="517" width="0.1988%" height="15" fill="rgb(211,226,4)" fg:x="47224" fg:w="234"/><text x="40.3655%" y="527.50"></text></g><g><title>[unknown] (189 samples, 0.16%)</title><rect x="40.1538%" y="501" width="0.1606%" height="15" fill="rgb(253,38,52)" fg:x="47269" fg:w="189"/><text x="40.4038%" y="511.50"></text></g><g><title>[unknown] (128 samples, 0.11%)</title><rect x="40.2056%" y="485" width="0.1087%" height="15" fill="rgb(229,126,40)" fg:x="47330" fg:w="128"/><text x="40.4556%" y="495.50"></text></g><g><title>[unknown] (46 samples, 0.04%)</title><rect x="40.2752%" y="469" width="0.0391%" height="15" fill="rgb(229,165,44)" fg:x="47412" fg:w="46"/><text x="40.5252%" y="479.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="40.3024%" y="453" width="0.0119%" height="15" fill="rgb(247,95,47)" fg:x="47444" fg:w="14"/><text x="40.5524%" y="463.50"></text></g><g><title>[[ext4]] (477 samples, 0.41%)</title><rect x="39.9558%" y="597" width="0.4052%" height="15" fill="rgb(216,140,30)" fg:x="47036" fg:w="477"/><text x="40.2058%" y="607.50"></text></g><g><title>[unknown] (461 samples, 0.39%)</title><rect x="39.9694%" y="581" width="0.3916%" height="15" fill="rgb(246,214,8)" fg:x="47052" fg:w="461"/><text x="40.2194%" y="591.50"></text></g><g><title>[unknown] (55 samples, 0.05%)</title><rect x="40.3143%" y="565" width="0.0467%" height="15" fill="rgb(227,224,15)" fg:x="47458" fg:w="55"/><text x="40.5643%" y="575.50"></text></g><g><title>[unknown] (33 samples, 0.03%)</title><rect x="40.3330%" y="549" width="0.0280%" height="15" fill="rgb(233,175,4)" fg:x="47480" fg:w="33"/><text x="40.5830%" y="559.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (559 samples, 0.47%)</title><rect x="39.9125%" y="725" width="0.4749%" height="15" fill="rgb(221,66,45)" fg:x="46985" fg:w="559"/><text x="40.1625%" y="735.50"></text></g><g><title>new_do_write (554 samples, 0.47%)</title><rect x="39.9168%" y="709" width="0.4706%" height="15" fill="rgb(221,178,18)" fg:x="46990" fg:w="554"/><text x="40.1668%" y="719.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (552 samples, 0.47%)</title><rect x="39.9185%" y="693" width="0.4689%" height="15" fill="rgb(213,81,29)" fg:x="46992" fg:w="552"/><text x="40.1685%" y="703.50"></text></g><g><title>__GI___libc_write (549 samples, 0.47%)</title><rect x="39.9210%" y="677" width="0.4664%" height="15" fill="rgb(220,89,49)" fg:x="46995" fg:w="549"/><text x="40.1710%" y="687.50"></text></g><g><title>[unknown] (548 samples, 0.47%)</title><rect x="39.9218%" y="661" width="0.4655%" height="15" fill="rgb(227,60,33)" fg:x="46996" fg:w="548"/><text x="40.1718%" y="671.50"></text></g><g><title>[unknown] (547 samples, 0.46%)</title><rect x="39.9227%" y="645" width="0.4647%" height="15" fill="rgb(205,113,12)" fg:x="46997" fg:w="547"/><text x="40.1727%" y="655.50"></text></g><g><title>[unknown] (545 samples, 0.46%)</title><rect x="39.9244%" y="629" width="0.4630%" height="15" fill="rgb(211,32,1)" fg:x="46999" fg:w="545"/><text x="40.1744%" y="639.50"></text></g><g><title>[unknown] (532 samples, 0.45%)</title><rect x="39.9354%" y="613" width="0.4519%" height="15" fill="rgb(246,2,12)" fg:x="47012" fg:w="532"/><text x="40.1854%" y="623.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="40.3610%" y="597" width="0.0263%" height="15" fill="rgb(243,37,27)" fg:x="47513" fg:w="31"/><text x="40.6110%" y="607.50"></text></g><g><title>_IO_fwrite (570 samples, 0.48%)</title><rect x="39.9066%" y="757" width="0.4842%" height="15" fill="rgb(248,211,31)" fg:x="46978" fg:w="570"/><text x="40.1566%" y="767.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (564 samples, 0.48%)</title><rect x="39.9117%" y="741" width="0.4791%" height="15" fill="rgb(242,146,47)" fg:x="46984" fg:w="564"/><text x="40.1617%" y="751.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (80 samples, 0.07%)</title><rect x="40.3908%" y="757" width="0.0680%" height="15" fill="rgb(206,70,20)" fg:x="47548" fg:w="80"/><text x="40.6408%" y="767.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (80 samples, 0.07%)</title><rect x="40.3908%" y="741" width="0.0680%" height="15" fill="rgb(215,10,51)" fg:x="47548" fg:w="80"/><text x="40.6408%" y="751.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (80 samples, 0.07%)</title><rect x="40.3908%" y="725" width="0.0680%" height="15" fill="rgb(243,178,53)" fg:x="47548" fg:w="80"/><text x="40.6408%" y="735.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (80 samples, 0.07%)</title><rect x="40.3908%" y="709" width="0.0680%" height="15" fill="rgb(233,221,20)" fg:x="47548" fg:w="80"/><text x="40.6408%" y="719.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (80 samples, 0.07%)</title><rect x="40.3908%" y="693" width="0.0680%" height="15" fill="rgb(218,95,35)" fg:x="47548" fg:w="80"/><text x="40.6408%" y="703.50"></text></g><g><title>AutoFile::write (955 samples, 0.81%)</title><rect x="39.8717%" y="773" width="0.8112%" height="15" fill="rgb(229,13,5)" fg:x="46937" fg:w="955"/><text x="40.1217%" y="783.50"></text></g><g><title>util::Xor (264 samples, 0.22%)</title><rect x="40.4587%" y="757" width="0.2243%" height="15" fill="rgb(252,164,30)" fg:x="47628" fg:w="264"/><text x="40.7087%" y="767.50"></text></g><g><title>std::operator^= (85 samples, 0.07%)</title><rect x="40.6108%" y="741" width="0.0722%" height="15" fill="rgb(232,68,36)" fg:x="47807" fg:w="85"/><text x="40.8608%" y="751.50"></text></g><g><title>std::operator^ (85 samples, 0.07%)</title><rect x="40.6108%" y="725" width="0.0722%" height="15" fill="rgb(219,59,54)" fg:x="47807" fg:w="85"/><text x="40.8608%" y="735.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (966 samples, 0.82%)</title><rect x="39.8717%" y="789" width="0.8206%" height="15" fill="rgb(250,92,33)" fg:x="46937" fg:w="966"/><text x="40.1217%" y="799.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (12 samples, 0.01%)</title><rect x="40.7322%" y="693" width="0.0102%" height="15" fill="rgb(229,162,54)" fg:x="47950" fg:w="12"/><text x="40.9822%" y="703.50"></text></g><g><title>new_do_write (12 samples, 0.01%)</title><rect x="40.7322%" y="677" width="0.0102%" height="15" fill="rgb(244,114,52)" fg:x="47950" fg:w="12"/><text x="40.9822%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (12 samples, 0.01%)</title><rect x="40.7322%" y="661" width="0.0102%" height="15" fill="rgb(212,211,43)" fg:x="47950" fg:w="12"/><text x="40.9822%" y="671.50"></text></g><g><title>__GI___libc_write (12 samples, 0.01%)</title><rect x="40.7322%" y="645" width="0.0102%" height="15" fill="rgb(226,147,8)" fg:x="47950" fg:w="12"/><text x="40.9822%" y="655.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="40.7322%" y="629" width="0.0102%" height="15" fill="rgb(226,23,13)" fg:x="47950" fg:w="12"/><text x="40.9822%" y="639.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="40.7322%" y="613" width="0.0102%" height="15" fill="rgb(240,63,4)" fg:x="47950" fg:w="12"/><text x="40.9822%" y="623.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="40.7322%" y="597" width="0.0102%" height="15" fill="rgb(221,1,32)" fg:x="47950" fg:w="12"/><text x="40.9822%" y="607.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="40.7322%" y="581" width="0.0102%" height="15" fill="rgb(242,117,10)" fg:x="47950" fg:w="12"/><text x="40.9822%" y="591.50"></text></g><g><title>_IO_fwrite (56 samples, 0.05%)</title><rect x="40.6957%" y="725" width="0.0476%" height="15" fill="rgb(249,172,44)" fg:x="47907" fg:w="56"/><text x="40.9457%" y="735.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (15 samples, 0.01%)</title><rect x="40.7305%" y="709" width="0.0127%" height="15" fill="rgb(244,46,45)" fg:x="47948" fg:w="15"/><text x="40.9805%" y="719.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1,028 samples, 0.87%)</title><rect x="39.8709%" y="821" width="0.8733%" height="15" fill="rgb(206,43,17)" fg:x="46936" fg:w="1028"/><text x="40.1209%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1,028 samples, 0.87%)</title><rect x="39.8709%" y="805" width="0.8733%" height="15" fill="rgb(239,218,39)" fg:x="46936" fg:w="1028"/><text x="40.1209%" y="815.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (61 samples, 0.05%)</title><rect x="40.6923%" y="789" width="0.0518%" height="15" fill="rgb(208,169,54)" fg:x="47903" fg:w="61"/><text x="40.9423%" y="799.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (61 samples, 0.05%)</title><rect x="40.6923%" y="773" width="0.0518%" height="15" fill="rgb(247,25,42)" fg:x="47903" fg:w="61"/><text x="40.9423%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (61 samples, 0.05%)</title><rect x="40.6923%" y="757" width="0.0518%" height="15" fill="rgb(226,23,31)" fg:x="47903" fg:w="61"/><text x="40.9423%" y="767.50"></text></g><g><title>AutoFile::write (61 samples, 0.05%)</title><rect x="40.6923%" y="741" width="0.0518%" height="15" fill="rgb(247,16,28)" fg:x="47903" fg:w="61"/><text x="40.9423%" y="751.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1,075 samples, 0.91%)</title><rect x="39.8700%" y="901" width="0.9132%" height="15" fill="rgb(231,147,38)" fg:x="46935" fg:w="1075"/><text x="40.1200%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1,075 samples, 0.91%)</title><rect x="39.8700%" y="885" width="0.9132%" height="15" fill="rgb(253,81,48)" fg:x="46935" fg:w="1075"/><text x="40.1200%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1,075 samples, 0.91%)</title><rect x="39.8700%" y="869" width="0.9132%" height="15" fill="rgb(249,222,43)" fg:x="46935" fg:w="1075"/><text x="40.1200%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1,075 samples, 0.91%)</title><rect x="39.8700%" y="853" width="0.9132%" height="15" fill="rgb(221,3,27)" fg:x="46935" fg:w="1075"/><text x="40.1200%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1,075 samples, 0.91%)</title><rect x="39.8700%" y="837" width="0.9132%" height="15" fill="rgb(228,180,5)" fg:x="46935" fg:w="1075"/><text x="40.1200%" y="847.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (46 samples, 0.04%)</title><rect x="40.7441%" y="821" width="0.0391%" height="15" fill="rgb(227,131,42)" fg:x="47964" fg:w="46"/><text x="40.9941%" y="831.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (46 samples, 0.04%)</title><rect x="40.7441%" y="805" width="0.0391%" height="15" fill="rgb(212,3,39)" fg:x="47964" fg:w="46"/><text x="40.9941%" y="815.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (46 samples, 0.04%)</title><rect x="40.7441%" y="789" width="0.0391%" height="15" fill="rgb(226,45,5)" fg:x="47964" fg:w="46"/><text x="40.9941%" y="799.50"></text></g><g><title>AutoFile::write (46 samples, 0.04%)</title><rect x="40.7441%" y="773" width="0.0391%" height="15" fill="rgb(215,167,45)" fg:x="47964" fg:w="46"/><text x="40.9941%" y="783.50"></text></g><g><title>_IO_fwrite (45 samples, 0.04%)</title><rect x="40.7450%" y="757" width="0.0382%" height="15" fill="rgb(250,218,53)" fg:x="47965" fg:w="45"/><text x="40.9950%" y="767.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (19 samples, 0.02%)</title><rect x="40.7832%" y="901" width="0.0161%" height="15" fill="rgb(207,140,0)" fg:x="48010" fg:w="19"/><text x="41.0332%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.02%)</title><rect x="40.7832%" y="885" width="0.0161%" height="15" fill="rgb(238,133,51)" fg:x="48010" fg:w="19"/><text x="41.0332%" y="895.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.02%)</title><rect x="40.7832%" y="869" width="0.0161%" height="15" fill="rgb(218,203,53)" fg:x="48010" fg:w="19"/><text x="41.0332%" y="879.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (19 samples, 0.02%)</title><rect x="40.7832%" y="853" width="0.0161%" height="15" fill="rgb(226,184,25)" fg:x="48010" fg:w="19"/><text x="41.0332%" y="863.50"></text></g><g><title>AutoFile::write (19 samples, 0.02%)</title><rect x="40.7832%" y="837" width="0.0161%" height="15" fill="rgb(231,121,21)" fg:x="48010" fg:w="19"/><text x="41.0332%" y="847.50"></text></g><g><title>_IO_fwrite (19 samples, 0.02%)</title><rect x="40.7832%" y="821" width="0.0161%" height="15" fill="rgb(251,14,34)" fg:x="48010" fg:w="19"/><text x="41.0332%" y="831.50"></text></g><g><title>[[ext4]] (18 samples, 0.02%)</title><rect x="40.8257%" y="629" width="0.0153%" height="15" fill="rgb(249,193,11)" fg:x="48060" fg:w="18"/><text x="41.0757%" y="639.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="40.8299%" y="613" width="0.0110%" height="15" fill="rgb(220,172,37)" fg:x="48065" fg:w="13"/><text x="41.0799%" y="623.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="40.8308%" y="597" width="0.0102%" height="15" fill="rgb(231,229,43)" fg:x="48066" fg:w="12"/><text x="41.0808%" y="607.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (24 samples, 0.02%)</title><rect x="40.8231%" y="789" width="0.0204%" height="15" fill="rgb(250,161,5)" fg:x="48057" fg:w="24"/><text x="41.0731%" y="799.50"></text></g><g><title>new_do_write (24 samples, 0.02%)</title><rect x="40.8231%" y="773" width="0.0204%" height="15" fill="rgb(218,225,18)" fg:x="48057" fg:w="24"/><text x="41.0731%" y="783.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (24 samples, 0.02%)</title><rect x="40.8231%" y="757" width="0.0204%" height="15" fill="rgb(245,45,42)" fg:x="48057" fg:w="24"/><text x="41.0731%" y="767.50"></text></g><g><title>__GI___libc_write (24 samples, 0.02%)</title><rect x="40.8231%" y="741" width="0.0204%" height="15" fill="rgb(211,115,1)" fg:x="48057" fg:w="24"/><text x="41.0731%" y="751.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="40.8231%" y="725" width="0.0204%" height="15" fill="rgb(248,133,52)" fg:x="48057" fg:w="24"/><text x="41.0731%" y="735.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="40.8231%" y="709" width="0.0204%" height="15" fill="rgb(238,100,21)" fg:x="48057" fg:w="24"/><text x="41.0731%" y="719.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="40.8231%" y="693" width="0.0204%" height="15" fill="rgb(247,144,11)" fg:x="48057" fg:w="24"/><text x="41.0731%" y="703.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="40.8240%" y="677" width="0.0195%" height="15" fill="rgb(206,164,16)" fg:x="48058" fg:w="23"/><text x="41.0740%" y="687.50"></text></g><g><title>[[ext4]] (23 samples, 0.02%)</title><rect x="40.8240%" y="661" width="0.0195%" height="15" fill="rgb(222,34,3)" fg:x="48058" fg:w="23"/><text x="41.0740%" y="671.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="40.8248%" y="645" width="0.0187%" height="15" fill="rgb(248,82,4)" fg:x="48059" fg:w="22"/><text x="41.0748%" y="655.50"></text></g><g><title>_IO_fwrite (57 samples, 0.05%)</title><rect x="40.7994%" y="821" width="0.0484%" height="15" fill="rgb(228,81,46)" fg:x="48029" fg:w="57"/><text x="41.0494%" y="831.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (30 samples, 0.03%)</title><rect x="40.8223%" y="805" width="0.0255%" height="15" fill="rgb(227,67,47)" fg:x="48056" fg:w="30"/><text x="41.0723%" y="815.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (2,421 samples, 2.06%)</title><rect x="38.7954%" y="1189" width="2.0566%" height="15" fill="rgb(215,93,53)" fg:x="45670" fg:w="2421"/><text x="39.0454%" y="1199.50">A..</text></g><g><title>void Serialize&lt;AutoFile, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (2,421 samples, 2.06%)</title><rect x="38.7954%" y="1173" width="2.0566%" height="15" fill="rgb(248,194,39)" fg:x="45670" fg:w="2421"/><text x="39.0454%" y="1183.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;AutoFile&gt; (2,421 samples, 2.06%)</title><rect x="38.7954%" y="1157" width="2.0566%" height="15" fill="rgb(215,5,19)" fg:x="45670" fg:w="2421"/><text x="39.0454%" y="1167.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock&gt; (2,421 samples, 2.06%)</title><rect x="38.7954%" y="1141" width="2.0566%" height="15" fill="rgb(226,215,51)" fg:x="45670" fg:w="2421"/><text x="39.0454%" y="1151.50">v..</text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,421 samples, 2.06%)</title><rect x="38.7954%" y="1125" width="2.0566%" height="15" fill="rgb(225,56,26)" fg:x="45670" fg:w="2421"/><text x="39.0454%" y="1135.50">v..</text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,421 samples, 2.06%)</title><rect x="38.7954%" y="1109" width="2.0566%" height="15" fill="rgb(222,75,29)" fg:x="45670" fg:w="2421"/><text x="39.0454%" y="1119.50">v..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (2,421 samples, 2.06%)</title><rect x="38.7954%" y="1093" width="2.0566%" height="15" fill="rgb(236,139,6)" fg:x="45670" fg:w="2421"/><text x="39.0454%" y="1103.50">v..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,421 samples, 2.06%)</title><rect x="38.7954%" y="1077" width="2.0566%" height="15" fill="rgb(223,137,36)" fg:x="45670" fg:w="2421"/><text x="39.0454%" y="1087.50">v..</text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,262 samples, 1.92%)</title><rect x="38.9305%" y="1061" width="1.9215%" height="15" fill="rgb(226,99,2)" fg:x="45829" fg:w="2262"/><text x="39.1805%" y="1071.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2,261 samples, 1.92%)</title><rect x="38.9314%" y="1045" width="1.9207%" height="15" fill="rgb(206,133,23)" fg:x="45830" fg:w="2261"/><text x="39.1814%" y="1055.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2,261 samples, 1.92%)</title><rect x="38.9314%" y="1029" width="1.9207%" height="15" fill="rgb(243,173,15)" fg:x="45830" fg:w="2261"/><text x="39.1814%" y="1039.50">v..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,261 samples, 1.92%)</title><rect x="38.9314%" y="1013" width="1.9207%" height="15" fill="rgb(228,69,28)" fg:x="45830" fg:w="2261"/><text x="39.1814%" y="1023.50">v..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,261 samples, 1.92%)</title><rect x="38.9314%" y="997" width="1.9207%" height="15" fill="rgb(212,51,22)" fg:x="45830" fg:w="2261"/><text x="39.1814%" y="1007.50">v..</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2,261 samples, 1.92%)</title><rect x="38.9314%" y="981" width="1.9207%" height="15" fill="rgb(227,113,0)" fg:x="45830" fg:w="2261"/><text x="39.1814%" y="991.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,261 samples, 1.92%)</title><rect x="38.9314%" y="965" width="1.9207%" height="15" fill="rgb(252,84,27)" fg:x="45830" fg:w="2261"/><text x="39.1814%" y="975.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,261 samples, 1.92%)</title><rect x="38.9314%" y="949" width="1.9207%" height="15" fill="rgb(223,145,39)" fg:x="45830" fg:w="2261"/><text x="39.1814%" y="959.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,261 samples, 1.92%)</title><rect x="38.9314%" y="933" width="1.9207%" height="15" fill="rgb(239,219,30)" fg:x="45830" fg:w="2261"/><text x="39.1814%" y="943.50">v..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,261 samples, 1.92%)</title><rect x="38.9314%" y="917" width="1.9207%" height="15" fill="rgb(224,196,39)" fg:x="45830" fg:w="2261"/><text x="39.1814%" y="927.50">v..</text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (62 samples, 0.05%)</title><rect x="40.7994%" y="901" width="0.0527%" height="15" fill="rgb(205,35,43)" fg:x="48029" fg:w="62"/><text x="41.0494%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (62 samples, 0.05%)</title><rect x="40.7994%" y="885" width="0.0527%" height="15" fill="rgb(228,201,21)" fg:x="48029" fg:w="62"/><text x="41.0494%" y="895.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (62 samples, 0.05%)</title><rect x="40.7994%" y="869" width="0.0527%" height="15" fill="rgb(237,118,16)" fg:x="48029" fg:w="62"/><text x="41.0494%" y="879.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (62 samples, 0.05%)</title><rect x="40.7994%" y="853" width="0.0527%" height="15" fill="rgb(241,17,19)" fg:x="48029" fg:w="62"/><text x="41.0494%" y="863.50"></text></g><g><title>AutoFile::write (62 samples, 0.05%)</title><rect x="40.7994%" y="837" width="0.0527%" height="15" fill="rgb(214,10,25)" fg:x="48029" fg:w="62"/><text x="41.0494%" y="847.50"></text></g><g><title>__fopen_internal (12 samples, 0.01%)</title><rect x="40.8597%" y="1157" width="0.0102%" height="15" fill="rgb(238,37,29)" fg:x="48100" fg:w="12"/><text x="41.1097%" y="1167.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (12 samples, 0.01%)</title><rect x="40.8597%" y="1141" width="0.0102%" height="15" fill="rgb(253,83,25)" fg:x="48100" fg:w="12"/><text x="41.1097%" y="1151.50"></text></g><g><title>_IO_file_open (12 samples, 0.01%)</title><rect x="40.8597%" y="1125" width="0.0102%" height="15" fill="rgb(234,192,12)" fg:x="48100" fg:w="12"/><text x="41.1097%" y="1135.50"></text></g><g><title>__GI___libc_open (12 samples, 0.01%)</title><rect x="40.8597%" y="1109" width="0.0102%" height="15" fill="rgb(241,216,45)" fg:x="48100" fg:w="12"/><text x="41.1097%" y="1119.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="40.8597%" y="1093" width="0.0102%" height="15" fill="rgb(242,22,33)" fg:x="48100" fg:w="12"/><text x="41.1097%" y="1103.50"></text></g><g><title>fseek (14 samples, 0.01%)</title><rect x="40.8733%" y="1157" width="0.0119%" height="15" fill="rgb(231,105,49)" fg:x="48116" fg:w="14"/><text x="41.1233%" y="1167.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (14 samples, 0.01%)</title><rect x="40.8733%" y="1141" width="0.0119%" height="15" fill="rgb(218,204,15)" fg:x="48116" fg:w="14"/><text x="41.1233%" y="1151.50"></text></g><g><title>node::BlockManager::OpenBlockFile (36 samples, 0.03%)</title><rect x="40.8563%" y="1189" width="0.0306%" height="15" fill="rgb(235,138,41)" fg:x="48096" fg:w="36"/><text x="41.1063%" y="1199.50"></text></g><g><title>FlatFileSeq::Open (35 samples, 0.03%)</title><rect x="40.8571%" y="1173" width="0.0297%" height="15" fill="rgb(246,0,9)" fg:x="48097" fg:w="35"/><text x="41.1071%" y="1183.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.01%)</title><rect x="40.9166%" y="805" width="0.0110%" height="15" fill="rgb(210,74,4)" fg:x="48167" fg:w="13"/><text x="41.1666%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.01%)</title><rect x="40.9166%" y="789" width="0.0110%" height="15" fill="rgb(250,60,41)" fg:x="48167" fg:w="13"/><text x="41.1666%" y="799.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="40.9166%" y="773" width="0.0110%" height="15" fill="rgb(220,115,12)" fg:x="48167" fg:w="13"/><text x="41.1666%" y="783.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="40.9166%" y="757" width="0.0110%" height="15" fill="rgb(237,100,13)" fg:x="48167" fg:w="13"/><text x="41.1666%" y="767.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (13 samples, 0.01%)</title><rect x="40.9166%" y="741" width="0.0110%" height="15" fill="rgb(213,55,26)" fg:x="48167" fg:w="13"/><text x="41.1666%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.01%)</title><rect x="40.9166%" y="725" width="0.0110%" height="15" fill="rgb(216,17,4)" fg:x="48167" fg:w="13"/><text x="41.1666%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.01%)</title><rect x="40.9166%" y="709" width="0.0110%" height="15" fill="rgb(220,153,47)" fg:x="48167" fg:w="13"/><text x="41.1666%" y="719.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (49 samples, 0.04%)</title><rect x="40.8928%" y="885" width="0.0416%" height="15" fill="rgb(215,131,9)" fg:x="48139" fg:w="49"/><text x="41.1428%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (49 samples, 0.04%)</title><rect x="40.8928%" y="869" width="0.0416%" height="15" fill="rgb(233,46,42)" fg:x="48139" fg:w="49"/><text x="41.1428%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (49 samples, 0.04%)</title><rect x="40.8928%" y="853" width="0.0416%" height="15" fill="rgb(226,86,7)" fg:x="48139" fg:w="49"/><text x="41.1428%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (49 samples, 0.04%)</title><rect x="40.8928%" y="837" width="0.0416%" height="15" fill="rgb(239,226,21)" fg:x="48139" fg:w="49"/><text x="41.1428%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (47 samples, 0.04%)</title><rect x="40.8945%" y="821" width="0.0399%" height="15" fill="rgb(244,137,22)" fg:x="48141" fg:w="47"/><text x="41.1445%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (24 samples, 0.02%)</title><rect x="40.9497%" y="805" width="0.0204%" height="15" fill="rgb(211,139,35)" fg:x="48206" fg:w="24"/><text x="41.1997%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (24 samples, 0.02%)</title><rect x="40.9497%" y="789" width="0.0204%" height="15" fill="rgb(214,62,50)" fg:x="48206" fg:w="24"/><text x="41.1997%" y="799.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.02%)</title><rect x="40.9497%" y="773" width="0.0204%" height="15" fill="rgb(212,113,44)" fg:x="48206" fg:w="24"/><text x="41.1997%" y="783.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.02%)</title><rect x="40.9497%" y="757" width="0.0204%" height="15" fill="rgb(226,150,43)" fg:x="48206" fg:w="24"/><text x="41.1997%" y="767.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (24 samples, 0.02%)</title><rect x="40.9497%" y="741" width="0.0204%" height="15" fill="rgb(250,71,37)" fg:x="48206" fg:w="24"/><text x="41.1997%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (24 samples, 0.02%)</title><rect x="40.9497%" y="725" width="0.0204%" height="15" fill="rgb(219,76,19)" fg:x="48206" fg:w="24"/><text x="41.1997%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (24 samples, 0.02%)</title><rect x="40.9497%" y="709" width="0.0204%" height="15" fill="rgb(250,39,11)" fg:x="48206" fg:w="24"/><text x="41.1997%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (14 samples, 0.01%)</title><rect x="40.9582%" y="693" width="0.0119%" height="15" fill="rgb(230,64,31)" fg:x="48216" fg:w="14"/><text x="41.2082%" y="703.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="40.9582%" y="677" width="0.0119%" height="15" fill="rgb(208,222,23)" fg:x="48216" fg:w="14"/><text x="41.2082%" y="687.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="40.9582%" y="661" width="0.0119%" height="15" fill="rgb(227,125,18)" fg:x="48216" fg:w="14"/><text x="41.2082%" y="671.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (14 samples, 0.01%)</title><rect x="40.9582%" y="645" width="0.0119%" height="15" fill="rgb(234,210,9)" fg:x="48216" fg:w="14"/><text x="41.2082%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (14 samples, 0.01%)</title><rect x="40.9582%" y="629" width="0.0119%" height="15" fill="rgb(217,127,24)" fg:x="48216" fg:w="14"/><text x="41.2082%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (14 samples, 0.01%)</title><rect x="40.9582%" y="613" width="0.0119%" height="15" fill="rgb(239,141,48)" fg:x="48216" fg:w="14"/><text x="41.2082%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (14 samples, 0.01%)</title><rect x="40.9582%" y="597" width="0.0119%" height="15" fill="rgb(227,109,8)" fg:x="48216" fg:w="14"/><text x="41.2082%" y="607.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (52 samples, 0.04%)</title><rect x="40.9344%" y="885" width="0.0442%" height="15" fill="rgb(235,184,23)" fg:x="48188" fg:w="52"/><text x="41.1844%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (52 samples, 0.04%)</title><rect x="40.9344%" y="869" width="0.0442%" height="15" fill="rgb(227,226,48)" fg:x="48188" fg:w="52"/><text x="41.1844%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (52 samples, 0.04%)</title><rect x="40.9344%" y="853" width="0.0442%" height="15" fill="rgb(206,150,11)" fg:x="48188" fg:w="52"/><text x="41.1844%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (52 samples, 0.04%)</title><rect x="40.9344%" y="837" width="0.0442%" height="15" fill="rgb(254,2,33)" fg:x="48188" fg:w="52"/><text x="41.1844%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (52 samples, 0.04%)</title><rect x="40.9344%" y="821" width="0.0442%" height="15" fill="rgb(243,160,20)" fg:x="48188" fg:w="52"/><text x="41.1844%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="773" width="0.0195%" height="15" fill="rgb(218,208,30)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="757" width="0.0195%" height="15" fill="rgb(224,120,49)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="741" width="0.0195%" height="15" fill="rgb(246,12,2)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="751.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="725" width="0.0195%" height="15" fill="rgb(236,117,3)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="709" width="0.0195%" height="15" fill="rgb(216,128,52)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="719.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="693" width="0.0195%" height="15" fill="rgb(246,145,19)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="677" width="0.0195%" height="15" fill="rgb(222,11,46)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="661" width="0.0195%" height="15" fill="rgb(245,82,36)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="671.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="645" width="0.0195%" height="15" fill="rgb(250,73,51)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="655.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (23 samples, 0.02%)</title><rect x="41.0092%" y="629" width="0.0195%" height="15" fill="rgb(221,189,23)" fg:x="48276" fg:w="23"/><text x="41.2592%" y="639.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (13 samples, 0.01%)</title><rect x="41.0177%" y="613" width="0.0110%" height="15" fill="rgb(210,33,7)" fg:x="48286" fg:w="13"/><text x="41.2677%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="41.0177%" y="597" width="0.0110%" height="15" fill="rgb(210,107,22)" fg:x="48286" fg:w="13"/><text x="41.2677%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (13 samples, 0.01%)</title><rect x="41.0177%" y="581" width="0.0110%" height="15" fill="rgb(222,116,37)" fg:x="48286" fg:w="13"/><text x="41.2677%" y="591.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="41.0177%" y="565" width="0.0110%" height="15" fill="rgb(254,17,48)" fg:x="48286" fg:w="13"/><text x="41.2677%" y="575.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="41.0177%" y="549" width="0.0110%" height="15" fill="rgb(224,36,32)" fg:x="48286" fg:w="13"/><text x="41.2677%" y="559.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (12 samples, 0.01%)</title><rect x="41.0185%" y="533" width="0.0102%" height="15" fill="rgb(232,90,46)" fg:x="48287" fg:w="12"/><text x="41.2685%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (12 samples, 0.01%)</title><rect x="41.0185%" y="517" width="0.0102%" height="15" fill="rgb(241,66,40)" fg:x="48287" fg:w="12"/><text x="41.2685%" y="527.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (54 samples, 0.05%)</title><rect x="40.9905%" y="805" width="0.0459%" height="15" fill="rgb(249,184,29)" fg:x="48254" fg:w="54"/><text x="41.2405%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (54 samples, 0.05%)</title><rect x="40.9905%" y="789" width="0.0459%" height="15" fill="rgb(231,181,1)" fg:x="48254" fg:w="54"/><text x="41.2405%" y="799.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (79 samples, 0.07%)</title><rect x="40.9786%" y="885" width="0.0671%" height="15" fill="rgb(224,94,2)" fg:x="48240" fg:w="79"/><text x="41.2286%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (79 samples, 0.07%)</title><rect x="40.9786%" y="869" width="0.0671%" height="15" fill="rgb(229,170,15)" fg:x="48240" fg:w="79"/><text x="41.2286%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (79 samples, 0.07%)</title><rect x="40.9786%" y="853" width="0.0671%" height="15" fill="rgb(240,127,35)" fg:x="48240" fg:w="79"/><text x="41.2286%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (79 samples, 0.07%)</title><rect x="40.9786%" y="837" width="0.0671%" height="15" fill="rgb(248,196,34)" fg:x="48240" fg:w="79"/><text x="41.2286%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (79 samples, 0.07%)</title><rect x="40.9786%" y="821" width="0.0671%" height="15" fill="rgb(236,137,7)" fg:x="48240" fg:w="79"/><text x="41.2286%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (189 samples, 0.16%)</title><rect x="40.8869%" y="1045" width="0.1606%" height="15" fill="rgb(235,127,16)" fg:x="48132" fg:w="189"/><text x="41.1369%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (189 samples, 0.16%)</title><rect x="40.8869%" y="1029" width="0.1606%" height="15" fill="rgb(250,192,54)" fg:x="48132" fg:w="189"/><text x="41.1369%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (189 samples, 0.16%)</title><rect x="40.8869%" y="1013" width="0.1606%" height="15" fill="rgb(218,98,20)" fg:x="48132" fg:w="189"/><text x="41.1369%" y="1023.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (189 samples, 0.16%)</title><rect x="40.8869%" y="997" width="0.1606%" height="15" fill="rgb(230,176,47)" fg:x="48132" fg:w="189"/><text x="41.1369%" y="1007.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (189 samples, 0.16%)</title><rect x="40.8869%" y="981" width="0.1606%" height="15" fill="rgb(244,2,33)" fg:x="48132" fg:w="189"/><text x="41.1369%" y="991.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (188 samples, 0.16%)</title><rect x="40.8877%" y="965" width="0.1597%" height="15" fill="rgb(231,100,17)" fg:x="48133" fg:w="188"/><text x="41.1377%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (188 samples, 0.16%)</title><rect x="40.8877%" y="949" width="0.1597%" height="15" fill="rgb(245,23,12)" fg:x="48133" fg:w="188"/><text x="41.1377%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (188 samples, 0.16%)</title><rect x="40.8877%" y="933" width="0.1597%" height="15" fill="rgb(249,55,22)" fg:x="48133" fg:w="188"/><text x="41.1377%" y="943.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (188 samples, 0.16%)</title><rect x="40.8877%" y="917" width="0.1597%" height="15" fill="rgb(207,134,9)" fg:x="48133" fg:w="188"/><text x="41.1377%" y="927.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (188 samples, 0.16%)</title><rect x="40.8877%" y="901" width="0.1597%" height="15" fill="rgb(218,134,0)" fg:x="48133" fg:w="188"/><text x="41.1377%" y="911.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (2,720 samples, 2.31%)</title><rect x="38.7954%" y="1205" width="2.3106%" height="15" fill="rgb(213,212,33)" fg:x="45670" fg:w="2720"/><text x="39.0454%" y="1215.50">n..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (258 samples, 0.22%)</title><rect x="40.8869%" y="1189" width="0.2192%" height="15" fill="rgb(252,106,18)" fg:x="48132" fg:w="258"/><text x="41.1369%" y="1199.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (258 samples, 0.22%)</title><rect x="40.8869%" y="1173" width="0.2192%" height="15" fill="rgb(208,126,42)" fg:x="48132" fg:w="258"/><text x="41.1369%" y="1183.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (258 samples, 0.22%)</title><rect x="40.8869%" y="1157" width="0.2192%" height="15" fill="rgb(246,175,29)" fg:x="48132" fg:w="258"/><text x="41.1369%" y="1167.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (258 samples, 0.22%)</title><rect x="40.8869%" y="1141" width="0.2192%" height="15" fill="rgb(215,13,50)" fg:x="48132" fg:w="258"/><text x="41.1369%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (258 samples, 0.22%)</title><rect x="40.8869%" y="1125" width="0.2192%" height="15" fill="rgb(216,172,15)" fg:x="48132" fg:w="258"/><text x="41.1369%" y="1135.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (258 samples, 0.22%)</title><rect x="40.8869%" y="1109" width="0.2192%" height="15" fill="rgb(212,103,13)" fg:x="48132" fg:w="258"/><text x="41.1369%" y="1119.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (258 samples, 0.22%)</title><rect x="40.8869%" y="1093" width="0.2192%" height="15" fill="rgb(231,171,36)" fg:x="48132" fg:w="258"/><text x="41.1369%" y="1103.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (258 samples, 0.22%)</title><rect x="40.8869%" y="1077" width="0.2192%" height="15" fill="rgb(250,123,20)" fg:x="48132" fg:w="258"/><text x="41.1369%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (258 samples, 0.22%)</title><rect x="40.8869%" y="1061" width="0.2192%" height="15" fill="rgb(212,53,50)" fg:x="48132" fg:w="258"/><text x="41.1369%" y="1071.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (69 samples, 0.06%)</title><rect x="41.0474%" y="1045" width="0.0586%" height="15" fill="rgb(243,54,12)" fg:x="48321" fg:w="69"/><text x="41.2974%" y="1055.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.02%)</title><rect x="41.0848%" y="1029" width="0.0212%" height="15" fill="rgb(234,101,34)" fg:x="48365" fg:w="25"/><text x="41.3348%" y="1039.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (25 samples, 0.02%)</title><rect x="41.0848%" y="1013" width="0.0212%" height="15" fill="rgb(254,67,22)" fg:x="48365" fg:w="25"/><text x="41.3348%" y="1023.50"></text></g><g><title>SizeComputer::write (25 samples, 0.02%)</title><rect x="41.0848%" y="997" width="0.0212%" height="15" fill="rgb(250,35,47)" fg:x="48365" fg:w="25"/><text x="41.3348%" y="1007.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="821" width="0.0110%" height="15" fill="rgb(226,126,38)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="805" width="0.0110%" height="15" fill="rgb(216,138,53)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="815.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="789" width="0.0110%" height="15" fill="rgb(246,199,43)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="799.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="773" width="0.0110%" height="15" fill="rgb(232,125,11)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="783.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="757" width="0.0110%" height="15" fill="rgb(218,219,45)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="741" width="0.0110%" height="15" fill="rgb(216,102,54)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="725" width="0.0110%" height="15" fill="rgb(250,228,7)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="709" width="0.0110%" height="15" fill="rgb(226,125,25)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="693" width="0.0110%" height="15" fill="rgb(224,165,27)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="677" width="0.0110%" height="15" fill="rgb(233,86,3)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="661" width="0.0110%" height="15" fill="rgb(228,116,20)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="645" width="0.0110%" height="15" fill="rgb(209,192,17)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (13 samples, 0.01%)</title><rect x="41.1357%" y="629" width="0.0110%" height="15" fill="rgb(224,88,34)" fg:x="48425" fg:w="13"/><text x="41.3857%" y="639.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (41 samples, 0.03%)</title><rect x="41.1171%" y="901" width="0.0348%" height="15" fill="rgb(233,38,6)" fg:x="48403" fg:w="41"/><text x="41.3671%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (41 samples, 0.03%)</title><rect x="41.1171%" y="885" width="0.0348%" height="15" fill="rgb(212,59,30)" fg:x="48403" fg:w="41"/><text x="41.3671%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.03%)</title><rect x="41.1171%" y="869" width="0.0348%" height="15" fill="rgb(213,80,3)" fg:x="48403" fg:w="41"/><text x="41.3671%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.03%)</title><rect x="41.1171%" y="853" width="0.0348%" height="15" fill="rgb(251,178,7)" fg:x="48403" fg:w="41"/><text x="41.3671%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (37 samples, 0.03%)</title><rect x="41.1205%" y="837" width="0.0314%" height="15" fill="rgb(213,154,26)" fg:x="48407" fg:w="37"/><text x="41.3705%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="41.1672%" y="709" width="0.0110%" height="15" fill="rgb(238,165,49)" fg:x="48462" fg:w="13"/><text x="41.4172%" y="719.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="41.1672%" y="693" width="0.0110%" height="15" fill="rgb(248,91,46)" fg:x="48462" fg:w="13"/><text x="41.4172%" y="703.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (13 samples, 0.01%)</title><rect x="41.1672%" y="677" width="0.0110%" height="15" fill="rgb(244,21,52)" fg:x="48462" fg:w="13"/><text x="41.4172%" y="687.50"></text></g><g><title>SizeComputer::write (13 samples, 0.01%)</title><rect x="41.1672%" y="661" width="0.0110%" height="15" fill="rgb(247,122,20)" fg:x="48462" fg:w="13"/><text x="41.4172%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (23 samples, 0.02%)</title><rect x="41.1672%" y="821" width="0.0195%" height="15" fill="rgb(218,27,9)" fg:x="48462" fg:w="23"/><text x="41.4172%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (23 samples, 0.02%)</title><rect x="41.1672%" y="805" width="0.0195%" height="15" fill="rgb(246,7,6)" fg:x="48462" fg:w="23"/><text x="41.4172%" y="815.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="41.1672%" y="789" width="0.0195%" height="15" fill="rgb(227,135,54)" fg:x="48462" fg:w="23"/><text x="41.4172%" y="799.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="41.1672%" y="773" width="0.0195%" height="15" fill="rgb(247,14,11)" fg:x="48462" fg:w="23"/><text x="41.4172%" y="783.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (23 samples, 0.02%)</title><rect x="41.1672%" y="757" width="0.0195%" height="15" fill="rgb(206,149,34)" fg:x="48462" fg:w="23"/><text x="41.4172%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (23 samples, 0.02%)</title><rect x="41.1672%" y="741" width="0.0195%" height="15" fill="rgb(227,228,4)" fg:x="48462" fg:w="23"/><text x="41.4172%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (23 samples, 0.02%)</title><rect x="41.1672%" y="725" width="0.0195%" height="15" fill="rgb(238,218,28)" fg:x="48462" fg:w="23"/><text x="41.4172%" y="735.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (52 samples, 0.04%)</title><rect x="41.1519%" y="901" width="0.0442%" height="15" fill="rgb(252,86,40)" fg:x="48444" fg:w="52"/><text x="41.4019%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (52 samples, 0.04%)</title><rect x="41.1519%" y="885" width="0.0442%" height="15" fill="rgb(251,225,11)" fg:x="48444" fg:w="52"/><text x="41.4019%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (52 samples, 0.04%)</title><rect x="41.1519%" y="869" width="0.0442%" height="15" fill="rgb(206,46,49)" fg:x="48444" fg:w="52"/><text x="41.4019%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (52 samples, 0.04%)</title><rect x="41.1519%" y="853" width="0.0442%" height="15" fill="rgb(245,128,24)" fg:x="48444" fg:w="52"/><text x="41.4019%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (51 samples, 0.04%)</title><rect x="41.1527%" y="837" width="0.0433%" height="15" fill="rgb(219,177,34)" fg:x="48445" fg:w="51"/><text x="41.4027%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="789" width="0.0204%" height="15" fill="rgb(218,60,48)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="773" width="0.0204%" height="15" fill="rgb(221,11,5)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="757" width="0.0204%" height="15" fill="rgb(220,148,13)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="767.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="741" width="0.0204%" height="15" fill="rgb(210,16,3)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="725" width="0.0204%" height="15" fill="rgb(236,80,2)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="709" width="0.0204%" height="15" fill="rgb(239,129,19)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="693" width="0.0204%" height="15" fill="rgb(220,106,35)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="677" width="0.0204%" height="15" fill="rgb(252,139,45)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="687.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="661" width="0.0204%" height="15" fill="rgb(229,8,36)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="671.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (24 samples, 0.02%)</title><rect x="41.2292%" y="645" width="0.0204%" height="15" fill="rgb(230,126,33)" fg:x="48535" fg:w="24"/><text x="41.4792%" y="655.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (14 samples, 0.01%)</title><rect x="41.2377%" y="629" width="0.0119%" height="15" fill="rgb(239,140,21)" fg:x="48545" fg:w="14"/><text x="41.4877%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="41.2377%" y="613" width="0.0119%" height="15" fill="rgb(254,104,9)" fg:x="48545" fg:w="14"/><text x="41.4877%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (14 samples, 0.01%)</title><rect x="41.2377%" y="597" width="0.0119%" height="15" fill="rgb(239,52,14)" fg:x="48545" fg:w="14"/><text x="41.4877%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="41.2377%" y="581" width="0.0119%" height="15" fill="rgb(208,227,44)" fg:x="48545" fg:w="14"/><text x="41.4877%" y="591.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="41.2377%" y="565" width="0.0119%" height="15" fill="rgb(246,18,19)" fg:x="48545" fg:w="14"/><text x="41.4877%" y="575.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (63 samples, 0.05%)</title><rect x="41.2071%" y="821" width="0.0535%" height="15" fill="rgb(235,228,25)" fg:x="48509" fg:w="63"/><text x="41.4571%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (63 samples, 0.05%)</title><rect x="41.2071%" y="805" width="0.0535%" height="15" fill="rgb(240,156,20)" fg:x="48509" fg:w="63"/><text x="41.4571%" y="815.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="41.2496%" y="789" width="0.0110%" height="15" fill="rgb(224,8,20)" fg:x="48559" fg:w="13"/><text x="41.4996%" y="799.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (84 samples, 0.07%)</title><rect x="41.1961%" y="901" width="0.0714%" height="15" fill="rgb(214,12,52)" fg:x="48496" fg:w="84"/><text x="41.4461%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (84 samples, 0.07%)</title><rect x="41.1961%" y="885" width="0.0714%" height="15" fill="rgb(211,220,47)" fg:x="48496" fg:w="84"/><text x="41.4461%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (84 samples, 0.07%)</title><rect x="41.1961%" y="869" width="0.0714%" height="15" fill="rgb(250,173,5)" fg:x="48496" fg:w="84"/><text x="41.4461%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.07%)</title><rect x="41.1961%" y="853" width="0.0714%" height="15" fill="rgb(250,125,52)" fg:x="48496" fg:w="84"/><text x="41.4461%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (82 samples, 0.07%)</title><rect x="41.1978%" y="837" width="0.0697%" height="15" fill="rgb(209,133,18)" fg:x="48498" fg:w="82"/><text x="41.4478%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (195 samples, 0.17%)</title><rect x="41.1060%" y="1061" width="0.1656%" height="15" fill="rgb(216,173,22)" fg:x="48390" fg:w="195"/><text x="41.3560%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (195 samples, 0.17%)</title><rect x="41.1060%" y="1045" width="0.1656%" height="15" fill="rgb(205,3,22)" fg:x="48390" fg:w="195"/><text x="41.3560%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (195 samples, 0.17%)</title><rect x="41.1060%" y="1029" width="0.1656%" height="15" fill="rgb(248,22,20)" fg:x="48390" fg:w="195"/><text x="41.3560%" y="1039.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (195 samples, 0.17%)</title><rect x="41.1060%" y="1013" width="0.1656%" height="15" fill="rgb(233,6,29)" fg:x="48390" fg:w="195"/><text x="41.3560%" y="1023.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (195 samples, 0.17%)</title><rect x="41.1060%" y="997" width="0.1656%" height="15" fill="rgb(240,22,54)" fg:x="48390" fg:w="195"/><text x="41.3560%" y="1007.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (194 samples, 0.16%)</title><rect x="41.1069%" y="981" width="0.1648%" height="15" fill="rgb(231,133,32)" fg:x="48391" fg:w="194"/><text x="41.3569%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (194 samples, 0.16%)</title><rect x="41.1069%" y="965" width="0.1648%" height="15" fill="rgb(248,193,4)" fg:x="48391" fg:w="194"/><text x="41.3569%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (194 samples, 0.16%)</title><rect x="41.1069%" y="949" width="0.1648%" height="15" fill="rgb(211,178,46)" fg:x="48391" fg:w="194"/><text x="41.3569%" y="959.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (194 samples, 0.16%)</title><rect x="41.1069%" y="933" width="0.1648%" height="15" fill="rgb(224,5,42)" fg:x="48391" fg:w="194"/><text x="41.3569%" y="943.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (194 samples, 0.16%)</title><rect x="41.1069%" y="917" width="0.1648%" height="15" fill="rgb(239,176,25)" fg:x="48391" fg:w="194"/><text x="41.3569%" y="927.50"></text></g><g><title>node::BlockManager::SaveBlockToDisk (3,352 samples, 2.85%)</title><rect x="38.4905%" y="1221" width="2.8474%" height="15" fill="rgb(245,187,50)" fg:x="45311" fg:w="3352"/><text x="38.7405%" y="1231.50">no..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (273 samples, 0.23%)</title><rect x="41.1060%" y="1205" width="0.2319%" height="15" fill="rgb(248,24,15)" fg:x="48390" fg:w="273"/><text x="41.3560%" y="1215.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (273 samples, 0.23%)</title><rect x="41.1060%" y="1189" width="0.2319%" height="15" fill="rgb(205,166,13)" fg:x="48390" fg:w="273"/><text x="41.3560%" y="1199.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (273 samples, 0.23%)</title><rect x="41.1060%" y="1173" width="0.2319%" height="15" fill="rgb(208,114,23)" fg:x="48390" fg:w="273"/><text x="41.3560%" y="1183.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (273 samples, 0.23%)</title><rect x="41.1060%" y="1157" width="0.2319%" height="15" fill="rgb(239,127,18)" fg:x="48390" fg:w="273"/><text x="41.3560%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (273 samples, 0.23%)</title><rect x="41.1060%" y="1141" width="0.2319%" height="15" fill="rgb(219,154,28)" fg:x="48390" fg:w="273"/><text x="41.3560%" y="1151.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (273 samples, 0.23%)</title><rect x="41.1060%" y="1125" width="0.2319%" height="15" fill="rgb(225,157,23)" fg:x="48390" fg:w="273"/><text x="41.3560%" y="1135.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (273 samples, 0.23%)</title><rect x="41.1060%" y="1109" width="0.2319%" height="15" fill="rgb(219,8,6)" fg:x="48390" fg:w="273"/><text x="41.3560%" y="1119.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (273 samples, 0.23%)</title><rect x="41.1060%" y="1093" width="0.2319%" height="15" fill="rgb(212,47,6)" fg:x="48390" fg:w="273"/><text x="41.3560%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (273 samples, 0.23%)</title><rect x="41.1060%" y="1077" width="0.2319%" height="15" fill="rgb(224,190,4)" fg:x="48390" fg:w="273"/><text x="41.3560%" y="1087.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (78 samples, 0.07%)</title><rect x="41.2717%" y="1061" width="0.0663%" height="15" fill="rgb(239,183,29)" fg:x="48585" fg:w="78"/><text x="41.5217%" y="1071.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.03%)</title><rect x="41.3107%" y="1045" width="0.0272%" height="15" fill="rgb(213,57,7)" fg:x="48631" fg:w="32"/><text x="41.5607%" y="1055.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (32 samples, 0.03%)</title><rect x="41.3107%" y="1029" width="0.0272%" height="15" fill="rgb(216,148,1)" fg:x="48631" fg:w="32"/><text x="41.5607%" y="1039.50"></text></g><g><title>SizeComputer::write (32 samples, 0.03%)</title><rect x="41.3107%" y="1013" width="0.0272%" height="15" fill="rgb(236,182,29)" fg:x="48631" fg:w="32"/><text x="41.5607%" y="1023.50"></text></g><g><title>ChainstateManager::AcceptBlock (3,792 samples, 3.22%)</title><rect x="38.1252%" y="1237" width="3.2212%" height="15" fill="rgb(244,120,48)" fg:x="44881" fg:w="3792"/><text x="38.3752%" y="1247.50">Cha..</text></g><g><title>CheckTransaction (24 samples, 0.02%)</title><rect x="41.3880%" y="1189" width="0.0204%" height="15" fill="rgb(206,71,34)" fg:x="48722" fg:w="24"/><text x="41.6380%" y="1199.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (16 samples, 0.01%)</title><rect x="41.3948%" y="1173" width="0.0136%" height="15" fill="rgb(242,32,6)" fg:x="48730" fg:w="16"/><text x="41.6448%" y="1183.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (16 samples, 0.01%)</title><rect x="41.3948%" y="1157" width="0.0136%" height="15" fill="rgb(241,35,3)" fg:x="48730" fg:w="16"/><text x="41.6448%" y="1167.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (16 samples, 0.01%)</title><rect x="41.3948%" y="1141" width="0.0136%" height="15" fill="rgb(222,62,19)" fg:x="48730" fg:w="16"/><text x="41.6448%" y="1151.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (16 samples, 0.01%)</title><rect x="41.3948%" y="1125" width="0.0136%" height="15" fill="rgb(223,110,41)" fg:x="48730" fg:w="16"/><text x="41.6448%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (16 samples, 0.01%)</title><rect x="41.3948%" y="1109" width="0.0136%" height="15" fill="rgb(208,224,4)" fg:x="48730" fg:w="16"/><text x="41.6448%" y="1119.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="41.3948%" y="1093" width="0.0136%" height="15" fill="rgb(241,137,19)" fg:x="48730" fg:w="16"/><text x="41.6448%" y="1103.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (16 samples, 0.01%)</title><rect x="41.3948%" y="1077" width="0.0136%" height="15" fill="rgb(244,24,17)" fg:x="48730" fg:w="16"/><text x="41.6448%" y="1087.50"></text></g><g><title>__memcmp_evex_movbe (34 samples, 0.03%)</title><rect x="41.4721%" y="1029" width="0.0289%" height="15" fill="rgb(245,178,49)" fg:x="48821" fg:w="34"/><text x="41.7221%" y="1039.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (28 samples, 0.02%)</title><rect x="41.5121%" y="1029" width="0.0238%" height="15" fill="rgb(219,160,38)" fg:x="48868" fg:w="28"/><text x="41.7621%" y="1039.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (106 samples, 0.09%)</title><rect x="41.4467%" y="1093" width="0.0900%" height="15" fill="rgb(228,137,14)" fg:x="48791" fg:w="106"/><text x="41.6967%" y="1103.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (100 samples, 0.08%)</title><rect x="41.4517%" y="1077" width="0.0849%" height="15" fill="rgb(237,134,11)" fg:x="48797" fg:w="100"/><text x="41.7017%" y="1087.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (100 samples, 0.08%)</title><rect x="41.4517%" y="1061" width="0.0849%" height="15" fill="rgb(211,126,44)" fg:x="48797" fg:w="100"/><text x="41.7017%" y="1071.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (100 samples, 0.08%)</title><rect x="41.4517%" y="1045" width="0.0849%" height="15" fill="rgb(226,171,33)" fg:x="48797" fg:w="100"/><text x="41.7017%" y="1055.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (143 samples, 0.12%)</title><rect x="41.4161%" y="1173" width="0.1215%" height="15" fill="rgb(253,99,13)" fg:x="48755" fg:w="143"/><text x="41.6661%" y="1183.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (108 samples, 0.09%)</title><rect x="41.4458%" y="1157" width="0.0917%" height="15" fill="rgb(244,48,7)" fg:x="48790" fg:w="108"/><text x="41.6958%" y="1167.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (108 samples, 0.09%)</title><rect x="41.4458%" y="1141" width="0.0917%" height="15" fill="rgb(244,217,54)" fg:x="48790" fg:w="108"/><text x="41.6958%" y="1151.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (107 samples, 0.09%)</title><rect x="41.4467%" y="1125" width="0.0909%" height="15" fill="rgb(224,15,18)" fg:x="48791" fg:w="107"/><text x="41.6967%" y="1135.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (107 samples, 0.09%)</title><rect x="41.4467%" y="1109" width="0.0909%" height="15" fill="rgb(244,99,12)" fg:x="48791" fg:w="107"/><text x="41.6967%" y="1119.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_node (14 samples, 0.01%)</title><rect x="41.5520%" y="1125" width="0.0119%" height="15" fill="rgb(233,226,8)" fg:x="48915" fg:w="14"/><text x="41.8020%" y="1135.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::allocate (14 samples, 0.01%)</title><rect x="41.5520%" y="1109" width="0.0119%" height="15" fill="rgb(229,211,3)" fg:x="48915" fg:w="14"/><text x="41.8020%" y="1119.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (14 samples, 0.01%)</title><rect x="41.5520%" y="1093" width="0.0119%" height="15" fill="rgb(216,140,21)" fg:x="48915" fg:w="14"/><text x="41.8020%" y="1103.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (14 samples, 0.01%)</title><rect x="41.5520%" y="1077" width="0.0119%" height="15" fill="rgb(234,122,30)" fg:x="48915" fg:w="14"/><text x="41.8020%" y="1087.50"></text></g><g><title>operator new (13 samples, 0.01%)</title><rect x="41.5528%" y="1061" width="0.0110%" height="15" fill="rgb(236,25,46)" fg:x="48916" fg:w="13"/><text x="41.8028%" y="1071.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (16 samples, 0.01%)</title><rect x="41.5520%" y="1157" width="0.0136%" height="15" fill="rgb(217,52,54)" fg:x="48915" fg:w="16"/><text x="41.8020%" y="1167.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (16 samples, 0.01%)</title><rect x="41.5520%" y="1141" width="0.0136%" height="15" fill="rgb(222,29,26)" fg:x="48915" fg:w="16"/><text x="41.8020%" y="1151.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (228 samples, 0.19%)</title><rect x="41.3787%" y="1205" width="0.1937%" height="15" fill="rgb(216,177,29)" fg:x="48711" fg:w="228"/><text x="41.6287%" y="1215.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (190 samples, 0.16%)</title><rect x="41.4110%" y="1189" width="0.1614%" height="15" fill="rgb(247,136,51)" fg:x="48749" fg:w="190"/><text x="41.6610%" y="1199.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (41 samples, 0.03%)</title><rect x="41.5375%" y="1173" width="0.0348%" height="15" fill="rgb(231,47,47)" fg:x="48898" fg:w="41"/><text x="41.7875%" y="1183.50"></text></g><g><title>CheckTransaction (16 samples, 0.01%)</title><rect x="41.5749%" y="1173" width="0.0136%" height="15" fill="rgb(211,192,36)" fg:x="48942" fg:w="16"/><text x="41.8249%" y="1183.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (22 samples, 0.02%)</title><rect x="41.5902%" y="1173" width="0.0187%" height="15" fill="rgb(229,156,32)" fg:x="48960" fg:w="22"/><text x="41.8402%" y="1183.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (14 samples, 0.01%)</title><rect x="41.5970%" y="1157" width="0.0119%" height="15" fill="rgb(248,213,20)" fg:x="48968" fg:w="14"/><text x="41.8470%" y="1167.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (47 samples, 0.04%)</title><rect x="41.5724%" y="1205" width="0.0399%" height="15" fill="rgb(217,64,7)" fg:x="48939" fg:w="47"/><text x="41.8224%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (47 samples, 0.04%)</title><rect x="41.5724%" y="1189" width="0.0399%" height="15" fill="rgb(232,142,8)" fg:x="48939" fg:w="47"/><text x="41.8224%" y="1199.50"></text></g><g><title>CheckTransaction (295 samples, 0.25%)</title><rect x="41.3702%" y="1221" width="0.2506%" height="15" fill="rgb(224,92,44)" fg:x="48701" fg:w="295"/><text x="41.6202%" y="1231.50"></text></g><g><title>CScript::GetSigOpCount (60 samples, 0.05%)</title><rect x="41.6616%" y="1173" width="0.0510%" height="15" fill="rgb(214,169,17)" fg:x="49044" fg:w="60"/><text x="41.9116%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (14 samples, 0.01%)</title><rect x="41.7006%" y="1157" width="0.0119%" height="15" fill="rgb(210,59,37)" fg:x="49090" fg:w="14"/><text x="41.9506%" y="1167.50"></text></g><g><title>GetLegacySigOpCount (13 samples, 0.01%)</title><rect x="41.7142%" y="1173" width="0.0110%" height="15" fill="rgb(214,116,48)" fg:x="49106" fg:w="13"/><text x="41.9642%" y="1183.50"></text></g><g><title>CScript::GetOp (166 samples, 0.14%)</title><rect x="41.6505%" y="1189" width="0.1410%" height="15" fill="rgb(244,191,6)" fg:x="49031" fg:w="166"/><text x="41.9005%" y="1199.50"></text></g><g><title>GetScriptOp (78 samples, 0.07%)</title><rect x="41.7253%" y="1173" width="0.0663%" height="15" fill="rgb(241,50,52)" fg:x="49119" fg:w="78"/><text x="41.9753%" y="1183.50"></text></g><g><title>CScript::GetSigOpCount (207 samples, 0.18%)</title><rect x="41.6225%" y="1205" width="0.1758%" height="15" fill="rgb(236,75,39)" fg:x="48998" fg:w="207"/><text x="41.8725%" y="1215.50"></text></g><g><title>GetLegacySigOpCount (20 samples, 0.02%)</title><rect x="41.8000%" y="1205" width="0.0170%" height="15" fill="rgb(236,99,0)" fg:x="49207" fg:w="20"/><text x="42.0500%" y="1215.50"></text></g><g><title>GetScriptOp (102 samples, 0.09%)</title><rect x="41.8170%" y="1205" width="0.0866%" height="15" fill="rgb(207,202,15)" fg:x="49227" fg:w="102"/><text x="42.0670%" y="1215.50"></text></g><g><title>GetLegacySigOpCount (335 samples, 0.28%)</title><rect x="41.6208%" y="1221" width="0.2846%" height="15" fill="rgb(233,207,14)" fg:x="48996" fg:w="335"/><text x="41.8708%" y="1231.50"></text></g><g><title>GetScriptOp (28 samples, 0.02%)</title><rect x="41.9054%" y="1221" width="0.0238%" height="15" fill="rgb(226,27,51)" fg:x="49331" fg:w="28"/><text x="42.1554%" y="1231.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (21 samples, 0.02%)</title><rect x="41.9487%" y="1221" width="0.0178%" height="15" fill="rgb(206,104,42)" fg:x="49382" fg:w="21"/><text x="42.1987%" y="1231.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (18 samples, 0.02%)</title><rect x="41.9929%" y="837" width="0.0153%" height="15" fill="rgb(212,225,4)" fg:x="49434" fg:w="18"/><text x="42.2429%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (18 samples, 0.02%)</title><rect x="41.9929%" y="821" width="0.0153%" height="15" fill="rgb(233,96,42)" fg:x="49434" fg:w="18"/><text x="42.2429%" y="831.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.02%)</title><rect x="41.9929%" y="805" width="0.0153%" height="15" fill="rgb(229,21,32)" fg:x="49434" fg:w="18"/><text x="42.2429%" y="815.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.02%)</title><rect x="41.9929%" y="789" width="0.0153%" height="15" fill="rgb(226,216,24)" fg:x="49434" fg:w="18"/><text x="42.2429%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (18 samples, 0.02%)</title><rect x="41.9929%" y="773" width="0.0153%" height="15" fill="rgb(221,163,17)" fg:x="49434" fg:w="18"/><text x="42.2429%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (18 samples, 0.02%)</title><rect x="41.9929%" y="757" width="0.0153%" height="15" fill="rgb(216,216,42)" fg:x="49434" fg:w="18"/><text x="42.2429%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (18 samples, 0.02%)</title><rect x="41.9929%" y="741" width="0.0153%" height="15" fill="rgb(240,118,7)" fg:x="49434" fg:w="18"/><text x="42.2429%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (17 samples, 0.01%)</title><rect x="41.9937%" y="725" width="0.0144%" height="15" fill="rgb(221,67,37)" fg:x="49435" fg:w="17"/><text x="42.2437%" y="735.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="41.9937%" y="709" width="0.0144%" height="15" fill="rgb(241,32,44)" fg:x="49435" fg:w="17"/><text x="42.2437%" y="719.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="41.9937%" y="693" width="0.0144%" height="15" fill="rgb(235,204,43)" fg:x="49435" fg:w="17"/><text x="42.2437%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (17 samples, 0.01%)</title><rect x="41.9937%" y="677" width="0.0144%" height="15" fill="rgb(213,116,10)" fg:x="49435" fg:w="17"/><text x="42.2437%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.01%)</title><rect x="41.9937%" y="661" width="0.0144%" height="15" fill="rgb(239,15,48)" fg:x="49435" fg:w="17"/><text x="42.2437%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.01%)</title><rect x="41.9937%" y="645" width="0.0144%" height="15" fill="rgb(207,123,36)" fg:x="49435" fg:w="17"/><text x="42.2437%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (14 samples, 0.01%)</title><rect x="41.9963%" y="629" width="0.0119%" height="15" fill="rgb(209,103,30)" fg:x="49438" fg:w="14"/><text x="42.2463%" y="639.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (43 samples, 0.04%)</title><rect x="41.9869%" y="917" width="0.0365%" height="15" fill="rgb(238,100,19)" fg:x="49427" fg:w="43"/><text x="42.2369%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (43 samples, 0.04%)</title><rect x="41.9869%" y="901" width="0.0365%" height="15" fill="rgb(244,30,14)" fg:x="49427" fg:w="43"/><text x="42.2369%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (43 samples, 0.04%)</title><rect x="41.9869%" y="885" width="0.0365%" height="15" fill="rgb(249,174,6)" fg:x="49427" fg:w="43"/><text x="42.2369%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (43 samples, 0.04%)</title><rect x="41.9869%" y="869" width="0.0365%" height="15" fill="rgb(235,213,41)" fg:x="49427" fg:w="43"/><text x="42.2369%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (43 samples, 0.04%)</title><rect x="41.9869%" y="853" width="0.0365%" height="15" fill="rgb(213,118,6)" fg:x="49427" fg:w="43"/><text x="42.2369%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (33 samples, 0.03%)</title><rect x="42.0234%" y="917" width="0.0280%" height="15" fill="rgb(235,44,51)" fg:x="49470" fg:w="33"/><text x="42.2734%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (33 samples, 0.03%)</title><rect x="42.0234%" y="901" width="0.0280%" height="15" fill="rgb(217,9,53)" fg:x="49470" fg:w="33"/><text x="42.2734%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (33 samples, 0.03%)</title><rect x="42.0234%" y="885" width="0.0280%" height="15" fill="rgb(237,172,34)" fg:x="49470" fg:w="33"/><text x="42.2734%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.03%)</title><rect x="42.0234%" y="869" width="0.0280%" height="15" fill="rgb(206,206,11)" fg:x="49470" fg:w="33"/><text x="42.2734%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (32 samples, 0.03%)</title><rect x="42.0243%" y="853" width="0.0272%" height="15" fill="rgb(214,149,29)" fg:x="49471" fg:w="32"/><text x="42.2743%" y="863.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (20 samples, 0.02%)</title><rect x="42.0345%" y="837" width="0.0170%" height="15" fill="rgb(208,123,3)" fg:x="49483" fg:w="20"/><text x="42.2845%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (20 samples, 0.02%)</title><rect x="42.0345%" y="821" width="0.0170%" height="15" fill="rgb(229,126,4)" fg:x="49483" fg:w="20"/><text x="42.2845%" y="831.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.02%)</title><rect x="42.0345%" y="805" width="0.0170%" height="15" fill="rgb(222,92,36)" fg:x="49483" fg:w="20"/><text x="42.2845%" y="815.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.02%)</title><rect x="42.0345%" y="789" width="0.0170%" height="15" fill="rgb(216,39,41)" fg:x="49483" fg:w="20"/><text x="42.2845%" y="799.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (20 samples, 0.02%)</title><rect x="42.0345%" y="773" width="0.0170%" height="15" fill="rgb(253,127,28)" fg:x="49483" fg:w="20"/><text x="42.2845%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (20 samples, 0.02%)</title><rect x="42.0345%" y="757" width="0.0170%" height="15" fill="rgb(249,152,51)" fg:x="49483" fg:w="20"/><text x="42.2845%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (20 samples, 0.02%)</title><rect x="42.0345%" y="741" width="0.0170%" height="15" fill="rgb(209,123,42)" fg:x="49483" fg:w="20"/><text x="42.2845%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (14 samples, 0.01%)</title><rect x="42.0396%" y="725" width="0.0119%" height="15" fill="rgb(241,118,22)" fg:x="49489" fg:w="14"/><text x="42.2896%" y="735.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="42.0396%" y="709" width="0.0119%" height="15" fill="rgb(208,25,7)" fg:x="49489" fg:w="14"/><text x="42.2896%" y="719.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="42.0396%" y="693" width="0.0119%" height="15" fill="rgb(243,144,39)" fg:x="49489" fg:w="14"/><text x="42.2896%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (14 samples, 0.01%)</title><rect x="42.0396%" y="677" width="0.0119%" height="15" fill="rgb(250,50,5)" fg:x="49489" fg:w="14"/><text x="42.2896%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (14 samples, 0.01%)</title><rect x="42.0396%" y="661" width="0.0119%" height="15" fill="rgb(207,67,11)" fg:x="49489" fg:w="14"/><text x="42.2896%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (14 samples, 0.01%)</title><rect x="42.0396%" y="645" width="0.0119%" height="15" fill="rgb(245,204,40)" fg:x="49489" fg:w="14"/><text x="42.2896%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (14 samples, 0.01%)</title><rect x="42.0396%" y="629" width="0.0119%" height="15" fill="rgb(238,228,24)" fg:x="49489" fg:w="14"/><text x="42.2896%" y="639.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (104 samples, 0.09%)</title><rect x="41.9699%" y="933" width="0.0883%" height="15" fill="rgb(217,116,22)" fg:x="49407" fg:w="104"/><text x="42.2199%" y="943.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1221" width="0.1172%" height="15" fill="rgb(234,98,12)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1231.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (138 samples, 0.12%)</title><rect x="41.9665%" y="1205" width="0.1172%" height="15" fill="rgb(242,170,50)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1215.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1189" width="0.1172%" height="15" fill="rgb(235,7,5)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1199.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1173" width="0.1172%" height="15" fill="rgb(241,114,28)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1157" width="0.1172%" height="15" fill="rgb(246,112,42)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1167.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1141" width="0.1172%" height="15" fill="rgb(248,228,14)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1151.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1125" width="0.1172%" height="15" fill="rgb(208,133,18)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1135.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1109" width="0.1172%" height="15" fill="rgb(207,35,49)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1093" width="0.1172%" height="15" fill="rgb(205,68,36)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1103.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1077" width="0.1172%" height="15" fill="rgb(245,62,40)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1061" width="0.1172%" height="15" fill="rgb(228,27,24)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1045" width="0.1172%" height="15" fill="rgb(253,19,12)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1055.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1029" width="0.1172%" height="15" fill="rgb(232,28,20)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1039.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="1013" width="0.1172%" height="15" fill="rgb(218,35,51)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1023.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="997" width="0.1172%" height="15" fill="rgb(212,90,40)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="981" width="0.1172%" height="15" fill="rgb(220,172,12)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="965" width="0.1172%" height="15" fill="rgb(226,159,20)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="975.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (138 samples, 0.12%)</title><rect x="41.9665%" y="949" width="0.1172%" height="15" fill="rgb(234,205,16)" fg:x="49403" fg:w="138"/><text x="42.2165%" y="959.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.03%)</title><rect x="42.0583%" y="933" width="0.0255%" height="15" fill="rgb(207,9,39)" fg:x="49511" fg:w="30"/><text x="42.3083%" y="943.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="42.0719%" y="917" width="0.0119%" height="15" fill="rgb(249,143,15)" fg:x="49527" fg:w="14"/><text x="42.3219%" y="927.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (14 samples, 0.01%)</title><rect x="42.0719%" y="901" width="0.0119%" height="15" fill="rgb(253,133,29)" fg:x="49527" fg:w="14"/><text x="42.3219%" y="911.50"></text></g><g><title>SizeComputer::write (14 samples, 0.01%)</title><rect x="42.0719%" y="885" width="0.0119%" height="15" fill="rgb(221,187,0)" fg:x="49527" fg:w="14"/><text x="42.3219%" y="895.50"></text></g><g><title>CheckBlock (870 samples, 0.74%)</title><rect x="41.3464%" y="1237" width="0.7390%" height="15" fill="rgb(205,204,26)" fg:x="48673" fg:w="870"/><text x="41.5964%" y="1247.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (37,617 samples, 31.95%)</title><rect x="10.1427%" y="1253" width="31.9546%" height="15" fill="rgb(224,68,54)" fg:x="11940" fg:w="37617"/><text x="10.3927%" y="1263.50">ChainstateManager::ProcessNewBlock</text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (24 samples, 0.02%)</title><rect x="42.1058%" y="1029" width="0.0204%" height="15" fill="rgb(209,67,4)" fg:x="49567" fg:w="24"/><text x="42.3558%" y="1039.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (24 samples, 0.02%)</title><rect x="42.1058%" y="1013" width="0.0204%" height="15" fill="rgb(228,229,18)" fg:x="49567" fg:w="24"/><text x="42.3558%" y="1023.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::allocate (24 samples, 0.02%)</title><rect x="42.1058%" y="997" width="0.0204%" height="15" fill="rgb(231,89,13)" fg:x="49567" fg:w="24"/><text x="42.3558%" y="1007.50"></text></g><g><title>std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (24 samples, 0.02%)</title><rect x="42.1058%" y="981" width="0.0204%" height="15" fill="rgb(210,182,18)" fg:x="49567" fg:w="24"/><text x="42.3558%" y="991.50"></text></g><g><title>std::__new_allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (24 samples, 0.02%)</title><rect x="42.1058%" y="965" width="0.0204%" height="15" fill="rgb(240,105,2)" fg:x="49567" fg:w="24"/><text x="42.3558%" y="975.50"></text></g><g><title>operator new (24 samples, 0.02%)</title><rect x="42.1058%" y="949" width="0.0204%" height="15" fill="rgb(207,170,50)" fg:x="49567" fg:w="24"/><text x="42.3558%" y="959.50"></text></g><g><title>malloc (24 samples, 0.02%)</title><rect x="42.1058%" y="933" width="0.0204%" height="15" fill="rgb(232,133,24)" fg:x="49567" fg:w="24"/><text x="42.3558%" y="943.50"></text></g><g><title>_int_malloc (22 samples, 0.02%)</title><rect x="42.1075%" y="917" width="0.0187%" height="15" fill="rgb(235,166,27)" fg:x="49569" fg:w="22"/><text x="42.3575%" y="927.50"></text></g><g><title>malloc_consolidate (14 samples, 0.01%)</title><rect x="42.1143%" y="901" width="0.0119%" height="15" fill="rgb(209,19,13)" fg:x="49577" fg:w="14"/><text x="42.3643%" y="911.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::reserve (25 samples, 0.02%)</title><rect x="42.1058%" y="1045" width="0.0212%" height="15" fill="rgb(226,79,39)" fg:x="49567" fg:w="25"/><text x="42.3558%" y="1055.50"></text></g><g><title>QuadRound (13 samples, 0.01%)</title><rect x="42.1279%" y="1013" width="0.0110%" height="15" fill="rgb(222,163,10)" fg:x="49593" fg:w="13"/><text x="42.3779%" y="1023.50"></text></g><g><title>ShiftMessageB (20 samples, 0.02%)</title><rect x="42.1390%" y="1013" width="0.0170%" height="15" fill="rgb(214,44,19)" fg:x="49606" fg:w="20"/><text x="42.3890%" y="1023.50"></text></g><g><title>ShiftMessageC (17 samples, 0.01%)</title><rect x="42.1415%" y="997" width="0.0144%" height="15" fill="rgb(210,217,13)" fg:x="49609" fg:w="17"/><text x="42.3915%" y="1007.50"></text></g><g><title>sha256_x86_shani::Transform (37 samples, 0.03%)</title><rect x="42.1279%" y="1029" width="0.0314%" height="15" fill="rgb(237,61,54)" fg:x="49593" fg:w="37"/><text x="42.3779%" y="1039.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (20 samples, 0.02%)</title><rect x="42.1594%" y="1029" width="0.0170%" height="15" fill="rgb(226,184,24)" fg:x="49630" fg:w="20"/><text x="42.4094%" y="1039.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (30 samples, 0.03%)</title><rect x="42.1848%" y="1029" width="0.0255%" height="15" fill="rgb(223,226,4)" fg:x="49660" fg:w="30"/><text x="42.4348%" y="1039.50"></text></g><g><title>DataStream::read (19 samples, 0.02%)</title><rect x="42.2222%" y="773" width="0.0161%" height="15" fill="rgb(210,26,41)" fg:x="49704" fg:w="19"/><text x="42.4722%" y="783.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="42.2435%" y="773" width="0.0127%" height="15" fill="rgb(220,221,6)" fg:x="49729" fg:w="15"/><text x="42.4935%" y="783.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="42.2655%" y="629" width="0.0136%" height="15" fill="rgb(225,89,49)" fg:x="49755" fg:w="16"/><text x="42.5155%" y="639.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="42.2672%" y="613" width="0.0119%" height="15" fill="rgb(218,70,45)" fg:x="49757" fg:w="14"/><text x="42.5172%" y="623.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (13 samples, 0.01%)</title><rect x="42.2681%" y="597" width="0.0110%" height="15" fill="rgb(238,166,21)" fg:x="49758" fg:w="13"/><text x="42.5181%" y="607.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (22 samples, 0.02%)</title><rect x="42.2630%" y="757" width="0.0187%" height="15" fill="rgb(224,141,44)" fg:x="49752" fg:w="22"/><text x="42.5130%" y="767.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (22 samples, 0.02%)</title><rect x="42.2630%" y="741" width="0.0187%" height="15" fill="rgb(230,12,49)" fg:x="49752" fg:w="22"/><text x="42.5130%" y="751.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (22 samples, 0.02%)</title><rect x="42.2630%" y="725" width="0.0187%" height="15" fill="rgb(212,174,12)" fg:x="49752" fg:w="22"/><text x="42.5130%" y="735.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (22 samples, 0.02%)</title><rect x="42.2630%" y="709" width="0.0187%" height="15" fill="rgb(246,67,9)" fg:x="49752" fg:w="22"/><text x="42.5130%" y="719.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (22 samples, 0.02%)</title><rect x="42.2630%" y="693" width="0.0187%" height="15" fill="rgb(239,35,23)" fg:x="49752" fg:w="22"/><text x="42.5130%" y="703.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (19 samples, 0.02%)</title><rect x="42.2655%" y="677" width="0.0161%" height="15" fill="rgb(211,167,0)" fg:x="49755" fg:w="19"/><text x="42.5155%" y="687.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (19 samples, 0.02%)</title><rect x="42.2655%" y="661" width="0.0161%" height="15" fill="rgb(225,119,45)" fg:x="49755" fg:w="19"/><text x="42.5155%" y="671.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.02%)</title><rect x="42.2655%" y="645" width="0.0161%" height="15" fill="rgb(210,162,6)" fg:x="49755" fg:w="19"/><text x="42.5155%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (25 samples, 0.02%)</title><rect x="42.2630%" y="773" width="0.0212%" height="15" fill="rgb(208,118,35)" fg:x="49752" fg:w="25"/><text x="42.5130%" y="783.50"></text></g><g><title>__lll_lock_wake_private (108 samples, 0.09%)</title><rect x="42.3157%" y="629" width="0.0917%" height="15" fill="rgb(239,4,53)" fg:x="49814" fg:w="108"/><text x="42.5657%" y="639.50"></text></g><g><title>[unknown] (108 samples, 0.09%)</title><rect x="42.3157%" y="613" width="0.0917%" height="15" fill="rgb(213,130,21)" fg:x="49814" fg:w="108"/><text x="42.5657%" y="623.50"></text></g><g><title>[unknown] (106 samples, 0.09%)</title><rect x="42.3174%" y="597" width="0.0900%" height="15" fill="rgb(235,148,0)" fg:x="49816" fg:w="106"/><text x="42.5674%" y="607.50"></text></g><g><title>[unknown] (104 samples, 0.09%)</title><rect x="42.3191%" y="581" width="0.0883%" height="15" fill="rgb(244,224,18)" fg:x="49818" fg:w="104"/><text x="42.5691%" y="591.50"></text></g><g><title>[unknown] (92 samples, 0.08%)</title><rect x="42.3293%" y="565" width="0.0782%" height="15" fill="rgb(211,214,4)" fg:x="49830" fg:w="92"/><text x="42.5793%" y="575.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="42.3352%" y="549" width="0.0722%" height="15" fill="rgb(206,119,25)" fg:x="49837" fg:w="85"/><text x="42.5852%" y="559.50"></text></g><g><title>[unknown] (74 samples, 0.06%)</title><rect x="42.3445%" y="533" width="0.0629%" height="15" fill="rgb(243,93,47)" fg:x="49848" fg:w="74"/><text x="42.5945%" y="543.50"></text></g><g><title>[unknown] (68 samples, 0.06%)</title><rect x="42.3496%" y="517" width="0.0578%" height="15" fill="rgb(224,194,6)" fg:x="49854" fg:w="68"/><text x="42.5996%" y="527.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="42.3955%" y="501" width="0.0119%" height="15" fill="rgb(243,229,6)" fg:x="49908" fg:w="14"/><text x="42.6455%" y="511.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (794 samples, 0.67%)</title><rect x="42.3029%" y="741" width="0.6745%" height="15" fill="rgb(207,23,50)" fg:x="49799" fg:w="794"/><text x="42.5529%" y="751.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (794 samples, 0.67%)</title><rect x="42.3029%" y="725" width="0.6745%" height="15" fill="rgb(253,192,32)" fg:x="49799" fg:w="794"/><text x="42.5529%" y="735.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (794 samples, 0.67%)</title><rect x="42.3029%" y="709" width="0.6745%" height="15" fill="rgb(213,21,6)" fg:x="49799" fg:w="794"/><text x="42.5529%" y="719.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (794 samples, 0.67%)</title><rect x="42.3029%" y="693" width="0.6745%" height="15" fill="rgb(243,151,13)" fg:x="49799" fg:w="794"/><text x="42.5529%" y="703.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (794 samples, 0.67%)</title><rect x="42.3029%" y="677" width="0.6745%" height="15" fill="rgb(233,165,41)" fg:x="49799" fg:w="794"/><text x="42.5529%" y="687.50"></text></g><g><title>operator new (792 samples, 0.67%)</title><rect x="42.3046%" y="661" width="0.6728%" height="15" fill="rgb(246,176,45)" fg:x="49801" fg:w="792"/><text x="42.5546%" y="671.50"></text></g><g><title>malloc (789 samples, 0.67%)</title><rect x="42.3072%" y="645" width="0.6702%" height="15" fill="rgb(217,170,52)" fg:x="49804" fg:w="789"/><text x="42.5572%" y="655.50"></text></g><g><title>_int_malloc (671 samples, 0.57%)</title><rect x="42.4074%" y="629" width="0.5700%" height="15" fill="rgb(214,203,54)" fg:x="49922" fg:w="671"/><text x="42.6574%" y="639.50"></text></g><g><title>malloc_consolidate (397 samples, 0.34%)</title><rect x="42.6402%" y="613" width="0.3372%" height="15" fill="rgb(248,215,49)" fg:x="50196" fg:w="397"/><text x="42.8902%" y="623.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (796 samples, 0.68%)</title><rect x="42.3021%" y="757" width="0.6762%" height="15" fill="rgb(208,46,10)" fg:x="49798" fg:w="796"/><text x="42.5521%" y="767.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (17 samples, 0.01%)</title><rect x="43.0122%" y="533" width="0.0144%" height="15" fill="rgb(254,5,31)" fg:x="50634" fg:w="17"/><text x="43.2622%" y="543.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (17 samples, 0.01%)</title><rect x="43.0122%" y="517" width="0.0144%" height="15" fill="rgb(222,104,33)" fg:x="50634" fg:w="17"/><text x="43.2622%" y="527.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (17 samples, 0.01%)</title><rect x="43.0122%" y="501" width="0.0144%" height="15" fill="rgb(248,49,16)" fg:x="50634" fg:w="17"/><text x="43.2622%" y="511.50"></text></g><g><title>malloc (17 samples, 0.01%)</title><rect x="43.0122%" y="485" width="0.0144%" height="15" fill="rgb(232,198,41)" fg:x="50634" fg:w="17"/><text x="43.2622%" y="495.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (50 samples, 0.04%)</title><rect x="43.0046%" y="549" width="0.0425%" height="15" fill="rgb(214,125,3)" fg:x="50625" fg:w="50"/><text x="43.2546%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="43.0309%" y="533" width="0.0161%" height="15" fill="rgb(229,220,28)" fg:x="50656" fg:w="19"/><text x="43.2809%" y="543.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (84 samples, 0.07%)</title><rect x="42.9842%" y="757" width="0.0714%" height="15" fill="rgb(222,64,37)" fg:x="50601" fg:w="84"/><text x="43.2342%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (84 samples, 0.07%)</title><rect x="42.9842%" y="741" width="0.0714%" height="15" fill="rgb(249,184,13)" fg:x="50601" fg:w="84"/><text x="43.2342%" y="751.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.07%)</title><rect x="42.9842%" y="725" width="0.0714%" height="15" fill="rgb(252,176,6)" fg:x="50601" fg:w="84"/><text x="43.2342%" y="735.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.07%)</title><rect x="42.9842%" y="709" width="0.0714%" height="15" fill="rgb(228,153,7)" fg:x="50601" fg:w="84"/><text x="43.2342%" y="719.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (84 samples, 0.07%)</title><rect x="42.9842%" y="693" width="0.0714%" height="15" fill="rgb(242,193,5)" fg:x="50601" fg:w="84"/><text x="43.2342%" y="703.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (84 samples, 0.07%)</title><rect x="42.9842%" y="677" width="0.0714%" height="15" fill="rgb(232,140,9)" fg:x="50601" fg:w="84"/><text x="43.2342%" y="687.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (84 samples, 0.07%)</title><rect x="42.9842%" y="661" width="0.0714%" height="15" fill="rgb(213,222,16)" fg:x="50601" fg:w="84"/><text x="43.2342%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (69 samples, 0.06%)</title><rect x="42.9969%" y="645" width="0.0586%" height="15" fill="rgb(222,75,50)" fg:x="50616" fg:w="69"/><text x="43.2469%" y="655.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (69 samples, 0.06%)</title><rect x="42.9969%" y="629" width="0.0586%" height="15" fill="rgb(205,180,2)" fg:x="50616" fg:w="69"/><text x="43.2469%" y="639.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (69 samples, 0.06%)</title><rect x="42.9969%" y="613" width="0.0586%" height="15" fill="rgb(216,34,7)" fg:x="50616" fg:w="69"/><text x="43.2469%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (69 samples, 0.06%)</title><rect x="42.9969%" y="597" width="0.0586%" height="15" fill="rgb(253,16,32)" fg:x="50616" fg:w="69"/><text x="43.2469%" y="607.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (69 samples, 0.06%)</title><rect x="42.9969%" y="581" width="0.0586%" height="15" fill="rgb(208,97,28)" fg:x="50616" fg:w="69"/><text x="43.2469%" y="591.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (69 samples, 0.06%)</title><rect x="42.9969%" y="565" width="0.0586%" height="15" fill="rgb(225,92,11)" fg:x="50616" fg:w="69"/><text x="43.2469%" y="575.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (12 samples, 0.01%)</title><rect x="43.0573%" y="677" width="0.0102%" height="15" fill="rgb(243,38,12)" fg:x="50687" fg:w="12"/><text x="43.3073%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.01%)</title><rect x="43.0556%" y="757" width="0.0127%" height="15" fill="rgb(208,139,16)" fg:x="50685" fg:w="15"/><text x="43.3056%" y="767.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (13 samples, 0.01%)</title><rect x="43.0573%" y="741" width="0.0110%" height="15" fill="rgb(227,24,9)" fg:x="50687" fg:w="13"/><text x="43.3073%" y="751.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (13 samples, 0.01%)</title><rect x="43.0573%" y="725" width="0.0110%" height="15" fill="rgb(206,62,11)" fg:x="50687" fg:w="13"/><text x="43.3073%" y="735.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (13 samples, 0.01%)</title><rect x="43.0573%" y="709" width="0.0110%" height="15" fill="rgb(228,134,27)" fg:x="50687" fg:w="13"/><text x="43.3073%" y="719.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (13 samples, 0.01%)</title><rect x="43.0573%" y="693" width="0.0110%" height="15" fill="rgb(205,55,33)" fg:x="50687" fg:w="13"/><text x="43.3073%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (928 samples, 0.79%)</title><rect x="42.2842%" y="773" width="0.7883%" height="15" fill="rgb(243,75,43)" fg:x="49777" fg:w="928"/><text x="42.5342%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (1,014 samples, 0.86%)</title><rect x="42.2137%" y="837" width="0.8614%" height="15" fill="rgb(223,27,42)" fg:x="49694" fg:w="1014"/><text x="42.4637%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1,014 samples, 0.86%)</title><rect x="42.2137%" y="821" width="0.8614%" height="15" fill="rgb(232,189,33)" fg:x="49694" fg:w="1014"/><text x="42.4637%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (1,014 samples, 0.86%)</title><rect x="42.2137%" y="805" width="0.8614%" height="15" fill="rgb(210,9,39)" fg:x="49694" fg:w="1014"/><text x="42.4637%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1,014 samples, 0.86%)</title><rect x="42.2137%" y="789" width="0.8614%" height="15" fill="rgb(242,85,26)" fg:x="49694" fg:w="1014"/><text x="42.4637%" y="799.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="43.0768%" y="773" width="0.0127%" height="15" fill="rgb(248,44,4)" fg:x="50710" fg:w="15"/><text x="43.3268%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (16 samples, 0.01%)</title><rect x="43.0895%" y="773" width="0.0136%" height="15" fill="rgb(250,96,46)" fg:x="50725" fg:w="16"/><text x="43.3395%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="43.1031%" y="773" width="0.0161%" height="15" fill="rgb(229,116,26)" fg:x="50741" fg:w="19"/><text x="43.3531%" y="783.50"></text></g><g><title>__lll_lock_wake_private (86 samples, 0.07%)</title><rect x="43.1448%" y="629" width="0.0731%" height="15" fill="rgb(246,94,34)" fg:x="50790" fg:w="86"/><text x="43.3948%" y="639.50"></text></g><g><title>[unknown] (86 samples, 0.07%)</title><rect x="43.1448%" y="613" width="0.0731%" height="15" fill="rgb(251,73,21)" fg:x="50790" fg:w="86"/><text x="43.3948%" y="623.50"></text></g><g><title>[unknown] (84 samples, 0.07%)</title><rect x="43.1464%" y="597" width="0.0714%" height="15" fill="rgb(254,121,25)" fg:x="50792" fg:w="84"/><text x="43.3964%" y="607.50"></text></g><g><title>[unknown] (83 samples, 0.07%)</title><rect x="43.1473%" y="581" width="0.0705%" height="15" fill="rgb(215,161,49)" fg:x="50793" fg:w="83"/><text x="43.3973%" y="591.50"></text></g><g><title>[unknown] (75 samples, 0.06%)</title><rect x="43.1541%" y="565" width="0.0637%" height="15" fill="rgb(221,43,13)" fg:x="50801" fg:w="75"/><text x="43.4041%" y="575.50"></text></g><g><title>[unknown] (69 samples, 0.06%)</title><rect x="43.1592%" y="549" width="0.0586%" height="15" fill="rgb(249,5,37)" fg:x="50807" fg:w="69"/><text x="43.4092%" y="559.50"></text></g><g><title>[unknown] (59 samples, 0.05%)</title><rect x="43.1677%" y="533" width="0.0501%" height="15" fill="rgb(226,25,44)" fg:x="50817" fg:w="59"/><text x="43.4177%" y="543.50"></text></g><g><title>[unknown] (56 samples, 0.05%)</title><rect x="43.1702%" y="517" width="0.0476%" height="15" fill="rgb(238,189,16)" fg:x="50820" fg:w="56"/><text x="43.4202%" y="527.50"></text></g><g><title>malloc_consolidate (99 samples, 0.08%)</title><rect x="43.3333%" y="613" width="0.0841%" height="15" fill="rgb(251,186,8)" fg:x="51012" fg:w="99"/><text x="43.5833%" y="623.50"></text></g><g><title>_int_malloc (236 samples, 0.20%)</title><rect x="43.2178%" y="629" width="0.2005%" height="15" fill="rgb(254,34,31)" fg:x="50876" fg:w="236"/><text x="43.4678%" y="639.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (334 samples, 0.28%)</title><rect x="43.1354%" y="757" width="0.2837%" height="15" fill="rgb(225,215,27)" fg:x="50779" fg:w="334"/><text x="43.3854%" y="767.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (333 samples, 0.28%)</title><rect x="43.1363%" y="741" width="0.2829%" height="15" fill="rgb(221,192,48)" fg:x="50780" fg:w="333"/><text x="43.3863%" y="751.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (333 samples, 0.28%)</title><rect x="43.1363%" y="725" width="0.2829%" height="15" fill="rgb(219,137,20)" fg:x="50780" fg:w="333"/><text x="43.3863%" y="735.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (333 samples, 0.28%)</title><rect x="43.1363%" y="709" width="0.2829%" height="15" fill="rgb(219,84,11)" fg:x="50780" fg:w="333"/><text x="43.3863%" y="719.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::allocate (333 samples, 0.28%)</title><rect x="43.1363%" y="693" width="0.2829%" height="15" fill="rgb(224,10,23)" fg:x="50780" fg:w="333"/><text x="43.3863%" y="703.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::allocate (333 samples, 0.28%)</title><rect x="43.1363%" y="677" width="0.2829%" height="15" fill="rgb(248,22,39)" fg:x="50780" fg:w="333"/><text x="43.3863%" y="687.50"></text></g><g><title>operator new (333 samples, 0.28%)</title><rect x="43.1363%" y="661" width="0.2829%" height="15" fill="rgb(212,154,20)" fg:x="50780" fg:w="333"/><text x="43.3863%" y="671.50"></text></g><g><title>malloc (332 samples, 0.28%)</title><rect x="43.1371%" y="645" width="0.2820%" height="15" fill="rgb(236,199,50)" fg:x="50781" fg:w="332"/><text x="43.3871%" y="655.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.02%)</title><rect x="43.4225%" y="549" width="0.0153%" height="15" fill="rgb(211,9,17)" fg:x="51117" fg:w="18"/><text x="43.6725%" y="559.50"></text></g><g><title>__lll_lock_wake_private (59 samples, 0.05%)</title><rect x="43.4667%" y="469" width="0.0501%" height="15" fill="rgb(243,216,36)" fg:x="51169" fg:w="59"/><text x="43.7167%" y="479.50"></text></g><g><title>[unknown] (59 samples, 0.05%)</title><rect x="43.4667%" y="453" width="0.0501%" height="15" fill="rgb(250,2,10)" fg:x="51169" fg:w="59"/><text x="43.7167%" y="463.50"></text></g><g><title>[unknown] (59 samples, 0.05%)</title><rect x="43.4667%" y="437" width="0.0501%" height="15" fill="rgb(226,50,48)" fg:x="51169" fg:w="59"/><text x="43.7167%" y="447.50"></text></g><g><title>[unknown] (58 samples, 0.05%)</title><rect x="43.4676%" y="421" width="0.0493%" height="15" fill="rgb(243,81,16)" fg:x="51170" fg:w="58"/><text x="43.7176%" y="431.50"></text></g><g><title>[unknown] (56 samples, 0.05%)</title><rect x="43.4692%" y="405" width="0.0476%" height="15" fill="rgb(250,14,2)" fg:x="51172" fg:w="56"/><text x="43.7192%" y="415.50"></text></g><g><title>[unknown] (54 samples, 0.05%)</title><rect x="43.4709%" y="389" width="0.0459%" height="15" fill="rgb(233,135,29)" fg:x="51174" fg:w="54"/><text x="43.7209%" y="399.50"></text></g><g><title>[unknown] (50 samples, 0.04%)</title><rect x="43.4743%" y="373" width="0.0425%" height="15" fill="rgb(224,64,43)" fg:x="51178" fg:w="50"/><text x="43.7243%" y="383.50"></text></g><g><title>[unknown] (47 samples, 0.04%)</title><rect x="43.4769%" y="357" width="0.0399%" height="15" fill="rgb(238,84,13)" fg:x="51181" fg:w="47"/><text x="43.7269%" y="367.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="43.5066%" y="341" width="0.0102%" height="15" fill="rgb(253,48,26)" fg:x="51216" fg:w="12"/><text x="43.7566%" y="351.50"></text></g><g><title>_int_malloc (33 samples, 0.03%)</title><rect x="43.5168%" y="469" width="0.0280%" height="15" fill="rgb(205,223,31)" fg:x="51228" fg:w="33"/><text x="43.7668%" y="479.50"></text></g><g><title>malloc (98 samples, 0.08%)</title><rect x="43.4625%" y="485" width="0.0832%" height="15" fill="rgb(221,41,32)" fg:x="51164" fg:w="98"/><text x="43.7125%" y="495.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (103 samples, 0.09%)</title><rect x="43.4591%" y="533" width="0.0875%" height="15" fill="rgb(213,158,31)" fg:x="51160" fg:w="103"/><text x="43.7091%" y="543.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (102 samples, 0.09%)</title><rect x="43.4599%" y="517" width="0.0866%" height="15" fill="rgb(245,126,43)" fg:x="51161" fg:w="102"/><text x="43.7099%" y="527.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (102 samples, 0.09%)</title><rect x="43.4599%" y="501" width="0.0866%" height="15" fill="rgb(227,7,22)" fg:x="51161" fg:w="102"/><text x="43.7099%" y="511.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (142 samples, 0.12%)</title><rect x="43.4378%" y="549" width="0.1206%" height="15" fill="rgb(252,90,44)" fg:x="51135" fg:w="142"/><text x="43.6878%" y="559.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (199 samples, 0.17%)</title><rect x="43.4200%" y="757" width="0.1690%" height="15" fill="rgb(253,91,0)" fg:x="51114" fg:w="199"/><text x="43.6700%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (199 samples, 0.17%)</title><rect x="43.4200%" y="741" width="0.1690%" height="15" fill="rgb(252,175,49)" fg:x="51114" fg:w="199"/><text x="43.6700%" y="751.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (199 samples, 0.17%)</title><rect x="43.4200%" y="725" width="0.1690%" height="15" fill="rgb(246,150,1)" fg:x="51114" fg:w="199"/><text x="43.6700%" y="735.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (199 samples, 0.17%)</title><rect x="43.4200%" y="709" width="0.1690%" height="15" fill="rgb(241,192,25)" fg:x="51114" fg:w="199"/><text x="43.6700%" y="719.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (199 samples, 0.17%)</title><rect x="43.4200%" y="693" width="0.1690%" height="15" fill="rgb(239,187,11)" fg:x="51114" fg:w="199"/><text x="43.6700%" y="703.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (199 samples, 0.17%)</title><rect x="43.4200%" y="677" width="0.1690%" height="15" fill="rgb(218,202,51)" fg:x="51114" fg:w="199"/><text x="43.6700%" y="687.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (199 samples, 0.17%)</title><rect x="43.4200%" y="661" width="0.1690%" height="15" fill="rgb(225,176,8)" fg:x="51114" fg:w="199"/><text x="43.6700%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (198 samples, 0.17%)</title><rect x="43.4208%" y="645" width="0.1682%" height="15" fill="rgb(219,122,41)" fg:x="51115" fg:w="198"/><text x="43.6708%" y="655.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (198 samples, 0.17%)</title><rect x="43.4208%" y="629" width="0.1682%" height="15" fill="rgb(248,140,20)" fg:x="51115" fg:w="198"/><text x="43.6708%" y="639.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (198 samples, 0.17%)</title><rect x="43.4208%" y="613" width="0.1682%" height="15" fill="rgb(245,41,37)" fg:x="51115" fg:w="198"/><text x="43.6708%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (198 samples, 0.17%)</title><rect x="43.4208%" y="597" width="0.1682%" height="15" fill="rgb(235,82,39)" fg:x="51115" fg:w="198"/><text x="43.6708%" y="607.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (197 samples, 0.17%)</title><rect x="43.4217%" y="581" width="0.1673%" height="15" fill="rgb(230,108,42)" fg:x="51116" fg:w="197"/><text x="43.6717%" y="591.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (197 samples, 0.17%)</title><rect x="43.4217%" y="565" width="0.1673%" height="15" fill="rgb(215,150,50)" fg:x="51116" fg:w="197"/><text x="43.6717%" y="575.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (26 samples, 0.02%)</title><rect x="43.5669%" y="549" width="0.0221%" height="15" fill="rgb(233,212,5)" fg:x="51287" fg:w="26"/><text x="43.8169%" y="559.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (608 samples, 0.52%)</title><rect x="43.0751%" y="837" width="0.5165%" height="15" fill="rgb(245,80,22)" fg:x="50708" fg:w="608"/><text x="43.3251%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (608 samples, 0.52%)</title><rect x="43.0751%" y="821" width="0.5165%" height="15" fill="rgb(238,129,16)" fg:x="50708" fg:w="608"/><text x="43.3251%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (608 samples, 0.52%)</title><rect x="43.0751%" y="805" width="0.5165%" height="15" fill="rgb(240,19,0)" fg:x="50708" fg:w="608"/><text x="43.3251%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (608 samples, 0.52%)</title><rect x="43.0751%" y="789" width="0.5165%" height="15" fill="rgb(232,42,35)" fg:x="50708" fg:w="608"/><text x="43.3251%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (556 samples, 0.47%)</title><rect x="43.1193%" y="773" width="0.4723%" height="15" fill="rgb(223,130,24)" fg:x="50760" fg:w="556"/><text x="43.3693%" y="783.50"></text></g><g><title>__lll_lock_wake_private (144 samples, 0.12%)</title><rect x="43.6222%" y="629" width="0.1223%" height="15" fill="rgb(237,16,22)" fg:x="51352" fg:w="144"/><text x="43.8722%" y="639.50"></text></g><g><title>[unknown] (144 samples, 0.12%)</title><rect x="43.6222%" y="613" width="0.1223%" height="15" fill="rgb(248,192,20)" fg:x="51352" fg:w="144"/><text x="43.8722%" y="623.50"></text></g><g><title>[unknown] (142 samples, 0.12%)</title><rect x="43.6239%" y="597" width="0.1206%" height="15" fill="rgb(233,167,2)" fg:x="51354" fg:w="142"/><text x="43.8739%" y="607.50"></text></g><g><title>[unknown] (142 samples, 0.12%)</title><rect x="43.6239%" y="581" width="0.1206%" height="15" fill="rgb(252,71,44)" fg:x="51354" fg:w="142"/><text x="43.8739%" y="591.50"></text></g><g><title>[unknown] (130 samples, 0.11%)</title><rect x="43.6340%" y="565" width="0.1104%" height="15" fill="rgb(238,37,47)" fg:x="51366" fg:w="130"/><text x="43.8840%" y="575.50"></text></g><g><title>[unknown] (126 samples, 0.11%)</title><rect x="43.6374%" y="549" width="0.1070%" height="15" fill="rgb(214,202,54)" fg:x="51370" fg:w="126"/><text x="43.8874%" y="559.50"></text></g><g><title>[unknown] (102 samples, 0.09%)</title><rect x="43.6578%" y="533" width="0.0866%" height="15" fill="rgb(254,165,40)" fg:x="51394" fg:w="102"/><text x="43.9078%" y="543.50"></text></g><g><title>[unknown] (96 samples, 0.08%)</title><rect x="43.6629%" y="517" width="0.0815%" height="15" fill="rgb(246,173,38)" fg:x="51400" fg:w="96"/><text x="43.9129%" y="527.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="43.7258%" y="501" width="0.0187%" height="15" fill="rgb(215,3,27)" fg:x="51474" fg:w="22"/><text x="43.9758%" y="511.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="43.7334%" y="485" width="0.0110%" height="15" fill="rgb(239,169,51)" fg:x="51483" fg:w="13"/><text x="43.9834%" y="495.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (252 samples, 0.21%)</title><rect x="43.6077%" y="741" width="0.2141%" height="15" fill="rgb(212,5,25)" fg:x="51335" fg:w="252"/><text x="43.8577%" y="751.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (252 samples, 0.21%)</title><rect x="43.6077%" y="725" width="0.2141%" height="15" fill="rgb(243,45,17)" fg:x="51335" fg:w="252"/><text x="43.8577%" y="735.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (252 samples, 0.21%)</title><rect x="43.6077%" y="709" width="0.2141%" height="15" fill="rgb(242,97,9)" fg:x="51335" fg:w="252"/><text x="43.8577%" y="719.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (252 samples, 0.21%)</title><rect x="43.6077%" y="693" width="0.2141%" height="15" fill="rgb(228,71,31)" fg:x="51335" fg:w="252"/><text x="43.8577%" y="703.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (252 samples, 0.21%)</title><rect x="43.6077%" y="677" width="0.2141%" height="15" fill="rgb(252,184,16)" fg:x="51335" fg:w="252"/><text x="43.8577%" y="687.50"></text></g><g><title>operator new (251 samples, 0.21%)</title><rect x="43.6086%" y="661" width="0.2132%" height="15" fill="rgb(236,169,46)" fg:x="51336" fg:w="251"/><text x="43.8586%" y="671.50"></text></g><g><title>malloc (249 samples, 0.21%)</title><rect x="43.6103%" y="645" width="0.2115%" height="15" fill="rgb(207,17,47)" fg:x="51338" fg:w="249"/><text x="43.8603%" y="655.50"></text></g><g><title>_int_malloc (91 samples, 0.08%)</title><rect x="43.7445%" y="629" width="0.0773%" height="15" fill="rgb(206,201,28)" fg:x="51496" fg:w="91"/><text x="43.9945%" y="639.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (272 samples, 0.23%)</title><rect x="43.5950%" y="757" width="0.2311%" height="15" fill="rgb(224,184,23)" fg:x="51320" fg:w="272"/><text x="43.8450%" y="767.50"></text></g><g><title>DataStream::read (13 samples, 0.01%)</title><rect x="43.8498%" y="709" width="0.0110%" height="15" fill="rgb(208,139,48)" fg:x="51620" fg:w="13"/><text x="44.0998%" y="719.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (14 samples, 0.01%)</title><rect x="43.8498%" y="725" width="0.0119%" height="15" fill="rgb(208,130,10)" fg:x="51620" fg:w="14"/><text x="44.0998%" y="735.50"></text></g><g><title>__lll_lock_wait_private (14 samples, 0.01%)</title><rect x="43.9110%" y="581" width="0.0119%" height="15" fill="rgb(211,213,45)" fg:x="51692" fg:w="14"/><text x="44.1610%" y="591.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="43.9118%" y="565" width="0.0110%" height="15" fill="rgb(235,100,30)" fg:x="51693" fg:w="13"/><text x="44.1618%" y="575.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="43.9118%" y="549" width="0.0110%" height="15" fill="rgb(206,144,31)" fg:x="51693" fg:w="13"/><text x="44.1618%" y="559.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="43.9118%" y="533" width="0.0110%" height="15" fill="rgb(224,200,26)" fg:x="51693" fg:w="13"/><text x="44.1618%" y="543.50"></text></g><g><title>__lll_lock_wake_private (220 samples, 0.19%)</title><rect x="43.9229%" y="581" width="0.1869%" height="15" fill="rgb(247,104,53)" fg:x="51706" fg:w="220"/><text x="44.1729%" y="591.50"></text></g><g><title>[unknown] (219 samples, 0.19%)</title><rect x="43.9237%" y="565" width="0.1860%" height="15" fill="rgb(220,14,17)" fg:x="51707" fg:w="219"/><text x="44.1737%" y="575.50"></text></g><g><title>[unknown] (218 samples, 0.19%)</title><rect x="43.9246%" y="549" width="0.1852%" height="15" fill="rgb(230,140,40)" fg:x="51708" fg:w="218"/><text x="44.1746%" y="559.50"></text></g><g><title>[unknown] (216 samples, 0.18%)</title><rect x="43.9263%" y="533" width="0.1835%" height="15" fill="rgb(229,2,41)" fg:x="51710" fg:w="216"/><text x="44.1763%" y="543.50"></text></g><g><title>[unknown] (196 samples, 0.17%)</title><rect x="43.9433%" y="517" width="0.1665%" height="15" fill="rgb(232,89,16)" fg:x="51730" fg:w="196"/><text x="44.1933%" y="527.50"></text></g><g><title>[unknown] (190 samples, 0.16%)</title><rect x="43.9484%" y="501" width="0.1614%" height="15" fill="rgb(247,59,52)" fg:x="51736" fg:w="190"/><text x="44.1984%" y="511.50"></text></g><g><title>[unknown] (161 samples, 0.14%)</title><rect x="43.9730%" y="485" width="0.1368%" height="15" fill="rgb(226,110,21)" fg:x="51765" fg:w="161"/><text x="44.2230%" y="495.50"></text></g><g><title>[unknown] (151 samples, 0.13%)</title><rect x="43.9815%" y="469" width="0.1283%" height="15" fill="rgb(224,176,43)" fg:x="51775" fg:w="151"/><text x="44.2315%" y="479.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="44.0885%" y="453" width="0.0212%" height="15" fill="rgb(221,73,6)" fg:x="51901" fg:w="25"/><text x="44.3385%" y="463.50"></text></g><g><title>_int_malloc (190 samples, 0.16%)</title><rect x="44.1123%" y="581" width="0.1614%" height="15" fill="rgb(232,78,19)" fg:x="51929" fg:w="190"/><text x="44.3623%" y="591.50"></text></g><g><title>malloc_consolidate (33 samples, 0.03%)</title><rect x="44.2457%" y="565" width="0.0280%" height="15" fill="rgb(233,112,48)" fg:x="52086" fg:w="33"/><text x="44.4957%" y="575.50"></text></g><g><title>malloc (442 samples, 0.38%)</title><rect x="43.8991%" y="597" width="0.3755%" height="15" fill="rgb(243,131,47)" fg:x="51678" fg:w="442"/><text x="44.1491%" y="607.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (458 samples, 0.39%)</title><rect x="43.8872%" y="693" width="0.3891%" height="15" fill="rgb(226,51,1)" fg:x="51664" fg:w="458"/><text x="44.1372%" y="703.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (458 samples, 0.39%)</title><rect x="43.8872%" y="677" width="0.3891%" height="15" fill="rgb(247,58,7)" fg:x="51664" fg:w="458"/><text x="44.1372%" y="687.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (458 samples, 0.39%)</title><rect x="43.8872%" y="661" width="0.3891%" height="15" fill="rgb(209,7,32)" fg:x="51664" fg:w="458"/><text x="44.1372%" y="671.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (458 samples, 0.39%)</title><rect x="43.8872%" y="645" width="0.3891%" height="15" fill="rgb(209,39,41)" fg:x="51664" fg:w="458"/><text x="44.1372%" y="655.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (458 samples, 0.39%)</title><rect x="43.8872%" y="629" width="0.3891%" height="15" fill="rgb(226,182,46)" fg:x="51664" fg:w="458"/><text x="44.1372%" y="639.50"></text></g><g><title>operator new (454 samples, 0.39%)</title><rect x="43.8906%" y="613" width="0.3857%" height="15" fill="rgb(230,219,10)" fg:x="51668" fg:w="454"/><text x="44.1406%" y="623.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (498 samples, 0.42%)</title><rect x="43.8685%" y="709" width="0.4230%" height="15" fill="rgb(227,175,30)" fg:x="51642" fg:w="498"/><text x="44.1185%" y="719.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (17 samples, 0.01%)</title><rect x="44.2771%" y="693" width="0.0144%" height="15" fill="rgb(217,2,50)" fg:x="52123" fg:w="17"/><text x="44.5271%" y="703.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (17 samples, 0.01%)</title><rect x="44.2771%" y="677" width="0.0144%" height="15" fill="rgb(229,160,0)" fg:x="52123" fg:w="17"/><text x="44.5271%" y="687.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (17 samples, 0.01%)</title><rect x="44.2771%" y="661" width="0.0144%" height="15" fill="rgb(207,78,37)" fg:x="52123" fg:w="17"/><text x="44.5271%" y="671.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (17 samples, 0.01%)</title><rect x="44.2771%" y="645" width="0.0144%" height="15" fill="rgb(225,57,0)" fg:x="52123" fg:w="17"/><text x="44.5271%" y="655.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (17 samples, 0.01%)</title><rect x="44.2771%" y="629" width="0.0144%" height="15" fill="rgb(232,154,2)" fg:x="52123" fg:w="17"/><text x="44.5271%" y="639.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (17 samples, 0.01%)</title><rect x="44.2771%" y="613" width="0.0144%" height="15" fill="rgb(241,212,25)" fg:x="52123" fg:w="17"/><text x="44.5271%" y="623.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (15 samples, 0.01%)</title><rect x="44.2788%" y="597" width="0.0127%" height="15" fill="rgb(226,69,20)" fg:x="52125" fg:w="15"/><text x="44.5288%" y="607.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (15 samples, 0.01%)</title><rect x="44.2788%" y="581" width="0.0127%" height="15" fill="rgb(247,184,54)" fg:x="52125" fg:w="15"/><text x="44.5288%" y="591.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.02%)</title><rect x="44.2924%" y="709" width="0.0212%" height="15" fill="rgb(210,145,0)" fg:x="52141" fg:w="25"/><text x="44.5424%" y="719.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (13 samples, 0.01%)</title><rect x="44.3136%" y="709" width="0.0110%" height="15" fill="rgb(253,82,12)" fg:x="52166" fg:w="13"/><text x="44.5636%" y="719.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (14 samples, 0.01%)</title><rect x="44.3349%" y="437" width="0.0119%" height="15" fill="rgb(245,42,11)" fg:x="52191" fg:w="14"/><text x="44.5849%" y="447.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (64 samples, 0.05%)</title><rect x="44.3281%" y="517" width="0.0544%" height="15" fill="rgb(219,147,32)" fg:x="52183" fg:w="64"/><text x="44.5781%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (64 samples, 0.05%)</title><rect x="44.3281%" y="501" width="0.0544%" height="15" fill="rgb(246,12,7)" fg:x="52183" fg:w="64"/><text x="44.5781%" y="511.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (64 samples, 0.05%)</title><rect x="44.3281%" y="485" width="0.0544%" height="15" fill="rgb(243,50,9)" fg:x="52183" fg:w="64"/><text x="44.5781%" y="495.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (64 samples, 0.05%)</title><rect x="44.3281%" y="469" width="0.0544%" height="15" fill="rgb(219,149,6)" fg:x="52183" fg:w="64"/><text x="44.5781%" y="479.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (64 samples, 0.05%)</title><rect x="44.3281%" y="453" width="0.0544%" height="15" fill="rgb(241,51,42)" fg:x="52183" fg:w="64"/><text x="44.5781%" y="463.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (34 samples, 0.03%)</title><rect x="44.3536%" y="437" width="0.0289%" height="15" fill="rgb(226,128,27)" fg:x="52213" fg:w="34"/><text x="44.6036%" y="447.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (34 samples, 0.03%)</title><rect x="44.3536%" y="421" width="0.0289%" height="15" fill="rgb(244,144,4)" fg:x="52213" fg:w="34"/><text x="44.6036%" y="431.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="709" width="0.0646%" height="15" fill="rgb(221,4,13)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="719.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="693" width="0.0646%" height="15" fill="rgb(208,170,28)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="703.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="677" width="0.0646%" height="15" fill="rgb(226,131,13)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="687.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="661" width="0.0646%" height="15" fill="rgb(215,72,41)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="671.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="645" width="0.0646%" height="15" fill="rgb(243,108,20)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="655.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="629" width="0.0646%" height="15" fill="rgb(230,189,17)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="639.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="613" width="0.0646%" height="15" fill="rgb(220,50,17)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="623.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="597" width="0.0646%" height="15" fill="rgb(248,152,48)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="607.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="581" width="0.0646%" height="15" fill="rgb(244,91,11)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="591.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="565" width="0.0646%" height="15" fill="rgb(220,157,5)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="575.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="549" width="0.0646%" height="15" fill="rgb(253,137,8)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="559.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (76 samples, 0.06%)</title><rect x="44.3247%" y="533" width="0.0646%" height="15" fill="rgb(217,137,51)" fg:x="52179" fg:w="76"/><text x="44.5747%" y="543.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (621 samples, 0.53%)</title><rect x="43.8685%" y="725" width="0.5275%" height="15" fill="rgb(218,209,53)" fg:x="51642" fg:w="621"/><text x="44.1185%" y="735.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (659 samples, 0.56%)</title><rect x="43.8447%" y="757" width="0.5598%" height="15" fill="rgb(249,137,25)" fg:x="51614" fg:w="659"/><text x="44.0947%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (659 samples, 0.56%)</title><rect x="43.8447%" y="741" width="0.5598%" height="15" fill="rgb(239,155,26)" fg:x="51614" fg:w="659"/><text x="44.0947%" y="751.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (962 samples, 0.82%)</title><rect x="43.5916%" y="837" width="0.8172%" height="15" fill="rgb(227,85,46)" fg:x="51316" fg:w="962"/><text x="43.8416%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (962 samples, 0.82%)</title><rect x="43.5916%" y="821" width="0.8172%" height="15" fill="rgb(251,107,43)" fg:x="51316" fg:w="962"/><text x="43.8416%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (962 samples, 0.82%)</title><rect x="43.5916%" y="805" width="0.8172%" height="15" fill="rgb(234,170,33)" fg:x="51316" fg:w="962"/><text x="43.8416%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (962 samples, 0.82%)</title><rect x="43.5916%" y="789" width="0.8172%" height="15" fill="rgb(206,29,35)" fg:x="51316" fg:w="962"/><text x="43.8416%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (962 samples, 0.82%)</title><rect x="43.5916%" y="773" width="0.8172%" height="15" fill="rgb(227,138,25)" fg:x="51316" fg:w="962"/><text x="43.8416%" y="783.50"></text></g><g><title>QuadRound (14 samples, 0.01%)</title><rect x="44.4173%" y="757" width="0.0119%" height="15" fill="rgb(249,131,35)" fg:x="52288" fg:w="14"/><text x="44.6673%" y="767.50"></text></g><g><title>ShiftMessageB (19 samples, 0.02%)</title><rect x="44.4292%" y="757" width="0.0161%" height="15" fill="rgb(239,6,40)" fg:x="52302" fg:w="19"/><text x="44.6792%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (41 samples, 0.03%)</title><rect x="44.4139%" y="773" width="0.0348%" height="15" fill="rgb(246,136,47)" fg:x="52284" fg:w="41"/><text x="44.6639%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (46 samples, 0.04%)</title><rect x="44.4113%" y="837" width="0.0391%" height="15" fill="rgb(253,58,26)" fg:x="52281" fg:w="46"/><text x="44.6613%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (46 samples, 0.04%)</title><rect x="44.4113%" y="821" width="0.0391%" height="15" fill="rgb(237,141,10)" fg:x="52281" fg:w="46"/><text x="44.6613%" y="831.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (45 samples, 0.04%)</title><rect x="44.4122%" y="805" width="0.0382%" height="15" fill="rgb(234,156,12)" fg:x="52282" fg:w="45"/><text x="44.6622%" y="815.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (45 samples, 0.04%)</title><rect x="44.4122%" y="789" width="0.0382%" height="15" fill="rgb(243,224,36)" fg:x="52282" fg:w="45"/><text x="44.6622%" y="799.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2,635 samples, 2.24%)</title><rect x="42.2129%" y="885" width="2.2384%" height="15" fill="rgb(205,229,51)" fg:x="49693" fg:w="2635"/><text x="42.4629%" y="895.50">C..</text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2,634 samples, 2.24%)</title><rect x="42.2137%" y="869" width="2.2375%" height="15" fill="rgb(223,189,4)" fg:x="49694" fg:w="2634"/><text x="42.4637%" y="879.50">v..</text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (2,634 samples, 2.24%)</title><rect x="42.2137%" y="853" width="2.2375%" height="15" fill="rgb(249,167,54)" fg:x="49694" fg:w="2634"/><text x="42.4637%" y="863.50">v..</text></g><g><title>CSHA256::Write (24 samples, 0.02%)</title><rect x="44.4614%" y="773" width="0.0204%" height="15" fill="rgb(218,34,28)" fg:x="52340" fg:w="24"/><text x="44.7114%" y="783.50"></text></g><g><title>CTransaction::ComputeHash (14 samples, 0.01%)</title><rect x="44.4827%" y="773" width="0.0119%" height="15" fill="rgb(232,109,42)" fg:x="52365" fg:w="14"/><text x="44.7327%" y="783.50"></text></g><g><title>sha256_x86_shani::Transform (22 samples, 0.02%)</title><rect x="44.4963%" y="773" width="0.0187%" height="15" fill="rgb(248,214,46)" fg:x="52381" fg:w="22"/><text x="44.7463%" y="783.50"></text></g><g><title>CSHA256::Write (31 samples, 0.03%)</title><rect x="44.5251%" y="501" width="0.0263%" height="15" fill="rgb(244,216,40)" fg:x="52415" fg:w="31"/><text x="44.7751%" y="511.50"></text></g><g><title>ShiftMessageB (21 samples, 0.02%)</title><rect x="44.5617%" y="485" width="0.0178%" height="15" fill="rgb(231,226,31)" fg:x="52458" fg:w="21"/><text x="44.8117%" y="495.50"></text></g><g><title>ShiftMessageC (13 samples, 0.01%)</title><rect x="44.5685%" y="469" width="0.0110%" height="15" fill="rgb(238,38,43)" fg:x="52466" fg:w="13"/><text x="44.8185%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (37 samples, 0.03%)</title><rect x="44.5515%" y="501" width="0.0314%" height="15" fill="rgb(208,88,43)" fg:x="52446" fg:w="37"/><text x="44.8015%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (74 samples, 0.06%)</title><rect x="44.5251%" y="565" width="0.0629%" height="15" fill="rgb(205,136,37)" fg:x="52415" fg:w="74"/><text x="44.7751%" y="575.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (74 samples, 0.06%)</title><rect x="44.5251%" y="549" width="0.0629%" height="15" fill="rgb(237,34,14)" fg:x="52415" fg:w="74"/><text x="44.7751%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (74 samples, 0.06%)</title><rect x="44.5251%" y="533" width="0.0629%" height="15" fill="rgb(236,193,44)" fg:x="52415" fg:w="74"/><text x="44.7751%" y="543.50"></text></g><g><title>HashWriter::write (74 samples, 0.06%)</title><rect x="44.5251%" y="517" width="0.0629%" height="15" fill="rgb(231,48,10)" fg:x="52415" fg:w="74"/><text x="44.7751%" y="527.50"></text></g><g><title>CSHA256::Write (12 samples, 0.01%)</title><rect x="44.5906%" y="405" width="0.0102%" height="15" fill="rgb(213,141,34)" fg:x="52492" fg:w="12"/><text x="44.8406%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.03%)</title><rect x="44.5880%" y="469" width="0.0263%" height="15" fill="rgb(249,130,34)" fg:x="52489" fg:w="31"/><text x="44.8380%" y="479.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.03%)</title><rect x="44.5880%" y="453" width="0.0263%" height="15" fill="rgb(219,42,41)" fg:x="52489" fg:w="31"/><text x="44.8380%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (31 samples, 0.03%)</title><rect x="44.5880%" y="437" width="0.0263%" height="15" fill="rgb(224,100,54)" fg:x="52489" fg:w="31"/><text x="44.8380%" y="447.50"></text></g><g><title>HashWriter::write (31 samples, 0.03%)</title><rect x="44.5880%" y="421" width="0.0263%" height="15" fill="rgb(229,200,27)" fg:x="52489" fg:w="31"/><text x="44.8380%" y="431.50"></text></g><g><title>CSHA256::Write (20 samples, 0.02%)</title><rect x="44.6194%" y="341" width="0.0170%" height="15" fill="rgb(217,118,10)" fg:x="52526" fg:w="20"/><text x="44.8694%" y="351.50"></text></g><g><title>CSHA256::Write (42 samples, 0.04%)</title><rect x="44.6169%" y="357" width="0.0357%" height="15" fill="rgb(206,22,3)" fg:x="52523" fg:w="42"/><text x="44.8669%" y="367.50"></text></g><g><title>CTransaction::ComputeHash (20 samples, 0.02%)</title><rect x="44.6534%" y="357" width="0.0170%" height="15" fill="rgb(232,163,46)" fg:x="52566" fg:w="20"/><text x="44.9034%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (114 samples, 0.10%)</title><rect x="44.5880%" y="565" width="0.0968%" height="15" fill="rgb(206,95,13)" fg:x="52489" fg:w="114"/><text x="44.8380%" y="575.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (114 samples, 0.10%)</title><rect x="44.5880%" y="549" width="0.0968%" height="15" fill="rgb(253,154,18)" fg:x="52489" fg:w="114"/><text x="44.8380%" y="559.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (114 samples, 0.10%)</title><rect x="44.5880%" y="533" width="0.0968%" height="15" fill="rgb(219,32,23)" fg:x="52489" fg:w="114"/><text x="44.8380%" y="543.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (114 samples, 0.10%)</title><rect x="44.5880%" y="517" width="0.0968%" height="15" fill="rgb(230,191,45)" fg:x="52489" fg:w="114"/><text x="44.8380%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (114 samples, 0.10%)</title><rect x="44.5880%" y="501" width="0.0968%" height="15" fill="rgb(229,64,36)" fg:x="52489" fg:w="114"/><text x="44.8380%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (114 samples, 0.10%)</title><rect x="44.5880%" y="485" width="0.0968%" height="15" fill="rgb(205,129,25)" fg:x="52489" fg:w="114"/><text x="44.8380%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (83 samples, 0.07%)</title><rect x="44.6143%" y="469" width="0.0705%" height="15" fill="rgb(254,112,7)" fg:x="52520" fg:w="83"/><text x="44.8643%" y="479.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (83 samples, 0.07%)</title><rect x="44.6143%" y="453" width="0.0705%" height="15" fill="rgb(226,53,48)" fg:x="52520" fg:w="83"/><text x="44.8643%" y="463.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (83 samples, 0.07%)</title><rect x="44.6143%" y="437" width="0.0705%" height="15" fill="rgb(214,153,38)" fg:x="52520" fg:w="83"/><text x="44.8643%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (83 samples, 0.07%)</title><rect x="44.6143%" y="421" width="0.0705%" height="15" fill="rgb(243,101,7)" fg:x="52520" fg:w="83"/><text x="44.8643%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (83 samples, 0.07%)</title><rect x="44.6143%" y="405" width="0.0705%" height="15" fill="rgb(240,140,22)" fg:x="52520" fg:w="83"/><text x="44.8643%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (83 samples, 0.07%)</title><rect x="44.6143%" y="389" width="0.0705%" height="15" fill="rgb(235,114,2)" fg:x="52520" fg:w="83"/><text x="44.8643%" y="399.50"></text></g><g><title>HashWriter::write (83 samples, 0.07%)</title><rect x="44.6143%" y="373" width="0.0705%" height="15" fill="rgb(242,59,12)" fg:x="52520" fg:w="83"/><text x="44.8643%" y="383.50"></text></g><g><title>CSHA256::Write (16 samples, 0.01%)</title><rect x="44.6865%" y="453" width="0.0136%" height="15" fill="rgb(252,134,9)" fg:x="52605" fg:w="16"/><text x="44.9365%" y="463.50"></text></g><g><title>CSHA256::Write (13 samples, 0.01%)</title><rect x="44.7112%" y="405" width="0.0110%" height="15" fill="rgb(236,4,44)" fg:x="52634" fg:w="13"/><text x="44.9612%" y="415.50"></text></g><g><title>CSHA256::Write (49 samples, 0.04%)</title><rect x="44.7001%" y="421" width="0.0416%" height="15" fill="rgb(254,172,41)" fg:x="52621" fg:w="49"/><text x="44.9501%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (16 samples, 0.01%)</title><rect x="44.7418%" y="421" width="0.0136%" height="15" fill="rgb(244,63,20)" fg:x="52670" fg:w="16"/><text x="44.9918%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (68 samples, 0.06%)</title><rect x="44.7001%" y="453" width="0.0578%" height="15" fill="rgb(250,73,31)" fg:x="52621" fg:w="68"/><text x="44.9501%" y="463.50"></text></g><g><title>HashWriter::write (68 samples, 0.06%)</title><rect x="44.7001%" y="437" width="0.0578%" height="15" fill="rgb(241,38,36)" fg:x="52621" fg:w="68"/><text x="44.9501%" y="447.50"></text></g><g><title>CSHA256::Write (24 samples, 0.02%)</title><rect x="44.7715%" y="389" width="0.0204%" height="15" fill="rgb(245,211,2)" fg:x="52705" fg:w="24"/><text x="45.0215%" y="399.50"></text></g><g><title>sha256_x86_shani::Transform (14 samples, 0.01%)</title><rect x="44.7936%" y="389" width="0.0119%" height="15" fill="rgb(206,120,28)" fg:x="52731" fg:w="14"/><text x="45.0436%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (337 samples, 0.29%)</title><rect x="44.5251%" y="677" width="0.2863%" height="15" fill="rgb(211,59,34)" fg:x="52415" fg:w="337"/><text x="44.7751%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (337 samples, 0.29%)</title><rect x="44.5251%" y="661" width="0.2863%" height="15" fill="rgb(233,168,5)" fg:x="52415" fg:w="337"/><text x="44.7751%" y="671.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (337 samples, 0.29%)</title><rect x="44.5251%" y="645" width="0.2863%" height="15" fill="rgb(234,33,13)" fg:x="52415" fg:w="337"/><text x="44.7751%" y="655.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (337 samples, 0.29%)</title><rect x="44.5251%" y="629" width="0.2863%" height="15" fill="rgb(231,150,26)" fg:x="52415" fg:w="337"/><text x="44.7751%" y="639.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (337 samples, 0.29%)</title><rect x="44.5251%" y="613" width="0.2863%" height="15" fill="rgb(217,191,4)" fg:x="52415" fg:w="337"/><text x="44.7751%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (337 samples, 0.29%)</title><rect x="44.5251%" y="597" width="0.2863%" height="15" fill="rgb(246,198,38)" fg:x="52415" fg:w="337"/><text x="44.7751%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (337 samples, 0.29%)</title><rect x="44.5251%" y="581" width="0.2863%" height="15" fill="rgb(245,64,37)" fg:x="52415" fg:w="337"/><text x="44.7751%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (149 samples, 0.13%)</title><rect x="44.6848%" y="565" width="0.1266%" height="15" fill="rgb(250,30,36)" fg:x="52603" fg:w="149"/><text x="44.9348%" y="575.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (149 samples, 0.13%)</title><rect x="44.6848%" y="549" width="0.1266%" height="15" fill="rgb(217,86,53)" fg:x="52603" fg:w="149"/><text x="44.9348%" y="559.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (149 samples, 0.13%)</title><rect x="44.6848%" y="533" width="0.1266%" height="15" fill="rgb(228,157,16)" fg:x="52603" fg:w="149"/><text x="44.9348%" y="543.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (149 samples, 0.13%)</title><rect x="44.6848%" y="517" width="0.1266%" height="15" fill="rgb(217,59,31)" fg:x="52603" fg:w="149"/><text x="44.9348%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (149 samples, 0.13%)</title><rect x="44.6848%" y="501" width="0.1266%" height="15" fill="rgb(237,138,41)" fg:x="52603" fg:w="149"/><text x="44.9348%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (149 samples, 0.13%)</title><rect x="44.6848%" y="485" width="0.1266%" height="15" fill="rgb(227,91,49)" fg:x="52603" fg:w="149"/><text x="44.9348%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (149 samples, 0.13%)</title><rect x="44.6848%" y="469" width="0.1266%" height="15" fill="rgb(247,21,44)" fg:x="52603" fg:w="149"/><text x="44.9348%" y="479.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.04%)</title><rect x="44.7689%" y="453" width="0.0425%" height="15" fill="rgb(219,210,51)" fg:x="52702" fg:w="50"/><text x="45.0189%" y="463.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (49 samples, 0.04%)</title><rect x="44.7698%" y="437" width="0.0416%" height="15" fill="rgb(209,140,6)" fg:x="52703" fg:w="49"/><text x="45.0198%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (48 samples, 0.04%)</title><rect x="44.7706%" y="421" width="0.0408%" height="15" fill="rgb(221,188,24)" fg:x="52704" fg:w="48"/><text x="45.0206%" y="431.50"></text></g><g><title>HashWriter::write (48 samples, 0.04%)</title><rect x="44.7706%" y="405" width="0.0408%" height="15" fill="rgb(232,154,20)" fg:x="52704" fg:w="48"/><text x="45.0206%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (355 samples, 0.30%)</title><rect x="44.5150%" y="757" width="0.3016%" height="15" fill="rgb(244,137,50)" fg:x="52403" fg:w="355"/><text x="44.7650%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (355 samples, 0.30%)</title><rect x="44.5150%" y="741" width="0.3016%" height="15" fill="rgb(225,185,43)" fg:x="52403" fg:w="355"/><text x="44.7650%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (355 samples, 0.30%)</title><rect x="44.5150%" y="725" width="0.3016%" height="15" fill="rgb(213,205,38)" fg:x="52403" fg:w="355"/><text x="44.7650%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (355 samples, 0.30%)</title><rect x="44.5150%" y="709" width="0.3016%" height="15" fill="rgb(236,73,12)" fg:x="52403" fg:w="355"/><text x="44.7650%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (355 samples, 0.30%)</title><rect x="44.5150%" y="693" width="0.3016%" height="15" fill="rgb(235,219,13)" fg:x="52403" fg:w="355"/><text x="44.7650%" y="703.50"></text></g><g><title>CSHA256::Write (14 samples, 0.01%)</title><rect x="44.8310%" y="485" width="0.0119%" height="15" fill="rgb(218,59,36)" fg:x="52775" fg:w="14"/><text x="45.0810%" y="495.50"></text></g><g><title>CSHA256::Write (39 samples, 0.03%)</title><rect x="44.8199%" y="501" width="0.0331%" height="15" fill="rgb(205,110,39)" fg:x="52762" fg:w="39"/><text x="45.0699%" y="511.50"></text></g><g><title>ShiftMessageB (12 samples, 0.01%)</title><rect x="44.8590%" y="485" width="0.0102%" height="15" fill="rgb(218,206,42)" fg:x="52808" fg:w="12"/><text x="45.1090%" y="495.50"></text></g><g><title>sha256_x86_shani::Transform (21 samples, 0.02%)</title><rect x="44.8539%" y="501" width="0.0178%" height="15" fill="rgb(248,125,24)" fg:x="52802" fg:w="21"/><text x="45.1039%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (70 samples, 0.06%)</title><rect x="44.8182%" y="565" width="0.0595%" height="15" fill="rgb(242,28,27)" fg:x="52760" fg:w="70"/><text x="45.0682%" y="575.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (69 samples, 0.06%)</title><rect x="44.8191%" y="549" width="0.0586%" height="15" fill="rgb(216,228,15)" fg:x="52761" fg:w="69"/><text x="45.0691%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (69 samples, 0.06%)</title><rect x="44.8191%" y="533" width="0.0586%" height="15" fill="rgb(235,116,46)" fg:x="52761" fg:w="69"/><text x="45.0691%" y="543.50"></text></g><g><title>HashWriter::write (69 samples, 0.06%)</title><rect x="44.8191%" y="517" width="0.0586%" height="15" fill="rgb(224,18,32)" fg:x="52761" fg:w="69"/><text x="45.0691%" y="527.50"></text></g><g><title>CSHA256::Write (56 samples, 0.05%)</title><rect x="44.9066%" y="405" width="0.0476%" height="15" fill="rgb(252,5,12)" fg:x="52864" fg:w="56"/><text x="45.1566%" y="415.50"></text></g><g><title>CSHA256::Write (108 samples, 0.09%)</title><rect x="44.8870%" y="421" width="0.0917%" height="15" fill="rgb(251,36,5)" fg:x="52841" fg:w="108"/><text x="45.1370%" y="431.50"></text></g><g><title>_mm_add_epi32 (17 samples, 0.01%)</title><rect x="44.9822%" y="389" width="0.0144%" height="15" fill="rgb(217,53,14)" fg:x="52953" fg:w="17"/><text x="45.2322%" y="399.50"></text></g><g><title>_mm_sha256rnds2_epu32 (14 samples, 0.01%)</title><rect x="44.9966%" y="389" width="0.0119%" height="15" fill="rgb(215,86,45)" fg:x="52970" fg:w="14"/><text x="45.2466%" y="399.50"></text></g><g><title>QuadRound (34 samples, 0.03%)</title><rect x="44.9822%" y="405" width="0.0289%" height="15" fill="rgb(242,169,11)" fg:x="52953" fg:w="34"/><text x="45.2322%" y="415.50"></text></g><g><title>ShiftMessageA (16 samples, 0.01%)</title><rect x="45.0119%" y="389" width="0.0136%" height="15" fill="rgb(211,213,45)" fg:x="52988" fg:w="16"/><text x="45.2619%" y="399.50"></text></g><g><title>_mm_sha256msg1_epu32 (16 samples, 0.01%)</title><rect x="45.0119%" y="373" width="0.0136%" height="15" fill="rgb(205,88,11)" fg:x="52988" fg:w="16"/><text x="45.2619%" y="383.50"></text></g><g><title>ShiftMessageB (55 samples, 0.05%)</title><rect x="45.0119%" y="405" width="0.0467%" height="15" fill="rgb(252,69,26)" fg:x="52988" fg:w="55"/><text x="45.2619%" y="415.50"></text></g><g><title>ShiftMessageC (39 samples, 0.03%)</title><rect x="45.0255%" y="389" width="0.0331%" height="15" fill="rgb(246,123,37)" fg:x="53004" fg:w="39"/><text x="45.2755%" y="399.50"></text></g><g><title>_mm_sha256msg2_epu32 (20 samples, 0.02%)</title><rect x="45.0416%" y="373" width="0.0170%" height="15" fill="rgb(212,205,5)" fg:x="53023" fg:w="20"/><text x="45.2916%" y="383.50"></text></g><g><title>sha256_x86_shani::Transform (102 samples, 0.09%)</title><rect x="44.9788%" y="421" width="0.0866%" height="15" fill="rgb(253,148,0)" fg:x="52949" fg:w="102"/><text x="45.2288%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (232 samples, 0.20%)</title><rect x="44.8870%" y="453" width="0.1971%" height="15" fill="rgb(239,22,4)" fg:x="52841" fg:w="232"/><text x="45.1370%" y="463.50"></text></g><g><title>HashWriter::write (232 samples, 0.20%)</title><rect x="44.8870%" y="437" width="0.1971%" height="15" fill="rgb(226,26,53)" fg:x="52841" fg:w="232"/><text x="45.1370%" y="447.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.01%)</title><rect x="45.0739%" y="421" width="0.0102%" height="15" fill="rgb(225,229,45)" fg:x="53061" fg:w="12"/><text x="45.3239%" y="431.50"></text></g><g><title>CSHA256::Write (18 samples, 0.02%)</title><rect x="45.0934%" y="389" width="0.0153%" height="15" fill="rgb(220,60,37)" fg:x="53084" fg:w="18"/><text x="45.3434%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (353 samples, 0.30%)</title><rect x="44.8182%" y="677" width="0.2999%" height="15" fill="rgb(217,180,35)" fg:x="52760" fg:w="353"/><text x="45.0682%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (353 samples, 0.30%)</title><rect x="44.8182%" y="661" width="0.2999%" height="15" fill="rgb(229,7,53)" fg:x="52760" fg:w="353"/><text x="45.0682%" y="671.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (353 samples, 0.30%)</title><rect x="44.8182%" y="645" width="0.2999%" height="15" fill="rgb(254,137,3)" fg:x="52760" fg:w="353"/><text x="45.0682%" y="655.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (353 samples, 0.30%)</title><rect x="44.8182%" y="629" width="0.2999%" height="15" fill="rgb(215,140,41)" fg:x="52760" fg:w="353"/><text x="45.0682%" y="639.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (353 samples, 0.30%)</title><rect x="44.8182%" y="613" width="0.2999%" height="15" fill="rgb(250,80,15)" fg:x="52760" fg:w="353"/><text x="45.0682%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (353 samples, 0.30%)</title><rect x="44.8182%" y="597" width="0.2999%" height="15" fill="rgb(252,191,6)" fg:x="52760" fg:w="353"/><text x="45.0682%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (353 samples, 0.30%)</title><rect x="44.8182%" y="581" width="0.2999%" height="15" fill="rgb(246,217,18)" fg:x="52760" fg:w="353"/><text x="45.0682%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (283 samples, 0.24%)</title><rect x="44.8777%" y="565" width="0.2404%" height="15" fill="rgb(223,93,7)" fg:x="52830" fg:w="283"/><text x="45.1277%" y="575.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (283 samples, 0.24%)</title><rect x="44.8777%" y="549" width="0.2404%" height="15" fill="rgb(225,55,52)" fg:x="52830" fg:w="283"/><text x="45.1277%" y="559.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (283 samples, 0.24%)</title><rect x="44.8777%" y="533" width="0.2404%" height="15" fill="rgb(240,31,24)" fg:x="52830" fg:w="283"/><text x="45.1277%" y="543.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (283 samples, 0.24%)</title><rect x="44.8777%" y="517" width="0.2404%" height="15" fill="rgb(205,56,52)" fg:x="52830" fg:w="283"/><text x="45.1277%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (283 samples, 0.24%)</title><rect x="44.8777%" y="501" width="0.2404%" height="15" fill="rgb(246,146,12)" fg:x="52830" fg:w="283"/><text x="45.1277%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (283 samples, 0.24%)</title><rect x="44.8777%" y="485" width="0.2404%" height="15" fill="rgb(239,84,36)" fg:x="52830" fg:w="283"/><text x="45.1277%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (283 samples, 0.24%)</title><rect x="44.8777%" y="469" width="0.2404%" height="15" fill="rgb(207,41,40)" fg:x="52830" fg:w="283"/><text x="45.1277%" y="479.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.03%)</title><rect x="45.0917%" y="453" width="0.0263%" height="15" fill="rgb(241,179,25)" fg:x="53082" fg:w="31"/><text x="45.3417%" y="463.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (29 samples, 0.02%)</title><rect x="45.0934%" y="437" width="0.0246%" height="15" fill="rgb(210,0,34)" fg:x="53084" fg:w="29"/><text x="45.3434%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (29 samples, 0.02%)</title><rect x="45.0934%" y="421" width="0.0246%" height="15" fill="rgb(225,217,29)" fg:x="53084" fg:w="29"/><text x="45.3434%" y="431.50"></text></g><g><title>HashWriter::write (29 samples, 0.02%)</title><rect x="45.0934%" y="405" width="0.0246%" height="15" fill="rgb(216,191,38)" fg:x="53084" fg:w="29"/><text x="45.3434%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (362 samples, 0.31%)</title><rect x="44.8165%" y="757" width="0.3075%" height="15" fill="rgb(232,140,52)" fg:x="52758" fg:w="362"/><text x="45.0665%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (362 samples, 0.31%)</title><rect x="44.8165%" y="741" width="0.3075%" height="15" fill="rgb(223,158,51)" fg:x="52758" fg:w="362"/><text x="45.0665%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (362 samples, 0.31%)</title><rect x="44.8165%" y="725" width="0.3075%" height="15" fill="rgb(235,29,51)" fg:x="52758" fg:w="362"/><text x="45.0665%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (362 samples, 0.31%)</title><rect x="44.8165%" y="709" width="0.3075%" height="15" fill="rgb(215,181,18)" fg:x="52758" fg:w="362"/><text x="45.0665%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (362 samples, 0.31%)</title><rect x="44.8165%" y="693" width="0.3075%" height="15" fill="rgb(227,125,34)" fg:x="52758" fg:w="362"/><text x="45.0665%" y="703.50"></text></g><g><title>CTransaction::CTransaction (13 samples, 0.01%)</title><rect x="45.1308%" y="677" width="0.0110%" height="15" fill="rgb(230,197,49)" fg:x="53128" fg:w="13"/><text x="45.3808%" y="687.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (759 samples, 0.64%)</title><rect x="44.5150%" y="773" width="0.6448%" height="15" fill="rgb(239,141,16)" fg:x="52403" fg:w="759"/><text x="44.7650%" y="783.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (42 samples, 0.04%)</title><rect x="45.1240%" y="757" width="0.0357%" height="15" fill="rgb(225,105,43)" fg:x="53120" fg:w="42"/><text x="45.3740%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (42 samples, 0.04%)</title><rect x="45.1240%" y="741" width="0.0357%" height="15" fill="rgb(214,131,14)" fg:x="53120" fg:w="42"/><text x="45.3740%" y="751.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (42 samples, 0.04%)</title><rect x="45.1240%" y="725" width="0.0357%" height="15" fill="rgb(229,177,11)" fg:x="53120" fg:w="42"/><text x="45.3740%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (42 samples, 0.04%)</title><rect x="45.1240%" y="709" width="0.0357%" height="15" fill="rgb(231,180,14)" fg:x="53120" fg:w="42"/><text x="45.3740%" y="719.50"></text></g><g><title>HashWriter::write (42 samples, 0.04%)</title><rect x="45.1240%" y="693" width="0.0357%" height="15" fill="rgb(232,88,2)" fg:x="53120" fg:w="42"/><text x="45.3740%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (15 samples, 0.01%)</title><rect x="45.1470%" y="677" width="0.0127%" height="15" fill="rgb(205,220,8)" fg:x="53147" fg:w="15"/><text x="45.3970%" y="687.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (830 samples, 0.71%)</title><rect x="44.4614%" y="853" width="0.7051%" height="15" fill="rgb(225,23,53)" fg:x="52340" fg:w="830"/><text x="44.7114%" y="863.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (830 samples, 0.71%)</title><rect x="44.4614%" y="837" width="0.7051%" height="15" fill="rgb(213,62,29)" fg:x="52340" fg:w="830"/><text x="44.7114%" y="847.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (830 samples, 0.71%)</title><rect x="44.4614%" y="821" width="0.7051%" height="15" fill="rgb(227,75,7)" fg:x="52340" fg:w="830"/><text x="44.7114%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (830 samples, 0.71%)</title><rect x="44.4614%" y="805" width="0.7051%" height="15" fill="rgb(207,105,14)" fg:x="52340" fg:w="830"/><text x="44.7114%" y="815.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (830 samples, 0.71%)</title><rect x="44.4614%" y="789" width="0.7051%" height="15" fill="rgb(245,62,29)" fg:x="52340" fg:w="830"/><text x="44.7114%" y="799.50"></text></g><g><title>CSHA256::Finalize (18 samples, 0.02%)</title><rect x="45.1945%" y="805" width="0.0153%" height="15" fill="rgb(236,202,4)" fg:x="53203" fg:w="18"/><text x="45.4445%" y="815.50"></text></g><g><title>CSHA256::Reset (12 samples, 0.01%)</title><rect x="45.2098%" y="805" width="0.0102%" height="15" fill="rgb(250,67,1)" fg:x="53221" fg:w="12"/><text x="45.4598%" y="815.50"></text></g><g><title>CSHA256::Write (84 samples, 0.07%)</title><rect x="45.2200%" y="805" width="0.0714%" height="15" fill="rgb(253,115,44)" fg:x="53233" fg:w="84"/><text x="45.4700%" y="815.50"></text></g><g><title>memcpy (15 samples, 0.01%)</title><rect x="45.2786%" y="789" width="0.0127%" height="15" fill="rgb(251,139,18)" fg:x="53302" fg:w="15"/><text x="45.5286%" y="799.50"></text></g><g><title>ShiftMessageB (27 samples, 0.02%)</title><rect x="45.3143%" y="789" width="0.0229%" height="15" fill="rgb(218,22,32)" fg:x="53344" fg:w="27"/><text x="45.5643%" y="799.50"></text></g><g><title>ShiftMessageC (17 samples, 0.01%)</title><rect x="45.3228%" y="773" width="0.0144%" height="15" fill="rgb(243,53,5)" fg:x="53354" fg:w="17"/><text x="45.5728%" y="783.50"></text></g><g><title>sha256_x86_shani::Transform (45 samples, 0.04%)</title><rect x="45.3016%" y="805" width="0.0382%" height="15" fill="rgb(227,56,16)" fg:x="53329" fg:w="45"/><text x="45.5516%" y="815.50"></text></g><g><title>CSHA256::Write (213 samples, 0.18%)</title><rect x="45.1682%" y="821" width="0.1809%" height="15" fill="rgb(245,53,0)" fg:x="53172" fg:w="213"/><text x="45.4182%" y="831.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.01%)</title><rect x="45.3602%" y="789" width="0.0136%" height="15" fill="rgb(216,170,35)" fg:x="53398" fg:w="16"/><text x="45.6102%" y="799.50"></text></g><g><title>QuadRound (29 samples, 0.02%)</title><rect x="45.3602%" y="805" width="0.0246%" height="15" fill="rgb(211,200,8)" fg:x="53398" fg:w="29"/><text x="45.6102%" y="815.50"></text></g><g><title>_mm_add_epi32 (12 samples, 0.01%)</title><rect x="45.3942%" y="773" width="0.0102%" height="15" fill="rgb(228,204,44)" fg:x="53438" fg:w="12"/><text x="45.6442%" y="783.50"></text></g><g><title>ShiftMessageB (41 samples, 0.03%)</title><rect x="45.3857%" y="805" width="0.0348%" height="15" fill="rgb(214,121,17)" fg:x="53428" fg:w="41"/><text x="45.6357%" y="815.50"></text></g><g><title>ShiftMessageC (31 samples, 0.03%)</title><rect x="45.3942%" y="789" width="0.0263%" height="15" fill="rgb(233,64,38)" fg:x="53438" fg:w="31"/><text x="45.6442%" y="799.50"></text></g><g><title>_mm_sha256msg2_epu32 (17 samples, 0.01%)</title><rect x="45.4060%" y="773" width="0.0144%" height="15" fill="rgb(253,54,19)" fg:x="53452" fg:w="17"/><text x="45.6560%" y="783.50"></text></g><g><title>sha256_x86_shani::Transform (89 samples, 0.08%)</title><rect x="45.3542%" y="821" width="0.0756%" height="15" fill="rgb(253,94,18)" fg:x="53391" fg:w="89"/><text x="45.6042%" y="831.50"></text></g><g><title>CSHA256::Finalize (324 samples, 0.28%)</title><rect x="45.1665%" y="837" width="0.2752%" height="15" fill="rgb(227,57,52)" fg:x="53170" fg:w="324"/><text x="45.4165%" y="847.50"></text></g><g><title>HashWriter::GetHash (335 samples, 0.28%)</title><rect x="45.1665%" y="853" width="0.2846%" height="15" fill="rgb(230,228,50)" fg:x="53170" fg:w="335"/><text x="45.4165%" y="863.50"></text></g><g><title>CTransaction::ComputeHash (1,166 samples, 0.99%)</title><rect x="44.4614%" y="869" width="0.9905%" height="15" fill="rgb(217,205,27)" fg:x="52340" fg:w="1166"/><text x="44.7114%" y="879.50"></text></g><g><title>CSHA256::Write (64 samples, 0.05%)</title><rect x="45.4562%" y="757" width="0.0544%" height="15" fill="rgb(252,71,50)" fg:x="53511" fg:w="64"/><text x="45.7062%" y="767.50"></text></g><g><title>QuadRound (14 samples, 0.01%)</title><rect x="45.5216%" y="741" width="0.0119%" height="15" fill="rgb(209,86,4)" fg:x="53588" fg:w="14"/><text x="45.7716%" y="751.50"></text></g><g><title>ShiftMessageB (24 samples, 0.02%)</title><rect x="45.5343%" y="741" width="0.0204%" height="15" fill="rgb(229,94,0)" fg:x="53603" fg:w="24"/><text x="45.7843%" y="751.50"></text></g><g><title>ShiftMessageC (16 samples, 0.01%)</title><rect x="45.5411%" y="725" width="0.0136%" height="15" fill="rgb(252,223,21)" fg:x="53611" fg:w="16"/><text x="45.7911%" y="735.50"></text></g><g><title>sha256_x86_shani::Transform (55 samples, 0.05%)</title><rect x="45.5165%" y="757" width="0.0467%" height="15" fill="rgb(230,210,4)" fg:x="53582" fg:w="55"/><text x="45.7665%" y="767.50"></text></g><g><title>CSHA256::Write (29 samples, 0.02%)</title><rect x="45.5768%" y="485" width="0.0246%" height="15" fill="rgb(240,149,38)" fg:x="53653" fg:w="29"/><text x="45.8268%" y="495.50"></text></g><g><title>ShiftMessageB (13 samples, 0.01%)</title><rect x="45.6116%" y="469" width="0.0110%" height="15" fill="rgb(254,105,20)" fg:x="53694" fg:w="13"/><text x="45.8616%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (28 samples, 0.02%)</title><rect x="45.6014%" y="485" width="0.0238%" height="15" fill="rgb(253,87,46)" fg:x="53682" fg:w="28"/><text x="45.8514%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (63 samples, 0.05%)</title><rect x="45.5768%" y="549" width="0.0535%" height="15" fill="rgb(253,116,33)" fg:x="53653" fg:w="63"/><text x="45.8268%" y="559.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (63 samples, 0.05%)</title><rect x="45.5768%" y="533" width="0.0535%" height="15" fill="rgb(229,198,5)" fg:x="53653" fg:w="63"/><text x="45.8268%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (63 samples, 0.05%)</title><rect x="45.5768%" y="517" width="0.0535%" height="15" fill="rgb(242,38,37)" fg:x="53653" fg:w="63"/><text x="45.8268%" y="527.50"></text></g><g><title>HashWriter::write (63 samples, 0.05%)</title><rect x="45.5768%" y="501" width="0.0535%" height="15" fill="rgb(242,69,53)" fg:x="53653" fg:w="63"/><text x="45.8268%" y="511.50"></text></g><g><title>CSHA256::Write (15 samples, 0.01%)</title><rect x="45.6312%" y="389" width="0.0127%" height="15" fill="rgb(249,80,16)" fg:x="53717" fg:w="15"/><text x="45.8812%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.02%)</title><rect x="45.6303%" y="453" width="0.0221%" height="15" fill="rgb(206,128,11)" fg:x="53716" fg:w="26"/><text x="45.8803%" y="463.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.02%)</title><rect x="45.6303%" y="437" width="0.0221%" height="15" fill="rgb(212,35,20)" fg:x="53716" fg:w="26"/><text x="45.8803%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (26 samples, 0.02%)</title><rect x="45.6303%" y="421" width="0.0221%" height="15" fill="rgb(236,79,13)" fg:x="53716" fg:w="26"/><text x="45.8803%" y="431.50"></text></g><g><title>HashWriter::write (26 samples, 0.02%)</title><rect x="45.6303%" y="405" width="0.0221%" height="15" fill="rgb(233,123,3)" fg:x="53716" fg:w="26"/><text x="45.8803%" y="415.50"></text></g><g><title>CSHA256::Write (24 samples, 0.02%)</title><rect x="45.6668%" y="325" width="0.0204%" height="15" fill="rgb(214,93,52)" fg:x="53759" fg:w="24"/><text x="45.9168%" y="335.50"></text></g><g><title>CSHA256::Write (49 samples, 0.04%)</title><rect x="45.6532%" y="341" width="0.0416%" height="15" fill="rgb(251,37,40)" fg:x="53743" fg:w="49"/><text x="45.9032%" y="351.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (85 samples, 0.07%)</title><rect x="45.6303%" y="549" width="0.0722%" height="15" fill="rgb(227,80,54)" fg:x="53716" fg:w="85"/><text x="45.8803%" y="559.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (85 samples, 0.07%)</title><rect x="45.6303%" y="533" width="0.0722%" height="15" fill="rgb(254,48,11)" fg:x="53716" fg:w="85"/><text x="45.8803%" y="543.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (85 samples, 0.07%)</title><rect x="45.6303%" y="517" width="0.0722%" height="15" fill="rgb(235,193,26)" fg:x="53716" fg:w="85"/><text x="45.8803%" y="527.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (85 samples, 0.07%)</title><rect x="45.6303%" y="501" width="0.0722%" height="15" fill="rgb(229,99,21)" fg:x="53716" fg:w="85"/><text x="45.8803%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (85 samples, 0.07%)</title><rect x="45.6303%" y="485" width="0.0722%" height="15" fill="rgb(211,140,41)" fg:x="53716" fg:w="85"/><text x="45.8803%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (85 samples, 0.07%)</title><rect x="45.6303%" y="469" width="0.0722%" height="15" fill="rgb(240,227,30)" fg:x="53716" fg:w="85"/><text x="45.8803%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (59 samples, 0.05%)</title><rect x="45.6524%" y="453" width="0.0501%" height="15" fill="rgb(215,224,45)" fg:x="53742" fg:w="59"/><text x="45.9024%" y="463.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (59 samples, 0.05%)</title><rect x="45.6524%" y="437" width="0.0501%" height="15" fill="rgb(206,123,31)" fg:x="53742" fg:w="59"/><text x="45.9024%" y="447.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (59 samples, 0.05%)</title><rect x="45.6524%" y="421" width="0.0501%" height="15" fill="rgb(210,138,16)" fg:x="53742" fg:w="59"/><text x="45.9024%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (59 samples, 0.05%)</title><rect x="45.6524%" y="405" width="0.0501%" height="15" fill="rgb(228,57,28)" fg:x="53742" fg:w="59"/><text x="45.9024%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (59 samples, 0.05%)</title><rect x="45.6524%" y="389" width="0.0501%" height="15" fill="rgb(242,170,10)" fg:x="53742" fg:w="59"/><text x="45.9024%" y="399.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (59 samples, 0.05%)</title><rect x="45.6524%" y="373" width="0.0501%" height="15" fill="rgb(228,214,39)" fg:x="53742" fg:w="59"/><text x="45.9024%" y="383.50"></text></g><g><title>HashWriter::write (59 samples, 0.05%)</title><rect x="45.6524%" y="357" width="0.0501%" height="15" fill="rgb(218,179,33)" fg:x="53742" fg:w="59"/><text x="45.9024%" y="367.50"></text></g><g><title>CSHA256::Write (22 samples, 0.02%)</title><rect x="45.7085%" y="405" width="0.0187%" height="15" fill="rgb(235,193,39)" fg:x="53808" fg:w="22"/><text x="45.9585%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (26 samples, 0.02%)</title><rect x="45.7085%" y="437" width="0.0221%" height="15" fill="rgb(219,221,36)" fg:x="53808" fg:w="26"/><text x="45.9585%" y="447.50"></text></g><g><title>HashWriter::write (26 samples, 0.02%)</title><rect x="45.7085%" y="421" width="0.0221%" height="15" fill="rgb(248,218,19)" fg:x="53808" fg:w="26"/><text x="45.9585%" y="431.50"></text></g><g><title>CSHA256::Write (18 samples, 0.02%)</title><rect x="45.7433%" y="373" width="0.0153%" height="15" fill="rgb(205,50,9)" fg:x="53849" fg:w="18"/><text x="45.9933%" y="383.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (237 samples, 0.20%)</title><rect x="45.5768%" y="661" width="0.2013%" height="15" fill="rgb(238,81,28)" fg:x="53653" fg:w="237"/><text x="45.8268%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (237 samples, 0.20%)</title><rect x="45.5768%" y="645" width="0.2013%" height="15" fill="rgb(235,110,19)" fg:x="53653" fg:w="237"/><text x="45.8268%" y="655.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (237 samples, 0.20%)</title><rect x="45.5768%" y="629" width="0.2013%" height="15" fill="rgb(214,7,14)" fg:x="53653" fg:w="237"/><text x="45.8268%" y="639.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (237 samples, 0.20%)</title><rect x="45.5768%" y="613" width="0.2013%" height="15" fill="rgb(211,77,3)" fg:x="53653" fg:w="237"/><text x="45.8268%" y="623.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (237 samples, 0.20%)</title><rect x="45.5768%" y="597" width="0.2013%" height="15" fill="rgb(229,5,9)" fg:x="53653" fg:w="237"/><text x="45.8268%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (237 samples, 0.20%)</title><rect x="45.5768%" y="581" width="0.2013%" height="15" fill="rgb(225,90,11)" fg:x="53653" fg:w="237"/><text x="45.8268%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (237 samples, 0.20%)</title><rect x="45.5768%" y="565" width="0.2013%" height="15" fill="rgb(242,56,8)" fg:x="53653" fg:w="237"/><text x="45.8268%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (89 samples, 0.08%)</title><rect x="45.7025%" y="549" width="0.0756%" height="15" fill="rgb(249,212,39)" fg:x="53801" fg:w="89"/><text x="45.9525%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (89 samples, 0.08%)</title><rect x="45.7025%" y="533" width="0.0756%" height="15" fill="rgb(236,90,9)" fg:x="53801" fg:w="89"/><text x="45.9525%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (89 samples, 0.08%)</title><rect x="45.7025%" y="517" width="0.0756%" height="15" fill="rgb(206,88,35)" fg:x="53801" fg:w="89"/><text x="45.9525%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (89 samples, 0.08%)</title><rect x="45.7025%" y="501" width="0.0756%" height="15" fill="rgb(205,126,30)" fg:x="53801" fg:w="89"/><text x="45.9525%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (89 samples, 0.08%)</title><rect x="45.7025%" y="485" width="0.0756%" height="15" fill="rgb(230,176,12)" fg:x="53801" fg:w="89"/><text x="45.9525%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (89 samples, 0.08%)</title><rect x="45.7025%" y="469" width="0.0756%" height="15" fill="rgb(243,19,9)" fg:x="53801" fg:w="89"/><text x="45.9525%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (89 samples, 0.08%)</title><rect x="45.7025%" y="453" width="0.0756%" height="15" fill="rgb(245,171,17)" fg:x="53801" fg:w="89"/><text x="45.9525%" y="463.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.04%)</title><rect x="45.7407%" y="437" width="0.0374%" height="15" fill="rgb(227,52,21)" fg:x="53846" fg:w="44"/><text x="45.9907%" y="447.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.03%)</title><rect x="45.7433%" y="421" width="0.0348%" height="15" fill="rgb(238,69,14)" fg:x="53849" fg:w="41"/><text x="45.9933%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (41 samples, 0.03%)</title><rect x="45.7433%" y="405" width="0.0348%" height="15" fill="rgb(241,156,39)" fg:x="53849" fg:w="41"/><text x="45.9933%" y="415.50"></text></g><g><title>HashWriter::write (41 samples, 0.03%)</title><rect x="45.7433%" y="389" width="0.0348%" height="15" fill="rgb(212,227,28)" fg:x="53849" fg:w="41"/><text x="45.9933%" y="399.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (22 samples, 0.02%)</title><rect x="45.7781%" y="661" width="0.0187%" height="15" fill="rgb(209,118,27)" fg:x="53890" fg:w="22"/><text x="46.0281%" y="671.50"></text></g><g><title>CSHA256::Write (16 samples, 0.01%)</title><rect x="45.7968%" y="597" width="0.0136%" height="15" fill="rgb(226,102,5)" fg:x="53912" fg:w="16"/><text x="46.0468%" y="607.50"></text></g><g><title>CTransaction::ComputeWitnessHash (21 samples, 0.02%)</title><rect x="45.8129%" y="597" width="0.0178%" height="15" fill="rgb(223,34,3)" fg:x="53931" fg:w="21"/><text x="46.0629%" y="607.50"></text></g><g><title>CTransaction::ComputeWitnessHash (12 samples, 0.01%)</title><rect x="45.8206%" y="581" width="0.0102%" height="15" fill="rgb(221,81,38)" fg:x="53940" fg:w="12"/><text x="46.0706%" y="591.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (318 samples, 0.27%)</title><rect x="45.5674%" y="741" width="0.2701%" height="15" fill="rgb(236,219,28)" fg:x="53642" fg:w="318"/><text x="45.8174%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (318 samples, 0.27%)</title><rect x="45.5674%" y="725" width="0.2701%" height="15" fill="rgb(213,200,14)" fg:x="53642" fg:w="318"/><text x="45.8174%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (318 samples, 0.27%)</title><rect x="45.5674%" y="709" width="0.2701%" height="15" fill="rgb(240,33,19)" fg:x="53642" fg:w="318"/><text x="45.8174%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (318 samples, 0.27%)</title><rect x="45.5674%" y="693" width="0.2701%" height="15" fill="rgb(233,113,27)" fg:x="53642" fg:w="318"/><text x="45.8174%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (318 samples, 0.27%)</title><rect x="45.5674%" y="677" width="0.2701%" height="15" fill="rgb(220,221,18)" fg:x="53642" fg:w="318"/><text x="45.8174%" y="687.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="45.7968%" y="661" width="0.0408%" height="15" fill="rgb(238,92,8)" fg:x="53912" fg:w="48"/><text x="46.0468%" y="671.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="45.7968%" y="645" width="0.0408%" height="15" fill="rgb(222,164,16)" fg:x="53912" fg:w="48"/><text x="46.0468%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (48 samples, 0.04%)</title><rect x="45.7968%" y="629" width="0.0408%" height="15" fill="rgb(241,119,3)" fg:x="53912" fg:w="48"/><text x="46.0468%" y="639.50"></text></g><g><title>HashWriter::write (48 samples, 0.04%)</title><rect x="45.7968%" y="613" width="0.0408%" height="15" fill="rgb(241,44,8)" fg:x="53912" fg:w="48"/><text x="46.0468%" y="623.50"></text></g><g><title>CSHA256::Write (24 samples, 0.02%)</title><rect x="45.8410%" y="485" width="0.0204%" height="15" fill="rgb(230,36,40)" fg:x="53964" fg:w="24"/><text x="46.0910%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (35 samples, 0.03%)</title><rect x="45.8401%" y="549" width="0.0297%" height="15" fill="rgb(243,16,36)" fg:x="53963" fg:w="35"/><text x="46.0901%" y="559.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (35 samples, 0.03%)</title><rect x="45.8401%" y="533" width="0.0297%" height="15" fill="rgb(231,4,26)" fg:x="53963" fg:w="35"/><text x="46.0901%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (35 samples, 0.03%)</title><rect x="45.8401%" y="517" width="0.0297%" height="15" fill="rgb(240,9,31)" fg:x="53963" fg:w="35"/><text x="46.0901%" y="527.50"></text></g><g><title>HashWriter::write (35 samples, 0.03%)</title><rect x="45.8401%" y="501" width="0.0297%" height="15" fill="rgb(207,173,15)" fg:x="53963" fg:w="35"/><text x="46.0901%" y="511.50"></text></g><g><title>CSHA256::Write (59 samples, 0.05%)</title><rect x="45.9047%" y="389" width="0.0501%" height="15" fill="rgb(224,192,53)" fg:x="54039" fg:w="59"/><text x="46.1547%" y="399.50"></text></g><g><title>memcpy (14 samples, 0.01%)</title><rect x="45.9429%" y="373" width="0.0119%" height="15" fill="rgb(223,67,28)" fg:x="54084" fg:w="14"/><text x="46.1929%" y="383.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (12 samples, 0.01%)</title><rect x="45.9718%" y="389" width="0.0102%" height="15" fill="rgb(211,20,47)" fg:x="54118" fg:w="12"/><text x="46.2218%" y="399.50"></text></g><g><title>CSHA256::Write (136 samples, 0.12%)</title><rect x="45.8758%" y="405" width="0.1155%" height="15" fill="rgb(240,228,2)" fg:x="54005" fg:w="136"/><text x="46.1258%" y="415.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.01%)</title><rect x="45.9973%" y="373" width="0.0136%" height="15" fill="rgb(248,151,12)" fg:x="54148" fg:w="16"/><text x="46.2473%" y="383.50"></text></g><g><title>QuadRound (34 samples, 0.03%)</title><rect x="45.9973%" y="389" width="0.0289%" height="15" fill="rgb(244,8,39)" fg:x="54148" fg:w="34"/><text x="46.2473%" y="399.50"></text></g><g><title>ShiftMessageB (47 samples, 0.04%)</title><rect x="46.0262%" y="389" width="0.0399%" height="15" fill="rgb(222,26,8)" fg:x="54182" fg:w="47"/><text x="46.2762%" y="399.50"></text></g><g><title>ShiftMessageC (36 samples, 0.03%)</title><rect x="46.0355%" y="373" width="0.0306%" height="15" fill="rgb(213,106,44)" fg:x="54193" fg:w="36"/><text x="46.2855%" y="383.50"></text></g><g><title>_mm_sha256msg2_epu32 (20 samples, 0.02%)</title><rect x="46.0491%" y="357" width="0.0170%" height="15" fill="rgb(214,129,20)" fg:x="54209" fg:w="20"/><text x="46.2991%" y="367.50"></text></g><g><title>sha256_x86_shani::Transform (99 samples, 0.08%)</title><rect x="45.9913%" y="405" width="0.0841%" height="15" fill="rgb(212,32,13)" fg:x="54141" fg:w="99"/><text x="46.2413%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (247 samples, 0.21%)</title><rect x="45.8758%" y="437" width="0.2098%" height="15" fill="rgb(208,168,33)" fg:x="54005" fg:w="247"/><text x="46.1258%" y="447.50"></text></g><g><title>HashWriter::write (247 samples, 0.21%)</title><rect x="45.8758%" y="421" width="0.2098%" height="15" fill="rgb(231,207,8)" fg:x="54005" fg:w="247"/><text x="46.1258%" y="431.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (318 samples, 0.27%)</title><rect x="45.8401%" y="661" width="0.2701%" height="15" fill="rgb(235,219,23)" fg:x="53963" fg:w="318"/><text x="46.0901%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (318 samples, 0.27%)</title><rect x="45.8401%" y="645" width="0.2701%" height="15" fill="rgb(226,216,26)" fg:x="53963" fg:w="318"/><text x="46.0901%" y="655.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (318 samples, 0.27%)</title><rect x="45.8401%" y="629" width="0.2701%" height="15" fill="rgb(239,137,16)" fg:x="53963" fg:w="318"/><text x="46.0901%" y="639.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (318 samples, 0.27%)</title><rect x="45.8401%" y="613" width="0.2701%" height="15" fill="rgb(207,12,36)" fg:x="53963" fg:w="318"/><text x="46.0901%" y="623.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (318 samples, 0.27%)</title><rect x="45.8401%" y="597" width="0.2701%" height="15" fill="rgb(210,214,24)" fg:x="53963" fg:w="318"/><text x="46.0901%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (318 samples, 0.27%)</title><rect x="45.8401%" y="581" width="0.2701%" height="15" fill="rgb(206,56,30)" fg:x="53963" fg:w="318"/><text x="46.0901%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (318 samples, 0.27%)</title><rect x="45.8401%" y="565" width="0.2701%" height="15" fill="rgb(228,143,26)" fg:x="53963" fg:w="318"/><text x="46.0901%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (283 samples, 0.24%)</title><rect x="45.8699%" y="549" width="0.2404%" height="15" fill="rgb(216,218,46)" fg:x="53998" fg:w="283"/><text x="46.1199%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (283 samples, 0.24%)</title><rect x="45.8699%" y="533" width="0.2404%" height="15" fill="rgb(206,6,19)" fg:x="53998" fg:w="283"/><text x="46.1199%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (283 samples, 0.24%)</title><rect x="45.8699%" y="517" width="0.2404%" height="15" fill="rgb(239,177,51)" fg:x="53998" fg:w="283"/><text x="46.1199%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (283 samples, 0.24%)</title><rect x="45.8699%" y="501" width="0.2404%" height="15" fill="rgb(216,55,25)" fg:x="53998" fg:w="283"/><text x="46.1199%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (283 samples, 0.24%)</title><rect x="45.8699%" y="485" width="0.2404%" height="15" fill="rgb(231,163,29)" fg:x="53998" fg:w="283"/><text x="46.1199%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (283 samples, 0.24%)</title><rect x="45.8699%" y="469" width="0.2404%" height="15" fill="rgb(232,149,50)" fg:x="53998" fg:w="283"/><text x="46.1199%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (283 samples, 0.24%)</title><rect x="45.8699%" y="453" width="0.2404%" height="15" fill="rgb(223,142,48)" fg:x="53998" fg:w="283"/><text x="46.1199%" y="463.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.02%)</title><rect x="46.0933%" y="437" width="0.0170%" height="15" fill="rgb(245,83,23)" fg:x="54261" fg:w="20"/><text x="46.3433%" y="447.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="46.0967%" y="421" width="0.0136%" height="15" fill="rgb(224,63,2)" fg:x="54265" fg:w="16"/><text x="46.3467%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (16 samples, 0.01%)</title><rect x="46.0967%" y="405" width="0.0136%" height="15" fill="rgb(218,65,53)" fg:x="54265" fg:w="16"/><text x="46.3467%" y="415.50"></text></g><g><title>HashWriter::write (16 samples, 0.01%)</title><rect x="46.0967%" y="389" width="0.0136%" height="15" fill="rgb(221,84,29)" fg:x="54265" fg:w="16"/><text x="46.3467%" y="399.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (331 samples, 0.28%)</title><rect x="45.8376%" y="741" width="0.2812%" height="15" fill="rgb(234,0,32)" fg:x="53960" fg:w="331"/><text x="46.0876%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (331 samples, 0.28%)</title><rect x="45.8376%" y="725" width="0.2812%" height="15" fill="rgb(206,20,16)" fg:x="53960" fg:w="331"/><text x="46.0876%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (331 samples, 0.28%)</title><rect x="45.8376%" y="709" width="0.2812%" height="15" fill="rgb(244,172,18)" fg:x="53960" fg:w="331"/><text x="46.0876%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (331 samples, 0.28%)</title><rect x="45.8376%" y="693" width="0.2812%" height="15" fill="rgb(254,133,1)" fg:x="53960" fg:w="331"/><text x="46.0876%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (331 samples, 0.28%)</title><rect x="45.8376%" y="677" width="0.2812%" height="15" fill="rgb(222,206,41)" fg:x="53960" fg:w="331"/><text x="46.0876%" y="687.50"></text></g><g><title>CSHA256::Write (134 samples, 0.11%)</title><rect x="46.1451%" y="581" width="0.1138%" height="15" fill="rgb(212,3,42)" fg:x="54322" fg:w="134"/><text x="46.3951%" y="591.50"></text></g><g><title>memcpy (23 samples, 0.02%)</title><rect x="46.2394%" y="565" width="0.0195%" height="15" fill="rgb(241,11,4)" fg:x="54433" fg:w="23"/><text x="46.4894%" y="575.50"></text></g><g><title>_mm_add_epi32 (27 samples, 0.02%)</title><rect x="46.2768%" y="549" width="0.0229%" height="15" fill="rgb(205,19,26)" fg:x="54477" fg:w="27"/><text x="46.5268%" y="559.50"></text></g><g><title>_mm_sha256rnds2_epu32 (16 samples, 0.01%)</title><rect x="46.2997%" y="549" width="0.0136%" height="15" fill="rgb(210,179,32)" fg:x="54504" fg:w="16"/><text x="46.5497%" y="559.50"></text></g><g><title>QuadRound (54 samples, 0.05%)</title><rect x="46.2768%" y="565" width="0.0459%" height="15" fill="rgb(227,116,49)" fg:x="54477" fg:w="54"/><text x="46.5268%" y="575.50"></text></g><g><title>ShiftMessageA (30 samples, 0.03%)</title><rect x="46.3277%" y="549" width="0.0255%" height="15" fill="rgb(211,146,6)" fg:x="54537" fg:w="30"/><text x="46.5777%" y="559.50"></text></g><g><title>_mm_sha256msg1_epu32 (30 samples, 0.03%)</title><rect x="46.3277%" y="533" width="0.0255%" height="15" fill="rgb(219,44,39)" fg:x="54537" fg:w="30"/><text x="46.5777%" y="543.50"></text></g><g><title>_mm_add_epi32 (15 samples, 0.01%)</title><rect x="46.3532%" y="533" width="0.0127%" height="15" fill="rgb(234,128,11)" fg:x="54567" fg:w="15"/><text x="46.6032%" y="543.50"></text></g><g><title>_mm_alignr_epi8 (13 samples, 0.01%)</title><rect x="46.3660%" y="533" width="0.0110%" height="15" fill="rgb(220,183,53)" fg:x="54582" fg:w="13"/><text x="46.6160%" y="543.50"></text></g><g><title>ShiftMessageB (86 samples, 0.07%)</title><rect x="46.3277%" y="565" width="0.0731%" height="15" fill="rgb(213,219,32)" fg:x="54537" fg:w="86"/><text x="46.5777%" y="575.50"></text></g><g><title>ShiftMessageC (56 samples, 0.05%)</title><rect x="46.3532%" y="549" width="0.0476%" height="15" fill="rgb(232,156,16)" fg:x="54567" fg:w="56"/><text x="46.6032%" y="559.50"></text></g><g><title>_mm_sha256msg2_epu32 (28 samples, 0.02%)</title><rect x="46.3770%" y="533" width="0.0238%" height="15" fill="rgb(246,135,34)" fg:x="54595" fg:w="28"/><text x="46.6270%" y="543.50"></text></g><g><title>ShiftMessageC (12 samples, 0.01%)</title><rect x="46.4008%" y="565" width="0.0102%" height="15" fill="rgb(241,99,0)" fg:x="54623" fg:w="12"/><text x="46.6508%" y="575.50"></text></g><g><title>sha256_x86_shani::Transform (179 samples, 0.15%)</title><rect x="46.2649%" y="581" width="0.1521%" height="15" fill="rgb(222,103,45)" fg:x="54463" fg:w="179"/><text x="46.5149%" y="591.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (16 samples, 0.01%)</title><rect x="46.4203%" y="565" width="0.0136%" height="15" fill="rgb(212,57,4)" fg:x="54646" fg:w="16"/><text x="46.6703%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (16 samples, 0.01%)</title><rect x="46.4203%" y="549" width="0.0136%" height="15" fill="rgb(215,68,47)" fg:x="54646" fg:w="16"/><text x="46.6703%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (16 samples, 0.01%)</title><rect x="46.4203%" y="533" width="0.0136%" height="15" fill="rgb(230,84,2)" fg:x="54646" fg:w="16"/><text x="46.6703%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="46.4203%" y="517" width="0.0136%" height="15" fill="rgb(220,102,14)" fg:x="54646" fg:w="16"/><text x="46.6703%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (16 samples, 0.01%)</title><rect x="46.4203%" y="501" width="0.0136%" height="15" fill="rgb(240,10,32)" fg:x="54646" fg:w="16"/><text x="46.6703%" y="511.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (21 samples, 0.02%)</title><rect x="46.4169%" y="581" width="0.0178%" height="15" fill="rgb(215,47,27)" fg:x="54642" fg:w="21"/><text x="46.6669%" y="591.50"></text></g><g><title>CSHA256::Write (386 samples, 0.33%)</title><rect x="46.1306%" y="597" width="0.3279%" height="15" fill="rgb(233,188,43)" fg:x="54305" fg:w="386"/><text x="46.3806%" y="607.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.02%)</title><rect x="46.4348%" y="581" width="0.0238%" height="15" fill="rgb(253,190,1)" fg:x="54663" fg:w="28"/><text x="46.6848%" y="591.50"></text></g><g><title>_mm_add_epi32 (14 samples, 0.01%)</title><rect x="46.4619%" y="565" width="0.0119%" height="15" fill="rgb(206,114,52)" fg:x="54695" fg:w="14"/><text x="46.7119%" y="575.50"></text></g><g><title>QuadRound (25 samples, 0.02%)</title><rect x="46.4619%" y="581" width="0.0212%" height="15" fill="rgb(233,120,37)" fg:x="54695" fg:w="25"/><text x="46.7119%" y="591.50"></text></g><g><title>ShiftMessageA (16 samples, 0.01%)</title><rect x="46.4840%" y="565" width="0.0136%" height="15" fill="rgb(214,52,39)" fg:x="54721" fg:w="16"/><text x="46.7340%" y="575.50"></text></g><g><title>_mm_sha256msg1_epu32 (16 samples, 0.01%)</title><rect x="46.4840%" y="549" width="0.0136%" height="15" fill="rgb(223,80,29)" fg:x="54721" fg:w="16"/><text x="46.7340%" y="559.50"></text></g><g><title>ShiftMessageB (42 samples, 0.04%)</title><rect x="46.4840%" y="581" width="0.0357%" height="15" fill="rgb(230,101,40)" fg:x="54721" fg:w="42"/><text x="46.7340%" y="591.50"></text></g><g><title>ShiftMessageC (26 samples, 0.02%)</title><rect x="46.4976%" y="565" width="0.0221%" height="15" fill="rgb(219,211,8)" fg:x="54737" fg:w="26"/><text x="46.7476%" y="575.50"></text></g><g><title>_mm_sha256msg2_epu32 (13 samples, 0.01%)</title><rect x="46.5087%" y="549" width="0.0110%" height="15" fill="rgb(252,126,28)" fg:x="54750" fg:w="13"/><text x="46.7587%" y="559.50"></text></g><g><title>sha256_x86_shani::Transform (79 samples, 0.07%)</title><rect x="46.4585%" y="597" width="0.0671%" height="15" fill="rgb(215,56,38)" fg:x="54691" fg:w="79"/><text x="46.7085%" y="607.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (468 samples, 0.40%)</title><rect x="46.1306%" y="629" width="0.3976%" height="15" fill="rgb(249,55,44)" fg:x="54305" fg:w="468"/><text x="46.3806%" y="639.50"></text></g><g><title>HashWriter::write (468 samples, 0.40%)</title><rect x="46.1306%" y="613" width="0.3976%" height="15" fill="rgb(220,221,32)" fg:x="54305" fg:w="468"/><text x="46.3806%" y="623.50"></text></g><g><title>CSHA256::Write (18 samples, 0.02%)</title><rect x="46.5316%" y="565" width="0.0153%" height="15" fill="rgb(212,216,41)" fg:x="54777" fg:w="18"/><text x="46.7816%" y="575.50"></text></g><g><title>sha256_x86_shani::Transform (17 samples, 0.01%)</title><rect x="46.5469%" y="565" width="0.0144%" height="15" fill="rgb(228,213,43)" fg:x="54795" fg:w="17"/><text x="46.7969%" y="575.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (527 samples, 0.45%)</title><rect x="46.1239%" y="661" width="0.4477%" height="15" fill="rgb(211,31,26)" fg:x="54297" fg:w="527"/><text x="46.3739%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (527 samples, 0.45%)</title><rect x="46.1239%" y="645" width="0.4477%" height="15" fill="rgb(229,202,19)" fg:x="54297" fg:w="527"/><text x="46.3739%" y="655.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.04%)</title><rect x="46.5316%" y="629" width="0.0399%" height="15" fill="rgb(229,105,46)" fg:x="54777" fg:w="47"/><text x="46.7816%" y="639.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.04%)</title><rect x="46.5316%" y="613" width="0.0399%" height="15" fill="rgb(235,108,1)" fg:x="54777" fg:w="47"/><text x="46.7816%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (47 samples, 0.04%)</title><rect x="46.5316%" y="597" width="0.0399%" height="15" fill="rgb(245,111,35)" fg:x="54777" fg:w="47"/><text x="46.7816%" y="607.50"></text></g><g><title>HashWriter::write (47 samples, 0.04%)</title><rect x="46.5316%" y="581" width="0.0399%" height="15" fill="rgb(219,185,31)" fg:x="54777" fg:w="47"/><text x="46.7816%" y="591.50"></text></g><g><title>CSHA256::Write (15 samples, 0.01%)</title><rect x="46.5724%" y="597" width="0.0127%" height="15" fill="rgb(214,4,43)" fg:x="54825" fg:w="15"/><text x="46.8224%" y="607.50"></text></g><g><title>sha256_x86_shani::Transform (26 samples, 0.02%)</title><rect x="46.5851%" y="597" width="0.0221%" height="15" fill="rgb(235,227,40)" fg:x="54840" fg:w="26"/><text x="46.8351%" y="607.50"></text></g><g><title>ShiftMessageB (16 samples, 0.01%)</title><rect x="46.5936%" y="581" width="0.0136%" height="15" fill="rgb(230,88,30)" fg:x="54850" fg:w="16"/><text x="46.8436%" y="591.50"></text></g><g><title>ShiftMessageC (12 samples, 0.01%)</title><rect x="46.5970%" y="565" width="0.0102%" height="15" fill="rgb(216,217,1)" fg:x="54854" fg:w="12"/><text x="46.8470%" y="575.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (578 samples, 0.49%)</title><rect x="46.1188%" y="741" width="0.4910%" height="15" fill="rgb(248,139,50)" fg:x="54291" fg:w="578"/><text x="46.3688%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (578 samples, 0.49%)</title><rect x="46.1188%" y="725" width="0.4910%" height="15" fill="rgb(233,1,21)" fg:x="54291" fg:w="578"/><text x="46.3688%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (578 samples, 0.49%)</title><rect x="46.1188%" y="709" width="0.4910%" height="15" fill="rgb(215,183,12)" fg:x="54291" fg:w="578"/><text x="46.3688%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (578 samples, 0.49%)</title><rect x="46.1188%" y="693" width="0.4910%" height="15" fill="rgb(229,104,42)" fg:x="54291" fg:w="578"/><text x="46.3688%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (578 samples, 0.49%)</title><rect x="46.1188%" y="677" width="0.4910%" height="15" fill="rgb(243,34,48)" fg:x="54291" fg:w="578"/><text x="46.3688%" y="687.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.04%)</title><rect x="46.5724%" y="661" width="0.0374%" height="15" fill="rgb(239,11,44)" fg:x="54825" fg:w="44"/><text x="46.8224%" y="671.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.04%)</title><rect x="46.5724%" y="645" width="0.0374%" height="15" fill="rgb(231,98,35)" fg:x="54825" fg:w="44"/><text x="46.8224%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (44 samples, 0.04%)</title><rect x="46.5724%" y="629" width="0.0374%" height="15" fill="rgb(233,28,25)" fg:x="54825" fg:w="44"/><text x="46.8224%" y="639.50"></text></g><g><title>HashWriter::write (44 samples, 0.04%)</title><rect x="46.5724%" y="613" width="0.0374%" height="15" fill="rgb(234,123,11)" fg:x="54825" fg:w="44"/><text x="46.8224%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (13 samples, 0.01%)</title><rect x="46.6098%" y="741" width="0.0110%" height="15" fill="rgb(220,69,3)" fg:x="54869" fg:w="13"/><text x="46.8598%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="46.6098%" y="725" width="0.0110%" height="15" fill="rgb(214,64,36)" fg:x="54869" fg:w="13"/><text x="46.8598%" y="735.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="46.6098%" y="709" width="0.0110%" height="15" fill="rgb(211,138,32)" fg:x="54869" fg:w="13"/><text x="46.8598%" y="719.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (13 samples, 0.01%)</title><rect x="46.6098%" y="693" width="0.0110%" height="15" fill="rgb(213,118,47)" fg:x="54869" fg:w="13"/><text x="46.8598%" y="703.50"></text></g><g><title>HashWriter::write (13 samples, 0.01%)</title><rect x="46.6098%" y="677" width="0.0110%" height="15" fill="rgb(243,124,49)" fg:x="54869" fg:w="13"/><text x="46.8598%" y="687.50"></text></g><g><title>CTransaction::ComputeWitnessHash (12 samples, 0.01%)</title><rect x="46.6106%" y="661" width="0.0102%" height="15" fill="rgb(221,30,28)" fg:x="54870" fg:w="12"/><text x="46.8606%" y="671.50"></text></g><g><title>CTransaction::ComputeWitnessHash (12 samples, 0.01%)</title><rect x="46.6106%" y="645" width="0.0102%" height="15" fill="rgb(246,37,13)" fg:x="54870" fg:w="12"/><text x="46.8606%" y="655.50"></text></g><g><title>CSHA256::Write (24 samples, 0.02%)</title><rect x="46.6310%" y="661" width="0.0204%" height="15" fill="rgb(249,66,14)" fg:x="54894" fg:w="24"/><text x="46.8810%" y="671.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.01%)</title><rect x="46.6582%" y="629" width="0.0136%" height="15" fill="rgb(213,166,5)" fg:x="54926" fg:w="16"/><text x="46.9082%" y="639.50"></text></g><g><title>QuadRound (33 samples, 0.03%)</title><rect x="46.6582%" y="645" width="0.0280%" height="15" fill="rgb(221,66,24)" fg:x="54926" fg:w="33"/><text x="46.9082%" y="655.50"></text></g><g><title>ShiftMessageA (15 samples, 0.01%)</title><rect x="46.6862%" y="629" width="0.0127%" height="15" fill="rgb(210,132,17)" fg:x="54959" fg:w="15"/><text x="46.9362%" y="639.50"></text></g><g><title>_mm_sha256msg1_epu32 (15 samples, 0.01%)</title><rect x="46.6862%" y="613" width="0.0127%" height="15" fill="rgb(243,202,5)" fg:x="54959" fg:w="15"/><text x="46.9362%" y="623.50"></text></g><g><title>_mm_alignr_epi8 (17 samples, 0.01%)</title><rect x="46.7083%" y="613" width="0.0144%" height="15" fill="rgb(233,70,48)" fg:x="54985" fg:w="17"/><text x="46.9583%" y="623.50"></text></g><g><title>ShiftMessageB (58 samples, 0.05%)</title><rect x="46.6862%" y="645" width="0.0493%" height="15" fill="rgb(238,41,26)" fg:x="54959" fg:w="58"/><text x="46.9362%" y="655.50"></text></g><g><title>ShiftMessageC (43 samples, 0.04%)</title><rect x="46.6989%" y="629" width="0.0365%" height="15" fill="rgb(241,19,31)" fg:x="54974" fg:w="43"/><text x="46.9489%" y="639.50"></text></g><g><title>_mm_sha256msg2_epu32 (15 samples, 0.01%)</title><rect x="46.7227%" y="613" width="0.0127%" height="15" fill="rgb(214,76,10)" fg:x="55002" fg:w="15"/><text x="46.9727%" y="623.50"></text></g><g><title>ShiftMessageC (12 samples, 0.01%)</title><rect x="46.7355%" y="645" width="0.0102%" height="15" fill="rgb(254,202,22)" fg:x="55017" fg:w="12"/><text x="46.9855%" y="655.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1,396 samples, 1.19%)</title><rect x="45.5632%" y="757" width="1.1859%" height="15" fill="rgb(214,72,24)" fg:x="53637" fg:w="1396"/><text x="45.8132%" y="767.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (151 samples, 0.13%)</title><rect x="46.6208%" y="741" width="0.1283%" height="15" fill="rgb(221,92,46)" fg:x="54882" fg:w="151"/><text x="46.8708%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (151 samples, 0.13%)</title><rect x="46.6208%" y="725" width="0.1283%" height="15" fill="rgb(246,13,50)" fg:x="54882" fg:w="151"/><text x="46.8708%" y="735.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (151 samples, 0.13%)</title><rect x="46.6208%" y="709" width="0.1283%" height="15" fill="rgb(240,165,38)" fg:x="54882" fg:w="151"/><text x="46.8708%" y="719.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (151 samples, 0.13%)</title><rect x="46.6208%" y="693" width="0.1283%" height="15" fill="rgb(241,24,51)" fg:x="54882" fg:w="151"/><text x="46.8708%" y="703.50"></text></g><g><title>HashWriter::write (151 samples, 0.13%)</title><rect x="46.6208%" y="677" width="0.1283%" height="15" fill="rgb(227,51,44)" fg:x="54882" fg:w="151"/><text x="46.8708%" y="687.50"></text></g><g><title>sha256_x86_shani::Transform (114 samples, 0.10%)</title><rect x="46.6522%" y="661" width="0.0968%" height="15" fill="rgb(231,121,3)" fg:x="54919" fg:w="114"/><text x="46.9022%" y="671.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1,538 samples, 1.31%)</title><rect x="45.4528%" y="837" width="1.3065%" height="15" fill="rgb(245,3,41)" fg:x="53507" fg:w="1538"/><text x="45.7028%" y="847.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1,538 samples, 1.31%)</title><rect x="45.4528%" y="821" width="1.3065%" height="15" fill="rgb(214,13,26)" fg:x="53507" fg:w="1538"/><text x="45.7028%" y="831.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (1,538 samples, 1.31%)</title><rect x="45.4528%" y="805" width="1.3065%" height="15" fill="rgb(252,75,11)" fg:x="53507" fg:w="1538"/><text x="45.7028%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1,538 samples, 1.31%)</title><rect x="45.4528%" y="789" width="1.3065%" height="15" fill="rgb(218,226,17)" fg:x="53507" fg:w="1538"/><text x="45.7028%" y="799.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1,538 samples, 1.31%)</title><rect x="45.4528%" y="773" width="1.3065%" height="15" fill="rgb(248,89,38)" fg:x="53507" fg:w="1538"/><text x="45.7028%" y="783.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.01%)</title><rect x="46.7491%" y="757" width="0.0102%" height="15" fill="rgb(237,73,46)" fg:x="55033" fg:w="12"/><text x="46.9991%" y="767.50"></text></g><g><title>CSHA256::Finalize (16 samples, 0.01%)</title><rect x="46.7712%" y="789" width="0.0136%" height="15" fill="rgb(242,78,33)" fg:x="55059" fg:w="16"/><text x="47.0212%" y="799.50"></text></g><g><title>CSHA256::Write (90 samples, 0.08%)</title><rect x="46.7864%" y="789" width="0.0765%" height="15" fill="rgb(235,60,3)" fg:x="55077" fg:w="90"/><text x="47.0364%" y="799.50"></text></g><g><title>sha256_x86_shani::Transform (21 samples, 0.02%)</title><rect x="46.8722%" y="789" width="0.0178%" height="15" fill="rgb(216,172,19)" fg:x="55178" fg:w="21"/><text x="47.1222%" y="799.50"></text></g><g><title>CSHA256::Write (165 samples, 0.14%)</title><rect x="46.7601%" y="805" width="0.1402%" height="15" fill="rgb(227,6,42)" fg:x="55046" fg:w="165"/><text x="47.0101%" y="815.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (12 samples, 0.01%)</title><rect x="46.8901%" y="789" width="0.0102%" height="15" fill="rgb(223,207,42)" fg:x="55199" fg:w="12"/><text x="47.1401%" y="799.50"></text></g><g><title>_mm_add_epi32 (36 samples, 0.03%)</title><rect x="46.9147%" y="773" width="0.0306%" height="15" fill="rgb(246,138,30)" fg:x="55228" fg:w="36"/><text x="47.1647%" y="783.50"></text></g><g><title>_mm_sha256rnds2_epu32 (16 samples, 0.01%)</title><rect x="46.9453%" y="773" width="0.0136%" height="15" fill="rgb(251,199,47)" fg:x="55264" fg:w="16"/><text x="47.1953%" y="783.50"></text></g><g><title>QuadRound (64 samples, 0.05%)</title><rect x="46.9147%" y="789" width="0.0544%" height="15" fill="rgb(228,218,44)" fg:x="55228" fg:w="64"/><text x="47.1647%" y="799.50"></text></g><g><title>_mm_shuffle_epi32 (12 samples, 0.01%)</title><rect x="46.9589%" y="773" width="0.0102%" height="15" fill="rgb(220,68,6)" fg:x="55280" fg:w="12"/><text x="47.2089%" y="783.50"></text></g><g><title>ShiftMessageA (42 samples, 0.04%)</title><rect x="46.9716%" y="773" width="0.0357%" height="15" fill="rgb(240,60,26)" fg:x="55295" fg:w="42"/><text x="47.2216%" y="783.50"></text></g><g><title>_mm_sha256msg1_epu32 (42 samples, 0.04%)</title><rect x="46.9716%" y="757" width="0.0357%" height="15" fill="rgb(211,200,19)" fg:x="55295" fg:w="42"/><text x="47.2216%" y="767.50"></text></g><g><title>_mm_add_epi32 (25 samples, 0.02%)</title><rect x="47.0073%" y="757" width="0.0212%" height="15" fill="rgb(242,145,30)" fg:x="55337" fg:w="25"/><text x="47.2573%" y="767.50"></text></g><g><title>_mm_alignr_epi8 (17 samples, 0.01%)</title><rect x="47.0285%" y="757" width="0.0144%" height="15" fill="rgb(225,64,13)" fg:x="55362" fg:w="17"/><text x="47.2785%" y="767.50"></text></g><g><title>ShiftMessageB (120 samples, 0.10%)</title><rect x="46.9716%" y="789" width="0.1019%" height="15" fill="rgb(218,103,35)" fg:x="55295" fg:w="120"/><text x="47.2216%" y="799.50"></text></g><g><title>ShiftMessageC (78 samples, 0.07%)</title><rect x="47.0073%" y="773" width="0.0663%" height="15" fill="rgb(216,93,46)" fg:x="55337" fg:w="78"/><text x="47.2573%" y="783.50"></text></g><g><title>_mm_sha256msg2_epu32 (36 samples, 0.03%)</title><rect x="47.0430%" y="757" width="0.0306%" height="15" fill="rgb(225,159,27)" fg:x="55379" fg:w="36"/><text x="47.2930%" y="767.50"></text></g><g><title>ShiftMessageC (16 samples, 0.01%)</title><rect x="47.0736%" y="789" width="0.0136%" height="15" fill="rgb(225,204,11)" fg:x="55415" fg:w="16"/><text x="47.3236%" y="799.50"></text></g><g><title>sha256_x86_shani::Transform (226 samples, 0.19%)</title><rect x="46.9011%" y="805" width="0.1920%" height="15" fill="rgb(205,56,4)" fg:x="55212" fg:w="226"/><text x="47.1511%" y="815.50"></text></g><g><title>CSHA256::Finalize (394 samples, 0.33%)</title><rect x="46.7593%" y="821" width="0.3347%" height="15" fill="rgb(206,6,35)" fg:x="55045" fg:w="394"/><text x="47.0093%" y="831.50"></text></g><g><title>QuadRound (12 samples, 0.01%)</title><rect x="47.0999%" y="805" width="0.0102%" height="15" fill="rgb(247,73,52)" fg:x="55446" fg:w="12"/><text x="47.3499%" y="815.50"></text></g><g><title>HashWriter::GetHash (431 samples, 0.37%)</title><rect x="46.7593%" y="837" width="0.3661%" height="15" fill="rgb(246,97,4)" fg:x="55045" fg:w="431"/><text x="47.0093%" y="847.50"></text></g><g><title>sha256_x86_shani::Transform (31 samples, 0.03%)</title><rect x="47.0990%" y="821" width="0.0263%" height="15" fill="rgb(212,37,15)" fg:x="55445" fg:w="31"/><text x="47.3490%" y="831.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1,971 samples, 1.67%)</title><rect x="45.4519%" y="869" width="1.6743%" height="15" fill="rgb(208,130,40)" fg:x="53506" fg:w="1971"/><text x="45.7019%" y="879.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1,970 samples, 1.67%)</title><rect x="45.4528%" y="853" width="1.6735%" height="15" fill="rgb(236,55,29)" fg:x="53507" fg:w="1970"/><text x="45.7028%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (19 samples, 0.02%)</title><rect x="47.1339%" y="869" width="0.0161%" height="15" fill="rgb(209,156,45)" fg:x="55486" fg:w="19"/><text x="47.3839%" y="879.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (15 samples, 0.01%)</title><rect x="47.1568%" y="677" width="0.0127%" height="15" fill="rgb(249,107,4)" fg:x="55513" fg:w="15"/><text x="47.4068%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="47.1568%" y="661" width="0.0127%" height="15" fill="rgb(227,7,13)" fg:x="55513" fg:w="15"/><text x="47.4068%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="47.1568%" y="645" width="0.0127%" height="15" fill="rgb(250,129,14)" fg:x="55513" fg:w="15"/><text x="47.4068%" y="655.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="47.1568%" y="629" width="0.0127%" height="15" fill="rgb(229,92,13)" fg:x="55513" fg:w="15"/><text x="47.4068%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="47.1568%" y="613" width="0.0127%" height="15" fill="rgb(245,98,39)" fg:x="55513" fg:w="15"/><text x="47.4068%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (28 samples, 0.02%)</title><rect x="47.1509%" y="869" width="0.0238%" height="15" fill="rgb(234,135,48)" fg:x="55506" fg:w="28"/><text x="47.4009%" y="879.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="47.1509%" y="853" width="0.0238%" height="15" fill="rgb(230,98,28)" fg:x="55506" fg:w="28"/><text x="47.4009%" y="863.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="47.1509%" y="837" width="0.0238%" height="15" fill="rgb(223,121,0)" fg:x="55506" fg:w="28"/><text x="47.4009%" y="847.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="47.1509%" y="821" width="0.0238%" height="15" fill="rgb(234,173,33)" fg:x="55506" fg:w="28"/><text x="47.4009%" y="831.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="47.1509%" y="805" width="0.0238%" height="15" fill="rgb(245,47,8)" fg:x="55506" fg:w="28"/><text x="47.4009%" y="815.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="47.1509%" y="789" width="0.0238%" height="15" fill="rgb(205,17,20)" fg:x="55506" fg:w="28"/><text x="47.4009%" y="799.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (27 samples, 0.02%)</title><rect x="47.1517%" y="773" width="0.0229%" height="15" fill="rgb(232,151,16)" fg:x="55507" fg:w="27"/><text x="47.4017%" y="783.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (27 samples, 0.02%)</title><rect x="47.1517%" y="757" width="0.0229%" height="15" fill="rgb(208,30,32)" fg:x="55507" fg:w="27"/><text x="47.4017%" y="767.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.02%)</title><rect x="47.1517%" y="741" width="0.0229%" height="15" fill="rgb(254,26,3)" fg:x="55507" fg:w="27"/><text x="47.4017%" y="751.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.02%)</title><rect x="47.1517%" y="725" width="0.0229%" height="15" fill="rgb(240,177,30)" fg:x="55507" fg:w="27"/><text x="47.4017%" y="735.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.02%)</title><rect x="47.1517%" y="709" width="0.0229%" height="15" fill="rgb(248,76,44)" fg:x="55507" fg:w="27"/><text x="47.4017%" y="719.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (27 samples, 0.02%)</title><rect x="47.1517%" y="693" width="0.0229%" height="15" fill="rgb(241,186,54)" fg:x="55507" fg:w="27"/><text x="47.4017%" y="703.50"></text></g><g><title>CTransaction::CTransaction (3,205 samples, 2.72%)</title><rect x="44.4529%" y="885" width="2.7226%" height="15" fill="rgb(249,171,29)" fg:x="52330" fg:w="3205"/><text x="44.7029%" y="895.50">CT..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (27 samples, 0.02%)</title><rect x="47.1764%" y="885" width="0.0229%" height="15" fill="rgb(237,151,44)" fg:x="55536" fg:w="27"/><text x="47.4264%" y="895.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="47.1993%" y="885" width="0.0110%" height="15" fill="rgb(228,174,30)" fg:x="55563" fg:w="13"/><text x="47.4493%" y="895.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (25 samples, 0.02%)</title><rect x="47.2129%" y="693" width="0.0212%" height="15" fill="rgb(252,14,37)" fg:x="55579" fg:w="25"/><text x="47.4629%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (25 samples, 0.02%)</title><rect x="47.2129%" y="677" width="0.0212%" height="15" fill="rgb(207,111,40)" fg:x="55579" fg:w="25"/><text x="47.4629%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (25 samples, 0.02%)</title><rect x="47.2129%" y="661" width="0.0212%" height="15" fill="rgb(248,171,54)" fg:x="55579" fg:w="25"/><text x="47.4629%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.02%)</title><rect x="47.2129%" y="645" width="0.0212%" height="15" fill="rgb(211,127,2)" fg:x="55579" fg:w="25"/><text x="47.4629%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (25 samples, 0.02%)</title><rect x="47.2129%" y="629" width="0.0212%" height="15" fill="rgb(236,87,47)" fg:x="55579" fg:w="25"/><text x="47.4629%" y="639.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (18 samples, 0.02%)</title><rect x="47.2188%" y="613" width="0.0153%" height="15" fill="rgb(223,190,45)" fg:x="55586" fg:w="18"/><text x="47.4688%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (18 samples, 0.02%)</title><rect x="47.2188%" y="597" width="0.0153%" height="15" fill="rgb(215,5,16)" fg:x="55586" fg:w="18"/><text x="47.4688%" y="607.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5,913 samples, 5.02%)</title><rect x="42.2129%" y="949" width="5.0229%" height="15" fill="rgb(252,82,33)" fg:x="49693" fg:w="5913"/><text x="42.4629%" y="959.50">std::_..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5,913 samples, 5.02%)</title><rect x="42.2129%" y="933" width="5.0229%" height="15" fill="rgb(247,213,44)" fg:x="49693" fg:w="5913"/><text x="42.4629%" y="943.50">void s..</text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5,913 samples, 5.02%)</title><rect x="42.2129%" y="917" width="5.0229%" height="15" fill="rgb(205,196,44)" fg:x="49693" fg:w="5913"/><text x="42.4629%" y="927.50">void s..</text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (5,913 samples, 5.02%)</title><rect x="42.2129%" y="901" width="5.0229%" height="15" fill="rgb(237,96,54)" fg:x="49693" fg:w="5913"/><text x="42.4629%" y="911.50">CTrans..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="885" width="0.0255%" height="15" fill="rgb(230,113,34)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="895.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="869" width="0.0255%" height="15" fill="rgb(221,224,12)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="879.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="853" width="0.0255%" height="15" fill="rgb(219,112,44)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="863.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="837" width="0.0255%" height="15" fill="rgb(210,31,13)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="847.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="821" width="0.0255%" height="15" fill="rgb(230,25,16)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="831.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="805" width="0.0255%" height="15" fill="rgb(246,108,53)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="815.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="789" width="0.0255%" height="15" fill="rgb(241,172,50)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="799.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="773" width="0.0255%" height="15" fill="rgb(235,141,10)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="783.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="757" width="0.0255%" height="15" fill="rgb(220,174,43)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="767.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="741" width="0.0255%" height="15" fill="rgb(215,181,40)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="751.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="725" width="0.0255%" height="15" fill="rgb(230,97,2)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="735.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (30 samples, 0.03%)</title><rect x="47.2103%" y="709" width="0.0255%" height="15" fill="rgb(211,25,27)" fg:x="55576" fg:w="30"/><text x="47.4603%" y="719.50"></text></g><g><title>__lll_lock_wake_private (51 samples, 0.04%)</title><rect x="47.2503%" y="853" width="0.0433%" height="15" fill="rgb(230,87,26)" fg:x="55623" fg:w="51"/><text x="47.5003%" y="863.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="47.2503%" y="837" width="0.0433%" height="15" fill="rgb(227,160,17)" fg:x="55623" fg:w="51"/><text x="47.5003%" y="847.50"></text></g><g><title>[unknown] (49 samples, 0.04%)</title><rect x="47.2520%" y="821" width="0.0416%" height="15" fill="rgb(244,85,34)" fg:x="55625" fg:w="49"/><text x="47.5020%" y="831.50"></text></g><g><title>[unknown] (46 samples, 0.04%)</title><rect x="47.2545%" y="805" width="0.0391%" height="15" fill="rgb(207,70,0)" fg:x="55628" fg:w="46"/><text x="47.5045%" y="815.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="47.2613%" y="789" width="0.0323%" height="15" fill="rgb(223,129,7)" fg:x="55636" fg:w="38"/><text x="47.5113%" y="799.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="47.2647%" y="773" width="0.0289%" height="15" fill="rgb(246,105,7)" fg:x="55640" fg:w="34"/><text x="47.5147%" y="783.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="47.2723%" y="757" width="0.0212%" height="15" fill="rgb(215,154,42)" fg:x="55649" fg:w="25"/><text x="47.5223%" y="767.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="47.2749%" y="741" width="0.0187%" height="15" fill="rgb(220,215,30)" fg:x="55652" fg:w="22"/><text x="47.5249%" y="751.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,010 samples, 5.11%)</title><rect x="42.2129%" y="1013" width="5.1053%" height="15" fill="rgb(228,81,51)" fg:x="49693" fg:w="6010"/><text x="42.4629%" y="1023.50">std::s..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,010 samples, 5.11%)</title><rect x="42.2129%" y="997" width="5.1053%" height="15" fill="rgb(247,71,54)" fg:x="49693" fg:w="6010"/><text x="42.4629%" y="1007.50">std::s..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,010 samples, 5.11%)</title><rect x="42.2129%" y="981" width="5.1053%" height="15" fill="rgb(234,176,34)" fg:x="49693" fg:w="6010"/><text x="42.4629%" y="991.50">std::_..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,010 samples, 5.11%)</title><rect x="42.2129%" y="965" width="5.1053%" height="15" fill="rgb(241,103,54)" fg:x="49693" fg:w="6010"/><text x="42.4629%" y="975.50">std::_..</text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (97 samples, 0.08%)</title><rect x="47.2358%" y="949" width="0.0824%" height="15" fill="rgb(228,22,34)" fg:x="55606" fg:w="97"/><text x="47.4858%" y="959.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (97 samples, 0.08%)</title><rect x="47.2358%" y="933" width="0.0824%" height="15" fill="rgb(241,179,48)" fg:x="55606" fg:w="97"/><text x="47.4858%" y="943.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (97 samples, 0.08%)</title><rect x="47.2358%" y="917" width="0.0824%" height="15" fill="rgb(235,167,37)" fg:x="55606" fg:w="97"/><text x="47.4858%" y="927.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (97 samples, 0.08%)</title><rect x="47.2358%" y="901" width="0.0824%" height="15" fill="rgb(213,109,30)" fg:x="55606" fg:w="97"/><text x="47.4858%" y="911.50"></text></g><g><title>operator new (96 samples, 0.08%)</title><rect x="47.2367%" y="885" width="0.0815%" height="15" fill="rgb(222,172,16)" fg:x="55607" fg:w="96"/><text x="47.4867%" y="895.50"></text></g><g><title>malloc (96 samples, 0.08%)</title><rect x="47.2367%" y="869" width="0.0815%" height="15" fill="rgb(233,192,5)" fg:x="55607" fg:w="96"/><text x="47.4867%" y="879.50"></text></g><g><title>_int_malloc (29 samples, 0.02%)</title><rect x="47.2936%" y="853" width="0.0246%" height="15" fill="rgb(247,189,41)" fg:x="55674" fg:w="29"/><text x="47.5436%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (6,014 samples, 5.11%)</title><rect x="42.2103%" y="1029" width="5.1087%" height="15" fill="rgb(218,134,47)" fg:x="49690" fg:w="6014"/><text x="42.4603%" y="1039.50">void U..</text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1253" width="5.2260%" height="15" fill="rgb(216,29,3)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1263.50">DataSt..</text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1237" width="5.2260%" height="15" fill="rgb(246,140,12)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1247.50">void U..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1221" width="5.2260%" height="15" fill="rgb(230,136,11)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1231.50">void P..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1205" width="5.2260%" height="15" fill="rgb(247,22,47)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1215.50">void U..</text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1189" width="5.2260%" height="15" fill="rgb(218,84,22)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1199.50">void C..</text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1173" width="5.2260%" height="15" fill="rgb(216,87,39)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1183.50">void C..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1157" width="5.2260%" height="15" fill="rgb(221,178,8)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1167.50">void C..</text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1141" width="5.2260%" height="15" fill="rgb(230,42,11)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1151.50">void A..</text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1125" width="5.2260%" height="15" fill="rgb(237,229,4)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1135.50">void U..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1109" width="5.2260%" height="15" fill="rgb(222,31,33)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1119.50">void U..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1093" width="5.2260%" height="15" fill="rgb(210,17,39)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1103.50">void U..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,152 samples, 5.23%)</title><rect x="42.1033%" y="1077" width="5.2260%" height="15" fill="rgb(244,93,20)" fg:x="49564" fg:w="6152"/><text x="42.3533%" y="1087.50">void W..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6,149 samples, 5.22%)</title><rect x="42.1058%" y="1061" width="5.2234%" height="15" fill="rgb(210,40,47)" fg:x="49567" fg:w="6149"/><text x="42.3558%" y="1071.50">void V..</text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (6,124 samples, 5.20%)</title><rect x="42.1271%" y="1045" width="5.2022%" height="15" fill="rgb(239,211,47)" fg:x="49592" fg:w="6124"/><text x="42.3771%" y="1055.50">void D..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (12 samples, 0.01%)</title><rect x="47.3191%" y="1029" width="0.0102%" height="15" fill="rgb(251,223,49)" fg:x="55704" fg:w="12"/><text x="47.5691%" y="1039.50"></text></g><g><title>_mm_add_epi32 (45 samples, 0.04%)</title><rect x="47.3547%" y="1141" width="0.0382%" height="15" fill="rgb(221,149,5)" fg:x="55746" fg:w="45"/><text x="47.6047%" y="1151.50"></text></g><g><title>_mm_sha256rnds2_epu32 (58 samples, 0.05%)</title><rect x="47.3930%" y="1141" width="0.0493%" height="15" fill="rgb(219,224,51)" fg:x="55791" fg:w="58"/><text x="47.6430%" y="1151.50"></text></g><g><title>QuadRound (113 samples, 0.10%)</title><rect x="47.3547%" y="1157" width="0.0960%" height="15" fill="rgb(223,7,8)" fg:x="55746" fg:w="113"/><text x="47.6047%" y="1167.50"></text></g><g><title>ShiftMessageA (24 samples, 0.02%)</title><rect x="47.4601%" y="1141" width="0.0204%" height="15" fill="rgb(241,217,22)" fg:x="55870" fg:w="24"/><text x="47.7101%" y="1151.50"></text></g><g><title>_mm_sha256msg1_epu32 (24 samples, 0.02%)</title><rect x="47.4601%" y="1125" width="0.0204%" height="15" fill="rgb(248,209,0)" fg:x="55870" fg:w="24"/><text x="47.7101%" y="1135.50"></text></g><g><title>_mm_add_epi32 (12 samples, 0.01%)</title><rect x="47.4805%" y="1125" width="0.0102%" height="15" fill="rgb(217,205,4)" fg:x="55894" fg:w="12"/><text x="47.7305%" y="1135.50"></text></g><g><title>_mm_alignr_epi8 (26 samples, 0.02%)</title><rect x="47.4907%" y="1125" width="0.0221%" height="15" fill="rgb(228,124,39)" fg:x="55906" fg:w="26"/><text x="47.7407%" y="1135.50"></text></g><g><title>ShiftMessageB (115 samples, 0.10%)</title><rect x="47.4601%" y="1157" width="0.0977%" height="15" fill="rgb(250,116,42)" fg:x="55870" fg:w="115"/><text x="47.7101%" y="1167.50"></text></g><g><title>ShiftMessageC (91 samples, 0.08%)</title><rect x="47.4805%" y="1141" width="0.0773%" height="15" fill="rgb(223,202,9)" fg:x="55894" fg:w="91"/><text x="47.7305%" y="1151.50"></text></g><g><title>_mm_sha256msg2_epu32 (53 samples, 0.05%)</title><rect x="47.5127%" y="1125" width="0.0450%" height="15" fill="rgb(242,222,40)" fg:x="55932" fg:w="53"/><text x="47.7627%" y="1135.50"></text></g><g><title>SHA256D64 (263 samples, 0.22%)</title><rect x="47.3513%" y="1189" width="0.2234%" height="15" fill="rgb(229,99,46)" fg:x="55742" fg:w="263"/><text x="47.6013%" y="1199.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (261 samples, 0.22%)</title><rect x="47.3530%" y="1173" width="0.2217%" height="15" fill="rgb(225,56,46)" fg:x="55744" fg:w="261"/><text x="47.6030%" y="1183.50"></text></g><g><title>ComputeMerkleRoot (272 samples, 0.23%)</title><rect x="47.3505%" y="1205" width="0.2311%" height="15" fill="rgb(227,94,5)" fg:x="55741" fg:w="272"/><text x="47.6005%" y="1215.50"></text></g><g><title>CheckMerkleRoot (307 samples, 0.26%)</title><rect x="47.3310%" y="1237" width="0.2608%" height="15" fill="rgb(205,112,38)" fg:x="55718" fg:w="307"/><text x="47.5810%" y="1247.50"></text></g><g><title>BlockMerkleRoot (307 samples, 0.26%)</title><rect x="47.3310%" y="1221" width="0.2608%" height="15" fill="rgb(231,133,46)" fg:x="55718" fg:w="307"/><text x="47.5810%" y="1231.50"></text></g><g><title>_mm_add_epi32 (27 samples, 0.02%)</title><rect x="47.6053%" y="1141" width="0.0229%" height="15" fill="rgb(217,16,9)" fg:x="56041" fg:w="27"/><text x="47.8553%" y="1151.50"></text></g><g><title>_mm_sha256rnds2_epu32 (71 samples, 0.06%)</title><rect x="47.6283%" y="1141" width="0.0603%" height="15" fill="rgb(249,173,9)" fg:x="56068" fg:w="71"/><text x="47.8783%" y="1151.50"></text></g><g><title>QuadRound (121 samples, 0.10%)</title><rect x="47.6053%" y="1157" width="0.1028%" height="15" fill="rgb(205,163,53)" fg:x="56041" fg:w="121"/><text x="47.8553%" y="1167.50"></text></g><g><title>_mm_shuffle_epi32 (23 samples, 0.02%)</title><rect x="47.6886%" y="1141" width="0.0195%" height="15" fill="rgb(217,54,41)" fg:x="56139" fg:w="23"/><text x="47.9386%" y="1151.50"></text></g><g><title>ShiftMessageA (21 samples, 0.02%)</title><rect x="47.7132%" y="1141" width="0.0178%" height="15" fill="rgb(228,216,12)" fg:x="56168" fg:w="21"/><text x="47.9632%" y="1151.50"></text></g><g><title>_mm_sha256msg1_epu32 (21 samples, 0.02%)</title><rect x="47.7132%" y="1125" width="0.0178%" height="15" fill="rgb(244,228,15)" fg:x="56168" fg:w="21"/><text x="47.9632%" y="1135.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.01%)</title><rect x="47.7311%" y="1125" width="0.0136%" height="15" fill="rgb(221,176,53)" fg:x="56189" fg:w="16"/><text x="47.9811%" y="1135.50"></text></g><g><title>_mm_alignr_epi8 (16 samples, 0.01%)</title><rect x="47.7446%" y="1125" width="0.0136%" height="15" fill="rgb(205,94,34)" fg:x="56205" fg:w="16"/><text x="47.9946%" y="1135.50"></text></g><g><title>ShiftMessageB (103 samples, 0.09%)</title><rect x="47.7132%" y="1157" width="0.0875%" height="15" fill="rgb(213,110,48)" fg:x="56168" fg:w="103"/><text x="47.9632%" y="1167.50"></text></g><g><title>ShiftMessageC (82 samples, 0.07%)</title><rect x="47.7311%" y="1141" width="0.0697%" height="15" fill="rgb(236,142,28)" fg:x="56189" fg:w="82"/><text x="47.9811%" y="1151.50"></text></g><g><title>_mm_sha256msg2_epu32 (50 samples, 0.04%)</title><rect x="47.7582%" y="1125" width="0.0425%" height="15" fill="rgb(225,135,29)" fg:x="56221" fg:w="50"/><text x="48.0082%" y="1135.50"></text></g><g><title>ShiftMessageC (12 samples, 0.01%)</title><rect x="47.8007%" y="1157" width="0.0102%" height="15" fill="rgb(252,45,31)" fg:x="56271" fg:w="12"/><text x="48.0507%" y="1167.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (259 samples, 0.22%)</title><rect x="47.6028%" y="1173" width="0.2200%" height="15" fill="rgb(211,187,50)" fg:x="56038" fg:w="259"/><text x="47.8528%" y="1183.50"></text></g><g><title>SHA256D64 (262 samples, 0.22%)</title><rect x="47.6019%" y="1189" width="0.2226%" height="15" fill="rgb(229,109,7)" fg:x="56037" fg:w="262"/><text x="47.8519%" y="1199.50"></text></g><g><title>ComputeMerkleRoot (263 samples, 0.22%)</title><rect x="47.6019%" y="1205" width="0.2234%" height="15" fill="rgb(251,131,51)" fg:x="56037" fg:w="263"/><text x="47.8519%" y="1215.50"></text></g><g><title>IsBlockMutated (593 samples, 0.50%)</title><rect x="47.3310%" y="1253" width="0.5037%" height="15" fill="rgb(251,180,35)" fg:x="55718" fg:w="593"/><text x="47.5810%" y="1263.50"></text></g><g><title>CheckWitnessMalleation (286 samples, 0.24%)</title><rect x="47.5917%" y="1237" width="0.2429%" height="15" fill="rgb(211,46,32)" fg:x="56025" fg:w="286"/><text x="47.8417%" y="1247.50"></text></g><g><title>BlockWitnessMerkleRoot (286 samples, 0.24%)</title><rect x="47.5917%" y="1221" width="0.2429%" height="15" fill="rgb(248,123,17)" fg:x="56025" fg:w="286"/><text x="47.8417%" y="1231.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (14 samples, 0.01%)</title><rect x="47.8423%" y="1253" width="0.0119%" height="15" fill="rgb(227,141,18)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1263.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::Enter (14 samples, 0.01%)</title><rect x="47.8423%" y="1237" width="0.0119%" height="15" fill="rgb(216,102,9)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1247.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (14 samples, 0.01%)</title><rect x="47.8423%" y="1221" width="0.0119%" height="15" fill="rgb(253,47,13)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1231.50"></text></g><g><title>std::mutex::lock (14 samples, 0.01%)</title><rect x="47.8423%" y="1205" width="0.0119%" height="15" fill="rgb(226,93,23)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1215.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (14 samples, 0.01%)</title><rect x="47.8423%" y="1189" width="0.0119%" height="15" fill="rgb(247,104,17)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1199.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (14 samples, 0.01%)</title><rect x="47.8423%" y="1173" width="0.0119%" height="15" fill="rgb(233,203,26)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1183.50"></text></g><g><title>__GI___lll_lock_wait (14 samples, 0.01%)</title><rect x="47.8423%" y="1157" width="0.0119%" height="15" fill="rgb(244,98,49)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1167.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="47.8423%" y="1141" width="0.0119%" height="15" fill="rgb(235,134,22)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1151.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="47.8423%" y="1125" width="0.0119%" height="15" fill="rgb(221,70,32)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1135.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="47.8423%" y="1109" width="0.0119%" height="15" fill="rgb(238,15,50)" fg:x="56320" fg:w="14"/><text x="48.0923%" y="1119.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="47.8432%" y="1093" width="0.0110%" height="15" fill="rgb(215,221,48)" fg:x="56321" fg:w="13"/><text x="48.0932%" y="1103.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="47.8432%" y="1077" width="0.0110%" height="15" fill="rgb(236,73,3)" fg:x="56321" fg:w="13"/><text x="48.0932%" y="1087.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="47.8432%" y="1061" width="0.0110%" height="15" fill="rgb(250,107,11)" fg:x="56321" fg:w="13"/><text x="48.0932%" y="1071.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="47.8440%" y="1045" width="0.0102%" height="15" fill="rgb(242,39,14)" fg:x="56322" fg:w="12"/><text x="48.0940%" y="1055.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="47.8440%" y="1029" width="0.0102%" height="15" fill="rgb(248,164,37)" fg:x="56322" fg:w="12"/><text x="48.0940%" y="1039.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="47.8440%" y="1013" width="0.0102%" height="15" fill="rgb(217,60,12)" fg:x="56322" fg:w="12"/><text x="48.0940%" y="1023.50"></text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::~optional (83 samples, 0.07%)</title><rect x="47.8585%" y="1253" width="0.0705%" height="15" fill="rgb(240,125,29)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1263.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::~_Optional_base (83 samples, 0.07%)</title><rect x="47.8585%" y="1237" width="0.0705%" height="15" fill="rgb(208,207,28)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1247.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::~_Optional_payload (83 samples, 0.07%)</title><rect x="47.8585%" y="1221" width="0.0705%" height="15" fill="rgb(209,159,27)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1231.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_reset (83 samples, 0.07%)</title><rect x="47.8585%" y="1205" width="0.0705%" height="15" fill="rgb(251,176,53)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1215.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_destroy (83 samples, 0.07%)</title><rect x="47.8585%" y="1189" width="0.0705%" height="15" fill="rgb(211,85,7)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1199.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::~pair (83 samples, 0.07%)</title><rect x="47.8585%" y="1173" width="0.0705%" height="15" fill="rgb(216,64,54)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1183.50"></text></g><g><title>CNetMessage::~CNetMessage (83 samples, 0.07%)</title><rect x="47.8585%" y="1157" width="0.0705%" height="15" fill="rgb(217,54,24)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1167.50"></text></g><g><title>DataStream::~DataStream (83 samples, 0.07%)</title><rect x="47.8585%" y="1141" width="0.0705%" height="15" fill="rgb(208,206,53)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1151.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (83 samples, 0.07%)</title><rect x="47.8585%" y="1125" width="0.0705%" height="15" fill="rgb(251,74,39)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (83 samples, 0.07%)</title><rect x="47.8585%" y="1109" width="0.0705%" height="15" fill="rgb(226,47,5)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (83 samples, 0.07%)</title><rect x="47.8585%" y="1093" width="0.0705%" height="15" fill="rgb(234,111,33)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (83 samples, 0.07%)</title><rect x="47.8585%" y="1077" width="0.0705%" height="15" fill="rgb(251,14,10)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1087.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (83 samples, 0.07%)</title><rect x="47.8585%" y="1061" width="0.0705%" height="15" fill="rgb(232,43,0)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1071.50"></text></g><g><title>memory_cleanse (83 samples, 0.07%)</title><rect x="47.8585%" y="1045" width="0.0705%" height="15" fill="rgb(222,68,43)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1055.50"></text></g><g><title>memory_cleanse (83 samples, 0.07%)</title><rect x="47.8585%" y="1029" width="0.0705%" height="15" fill="rgb(217,24,23)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1039.50"></text></g><g><title>__memset_avx512_unaligned_erms (83 samples, 0.07%)</title><rect x="47.8585%" y="1013" width="0.0705%" height="15" fill="rgb(229,209,14)" fg:x="56339" fg:w="83"/><text x="48.1085%" y="1023.50"></text></g><g><title>CConnman::SocketSendData (37 samples, 0.03%)</title><rect x="47.9358%" y="1221" width="0.0314%" height="15" fill="rgb(250,149,48)" fg:x="56430" fg:w="37"/><text x="48.1858%" y="1231.50"></text></g><g><title>__send (32 samples, 0.03%)</title><rect x="47.9400%" y="1205" width="0.0272%" height="15" fill="rgb(210,120,37)" fg:x="56435" fg:w="32"/><text x="48.1900%" y="1215.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="47.9400%" y="1189" width="0.0272%" height="15" fill="rgb(210,21,8)" fg:x="56435" fg:w="32"/><text x="48.1900%" y="1199.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="47.9400%" y="1173" width="0.0272%" height="15" fill="rgb(243,145,7)" fg:x="56435" fg:w="32"/><text x="48.1900%" y="1183.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="47.9400%" y="1157" width="0.0272%" height="15" fill="rgb(238,178,32)" fg:x="56435" fg:w="32"/><text x="48.1900%" y="1167.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="47.9400%" y="1141" width="0.0272%" height="15" fill="rgb(222,4,10)" fg:x="56435" fg:w="32"/><text x="48.1900%" y="1151.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="47.9409%" y="1125" width="0.0263%" height="15" fill="rgb(239,7,37)" fg:x="56436" fg:w="31"/><text x="48.1909%" y="1135.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="47.9409%" y="1109" width="0.0263%" height="15" fill="rgb(215,31,37)" fg:x="56436" fg:w="31"/><text x="48.1909%" y="1119.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="47.9434%" y="1093" width="0.0238%" height="15" fill="rgb(224,83,33)" fg:x="56439" fg:w="28"/><text x="48.1934%" y="1103.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="47.9434%" y="1077" width="0.0238%" height="15" fill="rgb(239,55,3)" fg:x="56439" fg:w="28"/><text x="48.1934%" y="1087.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="47.9443%" y="1061" width="0.0229%" height="15" fill="rgb(247,92,11)" fg:x="56440" fg:w="27"/><text x="48.1943%" y="1071.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="47.9451%" y="1045" width="0.0221%" height="15" fill="rgb(239,200,7)" fg:x="56441" fg:w="26"/><text x="48.1951%" y="1055.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="47.9477%" y="1029" width="0.0195%" height="15" fill="rgb(227,115,8)" fg:x="56444" fg:w="23"/><text x="48.1977%" y="1039.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="47.9519%" y="1013" width="0.0153%" height="15" fill="rgb(215,189,27)" fg:x="56449" fg:w="18"/><text x="48.2019%" y="1023.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="47.9562%" y="997" width="0.0110%" height="15" fill="rgb(251,216,39)" fg:x="56454" fg:w="13"/><text x="48.2062%" y="1007.50"></text></g><g><title>void (anonymous namespace)::PeerManagerImpl::MakeAndPushMessage&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (40 samples, 0.03%)</title><rect x="47.9341%" y="1253" width="0.0340%" height="15" fill="rgb(207,29,47)" fg:x="56428" fg:w="40"/><text x="48.1841%" y="1263.50"></text></g><g><title>CConnman::PushMessage (40 samples, 0.03%)</title><rect x="47.9341%" y="1237" width="0.0340%" height="15" fill="rgb(210,71,34)" fg:x="56428" fg:w="40"/><text x="48.1841%" y="1247.50"></text></g><g><title>__clone (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1429" width="37.8534%" height="15" fill="rgb(253,217,51)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1439.50">__clone</text></g><g><title>start_thread (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1413" width="37.8534%" height="15" fill="rgb(222,117,46)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1423.50">start_thread</text></g><g><title>execute_native_thread_routine (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1397" width="37.8534%" height="15" fill="rgb(226,132,6)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1407.50">execute_native_thread_routine</text></g><g><title>_M_run (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1381" width="37.8534%" height="15" fill="rgb(254,145,51)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1391.50">_M_run</text></g><g><title>operator (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1365" width="37.8534%" height="15" fill="rgb(231,199,27)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1375.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1349" width="37.8534%" height="15" fill="rgb(245,158,14)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1359.50">_M_invoke&lt;0, 1, 2&gt;</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1333" width="37.8534%" height="15" fill="rgb(240,113,14)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1343.50">__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1317" width="37.8534%" height="15" fill="rgb(210,20,13)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1327.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void..</text></g><g><title>util::TraceThread (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1301" width="37.8534%" height="15" fill="rgb(241,144,13)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1311.50">util::TraceThread</text></g><g><title>std::function&lt;void ()&gt;::operator (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1285" width="37.8534%" height="15" fill="rgb(235,43,34)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1295.50">std::function&lt;void ()&gt;::operator</text></g><g><title>CConnman::ThreadMessageHandler (44,561 samples, 37.85%)</title><rect x="10.1155%" y="1269" width="37.8534%" height="15" fill="rgb(208,36,20)" fg:x="11908" fg:w="44561"/><text x="10.3655%" y="1279.50">CConnman::ThreadMessageHandler</text></g><g><title>__io_vtables (20 samples, 0.02%)</title><rect x="47.9689%" y="1429" width="0.0170%" height="15" fill="rgb(239,204,10)" fg:x="56469" fg:w="20"/><text x="48.2189%" y="1439.50"></text></g><g><title>__memcmp_evex_movbe (45 samples, 0.04%)</title><rect x="47.9893%" y="1429" width="0.0382%" height="15" fill="rgb(217,84,43)" fg:x="56493" fg:w="45"/><text x="48.2393%" y="1439.50"></text></g><g><title>__memmove_avx512_unaligned_erms (20 samples, 0.02%)</title><rect x="48.0275%" y="1429" width="0.0170%" height="15" fill="rgb(241,170,50)" fg:x="56538" fg:w="20"/><text x="48.2775%" y="1439.50"></text></g><g><title>_int_free (35 samples, 0.03%)</title><rect x="48.0513%" y="1429" width="0.0297%" height="15" fill="rgb(226,205,29)" fg:x="56566" fg:w="35"/><text x="48.3013%" y="1439.50"></text></g><g><title>_int_malloc (137 samples, 0.12%)</title><rect x="48.0836%" y="1429" width="0.1164%" height="15" fill="rgb(233,113,1)" fg:x="56604" fg:w="137"/><text x="48.3336%" y="1439.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.01%)</title><rect x="48.2034%" y="1429" width="0.0119%" height="15" fill="rgb(253,98,13)" fg:x="56745" fg:w="14"/><text x="48.4534%" y="1439.50"></text></g><g><title>_mm_crc32_u64 (48 samples, 0.04%)</title><rect x="48.3019%" y="1413" width="0.0408%" height="15" fill="rgb(211,115,12)" fg:x="56861" fg:w="48"/><text x="48.5519%" y="1423.50"></text></g><g><title>crc32c::ExtendSse42 (156 samples, 0.13%)</title><rect x="48.2153%" y="1429" width="0.1325%" height="15" fill="rgb(208,12,16)" fg:x="56759" fg:w="156"/><text x="48.4653%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (268 samples, 0.23%)</title><rect x="48.3537%" y="1429" width="0.2277%" height="15" fill="rgb(237,193,54)" fg:x="56922" fg:w="268"/><text x="48.6037%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (58 samples, 0.05%)</title><rect x="48.6069%" y="1397" width="0.0493%" height="15" fill="rgb(243,22,42)" fg:x="57220" fg:w="58"/><text x="48.8569%" y="1407.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (32 samples, 0.03%)</title><rect x="48.6595%" y="1397" width="0.0272%" height="15" fill="rgb(233,151,36)" fg:x="57282" fg:w="32"/><text x="48.9095%" y="1407.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (15 samples, 0.01%)</title><rect x="48.6884%" y="1397" width="0.0127%" height="15" fill="rgb(237,57,45)" fg:x="57316" fg:w="15"/><text x="48.9384%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (143 samples, 0.12%)</title><rect x="48.5814%" y="1429" width="0.1215%" height="15" fill="rgb(221,88,17)" fg:x="57190" fg:w="143"/><text x="48.8314%" y="1439.50"></text></g><g><title>leveldb::Slice::compare (117 samples, 0.10%)</title><rect x="48.6035%" y="1413" width="0.0994%" height="15" fill="rgb(230,79,15)" fg:x="57216" fg:w="117"/><text x="48.8535%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::Seek (12 samples, 0.01%)</title><rect x="48.7360%" y="1413" width="0.0102%" height="15" fill="rgb(213,57,13)" fg:x="57372" fg:w="12"/><text x="48.9860%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::Compare (12 samples, 0.01%)</title><rect x="48.7360%" y="1397" width="0.0102%" height="15" fill="rgb(222,116,39)" fg:x="57372" fg:w="12"/><text x="48.9860%" y="1407.50"></text></g><g><title>leveldb::Block::Iter::Seek (28 samples, 0.02%)</title><rect x="48.7232%" y="1429" width="0.0238%" height="15" fill="rgb(245,107,2)" fg:x="57357" fg:w="28"/><text x="48.9732%" y="1439.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (88 samples, 0.07%)</title><rect x="48.7903%" y="1429" width="0.0748%" height="15" fill="rgb(238,1,10)" fg:x="57436" fg:w="88"/><text x="49.0403%" y="1439.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (31 samples, 0.03%)</title><rect x="48.8778%" y="1429" width="0.0263%" height="15" fill="rgb(249,4,48)" fg:x="57539" fg:w="31"/><text x="49.1278%" y="1439.50"></text></g><g><title>leveldb::Table::InternalGet (14 samples, 0.01%)</title><rect x="48.9314%" y="1429" width="0.0119%" height="15" fill="rgb(223,151,18)" fg:x="57602" fg:w="14"/><text x="49.1814%" y="1439.50"></text></g><g><title>malloc (33 samples, 0.03%)</title><rect x="48.9568%" y="1429" width="0.0280%" height="15" fill="rgb(227,65,43)" fg:x="57632" fg:w="33"/><text x="49.2068%" y="1439.50"></text></g><g><title>malloc_consolidate (26 samples, 0.02%)</title><rect x="48.9866%" y="1429" width="0.0221%" height="15" fill="rgb(218,40,45)" fg:x="57667" fg:w="26"/><text x="49.2366%" y="1439.50"></text></g><g><title>memcmp@plt (15 samples, 0.01%)</title><rect x="49.0087%" y="1429" width="0.0127%" height="15" fill="rgb(252,121,31)" fg:x="57693" fg:w="15"/><text x="49.2587%" y="1439.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (32 samples, 0.03%)</title><rect x="49.0460%" y="965" width="0.0272%" height="15" fill="rgb(219,158,43)" fg:x="57737" fg:w="32"/><text x="49.2960%" y="975.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (32 samples, 0.03%)</title><rect x="49.0460%" y="949" width="0.0272%" height="15" fill="rgb(231,162,42)" fg:x="57737" fg:w="32"/><text x="49.2960%" y="959.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (32 samples, 0.03%)</title><rect x="49.0460%" y="933" width="0.0272%" height="15" fill="rgb(217,179,25)" fg:x="57737" fg:w="32"/><text x="49.2960%" y="943.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (29 samples, 0.02%)</title><rect x="49.0486%" y="917" width="0.0246%" height="15" fill="rgb(206,212,31)" fg:x="57740" fg:w="29"/><text x="49.2986%" y="927.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (29 samples, 0.02%)</title><rect x="49.0486%" y="901" width="0.0246%" height="15" fill="rgb(235,144,12)" fg:x="57740" fg:w="29"/><text x="49.2986%" y="911.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (29 samples, 0.02%)</title><rect x="49.0486%" y="885" width="0.0246%" height="15" fill="rgb(213,51,10)" fg:x="57740" fg:w="29"/><text x="49.2986%" y="895.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (29 samples, 0.02%)</title><rect x="49.0486%" y="869" width="0.0246%" height="15" fill="rgb(231,145,14)" fg:x="57740" fg:w="29"/><text x="49.2986%" y="879.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (29 samples, 0.02%)</title><rect x="49.0486%" y="853" width="0.0246%" height="15" fill="rgb(235,15,28)" fg:x="57740" fg:w="29"/><text x="49.2986%" y="863.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (51 samples, 0.04%)</title><rect x="49.0452%" y="1061" width="0.0433%" height="15" fill="rgb(237,206,10)" fg:x="57736" fg:w="51"/><text x="49.2952%" y="1071.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (51 samples, 0.04%)</title><rect x="49.0452%" y="1045" width="0.0433%" height="15" fill="rgb(236,227,27)" fg:x="57736" fg:w="51"/><text x="49.2952%" y="1055.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (51 samples, 0.04%)</title><rect x="49.0452%" y="1029" width="0.0433%" height="15" fill="rgb(246,83,35)" fg:x="57736" fg:w="51"/><text x="49.2952%" y="1039.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (51 samples, 0.04%)</title><rect x="49.0452%" y="1013" width="0.0433%" height="15" fill="rgb(220,136,24)" fg:x="57736" fg:w="51"/><text x="49.2952%" y="1023.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (50 samples, 0.04%)</title><rect x="49.0460%" y="997" width="0.0425%" height="15" fill="rgb(217,3,25)" fg:x="57737" fg:w="50"/><text x="49.2960%" y="1007.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (50 samples, 0.04%)</title><rect x="49.0460%" y="981" width="0.0425%" height="15" fill="rgb(239,24,14)" fg:x="57737" fg:w="50"/><text x="49.2960%" y="991.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (18 samples, 0.02%)</title><rect x="49.0732%" y="965" width="0.0153%" height="15" fill="rgb(244,16,53)" fg:x="57769" fg:w="18"/><text x="49.3232%" y="975.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (18 samples, 0.02%)</title><rect x="49.0732%" y="949" width="0.0153%" height="15" fill="rgb(208,175,44)" fg:x="57769" fg:w="18"/><text x="49.3232%" y="959.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (18 samples, 0.02%)</title><rect x="49.0732%" y="933" width="0.0153%" height="15" fill="rgb(252,18,48)" fg:x="57769" fg:w="18"/><text x="49.3232%" y="943.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (79 samples, 0.07%)</title><rect x="49.0333%" y="1413" width="0.0671%" height="15" fill="rgb(234,199,32)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1423.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1397" width="0.0671%" height="15" fill="rgb(225,77,54)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1407.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1381" width="0.0671%" height="15" fill="rgb(225,42,25)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1391.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1365" width="0.0671%" height="15" fill="rgb(242,227,46)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1375.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1349" width="0.0671%" height="15" fill="rgb(246,197,35)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1359.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1333" width="0.0671%" height="15" fill="rgb(215,159,26)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1343.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1317" width="0.0671%" height="15" fill="rgb(212,194,50)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1327.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1301" width="0.0671%" height="15" fill="rgb(246,132,1)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1311.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1285" width="0.0671%" height="15" fill="rgb(217,71,7)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1295.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1269" width="0.0671%" height="15" fill="rgb(252,59,32)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1279.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (79 samples, 0.07%)</title><rect x="49.0333%" y="1253" width="0.0671%" height="15" fill="rgb(253,204,25)" fg:x="57722" fg:w="79"/><text x="49.2833%" y="1263.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1237" width="0.0654%" height="15" fill="rgb(232,21,16)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1247.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1221" width="0.0654%" height="15" fill="rgb(248,90,29)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1231.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1205" width="0.0654%" height="15" fill="rgb(249,223,7)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1215.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1189" width="0.0654%" height="15" fill="rgb(231,119,42)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1199.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1173" width="0.0654%" height="15" fill="rgb(215,41,35)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1157" width="0.0654%" height="15" fill="rgb(220,44,45)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1167.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1141" width="0.0654%" height="15" fill="rgb(253,197,36)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1151.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1125" width="0.0654%" height="15" fill="rgb(245,225,54)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1135.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1109" width="0.0654%" height="15" fill="rgb(239,94,37)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1119.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (77 samples, 0.07%)</title><rect x="49.0350%" y="1093" width="0.0654%" height="15" fill="rgb(242,217,10)" fg:x="57724" fg:w="77"/><text x="49.2850%" y="1103.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (70 samples, 0.06%)</title><rect x="49.0409%" y="1077" width="0.0595%" height="15" fill="rgb(250,193,7)" fg:x="57731" fg:w="70"/><text x="49.2909%" y="1087.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (84 samples, 0.07%)</title><rect x="49.0333%" y="1429" width="0.0714%" height="15" fill="rgb(230,104,19)" fg:x="57722" fg:w="84"/><text x="49.2833%" y="1439.50"></text></g><g><title>operator new (24 samples, 0.02%)</title><rect x="49.1106%" y="1429" width="0.0204%" height="15" fill="rgb(230,181,4)" fg:x="57813" fg:w="24"/><text x="49.3606%" y="1439.50"></text></g><g><title>QuadRound (13 samples, 0.01%)</title><rect x="49.1454%" y="1413" width="0.0110%" height="15" fill="rgb(216,219,49)" fg:x="57854" fg:w="13"/><text x="49.3954%" y="1423.50"></text></g><g><title>ShiftMessageB (20 samples, 0.02%)</title><rect x="49.1565%" y="1413" width="0.0170%" height="15" fill="rgb(254,144,0)" fg:x="57867" fg:w="20"/><text x="49.4065%" y="1423.50"></text></g><g><title>ShiftMessageC (14 samples, 0.01%)</title><rect x="49.1616%" y="1397" width="0.0119%" height="15" fill="rgb(205,209,38)" fg:x="57873" fg:w="14"/><text x="49.4116%" y="1407.50"></text></g><g><title>sha256_x86_shani::Transform (49 samples, 0.04%)</title><rect x="49.1403%" y="1429" width="0.0416%" height="15" fill="rgb(240,21,42)" fg:x="57848" fg:w="49"/><text x="49.3903%" y="1439.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (21 samples, 0.02%)</title><rect x="49.1905%" y="1429" width="0.0178%" height="15" fill="rgb(241,132,3)" fg:x="57907" fg:w="21"/><text x="49.4405%" y="1439.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (71 samples, 0.06%)</title><rect x="49.2151%" y="1429" width="0.0603%" height="15" fill="rgb(225,14,2)" fg:x="57936" fg:w="71"/><text x="49.4651%" y="1439.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (71 samples, 0.06%)</title><rect x="49.2151%" y="1413" width="0.0603%" height="15" fill="rgb(210,141,35)" fg:x="57936" fg:w="71"/><text x="49.4651%" y="1423.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (71 samples, 0.06%)</title><rect x="49.2151%" y="1397" width="0.0603%" height="15" fill="rgb(251,14,44)" fg:x="57936" fg:w="71"/><text x="49.4651%" y="1407.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (67 samples, 0.06%)</title><rect x="49.2185%" y="1381" width="0.0569%" height="15" fill="rgb(247,48,18)" fg:x="57940" fg:w="67"/><text x="49.4685%" y="1391.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (67 samples, 0.06%)</title><rect x="49.2185%" y="1365" width="0.0569%" height="15" fill="rgb(225,0,40)" fg:x="57940" fg:w="67"/><text x="49.4685%" y="1375.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (67 samples, 0.06%)</title><rect x="49.2185%" y="1349" width="0.0569%" height="15" fill="rgb(221,31,33)" fg:x="57940" fg:w="67"/><text x="49.4685%" y="1359.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (67 samples, 0.06%)</title><rect x="49.2185%" y="1333" width="0.0569%" height="15" fill="rgb(237,42,40)" fg:x="57940" fg:w="67"/><text x="49.4685%" y="1343.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (67 samples, 0.06%)</title><rect x="49.2185%" y="1317" width="0.0569%" height="15" fill="rgb(233,51,29)" fg:x="57940" fg:w="67"/><text x="49.4685%" y="1327.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (67 samples, 0.06%)</title><rect x="49.2185%" y="1301" width="0.0569%" height="15" fill="rgb(226,58,20)" fg:x="57940" fg:w="67"/><text x="49.4685%" y="1311.50"></text></g><g><title>Coin::~Coin (57 samples, 0.05%)</title><rect x="49.2270%" y="1285" width="0.0484%" height="15" fill="rgb(208,98,7)" fg:x="57950" fg:w="57"/><text x="49.4770%" y="1295.50"></text></g><g><title>CTxOut::~CTxOut (57 samples, 0.05%)</title><rect x="49.2270%" y="1269" width="0.0484%" height="15" fill="rgb(228,143,44)" fg:x="57950" fg:w="57"/><text x="49.4770%" y="1279.50"></text></g><g><title>CScript::~CScript (57 samples, 0.05%)</title><rect x="49.2270%" y="1253" width="0.0484%" height="15" fill="rgb(246,55,38)" fg:x="57950" fg:w="57"/><text x="49.4770%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (57 samples, 0.05%)</title><rect x="49.2270%" y="1237" width="0.0484%" height="15" fill="rgb(247,87,16)" fg:x="57950" fg:w="57"/><text x="49.4770%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (15 samples, 0.01%)</title><rect x="49.3315%" y="1413" width="0.0127%" height="15" fill="rgb(234,129,42)" fg:x="58073" fg:w="15"/><text x="49.5815%" y="1423.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (20 samples, 0.02%)</title><rect x="49.3298%" y="1429" width="0.0170%" height="15" fill="rgb(220,82,16)" fg:x="58071" fg:w="20"/><text x="49.5798%" y="1439.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (37 samples, 0.03%)</title><rect x="49.3468%" y="1429" width="0.0314%" height="15" fill="rgb(211,88,4)" fg:x="58091" fg:w="37"/><text x="49.5968%" y="1439.50"></text></g><g><title>unlink_chunk.isra.0 (12 samples, 0.01%)</title><rect x="49.3807%" y="1429" width="0.0102%" height="15" fill="rgb(248,151,21)" fg:x="58131" fg:w="12"/><text x="49.6307%" y="1439.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="49.3969%" y="1429" width="0.0408%" height="15" fill="rgb(238,163,6)" fg:x="58150" fg:w="48"/><text x="49.6469%" y="1439.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="49.4266%" y="1413" width="0.0110%" height="15" fill="rgb(209,183,11)" fg:x="58185" fg:w="13"/><text x="49.6766%" y="1423.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (13 samples, 0.01%)</title><rect x="49.4266%" y="1397" width="0.0110%" height="15" fill="rgb(219,37,20)" fg:x="58185" fg:w="13"/><text x="49.6766%" y="1407.50"></text></g><g><title>DataStream::read (13 samples, 0.01%)</title><rect x="49.4266%" y="1381" width="0.0110%" height="15" fill="rgb(210,158,4)" fg:x="58185" fg:w="13"/><text x="49.6766%" y="1391.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt;&amp;&amp;) (12 samples, 0.01%)</title><rect x="49.4461%" y="1413" width="0.0102%" height="15" fill="rgb(221,167,53)" fg:x="58208" fg:w="12"/><text x="49.6961%" y="1423.50"></text></g><g><title>void Unserialize&lt;DataStream, unsigned char&gt; (12 samples, 0.01%)</title><rect x="49.4461%" y="1397" width="0.0102%" height="15" fill="rgb(237,151,45)" fg:x="58208" fg:w="12"/><text x="49.6961%" y="1407.50"></text></g><g><title>DataStream::read (12 samples, 0.01%)</title><rect x="49.4461%" y="1381" width="0.0102%" height="15" fill="rgb(231,39,3)" fg:x="58208" fg:w="12"/><text x="49.6961%" y="1391.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (42 samples, 0.04%)</title><rect x="49.4385%" y="1429" width="0.0357%" height="15" fill="rgb(212,167,28)" fg:x="58199" fg:w="42"/><text x="49.6885%" y="1439.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (12 samples, 0.01%)</title><rect x="49.4640%" y="1413" width="0.0102%" height="15" fill="rgb(232,178,8)" fg:x="58229" fg:w="12"/><text x="49.7140%" y="1423.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (17 samples, 0.01%)</title><rect x="49.4971%" y="1189" width="0.0144%" height="15" fill="rgb(225,151,20)" fg:x="58268" fg:w="17"/><text x="49.7471%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (17 samples, 0.01%)</title><rect x="49.4971%" y="1173" width="0.0144%" height="15" fill="rgb(238,3,37)" fg:x="58268" fg:w="17"/><text x="49.7471%" y="1183.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="49.4971%" y="1157" width="0.0144%" height="15" fill="rgb(251,147,42)" fg:x="58268" fg:w="17"/><text x="49.7471%" y="1167.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="49.4971%" y="1141" width="0.0144%" height="15" fill="rgb(208,173,10)" fg:x="58268" fg:w="17"/><text x="49.7471%" y="1151.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (17 samples, 0.01%)</title><rect x="49.4971%" y="1125" width="0.0144%" height="15" fill="rgb(246,225,4)" fg:x="58268" fg:w="17"/><text x="49.7471%" y="1135.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (17 samples, 0.01%)</title><rect x="49.4971%" y="1109" width="0.0144%" height="15" fill="rgb(248,102,6)" fg:x="58268" fg:w="17"/><text x="49.7471%" y="1119.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (17 samples, 0.01%)</title><rect x="49.4971%" y="1093" width="0.0144%" height="15" fill="rgb(232,6,21)" fg:x="58268" fg:w="17"/><text x="49.7471%" y="1103.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (27 samples, 0.02%)</title><rect x="49.4895%" y="1269" width="0.0229%" height="15" fill="rgb(221,179,22)" fg:x="58259" fg:w="27"/><text x="49.7395%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (27 samples, 0.02%)</title><rect x="49.4895%" y="1253" width="0.0229%" height="15" fill="rgb(252,50,20)" fg:x="58259" fg:w="27"/><text x="49.7395%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (27 samples, 0.02%)</title><rect x="49.4895%" y="1237" width="0.0229%" height="15" fill="rgb(222,56,38)" fg:x="58259" fg:w="27"/><text x="49.7395%" y="1247.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.02%)</title><rect x="49.4895%" y="1221" width="0.0229%" height="15" fill="rgb(206,193,29)" fg:x="58259" fg:w="27"/><text x="49.7395%" y="1231.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (27 samples, 0.02%)</title><rect x="49.4895%" y="1205" width="0.0229%" height="15" fill="rgb(239,192,45)" fg:x="58259" fg:w="27"/><text x="49.7395%" y="1215.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (36 samples, 0.03%)</title><rect x="49.5124%" y="1269" width="0.0306%" height="15" fill="rgb(254,18,36)" fg:x="58286" fg:w="36"/><text x="49.7624%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (36 samples, 0.03%)</title><rect x="49.5124%" y="1253" width="0.0306%" height="15" fill="rgb(221,127,11)" fg:x="58286" fg:w="36"/><text x="49.7624%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (36 samples, 0.03%)</title><rect x="49.5124%" y="1237" width="0.0306%" height="15" fill="rgb(234,146,35)" fg:x="58286" fg:w="36"/><text x="49.7624%" y="1247.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (36 samples, 0.03%)</title><rect x="49.5124%" y="1221" width="0.0306%" height="15" fill="rgb(254,201,37)" fg:x="58286" fg:w="36"/><text x="49.7624%" y="1231.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (36 samples, 0.03%)</title><rect x="49.5124%" y="1205" width="0.0306%" height="15" fill="rgb(211,202,23)" fg:x="58286" fg:w="36"/><text x="49.7624%" y="1215.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (31 samples, 0.03%)</title><rect x="49.5166%" y="1189" width="0.0263%" height="15" fill="rgb(237,91,2)" fg:x="58291" fg:w="31"/><text x="49.7666%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (31 samples, 0.03%)</title><rect x="49.5166%" y="1173" width="0.0263%" height="15" fill="rgb(226,228,36)" fg:x="58291" fg:w="31"/><text x="49.7666%" y="1183.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.03%)</title><rect x="49.5166%" y="1157" width="0.0263%" height="15" fill="rgb(213,63,50)" fg:x="58291" fg:w="31"/><text x="49.7666%" y="1167.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.03%)</title><rect x="49.5166%" y="1141" width="0.0263%" height="15" fill="rgb(235,194,19)" fg:x="58291" fg:w="31"/><text x="49.7666%" y="1151.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (31 samples, 0.03%)</title><rect x="49.5166%" y="1125" width="0.0263%" height="15" fill="rgb(207,204,18)" fg:x="58291" fg:w="31"/><text x="49.7666%" y="1135.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (31 samples, 0.03%)</title><rect x="49.5166%" y="1109" width="0.0263%" height="15" fill="rgb(248,8,7)" fg:x="58291" fg:w="31"/><text x="49.7666%" y="1119.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (31 samples, 0.03%)</title><rect x="49.5166%" y="1093" width="0.0263%" height="15" fill="rgb(223,145,47)" fg:x="58291" fg:w="31"/><text x="49.7666%" y="1103.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (23 samples, 0.02%)</title><rect x="49.5234%" y="1077" width="0.0195%" height="15" fill="rgb(228,84,11)" fg:x="58299" fg:w="23"/><text x="49.7734%" y="1087.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="49.5234%" y="1061" width="0.0195%" height="15" fill="rgb(218,76,45)" fg:x="58299" fg:w="23"/><text x="49.7734%" y="1071.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="49.5234%" y="1045" width="0.0195%" height="15" fill="rgb(223,80,15)" fg:x="58299" fg:w="23"/><text x="49.7734%" y="1055.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (23 samples, 0.02%)</title><rect x="49.5234%" y="1029" width="0.0195%" height="15" fill="rgb(219,218,33)" fg:x="58299" fg:w="23"/><text x="49.7734%" y="1039.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (23 samples, 0.02%)</title><rect x="49.5234%" y="1013" width="0.0195%" height="15" fill="rgb(208,51,11)" fg:x="58299" fg:w="23"/><text x="49.7734%" y="1023.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (23 samples, 0.02%)</title><rect x="49.5234%" y="997" width="0.0195%" height="15" fill="rgb(229,165,39)" fg:x="58299" fg:w="23"/><text x="49.7734%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (23 samples, 0.02%)</title><rect x="49.5234%" y="981" width="0.0195%" height="15" fill="rgb(241,100,24)" fg:x="58299" fg:w="23"/><text x="49.7734%" y="991.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (42 samples, 0.04%)</title><rect x="49.5430%" y="1269" width="0.0357%" height="15" fill="rgb(228,14,23)" fg:x="58322" fg:w="42"/><text x="49.7930%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (42 samples, 0.04%)</title><rect x="49.5430%" y="1253" width="0.0357%" height="15" fill="rgb(247,116,52)" fg:x="58322" fg:w="42"/><text x="49.7930%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (42 samples, 0.04%)</title><rect x="49.5430%" y="1237" width="0.0357%" height="15" fill="rgb(216,149,33)" fg:x="58322" fg:w="42"/><text x="49.7930%" y="1247.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (42 samples, 0.04%)</title><rect x="49.5430%" y="1221" width="0.0357%" height="15" fill="rgb(238,142,29)" fg:x="58322" fg:w="42"/><text x="49.7930%" y="1231.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (42 samples, 0.04%)</title><rect x="49.5430%" y="1205" width="0.0357%" height="15" fill="rgb(224,83,40)" fg:x="58322" fg:w="42"/><text x="49.7930%" y="1215.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="49.5668%" y="1189" width="0.0119%" height="15" fill="rgb(234,165,11)" fg:x="58350" fg:w="14"/><text x="49.8168%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (14 samples, 0.01%)</title><rect x="49.5668%" y="1173" width="0.0119%" height="15" fill="rgb(215,96,23)" fg:x="58350" fg:w="14"/><text x="49.8168%" y="1183.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (133 samples, 0.11%)</title><rect x="49.4742%" y="1429" width="0.1130%" height="15" fill="rgb(233,179,26)" fg:x="58241" fg:w="133"/><text x="49.7242%" y="1439.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (133 samples, 0.11%)</title><rect x="49.4742%" y="1413" width="0.1130%" height="15" fill="rgb(225,129,33)" fg:x="58241" fg:w="133"/><text x="49.7242%" y="1423.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (133 samples, 0.11%)</title><rect x="49.4742%" y="1397" width="0.1130%" height="15" fill="rgb(237,49,13)" fg:x="58241" fg:w="133"/><text x="49.7242%" y="1407.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (133 samples, 0.11%)</title><rect x="49.4742%" y="1381" width="0.1130%" height="15" fill="rgb(211,3,31)" fg:x="58241" fg:w="133"/><text x="49.7242%" y="1391.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (133 samples, 0.11%)</title><rect x="49.4742%" y="1365" width="0.1130%" height="15" fill="rgb(216,152,19)" fg:x="58241" fg:w="133"/><text x="49.7242%" y="1375.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (132 samples, 0.11%)</title><rect x="49.4750%" y="1349" width="0.1121%" height="15" fill="rgb(251,121,35)" fg:x="58242" fg:w="132"/><text x="49.7250%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (132 samples, 0.11%)</title><rect x="49.4750%" y="1333" width="0.1121%" height="15" fill="rgb(210,217,47)" fg:x="58242" fg:w="132"/><text x="49.7250%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (132 samples, 0.11%)</title><rect x="49.4750%" y="1317" width="0.1121%" height="15" fill="rgb(244,116,22)" fg:x="58242" fg:w="132"/><text x="49.7250%" y="1327.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (132 samples, 0.11%)</title><rect x="49.4750%" y="1301" width="0.1121%" height="15" fill="rgb(228,17,21)" fg:x="58242" fg:w="132"/><text x="49.7250%" y="1311.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (132 samples, 0.11%)</title><rect x="49.4750%" y="1285" width="0.1121%" height="15" fill="rgb(240,149,34)" fg:x="58242" fg:w="132"/><text x="49.7250%" y="1295.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.01%)</title><rect x="49.5940%" y="1429" width="0.0119%" height="15" fill="rgb(208,125,47)" fg:x="58382" fg:w="14"/><text x="49.8440%" y="1439.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (29 samples, 0.02%)</title><rect x="49.6058%" y="1429" width="0.0246%" height="15" fill="rgb(249,186,39)" fg:x="58396" fg:w="29"/><text x="49.8558%" y="1439.50"></text></g><g><title>_int_malloc (12 samples, 0.01%)</title><rect x="49.6857%" y="1109" width="0.0102%" height="15" fill="rgb(240,220,33)" fg:x="58490" fg:w="12"/><text x="49.9357%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (19 samples, 0.02%)</title><rect x="49.6848%" y="1125" width="0.0161%" height="15" fill="rgb(243,110,23)" fg:x="58489" fg:w="19"/><text x="49.9348%" y="1135.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (69 samples, 0.06%)</title><rect x="49.6432%" y="1237" width="0.0586%" height="15" fill="rgb(219,163,46)" fg:x="58440" fg:w="69"/><text x="49.8932%" y="1247.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (69 samples, 0.06%)</title><rect x="49.6432%" y="1221" width="0.0586%" height="15" fill="rgb(216,126,30)" fg:x="58440" fg:w="69"/><text x="49.8932%" y="1231.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (69 samples, 0.06%)</title><rect x="49.6432%" y="1205" width="0.0586%" height="15" fill="rgb(208,139,11)" fg:x="58440" fg:w="69"/><text x="49.8932%" y="1215.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (69 samples, 0.06%)</title><rect x="49.6432%" y="1189" width="0.0586%" height="15" fill="rgb(213,118,36)" fg:x="58440" fg:w="69"/><text x="49.8932%" y="1199.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (69 samples, 0.06%)</title><rect x="49.6432%" y="1173" width="0.0586%" height="15" fill="rgb(226,43,17)" fg:x="58440" fg:w="69"/><text x="49.8932%" y="1183.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (38 samples, 0.03%)</title><rect x="49.6696%" y="1157" width="0.0323%" height="15" fill="rgb(254,217,4)" fg:x="58471" fg:w="38"/><text x="49.9196%" y="1167.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (38 samples, 0.03%)</title><rect x="49.6696%" y="1141" width="0.0323%" height="15" fill="rgb(210,134,47)" fg:x="58471" fg:w="38"/><text x="49.9196%" y="1151.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.07%)</title><rect x="49.6339%" y="1285" width="0.0714%" height="15" fill="rgb(237,24,49)" fg:x="58429" fg:w="84"/><text x="49.8839%" y="1295.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.07%)</title><rect x="49.6339%" y="1269" width="0.0714%" height="15" fill="rgb(251,39,46)" fg:x="58429" fg:w="84"/><text x="49.8839%" y="1279.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (84 samples, 0.07%)</title><rect x="49.6339%" y="1253" width="0.0714%" height="15" fill="rgb(251,220,3)" fg:x="58429" fg:w="84"/><text x="49.8839%" y="1263.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.09%)</title><rect x="49.6339%" y="1413" width="0.0866%" height="15" fill="rgb(228,105,12)" fg:x="58429" fg:w="102"/><text x="49.8839%" y="1423.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.09%)</title><rect x="49.6339%" y="1397" width="0.0866%" height="15" fill="rgb(215,196,1)" fg:x="58429" fg:w="102"/><text x="49.8839%" y="1407.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.09%)</title><rect x="49.6339%" y="1381" width="0.0866%" height="15" fill="rgb(214,33,39)" fg:x="58429" fg:w="102"/><text x="49.8839%" y="1391.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.09%)</title><rect x="49.6339%" y="1365" width="0.0866%" height="15" fill="rgb(220,19,52)" fg:x="58429" fg:w="102"/><text x="49.8839%" y="1375.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.09%)</title><rect x="49.6339%" y="1349" width="0.0866%" height="15" fill="rgb(221,78,38)" fg:x="58429" fg:w="102"/><text x="49.8839%" y="1359.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.09%)</title><rect x="49.6339%" y="1333" width="0.0866%" height="15" fill="rgb(253,30,16)" fg:x="58429" fg:w="102"/><text x="49.8839%" y="1343.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (102 samples, 0.09%)</title><rect x="49.6339%" y="1317" width="0.0866%" height="15" fill="rgb(242,65,0)" fg:x="58429" fg:w="102"/><text x="49.8839%" y="1327.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (102 samples, 0.09%)</title><rect x="49.6339%" y="1301" width="0.0866%" height="15" fill="rgb(235,201,12)" fg:x="58429" fg:w="102"/><text x="49.8839%" y="1311.50"></text></g><g><title>malloc (17 samples, 0.01%)</title><rect x="49.7061%" y="1285" width="0.0144%" height="15" fill="rgb(233,161,9)" fg:x="58514" fg:w="17"/><text x="49.9561%" y="1295.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (108 samples, 0.09%)</title><rect x="49.6305%" y="1429" width="0.0917%" height="15" fill="rgb(241,207,41)" fg:x="58425" fg:w="108"/><text x="49.8805%" y="1439.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (39 samples, 0.03%)</title><rect x="49.7222%" y="1429" width="0.0331%" height="15" fill="rgb(212,69,46)" fg:x="58533" fg:w="39"/><text x="49.9722%" y="1439.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (16 samples, 0.01%)</title><rect x="49.7418%" y="1413" width="0.0136%" height="15" fill="rgb(239,69,45)" fg:x="58556" fg:w="16"/><text x="49.9918%" y="1423.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (16 samples, 0.01%)</title><rect x="49.7418%" y="1397" width="0.0136%" height="15" fill="rgb(242,117,48)" fg:x="58556" fg:w="16"/><text x="49.9918%" y="1407.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="49.7418%" y="1381" width="0.0136%" height="15" fill="rgb(228,41,36)" fg:x="58556" fg:w="16"/><text x="49.9918%" y="1391.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="49.7418%" y="1365" width="0.0136%" height="15" fill="rgb(212,3,32)" fg:x="58556" fg:w="16"/><text x="49.9918%" y="1375.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (16 samples, 0.01%)</title><rect x="49.7418%" y="1349" width="0.0136%" height="15" fill="rgb(233,41,49)" fg:x="58556" fg:w="16"/><text x="49.9918%" y="1359.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (16 samples, 0.01%)</title><rect x="49.7418%" y="1333" width="0.0136%" height="15" fill="rgb(252,170,49)" fg:x="58556" fg:w="16"/><text x="49.9918%" y="1343.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (16 samples, 0.01%)</title><rect x="49.7418%" y="1317" width="0.0136%" height="15" fill="rgb(229,53,26)" fg:x="58556" fg:w="16"/><text x="49.9918%" y="1327.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (27 samples, 0.02%)</title><rect x="49.7554%" y="1429" width="0.0229%" height="15" fill="rgb(217,157,12)" fg:x="58572" fg:w="27"/><text x="50.0054%" y="1439.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (76 samples, 0.06%)</title><rect x="49.7893%" y="1429" width="0.0646%" height="15" fill="rgb(227,17,9)" fg:x="58612" fg:w="76"/><text x="50.0393%" y="1439.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.02%)</title><rect x="49.8369%" y="1413" width="0.0170%" height="15" fill="rgb(218,84,12)" fg:x="58668" fg:w="20"/><text x="50.0869%" y="1423.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (17 samples, 0.01%)</title><rect x="49.8394%" y="1397" width="0.0144%" height="15" fill="rgb(212,79,24)" fg:x="58671" fg:w="17"/><text x="50.0894%" y="1407.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="49.8573%" y="1429" width="0.0408%" height="15" fill="rgb(217,222,37)" fg:x="58692" fg:w="48"/><text x="50.1073%" y="1439.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (46 samples, 0.04%)</title><rect x="49.8981%" y="1429" width="0.0391%" height="15" fill="rgb(246,208,8)" fg:x="58740" fg:w="46"/><text x="50.1481%" y="1439.50"></text></g><g><title>b-msghand (58,789 samples, 49.94%)</title><rect x="0.0085%" y="1445" width="49.9397%" height="15" fill="rgb(244,133,10)" fg:x="10" fg:w="58789"/><text x="0.2585%" y="1455.50">b-msghand</text></g><g><title>DataStream::resize (319 samples, 0.27%)</title><rect x="49.9499%" y="1381" width="0.2710%" height="15" fill="rgb(209,219,41)" fg:x="58801" fg:w="319"/><text x="50.1999%" y="1391.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::resize (319 samples, 0.27%)</title><rect x="49.9499%" y="1365" width="0.2710%" height="15" fill="rgb(253,175,45)" fg:x="58801" fg:w="319"/><text x="50.1999%" y="1375.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (319 samples, 0.27%)</title><rect x="49.9499%" y="1349" width="0.2710%" height="15" fill="rgb(235,100,37)" fg:x="58801" fg:w="319"/><text x="50.1999%" y="1359.50"></text></g><g><title>std::byte* std::__uninitialized_fill_n_a&lt;std::byte*, unsigned long, std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; (319 samples, 0.27%)</title><rect x="49.9499%" y="1333" width="0.2710%" height="15" fill="rgb(225,87,19)" fg:x="58801" fg:w="319"/><text x="50.1999%" y="1343.50"></text></g><g><title>decltype  (152 samples, 0.13%)</title><rect x="50.0917%" y="1317" width="0.1291%" height="15" fill="rgb(217,152,17)" fg:x="58968" fg:w="152"/><text x="50.3417%" y="1327.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (152 samples, 0.13%)</title><rect x="50.0917%" y="1301" width="0.1291%" height="15" fill="rgb(235,72,13)" fg:x="58968" fg:w="152"/><text x="50.3417%" y="1311.50"></text></g><g><title>decltype (152 samples, 0.13%)</title><rect x="50.0917%" y="1285" width="0.1291%" height="15" fill="rgb(233,140,18)" fg:x="58968" fg:w="152"/><text x="50.3417%" y="1295.50"></text></g><g><title>V2Transport::GetReceivedMessage (370 samples, 0.31%)</title><rect x="49.9499%" y="1397" width="0.3143%" height="15" fill="rgb(207,212,28)" fg:x="58801" fg:w="370"/><text x="50.1999%" y="1407.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (51 samples, 0.04%)</title><rect x="50.2209%" y="1381" width="0.0433%" height="15" fill="rgb(220,130,25)" fg:x="59120" fg:w="51"/><text x="50.4709%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (51 samples, 0.04%)</title><rect x="50.2209%" y="1365" width="0.0433%" height="15" fill="rgb(205,55,34)" fg:x="59120" fg:w="51"/><text x="50.4709%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (51 samples, 0.04%)</title><rect x="50.2209%" y="1349" width="0.0433%" height="15" fill="rgb(237,54,35)" fg:x="59120" fg:w="51"/><text x="50.4709%" y="1359.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (51 samples, 0.04%)</title><rect x="50.2209%" y="1333" width="0.0433%" height="15" fill="rgb(208,67,23)" fg:x="59120" fg:w="51"/><text x="50.4709%" y="1343.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (51 samples, 0.04%)</title><rect x="50.2209%" y="1317" width="0.0433%" height="15" fill="rgb(206,207,50)" fg:x="59120" fg:w="51"/><text x="50.4709%" y="1327.50"></text></g><g><title>__memmove_avx512_unaligned_erms (51 samples, 0.04%)</title><rect x="50.2209%" y="1301" width="0.0433%" height="15" fill="rgb(213,211,42)" fg:x="59120" fg:w="51"/><text x="50.4709%" y="1311.50"></text></g><g><title>WriteLE32 (19 samples, 0.02%)</title><rect x="51.8697%" y="1285" width="0.0161%" height="15" fill="rgb(252,197,50)" fg:x="61061" fg:w="19"/><text x="52.1197%" y="1295.50"></text></g><g><title>ChaCha20Aligned::Crypt (19 samples, 0.02%)</title><rect x="51.8697%" y="1269" width="0.0161%" height="15" fill="rgb(251,211,41)" fg:x="61061" fg:w="19"/><text x="52.1197%" y="1279.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="51.8858%" y="1285" width="0.0289%" height="15" fill="rgb(229,211,5)" fg:x="61080" fg:w="34"/><text x="52.1358%" y="1295.50"></text></g><g><title>[unknown] (33 samples, 0.03%)</title><rect x="51.8867%" y="1269" width="0.0280%" height="15" fill="rgb(239,36,31)" fg:x="61081" fg:w="33"/><text x="52.1367%" y="1279.50"></text></g><g><title>[unknown] (33 samples, 0.03%)</title><rect x="51.8867%" y="1253" width="0.0280%" height="15" fill="rgb(248,67,31)" fg:x="61081" fg:w="33"/><text x="52.1367%" y="1263.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="51.8875%" y="1237" width="0.0272%" height="15" fill="rgb(249,55,44)" fg:x="61082" fg:w="32"/><text x="52.1375%" y="1247.50"></text></g><g><title>[unknown] (30 samples, 0.03%)</title><rect x="51.8892%" y="1221" width="0.0255%" height="15" fill="rgb(216,82,12)" fg:x="61084" fg:w="30"/><text x="52.1392%" y="1231.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="51.8909%" y="1205" width="0.0238%" height="15" fill="rgb(242,174,1)" fg:x="61086" fg:w="28"/><text x="52.1409%" y="1215.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="51.8952%" y="1189" width="0.0195%" height="15" fill="rgb(208,120,29)" fg:x="61091" fg:w="23"/><text x="52.1452%" y="1199.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="51.8952%" y="1173" width="0.0195%" height="15" fill="rgb(221,105,43)" fg:x="61091" fg:w="23"/><text x="52.1452%" y="1183.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="51.8952%" y="1157" width="0.0195%" height="15" fill="rgb(234,124,22)" fg:x="61091" fg:w="23"/><text x="52.1452%" y="1167.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="51.8960%" y="1141" width="0.0187%" height="15" fill="rgb(212,23,30)" fg:x="61092" fg:w="22"/><text x="52.1460%" y="1151.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="51.8969%" y="1125" width="0.0178%" height="15" fill="rgb(219,122,53)" fg:x="61093" fg:w="21"/><text x="52.1469%" y="1135.50"></text></g><g><title>ChaCha20Aligned::Crypt (2,781 samples, 2.36%)</title><rect x="50.2650%" y="1301" width="2.3624%" height="15" fill="rgb(248,84,24)" fg:x="59172" fg:w="2781"/><text x="50.5150%" y="1311.50">Ch..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (839 samples, 0.71%)</title><rect x="51.9147%" y="1285" width="0.7127%" height="15" fill="rgb(245,115,18)" fg:x="61114" fg:w="839"/><text x="52.1647%" y="1295.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (839 samples, 0.71%)</title><rect x="51.9147%" y="1269" width="0.7127%" height="15" fill="rgb(227,176,51)" fg:x="61114" fg:w="839"/><text x="52.1647%" y="1279.50"></text></g><g><title>ChaCha20::Crypt (2,783 samples, 2.36%)</title><rect x="50.2642%" y="1317" width="2.3641%" height="15" fill="rgb(229,63,42)" fg:x="59171" fg:w="2783"/><text x="50.5142%" y="1327.50">Ch..</text></g><g><title>BIP324Cipher::Decrypt (4,003 samples, 3.40%)</title><rect x="50.2642%" y="1365" width="3.4004%" height="15" fill="rgb(247,202,24)" fg:x="59171" fg:w="4003"/><text x="50.5142%" y="1375.50">BIP..</text></g><g><title>FSChaCha20Poly1305::Decrypt (4,003 samples, 3.40%)</title><rect x="50.2642%" y="1349" width="3.4004%" height="15" fill="rgb(244,173,20)" fg:x="59171" fg:w="4003"/><text x="50.5142%" y="1359.50">FSC..</text></g><g><title>AEADChaCha20Poly1305::Decrypt (4,003 samples, 3.40%)</title><rect x="50.2642%" y="1333" width="3.4004%" height="15" fill="rgb(242,81,47)" fg:x="59171" fg:w="4003"/><text x="50.5142%" y="1343.50">AEA..</text></g><g><title>ComputeTag (1,220 samples, 1.04%)</title><rect x="52.6283%" y="1317" width="1.0364%" height="15" fill="rgb(231,185,54)" fg:x="61954" fg:w="1220"/><text x="52.8783%" y="1327.50"></text></g><g><title>Poly1305::Update (1,220 samples, 1.04%)</title><rect x="52.6283%" y="1301" width="1.0364%" height="15" fill="rgb(243,55,32)" fg:x="61954" fg:w="1220"/><text x="52.8783%" y="1311.50"></text></g><g><title>poly1305_donna::poly1305_update (1,220 samples, 1.04%)</title><rect x="52.6283%" y="1285" width="1.0364%" height="15" fill="rgb(208,167,19)" fg:x="61954" fg:w="1220"/><text x="52.8783%" y="1295.50"></text></g><g><title>poly1305_donna::poly1305_blocks (1,220 samples, 1.04%)</title><rect x="52.6283%" y="1269" width="1.0364%" height="15" fill="rgb(231,72,35)" fg:x="61954" fg:w="1220"/><text x="52.8783%" y="1279.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (4,044 samples, 3.44%)</title><rect x="50.2642%" y="1381" width="3.4353%" height="15" fill="rgb(250,173,51)" fg:x="59171" fg:w="4044"/><text x="50.5142%" y="1391.50">V2T..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (41 samples, 0.03%)</title><rect x="53.6646%" y="1365" width="0.0348%" height="15" fill="rgb(209,5,22)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1375.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (41 samples, 0.03%)</title><rect x="53.6646%" y="1349" width="0.0348%" height="15" fill="rgb(250,174,19)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1359.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (41 samples, 0.03%)</title><rect x="53.6646%" y="1333" width="0.0348%" height="15" fill="rgb(217,3,49)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1343.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (41 samples, 0.03%)</title><rect x="53.6646%" y="1317" width="0.0348%" height="15" fill="rgb(218,225,5)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1327.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (41 samples, 0.03%)</title><rect x="53.6646%" y="1301" width="0.0348%" height="15" fill="rgb(236,89,11)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1311.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (41 samples, 0.03%)</title><rect x="53.6646%" y="1285" width="0.0348%" height="15" fill="rgb(206,33,28)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1295.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (41 samples, 0.03%)</title><rect x="53.6646%" y="1269" width="0.0348%" height="15" fill="rgb(241,56,42)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1279.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (41 samples, 0.03%)</title><rect x="53.6646%" y="1253" width="0.0348%" height="15" fill="rgb(222,44,11)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1263.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (41 samples, 0.03%)</title><rect x="53.6646%" y="1237" width="0.0348%" height="15" fill="rgb(234,111,20)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1247.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (41 samples, 0.03%)</title><rect x="53.6646%" y="1221" width="0.0348%" height="15" fill="rgb(237,77,6)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1231.50"></text></g><g><title>__memset_avx512_unaligned_erms (41 samples, 0.03%)</title><rect x="53.6646%" y="1205" width="0.0348%" height="15" fill="rgb(235,111,23)" fg:x="63174" fg:w="41"/><text x="53.9146%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1381" width="0.0799%" height="15" fill="rgb(251,135,29)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1391.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1365" width="0.0799%" height="15" fill="rgb(217,57,1)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1375.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1349" width="0.0799%" height="15" fill="rgb(249,119,31)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1359.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1333" width="0.0799%" height="15" fill="rgb(233,164,33)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1343.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1317" width="0.0799%" height="15" fill="rgb(250,217,43)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1327.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1301" width="0.0799%" height="15" fill="rgb(232,154,50)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1311.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1285" width="0.0799%" height="15" fill="rgb(227,190,8)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1295.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1269" width="0.0799%" height="15" fill="rgb(209,217,32)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1279.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1253" width="0.0799%" height="15" fill="rgb(243,203,50)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1263.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (94 samples, 0.08%)</title><rect x="53.6995%" y="1237" width="0.0799%" height="15" fill="rgb(232,152,27)" fg:x="63215" fg:w="94"/><text x="53.9495%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (93 samples, 0.08%)</title><rect x="53.7003%" y="1221" width="0.0790%" height="15" fill="rgb(240,34,29)" fg:x="63216" fg:w="93"/><text x="53.9503%" y="1231.50"></text></g><g><title>V2Transport::ReceivedBytes (4,329 samples, 3.68%)</title><rect x="50.2642%" y="1397" width="3.6774%" height="15" fill="rgb(215,185,52)" fg:x="59171" fg:w="4329"/><text x="50.5142%" y="1407.50">V2Tr..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (191 samples, 0.16%)</title><rect x="53.7793%" y="1381" width="0.1622%" height="15" fill="rgb(240,89,49)" fg:x="63309" fg:w="191"/><text x="54.0293%" y="1391.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (187 samples, 0.16%)</title><rect x="53.7827%" y="1365" width="0.1589%" height="15" fill="rgb(225,12,52)" fg:x="63313" fg:w="187"/><text x="54.0327%" y="1375.50"></text></g><g><title>unsigned char* std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (187 samples, 0.16%)</title><rect x="53.7827%" y="1349" width="0.1589%" height="15" fill="rgb(239,128,45)" fg:x="63313" fg:w="187"/><text x="54.0327%" y="1359.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;unsigned char, void&gt;::value, unsigned char*&gt;::type std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (187 samples, 0.16%)</title><rect x="53.7827%" y="1333" width="0.1589%" height="15" fill="rgb(211,78,47)" fg:x="63313" fg:w="187"/><text x="54.0327%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (187 samples, 0.16%)</title><rect x="53.7827%" y="1317" width="0.1589%" height="15" fill="rgb(232,31,21)" fg:x="63313" fg:w="187"/><text x="54.0327%" y="1327.50"></text></g><g><title>CNode::ReceiveMsgBytes (4,706 samples, 4.00%)</title><rect x="49.9490%" y="1413" width="3.9976%" height="15" fill="rgb(222,168,14)" fg:x="58800" fg:w="4706"/><text x="50.1990%" y="1423.50">CNod..</text></g><g><title>__libc_recv (480 samples, 0.41%)</title><rect x="53.9484%" y="1413" width="0.4077%" height="15" fill="rgb(209,128,24)" fg:x="63508" fg:w="480"/><text x="54.1984%" y="1423.50"></text></g><g><title>[unknown] (479 samples, 0.41%)</title><rect x="53.9492%" y="1397" width="0.4069%" height="15" fill="rgb(249,35,13)" fg:x="63509" fg:w="479"/><text x="54.1992%" y="1407.50"></text></g><g><title>[unknown] (477 samples, 0.41%)</title><rect x="53.9509%" y="1381" width="0.4052%" height="15" fill="rgb(218,7,2)" fg:x="63511" fg:w="477"/><text x="54.2009%" y="1391.50"></text></g><g><title>[unknown] (475 samples, 0.40%)</title><rect x="53.9526%" y="1365" width="0.4035%" height="15" fill="rgb(238,107,27)" fg:x="63513" fg:w="475"/><text x="54.2026%" y="1375.50"></text></g><g><title>[unknown] (470 samples, 0.40%)</title><rect x="53.9568%" y="1349" width="0.3993%" height="15" fill="rgb(217,88,38)" fg:x="63518" fg:w="470"/><text x="54.2068%" y="1359.50"></text></g><g><title>[unknown] (468 samples, 0.40%)</title><rect x="53.9585%" y="1333" width="0.3976%" height="15" fill="rgb(230,207,0)" fg:x="63520" fg:w="468"/><text x="54.2085%" y="1343.50"></text></g><g><title>[unknown] (466 samples, 0.40%)</title><rect x="53.9602%" y="1317" width="0.3959%" height="15" fill="rgb(249,64,54)" fg:x="63522" fg:w="466"/><text x="54.2102%" y="1327.50"></text></g><g><title>[unknown] (465 samples, 0.40%)</title><rect x="53.9611%" y="1301" width="0.3950%" height="15" fill="rgb(231,7,11)" fg:x="63523" fg:w="465"/><text x="54.2111%" y="1311.50"></text></g><g><title>[unknown] (465 samples, 0.40%)</title><rect x="53.9611%" y="1285" width="0.3950%" height="15" fill="rgb(205,149,21)" fg:x="63523" fg:w="465"/><text x="54.2111%" y="1295.50"></text></g><g><title>[unknown] (454 samples, 0.39%)</title><rect x="53.9704%" y="1269" width="0.3857%" height="15" fill="rgb(215,126,34)" fg:x="63534" fg:w="454"/><text x="54.2204%" y="1279.50"></text></g><g><title>[unknown] (434 samples, 0.37%)</title><rect x="53.9874%" y="1253" width="0.3687%" height="15" fill="rgb(241,132,45)" fg:x="63554" fg:w="434"/><text x="54.2374%" y="1263.50"></text></g><g><title>[unknown] (385 samples, 0.33%)</title><rect x="54.0291%" y="1237" width="0.3270%" height="15" fill="rgb(252,69,32)" fg:x="63603" fg:w="385"/><text x="54.2791%" y="1247.50"></text></g><g><title>[unknown] (360 samples, 0.31%)</title><rect x="54.0503%" y="1221" width="0.3058%" height="15" fill="rgb(232,204,19)" fg:x="63628" fg:w="360"/><text x="54.3003%" y="1231.50"></text></g><g><title>[unknown] (101 samples, 0.09%)</title><rect x="54.2703%" y="1205" width="0.0858%" height="15" fill="rgb(249,15,47)" fg:x="63887" fg:w="101"/><text x="54.5203%" y="1215.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="54.3340%" y="1189" width="0.0221%" height="15" fill="rgb(209,227,23)" fg:x="63962" fg:w="26"/><text x="54.5840%" y="1199.50"></text></g><g><title>CConnman::SocketHandlerConnected (5,190 samples, 4.41%)</title><rect x="49.9482%" y="1429" width="4.4088%" height="15" fill="rgb(248,92,24)" fg:x="58799" fg:w="5190"/><text x="50.1982%" y="1439.50">CConn..</text></g><g><title>Sock::WaitMany (54 samples, 0.05%)</title><rect x="54.3824%" y="1221" width="0.0459%" height="15" fill="rgb(247,59,2)" fg:x="64019" fg:w="54"/><text x="54.6324%" y="1231.50"></text></g><g><title>__poll (54 samples, 0.05%)</title><rect x="54.3824%" y="1205" width="0.0459%" height="15" fill="rgb(221,30,5)" fg:x="64019" fg:w="54"/><text x="54.6324%" y="1215.50"></text></g><g><title>[unknown] (53 samples, 0.05%)</title><rect x="54.3833%" y="1189" width="0.0450%" height="15" fill="rgb(208,108,53)" fg:x="64020" fg:w="53"/><text x="54.6333%" y="1199.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="54.3850%" y="1173" width="0.0433%" height="15" fill="rgb(211,183,26)" fg:x="64022" fg:w="51"/><text x="54.6350%" y="1183.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="54.3850%" y="1157" width="0.0433%" height="15" fill="rgb(232,132,4)" fg:x="64022" fg:w="51"/><text x="54.6350%" y="1167.50"></text></g><g><title>[unknown] (46 samples, 0.04%)</title><rect x="54.3892%" y="1141" width="0.0391%" height="15" fill="rgb(253,128,37)" fg:x="64027" fg:w="46"/><text x="54.6392%" y="1151.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="54.3994%" y="1125" width="0.0289%" height="15" fill="rgb(221,58,24)" fg:x="64039" fg:w="34"/><text x="54.6494%" y="1135.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="54.4045%" y="1109" width="0.0238%" height="15" fill="rgb(230,54,45)" fg:x="64045" fg:w="28"/><text x="54.6545%" y="1119.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="54.4105%" y="1093" width="0.0178%" height="15" fill="rgb(254,21,18)" fg:x="64052" fg:w="21"/><text x="54.6605%" y="1103.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="54.4130%" y="1077" width="0.0153%" height="15" fill="rgb(221,108,0)" fg:x="64055" fg:w="18"/><text x="54.6630%" y="1087.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="54.4181%" y="1061" width="0.0102%" height="15" fill="rgb(206,95,1)" fg:x="64061" fg:w="12"/><text x="54.6681%" y="1071.50"></text></g><g><title>Sock::WaitMany (58 samples, 0.05%)</title><rect x="54.3816%" y="1237" width="0.0493%" height="15" fill="rgb(237,52,5)" fg:x="64018" fg:w="58"/><text x="54.6316%" y="1247.50"></text></g><g><title>CConnman::SocketHandler (70 samples, 0.06%)</title><rect x="54.3748%" y="1253" width="0.0595%" height="15" fill="rgb(218,150,34)" fg:x="64010" fg:w="70"/><text x="54.6248%" y="1263.50"></text></g><g><title>__clone (80 samples, 0.07%)</title><rect x="54.3705%" y="1429" width="0.0680%" height="15" fill="rgb(235,194,28)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1439.50"></text></g><g><title>start_thread (80 samples, 0.07%)</title><rect x="54.3705%" y="1413" width="0.0680%" height="15" fill="rgb(245,92,18)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1423.50"></text></g><g><title>execute_native_thread_routine (80 samples, 0.07%)</title><rect x="54.3705%" y="1397" width="0.0680%" height="15" fill="rgb(253,203,53)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1407.50"></text></g><g><title>_M_run (80 samples, 0.07%)</title><rect x="54.3705%" y="1381" width="0.0680%" height="15" fill="rgb(249,185,47)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1391.50"></text></g><g><title>operator (80 samples, 0.07%)</title><rect x="54.3705%" y="1365" width="0.0680%" height="15" fill="rgb(252,194,52)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1375.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (80 samples, 0.07%)</title><rect x="54.3705%" y="1349" width="0.0680%" height="15" fill="rgb(210,53,36)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1359.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (80 samples, 0.07%)</title><rect x="54.3705%" y="1333" width="0.0680%" height="15" fill="rgb(237,37,25)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1343.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (80 samples, 0.07%)</title><rect x="54.3705%" y="1317" width="0.0680%" height="15" fill="rgb(242,116,27)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1327.50"></text></g><g><title>util::TraceThread (80 samples, 0.07%)</title><rect x="54.3705%" y="1301" width="0.0680%" height="15" fill="rgb(213,185,26)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1311.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (80 samples, 0.07%)</title><rect x="54.3705%" y="1285" width="0.0680%" height="15" fill="rgb(225,204,8)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1295.50"></text></g><g><title>CConnman::ThreadSocketHandler (80 samples, 0.07%)</title><rect x="54.3705%" y="1269" width="0.0680%" height="15" fill="rgb(254,111,37)" fg:x="64005" fg:w="80"/><text x="54.6205%" y="1279.50"></text></g><g><title>b-net (5,289 samples, 4.49%)</title><rect x="49.9482%" y="1445" width="4.4929%" height="15" fill="rgb(242,35,9)" fg:x="58799" fg:w="5289"/><text x="50.1982%" y="1455.50">b-net</text></g><g><title>b-opencon (21 samples, 0.02%)</title><rect x="54.4410%" y="1445" width="0.0178%" height="15" fill="rgb(232,138,49)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1455.50"></text></g><g><title>__clone (21 samples, 0.02%)</title><rect x="54.4410%" y="1429" width="0.0178%" height="15" fill="rgb(247,56,4)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1439.50"></text></g><g><title>start_thread (21 samples, 0.02%)</title><rect x="54.4410%" y="1413" width="0.0178%" height="15" fill="rgb(226,179,17)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1423.50"></text></g><g><title>execute_native_thread_routine (21 samples, 0.02%)</title><rect x="54.4410%" y="1397" width="0.0178%" height="15" fill="rgb(216,163,45)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1407.50"></text></g><g><title>_M_run (21 samples, 0.02%)</title><rect x="54.4410%" y="1381" width="0.0178%" height="15" fill="rgb(211,157,3)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1391.50"></text></g><g><title>operator (21 samples, 0.02%)</title><rect x="54.4410%" y="1365" width="0.0178%" height="15" fill="rgb(234,44,20)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1375.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (21 samples, 0.02%)</title><rect x="54.4410%" y="1349" width="0.0178%" height="15" fill="rgb(254,138,23)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1359.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (21 samples, 0.02%)</title><rect x="54.4410%" y="1333" width="0.0178%" height="15" fill="rgb(206,119,39)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1343.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt; &gt; &gt;::_M_run (21 samples, 0.02%)</title><rect x="54.4410%" y="1317" width="0.0178%" height="15" fill="rgb(231,105,52)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1327.50"></text></g><g><title>util::TraceThread (21 samples, 0.02%)</title><rect x="54.4410%" y="1301" width="0.0178%" height="15" fill="rgb(250,20,5)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1311.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (21 samples, 0.02%)</title><rect x="54.4410%" y="1285" width="0.0178%" height="15" fill="rgb(215,198,30)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1295.50"></text></g><g><title>_M_invoke (21 samples, 0.02%)</title><rect x="54.4410%" y="1269" width="0.0178%" height="15" fill="rgb(246,142,8)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1279.50"></text></g><g><title>__invoke_r&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (21 samples, 0.02%)</title><rect x="54.4410%" y="1253" width="0.0178%" height="15" fill="rgb(243,26,38)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1263.50"></text></g><g><title>__invoke_impl&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (21 samples, 0.02%)</title><rect x="54.4410%" y="1237" width="0.0178%" height="15" fill="rgb(205,133,28)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1247.50"></text></g><g><title>std::_Function_handler&lt;void (), CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt;::_M_invoke (21 samples, 0.02%)</title><rect x="54.4410%" y="1221" width="0.0178%" height="15" fill="rgb(212,34,0)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1231.50"></text></g><g><title>CConnman::ThreadOpenConnections (21 samples, 0.02%)</title><rect x="54.4410%" y="1205" width="0.0178%" height="15" fill="rgb(251,226,22)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1215.50"></text></g><g><title>CThreadInterrupt::sleep_for (21 samples, 0.02%)</title><rect x="54.4410%" y="1189" width="0.0178%" height="15" fill="rgb(252,119,9)" fg:x="64088" fg:w="21"/><text x="54.6910%" y="1199.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (20 samples, 0.02%)</title><rect x="54.4419%" y="1173" width="0.0170%" height="15" fill="rgb(213,150,50)" fg:x="64089" fg:w="20"/><text x="54.6919%" y="1183.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (20 samples, 0.02%)</title><rect x="54.4419%" y="1157" width="0.0170%" height="15" fill="rgb(212,24,39)" fg:x="64089" fg:w="20"/><text x="54.6919%" y="1167.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (20 samples, 0.02%)</title><rect x="54.4419%" y="1141" width="0.0170%" height="15" fill="rgb(213,46,39)" fg:x="64089" fg:w="20"/><text x="54.6919%" y="1151.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (20 samples, 0.02%)</title><rect x="54.4419%" y="1125" width="0.0170%" height="15" fill="rgb(239,106,12)" fg:x="64089" fg:w="20"/><text x="54.6919%" y="1135.50"></text></g><g><title>std::__condvar::wait_until (20 samples, 0.02%)</title><rect x="54.4419%" y="1109" width="0.0170%" height="15" fill="rgb(249,229,21)" fg:x="64089" fg:w="20"/><text x="54.6919%" y="1119.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (20 samples, 0.02%)</title><rect x="54.4419%" y="1093" width="0.0170%" height="15" fill="rgb(212,158,3)" fg:x="64089" fg:w="20"/><text x="54.6919%" y="1103.50"></text></g><g><title>__futex_abstimed_wait_common (20 samples, 0.02%)</title><rect x="54.4419%" y="1077" width="0.0170%" height="15" fill="rgb(253,26,48)" fg:x="64089" fg:w="20"/><text x="54.6919%" y="1087.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="54.4419%" y="1061" width="0.0170%" height="15" fill="rgb(238,178,20)" fg:x="64089" fg:w="20"/><text x="54.6919%" y="1071.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="54.4427%" y="1045" width="0.0161%" height="15" fill="rgb(208,86,15)" fg:x="64090" fg:w="19"/><text x="54.6927%" y="1055.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="54.4427%" y="1029" width="0.0161%" height="15" fill="rgb(239,42,53)" fg:x="64090" fg:w="19"/><text x="54.6927%" y="1039.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="54.4427%" y="1013" width="0.0161%" height="15" fill="rgb(245,226,8)" fg:x="64090" fg:w="19"/><text x="54.6927%" y="1023.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="54.4436%" y="997" width="0.0153%" height="15" fill="rgb(216,176,32)" fg:x="64091" fg:w="18"/><text x="54.6936%" y="1007.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="54.4444%" y="981" width="0.0144%" height="15" fill="rgb(231,186,21)" fg:x="64092" fg:w="17"/><text x="54.6944%" y="991.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="54.4444%" y="965" width="0.0144%" height="15" fill="rgb(205,95,49)" fg:x="64092" fg:w="17"/><text x="54.6944%" y="975.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="54.4453%" y="949" width="0.0136%" height="15" fill="rgb(217,145,8)" fg:x="64093" fg:w="16"/><text x="54.6953%" y="959.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="54.4461%" y="933" width="0.0127%" height="15" fill="rgb(239,144,48)" fg:x="64094" fg:w="15"/><text x="54.6961%" y="943.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="54.4461%" y="917" width="0.0127%" height="15" fill="rgb(214,189,23)" fg:x="64094" fg:w="15"/><text x="54.6961%" y="927.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="54.4470%" y="901" width="0.0119%" height="15" fill="rgb(229,157,17)" fg:x="64095" fg:w="14"/><text x="54.6970%" y="911.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="54.4478%" y="885" width="0.0110%" height="15" fill="rgb(230,5,48)" fg:x="64096" fg:w="13"/><text x="54.6978%" y="895.50"></text></g><g><title>MurmurHash3 (57 samples, 0.05%)</title><rect x="54.4614%" y="1429" width="0.0484%" height="15" fill="rgb(224,156,48)" fg:x="64112" fg:w="57"/><text x="54.7114%" y="1439.50"></text></g><g><title>MurmurHash3 (42 samples, 0.04%)</title><rect x="54.5141%" y="1413" width="0.0357%" height="15" fill="rgb(223,14,29)" fg:x="64174" fg:w="42"/><text x="54.7641%" y="1423.50"></text></g><g><title>[[heap]] (55 samples, 0.05%)</title><rect x="54.5116%" y="1429" width="0.0467%" height="15" fill="rgb(229,96,36)" fg:x="64171" fg:w="55"/><text x="54.7616%" y="1439.50"></text></g><g><title>_int_free (495 samples, 0.42%)</title><rect x="54.5659%" y="1413" width="0.4205%" height="15" fill="rgb(231,102,53)" fg:x="64235" fg:w="495"/><text x="54.8159%" y="1423.50"></text></g><g><title>_int_free_create_chunk (12 samples, 0.01%)</title><rect x="54.9864%" y="1413" width="0.0102%" height="15" fill="rgb(210,77,38)" fg:x="64730" fg:w="12"/><text x="55.2364%" y="1423.50"></text></g><g><title>_int_free_merge_chunk (16 samples, 0.01%)</title><rect x="54.9966%" y="1413" width="0.0136%" height="15" fill="rgb(235,131,6)" fg:x="64742" fg:w="16"/><text x="55.2466%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (316 samples, 0.27%)</title><rect x="55.0102%" y="1413" width="0.2684%" height="15" fill="rgb(252,55,38)" fg:x="64758" fg:w="316"/><text x="55.2602%" y="1423.50"></text></g><g><title>free@plt (19 samples, 0.02%)</title><rect x="55.2786%" y="1413" width="0.0161%" height="15" fill="rgb(246,38,14)" fg:x="65074" fg:w="19"/><text x="55.5286%" y="1423.50"></text></g><g><title>operator delete (58 samples, 0.05%)</title><rect x="55.2982%" y="1413" width="0.0493%" height="15" fill="rgb(242,27,5)" fg:x="65097" fg:w="58"/><text x="55.5482%" y="1423.50"></text></g><g><title>[anon] (936 samples, 0.80%)</title><rect x="54.5583%" y="1429" width="0.7951%" height="15" fill="rgb(228,65,35)" fg:x="64226" fg:w="936"/><text x="54.8083%" y="1439.50"></text></g><g><title>MurmurHash3 (80 samples, 0.07%)</title><rect x="55.3593%" y="1413" width="0.0680%" height="15" fill="rgb(245,93,11)" fg:x="65169" fg:w="80"/><text x="55.6093%" y="1423.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="55.4273%" y="1413" width="0.0178%" height="15" fill="rgb(213,1,31)" fg:x="65249" fg:w="21"/><text x="55.6773%" y="1423.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="55.4273%" y="1397" width="0.0178%" height="15" fill="rgb(237,205,14)" fg:x="65249" fg:w="21"/><text x="55.6773%" y="1407.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="55.4315%" y="1381" width="0.0136%" height="15" fill="rgb(232,118,45)" fg:x="65254" fg:w="16"/><text x="55.6815%" y="1391.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="55.4341%" y="1365" width="0.0110%" height="15" fill="rgb(218,5,6)" fg:x="65257" fg:w="13"/><text x="55.6841%" y="1375.50"></text></g><g><title>_int_free (92 samples, 0.08%)</title><rect x="55.4502%" y="1413" width="0.0782%" height="15" fill="rgb(251,87,51)" fg:x="65276" fg:w="92"/><text x="55.7002%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (60 samples, 0.05%)</title><rect x="55.5309%" y="1413" width="0.0510%" height="15" fill="rgb(207,225,20)" fg:x="65371" fg:w="60"/><text x="55.7809%" y="1423.50"></text></g><g><title>operator delete (30 samples, 0.03%)</title><rect x="55.5861%" y="1413" width="0.0255%" height="15" fill="rgb(222,78,54)" fg:x="65436" fg:w="30"/><text x="55.8361%" y="1423.50"></text></g><g><title>[unknown] (307 samples, 0.26%)</title><rect x="55.3534%" y="1429" width="0.2608%" height="15" fill="rgb(232,85,16)" fg:x="65162" fg:w="307"/><text x="55.6034%" y="1439.50"></text></g><g><title>std::__condvar::wait_until (22 samples, 0.02%)</title><rect x="55.6184%" y="1221" width="0.0187%" height="15" fill="rgb(244,25,33)" fg:x="65474" fg:w="22"/><text x="55.8684%" y="1231.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (22 samples, 0.02%)</title><rect x="55.6184%" y="1205" width="0.0187%" height="15" fill="rgb(233,24,36)" fg:x="65474" fg:w="22"/><text x="55.8684%" y="1215.50"></text></g><g><title>__futex_abstimed_wait_common (22 samples, 0.02%)</title><rect x="55.6184%" y="1189" width="0.0187%" height="15" fill="rgb(253,49,54)" fg:x="65474" fg:w="22"/><text x="55.8684%" y="1199.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="55.6184%" y="1173" width="0.0187%" height="15" fill="rgb(245,12,22)" fg:x="65474" fg:w="22"/><text x="55.8684%" y="1183.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="55.6184%" y="1157" width="0.0187%" height="15" fill="rgb(253,141,28)" fg:x="65474" fg:w="22"/><text x="55.8684%" y="1167.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="55.6184%" y="1141" width="0.0187%" height="15" fill="rgb(225,207,27)" fg:x="65474" fg:w="22"/><text x="55.8684%" y="1151.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="55.6193%" y="1125" width="0.0178%" height="15" fill="rgb(220,84,2)" fg:x="65475" fg:w="21"/><text x="55.8693%" y="1135.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="55.6210%" y="1109" width="0.0161%" height="15" fill="rgb(224,37,37)" fg:x="65477" fg:w="19"/><text x="55.8710%" y="1119.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="55.6218%" y="1093" width="0.0153%" height="15" fill="rgb(220,143,18)" fg:x="65478" fg:w="18"/><text x="55.8718%" y="1103.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="55.6227%" y="1077" width="0.0144%" height="15" fill="rgb(210,88,33)" fg:x="65479" fg:w="17"/><text x="55.8727%" y="1087.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="55.6244%" y="1061" width="0.0127%" height="15" fill="rgb(219,87,51)" fg:x="65481" fg:w="15"/><text x="55.8744%" y="1071.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="55.6252%" y="1045" width="0.0119%" height="15" fill="rgb(211,7,35)" fg:x="65482" fg:w="14"/><text x="55.8752%" y="1055.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="55.6269%" y="1029" width="0.0102%" height="15" fill="rgb(232,77,2)" fg:x="65484" fg:w="12"/><text x="55.8769%" y="1039.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (23 samples, 0.02%)</title><rect x="55.6184%" y="1253" width="0.0195%" height="15" fill="rgb(249,94,25)" fg:x="65474" fg:w="23"/><text x="55.8684%" y="1263.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (23 samples, 0.02%)</title><rect x="55.6184%" y="1237" width="0.0195%" height="15" fill="rgb(215,112,2)" fg:x="65474" fg:w="23"/><text x="55.8684%" y="1247.50"></text></g><g><title>CRollingBloomFilter::insert (56 samples, 0.05%)</title><rect x="56.3702%" y="1029" width="0.0476%" height="15" fill="rgb(226,115,48)" fg:x="66359" fg:w="56"/><text x="56.6202%" y="1039.50"></text></g><g><title>FastRange32 (50 samples, 0.04%)</title><rect x="56.4178%" y="1029" width="0.0425%" height="15" fill="rgb(249,196,10)" fg:x="66415" fg:w="50"/><text x="56.6678%" y="1039.50"></text></g><g><title>RollingBloomHash (43 samples, 0.04%)</title><rect x="56.4602%" y="1029" width="0.0365%" height="15" fill="rgb(237,109,14)" fg:x="66465" fg:w="43"/><text x="56.7102%" y="1039.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (56 samples, 0.05%)</title><rect x="56.4968%" y="1029" width="0.0476%" height="15" fill="rgb(217,103,53)" fg:x="66508" fg:w="56"/><text x="56.7468%" y="1039.50"></text></g><g><title>CRollingBloomFilter::insert (501 samples, 0.43%)</title><rect x="56.1366%" y="1045" width="0.4256%" height="15" fill="rgb(244,137,9)" fg:x="66084" fg:w="501"/><text x="56.3866%" y="1055.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (21 samples, 0.02%)</title><rect x="56.5443%" y="1029" width="0.0178%" height="15" fill="rgb(227,201,3)" fg:x="66564" fg:w="21"/><text x="56.7943%" y="1039.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="57.1653%" y="1029" width="0.0170%" height="15" fill="rgb(243,94,6)" fg:x="67295" fg:w="20"/><text x="57.4153%" y="1039.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="57.1662%" y="1013" width="0.0161%" height="15" fill="rgb(235,118,5)" fg:x="67296" fg:w="19"/><text x="57.4162%" y="1023.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="57.1670%" y="997" width="0.0153%" height="15" fill="rgb(247,10,30)" fg:x="67297" fg:w="18"/><text x="57.4170%" y="1007.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="57.1679%" y="981" width="0.0144%" height="15" fill="rgb(205,26,28)" fg:x="67298" fg:w="17"/><text x="57.4179%" y="991.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="57.1679%" y="965" width="0.0144%" height="15" fill="rgb(206,99,35)" fg:x="67298" fg:w="17"/><text x="57.4179%" y="975.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="57.1679%" y="949" width="0.0144%" height="15" fill="rgb(238,130,40)" fg:x="67298" fg:w="17"/><text x="57.4179%" y="959.50"></text></g><g><title>MurmurHash3 (840 samples, 0.71%)</title><rect x="56.5622%" y="1045" width="0.7136%" height="15" fill="rgb(224,126,31)" fg:x="66585" fg:w="840"/><text x="56.8122%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (110 samples, 0.09%)</title><rect x="57.1823%" y="1029" width="0.0934%" height="15" fill="rgb(254,105,17)" fg:x="67315" fg:w="110"/><text x="57.4323%" y="1039.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (110 samples, 0.09%)</title><rect x="57.1823%" y="1013" width="0.0934%" height="15" fill="rgb(216,87,36)" fg:x="67315" fg:w="110"/><text x="57.4323%" y="1023.50"></text></g><g><title>CRollingBloomFilter::insert (1,463 samples, 1.24%)</title><rect x="56.0432%" y="1061" width="1.2428%" height="15" fill="rgb(240,21,12)" fg:x="65974" fg:w="1463"/><text x="56.2932%" y="1071.50"></text></g><g><title>FastRange32 (116 samples, 0.10%)</title><rect x="57.2859%" y="1061" width="0.0985%" height="15" fill="rgb(245,192,34)" fg:x="67437" fg:w="116"/><text x="57.5359%" y="1071.50"></text></g><g><title>RollingBloomHash (32 samples, 0.03%)</title><rect x="57.3845%" y="1061" width="0.0272%" height="15" fill="rgb(226,100,49)" fg:x="67553" fg:w="32"/><text x="57.6345%" y="1071.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="57.4117%" y="1061" width="0.0119%" height="15" fill="rgb(245,188,27)" fg:x="67585" fg:w="14"/><text x="57.6617%" y="1071.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="57.4117%" y="1045" width="0.0119%" height="15" fill="rgb(212,170,8)" fg:x="67585" fg:w="14"/><text x="57.6617%" y="1055.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="57.4117%" y="1029" width="0.0119%" height="15" fill="rgb(217,113,29)" fg:x="67585" fg:w="14"/><text x="57.6617%" y="1039.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="57.4125%" y="1013" width="0.0110%" height="15" fill="rgb(237,30,3)" fg:x="67586" fg:w="13"/><text x="57.6625%" y="1023.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="57.4134%" y="997" width="0.0102%" height="15" fill="rgb(227,19,28)" fg:x="67587" fg:w="12"/><text x="57.6634%" y="1007.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (104 samples, 0.09%)</title><rect x="57.4235%" y="1061" width="0.0883%" height="15" fill="rgb(239,172,45)" fg:x="67599" fg:w="104"/><text x="57.6735%" y="1071.50"></text></g><g><title>CRollingBloomFilter::insert (2,214 samples, 1.88%)</title><rect x="55.6524%" y="1077" width="1.8807%" height="15" fill="rgb(254,55,39)" fg:x="65514" fg:w="2214"/><text x="55.9024%" y="1087.50">C..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (25 samples, 0.02%)</title><rect x="57.5119%" y="1061" width="0.0212%" height="15" fill="rgb(249,208,12)" fg:x="67703" fg:w="25"/><text x="57.7619%" y="1071.50"></text></g><g><title>MurmurHash3 (979 samples, 0.83%)</title><rect x="57.5331%" y="1077" width="0.8316%" height="15" fill="rgb(240,52,13)" fg:x="67728" fg:w="979"/><text x="57.7831%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (142 samples, 0.12%)</title><rect x="58.2441%" y="1061" width="0.1206%" height="15" fill="rgb(252,149,13)" fg:x="68565" fg:w="142"/><text x="58.4941%" y="1071.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (142 samples, 0.12%)</title><rect x="58.2441%" y="1045" width="0.1206%" height="15" fill="rgb(232,81,48)" fg:x="68565" fg:w="142"/><text x="58.4941%" y="1055.50"></text></g><g><title>TxOrphanage::EraseForBlock (17 samples, 0.01%)</title><rect x="58.4225%" y="1045" width="0.0144%" height="15" fill="rgb(222,144,2)" fg:x="68775" fg:w="17"/><text x="58.6725%" y="1055.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (42 samples, 0.04%)</title><rect x="58.4055%" y="1061" width="0.0357%" height="15" fill="rgb(216,81,32)" fg:x="68755" fg:w="42"/><text x="58.6555%" y="1071.50"></text></g><g><title>TxOrphanage::EraseForBlock (98 samples, 0.08%)</title><rect x="58.3648%" y="1077" width="0.0832%" height="15" fill="rgb(244,78,51)" fg:x="68707" fg:w="98"/><text x="58.6148%" y="1087.50"></text></g><g><title>operator (3,327 samples, 2.83%)</title><rect x="55.6397%" y="1157" width="2.8262%" height="15" fill="rgb(217,66,21)" fg:x="65499" fg:w="3327"/><text x="55.8897%" y="1167.50">op..</text></g><g><title>operator (3,327 samples, 2.83%)</title><rect x="55.6397%" y="1141" width="2.8262%" height="15" fill="rgb(247,101,42)" fg:x="65499" fg:w="3327"/><text x="55.8897%" y="1151.50">op..</text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (3,327 samples, 2.83%)</title><rect x="55.6397%" y="1125" width="2.8262%" height="15" fill="rgb(227,81,39)" fg:x="65499" fg:w="3327"/><text x="55.8897%" y="1135.50">It..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (3,327 samples, 2.83%)</title><rect x="55.6397%" y="1109" width="2.8262%" height="15" fill="rgb(220,223,44)" fg:x="65499" fg:w="3327"/><text x="55.8897%" y="1119.50">st..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (3,312 samples, 2.81%)</title><rect x="55.6524%" y="1093" width="2.8135%" height="15" fill="rgb(205,218,2)" fg:x="65514" fg:w="3312"/><text x="55.9024%" y="1103.50">no..</text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (3,328 samples, 2.83%)</title><rect x="55.6397%" y="1189" width="2.8270%" height="15" fill="rgb(212,207,28)" fg:x="65499" fg:w="3328"/><text x="55.8897%" y="1199.50">__..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (3,328 samples, 2.83%)</title><rect x="55.6397%" y="1173" width="2.8270%" height="15" fill="rgb(224,12,41)" fg:x="65499" fg:w="3328"/><text x="55.8897%" y="1183.50">__..</text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (19 samples, 0.02%)</title><rect x="58.5168%" y="1061" width="0.0161%" height="15" fill="rgb(216,118,12)" fg:x="68886" fg:w="19"/><text x="58.7668%" y="1071.50"></text></g><g><title>operator (81 samples, 0.07%)</title><rect x="58.4667%" y="1141" width="0.0688%" height="15" fill="rgb(252,97,46)" fg:x="68827" fg:w="81"/><text x="58.7167%" y="1151.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (81 samples, 0.07%)</title><rect x="58.4667%" y="1125" width="0.0688%" height="15" fill="rgb(244,206,19)" fg:x="68827" fg:w="81"/><text x="58.7167%" y="1135.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (79 samples, 0.07%)</title><rect x="58.4684%" y="1109" width="0.0671%" height="15" fill="rgb(231,84,31)" fg:x="68829" fg:w="79"/><text x="58.7184%" y="1119.50"></text></g><g><title>CBlockPolicyEstimator::processBlock (79 samples, 0.07%)</title><rect x="58.4684%" y="1093" width="0.0671%" height="15" fill="rgb(244,133,0)" fg:x="68829" fg:w="79"/><text x="58.7184%" y="1103.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (76 samples, 0.06%)</title><rect x="58.4709%" y="1077" width="0.0646%" height="15" fill="rgb(223,15,50)" fg:x="68832" fg:w="76"/><text x="58.7209%" y="1087.50"></text></g><g><title>operator (82 samples, 0.07%)</title><rect x="58.4667%" y="1157" width="0.0697%" height="15" fill="rgb(250,118,49)" fg:x="68827" fg:w="82"/><text x="58.7167%" y="1167.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (91 samples, 0.08%)</title><rect x="58.4667%" y="1189" width="0.0773%" height="15" fill="rgb(248,25,38)" fg:x="68827" fg:w="91"/><text x="58.7167%" y="1199.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (91 samples, 0.08%)</title><rect x="58.4667%" y="1173" width="0.0773%" height="15" fill="rgb(215,70,14)" fg:x="68827" fg:w="91"/><text x="58.7167%" y="1183.50"></text></g><g><title>_M_invoke (3,427 samples, 2.91%)</title><rect x="55.6397%" y="1205" width="2.9111%" height="15" fill="rgb(215,28,15)" fg:x="65499" fg:w="3427"/><text x="55.8897%" y="1215.50">_M..</text></g><g><title>std::function&lt;void ()&gt;::operator (3,428 samples, 2.91%)</title><rect x="55.6397%" y="1221" width="2.9120%" height="15" fill="rgb(243,6,28)" fg:x="65499" fg:w="3428"/><text x="55.8897%" y="1231.50">st..</text></g><g><title>cfree@GLIBC_2.2.5 (40 samples, 0.03%)</title><rect x="58.5516%" y="1045" width="0.0340%" height="15" fill="rgb(222,130,1)" fg:x="68927" fg:w="40"/><text x="58.8016%" y="1055.50"></text></g><g><title>_int_free (40 samples, 0.03%)</title><rect x="58.5516%" y="1029" width="0.0340%" height="15" fill="rgb(236,166,44)" fg:x="68927" fg:w="40"/><text x="58.8016%" y="1039.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (39 samples, 0.03%)</title><rect x="58.5525%" y="1013" width="0.0331%" height="15" fill="rgb(221,108,14)" fg:x="68928" fg:w="39"/><text x="58.8025%" y="1023.50"></text></g><g><title>malloc_consolidate (39 samples, 0.03%)</title><rect x="58.5525%" y="997" width="0.0331%" height="15" fill="rgb(252,3,45)" fg:x="68928" fg:w="39"/><text x="58.8025%" y="1007.50"></text></g><g><title>__lll_lock_wake_private (140 samples, 0.12%)</title><rect x="58.6171%" y="773" width="0.1189%" height="15" fill="rgb(237,68,30)" fg:x="69004" fg:w="140"/><text x="58.8671%" y="783.50"></text></g><g><title>[unknown] (137 samples, 0.12%)</title><rect x="58.6196%" y="757" width="0.1164%" height="15" fill="rgb(211,79,22)" fg:x="69007" fg:w="137"/><text x="58.8696%" y="767.50"></text></g><g><title>[unknown] (131 samples, 0.11%)</title><rect x="58.6247%" y="741" width="0.1113%" height="15" fill="rgb(252,185,21)" fg:x="69013" fg:w="131"/><text x="58.8747%" y="751.50"></text></g><g><title>[unknown] (123 samples, 0.10%)</title><rect x="58.6315%" y="725" width="0.1045%" height="15" fill="rgb(225,189,26)" fg:x="69021" fg:w="123"/><text x="58.8815%" y="735.50"></text></g><g><title>[unknown] (83 samples, 0.07%)</title><rect x="58.6655%" y="709" width="0.0705%" height="15" fill="rgb(241,30,40)" fg:x="69061" fg:w="83"/><text x="58.9155%" y="719.50"></text></g><g><title>[unknown] (68 samples, 0.06%)</title><rect x="58.6782%" y="693" width="0.0578%" height="15" fill="rgb(235,215,44)" fg:x="69076" fg:w="68"/><text x="58.9282%" y="703.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="58.7198%" y="677" width="0.0161%" height="15" fill="rgb(205,8,29)" fg:x="69125" fg:w="19"/><text x="58.9698%" y="687.50"></text></g><g><title>__lll_lock_wait_private (692 samples, 0.59%)</title><rect x="58.8897%" y="757" width="0.5878%" height="15" fill="rgb(241,137,42)" fg:x="69325" fg:w="692"/><text x="59.1397%" y="767.50"></text></g><g><title>[unknown] (670 samples, 0.57%)</title><rect x="58.9084%" y="741" width="0.5691%" height="15" fill="rgb(237,155,2)" fg:x="69347" fg:w="670"/><text x="59.1584%" y="751.50"></text></g><g><title>[unknown] (649 samples, 0.55%)</title><rect x="58.9263%" y="725" width="0.5513%" height="15" fill="rgb(245,29,42)" fg:x="69368" fg:w="649"/><text x="59.1763%" y="735.50"></text></g><g><title>[unknown] (643 samples, 0.55%)</title><rect x="58.9314%" y="709" width="0.5462%" height="15" fill="rgb(234,101,35)" fg:x="69374" fg:w="643"/><text x="59.1814%" y="719.50"></text></g><g><title>[unknown] (608 samples, 0.52%)</title><rect x="58.9611%" y="693" width="0.5165%" height="15" fill="rgb(228,64,37)" fg:x="69409" fg:w="608"/><text x="59.2111%" y="703.50"></text></g><g><title>[unknown] (584 samples, 0.50%)</title><rect x="58.9815%" y="677" width="0.4961%" height="15" fill="rgb(217,214,36)" fg:x="69433" fg:w="584"/><text x="59.2315%" y="687.50"></text></g><g><title>[unknown] (511 samples, 0.43%)</title><rect x="59.0435%" y="661" width="0.4341%" height="15" fill="rgb(243,70,3)" fg:x="69506" fg:w="511"/><text x="59.2935%" y="671.50"></text></g><g><title>[unknown] (479 samples, 0.41%)</title><rect x="59.0707%" y="645" width="0.4069%" height="15" fill="rgb(253,158,52)" fg:x="69538" fg:w="479"/><text x="59.3207%" y="655.50"></text></g><g><title>[unknown] (440 samples, 0.37%)</title><rect x="59.1038%" y="629" width="0.3738%" height="15" fill="rgb(234,111,54)" fg:x="69577" fg:w="440"/><text x="59.3538%" y="639.50"></text></g><g><title>[unknown] (379 samples, 0.32%)</title><rect x="59.1556%" y="613" width="0.3220%" height="15" fill="rgb(217,70,32)" fg:x="69638" fg:w="379"/><text x="59.4056%" y="623.50"></text></g><g><title>[unknown] (293 samples, 0.25%)</title><rect x="59.2287%" y="597" width="0.2489%" height="15" fill="rgb(234,18,33)" fg:x="69724" fg:w="293"/><text x="59.4787%" y="607.50"></text></g><g><title>[unknown] (166 samples, 0.14%)</title><rect x="59.3366%" y="581" width="0.1410%" height="15" fill="rgb(234,12,49)" fg:x="69851" fg:w="166"/><text x="59.5866%" y="591.50"></text></g><g><title>[unknown] (88 samples, 0.07%)</title><rect x="59.4028%" y="565" width="0.0748%" height="15" fill="rgb(236,10,21)" fg:x="69929" fg:w="88"/><text x="59.6528%" y="575.50"></text></g><g><title>[unknown] (53 samples, 0.05%)</title><rect x="59.4326%" y="549" width="0.0450%" height="15" fill="rgb(248,182,45)" fg:x="69964" fg:w="53"/><text x="59.6826%" y="559.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="59.4529%" y="533" width="0.0246%" height="15" fill="rgb(217,95,36)" fg:x="69988" fg:w="29"/><text x="59.7029%" y="543.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="59.4606%" y="517" width="0.0170%" height="15" fill="rgb(212,110,31)" fg:x="69997" fg:w="20"/><text x="59.7106%" y="527.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (32 samples, 0.03%)</title><rect x="59.4784%" y="757" width="0.0272%" height="15" fill="rgb(206,32,53)" fg:x="70018" fg:w="32"/><text x="59.7284%" y="767.50"></text></g><g><title>malloc_consolidate (32 samples, 0.03%)</title><rect x="59.4784%" y="741" width="0.0272%" height="15" fill="rgb(246,141,37)" fg:x="70018" fg:w="32"/><text x="59.7284%" y="751.50"></text></g><g><title>_int_free_merge_chunk (12 samples, 0.01%)</title><rect x="59.5056%" y="757" width="0.0102%" height="15" fill="rgb(219,16,7)" fg:x="70050" fg:w="12"/><text x="59.7556%" y="767.50"></text></g><g><title>_int_free (926 samples, 0.79%)</title><rect x="58.7360%" y="773" width="0.7866%" height="15" fill="rgb(230,205,45)" fg:x="69144" fg:w="926"/><text x="58.9860%" y="783.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,097 samples, 0.93%)</title><rect x="58.5967%" y="789" width="0.9319%" height="15" fill="rgb(231,43,49)" fg:x="68980" fg:w="1097"/><text x="58.8467%" y="799.50"></text></g><g><title>_int_free (17 samples, 0.01%)</title><rect x="59.5532%" y="549" width="0.0144%" height="15" fill="rgb(212,106,34)" fg:x="70106" fg:w="17"/><text x="59.8032%" y="559.50"></text></g><g><title>cfree@GLIBC_2.2.5 (21 samples, 0.02%)</title><rect x="59.5515%" y="565" width="0.0178%" height="15" fill="rgb(206,83,17)" fg:x="70104" fg:w="21"/><text x="59.8015%" y="575.50"></text></g><g><title>CScript::~CScript (24 samples, 0.02%)</title><rect x="59.5498%" y="597" width="0.0204%" height="15" fill="rgb(244,154,49)" fg:x="70102" fg:w="24"/><text x="59.7998%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (24 samples, 0.02%)</title><rect x="59.5498%" y="581" width="0.0204%" height="15" fill="rgb(244,149,49)" fg:x="70102" fg:w="24"/><text x="59.7998%" y="591.50"></text></g><g><title>_int_free (121 samples, 0.10%)</title><rect x="59.5965%" y="469" width="0.1028%" height="15" fill="rgb(227,134,18)" fg:x="70157" fg:w="121"/><text x="59.8465%" y="479.50"></text></g><g><title>cfree@GLIBC_2.2.5 (141 samples, 0.12%)</title><rect x="59.5838%" y="485" width="0.1198%" height="15" fill="rgb(237,116,36)" fg:x="70142" fg:w="141"/><text x="59.8338%" y="495.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (155 samples, 0.13%)</title><rect x="59.5778%" y="565" width="0.1317%" height="15" fill="rgb(205,129,40)" fg:x="70135" fg:w="155"/><text x="59.8278%" y="575.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (155 samples, 0.13%)</title><rect x="59.5778%" y="549" width="0.1317%" height="15" fill="rgb(236,178,4)" fg:x="70135" fg:w="155"/><text x="59.8278%" y="559.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (151 samples, 0.13%)</title><rect x="59.5812%" y="533" width="0.1283%" height="15" fill="rgb(251,76,53)" fg:x="70139" fg:w="151"/><text x="59.8312%" y="543.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (151 samples, 0.13%)</title><rect x="59.5812%" y="517" width="0.1283%" height="15" fill="rgb(242,92,40)" fg:x="70139" fg:w="151"/><text x="59.8312%" y="527.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (151 samples, 0.13%)</title><rect x="59.5812%" y="501" width="0.1283%" height="15" fill="rgb(209,45,30)" fg:x="70139" fg:w="151"/><text x="59.8312%" y="511.50"></text></g><g><title>__lll_lock_wake_private (13 samples, 0.01%)</title><rect x="59.7587%" y="373" width="0.0110%" height="15" fill="rgb(218,157,36)" fg:x="70348" fg:w="13"/><text x="60.0087%" y="383.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="59.7587%" y="357" width="0.0110%" height="15" fill="rgb(222,186,16)" fg:x="70348" fg:w="13"/><text x="60.0087%" y="367.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="59.7587%" y="341" width="0.0110%" height="15" fill="rgb(254,72,35)" fg:x="70348" fg:w="13"/><text x="60.0087%" y="351.50"></text></g><g><title>__lll_lock_wait_private (32 samples, 0.03%)</title><rect x="59.8760%" y="357" width="0.0272%" height="15" fill="rgb(224,25,35)" fg:x="70486" fg:w="32"/><text x="60.1260%" y="367.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="59.8760%" y="341" width="0.0272%" height="15" fill="rgb(206,135,52)" fg:x="70486" fg:w="32"/><text x="60.1260%" y="351.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="59.8760%" y="325" width="0.0272%" height="15" fill="rgb(229,174,47)" fg:x="70486" fg:w="32"/><text x="60.1260%" y="335.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="59.8760%" y="309" width="0.0272%" height="15" fill="rgb(242,184,21)" fg:x="70486" fg:w="32"/><text x="60.1260%" y="319.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="59.8794%" y="293" width="0.0238%" height="15" fill="rgb(213,22,45)" fg:x="70490" fg:w="28"/><text x="60.1294%" y="303.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="59.8794%" y="277" width="0.0238%" height="15" fill="rgb(237,81,54)" fg:x="70490" fg:w="28"/><text x="60.1294%" y="287.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="59.8845%" y="261" width="0.0187%" height="15" fill="rgb(248,177,18)" fg:x="70496" fg:w="22"/><text x="60.1345%" y="271.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="59.8845%" y="245" width="0.0187%" height="15" fill="rgb(254,31,16)" fg:x="70496" fg:w="22"/><text x="60.1345%" y="255.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="59.8862%" y="229" width="0.0170%" height="15" fill="rgb(235,20,31)" fg:x="70498" fg:w="20"/><text x="60.1362%" y="239.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="59.8879%" y="213" width="0.0153%" height="15" fill="rgb(240,56,43)" fg:x="70500" fg:w="18"/><text x="60.1379%" y="223.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="59.8904%" y="197" width="0.0127%" height="15" fill="rgb(237,197,51)" fg:x="70503" fg:w="15"/><text x="60.1404%" y="207.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="59.8921%" y="181" width="0.0110%" height="15" fill="rgb(241,162,44)" fg:x="70505" fg:w="13"/><text x="60.1421%" y="191.50"></text></g><g><title>_int_free (166 samples, 0.14%)</title><rect x="59.7698%" y="373" width="0.1410%" height="15" fill="rgb(224,23,20)" fg:x="70361" fg:w="166"/><text x="60.0198%" y="383.50"></text></g><g><title>cfree@GLIBC_2.2.5 (227 samples, 0.19%)</title><rect x="59.7265%" y="389" width="0.1928%" height="15" fill="rgb(250,109,34)" fg:x="70310" fg:w="227"/><text x="59.9765%" y="399.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (451 samples, 0.38%)</title><rect x="59.5464%" y="709" width="0.3831%" height="15" fill="rgb(214,175,50)" fg:x="70098" fg:w="451"/><text x="59.7964%" y="719.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (450 samples, 0.38%)</title><rect x="59.5472%" y="693" width="0.3823%" height="15" fill="rgb(213,182,5)" fg:x="70099" fg:w="450"/><text x="59.7972%" y="703.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (450 samples, 0.38%)</title><rect x="59.5472%" y="677" width="0.3823%" height="15" fill="rgb(209,199,19)" fg:x="70099" fg:w="450"/><text x="59.7972%" y="687.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (450 samples, 0.38%)</title><rect x="59.5472%" y="661" width="0.3823%" height="15" fill="rgb(236,224,42)" fg:x="70099" fg:w="450"/><text x="59.7972%" y="671.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (447 samples, 0.38%)</title><rect x="59.5498%" y="645" width="0.3797%" height="15" fill="rgb(246,226,29)" fg:x="70102" fg:w="447"/><text x="59.7998%" y="655.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (447 samples, 0.38%)</title><rect x="59.5498%" y="629" width="0.3797%" height="15" fill="rgb(227,223,11)" fg:x="70102" fg:w="447"/><text x="59.7998%" y="639.50"></text></g><g><title>CTxIn::~CTxIn (447 samples, 0.38%)</title><rect x="59.5498%" y="613" width="0.3797%" height="15" fill="rgb(219,7,51)" fg:x="70102" fg:w="447"/><text x="59.7998%" y="623.50"></text></g><g><title>CScriptWitness::~CScriptWitness (423 samples, 0.36%)</title><rect x="59.5702%" y="597" width="0.3593%" height="15" fill="rgb(245,167,10)" fg:x="70126" fg:w="423"/><text x="59.8202%" y="607.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (423 samples, 0.36%)</title><rect x="59.5702%" y="581" width="0.3593%" height="15" fill="rgb(237,224,16)" fg:x="70126" fg:w="423"/><text x="59.8202%" y="591.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (259 samples, 0.22%)</title><rect x="59.7095%" y="565" width="0.2200%" height="15" fill="rgb(226,132,13)" fg:x="70290" fg:w="259"/><text x="59.9595%" y="575.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (259 samples, 0.22%)</title><rect x="59.7095%" y="549" width="0.2200%" height="15" fill="rgb(214,140,3)" fg:x="70290" fg:w="259"/><text x="59.9595%" y="559.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (259 samples, 0.22%)</title><rect x="59.7095%" y="533" width="0.2200%" height="15" fill="rgb(221,177,4)" fg:x="70290" fg:w="259"/><text x="59.9595%" y="543.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (252 samples, 0.21%)</title><rect x="59.7154%" y="517" width="0.2141%" height="15" fill="rgb(238,139,3)" fg:x="70297" fg:w="252"/><text x="59.9654%" y="527.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (252 samples, 0.21%)</title><rect x="59.7154%" y="501" width="0.2141%" height="15" fill="rgb(216,17,39)" fg:x="70297" fg:w="252"/><text x="59.9654%" y="511.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (252 samples, 0.21%)</title><rect x="59.7154%" y="485" width="0.2141%" height="15" fill="rgb(238,120,9)" fg:x="70297" fg:w="252"/><text x="59.9654%" y="495.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (252 samples, 0.21%)</title><rect x="59.7154%" y="469" width="0.2141%" height="15" fill="rgb(244,92,53)" fg:x="70297" fg:w="252"/><text x="59.9654%" y="479.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (250 samples, 0.21%)</title><rect x="59.7171%" y="453" width="0.2124%" height="15" fill="rgb(224,148,33)" fg:x="70299" fg:w="250"/><text x="59.9671%" y="463.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (245 samples, 0.21%)</title><rect x="59.7214%" y="437" width="0.2081%" height="15" fill="rgb(243,6,36)" fg:x="70304" fg:w="245"/><text x="59.9714%" y="447.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (245 samples, 0.21%)</title><rect x="59.7214%" y="421" width="0.2081%" height="15" fill="rgb(230,102,11)" fg:x="70304" fg:w="245"/><text x="59.9714%" y="431.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (245 samples, 0.21%)</title><rect x="59.7214%" y="405" width="0.2081%" height="15" fill="rgb(234,148,36)" fg:x="70304" fg:w="245"/><text x="59.9714%" y="415.50"></text></g><g><title>__lll_lock_wake_private (12 samples, 0.01%)</title><rect x="59.9388%" y="597" width="0.0102%" height="15" fill="rgb(251,153,25)" fg:x="70560" fg:w="12"/><text x="60.1888%" y="607.50"></text></g><g><title>__lll_lock_wait_private (32 samples, 0.03%)</title><rect x="59.9652%" y="581" width="0.0272%" height="15" fill="rgb(215,129,8)" fg:x="70591" fg:w="32"/><text x="60.2152%" y="591.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="59.9660%" y="565" width="0.0263%" height="15" fill="rgb(224,128,35)" fg:x="70592" fg:w="31"/><text x="60.2160%" y="575.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="59.9660%" y="549" width="0.0263%" height="15" fill="rgb(237,56,52)" fg:x="70592" fg:w="31"/><text x="60.2160%" y="559.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="59.9660%" y="533" width="0.0263%" height="15" fill="rgb(234,213,19)" fg:x="70592" fg:w="31"/><text x="60.2160%" y="543.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="59.9677%" y="517" width="0.0246%" height="15" fill="rgb(252,82,23)" fg:x="70594" fg:w="29"/><text x="60.2177%" y="527.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="59.9694%" y="501" width="0.0229%" height="15" fill="rgb(254,201,21)" fg:x="70596" fg:w="27"/><text x="60.2194%" y="511.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="59.9728%" y="485" width="0.0195%" height="15" fill="rgb(250,186,11)" fg:x="70600" fg:w="23"/><text x="60.2228%" y="495.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="59.9745%" y="469" width="0.0178%" height="15" fill="rgb(211,174,5)" fg:x="70602" fg:w="21"/><text x="60.2245%" y="479.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="59.9779%" y="453" width="0.0144%" height="15" fill="rgb(214,121,10)" fg:x="70606" fg:w="17"/><text x="60.2279%" y="463.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="59.9796%" y="437" width="0.0127%" height="15" fill="rgb(241,66,2)" fg:x="70608" fg:w="15"/><text x="60.2296%" y="447.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="59.9822%" y="421" width="0.0102%" height="15" fill="rgb(220,167,19)" fg:x="70611" fg:w="12"/><text x="60.2322%" y="431.50"></text></g><g><title>_int_free (54 samples, 0.05%)</title><rect x="59.9490%" y="597" width="0.0459%" height="15" fill="rgb(231,54,50)" fg:x="70572" fg:w="54"/><text x="60.1990%" y="607.50"></text></g><g><title>cfree@GLIBC_2.2.5 (77 samples, 0.07%)</title><rect x="59.9354%" y="613" width="0.0654%" height="15" fill="rgb(239,217,53)" fg:x="70556" fg:w="77"/><text x="60.1854%" y="623.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (87 samples, 0.07%)</title><rect x="59.9295%" y="693" width="0.0739%" height="15" fill="rgb(248,8,0)" fg:x="70549" fg:w="87"/><text x="60.1795%" y="703.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (83 samples, 0.07%)</title><rect x="59.9329%" y="677" width="0.0705%" height="15" fill="rgb(229,118,37)" fg:x="70553" fg:w="83"/><text x="60.1829%" y="687.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::deallocate (82 samples, 0.07%)</title><rect x="59.9337%" y="661" width="0.0697%" height="15" fill="rgb(253,223,43)" fg:x="70554" fg:w="82"/><text x="60.1837%" y="671.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::deallocate (82 samples, 0.07%)</title><rect x="59.9337%" y="645" width="0.0697%" height="15" fill="rgb(211,77,36)" fg:x="70554" fg:w="82"/><text x="60.1837%" y="655.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::deallocate (82 samples, 0.07%)</title><rect x="59.9337%" y="629" width="0.0697%" height="15" fill="rgb(219,3,53)" fg:x="70554" fg:w="82"/><text x="60.1837%" y="639.50"></text></g><g><title>_int_free (17 samples, 0.01%)</title><rect x="60.0314%" y="549" width="0.0144%" height="15" fill="rgb(244,45,42)" fg:x="70669" fg:w="17"/><text x="60.2814%" y="559.50"></text></g><g><title>cfree@GLIBC_2.2.5 (24 samples, 0.02%)</title><rect x="60.0289%" y="565" width="0.0204%" height="15" fill="rgb(225,95,27)" fg:x="70666" fg:w="24"/><text x="60.2789%" y="575.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (1,724 samples, 1.46%)</title><rect x="58.5856%" y="1045" width="1.4645%" height="15" fill="rgb(207,74,8)" fg:x="68967" fg:w="1724"/><text x="58.8356%" y="1055.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (1,724 samples, 1.46%)</title><rect x="58.5856%" y="1029" width="1.4645%" height="15" fill="rgb(243,63,36)" fg:x="68967" fg:w="1724"/><text x="58.8356%" y="1039.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (1,724 samples, 1.46%)</title><rect x="58.5856%" y="1013" width="1.4645%" height="15" fill="rgb(211,180,12)" fg:x="68967" fg:w="1724"/><text x="58.8356%" y="1023.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (1,724 samples, 1.46%)</title><rect x="58.5856%" y="997" width="1.4645%" height="15" fill="rgb(254,166,49)" fg:x="68967" fg:w="1724"/><text x="58.8356%" y="1007.50"></text></g><g><title>CBlock::~CBlock (1,724 samples, 1.46%)</title><rect x="58.5856%" y="981" width="1.4645%" height="15" fill="rgb(205,19,0)" fg:x="68967" fg:w="1724"/><text x="58.8356%" y="991.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (1,724 samples, 1.46%)</title><rect x="58.5856%" y="965" width="1.4645%" height="15" fill="rgb(224,172,32)" fg:x="68967" fg:w="1724"/><text x="58.8356%" y="975.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (1,724 samples, 1.46%)</title><rect x="58.5856%" y="949" width="1.4645%" height="15" fill="rgb(254,136,30)" fg:x="68967" fg:w="1724"/><text x="58.8356%" y="959.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (1,724 samples, 1.46%)</title><rect x="58.5856%" y="933" width="1.4645%" height="15" fill="rgb(246,19,35)" fg:x="68967" fg:w="1724"/><text x="58.8356%" y="943.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (1,724 samples, 1.46%)</title><rect x="58.5856%" y="917" width="1.4645%" height="15" fill="rgb(219,24,36)" fg:x="68967" fg:w="1724"/><text x="58.8356%" y="927.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (1,723 samples, 1.46%)</title><rect x="58.5865%" y="901" width="1.4636%" height="15" fill="rgb(251,55,1)" fg:x="68968" fg:w="1723"/><text x="58.8365%" y="911.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (1,723 samples, 1.46%)</title><rect x="58.5865%" y="885" width="1.4636%" height="15" fill="rgb(218,117,39)" fg:x="68968" fg:w="1723"/><text x="58.8365%" y="895.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (1,723 samples, 1.46%)</title><rect x="58.5865%" y="869" width="1.4636%" height="15" fill="rgb(248,169,11)" fg:x="68968" fg:w="1723"/><text x="58.8365%" y="879.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1,723 samples, 1.46%)</title><rect x="58.5865%" y="853" width="1.4636%" height="15" fill="rgb(244,40,44)" fg:x="68968" fg:w="1723"/><text x="58.8365%" y="863.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1,723 samples, 1.46%)</title><rect x="58.5865%" y="837" width="1.4636%" height="15" fill="rgb(234,62,37)" fg:x="68968" fg:w="1723"/><text x="58.8365%" y="847.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,722 samples, 1.46%)</title><rect x="58.5873%" y="821" width="1.4628%" height="15" fill="rgb(207,117,42)" fg:x="68969" fg:w="1722"/><text x="58.8373%" y="831.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,712 samples, 1.45%)</title><rect x="58.5958%" y="805" width="1.4543%" height="15" fill="rgb(213,43,2)" fg:x="68979" fg:w="1712"/><text x="58.8458%" y="815.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (600 samples, 0.51%)</title><rect x="59.5404%" y="789" width="0.5097%" height="15" fill="rgb(244,202,51)" fg:x="70091" fg:w="600"/><text x="59.7904%" y="799.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (593 samples, 0.50%)</title><rect x="59.5464%" y="773" width="0.5037%" height="15" fill="rgb(253,174,46)" fg:x="70098" fg:w="593"/><text x="59.7964%" y="783.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (593 samples, 0.50%)</title><rect x="59.5464%" y="757" width="0.5037%" height="15" fill="rgb(251,23,1)" fg:x="70098" fg:w="593"/><text x="59.7964%" y="767.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (593 samples, 0.50%)</title><rect x="59.5464%" y="741" width="0.5037%" height="15" fill="rgb(253,26,1)" fg:x="70098" fg:w="593"/><text x="59.7964%" y="751.50"></text></g><g><title>CTransaction::~CTransaction (593 samples, 0.50%)</title><rect x="59.5464%" y="725" width="0.5037%" height="15" fill="rgb(216,89,31)" fg:x="70098" fg:w="593"/><text x="59.7964%" y="735.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (142 samples, 0.12%)</title><rect x="59.9295%" y="709" width="0.1206%" height="15" fill="rgb(209,109,5)" fg:x="70549" fg:w="142"/><text x="60.1795%" y="719.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (55 samples, 0.05%)</title><rect x="60.0034%" y="693" width="0.0467%" height="15" fill="rgb(229,63,13)" fg:x="70636" fg:w="55"/><text x="60.2534%" y="703.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (55 samples, 0.05%)</title><rect x="60.0034%" y="677" width="0.0467%" height="15" fill="rgb(238,137,54)" fg:x="70636" fg:w="55"/><text x="60.2534%" y="687.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (55 samples, 0.05%)</title><rect x="60.0034%" y="661" width="0.0467%" height="15" fill="rgb(228,1,9)" fg:x="70636" fg:w="55"/><text x="60.2534%" y="671.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (46 samples, 0.04%)</title><rect x="60.0110%" y="645" width="0.0391%" height="15" fill="rgb(249,120,48)" fg:x="70645" fg:w="46"/><text x="60.2610%" y="655.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (46 samples, 0.04%)</title><rect x="60.0110%" y="629" width="0.0391%" height="15" fill="rgb(209,72,36)" fg:x="70645" fg:w="46"/><text x="60.2610%" y="639.50"></text></g><g><title>CTxOut::~CTxOut (46 samples, 0.04%)</title><rect x="60.0110%" y="613" width="0.0391%" height="15" fill="rgb(247,98,49)" fg:x="70645" fg:w="46"/><text x="60.2610%" y="623.50"></text></g><g><title>CScript::~CScript (46 samples, 0.04%)</title><rect x="60.0110%" y="597" width="0.0391%" height="15" fill="rgb(233,75,36)" fg:x="70645" fg:w="46"/><text x="60.2610%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (46 samples, 0.04%)</title><rect x="60.0110%" y="581" width="0.0391%" height="15" fill="rgb(225,14,24)" fg:x="70645" fg:w="46"/><text x="60.2610%" y="591.50"></text></g><g><title>SerialTaskRunner::ProcessQueue (5,195 samples, 4.41%)</title><rect x="55.6388%" y="1237" width="4.4130%" height="15" fill="rgb(237,193,20)" fg:x="65498" fg:w="5195"/><text x="55.8888%" y="1247.50">Seria..</text></g><g><title>std::function&lt;void ()&gt;::~function (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1221" width="1.5002%" height="15" fill="rgb(239,122,19)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1231.50"></text></g><g><title>std::_Function_base::~_Function_base (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1205" width="1.5002%" height="15" fill="rgb(231,220,10)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1215.50"></text></g><g><title>_M_manager (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1189" width="1.5002%" height="15" fill="rgb(220,66,15)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1199.50"></text></g><g><title>_M_manager (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1173" width="1.5002%" height="15" fill="rgb(215,171,52)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1183.50"></text></g><g><title>_M_destroy (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1157" width="1.5002%" height="15" fill="rgb(241,169,50)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1167.50"></text></g><g><title>~&lt;lambda&gt; (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1141" width="1.5002%" height="15" fill="rgb(236,189,0)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1151.50"></text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1125" width="1.5002%" height="15" fill="rgb(217,147,20)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1135.50"></text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1109" width="1.5002%" height="15" fill="rgb(206,188,39)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1119.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1093" width="1.5002%" height="15" fill="rgb(227,118,25)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1103.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1077" width="1.5002%" height="15" fill="rgb(248,171,40)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1087.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,766 samples, 1.50%)</title><rect x="58.5516%" y="1061" width="1.5002%" height="15" fill="rgb(251,90,54)" fg:x="68927" fg:w="1766"/><text x="58.8016%" y="1071.50"></text></g><g><title>CScheduler::serviceQueue (5,234 samples, 4.45%)</title><rect x="55.6150%" y="1269" width="4.4461%" height="15" fill="rgb(234,11,46)" fg:x="65470" fg:w="5234"/><text x="55.8650%" y="1279.50">CSche..</text></g><g><title>std::function&lt;void ()&gt;::operator (5,207 samples, 4.42%)</title><rect x="55.6380%" y="1253" width="4.4232%" height="15" fill="rgb(229,134,13)" fg:x="65497" fg:w="5207"/><text x="55.8880%" y="1263.50">std::..</text></g><g><title>__clone (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1429" width="4.4470%" height="15" fill="rgb(223,129,3)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1439.50">__clo..</text></g><g><title>start_thread (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1413" width="4.4470%" height="15" fill="rgb(221,124,13)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1423.50">start..</text></g><g><title>execute_native_thread_routine (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1397" width="4.4470%" height="15" fill="rgb(234,3,18)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1407.50">execu..</text></g><g><title>_M_run (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1381" width="4.4470%" height="15" fill="rgb(249,199,20)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1391.50">_M_run</text></g><g><title>operator (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1365" width="4.4470%" height="15" fill="rgb(224,134,6)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1375.50">opera..</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1349" width="4.4470%" height="15" fill="rgb(254,83,26)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1359.50">_M_in..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1333" width="4.4470%" height="15" fill="rgb(217,88,9)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1343.50">__inv..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1317" width="4.4470%" height="15" fill="rgb(225,73,2)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1327.50">std::..</text></g><g><title>util::TraceThread (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1301" width="4.4470%" height="15" fill="rgb(226,44,39)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1311.50">util:..</text></g><g><title>std::function&lt;void ()&gt;::operator (5,235 samples, 4.45%)</title><rect x="55.6150%" y="1285" width="4.4470%" height="15" fill="rgb(228,53,17)" fg:x="65470" fg:w="5235"/><text x="55.8650%" y="1295.50">std::..</text></g><g><title>_int_free (49 samples, 0.04%)</title><rect x="60.0620%" y="1429" width="0.0416%" height="15" fill="rgb(212,27,27)" fg:x="70705" fg:w="49"/><text x="60.3120%" y="1439.50"></text></g><g><title>cfree@GLIBC_2.2.5 (276 samples, 0.23%)</title><rect x="60.1104%" y="1429" width="0.2345%" height="15" fill="rgb(241,50,6)" fg:x="70762" fg:w="276"/><text x="60.3604%" y="1439.50"></text></g><g><title>_int_free (144 samples, 0.12%)</title><rect x="60.3678%" y="1173" width="0.1223%" height="15" fill="rgb(225,28,51)" fg:x="71065" fg:w="144"/><text x="60.6178%" y="1183.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (164 samples, 0.14%)</title><rect x="60.3525%" y="1429" width="0.1393%" height="15" fill="rgb(215,33,16)" fg:x="71047" fg:w="164"/><text x="60.6025%" y="1439.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (164 samples, 0.14%)</title><rect x="60.3525%" y="1413" width="0.1393%" height="15" fill="rgb(243,40,39)" fg:x="71047" fg:w="164"/><text x="60.6025%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (164 samples, 0.14%)</title><rect x="60.3525%" y="1397" width="0.1393%" height="15" fill="rgb(225,11,42)" fg:x="71047" fg:w="164"/><text x="60.6025%" y="1407.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (164 samples, 0.14%)</title><rect x="60.3525%" y="1381" width="0.1393%" height="15" fill="rgb(241,220,38)" fg:x="71047" fg:w="164"/><text x="60.6025%" y="1391.50"></text></g><g><title>CBlock::~CBlock (164 samples, 0.14%)</title><rect x="60.3525%" y="1365" width="0.1393%" height="15" fill="rgb(244,52,35)" fg:x="71047" fg:w="164"/><text x="60.6025%" y="1375.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (164 samples, 0.14%)</title><rect x="60.3525%" y="1349" width="0.1393%" height="15" fill="rgb(246,42,46)" fg:x="71047" fg:w="164"/><text x="60.6025%" y="1359.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (164 samples, 0.14%)</title><rect x="60.3525%" y="1333" width="0.1393%" height="15" fill="rgb(205,184,13)" fg:x="71047" fg:w="164"/><text x="60.6025%" y="1343.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (164 samples, 0.14%)</title><rect x="60.3525%" y="1317" width="0.1393%" height="15" fill="rgb(209,48,36)" fg:x="71047" fg:w="164"/><text x="60.6025%" y="1327.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (164 samples, 0.14%)</title><rect x="60.3525%" y="1301" width="0.1393%" height="15" fill="rgb(244,34,51)" fg:x="71047" fg:w="164"/><text x="60.6025%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (162 samples, 0.14%)</title><rect x="60.3542%" y="1285" width="0.1376%" height="15" fill="rgb(221,107,33)" fg:x="71049" fg:w="162"/><text x="60.6042%" y="1295.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (162 samples, 0.14%)</title><rect x="60.3542%" y="1269" width="0.1376%" height="15" fill="rgb(224,203,12)" fg:x="71049" fg:w="162"/><text x="60.6042%" y="1279.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (162 samples, 0.14%)</title><rect x="60.3542%" y="1253" width="0.1376%" height="15" fill="rgb(230,215,18)" fg:x="71049" fg:w="162"/><text x="60.6042%" y="1263.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (162 samples, 0.14%)</title><rect x="60.3542%" y="1237" width="0.1376%" height="15" fill="rgb(206,185,35)" fg:x="71049" fg:w="162"/><text x="60.6042%" y="1247.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (162 samples, 0.14%)</title><rect x="60.3542%" y="1221" width="0.1376%" height="15" fill="rgb(228,140,34)" fg:x="71049" fg:w="162"/><text x="60.6042%" y="1231.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (160 samples, 0.14%)</title><rect x="60.3559%" y="1205" width="0.1359%" height="15" fill="rgb(208,93,13)" fg:x="71051" fg:w="160"/><text x="60.6059%" y="1215.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (155 samples, 0.13%)</title><rect x="60.3602%" y="1189" width="0.1317%" height="15" fill="rgb(221,193,39)" fg:x="71056" fg:w="155"/><text x="60.6102%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (21 samples, 0.02%)</title><rect x="60.5139%" y="1205" width="0.0178%" height="15" fill="rgb(241,132,34)" fg:x="71237" fg:w="21"/><text x="60.7639%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (15 samples, 0.01%)</title><rect x="60.5190%" y="1189" width="0.0127%" height="15" fill="rgb(221,141,10)" fg:x="71243" fg:w="15"/><text x="60.7690%" y="1199.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (91 samples, 0.08%)</title><rect x="60.4986%" y="1349" width="0.0773%" height="15" fill="rgb(226,90,31)" fg:x="71219" fg:w="91"/><text x="60.7486%" y="1359.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (83 samples, 0.07%)</title><rect x="60.5054%" y="1333" width="0.0705%" height="15" fill="rgb(243,75,5)" fg:x="71227" fg:w="83"/><text x="60.7554%" y="1343.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (83 samples, 0.07%)</title><rect x="60.5054%" y="1317" width="0.0705%" height="15" fill="rgb(227,156,21)" fg:x="71227" fg:w="83"/><text x="60.7554%" y="1327.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (83 samples, 0.07%)</title><rect x="60.5054%" y="1301" width="0.0705%" height="15" fill="rgb(250,195,8)" fg:x="71227" fg:w="83"/><text x="60.7554%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (80 samples, 0.07%)</title><rect x="60.5080%" y="1285" width="0.0680%" height="15" fill="rgb(220,134,5)" fg:x="71230" fg:w="80"/><text x="60.7580%" y="1295.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (80 samples, 0.07%)</title><rect x="60.5080%" y="1269" width="0.0680%" height="15" fill="rgb(246,106,34)" fg:x="71230" fg:w="80"/><text x="60.7580%" y="1279.50"></text></g><g><title>CTxIn::~CTxIn (80 samples, 0.07%)</title><rect x="60.5080%" y="1253" width="0.0680%" height="15" fill="rgb(205,1,4)" fg:x="71230" fg:w="80"/><text x="60.7580%" y="1263.50"></text></g><g><title>CScriptWitness::~CScriptWitness (74 samples, 0.06%)</title><rect x="60.5131%" y="1237" width="0.0629%" height="15" fill="rgb(224,151,29)" fg:x="71236" fg:w="74"/><text x="60.7631%" y="1247.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (74 samples, 0.06%)</title><rect x="60.5131%" y="1221" width="0.0629%" height="15" fill="rgb(251,196,0)" fg:x="71236" fg:w="74"/><text x="60.7631%" y="1231.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (52 samples, 0.04%)</title><rect x="60.5318%" y="1205" width="0.0442%" height="15" fill="rgb(212,127,0)" fg:x="71258" fg:w="52"/><text x="60.7818%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (52 samples, 0.04%)</title><rect x="60.5318%" y="1189" width="0.0442%" height="15" fill="rgb(236,71,53)" fg:x="71258" fg:w="52"/><text x="60.7818%" y="1199.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (52 samples, 0.04%)</title><rect x="60.5318%" y="1173" width="0.0442%" height="15" fill="rgb(227,99,0)" fg:x="71258" fg:w="52"/><text x="60.7818%" y="1183.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (48 samples, 0.04%)</title><rect x="60.5352%" y="1157" width="0.0408%" height="15" fill="rgb(239,89,21)" fg:x="71262" fg:w="48"/><text x="60.7852%" y="1167.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (48 samples, 0.04%)</title><rect x="60.5352%" y="1141" width="0.0408%" height="15" fill="rgb(243,122,19)" fg:x="71262" fg:w="48"/><text x="60.7852%" y="1151.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (48 samples, 0.04%)</title><rect x="60.5352%" y="1125" width="0.0408%" height="15" fill="rgb(229,192,45)" fg:x="71262" fg:w="48"/><text x="60.7852%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (48 samples, 0.04%)</title><rect x="60.5352%" y="1109" width="0.0408%" height="15" fill="rgb(235,165,35)" fg:x="71262" fg:w="48"/><text x="60.7852%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (30 samples, 0.03%)</title><rect x="60.5505%" y="1093" width="0.0255%" height="15" fill="rgb(253,202,0)" fg:x="71280" fg:w="30"/><text x="60.8005%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (26 samples, 0.02%)</title><rect x="60.5539%" y="1077" width="0.0221%" height="15" fill="rgb(235,51,20)" fg:x="71284" fg:w="26"/><text x="60.8039%" y="1087.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (26 samples, 0.02%)</title><rect x="60.5539%" y="1061" width="0.0221%" height="15" fill="rgb(218,95,46)" fg:x="71284" fg:w="26"/><text x="60.8039%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (26 samples, 0.02%)</title><rect x="60.5539%" y="1045" width="0.0221%" height="15" fill="rgb(212,81,10)" fg:x="71284" fg:w="26"/><text x="60.8039%" y="1055.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (15 samples, 0.01%)</title><rect x="60.5776%" y="1333" width="0.0127%" height="15" fill="rgb(240,59,0)" fg:x="71312" fg:w="15"/><text x="60.8276%" y="1343.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (12 samples, 0.01%)</title><rect x="60.5802%" y="1317" width="0.0102%" height="15" fill="rgb(212,191,42)" fg:x="71315" fg:w="12"/><text x="60.8302%" y="1327.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (149 samples, 0.13%)</title><rect x="60.4927%" y="1429" width="0.1266%" height="15" fill="rgb(233,140,3)" fg:x="71212" fg:w="149"/><text x="60.7427%" y="1439.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (142 samples, 0.12%)</title><rect x="60.4986%" y="1413" width="0.1206%" height="15" fill="rgb(215,69,23)" fg:x="71219" fg:w="142"/><text x="60.7486%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (142 samples, 0.12%)</title><rect x="60.4986%" y="1397" width="0.1206%" height="15" fill="rgb(240,202,20)" fg:x="71219" fg:w="142"/><text x="60.7486%" y="1407.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (142 samples, 0.12%)</title><rect x="60.4986%" y="1381" width="0.1206%" height="15" fill="rgb(209,146,50)" fg:x="71219" fg:w="142"/><text x="60.7486%" y="1391.50"></text></g><g><title>CTransaction::~CTransaction (142 samples, 0.12%)</title><rect x="60.4986%" y="1365" width="0.1206%" height="15" fill="rgb(253,102,54)" fg:x="71219" fg:w="142"/><text x="60.7486%" y="1375.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (51 samples, 0.04%)</title><rect x="60.5759%" y="1349" width="0.0433%" height="15" fill="rgb(250,173,47)" fg:x="71310" fg:w="51"/><text x="60.8259%" y="1359.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (34 samples, 0.03%)</title><rect x="60.5904%" y="1333" width="0.0289%" height="15" fill="rgb(232,142,7)" fg:x="71327" fg:w="34"/><text x="60.8404%" y="1343.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (34 samples, 0.03%)</title><rect x="60.5904%" y="1317" width="0.0289%" height="15" fill="rgb(230,157,47)" fg:x="71327" fg:w="34"/><text x="60.8404%" y="1327.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (34 samples, 0.03%)</title><rect x="60.5904%" y="1301" width="0.0289%" height="15" fill="rgb(214,177,35)" fg:x="71327" fg:w="34"/><text x="60.8404%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (25 samples, 0.02%)</title><rect x="60.5980%" y="1285" width="0.0212%" height="15" fill="rgb(234,119,46)" fg:x="71336" fg:w="25"/><text x="60.8480%" y="1295.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (25 samples, 0.02%)</title><rect x="60.5980%" y="1269" width="0.0212%" height="15" fill="rgb(241,180,50)" fg:x="71336" fg:w="25"/><text x="60.8480%" y="1279.50"></text></g><g><title>CTxOut::~CTxOut (25 samples, 0.02%)</title><rect x="60.5980%" y="1253" width="0.0212%" height="15" fill="rgb(221,54,25)" fg:x="71336" fg:w="25"/><text x="60.8480%" y="1263.50"></text></g><g><title>CScript::~CScript (25 samples, 0.02%)</title><rect x="60.5980%" y="1237" width="0.0212%" height="15" fill="rgb(209,157,44)" fg:x="71336" fg:w="25"/><text x="60.8480%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (25 samples, 0.02%)</title><rect x="60.5980%" y="1221" width="0.0212%" height="15" fill="rgb(246,115,41)" fg:x="71336" fg:w="25"/><text x="60.8480%" y="1231.50"></text></g><g><title>b-scheduler (7,255 samples, 6.16%)</title><rect x="54.4589%" y="1445" width="6.1629%" height="15" fill="rgb(229,86,1)" fg:x="64109" fg:w="7255"/><text x="54.7089%" y="1455.50">b-schedu..</text></g><g><title>CDBWrapper::WriteBatch (12 samples, 0.01%)</title><rect x="60.6651%" y="1285" width="0.0102%" height="15" fill="rgb(240,108,53)" fg:x="71415" fg:w="12"/><text x="60.9151%" y="1295.50"></text></g><g><title>leveldb::DBImpl::Write (12 samples, 0.01%)</title><rect x="60.6651%" y="1269" width="0.0102%" height="15" fill="rgb(227,134,2)" fg:x="71415" fg:w="12"/><text x="60.9151%" y="1279.50"></text></g><g><title>CCoinsViewDB::BatchWrite (16 samples, 0.01%)</title><rect x="60.6634%" y="1301" width="0.0136%" height="15" fill="rgb(213,129,25)" fg:x="71413" fg:w="16"/><text x="60.9134%" y="1311.50"></text></g><g><title>CCoinsViewCache::Flush (17 samples, 0.01%)</title><rect x="60.6634%" y="1317" width="0.0144%" height="15" fill="rgb(226,35,21)" fg:x="71413" fg:w="17"/><text x="60.9134%" y="1327.50"></text></g><g><title>Chainstate::ForceFlushStateToDisk (18 samples, 0.02%)</title><rect x="60.6634%" y="1349" width="0.0153%" height="15" fill="rgb(208,129,26)" fg:x="71413" fg:w="18"/><text x="60.9134%" y="1359.50"></text></g><g><title>Chainstate::FlushStateToDisk (18 samples, 0.02%)</title><rect x="60.6634%" y="1333" width="0.0153%" height="15" fill="rgb(224,83,6)" fg:x="71413" fg:w="18"/><text x="60.9134%" y="1343.50"></text></g><g><title>Chainstate::ResetCoinsViews (23 samples, 0.02%)</title><rect x="60.6787%" y="1349" width="0.0195%" height="15" fill="rgb(227,52,39)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1359.50"></text></g><g><title>std::unique_ptr&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (23 samples, 0.02%)</title><rect x="60.6787%" y="1333" width="0.0195%" height="15" fill="rgb(241,30,17)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1343.50"></text></g><g><title>std::__uniq_ptr_impl&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (23 samples, 0.02%)</title><rect x="60.6787%" y="1317" width="0.0195%" height="15" fill="rgb(246,186,42)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1327.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (23 samples, 0.02%)</title><rect x="60.6787%" y="1301" width="0.0195%" height="15" fill="rgb(221,169,15)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1311.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (23 samples, 0.02%)</title><rect x="60.6787%" y="1285" width="0.0195%" height="15" fill="rgb(235,108,21)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1295.50"></text></g><g><title>CoinsViews::~CoinsViews (23 samples, 0.02%)</title><rect x="60.6787%" y="1269" width="0.0195%" height="15" fill="rgb(219,148,30)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1279.50"></text></g><g><title>CCoinsViewDB::~CCoinsViewDB (23 samples, 0.02%)</title><rect x="60.6787%" y="1253" width="0.0195%" height="15" fill="rgb(220,109,5)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1263.50"></text></g><g><title>std::unique_ptr&lt;CDBWrapper, std::default_delete&lt;CDBWrapper&gt; &gt;::~unique_ptr (23 samples, 0.02%)</title><rect x="60.6787%" y="1237" width="0.0195%" height="15" fill="rgb(213,203,48)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1247.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (23 samples, 0.02%)</title><rect x="60.6787%" y="1221" width="0.0195%" height="15" fill="rgb(244,71,33)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1231.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (23 samples, 0.02%)</title><rect x="60.6787%" y="1205" width="0.0195%" height="15" fill="rgb(209,23,2)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1215.50"></text></g><g><title>CDBWrapper::~CDBWrapper (23 samples, 0.02%)</title><rect x="60.6787%" y="1189" width="0.0195%" height="15" fill="rgb(219,97,7)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1199.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (23 samples, 0.02%)</title><rect x="60.6787%" y="1173" width="0.0195%" height="15" fill="rgb(216,161,23)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1183.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (23 samples, 0.02%)</title><rect x="60.6787%" y="1157" width="0.0195%" height="15" fill="rgb(207,45,42)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1167.50"></text></g><g><title>leveldb::TableCache::~TableCache (23 samples, 0.02%)</title><rect x="60.6787%" y="1141" width="0.0195%" height="15" fill="rgb(241,61,4)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1151.50"></text></g><g><title>~ShardedLRUCache (23 samples, 0.02%)</title><rect x="60.6787%" y="1125" width="0.0195%" height="15" fill="rgb(236,170,1)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::~ShardedLRUCache (23 samples, 0.02%)</title><rect x="60.6787%" y="1109" width="0.0195%" height="15" fill="rgb(239,72,5)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1119.50"></text></g><g><title>~LRUCache (23 samples, 0.02%)</title><rect x="60.6787%" y="1093" width="0.0195%" height="15" fill="rgb(214,13,50)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::~LRUCache (23 samples, 0.02%)</title><rect x="60.6787%" y="1077" width="0.0195%" height="15" fill="rgb(224,88,9)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1087.50"></text></g><g><title>leveldb::DeleteEntry (23 samples, 0.02%)</title><rect x="60.6787%" y="1061" width="0.0195%" height="15" fill="rgb(238,192,34)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1071.50"></text></g><g><title>~PosixMmapReadableFile (23 samples, 0.02%)</title><rect x="60.6787%" y="1045" width="0.0195%" height="15" fill="rgb(217,203,50)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1055.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (23 samples, 0.02%)</title><rect x="60.6787%" y="1029" width="0.0195%" height="15" fill="rgb(241,123,32)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1039.50"></text></g><g><title>__munmap (23 samples, 0.02%)</title><rect x="60.6787%" y="1013" width="0.0195%" height="15" fill="rgb(248,151,39)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1023.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="60.6787%" y="997" width="0.0195%" height="15" fill="rgb(208,89,6)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="1007.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="60.6787%" y="981" width="0.0195%" height="15" fill="rgb(254,43,26)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="991.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="60.6787%" y="965" width="0.0195%" height="15" fill="rgb(216,158,13)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="975.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="60.6787%" y="949" width="0.0195%" height="15" fill="rgb(212,47,37)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="959.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="60.6787%" y="933" width="0.0195%" height="15" fill="rgb(254,16,10)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="943.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="60.6787%" y="917" width="0.0195%" height="15" fill="rgb(223,228,16)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="927.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="60.6787%" y="901" width="0.0195%" height="15" fill="rgb(249,108,50)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="911.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="60.6787%" y="885" width="0.0195%" height="15" fill="rgb(208,220,5)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="895.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="60.6787%" y="869" width="0.0195%" height="15" fill="rgb(217,89,48)" fg:x="71431" fg:w="23"/><text x="60.9287%" y="879.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="60.6872%" y="853" width="0.0110%" height="15" fill="rgb(212,113,41)" fg:x="71441" fg:w="13"/><text x="60.9372%" y="863.50"></text></g><g><title>b-shutoff (66 samples, 0.06%)</title><rect x="60.6456%" y="1445" width="0.0561%" height="15" fill="rgb(231,127,5)" fg:x="71392" fg:w="66"/><text x="60.8956%" y="1455.50"></text></g><g><title>_start (50 samples, 0.04%)</title><rect x="60.6592%" y="1429" width="0.0425%" height="15" fill="rgb(217,141,17)" fg:x="71408" fg:w="50"/><text x="60.9092%" y="1439.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (50 samples, 0.04%)</title><rect x="60.6592%" y="1413" width="0.0425%" height="15" fill="rgb(245,125,54)" fg:x="71408" fg:w="50"/><text x="60.9092%" y="1423.50"></text></g><g><title>__libc_start_call_main (50 samples, 0.04%)</title><rect x="60.6592%" y="1397" width="0.0425%" height="15" fill="rgb(248,125,3)" fg:x="71408" fg:w="50"/><text x="60.9092%" y="1407.50"></text></g><g><title>main (50 samples, 0.04%)</title><rect x="60.6592%" y="1381" width="0.0425%" height="15" fill="rgb(236,119,51)" fg:x="71408" fg:w="50"/><text x="60.9092%" y="1391.50"></text></g><g><title>Shutdown (50 samples, 0.04%)</title><rect x="60.6592%" y="1365" width="0.0425%" height="15" fill="rgb(239,99,8)" fg:x="71408" fg:w="50"/><text x="60.9092%" y="1375.50"></text></g><g><title>__clone (75 samples, 0.06%)</title><rect x="60.9132%" y="1413" width="0.0637%" height="15" fill="rgb(224,228,4)" fg:x="71707" fg:w="75"/><text x="61.1632%" y="1423.50"></text></g><g><title>[unknown] (75 samples, 0.06%)</title><rect x="60.9132%" y="1397" width="0.0637%" height="15" fill="rgb(220,131,45)" fg:x="71707" fg:w="75"/><text x="61.1632%" y="1407.50"></text></g><g><title>[unknown] (73 samples, 0.06%)</title><rect x="60.9149%" y="1381" width="0.0620%" height="15" fill="rgb(215,62,5)" fg:x="71709" fg:w="73"/><text x="61.1649%" y="1391.50"></text></g><g><title>[unknown] (73 samples, 0.06%)</title><rect x="60.9149%" y="1365" width="0.0620%" height="15" fill="rgb(253,12,24)" fg:x="71709" fg:w="73"/><text x="61.1649%" y="1375.50"></text></g><g><title>[unknown] (69 samples, 0.06%)</title><rect x="60.9183%" y="1349" width="0.0586%" height="15" fill="rgb(248,120,50)" fg:x="71713" fg:w="69"/><text x="61.1683%" y="1359.50"></text></g><g><title>[unknown] (68 samples, 0.06%)</title><rect x="60.9191%" y="1333" width="0.0578%" height="15" fill="rgb(245,194,10)" fg:x="71714" fg:w="68"/><text x="61.1691%" y="1343.50"></text></g><g><title>[unknown] (68 samples, 0.06%)</title><rect x="60.9191%" y="1317" width="0.0578%" height="15" fill="rgb(241,149,38)" fg:x="71714" fg:w="68"/><text x="61.1691%" y="1327.50"></text></g><g><title>[unknown] (68 samples, 0.06%)</title><rect x="60.9191%" y="1301" width="0.0578%" height="15" fill="rgb(219,215,7)" fg:x="71714" fg:w="68"/><text x="61.1691%" y="1311.50"></text></g><g><title>[unknown] (68 samples, 0.06%)</title><rect x="60.9191%" y="1285" width="0.0578%" height="15" fill="rgb(208,120,31)" fg:x="71714" fg:w="68"/><text x="61.1691%" y="1295.50"></text></g><g><title>[unknown] (65 samples, 0.06%)</title><rect x="60.9217%" y="1269" width="0.0552%" height="15" fill="rgb(244,30,8)" fg:x="71717" fg:w="65"/><text x="61.1717%" y="1279.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="60.9531%" y="1253" width="0.0238%" height="15" fill="rgb(238,35,44)" fg:x="71754" fg:w="28"/><text x="61.2031%" y="1263.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="60.9582%" y="1237" width="0.0187%" height="15" fill="rgb(243,218,37)" fg:x="71760" fg:w="22"/><text x="61.2082%" y="1247.50"></text></g><g><title>[[heap]] (121 samples, 0.10%)</title><rect x="60.9132%" y="1429" width="0.1028%" height="15" fill="rgb(218,169,10)" fg:x="71707" fg:w="121"/><text x="61.1632%" y="1439.50"></text></g><g><title>__GI___libc_write (30 samples, 0.03%)</title><rect x="61.0270%" y="1413" width="0.0255%" height="15" fill="rgb(221,144,10)" fg:x="71841" fg:w="30"/><text x="61.2770%" y="1423.50"></text></g><g><title>__memcmp_evex_movbe (623 samples, 0.53%)</title><rect x="61.0584%" y="1413" width="0.5292%" height="15" fill="rgb(226,41,38)" fg:x="71878" fg:w="623"/><text x="61.3084%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1,062 samples, 0.90%)</title><rect x="61.5877%" y="1413" width="0.9021%" height="15" fill="rgb(228,3,1)" fg:x="72501" fg:w="1062"/><text x="61.8377%" y="1423.50"></text></g><g><title>_int_free (28 samples, 0.02%)</title><rect x="62.4975%" y="1413" width="0.0238%" height="15" fill="rgb(209,129,12)" fg:x="73572" fg:w="28"/><text x="62.7475%" y="1423.50"></text></g><g><title>_int_malloc (12 samples, 0.01%)</title><rect x="62.5280%" y="1413" width="0.0102%" height="15" fill="rgb(213,136,33)" fg:x="73608" fg:w="12"/><text x="62.7780%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (219 samples, 0.19%)</title><rect x="62.5535%" y="1413" width="0.1860%" height="15" fill="rgb(209,181,29)" fg:x="73638" fg:w="219"/><text x="62.8035%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (70 samples, 0.06%)</title><rect x="62.7455%" y="1413" width="0.0595%" height="15" fill="rgb(234,173,18)" fg:x="73864" fg:w="70"/><text x="62.9955%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (27 samples, 0.02%)</title><rect x="62.8050%" y="1413" width="0.0229%" height="15" fill="rgb(227,73,47)" fg:x="73934" fg:w="27"/><text x="63.0550%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (43 samples, 0.04%)</title><rect x="62.8279%" y="1413" width="0.0365%" height="15" fill="rgb(234,9,34)" fg:x="73961" fg:w="43"/><text x="63.0779%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::value (12 samples, 0.01%)</title><rect x="62.8644%" y="1413" width="0.0102%" height="15" fill="rgb(235,172,15)" fg:x="74004" fg:w="12"/><text x="63.1144%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (34 samples, 0.03%)</title><rect x="62.8840%" y="1413" width="0.0289%" height="15" fill="rgb(245,61,2)" fg:x="74027" fg:w="34"/><text x="63.1340%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (56 samples, 0.05%)</title><rect x="62.9128%" y="1413" width="0.0476%" height="15" fill="rgb(238,39,47)" fg:x="74061" fg:w="56"/><text x="63.1628%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (21 samples, 0.02%)</title><rect x="62.9604%" y="1413" width="0.0178%" height="15" fill="rgb(234,37,24)" fg:x="74117" fg:w="21"/><text x="63.2104%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (43 samples, 0.04%)</title><rect x="62.9825%" y="1413" width="0.0365%" height="15" fill="rgb(248,223,24)" fg:x="74143" fg:w="43"/><text x="63.2325%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::Next (19 samples, 0.02%)</title><rect x="63.0190%" y="1413" width="0.0161%" height="15" fill="rgb(223,12,15)" fg:x="74186" fg:w="19"/><text x="63.2690%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (100 samples, 0.08%)</title><rect x="63.0352%" y="1413" width="0.0849%" height="15" fill="rgb(249,6,3)" fg:x="74205" fg:w="100"/><text x="63.2852%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::Valid (31 samples, 0.03%)</title><rect x="63.1218%" y="1413" width="0.0263%" height="15" fill="rgb(237,105,33)" fg:x="74307" fg:w="31"/><text x="63.3718%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::key (27 samples, 0.02%)</title><rect x="63.1481%" y="1413" width="0.0229%" height="15" fill="rgb(252,208,35)" fg:x="74338" fg:w="27"/><text x="63.3981%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::value (54 samples, 0.05%)</title><rect x="63.1711%" y="1413" width="0.0459%" height="15" fill="rgb(215,181,35)" fg:x="74365" fg:w="54"/><text x="63.4211%" y="1423.50"></text></g><g><title>leveldb::BlockBuilder::Add (105 samples, 0.09%)</title><rect x="63.2195%" y="1413" width="0.0892%" height="15" fill="rgb(246,212,3)" fg:x="74422" fg:w="105"/><text x="63.4695%" y="1423.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (56 samples, 0.05%)</title><rect x="63.3087%" y="1413" width="0.0476%" height="15" fill="rgb(247,156,24)" fg:x="74527" fg:w="56"/><text x="63.5587%" y="1423.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (65 samples, 0.06%)</title><rect x="63.3597%" y="1413" width="0.0552%" height="15" fill="rgb(248,9,31)" fg:x="74587" fg:w="65"/><text x="63.6097%" y="1423.50"></text></g><g><title>leveldb::EncodeVarint32 (71 samples, 0.06%)</title><rect x="63.4149%" y="1413" width="0.0603%" height="15" fill="rgb(234,26,45)" fg:x="74652" fg:w="71"/><text x="63.6649%" y="1423.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (57 samples, 0.05%)</title><rect x="63.4769%" y="1413" width="0.0484%" height="15" fill="rgb(249,11,32)" fg:x="74725" fg:w="57"/><text x="63.7269%" y="1423.50"></text></g><g><title>leveldb::Hash (186 samples, 0.16%)</title><rect x="63.5381%" y="1413" width="0.1580%" height="15" fill="rgb(249,162,33)" fg:x="74797" fg:w="186"/><text x="63.7881%" y="1423.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (206 samples, 0.17%)</title><rect x="63.6969%" y="1413" width="0.1750%" height="15" fill="rgb(232,4,32)" fg:x="74984" fg:w="206"/><text x="63.9469%" y="1423.50"></text></g><g><title>leveldb::PutVarint32 (56 samples, 0.05%)</title><rect x="63.8821%" y="1413" width="0.0476%" height="15" fill="rgb(212,5,45)" fg:x="75202" fg:w="56"/><text x="64.1321%" y="1423.50"></text></g><g><title>leveldb::TableBuilder::Add (80 samples, 0.07%)</title><rect x="63.9348%" y="1413" width="0.0680%" height="15" fill="rgb(227,95,13)" fg:x="75264" fg:w="80"/><text x="64.1848%" y="1423.50"></text></g><g><title>leveldb::TableBuilder::FileSize (42 samples, 0.04%)</title><rect x="64.0027%" y="1413" width="0.0357%" height="15" fill="rgb(223,205,10)" fg:x="75344" fg:w="42"/><text x="64.2527%" y="1423.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (42 samples, 0.04%)</title><rect x="64.0384%" y="1413" width="0.0357%" height="15" fill="rgb(222,178,8)" fg:x="75386" fg:w="42"/><text x="64.2884%" y="1423.50"></text></g><g><title>leveldb::TableBuilder::status (49 samples, 0.04%)</title><rect x="64.0741%" y="1413" width="0.0416%" height="15" fill="rgb(216,13,22)" fg:x="75428" fg:w="49"/><text x="64.3241%" y="1423.50"></text></g><g><title>malloc (35 samples, 0.03%)</title><rect x="64.1165%" y="1413" width="0.0297%" height="15" fill="rgb(240,167,12)" fg:x="75478" fg:w="35"/><text x="64.3665%" y="1423.50"></text></g><g><title>memcmp@plt (105 samples, 0.09%)</title><rect x="64.1497%" y="1413" width="0.0892%" height="15" fill="rgb(235,68,35)" fg:x="75517" fg:w="105"/><text x="64.3997%" y="1423.50"></text></g><g><title>memcpy@plt (149 samples, 0.13%)</title><rect x="64.2389%" y="1413" width="0.1266%" height="15" fill="rgb(253,40,27)" fg:x="75622" fg:w="149"/><text x="64.4889%" y="1423.50"></text></g><g><title>[anon] (4,002 samples, 3.40%)</title><rect x="61.0253%" y="1429" width="3.3996%" height="15" fill="rgb(214,19,28)" fg:x="71839" fg:w="4002"/><text x="61.2753%" y="1439.50">[an..</text></g><g><title>unlink_chunk.isra.0 (20 samples, 0.02%)</title><rect x="64.4079%" y="1413" width="0.0170%" height="15" fill="rgb(210,167,45)" fg:x="75821" fg:w="20"/><text x="64.6579%" y="1423.50"></text></g><g><title>[bitcoind-base] (13 samples, 0.01%)</title><rect x="64.4249%" y="1429" width="0.0110%" height="15" fill="rgb(232,97,40)" fg:x="75841" fg:w="13"/><text x="64.6749%" y="1439.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="64.4470%" y="1413" width="0.0136%" height="15" fill="rgb(250,35,23)" fg:x="75867" fg:w="16"/><text x="64.6970%" y="1423.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="64.4495%" y="1397" width="0.0110%" height="15" fill="rgb(248,47,53)" fg:x="75870" fg:w="13"/><text x="64.6995%" y="1407.50"></text></g><g><title>__memcmp_evex_movbe (96 samples, 0.08%)</title><rect x="64.4623%" y="1413" width="0.0815%" height="15" fill="rgb(226,58,50)" fg:x="75885" fg:w="96"/><text x="64.7123%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (25 samples, 0.02%)</title><rect x="64.5438%" y="1413" width="0.0212%" height="15" fill="rgb(217,105,26)" fg:x="75981" fg:w="25"/><text x="64.7938%" y="1423.50"></text></g><g><title>_int_free (32 samples, 0.03%)</title><rect x="64.5668%" y="1413" width="0.0272%" height="15" fill="rgb(208,64,1)" fg:x="76008" fg:w="32"/><text x="64.8168%" y="1423.50"></text></g><g><title>_int_malloc (59 samples, 0.05%)</title><rect x="64.5999%" y="1413" width="0.0501%" height="15" fill="rgb(214,80,1)" fg:x="76047" fg:w="59"/><text x="64.8499%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (27 samples, 0.02%)</title><rect x="64.6551%" y="1413" width="0.0229%" height="15" fill="rgb(206,175,26)" fg:x="76112" fg:w="27"/><text x="64.9051%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (182 samples, 0.15%)</title><rect x="64.6840%" y="1413" width="0.1546%" height="15" fill="rgb(235,156,37)" fg:x="76146" fg:w="182"/><text x="64.9340%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (68 samples, 0.06%)</title><rect x="64.8386%" y="1413" width="0.0578%" height="15" fill="rgb(213,100,9)" fg:x="76328" fg:w="68"/><text x="65.0886%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (16 samples, 0.01%)</title><rect x="64.8964%" y="1413" width="0.0136%" height="15" fill="rgb(241,15,13)" fg:x="76396" fg:w="16"/><text x="65.1464%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (14 samples, 0.01%)</title><rect x="64.9100%" y="1413" width="0.0119%" height="15" fill="rgb(205,97,43)" fg:x="76412" fg:w="14"/><text x="65.1600%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (33 samples, 0.03%)</title><rect x="64.9380%" y="1413" width="0.0280%" height="15" fill="rgb(216,106,32)" fg:x="76445" fg:w="33"/><text x="65.1880%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (36 samples, 0.03%)</title><rect x="64.9660%" y="1413" width="0.0306%" height="15" fill="rgb(226,200,8)" fg:x="76478" fg:w="36"/><text x="65.2160%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (23 samples, 0.02%)</title><rect x="64.9966%" y="1413" width="0.0195%" height="15" fill="rgb(244,54,29)" fg:x="76514" fg:w="23"/><text x="65.2466%" y="1423.50"></text></g><g><title>leveldb::Hash (71 samples, 0.06%)</title><rect x="65.0654%" y="1413" width="0.0603%" height="15" fill="rgb(252,169,12)" fg:x="76595" fg:w="71"/><text x="65.3154%" y="1423.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (79 samples, 0.07%)</title><rect x="65.1291%" y="1413" width="0.0671%" height="15" fill="rgb(231,199,11)" fg:x="76670" fg:w="79"/><text x="65.3791%" y="1423.50"></text></g><g><title>malloc (43 samples, 0.04%)</title><rect x="65.2362%" y="1413" width="0.0365%" height="15" fill="rgb(233,191,18)" fg:x="76796" fg:w="43"/><text x="65.4862%" y="1423.50"></text></g><g><title>[unknown] (1,003 samples, 0.85%)</title><rect x="64.4359%" y="1429" width="0.8520%" height="15" fill="rgb(215,83,47)" fg:x="75854" fg:w="1003"/><text x="64.6859%" y="1439.50"></text></g><g><title>Compare (41 samples, 0.03%)</title><rect x="65.2982%" y="1317" width="0.0348%" height="15" fill="rgb(251,67,19)" fg:x="76869" fg:w="41"/><text x="65.5482%" y="1327.50"></text></g><g><title>leveldb::Slice::compare (41 samples, 0.03%)</title><rect x="65.2982%" y="1301" width="0.0348%" height="15" fill="rgb(240,7,20)" fg:x="76869" fg:w="41"/><text x="65.5482%" y="1311.50"></text></g><g><title>Next (15 samples, 0.01%)</title><rect x="65.3330%" y="1317" width="0.0127%" height="15" fill="rgb(210,150,26)" fg:x="76910" fg:w="15"/><text x="65.5830%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (15 samples, 0.01%)</title><rect x="65.3330%" y="1301" width="0.0127%" height="15" fill="rgb(228,75,42)" fg:x="76910" fg:w="15"/><text x="65.5830%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (15 samples, 0.01%)</title><rect x="65.3330%" y="1285" width="0.0127%" height="15" fill="rgb(237,134,48)" fg:x="76910" fg:w="15"/><text x="65.5830%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (17 samples, 0.01%)</title><rect x="65.3457%" y="1317" width="0.0144%" height="15" fill="rgb(205,80,50)" fg:x="76925" fg:w="17"/><text x="65.5957%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (241 samples, 0.20%)</title><rect x="65.3602%" y="1317" width="0.2047%" height="15" fill="rgb(217,74,48)" fg:x="76942" fg:w="241"/><text x="65.6102%" y="1327.50"></text></g><g><title>leveldb::Slice::compare (68 samples, 0.06%)</title><rect x="65.5071%" y="1301" width="0.0578%" height="15" fill="rgb(205,82,50)" fg:x="77115" fg:w="68"/><text x="65.7571%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (549 samples, 0.47%)</title><rect x="65.5649%" y="1317" width="0.4664%" height="15" fill="rgb(228,1,33)" fg:x="77183" fg:w="549"/><text x="65.8149%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::key (14 samples, 0.01%)</title><rect x="66.0194%" y="1301" width="0.0119%" height="15" fill="rgb(214,50,23)" fg:x="77718" fg:w="14"/><text x="66.2694%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (223 samples, 0.19%)</title><rect x="66.0313%" y="1317" width="0.1894%" height="15" fill="rgb(210,62,9)" fg:x="77732" fg:w="223"/><text x="66.2813%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (141 samples, 0.12%)</title><rect x="66.1009%" y="1301" width="0.1198%" height="15" fill="rgb(210,104,37)" fg:x="77814" fg:w="141"/><text x="66.3509%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (141 samples, 0.12%)</title><rect x="66.1009%" y="1285" width="0.1198%" height="15" fill="rgb(232,104,43)" fg:x="77814" fg:w="141"/><text x="66.3509%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Update (75 samples, 0.06%)</title><rect x="66.1570%" y="1269" width="0.0637%" height="15" fill="rgb(244,52,6)" fg:x="77880" fg:w="75"/><text x="66.4070%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (28 samples, 0.02%)</title><rect x="66.2207%" y="1317" width="0.0238%" height="15" fill="rgb(211,174,52)" fg:x="77955" fg:w="28"/><text x="66.4707%" y="1327.50"></text></g><g><title>key (15 samples, 0.01%)</title><rect x="66.3422%" y="1253" width="0.0127%" height="15" fill="rgb(229,48,4)" fg:x="78098" fg:w="15"/><text x="66.5922%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (130 samples, 0.11%)</title><rect x="66.2496%" y="1317" width="0.1104%" height="15" fill="rgb(205,155,16)" fg:x="77989" fg:w="130"/><text x="66.4996%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (87 samples, 0.07%)</title><rect x="66.2861%" y="1301" width="0.0739%" height="15" fill="rgb(211,141,53)" fg:x="78032" fg:w="87"/><text x="66.5361%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (86 samples, 0.07%)</title><rect x="66.2870%" y="1285" width="0.0731%" height="15" fill="rgb(240,148,11)" fg:x="78033" fg:w="86"/><text x="66.5370%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Update (58 samples, 0.05%)</title><rect x="66.3107%" y="1269" width="0.0493%" height="15" fill="rgb(214,45,23)" fg:x="78061" fg:w="58"/><text x="66.5607%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (167 samples, 0.14%)</title><rect x="66.3600%" y="1317" width="0.1419%" height="15" fill="rgb(248,74,26)" fg:x="78119" fg:w="167"/><text x="66.6100%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (49 samples, 0.04%)</title><rect x="66.5019%" y="1317" width="0.0416%" height="15" fill="rgb(218,121,16)" fg:x="78286" fg:w="49"/><text x="66.7519%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (80 samples, 0.07%)</title><rect x="66.5435%" y="1317" width="0.0680%" height="15" fill="rgb(218,10,47)" fg:x="78335" fg:w="80"/><text x="66.7935%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::key (14 samples, 0.01%)</title><rect x="66.5996%" y="1301" width="0.0119%" height="15" fill="rgb(227,99,14)" fg:x="78401" fg:w="14"/><text x="66.8496%" y="1311.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (22 samples, 0.02%)</title><rect x="66.6293%" y="1317" width="0.0187%" height="15" fill="rgb(229,83,46)" fg:x="78436" fg:w="22"/><text x="66.8793%" y="1327.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="66.6488%" y="1173" width="0.0110%" height="15" fill="rgb(228,25,1)" fg:x="78459" fg:w="13"/><text x="66.8988%" y="1183.50"></text></g><g><title>[[ext4]] (35 samples, 0.03%)</title><rect x="66.7261%" y="1141" width="0.0297%" height="15" fill="rgb(252,190,15)" fg:x="78550" fg:w="35"/><text x="66.9761%" y="1151.50"></text></g><g><title>[[jbd2]] (68 samples, 0.06%)</title><rect x="66.7873%" y="1125" width="0.0578%" height="15" fill="rgb(213,103,51)" fg:x="78622" fg:w="68"/><text x="67.0373%" y="1135.50"></text></g><g><title>[[jbd2]] (119 samples, 0.10%)</title><rect x="66.7559%" y="1141" width="0.1011%" height="15" fill="rgb(220,38,44)" fg:x="78585" fg:w="119"/><text x="67.0059%" y="1151.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="66.8451%" y="1125" width="0.0119%" height="15" fill="rgb(210,45,26)" fg:x="78690" fg:w="14"/><text x="67.0951%" y="1135.50"></text></g><g><title>[[ext4]] (1,441 samples, 1.22%)</title><rect x="66.6480%" y="1189" width="1.2241%" height="15" fill="rgb(205,95,48)" fg:x="78458" fg:w="1441"/><text x="66.8980%" y="1199.50"></text></g><g><title>[unknown] (1,427 samples, 1.21%)</title><rect x="66.6599%" y="1173" width="1.2122%" height="15" fill="rgb(225,179,37)" fg:x="78472" fg:w="1427"/><text x="66.9099%" y="1183.50"></text></g><g><title>[unknown] (1,427 samples, 1.21%)</title><rect x="66.6599%" y="1157" width="1.2122%" height="15" fill="rgb(230,209,3)" fg:x="78472" fg:w="1427"/><text x="66.9099%" y="1167.50"></text></g><g><title>[unknown] (1,195 samples, 1.02%)</title><rect x="66.8569%" y="1141" width="1.0151%" height="15" fill="rgb(248,12,46)" fg:x="78704" fg:w="1195"/><text x="67.1069%" y="1151.50"></text></g><g><title>[unknown] (892 samples, 0.76%)</title><rect x="67.1143%" y="1125" width="0.7577%" height="15" fill="rgb(234,18,0)" fg:x="79007" fg:w="892"/><text x="67.3643%" y="1135.50"></text></g><g><title>[unknown] (535 samples, 0.45%)</title><rect x="67.4176%" y="1109" width="0.4545%" height="15" fill="rgb(238,197,14)" fg:x="79364" fg:w="535"/><text x="67.6676%" y="1119.50"></text></g><g><title>[unknown] (246 samples, 0.21%)</title><rect x="67.6631%" y="1093" width="0.2090%" height="15" fill="rgb(251,162,48)" fg:x="79653" fg:w="246"/><text x="67.9131%" y="1103.50"></text></g><g><title>[unknown] (66 samples, 0.06%)</title><rect x="67.8160%" y="1077" width="0.0561%" height="15" fill="rgb(237,73,42)" fg:x="79833" fg:w="66"/><text x="68.0660%" y="1087.50"></text></g><g><title>[unknown] (43 samples, 0.04%)</title><rect x="67.8355%" y="1061" width="0.0365%" height="15" fill="rgb(211,108,8)" fg:x="79856" fg:w="43"/><text x="68.0855%" y="1071.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="67.8457%" y="1045" width="0.0263%" height="15" fill="rgb(213,45,22)" fg:x="79868" fg:w="31"/><text x="68.0957%" y="1055.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="67.8542%" y="1029" width="0.0178%" height="15" fill="rgb(252,154,5)" fg:x="79878" fg:w="21"/><text x="68.1042%" y="1039.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (1,447 samples, 1.23%)</title><rect x="66.6480%" y="1301" width="1.2292%" height="15" fill="rgb(221,79,52)" fg:x="78458" fg:w="1447"/><text x="66.8980%" y="1311.50"></text></g><g><title>__unlink (1,447 samples, 1.23%)</title><rect x="66.6480%" y="1285" width="1.2292%" height="15" fill="rgb(229,220,36)" fg:x="78458" fg:w="1447"/><text x="66.8980%" y="1295.50"></text></g><g><title>[unknown] (1,447 samples, 1.23%)</title><rect x="66.6480%" y="1269" width="1.2292%" height="15" fill="rgb(211,17,16)" fg:x="78458" fg:w="1447"/><text x="66.8980%" y="1279.50"></text></g><g><title>[unknown] (1,447 samples, 1.23%)</title><rect x="66.6480%" y="1253" width="1.2292%" height="15" fill="rgb(222,55,31)" fg:x="78458" fg:w="1447"/><text x="66.8980%" y="1263.50"></text></g><g><title>[unknown] (1,447 samples, 1.23%)</title><rect x="66.6480%" y="1237" width="1.2292%" height="15" fill="rgb(221,221,31)" fg:x="78458" fg:w="1447"/><text x="66.8980%" y="1247.50"></text></g><g><title>[unknown] (1,447 samples, 1.23%)</title><rect x="66.6480%" y="1221" width="1.2292%" height="15" fill="rgb(227,168,26)" fg:x="78458" fg:w="1447"/><text x="66.8980%" y="1231.50"></text></g><g><title>[unknown] (1,447 samples, 1.23%)</title><rect x="66.6480%" y="1205" width="1.2292%" height="15" fill="rgb(224,139,9)" fg:x="78458" fg:w="1447"/><text x="66.8980%" y="1215.50"></text></g><g><title>leveldb::TableCache::Evict (296 samples, 0.25%)</title><rect x="67.8840%" y="1301" width="0.2514%" height="15" fill="rgb(254,172,0)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1311.50"></text></g><g><title>Erase (296 samples, 0.25%)</title><rect x="67.8840%" y="1285" width="0.2514%" height="15" fill="rgb(235,203,1)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (296 samples, 0.25%)</title><rect x="67.8840%" y="1269" width="0.2514%" height="15" fill="rgb(216,205,24)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (296 samples, 0.25%)</title><rect x="67.8840%" y="1253" width="0.2514%" height="15" fill="rgb(233,24,6)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (296 samples, 0.25%)</title><rect x="67.8840%" y="1237" width="0.2514%" height="15" fill="rgb(244,110,9)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1247.50"></text></g><g><title>leveldb::DeleteEntry (296 samples, 0.25%)</title><rect x="67.8840%" y="1221" width="0.2514%" height="15" fill="rgb(239,222,42)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1231.50"></text></g><g><title>~PosixMmapReadableFile (296 samples, 0.25%)</title><rect x="67.8840%" y="1205" width="0.2514%" height="15" fill="rgb(218,145,13)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (296 samples, 0.25%)</title><rect x="67.8840%" y="1189" width="0.2514%" height="15" fill="rgb(207,69,11)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1199.50"></text></g><g><title>__munmap (296 samples, 0.25%)</title><rect x="67.8840%" y="1173" width="0.2514%" height="15" fill="rgb(220,223,22)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1183.50"></text></g><g><title>[unknown] (296 samples, 0.25%)</title><rect x="67.8840%" y="1157" width="0.2514%" height="15" fill="rgb(245,102,5)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1167.50"></text></g><g><title>[unknown] (296 samples, 0.25%)</title><rect x="67.8840%" y="1141" width="0.2514%" height="15" fill="rgb(211,148,2)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1151.50"></text></g><g><title>[unknown] (296 samples, 0.25%)</title><rect x="67.8840%" y="1125" width="0.2514%" height="15" fill="rgb(241,13,44)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1135.50"></text></g><g><title>[unknown] (296 samples, 0.25%)</title><rect x="67.8840%" y="1109" width="0.2514%" height="15" fill="rgb(219,137,21)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1119.50"></text></g><g><title>[unknown] (296 samples, 0.25%)</title><rect x="67.8840%" y="1093" width="0.2514%" height="15" fill="rgb(242,206,5)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1103.50"></text></g><g><title>[unknown] (296 samples, 0.25%)</title><rect x="67.8840%" y="1077" width="0.2514%" height="15" fill="rgb(217,114,22)" fg:x="79913" fg:w="296"/><text x="68.1340%" y="1087.50"></text></g><g><title>[unknown] (295 samples, 0.25%)</title><rect x="67.8848%" y="1061" width="0.2506%" height="15" fill="rgb(253,206,42)" fg:x="79914" fg:w="295"/><text x="68.1348%" y="1071.50"></text></g><g><title>[unknown] (295 samples, 0.25%)</title><rect x="67.8848%" y="1045" width="0.2506%" height="15" fill="rgb(236,102,18)" fg:x="79914" fg:w="295"/><text x="68.1348%" y="1055.50"></text></g><g><title>[unknown] (293 samples, 0.25%)</title><rect x="67.8865%" y="1029" width="0.2489%" height="15" fill="rgb(208,59,49)" fg:x="79916" fg:w="293"/><text x="68.1365%" y="1039.50"></text></g><g><title>[unknown] (182 samples, 0.15%)</title><rect x="67.9808%" y="1013" width="0.1546%" height="15" fill="rgb(215,194,28)" fg:x="80027" fg:w="182"/><text x="68.2308%" y="1023.50"></text></g><g><title>[unknown] (69 samples, 0.06%)</title><rect x="68.0768%" y="997" width="0.0586%" height="15" fill="rgb(243,207,11)" fg:x="80140" fg:w="69"/><text x="68.3268%" y="1007.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="68.1048%" y="981" width="0.0306%" height="15" fill="rgb(254,179,35)" fg:x="80173" fg:w="36"/><text x="68.3548%" y="991.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="68.1184%" y="965" width="0.0170%" height="15" fill="rgb(235,97,3)" fg:x="80189" fg:w="20"/><text x="68.3684%" y="975.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="68.1227%" y="949" width="0.0127%" height="15" fill="rgb(215,155,33)" fg:x="80194" fg:w="15"/><text x="68.3727%" y="959.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="68.1235%" y="933" width="0.0119%" height="15" fill="rgb(223,128,12)" fg:x="80195" fg:w="14"/><text x="68.3735%" y="943.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="68.1235%" y="917" width="0.0119%" height="15" fill="rgb(208,157,18)" fg:x="80195" fg:w="14"/><text x="68.3735%" y="927.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (1,753 samples, 1.49%)</title><rect x="66.6480%" y="1317" width="1.4891%" height="15" fill="rgb(249,70,54)" fg:x="78458" fg:w="1753"/><text x="66.8980%" y="1327.50"></text></g><g><title>Compare (49 samples, 0.04%)</title><rect x="68.2068%" y="1301" width="0.0416%" height="15" fill="rgb(244,118,24)" fg:x="80293" fg:w="49"/><text x="68.4568%" y="1311.50"></text></g><g><title>leveldb::Slice::compare (49 samples, 0.04%)</title><rect x="68.2068%" y="1285" width="0.0416%" height="15" fill="rgb(211,54,0)" fg:x="80293" fg:w="49"/><text x="68.4568%" y="1295.50"></text></g><g><title>crc32c::ExtendSse42 (12 samples, 0.01%)</title><rect x="68.2509%" y="1173" width="0.0102%" height="15" fill="rgb(245,137,45)" fg:x="80345" fg:w="12"/><text x="68.5009%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (15 samples, 0.01%)</title><rect x="68.2492%" y="1237" width="0.0127%" height="15" fill="rgb(232,154,31)" fg:x="80343" fg:w="15"/><text x="68.4992%" y="1247.50"></text></g><g><title>leveldb::Table::BlockReader (14 samples, 0.01%)</title><rect x="68.2501%" y="1221" width="0.0119%" height="15" fill="rgb(253,6,39)" fg:x="80344" fg:w="14"/><text x="68.5001%" y="1231.50"></text></g><g><title>leveldb::ReadBlock (13 samples, 0.01%)</title><rect x="68.2509%" y="1205" width="0.0110%" height="15" fill="rgb(234,183,24)" fg:x="80345" fg:w="13"/><text x="68.5009%" y="1215.50"></text></g><g><title>leveldb::crc32c::Value (13 samples, 0.01%)</title><rect x="68.2509%" y="1189" width="0.0110%" height="15" fill="rgb(252,84,40)" fg:x="80345" fg:w="13"/><text x="68.5009%" y="1199.50"></text></g><g><title>SkipEmptyDataBlocksForward (16 samples, 0.01%)</title><rect x="68.2492%" y="1269" width="0.0136%" height="15" fill="rgb(224,65,2)" fg:x="80343" fg:w="16"/><text x="68.4992%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (16 samples, 0.01%)</title><rect x="68.2492%" y="1253" width="0.0136%" height="15" fill="rgb(229,38,24)" fg:x="80343" fg:w="16"/><text x="68.4992%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (16 samples, 0.01%)</title><rect x="68.2764%" y="1269" width="0.0136%" height="15" fill="rgb(218,131,50)" fg:x="80375" fg:w="16"/><text x="68.5264%" y="1279.50"></text></g><g><title>Next (51 samples, 0.04%)</title><rect x="68.2484%" y="1301" width="0.0433%" height="15" fill="rgb(233,106,18)" fg:x="80342" fg:w="51"/><text x="68.4984%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (51 samples, 0.04%)</title><rect x="68.2484%" y="1285" width="0.0433%" height="15" fill="rgb(220,216,11)" fg:x="80342" fg:w="51"/><text x="68.4984%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (20 samples, 0.02%)</title><rect x="68.2985%" y="1301" width="0.0170%" height="15" fill="rgb(251,100,45)" fg:x="80401" fg:w="20"/><text x="68.5485%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (39 samples, 0.03%)</title><rect x="68.3240%" y="1301" width="0.0331%" height="15" fill="rgb(235,143,32)" fg:x="80431" fg:w="39"/><text x="68.5740%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (292 samples, 0.25%)</title><rect x="68.3571%" y="1301" width="0.2480%" height="15" fill="rgb(248,124,34)" fg:x="80470" fg:w="292"/><text x="68.6071%" y="1311.50"></text></g><g><title>leveldb::Slice::compare (85 samples, 0.07%)</title><rect x="68.5330%" y="1285" width="0.0722%" height="15" fill="rgb(225,221,4)" fg:x="80677" fg:w="85"/><text x="68.7830%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (143 samples, 0.12%)</title><rect x="68.6052%" y="1301" width="0.1215%" height="15" fill="rgb(242,27,43)" fg:x="80762" fg:w="143"/><text x="68.8552%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::key (16 samples, 0.01%)</title><rect x="68.7130%" y="1285" width="0.0136%" height="15" fill="rgb(227,54,8)" fg:x="80889" fg:w="16"/><text x="68.9630%" y="1295.50"></text></g><g><title>Next (49 samples, 0.04%)</title><rect x="68.7895%" y="1269" width="0.0416%" height="15" fill="rgb(253,139,49)" fg:x="80979" fg:w="49"/><text x="69.0395%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (49 samples, 0.04%)</title><rect x="68.7895%" y="1253" width="0.0416%" height="15" fill="rgb(231,26,43)" fg:x="80979" fg:w="49"/><text x="69.0395%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (49 samples, 0.04%)</title><rect x="68.7895%" y="1237" width="0.0416%" height="15" fill="rgb(207,121,39)" fg:x="80979" fg:w="49"/><text x="69.0395%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (12 samples, 0.01%)</title><rect x="68.8379%" y="1269" width="0.0102%" height="15" fill="rgb(223,101,35)" fg:x="81036" fg:w="12"/><text x="69.0879%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (23 samples, 0.02%)</title><rect x="68.8481%" y="1269" width="0.0195%" height="15" fill="rgb(232,87,23)" fg:x="81048" fg:w="23"/><text x="69.0981%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (125 samples, 0.11%)</title><rect x="68.8694%" y="1269" width="0.1062%" height="15" fill="rgb(225,180,29)" fg:x="81073" fg:w="125"/><text x="69.1194%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (117 samples, 0.10%)</title><rect x="68.8761%" y="1253" width="0.0994%" height="15" fill="rgb(225,25,17)" fg:x="81081" fg:w="117"/><text x="69.1261%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (117 samples, 0.10%)</title><rect x="68.8761%" y="1237" width="0.0994%" height="15" fill="rgb(223,8,52)" fg:x="81081" fg:w="117"/><text x="69.1261%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (14 samples, 0.01%)</title><rect x="68.9636%" y="1221" width="0.0119%" height="15" fill="rgb(246,42,21)" fg:x="81184" fg:w="14"/><text x="69.2136%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (33 samples, 0.03%)</title><rect x="68.9755%" y="1269" width="0.0280%" height="15" fill="rgb(205,64,43)" fg:x="81198" fg:w="33"/><text x="69.2255%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (106 samples, 0.09%)</title><rect x="69.1675%" y="1253" width="0.0900%" height="15" fill="rgb(221,160,13)" fg:x="81424" fg:w="106"/><text x="69.4175%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::GetRestartPoint (13 samples, 0.01%)</title><rect x="69.2465%" y="1237" width="0.0110%" height="15" fill="rgb(239,58,35)" fg:x="81517" fg:w="13"/><text x="69.4965%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (25 samples, 0.02%)</title><rect x="69.2601%" y="1205" width="0.0212%" height="15" fill="rgb(251,26,40)" fg:x="81533" fg:w="25"/><text x="69.5101%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (41 samples, 0.03%)</title><rect x="69.2601%" y="1221" width="0.0348%" height="15" fill="rgb(247,0,4)" fg:x="81533" fg:w="41"/><text x="69.5101%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (12 samples, 0.01%)</title><rect x="69.2847%" y="1205" width="0.0102%" height="15" fill="rgb(218,130,10)" fg:x="81562" fg:w="12"/><text x="69.5347%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (61 samples, 0.05%)</title><rect x="69.2949%" y="1221" width="0.0518%" height="15" fill="rgb(239,32,7)" fg:x="81574" fg:w="61"/><text x="69.5449%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (54 samples, 0.05%)</title><rect x="69.3009%" y="1205" width="0.0459%" height="15" fill="rgb(210,192,24)" fg:x="81581" fg:w="54"/><text x="69.5509%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (21 samples, 0.02%)</title><rect x="69.3289%" y="1189" width="0.0178%" height="15" fill="rgb(226,212,17)" fg:x="81614" fg:w="21"/><text x="69.5789%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (117 samples, 0.10%)</title><rect x="69.2576%" y="1237" width="0.0994%" height="15" fill="rgb(219,201,28)" fg:x="81530" fg:w="117"/><text x="69.5076%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (12 samples, 0.01%)</title><rect x="69.3468%" y="1221" width="0.0102%" height="15" fill="rgb(235,207,41)" fg:x="81635" fg:w="12"/><text x="69.5968%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (122 samples, 0.10%)</title><rect x="69.2576%" y="1253" width="0.1036%" height="15" fill="rgb(241,95,54)" fg:x="81530" fg:w="122"/><text x="69.5076%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (422 samples, 0.36%)</title><rect x="69.0044%" y="1269" width="0.3585%" height="15" fill="rgb(248,12,23)" fg:x="81232" fg:w="422"/><text x="69.2544%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::Valid (69 samples, 0.06%)</title><rect x="69.3629%" y="1269" width="0.0586%" height="15" fill="rgb(228,173,4)" fg:x="81654" fg:w="69"/><text x="69.6129%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::key (12 samples, 0.01%)</title><rect x="69.4215%" y="1269" width="0.0102%" height="15" fill="rgb(254,99,5)" fg:x="81723" fg:w="12"/><text x="69.6715%" y="1279.50"></text></g><g><title>Next (14 samples, 0.01%)</title><rect x="69.4402%" y="1253" width="0.0119%" height="15" fill="rgb(212,184,17)" fg:x="81745" fg:w="14"/><text x="69.6902%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (14 samples, 0.01%)</title><rect x="69.4402%" y="1237" width="0.0119%" height="15" fill="rgb(252,174,1)" fg:x="81745" fg:w="14"/><text x="69.6902%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (14 samples, 0.01%)</title><rect x="69.4402%" y="1221" width="0.0119%" height="15" fill="rgb(241,118,51)" fg:x="81745" fg:w="14"/><text x="69.6902%" y="1231.50"></text></g><g><title>__memcmp_evex_movbe (19 samples, 0.02%)</title><rect x="69.4920%" y="1221" width="0.0161%" height="15" fill="rgb(227,94,47)" fg:x="81806" fg:w="19"/><text x="69.7420%" y="1231.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="69.4971%" y="1205" width="0.0110%" height="15" fill="rgb(229,104,2)" fg:x="81812" fg:w="13"/><text x="69.7471%" y="1215.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="69.4971%" y="1189" width="0.0110%" height="15" fill="rgb(219,28,31)" fg:x="81812" fg:w="13"/><text x="69.7471%" y="1199.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="69.4971%" y="1173" width="0.0110%" height="15" fill="rgb(233,109,36)" fg:x="81812" fg:w="13"/><text x="69.7471%" y="1183.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="69.4971%" y="1157" width="0.0110%" height="15" fill="rgb(246,88,11)" fg:x="81812" fg:w="13"/><text x="69.7471%" y="1167.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="69.4980%" y="1141" width="0.0102%" height="15" fill="rgb(209,212,17)" fg:x="81813" fg:w="12"/><text x="69.7480%" y="1151.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="69.4980%" y="1125" width="0.0102%" height="15" fill="rgb(243,59,29)" fg:x="81813" fg:w="12"/><text x="69.7480%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (66 samples, 0.06%)</title><rect x="69.4572%" y="1253" width="0.0561%" height="15" fill="rgb(244,205,48)" fg:x="81765" fg:w="66"/><text x="69.7072%" y="1263.50"></text></g><g><title>leveldb::Slice::compare (32 samples, 0.03%)</title><rect x="69.4861%" y="1237" width="0.0272%" height="15" fill="rgb(227,30,6)" fg:x="81799" fg:w="32"/><text x="69.7361%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (41 samples, 0.03%)</title><rect x="69.5133%" y="1253" width="0.0348%" height="15" fill="rgb(220,205,48)" fg:x="81831" fg:w="41"/><text x="69.7633%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (147 samples, 0.12%)</title><rect x="69.5540%" y="1253" width="0.1249%" height="15" fill="rgb(250,94,14)" fg:x="81879" fg:w="147"/><text x="69.8040%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (130 samples, 0.11%)</title><rect x="69.5685%" y="1237" width="0.1104%" height="15" fill="rgb(216,119,42)" fg:x="81896" fg:w="130"/><text x="69.8185%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (130 samples, 0.11%)</title><rect x="69.5685%" y="1221" width="0.1104%" height="15" fill="rgb(232,155,0)" fg:x="81896" fg:w="130"/><text x="69.8185%" y="1231.50"></text></g><g><title>leveldb::IteratorWrapper::Update (82 samples, 0.07%)</title><rect x="69.6092%" y="1205" width="0.0697%" height="15" fill="rgb(212,24,32)" fg:x="81944" fg:w="82"/><text x="69.8592%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (84 samples, 0.07%)</title><rect x="69.6789%" y="1253" width="0.0714%" height="15" fill="rgb(216,69,20)" fg:x="82026" fg:w="84"/><text x="69.9289%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (16 samples, 0.01%)</title><rect x="69.7545%" y="1253" width="0.0136%" height="15" fill="rgb(229,73,31)" fg:x="82115" fg:w="16"/><text x="70.0045%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::Valid (51 samples, 0.04%)</title><rect x="69.7681%" y="1253" width="0.0433%" height="15" fill="rgb(224,219,20)" fg:x="82131" fg:w="51"/><text x="70.0181%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::key (145 samples, 0.12%)</title><rect x="69.8114%" y="1253" width="0.1232%" height="15" fill="rgb(215,146,41)" fg:x="82182" fg:w="145"/><text x="70.0614%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (640 samples, 0.54%)</title><rect x="69.4317%" y="1269" width="0.5437%" height="15" fill="rgb(244,71,31)" fg:x="81735" fg:w="640"/><text x="69.6817%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (45 samples, 0.04%)</title><rect x="69.9371%" y="1253" width="0.0382%" height="15" fill="rgb(224,24,11)" fg:x="82330" fg:w="45"/><text x="70.1871%" y="1263.50"></text></g><g><title>leveldb::ExtractUserKey (15 samples, 0.01%)</title><rect x="69.9626%" y="1237" width="0.0127%" height="15" fill="rgb(229,76,15)" fg:x="82360" fg:w="15"/><text x="70.2126%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1,407 samples, 1.20%)</title><rect x="68.7827%" y="1285" width="1.1952%" height="15" fill="rgb(209,93,2)" fg:x="80971" fg:w="1407"/><text x="69.0327%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (76 samples, 0.06%)</title><rect x="69.9805%" y="1285" width="0.0646%" height="15" fill="rgb(216,200,50)" fg:x="82381" fg:w="76"/><text x="70.2305%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (46 samples, 0.04%)</title><rect x="70.0059%" y="1269" width="0.0391%" height="15" fill="rgb(211,67,34)" fg:x="82411" fg:w="46"/><text x="70.2559%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Update (46 samples, 0.04%)</title><rect x="70.0059%" y="1253" width="0.0391%" height="15" fill="rgb(225,87,47)" fg:x="82411" fg:w="46"/><text x="70.2559%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (23 samples, 0.02%)</title><rect x="70.0255%" y="1237" width="0.0195%" height="15" fill="rgb(217,185,16)" fg:x="82434" fg:w="23"/><text x="70.2755%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (83 samples, 0.07%)</title><rect x="70.0450%" y="1285" width="0.0705%" height="15" fill="rgb(205,0,0)" fg:x="82457" fg:w="83"/><text x="70.2950%" y="1295.50"></text></g><g><title>DecodeEntry (17 samples, 0.01%)</title><rect x="70.1716%" y="1269" width="0.0144%" height="15" fill="rgb(207,116,45)" fg:x="82606" fg:w="17"/><text x="70.4216%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (29 samples, 0.02%)</title><rect x="70.1869%" y="1269" width="0.0246%" height="15" fill="rgb(221,156,26)" fg:x="82624" fg:w="29"/><text x="70.4369%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (16 samples, 0.01%)</title><rect x="70.2404%" y="1237" width="0.0136%" height="15" fill="rgb(213,140,4)" fg:x="82687" fg:w="16"/><text x="70.4904%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (68 samples, 0.06%)</title><rect x="70.2540%" y="1237" width="0.0578%" height="15" fill="rgb(231,224,15)" fg:x="82703" fg:w="68"/><text x="70.5040%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (57 samples, 0.05%)</title><rect x="70.2633%" y="1221" width="0.0484%" height="15" fill="rgb(244,76,20)" fg:x="82714" fg:w="57"/><text x="70.5133%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (47 samples, 0.04%)</title><rect x="70.2718%" y="1205" width="0.0399%" height="15" fill="rgb(238,117,7)" fg:x="82724" fg:w="47"/><text x="70.5218%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (137 samples, 0.12%)</title><rect x="70.2115%" y="1253" width="0.1164%" height="15" fill="rgb(235,1,10)" fg:x="82653" fg:w="137"/><text x="70.4615%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (19 samples, 0.02%)</title><rect x="70.3118%" y="1237" width="0.0161%" height="15" fill="rgb(216,165,6)" fg:x="82771" fg:w="19"/><text x="70.5618%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (14 samples, 0.01%)</title><rect x="70.3160%" y="1221" width="0.0119%" height="15" fill="rgb(246,91,35)" fg:x="82776" fg:w="14"/><text x="70.5660%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (168 samples, 0.14%)</title><rect x="70.2115%" y="1269" width="0.1427%" height="15" fill="rgb(228,96,24)" fg:x="82653" fg:w="168"/><text x="70.4615%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (31 samples, 0.03%)</title><rect x="70.3279%" y="1253" width="0.0263%" height="15" fill="rgb(254,217,53)" fg:x="82790" fg:w="31"/><text x="70.5779%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (24 samples, 0.02%)</title><rect x="70.3542%" y="1269" width="0.0204%" height="15" fill="rgb(209,60,0)" fg:x="82821" fg:w="24"/><text x="70.6042%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (24 samples, 0.02%)</title><rect x="70.3542%" y="1253" width="0.0204%" height="15" fill="rgb(250,93,26)" fg:x="82821" fg:w="24"/><text x="70.6042%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (19 samples, 0.02%)</title><rect x="70.3585%" y="1237" width="0.0161%" height="15" fill="rgb(211,9,40)" fg:x="82826" fg:w="19"/><text x="70.6085%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (19 samples, 0.02%)</title><rect x="70.3585%" y="1221" width="0.0161%" height="15" fill="rgb(242,57,20)" fg:x="82826" fg:w="19"/><text x="70.6085%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (13 samples, 0.01%)</title><rect x="70.3636%" y="1205" width="0.0110%" height="15" fill="rgb(248,85,48)" fg:x="82832" fg:w="13"/><text x="70.6136%" y="1215.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (308 samples, 0.26%)</title><rect x="70.1172%" y="1285" width="0.2616%" height="15" fill="rgb(212,117,2)" fg:x="82542" fg:w="308"/><text x="70.3672%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::key (18 samples, 0.02%)</title><rect x="70.3823%" y="1285" width="0.0153%" height="15" fill="rgb(243,19,3)" fg:x="82854" fg:w="18"/><text x="70.6323%" y="1295.50"></text></g><g><title>__memmove_avx512_unaligned_erms (35 samples, 0.03%)</title><rect x="70.4545%" y="1109" width="0.0297%" height="15" fill="rgb(232,217,24)" fg:x="82939" fg:w="35"/><text x="70.7045%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (54 samples, 0.05%)</title><rect x="70.4494%" y="1157" width="0.0459%" height="15" fill="rgb(224,175,40)" fg:x="82933" fg:w="54"/><text x="70.6994%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (54 samples, 0.05%)</title><rect x="70.4494%" y="1141" width="0.0459%" height="15" fill="rgb(212,162,32)" fg:x="82933" fg:w="54"/><text x="70.6994%" y="1151.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (53 samples, 0.05%)</title><rect x="70.4502%" y="1125" width="0.0450%" height="15" fill="rgb(215,9,4)" fg:x="82934" fg:w="53"/><text x="70.7002%" y="1135.50"></text></g><g><title>memcpy@plt (12 samples, 0.01%)</title><rect x="70.4850%" y="1109" width="0.0102%" height="15" fill="rgb(242,42,7)" fg:x="82975" fg:w="12"/><text x="70.7350%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (66 samples, 0.06%)</title><rect x="70.4400%" y="1173" width="0.0561%" height="15" fill="rgb(242,184,45)" fg:x="82922" fg:w="66"/><text x="70.6900%" y="1183.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (87 samples, 0.07%)</title><rect x="70.4230%" y="1205" width="0.0739%" height="15" fill="rgb(228,111,51)" fg:x="82902" fg:w="87"/><text x="70.6730%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (67 samples, 0.06%)</title><rect x="70.4400%" y="1189" width="0.0569%" height="15" fill="rgb(236,147,17)" fg:x="82922" fg:w="67"/><text x="70.6900%" y="1199.50"></text></g><g><title>leveldb::Slice::Slice (18 samples, 0.02%)</title><rect x="70.5054%" y="1189" width="0.0153%" height="15" fill="rgb(210,75,22)" fg:x="82999" fg:w="18"/><text x="70.7554%" y="1199.50"></text></g><g><title>leveldb::operator== (85 samples, 0.07%)</title><rect x="70.5207%" y="1189" width="0.0722%" height="15" fill="rgb(217,159,45)" fg:x="83017" fg:w="85"/><text x="70.7707%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (12 samples, 0.01%)</title><rect x="70.6023%" y="1141" width="0.0102%" height="15" fill="rgb(245,165,53)" fg:x="83113" fg:w="12"/><text x="70.8523%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (50 samples, 0.04%)</title><rect x="70.6023%" y="1157" width="0.0425%" height="15" fill="rgb(251,190,50)" fg:x="83113" fg:w="50"/><text x="70.8523%" y="1167.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (29 samples, 0.02%)</title><rect x="70.6201%" y="1141" width="0.0246%" height="15" fill="rgb(208,203,29)" fg:x="83134" fg:w="29"/><text x="70.8701%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (31 samples, 0.03%)</title><rect x="70.6448%" y="1157" width="0.0263%" height="15" fill="rgb(207,209,35)" fg:x="83163" fg:w="31"/><text x="70.8948%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (27 samples, 0.02%)</title><rect x="70.6481%" y="1141" width="0.0229%" height="15" fill="rgb(230,144,49)" fg:x="83167" fg:w="27"/><text x="70.8981%" y="1151.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (26 samples, 0.02%)</title><rect x="70.6490%" y="1125" width="0.0221%" height="15" fill="rgb(229,31,6)" fg:x="83168" fg:w="26"/><text x="70.8990%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (99 samples, 0.08%)</title><rect x="70.5929%" y="1173" width="0.0841%" height="15" fill="rgb(251,129,24)" fg:x="83102" fg:w="99"/><text x="70.8429%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (112 samples, 0.10%)</title><rect x="70.5929%" y="1189" width="0.0951%" height="15" fill="rgb(235,105,15)" fg:x="83102" fg:w="112"/><text x="70.8429%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (13 samples, 0.01%)</title><rect x="70.6770%" y="1173" width="0.0110%" height="15" fill="rgb(216,52,43)" fg:x="83201" fg:w="13"/><text x="70.9270%" y="1183.50"></text></g><g><title>leveldb::BlockBuilder::Add (233 samples, 0.20%)</title><rect x="70.4969%" y="1205" width="0.1979%" height="15" fill="rgb(238,144,41)" fg:x="82989" fg:w="233"/><text x="70.7469%" y="1215.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (12 samples, 0.01%)</title><rect x="70.6957%" y="1205" width="0.0102%" height="15" fill="rgb(243,63,9)" fg:x="83223" fg:w="12"/><text x="70.9457%" y="1215.50"></text></g><g><title>leveldb::TableBuilder::Add (16 samples, 0.01%)</title><rect x="70.7144%" y="1205" width="0.0136%" height="15" fill="rgb(246,208,1)" fg:x="83245" fg:w="16"/><text x="70.9644%" y="1215.50"></text></g><g><title>Next (385 samples, 0.33%)</title><rect x="70.4035%" y="1237" width="0.3270%" height="15" fill="rgb(233,182,18)" fg:x="82879" fg:w="385"/><text x="70.6535%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Next (385 samples, 0.33%)</title><rect x="70.4035%" y="1221" width="0.3270%" height="15" fill="rgb(242,224,8)" fg:x="82879" fg:w="385"/><text x="70.6535%" y="1231.50"></text></g><g><title>DeleteBlock (19 samples, 0.02%)</title><rect x="70.7450%" y="1077" width="0.0161%" height="15" fill="rgb(243,54,37)" fg:x="83281" fg:w="19"/><text x="70.9950%" y="1087.50"></text></g><g><title>leveldb::DeleteBlock (19 samples, 0.02%)</title><rect x="70.7450%" y="1061" width="0.0161%" height="15" fill="rgb(233,192,12)" fg:x="83281" fg:w="19"/><text x="70.9950%" y="1071.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (26 samples, 0.02%)</title><rect x="70.7611%" y="1077" width="0.0221%" height="15" fill="rgb(251,192,53)" fg:x="83300" fg:w="26"/><text x="71.0111%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (25 samples, 0.02%)</title><rect x="70.7620%" y="1061" width="0.0212%" height="15" fill="rgb(246,141,26)" fg:x="83301" fg:w="25"/><text x="71.0120%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (25 samples, 0.02%)</title><rect x="70.7620%" y="1045" width="0.0212%" height="15" fill="rgb(239,195,19)" fg:x="83301" fg:w="25"/><text x="71.0120%" y="1055.50"></text></g><g><title>leveldb::Block::Iter::~Iter (68 samples, 0.06%)</title><rect x="70.7356%" y="1157" width="0.0578%" height="15" fill="rgb(241,16,39)" fg:x="83270" fg:w="68"/><text x="70.9856%" y="1167.50"></text></g><g><title>leveldb::Block::Iter::~Iter (68 samples, 0.06%)</title><rect x="70.7356%" y="1141" width="0.0578%" height="15" fill="rgb(223,13,53)" fg:x="83270" fg:w="68"/><text x="70.9856%" y="1151.50"></text></g><g><title>leveldb::Iterator::~Iterator (60 samples, 0.05%)</title><rect x="70.7424%" y="1125" width="0.0510%" height="15" fill="rgb(214,227,0)" fg:x="83278" fg:w="60"/><text x="70.9924%" y="1135.50"></text></g><g><title>leveldb::Iterator::~Iterator (57 samples, 0.05%)</title><rect x="70.7450%" y="1109" width="0.0484%" height="15" fill="rgb(228,103,26)" fg:x="83281" fg:w="57"/><text x="70.9950%" y="1119.50"></text></g><g><title>leveldb::Iterator::CleanupNode::Run (57 samples, 0.05%)</title><rect x="70.7450%" y="1093" width="0.0484%" height="15" fill="rgb(254,177,53)" fg:x="83281" fg:w="57"/><text x="70.9950%" y="1103.50"></text></g><g><title>SetDataIterator (75 samples, 0.06%)</title><rect x="70.7305%" y="1189" width="0.0637%" height="15" fill="rgb(208,201,34)" fg:x="83264" fg:w="75"/><text x="70.9805%" y="1199.50"></text></g><g><title>leveldb::IteratorWrapper::Set (74 samples, 0.06%)</title><rect x="70.7314%" y="1173" width="0.0629%" height="15" fill="rgb(212,39,5)" fg:x="83265" fg:w="74"/><text x="70.9814%" y="1183.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (16 samples, 0.01%)</title><rect x="70.8062%" y="1189" width="0.0136%" height="15" fill="rgb(246,117,3)" fg:x="83353" fg:w="16"/><text x="71.0562%" y="1199.50"></text></g><g><title>crc32c::ExtendSse42 (40 samples, 0.03%)</title><rect x="70.8427%" y="1173" width="0.0340%" height="15" fill="rgb(244,118,39)" fg:x="83396" fg:w="40"/><text x="71.0927%" y="1183.50"></text></g><g><title>_mm_crc32_u64 (23 samples, 0.02%)</title><rect x="70.8571%" y="1157" width="0.0195%" height="15" fill="rgb(241,64,10)" fg:x="83413" fg:w="23"/><text x="71.1071%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (13 samples, 0.01%)</title><rect x="70.8852%" y="1173" width="0.0110%" height="15" fill="rgb(229,39,44)" fg:x="83446" fg:w="13"/><text x="71.1352%" y="1183.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (18 samples, 0.02%)</title><rect x="70.9030%" y="1173" width="0.0153%" height="15" fill="rgb(230,226,3)" fg:x="83467" fg:w="18"/><text x="71.1530%" y="1183.50"></text></g><g><title>leveldb::GetVarint64 (14 samples, 0.01%)</title><rect x="70.9183%" y="1173" width="0.0119%" height="15" fill="rgb(222,13,42)" fg:x="83485" fg:w="14"/><text x="71.1683%" y="1183.50"></text></g><g><title>leveldb::crc32c::Unmask (18 samples, 0.02%)</title><rect x="70.9591%" y="1157" width="0.0153%" height="15" fill="rgb(247,180,54)" fg:x="83533" fg:w="18"/><text x="71.2091%" y="1167.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="70.9591%" y="1141" width="0.0153%" height="15" fill="rgb(205,96,16)" fg:x="83533" fg:w="18"/><text x="71.2091%" y="1151.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="70.9591%" y="1125" width="0.0153%" height="15" fill="rgb(205,100,21)" fg:x="83533" fg:w="18"/><text x="71.2091%" y="1135.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="70.9591%" y="1109" width="0.0153%" height="15" fill="rgb(248,51,4)" fg:x="83533" fg:w="18"/><text x="71.2091%" y="1119.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="70.9591%" y="1093" width="0.0153%" height="15" fill="rgb(217,197,30)" fg:x="83533" fg:w="18"/><text x="71.2091%" y="1103.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="70.9608%" y="1077" width="0.0136%" height="15" fill="rgb(240,179,40)" fg:x="83535" fg:w="16"/><text x="71.2108%" y="1087.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="70.9625%" y="1061" width="0.0119%" height="15" fill="rgb(212,185,35)" fg:x="83537" fg:w="14"/><text x="71.2125%" y="1071.50"></text></g><g><title>[[igc]] (12 samples, 0.01%)</title><rect x="71.3795%" y="1029" width="0.0102%" height="15" fill="rgb(251,222,31)" fg:x="84028" fg:w="12"/><text x="71.6295%" y="1039.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="71.3795%" y="1125" width="0.0127%" height="15" fill="rgb(208,140,36)" fg:x="84028" fg:w="15"/><text x="71.6295%" y="1135.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="71.3795%" y="1109" width="0.0127%" height="15" fill="rgb(220,148,1)" fg:x="84028" fg:w="15"/><text x="71.6295%" y="1119.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="71.3795%" y="1093" width="0.0127%" height="15" fill="rgb(254,4,28)" fg:x="84028" fg:w="15"/><text x="71.6295%" y="1103.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="71.3795%" y="1077" width="0.0127%" height="15" fill="rgb(222,185,44)" fg:x="84028" fg:w="15"/><text x="71.6295%" y="1087.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="71.3795%" y="1061" width="0.0127%" height="15" fill="rgb(215,74,39)" fg:x="84028" fg:w="15"/><text x="71.6295%" y="1071.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="71.3795%" y="1045" width="0.0127%" height="15" fill="rgb(247,86,4)" fg:x="84028" fg:w="15"/><text x="71.6295%" y="1055.50"></text></g><g><title>_mm_crc32_u64 (736 samples, 0.63%)</title><rect x="71.3923%" y="1125" width="0.6252%" height="15" fill="rgb(231,105,32)" fg:x="84043" fg:w="736"/><text x="71.6423%" y="1135.50"></text></g><g><title>crc32c::ExtendSse42 (1,227 samples, 1.04%)</title><rect x="70.9777%" y="1141" width="1.0423%" height="15" fill="rgb(222,65,35)" fg:x="83555" fg:w="1227"/><text x="71.2277%" y="1151.50"></text></g><g><title>leveldb::ReadBlock (12 samples, 0.01%)</title><rect x="72.0226%" y="1141" width="0.0102%" height="15" fill="rgb(218,145,35)" fg:x="84785" fg:w="12"/><text x="72.2726%" y="1151.50"></text></g><g><title>leveldb::crc32c::Value (1,259 samples, 1.07%)</title><rect x="70.9743%" y="1157" width="1.0695%" height="15" fill="rgb(208,7,15)" fg:x="83551" fg:w="1259"/><text x="71.2243%" y="1167.50"></text></g><g><title>leveldb::crc32c::Extend (13 samples, 0.01%)</title><rect x="72.0328%" y="1141" width="0.0110%" height="15" fill="rgb(209,83,13)" fg:x="84797" fg:w="13"/><text x="72.2828%" y="1151.50"></text></g><g><title>leveldb::ReadBlock (1,303 samples, 1.11%)</title><rect x="70.9429%" y="1173" width="1.1069%" height="15" fill="rgb(218,3,10)" fg:x="83514" fg:w="1303"/><text x="71.1929%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1,571 samples, 1.33%)</title><rect x="70.7305%" y="1205" width="1.3345%" height="15" fill="rgb(211,219,4)" fg:x="83264" fg:w="1571"/><text x="70.9805%" y="1215.50"></text></g><g><title>leveldb::Table::BlockReader (1,448 samples, 1.23%)</title><rect x="70.8350%" y="1189" width="1.2300%" height="15" fill="rgb(228,194,12)" fg:x="83387" fg:w="1448"/><text x="71.0850%" y="1199.50"></text></g><g><title>leveldb::Table::BlockReader (18 samples, 0.02%)</title><rect x="72.0498%" y="1173" width="0.0153%" height="15" fill="rgb(210,175,7)" fg:x="84817" fg:w="18"/><text x="72.2998%" y="1183.50"></text></g><g><title>SkipEmptyDataBlocksForward (1,594 samples, 1.35%)</title><rect x="70.7305%" y="1237" width="1.3541%" height="15" fill="rgb(243,132,6)" fg:x="83264" fg:w="1594"/><text x="70.9805%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1,594 samples, 1.35%)</title><rect x="70.7305%" y="1221" width="1.3541%" height="15" fill="rgb(207,72,18)" fg:x="83264" fg:w="1594"/><text x="70.9805%" y="1231.50"></text></g><g><title>__memcmp_evex_movbe (17 samples, 0.01%)</title><rect x="72.1602%" y="1189" width="0.0144%" height="15" fill="rgb(236,1,18)" fg:x="84947" fg:w="17"/><text x="72.4102%" y="1199.50"></text></g><g><title>__memcmp_evex_movbe (12 samples, 0.01%)</title><rect x="72.1840%" y="1173" width="0.0102%" height="15" fill="rgb(227,0,18)" fg:x="84975" fg:w="12"/><text x="72.4340%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (55 samples, 0.05%)</title><rect x="72.1942%" y="1173" width="0.0467%" height="15" fill="rgb(247,37,5)" fg:x="84987" fg:w="55"/><text x="72.4442%" y="1183.50"></text></g><g><title>leveldb::IteratorWrapper::Next (30 samples, 0.03%)</title><rect x="72.2154%" y="1157" width="0.0255%" height="15" fill="rgb(237,179,24)" fg:x="85012" fg:w="30"/><text x="72.4654%" y="1167.50"></text></g><g><title>leveldb::BlockBuilder::Add (104 samples, 0.09%)</title><rect x="72.2443%" y="1173" width="0.0883%" height="15" fill="rgb(226,53,20)" fg:x="85046" fg:w="104"/><text x="72.4943%" y="1183.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (61 samples, 0.05%)</title><rect x="72.3327%" y="1173" width="0.0518%" height="15" fill="rgb(247,75,7)" fg:x="85150" fg:w="61"/><text x="72.5827%" y="1183.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (25 samples, 0.02%)</title><rect x="72.3632%" y="1157" width="0.0212%" height="15" fill="rgb(233,96,12)" fg:x="85186" fg:w="25"/><text x="72.6132%" y="1167.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (13 samples, 0.01%)</title><rect x="72.3870%" y="1173" width="0.0110%" height="15" fill="rgb(224,125,0)" fg:x="85214" fg:w="13"/><text x="72.6370%" y="1183.50"></text></g><g><title>leveldb::TableBuilder::Add (32 samples, 0.03%)</title><rect x="72.3981%" y="1173" width="0.0272%" height="15" fill="rgb(224,92,25)" fg:x="85227" fg:w="32"/><text x="72.6481%" y="1183.50"></text></g><g><title>leveldb::IteratorWrapper::Update (288 samples, 0.24%)</title><rect x="72.1814%" y="1189" width="0.2446%" height="15" fill="rgb(224,42,24)" fg:x="84972" fg:w="288"/><text x="72.4314%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (394 samples, 0.33%)</title><rect x="72.0931%" y="1237" width="0.3347%" height="15" fill="rgb(234,132,49)" fg:x="84868" fg:w="394"/><text x="72.3431%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Next (363 samples, 0.31%)</title><rect x="72.1194%" y="1221" width="0.3084%" height="15" fill="rgb(248,100,35)" fg:x="84899" fg:w="363"/><text x="72.3694%" y="1231.50"></text></g><g><title>leveldb::IteratorWrapper::Update (317 samples, 0.27%)</title><rect x="72.1585%" y="1205" width="0.2693%" height="15" fill="rgb(239,94,40)" fg:x="84945" fg:w="317"/><text x="72.4085%" y="1215.50"></text></g><g><title>leveldb::IteratorWrapper::Update (15 samples, 0.01%)</title><rect x="72.4516%" y="1205" width="0.0127%" height="15" fill="rgb(235,139,28)" fg:x="85290" fg:w="15"/><text x="72.7016%" y="1215.50"></text></g><g><title>leveldb::IteratorWrapper::Next (38 samples, 0.03%)</title><rect x="72.4354%" y="1221" width="0.0323%" height="15" fill="rgb(217,144,7)" fg:x="85271" fg:w="38"/><text x="72.6854%" y="1231.50"></text></g><g><title>leveldb::Iterator::~Iterator (16 samples, 0.01%)</title><rect x="72.4822%" y="1157" width="0.0136%" height="15" fill="rgb(227,55,4)" fg:x="85326" fg:w="16"/><text x="72.7322%" y="1167.50"></text></g><g><title>leveldb::Iterator::~Iterator (15 samples, 0.01%)</title><rect x="72.4830%" y="1141" width="0.0127%" height="15" fill="rgb(252,82,54)" fg:x="85327" fg:w="15"/><text x="72.7330%" y="1151.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (31 samples, 0.03%)</title><rect x="72.4745%" y="1205" width="0.0263%" height="15" fill="rgb(245,172,4)" fg:x="85317" fg:w="31"/><text x="72.7245%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (31 samples, 0.03%)</title><rect x="72.4745%" y="1189" width="0.0263%" height="15" fill="rgb(207,26,27)" fg:x="85317" fg:w="31"/><text x="72.7245%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (31 samples, 0.03%)</title><rect x="72.4745%" y="1173" width="0.0263%" height="15" fill="rgb(252,98,18)" fg:x="85317" fg:w="31"/><text x="72.7245%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (92 samples, 0.08%)</title><rect x="72.4278%" y="1237" width="0.0782%" height="15" fill="rgb(244,8,26)" fg:x="85262" fg:w="92"/><text x="72.6778%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::SeekToFirst (45 samples, 0.04%)</title><rect x="72.4677%" y="1221" width="0.0382%" height="15" fill="rgb(237,173,45)" fg:x="85309" fg:w="45"/><text x="72.7177%" y="1231.50"></text></g><g><title>leveldb::Block::Iter::Next (13 samples, 0.01%)</title><rect x="72.5059%" y="1237" width="0.0110%" height="15" fill="rgb(208,213,49)" fg:x="85354" fg:w="13"/><text x="72.7559%" y="1247.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (18 samples, 0.02%)</title><rect x="72.5170%" y="1237" width="0.0153%" height="15" fill="rgb(212,122,37)" fg:x="85367" fg:w="18"/><text x="72.7670%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::Add (23 samples, 0.02%)</title><rect x="72.5331%" y="1237" width="0.0195%" height="15" fill="rgb(213,80,17)" fg:x="85386" fg:w="23"/><text x="72.7831%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (55 samples, 0.05%)</title><rect x="72.5527%" y="1237" width="0.0467%" height="15" fill="rgb(206,210,43)" fg:x="85409" fg:w="55"/><text x="72.8027%" y="1247.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (31 samples, 0.03%)</title><rect x="72.6053%" y="1237" width="0.0263%" height="15" fill="rgb(229,214,3)" fg:x="85471" fg:w="31"/><text x="72.8553%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::Add (107 samples, 0.09%)</title><rect x="72.6419%" y="1237" width="0.0909%" height="15" fill="rgb(235,213,29)" fg:x="85514" fg:w="107"/><text x="72.8919%" y="1247.50"></text></g><g><title>Next (2,753 samples, 2.34%)</title><rect x="70.4035%" y="1269" width="2.3386%" height="15" fill="rgb(248,135,26)" fg:x="82879" fg:w="2753"/><text x="70.6535%" y="1279.50">N..</text></g><g><title>leveldb::IteratorWrapper::Next (2,753 samples, 2.34%)</title><rect x="70.4035%" y="1253" width="2.3386%" height="15" fill="rgb(242,188,12)" fg:x="82879" fg:w="2753"/><text x="70.6535%" y="1263.50">l..</text></g><g><title>leveldb::ReadBlock (59 samples, 0.05%)</title><rect x="72.7446%" y="1205" width="0.0501%" height="15" fill="rgb(245,38,12)" fg:x="85635" fg:w="59"/><text x="72.9946%" y="1215.50"></text></g><g><title>leveldb::crc32c::Value (50 samples, 0.04%)</title><rect x="72.7523%" y="1189" width="0.0425%" height="15" fill="rgb(218,42,13)" fg:x="85644" fg:w="50"/><text x="73.0023%" y="1199.50"></text></g><g><title>crc32c::ExtendSse42 (50 samples, 0.04%)</title><rect x="72.7523%" y="1173" width="0.0425%" height="15" fill="rgb(238,132,49)" fg:x="85644" fg:w="50"/><text x="73.0023%" y="1183.50"></text></g><g><title>_mm_crc32_u64 (32 samples, 0.03%)</title><rect x="72.7676%" y="1157" width="0.0272%" height="15" fill="rgb(209,196,19)" fg:x="85662" fg:w="32"/><text x="73.0176%" y="1167.50"></text></g><g><title>SkipEmptyDataBlocksForward (64 samples, 0.05%)</title><rect x="72.7421%" y="1269" width="0.0544%" height="15" fill="rgb(244,131,22)" fg:x="85632" fg:w="64"/><text x="72.9921%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (64 samples, 0.05%)</title><rect x="72.7421%" y="1253" width="0.0544%" height="15" fill="rgb(223,18,34)" fg:x="85632" fg:w="64"/><text x="72.9921%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (64 samples, 0.05%)</title><rect x="72.7421%" y="1237" width="0.0544%" height="15" fill="rgb(252,124,54)" fg:x="85632" fg:w="64"/><text x="72.9921%" y="1247.50"></text></g><g><title>leveldb::Table::BlockReader (63 samples, 0.05%)</title><rect x="72.7429%" y="1221" width="0.0535%" height="15" fill="rgb(229,106,42)" fg:x="85633" fg:w="63"/><text x="72.9929%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (211 samples, 0.18%)</title><rect x="72.8033%" y="1269" width="0.1792%" height="15" fill="rgb(221,129,1)" fg:x="85704" fg:w="211"/><text x="73.0533%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (77 samples, 0.07%)</title><rect x="72.9171%" y="1253" width="0.0654%" height="15" fill="rgb(229,74,15)" fg:x="85838" fg:w="77"/><text x="73.1671%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (175 samples, 0.15%)</title><rect x="72.9834%" y="1269" width="0.1487%" height="15" fill="rgb(210,206,50)" fg:x="85916" fg:w="175"/><text x="73.2334%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (105 samples, 0.09%)</title><rect x="73.0428%" y="1253" width="0.0892%" height="15" fill="rgb(251,114,31)" fg:x="85986" fg:w="105"/><text x="73.2928%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (21 samples, 0.02%)</title><rect x="73.1142%" y="1237" width="0.0178%" height="15" fill="rgb(215,225,28)" fg:x="86070" fg:w="21"/><text x="73.3642%" y="1247.50"></text></g><g><title>leveldb::Block::Iter::Next (41 samples, 0.03%)</title><rect x="73.1363%" y="1269" width="0.0348%" height="15" fill="rgb(237,109,14)" fg:x="86096" fg:w="41"/><text x="73.3863%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::NextEntryOffset (14 samples, 0.01%)</title><rect x="73.2204%" y="1253" width="0.0119%" height="15" fill="rgb(230,13,37)" fg:x="86195" fg:w="14"/><text x="73.4704%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (76 samples, 0.06%)</title><rect x="73.1711%" y="1269" width="0.0646%" height="15" fill="rgb(231,40,28)" fg:x="86137" fg:w="76"/><text x="73.4211%" y="1279.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (176 samples, 0.15%)</title><rect x="73.2501%" y="1269" width="0.1495%" height="15" fill="rgb(231,202,18)" fg:x="86230" fg:w="176"/><text x="73.5001%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (25 samples, 0.02%)</title><rect x="73.4463%" y="1253" width="0.0212%" height="15" fill="rgb(225,33,18)" fg:x="86461" fg:w="25"/><text x="73.6963%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (23 samples, 0.02%)</title><rect x="73.4480%" y="1237" width="0.0195%" height="15" fill="rgb(223,64,47)" fg:x="86463" fg:w="23"/><text x="73.6980%" y="1247.50"></text></g><g><title>leveldb::Block::Iter::Next (59 samples, 0.05%)</title><rect x="73.4684%" y="1253" width="0.0501%" height="15" fill="rgb(234,114,13)" fg:x="86487" fg:w="59"/><text x="73.7184%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (47 samples, 0.04%)</title><rect x="73.5185%" y="1253" width="0.0399%" height="15" fill="rgb(248,56,40)" fg:x="86546" fg:w="47"/><text x="73.7685%" y="1263.50"></text></g><g><title>DecodeEntry (29 samples, 0.02%)</title><rect x="73.6332%" y="1221" width="0.0246%" height="15" fill="rgb(221,194,21)" fg:x="86681" fg:w="29"/><text x="73.8832%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (17 samples, 0.01%)</title><rect x="73.6612%" y="1205" width="0.0144%" height="15" fill="rgb(242,108,46)" fg:x="86714" fg:w="17"/><text x="73.9112%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (21 samples, 0.02%)</title><rect x="73.6612%" y="1221" width="0.0178%" height="15" fill="rgb(220,106,10)" fg:x="86714" fg:w="21"/><text x="73.9112%" y="1231.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (73 samples, 0.06%)</title><rect x="73.6230%" y="1237" width="0.0620%" height="15" fill="rgb(211,88,4)" fg:x="86669" fg:w="73"/><text x="73.8730%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (152 samples, 0.13%)</title><rect x="73.5584%" y="1253" width="0.1291%" height="15" fill="rgb(214,95,34)" fg:x="86593" fg:w="152"/><text x="73.8084%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (334 samples, 0.28%)</title><rect x="73.4064%" y="1269" width="0.2837%" height="15" fill="rgb(250,160,33)" fg:x="86414" fg:w="334"/><text x="73.6564%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (22 samples, 0.02%)</title><rect x="73.6901%" y="1269" width="0.0187%" height="15" fill="rgb(225,29,10)" fg:x="86748" fg:w="22"/><text x="73.9401%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::FileSize (77 samples, 0.07%)</title><rect x="73.7088%" y="1269" width="0.0654%" height="15" fill="rgb(224,28,30)" fg:x="86770" fg:w="77"/><text x="73.9588%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3,976 samples, 3.38%)</title><rect x="70.4027%" y="1285" width="3.3775%" height="15" fill="rgb(231,77,4)" fg:x="82878" fg:w="3976"/><text x="70.6527%" y="1295.50">lev..</text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (5,959 samples, 5.06%)</title><rect x="68.7266%" y="1301" width="5.0620%" height="15" fill="rgb(209,63,21)" fg:x="80905" fg:w="5959"/><text x="68.9766%" y="1311.50">leveld..</text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (69 samples, 0.06%)</title><rect x="73.7887%" y="1301" width="0.0586%" height="15" fill="rgb(226,22,11)" fg:x="86864" fg:w="69"/><text x="74.0387%" y="1311.50"></text></g><g><title>Valid (14 samples, 0.01%)</title><rect x="73.8821%" y="1285" width="0.0119%" height="15" fill="rgb(216,82,30)" fg:x="86974" fg:w="14"/><text x="74.1321%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (89 samples, 0.08%)</title><rect x="73.8473%" y="1301" width="0.0756%" height="15" fill="rgb(246,227,38)" fg:x="86933" fg:w="89"/><text x="74.0973%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::key (25 samples, 0.02%)</title><rect x="73.9016%" y="1285" width="0.0212%" height="15" fill="rgb(251,203,53)" fg:x="86997" fg:w="25"/><text x="74.1516%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::value (12 samples, 0.01%)</title><rect x="73.9229%" y="1301" width="0.0102%" height="15" fill="rgb(254,101,1)" fg:x="87022" fg:w="12"/><text x="74.1729%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (159 samples, 0.14%)</title><rect x="73.9331%" y="1301" width="0.1351%" height="15" fill="rgb(241,180,5)" fg:x="87034" fg:w="159"/><text x="74.1831%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (116 samples, 0.10%)</title><rect x="73.9696%" y="1285" width="0.0985%" height="15" fill="rgb(218,168,4)" fg:x="87077" fg:w="116"/><text x="74.2196%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Update (61 samples, 0.05%)</title><rect x="74.0163%" y="1269" width="0.0518%" height="15" fill="rgb(224,223,32)" fg:x="87132" fg:w="61"/><text x="74.2663%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Update (36 samples, 0.03%)</title><rect x="74.0375%" y="1253" width="0.0306%" height="15" fill="rgb(236,106,22)" fg:x="87157" fg:w="36"/><text x="74.2875%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (125 samples, 0.11%)</title><rect x="74.0681%" y="1301" width="0.1062%" height="15" fill="rgb(206,121,5)" fg:x="87193" fg:w="125"/><text x="74.3181%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (44 samples, 0.04%)</title><rect x="74.1743%" y="1301" width="0.0374%" height="15" fill="rgb(233,87,28)" fg:x="87318" fg:w="44"/><text x="74.4243%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (37 samples, 0.03%)</title><rect x="74.2117%" y="1301" width="0.0314%" height="15" fill="rgb(236,137,17)" fg:x="87362" fg:w="37"/><text x="74.4617%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (53 samples, 0.05%)</title><rect x="74.2440%" y="1301" width="0.0450%" height="15" fill="rgb(209,183,38)" fg:x="87400" fg:w="53"/><text x="74.4940%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::value (45 samples, 0.04%)</title><rect x="74.2508%" y="1285" width="0.0382%" height="15" fill="rgb(206,162,44)" fg:x="87408" fg:w="45"/><text x="74.5008%" y="1295.50"></text></g><g><title>value (36 samples, 0.03%)</title><rect x="74.2584%" y="1269" width="0.0306%" height="15" fill="rgb(237,70,39)" fg:x="87417" fg:w="36"/><text x="74.5084%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::value (32 samples, 0.03%)</title><rect x="74.2618%" y="1253" width="0.0272%" height="15" fill="rgb(212,176,5)" fg:x="87421" fg:w="32"/><text x="74.5118%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::Next (19 samples, 0.02%)</title><rect x="74.2890%" y="1301" width="0.0161%" height="15" fill="rgb(232,95,16)" fg:x="87453" fg:w="19"/><text x="74.5390%" y="1311.50"></text></g><g><title>DecodeEntry (44 samples, 0.04%)</title><rect x="74.3485%" y="1285" width="0.0374%" height="15" fill="rgb(219,115,35)" fg:x="87523" fg:w="44"/><text x="74.5985%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (13 samples, 0.01%)</title><rect x="74.4037%" y="1253" width="0.0110%" height="15" fill="rgb(251,67,27)" fg:x="87588" fg:w="13"/><text x="74.6537%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (34 samples, 0.03%)</title><rect x="74.3960%" y="1269" width="0.0289%" height="15" fill="rgb(222,95,40)" fg:x="87579" fg:w="34"/><text x="74.6460%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (12 samples, 0.01%)</title><rect x="74.4147%" y="1253" width="0.0102%" height="15" fill="rgb(250,35,16)" fg:x="87601" fg:w="12"/><text x="74.6647%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (42 samples, 0.04%)</title><rect x="74.3960%" y="1285" width="0.0357%" height="15" fill="rgb(224,86,44)" fg:x="87579" fg:w="42"/><text x="74.6460%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (13 samples, 0.01%)</title><rect x="74.4317%" y="1285" width="0.0110%" height="15" fill="rgb(237,53,53)" fg:x="87621" fg:w="13"/><text x="74.6817%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (13 samples, 0.01%)</title><rect x="74.4317%" y="1269" width="0.0110%" height="15" fill="rgb(208,171,33)" fg:x="87621" fg:w="13"/><text x="74.6817%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (167 samples, 0.14%)</title><rect x="74.3051%" y="1301" width="0.1419%" height="15" fill="rgb(222,64,27)" fg:x="87472" fg:w="167"/><text x="74.5551%" y="1311.50"></text></g><g><title>leveldb::Block::Iter::value (89 samples, 0.08%)</title><rect x="74.4546%" y="1301" width="0.0756%" height="15" fill="rgb(221,121,35)" fg:x="87648" fg:w="89"/><text x="74.7046%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (27 samples, 0.02%)</title><rect x="74.5345%" y="1269" width="0.0229%" height="15" fill="rgb(228,137,42)" fg:x="87742" fg:w="27"/><text x="74.7845%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (32 samples, 0.03%)</title><rect x="74.5345%" y="1285" width="0.0272%" height="15" fill="rgb(227,54,21)" fg:x="87742" fg:w="32"/><text x="74.7845%" y="1295.50"></text></g><g><title>leveldb::BlockBuilder::Add (47 samples, 0.04%)</title><rect x="74.5302%" y="1301" width="0.0399%" height="15" fill="rgb(240,168,33)" fg:x="87737" fg:w="47"/><text x="74.7802%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (26 samples, 0.02%)</title><rect x="74.6007%" y="1285" width="0.0221%" height="15" fill="rgb(243,159,6)" fg:x="87820" fg:w="26"/><text x="74.8507%" y="1295.50"></text></g><g><title>leveldb::Slice::compare (13 samples, 0.01%)</title><rect x="74.6118%" y="1269" width="0.0110%" height="15" fill="rgb(205,211,41)" fg:x="87833" fg:w="13"/><text x="74.8618%" y="1279.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (22 samples, 0.02%)</title><rect x="74.6330%" y="1285" width="0.0187%" height="15" fill="rgb(253,30,1)" fg:x="87858" fg:w="22"/><text x="74.8830%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (19 samples, 0.02%)</title><rect x="74.6517%" y="1285" width="0.0161%" height="15" fill="rgb(226,80,18)" fg:x="87880" fg:w="19"/><text x="74.9017%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (23 samples, 0.02%)</title><rect x="74.6764%" y="1285" width="0.0195%" height="15" fill="rgb(253,156,46)" fg:x="87909" fg:w="23"/><text x="74.9264%" y="1295.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (151 samples, 0.13%)</title><rect x="74.5710%" y="1301" width="0.1283%" height="15" fill="rgb(248,87,27)" fg:x="87785" fg:w="151"/><text x="74.8210%" y="1311.50"></text></g><g><title>MaxGrandParentOverlapBytes (45 samples, 0.04%)</title><rect x="74.8777%" y="1285" width="0.0382%" height="15" fill="rgb(227,122,2)" fg:x="88146" fg:w="45"/><text x="75.1277%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (14 samples, 0.01%)</title><rect x="74.9601%" y="1269" width="0.0119%" height="15" fill="rgb(229,94,39)" fg:x="88243" fg:w="14"/><text x="75.2101%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (26 samples, 0.02%)</title><rect x="74.9720%" y="1269" width="0.0221%" height="15" fill="rgb(225,173,31)" fg:x="88257" fg:w="26"/><text x="75.2220%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (16 samples, 0.01%)</title><rect x="74.9941%" y="1269" width="0.0136%" height="15" fill="rgb(239,176,30)" fg:x="88283" fg:w="16"/><text x="75.2441%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (12 samples, 0.01%)</title><rect x="74.9975%" y="1253" width="0.0102%" height="15" fill="rgb(212,104,21)" fg:x="88287" fg:w="12"/><text x="75.2475%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (12 samples, 0.01%)</title><rect x="74.9975%" y="1237" width="0.0102%" height="15" fill="rgb(240,209,40)" fg:x="88287" fg:w="12"/><text x="75.2475%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (86 samples, 0.07%)</title><rect x="74.9584%" y="1285" width="0.0731%" height="15" fill="rgb(234,195,5)" fg:x="88241" fg:w="86"/><text x="75.2084%" y="1295.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (428 samples, 0.36%)</title><rect x="74.6993%" y="1301" width="0.3636%" height="15" fill="rgb(238,213,1)" fg:x="87936" fg:w="428"/><text x="74.9493%" y="1311.50"></text></g><g><title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (37 samples, 0.03%)</title><rect x="75.0314%" y="1285" width="0.0314%" height="15" fill="rgb(235,182,54)" fg:x="88327" fg:w="37"/><text x="75.2814%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (51 samples, 0.04%)</title><rect x="75.0629%" y="1269" width="0.0433%" height="15" fill="rgb(229,50,46)" fg:x="88364" fg:w="51"/><text x="75.3129%" y="1279.50"></text></g><g><title>__unlink (51 samples, 0.04%)</title><rect x="75.0629%" y="1253" width="0.0433%" height="15" fill="rgb(219,145,13)" fg:x="88364" fg:w="51"/><text x="75.3129%" y="1263.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="75.0629%" y="1237" width="0.0433%" height="15" fill="rgb(220,226,10)" fg:x="88364" fg:w="51"/><text x="75.3129%" y="1247.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="75.0629%" y="1221" width="0.0433%" height="15" fill="rgb(248,47,30)" fg:x="88364" fg:w="51"/><text x="75.3129%" y="1231.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="75.0629%" y="1205" width="0.0433%" height="15" fill="rgb(231,209,44)" fg:x="88364" fg:w="51"/><text x="75.3129%" y="1215.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="75.0629%" y="1189" width="0.0433%" height="15" fill="rgb(209,80,30)" fg:x="88364" fg:w="51"/><text x="75.3129%" y="1199.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="75.0629%" y="1173" width="0.0433%" height="15" fill="rgb(232,9,14)" fg:x="88364" fg:w="51"/><text x="75.3129%" y="1183.50"></text></g><g><title>[[ext4]] (51 samples, 0.04%)</title><rect x="75.0629%" y="1157" width="0.0433%" height="15" fill="rgb(243,91,43)" fg:x="88364" fg:w="51"/><text x="75.3129%" y="1167.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="75.0629%" y="1141" width="0.0433%" height="15" fill="rgb(231,90,52)" fg:x="88364" fg:w="51"/><text x="75.3129%" y="1151.50"></text></g><g><title>[unknown] (50 samples, 0.04%)</title><rect x="75.0637%" y="1125" width="0.0425%" height="15" fill="rgb(253,192,44)" fg:x="88365" fg:w="50"/><text x="75.3137%" y="1135.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="75.0731%" y="1109" width="0.0331%" height="15" fill="rgb(241,66,31)" fg:x="88376" fg:w="39"/><text x="75.3231%" y="1119.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="75.0773%" y="1093" width="0.0289%" height="15" fill="rgb(235,81,37)" fg:x="88381" fg:w="34"/><text x="75.3273%" y="1103.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="75.0858%" y="1077" width="0.0204%" height="15" fill="rgb(223,221,9)" fg:x="88391" fg:w="24"/><text x="75.3358%" y="1087.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="75.0951%" y="1061" width="0.0110%" height="15" fill="rgb(242,180,7)" fg:x="88402" fg:w="13"/><text x="75.3451%" y="1071.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (53 samples, 0.05%)</title><rect x="75.0629%" y="1285" width="0.0450%" height="15" fill="rgb(243,78,19)" fg:x="88364" fg:w="53"/><text x="75.3129%" y="1295.50"></text></g><g><title>[[ext4]] (20 samples, 0.02%)</title><rect x="75.1138%" y="1013" width="0.0170%" height="15" fill="rgb(233,23,17)" fg:x="88424" fg:w="20"/><text x="75.3638%" y="1023.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="75.1147%" y="997" width="0.0161%" height="15" fill="rgb(252,122,45)" fg:x="88425" fg:w="19"/><text x="75.3647%" y="1007.50"></text></g><g><title>[[ext4]] (28 samples, 0.02%)</title><rect x="75.1138%" y="1029" width="0.0238%" height="15" fill="rgb(247,108,20)" fg:x="88424" fg:w="28"/><text x="75.3638%" y="1039.50"></text></g><g><title>[[ext4]] (43 samples, 0.04%)</title><rect x="75.1113%" y="1077" width="0.0365%" height="15" fill="rgb(235,84,21)" fg:x="88421" fg:w="43"/><text x="75.3613%" y="1087.50"></text></g><g><title>[[ext4]] (43 samples, 0.04%)</title><rect x="75.1113%" y="1061" width="0.0365%" height="15" fill="rgb(247,129,10)" fg:x="88421" fg:w="43"/><text x="75.3613%" y="1071.50"></text></g><g><title>[[ext4]] (43 samples, 0.04%)</title><rect x="75.1113%" y="1045" width="0.0365%" height="15" fill="rgb(208,173,14)" fg:x="88421" fg:w="43"/><text x="75.3613%" y="1055.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="75.1376%" y="1029" width="0.0102%" height="15" fill="rgb(236,31,38)" fg:x="88452" fg:w="12"/><text x="75.3876%" y="1039.50"></text></g><g><title>Sync (52 samples, 0.04%)</title><rect x="75.1079%" y="1253" width="0.0442%" height="15" fill="rgb(232,65,17)" fg:x="88417" fg:w="52"/><text x="75.3579%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (52 samples, 0.04%)</title><rect x="75.1079%" y="1237" width="0.0442%" height="15" fill="rgb(224,45,49)" fg:x="88417" fg:w="52"/><text x="75.3579%" y="1247.50"></text></g><g><title>fdatasync (52 samples, 0.04%)</title><rect x="75.1079%" y="1221" width="0.0442%" height="15" fill="rgb(225,2,53)" fg:x="88417" fg:w="52"/><text x="75.3579%" y="1231.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="75.1079%" y="1205" width="0.0442%" height="15" fill="rgb(248,210,53)" fg:x="88417" fg:w="52"/><text x="75.3579%" y="1215.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="75.1079%" y="1189" width="0.0442%" height="15" fill="rgb(211,1,30)" fg:x="88417" fg:w="52"/><text x="75.3579%" y="1199.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="75.1079%" y="1173" width="0.0442%" height="15" fill="rgb(224,96,15)" fg:x="88417" fg:w="52"/><text x="75.3579%" y="1183.50"></text></g><g><title>[[ext4]] (52 samples, 0.04%)</title><rect x="75.1079%" y="1157" width="0.0442%" height="15" fill="rgb(252,45,11)" fg:x="88417" fg:w="52"/><text x="75.3579%" y="1167.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="75.1087%" y="1141" width="0.0433%" height="15" fill="rgb(220,125,38)" fg:x="88418" fg:w="51"/><text x="75.3587%" y="1151.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="75.1087%" y="1125" width="0.0433%" height="15" fill="rgb(243,161,33)" fg:x="88418" fg:w="51"/><text x="75.3587%" y="1135.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="75.1087%" y="1109" width="0.0433%" height="15" fill="rgb(248,197,34)" fg:x="88418" fg:w="51"/><text x="75.3587%" y="1119.50"></text></g><g><title>[unknown] (50 samples, 0.04%)</title><rect x="75.1096%" y="1093" width="0.0425%" height="15" fill="rgb(228,165,23)" fg:x="88419" fg:w="50"/><text x="75.3596%" y="1103.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (123 samples, 0.10%)</title><rect x="75.3296%" y="1205" width="0.1045%" height="15" fill="rgb(236,94,38)" fg:x="88678" fg:w="123"/><text x="75.5796%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (250 samples, 0.21%)</title><rect x="75.2234%" y="1221" width="0.2124%" height="15" fill="rgb(220,13,23)" fg:x="88553" fg:w="250"/><text x="75.4734%" y="1231.50"></text></g><g><title>leveldb::Slice::operator[] (15 samples, 0.01%)</title><rect x="75.4451%" y="1221" width="0.0127%" height="15" fill="rgb(234,26,39)" fg:x="88814" fg:w="15"/><text x="75.6951%" y="1231.50"></text></g><g><title>leveldb::TableBuilder::Add (20 samples, 0.02%)</title><rect x="75.4596%" y="1221" width="0.0170%" height="15" fill="rgb(205,117,44)" fg:x="88831" fg:w="20"/><text x="75.7096%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.01%)</title><rect x="75.4817%" y="1205" width="0.0110%" height="15" fill="rgb(250,42,2)" fg:x="88857" fg:w="13"/><text x="75.7317%" y="1215.50"></text></g><g><title>leveldb::operator== (19 samples, 0.02%)</title><rect x="75.4817%" y="1221" width="0.0161%" height="15" fill="rgb(223,83,14)" fg:x="88857" fg:w="19"/><text x="75.7317%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (23 samples, 0.02%)</title><rect x="75.4978%" y="1205" width="0.0195%" height="15" fill="rgb(241,147,50)" fg:x="88876" fg:w="23"/><text x="75.7478%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (28 samples, 0.02%)</title><rect x="75.4978%" y="1221" width="0.0238%" height="15" fill="rgb(218,90,6)" fg:x="88876" fg:w="28"/><text x="75.7478%" y="1231.50"></text></g><g><title>leveldb::BlockBuilder::Add (404 samples, 0.34%)</title><rect x="75.1801%" y="1237" width="0.3432%" height="15" fill="rgb(210,191,5)" fg:x="88502" fg:w="404"/><text x="75.4301%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (19 samples, 0.02%)</title><rect x="75.5725%" y="1173" width="0.0161%" height="15" fill="rgb(225,139,19)" fg:x="88964" fg:w="19"/><text x="75.8225%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (38 samples, 0.03%)</title><rect x="75.5725%" y="1189" width="0.0323%" height="15" fill="rgb(210,1,33)" fg:x="88964" fg:w="38"/><text x="75.8225%" y="1199.50"></text></g><g><title>leveldb::Hash (19 samples, 0.02%)</title><rect x="75.5887%" y="1173" width="0.0161%" height="15" fill="rgb(213,50,3)" fg:x="88983" fg:w="19"/><text x="75.8387%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (68 samples, 0.06%)</title><rect x="75.5479%" y="1205" width="0.0578%" height="15" fill="rgb(234,227,4)" fg:x="88935" fg:w="68"/><text x="75.7979%" y="1215.50"></text></g><g><title>leveldb::Hash (34 samples, 0.03%)</title><rect x="75.6065%" y="1205" width="0.0289%" height="15" fill="rgb(246,63,5)" fg:x="89004" fg:w="34"/><text x="75.8565%" y="1215.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (111 samples, 0.09%)</title><rect x="75.5445%" y="1221" width="0.0943%" height="15" fill="rgb(245,136,27)" fg:x="88931" fg:w="111"/><text x="75.7945%" y="1231.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (114 samples, 0.10%)</title><rect x="75.5445%" y="1237" width="0.0968%" height="15" fill="rgb(247,199,27)" fg:x="88931" fg:w="114"/><text x="75.7945%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (34 samples, 0.03%)</title><rect x="75.6414%" y="1237" width="0.0289%" height="15" fill="rgb(252,158,49)" fg:x="89045" fg:w="34"/><text x="75.8914%" y="1247.50"></text></g><g><title>leveldb::PutVarint32 (30 samples, 0.03%)</title><rect x="75.6813%" y="1237" width="0.0255%" height="15" fill="rgb(254,73,1)" fg:x="89092" fg:w="30"/><text x="75.9313%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (14 samples, 0.01%)</title><rect x="75.6949%" y="1221" width="0.0119%" height="15" fill="rgb(248,93,19)" fg:x="89108" fg:w="14"/><text x="75.9449%" y="1231.50"></text></g><g><title>[[ext4]] (20 samples, 0.02%)</title><rect x="75.7382%" y="1013" width="0.0170%" height="15" fill="rgb(206,67,5)" fg:x="89159" fg:w="20"/><text x="75.9882%" y="1023.50"></text></g><g><title>[[ext4]] (25 samples, 0.02%)</title><rect x="75.7365%" y="1029" width="0.0212%" height="15" fill="rgb(209,210,4)" fg:x="89157" fg:w="25"/><text x="75.9865%" y="1039.50"></text></g><g><title>[[ext4]] (42 samples, 0.04%)</title><rect x="75.7356%" y="1045" width="0.0357%" height="15" fill="rgb(214,185,36)" fg:x="89156" fg:w="42"/><text x="75.9856%" y="1055.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="75.7577%" y="1029" width="0.0136%" height="15" fill="rgb(233,191,26)" fg:x="89182" fg:w="16"/><text x="76.0077%" y="1039.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="75.7577%" y="1013" width="0.0136%" height="15" fill="rgb(248,94,17)" fg:x="89182" fg:w="16"/><text x="76.0077%" y="1023.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="75.7594%" y="997" width="0.0119%" height="15" fill="rgb(250,64,4)" fg:x="89184" fg:w="14"/><text x="76.0094%" y="1007.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="75.7603%" y="981" width="0.0110%" height="15" fill="rgb(218,41,53)" fg:x="89185" fg:w="13"/><text x="76.0103%" y="991.50"></text></g><g><title>[[ext4]] (130 samples, 0.11%)</title><rect x="75.7271%" y="1061" width="0.1104%" height="15" fill="rgb(251,176,28)" fg:x="89146" fg:w="130"/><text x="75.9771%" y="1071.50"></text></g><g><title>[unknown] (78 samples, 0.07%)</title><rect x="75.7713%" y="1045" width="0.0663%" height="15" fill="rgb(247,22,9)" fg:x="89198" fg:w="78"/><text x="76.0213%" y="1055.50"></text></g><g><title>[unknown] (74 samples, 0.06%)</title><rect x="75.7747%" y="1029" width="0.0629%" height="15" fill="rgb(218,201,14)" fg:x="89202" fg:w="74"/><text x="76.0247%" y="1039.50"></text></g><g><title>[unknown] (62 samples, 0.05%)</title><rect x="75.7849%" y="1013" width="0.0527%" height="15" fill="rgb(218,94,10)" fg:x="89214" fg:w="62"/><text x="76.0349%" y="1023.50"></text></g><g><title>[unknown] (49 samples, 0.04%)</title><rect x="75.7960%" y="997" width="0.0416%" height="15" fill="rgb(222,183,52)" fg:x="89227" fg:w="49"/><text x="76.0460%" y="1007.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="75.8112%" y="981" width="0.0263%" height="15" fill="rgb(242,140,25)" fg:x="89245" fg:w="31"/><text x="76.0612%" y="991.50"></text></g><g><title>[[ext4]] (155 samples, 0.13%)</title><rect x="75.7246%" y="1093" width="0.1317%" height="15" fill="rgb(235,197,38)" fg:x="89143" fg:w="155"/><text x="75.9746%" y="1103.50"></text></g><g><title>[unknown] (153 samples, 0.13%)</title><rect x="75.7263%" y="1077" width="0.1300%" height="15" fill="rgb(237,136,15)" fg:x="89145" fg:w="153"/><text x="75.9763%" y="1087.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="75.8376%" y="1061" width="0.0187%" height="15" fill="rgb(223,44,49)" fg:x="89276" fg:w="22"/><text x="76.0876%" y="1071.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="75.8427%" y="1045" width="0.0136%" height="15" fill="rgb(227,71,15)" fg:x="89282" fg:w="16"/><text x="76.0927%" y="1055.50"></text></g><g><title>Flush (173 samples, 0.15%)</title><rect x="75.7144%" y="1221" width="0.1470%" height="15" fill="rgb(225,153,20)" fg:x="89131" fg:w="173"/><text x="75.9644%" y="1231.50"></text></g><g><title>FlushBuffer (173 samples, 0.15%)</title><rect x="75.7144%" y="1205" width="0.1470%" height="15" fill="rgb(210,190,26)" fg:x="89131" fg:w="173"/><text x="75.9644%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (173 samples, 0.15%)</title><rect x="75.7144%" y="1189" width="0.1470%" height="15" fill="rgb(223,147,5)" fg:x="89131" fg:w="173"/><text x="75.9644%" y="1199.50"></text></g><g><title>__GI___libc_write (173 samples, 0.15%)</title><rect x="75.7144%" y="1173" width="0.1470%" height="15" fill="rgb(207,14,23)" fg:x="89131" fg:w="173"/><text x="75.9644%" y="1183.50"></text></g><g><title>[unknown] (172 samples, 0.15%)</title><rect x="75.7153%" y="1157" width="0.1461%" height="15" fill="rgb(211,195,53)" fg:x="89132" fg:w="172"/><text x="75.9653%" y="1167.50"></text></g><g><title>[unknown] (171 samples, 0.15%)</title><rect x="75.7161%" y="1141" width="0.1453%" height="15" fill="rgb(237,75,46)" fg:x="89133" fg:w="171"/><text x="75.9661%" y="1151.50"></text></g><g><title>[unknown] (171 samples, 0.15%)</title><rect x="75.7161%" y="1125" width="0.1453%" height="15" fill="rgb(254,55,14)" fg:x="89133" fg:w="171"/><text x="75.9661%" y="1135.50"></text></g><g><title>[unknown] (169 samples, 0.14%)</title><rect x="75.7178%" y="1109" width="0.1436%" height="15" fill="rgb(230,185,30)" fg:x="89135" fg:w="169"/><text x="75.9678%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::Flush (183 samples, 0.16%)</title><rect x="75.7144%" y="1237" width="0.1555%" height="15" fill="rgb(220,14,11)" fg:x="89131" fg:w="183"/><text x="75.9644%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::Add (822 samples, 0.70%)</title><rect x="75.1758%" y="1253" width="0.6983%" height="15" fill="rgb(215,169,44)" fg:x="88497" fg:w="822"/><text x="75.4258%" y="1263.50"></text></g><g><title>leveldb::BuildTable (906 samples, 0.77%)</title><rect x="75.1079%" y="1269" width="0.7696%" height="15" fill="rgb(253,203,20)" fg:x="88417" fg:w="906"/><text x="75.3579%" y="1279.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (907 samples, 0.77%)</title><rect x="75.1079%" y="1285" width="0.7705%" height="15" fill="rgb(229,225,17)" fg:x="88417" fg:w="907"/><text x="75.3579%" y="1295.50"></text></g><g><title>leveldb::DBImpl::CompactMemTable (969 samples, 0.82%)</title><rect x="75.0629%" y="1301" width="0.8231%" height="15" fill="rgb(236,76,26)" fg:x="88364" fg:w="969"/><text x="75.3129%" y="1311.50"></text></g><g><title>leveldb::DBImpl::CompactionState::current_output (15 samples, 0.01%)</title><rect x="76.2326%" y="1285" width="0.0127%" height="15" fill="rgb(234,15,30)" fg:x="89741" fg:w="15"/><text x="76.4826%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (19 samples, 0.02%)</title><rect x="76.2513%" y="1237" width="0.0161%" height="15" fill="rgb(211,113,48)" fg:x="89763" fg:w="19"/><text x="76.5013%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (23 samples, 0.02%)</title><rect x="76.2759%" y="1237" width="0.0195%" height="15" fill="rgb(221,31,36)" fg:x="89792" fg:w="23"/><text x="76.5259%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (20 samples, 0.02%)</title><rect x="76.2785%" y="1221" width="0.0170%" height="15" fill="rgb(215,118,52)" fg:x="89795" fg:w="20"/><text x="76.5285%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (20 samples, 0.02%)</title><rect x="76.2785%" y="1205" width="0.0170%" height="15" fill="rgb(241,151,27)" fg:x="89795" fg:w="20"/><text x="76.5285%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (72 samples, 0.06%)</title><rect x="76.2470%" y="1253" width="0.0612%" height="15" fill="rgb(253,51,3)" fg:x="89758" fg:w="72"/><text x="76.4970%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (15 samples, 0.01%)</title><rect x="76.2954%" y="1237" width="0.0127%" height="15" fill="rgb(216,201,24)" fg:x="89815" fg:w="15"/><text x="76.5454%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (13 samples, 0.01%)</title><rect x="76.2971%" y="1221" width="0.0110%" height="15" fill="rgb(231,107,4)" fg:x="89817" fg:w="13"/><text x="76.5471%" y="1231.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (77 samples, 0.07%)</title><rect x="76.2470%" y="1285" width="0.0654%" height="15" fill="rgb(243,97,54)" fg:x="89758" fg:w="77"/><text x="76.4970%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (77 samples, 0.07%)</title><rect x="76.2470%" y="1269" width="0.0654%" height="15" fill="rgb(221,32,51)" fg:x="89758" fg:w="77"/><text x="76.4970%" y="1279.50"></text></g><g><title>leveldb::ParseInternalKey (22 samples, 0.02%)</title><rect x="76.3124%" y="1285" width="0.0187%" height="15" fill="rgb(218,171,35)" fg:x="89835" fg:w="22"/><text x="76.5624%" y="1295.50"></text></g><g><title>leveldb::Slice::Slice (16 samples, 0.01%)</title><rect x="76.3311%" y="1285" width="0.0136%" height="15" fill="rgb(214,20,53)" fg:x="89857" fg:w="16"/><text x="76.5811%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (25 samples, 0.02%)</title><rect x="76.3829%" y="1253" width="0.0212%" height="15" fill="rgb(239,9,52)" fg:x="89918" fg:w="25"/><text x="76.6329%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (21 samples, 0.02%)</title><rect x="76.4042%" y="1253" width="0.0178%" height="15" fill="rgb(215,114,45)" fg:x="89943" fg:w="21"/><text x="76.6542%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (26 samples, 0.02%)</title><rect x="76.4220%" y="1253" width="0.0221%" height="15" fill="rgb(208,118,9)" fg:x="89964" fg:w="26"/><text x="76.6720%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (18 samples, 0.02%)</title><rect x="76.4288%" y="1237" width="0.0153%" height="15" fill="rgb(235,7,39)" fg:x="89972" fg:w="18"/><text x="76.6788%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (18 samples, 0.02%)</title><rect x="76.4288%" y="1221" width="0.0153%" height="15" fill="rgb(243,225,15)" fg:x="89972" fg:w="18"/><text x="76.6788%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (133 samples, 0.11%)</title><rect x="76.3583%" y="1269" width="0.1130%" height="15" fill="rgb(225,216,18)" fg:x="89889" fg:w="133"/><text x="76.6083%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (32 samples, 0.03%)</title><rect x="76.4441%" y="1253" width="0.0272%" height="15" fill="rgb(233,36,38)" fg:x="89990" fg:w="32"/><text x="76.6941%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (24 samples, 0.02%)</title><rect x="76.4509%" y="1237" width="0.0204%" height="15" fill="rgb(239,88,23)" fg:x="89998" fg:w="24"/><text x="76.7009%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (144 samples, 0.12%)</title><rect x="76.3583%" y="1285" width="0.1223%" height="15" fill="rgb(219,181,35)" fg:x="89889" fg:w="144"/><text x="76.6083%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (704 samples, 0.60%)</title><rect x="75.8860%" y="1301" width="0.5980%" height="15" fill="rgb(215,18,46)" fg:x="89333" fg:w="704"/><text x="76.1360%" y="1311.50"></text></g><g><title>[[ext4]] (20 samples, 0.02%)</title><rect x="76.8569%" y="1013" width="0.0170%" height="15" fill="rgb(241,38,11)" fg:x="90476" fg:w="20"/><text x="77.1069%" y="1023.50"></text></g><g><title>[[ext4]] (27 samples, 0.02%)</title><rect x="76.8536%" y="1029" width="0.0229%" height="15" fill="rgb(248,169,45)" fg:x="90472" fg:w="27"/><text x="77.1036%" y="1039.50"></text></g><g><title>[[nvme]] (20 samples, 0.02%)</title><rect x="77.2689%" y="933" width="0.0170%" height="15" fill="rgb(239,50,49)" fg:x="90961" fg:w="20"/><text x="77.5189%" y="943.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="77.2689%" y="917" width="0.0170%" height="15" fill="rgb(231,96,31)" fg:x="90961" fg:w="20"/><text x="77.5189%" y="927.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="77.2715%" y="901" width="0.0144%" height="15" fill="rgb(224,193,37)" fg:x="90964" fg:w="17"/><text x="77.5215%" y="911.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="77.2723%" y="885" width="0.0136%" height="15" fill="rgb(227,153,50)" fg:x="90965" fg:w="16"/><text x="77.5223%" y="895.50"></text></g><g><title>[[nvme]] (22 samples, 0.02%)</title><rect x="77.2681%" y="949" width="0.0187%" height="15" fill="rgb(249,228,3)" fg:x="90960" fg:w="22"/><text x="77.5181%" y="959.50"></text></g><g><title>[[ext4]] (641 samples, 0.54%)</title><rect x="76.7661%" y="1045" width="0.5445%" height="15" fill="rgb(219,164,43)" fg:x="90369" fg:w="641"/><text x="77.0161%" y="1055.50"></text></g><g><title>[unknown] (511 samples, 0.43%)</title><rect x="76.8765%" y="1029" width="0.4341%" height="15" fill="rgb(216,45,41)" fg:x="90499" fg:w="511"/><text x="77.1265%" y="1039.50"></text></g><g><title>[unknown] (296 samples, 0.25%)</title><rect x="77.0591%" y="1013" width="0.2514%" height="15" fill="rgb(210,226,51)" fg:x="90714" fg:w="296"/><text x="77.3091%" y="1023.50"></text></g><g><title>[unknown] (110 samples, 0.09%)</title><rect x="77.2171%" y="997" width="0.0934%" height="15" fill="rgb(209,117,49)" fg:x="90900" fg:w="110"/><text x="77.4671%" y="1007.50"></text></g><g><title>[unknown] (75 samples, 0.06%)</title><rect x="77.2469%" y="981" width="0.0637%" height="15" fill="rgb(206,196,24)" fg:x="90935" fg:w="75"/><text x="77.4969%" y="991.50"></text></g><g><title>[unknown] (61 samples, 0.05%)</title><rect x="77.2587%" y="965" width="0.0518%" height="15" fill="rgb(253,218,3)" fg:x="90949" fg:w="61"/><text x="77.5087%" y="975.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="77.2868%" y="949" width="0.0238%" height="15" fill="rgb(252,166,2)" fg:x="90982" fg:w="28"/><text x="77.5368%" y="959.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="77.2902%" y="933" width="0.0204%" height="15" fill="rgb(236,218,26)" fg:x="90986" fg:w="24"/><text x="77.5402%" y="943.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="77.2961%" y="917" width="0.0144%" height="15" fill="rgb(254,84,19)" fg:x="90993" fg:w="17"/><text x="77.5461%" y="927.50"></text></g><g><title>[[ext4]] (933 samples, 0.79%)</title><rect x="76.7091%" y="1061" width="0.7926%" height="15" fill="rgb(219,137,29)" fg:x="90302" fg:w="933"/><text x="76.9591%" y="1071.50"></text></g><g><title>[unknown] (225 samples, 0.19%)</title><rect x="77.3106%" y="1045" width="0.1911%" height="15" fill="rgb(227,47,52)" fg:x="91010" fg:w="225"/><text x="77.5606%" y="1055.50"></text></g><g><title>[unknown] (141 samples, 0.12%)</title><rect x="77.3819%" y="1029" width="0.1198%" height="15" fill="rgb(229,167,24)" fg:x="91094" fg:w="141"/><text x="77.6319%" y="1039.50"></text></g><g><title>[unknown] (59 samples, 0.05%)</title><rect x="77.4516%" y="1013" width="0.0501%" height="15" fill="rgb(233,164,1)" fg:x="91176" fg:w="59"/><text x="77.7016%" y="1023.50"></text></g><g><title>[unknown] (49 samples, 0.04%)</title><rect x="77.4601%" y="997" width="0.0416%" height="15" fill="rgb(218,88,48)" fg:x="91186" fg:w="49"/><text x="77.7101%" y="1007.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="77.4805%" y="981" width="0.0212%" height="15" fill="rgb(226,214,24)" fg:x="91210" fg:w="25"/><text x="77.7305%" y="991.50"></text></g><g><title>[[nvme]] (94 samples, 0.08%)</title><rect x="77.6733%" y="965" width="0.0799%" height="15" fill="rgb(233,29,12)" fg:x="91437" fg:w="94"/><text x="77.9233%" y="975.50"></text></g><g><title>[unknown] (89 samples, 0.08%)</title><rect x="77.6775%" y="949" width="0.0756%" height="15" fill="rgb(219,120,34)" fg:x="91442" fg:w="89"/><text x="77.9275%" y="959.50"></text></g><g><title>[unknown] (79 samples, 0.07%)</title><rect x="77.6860%" y="933" width="0.0671%" height="15" fill="rgb(226,78,44)" fg:x="91452" fg:w="79"/><text x="77.9360%" y="943.50"></text></g><g><title>[unknown] (72 samples, 0.06%)</title><rect x="77.6920%" y="917" width="0.0612%" height="15" fill="rgb(240,15,48)" fg:x="91459" fg:w="72"/><text x="77.9420%" y="927.50"></text></g><g><title>[unknown] (63 samples, 0.05%)</title><rect x="77.6996%" y="901" width="0.0535%" height="15" fill="rgb(253,176,7)" fg:x="91468" fg:w="63"/><text x="77.9496%" y="911.50"></text></g><g><title>[unknown] (50 samples, 0.04%)</title><rect x="77.7107%" y="885" width="0.0425%" height="15" fill="rgb(206,166,28)" fg:x="91481" fg:w="50"/><text x="77.9607%" y="895.50"></text></g><g><title>[unknown] (48 samples, 0.04%)</title><rect x="77.7124%" y="869" width="0.0408%" height="15" fill="rgb(241,53,51)" fg:x="91483" fg:w="48"/><text x="77.9624%" y="879.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="77.7421%" y="853" width="0.0110%" height="15" fill="rgb(249,112,30)" fg:x="91518" fg:w="13"/><text x="77.9921%" y="863.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="77.7429%" y="837" width="0.0102%" height="15" fill="rgb(217,85,30)" fg:x="91519" fg:w="12"/><text x="77.9929%" y="847.50"></text></g><g><title>[[nvme]] (97 samples, 0.08%)</title><rect x="77.6716%" y="981" width="0.0824%" height="15" fill="rgb(233,49,7)" fg:x="91435" fg:w="97"/><text x="77.9216%" y="991.50"></text></g><g><title>[[ext4]] (1,435 samples, 1.22%)</title><rect x="76.5707%" y="1077" width="1.2190%" height="15" fill="rgb(234,109,9)" fg:x="90139" fg:w="1435"/><text x="76.8207%" y="1087.50"></text></g><g><title>[unknown] (339 samples, 0.29%)</title><rect x="77.5017%" y="1061" width="0.2880%" height="15" fill="rgb(253,95,22)" fg:x="91235" fg:w="339"/><text x="77.7517%" y="1071.50"></text></g><g><title>[unknown] (246 samples, 0.21%)</title><rect x="77.5807%" y="1045" width="0.2090%" height="15" fill="rgb(233,176,25)" fg:x="91328" fg:w="246"/><text x="77.8307%" y="1055.50"></text></g><g><title>[unknown] (201 samples, 0.17%)</title><rect x="77.6189%" y="1029" width="0.1707%" height="15" fill="rgb(236,33,39)" fg:x="91373" fg:w="201"/><text x="77.8689%" y="1039.50"></text></g><g><title>[unknown] (192 samples, 0.16%)</title><rect x="77.6266%" y="1013" width="0.1631%" height="15" fill="rgb(223,226,42)" fg:x="91382" fg:w="192"/><text x="77.8766%" y="1023.50"></text></g><g><title>[unknown] (187 samples, 0.16%)</title><rect x="77.6308%" y="997" width="0.1589%" height="15" fill="rgb(216,99,33)" fg:x="91387" fg:w="187"/><text x="77.8808%" y="1007.50"></text></g><g><title>[unknown] (42 samples, 0.04%)</title><rect x="77.7540%" y="981" width="0.0357%" height="15" fill="rgb(235,84,23)" fg:x="91532" fg:w="42"/><text x="78.0040%" y="991.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="77.7786%" y="965" width="0.0110%" height="15" fill="rgb(232,2,27)" fg:x="91561" fg:w="13"/><text x="78.0286%" y="975.50"></text></g><g><title>[[ext4]] (1,467 samples, 1.25%)</title><rect x="76.5707%" y="1109" width="1.2462%" height="15" fill="rgb(241,23,22)" fg:x="90139" fg:w="1467"/><text x="76.8207%" y="1119.50"></text></g><g><title>[[ext4]] (1,467 samples, 1.25%)</title><rect x="76.5707%" y="1093" width="1.2462%" height="15" fill="rgb(211,73,27)" fg:x="90139" fg:w="1467"/><text x="76.8207%" y="1103.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="77.7905%" y="1077" width="0.0263%" height="15" fill="rgb(235,109,49)" fg:x="91575" fg:w="31"/><text x="78.0405%" y="1087.50"></text></g><g><title>Sync (1,913 samples, 1.63%)</title><rect x="76.4840%" y="1285" width="1.6250%" height="15" fill="rgb(230,99,29)" fg:x="90037" fg:w="1913"/><text x="76.7340%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1,911 samples, 1.62%)</title><rect x="76.4857%" y="1269" width="1.6233%" height="15" fill="rgb(245,199,7)" fg:x="90039" fg:w="1911"/><text x="76.7357%" y="1279.50"></text></g><g><title>fdatasync (1,911 samples, 1.62%)</title><rect x="76.4857%" y="1253" width="1.6233%" height="15" fill="rgb(217,179,10)" fg:x="90039" fg:w="1911"/><text x="76.7357%" y="1263.50"></text></g><g><title>[unknown] (1,911 samples, 1.62%)</title><rect x="76.4857%" y="1237" width="1.6233%" height="15" fill="rgb(254,99,47)" fg:x="90039" fg:w="1911"/><text x="76.7357%" y="1247.50"></text></g><g><title>[unknown] (1,911 samples, 1.62%)</title><rect x="76.4857%" y="1221" width="1.6233%" height="15" fill="rgb(251,121,7)" fg:x="90039" fg:w="1911"/><text x="76.7357%" y="1231.50"></text></g><g><title>[unknown] (1,911 samples, 1.62%)</title><rect x="76.4857%" y="1205" width="1.6233%" height="15" fill="rgb(250,177,26)" fg:x="90039" fg:w="1911"/><text x="76.7357%" y="1215.50"></text></g><g><title>[[ext4]] (1,911 samples, 1.62%)</title><rect x="76.4857%" y="1189" width="1.6233%" height="15" fill="rgb(232,88,15)" fg:x="90039" fg:w="1911"/><text x="76.7357%" y="1199.50"></text></g><g><title>[unknown] (1,908 samples, 1.62%)</title><rect x="76.4883%" y="1173" width="1.6208%" height="15" fill="rgb(251,54,54)" fg:x="90042" fg:w="1908"/><text x="76.7383%" y="1183.50"></text></g><g><title>[unknown] (1,908 samples, 1.62%)</title><rect x="76.4883%" y="1157" width="1.6208%" height="15" fill="rgb(208,177,15)" fg:x="90042" fg:w="1908"/><text x="76.7383%" y="1167.50"></text></g><g><title>[unknown] (1,899 samples, 1.61%)</title><rect x="76.4959%" y="1141" width="1.6131%" height="15" fill="rgb(205,97,32)" fg:x="90051" fg:w="1899"/><text x="76.7459%" y="1151.50"></text></g><g><title>[unknown] (1,857 samples, 1.58%)</title><rect x="76.5316%" y="1125" width="1.5775%" height="15" fill="rgb(217,192,13)" fg:x="90093" fg:w="1857"/><text x="76.7816%" y="1135.50"></text></g><g><title>[unknown] (344 samples, 0.29%)</title><rect x="77.8169%" y="1109" width="0.2922%" height="15" fill="rgb(215,163,41)" fg:x="91606" fg:w="344"/><text x="78.0669%" y="1119.50"></text></g><g><title>[unknown] (336 samples, 0.29%)</title><rect x="77.8236%" y="1093" width="0.2854%" height="15" fill="rgb(246,83,29)" fg:x="91614" fg:w="336"/><text x="78.0736%" y="1103.50"></text></g><g><title>[unknown] (336 samples, 0.29%)</title><rect x="77.8236%" y="1077" width="0.2854%" height="15" fill="rgb(219,2,45)" fg:x="91614" fg:w="336"/><text x="78.0736%" y="1087.50"></text></g><g><title>[unknown] (313 samples, 0.27%)</title><rect x="77.8432%" y="1061" width="0.2659%" height="15" fill="rgb(242,215,33)" fg:x="91637" fg:w="313"/><text x="78.0932%" y="1071.50"></text></g><g><title>[unknown] (247 samples, 0.21%)</title><rect x="77.8993%" y="1045" width="0.2098%" height="15" fill="rgb(217,1,6)" fg:x="91703" fg:w="247"/><text x="78.1493%" y="1055.50"></text></g><g><title>[unknown] (160 samples, 0.14%)</title><rect x="77.9732%" y="1029" width="0.1359%" height="15" fill="rgb(207,85,52)" fg:x="91790" fg:w="160"/><text x="78.2232%" y="1039.50"></text></g><g><title>[unknown] (95 samples, 0.08%)</title><rect x="78.0284%" y="1013" width="0.0807%" height="15" fill="rgb(231,171,19)" fg:x="91855" fg:w="95"/><text x="78.2784%" y="1023.50"></text></g><g><title>[unknown] (58 samples, 0.05%)</title><rect x="78.0598%" y="997" width="0.0493%" height="15" fill="rgb(207,128,4)" fg:x="91892" fg:w="58"/><text x="78.3098%" y="1007.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="78.0759%" y="981" width="0.0331%" height="15" fill="rgb(219,208,4)" fg:x="91911" fg:w="39"/><text x="78.3259%" y="991.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="78.0819%" y="965" width="0.0272%" height="15" fill="rgb(235,161,42)" fg:x="91918" fg:w="32"/><text x="78.3319%" y="975.50"></text></g><g><title>leveldb::FilterBlockBuilder::Finish (19 samples, 0.02%)</title><rect x="78.1125%" y="1269" width="0.0161%" height="15" fill="rgb(247,218,18)" fg:x="91954" fg:w="19"/><text x="78.3625%" y="1279.50"></text></g><g><title>leveldb::PutFixed32 (17 samples, 0.01%)</title><rect x="78.1142%" y="1253" width="0.0144%" height="15" fill="rgb(232,114,51)" fg:x="91956" fg:w="17"/><text x="78.3642%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (12 samples, 0.01%)</title><rect x="78.1184%" y="1237" width="0.0102%" height="15" fill="rgb(222,95,3)" fg:x="91961" fg:w="12"/><text x="78.3684%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (12 samples, 0.01%)</title><rect x="78.1184%" y="1221" width="0.0102%" height="15" fill="rgb(240,65,29)" fg:x="91961" fg:w="12"/><text x="78.3684%" y="1231.50"></text></g><g><title>FlushBuffer (13 samples, 0.01%)</title><rect x="78.1312%" y="1221" width="0.0110%" height="15" fill="rgb(249,209,20)" fg:x="91976" fg:w="13"/><text x="78.3812%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (13 samples, 0.01%)</title><rect x="78.1312%" y="1205" width="0.0110%" height="15" fill="rgb(241,48,37)" fg:x="91976" fg:w="13"/><text x="78.3812%" y="1215.50"></text></g><g><title>__GI___libc_write (13 samples, 0.01%)</title><rect x="78.1312%" y="1189" width="0.0110%" height="15" fill="rgb(230,140,42)" fg:x="91976" fg:w="13"/><text x="78.3812%" y="1199.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="78.1312%" y="1173" width="0.0110%" height="15" fill="rgb(230,176,45)" fg:x="91976" fg:w="13"/><text x="78.3812%" y="1183.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="78.1312%" y="1157" width="0.0110%" height="15" fill="rgb(245,112,21)" fg:x="91976" fg:w="13"/><text x="78.3812%" y="1167.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="78.1312%" y="1141" width="0.0110%" height="15" fill="rgb(207,183,35)" fg:x="91976" fg:w="13"/><text x="78.3812%" y="1151.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="78.1312%" y="1125" width="0.0110%" height="15" fill="rgb(227,44,33)" fg:x="91976" fg:w="13"/><text x="78.3812%" y="1135.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="78.1312%" y="1109" width="0.0110%" height="15" fill="rgb(246,120,21)" fg:x="91976" fg:w="13"/><text x="78.3812%" y="1119.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="78.1312%" y="1093" width="0.0110%" height="15" fill="rgb(235,57,52)" fg:x="91976" fg:w="13"/><text x="78.3812%" y="1103.50"></text></g><g><title>[[ext4]] (12 samples, 0.01%)</title><rect x="78.1431%" y="1077" width="0.0102%" height="15" fill="rgb(238,84,10)" fg:x="91990" fg:w="12"/><text x="78.3931%" y="1087.50"></text></g><g><title>[[ext4]] (34 samples, 0.03%)</title><rect x="78.1422%" y="1093" width="0.0289%" height="15" fill="rgb(251,200,32)" fg:x="91989" fg:w="34"/><text x="78.3922%" y="1103.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="78.1532%" y="1077" width="0.0178%" height="15" fill="rgb(247,159,13)" fg:x="92002" fg:w="21"/><text x="78.4032%" y="1087.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="78.1541%" y="1061" width="0.0170%" height="15" fill="rgb(238,64,4)" fg:x="92003" fg:w="20"/><text x="78.4041%" y="1071.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="78.1549%" y="1045" width="0.0161%" height="15" fill="rgb(221,131,51)" fg:x="92004" fg:w="19"/><text x="78.4049%" y="1055.50"></text></g><g><title>Append (50 samples, 0.04%)</title><rect x="78.1312%" y="1237" width="0.0425%" height="15" fill="rgb(242,5,29)" fg:x="91976" fg:w="50"/><text x="78.3812%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (37 samples, 0.03%)</title><rect x="78.1422%" y="1221" width="0.0314%" height="15" fill="rgb(214,130,32)" fg:x="91989" fg:w="37"/><text x="78.3922%" y="1231.50"></text></g><g><title>__GI___libc_write (37 samples, 0.03%)</title><rect x="78.1422%" y="1205" width="0.0314%" height="15" fill="rgb(244,210,16)" fg:x="91989" fg:w="37"/><text x="78.3922%" y="1215.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="78.1422%" y="1189" width="0.0314%" height="15" fill="rgb(234,48,26)" fg:x="91989" fg:w="37"/><text x="78.3922%" y="1199.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="78.1422%" y="1173" width="0.0314%" height="15" fill="rgb(231,82,38)" fg:x="91989" fg:w="37"/><text x="78.3922%" y="1183.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="78.1422%" y="1157" width="0.0314%" height="15" fill="rgb(254,128,41)" fg:x="91989" fg:w="37"/><text x="78.3922%" y="1167.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="78.1422%" y="1141" width="0.0314%" height="15" fill="rgb(212,73,49)" fg:x="91989" fg:w="37"/><text x="78.3922%" y="1151.50"></text></g><g><title>[[ext4]] (37 samples, 0.03%)</title><rect x="78.1422%" y="1125" width="0.0314%" height="15" fill="rgb(205,62,54)" fg:x="91989" fg:w="37"/><text x="78.3922%" y="1135.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="78.1422%" y="1109" width="0.0314%" height="15" fill="rgb(228,0,8)" fg:x="91989" fg:w="37"/><text x="78.3922%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (58 samples, 0.05%)</title><rect x="78.1295%" y="1269" width="0.0493%" height="15" fill="rgb(251,28,17)" fg:x="91974" fg:w="58"/><text x="78.3795%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (56 samples, 0.05%)</title><rect x="78.1312%" y="1253" width="0.0476%" height="15" fill="rgb(238,105,27)" fg:x="91976" fg:w="56"/><text x="78.3812%" y="1263.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="78.1906%" y="1077" width="0.0110%" height="15" fill="rgb(237,216,33)" fg:x="92046" fg:w="13"/><text x="78.4406%" y="1087.50"></text></g><g><title>[[ext4]] (24 samples, 0.02%)</title><rect x="78.1906%" y="1093" width="0.0204%" height="15" fill="rgb(229,228,25)" fg:x="92046" fg:w="24"/><text x="78.4406%" y="1103.50"></text></g><g><title>[[ext4]] (102 samples, 0.09%)</title><rect x="78.1864%" y="1109" width="0.0866%" height="15" fill="rgb(233,75,23)" fg:x="92041" fg:w="102"/><text x="78.4364%" y="1119.50"></text></g><g><title>[unknown] (73 samples, 0.06%)</title><rect x="78.2110%" y="1093" width="0.0620%" height="15" fill="rgb(231,207,16)" fg:x="92070" fg:w="73"/><text x="78.4610%" y="1103.50"></text></g><g><title>[unknown] (70 samples, 0.06%)</title><rect x="78.2136%" y="1077" width="0.0595%" height="15" fill="rgb(231,191,45)" fg:x="92073" fg:w="70"/><text x="78.4636%" y="1087.50"></text></g><g><title>[unknown] (64 samples, 0.05%)</title><rect x="78.2187%" y="1061" width="0.0544%" height="15" fill="rgb(224,133,17)" fg:x="92079" fg:w="64"/><text x="78.4687%" y="1071.50"></text></g><g><title>[unknown] (40 samples, 0.03%)</title><rect x="78.2390%" y="1045" width="0.0340%" height="15" fill="rgb(209,178,27)" fg:x="92103" fg:w="40"/><text x="78.4890%" y="1055.50"></text></g><g><title>[unknown] (30 samples, 0.03%)</title><rect x="78.2475%" y="1029" width="0.0255%" height="15" fill="rgb(218,37,11)" fg:x="92113" fg:w="30"/><text x="78.4975%" y="1039.50"></text></g><g><title>__GI___libc_write (115 samples, 0.10%)</title><rect x="78.1855%" y="1221" width="0.0977%" height="15" fill="rgb(251,226,25)" fg:x="92040" fg:w="115"/><text x="78.4355%" y="1231.50"></text></g><g><title>[unknown] (115 samples, 0.10%)</title><rect x="78.1855%" y="1205" width="0.0977%" height="15" fill="rgb(209,222,27)" fg:x="92040" fg:w="115"/><text x="78.4355%" y="1215.50"></text></g><g><title>[unknown] (115 samples, 0.10%)</title><rect x="78.1855%" y="1189" width="0.0977%" height="15" fill="rgb(238,22,21)" fg:x="92040" fg:w="115"/><text x="78.4355%" y="1199.50"></text></g><g><title>[unknown] (115 samples, 0.10%)</title><rect x="78.1855%" y="1173" width="0.0977%" height="15" fill="rgb(233,161,25)" fg:x="92040" fg:w="115"/><text x="78.4355%" y="1183.50"></text></g><g><title>[unknown] (115 samples, 0.10%)</title><rect x="78.1855%" y="1157" width="0.0977%" height="15" fill="rgb(226,122,53)" fg:x="92040" fg:w="115"/><text x="78.4355%" y="1167.50"></text></g><g><title>[[ext4]] (115 samples, 0.10%)</title><rect x="78.1855%" y="1141" width="0.0977%" height="15" fill="rgb(220,123,17)" fg:x="92040" fg:w="115"/><text x="78.4355%" y="1151.50"></text></g><g><title>[unknown] (115 samples, 0.10%)</title><rect x="78.1855%" y="1125" width="0.0977%" height="15" fill="rgb(230,224,35)" fg:x="92040" fg:w="115"/><text x="78.4355%" y="1135.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="78.2730%" y="1109" width="0.0102%" height="15" fill="rgb(246,83,8)" fg:x="92143" fg:w="12"/><text x="78.5230%" y="1119.50"></text></g><g><title>Append (124 samples, 0.11%)</title><rect x="78.1787%" y="1253" width="0.1053%" height="15" fill="rgb(230,214,17)" fg:x="92032" fg:w="124"/><text x="78.4287%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (116 samples, 0.10%)</title><rect x="78.1855%" y="1237" width="0.0985%" height="15" fill="rgb(222,97,18)" fg:x="92040" fg:w="116"/><text x="78.4355%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::Finish (208 samples, 0.18%)</title><rect x="78.1116%" y="1285" width="0.1767%" height="15" fill="rgb(206,79,1)" fg:x="91953" fg:w="208"/><text x="78.3616%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (129 samples, 0.11%)</title><rect x="78.1787%" y="1269" width="0.1096%" height="15" fill="rgb(214,121,34)" fg:x="92032" fg:w="129"/><text x="78.4287%" y="1279.50"></text></g><g><title>leveldb::ReadBlock (12 samples, 0.01%)</title><rect x="78.2985%" y="1237" width="0.0102%" height="15" fill="rgb(249,199,46)" fg:x="92173" fg:w="12"/><text x="78.5485%" y="1247.50"></text></g><g><title>leveldb::crc32c::Value (12 samples, 0.01%)</title><rect x="78.2985%" y="1221" width="0.0102%" height="15" fill="rgb(214,222,46)" fg:x="92173" fg:w="12"/><text x="78.5485%" y="1231.50"></text></g><g><title>crc32c::ExtendSse42 (12 samples, 0.01%)</title><rect x="78.2985%" y="1205" width="0.0102%" height="15" fill="rgb(248,168,30)" fg:x="92173" fg:w="12"/><text x="78.5485%" y="1215.50"></text></g><g><title>_mm_crc32_u64 (16 samples, 0.01%)</title><rect x="78.3104%" y="1157" width="0.0136%" height="15" fill="rgb(226,14,28)" fg:x="92187" fg:w="16"/><text x="78.5604%" y="1167.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (2,168 samples, 1.84%)</title><rect x="76.4840%" y="1301" width="1.8417%" height="15" fill="rgb(253,123,1)" fg:x="90037" fg:w="2168"/><text x="76.7340%" y="1311.50">l..</text></g><g><title>leveldb::TableCache::NewIterator (44 samples, 0.04%)</title><rect x="78.2883%" y="1285" width="0.0374%" height="15" fill="rgb(225,24,42)" fg:x="92161" fg:w="44"/><text x="78.5383%" y="1295.50"></text></g><g><title>leveldb::TableCache::FindTable (44 samples, 0.04%)</title><rect x="78.2883%" y="1269" width="0.0374%" height="15" fill="rgb(216,161,37)" fg:x="92161" fg:w="44"/><text x="78.5383%" y="1279.50"></text></g><g><title>leveldb::Table::Open (33 samples, 0.03%)</title><rect x="78.2977%" y="1253" width="0.0280%" height="15" fill="rgb(251,164,26)" fg:x="92172" fg:w="33"/><text x="78.5477%" y="1263.50"></text></g><g><title>leveldb::Table::ReadMeta (20 samples, 0.02%)</title><rect x="78.3087%" y="1237" width="0.0170%" height="15" fill="rgb(219,177,3)" fg:x="92185" fg:w="20"/><text x="78.5587%" y="1247.50"></text></g><g><title>leveldb::Table::ReadFilter (20 samples, 0.02%)</title><rect x="78.3087%" y="1221" width="0.0170%" height="15" fill="rgb(222,65,0)" fg:x="92185" fg:w="20"/><text x="78.5587%" y="1231.50"></text></g><g><title>leveldb::ReadBlock (20 samples, 0.02%)</title><rect x="78.3087%" y="1205" width="0.0170%" height="15" fill="rgb(223,69,54)" fg:x="92185" fg:w="20"/><text x="78.5587%" y="1215.50"></text></g><g><title>leveldb::crc32c::Value (20 samples, 0.02%)</title><rect x="78.3087%" y="1189" width="0.0170%" height="15" fill="rgb(235,30,27)" fg:x="92185" fg:w="20"/><text x="78.5587%" y="1199.50"></text></g><g><title>crc32c::ExtendSse42 (20 samples, 0.02%)</title><rect x="78.3087%" y="1173" width="0.0170%" height="15" fill="rgb(220,183,50)" fg:x="92185" fg:w="20"/><text x="78.5587%" y="1183.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="78.3299%" y="1141" width="0.0110%" height="15" fill="rgb(248,198,15)" fg:x="92210" fg:w="13"/><text x="78.5799%" y="1151.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="78.3299%" y="1125" width="0.0110%" height="15" fill="rgb(222,211,4)" fg:x="92210" fg:w="13"/><text x="78.5799%" y="1135.50"></text></g><g><title>NewWritableFile (16 samples, 0.01%)</title><rect x="78.3291%" y="1285" width="0.0136%" height="15" fill="rgb(214,102,34)" fg:x="92209" fg:w="16"/><text x="78.5791%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (16 samples, 0.01%)</title><rect x="78.3291%" y="1269" width="0.0136%" height="15" fill="rgb(245,92,5)" fg:x="92209" fg:w="16"/><text x="78.5791%" y="1279.50"></text></g><g><title>__GI___libc_open (16 samples, 0.01%)</title><rect x="78.3291%" y="1253" width="0.0136%" height="15" fill="rgb(252,72,51)" fg:x="92209" fg:w="16"/><text x="78.5791%" y="1263.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="78.3291%" y="1237" width="0.0136%" height="15" fill="rgb(252,208,19)" fg:x="92209" fg:w="16"/><text x="78.5791%" y="1247.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="78.3291%" y="1221" width="0.0136%" height="15" fill="rgb(211,69,7)" fg:x="92209" fg:w="16"/><text x="78.5791%" y="1231.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="78.3291%" y="1205" width="0.0136%" height="15" fill="rgb(211,27,16)" fg:x="92209" fg:w="16"/><text x="78.5791%" y="1215.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="78.3291%" y="1189" width="0.0136%" height="15" fill="rgb(219,216,14)" fg:x="92209" fg:w="16"/><text x="78.5791%" y="1199.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="78.3299%" y="1173" width="0.0127%" height="15" fill="rgb(219,71,8)" fg:x="92210" fg:w="15"/><text x="78.5799%" y="1183.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="78.3299%" y="1157" width="0.0127%" height="15" fill="rgb(223,170,53)" fg:x="92210" fg:w="15"/><text x="78.5799%" y="1167.50"></text></g><g><title>leveldb::DBImpl::OpenCompactionOutputFile (17 samples, 0.01%)</title><rect x="78.3291%" y="1301" width="0.0144%" height="15" fill="rgb(246,21,26)" fg:x="92209" fg:w="17"/><text x="78.5791%" y="1311.50"></text></g><g><title>leveldb::ExtractUserKey (24 samples, 0.02%)</title><rect x="78.4803%" y="1285" width="0.0204%" height="15" fill="rgb(248,20,46)" fg:x="92387" fg:w="24"/><text x="78.7303%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (148 samples, 0.13%)</title><rect x="78.3758%" y="1301" width="0.1257%" height="15" fill="rgb(252,94,11)" fg:x="92264" fg:w="148"/><text x="78.6258%" y="1311.50"></text></g><g><title>Compare (46 samples, 0.04%)</title><rect x="78.5330%" y="1285" width="0.0391%" height="15" fill="rgb(236,163,8)" fg:x="92449" fg:w="46"/><text x="78.7830%" y="1295.50"></text></g><g><title>leveldb::Slice::compare (46 samples, 0.04%)</title><rect x="78.5330%" y="1269" width="0.0391%" height="15" fill="rgb(217,221,45)" fg:x="92449" fg:w="46"/><text x="78.7830%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (69 samples, 0.06%)</title><rect x="78.5822%" y="1285" width="0.0586%" height="15" fill="rgb(238,38,17)" fg:x="92507" fg:w="69"/><text x="78.8322%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (203 samples, 0.17%)</title><rect x="78.6493%" y="1285" width="0.1724%" height="15" fill="rgb(242,210,23)" fg:x="92586" fg:w="203"/><text x="78.8993%" y="1295.50"></text></g><g><title>leveldb::Slice::compare (48 samples, 0.04%)</title><rect x="78.7810%" y="1269" width="0.0408%" height="15" fill="rgb(250,86,53)" fg:x="92741" fg:w="48"/><text x="79.0310%" y="1279.50"></text></g><g><title>Valid (17 samples, 0.01%)</title><rect x="78.8609%" y="1269" width="0.0144%" height="15" fill="rgb(223,168,25)" fg:x="92835" fg:w="17"/><text x="79.1109%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::value (129 samples, 0.11%)</title><rect x="78.8235%" y="1285" width="0.1096%" height="15" fill="rgb(251,189,4)" fg:x="92791" fg:w="129"/><text x="79.0735%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::value (64 samples, 0.05%)</title><rect x="78.8787%" y="1269" width="0.0544%" height="15" fill="rgb(245,19,28)" fg:x="92856" fg:w="64"/><text x="79.1287%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (195 samples, 0.17%)</title><rect x="78.9331%" y="1285" width="0.1656%" height="15" fill="rgb(207,10,34)" fg:x="92920" fg:w="195"/><text x="79.1831%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::value (52 samples, 0.04%)</title><rect x="79.0545%" y="1269" width="0.0442%" height="15" fill="rgb(235,153,31)" fg:x="93063" fg:w="52"/><text x="79.3045%" y="1279.50"></text></g><g><title>value (29 samples, 0.02%)</title><rect x="79.0741%" y="1253" width="0.0246%" height="15" fill="rgb(228,72,37)" fg:x="93086" fg:w="29"/><text x="79.3241%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::value (25 samples, 0.02%)</title><rect x="79.0775%" y="1237" width="0.0212%" height="15" fill="rgb(215,15,16)" fg:x="93090" fg:w="25"/><text x="79.3275%" y="1247.50"></text></g><g><title>leveldb::Block::Iter::value (81 samples, 0.07%)</title><rect x="79.0987%" y="1285" width="0.0688%" height="15" fill="rgb(250,119,29)" fg:x="93115" fg:w="81"/><text x="79.3487%" y="1295.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="80.1104%" y="1269" width="0.0144%" height="15" fill="rgb(214,59,1)" fg:x="94306" fg:w="17"/><text x="80.3604%" y="1279.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="80.1113%" y="1253" width="0.0136%" height="15" fill="rgb(223,109,25)" fg:x="94307" fg:w="16"/><text x="80.3613%" y="1263.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="80.1113%" y="1237" width="0.0136%" height="15" fill="rgb(230,198,22)" fg:x="94307" fg:w="16"/><text x="80.3613%" y="1247.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="80.1113%" y="1221" width="0.0136%" height="15" fill="rgb(245,184,46)" fg:x="94307" fg:w="16"/><text x="80.3613%" y="1231.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="80.1113%" y="1205" width="0.0136%" height="15" fill="rgb(253,73,16)" fg:x="94307" fg:w="16"/><text x="80.3613%" y="1215.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="80.1121%" y="1189" width="0.0127%" height="15" fill="rgb(206,94,45)" fg:x="94308" fg:w="15"/><text x="80.3621%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (21 samples, 0.02%)</title><rect x="80.1274%" y="1269" width="0.0178%" height="15" fill="rgb(236,83,27)" fg:x="94326" fg:w="21"/><text x="80.3774%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (81 samples, 0.07%)</title><rect x="80.1453%" y="1269" width="0.0688%" height="15" fill="rgb(220,196,8)" fg:x="94347" fg:w="81"/><text x="80.3953%" y="1279.50"></text></g><g><title>leveldb::Slice::compare (29 samples, 0.02%)</title><rect x="80.1894%" y="1253" width="0.0246%" height="15" fill="rgb(254,185,14)" fg:x="94399" fg:w="29"/><text x="80.4394%" y="1263.50"></text></g><g><title>leveldb::Slice::Slice (21 samples, 0.02%)</title><rect x="80.3695%" y="1253" width="0.0178%" height="15" fill="rgb(226,50,22)" fg:x="94611" fg:w="21"/><text x="80.6195%" y="1263.50"></text></g><g><title>leveldb::BlockBuilder::Add (214 samples, 0.18%)</title><rect x="80.2141%" y="1269" width="0.1818%" height="15" fill="rgb(253,147,0)" fg:x="94428" fg:w="214"/><text x="80.4641%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (12 samples, 0.01%)</title><rect x="80.4867%" y="1221" width="0.0102%" height="15" fill="rgb(252,46,33)" fg:x="94749" fg:w="12"/><text x="80.7367%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (24 samples, 0.02%)</title><rect x="80.4850%" y="1237" width="0.0204%" height="15" fill="rgb(242,22,54)" fg:x="94747" fg:w="24"/><text x="80.7350%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (31 samples, 0.03%)</title><rect x="80.4850%" y="1253" width="0.0263%" height="15" fill="rgb(223,178,32)" fg:x="94747" fg:w="31"/><text x="80.7350%" y="1263.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (129 samples, 0.11%)</title><rect x="80.4069%" y="1269" width="0.1096%" height="15" fill="rgb(214,106,53)" fg:x="94655" fg:w="129"/><text x="80.6569%" y="1279.50"></text></g><g><title>__memcmp_evex_movbe (26 samples, 0.02%)</title><rect x="80.5921%" y="1237" width="0.0221%" height="15" fill="rgb(232,65,50)" fg:x="94873" fg:w="26"/><text x="80.8421%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (13 samples, 0.01%)</title><rect x="80.6142%" y="1237" width="0.0110%" height="15" fill="rgb(231,110,28)" fg:x="94899" fg:w="13"/><text x="80.8642%" y="1247.50"></text></g><g><title>[bitcoind-base] (44 samples, 0.04%)</title><rect x="80.5921%" y="1253" width="0.0374%" height="15" fill="rgb(216,71,40)" fg:x="94873" fg:w="44"/><text x="80.8421%" y="1263.50"></text></g><g><title>__memcmp_evex_movbe (21 samples, 0.02%)</title><rect x="80.8869%" y="1221" width="0.0178%" height="15" fill="rgb(229,89,53)" fg:x="95220" fg:w="21"/><text x="81.1369%" y="1231.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="80.8936%" y="1205" width="0.0110%" height="15" fill="rgb(210,124,14)" fg:x="95228" fg:w="13"/><text x="81.1436%" y="1215.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="80.8936%" y="1189" width="0.0110%" height="15" fill="rgb(236,213,6)" fg:x="95228" fg:w="13"/><text x="81.1436%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (320 samples, 0.27%)</title><rect x="80.6422%" y="1253" width="0.2718%" height="15" fill="rgb(228,41,5)" fg:x="94932" fg:w="320"/><text x="80.8922%" y="1263.50"></text></g><g><title>leveldb::Slice::compare (70 samples, 0.06%)</title><rect x="80.8546%" y="1237" width="0.0595%" height="15" fill="rgb(221,167,25)" fg:x="95182" fg:w="70"/><text x="81.1046%" y="1247.50"></text></g><g><title>leveldb::ExtractUserKey (19 samples, 0.02%)</title><rect x="80.9174%" y="1253" width="0.0161%" height="15" fill="rgb(228,144,37)" fg:x="95256" fg:w="19"/><text x="81.1674%" y="1263.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (43 samples, 0.04%)</title><rect x="80.9336%" y="1253" width="0.0365%" height="15" fill="rgb(227,189,38)" fg:x="95275" fg:w="43"/><text x="81.1836%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (300 samples, 0.25%)</title><rect x="80.9701%" y="1253" width="0.2548%" height="15" fill="rgb(218,8,2)" fg:x="95318" fg:w="300"/><text x="81.2201%" y="1263.50"></text></g><g><title>leveldb::ExtractUserKey (47 samples, 0.04%)</title><rect x="81.1850%" y="1237" width="0.0399%" height="15" fill="rgb(209,61,28)" fg:x="95571" fg:w="47"/><text x="81.4350%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::Add (87 samples, 0.07%)</title><rect x="81.2309%" y="1253" width="0.0739%" height="15" fill="rgb(233,140,39)" fg:x="95625" fg:w="87"/><text x="81.4809%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (931 samples, 0.79%)</title><rect x="80.5165%" y="1269" width="0.7909%" height="15" fill="rgb(251,66,48)" fg:x="94784" fg:w="931"/><text x="80.7665%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (40 samples, 0.03%)</title><rect x="81.3201%" y="1253" width="0.0340%" height="15" fill="rgb(210,44,45)" fg:x="95730" fg:w="40"/><text x="81.5701%" y="1263.50"></text></g><g><title>leveldb::Slice::Slice (18 samples, 0.02%)</title><rect x="81.4212%" y="1237" width="0.0153%" height="15" fill="rgb(214,136,46)" fg:x="95849" fg:w="18"/><text x="81.6712%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::Add (93 samples, 0.08%)</title><rect x="81.3626%" y="1253" width="0.0790%" height="15" fill="rgb(207,130,50)" fg:x="95780" fg:w="93"/><text x="81.6126%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (23 samples, 0.02%)</title><rect x="81.5189%" y="1205" width="0.0195%" height="15" fill="rgb(228,102,49)" fg:x="95964" fg:w="23"/><text x="81.7689%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (19 samples, 0.02%)</title><rect x="81.5384%" y="1205" width="0.0161%" height="15" fill="rgb(253,55,1)" fg:x="95987" fg:w="19"/><text x="81.7884%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (15 samples, 0.01%)</title><rect x="81.5418%" y="1189" width="0.0127%" height="15" fill="rgb(238,222,9)" fg:x="95991" fg:w="15"/><text x="81.7918%" y="1199.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (15 samples, 0.01%)</title><rect x="81.5418%" y="1173" width="0.0127%" height="15" fill="rgb(246,99,6)" fg:x="95991" fg:w="15"/><text x="81.7918%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (78 samples, 0.07%)</title><rect x="81.5027%" y="1221" width="0.0663%" height="15" fill="rgb(219,110,26)" fg:x="95945" fg:w="78"/><text x="81.7527%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (17 samples, 0.01%)</title><rect x="81.5545%" y="1205" width="0.0144%" height="15" fill="rgb(239,160,33)" fg:x="96006" fg:w="17"/><text x="81.8045%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (13 samples, 0.01%)</title><rect x="81.5579%" y="1189" width="0.0110%" height="15" fill="rgb(220,202,23)" fg:x="96010" fg:w="13"/><text x="81.8079%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (92 samples, 0.08%)</title><rect x="81.5027%" y="1237" width="0.0782%" height="15" fill="rgb(208,80,26)" fg:x="95945" fg:w="92"/><text x="81.7527%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (14 samples, 0.01%)</title><rect x="81.5690%" y="1221" width="0.0119%" height="15" fill="rgb(243,85,7)" fg:x="96023" fg:w="14"/><text x="81.8190%" y="1231.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (173 samples, 0.15%)</title><rect x="81.4484%" y="1253" width="0.1470%" height="15" fill="rgb(228,77,47)" fg:x="95881" fg:w="173"/><text x="81.6984%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (18 samples, 0.02%)</title><rect x="81.6752%" y="1205" width="0.0153%" height="15" fill="rgb(212,226,8)" fg:x="96148" fg:w="18"/><text x="81.9252%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (38 samples, 0.03%)</title><rect x="81.6905%" y="1205" width="0.0323%" height="15" fill="rgb(241,120,54)" fg:x="96166" fg:w="38"/><text x="81.9405%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (38 samples, 0.03%)</title><rect x="81.6905%" y="1189" width="0.0323%" height="15" fill="rgb(226,80,16)" fg:x="96166" fg:w="38"/><text x="81.9405%" y="1199.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (33 samples, 0.03%)</title><rect x="81.6947%" y="1173" width="0.0280%" height="15" fill="rgb(240,76,13)" fg:x="96171" fg:w="33"/><text x="81.9447%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (91 samples, 0.08%)</title><rect x="81.6573%" y="1221" width="0.0773%" height="15" fill="rgb(252,74,8)" fg:x="96127" fg:w="91"/><text x="81.9073%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (14 samples, 0.01%)</title><rect x="81.7227%" y="1205" width="0.0119%" height="15" fill="rgb(244,155,2)" fg:x="96204" fg:w="14"/><text x="81.9727%" y="1215.50"></text></g><g><title>leveldb::TableBuilder::Add (165 samples, 0.14%)</title><rect x="81.5987%" y="1253" width="0.1402%" height="15" fill="rgb(215,81,35)" fg:x="96058" fg:w="165"/><text x="81.8487%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (96 samples, 0.08%)</title><rect x="81.6573%" y="1237" width="0.0815%" height="15" fill="rgb(206,55,2)" fg:x="96127" fg:w="96"/><text x="81.9073%" y="1247.50"></text></g><g><title>leveldb::PutVarint32 (518 samples, 0.44%)</title><rect x="81.3073%" y="1269" width="0.4400%" height="15" fill="rgb(231,2,34)" fg:x="95715" fg:w="518"/><text x="81.5573%" y="1279.50"></text></g><g><title>leveldb::Slice::Slice (14 samples, 0.01%)</title><rect x="81.7567%" y="1269" width="0.0119%" height="15" fill="rgb(242,176,48)" fg:x="96244" fg:w="14"/><text x="82.0067%" y="1279.50"></text></g><g><title>leveldb::Slice::data (28 samples, 0.02%)</title><rect x="81.7686%" y="1269" width="0.0238%" height="15" fill="rgb(249,31,36)" fg:x="96258" fg:w="28"/><text x="82.0186%" y="1279.50"></text></g><g><title>leveldb::Slice::operator[] (547 samples, 0.46%)</title><rect x="81.7924%" y="1269" width="0.4647%" height="15" fill="rgb(205,18,17)" fg:x="96286" fg:w="547"/><text x="82.0424%" y="1279.50"></text></g><g><title>leveldb::Slice::size (38 samples, 0.03%)</title><rect x="82.2571%" y="1269" width="0.0323%" height="15" fill="rgb(254,130,5)" fg:x="96833" fg:w="38"/><text x="82.5071%" y="1279.50"></text></g><g><title>leveldb::Slice::Slice (29 samples, 0.02%)</title><rect x="82.4448%" y="1253" width="0.0246%" height="15" fill="rgb(229,42,45)" fg:x="97054" fg:w="29"/><text x="82.6948%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::ok (58 samples, 0.05%)</title><rect x="82.4711%" y="1253" width="0.0493%" height="15" fill="rgb(245,95,25)" fg:x="97085" fg:w="58"/><text x="82.7211%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (15 samples, 0.01%)</title><rect x="82.5306%" y="1221" width="0.0127%" height="15" fill="rgb(249,193,38)" fg:x="97155" fg:w="15"/><text x="82.7806%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (23 samples, 0.02%)</title><rect x="82.5484%" y="1221" width="0.0195%" height="15" fill="rgb(241,140,43)" fg:x="97176" fg:w="23"/><text x="82.7984%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (18 samples, 0.02%)</title><rect x="82.5527%" y="1205" width="0.0153%" height="15" fill="rgb(245,78,48)" fg:x="97181" fg:w="18"/><text x="82.8027%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (27 samples, 0.02%)</title><rect x="82.5680%" y="1221" width="0.0229%" height="15" fill="rgb(214,92,39)" fg:x="97199" fg:w="27"/><text x="82.8180%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (23 samples, 0.02%)</title><rect x="82.5714%" y="1205" width="0.0195%" height="15" fill="rgb(211,189,14)" fg:x="97203" fg:w="23"/><text x="82.8214%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (19 samples, 0.02%)</title><rect x="82.5748%" y="1189" width="0.0161%" height="15" fill="rgb(218,7,24)" fg:x="97207" fg:w="19"/><text x="82.8248%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (96 samples, 0.08%)</title><rect x="82.5204%" y="1237" width="0.0815%" height="15" fill="rgb(224,200,49)" fg:x="97143" fg:w="96"/><text x="82.7704%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (13 samples, 0.01%)</title><rect x="82.5909%" y="1221" width="0.0110%" height="15" fill="rgb(218,210,14)" fg:x="97226" fg:w="13"/><text x="82.8409%" y="1231.50"></text></g><g><title>leveldb::TableBuilder::Add (372 samples, 0.32%)</title><rect x="82.2893%" y="1269" width="0.3160%" height="15" fill="rgb(234,142,31)" fg:x="96871" fg:w="372"/><text x="82.5393%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (100 samples, 0.08%)</title><rect x="82.5204%" y="1253" width="0.0849%" height="15" fill="rgb(227,165,2)" fg:x="97143" fg:w="100"/><text x="82.7704%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::status (66 samples, 0.06%)</title><rect x="82.6053%" y="1269" width="0.0561%" height="15" fill="rgb(232,44,46)" fg:x="97243" fg:w="66"/><text x="82.8553%" y="1279.50"></text></g><g><title>leveldb::Status::Status (27 samples, 0.02%)</title><rect x="82.6385%" y="1253" width="0.0229%" height="15" fill="rgb(236,149,47)" fg:x="97282" fg:w="27"/><text x="82.8885%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (569 samples, 0.48%)</title><rect x="82.6724%" y="1253" width="0.4834%" height="15" fill="rgb(227,45,31)" fg:x="97322" fg:w="569"/><text x="82.9224%" y="1263.50"></text></g><g><title>leveldb::EncodeVarint32 (31 samples, 0.03%)</title><rect x="83.1558%" y="1253" width="0.0263%" height="15" fill="rgb(240,176,51)" fg:x="97891" fg:w="31"/><text x="83.4058%" y="1263.50"></text></g><g><title>leveldb::PutVarint32 (32 samples, 0.03%)</title><rect x="83.1821%" y="1253" width="0.0272%" height="15" fill="rgb(249,146,41)" fg:x="97922" fg:w="32"/><text x="83.4321%" y="1263.50"></text></g><g><title>leveldb::operator== (721 samples, 0.61%)</title><rect x="82.6614%" y="1269" width="0.6125%" height="15" fill="rgb(213,208,4)" fg:x="97309" fg:w="721"/><text x="82.9114%" y="1279.50"></text></g><g><title>memcpy@plt (76 samples, 0.06%)</title><rect x="83.2093%" y="1253" width="0.0646%" height="15" fill="rgb(245,84,36)" fg:x="97954" fg:w="76"/><text x="83.4593%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (13 samples, 0.01%)</title><rect x="83.3970%" y="1237" width="0.0110%" height="15" fill="rgb(254,84,18)" fg:x="98175" fg:w="13"/><text x="83.6470%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (13 samples, 0.01%)</title><rect x="83.3970%" y="1221" width="0.0110%" height="15" fill="rgb(225,38,54)" fg:x="98175" fg:w="13"/><text x="83.6470%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (13 samples, 0.01%)</title><rect x="83.3970%" y="1205" width="0.0110%" height="15" fill="rgb(246,50,30)" fg:x="98175" fg:w="13"/><text x="83.6470%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (13 samples, 0.01%)</title><rect x="83.3970%" y="1189" width="0.0110%" height="15" fill="rgb(246,148,9)" fg:x="98175" fg:w="13"/><text x="83.6470%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.01%)</title><rect x="83.3970%" y="1173" width="0.0110%" height="15" fill="rgb(223,75,4)" fg:x="98175" fg:w="13"/><text x="83.6470%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (25 samples, 0.02%)</title><rect x="83.4081%" y="1221" width="0.0212%" height="15" fill="rgb(239,148,41)" fg:x="98188" fg:w="25"/><text x="83.6581%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (26 samples, 0.02%)</title><rect x="83.4293%" y="1221" width="0.0221%" height="15" fill="rgb(205,195,3)" fg:x="98213" fg:w="26"/><text x="83.6793%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (108 samples, 0.09%)</title><rect x="83.4081%" y="1237" width="0.0917%" height="15" fill="rgb(254,161,1)" fg:x="98188" fg:w="108"/><text x="83.6581%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (57 samples, 0.05%)</title><rect x="83.4514%" y="1221" width="0.0484%" height="15" fill="rgb(211,229,8)" fg:x="98239" fg:w="57"/><text x="83.7014%" y="1231.50"></text></g><g><title>__memcmp_evex_movbe (71 samples, 0.06%)</title><rect x="83.6961%" y="1189" width="0.0603%" height="15" fill="rgb(220,97,9)" fg:x="98527" fg:w="71"/><text x="83.9461%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.01%)</title><rect x="83.7564%" y="1189" width="0.0119%" height="15" fill="rgb(240,218,8)" fg:x="98598" fg:w="14"/><text x="84.0064%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (18 samples, 0.02%)</title><rect x="83.7683%" y="1189" width="0.0153%" height="15" fill="rgb(250,44,0)" fg:x="98612" fg:w="18"/><text x="84.0183%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (364 samples, 0.31%)</title><rect x="83.4998%" y="1237" width="0.3092%" height="15" fill="rgb(236,41,53)" fg:x="98296" fg:w="364"/><text x="83.7498%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (341 samples, 0.29%)</title><rect x="83.5194%" y="1221" width="0.2897%" height="15" fill="rgb(218,227,13)" fg:x="98319" fg:w="341"/><text x="83.7694%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (292 samples, 0.25%)</title><rect x="83.5610%" y="1205" width="0.2480%" height="15" fill="rgb(217,94,32)" fg:x="98368" fg:w="292"/><text x="83.8110%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (31 samples, 0.03%)</title><rect x="83.8549%" y="1205" width="0.0263%" height="15" fill="rgb(213,217,12)" fg:x="98714" fg:w="31"/><text x="84.1049%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (728 samples, 0.62%)</title><rect x="83.2798%" y="1253" width="0.6184%" height="15" fill="rgb(229,13,46)" fg:x="98037" fg:w="728"/><text x="83.5298%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (105 samples, 0.09%)</title><rect x="83.8090%" y="1237" width="0.0892%" height="15" fill="rgb(243,139,5)" fg:x="98660" fg:w="105"/><text x="84.0590%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (79 samples, 0.07%)</title><rect x="83.8311%" y="1221" width="0.0671%" height="15" fill="rgb(249,38,45)" fg:x="98686" fg:w="79"/><text x="84.0811%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (20 samples, 0.02%)</title><rect x="83.8812%" y="1205" width="0.0170%" height="15" fill="rgb(216,70,11)" fg:x="98745" fg:w="20"/><text x="84.1312%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (825 samples, 0.70%)</title><rect x="83.2798%" y="1269" width="0.7008%" height="15" fill="rgb(253,101,25)" fg:x="98037" fg:w="825"/><text x="83.5298%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (97 samples, 0.08%)</title><rect x="83.8982%" y="1253" width="0.0824%" height="15" fill="rgb(207,197,30)" fg:x="98765" fg:w="97"/><text x="84.1482%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (26 samples, 0.02%)</title><rect x="83.9585%" y="1237" width="0.0221%" height="15" fill="rgb(238,87,13)" fg:x="98836" fg:w="26"/><text x="84.2085%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (14 samples, 0.01%)</title><rect x="84.0146%" y="1205" width="0.0119%" height="15" fill="rgb(215,155,8)" fg:x="98902" fg:w="14"/><text x="84.2646%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (65 samples, 0.06%)</title><rect x="84.0036%" y="1237" width="0.0552%" height="15" fill="rgb(239,166,38)" fg:x="98889" fg:w="65"/><text x="84.2536%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (52 samples, 0.04%)</title><rect x="84.0146%" y="1221" width="0.0442%" height="15" fill="rgb(240,194,35)" fg:x="98902" fg:w="52"/><text x="84.2646%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (38 samples, 0.03%)</title><rect x="84.0265%" y="1205" width="0.0323%" height="15" fill="rgb(219,10,44)" fg:x="98916" fg:w="38"/><text x="84.2765%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (104 samples, 0.09%)</title><rect x="83.9806%" y="1269" width="0.0883%" height="15" fill="rgb(251,220,35)" fg:x="98862" fg:w="104"/><text x="84.2306%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (104 samples, 0.09%)</title><rect x="83.9806%" y="1253" width="0.0883%" height="15" fill="rgb(218,117,13)" fg:x="98862" fg:w="104"/><text x="84.2306%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (12 samples, 0.01%)</title><rect x="84.0588%" y="1237" width="0.0102%" height="15" fill="rgb(221,213,40)" fg:x="98954" fg:w="12"/><text x="84.3088%" y="1247.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::push_back (20 samples, 0.02%)</title><rect x="84.0690%" y="1269" width="0.0170%" height="15" fill="rgb(251,224,35)" fg:x="98966" fg:w="20"/><text x="84.3190%" y="1279.50"></text></g><g><title>unsigned int&amp; std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::emplace_back&lt;unsigned int&gt; (20 samples, 0.02%)</title><rect x="84.0690%" y="1253" width="0.0170%" height="15" fill="rgb(241,33,39)" fg:x="98966" fg:w="20"/><text x="84.3190%" y="1263.50"></text></g><g><title>leveldb::BlockBuilder::Add (5,832 samples, 4.95%)</title><rect x="79.1675%" y="1285" width="4.9541%" height="15" fill="rgb(222,74,17)" fg:x="93196" fg:w="5832"/><text x="79.4175%" y="1295.50">leveld..</text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (42 samples, 0.04%)</title><rect x="84.0860%" y="1269" width="0.0357%" height="15" fill="rgb(225,103,0)" fg:x="98986" fg:w="42"/><text x="84.3360%" y="1279.50"></text></g><g><title>leveldb::PutVarint64 (29 samples, 0.02%)</title><rect x="84.1429%" y="1269" width="0.0246%" height="15" fill="rgb(240,0,12)" fg:x="99053" fg:w="29"/><text x="84.3929%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (17 samples, 0.01%)</title><rect x="84.1531%" y="1253" width="0.0144%" height="15" fill="rgb(233,213,37)" fg:x="99065" fg:w="17"/><text x="84.4031%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (17 samples, 0.01%)</title><rect x="84.1531%" y="1237" width="0.0144%" height="15" fill="rgb(225,84,52)" fg:x="99065" fg:w="17"/><text x="84.4031%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (17 samples, 0.01%)</title><rect x="84.1531%" y="1221" width="0.0144%" height="15" fill="rgb(247,160,51)" fg:x="99065" fg:w="17"/><text x="84.4031%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (17 samples, 0.01%)</title><rect x="84.1531%" y="1205" width="0.0144%" height="15" fill="rgb(244,60,51)" fg:x="99065" fg:w="17"/><text x="84.4031%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (17 samples, 0.01%)</title><rect x="84.1531%" y="1189" width="0.0144%" height="15" fill="rgb(233,114,7)" fg:x="99065" fg:w="17"/><text x="84.4031%" y="1199.50"></text></g><g><title>leveldb::BlockHandle::EncodeTo (60 samples, 0.05%)</title><rect x="84.1216%" y="1285" width="0.0510%" height="15" fill="rgb(246,136,16)" fg:x="99028" fg:w="60"/><text x="84.3716%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (32 samples, 0.03%)</title><rect x="84.3765%" y="1221" width="0.0272%" height="15" fill="rgb(243,114,45)" fg:x="99328" fg:w="32"/><text x="84.6265%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (39 samples, 0.03%)</title><rect x="84.4037%" y="1205" width="0.0331%" height="15" fill="rgb(247,183,43)" fg:x="99360" fg:w="39"/><text x="84.6537%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (20 samples, 0.02%)</title><rect x="84.4368%" y="1205" width="0.0170%" height="15" fill="rgb(251,210,42)" fg:x="99399" fg:w="20"/><text x="84.6868%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (88 samples, 0.07%)</title><rect x="84.4037%" y="1221" width="0.0748%" height="15" fill="rgb(221,88,35)" fg:x="99360" fg:w="88"/><text x="84.6537%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (29 samples, 0.02%)</title><rect x="84.4538%" y="1205" width="0.0246%" height="15" fill="rgb(242,21,20)" fg:x="99419" fg:w="29"/><text x="84.7038%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (46 samples, 0.04%)</title><rect x="84.4784%" y="1221" width="0.0391%" height="15" fill="rgb(233,226,36)" fg:x="99448" fg:w="46"/><text x="84.7284%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (43 samples, 0.04%)</title><rect x="84.4810%" y="1205" width="0.0365%" height="15" fill="rgb(243,189,34)" fg:x="99451" fg:w="43"/><text x="84.7310%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (43 samples, 0.04%)</title><rect x="84.4810%" y="1189" width="0.0365%" height="15" fill="rgb(207,145,50)" fg:x="99451" fg:w="43"/><text x="84.7310%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (188 samples, 0.16%)</title><rect x="84.3697%" y="1237" width="0.1597%" height="15" fill="rgb(242,1,50)" fg:x="99320" fg:w="188"/><text x="84.6197%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (14 samples, 0.01%)</title><rect x="84.5175%" y="1221" width="0.0119%" height="15" fill="rgb(231,65,32)" fg:x="99494" fg:w="14"/><text x="84.7675%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (13 samples, 0.01%)</title><rect x="84.5183%" y="1205" width="0.0110%" height="15" fill="rgb(208,68,49)" fg:x="99495" fg:w="13"/><text x="84.7683%" y="1215.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (193 samples, 0.16%)</title><rect x="84.3697%" y="1269" width="0.1639%" height="15" fill="rgb(253,54,49)" fg:x="99320" fg:w="193"/><text x="84.6197%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (193 samples, 0.16%)</title><rect x="84.3697%" y="1253" width="0.1639%" height="15" fill="rgb(245,186,24)" fg:x="99320" fg:w="193"/><text x="84.6197%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (22 samples, 0.02%)</title><rect x="84.5540%" y="1237" width="0.0187%" height="15" fill="rgb(209,2,41)" fg:x="99537" fg:w="22"/><text x="84.8040%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (21 samples, 0.02%)</title><rect x="84.5549%" y="1221" width="0.0178%" height="15" fill="rgb(242,208,54)" fg:x="99538" fg:w="21"/><text x="84.8049%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (21 samples, 0.02%)</title><rect x="84.5549%" y="1205" width="0.0178%" height="15" fill="rgb(225,9,51)" fg:x="99538" fg:w="21"/><text x="84.8049%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (51 samples, 0.04%)</title><rect x="84.5387%" y="1253" width="0.0433%" height="15" fill="rgb(207,207,25)" fg:x="99519" fg:w="51"/><text x="84.7887%" y="1263.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (474 samples, 0.40%)</title><rect x="84.1803%" y="1285" width="0.4027%" height="15" fill="rgb(253,96,18)" fg:x="99097" fg:w="474"/><text x="84.4303%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (52 samples, 0.04%)</title><rect x="84.5387%" y="1269" width="0.0442%" height="15" fill="rgb(252,215,20)" fg:x="99519" fg:w="52"/><text x="84.7887%" y="1279.50"></text></g><g><title>leveldb::EncodeVarint32 (358 samples, 0.30%)</title><rect x="84.5829%" y="1285" width="0.3041%" height="15" fill="rgb(245,227,26)" fg:x="99571" fg:w="358"/><text x="84.8329%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (28 samples, 0.02%)</title><rect x="84.9779%" y="1237" width="0.0238%" height="15" fill="rgb(241,208,0)" fg:x="100036" fg:w="28"/><text x="85.2279%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (13 samples, 0.01%)</title><rect x="84.9907%" y="1221" width="0.0110%" height="15" fill="rgb(224,130,10)" fg:x="100051" fg:w="13"/><text x="85.2407%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (35 samples, 0.03%)</title><rect x="85.0178%" y="1189" width="0.0297%" height="15" fill="rgb(237,29,0)" fg:x="100083" fg:w="35"/><text x="85.2678%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (70 samples, 0.06%)</title><rect x="85.0017%" y="1237" width="0.0595%" height="15" fill="rgb(219,27,41)" fg:x="100064" fg:w="70"/><text x="85.2517%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (68 samples, 0.06%)</title><rect x="85.0034%" y="1221" width="0.0578%" height="15" fill="rgb(245,101,19)" fg:x="100066" fg:w="68"/><text x="85.2534%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (68 samples, 0.06%)</title><rect x="85.0034%" y="1205" width="0.0578%" height="15" fill="rgb(243,44,37)" fg:x="100066" fg:w="68"/><text x="85.2534%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (134 samples, 0.11%)</title><rect x="84.9618%" y="1253" width="0.1138%" height="15" fill="rgb(228,213,43)" fg:x="100017" fg:w="134"/><text x="85.2118%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (17 samples, 0.01%)</title><rect x="85.0612%" y="1237" width="0.0144%" height="15" fill="rgb(219,163,21)" fg:x="100134" fg:w="17"/><text x="85.3112%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (12 samples, 0.01%)</title><rect x="85.0654%" y="1221" width="0.0102%" height="15" fill="rgb(234,86,24)" fg:x="100139" fg:w="12"/><text x="85.3154%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (146 samples, 0.12%)</title><rect x="84.9618%" y="1269" width="0.1240%" height="15" fill="rgb(225,10,24)" fg:x="100017" fg:w="146"/><text x="85.2118%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (12 samples, 0.01%)</title><rect x="85.0756%" y="1253" width="0.0102%" height="15" fill="rgb(218,109,7)" fg:x="100151" fg:w="12"/><text x="85.3256%" y="1263.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (256 samples, 0.22%)</title><rect x="84.8879%" y="1285" width="0.2175%" height="15" fill="rgb(210,20,26)" fg:x="99930" fg:w="256"/><text x="85.1379%" y="1295.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (17 samples, 0.01%)</title><rect x="85.0909%" y="1269" width="0.0144%" height="15" fill="rgb(216,18,1)" fg:x="100169" fg:w="17"/><text x="85.3409%" y="1279.50"></text></g><g><title>unsigned long&amp; std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::emplace_back&lt;unsigned long&gt; (17 samples, 0.01%)</title><rect x="85.0909%" y="1253" width="0.0144%" height="15" fill="rgb(206,163,23)" fg:x="100169" fg:w="17"/><text x="85.3409%" y="1263.50"></text></g><g><title>BloomHash (173 samples, 0.15%)</title><rect x="86.0516%" y="1237" width="0.1470%" height="15" fill="rgb(229,150,31)" fg:x="101300" fg:w="173"/><text x="86.3016%" y="1247.50"></text></g><g><title>[[igc]] (21 samples, 0.02%)</title><rect x="86.2029%" y="1141" width="0.0178%" height="15" fill="rgb(231,10,5)" fg:x="101478" fg:w="21"/><text x="86.4529%" y="1151.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="86.2071%" y="1125" width="0.0136%" height="15" fill="rgb(250,40,50)" fg:x="101483" fg:w="16"/><text x="86.4571%" y="1135.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="86.2088%" y="1109" width="0.0119%" height="15" fill="rgb(217,119,7)" fg:x="101485" fg:w="14"/><text x="86.4588%" y="1119.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="86.1986%" y="1237" width="0.0263%" height="15" fill="rgb(245,214,40)" fg:x="101473" fg:w="31"/><text x="86.4486%" y="1247.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="86.1986%" y="1221" width="0.0263%" height="15" fill="rgb(216,187,1)" fg:x="101473" fg:w="31"/><text x="86.4486%" y="1231.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="86.1986%" y="1205" width="0.0263%" height="15" fill="rgb(237,146,21)" fg:x="101473" fg:w="31"/><text x="86.4486%" y="1215.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="86.2003%" y="1189" width="0.0246%" height="15" fill="rgb(210,174,47)" fg:x="101475" fg:w="29"/><text x="86.4503%" y="1199.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="86.2003%" y="1173" width="0.0246%" height="15" fill="rgb(218,111,39)" fg:x="101475" fg:w="29"/><text x="86.4503%" y="1183.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="86.2012%" y="1157" width="0.0238%" height="15" fill="rgb(224,95,19)" fg:x="101476" fg:w="28"/><text x="86.4512%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (546 samples, 0.46%)</title><rect x="86.2249%" y="1221" width="0.4638%" height="15" fill="rgb(234,15,38)" fg:x="101504" fg:w="546"/><text x="86.4749%" y="1231.50"></text></g><g><title>BloomHash (67 samples, 0.06%)</title><rect x="86.6318%" y="1205" width="0.0569%" height="15" fill="rgb(246,56,12)" fg:x="101983" fg:w="67"/><text x="86.8818%" y="1215.50"></text></g><g><title>[[igc]] (14 samples, 0.01%)</title><rect x="86.9912%" y="1109" width="0.0119%" height="15" fill="rgb(247,16,17)" fg:x="102406" fg:w="14"/><text x="87.2412%" y="1119.50"></text></g><g><title>leveldb::Hash (374 samples, 0.32%)</title><rect x="86.6888%" y="1221" width="0.3177%" height="15" fill="rgb(215,151,11)" fg:x="102050" fg:w="374"/><text x="86.9388%" y="1231.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="86.9903%" y="1205" width="0.0161%" height="15" fill="rgb(225,16,24)" fg:x="102405" fg:w="19"/><text x="87.2403%" y="1215.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="86.9903%" y="1189" width="0.0161%" height="15" fill="rgb(217,117,5)" fg:x="102405" fg:w="19"/><text x="87.2403%" y="1199.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="86.9903%" y="1173" width="0.0161%" height="15" fill="rgb(246,187,53)" fg:x="102405" fg:w="19"/><text x="87.2403%" y="1183.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="86.9903%" y="1157" width="0.0161%" height="15" fill="rgb(241,71,40)" fg:x="102405" fg:w="19"/><text x="87.2403%" y="1167.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="86.9903%" y="1141" width="0.0161%" height="15" fill="rgb(231,67,39)" fg:x="102405" fg:w="19"/><text x="87.2403%" y="1151.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="86.9903%" y="1125" width="0.0161%" height="15" fill="rgb(222,120,24)" fg:x="102405" fg:w="19"/><text x="87.2403%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (937 samples, 0.80%)</title><rect x="86.2249%" y="1237" width="0.7960%" height="15" fill="rgb(248,3,3)" fg:x="101504" fg:w="937"/><text x="86.4749%" y="1247.50"></text></g><g><title>leveldb::InternalFilterPolicy::CreateFilter (17 samples, 0.01%)</title><rect x="87.0065%" y="1221" width="0.0144%" height="15" fill="rgb(228,218,5)" fg:x="102424" fg:w="17"/><text x="87.2565%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (24 samples, 0.02%)</title><rect x="87.0243%" y="1189" width="0.0204%" height="15" fill="rgb(212,202,43)" fg:x="102445" fg:w="24"/><text x="87.2743%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (24 samples, 0.02%)</title><rect x="87.0243%" y="1173" width="0.0204%" height="15" fill="rgb(235,183,2)" fg:x="102445" fg:w="24"/><text x="87.2743%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (24 samples, 0.02%)</title><rect x="87.0243%" y="1157" width="0.0204%" height="15" fill="rgb(230,165,10)" fg:x="102445" fg:w="24"/><text x="87.2743%" y="1167.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (24 samples, 0.02%)</title><rect x="87.0243%" y="1141" width="0.0204%" height="15" fill="rgb(219,54,40)" fg:x="102445" fg:w="24"/><text x="87.2743%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (24 samples, 0.02%)</title><rect x="87.0243%" y="1125" width="0.0204%" height="15" fill="rgb(244,73,9)" fg:x="102445" fg:w="24"/><text x="87.2743%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (2,189 samples, 1.86%)</title><rect x="85.1869%" y="1253" width="1.8595%" height="15" fill="rgb(212,32,45)" fg:x="100282" fg:w="2189"/><text x="85.4369%" y="1263.50">l..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (28 samples, 0.02%)</title><rect x="87.0226%" y="1237" width="0.0238%" height="15" fill="rgb(205,58,31)" fg:x="102443" fg:w="28"/><text x="87.2726%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (28 samples, 0.02%)</title><rect x="87.0226%" y="1221" width="0.0238%" height="15" fill="rgb(250,120,43)" fg:x="102443" fg:w="28"/><text x="87.2726%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (28 samples, 0.02%)</title><rect x="87.0226%" y="1205" width="0.0238%" height="15" fill="rgb(235,13,10)" fg:x="102443" fg:w="28"/><text x="87.2726%" y="1215.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (44 samples, 0.04%)</title><rect x="87.0464%" y="1253" width="0.0374%" height="15" fill="rgb(232,219,31)" fg:x="102471" fg:w="44"/><text x="87.2964%" y="1263.50"></text></g><g><title>leveldb::Hash (941 samples, 0.80%)</title><rect x="87.0838%" y="1253" width="0.7994%" height="15" fill="rgb(218,157,51)" fg:x="102515" fg:w="941"/><text x="87.3338%" y="1263.50"></text></g><g><title>leveldb::InternalFilterPolicy::CreateFilter (130 samples, 0.11%)</title><rect x="87.8831%" y="1253" width="0.1104%" height="15" fill="rgb(211,91,52)" fg:x="103456" fg:w="130"/><text x="88.1331%" y="1263.50"></text></g><g><title>leveldb::ExtractUserKey (74 samples, 0.06%)</title><rect x="87.9307%" y="1237" width="0.0629%" height="15" fill="rgb(240,173,1)" fg:x="103512" fg:w="74"/><text x="88.1807%" y="1247.50"></text></g><g><title>Flush (30 samples, 0.03%)</title><rect x="87.9952%" y="1237" width="0.0255%" height="15" fill="rgb(248,20,47)" fg:x="103588" fg:w="30"/><text x="88.2452%" y="1247.50"></text></g><g><title>FlushBuffer (30 samples, 0.03%)</title><rect x="87.9952%" y="1221" width="0.0255%" height="15" fill="rgb(217,221,40)" fg:x="103588" fg:w="30"/><text x="88.2452%" y="1231.50"></text></g><g><title>WriteUnbuffered (30 samples, 0.03%)</title><rect x="87.9952%" y="1205" width="0.0255%" height="15" fill="rgb(226,149,51)" fg:x="103588" fg:w="30"/><text x="88.2452%" y="1215.50"></text></g><g><title>leveldb::Status::operator= (29 samples, 0.02%)</title><rect x="88.0326%" y="1221" width="0.0246%" height="15" fill="rgb(252,193,7)" fg:x="103632" fg:w="29"/><text x="88.2826%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (29 samples, 0.02%)</title><rect x="88.0326%" y="1205" width="0.0246%" height="15" fill="rgb(205,123,0)" fg:x="103632" fg:w="29"/><text x="88.2826%" y="1215.50"></text></g><g><title>leveldb::TableBuilder::Flush (32 samples, 0.03%)</title><rect x="88.0326%" y="1237" width="0.0272%" height="15" fill="rgb(233,173,25)" fg:x="103632" fg:w="32"/><text x="88.2826%" y="1247.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (83 samples, 0.07%)</title><rect x="88.0700%" y="1221" width="0.0705%" height="15" fill="rgb(216,63,32)" fg:x="103676" fg:w="83"/><text x="88.3200%" y="1231.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (83 samples, 0.07%)</title><rect x="88.0700%" y="1205" width="0.0705%" height="15" fill="rgb(209,56,45)" fg:x="103676" fg:w="83"/><text x="88.3200%" y="1215.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (83 samples, 0.07%)</title><rect x="88.0700%" y="1189" width="0.0705%" height="15" fill="rgb(226,111,49)" fg:x="103676" fg:w="83"/><text x="88.3200%" y="1199.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (36 samples, 0.03%)</title><rect x="88.1099%" y="1173" width="0.0306%" height="15" fill="rgb(244,181,21)" fg:x="103723" fg:w="36"/><text x="88.3599%" y="1183.50"></text></g><g><title>leveldb::Slice::Slice (36 samples, 0.03%)</title><rect x="88.1099%" y="1157" width="0.0306%" height="15" fill="rgb(222,126,15)" fg:x="103723" fg:w="36"/><text x="88.3599%" y="1167.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (173 samples, 0.15%)</title><rect x="87.9944%" y="1253" width="0.1470%" height="15" fill="rgb(222,95,17)" fg:x="103587" fg:w="173"/><text x="88.2444%" y="1263.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (96 samples, 0.08%)</title><rect x="88.0598%" y="1237" width="0.0815%" height="15" fill="rgb(254,46,5)" fg:x="103664" fg:w="96"/><text x="88.3098%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (3,573 samples, 3.04%)</title><rect x="85.1172%" y="1269" width="3.0352%" height="15" fill="rgb(236,216,35)" fg:x="100200" fg:w="3573"/><text x="85.3672%" y="1279.50">lev..</text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (66 samples, 0.06%)</title><rect x="88.1583%" y="1269" width="0.0561%" height="15" fill="rgb(217,187,26)" fg:x="103780" fg:w="66"/><text x="88.4083%" y="1279.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (55 samples, 0.05%)</title><rect x="88.1677%" y="1253" width="0.0467%" height="15" fill="rgb(207,192,25)" fg:x="103791" fg:w="55"/><text x="88.4177%" y="1263.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (55 samples, 0.05%)</title><rect x="88.1677%" y="1237" width="0.0467%" height="15" fill="rgb(253,135,27)" fg:x="103791" fg:w="55"/><text x="88.4177%" y="1247.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (55 samples, 0.05%)</title><rect x="88.1677%" y="1221" width="0.0467%" height="15" fill="rgb(211,122,29)" fg:x="103791" fg:w="55"/><text x="88.4177%" y="1231.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (28 samples, 0.02%)</title><rect x="88.1906%" y="1205" width="0.0238%" height="15" fill="rgb(233,162,40)" fg:x="103818" fg:w="28"/><text x="88.4406%" y="1215.50"></text></g><g><title>leveldb::Slice::Slice (28 samples, 0.02%)</title><rect x="88.1906%" y="1189" width="0.0238%" height="15" fill="rgb(222,184,47)" fg:x="103818" fg:w="28"/><text x="88.4406%" y="1199.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (3,676 samples, 3.12%)</title><rect x="85.1053%" y="1285" width="3.1227%" height="15" fill="rgb(249,99,23)" fg:x="100186" fg:w="3676"/><text x="85.3553%" y="1295.50">lev..</text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (16 samples, 0.01%)</title><rect x="88.2144%" y="1269" width="0.0136%" height="15" fill="rgb(214,60,12)" fg:x="103846" fg:w="16"/><text x="88.4644%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (22 samples, 0.02%)</title><rect x="88.4786%" y="1269" width="0.0187%" height="15" fill="rgb(250,229,36)" fg:x="104157" fg:w="22"/><text x="88.7286%" y="1279.50"></text></g><g><title>leveldb::Slice::compare (20 samples, 0.02%)</title><rect x="88.4803%" y="1253" width="0.0170%" height="15" fill="rgb(232,195,10)" fg:x="104159" fg:w="20"/><text x="88.7303%" y="1263.50"></text></g><g><title>leveldb::DBImpl::CompactionState::current_output (12 samples, 0.01%)</title><rect x="88.5457%" y="1253" width="0.0102%" height="15" fill="rgb(205,213,31)" fg:x="104236" fg:w="12"/><text x="88.7957%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (15 samples, 0.01%)</title><rect x="88.5635%" y="1205" width="0.0127%" height="15" fill="rgb(237,43,8)" fg:x="104257" fg:w="15"/><text x="88.8135%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (52 samples, 0.04%)</title><rect x="88.5559%" y="1221" width="0.0442%" height="15" fill="rgb(216,208,3)" fg:x="104248" fg:w="52"/><text x="88.8059%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (17 samples, 0.01%)</title><rect x="88.5856%" y="1205" width="0.0144%" height="15" fill="rgb(228,179,44)" fg:x="104283" fg:w="17"/><text x="88.8356%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (14 samples, 0.01%)</title><rect x="88.5882%" y="1189" width="0.0119%" height="15" fill="rgb(230,192,27)" fg:x="104286" fg:w="14"/><text x="88.8382%" y="1199.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (56 samples, 0.05%)</title><rect x="88.5559%" y="1253" width="0.0476%" height="15" fill="rgb(251,30,38)" fg:x="104248" fg:w="56"/><text x="88.8059%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (56 samples, 0.05%)</title><rect x="88.5559%" y="1237" width="0.0476%" height="15" fill="rgb(246,55,52)" fg:x="104248" fg:w="56"/><text x="88.8059%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (12 samples, 0.01%)</title><rect x="88.6035%" y="1221" width="0.0102%" height="15" fill="rgb(249,79,26)" fg:x="104304" fg:w="12"/><text x="88.8535%" y="1231.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (135 samples, 0.11%)</title><rect x="88.5041%" y="1269" width="0.1147%" height="15" fill="rgb(220,202,16)" fg:x="104187" fg:w="135"/><text x="88.7541%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (18 samples, 0.02%)</title><rect x="88.6035%" y="1253" width="0.0153%" height="15" fill="rgb(250,170,23)" fg:x="104304" fg:w="18"/><text x="88.8535%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (18 samples, 0.02%)</title><rect x="88.6035%" y="1237" width="0.0153%" height="15" fill="rgb(230,7,37)" fg:x="104304" fg:w="18"/><text x="88.8535%" y="1247.50"></text></g><g><title>leveldb::ExtractUserKey (65 samples, 0.06%)</title><rect x="88.6188%" y="1269" width="0.0552%" height="15" fill="rgb(213,71,1)" fg:x="104322" fg:w="65"/><text x="88.8688%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (39 samples, 0.03%)</title><rect x="88.6748%" y="1269" width="0.0331%" height="15" fill="rgb(227,87,39)" fg:x="104388" fg:w="39"/><text x="88.9248%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (563 samples, 0.48%)</title><rect x="88.2322%" y="1285" width="0.4783%" height="15" fill="rgb(210,41,29)" fg:x="103867" fg:w="563"/><text x="88.4822%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (13 samples, 0.01%)</title><rect x="88.7241%" y="1269" width="0.0110%" height="15" fill="rgb(206,191,31)" fg:x="104446" fg:w="13"/><text x="88.9741%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (12 samples, 0.01%)</title><rect x="88.7496%" y="1253" width="0.0102%" height="15" fill="rgb(247,75,54)" fg:x="104476" fg:w="12"/><text x="88.9996%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (34 samples, 0.03%)</title><rect x="88.7351%" y="1269" width="0.0289%" height="15" fill="rgb(208,54,50)" fg:x="104459" fg:w="34"/><text x="88.9851%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (16 samples, 0.01%)</title><rect x="88.7640%" y="1269" width="0.0136%" height="15" fill="rgb(214,90,37)" fg:x="104493" fg:w="16"/><text x="89.0140%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (97 samples, 0.08%)</title><rect x="88.7105%" y="1285" width="0.0824%" height="15" fill="rgb(220,132,6)" fg:x="104430" fg:w="97"/><text x="88.9605%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (24 samples, 0.02%)</title><rect x="89.4606%" y="1221" width="0.0204%" height="15" fill="rgb(213,167,7)" fg:x="105313" fg:w="24"/><text x="89.7106%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (24 samples, 0.02%)</title><rect x="89.4810%" y="1221" width="0.0204%" height="15" fill="rgb(243,36,27)" fg:x="105337" fg:w="24"/><text x="89.7310%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (92 samples, 0.08%)</title><rect x="89.4606%" y="1237" width="0.0782%" height="15" fill="rgb(235,147,12)" fg:x="105313" fg:w="92"/><text x="89.7106%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (44 samples, 0.04%)</title><rect x="89.5014%" y="1221" width="0.0374%" height="15" fill="rgb(212,198,44)" fg:x="105361" fg:w="44"/><text x="89.7514%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (95 samples, 0.08%)</title><rect x="89.5387%" y="1237" width="0.0807%" height="15" fill="rgb(218,68,50)" fg:x="105405" fg:w="95"/><text x="89.7887%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (66 samples, 0.06%)</title><rect x="89.5634%" y="1221" width="0.0561%" height="15" fill="rgb(224,79,48)" fg:x="105434" fg:w="66"/><text x="89.8134%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (16 samples, 0.01%)</title><rect x="89.6594%" y="1205" width="0.0136%" height="15" fill="rgb(213,191,50)" fg:x="105547" fg:w="16"/><text x="89.9094%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (358 samples, 0.30%)</title><rect x="89.3884%" y="1253" width="0.3041%" height="15" fill="rgb(254,146,10)" fg:x="105228" fg:w="358"/><text x="89.6384%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (86 samples, 0.07%)</title><rect x="89.6194%" y="1237" width="0.0731%" height="15" fill="rgb(215,175,11)" fg:x="105500" fg:w="86"/><text x="89.8694%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (59 samples, 0.05%)</title><rect x="89.6424%" y="1221" width="0.0501%" height="15" fill="rgb(207,49,7)" fg:x="105527" fg:w="59"/><text x="89.8924%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (23 samples, 0.02%)</title><rect x="89.6730%" y="1205" width="0.0195%" height="15" fill="rgb(234,144,29)" fg:x="105563" fg:w="23"/><text x="89.9230%" y="1215.50"></text></g><g><title>leveldb::PutVarint32 (1,155 samples, 0.98%)</title><rect x="88.7937%" y="1285" width="0.9811%" height="15" fill="rgb(213,222,48)" fg:x="104528" fg:w="1155"/><text x="89.0437%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (455 samples, 0.39%)</title><rect x="89.3884%" y="1269" width="0.3865%" height="15" fill="rgb(222,8,6)" fg:x="105228" fg:w="455"/><text x="89.6384%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (97 samples, 0.08%)</title><rect x="89.6925%" y="1253" width="0.0824%" height="15" fill="rgb(221,114,49)" fg:x="105586" fg:w="97"/><text x="89.9425%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (26 samples, 0.02%)</title><rect x="89.7528%" y="1237" width="0.0221%" height="15" fill="rgb(250,140,42)" fg:x="105657" fg:w="26"/><text x="90.0028%" y="1247.50"></text></g><g><title>leveldb::PutVarint64 (13 samples, 0.01%)</title><rect x="89.7749%" y="1285" width="0.0110%" height="15" fill="rgb(250,150,27)" fg:x="105683" fg:w="13"/><text x="90.0249%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::ok (13 samples, 0.01%)</title><rect x="89.8632%" y="1269" width="0.0110%" height="15" fill="rgb(252,159,3)" fg:x="105787" fg:w="13"/><text x="90.1132%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (14 samples, 0.01%)</title><rect x="89.8853%" y="1237" width="0.0119%" height="15" fill="rgb(241,182,3)" fg:x="105813" fg:w="14"/><text x="90.1353%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (36 samples, 0.03%)</title><rect x="89.8743%" y="1269" width="0.0306%" height="15" fill="rgb(236,3,9)" fg:x="105800" fg:w="36"/><text x="90.1243%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (36 samples, 0.03%)</title><rect x="89.8743%" y="1253" width="0.0306%" height="15" fill="rgb(223,227,51)" fg:x="105800" fg:w="36"/><text x="90.1243%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Add (132 samples, 0.11%)</title><rect x="89.7936%" y="1285" width="0.1121%" height="15" fill="rgb(232,133,30)" fg:x="105705" fg:w="132"/><text x="90.0436%" y="1295.50"></text></g><g><title>[[ext4]] (51 samples, 0.04%)</title><rect x="90.4681%" y="1125" width="0.0433%" height="15" fill="rgb(209,93,27)" fg:x="106499" fg:w="51"/><text x="90.7181%" y="1135.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="90.4952%" y="1109" width="0.0161%" height="15" fill="rgb(208,108,34)" fg:x="106531" fg:w="19"/><text x="90.7452%" y="1119.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="90.4978%" y="1093" width="0.0136%" height="15" fill="rgb(215,189,13)" fg:x="106534" fg:w="16"/><text x="90.7478%" y="1103.50"></text></g><g><title>[[ext4]] (45 samples, 0.04%)</title><rect x="91.4560%" y="1029" width="0.0382%" height="15" fill="rgb(206,88,23)" fg:x="107662" fg:w="45"/><text x="91.7060%" y="1039.50"></text></g><g><title>[[ext4]] (285 samples, 0.24%)</title><rect x="91.3167%" y="1045" width="0.2421%" height="15" fill="rgb(240,173,0)" fg:x="107498" fg:w="285"/><text x="91.5667%" y="1055.50"></text></g><g><title>[unknown] (76 samples, 0.06%)</title><rect x="91.4942%" y="1029" width="0.0646%" height="15" fill="rgb(223,106,52)" fg:x="107707" fg:w="76"/><text x="91.7442%" y="1039.50"></text></g><g><title>[[ext4]] (20 samples, 0.02%)</title><rect x="91.7576%" y="1029" width="0.0170%" height="15" fill="rgb(206,130,16)" fg:x="108017" fg:w="20"/><text x="92.0076%" y="1039.50"></text></g><g><title>[[ext4]] (765 samples, 0.65%)</title><rect x="91.1510%" y="1061" width="0.6498%" height="15" fill="rgb(220,54,25)" fg:x="107303" fg:w="765"/><text x="91.4010%" y="1071.50"></text></g><g><title>[unknown] (285 samples, 0.24%)</title><rect x="91.5588%" y="1045" width="0.2421%" height="15" fill="rgb(210,4,38)" fg:x="107783" fg:w="285"/><text x="91.8088%" y="1055.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="91.7745%" y="1029" width="0.0263%" height="15" fill="rgb(238,94,39)" fg:x="108037" fg:w="31"/><text x="92.0245%" y="1039.50"></text></g><g><title>[[ext4]] (1,092 samples, 0.93%)</title><rect x="90.9820%" y="1077" width="0.9276%" height="15" fill="rgb(234,124,34)" fg:x="107104" fg:w="1092"/><text x="91.2320%" y="1087.50"></text></g><g><title>[unknown] (128 samples, 0.11%)</title><rect x="91.8009%" y="1061" width="0.1087%" height="15" fill="rgb(221,91,40)" fg:x="108068" fg:w="128"/><text x="92.0509%" y="1071.50"></text></g><g><title>[[ext4]] (1,929 samples, 1.64%)</title><rect x="90.8902%" y="1093" width="1.6386%" height="15" fill="rgb(246,53,28)" fg:x="106996" fg:w="1929"/><text x="91.1402%" y="1103.50"></text></g><g><title>[unknown] (729 samples, 0.62%)</title><rect x="91.9096%" y="1077" width="0.6193%" height="15" fill="rgb(229,109,7)" fg:x="108196" fg:w="729"/><text x="92.1596%" y="1087.50"></text></g><g><title>[unknown] (612 samples, 0.52%)</title><rect x="92.0090%" y="1061" width="0.5199%" height="15" fill="rgb(249,117,8)" fg:x="108313" fg:w="612"/><text x="92.2590%" y="1071.50"></text></g><g><title>[unknown] (527 samples, 0.45%)</title><rect x="92.0812%" y="1045" width="0.4477%" height="15" fill="rgb(210,181,1)" fg:x="108398" fg:w="527"/><text x="92.3312%" y="1055.50"></text></g><g><title>[unknown] (493 samples, 0.42%)</title><rect x="92.1101%" y="1029" width="0.4188%" height="15" fill="rgb(211,66,1)" fg:x="108432" fg:w="493"/><text x="92.3601%" y="1039.50"></text></g><g><title>[unknown] (363 samples, 0.31%)</title><rect x="92.2205%" y="1013" width="0.3084%" height="15" fill="rgb(221,90,14)" fg:x="108562" fg:w="363"/><text x="92.4705%" y="1023.50"></text></g><g><title>[unknown] (149 samples, 0.13%)</title><rect x="92.4023%" y="997" width="0.1266%" height="15" fill="rgb(219,222,44)" fg:x="108776" fg:w="149"/><text x="92.6523%" y="1007.50"></text></g><g><title>[unknown] (62 samples, 0.05%)</title><rect x="92.4762%" y="981" width="0.0527%" height="15" fill="rgb(246,34,33)" fg:x="108863" fg:w="62"/><text x="92.7262%" y="991.50"></text></g><g><title>[unknown] (40 samples, 0.03%)</title><rect x="92.4949%" y="965" width="0.0340%" height="15" fill="rgb(227,135,41)" fg:x="108885" fg:w="40"/><text x="92.7449%" y="975.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="92.5059%" y="949" width="0.0229%" height="15" fill="rgb(226,15,14)" fg:x="108898" fg:w="27"/><text x="92.7559%" y="959.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="92.5170%" y="933" width="0.0119%" height="15" fill="rgb(236,148,47)" fg:x="108911" fg:w="14"/><text x="92.7670%" y="943.50"></text></g><g><title>[[ext4]] (5,890 samples, 5.00%)</title><rect x="90.7008%" y="1109" width="5.0034%" height="15" fill="rgb(233,162,52)" fg:x="106773" fg:w="5890"/><text x="90.9508%" y="1119.50">[[ext4..</text></g><g><title>[unknown] (3,738 samples, 3.18%)</title><rect x="92.5289%" y="1093" width="3.1753%" height="15" fill="rgb(244,35,28)" fg:x="108925" fg:w="3738"/><text x="92.7789%" y="1103.50">[un..</text></g><g><title>[unknown] (3,501 samples, 2.97%)</title><rect x="92.7302%" y="1077" width="2.9740%" height="15" fill="rgb(205,121,10)" fg:x="109162" fg:w="3501"/><text x="92.9802%" y="1087.50">[un..</text></g><g><title>[unknown] (2,845 samples, 2.42%)</title><rect x="93.2875%" y="1061" width="2.4168%" height="15" fill="rgb(250,58,18)" fg:x="109818" fg:w="2845"/><text x="93.5375%" y="1071.50">[u..</text></g><g><title>[unknown] (2,238 samples, 1.90%)</title><rect x="93.8031%" y="1045" width="1.9011%" height="15" fill="rgb(216,37,13)" fg:x="110425" fg:w="2238"/><text x="94.0531%" y="1055.50">[..</text></g><g><title>[unknown] (1,496 samples, 1.27%)</title><rect x="94.4334%" y="1029" width="1.2708%" height="15" fill="rgb(221,215,42)" fg:x="111167" fg:w="1496"/><text x="94.6834%" y="1039.50"></text></g><g><title>[unknown] (519 samples, 0.44%)</title><rect x="95.2633%" y="1013" width="0.4409%" height="15" fill="rgb(217,214,19)" fg:x="112144" fg:w="519"/><text x="95.5133%" y="1023.50"></text></g><g><title>[unknown] (116 samples, 0.10%)</title><rect x="95.6057%" y="997" width="0.0985%" height="15" fill="rgb(233,139,13)" fg:x="112547" fg:w="116"/><text x="95.8557%" y="1007.50"></text></g><g><title>[unknown] (63 samples, 0.05%)</title><rect x="95.6507%" y="981" width="0.0535%" height="15" fill="rgb(247,168,23)" fg:x="112600" fg:w="63"/><text x="95.9007%" y="991.50"></text></g><g><title>[unknown] (43 samples, 0.04%)</title><rect x="95.6677%" y="965" width="0.0365%" height="15" fill="rgb(207,202,1)" fg:x="112620" fg:w="43"/><text x="95.9177%" y="975.50"></text></g><g><title>[unknown] (35 samples, 0.03%)</title><rect x="95.6745%" y="949" width="0.0297%" height="15" fill="rgb(220,155,48)" fg:x="112628" fg:w="35"/><text x="95.9245%" y="959.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="95.6864%" y="933" width="0.0178%" height="15" fill="rgb(250,43,26)" fg:x="112642" fg:w="21"/><text x="95.9364%" y="943.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="95.6923%" y="917" width="0.0119%" height="15" fill="rgb(212,190,23)" fg:x="112649" fg:w="14"/><text x="95.9423%" y="927.50"></text></g><g><title>[[ext4]] (12 samples, 0.01%)</title><rect x="96.5613%" y="1013" width="0.0102%" height="15" fill="rgb(216,39,24)" fg:x="113672" fg:w="12"/><text x="96.8113%" y="1023.50"></text></g><g><title>[[ext4]] (19 samples, 0.02%)</title><rect x="96.5562%" y="1029" width="0.0161%" height="15" fill="rgb(252,113,16)" fg:x="113666" fg:w="19"/><text x="96.8062%" y="1039.50"></text></g><g><title>[[ext4]] (24 samples, 0.02%)</title><rect x="96.5545%" y="1045" width="0.0204%" height="15" fill="rgb(208,113,19)" fg:x="113664" fg:w="24"/><text x="96.8045%" y="1055.50"></text></g><g><title>[[ext4]] (27 samples, 0.02%)</title><rect x="96.5545%" y="1061" width="0.0229%" height="15" fill="rgb(234,107,25)" fg:x="113664" fg:w="27"/><text x="96.8045%" y="1071.50"></text></g><g><title>[[ext4]] (43 samples, 0.04%)</title><rect x="96.5545%" y="1077" width="0.0365%" height="15" fill="rgb(234,217,51)" fg:x="113664" fg:w="43"/><text x="96.8045%" y="1087.50"></text></g><g><title>[[jbd2]] (16 samples, 0.01%)</title><rect x="96.5775%" y="1061" width="0.0136%" height="15" fill="rgb(251,29,42)" fg:x="113691" fg:w="16"/><text x="96.8275%" y="1071.50"></text></g><g><title>[[ext4]] (7,387 samples, 6.28%)</title><rect x="90.3644%" y="1141" width="6.2751%" height="15" fill="rgb(221,62,51)" fg:x="106377" fg:w="7387"/><text x="90.6144%" y="1151.50">[[ext4]]</text></g><g><title>[unknown] (7,214 samples, 6.13%)</title><rect x="90.5114%" y="1125" width="6.1281%" height="15" fill="rgb(240,192,43)" fg:x="106550" fg:w="7214"/><text x="90.7614%" y="1135.50">[unknown]</text></g><g><title>[unknown] (1,101 samples, 0.94%)</title><rect x="95.7042%" y="1109" width="0.9353%" height="15" fill="rgb(224,157,47)" fg:x="112663" fg:w="1101"/><text x="95.9542%" y="1119.50"></text></g><g><title>[unknown] (735 samples, 0.62%)</title><rect x="96.0151%" y="1093" width="0.6244%" height="15" fill="rgb(226,84,45)" fg:x="113029" fg:w="735"/><text x="96.2651%" y="1103.50"></text></g><g><title>[unknown] (57 samples, 0.05%)</title><rect x="96.5911%" y="1077" width="0.0484%" height="15" fill="rgb(208,207,23)" fg:x="113707" fg:w="57"/><text x="96.8411%" y="1087.50"></text></g><g><title>[unknown] (46 samples, 0.04%)</title><rect x="96.6004%" y="1061" width="0.0391%" height="15" fill="rgb(253,34,51)" fg:x="113718" fg:w="46"/><text x="96.8504%" y="1071.50"></text></g><g><title>[unknown] (43 samples, 0.04%)</title><rect x="96.6030%" y="1045" width="0.0365%" height="15" fill="rgb(227,26,34)" fg:x="113721" fg:w="43"/><text x="96.8530%" y="1055.50"></text></g><g><title>[unknown] (40 samples, 0.03%)</title><rect x="96.6055%" y="1029" width="0.0340%" height="15" fill="rgb(245,75,19)" fg:x="113724" fg:w="40"/><text x="96.8555%" y="1039.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="96.6106%" y="1013" width="0.0289%" height="15" fill="rgb(250,191,31)" fg:x="113730" fg:w="34"/><text x="96.8606%" y="1023.50"></text></g><g><title>[unknown] (8,220 samples, 6.98%)</title><rect x="89.9303%" y="1205" width="6.9827%" height="15" fill="rgb(224,11,50)" fg:x="105866" fg:w="8220"/><text x="90.1803%" y="1215.50">[unknown]</text></g><g><title>[unknown] (8,179 samples, 6.95%)</title><rect x="89.9652%" y="1189" width="6.9478%" height="15" fill="rgb(231,171,7)" fg:x="105907" fg:w="8179"/><text x="90.2152%" y="1199.50">[unknown]</text></g><g><title>[unknown] (8,155 samples, 6.93%)</title><rect x="89.9856%" y="1173" width="6.9275%" height="15" fill="rgb(252,214,10)" fg:x="105931" fg:w="8155"/><text x="90.2356%" y="1183.50">[unknown]</text></g><g><title>[unknown] (7,988 samples, 6.79%)</title><rect x="90.1274%" y="1157" width="6.7856%" height="15" fill="rgb(249,45,46)" fg:x="106098" fg:w="7988"/><text x="90.3774%" y="1167.50">[unknown]</text></g><g><title>[unknown] (322 samples, 0.27%)</title><rect x="96.6395%" y="1141" width="0.2735%" height="15" fill="rgb(240,173,7)" fg:x="113764" fg:w="322"/><text x="96.8895%" y="1151.50"></text></g><g><title>[unknown] (86 samples, 0.07%)</title><rect x="96.8400%" y="1125" width="0.0731%" height="15" fill="rgb(235,214,13)" fg:x="114000" fg:w="86"/><text x="97.0900%" y="1135.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="96.8977%" y="1109" width="0.0153%" height="15" fill="rgb(245,156,8)" fg:x="114068" fg:w="18"/><text x="97.1477%" y="1119.50"></text></g><g><title>__GI___pthread_disable_asynccancel (14 samples, 0.01%)</title><rect x="96.9130%" y="1205" width="0.0119%" height="15" fill="rgb(235,46,12)" fg:x="114086" fg:w="14"/><text x="97.1630%" y="1215.50"></text></g><g><title>Flush (8,262 samples, 7.02%)</title><rect x="89.9083%" y="1269" width="7.0183%" height="15" fill="rgb(221,81,14)" fg:x="105840" fg:w="8262"/><text x="90.1583%" y="1279.50">Flush</text></g><g><title>FlushBuffer (8,262 samples, 7.02%)</title><rect x="89.9083%" y="1253" width="7.0183%" height="15" fill="rgb(238,207,9)" fg:x="105840" fg:w="8262"/><text x="90.1583%" y="1263.50">FlushBuff..</text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (8,254 samples, 7.01%)</title><rect x="89.9151%" y="1237" width="7.0116%" height="15" fill="rgb(224,129,35)" fg:x="105848" fg:w="8254"/><text x="90.1651%" y="1247.50">leveldb::..</text></g><g><title>__GI___libc_write (8,254 samples, 7.01%)</title><rect x="89.9151%" y="1221" width="7.0116%" height="15" fill="rgb(243,218,34)" fg:x="105848" fg:w="8254"/><text x="90.1651%" y="1231.50">__GI___li..</text></g><g><title>FlushBuffer (23 samples, 0.02%)</title><rect x="96.9359%" y="1253" width="0.0195%" height="15" fill="rgb(220,166,13)" fg:x="114113" fg:w="23"/><text x="97.1859%" y="1263.50"></text></g><g><title>WriteUnbuffered (23 samples, 0.02%)</title><rect x="96.9359%" y="1237" width="0.0195%" height="15" fill="rgb(227,167,49)" fg:x="114113" fg:w="23"/><text x="97.1859%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (33 samples, 0.03%)</title><rect x="96.9343%" y="1269" width="0.0280%" height="15" fill="rgb(234,142,12)" fg:x="114111" fg:w="33"/><text x="97.1843%" y="1279.50"></text></g><g><title>crc32c::ExtendSse42 (33 samples, 0.03%)</title><rect x="96.9852%" y="1253" width="0.0280%" height="15" fill="rgb(207,100,48)" fg:x="114171" fg:w="33"/><text x="97.2352%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Add (13 samples, 0.01%)</title><rect x="97.0268%" y="1237" width="0.0110%" height="15" fill="rgb(210,25,14)" fg:x="114220" fg:w="13"/><text x="97.2768%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::Finish (45 samples, 0.04%)</title><rect x="97.0150%" y="1253" width="0.0382%" height="15" fill="rgb(246,116,27)" fg:x="114206" fg:w="45"/><text x="97.2650%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (100 samples, 0.08%)</title><rect x="97.0634%" y="1205" width="0.0849%" height="15" fill="rgb(214,193,42)" fg:x="114263" fg:w="100"/><text x="97.3134%" y="1215.50"></text></g><g><title>Append (106 samples, 0.09%)</title><rect x="97.0634%" y="1237" width="0.0900%" height="15" fill="rgb(214,122,8)" fg:x="114263" fg:w="106"/><text x="97.3134%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (106 samples, 0.09%)</title><rect x="97.0634%" y="1221" width="0.0900%" height="15" fill="rgb(244,173,18)" fg:x="114263" fg:w="106"/><text x="97.3134%" y="1231.50"></text></g><g><title>_mm_crc32_u64 (23 samples, 0.02%)</title><rect x="97.2027%" y="1221" width="0.0195%" height="15" fill="rgb(232,68,19)" fg:x="114427" fg:w="23"/><text x="97.4527%" y="1231.50"></text></g><g><title>crc32c::ExtendSse42 (83 samples, 0.07%)</title><rect x="97.1543%" y="1237" width="0.0705%" height="15" fill="rgb(236,224,1)" fg:x="114370" fg:w="83"/><text x="97.4043%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::Finish (15 samples, 0.01%)</title><rect x="97.2299%" y="1237" width="0.0127%" height="15" fill="rgb(240,11,8)" fg:x="114459" fg:w="15"/><text x="97.4799%" y="1247.50"></text></g><g><title>crc32c::ExtendSse42 (319 samples, 0.27%)</title><rect x="97.2647%" y="1221" width="0.2710%" height="15" fill="rgb(244,159,20)" fg:x="114500" fg:w="319"/><text x="97.5147%" y="1231.50"></text></g><g><title>_mm_crc32_u64 (190 samples, 0.16%)</title><rect x="97.3743%" y="1205" width="0.1614%" height="15" fill="rgb(240,223,54)" fg:x="114629" fg:w="190"/><text x="97.6243%" y="1215.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (570 samples, 0.48%)</title><rect x="97.0625%" y="1253" width="0.4842%" height="15" fill="rgb(237,146,5)" fg:x="114262" fg:w="570"/><text x="97.3125%" y="1263.50"></text></g><g><title>leveldb::crc32c::Value (342 samples, 0.29%)</title><rect x="97.2562%" y="1237" width="0.2905%" height="15" fill="rgb(218,221,32)" fg:x="114490" fg:w="342"/><text x="97.5062%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (675 samples, 0.57%)</title><rect x="96.9818%" y="1269" width="0.5734%" height="15" fill="rgb(244,96,26)" fg:x="114167" fg:w="675"/><text x="97.2318%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (22 samples, 0.02%)</title><rect x="97.5552%" y="1269" width="0.0187%" height="15" fill="rgb(245,184,37)" fg:x="114842" fg:w="22"/><text x="97.8052%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Flush (9,029 samples, 7.67%)</title><rect x="89.9057%" y="1285" width="7.6699%" height="15" fill="rgb(248,91,47)" fg:x="105837" fg:w="9029"/><text x="90.1557%" y="1295.50">leveldb::T..</text></g><g><title>leveldb::TableBuilder::NumEntries (21 samples, 0.02%)</title><rect x="97.5756%" y="1285" width="0.0178%" height="15" fill="rgb(243,199,8)" fg:x="114866" fg:w="21"/><text x="97.8256%" y="1295.50"></text></g><g><title>Compare (30 samples, 0.03%)</title><rect x="97.6045%" y="1269" width="0.0255%" height="15" fill="rgb(249,12,15)" fg:x="114900" fg:w="30"/><text x="97.8545%" y="1279.50"></text></g><g><title>leveldb::Slice::compare (30 samples, 0.03%)</title><rect x="97.6045%" y="1253" width="0.0255%" height="15" fill="rgb(245,97,12)" fg:x="114900" fg:w="30"/><text x="97.8545%" y="1263.50"></text></g><g><title>__memcmp_evex_movbe (13 samples, 0.01%)</title><rect x="97.6300%" y="1269" width="0.0110%" height="15" fill="rgb(244,61,1)" fg:x="114930" fg:w="13"/><text x="97.8800%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (15 samples, 0.01%)</title><rect x="97.6410%" y="1269" width="0.0127%" height="15" fill="rgb(222,194,10)" fg:x="114943" fg:w="15"/><text x="97.8910%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (92 samples, 0.08%)</title><rect x="97.6538%" y="1269" width="0.0782%" height="15" fill="rgb(226,178,8)" fg:x="114958" fg:w="92"/><text x="97.9038%" y="1279.50"></text></g><g><title>leveldb::Slice::compare (33 samples, 0.03%)</title><rect x="97.7039%" y="1253" width="0.0280%" height="15" fill="rgb(241,32,34)" fg:x="115017" fg:w="33"/><text x="97.9539%" y="1263.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (14 samples, 0.01%)</title><rect x="97.7319%" y="1269" width="0.0119%" height="15" fill="rgb(254,26,6)" fg:x="115050" fg:w="14"/><text x="97.9819%" y="1279.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (85 samples, 0.07%)</title><rect x="97.7438%" y="1269" width="0.0722%" height="15" fill="rgb(249,71,11)" fg:x="115064" fg:w="85"/><text x="97.9938%" y="1279.50"></text></g><g><title>leveldb::Slice::data (13 samples, 0.01%)</title><rect x="97.9884%" y="1237" width="0.0110%" height="15" fill="rgb(232,170,27)" fg:x="115352" fg:w="13"/><text x="98.2384%" y="1247.50"></text></g><g><title>leveldb::ParseInternalKey (86 samples, 0.07%)</title><rect x="97.9332%" y="1253" width="0.0731%" height="15" fill="rgb(214,223,17)" fg:x="115287" fg:w="86"/><text x="98.1832%" y="1263.50"></text></g><g><title>leveldb::Slice::Slice (28 samples, 0.02%)</title><rect x="98.0063%" y="1253" width="0.0238%" height="15" fill="rgb(250,18,15)" fg:x="115373" fg:w="28"/><text x="98.2563%" y="1263.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (269 samples, 0.23%)</title><rect x="97.8160%" y="1269" width="0.2285%" height="15" fill="rgb(212,153,51)" fg:x="115149" fg:w="269"/><text x="98.0660%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (14 samples, 0.01%)</title><rect x="98.0326%" y="1253" width="0.0119%" height="15" fill="rgb(219,194,12)" fg:x="115404" fg:w="14"/><text x="98.2826%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (14 samples, 0.01%)</title><rect x="98.0326%" y="1237" width="0.0119%" height="15" fill="rgb(212,58,17)" fg:x="115404" fg:w="14"/><text x="98.2826%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::ok (553 samples, 0.47%)</title><rect x="97.5968%" y="1285" width="0.4698%" height="15" fill="rgb(254,5,10)" fg:x="114891" fg:w="553"/><text x="97.8468%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::status (23 samples, 0.02%)</title><rect x="98.0666%" y="1285" width="0.0195%" height="15" fill="rgb(246,91,7)" fg:x="115444" fg:w="23"/><text x="98.3166%" y="1295.50"></text></g><g><title>memcpy@plt (14 samples, 0.01%)</title><rect x="98.0861%" y="1285" width="0.0119%" height="15" fill="rgb(218,108,49)" fg:x="115467" fg:w="14"/><text x="98.3361%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::value (16 samples, 0.01%)</title><rect x="98.1065%" y="1205" width="0.0136%" height="15" fill="rgb(238,123,20)" fg:x="115491" fg:w="16"/><text x="98.3565%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (32 samples, 0.03%)</title><rect x="98.0980%" y="1285" width="0.0272%" height="15" fill="rgb(231,69,23)" fg:x="115481" fg:w="32"/><text x="98.3480%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (32 samples, 0.03%)</title><rect x="98.0980%" y="1269" width="0.0272%" height="15" fill="rgb(230,209,3)" fg:x="115481" fg:w="32"/><text x="98.3480%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (30 samples, 0.03%)</title><rect x="98.0997%" y="1253" width="0.0255%" height="15" fill="rgb(231,19,0)" fg:x="115483" fg:w="30"/><text x="98.3497%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (30 samples, 0.03%)</title><rect x="98.0997%" y="1237" width="0.0255%" height="15" fill="rgb(226,192,25)" fg:x="115483" fg:w="30"/><text x="98.3497%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (30 samples, 0.03%)</title><rect x="98.0997%" y="1221" width="0.0255%" height="15" fill="rgb(223,175,53)" fg:x="115483" fg:w="30"/><text x="98.3497%" y="1231.50"></text></g><g><title>leveldb::TableBuilder::Add (23,117 samples, 19.64%)</title><rect x="78.5109%" y="1301" width="19.6373%" height="15" fill="rgb(248,35,51)" fg:x="92423" fg:w="23117"/><text x="78.7609%" y="1311.50">leveldb::TableBuilder::Add</text></g><g><title>value (26 samples, 0.02%)</title><rect x="98.1261%" y="1285" width="0.0221%" height="15" fill="rgb(230,37,26)" fg:x="115514" fg:w="26"/><text x="98.3761%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::value (26 samples, 0.02%)</title><rect x="98.1261%" y="1269" width="0.0221%" height="15" fill="rgb(206,120,22)" fg:x="115514" fg:w="26"/><text x="98.3761%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (34 samples, 0.03%)</title><rect x="98.1481%" y="1301" width="0.0289%" height="15" fill="rgb(207,165,28)" fg:x="115540" fg:w="34"/><text x="98.3981%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::status (25 samples, 0.02%)</title><rect x="98.1770%" y="1301" width="0.0212%" height="15" fill="rgb(226,23,46)" fg:x="115574" fg:w="25"/><text x="98.4270%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (14 samples, 0.01%)</title><rect x="98.2102%" y="1269" width="0.0119%" height="15" fill="rgb(208,130,44)" fg:x="115613" fg:w="14"/><text x="98.4602%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (14 samples, 0.01%)</title><rect x="98.2102%" y="1253" width="0.0119%" height="15" fill="rgb(231,67,8)" fg:x="115613" fg:w="14"/><text x="98.4602%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (14 samples, 0.01%)</title><rect x="98.2102%" y="1237" width="0.0119%" height="15" fill="rgb(205,183,22)" fg:x="115613" fg:w="14"/><text x="98.4602%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (22 samples, 0.02%)</title><rect x="98.2051%" y="1301" width="0.0187%" height="15" fill="rgb(224,47,9)" fg:x="115607" fg:w="22"/><text x="98.4551%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (22 samples, 0.02%)</title><rect x="98.2051%" y="1285" width="0.0187%" height="15" fill="rgb(250,183,49)" fg:x="115607" fg:w="22"/><text x="98.4551%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (16 samples, 0.01%)</title><rect x="98.2433%" y="1237" width="0.0136%" height="15" fill="rgb(220,151,39)" fg:x="115652" fg:w="16"/><text x="98.4933%" y="1247.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (35,492 samples, 30.15%)</title><rect x="68.1371%" y="1317" width="30.1495%" height="15" fill="rgb(220,118,20)" fg:x="80211" fg:w="35492"/><text x="68.3871%" y="1327.50">leveldb::DBImpl::DoCompactionWork</text></g><g><title>value (74 samples, 0.06%)</title><rect x="98.2238%" y="1301" width="0.0629%" height="15" fill="rgb(231,65,51)" fg:x="115629" fg:w="74"/><text x="98.4738%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::value (74 samples, 0.06%)</title><rect x="98.2238%" y="1285" width="0.0629%" height="15" fill="rgb(253,125,37)" fg:x="115629" fg:w="74"/><text x="98.4738%" y="1295.50"></text></g><g><title>value (72 samples, 0.06%)</title><rect x="98.2255%" y="1269" width="0.0612%" height="15" fill="rgb(232,102,6)" fg:x="115631" fg:w="72"/><text x="98.4755%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::value (72 samples, 0.06%)</title><rect x="98.2255%" y="1253" width="0.0612%" height="15" fill="rgb(251,105,13)" fg:x="115631" fg:w="72"/><text x="98.4755%" y="1263.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (22 samples, 0.02%)</title><rect x="98.2679%" y="1237" width="0.0187%" height="15" fill="rgb(222,179,29)" fg:x="115681" fg:w="22"/><text x="98.5179%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (317 samples, 0.27%)</title><rect x="98.2951%" y="1317" width="0.2693%" height="15" fill="rgb(229,180,53)" fg:x="115713" fg:w="317"/><text x="98.5451%" y="1327.50"></text></g><g><title>leveldb::ExtractUserKey (46 samples, 0.04%)</title><rect x="98.5253%" y="1301" width="0.0391%" height="15" fill="rgb(238,104,13)" fg:x="115984" fg:w="46"/><text x="98.7753%" y="1311.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (39,163 samples, 33.27%)</title><rect x="65.2982%" y="1333" width="33.2679%" height="15" fill="rgb(210,130,5)" fg:x="76869" fg:w="39163"/><text x="65.5482%" y="1343.50">leveldb::DBImpl::BackgroundCompaction</text></g><g><title>leveldb::InternalKeyComparator::Compare (36 samples, 0.03%)</title><rect x="98.6239%" y="1237" width="0.0306%" height="15" fill="rgb(233,87,49)" fg:x="116100" fg:w="36"/><text x="98.8739%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (75 samples, 0.06%)</title><rect x="98.5916%" y="1253" width="0.0637%" height="15" fill="rgb(243,34,9)" fg:x="116062" fg:w="75"/><text x="98.8416%" y="1263.50"></text></g><g><title>leveldb::BlockBuilder::Add (101 samples, 0.09%)</title><rect x="98.5890%" y="1269" width="0.0858%" height="15" fill="rgb(235,225,10)" fg:x="116059" fg:w="101"/><text x="98.8390%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (14 samples, 0.01%)</title><rect x="98.6791%" y="1237" width="0.0119%" height="15" fill="rgb(212,0,30)" fg:x="116165" fg:w="14"/><text x="98.9291%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (21 samples, 0.02%)</title><rect x="98.6782%" y="1269" width="0.0178%" height="15" fill="rgb(211,177,0)" fg:x="116164" fg:w="21"/><text x="98.9282%" y="1279.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (21 samples, 0.02%)</title><rect x="98.6782%" y="1253" width="0.0178%" height="15" fill="rgb(225,220,11)" fg:x="116164" fg:w="21"/><text x="98.9282%" y="1263.50"></text></g><g><title>[[ext4]] (19 samples, 0.02%)</title><rect x="98.7147%" y="1093" width="0.0161%" height="15" fill="rgb(215,10,13)" fg:x="116207" fg:w="19"/><text x="98.9647%" y="1103.50"></text></g><g><title>[[ext4]] (28 samples, 0.02%)</title><rect x="98.7139%" y="1125" width="0.0238%" height="15" fill="rgb(240,177,14)" fg:x="116206" fg:w="28"/><text x="98.9639%" y="1135.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="98.7139%" y="1109" width="0.0238%" height="15" fill="rgb(243,7,39)" fg:x="116206" fg:w="28"/><text x="98.9639%" y="1119.50"></text></g><g><title>Flush (36 samples, 0.03%)</title><rect x="98.7097%" y="1253" width="0.0306%" height="15" fill="rgb(212,99,0)" fg:x="116201" fg:w="36"/><text x="98.9597%" y="1263.50"></text></g><g><title>FlushBuffer (36 samples, 0.03%)</title><rect x="98.7097%" y="1237" width="0.0306%" height="15" fill="rgb(225,162,48)" fg:x="116201" fg:w="36"/><text x="98.9597%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (36 samples, 0.03%)</title><rect x="98.7097%" y="1221" width="0.0306%" height="15" fill="rgb(246,16,25)" fg:x="116201" fg:w="36"/><text x="98.9597%" y="1231.50"></text></g><g><title>__GI___libc_write (36 samples, 0.03%)</title><rect x="98.7097%" y="1205" width="0.0306%" height="15" fill="rgb(220,150,2)" fg:x="116201" fg:w="36"/><text x="98.9597%" y="1215.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="98.7097%" y="1189" width="0.0306%" height="15" fill="rgb(237,113,11)" fg:x="116201" fg:w="36"/><text x="98.9597%" y="1199.50"></text></g><g><title>[unknown] (33 samples, 0.03%)</title><rect x="98.7122%" y="1173" width="0.0280%" height="15" fill="rgb(236,70,20)" fg:x="116204" fg:w="33"/><text x="98.9622%" y="1183.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="98.7130%" y="1157" width="0.0272%" height="15" fill="rgb(234,94,7)" fg:x="116205" fg:w="32"/><text x="98.9630%" y="1167.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="98.7139%" y="1141" width="0.0263%" height="15" fill="rgb(250,221,0)" fg:x="116206" fg:w="31"/><text x="98.9639%" y="1151.50"></text></g><g><title>leveldb::TableBuilder::Flush (37 samples, 0.03%)</title><rect x="98.7097%" y="1269" width="0.0314%" height="15" fill="rgb(245,149,46)" fg:x="116201" fg:w="37"/><text x="98.9597%" y="1279.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (198 samples, 0.17%)</title><rect x="98.5746%" y="1317" width="0.1682%" height="15" fill="rgb(215,37,27)" fg:x="116042" fg:w="198"/><text x="98.8246%" y="1327.50"></text></g><g><title>leveldb::BuildTable (198 samples, 0.17%)</title><rect x="98.5746%" y="1301" width="0.1682%" height="15" fill="rgb(232,65,3)" fg:x="116042" fg:w="198"/><text x="98.8246%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::Add (184 samples, 0.16%)</title><rect x="98.5865%" y="1285" width="0.1563%" height="15" fill="rgb(214,2,16)" fg:x="116056" fg:w="184"/><text x="98.8365%" y="1295.50"></text></g><g><title>execute_native_thread_routine (39,372 samples, 33.45%)</title><rect x="65.2982%" y="1397" width="33.4455%" height="15" fill="rgb(227,131,50)" fg:x="76869" fg:w="39372"/><text x="65.5482%" y="1407.50">execute_native_thread_routine</text></g><g><title>BackgroundThreadEntryPoint (39,372 samples, 33.45%)</title><rect x="65.2982%" y="1381" width="33.4455%" height="15" fill="rgb(247,131,45)" fg:x="76869" fg:w="39372"/><text x="65.5482%" y="1391.50">BackgroundThreadEntryPoint</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (39,372 samples, 33.45%)</title><rect x="65.2982%" y="1365" width="33.4455%" height="15" fill="rgb(215,97,47)" fg:x="76869" fg:w="39372"/><text x="65.5482%" y="1375.50">leveldb::(anonymous namespace)::PosixEnv::BackgroundTh..</text></g><g><title>leveldb::DBImpl::BackgroundCall (39,372 samples, 33.45%)</title><rect x="65.2982%" y="1349" width="33.4455%" height="15" fill="rgb(233,143,12)" fg:x="76869" fg:w="39372"/><text x="65.5482%" y="1359.50">leveldb::DBImpl::BackgroundCall</text></g><g><title>leveldb::DBImpl::CompactMemTable (209 samples, 0.18%)</title><rect x="98.5661%" y="1333" width="0.1775%" height="15" fill="rgb(222,57,17)" fg:x="116032" fg:w="209"/><text x="98.8161%" y="1343.50"></text></g><g><title>__clone (39,381 samples, 33.45%)</title><rect x="65.2914%" y="1429" width="33.4531%" height="15" fill="rgb(214,119,38)" fg:x="76861" fg:w="39381"/><text x="65.5414%" y="1439.50">__clone</text></g><g><title>start_thread (39,381 samples, 33.45%)</title><rect x="65.2914%" y="1413" width="33.4531%" height="15" fill="rgb(217,28,47)" fg:x="76861" fg:w="39381"/><text x="65.5414%" y="1423.50">start_thread</text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (17 samples, 0.01%)</title><rect x="98.7462%" y="1237" width="0.0144%" height="15" fill="rgb(231,14,52)" fg:x="116244" fg:w="17"/><text x="98.9962%" y="1247.50"></text></g><g><title>__libc_start_call_main (22 samples, 0.02%)</title><rect x="98.7445%" y="1429" width="0.0187%" height="15" fill="rgb(220,158,18)" fg:x="116242" fg:w="22"/><text x="98.9945%" y="1439.50"></text></g><g><title>main (22 samples, 0.02%)</title><rect x="98.7445%" y="1413" width="0.0187%" height="15" fill="rgb(222,143,46)" fg:x="116242" fg:w="22"/><text x="98.9945%" y="1423.50"></text></g><g><title>main (22 samples, 0.02%)</title><rect x="98.7445%" y="1397" width="0.0187%" height="15" fill="rgb(227,165,5)" fg:x="116242" fg:w="22"/><text x="98.9945%" y="1407.50"></text></g><g><title>AppInitMain (22 samples, 0.02%)</title><rect x="98.7445%" y="1381" width="0.0187%" height="15" fill="rgb(216,222,49)" fg:x="116242" fg:w="22"/><text x="98.9945%" y="1391.50"></text></g><g><title>InitAndLoadChainstate (22 samples, 0.02%)</title><rect x="98.7445%" y="1365" width="0.0187%" height="15" fill="rgb(238,73,39)" fg:x="116242" fg:w="22"/><text x="98.9945%" y="1375.50"></text></g><g><title>operator (22 samples, 0.02%)</title><rect x="98.7445%" y="1349" width="0.0187%" height="15" fill="rgb(252,115,9)" fg:x="116242" fg:w="22"/><text x="98.9945%" y="1359.50"></text></g><g><title>InitAndLoadChainstate (22 samples, 0.02%)</title><rect x="98.7445%" y="1333" width="0.0187%" height="15" fill="rgb(238,202,4)" fg:x="116242" fg:w="22"/><text x="98.9945%" y="1343.50"></text></g><g><title>node::LoadChainstate (22 samples, 0.02%)</title><rect x="98.7445%" y="1317" width="0.0187%" height="15" fill="rgb(252,153,44)" fg:x="116242" fg:w="22"/><text x="98.9945%" y="1327.50"></text></g><g><title>node::CompleteChainstateInitialization (20 samples, 0.02%)</title><rect x="98.7462%" y="1301" width="0.0170%" height="15" fill="rgb(235,128,27)" fg:x="116244" fg:w="20"/><text x="98.9962%" y="1311.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (20 samples, 0.02%)</title><rect x="98.7462%" y="1285" width="0.0170%" height="15" fill="rgb(221,121,47)" fg:x="116244" fg:w="20"/><text x="98.9962%" y="1295.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (20 samples, 0.02%)</title><rect x="98.7462%" y="1269" width="0.0170%" height="15" fill="rgb(247,211,47)" fg:x="116244" fg:w="20"/><text x="98.9962%" y="1279.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (20 samples, 0.02%)</title><rect x="98.7462%" y="1253" width="0.0170%" height="15" fill="rgb(252,47,49)" fg:x="116244" fg:w="20"/><text x="98.9962%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (27 samples, 0.02%)</title><rect x="98.8362%" y="1157" width="0.0229%" height="15" fill="rgb(219,119,53)" fg:x="116350" fg:w="27"/><text x="99.0862%" y="1167.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (54 samples, 0.05%)</title><rect x="98.8150%" y="1173" width="0.0459%" height="15" fill="rgb(243,165,53)" fg:x="116325" fg:w="54"/><text x="99.0650%" y="1183.50"></text></g><g><title>GetBlockProof (80 samples, 0.07%)</title><rect x="98.8141%" y="1205" width="0.0680%" height="15" fill="rgb(230,12,35)" fg:x="116324" fg:w="80"/><text x="99.0641%" y="1215.50"></text></g><g><title>operator/ (80 samples, 0.07%)</title><rect x="98.8141%" y="1189" width="0.0680%" height="15" fill="rgb(239,57,49)" fg:x="116324" fg:w="80"/><text x="99.0641%" y="1199.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (24 samples, 0.02%)</title><rect x="98.8617%" y="1173" width="0.0204%" height="15" fill="rgb(231,154,7)" fg:x="116380" fg:w="24"/><text x="99.1117%" y="1183.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (12 samples, 0.01%)</title><rect x="98.8855%" y="1189" width="0.0102%" height="15" fill="rgb(248,81,34)" fg:x="116408" fg:w="12"/><text x="99.1355%" y="1199.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (42 samples, 0.04%)</title><rect x="98.8846%" y="1205" width="0.0357%" height="15" fill="rgb(247,9,5)" fg:x="116407" fg:w="42"/><text x="99.1346%" y="1215.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (12 samples, 0.01%)</title><rect x="98.9101%" y="1189" width="0.0102%" height="15" fill="rgb(228,172,27)" fg:x="116437" fg:w="12"/><text x="99.1601%" y="1199.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (150 samples, 0.13%)</title><rect x="98.8133%" y="1221" width="0.1274%" height="15" fill="rgb(230,57,44)" fg:x="116323" fg:w="150"/><text x="99.0633%" y="1231.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (159 samples, 0.14%)</title><rect x="98.8073%" y="1237" width="0.1351%" height="15" fill="rgb(249,35,22)" fg:x="116316" fg:w="159"/><text x="99.0573%" y="1247.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (184 samples, 0.16%)</title><rect x="98.7997%" y="1253" width="0.1563%" height="15" fill="rgb(250,137,27)" fg:x="116307" fg:w="184"/><text x="99.0497%" y="1263.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (15 samples, 0.01%)</title><rect x="98.9433%" y="1237" width="0.0127%" height="15" fill="rgb(251,57,31)" fg:x="116476" fg:w="15"/><text x="99.1933%" y="1247.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (15 samples, 0.01%)</title><rect x="98.9433%" y="1221" width="0.0127%" height="15" fill="rgb(238,60,0)" fg:x="116476" fg:w="15"/><text x="99.1933%" y="1231.50"></text></g><g><title>operator (197 samples, 0.17%)</title><rect x="98.7920%" y="1317" width="0.1673%" height="15" fill="rgb(242,185,39)" fg:x="116298" fg:w="197"/><text x="99.0420%" y="1327.50"></text></g><g><title>InitAndLoadChainstate (197 samples, 0.17%)</title><rect x="98.7920%" y="1301" width="0.1673%" height="15" fill="rgb(240,63,43)" fg:x="116298" fg:w="197"/><text x="99.0420%" y="1311.50"></text></g><g><title>node::LoadChainstate (197 samples, 0.17%)</title><rect x="98.7920%" y="1285" width="0.1673%" height="15" fill="rgb(236,155,6)" fg:x="116298" fg:w="197"/><text x="99.0420%" y="1295.50"></text></g><g><title>node::CompleteChainstateInitialization (196 samples, 0.17%)</title><rect x="98.7929%" y="1269" width="0.1665%" height="15" fill="rgb(215,11,29)" fg:x="116299" fg:w="196"/><text x="99.0429%" y="1279.50"></text></g><g><title>main (198 samples, 0.17%)</title><rect x="98.7920%" y="1365" width="0.1682%" height="15" fill="rgb(228,180,48)" fg:x="116298" fg:w="198"/><text x="99.0420%" y="1375.50"></text></g><g><title>AppInitMain (198 samples, 0.17%)</title><rect x="98.7920%" y="1349" width="0.1682%" height="15" fill="rgb(241,102,12)" fg:x="116298" fg:w="198"/><text x="99.0420%" y="1359.50"></text></g><g><title>InitAndLoadChainstate (198 samples, 0.17%)</title><rect x="98.7920%" y="1333" width="0.1682%" height="15" fill="rgb(246,213,4)" fg:x="116298" fg:w="198"/><text x="99.0420%" y="1343.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (212 samples, 0.18%)</title><rect x="98.7836%" y="1413" width="0.1801%" height="15" fill="rgb(218,134,35)" fg:x="116288" fg:w="212"/><text x="99.0336%" y="1423.50"></text></g><g><title>__libc_start_call_main (212 samples, 0.18%)</title><rect x="98.7836%" y="1397" width="0.1801%" height="15" fill="rgb(251,117,35)" fg:x="116288" fg:w="212"/><text x="99.0336%" y="1407.50"></text></g><g><title>main (212 samples, 0.18%)</title><rect x="98.7836%" y="1381" width="0.1801%" height="15" fill="rgb(206,156,45)" fg:x="116288" fg:w="212"/><text x="99.0336%" y="1391.50"></text></g><g><title>_start (213 samples, 0.18%)</title><rect x="98.7836%" y="1429" width="0.1809%" height="15" fill="rgb(218,52,27)" fg:x="116288" fg:w="213"/><text x="99.0336%" y="1439.50"></text></g><g><title>_mm_crc32_u64 (61 samples, 0.05%)</title><rect x="99.0588%" y="1413" width="0.0518%" height="15" fill="rgb(238,83,36)" fg:x="116612" fg:w="61"/><text x="99.3088%" y="1423.50"></text></g><g><title>crc32c::ExtendSse42 (167 samples, 0.14%)</title><rect x="98.9704%" y="1429" width="0.1419%" height="15" fill="rgb(218,53,43)" fg:x="116508" fg:w="167"/><text x="99.2204%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (36 samples, 0.03%)</title><rect x="99.1131%" y="1397" width="0.0306%" height="15" fill="rgb(239,54,39)" fg:x="116676" fg:w="36"/><text x="99.3631%" y="1407.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (19 samples, 0.02%)</title><rect x="99.1718%" y="1397" width="0.0161%" height="15" fill="rgb(212,198,13)" fg:x="116745" fg:w="19"/><text x="99.4218%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (92 samples, 0.08%)</title><rect x="99.1131%" y="1429" width="0.0782%" height="15" fill="rgb(234,54,46)" fg:x="116676" fg:w="92"/><text x="99.3631%" y="1439.50"></text></g><g><title>leveldb::Slice::compare (92 samples, 0.08%)</title><rect x="99.1131%" y="1413" width="0.0782%" height="15" fill="rgb(217,120,7)" fg:x="116676" fg:w="92"/><text x="99.3631%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (23 samples, 0.02%)</title><rect x="99.1913%" y="1429" width="0.0195%" height="15" fill="rgb(246,39,15)" fg:x="116768" fg:w="23"/><text x="99.4413%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (12 samples, 0.01%)</title><rect x="99.2108%" y="1429" width="0.0102%" height="15" fill="rgb(242,143,31)" fg:x="116791" fg:w="12"/><text x="99.4608%" y="1439.50"></text></g><g><title>leveldb::EncodeVarint32 (183 samples, 0.16%)</title><rect x="99.2839%" y="1397" width="0.1555%" height="15" fill="rgb(252,60,24)" fg:x="116877" fg:w="183"/><text x="99.5339%" y="1407.50"></text></g><g><title>leveldb::operator== (384 samples, 0.33%)</title><rect x="99.2712%" y="1413" width="0.3262%" height="15" fill="rgb(249,220,7)" fg:x="116862" fg:w="384"/><text x="99.5212%" y="1423.50"></text></g><g><title>leveldb::PutVarint32 (186 samples, 0.16%)</title><rect x="99.4393%" y="1397" width="0.1580%" height="15" fill="rgb(236,67,13)" fg:x="117060" fg:w="186"/><text x="99.6893%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (37 samples, 0.03%)</title><rect x="99.5990%" y="1333" width="0.0314%" height="15" fill="rgb(210,62,39)" fg:x="117248" fg:w="37"/><text x="99.8490%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (25 samples, 0.02%)</title><rect x="99.6330%" y="1333" width="0.0212%" height="15" fill="rgb(219,122,53)" fg:x="117288" fg:w="25"/><text x="99.8830%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (471 samples, 0.40%)</title><rect x="99.2618%" y="1429" width="0.4001%" height="15" fill="rgb(218,87,25)" fg:x="116851" fg:w="471"/><text x="99.5118%" y="1439.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (76 samples, 0.06%)</title><rect x="99.5973%" y="1413" width="0.0646%" height="15" fill="rgb(234,179,48)" fg:x="117246" fg:w="76"/><text x="99.8473%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (76 samples, 0.06%)</title><rect x="99.5973%" y="1397" width="0.0646%" height="15" fill="rgb(248,90,0)" fg:x="117246" fg:w="76"/><text x="99.8473%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (75 samples, 0.06%)</title><rect x="99.5982%" y="1381" width="0.0637%" height="15" fill="rgb(207,228,37)" fg:x="117247" fg:w="75"/><text x="99.8482%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (75 samples, 0.06%)</title><rect x="99.5982%" y="1365" width="0.0637%" height="15" fill="rgb(235,214,15)" fg:x="117247" fg:w="75"/><text x="99.8482%" y="1375.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (75 samples, 0.06%)</title><rect x="99.5982%" y="1349" width="0.0637%" height="15" fill="rgb(210,144,39)" fg:x="117247" fg:w="75"/><text x="99.8482%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (19 samples, 0.02%)</title><rect x="99.6840%" y="1413" width="0.0161%" height="15" fill="rgb(222,67,41)" fg:x="117348" fg:w="19"/><text x="99.9340%" y="1423.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (81 samples, 0.07%)</title><rect x="99.6636%" y="1429" width="0.0688%" height="15" fill="rgb(205,35,37)" fg:x="117324" fg:w="81"/><text x="99.9136%" y="1439.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (12 samples, 0.01%)</title><rect x="99.7222%" y="1413" width="0.0102%" height="15" fill="rgb(216,125,40)" fg:x="117393" fg:w="12"/><text x="99.9722%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (12 samples, 0.01%)</title><rect x="99.7222%" y="1397" width="0.0102%" height="15" fill="rgb(228,227,20)" fg:x="117393" fg:w="12"/><text x="99.9722%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (12 samples, 0.01%)</title><rect x="99.7222%" y="1381" width="0.0102%" height="15" fill="rgb(242,173,45)" fg:x="117393" fg:w="12"/><text x="99.9722%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (12 samples, 0.01%)</title><rect x="99.7222%" y="1365" width="0.0102%" height="15" fill="rgb(215,79,24)" fg:x="117393" fg:w="12"/><text x="99.9722%" y="1375.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (12 samples, 0.01%)</title><rect x="99.7222%" y="1349" width="0.0102%" height="15" fill="rgb(238,164,38)" fg:x="117393" fg:w="12"/><text x="99.9722%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (23 samples, 0.02%)</title><rect x="99.7350%" y="1333" width="0.0195%" height="15" fill="rgb(245,196,38)" fg:x="117408" fg:w="23"/><text x="99.9850%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::value (22 samples, 0.02%)</title><rect x="99.7545%" y="1333" width="0.0187%" height="15" fill="rgb(231,217,29)" fg:x="117431" fg:w="22"/><text x="100.0045%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (52 samples, 0.04%)</title><rect x="99.7324%" y="1429" width="0.0442%" height="15" fill="rgb(245,6,4)" fg:x="117405" fg:w="52"/><text x="99.9824%" y="1439.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (52 samples, 0.04%)</title><rect x="99.7324%" y="1413" width="0.0442%" height="15" fill="rgb(214,76,49)" fg:x="117405" fg:w="52"/><text x="99.9824%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (52 samples, 0.04%)</title><rect x="99.7324%" y="1397" width="0.0442%" height="15" fill="rgb(205,96,12)" fg:x="117405" fg:w="52"/><text x="99.9824%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (52 samples, 0.04%)</title><rect x="99.7324%" y="1381" width="0.0442%" height="15" fill="rgb(243,131,4)" fg:x="117405" fg:w="52"/><text x="99.9824%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (52 samples, 0.04%)</title><rect x="99.7324%" y="1365" width="0.0442%" height="15" fill="rgb(214,114,4)" fg:x="117405" fg:w="52"/><text x="99.9824%" y="1375.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (52 samples, 0.04%)</title><rect x="99.7324%" y="1349" width="0.0442%" height="15" fill="rgb(234,215,15)" fg:x="117405" fg:w="52"/><text x="99.9824%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (23 samples, 0.02%)</title><rect x="99.7766%" y="1429" width="0.0195%" height="15" fill="rgb(250,216,45)" fg:x="117457" fg:w="23"/><text x="100.0266%" y="1439.50"></text></g><g><title>leveldb::ReadBlock (16 samples, 0.01%)</title><rect x="99.8182%" y="1429" width="0.0136%" height="15" fill="rgb(236,128,4)" fg:x="117506" fg:w="16"/><text x="100.0682%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (25 samples, 0.02%)</title><rect x="99.8454%" y="1413" width="0.0212%" height="15" fill="rgb(234,50,33)" fg:x="117538" fg:w="25"/><text x="100.0954%" y="1423.50"></text></g><g><title>leveldb::TableBuilder::Add (62 samples, 0.05%)</title><rect x="99.8386%" y="1429" width="0.0527%" height="15" fill="rgb(253,131,37)" fg:x="117530" fg:w="62"/><text x="100.0886%" y="1439.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (21 samples, 0.02%)</title><rect x="99.8947%" y="1205" width="0.0178%" height="15" fill="rgb(218,55,27)" fg:x="117596" fg:w="21"/><text x="100.1447%" y="1215.50"></text></g><g><title>leveldb::BuildTable (21 samples, 0.02%)</title><rect x="99.8947%" y="1189" width="0.0178%" height="15" fill="rgb(241,220,28)" fg:x="117596" fg:w="21"/><text x="100.1447%" y="1199.50"></text></g><g><title>leveldb::TableBuilder::Add (15 samples, 0.01%)</title><rect x="99.8998%" y="1173" width="0.0127%" height="15" fill="rgb(241,90,48)" fg:x="117602" fg:w="15"/><text x="100.1498%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (23 samples, 0.02%)</title><rect x="99.9269%" y="1093" width="0.0195%" height="15" fill="rgb(216,43,37)" fg:x="117634" fg:w="23"/><text x="100.1769%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (26 samples, 0.02%)</title><rect x="99.9269%" y="1109" width="0.0221%" height="15" fill="rgb(207,173,9)" fg:x="117634" fg:w="26"/><text x="100.1769%" y="1119.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (30 samples, 0.03%)</title><rect x="99.9269%" y="1125" width="0.0255%" height="15" fill="rgb(240,126,30)" fg:x="117634" fg:w="30"/><text x="100.1769%" y="1135.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (49 samples, 0.04%)</title><rect x="99.9125%" y="1205" width="0.0416%" height="15" fill="rgb(228,178,53)" fg:x="117617" fg:w="49"/><text x="100.1625%" y="1215.50"></text></g><g><title>leveldb::WriteBatch::Iterate (49 samples, 0.04%)</title><rect x="99.9125%" y="1189" width="0.0416%" height="15" fill="rgb(217,33,4)" fg:x="117617" fg:w="49"/><text x="100.1625%" y="1199.50"></text></g><g><title>leveldb::WriteBatch::Iterate (48 samples, 0.04%)</title><rect x="99.9134%" y="1173" width="0.0408%" height="15" fill="rgb(206,124,34)" fg:x="117618" fg:w="48"/><text x="100.1634%" y="1183.50"></text></g><g><title>leveldb::MemTable::Add (47 samples, 0.04%)</title><rect x="99.9142%" y="1157" width="0.0399%" height="15" fill="rgb(208,122,53)" fg:x="117619" fg:w="47"/><text x="100.1642%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (42 samples, 0.04%)</title><rect x="99.9185%" y="1141" width="0.0357%" height="15" fill="rgb(215,202,26)" fg:x="117624" fg:w="42"/><text x="100.1685%" y="1151.50"></text></g><g><title>CompleteChainstateInitialization (81 samples, 0.07%)</title><rect x="99.8947%" y="1317" width="0.0688%" height="15" fill="rgb(232,198,31)" fg:x="117596" fg:w="81"/><text x="100.1447%" y="1327.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (81 samples, 0.07%)</title><rect x="99.8947%" y="1301" width="0.0688%" height="15" fill="rgb(222,23,35)" fg:x="117596" fg:w="81"/><text x="100.1447%" y="1311.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (81 samples, 0.07%)</title><rect x="99.8947%" y="1285" width="0.0688%" height="15" fill="rgb(242,27,53)" fg:x="117596" fg:w="81"/><text x="100.1447%" y="1295.50"></text></g><g><title>CDBWrapper::CDBWrapper (81 samples, 0.07%)</title><rect x="99.8947%" y="1269" width="0.0688%" height="15" fill="rgb(210,216,42)" fg:x="117596" fg:w="81"/><text x="100.1447%" y="1279.50"></text></g><g><title>leveldb::DB::Open (81 samples, 0.07%)</title><rect x="99.8947%" y="1253" width="0.0688%" height="15" fill="rgb(234,39,38)" fg:x="117596" fg:w="81"/><text x="100.1447%" y="1263.50"></text></g><g><title>leveldb::DBImpl::Recover (81 samples, 0.07%)</title><rect x="99.8947%" y="1237" width="0.0688%" height="15" fill="rgb(235,126,54)" fg:x="117596" fg:w="81"/><text x="100.1447%" y="1247.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (81 samples, 0.07%)</title><rect x="99.8947%" y="1221" width="0.0688%" height="15" fill="rgb(235,150,33)" fg:x="117596" fg:w="81"/><text x="100.1447%" y="1231.50"></text></g><g><title>main (89 samples, 0.08%)</title><rect x="99.8947%" y="1429" width="0.0756%" height="15" fill="rgb(249,49,53)" fg:x="117596" fg:w="89"/><text x="100.1447%" y="1439.50"></text></g><g><title>main (89 samples, 0.08%)</title><rect x="99.8947%" y="1413" width="0.0756%" height="15" fill="rgb(238,60,50)" fg:x="117596" fg:w="89"/><text x="100.1447%" y="1423.50"></text></g><g><title>AppInitMain (89 samples, 0.08%)</title><rect x="99.8947%" y="1397" width="0.0756%" height="15" fill="rgb(210,5,2)" fg:x="117596" fg:w="89"/><text x="100.1447%" y="1407.50"></text></g><g><title>InitAndLoadChainstate (89 samples, 0.08%)</title><rect x="99.8947%" y="1381" width="0.0756%" height="15" fill="rgb(214,207,24)" fg:x="117596" fg:w="89"/><text x="100.1447%" y="1391.50"></text></g><g><title>operator (89 samples, 0.08%)</title><rect x="99.8947%" y="1365" width="0.0756%" height="15" fill="rgb(228,173,2)" fg:x="117596" fg:w="89"/><text x="100.1447%" y="1375.50"></text></g><g><title>InitAndLoadChainstate (89 samples, 0.08%)</title><rect x="99.8947%" y="1349" width="0.0756%" height="15" fill="rgb(244,26,8)" fg:x="117596" fg:w="89"/><text x="100.1447%" y="1359.50"></text></g><g><title>node::LoadChainstate (89 samples, 0.08%)</title><rect x="99.8947%" y="1333" width="0.0756%" height="15" fill="rgb(249,153,35)" fg:x="117596" fg:w="89"/><text x="100.1447%" y="1343.50"></text></g><g><title>bitcoind-base (46,253 samples, 39.29%)</title><rect x="60.7017%" y="1445" width="39.2907%" height="15" fill="rgb(221,215,40)" fg:x="71458" fg:w="46253"/><text x="60.9517%" y="1455.50">bitcoind-base</text></g><g><title>all (117,720 samples, 100%)</title><rect x="0.0000%" y="1461" width="100.0000%" height="15" fill="rgb(238,106,35)" fg:x="0" fg:w="117720"/><text x="0.2500%" y="1471.50"></text></g></svg></svg>