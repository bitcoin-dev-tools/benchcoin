<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1606" onload="init(evt)" viewBox="0 0 1200 1606" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1606" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1589.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1589.00"> </text><svg id="frames" x="10" width="1180" total_samples="5417"><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="0.0185%" y="1509" width="0.0185%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.2685%" y="1519.50"></text></g><g><title>AddCoins (4 samples, 0.07%)</title><rect x="0.0000%" y="1525" width="0.0738%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1535.50"></text></g><g><title>Coin::Coin (2 samples, 0.04%)</title><rect x="0.0369%" y="1509" width="0.0369%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.2869%" y="1519.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.04%)</title><rect x="0.0369%" y="1493" width="0.0369%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="0.2869%" y="1503.50"></text></g><g><title>CScript::CScript (2 samples, 0.04%)</title><rect x="0.0369%" y="1477" width="0.0369%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="0.2869%" y="1487.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.04%)</title><rect x="0.0369%" y="1461" width="0.0369%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="2"/><text x="0.2869%" y="1471.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.02%)</title><rect x="0.0554%" y="1445" width="0.0185%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.3054%" y="1455.50"></text></g><g><title>Span&lt;std::byte const&gt;::Span&lt;std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="0.7015%" y="1509" width="0.0185%" height="15" fill="rgb(228,23,34)" fg:x="38" fg:w="1"/><text x="0.9515%" y="1519.50"></text></g><g><title>std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt;::data (1 samples, 0.02%)</title><rect x="0.7015%" y="1493" width="0.0185%" height="15" fill="rgb(218,30,26)" fg:x="38" fg:w="1"/><text x="0.9515%" y="1503.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="0.7200%" y="1509" width="0.0369%" height="15" fill="rgb(220,122,19)" fg:x="39" fg:w="2"/><text x="0.9700%" y="1519.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (18 samples, 0.33%)</title><rect x="0.7569%" y="1509" width="0.3323%" height="15" fill="rgb(250,228,42)" fg:x="41" fg:w="18"/><text x="1.0069%" y="1519.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (18 samples, 0.33%)</title><rect x="0.7569%" y="1493" width="0.3323%" height="15" fill="rgb(240,193,28)" fg:x="41" fg:w="18"/><text x="1.0069%" y="1503.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (18 samples, 0.33%)</title><rect x="0.7569%" y="1477" width="0.3323%" height="15" fill="rgb(216,20,37)" fg:x="41" fg:w="18"/><text x="1.0069%" y="1487.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (18 samples, 0.33%)</title><rect x="0.7569%" y="1461" width="0.3323%" height="15" fill="rgb(206,188,39)" fg:x="41" fg:w="18"/><text x="1.0069%" y="1471.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (18 samples, 0.33%)</title><rect x="0.7569%" y="1445" width="0.3323%" height="15" fill="rgb(217,207,13)" fg:x="41" fg:w="18"/><text x="1.0069%" y="1455.50"></text></g><g><title>void std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;std::byte, std::byte const&gt; (5 samples, 0.09%)</title><rect x="0.9969%" y="1429" width="0.0923%" height="15" fill="rgb(231,73,38)" fg:x="54" fg:w="5"/><text x="1.2469%" y="1439.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="1.0892%" y="1509" width="0.0369%" height="15" fill="rgb(225,20,46)" fg:x="59" fg:w="2"/><text x="1.3392%" y="1519.50"></text></g><g><title>AutoFile::write (151 samples, 2.79%)</title><rect x="0.0738%" y="1525" width="2.7875%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="151"/><text x="0.3238%" y="1535.50">Au..</text></g><g><title>util::Xor (94 samples, 1.74%)</title><rect x="1.1261%" y="1509" width="1.7353%" height="15" fill="rgb(221,200,47)" fg:x="61" fg:w="94"/><text x="1.3761%" y="1519.50"></text></g><g><title>std::operator^= (31 samples, 0.57%)</title><rect x="2.2891%" y="1493" width="0.5723%" height="15" fill="rgb(226,26,5)" fg:x="124" fg:w="31"/><text x="2.5391%" y="1503.50"></text></g><g><title>std::operator^ (31 samples, 0.57%)</title><rect x="2.2891%" y="1477" width="0.5723%" height="15" fill="rgb(249,33,26)" fg:x="124" fg:w="31"/><text x="2.5391%" y="1487.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="2.8614%" y="1525" width="0.0185%" height="15" fill="rgb(235,183,28)" fg:x="155" fg:w="1"/><text x="3.1114%" y="1535.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.8614%" y="1509" width="0.0185%" height="15" fill="rgb(221,5,38)" fg:x="155" fg:w="1"/><text x="3.1114%" y="1519.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.8614%" y="1493" width="0.0185%" height="15" fill="rgb(247,18,42)" fg:x="155" fg:w="1"/><text x="3.1114%" y="1503.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.8614%" y="1477" width="0.0185%" height="15" fill="rgb(241,131,45)" fg:x="155" fg:w="1"/><text x="3.1114%" y="1487.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.8614%" y="1461" width="0.0185%" height="15" fill="rgb(249,31,29)" fg:x="155" fg:w="1"/><text x="3.1114%" y="1471.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="2.8614%" y="1445" width="0.0185%" height="15" fill="rgb(225,111,53)" fg:x="155" fg:w="1"/><text x="3.1114%" y="1455.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="2.8798%" y="1525" width="0.0185%" height="15" fill="rgb(238,160,17)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1535.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="2.8798%" y="1509" width="0.0185%" height="15" fill="rgb(214,148,48)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1519.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="2.8798%" y="1493" width="0.0185%" height="15" fill="rgb(232,36,49)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1503.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="2.8798%" y="1477" width="0.0185%" height="15" fill="rgb(209,103,24)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1487.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="2.8798%" y="1461" width="0.0185%" height="15" fill="rgb(229,88,8)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1471.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="2.8798%" y="1445" width="0.0185%" height="15" fill="rgb(213,181,19)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1455.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="2.8798%" y="1429" width="0.0185%" height="15" fill="rgb(254,191,54)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1439.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="2.8798%" y="1413" width="0.0185%" height="15" fill="rgb(241,83,37)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1423.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="2.8798%" y="1397" width="0.0185%" height="15" fill="rgb(233,36,39)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1407.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="2.8798%" y="1381" width="0.0185%" height="15" fill="rgb(226,3,54)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1391.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="2.8798%" y="1365" width="0.0185%" height="15" fill="rgb(245,192,40)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1375.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="2.8798%" y="1349" width="0.0185%" height="15" fill="rgb(238,167,29)" fg:x="156" fg:w="1"/><text x="3.1298%" y="1359.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="2.8983%" y="1525" width="0.0185%" height="15" fill="rgb(232,182,51)" fg:x="157" fg:w="1"/><text x="3.1483%" y="1535.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="2.8983%" y="1509" width="0.0185%" height="15" fill="rgb(231,60,39)" fg:x="157" fg:w="1"/><text x="3.1483%" y="1519.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="2.8983%" y="1493" width="0.0185%" height="15" fill="rgb(208,69,12)" fg:x="157" fg:w="1"/><text x="3.1483%" y="1503.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="2.8983%" y="1477" width="0.0185%" height="15" fill="rgb(235,93,37)" fg:x="157" fg:w="1"/><text x="3.1483%" y="1487.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="2.8983%" y="1461" width="0.0185%" height="15" fill="rgb(213,116,39)" fg:x="157" fg:w="1"/><text x="3.1483%" y="1471.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="2.8983%" y="1445" width="0.0185%" height="15" fill="rgb(222,207,29)" fg:x="157" fg:w="1"/><text x="3.1483%" y="1455.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="2.9167%" y="1525" width="0.0185%" height="15" fill="rgb(206,96,30)" fg:x="158" fg:w="1"/><text x="3.1667%" y="1535.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="2.9352%" y="1525" width="0.0185%" height="15" fill="rgb(218,138,4)" fg:x="159" fg:w="1"/><text x="3.1852%" y="1535.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="2.9352%" y="1509" width="0.0185%" height="15" fill="rgb(250,191,14)" fg:x="159" fg:w="1"/><text x="3.1852%" y="1519.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="2.9537%" y="1525" width="0.0185%" height="15" fill="rgb(239,60,40)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1535.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1509" width="0.0185%" height="15" fill="rgb(206,27,48)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1519.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1493" width="0.0185%" height="15" fill="rgb(225,35,8)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1503.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1477" width="0.0185%" height="15" fill="rgb(250,213,24)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1487.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1461" width="0.0185%" height="15" fill="rgb(247,123,22)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1471.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1445" width="0.0185%" height="15" fill="rgb(231,138,38)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1455.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1429" width="0.0185%" height="15" fill="rgb(231,145,46)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1439.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1413" width="0.0185%" height="15" fill="rgb(251,118,11)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1423.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1397" width="0.0185%" height="15" fill="rgb(217,147,25)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1407.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1381" width="0.0185%" height="15" fill="rgb(247,81,37)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9537%" y="1365" width="0.0185%" height="15" fill="rgb(209,12,38)" fg:x="160" fg:w="1"/><text x="3.2037%" y="1375.50"></text></g><g><title>CBlockUndo::~CBlockUndo (1 samples, 0.02%)</title><rect x="2.9721%" y="1509" width="0.0185%" height="15" fill="rgb(227,1,9)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1519.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="2.9721%" y="1493" width="0.0185%" height="15" fill="rgb(248,47,43)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1503.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="2.9721%" y="1477" width="0.0185%" height="15" fill="rgb(221,10,30)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1487.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (1 samples, 0.02%)</title><rect x="2.9721%" y="1461" width="0.0185%" height="15" fill="rgb(210,229,1)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1471.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (1 samples, 0.02%)</title><rect x="2.9721%" y="1445" width="0.0185%" height="15" fill="rgb(222,148,37)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1455.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (1 samples, 0.02%)</title><rect x="2.9721%" y="1429" width="0.0185%" height="15" fill="rgb(234,67,33)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1439.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (1 samples, 0.02%)</title><rect x="2.9721%" y="1413" width="0.0185%" height="15" fill="rgb(247,98,35)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1423.50"></text></g><g><title>CTxUndo::~CTxUndo (1 samples, 0.02%)</title><rect x="2.9721%" y="1397" width="0.0185%" height="15" fill="rgb(247,138,52)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1407.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="2.9721%" y="1381" width="0.0185%" height="15" fill="rgb(213,79,30)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (1 samples, 0.02%)</title><rect x="2.9721%" y="1365" width="0.0185%" height="15" fill="rgb(246,177,23)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1375.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (1 samples, 0.02%)</title><rect x="2.9721%" y="1349" width="0.0185%" height="15" fill="rgb(230,62,27)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1359.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (1 samples, 0.02%)</title><rect x="2.9721%" y="1333" width="0.0185%" height="15" fill="rgb(216,154,8)" fg:x="161" fg:w="1"/><text x="3.2221%" y="1343.50"></text></g><g><title>CCheckQueueControl&lt;CScriptCheck&gt;::Add (2 samples, 0.04%)</title><rect x="2.9906%" y="1509" width="0.0369%" height="15" fill="rgb(244,35,45)" fg:x="162" fg:w="2"/><text x="3.2406%" y="1519.50"></text></g><g><title>Chainstate::ConnectBlock (4 samples, 0.07%)</title><rect x="2.9721%" y="1525" width="0.0738%" height="15" fill="rgb(251,115,12)" fg:x="161" fg:w="4"/><text x="3.2221%" y="1535.50"></text></g><g><title>TxValidationState::TxValidationState (1 samples, 0.02%)</title><rect x="3.0275%" y="1509" width="0.0185%" height="15" fill="rgb(240,54,50)" fg:x="164" fg:w="1"/><text x="3.2775%" y="1519.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::ValidationState (1 samples, 0.02%)</title><rect x="3.0275%" y="1493" width="0.0185%" height="15" fill="rgb(233,84,52)" fg:x="164" fg:w="1"/><text x="3.2775%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="3.0275%" y="1477" width="0.0185%" height="15" fill="rgb(207,117,47)" fg:x="164" fg:w="1"/><text x="3.2775%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="3.0275%" y="1461" width="0.0185%" height="15" fill="rgb(249,43,39)" fg:x="164" fg:w="1"/><text x="3.2775%" y="1471.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (1 samples, 0.02%)</title><rect x="3.0275%" y="1445" width="0.0185%" height="15" fill="rgb(209,38,44)" fg:x="164" fg:w="1"/><text x="3.2775%" y="1455.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="3.0460%" y="965" width="0.1108%" height="15" fill="rgb(236,212,23)" fg:x="165" fg:w="6"/><text x="3.2960%" y="975.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (6 samples, 0.11%)</title><rect x="3.0460%" y="949" width="0.1108%" height="15" fill="rgb(242,79,21)" fg:x="165" fg:w="6"/><text x="3.2960%" y="959.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (6 samples, 0.11%)</title><rect x="3.0460%" y="933" width="0.1108%" height="15" fill="rgb(211,96,35)" fg:x="165" fg:w="6"/><text x="3.2960%" y="943.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (6 samples, 0.11%)</title><rect x="3.0460%" y="917" width="0.1108%" height="15" fill="rgb(253,215,40)" fg:x="165" fg:w="6"/><text x="3.2960%" y="927.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="3.0460%" y="901" width="0.1108%" height="15" fill="rgb(211,81,21)" fg:x="165" fg:w="6"/><text x="3.2960%" y="911.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (6 samples, 0.11%)</title><rect x="3.0460%" y="885" width="0.1108%" height="15" fill="rgb(208,190,38)" fg:x="165" fg:w="6"/><text x="3.2960%" y="895.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (6 samples, 0.11%)</title><rect x="3.0460%" y="869" width="0.1108%" height="15" fill="rgb(235,213,38)" fg:x="165" fg:w="6"/><text x="3.2960%" y="879.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (6 samples, 0.11%)</title><rect x="3.0460%" y="853" width="0.1108%" height="15" fill="rgb(237,122,38)" fg:x="165" fg:w="6"/><text x="3.2960%" y="863.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (6 samples, 0.11%)</title><rect x="3.0460%" y="837" width="0.1108%" height="15" fill="rgb(244,218,35)" fg:x="165" fg:w="6"/><text x="3.2960%" y="847.50"></text></g><g><title>AutoFile::write (6 samples, 0.11%)</title><rect x="3.0460%" y="821" width="0.1108%" height="15" fill="rgb(240,68,47)" fg:x="165" fg:w="6"/><text x="3.2960%" y="831.50"></text></g><g><title>_IO_fwrite (6 samples, 0.11%)</title><rect x="3.0460%" y="805" width="0.1108%" height="15" fill="rgb(210,16,53)" fg:x="165" fg:w="6"/><text x="3.2960%" y="815.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.1936%" y="693" width="0.0185%" height="15" fill="rgb(235,124,12)" fg:x="173" fg:w="1"/><text x="3.4436%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.1936%" y="677" width="0.0185%" height="15" fill="rgb(224,169,11)" fg:x="173" fg:w="1"/><text x="3.4436%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.1936%" y="661" width="0.0185%" height="15" fill="rgb(250,166,2)" fg:x="173" fg:w="1"/><text x="3.4436%" y="671.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.2121%" y="661" width="0.0185%" height="15" fill="rgb(242,216,29)" fg:x="174" fg:w="1"/><text x="3.4621%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2121%" y="645" width="0.0185%" height="15" fill="rgb(230,116,27)" fg:x="174" fg:w="1"/><text x="3.4621%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2121%" y="629" width="0.0185%" height="15" fill="rgb(228,99,48)" fg:x="174" fg:w="1"/><text x="3.4621%" y="639.50"></text></g><g><title>[[ext4]] (5 samples, 0.09%)</title><rect x="3.2121%" y="677" width="0.0923%" height="15" fill="rgb(253,11,6)" fg:x="174" fg:w="5"/><text x="3.4621%" y="687.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="3.2306%" y="661" width="0.0738%" height="15" fill="rgb(247,143,39)" fg:x="175" fg:w="4"/><text x="3.4806%" y="671.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="3.2306%" y="645" width="0.0738%" height="15" fill="rgb(236,97,10)" fg:x="175" fg:w="4"/><text x="3.4806%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="3.2306%" y="629" width="0.0738%" height="15" fill="rgb(233,208,19)" fg:x="175" fg:w="4"/><text x="3.4806%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="3.2306%" y="613" width="0.0738%" height="15" fill="rgb(216,164,2)" fg:x="175" fg:w="4"/><text x="3.4806%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="3.2490%" y="597" width="0.0554%" height="15" fill="rgb(220,129,5)" fg:x="176" fg:w="3"/><text x="3.4990%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.2675%" y="581" width="0.0369%" height="15" fill="rgb(242,17,10)" fg:x="177" fg:w="2"/><text x="3.5175%" y="591.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.3044%" y="629" width="0.0185%" height="15" fill="rgb(242,107,0)" fg:x="179" fg:w="1"/><text x="3.5544%" y="639.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.3044%" y="613" width="0.0185%" height="15" fill="rgb(251,28,31)" fg:x="179" fg:w="1"/><text x="3.5544%" y="623.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.3044%" y="597" width="0.0185%" height="15" fill="rgb(233,223,10)" fg:x="179" fg:w="1"/><text x="3.5544%" y="607.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.3044%" y="581" width="0.0185%" height="15" fill="rgb(215,21,27)" fg:x="179" fg:w="1"/><text x="3.5544%" y="591.50"></text></g><g><title>_IO_fwrite (10 samples, 0.18%)</title><rect x="3.1567%" y="869" width="0.1846%" height="15" fill="rgb(232,23,21)" fg:x="171" fg:w="10"/><text x="3.4067%" y="879.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.15%)</title><rect x="3.1936%" y="853" width="0.1477%" height="15" fill="rgb(244,5,23)" fg:x="173" fg:w="8"/><text x="3.4436%" y="863.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (8 samples, 0.15%)</title><rect x="3.1936%" y="837" width="0.1477%" height="15" fill="rgb(226,81,46)" fg:x="173" fg:w="8"/><text x="3.4436%" y="847.50"></text></g><g><title>new_do_write (8 samples, 0.15%)</title><rect x="3.1936%" y="821" width="0.1477%" height="15" fill="rgb(247,70,30)" fg:x="173" fg:w="8"/><text x="3.4436%" y="831.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (8 samples, 0.15%)</title><rect x="3.1936%" y="805" width="0.1477%" height="15" fill="rgb(212,68,19)" fg:x="173" fg:w="8"/><text x="3.4436%" y="815.50"></text></g><g><title>__GI___libc_write (8 samples, 0.15%)</title><rect x="3.1936%" y="789" width="0.1477%" height="15" fill="rgb(240,187,13)" fg:x="173" fg:w="8"/><text x="3.4436%" y="799.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="3.1936%" y="773" width="0.1477%" height="15" fill="rgb(223,113,26)" fg:x="173" fg:w="8"/><text x="3.4436%" y="783.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="3.1936%" y="757" width="0.1477%" height="15" fill="rgb(206,192,2)" fg:x="173" fg:w="8"/><text x="3.4436%" y="767.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="3.1936%" y="741" width="0.1477%" height="15" fill="rgb(241,108,4)" fg:x="173" fg:w="8"/><text x="3.4436%" y="751.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="3.1936%" y="725" width="0.1477%" height="15" fill="rgb(247,173,49)" fg:x="173" fg:w="8"/><text x="3.4436%" y="735.50"></text></g><g><title>[[ext4]] (8 samples, 0.15%)</title><rect x="3.1936%" y="709" width="0.1477%" height="15" fill="rgb(224,114,35)" fg:x="173" fg:w="8"/><text x="3.4436%" y="719.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="3.2121%" y="693" width="0.1292%" height="15" fill="rgb(245,159,27)" fg:x="174" fg:w="7"/><text x="3.4621%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.3044%" y="677" width="0.0369%" height="15" fill="rgb(245,172,44)" fg:x="179" fg:w="2"/><text x="3.5544%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.3044%" y="661" width="0.0369%" height="15" fill="rgb(236,23,11)" fg:x="179" fg:w="2"/><text x="3.5544%" y="671.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="3.3044%" y="645" width="0.0369%" height="15" fill="rgb(205,117,38)" fg:x="179" fg:w="2"/><text x="3.5544%" y="655.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="3.3229%" y="629" width="0.0185%" height="15" fill="rgb(237,72,25)" fg:x="180" fg:w="1"/><text x="3.5729%" y="639.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="3.3229%" y="613" width="0.0185%" height="15" fill="rgb(244,70,9)" fg:x="180" fg:w="1"/><text x="3.5729%" y="623.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (12 samples, 0.22%)</title><rect x="3.1567%" y="917" width="0.2215%" height="15" fill="rgb(217,125,39)" fg:x="171" fg:w="12"/><text x="3.4067%" y="927.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (12 samples, 0.22%)</title><rect x="3.1567%" y="901" width="0.2215%" height="15" fill="rgb(235,36,10)" fg:x="171" fg:w="12"/><text x="3.4067%" y="911.50"></text></g><g><title>AutoFile::write (12 samples, 0.22%)</title><rect x="3.1567%" y="885" width="0.2215%" height="15" fill="rgb(251,123,47)" fg:x="171" fg:w="12"/><text x="3.4067%" y="895.50"></text></g><g><title>util::Xor (2 samples, 0.04%)</title><rect x="3.3413%" y="869" width="0.0369%" height="15" fill="rgb(221,13,13)" fg:x="181" fg:w="2"/><text x="3.5913%" y="879.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (1 samples, 0.02%)</title><rect x="3.3783%" y="917" width="0.0185%" height="15" fill="rgb(238,131,9)" fg:x="183" fg:w="1"/><text x="3.6283%" y="927.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char&gt; (1 samples, 0.02%)</title><rect x="3.3783%" y="901" width="0.0185%" height="15" fill="rgb(211,50,8)" fg:x="183" fg:w="1"/><text x="3.6283%" y="911.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="3.3783%" y="885" width="0.0185%" height="15" fill="rgb(245,182,24)" fg:x="183" fg:w="1"/><text x="3.6283%" y="895.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="3.3783%" y="869" width="0.0185%" height="15" fill="rgb(242,14,37)" fg:x="183" fg:w="1"/><text x="3.6283%" y="879.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (20 samples, 0.37%)</title><rect x="3.0460%" y="1061" width="0.3692%" height="15" fill="rgb(246,228,12)" fg:x="165" fg:w="20"/><text x="3.2960%" y="1071.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (20 samples, 0.37%)</title><rect x="3.0460%" y="1045" width="0.3692%" height="15" fill="rgb(213,55,15)" fg:x="165" fg:w="20"/><text x="3.2960%" y="1055.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (20 samples, 0.37%)</title><rect x="3.0460%" y="1029" width="0.3692%" height="15" fill="rgb(209,9,3)" fg:x="165" fg:w="20"/><text x="3.2960%" y="1039.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (20 samples, 0.37%)</title><rect x="3.0460%" y="1013" width="0.3692%" height="15" fill="rgb(230,59,30)" fg:x="165" fg:w="20"/><text x="3.2960%" y="1023.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (20 samples, 0.37%)</title><rect x="3.0460%" y="997" width="0.3692%" height="15" fill="rgb(209,121,21)" fg:x="165" fg:w="20"/><text x="3.2960%" y="1007.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (20 samples, 0.37%)</title><rect x="3.0460%" y="981" width="0.3692%" height="15" fill="rgb(220,109,13)" fg:x="165" fg:w="20"/><text x="3.2960%" y="991.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (14 samples, 0.26%)</title><rect x="3.1567%" y="965" width="0.2584%" height="15" fill="rgb(232,18,1)" fg:x="171" fg:w="14"/><text x="3.4067%" y="975.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (14 samples, 0.26%)</title><rect x="3.1567%" y="949" width="0.2584%" height="15" fill="rgb(215,41,42)" fg:x="171" fg:w="14"/><text x="3.4067%" y="959.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (14 samples, 0.26%)</title><rect x="3.1567%" y="933" width="0.2584%" height="15" fill="rgb(224,123,36)" fg:x="171" fg:w="14"/><text x="3.4067%" y="943.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="3.3967%" y="917" width="0.0185%" height="15" fill="rgb(240,125,3)" fg:x="184" fg:w="1"/><text x="3.6467%" y="927.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="3.3967%" y="901" width="0.0185%" height="15" fill="rgb(205,98,50)" fg:x="184" fg:w="1"/><text x="3.6467%" y="911.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="3.3967%" y="885" width="0.0185%" height="15" fill="rgb(205,185,37)" fg:x="184" fg:w="1"/><text x="3.6467%" y="895.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (1 samples, 0.02%)</title><rect x="3.3967%" y="869" width="0.0185%" height="15" fill="rgb(238,207,15)" fg:x="184" fg:w="1"/><text x="3.6467%" y="879.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="3.3967%" y="853" width="0.0185%" height="15" fill="rgb(213,199,42)" fg:x="184" fg:w="1"/><text x="3.6467%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.3967%" y="837" width="0.0185%" height="15" fill="rgb(235,201,11)" fg:x="184" fg:w="1"/><text x="3.6467%" y="847.50"></text></g><g><title>AutoFile::write (9 samples, 0.17%)</title><rect x="3.4152%" y="981" width="0.1661%" height="15" fill="rgb(207,46,11)" fg:x="185" fg:w="9"/><text x="3.6652%" y="991.50"></text></g><g><title>_IO_fwrite (9 samples, 0.17%)</title><rect x="3.4152%" y="965" width="0.1661%" height="15" fill="rgb(241,35,35)" fg:x="185" fg:w="9"/><text x="3.6652%" y="975.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.5629%" y="949" width="0.0185%" height="15" fill="rgb(243,32,47)" fg:x="193" fg:w="1"/><text x="3.8129%" y="959.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.5629%" y="933" width="0.0185%" height="15" fill="rgb(247,202,23)" fg:x="193" fg:w="1"/><text x="3.8129%" y="943.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="3.5629%" y="917" width="0.0185%" height="15" fill="rgb(219,102,11)" fg:x="193" fg:w="1"/><text x="3.8129%" y="927.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.5629%" y="901" width="0.0185%" height="15" fill="rgb(243,110,44)" fg:x="193" fg:w="1"/><text x="3.8129%" y="911.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="3.5629%" y="885" width="0.0185%" height="15" fill="rgb(222,74,54)" fg:x="193" fg:w="1"/><text x="3.8129%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5629%" y="869" width="0.0185%" height="15" fill="rgb(216,99,12)" fg:x="193" fg:w="1"/><text x="3.8129%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5629%" y="853" width="0.0185%" height="15" fill="rgb(226,22,26)" fg:x="193" fg:w="1"/><text x="3.8129%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5629%" y="837" width="0.0185%" height="15" fill="rgb(217,163,10)" fg:x="193" fg:w="1"/><text x="3.8129%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5629%" y="821" width="0.0185%" height="15" fill="rgb(213,25,53)" fg:x="193" fg:w="1"/><text x="3.8129%" y="831.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.5629%" y="805" width="0.0185%" height="15" fill="rgb(252,105,26)" fg:x="193" fg:w="1"/><text x="3.8129%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5629%" y="789" width="0.0185%" height="15" fill="rgb(220,39,43)" fg:x="193" fg:w="1"/><text x="3.8129%" y="799.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.5629%" y="773" width="0.0185%" height="15" fill="rgb(229,68,48)" fg:x="193" fg:w="1"/><text x="3.8129%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5629%" y="757" width="0.0185%" height="15" fill="rgb(252,8,32)" fg:x="193" fg:w="1"/><text x="3.8129%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5629%" y="741" width="0.0185%" height="15" fill="rgb(223,20,43)" fg:x="193" fg:w="1"/><text x="3.8129%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5629%" y="725" width="0.0185%" height="15" fill="rgb(229,81,49)" fg:x="193" fg:w="1"/><text x="3.8129%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5629%" y="709" width="0.0185%" height="15" fill="rgb(236,28,36)" fg:x="193" fg:w="1"/><text x="3.8129%" y="719.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (10 samples, 0.18%)</title><rect x="3.4152%" y="1061" width="0.1846%" height="15" fill="rgb(249,185,26)" fg:x="185" fg:w="10"/><text x="3.6652%" y="1071.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (10 samples, 0.18%)</title><rect x="3.4152%" y="1045" width="0.1846%" height="15" fill="rgb(249,174,33)" fg:x="185" fg:w="10"/><text x="3.6652%" y="1055.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (10 samples, 0.18%)</title><rect x="3.4152%" y="1029" width="0.1846%" height="15" fill="rgb(233,201,37)" fg:x="185" fg:w="10"/><text x="3.6652%" y="1039.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (10 samples, 0.18%)</title><rect x="3.4152%" y="1013" width="0.1846%" height="15" fill="rgb(221,78,26)" fg:x="185" fg:w="10"/><text x="3.6652%" y="1023.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (10 samples, 0.18%)</title><rect x="3.4152%" y="997" width="0.1846%" height="15" fill="rgb(250,127,30)" fg:x="185" fg:w="10"/><text x="3.6652%" y="1007.50"></text></g><g><title>vtable for std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="3.5813%" y="981" width="0.0185%" height="15" fill="rgb(230,49,44)" fg:x="194" fg:w="1"/><text x="3.8313%" y="991.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.5813%" y="965" width="0.0185%" height="15" fill="rgb(229,67,23)" fg:x="194" fg:w="1"/><text x="3.8313%" y="975.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (33 samples, 0.61%)</title><rect x="3.0460%" y="1077" width="0.6092%" height="15" fill="rgb(249,83,47)" fg:x="165" fg:w="33"/><text x="3.2960%" y="1087.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="3.5998%" y="1061" width="0.0554%" height="15" fill="rgb(215,43,3)" fg:x="195" fg:w="3"/><text x="3.8498%" y="1071.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="3.5998%" y="1045" width="0.0554%" height="15" fill="rgb(238,154,13)" fg:x="195" fg:w="3"/><text x="3.8498%" y="1055.50"></text></g><g><title>AutoFile::write (3 samples, 0.06%)</title><rect x="3.5998%" y="1029" width="0.0554%" height="15" fill="rgb(219,56,2)" fg:x="195" fg:w="3"/><text x="3.8498%" y="1039.50"></text></g><g><title>_IO_fwrite (3 samples, 0.06%)</title><rect x="3.5998%" y="1013" width="0.0554%" height="15" fill="rgb(233,0,4)" fg:x="195" fg:w="3"/><text x="3.8498%" y="1023.50"></text></g><g><title>fwrite@plt (1 samples, 0.02%)</title><rect x="3.6367%" y="997" width="0.0185%" height="15" fill="rgb(235,30,7)" fg:x="197" fg:w="1"/><text x="3.8867%" y="1007.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (34 samples, 0.63%)</title><rect x="3.0460%" y="1525" width="0.6277%" height="15" fill="rgb(250,79,13)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1535.50"></text></g><g><title>Chainstate::ActivateBestChain (34 samples, 0.63%)</title><rect x="3.0460%" y="1509" width="0.6277%" height="15" fill="rgb(211,146,34)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1519.50"></text></g><g><title>Chainstate::ActivateBestChainStep (34 samples, 0.63%)</title><rect x="3.0460%" y="1493" width="0.6277%" height="15" fill="rgb(228,22,38)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1503.50"></text></g><g><title>Chainstate::ConnectTip (34 samples, 0.63%)</title><rect x="3.0460%" y="1477" width="0.6277%" height="15" fill="rgb(235,168,5)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1487.50"></text></g><g><title>Chainstate::ConnectBlock (34 samples, 0.63%)</title><rect x="3.0460%" y="1461" width="0.6277%" height="15" fill="rgb(221,155,16)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1471.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (34 samples, 0.63%)</title><rect x="3.0460%" y="1445" width="0.6277%" height="15" fill="rgb(215,215,53)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1455.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (34 samples, 0.63%)</title><rect x="3.0460%" y="1429" width="0.6277%" height="15" fill="rgb(223,4,10)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1439.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (34 samples, 0.63%)</title><rect x="3.0460%" y="1413" width="0.6277%" height="15" fill="rgb(234,103,6)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1423.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1397" width="0.6277%" height="15" fill="rgb(227,97,0)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1407.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1381" width="0.6277%" height="15" fill="rgb(234,150,53)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1391.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1365" width="0.6277%" height="15" fill="rgb(228,201,54)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1375.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1349" width="0.6277%" height="15" fill="rgb(222,22,37)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1359.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1333" width="0.6277%" height="15" fill="rgb(237,53,32)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1343.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1317" width="0.6277%" height="15" fill="rgb(233,25,53)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1327.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1301" width="0.6277%" height="15" fill="rgb(210,40,34)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1311.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1285" width="0.6277%" height="15" fill="rgb(241,220,44)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1295.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1269" width="0.6277%" height="15" fill="rgb(235,28,35)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1279.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1253" width="0.6277%" height="15" fill="rgb(210,56,17)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1263.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1237" width="0.6277%" height="15" fill="rgb(224,130,29)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1247.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1221" width="0.6277%" height="15" fill="rgb(235,212,8)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1231.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1205" width="0.6277%" height="15" fill="rgb(223,33,50)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1215.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1189" width="0.6277%" height="15" fill="rgb(219,149,13)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1199.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1173" width="0.6277%" height="15" fill="rgb(250,156,29)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1157" width="0.6277%" height="15" fill="rgb(216,193,19)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1167.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1141" width="0.6277%" height="15" fill="rgb(216,135,14)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1151.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1125" width="0.6277%" height="15" fill="rgb(241,47,5)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1135.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1109" width="0.6277%" height="15" fill="rgb(233,42,35)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1119.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (34 samples, 0.63%)</title><rect x="3.0460%" y="1093" width="0.6277%" height="15" fill="rgb(231,13,6)" fg:x="165" fg:w="34"/><text x="3.2960%" y="1103.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="3.6552%" y="1077" width="0.0185%" height="15" fill="rgb(207,181,40)" fg:x="198" fg:w="1"/><text x="3.9052%" y="1087.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="3.6552%" y="1061" width="0.0185%" height="15" fill="rgb(254,173,49)" fg:x="198" fg:w="1"/><text x="3.9052%" y="1071.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="3.6552%" y="1045" width="0.0185%" height="15" fill="rgb(221,1,38)" fg:x="198" fg:w="1"/><text x="3.9052%" y="1055.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="3.6552%" y="1029" width="0.0185%" height="15" fill="rgb(206,124,46)" fg:x="198" fg:w="1"/><text x="3.9052%" y="1039.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="3.6736%" y="1509" width="0.0185%" height="15" fill="rgb(249,21,11)" fg:x="199" fg:w="1"/><text x="3.9236%" y="1519.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="3.6736%" y="1493" width="0.0185%" height="15" fill="rgb(222,201,40)" fg:x="199" fg:w="1"/><text x="3.9236%" y="1503.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="3.6736%" y="1477" width="0.0185%" height="15" fill="rgb(235,61,29)" fg:x="199" fg:w="1"/><text x="3.9236%" y="1487.50"></text></g><g><title>bool std::all_of&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="3.6736%" y="1461" width="0.0185%" height="15" fill="rgb(219,207,3)" fg:x="199" fg:w="1"/><text x="3.9236%" y="1471.50"></text></g><g><title>unsigned char const* std::find_if_not&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="3.6736%" y="1445" width="0.0185%" height="15" fill="rgb(222,56,46)" fg:x="199" fg:w="1"/><text x="3.9236%" y="1455.50"></text></g><g><title>unsigned char const* std::__find_if_not&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_pred&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6736%" y="1429" width="0.0185%" height="15" fill="rgb(239,76,54)" fg:x="199" fg:w="1"/><text x="3.9236%" y="1439.50"></text></g><g><title>unsigned char const* std::__find_if&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_negate&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6736%" y="1413" width="0.0185%" height="15" fill="rgb(231,124,27)" fg:x="199" fg:w="1"/><text x="3.9236%" y="1423.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="3.6921%" y="1509" width="0.0185%" height="15" fill="rgb(249,195,6)" fg:x="200" fg:w="1"/><text x="3.9421%" y="1519.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="3.7475%" y="1317" width="0.0185%" height="15" fill="rgb(237,174,47)" fg:x="203" fg:w="1"/><text x="3.9975%" y="1327.50"></text></g><g><title>CheckTransaction (6 samples, 0.11%)</title><rect x="3.6736%" y="1525" width="0.1108%" height="15" fill="rgb(206,201,31)" fg:x="199" fg:w="6"/><text x="3.9236%" y="1535.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1509" width="0.0738%" height="15" fill="rgb(231,57,52)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1519.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (4 samples, 0.07%)</title><rect x="3.7105%" y="1493" width="0.0738%" height="15" fill="rgb(248,177,22)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1503.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1477" width="0.0738%" height="15" fill="rgb(215,211,37)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1487.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1461" width="0.0738%" height="15" fill="rgb(241,128,51)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1471.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1445" width="0.0738%" height="15" fill="rgb(227,165,31)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1455.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1429" width="0.0738%" height="15" fill="rgb(228,167,24)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1439.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1413" width="0.0738%" height="15" fill="rgb(228,143,12)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1423.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (4 samples, 0.07%)</title><rect x="3.7105%" y="1397" width="0.0738%" height="15" fill="rgb(249,149,8)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1407.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1381" width="0.0738%" height="15" fill="rgb(243,35,44)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1391.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1365" width="0.0738%" height="15" fill="rgb(246,89,9)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1375.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1349" width="0.0738%" height="15" fill="rgb(233,213,13)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1359.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="3.7105%" y="1333" width="0.0738%" height="15" fill="rgb(233,141,41)" fg:x="201" fg:w="4"/><text x="3.9605%" y="1343.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1317" width="0.0185%" height="15" fill="rgb(239,167,4)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1327.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1301" width="0.0185%" height="15" fill="rgb(209,217,16)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1311.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1285" width="0.0185%" height="15" fill="rgb(219,88,35)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1295.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1269" width="0.0185%" height="15" fill="rgb(220,193,23)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1279.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1253" width="0.0185%" height="15" fill="rgb(230,90,52)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1237" width="0.0185%" height="15" fill="rgb(252,106,19)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1247.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1221" width="0.0185%" height="15" fill="rgb(206,74,20)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1205" width="0.0185%" height="15" fill="rgb(230,138,44)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1215.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1189" width="0.0185%" height="15" fill="rgb(235,182,43)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1199.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1173" width="0.0185%" height="15" fill="rgb(242,16,51)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1183.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1157" width="0.0185%" height="15" fill="rgb(248,9,4)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1141" width="0.0185%" height="15" fill="rgb(210,31,22)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1151.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1125" width="0.0185%" height="15" fill="rgb(239,54,39)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1109" width="0.0185%" height="15" fill="rgb(230,99,41)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1119.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7659%" y="1093" width="0.0185%" height="15" fill="rgb(253,106,12)" fg:x="204" fg:w="1"/><text x="4.0159%" y="1103.50"></text></g><g><title>CompressAmount (3 samples, 0.06%)</title><rect x="3.7844%" y="1525" width="0.0554%" height="15" fill="rgb(213,46,41)" fg:x="205" fg:w="3"/><text x="4.0344%" y="1535.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="3.8582%" y="1509" width="0.0185%" height="15" fill="rgb(215,133,35)" fg:x="209" fg:w="1"/><text x="4.1082%" y="1519.50"></text></g><g><title>CountWitnessSigOps (3 samples, 0.06%)</title><rect x="3.8398%" y="1525" width="0.0554%" height="15" fill="rgb(213,28,5)" fg:x="208" fg:w="3"/><text x="4.0898%" y="1535.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="3.8767%" y="1509" width="0.0185%" height="15" fill="rgb(215,77,49)" fg:x="210" fg:w="1"/><text x="4.1267%" y="1519.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="3.8767%" y="1493" width="0.0185%" height="15" fill="rgb(248,100,22)" fg:x="210" fg:w="1"/><text x="4.1267%" y="1503.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="3.8767%" y="1477" width="0.0185%" height="15" fill="rgb(208,67,9)" fg:x="210" fg:w="1"/><text x="4.1267%" y="1487.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="3.8767%" y="1461" width="0.0185%" height="15" fill="rgb(219,133,21)" fg:x="210" fg:w="1"/><text x="4.1267%" y="1471.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (1 samples, 0.02%)</title><rect x="3.8767%" y="1445" width="0.0185%" height="15" fill="rgb(246,46,29)" fg:x="210" fg:w="1"/><text x="4.1267%" y="1455.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (1 samples, 0.02%)</title><rect x="3.8767%" y="1429" width="0.0185%" height="15" fill="rgb(246,185,52)" fg:x="210" fg:w="1"/><text x="4.1267%" y="1439.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="3.8767%" y="1413" width="0.0185%" height="15" fill="rgb(252,136,11)" fg:x="210" fg:w="1"/><text x="4.1267%" y="1423.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="3.8951%" y="1525" width="0.0185%" height="15" fill="rgb(219,138,53)" fg:x="211" fg:w="1"/><text x="4.1451%" y="1535.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="3.8951%" y="1509" width="0.0185%" height="15" fill="rgb(211,51,23)" fg:x="211" fg:w="1"/><text x="4.1451%" y="1519.50"></text></g><g><title>GetLegacySigOpCount (1 samples, 0.02%)</title><rect x="3.9136%" y="1525" width="0.0185%" height="15" fill="rgb(247,221,28)" fg:x="212" fg:w="1"/><text x="4.1636%" y="1535.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="3.9136%" y="1509" width="0.0185%" height="15" fill="rgb(251,222,45)" fg:x="212" fg:w="1"/><text x="4.1636%" y="1519.50"></text></g><g><title>GetTransactionSigOpCost (1 samples, 0.02%)</title><rect x="3.9321%" y="1525" width="0.0185%" height="15" fill="rgb(217,162,53)" fg:x="213" fg:w="1"/><text x="4.1821%" y="1535.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="3.9321%" y="1509" width="0.0185%" height="15" fill="rgb(229,93,14)" fg:x="213" fg:w="1"/><text x="4.1821%" y="1519.50"></text></g><g><title>SipHashUint256Extra (11 samples, 0.20%)</title><rect x="3.9505%" y="1525" width="0.2031%" height="15" fill="rgb(209,67,49)" fg:x="214" fg:w="11"/><text x="4.2005%" y="1535.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="4.1167%" y="1509" width="0.0369%" height="15" fill="rgb(213,87,29)" fg:x="223" fg:w="2"/><text x="4.3667%" y="1519.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="4.1167%" y="1493" width="0.0369%" height="15" fill="rgb(205,151,52)" fg:x="223" fg:w="2"/><text x="4.3667%" y="1503.50"></text></g><g><title>UpdateCoins (1 samples, 0.02%)</title><rect x="4.1536%" y="1525" width="0.0185%" height="15" fill="rgb(253,215,39)" fg:x="225" fg:w="1"/><text x="4.4036%" y="1535.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="4.1536%" y="1509" width="0.0185%" height="15" fill="rgb(221,220,41)" fg:x="225" fg:w="1"/><text x="4.4036%" y="1519.50"></text></g><g><title>[000101.ldb] (1 samples, 0.02%)</title><rect x="4.1721%" y="1525" width="0.0185%" height="15" fill="rgb(218,133,21)" fg:x="226" fg:w="1"/><text x="4.4221%" y="1535.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="4.1721%" y="1509" width="0.0185%" height="15" fill="rgb(221,193,43)" fg:x="226" fg:w="1"/><text x="4.4221%" y="1519.50"></text></g><g><title>[000191.ldb] (1 samples, 0.02%)</title><rect x="4.1905%" y="1525" width="0.0185%" height="15" fill="rgb(240,128,52)" fg:x="227" fg:w="1"/><text x="4.4405%" y="1535.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="4.1905%" y="1509" width="0.0185%" height="15" fill="rgb(253,114,12)" fg:x="227" fg:w="1"/><text x="4.4405%" y="1519.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (1 samples, 0.02%)</title><rect x="4.2090%" y="1509" width="0.0185%" height="15" fill="rgb(215,223,47)" fg:x="228" fg:w="1"/><text x="4.4590%" y="1519.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="4.2274%" y="1509" width="0.0185%" height="15" fill="rgb(248,225,23)" fg:x="229" fg:w="1"/><text x="4.4774%" y="1519.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="4.2459%" y="1509" width="0.0185%" height="15" fill="rgb(250,108,0)" fg:x="230" fg:w="1"/><text x="4.4959%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.04%)</title><rect x="4.2644%" y="1509" width="0.0369%" height="15" fill="rgb(228,208,7)" fg:x="231" fg:w="2"/><text x="4.5144%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="4.3013%" y="1509" width="0.0369%" height="15" fill="rgb(244,45,10)" fg:x="233" fg:w="2"/><text x="4.5513%" y="1519.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="4.3382%" y="1509" width="0.0369%" height="15" fill="rgb(207,125,25)" fg:x="235" fg:w="2"/><text x="4.5882%" y="1519.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="4.3751%" y="1509" width="0.0185%" height="15" fill="rgb(210,195,18)" fg:x="237" fg:w="1"/><text x="4.6251%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="4.3936%" y="1509" width="0.0185%" height="15" fill="rgb(249,80,12)" fg:x="238" fg:w="1"/><text x="4.6436%" y="1519.50"></text></g><g><title>leveldb::Version::Get (2 samples, 0.04%)</title><rect x="4.4120%" y="1509" width="0.0369%" height="15" fill="rgb(221,65,9)" fg:x="239" fg:w="2"/><text x="4.6620%" y="1519.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="4.4490%" y="1509" width="0.0185%" height="15" fill="rgb(235,49,36)" fg:x="241" fg:w="1"/><text x="4.6990%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="4.4674%" y="1509" width="0.0185%" height="15" fill="rgb(225,32,20)" fg:x="242" fg:w="1"/><text x="4.7174%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="4.4859%" y="1509" width="0.0185%" height="15" fill="rgb(215,141,46)" fg:x="243" fg:w="1"/><text x="4.7359%" y="1519.50"></text></g><g><title>[[heap]] (17 samples, 0.31%)</title><rect x="4.2090%" y="1525" width="0.3138%" height="15" fill="rgb(250,160,47)" fg:x="228" fg:w="17"/><text x="4.4590%" y="1535.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="4.5043%" y="1509" width="0.0185%" height="15" fill="rgb(216,222,40)" fg:x="244" fg:w="1"/><text x="4.7543%" y="1519.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="4.5228%" y="1509" width="0.0738%" height="15" fill="rgb(234,217,39)" fg:x="245" fg:w="4"/><text x="4.7728%" y="1519.50"></text></g><g><title>CCoinsViewBacked::GetCoin (1 samples, 0.02%)</title><rect x="4.5966%" y="1509" width="0.0185%" height="15" fill="rgb(207,178,40)" fg:x="249" fg:w="1"/><text x="4.8466%" y="1519.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="4.6151%" y="1509" width="0.0185%" height="15" fill="rgb(221,136,13)" fg:x="250" fg:w="1"/><text x="4.8651%" y="1519.50"></text></g><g><title>CCoinsViewCache::FetchCoin (7 samples, 0.13%)</title><rect x="4.6336%" y="1509" width="0.1292%" height="15" fill="rgb(249,199,10)" fg:x="251" fg:w="7"/><text x="4.8836%" y="1519.50"></text></g><g><title>CSHA256::Reset (2 samples, 0.04%)</title><rect x="4.7628%" y="1509" width="0.0369%" height="15" fill="rgb(249,222,13)" fg:x="258" fg:w="2"/><text x="5.0128%" y="1519.50"></text></g><g><title>CSHA256::Write (13 samples, 0.24%)</title><rect x="4.7997%" y="1509" width="0.2400%" height="15" fill="rgb(244,185,38)" fg:x="260" fg:w="13"/><text x="5.0497%" y="1519.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="5.0397%" y="1509" width="0.0185%" height="15" fill="rgb(236,202,9)" fg:x="273" fg:w="1"/><text x="5.2897%" y="1519.50"></text></g><g><title>CTxMemPool::removeForBlock (1 samples, 0.02%)</title><rect x="5.0582%" y="1509" width="0.0185%" height="15" fill="rgb(250,229,37)" fg:x="274" fg:w="1"/><text x="5.3082%" y="1519.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="5.0766%" y="1509" width="0.0185%" height="15" fill="rgb(206,174,23)" fg:x="275" fg:w="1"/><text x="5.3266%" y="1519.50"></text></g><g><title>CompressScript (2 samples, 0.04%)</title><rect x="5.0951%" y="1509" width="0.0369%" height="15" fill="rgb(211,33,43)" fg:x="276" fg:w="2"/><text x="5.3451%" y="1519.50"></text></g><g><title>GetScriptOp (6 samples, 0.11%)</title><rect x="5.1320%" y="1509" width="0.1108%" height="15" fill="rgb(245,58,50)" fg:x="278" fg:w="6"/><text x="5.3820%" y="1519.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="5.2428%" y="1509" width="0.0369%" height="15" fill="rgb(244,68,36)" fg:x="284" fg:w="2"/><text x="5.4928%" y="1519.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (13 samples, 0.24%)</title><rect x="5.2797%" y="1509" width="0.2400%" height="15" fill="rgb(232,229,15)" fg:x="286" fg:w="13"/><text x="5.5297%" y="1519.50"></text></g><g><title>_IO_fwrite (25 samples, 0.46%)</title><rect x="5.5197%" y="1509" width="0.4615%" height="15" fill="rgb(254,30,23)" fg:x="299" fg:w="25"/><text x="5.7697%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (17 samples, 0.31%)</title><rect x="5.9812%" y="1509" width="0.3138%" height="15" fill="rgb(235,160,14)" fg:x="324" fg:w="17"/><text x="6.2312%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (35 samples, 0.65%)</title><rect x="6.2950%" y="1509" width="0.6461%" height="15" fill="rgb(212,155,44)" fg:x="341" fg:w="35"/><text x="6.5450%" y="1519.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="6.9411%" y="1509" width="0.0369%" height="15" fill="rgb(226,2,50)" fg:x="376" fg:w="2"/><text x="7.1911%" y="1519.50"></text></g><g><title>_int_free (10 samples, 0.18%)</title><rect x="6.9780%" y="1509" width="0.1846%" height="15" fill="rgb(234,177,6)" fg:x="378" fg:w="10"/><text x="7.2280%" y="1519.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="7.1626%" y="1509" width="0.0185%" height="15" fill="rgb(217,24,9)" fg:x="388" fg:w="1"/><text x="7.4126%" y="1519.50"></text></g><g><title>_int_malloc (30 samples, 0.55%)</title><rect x="7.1811%" y="1509" width="0.5538%" height="15" fill="rgb(220,13,46)" fg:x="389" fg:w="30"/><text x="7.4311%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.06%)</title><rect x="7.7349%" y="1509" width="0.0554%" height="15" fill="rgb(239,221,27)" fg:x="419" fg:w="3"/><text x="7.9849%" y="1519.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="7.7903%" y="1509" width="0.0185%" height="15" fill="rgb(222,198,25)" fg:x="422" fg:w="1"/><text x="8.0403%" y="1519.50"></text></g><g><title>fwrite@plt (2 samples, 0.04%)</title><rect x="7.8088%" y="1509" width="0.0369%" height="15" fill="rgb(211,99,13)" fg:x="423" fg:w="2"/><text x="8.0588%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.09%)</title><rect x="7.8457%" y="1509" width="0.0923%" height="15" fill="rgb(232,111,31)" fg:x="425" fg:w="5"/><text x="8.0957%" y="1519.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="7.9380%" y="1509" width="0.0185%" height="15" fill="rgb(245,82,37)" fg:x="430" fg:w="1"/><text x="8.1880%" y="1519.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.02%)</title><rect x="7.9564%" y="1509" width="0.0185%" height="15" fill="rgb(227,149,46)" fg:x="431" fg:w="1"/><text x="8.2064%" y="1519.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (1 samples, 0.02%)</title><rect x="7.9749%" y="1509" width="0.0185%" height="15" fill="rgb(218,36,50)" fg:x="432" fg:w="1"/><text x="8.2249%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (14 samples, 0.26%)</title><rect x="7.9934%" y="1509" width="0.2584%" height="15" fill="rgb(226,80,48)" fg:x="433" fg:w="14"/><text x="8.2434%" y="1519.50"></text></g><g><title>leveldb::Iterator::RegisterCleanup (1 samples, 0.02%)</title><rect x="8.2518%" y="1509" width="0.0185%" height="15" fill="rgb(238,224,15)" fg:x="447" fg:w="1"/><text x="8.5018%" y="1519.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="8.2703%" y="1509" width="0.0185%" height="15" fill="rgb(241,136,10)" fg:x="448" fg:w="1"/><text x="8.5203%" y="1519.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.02%)</title><rect x="8.2887%" y="1509" width="0.0185%" height="15" fill="rgb(208,32,45)" fg:x="449" fg:w="1"/><text x="8.5387%" y="1519.50"></text></g><g><title>malloc (19 samples, 0.35%)</title><rect x="8.3072%" y="1509" width="0.3507%" height="15" fill="rgb(207,135,9)" fg:x="450" fg:w="19"/><text x="8.5572%" y="1519.50"></text></g><g><title>malloc@plt (1 samples, 0.02%)</title><rect x="8.6579%" y="1509" width="0.0185%" height="15" fill="rgb(206,86,44)" fg:x="469" fg:w="1"/><text x="8.9079%" y="1519.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="8.6764%" y="1509" width="0.0185%" height="15" fill="rgb(245,177,15)" fg:x="470" fg:w="1"/><text x="8.9264%" y="1519.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="8.6948%" y="1509" width="0.0185%" height="15" fill="rgb(206,64,50)" fg:x="471" fg:w="1"/><text x="8.9448%" y="1519.50"></text></g><g><title>memcpy@plt (4 samples, 0.07%)</title><rect x="8.7133%" y="1509" width="0.0738%" height="15" fill="rgb(234,36,40)" fg:x="472" fg:w="4"/><text x="8.9633%" y="1519.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="8.7872%" y="1509" width="0.0185%" height="15" fill="rgb(213,64,8)" fg:x="476" fg:w="1"/><text x="9.0372%" y="1519.50"></text></g><g><title>operator new (4 samples, 0.07%)</title><rect x="8.8056%" y="1509" width="0.0738%" height="15" fill="rgb(210,75,36)" fg:x="477" fg:w="4"/><text x="9.0556%" y="1519.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="8.8795%" y="1509" width="0.0185%" height="15" fill="rgb(229,88,21)" fg:x="481" fg:w="1"/><text x="9.1295%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="8.8979%" y="1509" width="0.0185%" height="15" fill="rgb(252,204,47)" fg:x="482" fg:w="1"/><text x="9.1479%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="8.9164%" y="1509" width="0.0369%" height="15" fill="rgb(208,77,27)" fg:x="483" fg:w="2"/><text x="9.1664%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="8.9164%" y="1493" width="0.0369%" height="15" fill="rgb(221,76,26)" fg:x="483" fg:w="2"/><text x="9.1664%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="8.9164%" y="1477" width="0.0369%" height="15" fill="rgb(225,139,18)" fg:x="483" fg:w="2"/><text x="9.1664%" y="1487.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="8.9164%" y="1461" width="0.0369%" height="15" fill="rgb(230,137,11)" fg:x="483" fg:w="2"/><text x="9.1664%" y="1471.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="8.9533%" y="1509" width="0.0185%" height="15" fill="rgb(212,28,1)" fg:x="485" fg:w="1"/><text x="9.2033%" y="1519.50"></text></g><g><title>std::__pad&lt;char, std::char_traits&lt;char&gt; &gt;::_S_pad (1 samples, 0.02%)</title><rect x="8.9718%" y="1509" width="0.0185%" height="15" fill="rgb(248,164,17)" fg:x="486" fg:w="1"/><text x="9.2218%" y="1519.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="8.9902%" y="1509" width="0.0185%" height="15" fill="rgb(222,171,42)" fg:x="487" fg:w="1"/><text x="9.2402%" y="1519.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="9.0087%" y="1509" width="0.0185%" height="15" fill="rgb(243,84,45)" fg:x="488" fg:w="1"/><text x="9.2587%" y="1519.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="9.0271%" y="1509" width="0.0185%" height="15" fill="rgb(252,49,23)" fg:x="489" fg:w="1"/><text x="9.2771%" y="1519.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="9.0456%" y="1509" width="0.0369%" height="15" fill="rgb(215,19,7)" fg:x="490" fg:w="2"/><text x="9.2956%" y="1519.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="9.0825%" y="1509" width="0.0738%" height="15" fill="rgb(238,81,41)" fg:x="492" fg:w="4"/><text x="9.3325%" y="1519.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="9.1564%" y="1509" width="0.0185%" height="15" fill="rgb(210,199,37)" fg:x="496" fg:w="1"/><text x="9.4064%" y="1519.50"></text></g><g><title>[anon] (253 samples, 4.67%)</title><rect x="4.5228%" y="1525" width="4.6705%" height="15" fill="rgb(244,192,49)" fg:x="245" fg:w="253"/><text x="4.7728%" y="1535.50">[anon]</text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="9.1748%" y="1509" width="0.0185%" height="15" fill="rgb(226,211,11)" fg:x="497" fg:w="1"/><text x="9.4248%" y="1519.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="9.2487%" y="1509" width="0.0369%" height="15" fill="rgb(236,162,54)" fg:x="501" fg:w="2"/><text x="9.4987%" y="1519.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="9.2856%" y="1509" width="0.0185%" height="15" fill="rgb(220,229,9)" fg:x="503" fg:w="1"/><text x="9.5356%" y="1519.50"></text></g><g><title>CCoinsViewCache::SpendCoin (1 samples, 0.02%)</title><rect x="9.3040%" y="1509" width="0.0185%" height="15" fill="rgb(250,87,22)" fg:x="504" fg:w="1"/><text x="9.5540%" y="1519.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="9.3225%" y="1509" width="0.0185%" height="15" fill="rgb(239,43,17)" fg:x="505" fg:w="1"/><text x="9.5725%" y="1519.50"></text></g><g><title>CTransaction::ComputeHasWitness (1 samples, 0.02%)</title><rect x="9.3410%" y="1509" width="0.0185%" height="15" fill="rgb(231,177,25)" fg:x="506" fg:w="1"/><text x="9.5910%" y="1519.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="9.3594%" y="1509" width="0.0185%" height="15" fill="rgb(219,179,1)" fg:x="507" fg:w="1"/><text x="9.6094%" y="1519.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="9.3779%" y="1509" width="0.0369%" height="15" fill="rgb(238,219,53)" fg:x="508" fg:w="2"/><text x="9.6279%" y="1519.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="9.4148%" y="1509" width="0.0185%" height="15" fill="rgb(232,167,36)" fg:x="510" fg:w="1"/><text x="9.6648%" y="1519.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.09%)</title><rect x="9.4333%" y="1509" width="0.0923%" height="15" fill="rgb(244,19,51)" fg:x="511" fg:w="5"/><text x="9.6833%" y="1519.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="9.5256%" y="1509" width="0.1108%" height="15" fill="rgb(224,6,22)" fg:x="516" fg:w="6"/><text x="9.7756%" y="1519.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="9.5625%" y="1493" width="0.0738%" height="15" fill="rgb(224,145,5)" fg:x="518" fg:w="4"/><text x="9.8125%" y="1503.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="9.5809%" y="1477" width="0.0554%" height="15" fill="rgb(234,130,49)" fg:x="519" fg:w="3"/><text x="9.8309%" y="1487.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="9.5809%" y="1461" width="0.0554%" height="15" fill="rgb(254,6,2)" fg:x="519" fg:w="3"/><text x="9.8309%" y="1471.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="9.6363%" y="1509" width="0.0185%" height="15" fill="rgb(208,96,46)" fg:x="522" fg:w="1"/><text x="9.8863%" y="1519.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (30 samples, 0.55%)</title><rect x="9.6548%" y="1509" width="0.5538%" height="15" fill="rgb(239,3,39)" fg:x="523" fg:w="30"/><text x="9.9048%" y="1519.50"></text></g><g><title>_IO_fwrite (20 samples, 0.37%)</title><rect x="10.2086%" y="1509" width="0.3692%" height="15" fill="rgb(233,210,1)" fg:x="553" fg:w="20"/><text x="10.4586%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.26%)</title><rect x="10.5778%" y="1509" width="0.2584%" height="15" fill="rgb(244,137,37)" fg:x="573" fg:w="14"/><text x="10.8278%" y="1519.50"></text></g><g><title>__mempcpy@plt (2 samples, 0.04%)</title><rect x="10.8363%" y="1509" width="0.0369%" height="15" fill="rgb(240,136,2)" fg:x="587" fg:w="2"/><text x="11.0863%" y="1519.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="10.8732%" y="1509" width="0.0369%" height="15" fill="rgb(239,18,37)" fg:x="589" fg:w="2"/><text x="11.1232%" y="1519.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="10.9101%" y="1509" width="0.0185%" height="15" fill="rgb(218,185,22)" fg:x="591" fg:w="1"/><text x="11.1601%" y="1519.50"></text></g><g><title>_int_free (9 samples, 0.17%)</title><rect x="10.9286%" y="1509" width="0.1661%" height="15" fill="rgb(225,218,4)" fg:x="592" fg:w="9"/><text x="11.1786%" y="1519.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="11.0947%" y="1509" width="0.0185%" height="15" fill="rgb(230,182,32)" fg:x="601" fg:w="1"/><text x="11.3447%" y="1519.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="11.0947%" y="1493" width="0.0185%" height="15" fill="rgb(242,56,43)" fg:x="601" fg:w="1"/><text x="11.3447%" y="1503.50"></text></g><g><title>_int_malloc (31 samples, 0.57%)</title><rect x="11.1132%" y="1509" width="0.5723%" height="15" fill="rgb(233,99,24)" fg:x="602" fg:w="31"/><text x="11.3632%" y="1519.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="11.6485%" y="1493" width="0.0369%" height="15" fill="rgb(234,209,42)" fg:x="631" fg:w="2"/><text x="11.8985%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Value (1 samples, 0.02%)</title><rect x="11.6854%" y="1509" width="0.0185%" height="15" fill="rgb(227,7,12)" fg:x="633" fg:w="1"/><text x="11.9354%" y="1519.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="11.7039%" y="1509" width="0.0185%" height="15" fill="rgb(245,203,43)" fg:x="634" fg:w="1"/><text x="11.9539%" y="1519.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="11.7039%" y="1493" width="0.0185%" height="15" fill="rgb(238,205,33)" fg:x="634" fg:w="1"/><text x="11.9539%" y="1503.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="11.7039%" y="1477" width="0.0185%" height="15" fill="rgb(231,56,7)" fg:x="634" fg:w="1"/><text x="11.9539%" y="1487.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="11.7224%" y="1509" width="0.0185%" height="15" fill="rgb(244,186,29)" fg:x="635" fg:w="1"/><text x="11.9724%" y="1519.50"></text></g><g><title>leveldb::LookupKey::LookupKey (1 samples, 0.02%)</title><rect x="11.7408%" y="1509" width="0.0185%" height="15" fill="rgb(234,111,31)" fg:x="636" fg:w="1"/><text x="11.9908%" y="1519.50"></text></g><g><title>malloc (13 samples, 0.24%)</title><rect x="11.7593%" y="1509" width="0.2400%" height="15" fill="rgb(241,149,10)" fg:x="637" fg:w="13"/><text x="12.0093%" y="1519.50"></text></g><g><title>malloc@plt (1 samples, 0.02%)</title><rect x="11.9993%" y="1509" width="0.0185%" height="15" fill="rgb(249,206,44)" fg:x="650" fg:w="1"/><text x="12.2493%" y="1519.50"></text></g><g><title>operator delete[] (1 samples, 0.02%)</title><rect x="12.0177%" y="1509" width="0.0185%" height="15" fill="rgb(251,153,30)" fg:x="651" fg:w="1"/><text x="12.2677%" y="1519.50"></text></g><g><title>operator new (4 samples, 0.07%)</title><rect x="12.0362%" y="1509" width="0.0738%" height="15" fill="rgb(239,152,38)" fg:x="652" fg:w="4"/><text x="12.2862%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="12.1100%" y="1509" width="0.0185%" height="15" fill="rgb(249,139,47)" fg:x="656" fg:w="1"/><text x="12.3600%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="12.1285%" y="1509" width="0.0185%" height="15" fill="rgb(244,64,35)" fg:x="657" fg:w="1"/><text x="12.3785%" y="1519.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="12.1469%" y="1509" width="0.0185%" height="15" fill="rgb(216,46,15)" fg:x="658" fg:w="1"/><text x="12.3969%" y="1519.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="12.1654%" y="1509" width="0.0185%" height="15" fill="rgb(250,74,19)" fg:x="659" fg:w="1"/><text x="12.4154%" y="1519.50"></text></g><g><title>[unknown] (170 samples, 3.14%)</title><rect x="9.1933%" y="1525" width="3.1383%" height="15" fill="rgb(249,42,33)" fg:x="498" fg:w="170"/><text x="9.4433%" y="1535.50">[un..</text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.15%)</title><rect x="12.1839%" y="1509" width="0.1477%" height="15" fill="rgb(242,149,17)" fg:x="660" fg:w="8"/><text x="12.4339%" y="1519.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (6 samples, 0.11%)</title><rect x="12.3315%" y="1525" width="0.1108%" height="15" fill="rgb(244,29,21)" fg:x="668" fg:w="6"/><text x="12.5815%" y="1535.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="12.4423%" y="1525" width="0.0185%" height="15" fill="rgb(220,130,37)" fg:x="674" fg:w="1"/><text x="12.6923%" y="1535.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="12.5346%" y="1173" width="0.0185%" height="15" fill="rgb(211,67,2)" fg:x="679" fg:w="1"/><text x="12.7846%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="12.5346%" y="1157" width="0.0185%" height="15" fill="rgb(235,68,52)" fg:x="679" fg:w="1"/><text x="12.7846%" y="1167.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="12.5346%" y="1141" width="0.0185%" height="15" fill="rgb(246,142,3)" fg:x="679" fg:w="1"/><text x="12.7846%" y="1151.50"></text></g><g><title>CCoinsViewCache::BatchWrite (2 samples, 0.04%)</title><rect x="12.5346%" y="1221" width="0.0369%" height="15" fill="rgb(241,25,7)" fg:x="679" fg:w="2"/><text x="12.7846%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (2 samples, 0.04%)</title><rect x="12.5346%" y="1205" width="0.0369%" height="15" fill="rgb(242,119,39)" fg:x="679" fg:w="2"/><text x="12.7846%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (2 samples, 0.04%)</title><rect x="12.5346%" y="1189" width="0.0369%" height="15" fill="rgb(241,98,45)" fg:x="679" fg:w="2"/><text x="12.7846%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="12.5531%" y="1173" width="0.0185%" height="15" fill="rgb(254,28,30)" fg:x="680" fg:w="1"/><text x="12.8031%" y="1183.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.06%)</title><rect x="12.5715%" y="1221" width="0.0554%" height="15" fill="rgb(241,142,54)" fg:x="681" fg:w="3"/><text x="12.8215%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="12.6269%" y="1221" width="0.0185%" height="15" fill="rgb(222,85,15)" fg:x="684" fg:w="1"/><text x="12.8769%" y="1231.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="12.6269%" y="1205" width="0.0185%" height="15" fill="rgb(210,85,47)" fg:x="684" fg:w="1"/><text x="12.8769%" y="1215.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="12.6269%" y="1189" width="0.0185%" height="15" fill="rgb(224,206,25)" fg:x="684" fg:w="1"/><text x="12.8769%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.07%)</title><rect x="12.6454%" y="1221" width="0.0738%" height="15" fill="rgb(243,201,19)" fg:x="685" fg:w="4"/><text x="12.8954%" y="1231.50"></text></g><g><title>SipHashUint256Extra (40 samples, 0.74%)</title><rect x="12.7377%" y="1205" width="0.7384%" height="15" fill="rgb(236,59,4)" fg:x="690" fg:w="40"/><text x="12.9877%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (16 samples, 0.30%)</title><rect x="13.1807%" y="1189" width="0.2954%" height="15" fill="rgb(254,179,45)" fg:x="714" fg:w="16"/><text x="13.4307%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (16 samples, 0.30%)</title><rect x="13.1807%" y="1173" width="0.2954%" height="15" fill="rgb(226,14,10)" fg:x="714" fg:w="16"/><text x="13.4307%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.3807%" y="1109" width="0.0185%" height="15" fill="rgb(244,27,41)" fg:x="779" fg:w="1"/><text x="14.6307%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.3807%" y="1093" width="0.0185%" height="15" fill="rgb(235,35,32)" fg:x="779" fg:w="1"/><text x="14.6307%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.3807%" y="1077" width="0.0185%" height="15" fill="rgb(218,68,31)" fg:x="779" fg:w="1"/><text x="14.6307%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.3807%" y="1061" width="0.0185%" height="15" fill="rgb(207,120,37)" fg:x="779" fg:w="1"/><text x="14.6307%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.3807%" y="1045" width="0.0185%" height="15" fill="rgb(227,98,0)" fg:x="779" fg:w="1"/><text x="14.6307%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.3807%" y="1029" width="0.0185%" height="15" fill="rgb(207,7,3)" fg:x="779" fg:w="1"/><text x="14.6307%" y="1039.50"></text></g><g><title>SipHashUint256Extra (78 samples, 1.44%)</title><rect x="13.5315%" y="1125" width="1.4399%" height="15" fill="rgb(206,98,19)" fg:x="733" fg:w="78"/><text x="13.7815%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (31 samples, 0.57%)</title><rect x="14.3991%" y="1109" width="0.5723%" height="15" fill="rgb(217,5,26)" fg:x="780" fg:w="31"/><text x="14.6491%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (31 samples, 0.57%)</title><rect x="14.3991%" y="1093" width="0.5723%" height="15" fill="rgb(235,190,38)" fg:x="780" fg:w="31"/><text x="14.6491%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="15.0268%" y="1077" width="0.0369%" height="15" fill="rgb(247,86,24)" fg:x="814" fg:w="2"/><text x="15.2768%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="15.0268%" y="1061" width="0.0369%" height="15" fill="rgb(205,101,16)" fg:x="814" fg:w="2"/><text x="15.2768%" y="1071.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="15.0452%" y="1045" width="0.0185%" height="15" fill="rgb(246,168,33)" fg:x="815" fg:w="1"/><text x="15.2952%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (128 samples, 2.36%)</title><rect x="12.7192%" y="1221" width="2.3629%" height="15" fill="rgb(231,114,1)" fg:x="689" fg:w="128"/><text x="12.9692%" y="1231.50">st..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (87 samples, 1.61%)</title><rect x="13.4761%" y="1205" width="1.6061%" height="15" fill="rgb(207,184,53)" fg:x="730" fg:w="87"/><text x="13.7261%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (85 samples, 1.57%)</title><rect x="13.5130%" y="1189" width="1.5691%" height="15" fill="rgb(224,95,51)" fg:x="732" fg:w="85"/><text x="13.7630%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (85 samples, 1.57%)</title><rect x="13.5130%" y="1173" width="1.5691%" height="15" fill="rgb(212,188,45)" fg:x="732" fg:w="85"/><text x="13.7630%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (85 samples, 1.57%)</title><rect x="13.5130%" y="1157" width="1.5691%" height="15" fill="rgb(223,154,38)" fg:x="732" fg:w="85"/><text x="13.7630%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (85 samples, 1.57%)</title><rect x="13.5130%" y="1141" width="1.5691%" height="15" fill="rgb(251,22,52)" fg:x="732" fg:w="85"/><text x="13.7630%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.11%)</title><rect x="14.9714%" y="1125" width="0.1108%" height="15" fill="rgb(229,209,22)" fg:x="811" fg:w="6"/><text x="15.2214%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.06%)</title><rect x="15.0268%" y="1109" width="0.0554%" height="15" fill="rgb(234,138,34)" fg:x="814" fg:w="3"/><text x="15.2768%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.06%)</title><rect x="15.0268%" y="1093" width="0.0554%" height="15" fill="rgb(212,95,11)" fg:x="814" fg:w="3"/><text x="15.2768%" y="1103.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="15.0637%" y="1077" width="0.0185%" height="15" fill="rgb(240,179,47)" fg:x="816" fg:w="1"/><text x="15.3137%" y="1087.50"></text></g><g><title>SipHashUint256Extra (138 samples, 2.55%)</title><rect x="15.0821%" y="1205" width="2.5475%" height="15" fill="rgb(240,163,11)" fg:x="817" fg:w="138"/><text x="15.3321%" y="1215.50">Si..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (71 samples, 1.31%)</title><rect x="16.3190%" y="1189" width="1.3107%" height="15" fill="rgb(236,37,12)" fg:x="884" fg:w="71"/><text x="16.5690%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (71 samples, 1.31%)</title><rect x="16.3190%" y="1173" width="1.3107%" height="15" fill="rgb(232,164,16)" fg:x="884" fg:w="71"/><text x="16.5690%" y="1183.50"></text></g><g><title>SipHashUint256Extra (15 samples, 0.28%)</title><rect x="17.6297%" y="1125" width="0.2769%" height="15" fill="rgb(244,205,15)" fg:x="955" fg:w="15"/><text x="17.8797%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.13%)</title><rect x="17.7774%" y="1109" width="0.1292%" height="15" fill="rgb(223,117,47)" fg:x="963" fg:w="7"/><text x="18.0274%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.13%)</title><rect x="17.7774%" y="1093" width="0.1292%" height="15" fill="rgb(244,107,35)" fg:x="963" fg:w="7"/><text x="18.0274%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (41 samples, 0.76%)</title><rect x="17.6297%" y="1205" width="0.7569%" height="15" fill="rgb(205,140,8)" fg:x="955" fg:w="41"/><text x="17.8797%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (41 samples, 0.76%)</title><rect x="17.6297%" y="1189" width="0.7569%" height="15" fill="rgb(228,84,46)" fg:x="955" fg:w="41"/><text x="17.8797%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (41 samples, 0.76%)</title><rect x="17.6297%" y="1173" width="0.7569%" height="15" fill="rgb(254,188,9)" fg:x="955" fg:w="41"/><text x="17.8797%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (41 samples, 0.76%)</title><rect x="17.6297%" y="1157" width="0.7569%" height="15" fill="rgb(206,112,54)" fg:x="955" fg:w="41"/><text x="17.8797%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (41 samples, 0.76%)</title><rect x="17.6297%" y="1141" width="0.7569%" height="15" fill="rgb(216,84,49)" fg:x="955" fg:w="41"/><text x="17.8797%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (26 samples, 0.48%)</title><rect x="17.9066%" y="1125" width="0.4800%" height="15" fill="rgb(214,194,35)" fg:x="970" fg:w="26"/><text x="18.1566%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (2 samples, 0.04%)</title><rect x="18.7004%" y="1173" width="0.0369%" height="15" fill="rgb(249,28,3)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (2 samples, 0.04%)</title><rect x="18.7004%" y="1157" width="0.0369%" height="15" fill="rgb(222,56,52)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1167.50"></text></g><g><title>__memset_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="18.7004%" y="1141" width="0.0369%" height="15" fill="rgb(245,217,50)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.7004%" y="1125" width="0.0369%" height="15" fill="rgb(213,201,24)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.7004%" y="1109" width="0.0369%" height="15" fill="rgb(248,116,28)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.7004%" y="1093" width="0.0369%" height="15" fill="rgb(219,72,43)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.7004%" y="1077" width="0.0369%" height="15" fill="rgb(209,138,14)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.7004%" y="1061" width="0.0369%" height="15" fill="rgb(222,18,33)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.7004%" y="1045" width="0.0369%" height="15" fill="rgb(213,199,7)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.7004%" y="1029" width="0.0369%" height="15" fill="rgb(250,110,10)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.7004%" y="1013" width="0.0369%" height="15" fill="rgb(248,123,6)" fg:x="1013" fg:w="2"/><text x="18.9504%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="997" width="0.0185%" height="15" fill="rgb(206,91,31)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="981" width="0.0185%" height="15" fill="rgb(211,154,13)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="965" width="0.0185%" height="15" fill="rgb(225,148,7)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="949" width="0.0185%" height="15" fill="rgb(220,160,43)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="933" width="0.0185%" height="15" fill="rgb(213,52,39)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="917" width="0.0185%" height="15" fill="rgb(243,137,7)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="901" width="0.0185%" height="15" fill="rgb(230,79,13)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="885" width="0.0185%" height="15" fill="rgb(247,105,23)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="869" width="0.0185%" height="15" fill="rgb(223,179,41)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="853" width="0.0185%" height="15" fill="rgb(218,9,34)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="837" width="0.0185%" height="15" fill="rgb(222,106,8)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="821" width="0.0185%" height="15" fill="rgb(211,220,0)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="805" width="0.0185%" height="15" fill="rgb(229,52,16)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.7188%" y="789" width="0.0185%" height="15" fill="rgb(212,155,18)" fg:x="1014" fg:w="1"/><text x="18.9688%" y="799.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (199 samples, 3.67%)</title><rect x="15.0821%" y="1221" width="3.6736%" height="15" fill="rgb(242,21,14)" fg:x="817" fg:w="199"/><text x="15.3321%" y="1231.50">std:..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (20 samples, 0.37%)</title><rect x="18.3866%" y="1205" width="0.3692%" height="15" fill="rgb(222,19,48)" fg:x="996" fg:w="20"/><text x="18.6366%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (20 samples, 0.37%)</title><rect x="18.3866%" y="1189" width="0.3692%" height="15" fill="rgb(232,45,27)" fg:x="996" fg:w="20"/><text x="18.6366%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="18.7373%" y="1173" width="0.0185%" height="15" fill="rgb(249,103,42)" fg:x="1015" fg:w="1"/><text x="18.9873%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="18.7373%" y="1157" width="0.0185%" height="15" fill="rgb(246,81,33)" fg:x="1015" fg:w="1"/><text x="18.9873%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="18.7373%" y="1141" width="0.0185%" height="15" fill="rgb(252,33,42)" fg:x="1015" fg:w="1"/><text x="18.9873%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="18.7373%" y="1125" width="0.0185%" height="15" fill="rgb(209,212,41)" fg:x="1015" fg:w="1"/><text x="18.9873%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.7373%" y="1109" width="0.0185%" height="15" fill="rgb(207,154,6)" fg:x="1015" fg:w="1"/><text x="18.9873%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.7373%" y="1093" width="0.0185%" height="15" fill="rgb(223,64,47)" fg:x="1015" fg:w="1"/><text x="18.9873%" y="1103.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="18.7558%" y="1205" width="0.0185%" height="15" fill="rgb(211,161,38)" fg:x="1016" fg:w="1"/><text x="19.0058%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="18.7558%" y="1189" width="0.0185%" height="15" fill="rgb(219,138,40)" fg:x="1016" fg:w="1"/><text x="19.0058%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="18.7558%" y="1173" width="0.0185%" height="15" fill="rgb(241,228,46)" fg:x="1016" fg:w="1"/><text x="19.0058%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="18.7558%" y="1157" width="0.0185%" height="15" fill="rgb(223,209,38)" fg:x="1016" fg:w="1"/><text x="19.0058%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="18.7558%" y="1141" width="0.0185%" height="15" fill="rgb(236,164,45)" fg:x="1016" fg:w="1"/><text x="19.0058%" y="1151.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="18.7558%" y="1125" width="0.0185%" height="15" fill="rgb(231,15,5)" fg:x="1016" fg:w="1"/><text x="19.0058%" y="1135.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="18.7742%" y="1205" width="0.0369%" height="15" fill="rgb(252,35,15)" fg:x="1017" fg:w="2"/><text x="19.0242%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.7927%" y="1189" width="0.0185%" height="15" fill="rgb(248,181,18)" fg:x="1018" fg:w="1"/><text x="19.0427%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.7927%" y="1173" width="0.0185%" height="15" fill="rgb(233,39,42)" fg:x="1018" fg:w="1"/><text x="19.0427%" y="1183.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="18.8112%" y="1189" width="0.0185%" height="15" fill="rgb(238,110,33)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="18.8112%" y="1173" width="0.0185%" height="15" fill="rgb(233,195,10)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1183.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="18.8112%" y="1157" width="0.0185%" height="15" fill="rgb(254,105,3)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1167.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="18.8112%" y="1141" width="0.0185%" height="15" fill="rgb(221,225,9)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="18.8112%" y="1125" width="0.0185%" height="15" fill="rgb(224,227,45)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.8112%" y="1109" width="0.0185%" height="15" fill="rgb(229,198,43)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.8112%" y="1093" width="0.0185%" height="15" fill="rgb(206,209,35)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.8112%" y="1077" width="0.0185%" height="15" fill="rgb(245,195,53)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.8112%" y="1061" width="0.0185%" height="15" fill="rgb(240,92,26)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.8112%" y="1045" width="0.0185%" height="15" fill="rgb(207,40,23)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.8112%" y="1029" width="0.0185%" height="15" fill="rgb(223,111,35)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.8112%" y="1013" width="0.0185%" height="15" fill="rgb(229,147,28)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.8112%" y="997" width="0.0185%" height="15" fill="rgb(211,29,28)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.8112%" y="981" width="0.0185%" height="15" fill="rgb(228,72,33)" fg:x="1019" fg:w="1"/><text x="19.0612%" y="991.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (353 samples, 6.52%)</title><rect x="12.4977%" y="1253" width="6.5165%" height="15" fill="rgb(205,214,31)" fg:x="677" fg:w="353"/><text x="12.7477%" y="1263.50">std::pair..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (353 samples, 6.52%)</title><rect x="12.4977%" y="1237" width="6.5165%" height="15" fill="rgb(224,111,15)" fg:x="677" fg:w="353"/><text x="12.7477%" y="1247.50">std::pair..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (14 samples, 0.26%)</title><rect x="18.7558%" y="1221" width="0.2584%" height="15" fill="rgb(253,21,26)" fg:x="1016" fg:w="14"/><text x="19.0058%" y="1231.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (11 samples, 0.20%)</title><rect x="18.8112%" y="1205" width="0.2031%" height="15" fill="rgb(245,139,43)" fg:x="1019" fg:w="11"/><text x="19.0612%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (10 samples, 0.18%)</title><rect x="18.8296%" y="1189" width="0.1846%" height="15" fill="rgb(252,170,7)" fg:x="1020" fg:w="10"/><text x="19.0796%" y="1199.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (10 samples, 0.18%)</title><rect x="18.8296%" y="1173" width="0.1846%" height="15" fill="rgb(231,118,14)" fg:x="1020" fg:w="10"/><text x="19.0796%" y="1183.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (10 samples, 0.18%)</title><rect x="18.8296%" y="1157" width="0.1846%" height="15" fill="rgb(238,83,0)" fg:x="1020" fg:w="10"/><text x="19.0796%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (10 samples, 0.18%)</title><rect x="18.8296%" y="1141" width="0.1846%" height="15" fill="rgb(221,39,39)" fg:x="1020" fg:w="10"/><text x="19.0796%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (10 samples, 0.18%)</title><rect x="18.8296%" y="1125" width="0.1846%" height="15" fill="rgb(222,119,46)" fg:x="1020" fg:w="10"/><text x="19.0796%" y="1135.50"></text></g><g><title>operator new (10 samples, 0.18%)</title><rect x="18.8296%" y="1109" width="0.1846%" height="15" fill="rgb(222,165,49)" fg:x="1020" fg:w="10"/><text x="19.0796%" y="1119.50"></text></g><g><title>__posix_memalign (10 samples, 0.18%)</title><rect x="18.8296%" y="1093" width="0.1846%" height="15" fill="rgb(219,113,52)" fg:x="1020" fg:w="10"/><text x="19.0796%" y="1103.50"></text></g><g><title>malloc (10 samples, 0.18%)</title><rect x="18.8296%" y="1077" width="0.1846%" height="15" fill="rgb(214,7,15)" fg:x="1020" fg:w="10"/><text x="19.0796%" y="1087.50"></text></g><g><title>_int_malloc (10 samples, 0.18%)</title><rect x="18.8296%" y="1061" width="0.1846%" height="15" fill="rgb(235,32,4)" fg:x="1020" fg:w="10"/><text x="19.0796%" y="1071.50"></text></g><g><title>malloc_consolidate (2 samples, 0.04%)</title><rect x="18.9773%" y="1045" width="0.0369%" height="15" fill="rgb(238,90,54)" fg:x="1028" fg:w="2"/><text x="19.2273%" y="1055.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="19.0327%" y="1157" width="0.0185%" height="15" fill="rgb(213,208,19)" fg:x="1031" fg:w="1"/><text x="19.2827%" y="1167.50"></text></g><g><title>Coin::DynamicMemoryUsage (2 samples, 0.04%)</title><rect x="19.0327%" y="1205" width="0.0369%" height="15" fill="rgb(233,156,4)" fg:x="1031" fg:w="2"/><text x="19.2827%" y="1215.50"></text></g><g><title>Coin::DynamicMemoryUsage (2 samples, 0.04%)</title><rect x="19.0327%" y="1189" width="0.0369%" height="15" fill="rgb(207,194,5)" fg:x="1031" fg:w="2"/><text x="19.2827%" y="1199.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (2 samples, 0.04%)</title><rect x="19.0327%" y="1173" width="0.0369%" height="15" fill="rgb(206,111,30)" fg:x="1031" fg:w="2"/><text x="19.2827%" y="1183.50"></text></g><g><title>MallocUsage (1 samples, 0.02%)</title><rect x="19.0511%" y="1157" width="0.0185%" height="15" fill="rgb(243,70,54)" fg:x="1032" fg:w="1"/><text x="19.3011%" y="1167.50"></text></g><g><title>CCoinsViewCache::BatchWrite (4 samples, 0.07%)</title><rect x="19.0142%" y="1221" width="0.0738%" height="15" fill="rgb(242,28,8)" fg:x="1030" fg:w="4"/><text x="19.2642%" y="1231.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="19.0696%" y="1205" width="0.0185%" height="15" fill="rgb(219,106,18)" fg:x="1033" fg:w="1"/><text x="19.3196%" y="1215.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (2 samples, 0.04%)</title><rect x="19.5496%" y="1205" width="0.0369%" height="15" fill="rgb(244,222,10)" fg:x="1059" fg:w="2"/><text x="19.7996%" y="1215.50"></text></g><g><title>ReadLE64 (2 samples, 0.04%)</title><rect x="19.5496%" y="1189" width="0.0369%" height="15" fill="rgb(236,179,52)" fg:x="1059" fg:w="2"/><text x="19.7996%" y="1199.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="19.5496%" y="1173" width="0.0369%" height="15" fill="rgb(213,23,39)" fg:x="1059" fg:w="2"/><text x="19.7996%" y="1183.50"></text></g><g><title>SipHashUint256Extra (51 samples, 0.94%)</title><rect x="19.0881%" y="1221" width="0.9415%" height="15" fill="rgb(238,48,10)" fg:x="1034" fg:w="51"/><text x="19.3381%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (24 samples, 0.44%)</title><rect x="19.5865%" y="1205" width="0.4430%" height="15" fill="rgb(251,196,23)" fg:x="1061" fg:w="24"/><text x="19.8365%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (24 samples, 0.44%)</title><rect x="19.5865%" y="1189" width="0.4430%" height="15" fill="rgb(250,152,24)" fg:x="1061" fg:w="24"/><text x="19.8365%" y="1199.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="20.0295%" y="1141" width="0.0185%" height="15" fill="rgb(209,150,17)" fg:x="1085" fg:w="1"/><text x="20.2795%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.06%)</title><rect x="20.0295%" y="1205" width="0.0554%" height="15" fill="rgb(234,202,34)" fg:x="1085" fg:w="3"/><text x="20.2795%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.06%)</title><rect x="20.0295%" y="1189" width="0.0554%" height="15" fill="rgb(253,148,53)" fg:x="1085" fg:w="3"/><text x="20.2795%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.06%)</title><rect x="20.0295%" y="1173" width="0.0554%" height="15" fill="rgb(218,129,16)" fg:x="1085" fg:w="3"/><text x="20.2795%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.06%)</title><rect x="20.0295%" y="1157" width="0.0554%" height="15" fill="rgb(216,85,19)" fg:x="1085" fg:w="3"/><text x="20.2795%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="20.0480%" y="1141" width="0.0369%" height="15" fill="rgb(235,228,7)" fg:x="1086" fg:w="2"/><text x="20.2980%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="20.0665%" y="1125" width="0.0185%" height="15" fill="rgb(245,175,0)" fg:x="1087" fg:w="1"/><text x="20.3165%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="20.0665%" y="1109" width="0.0185%" height="15" fill="rgb(208,168,36)" fg:x="1087" fg:w="1"/><text x="20.3165%" y="1119.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="20.0665%" y="1093" width="0.0185%" height="15" fill="rgb(246,171,24)" fg:x="1087" fg:w="1"/><text x="20.3165%" y="1103.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="20.0665%" y="1077" width="0.0185%" height="15" fill="rgb(215,142,24)" fg:x="1087" fg:w="1"/><text x="20.3165%" y="1087.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="20.0665%" y="1061" width="0.0185%" height="15" fill="rgb(250,187,7)" fg:x="1087" fg:w="1"/><text x="20.3165%" y="1071.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="20.0665%" y="1045" width="0.0185%" height="15" fill="rgb(228,66,33)" fg:x="1087" fg:w="1"/><text x="20.3165%" y="1055.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="20.0665%" y="1029" width="0.0185%" height="15" fill="rgb(234,215,21)" fg:x="1087" fg:w="1"/><text x="20.3165%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (4 samples, 0.07%)</title><rect x="20.0295%" y="1221" width="0.0738%" height="15" fill="rgb(222,191,20)" fg:x="1085" fg:w="4"/><text x="20.2795%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="20.0849%" y="1205" width="0.0185%" height="15" fill="rgb(245,79,54)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="20.0849%" y="1189" width="0.0185%" height="15" fill="rgb(240,10,37)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1199.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="20.0849%" y="1173" width="0.0185%" height="15" fill="rgb(214,192,32)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1183.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="20.0849%" y="1157" width="0.0185%" height="15" fill="rgb(209,36,54)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1167.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="20.0849%" y="1141" width="0.0185%" height="15" fill="rgb(220,10,11)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.02%)</title><rect x="20.0849%" y="1125" width="0.0185%" height="15" fill="rgb(221,106,17)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1135.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.02%)</title><rect x="20.0849%" y="1109" width="0.0185%" height="15" fill="rgb(251,142,44)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1119.50"></text></g><g><title>Coin::~Coin (1 samples, 0.02%)</title><rect x="20.0849%" y="1093" width="0.0185%" height="15" fill="rgb(238,13,15)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1103.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.02%)</title><rect x="20.0849%" y="1077" width="0.0185%" height="15" fill="rgb(208,107,27)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1087.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="20.0849%" y="1061" width="0.0185%" height="15" fill="rgb(205,136,37)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="20.0849%" y="1045" width="0.0185%" height="15" fill="rgb(250,205,27)" fg:x="1088" fg:w="1"/><text x="20.3349%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="20.1034%" y="1221" width="0.0554%" height="15" fill="rgb(210,80,43)" fg:x="1089" fg:w="3"/><text x="20.3534%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (3 samples, 0.06%)</title><rect x="20.1034%" y="1205" width="0.0554%" height="15" fill="rgb(247,160,36)" fg:x="1089" fg:w="3"/><text x="20.3534%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (3 samples, 0.06%)</title><rect x="20.1034%" y="1189" width="0.0554%" height="15" fill="rgb(234,13,49)" fg:x="1089" fg:w="3"/><text x="20.3534%" y="1199.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (3 samples, 0.06%)</title><rect x="20.1034%" y="1173" width="0.0554%" height="15" fill="rgb(234,122,0)" fg:x="1089" fg:w="3"/><text x="20.3534%" y="1183.50"></text></g><g><title>operator== (3 samples, 0.06%)</title><rect x="20.1034%" y="1157" width="0.0554%" height="15" fill="rgb(207,146,38)" fg:x="1089" fg:w="3"/><text x="20.3534%" y="1167.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (3 samples, 0.06%)</title><rect x="20.1034%" y="1141" width="0.0554%" height="15" fill="rgb(207,177,25)" fg:x="1089" fg:w="3"/><text x="20.3534%" y="1151.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (3 samples, 0.06%)</title><rect x="20.1034%" y="1125" width="0.0554%" height="15" fill="rgb(211,178,42)" fg:x="1089" fg:w="3"/><text x="20.3534%" y="1135.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (3 samples, 0.06%)</title><rect x="20.1034%" y="1109" width="0.0554%" height="15" fill="rgb(230,69,54)" fg:x="1089" fg:w="3"/><text x="20.3534%" y="1119.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (65 samples, 1.20%)</title><rect x="19.0142%" y="1253" width="1.1999%" height="15" fill="rgb(214,135,41)" fg:x="1030" fg:w="65"/><text x="19.2642%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (65 samples, 1.20%)</title><rect x="19.0142%" y="1237" width="1.1999%" height="15" fill="rgb(237,67,25)" fg:x="1030" fg:w="65"/><text x="19.2642%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (3 samples, 0.06%)</title><rect x="20.1588%" y="1221" width="0.0554%" height="15" fill="rgb(222,189,50)" fg:x="1092" fg:w="3"/><text x="20.4088%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="20.1772%" y="1205" width="0.0369%" height="15" fill="rgb(245,148,34)" fg:x="1093" fg:w="2"/><text x="20.4272%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="20.1772%" y="1189" width="0.0369%" height="15" fill="rgb(222,29,6)" fg:x="1093" fg:w="2"/><text x="20.4272%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="20.1772%" y="1173" width="0.0369%" height="15" fill="rgb(221,189,43)" fg:x="1093" fg:w="2"/><text x="20.4272%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="20.1772%" y="1157" width="0.0369%" height="15" fill="rgb(207,36,27)" fg:x="1093" fg:w="2"/><text x="20.4272%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="20.1957%" y="1141" width="0.0185%" height="15" fill="rgb(217,90,24)" fg:x="1094" fg:w="1"/><text x="20.4457%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="20.1957%" y="1125" width="0.0185%" height="15" fill="rgb(224,66,35)" fg:x="1094" fg:w="1"/><text x="20.4457%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="20.1957%" y="1109" width="0.0185%" height="15" fill="rgb(221,13,50)" fg:x="1094" fg:w="1"/><text x="20.4457%" y="1119.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="20.1957%" y="1093" width="0.0185%" height="15" fill="rgb(236,68,49)" fg:x="1094" fg:w="1"/><text x="20.4457%" y="1103.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="20.1957%" y="1077" width="0.0185%" height="15" fill="rgb(229,146,28)" fg:x="1094" fg:w="1"/><text x="20.4457%" y="1087.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="20.1957%" y="1061" width="0.0185%" height="15" fill="rgb(225,31,38)" fg:x="1094" fg:w="1"/><text x="20.4457%" y="1071.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="20.1957%" y="1045" width="0.0185%" height="15" fill="rgb(250,208,3)" fg:x="1094" fg:w="1"/><text x="20.4457%" y="1055.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="20.1957%" y="1029" width="0.0185%" height="15" fill="rgb(246,54,23)" fg:x="1094" fg:w="1"/><text x="20.4457%" y="1039.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="20.2141%" y="1237" width="0.0738%" height="15" fill="rgb(243,76,11)" fg:x="1095" fg:w="4"/><text x="20.4641%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="20.2511%" y="1221" width="0.0369%" height="15" fill="rgb(245,21,50)" fg:x="1097" fg:w="2"/><text x="20.5011%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="20.2511%" y="1205" width="0.0369%" height="15" fill="rgb(228,9,43)" fg:x="1097" fg:w="2"/><text x="20.5011%" y="1215.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (1 samples, 0.02%)</title><rect x="20.2880%" y="1173" width="0.0185%" height="15" fill="rgb(208,100,47)" fg:x="1099" fg:w="1"/><text x="20.5380%" y="1183.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="20.3064%" y="1157" width="0.0185%" height="15" fill="rgb(232,26,8)" fg:x="1100" fg:w="1"/><text x="20.5564%" y="1167.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.02%)</title><rect x="20.3064%" y="1141" width="0.0185%" height="15" fill="rgb(216,166,38)" fg:x="1100" fg:w="1"/><text x="20.5564%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::allocated_memory (1 samples, 0.02%)</title><rect x="20.3064%" y="1125" width="0.0185%" height="15" fill="rgb(251,202,51)" fg:x="1100" fg:w="1"/><text x="20.5564%" y="1135.50"></text></g><g><title>Coin::DynamicMemoryUsage (3 samples, 0.06%)</title><rect x="20.3064%" y="1173" width="0.0554%" height="15" fill="rgb(254,216,34)" fg:x="1100" fg:w="3"/><text x="20.5564%" y="1183.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (2 samples, 0.04%)</title><rect x="20.3249%" y="1157" width="0.0369%" height="15" fill="rgb(251,32,27)" fg:x="1101" fg:w="2"/><text x="20.5749%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::allocated_memory (2 samples, 0.04%)</title><rect x="20.3249%" y="1141" width="0.0369%" height="15" fill="rgb(208,127,28)" fg:x="1101" fg:w="2"/><text x="20.5749%" y="1151.50"></text></g><g><title>Coin::operator= (2 samples, 0.04%)</title><rect x="20.3618%" y="1173" width="0.0369%" height="15" fill="rgb(224,137,22)" fg:x="1103" fg:w="2"/><text x="20.6118%" y="1183.50"></text></g><g><title>CTxOut::operator= (2 samples, 0.04%)</title><rect x="20.3618%" y="1157" width="0.0369%" height="15" fill="rgb(254,70,32)" fg:x="1103" fg:w="2"/><text x="20.6118%" y="1167.50"></text></g><g><title>CoinsViewCacheCursor::NextAndMaybeErase (2 samples, 0.04%)</title><rect x="20.3987%" y="1173" width="0.0369%" height="15" fill="rgb(229,75,37)" fg:x="1105" fg:w="2"/><text x="20.6487%" y="1183.50"></text></g><g><title>CCoinsCacheEntry::Next (1 samples, 0.02%)</title><rect x="20.4172%" y="1157" width="0.0185%" height="15" fill="rgb(252,64,23)" fg:x="1106" fg:w="1"/><text x="20.6672%" y="1167.50"></text></g><g><title>CCoinsViewCache::BatchWrite (9 samples, 0.17%)</title><rect x="20.2880%" y="1189" width="0.1661%" height="15" fill="rgb(232,162,48)" fg:x="1099" fg:w="9"/><text x="20.5380%" y="1199.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (1 samples, 0.02%)</title><rect x="20.4357%" y="1173" width="0.0185%" height="15" fill="rgb(246,160,12)" fg:x="1107" fg:w="1"/><text x="20.6857%" y="1183.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="21.7094%" y="1173" width="0.0185%" height="15" fill="rgb(247,166,0)" fg:x="1176" fg:w="1"/><text x="21.9594%" y="1183.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="21.7094%" y="1157" width="0.0185%" height="15" fill="rgb(249,219,21)" fg:x="1176" fg:w="1"/><text x="21.9594%" y="1167.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="21.7094%" y="1141" width="0.0185%" height="15" fill="rgb(205,209,3)" fg:x="1176" fg:w="1"/><text x="21.9594%" y="1151.50"></text></g><g><title>SipHashUint256Extra (110 samples, 2.03%)</title><rect x="20.4541%" y="1189" width="2.0306%" height="15" fill="rgb(243,44,1)" fg:x="1108" fg:w="110"/><text x="20.7041%" y="1199.50">S..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (41 samples, 0.76%)</title><rect x="21.7279%" y="1173" width="0.7569%" height="15" fill="rgb(206,159,16)" fg:x="1177" fg:w="41"/><text x="21.9779%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (41 samples, 0.76%)</title><rect x="21.7279%" y="1157" width="0.7569%" height="15" fill="rgb(244,77,30)" fg:x="1177" fg:w="41"/><text x="21.9779%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.06%)</title><rect x="22.7617%" y="1173" width="0.0554%" height="15" fill="rgb(218,69,12)" fg:x="1233" fg:w="3"/><text x="23.0117%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.06%)</title><rect x="22.7617%" y="1157" width="0.0554%" height="15" fill="rgb(212,87,7)" fg:x="1233" fg:w="3"/><text x="23.0117%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.06%)</title><rect x="22.7617%" y="1141" width="0.0554%" height="15" fill="rgb(245,114,25)" fg:x="1233" fg:w="3"/><text x="23.0117%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.06%)</title><rect x="22.7617%" y="1125" width="0.0554%" height="15" fill="rgb(210,61,42)" fg:x="1233" fg:w="3"/><text x="23.0117%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="22.7986%" y="1109" width="0.0185%" height="15" fill="rgb(211,52,33)" fg:x="1235" fg:w="1"/><text x="23.0486%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (19 samples, 0.35%)</title><rect x="22.4848%" y="1189" width="0.3507%" height="15" fill="rgb(234,58,33)" fg:x="1218" fg:w="19"/><text x="22.7348%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="22.8171%" y="1173" width="0.0185%" height="15" fill="rgb(220,115,36)" fg:x="1236" fg:w="1"/><text x="23.0671%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="22.8171%" y="1157" width="0.0185%" height="15" fill="rgb(243,153,54)" fg:x="1236" fg:w="1"/><text x="23.0671%" y="1167.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="22.8171%" y="1141" width="0.0185%" height="15" fill="rgb(251,47,18)" fg:x="1236" fg:w="1"/><text x="23.0671%" y="1151.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="22.8171%" y="1125" width="0.0185%" height="15" fill="rgb(242,102,42)" fg:x="1236" fg:w="1"/><text x="23.0671%" y="1135.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="22.8171%" y="1109" width="0.0185%" height="15" fill="rgb(234,31,38)" fg:x="1236" fg:w="1"/><text x="23.0671%" y="1119.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="22.8171%" y="1093" width="0.0185%" height="15" fill="rgb(221,117,51)" fg:x="1236" fg:w="1"/><text x="23.0671%" y="1103.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="22.8171%" y="1077" width="0.0185%" height="15" fill="rgb(212,20,18)" fg:x="1236" fg:w="1"/><text x="23.0671%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="22.8355%" y="1189" width="0.0369%" height="15" fill="rgb(245,133,36)" fg:x="1237" fg:w="2"/><text x="23.0855%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="22.8355%" y="1173" width="0.0369%" height="15" fill="rgb(212,6,19)" fg:x="1237" fg:w="2"/><text x="23.0855%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="22.8355%" y="1157" width="0.0369%" height="15" fill="rgb(218,1,36)" fg:x="1237" fg:w="2"/><text x="23.0855%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="22.8355%" y="1141" width="0.0369%" height="15" fill="rgb(246,84,54)" fg:x="1237" fg:w="2"/><text x="23.0855%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="22.8724%" y="1173" width="0.0185%" height="15" fill="rgb(242,110,6)" fg:x="1239" fg:w="1"/><text x="23.1224%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (142 samples, 2.62%)</title><rect x="20.2880%" y="1205" width="2.6214%" height="15" fill="rgb(214,47,5)" fg:x="1099" fg:w="142"/><text x="20.5380%" y="1215.50">st..</text></g><g><title>vtable for std::ios_base (2 samples, 0.04%)</title><rect x="22.8724%" y="1189" width="0.0369%" height="15" fill="rgb(218,159,25)" fg:x="1239" fg:w="2"/><text x="23.1224%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="22.8909%" y="1173" width="0.0185%" height="15" fill="rgb(215,211,28)" fg:x="1240" fg:w="1"/><text x="23.1409%" y="1183.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.11%)</title><rect x="22.9094%" y="1173" width="0.1108%" height="15" fill="rgb(238,59,32)" fg:x="1241" fg:w="6"/><text x="23.1594%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="23.0017%" y="1157" width="0.0185%" height="15" fill="rgb(226,82,3)" fg:x="1246" fg:w="1"/><text x="23.2517%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="23.0017%" y="1141" width="0.0185%" height="15" fill="rgb(240,164,32)" fg:x="1246" fg:w="1"/><text x="23.2517%" y="1151.50"></text></g><g><title>CCoinsViewCache::BatchWrite (571 samples, 10.54%)</title><rect x="12.4977%" y="1269" width="10.5409%" height="15" fill="rgb(232,46,7)" fg:x="677" fg:w="571"/><text x="12.7477%" y="1279.50">CCoinsViewCache..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (153 samples, 2.82%)</title><rect x="20.2141%" y="1253" width="2.8244%" height="15" fill="rgb(229,129,53)" fg:x="1095" fg:w="153"/><text x="20.4641%" y="1263.50">st..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (149 samples, 2.75%)</title><rect x="20.2880%" y="1237" width="2.7506%" height="15" fill="rgb(234,188,29)" fg:x="1099" fg:w="149"/><text x="20.5380%" y="1247.50">st..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (149 samples, 2.75%)</title><rect x="20.2880%" y="1221" width="2.7506%" height="15" fill="rgb(246,141,4)" fg:x="1099" fg:w="149"/><text x="20.5380%" y="1231.50">st..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (7 samples, 0.13%)</title><rect x="22.9094%" y="1205" width="0.1292%" height="15" fill="rgb(229,23,39)" fg:x="1241" fg:w="7"/><text x="23.1594%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (7 samples, 0.13%)</title><rect x="22.9094%" y="1189" width="0.1292%" height="15" fill="rgb(206,12,3)" fg:x="1241" fg:w="7"/><text x="23.1594%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="23.0201%" y="1173" width="0.0185%" height="15" fill="rgb(252,226,20)" fg:x="1247" fg:w="1"/><text x="23.2701%" y="1183.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (2 samples, 0.04%)</title><rect x="23.0386%" y="1269" width="0.0369%" height="15" fill="rgb(216,123,35)" fg:x="1248" fg:w="2"/><text x="23.2886%" y="1279.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (2 samples, 0.04%)</title><rect x="23.0386%" y="1253" width="0.0369%" height="15" fill="rgb(212,68,40)" fg:x="1248" fg:w="2"/><text x="23.2886%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="23.0386%" y="1237" width="0.0369%" height="15" fill="rgb(254,125,32)" fg:x="1248" fg:w="2"/><text x="23.2886%" y="1247.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="23.0386%" y="1221" width="0.0369%" height="15" fill="rgb(253,97,22)" fg:x="1248" fg:w="2"/><text x="23.2886%" y="1231.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (2 samples, 0.04%)</title><rect x="23.0386%" y="1205" width="0.0369%" height="15" fill="rgb(241,101,14)" fg:x="1248" fg:w="2"/><text x="23.2886%" y="1215.50"></text></g><g><title>malloc_consolidate (2 samples, 0.04%)</title><rect x="23.0386%" y="1189" width="0.0369%" height="15" fill="rgb(238,103,29)" fg:x="1248" fg:w="2"/><text x="23.2886%" y="1199.50"></text></g><g><title>SipHashUint256Extra (24 samples, 0.44%)</title><rect x="23.0755%" y="1269" width="0.4430%" height="15" fill="rgb(233,195,47)" fg:x="1250" fg:w="24"/><text x="23.3255%" y="1279.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="23.4632%" y="1253" width="0.0554%" height="15" fill="rgb(246,218,30)" fg:x="1271" fg:w="3"/><text x="23.7132%" y="1263.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="23.4632%" y="1237" width="0.0554%" height="15" fill="rgb(219,145,47)" fg:x="1271" fg:w="3"/><text x="23.7132%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="23.5186%" y="1269" width="0.0554%" height="15" fill="rgb(243,12,26)" fg:x="1274" fg:w="3"/><text x="23.7686%" y="1279.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="23.5555%" y="1253" width="0.0185%" height="15" fill="rgb(214,87,16)" fg:x="1276" fg:w="1"/><text x="23.8055%" y="1263.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="23.5555%" y="1237" width="0.0185%" height="15" fill="rgb(208,99,42)" fg:x="1276" fg:w="1"/><text x="23.8055%" y="1247.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="23.5555%" y="1221" width="0.0185%" height="15" fill="rgb(253,99,2)" fg:x="1276" fg:w="1"/><text x="23.8055%" y="1231.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="23.5555%" y="1205" width="0.0185%" height="15" fill="rgb(220,168,23)" fg:x="1276" fg:w="1"/><text x="23.8055%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.04%)</title><rect x="23.5739%" y="1269" width="0.0369%" height="15" fill="rgb(242,38,24)" fg:x="1277" fg:w="2"/><text x="23.8239%" y="1279.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.09%)</title><rect x="23.6109%" y="1269" width="0.0923%" height="15" fill="rgb(225,182,9)" fg:x="1279" fg:w="5"/><text x="23.8609%" y="1279.50"></text></g><g><title>decltype  (3 samples, 0.06%)</title><rect x="23.6478%" y="1253" width="0.0554%" height="15" fill="rgb(243,178,37)" fg:x="1281" fg:w="3"/><text x="23.8978%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.06%)</title><rect x="23.6478%" y="1237" width="0.0554%" height="15" fill="rgb(232,139,19)" fg:x="1281" fg:w="3"/><text x="23.8978%" y="1247.50"></text></g><g><title>decltype  (3 samples, 0.06%)</title><rect x="23.6478%" y="1221" width="0.0554%" height="15" fill="rgb(225,201,24)" fg:x="1281" fg:w="3"/><text x="23.8978%" y="1231.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (3 samples, 0.06%)</title><rect x="23.6478%" y="1205" width="0.0554%" height="15" fill="rgb(221,47,46)" fg:x="1281" fg:w="3"/><text x="23.8978%" y="1215.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (3 samples, 0.06%)</title><rect x="23.6478%" y="1189" width="0.0554%" height="15" fill="rgb(249,23,13)" fg:x="1281" fg:w="3"/><text x="23.8978%" y="1199.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (2 samples, 0.04%)</title><rect x="23.7216%" y="1221" width="0.0369%" height="15" fill="rgb(219,9,5)" fg:x="1285" fg:w="2"/><text x="23.9716%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (6 samples, 0.11%)</title><rect x="23.7585%" y="1205" width="0.1108%" height="15" fill="rgb(254,171,16)" fg:x="1287" fg:w="6"/><text x="24.0085%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (6 samples, 0.11%)</title><rect x="23.7585%" y="1189" width="0.1108%" height="15" fill="rgb(230,171,20)" fg:x="1287" fg:w="6"/><text x="24.0085%" y="1199.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (6 samples, 0.11%)</title><rect x="23.7585%" y="1173" width="0.1108%" height="15" fill="rgb(210,71,41)" fg:x="1287" fg:w="6"/><text x="24.0085%" y="1183.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (6 samples, 0.11%)</title><rect x="23.7585%" y="1157" width="0.1108%" height="15" fill="rgb(206,173,20)" fg:x="1287" fg:w="6"/><text x="24.0085%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (6 samples, 0.11%)</title><rect x="23.7585%" y="1141" width="0.1108%" height="15" fill="rgb(233,88,34)" fg:x="1287" fg:w="6"/><text x="24.0085%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (6 samples, 0.11%)</title><rect x="23.7585%" y="1125" width="0.1108%" height="15" fill="rgb(223,209,46)" fg:x="1287" fg:w="6"/><text x="24.0085%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (3 samples, 0.06%)</title><rect x="23.8139%" y="1109" width="0.0554%" height="15" fill="rgb(250,43,18)" fg:x="1290" fg:w="3"/><text x="24.0639%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="23.8693%" y="1109" width="0.0185%" height="15" fill="rgb(208,13,10)" fg:x="1293" fg:w="1"/><text x="24.1193%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="23.8693%" y="1093" width="0.0185%" height="15" fill="rgb(212,200,36)" fg:x="1293" fg:w="1"/><text x="24.1193%" y="1103.50"></text></g><g><title>CCoinsViewCache::Flush (619 samples, 11.43%)</title><rect x="12.4977%" y="1285" width="11.4270%" height="15" fill="rgb(225,90,30)" fg:x="677" fg:w="619"/><text x="12.7477%" y="1295.50">CCoinsViewCache::..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (12 samples, 0.22%)</title><rect x="23.7032%" y="1269" width="0.2215%" height="15" fill="rgb(236,182,39)" fg:x="1284" fg:w="12"/><text x="23.9532%" y="1279.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (12 samples, 0.22%)</title><rect x="23.7032%" y="1253" width="0.2215%" height="15" fill="rgb(212,144,35)" fg:x="1284" fg:w="12"/><text x="23.9532%" y="1263.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (12 samples, 0.22%)</title><rect x="23.7032%" y="1237" width="0.2215%" height="15" fill="rgb(228,63,44)" fg:x="1284" fg:w="12"/><text x="23.9532%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (9 samples, 0.17%)</title><rect x="23.7585%" y="1221" width="0.1661%" height="15" fill="rgb(228,109,6)" fg:x="1287" fg:w="9"/><text x="24.0085%" y="1231.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.06%)</title><rect x="23.8693%" y="1205" width="0.0554%" height="15" fill="rgb(238,117,24)" fg:x="1293" fg:w="3"/><text x="24.1193%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.06%)</title><rect x="23.8693%" y="1189" width="0.0554%" height="15" fill="rgb(242,26,26)" fg:x="1293" fg:w="3"/><text x="24.1193%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.06%)</title><rect x="23.8693%" y="1173" width="0.0554%" height="15" fill="rgb(221,92,48)" fg:x="1293" fg:w="3"/><text x="24.1193%" y="1183.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.06%)</title><rect x="23.8693%" y="1157" width="0.0554%" height="15" fill="rgb(209,209,32)" fg:x="1293" fg:w="3"/><text x="24.1193%" y="1167.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (3 samples, 0.06%)</title><rect x="23.8693%" y="1141" width="0.0554%" height="15" fill="rgb(221,70,22)" fg:x="1293" fg:w="3"/><text x="24.1193%" y="1151.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (3 samples, 0.06%)</title><rect x="23.8693%" y="1125" width="0.0554%" height="15" fill="rgb(248,145,5)" fg:x="1293" fg:w="3"/><text x="24.1193%" y="1135.50"></text></g><g><title>Coin::~Coin (2 samples, 0.04%)</title><rect x="23.8878%" y="1109" width="0.0369%" height="15" fill="rgb(226,116,26)" fg:x="1294" fg:w="2"/><text x="24.1378%" y="1119.50"></text></g><g><title>CTxOut::~CTxOut (2 samples, 0.04%)</title><rect x="23.8878%" y="1093" width="0.0369%" height="15" fill="rgb(244,5,17)" fg:x="1294" fg:w="2"/><text x="24.1378%" y="1103.50"></text></g><g><title>CScript::~CScript (2 samples, 0.04%)</title><rect x="23.8878%" y="1077" width="0.0369%" height="15" fill="rgb(252,159,33)" fg:x="1294" fg:w="2"/><text x="24.1378%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (2 samples, 0.04%)</title><rect x="23.8878%" y="1061" width="0.0369%" height="15" fill="rgb(206,71,0)" fg:x="1294" fg:w="2"/><text x="24.1378%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="23.9247%" y="1285" width="0.0185%" height="15" fill="rgb(233,118,54)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1295.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="23.9247%" y="1269" width="0.0185%" height="15" fill="rgb(234,83,48)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1279.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="23.9247%" y="1253" width="0.0185%" height="15" fill="rgb(228,3,54)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1263.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="23.9247%" y="1237" width="0.0185%" height="15" fill="rgb(226,155,13)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1247.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="23.9247%" y="1221" width="0.0185%" height="15" fill="rgb(241,28,37)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1231.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="23.9247%" y="1205" width="0.0185%" height="15" fill="rgb(233,93,10)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1215.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="23.9247%" y="1189" width="0.0185%" height="15" fill="rgb(225,113,19)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1199.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="23.9247%" y="1173" width="0.0185%" height="15" fill="rgb(241,2,18)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1183.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="23.9247%" y="1157" width="0.0185%" height="15" fill="rgb(228,207,21)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1167.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="23.9247%" y="1141" width="0.0185%" height="15" fill="rgb(213,211,35)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="23.9247%" y="1125" width="0.0185%" height="15" fill="rgb(209,83,10)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1135.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="23.9247%" y="1109" width="0.0185%" height="15" fill="rgb(209,164,1)" fg:x="1296" fg:w="1"/><text x="24.1747%" y="1119.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="23.9431%" y="1285" width="0.0185%" height="15" fill="rgb(213,184,43)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1295.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1269" width="0.0185%" height="15" fill="rgb(231,61,34)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1279.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1253" width="0.0185%" height="15" fill="rgb(235,75,3)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1263.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1237" width="0.0185%" height="15" fill="rgb(220,106,47)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1247.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1221" width="0.0185%" height="15" fill="rgb(210,196,33)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1231.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1205" width="0.0185%" height="15" fill="rgb(229,154,42)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1215.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1189" width="0.0185%" height="15" fill="rgb(228,114,26)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1199.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1173" width="0.0185%" height="15" fill="rgb(208,144,1)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1183.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1157" width="0.0185%" height="15" fill="rgb(239,112,37)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1141" width="0.0185%" height="15" fill="rgb(210,96,50)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.9431%" y="1125" width="0.0185%" height="15" fill="rgb(222,178,2)" fg:x="1297" fg:w="1"/><text x="24.1931%" y="1135.50"></text></g><g><title>CTxMemPool::removeConflicts (1 samples, 0.02%)</title><rect x="23.9616%" y="1285" width="0.0185%" height="15" fill="rgb(226,74,18)" fg:x="1298" fg:w="1"/><text x="24.2116%" y="1295.50"></text></g><g><title>indirectmap&lt;COutPoint, CTransaction const*&gt;::find (1 samples, 0.02%)</title><rect x="23.9616%" y="1269" width="0.0185%" height="15" fill="rgb(225,67,54)" fg:x="1298" fg:w="1"/><text x="24.2116%" y="1279.50"></text></g><g><title>std::map&lt;COutPoint const*, CTransaction const*, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="23.9616%" y="1253" width="0.0185%" height="15" fill="rgb(251,92,32)" fg:x="1298" fg:w="1"/><text x="24.2116%" y="1263.50"></text></g><g><title>SipHashUint256 (12 samples, 0.22%)</title><rect x="23.9801%" y="1269" width="0.2215%" height="15" fill="rgb(228,149,22)" fg:x="1299" fg:w="12"/><text x="24.2301%" y="1279.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="24.1462%" y="1253" width="0.0554%" height="15" fill="rgb(243,54,13)" fg:x="1308" fg:w="3"/><text x="24.3962%" y="1263.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="24.1462%" y="1237" width="0.0554%" height="15" fill="rgb(243,180,28)" fg:x="1308" fg:w="3"/><text x="24.3962%" y="1247.50"></text></g><g><title>CTxMemPool::removeForBlock (1 samples, 0.02%)</title><rect x="24.2016%" y="1189" width="0.0185%" height="15" fill="rgb(208,167,24)" fg:x="1311" fg:w="1"/><text x="24.4516%" y="1199.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt; &gt; (2 samples, 0.04%)</title><rect x="24.2016%" y="1269" width="0.0369%" height="15" fill="rgb(245,73,45)" fg:x="1311" fg:w="2"/><text x="24.4516%" y="1279.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt;, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (2 samples, 0.04%)</title><rect x="24.2016%" y="1253" width="0.0369%" height="15" fill="rgb(237,203,48)" fg:x="1311" fg:w="2"/><text x="24.4516%" y="1263.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (2 samples, 0.04%)</title><rect x="24.2016%" y="1237" width="0.0369%" height="15" fill="rgb(211,197,16)" fg:x="1311" fg:w="2"/><text x="24.4516%" y="1247.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;uint256, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (2 samples, 0.04%)</title><rect x="24.2016%" y="1221" width="0.0369%" height="15" fill="rgb(243,99,51)" fg:x="1311" fg:w="2"/><text x="24.4516%" y="1231.50"></text></g><g><title>SaltedTxidHasher::operator (2 samples, 0.04%)</title><rect x="24.2016%" y="1205" width="0.0369%" height="15" fill="rgb(215,123,29)" fg:x="1311" fg:w="2"/><text x="24.4516%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::equal_range (1 samples, 0.02%)</title><rect x="24.2200%" y="1189" width="0.0185%" height="15" fill="rgb(239,186,37)" fg:x="1312" fg:w="1"/><text x="24.4700%" y="1199.50"></text></g><g><title>SipHashUint256 (1 samples, 0.02%)</title><rect x="24.2385%" y="1253" width="0.0185%" height="15" fill="rgb(252,136,39)" fg:x="1313" fg:w="1"/><text x="24.4885%" y="1263.50"></text></g><g><title>CTxMemPool::removeForBlock (16 samples, 0.30%)</title><rect x="23.9801%" y="1285" width="0.2954%" height="15" fill="rgb(223,213,32)" fg:x="1299" fg:w="16"/><text x="24.2301%" y="1295.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (2 samples, 0.04%)</title><rect x="24.2385%" y="1269" width="0.0369%" height="15" fill="rgb(233,115,5)" fg:x="1313" fg:w="2"/><text x="24.4885%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (1 samples, 0.02%)</title><rect x="24.2570%" y="1253" width="0.0185%" height="15" fill="rgb(207,226,44)" fg:x="1314" fg:w="1"/><text x="24.5070%" y="1263.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="24.2570%" y="1237" width="0.0185%" height="15" fill="rgb(208,126,0)" fg:x="1314" fg:w="1"/><text x="24.5070%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint const*, std::pair&lt;COutPoint const* const, CTransaction const*&gt;, std::_Select1st&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt;, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="24.2570%" y="1221" width="0.0185%" height="15" fill="rgb(244,66,21)" fg:x="1314" fg:w="1"/><text x="24.5070%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="24.2939%" y="1173" width="0.0185%" height="15" fill="rgb(222,97,12)" fg:x="1316" fg:w="1"/><text x="24.5439%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="24.2939%" y="1157" width="0.0185%" height="15" fill="rgb(219,213,19)" fg:x="1316" fg:w="1"/><text x="24.5439%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="24.2939%" y="1141" width="0.0185%" height="15" fill="rgb(252,169,30)" fg:x="1316" fg:w="1"/><text x="24.5439%" y="1151.50"></text></g><g><title>Coin::Coin (9 samples, 0.17%)</title><rect x="24.2939%" y="1237" width="0.1661%" height="15" fill="rgb(206,32,51)" fg:x="1316" fg:w="9"/><text x="24.5439%" y="1247.50"></text></g><g><title>CTxOut::CTxOut (9 samples, 0.17%)</title><rect x="24.2939%" y="1221" width="0.1661%" height="15" fill="rgb(250,172,42)" fg:x="1316" fg:w="9"/><text x="24.5439%" y="1231.50"></text></g><g><title>CScript::CScript (9 samples, 0.17%)</title><rect x="24.2939%" y="1205" width="0.1661%" height="15" fill="rgb(209,34,43)" fg:x="1316" fg:w="9"/><text x="24.5439%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (9 samples, 0.17%)</title><rect x="24.2939%" y="1189" width="0.1661%" height="15" fill="rgb(223,11,35)" fg:x="1316" fg:w="9"/><text x="24.5439%" y="1199.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (8 samples, 0.15%)</title><rect x="24.3124%" y="1173" width="0.1477%" height="15" fill="rgb(251,219,26)" fg:x="1317" fg:w="8"/><text x="24.5624%" y="1183.50"></text></g><g><title>AddCoins (10 samples, 0.18%)</title><rect x="24.2939%" y="1253" width="0.1846%" height="15" fill="rgb(231,119,3)" fg:x="1316" fg:w="10"/><text x="24.5439%" y="1263.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="24.4600%" y="1237" width="0.0185%" height="15" fill="rgb(216,97,11)" fg:x="1325" fg:w="1"/><text x="24.7100%" y="1247.50"></text></g><g><title>COutPoint::COutPoint (1 samples, 0.02%)</title><rect x="24.4970%" y="1173" width="0.0185%" height="15" fill="rgb(223,59,9)" fg:x="1327" fg:w="1"/><text x="24.7470%" y="1183.50"></text></g><g><title>AddCoins (4 samples, 0.07%)</title><rect x="24.4970%" y="1189" width="0.0738%" height="15" fill="rgb(233,93,31)" fg:x="1327" fg:w="4"/><text x="24.7470%" y="1199.50"></text></g><g><title>Coin::Coin (3 samples, 0.06%)</title><rect x="24.5154%" y="1173" width="0.0554%" height="15" fill="rgb(239,81,33)" fg:x="1328" fg:w="3"/><text x="24.7654%" y="1183.50"></text></g><g><title>CTxOut::CTxOut (3 samples, 0.06%)</title><rect x="24.5154%" y="1157" width="0.0554%" height="15" fill="rgb(213,120,34)" fg:x="1328" fg:w="3"/><text x="24.7654%" y="1167.50"></text></g><g><title>CScript::CScript (3 samples, 0.06%)</title><rect x="24.5154%" y="1141" width="0.0554%" height="15" fill="rgb(243,49,53)" fg:x="1328" fg:w="3"/><text x="24.7654%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (3 samples, 0.06%)</title><rect x="24.5154%" y="1125" width="0.0554%" height="15" fill="rgb(247,216,33)" fg:x="1328" fg:w="3"/><text x="24.7654%" y="1135.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (3 samples, 0.06%)</title><rect x="24.5154%" y="1109" width="0.0554%" height="15" fill="rgb(226,26,14)" fg:x="1328" fg:w="3"/><text x="24.7654%" y="1119.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.11%)</title><rect x="24.5708%" y="1189" width="0.1108%" height="15" fill="rgb(215,49,53)" fg:x="1331" fg:w="6"/><text x="24.8208%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.6631%" y="1173" width="0.0185%" height="15" fill="rgb(245,162,40)" fg:x="1336" fg:w="1"/><text x="24.9131%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.6631%" y="1157" width="0.0185%" height="15" fill="rgb(229,68,17)" fg:x="1336" fg:w="1"/><text x="24.9131%" y="1167.50"></text></g><g><title>CScript::IsUnspendable (1 samples, 0.02%)</title><rect x="24.6816%" y="1157" width="0.0185%" height="15" fill="rgb(213,182,10)" fg:x="1337" fg:w="1"/><text x="24.9316%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="24.6816%" y="1141" width="0.0185%" height="15" fill="rgb(245,125,30)" fg:x="1337" fg:w="1"/><text x="24.9316%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="24.6816%" y="1125" width="0.0185%" height="15" fill="rgb(232,202,2)" fg:x="1337" fg:w="1"/><text x="24.9316%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="24.7000%" y="1109" width="0.0185%" height="15" fill="rgb(237,140,51)" fg:x="1338" fg:w="1"/><text x="24.9500%" y="1119.50"></text></g><g><title>CCoinsViewCache::AddCoin (3 samples, 0.06%)</title><rect x="24.6816%" y="1173" width="0.0554%" height="15" fill="rgb(236,157,25)" fg:x="1337" fg:w="3"/><text x="24.9316%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.04%)</title><rect x="24.7000%" y="1157" width="0.0369%" height="15" fill="rgb(219,209,0)" fg:x="1338" fg:w="2"/><text x="24.9500%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.04%)</title><rect x="24.7000%" y="1141" width="0.0369%" height="15" fill="rgb(240,116,54)" fg:x="1338" fg:w="2"/><text x="24.9500%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.04%)</title><rect x="24.7000%" y="1125" width="0.0369%" height="15" fill="rgb(216,10,36)" fg:x="1338" fg:w="2"/><text x="24.9500%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="24.7185%" y="1109" width="0.0185%" height="15" fill="rgb(222,72,44)" fg:x="1339" fg:w="1"/><text x="24.9685%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="24.7185%" y="1093" width="0.0185%" height="15" fill="rgb(232,159,9)" fg:x="1339" fg:w="1"/><text x="24.9685%" y="1103.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.09%)</title><rect x="24.7369%" y="1173" width="0.0923%" height="15" fill="rgb(210,39,32)" fg:x="1340" fg:w="5"/><text x="24.9869%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.8108%" y="1157" width="0.0185%" height="15" fill="rgb(216,194,45)" fg:x="1344" fg:w="1"/><text x="25.0608%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.8108%" y="1141" width="0.0185%" height="15" fill="rgb(218,18,35)" fg:x="1344" fg:w="1"/><text x="25.0608%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (15 samples, 0.28%)</title><rect x="24.6816%" y="1189" width="0.2769%" height="15" fill="rgb(207,83,51)" fg:x="1337" fg:w="15"/><text x="24.9316%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.13%)</title><rect x="24.8292%" y="1173" width="0.1292%" height="15" fill="rgb(225,63,43)" fg:x="1345" fg:w="7"/><text x="25.0792%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.13%)</title><rect x="24.8292%" y="1157" width="0.1292%" height="15" fill="rgb(207,57,36)" fg:x="1345" fg:w="7"/><text x="25.0792%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.13%)</title><rect x="24.8292%" y="1141" width="0.1292%" height="15" fill="rgb(216,99,33)" fg:x="1345" fg:w="7"/><text x="25.0792%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (7 samples, 0.13%)</title><rect x="24.8292%" y="1125" width="0.1292%" height="15" fill="rgb(225,42,16)" fg:x="1345" fg:w="7"/><text x="25.0792%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (7 samples, 0.13%)</title><rect x="24.8292%" y="1109" width="0.1292%" height="15" fill="rgb(220,201,45)" fg:x="1345" fg:w="7"/><text x="25.0792%" y="1119.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.13%)</title><rect x="24.8292%" y="1093" width="0.1292%" height="15" fill="rgb(225,33,4)" fg:x="1345" fg:w="7"/><text x="25.0792%" y="1103.50"></text></g><g><title>SipHashUint256Extra (10 samples, 0.18%)</title><rect x="24.9585%" y="1173" width="0.1846%" height="15" fill="rgb(224,33,50)" fg:x="1352" fg:w="10"/><text x="25.2085%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="25.0508%" y="1157" width="0.0923%" height="15" fill="rgb(246,198,51)" fg:x="1357" fg:w="5"/><text x="25.3008%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="25.0508%" y="1141" width="0.0923%" height="15" fill="rgb(205,22,4)" fg:x="1357" fg:w="5"/><text x="25.3008%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="25.2538%" y="1077" width="0.0185%" height="15" fill="rgb(206,3,8)" fg:x="1368" fg:w="1"/><text x="25.5038%" y="1087.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="25.2538%" y="1061" width="0.0185%" height="15" fill="rgb(251,23,15)" fg:x="1368" fg:w="1"/><text x="25.5038%" y="1071.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="25.2538%" y="1045" width="0.0185%" height="15" fill="rgb(252,88,28)" fg:x="1368" fg:w="1"/><text x="25.5038%" y="1055.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.15%)</title><rect x="25.1615%" y="1093" width="0.1477%" height="15" fill="rgb(212,127,14)" fg:x="1363" fg:w="8"/><text x="25.4115%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="25.2723%" y="1077" width="0.0369%" height="15" fill="rgb(247,145,37)" fg:x="1369" fg:w="2"/><text x="25.5223%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="25.2723%" y="1061" width="0.0369%" height="15" fill="rgb(209,117,53)" fg:x="1369" fg:w="2"/><text x="25.5223%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (20 samples, 0.37%)</title><rect x="24.9585%" y="1189" width="0.3692%" height="15" fill="rgb(212,90,42)" fg:x="1352" fg:w="20"/><text x="25.2085%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (10 samples, 0.18%)</title><rect x="25.1431%" y="1173" width="0.1846%" height="15" fill="rgb(218,164,37)" fg:x="1362" fg:w="10"/><text x="25.3931%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (10 samples, 0.18%)</title><rect x="25.1431%" y="1157" width="0.1846%" height="15" fill="rgb(246,65,34)" fg:x="1362" fg:w="10"/><text x="25.3931%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (9 samples, 0.17%)</title><rect x="25.1615%" y="1141" width="0.1661%" height="15" fill="rgb(231,100,33)" fg:x="1363" fg:w="9"/><text x="25.4115%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (9 samples, 0.17%)</title><rect x="25.1615%" y="1125" width="0.1661%" height="15" fill="rgb(228,126,14)" fg:x="1363" fg:w="9"/><text x="25.4115%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (9 samples, 0.17%)</title><rect x="25.1615%" y="1109" width="0.1661%" height="15" fill="rgb(215,173,21)" fg:x="1363" fg:w="9"/><text x="25.4115%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="25.3092%" y="1093" width="0.0185%" height="15" fill="rgb(210,6,40)" fg:x="1371" fg:w="1"/><text x="25.5592%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="25.3092%" y="1077" width="0.0185%" height="15" fill="rgb(212,48,18)" fg:x="1371" fg:w="1"/><text x="25.5592%" y="1087.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (1 samples, 0.02%)</title><rect x="25.3092%" y="1061" width="0.0185%" height="15" fill="rgb(230,214,11)" fg:x="1371" fg:w="1"/><text x="25.5592%" y="1071.50"></text></g><g><title>AddCoins (5 samples, 0.09%)</title><rect x="25.3277%" y="1173" width="0.0923%" height="15" fill="rgb(254,105,39)" fg:x="1372" fg:w="5"/><text x="25.5777%" y="1183.50"></text></g><g><title>Coin::Coin (5 samples, 0.09%)</title><rect x="25.3277%" y="1157" width="0.0923%" height="15" fill="rgb(245,158,5)" fg:x="1372" fg:w="5"/><text x="25.5777%" y="1167.50"></text></g><g><title>CTxOut::CTxOut (5 samples, 0.09%)</title><rect x="25.3277%" y="1141" width="0.0923%" height="15" fill="rgb(249,208,11)" fg:x="1372" fg:w="5"/><text x="25.5777%" y="1151.50"></text></g><g><title>CScript::CScript (5 samples, 0.09%)</title><rect x="25.3277%" y="1125" width="0.0923%" height="15" fill="rgb(210,39,28)" fg:x="1372" fg:w="5"/><text x="25.5777%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (5 samples, 0.09%)</title><rect x="25.3277%" y="1109" width="0.0923%" height="15" fill="rgb(211,56,53)" fg:x="1372" fg:w="5"/><text x="25.5777%" y="1119.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (5 samples, 0.09%)</title><rect x="25.3277%" y="1093" width="0.0923%" height="15" fill="rgb(226,201,30)" fg:x="1372" fg:w="5"/><text x="25.5777%" y="1103.50"></text></g><g><title>decltype  (10 samples, 0.18%)</title><rect x="25.4384%" y="1157" width="0.1846%" height="15" fill="rgb(239,101,34)" fg:x="1378" fg:w="10"/><text x="25.6884%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (10 samples, 0.18%)</title><rect x="25.4384%" y="1141" width="0.1846%" height="15" fill="rgb(226,209,5)" fg:x="1378" fg:w="10"/><text x="25.6884%" y="1151.50"></text></g><g><title>decltype  (10 samples, 0.18%)</title><rect x="25.4384%" y="1125" width="0.1846%" height="15" fill="rgb(250,105,47)" fg:x="1378" fg:w="10"/><text x="25.6884%" y="1135.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (10 samples, 0.18%)</title><rect x="25.4384%" y="1109" width="0.1846%" height="15" fill="rgb(230,72,3)" fg:x="1378" fg:w="10"/><text x="25.6884%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (10 samples, 0.18%)</title><rect x="25.4384%" y="1093" width="0.1846%" height="15" fill="rgb(232,218,39)" fg:x="1378" fg:w="10"/><text x="25.6884%" y="1103.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="25.4384%" y="1077" width="0.1846%" height="15" fill="rgb(248,166,6)" fg:x="1378" fg:w="10"/><text x="25.6884%" y="1087.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="25.4384%" y="1061" width="0.1846%" height="15" fill="rgb(247,89,20)" fg:x="1378" fg:w="10"/><text x="25.6884%" y="1071.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="25.4384%" y="1045" width="0.1846%" height="15" fill="rgb(248,130,54)" fg:x="1378" fg:w="10"/><text x="25.6884%" y="1055.50"></text></g><g><title>[unknown] (9 samples, 0.17%)</title><rect x="25.4569%" y="1029" width="0.1661%" height="15" fill="rgb(234,196,4)" fg:x="1379" fg:w="9"/><text x="25.7069%" y="1039.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="25.4754%" y="1013" width="0.1477%" height="15" fill="rgb(250,143,31)" fg:x="1380" fg:w="8"/><text x="25.7254%" y="1023.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="25.4754%" y="997" width="0.1477%" height="15" fill="rgb(211,110,34)" fg:x="1380" fg:w="8"/><text x="25.7254%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="25.4938%" y="981" width="0.1292%" height="15" fill="rgb(215,124,48)" fg:x="1381" fg:w="7"/><text x="25.7438%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="25.5123%" y="965" width="0.1108%" height="15" fill="rgb(216,46,13)" fg:x="1382" fg:w="6"/><text x="25.7623%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="25.5492%" y="949" width="0.0738%" height="15" fill="rgb(205,184,25)" fg:x="1384" fg:w="4"/><text x="25.7992%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="25.5861%" y="933" width="0.0369%" height="15" fill="rgb(228,1,10)" fg:x="1386" fg:w="2"/><text x="25.8361%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.6046%" y="917" width="0.0185%" height="15" fill="rgb(213,116,27)" fg:x="1387" fg:w="1"/><text x="25.8546%" y="927.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_Hash_node (1 samples, 0.02%)</title><rect x="25.6230%" y="1157" width="0.0185%" height="15" fill="rgb(241,95,50)" fg:x="1388" fg:w="1"/><text x="25.8730%" y="1167.50"></text></g><g><title>std::__detail::_Hash_node_base::_Hash_node_base (1 samples, 0.02%)</title><rect x="25.6230%" y="1141" width="0.0185%" height="15" fill="rgb(238,48,32)" fg:x="1388" fg:w="1"/><text x="25.8730%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.6230%" y="1125" width="0.0185%" height="15" fill="rgb(235,113,49)" fg:x="1388" fg:w="1"/><text x="25.8730%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.6230%" y="1109" width="0.0185%" height="15" fill="rgb(205,127,43)" fg:x="1388" fg:w="1"/><text x="25.8730%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.6230%" y="1093" width="0.0185%" height="15" fill="rgb(250,162,2)" fg:x="1388" fg:w="1"/><text x="25.8730%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.6230%" y="1077" width="0.0185%" height="15" fill="rgb(220,13,41)" fg:x="1388" fg:w="1"/><text x="25.8730%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.6230%" y="1061" width="0.0185%" height="15" fill="rgb(249,221,25)" fg:x="1388" fg:w="1"/><text x="25.8730%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.6230%" y="1045" width="0.0185%" height="15" fill="rgb(215,208,19)" fg:x="1388" fg:w="1"/><text x="25.8730%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.6230%" y="1029" width="0.0185%" height="15" fill="rgb(236,175,2)" fg:x="1388" fg:w="1"/><text x="25.8730%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (20 samples, 0.37%)</title><rect x="25.3277%" y="1189" width="0.3692%" height="15" fill="rgb(241,52,2)" fg:x="1372" fg:w="20"/><text x="25.5777%" y="1199.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (15 samples, 0.28%)</title><rect x="25.4200%" y="1173" width="0.2769%" height="15" fill="rgb(248,140,14)" fg:x="1377" fg:w="15"/><text x="25.6700%" y="1183.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (3 samples, 0.06%)</title><rect x="25.6415%" y="1157" width="0.0554%" height="15" fill="rgb(253,22,42)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1167.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (3 samples, 0.06%)</title><rect x="25.6415%" y="1141" width="0.0554%" height="15" fill="rgb(234,61,47)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (3 samples, 0.06%)</title><rect x="25.6415%" y="1125" width="0.0554%" height="15" fill="rgb(208,226,15)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (3 samples, 0.06%)</title><rect x="25.6415%" y="1109" width="0.0554%" height="15" fill="rgb(217,221,4)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (3 samples, 0.06%)</title><rect x="25.6415%" y="1093" width="0.0554%" height="15" fill="rgb(212,174,34)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1103.50"></text></g><g><title>operator new (3 samples, 0.06%)</title><rect x="25.6415%" y="1077" width="0.0554%" height="15" fill="rgb(253,83,4)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1087.50"></text></g><g><title>__posix_memalign (3 samples, 0.06%)</title><rect x="25.6415%" y="1061" width="0.0554%" height="15" fill="rgb(250,195,49)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1071.50"></text></g><g><title>malloc (3 samples, 0.06%)</title><rect x="25.6415%" y="1045" width="0.0554%" height="15" fill="rgb(241,192,25)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1055.50"></text></g><g><title>_int_malloc (3 samples, 0.06%)</title><rect x="25.6415%" y="1029" width="0.0554%" height="15" fill="rgb(208,124,10)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1039.50"></text></g><g><title>sysmalloc (3 samples, 0.06%)</title><rect x="25.6415%" y="1013" width="0.0554%" height="15" fill="rgb(222,33,0)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1023.50"></text></g><g><title>__mprotect (3 samples, 0.06%)</title><rect x="25.6415%" y="997" width="0.0554%" height="15" fill="rgb(234,209,28)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="25.6415%" y="981" width="0.0554%" height="15" fill="rgb(224,11,23)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="25.6415%" y="965" width="0.0554%" height="15" fill="rgb(232,99,1)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="25.6415%" y="949" width="0.0554%" height="15" fill="rgb(237,95,45)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="25.6415%" y="933" width="0.0554%" height="15" fill="rgb(208,109,11)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="25.6415%" y="917" width="0.0554%" height="15" fill="rgb(216,190,48)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="25.6415%" y="901" width="0.0554%" height="15" fill="rgb(251,171,36)" fg:x="1389" fg:w="3"/><text x="25.8915%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="25.6600%" y="885" width="0.0369%" height="15" fill="rgb(230,62,22)" fg:x="1390" fg:w="2"/><text x="25.9100%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="25.6600%" y="869" width="0.0369%" height="15" fill="rgb(225,114,35)" fg:x="1390" fg:w="2"/><text x="25.9100%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="25.6600%" y="853" width="0.0369%" height="15" fill="rgb(215,118,42)" fg:x="1390" fg:w="2"/><text x="25.9100%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="25.6600%" y="837" width="0.0369%" height="15" fill="rgb(243,119,21)" fg:x="1390" fg:w="2"/><text x="25.9100%" y="847.50"></text></g><g><title>CCoinsViewCache::AddCoin (67 samples, 1.24%)</title><rect x="24.4785%" y="1253" width="1.2368%" height="15" fill="rgb(252,177,53)" fg:x="1326" fg:w="67"/><text x="24.7285%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (66 samples, 1.22%)</title><rect x="24.4970%" y="1237" width="1.2184%" height="15" fill="rgb(237,209,29)" fg:x="1327" fg:w="66"/><text x="24.7470%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (66 samples, 1.22%)</title><rect x="24.4970%" y="1221" width="1.2184%" height="15" fill="rgb(212,65,23)" fg:x="1327" fg:w="66"/><text x="24.7470%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (66 samples, 1.22%)</title><rect x="24.4970%" y="1205" width="1.2184%" height="15" fill="rgb(230,222,46)" fg:x="1327" fg:w="66"/><text x="24.7470%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="25.6969%" y="1189" width="0.0185%" height="15" fill="rgb(215,135,32)" fg:x="1392" fg:w="1"/><text x="25.9469%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="25.6969%" y="1173" width="0.0185%" height="15" fill="rgb(246,101,22)" fg:x="1392" fg:w="1"/><text x="25.9469%" y="1183.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="25.6969%" y="1157" width="0.0185%" height="15" fill="rgb(206,107,13)" fg:x="1392" fg:w="1"/><text x="25.9469%" y="1167.50"></text></g><g><title>CScript::IsUnspendable (1 samples, 0.02%)</title><rect x="25.6969%" y="1141" width="0.0185%" height="15" fill="rgb(250,100,44)" fg:x="1392" fg:w="1"/><text x="25.9469%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="25.6969%" y="1125" width="0.0185%" height="15" fill="rgb(231,147,38)" fg:x="1392" fg:w="1"/><text x="25.9469%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="25.6969%" y="1109" width="0.0185%" height="15" fill="rgb(229,8,40)" fg:x="1392" fg:w="1"/><text x="25.9469%" y="1119.50"></text></g><g><title>Coin::Coin (2 samples, 0.04%)</title><rect x="25.7153%" y="1253" width="0.0369%" height="15" fill="rgb(221,135,30)" fg:x="1393" fg:w="2"/><text x="25.9653%" y="1263.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.04%)</title><rect x="25.7153%" y="1237" width="0.0369%" height="15" fill="rgb(249,193,18)" fg:x="1393" fg:w="2"/><text x="25.9653%" y="1247.50"></text></g><g><title>CScript::CScript (2 samples, 0.04%)</title><rect x="25.7153%" y="1221" width="0.0369%" height="15" fill="rgb(209,133,39)" fg:x="1393" fg:w="2"/><text x="25.9653%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.04%)</title><rect x="25.7153%" y="1205" width="0.0369%" height="15" fill="rgb(232,100,14)" fg:x="1393" fg:w="2"/><text x="25.9653%" y="1215.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.04%)</title><rect x="25.7153%" y="1189" width="0.0369%" height="15" fill="rgb(224,185,1)" fg:x="1393" fg:w="2"/><text x="25.9653%" y="1199.50"></text></g><g><title>SipHashUint256Extra (41 samples, 0.76%)</title><rect x="25.7523%" y="1253" width="0.7569%" height="15" fill="rgb(223,139,8)" fg:x="1395" fg:w="41"/><text x="26.0023%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (12 samples, 0.22%)</title><rect x="26.2876%" y="1237" width="0.2215%" height="15" fill="rgb(232,213,38)" fg:x="1424" fg:w="12"/><text x="26.5376%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (12 samples, 0.22%)</title><rect x="26.2876%" y="1221" width="0.2215%" height="15" fill="rgb(207,94,22)" fg:x="1424" fg:w="12"/><text x="26.5376%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="26.5091%" y="1253" width="0.0923%" height="15" fill="rgb(219,183,54)" fg:x="1436" fg:w="5"/><text x="26.7591%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.04%)</title><rect x="26.6014%" y="1253" width="0.0369%" height="15" fill="rgb(216,185,54)" fg:x="1441" fg:w="2"/><text x="26.8514%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="26.6199%" y="1237" width="0.0185%" height="15" fill="rgb(254,217,39)" fg:x="1442" fg:w="1"/><text x="26.8699%" y="1247.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="26.6384%" y="1253" width="0.0369%" height="15" fill="rgb(240,178,23)" fg:x="1443" fg:w="2"/><text x="26.8884%" y="1263.50"></text></g><g><title>AddCoins (131 samples, 2.42%)</title><rect x="24.2754%" y="1269" width="2.4183%" height="15" fill="rgb(218,11,47)" fg:x="1315" fg:w="131"/><text x="24.5254%" y="1279.50">Ad..</text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="26.6753%" y="1253" width="0.0185%" height="15" fill="rgb(218,51,51)" fg:x="1445" fg:w="1"/><text x="26.9253%" y="1263.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.02%)</title><rect x="26.6937%" y="1269" width="0.0185%" height="15" fill="rgb(238,126,27)" fg:x="1446" fg:w="1"/><text x="26.9437%" y="1279.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~_Vector_base (4 samples, 0.07%)</title><rect x="26.7122%" y="1237" width="0.0738%" height="15" fill="rgb(249,202,22)" fg:x="1447" fg:w="4"/><text x="26.9622%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::_M_deallocate (4 samples, 0.07%)</title><rect x="26.7122%" y="1221" width="0.0738%" height="15" fill="rgb(254,195,49)" fg:x="1447" fg:w="4"/><text x="26.9622%" y="1231.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxUndo&gt; &gt;::deallocate (4 samples, 0.07%)</title><rect x="26.7122%" y="1205" width="0.0738%" height="15" fill="rgb(208,123,14)" fg:x="1447" fg:w="4"/><text x="26.9622%" y="1215.50"></text></g><g><title>std::allocator&lt;CTxUndo&gt;::deallocate (4 samples, 0.07%)</title><rect x="26.7122%" y="1189" width="0.0738%" height="15" fill="rgb(224,200,8)" fg:x="1447" fg:w="4"/><text x="26.9622%" y="1199.50"></text></g><g><title>std::__new_allocator&lt;CTxUndo&gt;::deallocate (4 samples, 0.07%)</title><rect x="26.7122%" y="1173" width="0.0738%" height="15" fill="rgb(217,61,36)" fg:x="1447" fg:w="4"/><text x="26.9622%" y="1183.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="26.7122%" y="1157" width="0.0738%" height="15" fill="rgb(206,35,45)" fg:x="1447" fg:w="4"/><text x="26.9622%" y="1167.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="26.7122%" y="1141" width="0.0738%" height="15" fill="rgb(217,65,33)" fg:x="1447" fg:w="4"/><text x="26.9622%" y="1151.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (4 samples, 0.07%)</title><rect x="26.7122%" y="1125" width="0.0738%" height="15" fill="rgb(222,158,48)" fg:x="1447" fg:w="4"/><text x="26.9622%" y="1135.50"></text></g><g><title>malloc_consolidate (4 samples, 0.07%)</title><rect x="26.7122%" y="1109" width="0.0738%" height="15" fill="rgb(254,2,54)" fg:x="1447" fg:w="4"/><text x="26.9622%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~_Vector_base (4 samples, 0.07%)</title><rect x="26.7860%" y="1125" width="0.0738%" height="15" fill="rgb(250,143,38)" fg:x="1451" fg:w="4"/><text x="27.0360%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_deallocate (4 samples, 0.07%)</title><rect x="26.7860%" y="1109" width="0.0738%" height="15" fill="rgb(248,25,0)" fg:x="1451" fg:w="4"/><text x="27.0360%" y="1119.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::deallocate (4 samples, 0.07%)</title><rect x="26.7860%" y="1093" width="0.0738%" height="15" fill="rgb(206,152,27)" fg:x="1451" fg:w="4"/><text x="27.0360%" y="1103.50"></text></g><g><title>std::allocator&lt;Coin&gt;::deallocate (4 samples, 0.07%)</title><rect x="26.7860%" y="1077" width="0.0738%" height="15" fill="rgb(240,77,30)" fg:x="1451" fg:w="4"/><text x="27.0360%" y="1087.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::deallocate (4 samples, 0.07%)</title><rect x="26.7860%" y="1061" width="0.0738%" height="15" fill="rgb(231,5,3)" fg:x="1451" fg:w="4"/><text x="27.0360%" y="1071.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="26.7860%" y="1045" width="0.0738%" height="15" fill="rgb(207,226,32)" fg:x="1451" fg:w="4"/><text x="27.0360%" y="1055.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="26.7860%" y="1029" width="0.0738%" height="15" fill="rgb(222,207,47)" fg:x="1451" fg:w="4"/><text x="27.0360%" y="1039.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.02%)</title><rect x="26.8414%" y="1013" width="0.0185%" height="15" fill="rgb(229,115,45)" fg:x="1454" fg:w="1"/><text x="27.0914%" y="1023.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="26.8414%" y="997" width="0.0185%" height="15" fill="rgb(224,191,6)" fg:x="1454" fg:w="1"/><text x="27.0914%" y="1007.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="26.8599%" y="965" width="0.0185%" height="15" fill="rgb(230,227,24)" fg:x="1455" fg:w="1"/><text x="27.1099%" y="975.50"></text></g><g><title>CBlockUndo::~CBlockUndo (10 samples, 0.18%)</title><rect x="26.7122%" y="1269" width="0.1846%" height="15" fill="rgb(228,80,19)" fg:x="1447" fg:w="10"/><text x="26.9622%" y="1279.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (10 samples, 0.18%)</title><rect x="26.7122%" y="1253" width="0.1846%" height="15" fill="rgb(247,229,0)" fg:x="1447" fg:w="10"/><text x="26.9622%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (6 samples, 0.11%)</title><rect x="26.7860%" y="1237" width="0.1108%" height="15" fill="rgb(237,194,15)" fg:x="1451" fg:w="6"/><text x="27.0360%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (6 samples, 0.11%)</title><rect x="26.7860%" y="1221" width="0.1108%" height="15" fill="rgb(219,203,20)" fg:x="1451" fg:w="6"/><text x="27.0360%" y="1231.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (6 samples, 0.11%)</title><rect x="26.7860%" y="1205" width="0.1108%" height="15" fill="rgb(234,128,8)" fg:x="1451" fg:w="6"/><text x="27.0360%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (6 samples, 0.11%)</title><rect x="26.7860%" y="1189" width="0.1108%" height="15" fill="rgb(248,202,8)" fg:x="1451" fg:w="6"/><text x="27.0360%" y="1199.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (6 samples, 0.11%)</title><rect x="26.7860%" y="1173" width="0.1108%" height="15" fill="rgb(206,104,37)" fg:x="1451" fg:w="6"/><text x="27.0360%" y="1183.50"></text></g><g><title>CTxUndo::~CTxUndo (6 samples, 0.11%)</title><rect x="26.7860%" y="1157" width="0.1108%" height="15" fill="rgb(223,8,27)" fg:x="1451" fg:w="6"/><text x="27.0360%" y="1167.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (6 samples, 0.11%)</title><rect x="26.7860%" y="1141" width="0.1108%" height="15" fill="rgb(216,217,28)" fg:x="1451" fg:w="6"/><text x="27.0360%" y="1151.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (2 samples, 0.04%)</title><rect x="26.8599%" y="1125" width="0.0369%" height="15" fill="rgb(249,199,1)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="1135.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (2 samples, 0.04%)</title><rect x="26.8599%" y="1109" width="0.0369%" height="15" fill="rgb(240,85,17)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="1119.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (2 samples, 0.04%)</title><rect x="26.8599%" y="1093" width="0.0369%" height="15" fill="rgb(206,108,45)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="1103.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (2 samples, 0.04%)</title><rect x="26.8599%" y="1077" width="0.0369%" height="15" fill="rgb(245,210,41)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="1087.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (2 samples, 0.04%)</title><rect x="26.8599%" y="1061" width="0.0369%" height="15" fill="rgb(206,13,37)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="1071.50"></text></g><g><title>Coin::~Coin (2 samples, 0.04%)</title><rect x="26.8599%" y="1045" width="0.0369%" height="15" fill="rgb(250,61,18)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="1055.50"></text></g><g><title>CTxOut::~CTxOut (2 samples, 0.04%)</title><rect x="26.8599%" y="1029" width="0.0369%" height="15" fill="rgb(235,172,48)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="1039.50"></text></g><g><title>CScript::~CScript (2 samples, 0.04%)</title><rect x="26.8599%" y="1013" width="0.0369%" height="15" fill="rgb(249,201,17)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (2 samples, 0.04%)</title><rect x="26.8599%" y="997" width="0.0369%" height="15" fill="rgb(219,208,6)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="1007.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="26.8599%" y="981" width="0.0369%" height="15" fill="rgb(248,31,23)" fg:x="1455" fg:w="2"/><text x="27.1099%" y="991.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="26.8783%" y="965" width="0.0185%" height="15" fill="rgb(245,15,42)" fg:x="1456" fg:w="1"/><text x="27.1283%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (3 samples, 0.06%)</title><rect x="26.9153%" y="1205" width="0.0554%" height="15" fill="rgb(222,217,39)" fg:x="1458" fg:w="3"/><text x="27.1653%" y="1215.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="26.9337%" y="1189" width="0.0369%" height="15" fill="rgb(210,219,27)" fg:x="1459" fg:w="2"/><text x="27.1837%" y="1199.50"></text></g><g><title>CCoinsViewCache::FetchCoin (10 samples, 0.18%)</title><rect x="26.8968%" y="1253" width="0.1846%" height="15" fill="rgb(252,166,36)" fg:x="1457" fg:w="10"/><text x="27.1468%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (9 samples, 0.17%)</title><rect x="26.9153%" y="1237" width="0.1661%" height="15" fill="rgb(245,132,34)" fg:x="1458" fg:w="9"/><text x="27.1653%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (9 samples, 0.17%)</title><rect x="26.9153%" y="1221" width="0.1661%" height="15" fill="rgb(236,54,3)" fg:x="1458" fg:w="9"/><text x="27.1653%" y="1231.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.11%)</title><rect x="26.9706%" y="1205" width="0.1108%" height="15" fill="rgb(241,173,43)" fg:x="1461" fg:w="6"/><text x="27.2206%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.11%)</title><rect x="26.9706%" y="1189" width="0.1108%" height="15" fill="rgb(215,190,9)" fg:x="1461" fg:w="6"/><text x="27.2206%" y="1199.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.11%)</title><rect x="26.9706%" y="1173" width="0.1108%" height="15" fill="rgb(242,101,16)" fg:x="1461" fg:w="6"/><text x="27.2206%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="27.0260%" y="1157" width="0.0554%" height="15" fill="rgb(223,190,21)" fg:x="1464" fg:w="3"/><text x="27.2760%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="27.0260%" y="1141" width="0.0554%" height="15" fill="rgb(215,228,25)" fg:x="1464" fg:w="3"/><text x="27.2760%" y="1151.50"></text></g><g><title>CCoinsViewCache::AccessCoin (16 samples, 0.30%)</title><rect x="26.8968%" y="1269" width="0.2954%" height="15" fill="rgb(225,36,22)" fg:x="1457" fg:w="16"/><text x="27.1468%" y="1279.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.11%)</title><rect x="27.0814%" y="1253" width="0.1108%" height="15" fill="rgb(251,106,46)" fg:x="1467" fg:w="6"/><text x="27.3314%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="27.1368%" y="1237" width="0.0554%" height="15" fill="rgb(208,90,1)" fg:x="1470" fg:w="3"/><text x="27.3868%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="27.1368%" y="1221" width="0.0554%" height="15" fill="rgb(243,10,4)" fg:x="1470" fg:w="3"/><text x="27.3868%" y="1231.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="27.1922%" y="1269" width="0.0185%" height="15" fill="rgb(212,137,27)" fg:x="1473" fg:w="1"/><text x="27.4422%" y="1279.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (1 samples, 0.02%)</title><rect x="27.1922%" y="1253" width="0.0185%" height="15" fill="rgb(231,220,49)" fg:x="1473" fg:w="1"/><text x="27.4422%" y="1263.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="27.2660%" y="1253" width="0.0185%" height="15" fill="rgb(237,96,20)" fg:x="1477" fg:w="1"/><text x="27.5160%" y="1263.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="27.2660%" y="1237" width="0.0185%" height="15" fill="rgb(239,229,30)" fg:x="1477" fg:w="1"/><text x="27.5160%" y="1247.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="27.2660%" y="1221" width="0.0185%" height="15" fill="rgb(219,65,33)" fg:x="1477" fg:w="1"/><text x="27.5160%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="27.2660%" y="1205" width="0.0185%" height="15" fill="rgb(243,134,7)" fg:x="1477" fg:w="1"/><text x="27.5160%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (6 samples, 0.11%)</title><rect x="27.2106%" y="1269" width="0.1108%" height="15" fill="rgb(216,177,54)" fg:x="1474" fg:w="6"/><text x="27.4606%" y="1279.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (2 samples, 0.04%)</title><rect x="27.2845%" y="1253" width="0.0369%" height="15" fill="rgb(211,160,20)" fg:x="1478" fg:w="2"/><text x="27.5345%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="27.3029%" y="1237" width="0.0185%" height="15" fill="rgb(239,85,39)" fg:x="1479" fg:w="1"/><text x="27.5529%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="27.3029%" y="1221" width="0.0185%" height="15" fill="rgb(232,125,22)" fg:x="1479" fg:w="1"/><text x="27.5529%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="27.3214%" y="1093" width="0.0185%" height="15" fill="rgb(244,57,34)" fg:x="1480" fg:w="1"/><text x="27.5714%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="27.3214%" y="1077" width="0.0185%" height="15" fill="rgb(214,203,32)" fg:x="1480" fg:w="1"/><text x="27.5714%" y="1087.50"></text></g><g><title>CCoinsViewCache::GetCoin (9 samples, 0.17%)</title><rect x="27.3214%" y="1269" width="0.1661%" height="15" fill="rgb(207,58,43)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1279.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (9 samples, 0.17%)</title><rect x="27.3214%" y="1253" width="0.1661%" height="15" fill="rgb(215,193,15)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1263.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (9 samples, 0.17%)</title><rect x="27.3214%" y="1237" width="0.1661%" height="15" fill="rgb(232,15,44)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1247.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (9 samples, 0.17%)</title><rect x="27.3214%" y="1221" width="0.1661%" height="15" fill="rgb(212,3,48)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1231.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (9 samples, 0.17%)</title><rect x="27.3214%" y="1205" width="0.1661%" height="15" fill="rgb(218,128,7)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1215.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (9 samples, 0.17%)</title><rect x="27.3214%" y="1189" width="0.1661%" height="15" fill="rgb(226,216,39)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1199.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (9 samples, 0.17%)</title><rect x="27.3214%" y="1173" width="0.1661%" height="15" fill="rgb(243,47,51)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1183.50"></text></g><g><title>Coin::Coin (9 samples, 0.17%)</title><rect x="27.3214%" y="1157" width="0.1661%" height="15" fill="rgb(241,183,40)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1167.50"></text></g><g><title>CTxOut::CTxOut (9 samples, 0.17%)</title><rect x="27.3214%" y="1141" width="0.1661%" height="15" fill="rgb(231,217,32)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1151.50"></text></g><g><title>CScript::CScript (9 samples, 0.17%)</title><rect x="27.3214%" y="1125" width="0.1661%" height="15" fill="rgb(229,61,38)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (9 samples, 0.17%)</title><rect x="27.3214%" y="1109" width="0.1661%" height="15" fill="rgb(225,210,5)" fg:x="1480" fg:w="9"/><text x="27.5714%" y="1119.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (8 samples, 0.15%)</title><rect x="27.3399%" y="1093" width="0.1477%" height="15" fill="rgb(231,79,45)" fg:x="1481" fg:w="8"/><text x="27.5899%" y="1103.50"></text></g><g><title>CCoinsViewCache::SpendCoin (1 samples, 0.02%)</title><rect x="27.4875%" y="1269" width="0.0185%" height="15" fill="rgb(224,100,7)" fg:x="1489" fg:w="1"/><text x="27.7375%" y="1279.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="27.5060%" y="1269" width="0.0185%" height="15" fill="rgb(241,198,18)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1279.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1253" width="0.0185%" height="15" fill="rgb(252,97,53)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1263.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1237" width="0.0185%" height="15" fill="rgb(220,88,7)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1247.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1221" width="0.0185%" height="15" fill="rgb(213,176,14)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1231.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1205" width="0.0185%" height="15" fill="rgb(246,73,7)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1215.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1189" width="0.0185%" height="15" fill="rgb(245,64,36)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1199.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1173" width="0.0185%" height="15" fill="rgb(245,80,10)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1183.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1157" width="0.0185%" height="15" fill="rgb(232,107,50)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1141" width="0.0185%" height="15" fill="rgb(253,3,0)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1125" width="0.0185%" height="15" fill="rgb(212,99,53)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="27.5060%" y="1109" width="0.0185%" height="15" fill="rgb(249,111,54)" fg:x="1490" fg:w="1"/><text x="27.7560%" y="1119.50"></text></g><g><title>CTransaction::GetValueOut (1 samples, 0.02%)</title><rect x="27.5245%" y="1269" width="0.0185%" height="15" fill="rgb(249,55,30)" fg:x="1491" fg:w="1"/><text x="27.7745%" y="1279.50"></text></g><g><title>Chainstate::ConnectBlock (2 samples, 0.04%)</title><rect x="27.5429%" y="1269" width="0.0369%" height="15" fill="rgb(237,47,42)" fg:x="1492" fg:w="2"/><text x="27.7929%" y="1279.50"></text></g><g><title>std::vector&lt;CScriptCheck, std::allocator&lt;CScriptCheck&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="27.5614%" y="1253" width="0.0185%" height="15" fill="rgb(211,20,18)" fg:x="1493" fg:w="1"/><text x="27.8114%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;CScriptCheck*, CScriptCheck&gt; (1 samples, 0.02%)</title><rect x="27.5614%" y="1237" width="0.0185%" height="15" fill="rgb(231,203,46)" fg:x="1493" fg:w="1"/><text x="27.8114%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;CScriptCheck*&gt; (1 samples, 0.02%)</title><rect x="27.5614%" y="1221" width="0.0185%" height="15" fill="rgb(237,142,3)" fg:x="1493" fg:w="1"/><text x="27.8114%" y="1231.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CScriptCheck*&gt; (1 samples, 0.02%)</title><rect x="27.5614%" y="1205" width="0.0185%" height="15" fill="rgb(241,107,1)" fg:x="1493" fg:w="1"/><text x="27.8114%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="27.6168%" y="1173" width="0.0185%" height="15" fill="rgb(229,83,13)" fg:x="1496" fg:w="1"/><text x="27.8668%" y="1183.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="27.6352%" y="1173" width="0.0185%" height="15" fill="rgb(241,91,40)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1183.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="27.6352%" y="1157" width="0.0185%" height="15" fill="rgb(225,3,45)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1167.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="27.6352%" y="1141" width="0.0185%" height="15" fill="rgb(244,223,14)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1151.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="27.6352%" y="1125" width="0.0185%" height="15" fill="rgb(224,124,37)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="27.6352%" y="1109" width="0.0185%" height="15" fill="rgb(251,171,30)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1119.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="27.6352%" y="1093" width="0.0185%" height="15" fill="rgb(236,46,54)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="27.6352%" y="1077" width="0.0185%" height="15" fill="rgb(245,213,5)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1087.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="27.6352%" y="1061" width="0.0185%" height="15" fill="rgb(230,144,27)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1071.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="27.6352%" y="1045" width="0.0185%" height="15" fill="rgb(220,86,6)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1055.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="27.6352%" y="1029" width="0.0185%" height="15" fill="rgb(240,20,13)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="27.6352%" y="1013" width="0.0185%" height="15" fill="rgb(217,89,34)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1023.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="27.6352%" y="997" width="0.0185%" height="15" fill="rgb(229,13,5)" fg:x="1497" fg:w="1"/><text x="27.8852%" y="1007.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="27.6537%" y="1173" width="0.0185%" height="15" fill="rgb(244,67,35)" fg:x="1498" fg:w="1"/><text x="27.9037%" y="1183.50"></text></g><g><title>CCoinsViewCache::HaveCoin (1 samples, 0.02%)</title><rect x="27.6537%" y="1157" width="0.0185%" height="15" fill="rgb(221,40,2)" fg:x="1498" fg:w="1"/><text x="27.9037%" y="1167.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="27.6721%" y="1173" width="0.0185%" height="15" fill="rgb(237,157,21)" fg:x="1499" fg:w="1"/><text x="27.9221%" y="1183.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="27.6721%" y="1157" width="0.0185%" height="15" fill="rgb(222,94,11)" fg:x="1499" fg:w="1"/><text x="27.9221%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (7 samples, 0.13%)</title><rect x="27.6168%" y="1189" width="0.1292%" height="15" fill="rgb(249,113,6)" fg:x="1496" fg:w="7"/><text x="27.8668%" y="1199.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.06%)</title><rect x="27.6906%" y="1173" width="0.0554%" height="15" fill="rgb(238,137,36)" fg:x="1500" fg:w="3"/><text x="27.9406%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="27.6906%" y="1157" width="0.0554%" height="15" fill="rgb(210,102,26)" fg:x="1500" fg:w="3"/><text x="27.9406%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="27.6906%" y="1141" width="0.0554%" height="15" fill="rgb(218,30,30)" fg:x="1500" fg:w="3"/><text x="27.9406%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.06%)</title><rect x="27.7460%" y="1157" width="0.0554%" height="15" fill="rgb(214,67,26)" fg:x="1503" fg:w="3"/><text x="27.9960%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="27.7829%" y="1141" width="0.0185%" height="15" fill="rgb(251,9,53)" fg:x="1505" fg:w="1"/><text x="28.0329%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="27.8014%" y="1157" width="0.0185%" height="15" fill="rgb(228,204,25)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="27.8014%" y="1141" width="0.0185%" height="15" fill="rgb(207,153,8)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="27.8014%" y="1125" width="0.0185%" height="15" fill="rgb(242,9,16)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="27.8014%" y="1109" width="0.0185%" height="15" fill="rgb(217,211,10)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="27.8014%" y="1093" width="0.0185%" height="15" fill="rgb(219,228,52)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="27.8014%" y="1077" width="0.0185%" height="15" fill="rgb(231,92,29)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="27.8014%" y="1061" width="0.0185%" height="15" fill="rgb(232,8,23)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1071.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="27.8014%" y="1045" width="0.0185%" height="15" fill="rgb(216,211,34)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="27.8014%" y="1029" width="0.0185%" height="15" fill="rgb(236,151,0)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1039.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="27.8014%" y="1013" width="0.0185%" height="15" fill="rgb(209,168,3)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="27.8014%" y="997" width="0.0185%" height="15" fill="rgb(208,129,28)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="27.8014%" y="981" width="0.0185%" height="15" fill="rgb(229,78,22)" fg:x="1506" fg:w="1"/><text x="28.0514%" y="991.50"></text></g><g><title>CCoinsViewCache::FetchCoin (14 samples, 0.26%)</title><rect x="27.5798%" y="1237" width="0.2584%" height="15" fill="rgb(228,187,13)" fg:x="1494" fg:w="14"/><text x="27.8298%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (13 samples, 0.24%)</title><rect x="27.5983%" y="1221" width="0.2400%" height="15" fill="rgb(240,119,24)" fg:x="1495" fg:w="13"/><text x="27.8483%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (12 samples, 0.22%)</title><rect x="27.6168%" y="1205" width="0.2215%" height="15" fill="rgb(209,194,42)" fg:x="1496" fg:w="12"/><text x="27.8668%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.09%)</title><rect x="27.7460%" y="1189" width="0.0923%" height="15" fill="rgb(247,200,46)" fg:x="1503" fg:w="5"/><text x="27.9960%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (5 samples, 0.09%)</title><rect x="27.7460%" y="1173" width="0.0923%" height="15" fill="rgb(218,76,16)" fg:x="1503" fg:w="5"/><text x="27.9960%" y="1183.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="27.8198%" y="1157" width="0.0185%" height="15" fill="rgb(225,21,48)" fg:x="1507" fg:w="1"/><text x="28.0698%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="27.8198%" y="1141" width="0.0185%" height="15" fill="rgb(239,223,50)" fg:x="1507" fg:w="1"/><text x="28.0698%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="27.8198%" y="1125" width="0.0185%" height="15" fill="rgb(244,45,21)" fg:x="1507" fg:w="1"/><text x="28.0698%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (4 samples, 0.07%)</title><rect x="27.8383%" y="1237" width="0.0738%" height="15" fill="rgb(232,33,43)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1247.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (4 samples, 0.07%)</title><rect x="27.8383%" y="1221" width="0.0738%" height="15" fill="rgb(209,8,3)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1231.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (4 samples, 0.07%)</title><rect x="27.8383%" y="1205" width="0.0738%" height="15" fill="rgb(214,25,53)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="27.8383%" y="1189" width="0.0738%" height="15" fill="rgb(254,186,54)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="27.8383%" y="1173" width="0.0738%" height="15" fill="rgb(208,174,49)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="27.8383%" y="1157" width="0.0738%" height="15" fill="rgb(233,191,51)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="27.8383%" y="1141" width="0.0738%" height="15" fill="rgb(222,134,10)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1151.50"></text></g><g><title>Coin::Coin (4 samples, 0.07%)</title><rect x="27.8383%" y="1125" width="0.0738%" height="15" fill="rgb(230,226,20)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1135.50"></text></g><g><title>CTxOut::CTxOut (4 samples, 0.07%)</title><rect x="27.8383%" y="1109" width="0.0738%" height="15" fill="rgb(251,111,25)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1119.50"></text></g><g><title>CScript::CScript (4 samples, 0.07%)</title><rect x="27.8383%" y="1093" width="0.0738%" height="15" fill="rgb(224,40,46)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (4 samples, 0.07%)</title><rect x="27.8383%" y="1077" width="0.0738%" height="15" fill="rgb(236,108,47)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1087.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.07%)</title><rect x="27.8383%" y="1061" width="0.0738%" height="15" fill="rgb(234,93,0)" fg:x="1508" fg:w="4"/><text x="28.0883%" y="1071.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="27.9121%" y="1237" width="0.0369%" height="15" fill="rgb(224,213,32)" fg:x="1512" fg:w="2"/><text x="28.1621%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="27.9121%" y="1221" width="0.0369%" height="15" fill="rgb(251,11,48)" fg:x="1512" fg:w="2"/><text x="28.1621%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="27.9121%" y="1205" width="0.0369%" height="15" fill="rgb(236,173,5)" fg:x="1512" fg:w="2"/><text x="28.1621%" y="1215.50"></text></g><g><title>CCoinsViewCache::AccessCoin (21 samples, 0.39%)</title><rect x="27.5798%" y="1253" width="0.3877%" height="15" fill="rgb(230,95,12)" fg:x="1494" fg:w="21"/><text x="27.8298%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="27.9490%" y="1237" width="0.0185%" height="15" fill="rgb(232,209,1)" fg:x="1514" fg:w="1"/><text x="28.1990%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="27.9675%" y="1253" width="0.0185%" height="15" fill="rgb(232,6,1)" fg:x="1515" fg:w="1"/><text x="28.2175%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="27.9675%" y="1237" width="0.0185%" height="15" fill="rgb(210,224,50)" fg:x="1515" fg:w="1"/><text x="28.2175%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="27.9675%" y="1221" width="0.0185%" height="15" fill="rgb(228,127,35)" fg:x="1515" fg:w="1"/><text x="28.2175%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="27.9675%" y="1205" width="0.0185%" height="15" fill="rgb(245,102,45)" fg:x="1515" fg:w="1"/><text x="28.2175%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="27.9675%" y="1189" width="0.0185%" height="15" fill="rgb(214,1,49)" fg:x="1515" fg:w="1"/><text x="28.2175%" y="1199.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="27.9675%" y="1173" width="0.0185%" height="15" fill="rgb(226,163,40)" fg:x="1515" fg:w="1"/><text x="28.2175%" y="1183.50"></text></g><g><title>CCoinsViewCache::GetCoin (15 samples, 0.28%)</title><rect x="27.9860%" y="1253" width="0.2769%" height="15" fill="rgb(239,212,28)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1263.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (15 samples, 0.28%)</title><rect x="27.9860%" y="1237" width="0.2769%" height="15" fill="rgb(220,20,13)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1247.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (15 samples, 0.28%)</title><rect x="27.9860%" y="1221" width="0.2769%" height="15" fill="rgb(210,164,35)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1231.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (15 samples, 0.28%)</title><rect x="27.9860%" y="1205" width="0.2769%" height="15" fill="rgb(248,109,41)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (15 samples, 0.28%)</title><rect x="27.9860%" y="1189" width="0.2769%" height="15" fill="rgb(238,23,50)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1199.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (15 samples, 0.28%)</title><rect x="27.9860%" y="1173" width="0.2769%" height="15" fill="rgb(211,48,49)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (15 samples, 0.28%)</title><rect x="27.9860%" y="1157" width="0.2769%" height="15" fill="rgb(223,36,21)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1167.50"></text></g><g><title>Coin::Coin (15 samples, 0.28%)</title><rect x="27.9860%" y="1141" width="0.2769%" height="15" fill="rgb(207,123,46)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (15 samples, 0.28%)</title><rect x="27.9860%" y="1125" width="0.2769%" height="15" fill="rgb(240,218,32)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1135.50"></text></g><g><title>CScript::CScript (15 samples, 0.28%)</title><rect x="27.9860%" y="1109" width="0.2769%" height="15" fill="rgb(252,5,43)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (15 samples, 0.28%)</title><rect x="27.9860%" y="1093" width="0.2769%" height="15" fill="rgb(252,84,19)" fg:x="1516" fg:w="15"/><text x="28.2360%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (14 samples, 0.26%)</title><rect x="28.0044%" y="1077" width="0.2584%" height="15" fill="rgb(243,152,39)" fg:x="1517" fg:w="14"/><text x="28.2544%" y="1087.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="28.2629%" y="1189" width="0.0185%" height="15" fill="rgb(234,160,15)" fg:x="1531" fg:w="1"/><text x="28.5129%" y="1199.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="28.2629%" y="1173" width="0.0185%" height="15" fill="rgb(237,34,20)" fg:x="1531" fg:w="1"/><text x="28.5129%" y="1183.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.02%)</title><rect x="28.2629%" y="1157" width="0.0185%" height="15" fill="rgb(229,97,13)" fg:x="1531" fg:w="1"/><text x="28.5129%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="28.2629%" y="1141" width="0.0185%" height="15" fill="rgb(234,71,50)" fg:x="1531" fg:w="1"/><text x="28.5129%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.04%)</title><rect x="28.2629%" y="1205" width="0.0369%" height="15" fill="rgb(253,155,4)" fg:x="1531" fg:w="2"/><text x="28.5129%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="28.2813%" y="1189" width="0.0185%" height="15" fill="rgb(222,185,37)" fg:x="1532" fg:w="1"/><text x="28.5313%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="28.2813%" y="1173" width="0.0185%" height="15" fill="rgb(251,177,13)" fg:x="1532" fg:w="1"/><text x="28.5313%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="28.2813%" y="1157" width="0.0185%" height="15" fill="rgb(250,179,40)" fg:x="1532" fg:w="1"/><text x="28.5313%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Release (1 samples, 0.02%)</title><rect x="28.2998%" y="1061" width="0.0185%" height="15" fill="rgb(242,44,2)" fg:x="1533" fg:w="1"/><text x="28.5498%" y="1071.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="28.3183%" y="1029" width="0.0185%" height="15" fill="rgb(216,177,13)" fg:x="1534" fg:w="1"/><text x="28.5683%" y="1039.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="28.3367%" y="1013" width="0.0185%" height="15" fill="rgb(216,106,43)" fg:x="1535" fg:w="1"/><text x="28.5867%" y="1023.50"></text></g><g><title>leveldb::FindFile (4 samples, 0.07%)</title><rect x="28.3921%" y="997" width="0.0738%" height="15" fill="rgb(216,183,2)" fg:x="1538" fg:w="4"/><text x="28.6421%" y="1007.50"></text></g><g><title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (1 samples, 0.02%)</title><rect x="28.4475%" y="981" width="0.0185%" height="15" fill="rgb(249,75,3)" fg:x="1541" fg:w="1"/><text x="28.6975%" y="991.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="28.4844%" y="981" width="0.0369%" height="15" fill="rgb(219,67,39)" fg:x="1543" fg:w="2"/><text x="28.7344%" y="991.50"></text></g><g><title>leveldb::FindFile (2 samples, 0.04%)</title><rect x="28.5213%" y="981" width="0.0369%" height="15" fill="rgb(253,228,2)" fg:x="1545" fg:w="2"/><text x="28.7713%" y="991.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.06%)</title><rect x="28.5582%" y="981" width="0.0554%" height="15" fill="rgb(235,138,27)" fg:x="1547" fg:w="3"/><text x="28.8082%" y="991.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (12 samples, 0.22%)</title><rect x="28.4659%" y="997" width="0.2215%" height="15" fill="rgb(236,97,51)" fg:x="1542" fg:w="12"/><text x="28.7159%" y="1007.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (4 samples, 0.07%)</title><rect x="28.6136%" y="981" width="0.0738%" height="15" fill="rgb(240,80,30)" fg:x="1550" fg:w="4"/><text x="28.8636%" y="991.50"></text></g><g><title>leveldb::InternalKeyComparator::user_comparator (1 samples, 0.02%)</title><rect x="28.6690%" y="965" width="0.0185%" height="15" fill="rgb(230,178,19)" fg:x="1553" fg:w="1"/><text x="28.9190%" y="975.50"></text></g><g><title>leveldb::FindFile (19 samples, 0.35%)</title><rect x="28.3552%" y="1013" width="0.3507%" height="15" fill="rgb(210,190,27)" fg:x="1536" fg:w="19"/><text x="28.6052%" y="1023.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (1 samples, 0.02%)</title><rect x="28.6875%" y="997" width="0.0185%" height="15" fill="rgb(222,107,31)" fg:x="1554" fg:w="1"/><text x="28.9375%" y="1007.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.06%)</title><rect x="28.7059%" y="1013" width="0.0554%" height="15" fill="rgb(216,127,34)" fg:x="1555" fg:w="3"/><text x="28.9559%" y="1023.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.04%)</title><rect x="28.7244%" y="997" width="0.0369%" height="15" fill="rgb(234,116,52)" fg:x="1556" fg:w="2"/><text x="28.9744%" y="1007.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="28.7428%" y="981" width="0.0185%" height="15" fill="rgb(222,124,15)" fg:x="1557" fg:w="1"/><text x="28.9928%" y="991.50"></text></g><g><title>leveldb::MemTable::Get (1 samples, 0.02%)</title><rect x="28.7613%" y="1013" width="0.0185%" height="15" fill="rgb(231,179,28)" fg:x="1558" fg:w="1"/><text x="29.0113%" y="1023.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="28.7798%" y="1013" width="0.0185%" height="15" fill="rgb(226,93,45)" fg:x="1559" fg:w="1"/><text x="29.0298%" y="1023.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="28.7982%" y="997" width="0.0185%" height="15" fill="rgb(215,8,51)" fg:x="1560" fg:w="1"/><text x="29.0482%" y="1007.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="28.7982%" y="981" width="0.0185%" height="15" fill="rgb(223,106,5)" fg:x="1560" fg:w="1"/><text x="29.0482%" y="991.50"></text></g><g><title>Ref (1 samples, 0.02%)</title><rect x="28.7982%" y="965" width="0.0185%" height="15" fill="rgb(250,191,5)" fg:x="1560" fg:w="1"/><text x="29.0482%" y="975.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="28.7982%" y="949" width="0.0185%" height="15" fill="rgb(242,132,44)" fg:x="1560" fg:w="1"/><text x="29.0482%" y="959.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="28.8167%" y="997" width="0.0185%" height="15" fill="rgb(251,152,29)" fg:x="1561" fg:w="1"/><text x="29.0667%" y="1007.50"></text></g><g><title>leveldb::Table::InternalGet (2 samples, 0.04%)</title><rect x="28.8351%" y="997" width="0.0369%" height="15" fill="rgb(218,179,5)" fg:x="1562" fg:w="2"/><text x="29.0851%" y="1007.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="28.8721%" y="981" width="0.0185%" height="15" fill="rgb(227,67,19)" fg:x="1564" fg:w="1"/><text x="29.1221%" y="991.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="28.8721%" y="965" width="0.0185%" height="15" fill="rgb(233,119,31)" fg:x="1564" fg:w="1"/><text x="29.1221%" y="975.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="28.8721%" y="949" width="0.0185%" height="15" fill="rgb(241,120,22)" fg:x="1564" fg:w="1"/><text x="29.1221%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="28.8721%" y="933" width="0.0185%" height="15" fill="rgb(224,102,30)" fg:x="1564" fg:w="1"/><text x="29.1221%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="28.8905%" y="981" width="0.0185%" height="15" fill="rgb(210,164,37)" fg:x="1565" fg:w="1"/><text x="29.1405%" y="991.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="28.9090%" y="965" width="0.0185%" height="15" fill="rgb(226,191,16)" fg:x="1566" fg:w="1"/><text x="29.1590%" y="975.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="28.9090%" y="949" width="0.0185%" height="15" fill="rgb(214,40,45)" fg:x="1566" fg:w="1"/><text x="29.1590%" y="959.50"></text></g><g><title>leveldb::MutexLock::~MutexLock (1 samples, 0.02%)</title><rect x="28.9090%" y="933" width="0.0185%" height="15" fill="rgb(244,29,26)" fg:x="1566" fg:w="1"/><text x="29.1590%" y="943.50"></text></g><g><title>leveldb::port::Mutex::Unlock (1 samples, 0.02%)</title><rect x="28.9090%" y="917" width="0.0185%" height="15" fill="rgb(216,16,5)" fg:x="1566" fg:w="1"/><text x="29.1590%" y="927.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.02%)</title><rect x="28.9090%" y="901" width="0.0185%" height="15" fill="rgb(249,76,35)" fg:x="1566" fg:w="1"/><text x="29.1590%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="28.9090%" y="885" width="0.0185%" height="15" fill="rgb(207,11,44)" fg:x="1566" fg:w="1"/><text x="29.1590%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (45 samples, 0.83%)</title><rect x="28.9275%" y="965" width="0.8307%" height="15" fill="rgb(228,190,49)" fg:x="1567" fg:w="45"/><text x="29.1775%" y="975.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="29.7582%" y="965" width="0.0185%" height="15" fill="rgb(214,173,12)" fg:x="1612" fg:w="1"/><text x="30.0082%" y="975.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="29.7582%" y="949" width="0.0185%" height="15" fill="rgb(218,26,35)" fg:x="1612" fg:w="1"/><text x="30.0082%" y="959.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.04%)</title><rect x="29.7766%" y="965" width="0.0369%" height="15" fill="rgb(220,200,19)" fg:x="1613" fg:w="2"/><text x="30.0266%" y="975.50"></text></g><g><title>DecodeEntry (2 samples, 0.04%)</title><rect x="29.9428%" y="949" width="0.0369%" height="15" fill="rgb(239,95,49)" fg:x="1622" fg:w="2"/><text x="30.1928%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="29.9612%" y="933" width="0.0185%" height="15" fill="rgb(235,85,53)" fg:x="1623" fg:w="1"/><text x="30.2112%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="29.9612%" y="917" width="0.0185%" height="15" fill="rgb(233,133,31)" fg:x="1623" fg:w="1"/><text x="30.2112%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="30.2751%" y="933" width="0.0185%" height="15" fill="rgb(218,25,20)" fg:x="1640" fg:w="1"/><text x="30.5251%" y="943.50"></text></g><g><title>leveldb::Block::Iter::GetRestartPoint (1 samples, 0.02%)</title><rect x="30.2751%" y="917" width="0.0185%" height="15" fill="rgb(252,210,38)" fg:x="1640" fg:w="1"/><text x="30.5251%" y="927.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="30.2935%" y="933" width="0.0185%" height="15" fill="rgb(242,134,21)" fg:x="1641" fg:w="1"/><text x="30.5435%" y="943.50"></text></g><g><title>leveldb::Block::Iter::Iter (1 samples, 0.02%)</title><rect x="30.2935%" y="917" width="0.0185%" height="15" fill="rgb(213,28,48)" fg:x="1641" fg:w="1"/><text x="30.5435%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.06%)</title><rect x="30.3304%" y="917" width="0.0554%" height="15" fill="rgb(250,196,2)" fg:x="1643" fg:w="3"/><text x="30.5804%" y="927.50"></text></g><g><title>leveldb::Slice::compare (3 samples, 0.06%)</title><rect x="30.3304%" y="901" width="0.0554%" height="15" fill="rgb(227,5,17)" fg:x="1643" fg:w="3"/><text x="30.5804%" y="911.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.06%)</title><rect x="30.3304%" y="885" width="0.0554%" height="15" fill="rgb(221,226,24)" fg:x="1643" fg:w="3"/><text x="30.5804%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Seek (9 samples, 0.17%)</title><rect x="30.3858%" y="917" width="0.1661%" height="15" fill="rgb(211,5,48)" fg:x="1646" fg:w="9"/><text x="30.6358%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Compare (2 samples, 0.04%)</title><rect x="30.5150%" y="901" width="0.0369%" height="15" fill="rgb(219,150,6)" fg:x="1653" fg:w="2"/><text x="30.7650%" y="911.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="30.5520%" y="917" width="0.0185%" height="15" fill="rgb(251,46,16)" fg:x="1655" fg:w="1"/><text x="30.8020%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Iter (1 samples, 0.02%)</title><rect x="30.5520%" y="901" width="0.0185%" height="15" fill="rgb(220,204,40)" fg:x="1655" fg:w="1"/><text x="30.8020%" y="911.50"></text></g><g><title>leveldb::Block::Iter::Compare (33 samples, 0.61%)</title><rect x="29.9797%" y="949" width="0.6092%" height="15" fill="rgb(211,85,2)" fg:x="1624" fg:w="33"/><text x="30.2297%" y="959.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.28%)</title><rect x="30.3120%" y="933" width="0.2769%" height="15" fill="rgb(229,17,7)" fg:x="1642" fg:w="15"/><text x="30.5620%" y="943.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="30.5704%" y="917" width="0.0185%" height="15" fill="rgb(239,72,28)" fg:x="1656" fg:w="1"/><text x="30.8204%" y="927.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="30.6073%" y="917" width="0.0185%" height="15" fill="rgb(230,47,54)" fg:x="1658" fg:w="1"/><text x="30.8573%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="30.6073%" y="901" width="0.0185%" height="15" fill="rgb(214,50,8)" fg:x="1658" fg:w="1"/><text x="30.8573%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="30.6073%" y="885" width="0.0185%" height="15" fill="rgb(216,198,43)" fg:x="1658" fg:w="1"/><text x="30.8573%" y="895.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="30.6996%" y="869" width="0.0185%" height="15" fill="rgb(234,20,35)" fg:x="1663" fg:w="1"/><text x="30.9496%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.15%)</title><rect x="30.6258%" y="901" width="0.1477%" height="15" fill="rgb(254,45,19)" fg:x="1659" fg:w="8"/><text x="30.8758%" y="911.50"></text></g><g><title>leveldb::Slice::compare (6 samples, 0.11%)</title><rect x="30.6627%" y="885" width="0.1108%" height="15" fill="rgb(219,14,44)" fg:x="1661" fg:w="6"/><text x="30.9127%" y="895.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.06%)</title><rect x="30.7181%" y="869" width="0.0554%" height="15" fill="rgb(217,220,26)" fg:x="1664" fg:w="3"/><text x="30.9681%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="30.7920%" y="885" width="0.0185%" height="15" fill="rgb(213,158,28)" fg:x="1668" fg:w="1"/><text x="31.0420%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3 samples, 0.06%)</title><rect x="30.8104%" y="869" width="0.0554%" height="15" fill="rgb(252,51,52)" fg:x="1669" fg:w="3"/><text x="31.0604%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="30.8473%" y="853" width="0.0185%" height="15" fill="rgb(246,89,16)" fg:x="1671" fg:w="1"/><text x="31.0973%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="30.8473%" y="837" width="0.0185%" height="15" fill="rgb(216,158,49)" fg:x="1671" fg:w="1"/><text x="31.0973%" y="847.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="30.8473%" y="821" width="0.0185%" height="15" fill="rgb(236,107,19)" fg:x="1671" fg:w="1"/><text x="31.0973%" y="831.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (4 samples, 0.07%)</title><rect x="30.8104%" y="885" width="0.0738%" height="15" fill="rgb(228,185,30)" fg:x="1669" fg:w="4"/><text x="31.0604%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="30.8658%" y="869" width="0.0185%" height="15" fill="rgb(246,134,8)" fg:x="1672" fg:w="1"/><text x="31.1158%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (7 samples, 0.13%)</title><rect x="30.7735%" y="901" width="0.1292%" height="15" fill="rgb(214,143,50)" fg:x="1667" fg:w="7"/><text x="31.0235%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="30.8843%" y="885" width="0.0185%" height="15" fill="rgb(228,75,8)" fg:x="1673" fg:w="1"/><text x="31.1343%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="30.8843%" y="869" width="0.0185%" height="15" fill="rgb(207,175,4)" fg:x="1673" fg:w="1"/><text x="31.1343%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="30.8843%" y="853" width="0.0185%" height="15" fill="rgb(205,108,24)" fg:x="1673" fg:w="1"/><text x="31.1343%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="30.8843%" y="837" width="0.0185%" height="15" fill="rgb(244,120,49)" fg:x="1673" fg:w="1"/><text x="31.1343%" y="847.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="30.8843%" y="821" width="0.0185%" height="15" fill="rgb(223,47,38)" fg:x="1673" fg:w="1"/><text x="31.1343%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="30.9027%" y="885" width="0.0185%" height="15" fill="rgb(229,179,11)" fg:x="1674" fg:w="1"/><text x="31.1527%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Seek (2 samples, 0.04%)</title><rect x="30.9027%" y="901" width="0.0369%" height="15" fill="rgb(231,122,1)" fg:x="1674" fg:w="2"/><text x="31.1527%" y="911.50"></text></g><g><title>leveldb::Block::Iter::SeekToRestartPoint (1 samples, 0.02%)</title><rect x="30.9212%" y="885" width="0.0185%" height="15" fill="rgb(245,119,9)" fg:x="1675" fg:w="1"/><text x="31.1712%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="30.9212%" y="869" width="0.0185%" height="15" fill="rgb(241,163,25)" fg:x="1675" fg:w="1"/><text x="31.1712%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="30.9212%" y="853" width="0.0185%" height="15" fill="rgb(217,214,3)" fg:x="1675" fg:w="1"/><text x="31.1712%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="30.9212%" y="837" width="0.0185%" height="15" fill="rgb(240,86,28)" fg:x="1675" fg:w="1"/><text x="31.1712%" y="847.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.09%)</title><rect x="30.9396%" y="901" width="0.0923%" height="15" fill="rgb(215,47,9)" fg:x="1676" fg:w="5"/><text x="31.1896%" y="911.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="31.0135%" y="885" width="0.0185%" height="15" fill="rgb(252,25,45)" fg:x="1680" fg:w="1"/><text x="31.2635%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Compare (24 samples, 0.44%)</title><rect x="30.6073%" y="933" width="0.4430%" height="15" fill="rgb(251,164,9)" fg:x="1658" fg:w="24"/><text x="30.8573%" y="943.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (23 samples, 0.42%)</title><rect x="30.6258%" y="917" width="0.4246%" height="15" fill="rgb(233,194,0)" fg:x="1659" fg:w="23"/><text x="30.8758%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="31.0319%" y="901" width="0.0185%" height="15" fill="rgb(249,111,24)" fg:x="1681" fg:w="1"/><text x="31.2819%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (1 samples, 0.02%)</title><rect x="31.0319%" y="885" width="0.0185%" height="15" fill="rgb(250,223,3)" fg:x="1681" fg:w="1"/><text x="31.2819%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="31.0504%" y="933" width="0.0369%" height="15" fill="rgb(236,178,37)" fg:x="1682" fg:w="2"/><text x="31.3004%" y="943.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="31.0873%" y="933" width="0.0185%" height="15" fill="rgb(241,158,50)" fg:x="1684" fg:w="1"/><text x="31.3373%" y="943.50"></text></g><g><title>leveldb::Block::Iter::Seek (71 samples, 1.31%)</title><rect x="29.8135%" y="965" width="1.3107%" height="15" fill="rgb(213,121,41)" fg:x="1615" fg:w="71"/><text x="30.0635%" y="975.50"></text></g><g><title>leveldb::Block::Iter::Seek (29 samples, 0.54%)</title><rect x="30.5889%" y="949" width="0.5354%" height="15" fill="rgb(240,92,3)" fg:x="1657" fg:w="29"/><text x="30.8389%" y="959.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="31.1058%" y="933" width="0.0185%" height="15" fill="rgb(205,123,3)" fg:x="1685" fg:w="1"/><text x="31.3558%" y="943.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.02%)</title><rect x="31.1242%" y="965" width="0.0185%" height="15" fill="rgb(205,97,47)" fg:x="1686" fg:w="1"/><text x="31.3742%" y="975.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.02%)</title><rect x="31.1427%" y="965" width="0.0185%" height="15" fill="rgb(247,152,14)" fg:x="1687" fg:w="1"/><text x="31.3927%" y="975.50"></text></g><g><title>leveldb::Block::Iter::Iter (3 samples, 0.06%)</title><rect x="31.1612%" y="949" width="0.0554%" height="15" fill="rgb(248,195,53)" fg:x="1688" fg:w="3"/><text x="31.4112%" y="959.50"></text></g><g><title>leveldb::Block::NewIterator (4 samples, 0.07%)</title><rect x="31.1612%" y="965" width="0.0738%" height="15" fill="rgb(226,201,16)" fg:x="1688" fg:w="4"/><text x="31.4112%" y="975.50"></text></g><g><title>leveldb::Block::NumRestarts (1 samples, 0.02%)</title><rect x="31.2165%" y="949" width="0.0185%" height="15" fill="rgb(205,98,0)" fg:x="1691" fg:w="1"/><text x="31.4665%" y="959.50"></text></g><g><title>leveldb::DecodeFixed32 (1 samples, 0.02%)</title><rect x="31.2165%" y="933" width="0.0185%" height="15" fill="rgb(214,191,48)" fg:x="1691" fg:w="1"/><text x="31.4665%" y="943.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="31.2165%" y="917" width="0.0185%" height="15" fill="rgb(237,112,39)" fg:x="1691" fg:w="1"/><text x="31.4665%" y="927.50"></text></g><g><title>leveldb::GetVarint64Ptr (3 samples, 0.06%)</title><rect x="31.2350%" y="965" width="0.0554%" height="15" fill="rgb(247,203,27)" fg:x="1692" fg:w="3"/><text x="31.4850%" y="975.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.28%)</title><rect x="31.2904%" y="965" width="0.2769%" height="15" fill="rgb(235,124,28)" fg:x="1695" fg:w="15"/><text x="31.5404%" y="975.50"></text></g><g><title>leveldb::Iterator::Iterator (1 samples, 0.02%)</title><rect x="31.5673%" y="965" width="0.0185%" height="15" fill="rgb(208,207,46)" fg:x="1710" fg:w="1"/><text x="31.8173%" y="975.50"></text></g><g><title>leveldb::SaveValue (1 samples, 0.02%)</title><rect x="31.5857%" y="965" width="0.0185%" height="15" fill="rgb(234,176,4)" fg:x="1711" fg:w="1"/><text x="31.8357%" y="975.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="31.5857%" y="949" width="0.0185%" height="15" fill="rgb(230,133,28)" fg:x="1711" fg:w="1"/><text x="31.8357%" y="959.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="31.5857%" y="933" width="0.0185%" height="15" fill="rgb(211,137,40)" fg:x="1711" fg:w="1"/><text x="31.8357%" y="943.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="31.5857%" y="917" width="0.0185%" height="15" fill="rgb(254,35,13)" fg:x="1711" fg:w="1"/><text x="31.8357%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="31.5857%" y="901" width="0.0185%" height="15" fill="rgb(225,49,51)" fg:x="1711" fg:w="1"/><text x="31.8357%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="31.5857%" y="885" width="0.0185%" height="15" fill="rgb(251,10,15)" fg:x="1711" fg:w="1"/><text x="31.8357%" y="895.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="31.6227%" y="949" width="0.0185%" height="15" fill="rgb(228,207,15)" fg:x="1713" fg:w="1"/><text x="31.8727%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="31.6227%" y="933" width="0.0185%" height="15" fill="rgb(241,99,19)" fg:x="1713" fg:w="1"/><text x="31.8727%" y="943.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="31.6227%" y="917" width="0.0185%" height="15" fill="rgb(207,104,49)" fg:x="1713" fg:w="1"/><text x="31.8727%" y="927.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="31.6411%" y="949" width="0.0185%" height="15" fill="rgb(234,99,18)" fg:x="1714" fg:w="1"/><text x="31.8911%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (1 samples, 0.02%)</title><rect x="31.6596%" y="933" width="0.0185%" height="15" fill="rgb(213,191,49)" fg:x="1715" fg:w="1"/><text x="31.9096%" y="943.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (2 samples, 0.04%)</title><rect x="31.6596%" y="949" width="0.0369%" height="15" fill="rgb(210,226,19)" fg:x="1715" fg:w="2"/><text x="31.9096%" y="959.50"></text></g><g><title>leveldb::InternalFilterPolicy::KeyMayMatch (1 samples, 0.02%)</title><rect x="31.6781%" y="933" width="0.0185%" height="15" fill="rgb(229,97,18)" fg:x="1716" fg:w="1"/><text x="31.9281%" y="943.50"></text></g><g><title>leveldb::GetVarint64Ptr (1 samples, 0.02%)</title><rect x="31.6965%" y="949" width="0.0185%" height="15" fill="rgb(211,167,15)" fg:x="1717" fg:w="1"/><text x="31.9465%" y="959.50"></text></g><g><title>leveldb::Status::OK (1 samples, 0.02%)</title><rect x="31.7150%" y="933" width="0.0185%" height="15" fill="rgb(210,169,34)" fg:x="1718" fg:w="1"/><text x="31.9650%" y="943.50"></text></g><g><title>leveldb::Status::Status (1 samples, 0.02%)</title><rect x="31.7150%" y="917" width="0.0185%" height="15" fill="rgb(241,121,31)" fg:x="1718" fg:w="1"/><text x="31.9650%" y="927.50"></text></g><g><title>leveldb::crc32c::Unmask (49 samples, 0.90%)</title><rect x="31.7334%" y="933" width="0.9046%" height="15" fill="rgb(232,40,11)" fg:x="1719" fg:w="49"/><text x="31.9834%" y="943.50"></text></g><g><title>[unknown] (46 samples, 0.85%)</title><rect x="31.7888%" y="917" width="0.8492%" height="15" fill="rgb(205,86,26)" fg:x="1722" fg:w="46"/><text x="32.0388%" y="927.50"></text></g><g><title>[unknown] (44 samples, 0.81%)</title><rect x="31.8257%" y="901" width="0.8123%" height="15" fill="rgb(231,126,28)" fg:x="1724" fg:w="44"/><text x="32.0757%" y="911.50"></text></g><g><title>[unknown] (44 samples, 0.81%)</title><rect x="31.8257%" y="885" width="0.8123%" height="15" fill="rgb(219,221,18)" fg:x="1724" fg:w="44"/><text x="32.0757%" y="895.50"></text></g><g><title>[unknown] (44 samples, 0.81%)</title><rect x="31.8257%" y="869" width="0.8123%" height="15" fill="rgb(211,40,0)" fg:x="1724" fg:w="44"/><text x="32.0757%" y="879.50"></text></g><g><title>[unknown] (41 samples, 0.76%)</title><rect x="31.8811%" y="853" width="0.7569%" height="15" fill="rgb(239,85,43)" fg:x="1727" fg:w="41"/><text x="32.1311%" y="863.50"></text></g><g><title>[unknown] (37 samples, 0.68%)</title><rect x="31.9550%" y="837" width="0.6830%" height="15" fill="rgb(231,55,21)" fg:x="1731" fg:w="37"/><text x="32.2050%" y="847.50"></text></g><g><title>[unknown] (36 samples, 0.66%)</title><rect x="31.9734%" y="821" width="0.6646%" height="15" fill="rgb(225,184,43)" fg:x="1732" fg:w="36"/><text x="32.2234%" y="831.50"></text></g><g><title>[unknown] (27 samples, 0.50%)</title><rect x="32.1396%" y="805" width="0.4984%" height="15" fill="rgb(251,158,41)" fg:x="1741" fg:w="27"/><text x="32.3896%" y="815.50"></text></g><g><title>[unknown] (17 samples, 0.31%)</title><rect x="32.3242%" y="789" width="0.3138%" height="15" fill="rgb(234,159,37)" fg:x="1751" fg:w="17"/><text x="32.5742%" y="799.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="32.5088%" y="773" width="0.1292%" height="15" fill="rgb(216,204,22)" fg:x="1761" fg:w="7"/><text x="32.7588%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="32.6011%" y="757" width="0.0369%" height="15" fill="rgb(214,17,3)" fg:x="1766" fg:w="2"/><text x="32.8511%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.6195%" y="741" width="0.0185%" height="15" fill="rgb(212,111,17)" fg:x="1767" fg:w="1"/><text x="32.8695%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.6195%" y="725" width="0.0185%" height="15" fill="rgb(221,157,24)" fg:x="1767" fg:w="1"/><text x="32.8695%" y="735.50"></text></g><g><title>_mm_crc32_u64 (51 samples, 0.94%)</title><rect x="33.1733%" y="901" width="0.9415%" height="15" fill="rgb(252,16,13)" fg:x="1797" fg:w="51"/><text x="33.4233%" y="911.50"></text></g><g><title>leveldb::Table::BlockReader (138 samples, 2.55%)</title><rect x="31.6042%" y="965" width="2.5475%" height="15" fill="rgb(221,62,2)" fg:x="1712" fg:w="138"/><text x="31.8542%" y="975.50">le..</text></g><g><title>leveldb::ReadBlock (132 samples, 2.44%)</title><rect x="31.7150%" y="949" width="2.4368%" height="15" fill="rgb(247,87,22)" fg:x="1718" fg:w="132"/><text x="31.9650%" y="959.50">le..</text></g><g><title>leveldb::crc32c::Value (82 samples, 1.51%)</title><rect x="32.6380%" y="933" width="1.5138%" height="15" fill="rgb(215,73,9)" fg:x="1768" fg:w="82"/><text x="32.8880%" y="943.50"></text></g><g><title>crc32c::ExtendSse42 (82 samples, 1.51%)</title><rect x="32.6380%" y="917" width="1.5138%" height="15" fill="rgb(207,175,33)" fg:x="1768" fg:w="82"/><text x="32.8880%" y="927.50"></text></g><g><title>_mm_crc32_u8 (2 samples, 0.04%)</title><rect x="34.1148%" y="901" width="0.0369%" height="15" fill="rgb(243,129,54)" fg:x="1848" fg:w="2"/><text x="34.3648%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="34.1148%" y="885" width="0.0369%" height="15" fill="rgb(227,119,45)" fg:x="1848" fg:w="2"/><text x="34.3648%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="34.1148%" y="869" width="0.0369%" height="15" fill="rgb(205,109,36)" fg:x="1848" fg:w="2"/><text x="34.3648%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="34.1148%" y="853" width="0.0369%" height="15" fill="rgb(205,6,39)" fg:x="1848" fg:w="2"/><text x="34.3648%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="34.1148%" y="837" width="0.0369%" height="15" fill="rgb(221,32,16)" fg:x="1848" fg:w="2"/><text x="34.3648%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1333%" y="821" width="0.0185%" height="15" fill="rgb(228,144,50)" fg:x="1849" fg:w="1"/><text x="34.3833%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1333%" y="805" width="0.0185%" height="15" fill="rgb(229,201,53)" fg:x="1849" fg:w="1"/><text x="34.3833%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1333%" y="789" width="0.0185%" height="15" fill="rgb(249,153,27)" fg:x="1849" fg:w="1"/><text x="34.3833%" y="799.50"></text></g><g><title>leveldb::BlockHandle::BlockHandle (1 samples, 0.02%)</title><rect x="34.1887%" y="949" width="0.0185%" height="15" fill="rgb(227,106,25)" fg:x="1852" fg:w="1"/><text x="34.4387%" y="959.50"></text></g><g><title>leveldb::Table::InternalGet (288 samples, 5.32%)</title><rect x="28.9090%" y="981" width="5.3166%" height="15" fill="rgb(230,65,29)" fg:x="1566" fg:w="288"/><text x="29.1590%" y="991.50">leveldb..</text></g><g><title>leveldb::Table::InternalGet (4 samples, 0.07%)</title><rect x="34.1517%" y="965" width="0.0738%" height="15" fill="rgb(221,57,46)" fg:x="1850" fg:w="4"/><text x="34.4017%" y="975.50"></text></g><g><title>leveldb::Status::Status (1 samples, 0.02%)</title><rect x="34.2071%" y="949" width="0.0185%" height="15" fill="rgb(229,161,17)" fg:x="1853" fg:w="1"/><text x="34.4571%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="34.2256%" y="965" width="0.0185%" height="15" fill="rgb(222,213,11)" fg:x="1854" fg:w="1"/><text x="34.4756%" y="975.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="34.2256%" y="949" width="0.0185%" height="15" fill="rgb(235,35,13)" fg:x="1854" fg:w="1"/><text x="34.4756%" y="959.50"></text></g><g><title>leveldb::Version::Get (325 samples, 6.00%)</title><rect x="28.3183%" y="1045" width="5.9996%" height="15" fill="rgb(233,158,34)" fg:x="1534" fg:w="325"/><text x="28.5683%" y="1055.50">leveldb:..</text></g><g><title>leveldb::Version::ForEachOverlapping (324 samples, 5.98%)</title><rect x="28.3367%" y="1029" width="5.9812%" height="15" fill="rgb(215,151,48)" fg:x="1535" fg:w="324"/><text x="28.5867%" y="1039.50">leveldb:..</text></g><g><title>leveldb::Version::Get (299 samples, 5.52%)</title><rect x="28.7982%" y="1013" width="5.5197%" height="15" fill="rgb(229,84,14)" fg:x="1560" fg:w="299"/><text x="29.0482%" y="1023.50">leveldb..</text></g><g><title>leveldb::TableCache::Get (295 samples, 5.45%)</title><rect x="28.8721%" y="997" width="5.4458%" height="15" fill="rgb(229,68,14)" fg:x="1564" fg:w="295"/><text x="29.1221%" y="1007.50">leveldb..</text></g><g><title>leveldb::TableCache::FindTable (5 samples, 0.09%)</title><rect x="34.2256%" y="981" width="0.0923%" height="15" fill="rgb(243,106,26)" fg:x="1854" fg:w="5"/><text x="34.4756%" y="991.50"></text></g><g><title>leveldb::TableCache::FindTable (4 samples, 0.07%)</title><rect x="34.2440%" y="965" width="0.0738%" height="15" fill="rgb(206,45,38)" fg:x="1855" fg:w="4"/><text x="34.4940%" y="975.50"></text></g><g><title>leveldb::DBImpl::Get (326 samples, 6.02%)</title><rect x="28.3183%" y="1061" width="6.0181%" height="15" fill="rgb(226,6,15)" fg:x="1534" fg:w="326"/><text x="28.5683%" y="1071.50">leveldb:..</text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="34.3179%" y="1045" width="0.0185%" height="15" fill="rgb(232,22,54)" fg:x="1859" fg:w="1"/><text x="34.5679%" y="1055.50"></text></g><g><title>leveldb::Version::Unref (1 samples, 0.02%)</title><rect x="34.3363%" y="1061" width="0.0185%" height="15" fill="rgb(229,222,32)" fg:x="1860" fg:w="1"/><text x="34.5863%" y="1071.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (333 samples, 6.15%)</title><rect x="28.2998%" y="1077" width="6.1473%" height="15" fill="rgb(228,62,29)" fg:x="1533" fg:w="333"/><text x="28.5498%" y="1087.50">CDBWrapp..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (5 samples, 0.09%)</title><rect x="34.3548%" y="1061" width="0.0923%" height="15" fill="rgb(251,103,34)" fg:x="1861" fg:w="5"/><text x="34.6048%" y="1071.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (4 samples, 0.07%)</title><rect x="34.3733%" y="1045" width="0.0738%" height="15" fill="rgb(233,12,30)" fg:x="1862" fg:w="4"/><text x="34.6233%" y="1055.50"></text></g><g><title>decltype  (3 samples, 0.06%)</title><rect x="34.3917%" y="1029" width="0.0554%" height="15" fill="rgb(238,52,0)" fg:x="1863" fg:w="3"/><text x="34.6417%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (3 samples, 0.06%)</title><rect x="34.3917%" y="1013" width="0.0554%" height="15" fill="rgb(223,98,5)" fg:x="1863" fg:w="3"/><text x="34.6417%" y="1023.50"></text></g><g><title>decltype (3 samples, 0.06%)</title><rect x="34.3917%" y="997" width="0.0554%" height="15" fill="rgb(228,75,37)" fg:x="1863" fg:w="3"/><text x="34.6417%" y="1007.50"></text></g><g><title>CCoinsViewDB::GetCoin (335 samples, 6.18%)</title><rect x="28.2998%" y="1093" width="6.1842%" height="15" fill="rgb(205,115,49)" fg:x="1533" fg:w="335"/><text x="28.5498%" y="1103.50">CCoinsVi..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.04%)</title><rect x="34.4471%" y="1077" width="0.0369%" height="15" fill="rgb(250,154,43)" fg:x="1866" fg:w="2"/><text x="34.6971%" y="1087.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="34.4656%" y="1061" width="0.0185%" height="15" fill="rgb(226,43,29)" fg:x="1867" fg:w="1"/><text x="34.7156%" y="1071.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::__distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="34.4656%" y="1045" width="0.0185%" height="15" fill="rgb(249,228,39)" fg:x="1867" fg:w="1"/><text x="34.7156%" y="1055.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="34.4840%" y="933" width="0.0185%" height="15" fill="rgb(216,79,43)" fg:x="1868" fg:w="1"/><text x="34.7340%" y="943.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long&amp;&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="34.4840%" y="917" width="0.0185%" height="15" fill="rgb(228,95,12)" fg:x="1868" fg:w="1"/><text x="34.7340%" y="927.50"></text></g><g><title>void AmountCompression::Unser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="34.4840%" y="901" width="0.0185%" height="15" fill="rgb(249,221,15)" fg:x="1868" fg:w="1"/><text x="34.7340%" y="911.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="34.4840%" y="885" width="0.0185%" height="15" fill="rgb(233,34,13)" fg:x="1868" fg:w="1"/><text x="34.7340%" y="895.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="34.4840%" y="869" width="0.0185%" height="15" fill="rgb(214,103,39)" fg:x="1868" fg:w="1"/><text x="34.7340%" y="879.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="34.4840%" y="853" width="0.0185%" height="15" fill="rgb(251,126,39)" fg:x="1868" fg:w="1"/><text x="34.7340%" y="863.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="34.4840%" y="837" width="0.0185%" height="15" fill="rgb(214,216,36)" fg:x="1868" fg:w="1"/><text x="34.7340%" y="847.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="34.4840%" y="821" width="0.0185%" height="15" fill="rgb(220,221,8)" fg:x="1868" fg:w="1"/><text x="34.7340%" y="831.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="34.4840%" y="805" width="0.0185%" height="15" fill="rgb(240,216,3)" fg:x="1868" fg:w="1"/><text x="34.7340%" y="815.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Coin&amp;&gt;(Coin&amp;) (2 samples, 0.04%)</title><rect x="34.4840%" y="1077" width="0.0369%" height="15" fill="rgb(232,218,17)" fg:x="1868" fg:w="2"/><text x="34.7340%" y="1087.50"></text></g><g><title>void Unserialize&lt;DataStream, Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="34.4840%" y="1061" width="0.0369%" height="15" fill="rgb(229,163,45)" fg:x="1868" fg:w="2"/><text x="34.7340%" y="1071.50"></text></g><g><title>void Coin::Unserialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="34.4840%" y="1045" width="0.0369%" height="15" fill="rgb(231,110,42)" fg:x="1868" fg:w="2"/><text x="34.7340%" y="1055.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="34.4840%" y="1029" width="0.0369%" height="15" fill="rgb(208,170,48)" fg:x="1868" fg:w="2"/><text x="34.7340%" y="1039.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut&amp;&gt;::Unserialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="34.4840%" y="1013" width="0.0369%" height="15" fill="rgb(239,116,25)" fg:x="1868" fg:w="2"/><text x="34.7340%" y="1023.50"></text></g><g><title>void TxOutCompression::Unser&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="34.4840%" y="997" width="0.0369%" height="15" fill="rgb(219,200,50)" fg:x="1868" fg:w="2"/><text x="34.7340%" y="1007.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut, ActionUnserialize&gt; (2 samples, 0.04%)</title><rect x="34.4840%" y="981" width="0.0369%" height="15" fill="rgb(245,200,0)" fg:x="1868" fg:w="2"/><text x="34.7340%" y="991.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;, Wrapper&lt;ScriptCompression, CScript&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="34.4840%" y="965" width="0.0369%" height="15" fill="rgb(245,119,33)" fg:x="1868" fg:w="2"/><text x="34.7340%" y="975.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="34.4840%" y="949" width="0.0369%" height="15" fill="rgb(231,125,12)" fg:x="1868" fg:w="2"/><text x="34.7340%" y="959.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="34.5025%" y="933" width="0.0185%" height="15" fill="rgb(216,96,41)" fg:x="1869" fg:w="1"/><text x="34.7525%" y="943.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript&amp;&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="34.5025%" y="917" width="0.0185%" height="15" fill="rgb(248,43,45)" fg:x="1869" fg:w="1"/><text x="34.7525%" y="927.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.5025%" y="901" width="0.0185%" height="15" fill="rgb(217,222,7)" fg:x="1869" fg:w="1"/><text x="34.7525%" y="911.50"></text></g><g><title>unsigned char ser_readdata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="34.5025%" y="885" width="0.0185%" height="15" fill="rgb(233,28,6)" fg:x="1869" fg:w="1"/><text x="34.7525%" y="895.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="34.5025%" y="869" width="0.0185%" height="15" fill="rgb(231,218,15)" fg:x="1869" fg:w="1"/><text x="34.7525%" y="879.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.5025%" y="853" width="0.0185%" height="15" fill="rgb(226,171,48)" fg:x="1869" fg:w="1"/><text x="34.7525%" y="863.50"></text></g><g><title>DataStream::~DataStream (1 samples, 0.02%)</title><rect x="34.5210%" y="1077" width="0.0185%" height="15" fill="rgb(235,201,9)" fg:x="1870" fg:w="1"/><text x="34.7710%" y="1087.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="34.5210%" y="1061" width="0.0185%" height="15" fill="rgb(217,80,15)" fg:x="1870" fg:w="1"/><text x="34.7710%" y="1071.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="34.5210%" y="1045" width="0.0185%" height="15" fill="rgb(219,152,8)" fg:x="1870" fg:w="1"/><text x="34.7710%" y="1055.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="34.5210%" y="1029" width="0.0185%" height="15" fill="rgb(243,107,38)" fg:x="1870" fg:w="1"/><text x="34.7710%" y="1039.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="34.5210%" y="1013" width="0.0185%" height="15" fill="rgb(231,17,5)" fg:x="1870" fg:w="1"/><text x="34.7710%" y="1023.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (1 samples, 0.02%)</title><rect x="34.5210%" y="997" width="0.0185%" height="15" fill="rgb(209,25,54)" fg:x="1870" fg:w="1"/><text x="34.7710%" y="1007.50"></text></g><g><title>memory_cleanse (1 samples, 0.02%)</title><rect x="34.5210%" y="981" width="0.0185%" height="15" fill="rgb(219,0,2)" fg:x="1870" fg:w="1"/><text x="34.7710%" y="991.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="34.5394%" y="901" width="0.0369%" height="15" fill="rgb(246,9,5)" fg:x="1871" fg:w="2"/><text x="34.7894%" y="911.50"></text></g><g><title>CCoinsViewDB::GetCoin (341 samples, 6.29%)</title><rect x="28.2998%" y="1109" width="6.2950%" height="15" fill="rgb(226,159,4)" fg:x="1533" fg:w="341"/><text x="28.5498%" y="1119.50">CCoinsVi..</text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (6 samples, 0.11%)</title><rect x="34.4840%" y="1093" width="0.1108%" height="15" fill="rgb(219,175,34)" fg:x="1868" fg:w="6"/><text x="34.7340%" y="1103.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="1077" width="0.0554%" height="15" fill="rgb(236,10,46)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="1087.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="1061" width="0.0554%" height="15" fill="rgb(240,211,16)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="1071.50"></text></g><g><title>Serialize&lt;DataStream&gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="1045" width="0.0554%" height="15" fill="rgb(205,3,43)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="1055.50"></text></g><g><title>Ser&lt;DataStream&gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="1029" width="0.0554%" height="15" fill="rgb(245,7,22)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="1039.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="1013" width="0.0554%" height="15" fill="rgb(239,132,32)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="1023.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="997" width="0.0554%" height="15" fill="rgb(228,202,34)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="1007.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="981" width="0.0554%" height="15" fill="rgb(254,200,22)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="991.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="965" width="0.0554%" height="15" fill="rgb(219,10,39)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="975.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="949" width="0.0554%" height="15" fill="rgb(226,210,39)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="959.50"></text></g><g><title>DataStream::write (3 samples, 0.06%)</title><rect x="34.5394%" y="933" width="0.0554%" height="15" fill="rgb(208,219,16)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="943.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (3 samples, 0.06%)</title><rect x="34.5394%" y="917" width="0.0554%" height="15" fill="rgb(216,158,51)" fg:x="1871" fg:w="3"/><text x="34.7894%" y="927.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="34.5763%" y="901" width="0.0185%" height="15" fill="rgb(233,14,44)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="911.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="34.5763%" y="885" width="0.0185%" height="15" fill="rgb(237,97,39)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="895.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::__distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="34.5763%" y="869" width="0.0185%" height="15" fill="rgb(218,198,43)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="853" width="0.0185%" height="15" fill="rgb(231,104,20)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="837" width="0.0185%" height="15" fill="rgb(254,36,13)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="821" width="0.0185%" height="15" fill="rgb(248,14,50)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="805" width="0.0185%" height="15" fill="rgb(217,107,29)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="789" width="0.0185%" height="15" fill="rgb(251,169,33)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="773" width="0.0185%" height="15" fill="rgb(217,108,32)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="757" width="0.0185%" height="15" fill="rgb(219,66,42)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="741" width="0.0185%" height="15" fill="rgb(206,180,7)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="725" width="0.0185%" height="15" fill="rgb(208,226,31)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="709" width="0.0185%" height="15" fill="rgb(218,26,49)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="693" width="0.0185%" height="15" fill="rgb(233,197,48)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="677" width="0.0185%" height="15" fill="rgb(252,181,51)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.5763%" y="661" width="0.0185%" height="15" fill="rgb(253,90,19)" fg:x="1873" fg:w="1"/><text x="34.8263%" y="671.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="34.5948%" y="1109" width="0.0738%" height="15" fill="rgb(215,171,30)" fg:x="1874" fg:w="4"/><text x="34.8448%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="34.6133%" y="1093" width="0.0554%" height="15" fill="rgb(214,222,9)" fg:x="1875" fg:w="3"/><text x="34.8633%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="34.6133%" y="1077" width="0.0554%" height="15" fill="rgb(223,3,22)" fg:x="1875" fg:w="3"/><text x="34.8633%" y="1087.50"></text></g><g><title>CCoinsViewBacked::GetCoin (346 samples, 6.39%)</title><rect x="28.2998%" y="1125" width="6.3873%" height="15" fill="rgb(225,196,46)" fg:x="1533" fg:w="346"/><text x="28.5498%" y="1135.50">CCoinsVi..</text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="34.6686%" y="1109" width="0.0185%" height="15" fill="rgb(209,110,37)" fg:x="1878" fg:w="1"/><text x="34.9186%" y="1119.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt;&amp;&amp;) (1 samples, 0.02%)</title><rect x="34.6686%" y="1093" width="0.0185%" height="15" fill="rgb(249,89,12)" fg:x="1878" fg:w="1"/><text x="34.9186%" y="1103.50"></text></g><g><title>void Unserialize&lt;DataStream, unsigned char&gt; (1 samples, 0.02%)</title><rect x="34.6686%" y="1077" width="0.0185%" height="15" fill="rgb(226,27,33)" fg:x="1878" fg:w="1"/><text x="34.9186%" y="1087.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="34.6686%" y="1061" width="0.0185%" height="15" fill="rgb(213,82,22)" fg:x="1878" fg:w="1"/><text x="34.9186%" y="1071.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="34.6686%" y="1045" width="0.0185%" height="15" fill="rgb(248,140,0)" fg:x="1878" fg:w="1"/><text x="34.9186%" y="1055.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="34.6686%" y="1029" width="0.0185%" height="15" fill="rgb(228,106,3)" fg:x="1878" fg:w="1"/><text x="34.9186%" y="1039.50"></text></g><g><title>SipHashUint256Extra (12 samples, 0.22%)</title><rect x="34.6871%" y="1125" width="0.2215%" height="15" fill="rgb(209,23,37)" fg:x="1879" fg:w="12"/><text x="34.9371%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="34.8163%" y="1109" width="0.0923%" height="15" fill="rgb(241,93,50)" fg:x="1886" fg:w="5"/><text x="35.0663%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="34.8163%" y="1093" width="0.0923%" height="15" fill="rgb(253,46,43)" fg:x="1886" fg:w="5"/><text x="35.0663%" y="1103.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (361 samples, 6.66%)</title><rect x="28.2998%" y="1173" width="6.6642%" height="15" fill="rgb(226,206,43)" fg:x="1533" fg:w="361"/><text x="28.5498%" y="1183.50">CCoinsVie..</text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (361 samples, 6.66%)</title><rect x="28.2998%" y="1157" width="6.6642%" height="15" fill="rgb(217,54,7)" fg:x="1533" fg:w="361"/><text x="28.5498%" y="1167.50">ExecuteBa..</text></g><g><title>CCoinsViewErrorCatcher::GetCoin (361 samples, 6.66%)</title><rect x="28.2998%" y="1141" width="6.6642%" height="15" fill="rgb(223,5,52)" fg:x="1533" fg:w="361"/><text x="28.5498%" y="1151.50">CCoinsVie..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="34.9086%" y="1125" width="0.0554%" height="15" fill="rgb(206,52,46)" fg:x="1891" fg:w="3"/><text x="35.1586%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="34.9640%" y="1173" width="0.0554%" height="15" fill="rgb(253,136,11)" fg:x="1894" fg:w="3"/><text x="35.2140%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="35.0378%" y="1141" width="0.0185%" height="15" fill="rgb(208,106,33)" fg:x="1898" fg:w="1"/><text x="35.2878%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="35.0563%" y="1125" width="0.0185%" height="15" fill="rgb(206,54,4)" fg:x="1899" fg:w="1"/><text x="35.3063%" y="1135.50"></text></g><g><title>SipHashUint256Extra (25 samples, 0.46%)</title><rect x="35.0748%" y="1125" width="0.4615%" height="15" fill="rgb(213,3,15)" fg:x="1900" fg:w="25"/><text x="35.3248%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (10 samples, 0.18%)</title><rect x="35.3517%" y="1109" width="0.1846%" height="15" fill="rgb(252,211,39)" fg:x="1915" fg:w="10"/><text x="35.6017%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (10 samples, 0.18%)</title><rect x="35.3517%" y="1093" width="0.1846%" height="15" fill="rgb(223,6,36)" fg:x="1915" fg:w="10"/><text x="35.6017%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="35.5363%" y="1125" width="0.0923%" height="15" fill="rgb(252,169,45)" fg:x="1925" fg:w="5"/><text x="35.7863%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="35.6286%" y="1125" width="0.0185%" height="15" fill="rgb(212,48,26)" fg:x="1930" fg:w="1"/><text x="35.8786%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (33 samples, 0.61%)</title><rect x="35.0563%" y="1141" width="0.6092%" height="15" fill="rgb(251,102,48)" fg:x="1899" fg:w="33"/><text x="35.3063%" y="1151.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="35.6470%" y="1125" width="0.0185%" height="15" fill="rgb(243,208,16)" fg:x="1931" fg:w="1"/><text x="35.8970%" y="1135.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="35.6470%" y="1109" width="0.0185%" height="15" fill="rgb(219,96,24)" fg:x="1931" fg:w="1"/><text x="35.8970%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="35.6470%" y="1093" width="0.0185%" height="15" fill="rgb(219,33,29)" fg:x="1931" fg:w="1"/><text x="35.8970%" y="1103.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="35.6470%" y="1077" width="0.0185%" height="15" fill="rgb(223,176,5)" fg:x="1931" fg:w="1"/><text x="35.8970%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="35.6470%" y="1061" width="0.0185%" height="15" fill="rgb(228,140,14)" fg:x="1931" fg:w="1"/><text x="35.8970%" y="1071.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="35.6470%" y="1045" width="0.0185%" height="15" fill="rgb(217,179,31)" fg:x="1931" fg:w="1"/><text x="35.8970%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="35.6655%" y="1141" width="0.0185%" height="15" fill="rgb(230,9,30)" fg:x="1932" fg:w="1"/><text x="35.9155%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="35.6655%" y="1125" width="0.0185%" height="15" fill="rgb(230,136,20)" fg:x="1932" fg:w="1"/><text x="35.9155%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="35.6840%" y="1125" width="0.0554%" height="15" fill="rgb(215,210,22)" fg:x="1933" fg:w="3"/><text x="35.9340%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="35.7209%" y="1109" width="0.0185%" height="15" fill="rgb(218,43,5)" fg:x="1935" fg:w="1"/><text x="35.9709%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="35.7209%" y="1093" width="0.0185%" height="15" fill="rgb(216,11,5)" fg:x="1935" fg:w="1"/><text x="35.9709%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="35.7209%" y="1077" width="0.0185%" height="15" fill="rgb(209,82,29)" fg:x="1935" fg:w="1"/><text x="35.9709%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="35.7209%" y="1061" width="0.0185%" height="15" fill="rgb(244,115,12)" fg:x="1935" fg:w="1"/><text x="35.9709%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.09%)</title><rect x="35.6840%" y="1141" width="0.0923%" height="15" fill="rgb(222,82,18)" fg:x="1933" fg:w="5"/><text x="35.9340%" y="1151.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.04%)</title><rect x="35.7393%" y="1125" width="0.0369%" height="15" fill="rgb(249,227,8)" fg:x="1936" fg:w="2"/><text x="35.9893%" y="1135.50"></text></g><g><title>decltype  (2 samples, 0.04%)</title><rect x="35.7393%" y="1109" width="0.0369%" height="15" fill="rgb(253,141,45)" fg:x="1936" fg:w="2"/><text x="35.9893%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.04%)</title><rect x="35.7393%" y="1093" width="0.0369%" height="15" fill="rgb(234,184,4)" fg:x="1936" fg:w="2"/><text x="35.9893%" y="1103.50"></text></g><g><title>decltype  (2 samples, 0.04%)</title><rect x="35.7393%" y="1077" width="0.0369%" height="15" fill="rgb(218,194,23)" fg:x="1936" fg:w="2"/><text x="35.9893%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (2 samples, 0.04%)</title><rect x="35.7393%" y="1061" width="0.0369%" height="15" fill="rgb(235,66,41)" fg:x="1936" fg:w="2"/><text x="35.9893%" y="1071.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (2 samples, 0.04%)</title><rect x="35.7393%" y="1045" width="0.0369%" height="15" fill="rgb(245,217,1)" fg:x="1936" fg:w="2"/><text x="35.9893%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="35.7393%" y="1029" width="0.0369%" height="15" fill="rgb(229,91,1)" fg:x="1936" fg:w="2"/><text x="35.9893%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.7578%" y="1013" width="0.0185%" height="15" fill="rgb(207,101,30)" fg:x="1937" fg:w="1"/><text x="36.0078%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.7578%" y="997" width="0.0185%" height="15" fill="rgb(223,82,49)" fg:x="1937" fg:w="1"/><text x="36.0078%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.7578%" y="981" width="0.0185%" height="15" fill="rgb(218,167,17)" fg:x="1937" fg:w="1"/><text x="36.0078%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.7578%" y="965" width="0.0185%" height="15" fill="rgb(208,103,14)" fg:x="1937" fg:w="1"/><text x="36.0078%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.7578%" y="949" width="0.0185%" height="15" fill="rgb(238,20,8)" fg:x="1937" fg:w="1"/><text x="36.0078%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.7578%" y="933" width="0.0185%" height="15" fill="rgb(218,80,54)" fg:x="1937" fg:w="1"/><text x="36.0078%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.7578%" y="917" width="0.0185%" height="15" fill="rgb(240,144,17)" fg:x="1937" fg:w="1"/><text x="36.0078%" y="927.50"></text></g><g><title>CCoinsViewCache::FetchCoin (409 samples, 7.55%)</title><rect x="28.2998%" y="1189" width="7.5503%" height="15" fill="rgb(245,27,50)" fg:x="1533" fg:w="409"/><text x="28.5498%" y="1199.50">CCoinsView..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (45 samples, 0.83%)</title><rect x="35.0194%" y="1173" width="0.8307%" height="15" fill="rgb(251,51,7)" fg:x="1897" fg:w="45"/><text x="35.2694%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (45 samples, 0.83%)</title><rect x="35.0194%" y="1157" width="0.8307%" height="15" fill="rgb(245,217,29)" fg:x="1897" fg:w="45"/><text x="35.2694%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.07%)</title><rect x="35.7763%" y="1141" width="0.0738%" height="15" fill="rgb(221,176,29)" fg:x="1938" fg:w="4"/><text x="36.0263%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.07%)</title><rect x="35.7763%" y="1125" width="0.0738%" height="15" fill="rgb(212,180,24)" fg:x="1938" fg:w="4"/><text x="36.0263%" y="1135.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="35.7763%" y="1109" width="0.0738%" height="15" fill="rgb(254,24,2)" fg:x="1938" fg:w="4"/><text x="36.0263%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="35.7763%" y="1093" width="0.0738%" height="15" fill="rgb(230,100,2)" fg:x="1938" fg:w="4"/><text x="36.0263%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="35.7763%" y="1077" width="0.0738%" height="15" fill="rgb(219,142,25)" fg:x="1938" fg:w="4"/><text x="36.0263%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="35.7763%" y="1061" width="0.0738%" height="15" fill="rgb(240,73,43)" fg:x="1938" fg:w="4"/><text x="36.0263%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="35.7763%" y="1045" width="0.0738%" height="15" fill="rgb(214,114,15)" fg:x="1938" fg:w="4"/><text x="36.0263%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="35.7763%" y="1029" width="0.0738%" height="15" fill="rgb(207,130,4)" fg:x="1938" fg:w="4"/><text x="36.0263%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="35.7947%" y="1013" width="0.0554%" height="15" fill="rgb(221,25,40)" fg:x="1939" fg:w="3"/><text x="36.0447%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="35.7947%" y="997" width="0.0554%" height="15" fill="rgb(241,184,7)" fg:x="1939" fg:w="3"/><text x="36.0447%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="35.7947%" y="981" width="0.0554%" height="15" fill="rgb(235,159,4)" fg:x="1939" fg:w="3"/><text x="36.0447%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="35.7947%" y="965" width="0.0554%" height="15" fill="rgb(214,87,48)" fg:x="1939" fg:w="3"/><text x="36.0447%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="35.7947%" y="949" width="0.0554%" height="15" fill="rgb(246,198,24)" fg:x="1939" fg:w="3"/><text x="36.0447%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="35.7947%" y="933" width="0.0554%" height="15" fill="rgb(209,66,40)" fg:x="1939" fg:w="3"/><text x="36.0447%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="35.7947%" y="917" width="0.0554%" height="15" fill="rgb(233,147,39)" fg:x="1939" fg:w="3"/><text x="36.0447%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="35.7947%" y="901" width="0.0554%" height="15" fill="rgb(231,145,52)" fg:x="1939" fg:w="3"/><text x="36.0447%" y="911.50"></text></g><g><title>SipHashUint256Extra (19 samples, 0.35%)</title><rect x="35.8501%" y="1189" width="0.3507%" height="15" fill="rgb(206,20,26)" fg:x="1942" fg:w="19"/><text x="36.1001%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (8 samples, 0.15%)</title><rect x="36.0532%" y="1173" width="0.1477%" height="15" fill="rgb(238,220,4)" fg:x="1953" fg:w="8"/><text x="36.3032%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (8 samples, 0.15%)</title><rect x="36.0532%" y="1157" width="0.1477%" height="15" fill="rgb(252,195,42)" fg:x="1953" fg:w="8"/><text x="36.3032%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="36.2008%" y="1189" width="0.0185%" height="15" fill="rgb(209,10,6)" fg:x="1961" fg:w="1"/><text x="36.4508%" y="1199.50"></text></g><g><title>CCoinsViewCache::GetCoin (431 samples, 7.96%)</title><rect x="28.2998%" y="1205" width="7.9564%" height="15" fill="rgb(229,3,52)" fg:x="1533" fg:w="431"/><text x="28.5498%" y="1215.50">CCoinsViewC..</text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.04%)</title><rect x="36.2193%" y="1189" width="0.0369%" height="15" fill="rgb(253,49,37)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1199.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.04%)</title><rect x="36.2193%" y="1173" width="0.0369%" height="15" fill="rgb(240,103,49)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="36.2193%" y="1157" width="0.0369%" height="15" fill="rgb(250,182,30)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="36.2193%" y="1141" width="0.0369%" height="15" fill="rgb(248,8,30)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="36.2193%" y="1125" width="0.0369%" height="15" fill="rgb(237,120,30)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="36.2193%" y="1109" width="0.0369%" height="15" fill="rgb(221,146,34)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1119.50"></text></g><g><title>Coin::Coin (2 samples, 0.04%)</title><rect x="36.2193%" y="1093" width="0.0369%" height="15" fill="rgb(242,55,13)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1103.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.04%)</title><rect x="36.2193%" y="1077" width="0.0369%" height="15" fill="rgb(242,112,31)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1087.50"></text></g><g><title>CScript::CScript (2 samples, 0.04%)</title><rect x="36.2193%" y="1061" width="0.0369%" height="15" fill="rgb(249,192,27)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.04%)</title><rect x="36.2193%" y="1045" width="0.0369%" height="15" fill="rgb(208,204,44)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (2 samples, 0.04%)</title><rect x="36.2193%" y="1029" width="0.0369%" height="15" fill="rgb(208,93,54)" fg:x="1962" fg:w="2"/><text x="36.4693%" y="1039.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="36.2562%" y="1205" width="0.0369%" height="15" fill="rgb(242,1,31)" fg:x="1964" fg:w="2"/><text x="36.5062%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.2747%" y="1189" width="0.0185%" height="15" fill="rgb(241,83,25)" fg:x="1965" fg:w="1"/><text x="36.5247%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.2747%" y="1173" width="0.0185%" height="15" fill="rgb(205,169,50)" fg:x="1965" fg:w="1"/><text x="36.5247%" y="1183.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="36.2932%" y="1173" width="0.0369%" height="15" fill="rgb(239,186,37)" fg:x="1966" fg:w="2"/><text x="36.5432%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.3116%" y="1157" width="0.0185%" height="15" fill="rgb(205,221,10)" fg:x="1967" fg:w="1"/><text x="36.5616%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.3116%" y="1141" width="0.0185%" height="15" fill="rgb(218,196,15)" fg:x="1967" fg:w="1"/><text x="36.5616%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.04%)</title><rect x="36.3301%" y="1157" width="0.0369%" height="15" fill="rgb(218,196,35)" fg:x="1968" fg:w="2"/><text x="36.5801%" y="1167.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="36.3485%" y="1141" width="0.0185%" height="15" fill="rgb(233,63,24)" fg:x="1969" fg:w="1"/><text x="36.5985%" y="1151.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="36.3485%" y="1125" width="0.0185%" height="15" fill="rgb(225,8,4)" fg:x="1969" fg:w="1"/><text x="36.5985%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (3 samples, 0.06%)</title><rect x="36.3670%" y="1157" width="0.0554%" height="15" fill="rgb(234,105,35)" fg:x="1970" fg:w="3"/><text x="36.6170%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.04%)</title><rect x="36.3855%" y="1141" width="0.0369%" height="15" fill="rgb(236,21,32)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.04%)</title><rect x="36.3855%" y="1125" width="0.0369%" height="15" fill="rgb(228,109,6)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="36.3855%" y="1109" width="0.0369%" height="15" fill="rgb(229,215,31)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="36.3855%" y="1093" width="0.0369%" height="15" fill="rgb(221,52,54)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="36.3855%" y="1077" width="0.0369%" height="15" fill="rgb(252,129,43)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="36.3855%" y="1061" width="0.0369%" height="15" fill="rgb(248,183,27)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1071.50"></text></g><g><title>Coin::Coin (2 samples, 0.04%)</title><rect x="36.3855%" y="1045" width="0.0369%" height="15" fill="rgb(250,0,22)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.04%)</title><rect x="36.3855%" y="1029" width="0.0369%" height="15" fill="rgb(213,166,10)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1039.50"></text></g><g><title>CScript::CScript (2 samples, 0.04%)</title><rect x="36.3855%" y="1013" width="0.0369%" height="15" fill="rgb(207,163,36)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.04%)</title><rect x="36.3855%" y="997" width="0.0369%" height="15" fill="rgb(208,122,22)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.04%)</title><rect x="36.3855%" y="981" width="0.0369%" height="15" fill="rgb(207,104,49)" fg:x="1971" fg:w="2"/><text x="36.6355%" y="991.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="36.4224%" y="1157" width="0.0185%" height="15" fill="rgb(248,211,50)" fg:x="1973" fg:w="1"/><text x="36.6724%" y="1167.50"></text></g><g><title>TxValidationState::TxValidationState (1 samples, 0.02%)</title><rect x="36.4224%" y="1141" width="0.0185%" height="15" fill="rgb(217,13,45)" fg:x="1973" fg:w="1"/><text x="36.6724%" y="1151.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::ValidationState (1 samples, 0.02%)</title><rect x="36.4224%" y="1125" width="0.0185%" height="15" fill="rgb(211,216,49)" fg:x="1973" fg:w="1"/><text x="36.6724%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="36.4224%" y="1109" width="0.0185%" height="15" fill="rgb(221,58,53)" fg:x="1973" fg:w="1"/><text x="36.6724%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="36.4224%" y="1093" width="0.0185%" height="15" fill="rgb(220,112,41)" fg:x="1973" fg:w="1"/><text x="36.6724%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (1 samples, 0.02%)</title><rect x="36.4224%" y="1077" width="0.0185%" height="15" fill="rgb(236,38,28)" fg:x="1973" fg:w="1"/><text x="36.6724%" y="1087.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.17%)</title><rect x="36.4408%" y="1157" width="0.1661%" height="15" fill="rgb(227,195,22)" fg:x="1974" fg:w="9"/><text x="36.6908%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (6 samples, 0.11%)</title><rect x="36.4962%" y="1141" width="0.1108%" height="15" fill="rgb(214,55,33)" fg:x="1977" fg:w="6"/><text x="36.7462%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (6 samples, 0.11%)</title><rect x="36.4962%" y="1125" width="0.1108%" height="15" fill="rgb(248,80,13)" fg:x="1977" fg:w="6"/><text x="36.7462%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="36.6070%" y="1077" width="0.0185%" height="15" fill="rgb(238,52,6)" fg:x="1983" fg:w="1"/><text x="36.8570%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (4 samples, 0.07%)</title><rect x="36.6070%" y="1141" width="0.0738%" height="15" fill="rgb(224,198,47)" fg:x="1983" fg:w="4"/><text x="36.8570%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.07%)</title><rect x="36.6070%" y="1125" width="0.0738%" height="15" fill="rgb(233,171,20)" fg:x="1983" fg:w="4"/><text x="36.8570%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.07%)</title><rect x="36.6070%" y="1109" width="0.0738%" height="15" fill="rgb(241,30,25)" fg:x="1983" fg:w="4"/><text x="36.8570%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.07%)</title><rect x="36.6070%" y="1093" width="0.0738%" height="15" fill="rgb(207,171,38)" fg:x="1983" fg:w="4"/><text x="36.8570%" y="1103.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.06%)</title><rect x="36.6254%" y="1077" width="0.0554%" height="15" fill="rgb(234,70,1)" fg:x="1984" fg:w="3"/><text x="36.8754%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (20 samples, 0.37%)</title><rect x="36.3301%" y="1173" width="0.3692%" height="15" fill="rgb(232,178,18)" fg:x="1968" fg:w="20"/><text x="36.5801%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="36.6070%" y="1157" width="0.0923%" height="15" fill="rgb(241,78,40)" fg:x="1983" fg:w="5"/><text x="36.8570%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="36.6808%" y="1141" width="0.0185%" height="15" fill="rgb(222,35,25)" fg:x="1987" fg:w="1"/><text x="36.9308%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="36.6808%" y="1125" width="0.0185%" height="15" fill="rgb(207,92,16)" fg:x="1987" fg:w="1"/><text x="36.9308%" y="1135.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="36.6808%" y="1109" width="0.0185%" height="15" fill="rgb(216,59,51)" fg:x="1987" fg:w="1"/><text x="36.9308%" y="1119.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="36.6808%" y="1093" width="0.0185%" height="15" fill="rgb(213,80,28)" fg:x="1987" fg:w="1"/><text x="36.9308%" y="1103.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="36.6808%" y="1077" width="0.0185%" height="15" fill="rgb(220,93,7)" fg:x="1987" fg:w="1"/><text x="36.9308%" y="1087.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="36.6808%" y="1061" width="0.0185%" height="15" fill="rgb(225,24,44)" fg:x="1987" fg:w="1"/><text x="36.9308%" y="1071.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="36.6808%" y="1045" width="0.0185%" height="15" fill="rgb(243,74,40)" fg:x="1987" fg:w="1"/><text x="36.9308%" y="1055.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="36.6993%" y="1157" width="0.0369%" height="15" fill="rgb(228,39,7)" fg:x="1988" fg:w="2"/><text x="36.9493%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.7177%" y="1141" width="0.0185%" height="15" fill="rgb(227,79,8)" fg:x="1989" fg:w="1"/><text x="36.9677%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.7177%" y="1125" width="0.0185%" height="15" fill="rgb(236,58,11)" fg:x="1989" fg:w="1"/><text x="36.9677%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.04%)</title><rect x="36.7362%" y="1077" width="0.0369%" height="15" fill="rgb(249,63,35)" fg:x="1990" fg:w="2"/><text x="36.9862%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (6 samples, 0.11%)</title><rect x="36.7362%" y="1157" width="0.1108%" height="15" fill="rgb(252,114,16)" fg:x="1990" fg:w="6"/><text x="36.9862%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (6 samples, 0.11%)</title><rect x="36.7362%" y="1141" width="0.1108%" height="15" fill="rgb(254,151,24)" fg:x="1990" fg:w="6"/><text x="36.9862%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.11%)</title><rect x="36.7362%" y="1125" width="0.1108%" height="15" fill="rgb(253,54,39)" fg:x="1990" fg:w="6"/><text x="36.9862%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.11%)</title><rect x="36.7362%" y="1109" width="0.1108%" height="15" fill="rgb(243,25,45)" fg:x="1990" fg:w="6"/><text x="36.9862%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.11%)</title><rect x="36.7362%" y="1093" width="0.1108%" height="15" fill="rgb(234,134,9)" fg:x="1990" fg:w="6"/><text x="36.9862%" y="1103.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="36.7731%" y="1077" width="0.0738%" height="15" fill="rgb(227,166,31)" fg:x="1992" fg:w="4"/><text x="37.0231%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="36.8100%" y="1061" width="0.0369%" height="15" fill="rgb(245,143,41)" fg:x="1994" fg:w="2"/><text x="37.0600%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="36.8100%" y="1045" width="0.0369%" height="15" fill="rgb(238,181,32)" fg:x="1994" fg:w="2"/><text x="37.0600%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (15 samples, 0.28%)</title><rect x="36.6993%" y="1173" width="0.2769%" height="15" fill="rgb(224,113,18)" fg:x="1988" fg:w="15"/><text x="36.9493%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (7 samples, 0.13%)</title><rect x="36.8470%" y="1157" width="0.1292%" height="15" fill="rgb(240,229,28)" fg:x="1996" fg:w="7"/><text x="37.0970%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (7 samples, 0.13%)</title><rect x="36.8470%" y="1141" width="0.1292%" height="15" fill="rgb(250,185,3)" fg:x="1996" fg:w="7"/><text x="37.0970%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.13%)</title><rect x="36.8470%" y="1125" width="0.1292%" height="15" fill="rgb(212,59,25)" fg:x="1996" fg:w="7"/><text x="37.0970%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (7 samples, 0.13%)</title><rect x="36.8470%" y="1109" width="0.1292%" height="15" fill="rgb(221,87,20)" fg:x="1996" fg:w="7"/><text x="37.0970%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (7 samples, 0.13%)</title><rect x="36.8470%" y="1093" width="0.1292%" height="15" fill="rgb(213,74,28)" fg:x="1996" fg:w="7"/><text x="37.0970%" y="1103.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.13%)</title><rect x="36.8470%" y="1077" width="0.1292%" height="15" fill="rgb(224,132,34)" fg:x="1996" fg:w="7"/><text x="37.0970%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.9577%" y="1061" width="0.0185%" height="15" fill="rgb(222,101,24)" fg:x="2002" fg:w="1"/><text x="37.2077%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.9577%" y="1045" width="0.0185%" height="15" fill="rgb(254,142,4)" fg:x="2002" fg:w="1"/><text x="37.2077%" y="1055.50"></text></g><g><title>CCoinsViewCache::FetchCoin (4 samples, 0.07%)</title><rect x="36.9762%" y="1157" width="0.0738%" height="15" fill="rgb(230,229,49)" fg:x="2003" fg:w="4"/><text x="37.2262%" y="1167.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="37.0500%" y="1157" width="0.0185%" height="15" fill="rgb(238,70,47)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="37.0500%" y="1141" width="0.0185%" height="15" fill="rgb(231,160,17)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="37.0500%" y="1125" width="0.0185%" height="15" fill="rgb(218,68,53)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="37.0500%" y="1109" width="0.0185%" height="15" fill="rgb(236,111,10)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="37.0500%" y="1093" width="0.0185%" height="15" fill="rgb(224,34,41)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="37.0500%" y="1077" width="0.0185%" height="15" fill="rgb(241,118,19)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="37.0500%" y="1061" width="0.0185%" height="15" fill="rgb(238,129,25)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1071.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="37.0500%" y="1045" width="0.0185%" height="15" fill="rgb(238,22,31)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="37.0500%" y="1029" width="0.0185%" height="15" fill="rgb(222,174,48)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1039.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="37.0500%" y="1013" width="0.0185%" height="15" fill="rgb(206,152,40)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="37.0500%" y="997" width="0.0185%" height="15" fill="rgb(218,99,54)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="37.0500%" y="981" width="0.0185%" height="15" fill="rgb(220,174,26)" fg:x="2007" fg:w="1"/><text x="37.3000%" y="991.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="37.0685%" y="1157" width="0.0185%" height="15" fill="rgb(245,116,9)" fg:x="2008" fg:w="1"/><text x="37.3185%" y="1167.50"></text></g><g><title>CCoinsViewCache::HaveCoin (1 samples, 0.02%)</title><rect x="37.0685%" y="1141" width="0.0185%" height="15" fill="rgb(209,72,35)" fg:x="2008" fg:w="1"/><text x="37.3185%" y="1151.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="37.0869%" y="1157" width="0.0738%" height="15" fill="rgb(226,126,21)" fg:x="2009" fg:w="4"/><text x="37.3369%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (13 samples, 0.24%)</title><rect x="36.9762%" y="1173" width="0.2400%" height="15" fill="rgb(227,192,1)" fg:x="2003" fg:w="13"/><text x="37.2262%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.06%)</title><rect x="37.1608%" y="1157" width="0.0554%" height="15" fill="rgb(237,180,29)" fg:x="2013" fg:w="3"/><text x="37.4108%" y="1167.50"></text></g><g><title>decltype  (3 samples, 0.06%)</title><rect x="37.1608%" y="1141" width="0.0554%" height="15" fill="rgb(230,197,35)" fg:x="2013" fg:w="3"/><text x="37.4108%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.06%)</title><rect x="37.1608%" y="1125" width="0.0554%" height="15" fill="rgb(246,193,31)" fg:x="2013" fg:w="3"/><text x="37.4108%" y="1135.50"></text></g><g><title>decltype  (3 samples, 0.06%)</title><rect x="37.1608%" y="1109" width="0.0554%" height="15" fill="rgb(241,36,4)" fg:x="2013" fg:w="3"/><text x="37.4108%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (3 samples, 0.06%)</title><rect x="37.1608%" y="1093" width="0.0554%" height="15" fill="rgb(241,130,17)" fg:x="2013" fg:w="3"/><text x="37.4108%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (3 samples, 0.06%)</title><rect x="37.1608%" y="1077" width="0.0554%" height="15" fill="rgb(206,137,32)" fg:x="2013" fg:w="3"/><text x="37.4108%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="37.1793%" y="1061" width="0.0369%" height="15" fill="rgb(237,228,51)" fg:x="2014" fg:w="2"/><text x="37.4293%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="37.1793%" y="1045" width="0.0369%" height="15" fill="rgb(243,6,42)" fg:x="2014" fg:w="2"/><text x="37.4293%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="37.1793%" y="1029" width="0.0369%" height="15" fill="rgb(251,74,28)" fg:x="2014" fg:w="2"/><text x="37.4293%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="37.1793%" y="1013" width="0.0369%" height="15" fill="rgb(218,20,49)" fg:x="2014" fg:w="2"/><text x="37.4293%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="37.1793%" y="997" width="0.0369%" height="15" fill="rgb(238,28,14)" fg:x="2014" fg:w="2"/><text x="37.4293%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="37.1793%" y="981" width="0.0369%" height="15" fill="rgb(229,40,46)" fg:x="2014" fg:w="2"/><text x="37.4293%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="37.1793%" y="965" width="0.0369%" height="15" fill="rgb(244,195,20)" fg:x="2014" fg:w="2"/><text x="37.4293%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="37.1793%" y="949" width="0.0369%" height="15" fill="rgb(253,56,35)" fg:x="2014" fg:w="2"/><text x="37.4293%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.1977%" y="933" width="0.0185%" height="15" fill="rgb(210,149,44)" fg:x="2015" fg:w="1"/><text x="37.4477%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.1977%" y="917" width="0.0185%" height="15" fill="rgb(240,135,12)" fg:x="2015" fg:w="1"/><text x="37.4477%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.1977%" y="901" width="0.0185%" height="15" fill="rgb(251,24,50)" fg:x="2015" fg:w="1"/><text x="37.4477%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.1977%" y="885" width="0.0185%" height="15" fill="rgb(243,200,47)" fg:x="2015" fg:w="1"/><text x="37.4477%" y="895.50"></text></g><g><title>AddCoins (1 samples, 0.02%)</title><rect x="37.2162%" y="1141" width="0.0185%" height="15" fill="rgb(224,166,26)" fg:x="2016" fg:w="1"/><text x="37.4662%" y="1151.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="37.2162%" y="1125" width="0.0185%" height="15" fill="rgb(233,0,47)" fg:x="2016" fg:w="1"/><text x="37.4662%" y="1135.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="37.2346%" y="1141" width="0.0185%" height="15" fill="rgb(253,80,5)" fg:x="2017" fg:w="1"/><text x="37.4846%" y="1151.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="37.2346%" y="1125" width="0.0185%" height="15" fill="rgb(214,133,25)" fg:x="2017" fg:w="1"/><text x="37.4846%" y="1135.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="37.2346%" y="1109" width="0.0185%" height="15" fill="rgb(209,27,14)" fg:x="2017" fg:w="1"/><text x="37.4846%" y="1119.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="37.2346%" y="1093" width="0.0185%" height="15" fill="rgb(219,102,51)" fg:x="2017" fg:w="1"/><text x="37.4846%" y="1103.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="37.2346%" y="1077" width="0.0185%" height="15" fill="rgb(237,18,16)" fg:x="2017" fg:w="1"/><text x="37.4846%" y="1087.50"></text></g><g><title>std::array&lt;unsigned char, 32ul&gt;::begin (1 samples, 0.02%)</title><rect x="37.2346%" y="1061" width="0.0185%" height="15" fill="rgb(241,85,17)" fg:x="2017" fg:w="1"/><text x="37.4846%" y="1071.50"></text></g><g><title>std::array&lt;unsigned char, 32ul&gt;::data (1 samples, 0.02%)</title><rect x="37.2346%" y="1045" width="0.0185%" height="15" fill="rgb(236,90,42)" fg:x="2017" fg:w="1"/><text x="37.4846%" y="1055.50"></text></g><g><title>CCoinsViewCache::FetchCoin (488 samples, 9.01%)</title><rect x="28.2629%" y="1221" width="9.0087%" height="15" fill="rgb(249,57,21)" fg:x="1531" fg:w="488"/><text x="28.5129%" y="1231.50">CCoinsViewCac..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (53 samples, 0.98%)</title><rect x="36.2932%" y="1205" width="0.9784%" height="15" fill="rgb(243,12,36)" fg:x="1966" fg:w="53"/><text x="36.5432%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (53 samples, 0.98%)</title><rect x="36.2932%" y="1189" width="0.9784%" height="15" fill="rgb(253,128,47)" fg:x="1966" fg:w="53"/><text x="36.5432%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.06%)</title><rect x="37.2162%" y="1173" width="0.0554%" height="15" fill="rgb(207,33,20)" fg:x="2016" fg:w="3"/><text x="37.4662%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.06%)</title><rect x="37.2162%" y="1157" width="0.0554%" height="15" fill="rgb(233,215,35)" fg:x="2016" fg:w="3"/><text x="37.4662%" y="1167.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="37.2531%" y="1141" width="0.0185%" height="15" fill="rgb(249,188,52)" fg:x="2018" fg:w="1"/><text x="37.5031%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.2531%" y="1125" width="0.0185%" height="15" fill="rgb(225,12,32)" fg:x="2018" fg:w="1"/><text x="37.5031%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.2531%" y="1109" width="0.0185%" height="15" fill="rgb(247,98,14)" fg:x="2018" fg:w="1"/><text x="37.5031%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.2531%" y="1093" width="0.0185%" height="15" fill="rgb(247,219,48)" fg:x="2018" fg:w="1"/><text x="37.5031%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.2531%" y="1077" width="0.0185%" height="15" fill="rgb(253,60,48)" fg:x="2018" fg:w="1"/><text x="37.5031%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.2531%" y="1061" width="0.0185%" height="15" fill="rgb(245,15,52)" fg:x="2018" fg:w="1"/><text x="37.5031%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.2531%" y="1045" width="0.0185%" height="15" fill="rgb(220,133,28)" fg:x="2018" fg:w="1"/><text x="37.5031%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.2531%" y="1029" width="0.0185%" height="15" fill="rgb(217,180,4)" fg:x="2018" fg:w="1"/><text x="37.5031%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.2531%" y="1013" width="0.0185%" height="15" fill="rgb(251,24,1)" fg:x="2018" fg:w="1"/><text x="37.5031%" y="1023.50"></text></g><g><title>CCoinsViewCache::GetCoin (3 samples, 0.06%)</title><rect x="37.2716%" y="1221" width="0.0554%" height="15" fill="rgb(212,185,49)" fg:x="2019" fg:w="3"/><text x="37.5216%" y="1231.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (3 samples, 0.06%)</title><rect x="37.2716%" y="1205" width="0.0554%" height="15" fill="rgb(215,175,22)" fg:x="2019" fg:w="3"/><text x="37.5216%" y="1215.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (3 samples, 0.06%)</title><rect x="37.2716%" y="1189" width="0.0554%" height="15" fill="rgb(250,205,14)" fg:x="2019" fg:w="3"/><text x="37.5216%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (3 samples, 0.06%)</title><rect x="37.2716%" y="1173" width="0.0554%" height="15" fill="rgb(225,211,22)" fg:x="2019" fg:w="3"/><text x="37.5216%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (3 samples, 0.06%)</title><rect x="37.2716%" y="1157" width="0.0554%" height="15" fill="rgb(251,179,42)" fg:x="2019" fg:w="3"/><text x="37.5216%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (3 samples, 0.06%)</title><rect x="37.2716%" y="1141" width="0.0554%" height="15" fill="rgb(208,216,51)" fg:x="2019" fg:w="3"/><text x="37.5216%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="37.2900%" y="1125" width="0.0369%" height="15" fill="rgb(235,36,11)" fg:x="2020" fg:w="2"/><text x="37.5400%" y="1135.50"></text></g><g><title>Coin::Coin (2 samples, 0.04%)</title><rect x="37.2900%" y="1109" width="0.0369%" height="15" fill="rgb(213,189,28)" fg:x="2020" fg:w="2"/><text x="37.5400%" y="1119.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.04%)</title><rect x="37.2900%" y="1093" width="0.0369%" height="15" fill="rgb(227,203,42)" fg:x="2020" fg:w="2"/><text x="37.5400%" y="1103.50"></text></g><g><title>CScript::CScript (2 samples, 0.04%)</title><rect x="37.2900%" y="1077" width="0.0369%" height="15" fill="rgb(244,72,36)" fg:x="2020" fg:w="2"/><text x="37.5400%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.04%)</title><rect x="37.2900%" y="1061" width="0.0369%" height="15" fill="rgb(213,53,17)" fg:x="2020" fg:w="2"/><text x="37.5400%" y="1071.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.04%)</title><rect x="37.2900%" y="1045" width="0.0369%" height="15" fill="rgb(207,167,3)" fg:x="2020" fg:w="2"/><text x="37.5400%" y="1055.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.06%)</title><rect x="37.3269%" y="1221" width="0.0554%" height="15" fill="rgb(216,98,30)" fg:x="2022" fg:w="3"/><text x="37.5769%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="37.3639%" y="1205" width="0.0185%" height="15" fill="rgb(236,123,15)" fg:x="2024" fg:w="1"/><text x="37.6139%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="37.3639%" y="1189" width="0.0185%" height="15" fill="rgb(248,81,50)" fg:x="2024" fg:w="1"/><text x="37.6139%" y="1199.50"></text></g><g><title>CCoinsViewCache::HaveInputs (497 samples, 9.17%)</title><rect x="28.2629%" y="1253" width="9.1748%" height="15" fill="rgb(214,120,4)" fg:x="1531" fg:w="497"/><text x="28.5129%" y="1263.50">CCoinsViewCac..</text></g><g><title>CCoinsViewCache::HaveCoin (497 samples, 9.17%)</title><rect x="28.2629%" y="1237" width="9.1748%" height="15" fill="rgb(208,179,34)" fg:x="1531" fg:w="497"/><text x="28.5129%" y="1247.50">CCoinsViewCac..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="37.3823%" y="1221" width="0.0554%" height="15" fill="rgb(227,140,7)" fg:x="2025" fg:w="3"/><text x="37.6323%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="37.4192%" y="1205" width="0.0185%" height="15" fill="rgb(214,22,6)" fg:x="2027" fg:w="1"/><text x="37.6692%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="37.4192%" y="1189" width="0.0185%" height="15" fill="rgb(207,137,27)" fg:x="2027" fg:w="1"/><text x="37.6692%" y="1199.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="37.4192%" y="1173" width="0.0185%" height="15" fill="rgb(210,8,46)" fg:x="2027" fg:w="1"/><text x="37.6692%" y="1183.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="37.4192%" y="1157" width="0.0185%" height="15" fill="rgb(240,16,54)" fg:x="2027" fg:w="1"/><text x="37.6692%" y="1167.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="37.4192%" y="1141" width="0.0185%" height="15" fill="rgb(211,209,29)" fg:x="2027" fg:w="1"/><text x="37.6692%" y="1151.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="37.4192%" y="1125" width="0.0185%" height="15" fill="rgb(226,228,24)" fg:x="2027" fg:w="1"/><text x="37.6692%" y="1135.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="37.4192%" y="1109" width="0.0185%" height="15" fill="rgb(222,84,9)" fg:x="2027" fg:w="1"/><text x="37.6692%" y="1119.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.06%)</title><rect x="37.4377%" y="1253" width="0.0554%" height="15" fill="rgb(234,203,30)" fg:x="2028" fg:w="3"/><text x="37.6877%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="37.4562%" y="1237" width="0.0369%" height="15" fill="rgb(238,109,14)" fg:x="2029" fg:w="2"/><text x="37.7062%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="37.4562%" y="1221" width="0.0369%" height="15" fill="rgb(233,206,34)" fg:x="2029" fg:w="2"/><text x="37.7062%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="37.5115%" y="1237" width="0.0185%" height="15" fill="rgb(220,167,47)" fg:x="2032" fg:w="1"/><text x="37.7615%" y="1247.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="37.5115%" y="1221" width="0.0185%" height="15" fill="rgb(238,105,10)" fg:x="2032" fg:w="1"/><text x="37.7615%" y="1231.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="37.5115%" y="1205" width="0.0185%" height="15" fill="rgb(213,227,17)" fg:x="2032" fg:w="1"/><text x="37.7615%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="37.5115%" y="1189" width="0.0185%" height="15" fill="rgb(217,132,38)" fg:x="2032" fg:w="1"/><text x="37.7615%" y="1199.50"></text></g><g><title>Consensus::CheckTxInputs (540 samples, 9.97%)</title><rect x="27.5798%" y="1269" width="9.9686%" height="15" fill="rgb(242,146,4)" fg:x="1494" fg:w="540"/><text x="27.8298%" y="1279.50">Consensus::Che..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="37.4931%" y="1253" width="0.0554%" height="15" fill="rgb(212,61,9)" fg:x="2031" fg:w="3"/><text x="37.7431%" y="1263.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="37.5300%" y="1237" width="0.0185%" height="15" fill="rgb(247,126,22)" fg:x="2033" fg:w="1"/><text x="37.7800%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="37.5300%" y="1221" width="0.0185%" height="15" fill="rgb(220,196,2)" fg:x="2033" fg:w="1"/><text x="37.7800%" y="1231.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="37.5300%" y="1205" width="0.0185%" height="15" fill="rgb(208,46,4)" fg:x="2033" fg:w="1"/><text x="37.7800%" y="1215.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="37.5300%" y="1189" width="0.0185%" height="15" fill="rgb(252,104,46)" fg:x="2033" fg:w="1"/><text x="37.7800%" y="1199.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="37.5300%" y="1173" width="0.0185%" height="15" fill="rgb(237,152,48)" fg:x="2033" fg:w="1"/><text x="37.7800%" y="1183.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="37.5300%" y="1157" width="0.0185%" height="15" fill="rgb(221,59,37)" fg:x="2033" fg:w="1"/><text x="37.7800%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="37.5300%" y="1141" width="0.0185%" height="15" fill="rgb(209,202,51)" fg:x="2033" fg:w="1"/><text x="37.7800%" y="1151.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (2 samples, 0.04%)</title><rect x="37.5485%" y="1253" width="0.0369%" height="15" fill="rgb(228,81,30)" fg:x="2034" fg:w="2"/><text x="37.7985%" y="1263.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.02%)</title><rect x="37.5669%" y="1237" width="0.0185%" height="15" fill="rgb(227,42,39)" fg:x="2035" fg:w="1"/><text x="37.8169%" y="1247.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="37.5669%" y="1221" width="0.0185%" height="15" fill="rgb(221,26,2)" fg:x="2035" fg:w="1"/><text x="37.8169%" y="1231.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="37.5669%" y="1205" width="0.0185%" height="15" fill="rgb(254,61,31)" fg:x="2035" fg:w="1"/><text x="37.8169%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.04%)</title><rect x="37.5854%" y="1253" width="0.0369%" height="15" fill="rgb(222,173,38)" fg:x="2036" fg:w="2"/><text x="37.8354%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="37.6038%" y="1237" width="0.0185%" height="15" fill="rgb(218,50,12)" fg:x="2037" fg:w="1"/><text x="37.8538%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="37.6038%" y="1221" width="0.0185%" height="15" fill="rgb(223,88,40)" fg:x="2037" fg:w="1"/><text x="37.8538%" y="1231.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="37.6038%" y="1205" width="0.0185%" height="15" fill="rgb(237,54,19)" fg:x="2037" fg:w="1"/><text x="37.8538%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="37.6038%" y="1189" width="0.0185%" height="15" fill="rgb(251,129,25)" fg:x="2037" fg:w="1"/><text x="37.8538%" y="1199.50"></text></g><g><title>CTransaction::GetValueOut (1 samples, 0.02%)</title><rect x="37.6223%" y="1253" width="0.0185%" height="15" fill="rgb(238,97,19)" fg:x="2038" fg:w="1"/><text x="37.8723%" y="1263.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (2 samples, 0.04%)</title><rect x="37.6408%" y="1237" width="0.0369%" height="15" fill="rgb(240,169,18)" fg:x="2039" fg:w="2"/><text x="37.8908%" y="1247.50"></text></g><g><title>Chainstate::ConnectBlock (3 samples, 0.06%)</title><rect x="37.6408%" y="1253" width="0.0554%" height="15" fill="rgb(230,187,49)" fg:x="2039" fg:w="3"/><text x="37.8908%" y="1263.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="37.6777%" y="1237" width="0.0185%" height="15" fill="rgb(209,44,26)" fg:x="2041" fg:w="1"/><text x="37.9277%" y="1247.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="37.6961%" y="1253" width="0.0185%" height="15" fill="rgb(244,0,6)" fg:x="2042" fg:w="1"/><text x="37.9461%" y="1263.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="37.8254%" y="1237" width="0.0185%" height="15" fill="rgb(248,18,21)" fg:x="2049" fg:w="1"/><text x="38.0754%" y="1247.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="37.8254%" y="1221" width="0.0185%" height="15" fill="rgb(245,180,19)" fg:x="2049" fg:w="1"/><text x="38.0754%" y="1231.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="37.8254%" y="1205" width="0.0185%" height="15" fill="rgb(252,118,36)" fg:x="2049" fg:w="1"/><text x="38.0754%" y="1215.50"></text></g><g><title>SipHashUint256Extra (10 samples, 0.18%)</title><rect x="37.7146%" y="1253" width="0.1846%" height="15" fill="rgb(210,224,19)" fg:x="2043" fg:w="10"/><text x="37.9646%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="37.8438%" y="1237" width="0.0554%" height="15" fill="rgb(218,30,24)" fg:x="2050" fg:w="3"/><text x="38.0938%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="37.8438%" y="1221" width="0.0554%" height="15" fill="rgb(219,75,50)" fg:x="2050" fg:w="3"/><text x="38.0938%" y="1231.50"></text></g><g><title>EvaluateSequenceLocks (20 samples, 0.37%)</title><rect x="37.5485%" y="1269" width="0.3692%" height="15" fill="rgb(234,72,50)" fg:x="2034" fg:w="20"/><text x="37.7985%" y="1279.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="37.8992%" y="1253" width="0.0185%" height="15" fill="rgb(219,100,48)" fg:x="2053" fg:w="1"/><text x="38.1492%" y="1263.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="37.9177%" y="1269" width="0.0185%" height="15" fill="rgb(253,5,41)" fg:x="2054" fg:w="1"/><text x="38.1677%" y="1279.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="37.9177%" y="1253" width="0.0185%" height="15" fill="rgb(247,181,11)" fg:x="2054" fg:w="1"/><text x="38.1677%" y="1263.50"></text></g><g><title>GetScriptOp (2 samples, 0.04%)</title><rect x="37.9361%" y="1269" width="0.0369%" height="15" fill="rgb(222,223,25)" fg:x="2055" fg:w="2"/><text x="38.1861%" y="1279.50"></text></g><g><title>operator- (1 samples, 0.02%)</title><rect x="37.9546%" y="1253" width="0.0185%" height="15" fill="rgb(214,198,28)" fg:x="2056" fg:w="1"/><text x="38.2046%" y="1263.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (3 samples, 0.06%)</title><rect x="37.9730%" y="1253" width="0.0554%" height="15" fill="rgb(230,46,43)" fg:x="2057" fg:w="3"/><text x="38.2230%" y="1263.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.02%)</title><rect x="38.0100%" y="1237" width="0.0185%" height="15" fill="rgb(233,65,53)" fg:x="2059" fg:w="1"/><text x="38.2600%" y="1247.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.0100%" y="1221" width="0.0185%" height="15" fill="rgb(221,121,27)" fg:x="2059" fg:w="1"/><text x="38.2600%" y="1231.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.0100%" y="1205" width="0.0185%" height="15" fill="rgb(247,70,47)" fg:x="2059" fg:w="1"/><text x="38.2600%" y="1215.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.0100%" y="1189" width="0.0185%" height="15" fill="rgb(228,85,35)" fg:x="2059" fg:w="1"/><text x="38.2600%" y="1199.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;long*, __gnu_cxx::__ops::_Val_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.0100%" y="1173" width="0.0185%" height="15" fill="rgb(209,50,18)" fg:x="2059" fg:w="1"/><text x="38.2600%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5 samples, 0.09%)</title><rect x="38.0284%" y="1189" width="0.0923%" height="15" fill="rgb(250,19,35)" fg:x="2060" fg:w="5"/><text x="38.2784%" y="1199.50"></text></g><g><title>GetP2SHSigOpCount (5 samples, 0.09%)</title><rect x="38.0284%" y="1173" width="0.0923%" height="15" fill="rgb(253,107,29)" fg:x="2060" fg:w="5"/><text x="38.2784%" y="1183.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="38.1023%" y="1157" width="0.0185%" height="15" fill="rgb(252,179,29)" fg:x="2064" fg:w="1"/><text x="38.3523%" y="1167.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="38.1023%" y="1141" width="0.0185%" height="15" fill="rgb(238,194,6)" fg:x="2064" fg:w="1"/><text x="38.3523%" y="1151.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="38.1207%" y="1157" width="0.0185%" height="15" fill="rgb(238,164,29)" fg:x="2065" fg:w="1"/><text x="38.3707%" y="1167.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="38.1207%" y="1141" width="0.0185%" height="15" fill="rgb(224,25,9)" fg:x="2065" fg:w="1"/><text x="38.3707%" y="1151.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="38.1207%" y="1125" width="0.0185%" height="15" fill="rgb(244,153,23)" fg:x="2065" fg:w="1"/><text x="38.3707%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (7 samples, 0.13%)</title><rect x="38.0284%" y="1237" width="0.1292%" height="15" fill="rgb(212,203,14)" fg:x="2060" fg:w="7"/><text x="38.2784%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (7 samples, 0.13%)</title><rect x="38.0284%" y="1221" width="0.1292%" height="15" fill="rgb(220,164,20)" fg:x="2060" fg:w="7"/><text x="38.2784%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (7 samples, 0.13%)</title><rect x="38.0284%" y="1205" width="0.1292%" height="15" fill="rgb(222,203,48)" fg:x="2060" fg:w="7"/><text x="38.2784%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="38.1207%" y="1189" width="0.0369%" height="15" fill="rgb(215,159,22)" fg:x="2065" fg:w="2"/><text x="38.3707%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="38.1207%" y="1173" width="0.0369%" height="15" fill="rgb(216,183,47)" fg:x="2065" fg:w="2"/><text x="38.3707%" y="1183.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="38.1392%" y="1157" width="0.0185%" height="15" fill="rgb(229,195,25)" fg:x="2066" fg:w="1"/><text x="38.3892%" y="1167.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="38.1577%" y="1237" width="0.0185%" height="15" fill="rgb(224,132,51)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1247.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1221" width="0.0185%" height="15" fill="rgb(240,63,7)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1205" width="0.0185%" height="15" fill="rgb(249,182,41)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1215.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1189" width="0.0185%" height="15" fill="rgb(243,47,26)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1199.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1173" width="0.0185%" height="15" fill="rgb(233,48,2)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1157" width="0.0185%" height="15" fill="rgb(244,165,34)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1167.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1141" width="0.0185%" height="15" fill="rgb(207,89,7)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1125" width="0.0185%" height="15" fill="rgb(244,117,36)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1109" width="0.0185%" height="15" fill="rgb(226,144,34)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1093" width="0.0185%" height="15" fill="rgb(213,23,19)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.1577%" y="1077" width="0.0185%" height="15" fill="rgb(217,75,12)" fg:x="2067" fg:w="1"/><text x="38.4077%" y="1087.50"></text></g><g><title>CCoinsViewCache::AccessCoin (10 samples, 0.18%)</title><rect x="38.0284%" y="1253" width="0.1846%" height="15" fill="rgb(224,159,17)" fg:x="2060" fg:w="10"/><text x="38.2784%" y="1263.50"></text></g><g><title>GetP2SHSigOpCount (2 samples, 0.04%)</title><rect x="38.1761%" y="1237" width="0.0369%" height="15" fill="rgb(217,118,1)" fg:x="2068" fg:w="2"/><text x="38.4261%" y="1247.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="38.2130%" y="1253" width="0.0185%" height="15" fill="rgb(232,180,48)" fg:x="2070" fg:w="1"/><text x="38.4630%" y="1263.50"></text></g><g><title>CScript::IsWitnessProgram (2 samples, 0.04%)</title><rect x="38.2315%" y="1253" width="0.0369%" height="15" fill="rgb(230,27,33)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1263.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1237" width="0.0369%" height="15" fill="rgb(205,31,21)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1247.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1221" width="0.0369%" height="15" fill="rgb(253,59,4)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1231.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1205" width="0.0369%" height="15" fill="rgb(224,201,9)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1215.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1189" width="0.0369%" height="15" fill="rgb(229,206,30)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1199.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1173" width="0.0369%" height="15" fill="rgb(212,67,47)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1183.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1157" width="0.0369%" height="15" fill="rgb(211,96,50)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1141" width="0.0369%" height="15" fill="rgb(252,114,18)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1125" width="0.0369%" height="15" fill="rgb(223,58,37)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1109" width="0.0369%" height="15" fill="rgb(237,70,4)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="38.2315%" y="1093" width="0.0369%" height="15" fill="rgb(244,85,46)" fg:x="2071" fg:w="2"/><text x="38.4815%" y="1103.50"></text></g><g><title>CalculateSequenceLocks (1 samples, 0.02%)</title><rect x="38.2684%" y="1253" width="0.0185%" height="15" fill="rgb(223,39,52)" fg:x="2073" fg:w="1"/><text x="38.5184%" y="1263.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="38.3053%" y="1237" width="0.0185%" height="15" fill="rgb(218,200,14)" fg:x="2075" fg:w="1"/><text x="38.5553%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="38.3053%" y="1221" width="0.0185%" height="15" fill="rgb(208,171,16)" fg:x="2075" fg:w="1"/><text x="38.5553%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="38.3053%" y="1205" width="0.0185%" height="15" fill="rgb(234,200,18)" fg:x="2075" fg:w="1"/><text x="38.5553%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="38.3053%" y="1189" width="0.0185%" height="15" fill="rgb(228,45,11)" fg:x="2075" fg:w="1"/><text x="38.5553%" y="1199.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="38.3238%" y="1237" width="0.0185%" height="15" fill="rgb(237,182,11)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1247.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="38.3238%" y="1221" width="0.0185%" height="15" fill="rgb(241,175,49)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1205" width="0.0185%" height="15" fill="rgb(247,38,35)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1189" width="0.0185%" height="15" fill="rgb(228,39,49)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1199.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1173" width="0.0185%" height="15" fill="rgb(226,101,26)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1157" width="0.0185%" height="15" fill="rgb(206,141,19)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1167.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1141" width="0.0185%" height="15" fill="rgb(211,200,13)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1125" width="0.0185%" height="15" fill="rgb(241,121,6)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1135.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1109" width="0.0185%" height="15" fill="rgb(234,221,29)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1093" width="0.0185%" height="15" fill="rgb(229,136,5)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1077" width="0.0185%" height="15" fill="rgb(238,36,11)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1061" width="0.0185%" height="15" fill="rgb(251,55,41)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3238%" y="1045" width="0.0185%" height="15" fill="rgb(242,34,40)" fg:x="2076" fg:w="1"/><text x="38.5738%" y="1055.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="38.3423%" y="1237" width="0.0185%" height="15" fill="rgb(215,42,17)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1247.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="38.3423%" y="1221" width="0.0185%" height="15" fill="rgb(207,44,46)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="38.3423%" y="1205" width="0.0185%" height="15" fill="rgb(211,206,28)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="38.3423%" y="1189" width="0.0185%" height="15" fill="rgb(237,167,16)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="38.3423%" y="1173" width="0.0185%" height="15" fill="rgb(233,66,6)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1183.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="38.3423%" y="1157" width="0.0185%" height="15" fill="rgb(246,123,29)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1167.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="38.3423%" y="1141" width="0.0185%" height="15" fill="rgb(209,62,40)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1151.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="38.3423%" y="1125" width="0.0185%" height="15" fill="rgb(218,4,25)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1135.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="38.3423%" y="1109" width="0.0185%" height="15" fill="rgb(253,91,49)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1119.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="38.3423%" y="1093" width="0.0185%" height="15" fill="rgb(228,155,29)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1103.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="38.3423%" y="1077" width="0.0185%" height="15" fill="rgb(243,57,37)" fg:x="2077" fg:w="1"/><text x="38.5923%" y="1087.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="38.3607%" y="1237" width="0.0185%" height="15" fill="rgb(244,167,17)" fg:x="2078" fg:w="1"/><text x="38.6107%" y="1247.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="38.3607%" y="1221" width="0.0185%" height="15" fill="rgb(207,181,38)" fg:x="2078" fg:w="1"/><text x="38.6107%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="38.3607%" y="1205" width="0.0185%" height="15" fill="rgb(211,8,23)" fg:x="2078" fg:w="1"/><text x="38.6107%" y="1215.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="38.3607%" y="1189" width="0.0185%" height="15" fill="rgb(235,11,44)" fg:x="2078" fg:w="1"/><text x="38.6107%" y="1199.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="38.3792%" y="1237" width="0.0185%" height="15" fill="rgb(248,18,52)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1247.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1221" width="0.0185%" height="15" fill="rgb(208,4,7)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1205" width="0.0185%" height="15" fill="rgb(240,17,39)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1215.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1189" width="0.0185%" height="15" fill="rgb(207,170,3)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1199.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1173" width="0.0185%" height="15" fill="rgb(236,100,52)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1183.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1157" width="0.0185%" height="15" fill="rgb(246,78,51)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1167.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1141" width="0.0185%" height="15" fill="rgb(211,17,15)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1151.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1125" width="0.0185%" height="15" fill="rgb(209,59,46)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1109" width="0.0185%" height="15" fill="rgb(210,92,25)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1093" width="0.0185%" height="15" fill="rgb(238,174,52)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1077" width="0.0185%" height="15" fill="rgb(230,73,7)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="38.3792%" y="1061" width="0.0185%" height="15" fill="rgb(243,124,40)" fg:x="2079" fg:w="1"/><text x="38.6292%" y="1071.50"></text></g><g><title>GetTransactionSigOpCost (2 samples, 0.04%)</title><rect x="38.3976%" y="1237" width="0.0369%" height="15" fill="rgb(244,170,11)" fg:x="2080" fg:w="2"/><text x="38.6476%" y="1247.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.09%)</title><rect x="38.4346%" y="1237" width="0.0923%" height="15" fill="rgb(207,114,54)" fg:x="2082" fg:w="5"/><text x="38.6846%" y="1247.50"></text></g><g><title>CountWitnessSigOps (14 samples, 0.26%)</title><rect x="38.2869%" y="1253" width="0.2584%" height="15" fill="rgb(205,42,20)" fg:x="2074" fg:w="14"/><text x="38.5369%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="38.5269%" y="1237" width="0.0185%" height="15" fill="rgb(230,30,28)" fg:x="2087" fg:w="1"/><text x="38.7769%" y="1247.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (2 samples, 0.04%)</title><rect x="38.5453%" y="1237" width="0.0369%" height="15" fill="rgb(205,73,54)" fg:x="2088" fg:w="2"/><text x="38.7953%" y="1247.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.02%)</title><rect x="38.5638%" y="1221" width="0.0185%" height="15" fill="rgb(254,227,23)" fg:x="2089" fg:w="1"/><text x="38.8138%" y="1231.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.5638%" y="1205" width="0.0185%" height="15" fill="rgb(228,202,34)" fg:x="2089" fg:w="1"/><text x="38.8138%" y="1215.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.02%)</title><rect x="38.6561%" y="1205" width="0.0185%" height="15" fill="rgb(222,225,37)" fg:x="2094" fg:w="1"/><text x="38.9061%" y="1215.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.02%)</title><rect x="38.6561%" y="1189" width="0.0185%" height="15" fill="rgb(221,14,54)" fg:x="2094" fg:w="1"/><text x="38.9061%" y="1199.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.6561%" y="1173" width="0.0185%" height="15" fill="rgb(254,102,2)" fg:x="2094" fg:w="1"/><text x="38.9061%" y="1183.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.6561%" y="1157" width="0.0185%" height="15" fill="rgb(232,104,17)" fg:x="2094" fg:w="1"/><text x="38.9061%" y="1167.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.6561%" y="1141" width="0.0185%" height="15" fill="rgb(250,220,14)" fg:x="2094" fg:w="1"/><text x="38.9061%" y="1151.50"></text></g><g><title>CScript::GetSigOpCount (2 samples, 0.04%)</title><rect x="38.6745%" y="1205" width="0.0369%" height="15" fill="rgb(241,158,9)" fg:x="2095" fg:w="2"/><text x="38.9245%" y="1215.50"></text></g><g><title>GetScriptOp (7 samples, 0.13%)</title><rect x="38.7115%" y="1205" width="0.1292%" height="15" fill="rgb(246,9,43)" fg:x="2097" fg:w="7"/><text x="38.9615%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator&gt;=(prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator) const (1 samples, 0.02%)</title><rect x="38.8222%" y="1189" width="0.0185%" height="15" fill="rgb(206,73,33)" fg:x="2103" fg:w="1"/><text x="39.0722%" y="1199.50"></text></g><g><title>CScript::GetSigOpCount (15 samples, 0.28%)</title><rect x="38.5822%" y="1237" width="0.2769%" height="15" fill="rgb(222,79,8)" fg:x="2090" fg:w="15"/><text x="38.8322%" y="1247.50"></text></g><g><title>CScript::GetOp (12 samples, 0.22%)</title><rect x="38.6376%" y="1221" width="0.2215%" height="15" fill="rgb(234,8,54)" fg:x="2093" fg:w="12"/><text x="38.8876%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.8407%" y="1205" width="0.0185%" height="15" fill="rgb(209,134,38)" fg:x="2104" fg:w="1"/><text x="39.0907%" y="1215.50"></text></g><g><title>GetScriptOp (6 samples, 0.11%)</title><rect x="38.8591%" y="1237" width="0.1108%" height="15" fill="rgb(230,127,29)" fg:x="2105" fg:w="6"/><text x="39.1091%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator&gt;=(prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator) const (1 samples, 0.02%)</title><rect x="38.9514%" y="1221" width="0.0185%" height="15" fill="rgb(242,44,41)" fg:x="2110" fg:w="1"/><text x="39.2014%" y="1231.50"></text></g><g><title>GetLegacySigOpCount (24 samples, 0.44%)</title><rect x="38.5453%" y="1253" width="0.4430%" height="15" fill="rgb(222,56,43)" fg:x="2088" fg:w="24"/><text x="38.7953%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="38.9699%" y="1237" width="0.0185%" height="15" fill="rgb(238,39,47)" fg:x="2111" fg:w="1"/><text x="39.2199%" y="1247.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="38.9884%" y="1141" width="0.0185%" height="15" fill="rgb(226,79,43)" fg:x="2112" fg:w="1"/><text x="39.2384%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator&lt;(prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator) const (1 samples, 0.02%)</title><rect x="38.9884%" y="1125" width="0.0185%" height="15" fill="rgb(242,105,53)" fg:x="2112" fg:w="1"/><text x="39.2384%" y="1135.50"></text></g><g><title>CScript::IsPayToScriptHash (1 samples, 0.02%)</title><rect x="39.0068%" y="1141" width="0.0185%" height="15" fill="rgb(251,132,46)" fg:x="2113" fg:w="1"/><text x="39.2568%" y="1151.50"></text></g><g><title>GetP2SHSigOpCount (2 samples, 0.04%)</title><rect x="39.0253%" y="1141" width="0.0369%" height="15" fill="rgb(231,77,14)" fg:x="2114" fg:w="2"/><text x="39.2753%" y="1151.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="39.0438%" y="1125" width="0.0185%" height="15" fill="rgb(240,135,9)" fg:x="2115" fg:w="1"/><text x="39.2938%" y="1135.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="39.0438%" y="1109" width="0.0185%" height="15" fill="rgb(248,109,14)" fg:x="2115" fg:w="1"/><text x="39.2938%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5 samples, 0.09%)</title><rect x="38.9884%" y="1157" width="0.0923%" height="15" fill="rgb(227,146,52)" fg:x="2112" fg:w="5"/><text x="39.2384%" y="1167.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="39.0622%" y="1141" width="0.0185%" height="15" fill="rgb(232,54,3)" fg:x="2116" fg:w="1"/><text x="39.3122%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (7 samples, 0.13%)</title><rect x="38.9884%" y="1205" width="0.1292%" height="15" fill="rgb(229,201,43)" fg:x="2112" fg:w="7"/><text x="39.2384%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (7 samples, 0.13%)</title><rect x="38.9884%" y="1189" width="0.1292%" height="15" fill="rgb(252,161,33)" fg:x="2112" fg:w="7"/><text x="39.2384%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (7 samples, 0.13%)</title><rect x="38.9884%" y="1173" width="0.1292%" height="15" fill="rgb(226,146,40)" fg:x="2112" fg:w="7"/><text x="39.2384%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="39.0807%" y="1157" width="0.0369%" height="15" fill="rgb(219,47,25)" fg:x="2117" fg:w="2"/><text x="39.3307%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="39.0807%" y="1141" width="0.0369%" height="15" fill="rgb(250,135,13)" fg:x="2117" fg:w="2"/><text x="39.3307%" y="1151.50"></text></g><g><title>GetScriptOp (2 samples, 0.04%)</title><rect x="39.0807%" y="1125" width="0.0369%" height="15" fill="rgb(219,229,18)" fg:x="2117" fg:w="2"/><text x="39.3307%" y="1135.50"></text></g><g><title>operator- (1 samples, 0.02%)</title><rect x="39.0991%" y="1109" width="0.0185%" height="15" fill="rgb(217,152,27)" fg:x="2118" fg:w="1"/><text x="39.3491%" y="1119.50"></text></g><g><title>CCoinsViewCache::AccessCoin (8 samples, 0.15%)</title><rect x="38.9884%" y="1221" width="0.1477%" height="15" fill="rgb(225,71,47)" fg:x="2112" fg:w="8"/><text x="39.2384%" y="1231.50"></text></g><g><title>GetLegacySigOpCount (1 samples, 0.02%)</title><rect x="39.1176%" y="1205" width="0.0185%" height="15" fill="rgb(220,139,14)" fg:x="2119" fg:w="1"/><text x="39.3676%" y="1215.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="39.1361%" y="1221" width="0.0185%" height="15" fill="rgb(247,54,32)" fg:x="2120" fg:w="1"/><text x="39.3861%" y="1231.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="39.1545%" y="1221" width="0.0185%" height="15" fill="rgb(252,131,39)" fg:x="2121" fg:w="1"/><text x="39.4045%" y="1231.50"></text></g><g><title>GetP2SHSigOpCount (11 samples, 0.20%)</title><rect x="38.9884%" y="1253" width="0.2031%" height="15" fill="rgb(210,108,39)" fg:x="2112" fg:w="11"/><text x="39.2384%" y="1263.50"></text></g><g><title>GetP2SHSigOpCount (11 samples, 0.20%)</title><rect x="38.9884%" y="1237" width="0.2031%" height="15" fill="rgb(205,23,29)" fg:x="2112" fg:w="11"/><text x="39.2384%" y="1247.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="39.1730%" y="1221" width="0.0185%" height="15" fill="rgb(246,139,46)" fg:x="2122" fg:w="1"/><text x="39.4230%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.1730%" y="1205" width="0.0185%" height="15" fill="rgb(250,81,26)" fg:x="2122" fg:w="1"/><text x="39.4230%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.1730%" y="1189" width="0.0185%" height="15" fill="rgb(214,104,7)" fg:x="2122" fg:w="1"/><text x="39.4230%" y="1199.50"></text></g><g><title>GetScriptOp (4 samples, 0.07%)</title><rect x="39.1914%" y="1253" width="0.0738%" height="15" fill="rgb(233,189,8)" fg:x="2123" fg:w="4"/><text x="39.4414%" y="1263.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1237" width="0.0185%" height="15" fill="rgb(228,141,17)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1247.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1221" width="0.0185%" height="15" fill="rgb(247,157,1)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1231.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1205" width="0.0185%" height="15" fill="rgb(249,225,5)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1215.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1189" width="0.0185%" height="15" fill="rgb(242,55,13)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1199.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1173" width="0.0185%" height="15" fill="rgb(230,49,50)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1157" width="0.0185%" height="15" fill="rgb(241,111,38)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1167.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1141" width="0.0185%" height="15" fill="rgb(252,155,4)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1125" width="0.0185%" height="15" fill="rgb(212,69,32)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1109" width="0.0185%" height="15" fill="rgb(243,107,47)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1093" width="0.0185%" height="15" fill="rgb(247,130,12)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="39.2468%" y="1077" width="0.0185%" height="15" fill="rgb(233,74,16)" fg:x="2126" fg:w="1"/><text x="39.4968%" y="1087.50"></text></g><g><title>SequenceLocks (1 samples, 0.02%)</title><rect x="39.2653%" y="1253" width="0.0185%" height="15" fill="rgb(208,58,18)" fg:x="2127" fg:w="1"/><text x="39.5153%" y="1263.50"></text></g><g><title>GetTransactionSigOpCost (72 samples, 1.33%)</title><rect x="37.9730%" y="1269" width="1.3291%" height="15" fill="rgb(242,225,1)" fg:x="2057" fg:w="72"/><text x="38.2230%" y="1279.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="39.2837%" y="1253" width="0.0185%" height="15" fill="rgb(249,39,40)" fg:x="2128" fg:w="1"/><text x="39.5337%" y="1263.50"></text></g><g><title>SequenceLocks (1 samples, 0.02%)</title><rect x="39.3022%" y="1269" width="0.0185%" height="15" fill="rgb(207,72,44)" fg:x="2129" fg:w="1"/><text x="39.5522%" y="1279.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="39.3022%" y="1253" width="0.0185%" height="15" fill="rgb(215,193,12)" fg:x="2129" fg:w="1"/><text x="39.5522%" y="1263.50"></text></g><g><title>SipHashUint256Extra (14 samples, 0.26%)</title><rect x="39.3207%" y="1269" width="0.2584%" height="15" fill="rgb(248,41,39)" fg:x="2130" fg:w="14"/><text x="39.5707%" y="1279.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.13%)</title><rect x="39.4499%" y="1253" width="0.1292%" height="15" fill="rgb(253,85,4)" fg:x="2137" fg:w="7"/><text x="39.6999%" y="1263.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.13%)</title><rect x="39.4499%" y="1237" width="0.1292%" height="15" fill="rgb(243,70,31)" fg:x="2137" fg:w="7"/><text x="39.6999%" y="1247.50"></text></g><g><title>TxValidationState::~TxValidationState (1 samples, 0.02%)</title><rect x="39.5791%" y="1269" width="0.0185%" height="15" fill="rgb(253,195,26)" fg:x="2144" fg:w="1"/><text x="39.8291%" y="1279.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::~ValidationState (1 samples, 0.02%)</title><rect x="39.5791%" y="1253" width="0.0185%" height="15" fill="rgb(243,42,11)" fg:x="2144" fg:w="1"/><text x="39.8291%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="39.5791%" y="1237" width="0.0185%" height="15" fill="rgb(239,66,17)" fg:x="2144" fg:w="1"/><text x="39.8291%" y="1247.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="39.5791%" y="1221" width="0.0185%" height="15" fill="rgb(217,132,21)" fg:x="2144" fg:w="1"/><text x="39.8291%" y="1231.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.04%)</title><rect x="39.6160%" y="1253" width="0.0369%" height="15" fill="rgb(252,202,21)" fg:x="2146" fg:w="2"/><text x="39.8660%" y="1263.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="39.6714%" y="1237" width="0.0185%" height="15" fill="rgb(233,98,36)" fg:x="2149" fg:w="1"/><text x="39.9214%" y="1247.50"></text></g><g><title>TxValidationState::TxValidationState (1 samples, 0.02%)</title><rect x="39.6714%" y="1221" width="0.0185%" height="15" fill="rgb(216,153,54)" fg:x="2149" fg:w="1"/><text x="39.9214%" y="1231.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::ValidationState (1 samples, 0.02%)</title><rect x="39.6714%" y="1205" width="0.0185%" height="15" fill="rgb(250,99,7)" fg:x="2149" fg:w="1"/><text x="39.9214%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="39.6714%" y="1189" width="0.0185%" height="15" fill="rgb(207,56,50)" fg:x="2149" fg:w="1"/><text x="39.9214%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%)</title><rect x="39.6714%" y="1173" width="0.0185%" height="15" fill="rgb(244,61,34)" fg:x="2149" fg:w="1"/><text x="39.9214%" y="1183.50"></text></g><g><title>Coin::Clear (1 samples, 0.02%)</title><rect x="39.6899%" y="1237" width="0.0185%" height="15" fill="rgb(241,50,38)" fg:x="2150" fg:w="1"/><text x="39.9399%" y="1247.50"></text></g><g><title>CCoinsViewCache::SpendCoin (1 samples, 0.02%)</title><rect x="39.7083%" y="1205" width="0.0185%" height="15" fill="rgb(212,166,30)" fg:x="2151" fg:w="1"/><text x="39.9583%" y="1215.50"></text></g><g><title>CCoinsViewCache::SpendCoin (6 samples, 0.11%)</title><rect x="39.6529%" y="1253" width="0.1108%" height="15" fill="rgb(249,127,32)" fg:x="2148" fg:w="6"/><text x="39.9029%" y="1263.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (3 samples, 0.06%)</title><rect x="39.7083%" y="1237" width="0.0554%" height="15" fill="rgb(209,103,0)" fg:x="2151" fg:w="3"/><text x="39.9583%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (3 samples, 0.06%)</title><rect x="39.7083%" y="1221" width="0.0554%" height="15" fill="rgb(238,209,51)" fg:x="2151" fg:w="3"/><text x="39.9583%" y="1231.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="39.7268%" y="1205" width="0.0369%" height="15" fill="rgb(237,56,23)" fg:x="2152" fg:w="2"/><text x="39.9768%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.7452%" y="1189" width="0.0185%" height="15" fill="rgb(215,153,46)" fg:x="2153" fg:w="1"/><text x="39.9952%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.7452%" y="1173" width="0.0185%" height="15" fill="rgb(224,49,31)" fg:x="2153" fg:w="1"/><text x="39.9952%" y="1183.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.13%)</title><rect x="39.7637%" y="1253" width="0.1292%" height="15" fill="rgb(250,18,42)" fg:x="2154" fg:w="7"/><text x="40.0137%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="39.8560%" y="1237" width="0.0369%" height="15" fill="rgb(215,176,39)" fg:x="2159" fg:w="2"/><text x="40.1060%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="39.8560%" y="1221" width="0.0369%" height="15" fill="rgb(223,77,29)" fg:x="2159" fg:w="2"/><text x="40.1060%" y="1231.50"></text></g><g><title>Coin&amp; std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="39.8929%" y="1237" width="0.0185%" height="15" fill="rgb(234,94,52)" fg:x="2161" fg:w="1"/><text x="40.1429%" y="1247.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::construct&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="39.8929%" y="1221" width="0.0185%" height="15" fill="rgb(220,154,50)" fg:x="2161" fg:w="1"/><text x="40.1429%" y="1231.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="39.8929%" y="1205" width="0.0185%" height="15" fill="rgb(212,11,10)" fg:x="2161" fg:w="1"/><text x="40.1429%" y="1215.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="39.8929%" y="1189" width="0.0185%" height="15" fill="rgb(205,166,19)" fg:x="2161" fg:w="1"/><text x="40.1429%" y="1199.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="39.8929%" y="1173" width="0.0185%" height="15" fill="rgb(244,198,16)" fg:x="2161" fg:w="1"/><text x="40.1429%" y="1183.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="39.8929%" y="1157" width="0.0185%" height="15" fill="rgb(219,69,12)" fg:x="2161" fg:w="1"/><text x="40.1429%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="39.8929%" y="1141" width="0.0185%" height="15" fill="rgb(245,30,7)" fg:x="2161" fg:w="1"/><text x="40.1429%" y="1151.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_S_relocate (1 samples, 0.02%)</title><rect x="39.9299%" y="1221" width="0.0185%" height="15" fill="rgb(218,221,48)" fg:x="2163" fg:w="1"/><text x="40.1799%" y="1231.50"></text></g><g><title>Coin* std::__relocate_a&lt;Coin*, Coin*, std::allocator&lt;Coin&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9299%" y="1205" width="0.0185%" height="15" fill="rgb(216,66,15)" fg:x="2163" fg:w="1"/><text x="40.1799%" y="1215.50"></text></g><g><title>Coin* std::__relocate_a_1&lt;Coin*, Coin*, std::allocator&lt;Coin&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9299%" y="1189" width="0.0185%" height="15" fill="rgb(226,122,50)" fg:x="2163" fg:w="1"/><text x="40.1799%" y="1199.50"></text></g><g><title>UpdateCoins (4 samples, 0.07%)</title><rect x="39.8929%" y="1253" width="0.0738%" height="15" fill="rgb(239,156,16)" fg:x="2161" fg:w="4"/><text x="40.1429%" y="1263.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (3 samples, 0.06%)</title><rect x="39.9114%" y="1237" width="0.0554%" height="15" fill="rgb(224,27,38)" fg:x="2162" fg:w="3"/><text x="40.1614%" y="1247.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::size (1 samples, 0.02%)</title><rect x="39.9483%" y="1221" width="0.0185%" height="15" fill="rgb(224,39,27)" fg:x="2164" fg:w="1"/><text x="40.1983%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="39.9668%" y="1253" width="0.0185%" height="15" fill="rgb(215,92,29)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1263.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="39.9668%" y="1237" width="0.0185%" height="15" fill="rgb(207,159,16)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1247.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9668%" y="1221" width="0.0185%" height="15" fill="rgb(238,163,47)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1231.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9668%" y="1205" width="0.0185%" height="15" fill="rgb(219,91,49)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9668%" y="1189" width="0.0185%" height="15" fill="rgb(227,167,31)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1199.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9668%" y="1173" width="0.0185%" height="15" fill="rgb(234,80,54)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1183.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.02%)</title><rect x="39.9668%" y="1157" width="0.0185%" height="15" fill="rgb(212,114,2)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1167.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.02%)</title><rect x="39.9668%" y="1141" width="0.0185%" height="15" fill="rgb(234,50,24)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1151.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="39.9668%" y="1125" width="0.0185%" height="15" fill="rgb(221,68,8)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1135.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="39.9668%" y="1109" width="0.0185%" height="15" fill="rgb(254,180,31)" fg:x="2165" fg:w="1"/><text x="40.2168%" y="1119.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="39.9852%" y="1141" width="0.0185%" height="15" fill="rgb(247,130,50)" fg:x="2166" fg:w="1"/><text x="40.2352%" y="1151.50"></text></g><g><title>UpdateCoins (23 samples, 0.42%)</title><rect x="39.5976%" y="1269" width="0.4246%" height="15" fill="rgb(211,109,4)" fg:x="2145" fg:w="23"/><text x="39.8476%" y="1279.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="39.9852%" y="1253" width="0.0369%" height="15" fill="rgb(238,50,21)" fg:x="2166" fg:w="2"/><text x="40.2352%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (2 samples, 0.04%)</title><rect x="39.9852%" y="1237" width="0.0369%" height="15" fill="rgb(225,57,45)" fg:x="2166" fg:w="2"/><text x="40.2352%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (2 samples, 0.04%)</title><rect x="39.9852%" y="1221" width="0.0369%" height="15" fill="rgb(209,196,50)" fg:x="2166" fg:w="2"/><text x="40.2352%" y="1231.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="39.9852%" y="1205" width="0.0369%" height="15" fill="rgb(242,140,13)" fg:x="2166" fg:w="2"/><text x="40.2352%" y="1215.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (2 samples, 0.04%)</title><rect x="39.9852%" y="1189" width="0.0369%" height="15" fill="rgb(217,111,7)" fg:x="2166" fg:w="2"/><text x="40.2352%" y="1199.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (2 samples, 0.04%)</title><rect x="39.9852%" y="1173" width="0.0369%" height="15" fill="rgb(253,193,51)" fg:x="2166" fg:w="2"/><text x="40.2352%" y="1183.50"></text></g><g><title>operator new (2 samples, 0.04%)</title><rect x="39.9852%" y="1157" width="0.0369%" height="15" fill="rgb(252,70,29)" fg:x="2166" fg:w="2"/><text x="40.2352%" y="1167.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="40.0037%" y="1141" width="0.0185%" height="15" fill="rgb(232,127,12)" fg:x="2167" fg:w="1"/><text x="40.2537%" y="1151.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="40.0037%" y="1125" width="0.0185%" height="15" fill="rgb(211,180,21)" fg:x="2167" fg:w="1"/><text x="40.2537%" y="1135.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="40.0406%" y="1237" width="0.0185%" height="15" fill="rgb(229,72,13)" fg:x="2169" fg:w="1"/><text x="40.2906%" y="1247.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="40.0406%" y="1221" width="0.0185%" height="15" fill="rgb(240,211,49)" fg:x="2169" fg:w="1"/><text x="40.2906%" y="1231.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="40.0406%" y="1205" width="0.0185%" height="15" fill="rgb(219,149,40)" fg:x="2169" fg:w="1"/><text x="40.2906%" y="1215.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="40.0406%" y="1189" width="0.0185%" height="15" fill="rgb(210,127,46)" fg:x="2169" fg:w="1"/><text x="40.2906%" y="1199.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="40.0406%" y="1173" width="0.0185%" height="15" fill="rgb(220,106,7)" fg:x="2169" fg:w="1"/><text x="40.2906%" y="1183.50"></text></g><g><title>AutoFile::write (3 samples, 0.06%)</title><rect x="40.0222%" y="1253" width="0.0554%" height="15" fill="rgb(249,31,22)" fg:x="2168" fg:w="3"/><text x="40.2722%" y="1263.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="40.0591%" y="1237" width="0.0185%" height="15" fill="rgb(253,1,49)" fg:x="2170" fg:w="1"/><text x="40.3091%" y="1247.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="40.0775%" y="1253" width="0.0738%" height="15" fill="rgb(227,144,33)" fg:x="2171" fg:w="4"/><text x="40.3275%" y="1263.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="40.1329%" y="1237" width="0.0185%" height="15" fill="rgb(249,163,44)" fg:x="2174" fg:w="1"/><text x="40.3829%" y="1247.50"></text></g><g><title>CompressScript (2 samples, 0.04%)</title><rect x="40.1514%" y="1253" width="0.0369%" height="15" fill="rgb(234,15,39)" fg:x="2175" fg:w="2"/><text x="40.4014%" y="1263.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="40.1698%" y="1237" width="0.0185%" height="15" fill="rgb(207,66,16)" fg:x="2176" fg:w="1"/><text x="40.4198%" y="1247.50"></text></g><g><title>node::BlockManager::FindUndoPos (1 samples, 0.02%)</title><rect x="40.1883%" y="1253" width="0.0185%" height="15" fill="rgb(233,112,24)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1263.50"></text></g><g><title>FlatFileSeq::Allocate (1 samples, 0.02%)</title><rect x="40.1883%" y="1237" width="0.0185%" height="15" fill="rgb(230,90,22)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1247.50"></text></g><g><title>AllocateFileRange (1 samples, 0.02%)</title><rect x="40.1883%" y="1221" width="0.0185%" height="15" fill="rgb(229,61,13)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1231.50"></text></g><g><title>posix_fallocate (1 samples, 0.02%)</title><rect x="40.1883%" y="1205" width="0.0185%" height="15" fill="rgb(225,57,24)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.1883%" y="1189" width="0.0185%" height="15" fill="rgb(208,169,48)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.1883%" y="1173" width="0.0185%" height="15" fill="rgb(244,218,51)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.1883%" y="1157" width="0.0185%" height="15" fill="rgb(214,148,10)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.1883%" y="1141" width="0.0185%" height="15" fill="rgb(225,174,27)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1151.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="40.1883%" y="1125" width="0.0185%" height="15" fill="rgb(230,96,26)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="40.1883%" y="1109" width="0.0185%" height="15" fill="rgb(232,10,30)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="40.1883%" y="1093" width="0.0185%" height="15" fill="rgb(222,8,50)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="40.1883%" y="1077" width="0.0185%" height="15" fill="rgb(213,81,27)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="40.1883%" y="1061" width="0.0185%" height="15" fill="rgb(245,50,10)" fg:x="2177" fg:w="1"/><text x="40.4383%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2068%" y="885" width="0.0369%" height="15" fill="rgb(216,100,18)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="895.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (2 samples, 0.04%)</title><rect x="40.2068%" y="869" width="0.0369%" height="15" fill="rgb(236,147,54)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="879.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (2 samples, 0.04%)</title><rect x="40.2068%" y="853" width="0.0369%" height="15" fill="rgb(205,143,26)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="863.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="40.2068%" y="837" width="0.0369%" height="15" fill="rgb(236,26,9)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2068%" y="821" width="0.0369%" height="15" fill="rgb(221,165,53)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="831.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2068%" y="805" width="0.0369%" height="15" fill="rgb(214,110,17)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="815.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2068%" y="789" width="0.0369%" height="15" fill="rgb(237,197,12)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="799.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (2 samples, 0.04%)</title><rect x="40.2068%" y="773" width="0.0369%" height="15" fill="rgb(205,84,17)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="783.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (2 samples, 0.04%)</title><rect x="40.2068%" y="757" width="0.0369%" height="15" fill="rgb(237,18,45)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="767.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="40.2068%" y="741" width="0.0369%" height="15" fill="rgb(221,87,14)" fg:x="2178" fg:w="2"/><text x="40.4568%" y="751.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (3 samples, 0.06%)</title><rect x="40.2068%" y="1237" width="0.0554%" height="15" fill="rgb(238,186,15)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1247.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1221" width="0.0554%" height="15" fill="rgb(208,115,11)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1231.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1205" width="0.0554%" height="15" fill="rgb(254,175,0)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1215.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1189" width="0.0554%" height="15" fill="rgb(227,24,42)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1199.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1173" width="0.0554%" height="15" fill="rgb(223,211,37)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1157" width="0.0554%" height="15" fill="rgb(235,49,27)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1167.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1141" width="0.0554%" height="15" fill="rgb(254,97,51)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1151.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1125" width="0.0554%" height="15" fill="rgb(249,51,40)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1109" width="0.0554%" height="15" fill="rgb(210,128,45)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1093" width="0.0554%" height="15" fill="rgb(224,137,50)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1077" width="0.0554%" height="15" fill="rgb(242,15,9)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1061" width="0.0554%" height="15" fill="rgb(233,187,41)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1045" width="0.0554%" height="15" fill="rgb(227,2,29)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1055.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1029" width="0.0554%" height="15" fill="rgb(222,70,3)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1039.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="1013" width="0.0554%" height="15" fill="rgb(213,11,42)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1023.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="997" width="0.0554%" height="15" fill="rgb(225,150,9)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="981" width="0.0554%" height="15" fill="rgb(230,162,45)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="991.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="965" width="0.0554%" height="15" fill="rgb(222,14,52)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="975.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="949" width="0.0554%" height="15" fill="rgb(254,198,14)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="933" width="0.0554%" height="15" fill="rgb(220,217,30)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="943.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="917" width="0.0554%" height="15" fill="rgb(215,146,41)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="927.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="40.2068%" y="901" width="0.0554%" height="15" fill="rgb(217,27,36)" fg:x="2178" fg:w="3"/><text x="40.4568%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.2437%" y="885" width="0.0185%" height="15" fill="rgb(219,218,39)" fg:x="2180" fg:w="1"/><text x="40.4937%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="40.2437%" y="869" width="0.0185%" height="15" fill="rgb(219,4,42)" fg:x="2180" fg:w="1"/><text x="40.4937%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (1 samples, 0.02%)</title><rect x="40.2437%" y="853" width="0.0185%" height="15" fill="rgb(249,119,36)" fg:x="2180" fg:w="1"/><text x="40.4937%" y="863.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="40.2437%" y="837" width="0.0185%" height="15" fill="rgb(209,23,33)" fg:x="2180" fg:w="1"/><text x="40.4937%" y="847.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="40.2621%" y="741" width="0.0185%" height="15" fill="rgb(211,10,0)" fg:x="2181" fg:w="1"/><text x="40.5121%" y="751.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="40.3360%" y="613" width="0.0185%" height="15" fill="rgb(208,99,37)" fg:x="2185" fg:w="1"/><text x="40.5860%" y="623.50"></text></g><g><title>CSHA256::Write (5 samples, 0.09%)</title><rect x="40.2806%" y="629" width="0.0923%" height="15" fill="rgb(213,132,31)" fg:x="2182" fg:w="5"/><text x="40.5306%" y="639.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="40.3544%" y="613" width="0.0185%" height="15" fill="rgb(243,129,40)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="623.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="40.3544%" y="597" width="0.0185%" height="15" fill="rgb(210,66,33)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="581" width="0.0185%" height="15" fill="rgb(209,189,4)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="591.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="565" width="0.0185%" height="15" fill="rgb(214,107,37)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="575.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="549" width="0.0185%" height="15" fill="rgb(245,88,54)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="559.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="533" width="0.0185%" height="15" fill="rgb(205,146,20)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="517" width="0.0185%" height="15" fill="rgb(220,161,25)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="527.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="501" width="0.0185%" height="15" fill="rgb(215,152,15)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="485" width="0.0185%" height="15" fill="rgb(233,192,44)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="469" width="0.0185%" height="15" fill="rgb(240,170,46)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="453" width="0.0185%" height="15" fill="rgb(207,104,33)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="437" width="0.0185%" height="15" fill="rgb(219,21,39)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="421" width="0.0185%" height="15" fill="rgb(214,133,29)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="405" width="0.0185%" height="15" fill="rgb(226,93,6)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="415.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="389" width="0.0185%" height="15" fill="rgb(252,222,34)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="399.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="373" width="0.0185%" height="15" fill="rgb(252,92,48)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="383.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="357" width="0.0185%" height="15" fill="rgb(245,223,24)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="341" width="0.0185%" height="15" fill="rgb(205,176,3)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="351.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="325" width="0.0185%" height="15" fill="rgb(235,151,15)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="309" width="0.0185%" height="15" fill="rgb(237,209,11)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="319.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="293" width="0.0185%" height="15" fill="rgb(243,227,24)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="303.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="277" width="0.0185%" height="15" fill="rgb(239,193,16)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="287.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="261" width="0.0185%" height="15" fill="rgb(231,27,9)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="271.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="245" width="0.0185%" height="15" fill="rgb(219,169,10)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="255.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="229" width="0.0185%" height="15" fill="rgb(244,229,43)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="239.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="213" width="0.0185%" height="15" fill="rgb(254,38,20)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="223.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="197" width="0.0185%" height="15" fill="rgb(250,47,30)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="207.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="181" width="0.0185%" height="15" fill="rgb(224,124,36)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="191.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="165" width="0.0185%" height="15" fill="rgb(246,68,51)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="175.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="149" width="0.0185%" height="15" fill="rgb(253,43,49)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="159.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="133" width="0.0185%" height="15" fill="rgb(219,54,36)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="143.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="117" width="0.0185%" height="15" fill="rgb(227,133,34)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="127.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="40.3544%" y="101" width="0.0185%" height="15" fill="rgb(247,227,15)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="111.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="85" width="0.0185%" height="15" fill="rgb(229,96,14)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="95.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="69" width="0.0185%" height="15" fill="rgb(220,79,17)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="79.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="53" width="0.0185%" height="15" fill="rgb(205,131,53)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="63.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="40.3544%" y="37" width="0.0185%" height="15" fill="rgb(209,50,29)" fg:x="2186" fg:w="1"/><text x="40.6044%" y="47.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="40.3729%" y="629" width="0.0185%" height="15" fill="rgb(245,86,46)" fg:x="2187" fg:w="1"/><text x="40.6229%" y="639.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="40.3914%" y="629" width="0.0185%" height="15" fill="rgb(235,66,46)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="639.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="40.3914%" y="613" width="0.0185%" height="15" fill="rgb(232,148,31)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="623.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="597" width="0.0185%" height="15" fill="rgb(217,149,8)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="607.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="581" width="0.0185%" height="15" fill="rgb(209,183,11)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="591.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="565" width="0.0185%" height="15" fill="rgb(208,55,20)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="575.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="549" width="0.0185%" height="15" fill="rgb(218,39,14)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="559.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="533" width="0.0185%" height="15" fill="rgb(216,169,33)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="543.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="517" width="0.0185%" height="15" fill="rgb(233,80,24)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="527.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="501" width="0.0185%" height="15" fill="rgb(213,179,31)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="485" width="0.0185%" height="15" fill="rgb(209,19,5)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="495.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="469" width="0.0185%" height="15" fill="rgb(219,18,35)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="479.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="453" width="0.0185%" height="15" fill="rgb(209,169,16)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="463.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="437" width="0.0185%" height="15" fill="rgb(245,90,51)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="447.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="421" width="0.0185%" height="15" fill="rgb(220,99,45)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="431.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="405" width="0.0185%" height="15" fill="rgb(249,89,25)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="415.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="389" width="0.0185%" height="15" fill="rgb(239,193,0)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="399.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="373" width="0.0185%" height="15" fill="rgb(231,126,1)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="383.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="357" width="0.0185%" height="15" fill="rgb(243,166,3)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="367.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="341" width="0.0185%" height="15" fill="rgb(223,22,34)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="351.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="325" width="0.0185%" height="15" fill="rgb(251,52,51)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="335.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="309" width="0.0185%" height="15" fill="rgb(221,165,28)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="319.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="293" width="0.0185%" height="15" fill="rgb(218,121,47)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="303.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="277" width="0.0185%" height="15" fill="rgb(209,120,9)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="287.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="261" width="0.0185%" height="15" fill="rgb(236,68,12)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="271.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="245" width="0.0185%" height="15" fill="rgb(225,194,26)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="255.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="229" width="0.0185%" height="15" fill="rgb(231,84,39)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="239.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="213" width="0.0185%" height="15" fill="rgb(210,11,45)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="223.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="197" width="0.0185%" height="15" fill="rgb(224,54,52)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="207.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="181" width="0.0185%" height="15" fill="rgb(238,102,14)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="191.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="165" width="0.0185%" height="15" fill="rgb(243,160,52)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="175.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="149" width="0.0185%" height="15" fill="rgb(216,114,19)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="159.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="133" width="0.0185%" height="15" fill="rgb(244,166,37)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="143.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="40.3914%" y="117" width="0.0185%" height="15" fill="rgb(246,29,44)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="127.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="101" width="0.0185%" height="15" fill="rgb(215,56,53)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="111.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="85" width="0.0185%" height="15" fill="rgb(217,60,2)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="95.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="69" width="0.0185%" height="15" fill="rgb(207,26,24)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="79.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="40.3914%" y="53" width="0.0185%" height="15" fill="rgb(252,210,15)" fg:x="2188" fg:w="1"/><text x="40.6414%" y="63.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (9 samples, 0.17%)</title><rect x="40.2621%" y="789" width="0.1661%" height="15" fill="rgb(253,209,26)" fg:x="2181" fg:w="9"/><text x="40.5121%" y="799.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (9 samples, 0.17%)</title><rect x="40.2621%" y="773" width="0.1661%" height="15" fill="rgb(238,170,14)" fg:x="2181" fg:w="9"/><text x="40.5121%" y="783.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (9 samples, 0.17%)</title><rect x="40.2621%" y="757" width="0.1661%" height="15" fill="rgb(216,178,15)" fg:x="2181" fg:w="9"/><text x="40.5121%" y="767.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (8 samples, 0.15%)</title><rect x="40.2806%" y="741" width="0.1477%" height="15" fill="rgb(250,197,2)" fg:x="2182" fg:w="8"/><text x="40.5306%" y="751.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (8 samples, 0.15%)</title><rect x="40.2806%" y="725" width="0.1477%" height="15" fill="rgb(212,70,42)" fg:x="2182" fg:w="8"/><text x="40.5306%" y="735.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.15%)</title><rect x="40.2806%" y="709" width="0.1477%" height="15" fill="rgb(227,213,9)" fg:x="2182" fg:w="8"/><text x="40.5306%" y="719.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (8 samples, 0.15%)</title><rect x="40.2806%" y="693" width="0.1477%" height="15" fill="rgb(245,99,25)" fg:x="2182" fg:w="8"/><text x="40.5306%" y="703.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (8 samples, 0.15%)</title><rect x="40.2806%" y="677" width="0.1477%" height="15" fill="rgb(250,82,29)" fg:x="2182" fg:w="8"/><text x="40.5306%" y="687.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (8 samples, 0.15%)</title><rect x="40.2806%" y="661" width="0.1477%" height="15" fill="rgb(241,226,54)" fg:x="2182" fg:w="8"/><text x="40.5306%" y="671.50"></text></g><g><title>HashWriter::write (8 samples, 0.15%)</title><rect x="40.2806%" y="645" width="0.1477%" height="15" fill="rgb(221,99,41)" fg:x="2182" fg:w="8"/><text x="40.5306%" y="655.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="40.4098%" y="629" width="0.0185%" height="15" fill="rgb(213,90,21)" fg:x="2189" fg:w="1"/><text x="40.6598%" y="639.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.4098%" y="613" width="0.0185%" height="15" fill="rgb(205,208,24)" fg:x="2189" fg:w="1"/><text x="40.6598%" y="623.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="40.4098%" y="597" width="0.0185%" height="15" fill="rgb(246,31,12)" fg:x="2189" fg:w="1"/><text x="40.6598%" y="607.50"></text></g><g><title>CompressAmount (2 samples, 0.04%)</title><rect x="40.4283%" y="741" width="0.0369%" height="15" fill="rgb(213,154,6)" fg:x="2190" fg:w="2"/><text x="40.6783%" y="751.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="40.4652%" y="725" width="0.0369%" height="15" fill="rgb(222,163,29)" fg:x="2192" fg:w="2"/><text x="40.7152%" y="735.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="40.4837%" y="709" width="0.0185%" height="15" fill="rgb(227,201,8)" fg:x="2193" fg:w="1"/><text x="40.7337%" y="719.50"></text></g><g><title>CompressScript (3 samples, 0.06%)</title><rect x="40.4652%" y="741" width="0.0554%" height="15" fill="rgb(233,9,32)" fg:x="2192" fg:w="3"/><text x="40.7152%" y="751.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="40.5021%" y="725" width="0.0185%" height="15" fill="rgb(217,54,24)" fg:x="2194" fg:w="1"/><text x="40.7521%" y="735.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="40.5206%" y="693" width="0.0738%" height="15" fill="rgb(235,192,0)" fg:x="2195" fg:w="4"/><text x="40.7706%" y="703.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="40.5575%" y="677" width="0.0369%" height="15" fill="rgb(235,45,9)" fg:x="2197" fg:w="2"/><text x="40.8075%" y="687.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="40.5760%" y="661" width="0.0185%" height="15" fill="rgb(246,42,40)" fg:x="2198" fg:w="1"/><text x="40.8260%" y="671.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (5 samples, 0.09%)</title><rect x="40.5206%" y="741" width="0.0923%" height="15" fill="rgb(248,111,24)" fg:x="2195" fg:w="5"/><text x="40.7706%" y="751.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (5 samples, 0.09%)</title><rect x="40.5206%" y="725" width="0.0923%" height="15" fill="rgb(249,65,22)" fg:x="2195" fg:w="5"/><text x="40.7706%" y="735.50"></text></g><g><title>HashWriter::write (5 samples, 0.09%)</title><rect x="40.5206%" y="709" width="0.0923%" height="15" fill="rgb(238,111,51)" fg:x="2195" fg:w="5"/><text x="40.7706%" y="719.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="40.5944%" y="693" width="0.0185%" height="15" fill="rgb(250,118,22)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="703.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="40.5944%" y="677" width="0.0185%" height="15" fill="rgb(234,84,26)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="687.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="661" width="0.0185%" height="15" fill="rgb(243,172,12)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="671.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="645" width="0.0185%" height="15" fill="rgb(236,150,49)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="655.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="629" width="0.0185%" height="15" fill="rgb(225,197,26)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="639.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="613" width="0.0185%" height="15" fill="rgb(214,17,42)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="597" width="0.0185%" height="15" fill="rgb(224,165,40)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="607.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="581" width="0.0185%" height="15" fill="rgb(246,100,4)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="591.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="565" width="0.0185%" height="15" fill="rgb(222,103,0)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="575.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="549" width="0.0185%" height="15" fill="rgb(227,189,26)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="559.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="533" width="0.0185%" height="15" fill="rgb(214,202,17)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="543.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="517" width="0.0185%" height="15" fill="rgb(229,111,3)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="527.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="501" width="0.0185%" height="15" fill="rgb(229,172,15)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="485" width="0.0185%" height="15" fill="rgb(230,224,35)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="495.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="469" width="0.0185%" height="15" fill="rgb(251,141,6)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="479.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="453" width="0.0185%" height="15" fill="rgb(225,208,6)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="463.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="437" width="0.0185%" height="15" fill="rgb(246,181,16)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="447.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="421" width="0.0185%" height="15" fill="rgb(227,129,36)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="431.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="405" width="0.0185%" height="15" fill="rgb(248,117,24)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="415.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="389" width="0.0185%" height="15" fill="rgb(214,185,35)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="399.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="373" width="0.0185%" height="15" fill="rgb(236,150,34)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="383.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="357" width="0.0185%" height="15" fill="rgb(243,228,27)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="367.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="341" width="0.0185%" height="15" fill="rgb(245,77,44)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="351.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="325" width="0.0185%" height="15" fill="rgb(235,214,42)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="335.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="309" width="0.0185%" height="15" fill="rgb(221,74,3)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="319.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="293" width="0.0185%" height="15" fill="rgb(206,121,29)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="303.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="277" width="0.0185%" height="15" fill="rgb(249,131,53)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="287.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="261" width="0.0185%" height="15" fill="rgb(236,170,29)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="271.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="245" width="0.0185%" height="15" fill="rgb(247,96,15)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="255.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="229" width="0.0185%" height="15" fill="rgb(211,210,7)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="239.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="213" width="0.0185%" height="15" fill="rgb(240,88,50)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="223.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="197" width="0.0185%" height="15" fill="rgb(209,229,26)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="207.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="40.5944%" y="181" width="0.0185%" height="15" fill="rgb(210,68,23)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="191.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="165" width="0.0185%" height="15" fill="rgb(229,180,13)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="175.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="149" width="0.0185%" height="15" fill="rgb(236,53,44)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="159.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="133" width="0.0185%" height="15" fill="rgb(244,214,29)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="143.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="40.5944%" y="117" width="0.0185%" height="15" fill="rgb(220,75,29)" fg:x="2199" fg:w="1"/><text x="40.8444%" y="127.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (1 samples, 0.02%)</title><rect x="40.6129%" y="741" width="0.0185%" height="15" fill="rgb(214,183,37)" fg:x="2200" fg:w="1"/><text x="40.8629%" y="751.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char&gt; (1 samples, 0.02%)</title><rect x="40.6129%" y="725" width="0.0185%" height="15" fill="rgb(239,117,29)" fg:x="2200" fg:w="1"/><text x="40.8629%" y="735.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="40.6129%" y="709" width="0.0185%" height="15" fill="rgb(237,171,35)" fg:x="2200" fg:w="1"/><text x="40.8629%" y="719.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="40.6129%" y="693" width="0.0185%" height="15" fill="rgb(229,178,53)" fg:x="2200" fg:w="1"/><text x="40.8629%" y="703.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="40.6129%" y="677" width="0.0185%" height="15" fill="rgb(210,102,19)" fg:x="2200" fg:w="1"/><text x="40.8629%" y="687.50"></text></g><g><title>Span&lt;unsigned char&gt;::Span&lt;prevector&lt;33u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="40.6313%" y="741" width="0.0185%" height="15" fill="rgb(235,127,22)" fg:x="2201" fg:w="1"/><text x="40.8813%" y="751.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::data (1 samples, 0.02%)</title><rect x="40.6313%" y="725" width="0.0185%" height="15" fill="rgb(244,31,31)" fg:x="2201" fg:w="1"/><text x="40.8813%" y="735.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="40.6313%" y="709" width="0.0185%" height="15" fill="rgb(231,43,21)" fg:x="2201" fg:w="1"/><text x="40.8813%" y="719.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (22 samples, 0.41%)</title><rect x="40.2621%" y="885" width="0.4061%" height="15" fill="rgb(217,131,35)" fg:x="2181" fg:w="22"/><text x="40.5121%" y="895.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (22 samples, 0.41%)</title><rect x="40.2621%" y="869" width="0.4061%" height="15" fill="rgb(221,149,4)" fg:x="2181" fg:w="22"/><text x="40.5121%" y="879.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (22 samples, 0.41%)</title><rect x="40.2621%" y="853" width="0.4061%" height="15" fill="rgb(232,170,28)" fg:x="2181" fg:w="22"/><text x="40.5121%" y="863.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (22 samples, 0.41%)</title><rect x="40.2621%" y="837" width="0.4061%" height="15" fill="rgb(238,56,10)" fg:x="2181" fg:w="22"/><text x="40.5121%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (22 samples, 0.41%)</title><rect x="40.2621%" y="821" width="0.4061%" height="15" fill="rgb(235,196,14)" fg:x="2181" fg:w="22"/><text x="40.5121%" y="831.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (22 samples, 0.41%)</title><rect x="40.2621%" y="805" width="0.4061%" height="15" fill="rgb(216,45,48)" fg:x="2181" fg:w="22"/><text x="40.5121%" y="815.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (13 samples, 0.24%)</title><rect x="40.4283%" y="789" width="0.2400%" height="15" fill="rgb(238,213,17)" fg:x="2190" fg:w="13"/><text x="40.6783%" y="799.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (13 samples, 0.24%)</title><rect x="40.4283%" y="773" width="0.2400%" height="15" fill="rgb(212,13,2)" fg:x="2190" fg:w="13"/><text x="40.6783%" y="783.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (13 samples, 0.24%)</title><rect x="40.4283%" y="757" width="0.2400%" height="15" fill="rgb(240,114,20)" fg:x="2190" fg:w="13"/><text x="40.6783%" y="767.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="40.6498%" y="741" width="0.0185%" height="15" fill="rgb(228,41,40)" fg:x="2202" fg:w="1"/><text x="40.8998%" y="751.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="40.6498%" y="725" width="0.0185%" height="15" fill="rgb(244,132,35)" fg:x="2202" fg:w="1"/><text x="40.8998%" y="735.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="40.6498%" y="709" width="0.0185%" height="15" fill="rgb(253,189,4)" fg:x="2202" fg:w="1"/><text x="40.8998%" y="719.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="40.6683%" y="805" width="0.0185%" height="15" fill="rgb(224,37,19)" fg:x="2203" fg:w="1"/><text x="40.9183%" y="815.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="40.6683%" y="789" width="0.0185%" height="15" fill="rgb(235,223,18)" fg:x="2203" fg:w="1"/><text x="40.9183%" y="799.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="40.6683%" y="837" width="0.0369%" height="15" fill="rgb(235,163,25)" fg:x="2203" fg:w="2"/><text x="40.9183%" y="847.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="40.6683%" y="821" width="0.0369%" height="15" fill="rgb(217,145,28)" fg:x="2203" fg:w="2"/><text x="40.9183%" y="831.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="40.6867%" y="805" width="0.0185%" height="15" fill="rgb(223,223,32)" fg:x="2204" fg:w="1"/><text x="40.9367%" y="815.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="40.6867%" y="789" width="0.0185%" height="15" fill="rgb(227,189,39)" fg:x="2204" fg:w="1"/><text x="40.9367%" y="799.50"></text></g><g><title>CSHA256::Write (3 samples, 0.06%)</title><rect x="40.7052%" y="789" width="0.0554%" height="15" fill="rgb(248,10,22)" fg:x="2205" fg:w="3"/><text x="40.9552%" y="799.50"></text></g><g><title>memcpy (2 samples, 0.04%)</title><rect x="40.7236%" y="773" width="0.0369%" height="15" fill="rgb(248,46,39)" fg:x="2206" fg:w="2"/><text x="40.9736%" y="783.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="40.7421%" y="757" width="0.0185%" height="15" fill="rgb(248,113,48)" fg:x="2207" fg:w="1"/><text x="40.9921%" y="767.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="40.7606%" y="789" width="0.0185%" height="15" fill="rgb(245,16,25)" fg:x="2208" fg:w="1"/><text x="41.0106%" y="799.50"></text></g><g><title>IsToKeyID (1 samples, 0.02%)</title><rect x="40.7606%" y="773" width="0.0185%" height="15" fill="rgb(249,152,16)" fg:x="2208" fg:w="1"/><text x="41.0106%" y="783.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.06%)</title><rect x="40.7790%" y="757" width="0.0554%" height="15" fill="rgb(250,16,1)" fg:x="2209" fg:w="3"/><text x="41.0290%" y="767.50"></text></g><g><title>QuadRound (4 samples, 0.07%)</title><rect x="40.7790%" y="773" width="0.0738%" height="15" fill="rgb(249,138,3)" fg:x="2209" fg:w="4"/><text x="41.0290%" y="783.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="40.8344%" y="757" width="0.0185%" height="15" fill="rgb(227,71,41)" fg:x="2212" fg:w="1"/><text x="41.0844%" y="767.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="40.8529%" y="757" width="0.0185%" height="15" fill="rgb(209,184,23)" fg:x="2213" fg:w="1"/><text x="41.1029%" y="767.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="40.8529%" y="741" width="0.0185%" height="15" fill="rgb(223,215,31)" fg:x="2213" fg:w="1"/><text x="41.1029%" y="751.50"></text></g><g><title>ShiftMessageB (4 samples, 0.07%)</title><rect x="40.8529%" y="773" width="0.0738%" height="15" fill="rgb(210,146,28)" fg:x="2213" fg:w="4"/><text x="41.1029%" y="783.50"></text></g><g><title>ShiftMessageC (3 samples, 0.06%)</title><rect x="40.8713%" y="757" width="0.0554%" height="15" fill="rgb(209,183,41)" fg:x="2214" fg:w="3"/><text x="41.1213%" y="767.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.06%)</title><rect x="40.8713%" y="741" width="0.0554%" height="15" fill="rgb(209,224,45)" fg:x="2214" fg:w="3"/><text x="41.1213%" y="751.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (15 samples, 0.28%)</title><rect x="40.6683%" y="885" width="0.2769%" height="15" fill="rgb(224,209,51)" fg:x="2203" fg:w="15"/><text x="40.9183%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (15 samples, 0.28%)</title><rect x="40.6683%" y="869" width="0.2769%" height="15" fill="rgb(223,17,39)" fg:x="2203" fg:w="15"/><text x="40.9183%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (15 samples, 0.28%)</title><rect x="40.6683%" y="853" width="0.2769%" height="15" fill="rgb(234,204,37)" fg:x="2203" fg:w="15"/><text x="40.9183%" y="863.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (13 samples, 0.24%)</title><rect x="40.7052%" y="837" width="0.2400%" height="15" fill="rgb(236,120,5)" fg:x="2205" fg:w="13"/><text x="40.9552%" y="847.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (13 samples, 0.24%)</title><rect x="40.7052%" y="821" width="0.2400%" height="15" fill="rgb(248,97,27)" fg:x="2205" fg:w="13"/><text x="40.9552%" y="831.50"></text></g><g><title>HashWriter::write (13 samples, 0.24%)</title><rect x="40.7052%" y="805" width="0.2400%" height="15" fill="rgb(240,66,17)" fg:x="2205" fg:w="13"/><text x="40.9552%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.17%)</title><rect x="40.7790%" y="789" width="0.1661%" height="15" fill="rgb(210,79,3)" fg:x="2209" fg:w="9"/><text x="41.0290%" y="799.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="40.9267%" y="773" width="0.0185%" height="15" fill="rgb(214,176,27)" fg:x="2217" fg:w="1"/><text x="41.1767%" y="783.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="40.9267%" y="757" width="0.0185%" height="15" fill="rgb(235,185,3)" fg:x="2217" fg:w="1"/><text x="41.1767%" y="767.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="40.9452%" y="837" width="0.0185%" height="15" fill="rgb(227,24,12)" fg:x="2218" fg:w="1"/><text x="41.1952%" y="847.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="40.9636%" y="821" width="0.0185%" height="15" fill="rgb(252,169,48)" fg:x="2219" fg:w="1"/><text x="41.2136%" y="831.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="40.9636%" y="805" width="0.0185%" height="15" fill="rgb(212,65,1)" fg:x="2219" fg:w="1"/><text x="41.2136%" y="815.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (41 samples, 0.76%)</title><rect x="40.2621%" y="1237" width="0.7569%" height="15" fill="rgb(242,39,24)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1247.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1221" width="0.7569%" height="15" fill="rgb(249,32,23)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1231.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1205" width="0.7569%" height="15" fill="rgb(251,195,23)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1215.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1189" width="0.7569%" height="15" fill="rgb(236,174,8)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1199.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1173" width="0.7569%" height="15" fill="rgb(220,197,8)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1157" width="0.7569%" height="15" fill="rgb(240,108,37)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1167.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1141" width="0.7569%" height="15" fill="rgb(232,176,24)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1151.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1125" width="0.7569%" height="15" fill="rgb(243,35,29)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1135.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1109" width="0.7569%" height="15" fill="rgb(210,37,18)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1093" width="0.7569%" height="15" fill="rgb(224,184,40)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1077" width="0.7569%" height="15" fill="rgb(236,39,29)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1061" width="0.7569%" height="15" fill="rgb(232,48,39)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1071.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1045" width="0.7569%" height="15" fill="rgb(236,34,42)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1055.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1029" width="0.7569%" height="15" fill="rgb(243,106,37)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1039.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="1013" width="0.7569%" height="15" fill="rgb(218,96,6)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1023.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="997" width="0.7569%" height="15" fill="rgb(235,130,12)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="981" width="0.7569%" height="15" fill="rgb(231,95,0)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="991.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="965" width="0.7569%" height="15" fill="rgb(228,12,23)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="975.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="949" width="0.7569%" height="15" fill="rgb(216,12,1)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="933" width="0.7569%" height="15" fill="rgb(219,59,3)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="943.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="917" width="0.7569%" height="15" fill="rgb(215,208,46)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="927.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (41 samples, 0.76%)</title><rect x="40.2621%" y="901" width="0.7569%" height="15" fill="rgb(254,224,29)" fg:x="2181" fg:w="41"/><text x="40.5121%" y="911.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="40.9452%" y="885" width="0.0738%" height="15" fill="rgb(232,14,29)" fg:x="2218" fg:w="4"/><text x="41.1952%" y="895.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="40.9452%" y="869" width="0.0738%" height="15" fill="rgb(208,45,52)" fg:x="2218" fg:w="4"/><text x="41.1952%" y="879.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="40.9452%" y="853" width="0.0738%" height="15" fill="rgb(234,191,28)" fg:x="2218" fg:w="4"/><text x="41.1952%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.06%)</title><rect x="40.9636%" y="837" width="0.0554%" height="15" fill="rgb(244,67,43)" fg:x="2219" fg:w="3"/><text x="41.2136%" y="847.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="40.9821%" y="821" width="0.0369%" height="15" fill="rgb(236,189,24)" fg:x="2220" fg:w="2"/><text x="41.2321%" y="831.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="40.9821%" y="805" width="0.0369%" height="15" fill="rgb(239,214,33)" fg:x="2220" fg:w="2"/><text x="41.2321%" y="815.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="40.9821%" y="789" width="0.0369%" height="15" fill="rgb(226,176,41)" fg:x="2220" fg:w="2"/><text x="41.2321%" y="799.50"></text></g><g><title>__fopen_internal (2 samples, 0.04%)</title><rect x="41.0190%" y="1205" width="0.0369%" height="15" fill="rgb(248,47,8)" fg:x="2222" fg:w="2"/><text x="41.2690%" y="1215.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="41.0190%" y="1189" width="0.0369%" height="15" fill="rgb(218,81,44)" fg:x="2222" fg:w="2"/><text x="41.2690%" y="1199.50"></text></g><g><title>_IO_file_open (2 samples, 0.04%)</title><rect x="41.0190%" y="1173" width="0.0369%" height="15" fill="rgb(213,98,6)" fg:x="2222" fg:w="2"/><text x="41.2690%" y="1183.50"></text></g><g><title>__GI___libc_open (2 samples, 0.04%)</title><rect x="41.0190%" y="1157" width="0.0369%" height="15" fill="rgb(222,85,22)" fg:x="2222" fg:w="2"/><text x="41.2690%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.0190%" y="1141" width="0.0369%" height="15" fill="rgb(239,46,39)" fg:x="2222" fg:w="2"/><text x="41.2690%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.0190%" y="1125" width="0.0369%" height="15" fill="rgb(237,12,29)" fg:x="2222" fg:w="2"/><text x="41.2690%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.0190%" y="1109" width="0.0369%" height="15" fill="rgb(214,77,8)" fg:x="2222" fg:w="2"/><text x="41.2690%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.0190%" y="1093" width="0.0369%" height="15" fill="rgb(217,168,37)" fg:x="2222" fg:w="2"/><text x="41.2690%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.0190%" y="1077" width="0.0369%" height="15" fill="rgb(221,217,23)" fg:x="2222" fg:w="2"/><text x="41.2690%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0375%" y="1061" width="0.0185%" height="15" fill="rgb(243,229,36)" fg:x="2223" fg:w="1"/><text x="41.2875%" y="1071.50"></text></g><g><title>create_directories (1 samples, 0.02%)</title><rect x="41.0559%" y="1205" width="0.0185%" height="15" fill="rgb(251,163,40)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1215.50"></text></g><g><title>std::filesystem::is_symlink (1 samples, 0.02%)</title><rect x="41.0559%" y="1189" width="0.0185%" height="15" fill="rgb(237,222,12)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1199.50"></text></g><g><title>std::filesystem::symlink_status (1 samples, 0.02%)</title><rect x="41.0559%" y="1173" width="0.0185%" height="15" fill="rgb(248,132,6)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1183.50"></text></g><g><title>std::filesystem::symlink_status (1 samples, 0.02%)</title><rect x="41.0559%" y="1157" width="0.0185%" height="15" fill="rgb(227,167,50)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1167.50"></text></g><g><title>__GI___fstatat64 (1 samples, 0.02%)</title><rect x="41.0559%" y="1141" width="0.0185%" height="15" fill="rgb(242,84,37)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0559%" y="1125" width="0.0185%" height="15" fill="rgb(212,4,50)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0559%" y="1109" width="0.0185%" height="15" fill="rgb(230,228,32)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0559%" y="1093" width="0.0185%" height="15" fill="rgb(248,217,23)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0559%" y="1077" width="0.0185%" height="15" fill="rgb(238,197,32)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0559%" y="1061" width="0.0185%" height="15" fill="rgb(236,106,1)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0559%" y="1045" width="0.0185%" height="15" fill="rgb(219,228,13)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0559%" y="1029" width="0.0185%" height="15" fill="rgb(238,30,35)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0559%" y="1013" width="0.0185%" height="15" fill="rgb(236,70,23)" fg:x="2224" fg:w="1"/><text x="41.3059%" y="1023.50"></text></g><g><title>node::BlockManager::OpenUndoFile (4 samples, 0.07%)</title><rect x="41.0190%" y="1237" width="0.0738%" height="15" fill="rgb(249,104,48)" fg:x="2222" fg:w="4"/><text x="41.2690%" y="1247.50"></text></g><g><title>FlatFileSeq::Open (4 samples, 0.07%)</title><rect x="41.0190%" y="1221" width="0.0738%" height="15" fill="rgb(254,117,50)" fg:x="2222" fg:w="4"/><text x="41.2690%" y="1231.50"></text></g><g><title>fseek (1 samples, 0.02%)</title><rect x="41.0744%" y="1205" width="0.0185%" height="15" fill="rgb(223,152,4)" fg:x="2225" fg:w="1"/><text x="41.3244%" y="1215.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="41.0744%" y="1189" width="0.0185%" height="15" fill="rgb(245,6,2)" fg:x="2225" fg:w="1"/><text x="41.3244%" y="1199.50"></text></g><g><title>_IO_doallocbuf (1 samples, 0.02%)</title><rect x="41.0744%" y="1173" width="0.0185%" height="15" fill="rgb(249,150,24)" fg:x="2225" fg:w="1"/><text x="41.3244%" y="1183.50"></text></g><g><title>_IO_file_doallocate (1 samples, 0.02%)</title><rect x="41.0744%" y="1157" width="0.0185%" height="15" fill="rgb(228,185,42)" fg:x="2225" fg:w="1"/><text x="41.3244%" y="1167.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="41.0929%" y="1061" width="0.0185%" height="15" fill="rgb(226,39,33)" fg:x="2226" fg:w="1"/><text x="41.3429%" y="1071.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="41.1113%" y="1061" width="0.0185%" height="15" fill="rgb(221,166,19)" fg:x="2227" fg:w="1"/><text x="41.3613%" y="1071.50"></text></g><g><title>IsToKeyID (1 samples, 0.02%)</title><rect x="41.1113%" y="1045" width="0.0185%" height="15" fill="rgb(209,109,2)" fg:x="2227" fg:w="1"/><text x="41.3613%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="41.1113%" y="1029" width="0.0185%" height="15" fill="rgb(252,216,26)" fg:x="2227" fg:w="1"/><text x="41.3613%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="41.1113%" y="1013" width="0.0185%" height="15" fill="rgb(227,173,36)" fg:x="2227" fg:w="1"/><text x="41.3613%" y="1023.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.1298%" y="773" width="0.0185%" height="15" fill="rgb(209,90,7)" fg:x="2228" fg:w="1"/><text x="41.3798%" y="783.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.1298%" y="757" width="0.0185%" height="15" fill="rgb(250,194,11)" fg:x="2228" fg:w="1"/><text x="41.3798%" y="767.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (1 samples, 0.02%)</title><rect x="41.1298%" y="741" width="0.0185%" height="15" fill="rgb(220,72,50)" fg:x="2228" fg:w="1"/><text x="41.3798%" y="751.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="41.1298%" y="725" width="0.0185%" height="15" fill="rgb(222,106,48)" fg:x="2228" fg:w="1"/><text x="41.3798%" y="735.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.1298%" y="709" width="0.0185%" height="15" fill="rgb(216,220,45)" fg:x="2228" fg:w="1"/><text x="41.3798%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.1298%" y="693" width="0.0185%" height="15" fill="rgb(234,112,18)" fg:x="2228" fg:w="1"/><text x="41.3798%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (1 samples, 0.02%)</title><rect x="41.1298%" y="677" width="0.0185%" height="15" fill="rgb(206,179,9)" fg:x="2228" fg:w="1"/><text x="41.3798%" y="687.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="41.1298%" y="661" width="0.0185%" height="15" fill="rgb(215,115,40)" fg:x="2228" fg:w="1"/><text x="41.3798%" y="671.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="41.1852%" y="725" width="0.0185%" height="15" fill="rgb(222,69,34)" fg:x="2231" fg:w="1"/><text x="41.4352%" y="735.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="41.1852%" y="709" width="0.0185%" height="15" fill="rgb(209,161,10)" fg:x="2231" fg:w="1"/><text x="41.4352%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="41.1298%" y="869" width="0.0923%" height="15" fill="rgb(217,6,38)" fg:x="2228" fg:w="5"/><text x="41.3798%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (5 samples, 0.09%)</title><rect x="41.1298%" y="853" width="0.0923%" height="15" fill="rgb(229,229,48)" fg:x="2228" fg:w="5"/><text x="41.3798%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (5 samples, 0.09%)</title><rect x="41.1298%" y="837" width="0.0923%" height="15" fill="rgb(225,21,28)" fg:x="2228" fg:w="5"/><text x="41.3798%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (5 samples, 0.09%)</title><rect x="41.1298%" y="821" width="0.0923%" height="15" fill="rgb(206,33,13)" fg:x="2228" fg:w="5"/><text x="41.3798%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="41.1298%" y="805" width="0.0923%" height="15" fill="rgb(242,178,17)" fg:x="2228" fg:w="5"/><text x="41.3798%" y="815.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="41.1298%" y="789" width="0.0923%" height="15" fill="rgb(220,162,5)" fg:x="2228" fg:w="5"/><text x="41.3798%" y="799.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="41.1482%" y="773" width="0.0738%" height="15" fill="rgb(210,33,43)" fg:x="2229" fg:w="4"/><text x="41.3982%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (4 samples, 0.07%)</title><rect x="41.1482%" y="757" width="0.0738%" height="15" fill="rgb(216,116,54)" fg:x="2229" fg:w="4"/><text x="41.3982%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (4 samples, 0.07%)</title><rect x="41.1482%" y="741" width="0.0738%" height="15" fill="rgb(249,92,24)" fg:x="2229" fg:w="4"/><text x="41.3982%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="725" width="0.0185%" height="15" fill="rgb(231,189,14)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="709" width="0.0185%" height="15" fill="rgb(230,8,41)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="693" width="0.0185%" height="15" fill="rgb(249,7,27)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="703.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="677" width="0.0185%" height="15" fill="rgb(232,86,5)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="687.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="661" width="0.0185%" height="15" fill="rgb(224,175,18)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="671.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="645" width="0.0185%" height="15" fill="rgb(220,129,12)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="629" width="0.0185%" height="15" fill="rgb(210,19,36)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="639.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="613" width="0.0185%" height="15" fill="rgb(219,96,14)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="623.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="597" width="0.0185%" height="15" fill="rgb(249,106,1)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="581" width="0.0185%" height="15" fill="rgb(249,155,20)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="591.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="565" width="0.0185%" height="15" fill="rgb(244,168,9)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="575.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="549" width="0.0185%" height="15" fill="rgb(216,23,50)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="559.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="533" width="0.0185%" height="15" fill="rgb(224,219,20)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="543.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="517" width="0.0185%" height="15" fill="rgb(222,156,15)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="527.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="501" width="0.0185%" height="15" fill="rgb(231,97,17)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="511.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="485" width="0.0185%" height="15" fill="rgb(218,70,48)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="495.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="469" width="0.0185%" height="15" fill="rgb(212,196,52)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="479.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="453" width="0.0185%" height="15" fill="rgb(243,203,18)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="463.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="437" width="0.0185%" height="15" fill="rgb(252,125,41)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="447.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="421" width="0.0185%" height="15" fill="rgb(223,180,33)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="431.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="405" width="0.0185%" height="15" fill="rgb(254,159,46)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="415.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="41.2036%" y="389" width="0.0185%" height="15" fill="rgb(254,38,10)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="399.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="373" width="0.0185%" height="15" fill="rgb(208,217,32)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="383.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="357" width="0.0185%" height="15" fill="rgb(221,120,13)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="367.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="341" width="0.0185%" height="15" fill="rgb(246,54,52)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="351.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="41.2036%" y="325" width="0.0185%" height="15" fill="rgb(242,34,25)" fg:x="2232" fg:w="1"/><text x="41.4536%" y="335.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (56 samples, 1.03%)</title><rect x="40.2068%" y="1253" width="1.0338%" height="15" fill="rgb(247,209,9)" fg:x="2178" fg:w="56"/><text x="40.4568%" y="1263.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1237" width="0.1477%" height="15" fill="rgb(228,71,26)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1247.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (8 samples, 0.15%)</title><rect x="41.0929%" y="1221" width="0.1477%" height="15" fill="rgb(222,145,49)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1231.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1205" width="0.1477%" height="15" fill="rgb(218,121,17)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1189" width="0.1477%" height="15" fill="rgb(244,50,7)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1173" width="0.1477%" height="15" fill="rgb(246,229,37)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1157" width="0.1477%" height="15" fill="rgb(225,18,5)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1141" width="0.1477%" height="15" fill="rgb(213,204,8)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1151.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1125" width="0.1477%" height="15" fill="rgb(238,103,6)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1135.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1109" width="0.1477%" height="15" fill="rgb(222,25,35)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1093" width="0.1477%" height="15" fill="rgb(213,203,35)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.15%)</title><rect x="41.0929%" y="1077" width="0.1477%" height="15" fill="rgb(221,79,53)" fg:x="2226" fg:w="8"/><text x="41.3429%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="1061" width="0.1108%" height="15" fill="rgb(243,200,35)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="1045" width="0.1108%" height="15" fill="rgb(248,60,25)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="1055.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="1029" width="0.1108%" height="15" fill="rgb(227,53,46)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="1013" width="0.1108%" height="15" fill="rgb(216,120,32)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="997" width="0.1108%" height="15" fill="rgb(220,134,1)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="981" width="0.1108%" height="15" fill="rgb(237,168,5)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="965" width="0.1108%" height="15" fill="rgb(231,100,33)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="975.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="949" width="0.1108%" height="15" fill="rgb(236,177,47)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="959.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="933" width="0.1108%" height="15" fill="rgb(235,7,49)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="917" width="0.1108%" height="15" fill="rgb(232,119,22)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="901" width="0.1108%" height="15" fill="rgb(254,73,53)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (6 samples, 0.11%)</title><rect x="41.1298%" y="885" width="0.1108%" height="15" fill="rgb(251,35,20)" fg:x="2228" fg:w="6"/><text x="41.3798%" y="895.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2221%" y="869" width="0.0185%" height="15" fill="rgb(241,119,20)" fg:x="2233" fg:w="1"/><text x="41.4721%" y="879.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.2221%" y="853" width="0.0185%" height="15" fill="rgb(207,102,14)" fg:x="2233" fg:w="1"/><text x="41.4721%" y="863.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (1 samples, 0.02%)</title><rect x="41.2221%" y="837" width="0.0185%" height="15" fill="rgb(248,201,50)" fg:x="2233" fg:w="1"/><text x="41.4721%" y="847.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="41.2221%" y="821" width="0.0185%" height="15" fill="rgb(222,185,44)" fg:x="2233" fg:w="1"/><text x="41.4721%" y="831.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="41.2405%" y="1221" width="0.0185%" height="15" fill="rgb(218,107,18)" fg:x="2234" fg:w="1"/><text x="41.4905%" y="1231.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="41.2405%" y="1253" width="0.0369%" height="15" fill="rgb(237,177,39)" fg:x="2234" fg:w="2"/><text x="41.4905%" y="1263.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="41.2405%" y="1237" width="0.0369%" height="15" fill="rgb(246,69,6)" fg:x="2234" fg:w="2"/><text x="41.4905%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="41.2590%" y="1221" width="0.0185%" height="15" fill="rgb(234,208,37)" fg:x="2235" fg:w="1"/><text x="41.5090%" y="1231.50"></text></g><g><title>CompressAmount (2 samples, 0.04%)</title><rect x="41.2775%" y="1077" width="0.0369%" height="15" fill="rgb(225,4,6)" fg:x="2236" fg:w="2"/><text x="41.5275%" y="1087.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="41.3513%" y="741" width="0.0185%" height="15" fill="rgb(233,45,0)" fg:x="2240" fg:w="1"/><text x="41.6013%" y="751.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="41.3328%" y="789" width="0.0738%" height="15" fill="rgb(226,136,5)" fg:x="2239" fg:w="4"/><text x="41.5828%" y="799.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (4 samples, 0.07%)</title><rect x="41.3328%" y="773" width="0.0738%" height="15" fill="rgb(211,91,47)" fg:x="2239" fg:w="4"/><text x="41.5828%" y="783.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (4 samples, 0.07%)</title><rect x="41.3328%" y="757" width="0.0738%" height="15" fill="rgb(242,88,51)" fg:x="2239" fg:w="4"/><text x="41.5828%" y="767.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="741" width="0.0369%" height="15" fill="rgb(230,91,28)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="751.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="725" width="0.0369%" height="15" fill="rgb(254,186,29)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="735.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="709" width="0.0369%" height="15" fill="rgb(238,6,4)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="719.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="693" width="0.0369%" height="15" fill="rgb(221,151,16)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="703.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="677" width="0.0369%" height="15" fill="rgb(251,143,52)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="687.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="661" width="0.0369%" height="15" fill="rgb(206,90,15)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="645" width="0.0369%" height="15" fill="rgb(218,35,8)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="655.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="629" width="0.0369%" height="15" fill="rgb(239,215,6)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="639.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="613" width="0.0369%" height="15" fill="rgb(245,116,39)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="41.3698%" y="597" width="0.0369%" height="15" fill="rgb(242,65,28)" fg:x="2241" fg:w="2"/><text x="41.6198%" y="607.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="41.3882%" y="581" width="0.0185%" height="15" fill="rgb(252,132,53)" fg:x="2242" fg:w="1"/><text x="41.6382%" y="591.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.3882%" y="565" width="0.0185%" height="15" fill="rgb(224,159,50)" fg:x="2242" fg:w="1"/><text x="41.6382%" y="575.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.3882%" y="549" width="0.0185%" height="15" fill="rgb(224,93,4)" fg:x="2242" fg:w="1"/><text x="41.6382%" y="559.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.3882%" y="533" width="0.0185%" height="15" fill="rgb(208,81,34)" fg:x="2242" fg:w="1"/><text x="41.6382%" y="543.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (1 samples, 0.02%)</title><rect x="41.3882%" y="517" width="0.0185%" height="15" fill="rgb(233,92,54)" fg:x="2242" fg:w="1"/><text x="41.6382%" y="527.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="41.3882%" y="501" width="0.0185%" height="15" fill="rgb(237,21,14)" fg:x="2242" fg:w="1"/><text x="41.6382%" y="511.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="41.4251%" y="741" width="0.0185%" height="15" fill="rgb(249,128,51)" fg:x="2244" fg:w="1"/><text x="41.6751%" y="751.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="41.4436%" y="725" width="0.0185%" height="15" fill="rgb(223,129,24)" fg:x="2245" fg:w="1"/><text x="41.6936%" y="735.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (79 samples, 1.46%)</title><rect x="40.0222%" y="1269" width="1.4584%" height="15" fill="rgb(231,168,25)" fg:x="2168" fg:w="79"/><text x="40.2722%" y="1279.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1253" width="0.2031%" height="15" fill="rgb(224,39,20)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1263.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (11 samples, 0.20%)</title><rect x="41.2775%" y="1237" width="0.2031%" height="15" fill="rgb(225,152,53)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1247.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1221" width="0.2031%" height="15" fill="rgb(252,17,24)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1231.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1205" width="0.2031%" height="15" fill="rgb(250,114,30)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1215.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1189" width="0.2031%" height="15" fill="rgb(229,5,4)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1199.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1173" width="0.2031%" height="15" fill="rgb(225,176,49)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1157" width="0.2031%" height="15" fill="rgb(224,221,49)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1167.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1141" width="0.2031%" height="15" fill="rgb(253,169,27)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1151.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1125" width="0.2031%" height="15" fill="rgb(211,206,16)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1135.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1109" width="0.2031%" height="15" fill="rgb(244,87,35)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (11 samples, 0.20%)</title><rect x="41.2775%" y="1093" width="0.2031%" height="15" fill="rgb(246,28,10)" fg:x="2236" fg:w="11"/><text x="41.5275%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="1077" width="0.1661%" height="15" fill="rgb(229,12,44)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="1061" width="0.1661%" height="15" fill="rgb(210,145,37)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="1071.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="1045" width="0.1661%" height="15" fill="rgb(227,112,52)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="1055.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="1029" width="0.1661%" height="15" fill="rgb(238,155,34)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="1039.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="1013" width="0.1661%" height="15" fill="rgb(239,226,36)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="1023.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="997" width="0.1661%" height="15" fill="rgb(230,16,23)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="981" width="0.1661%" height="15" fill="rgb(236,171,36)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="991.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="965" width="0.1661%" height="15" fill="rgb(221,22,14)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="975.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="949" width="0.1661%" height="15" fill="rgb(242,43,11)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="933" width="0.1661%" height="15" fill="rgb(232,69,23)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="943.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="917" width="0.1661%" height="15" fill="rgb(216,180,54)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="927.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (9 samples, 0.17%)</title><rect x="41.3144%" y="901" width="0.1661%" height="15" fill="rgb(216,5,24)" fg:x="2238" fg:w="9"/><text x="41.5644%" y="911.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (8 samples, 0.15%)</title><rect x="41.3328%" y="885" width="0.1477%" height="15" fill="rgb(225,89,9)" fg:x="2239" fg:w="8"/><text x="41.5828%" y="895.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.15%)</title><rect x="41.3328%" y="869" width="0.1477%" height="15" fill="rgb(243,75,33)" fg:x="2239" fg:w="8"/><text x="41.5828%" y="879.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (8 samples, 0.15%)</title><rect x="41.3328%" y="853" width="0.1477%" height="15" fill="rgb(247,141,45)" fg:x="2239" fg:w="8"/><text x="41.5828%" y="863.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (8 samples, 0.15%)</title><rect x="41.3328%" y="837" width="0.1477%" height="15" fill="rgb(232,177,36)" fg:x="2239" fg:w="8"/><text x="41.5828%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.15%)</title><rect x="41.3328%" y="821" width="0.1477%" height="15" fill="rgb(219,125,36)" fg:x="2239" fg:w="8"/><text x="41.5828%" y="831.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.15%)</title><rect x="41.3328%" y="805" width="0.1477%" height="15" fill="rgb(227,94,9)" fg:x="2239" fg:w="8"/><text x="41.5828%" y="815.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="41.4067%" y="789" width="0.0738%" height="15" fill="rgb(240,34,52)" fg:x="2243" fg:w="4"/><text x="41.6567%" y="799.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (4 samples, 0.07%)</title><rect x="41.4067%" y="773" width="0.0738%" height="15" fill="rgb(216,45,12)" fg:x="2243" fg:w="4"/><text x="41.6567%" y="783.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (4 samples, 0.07%)</title><rect x="41.4067%" y="757" width="0.0738%" height="15" fill="rgb(246,21,19)" fg:x="2243" fg:w="4"/><text x="41.6567%" y="767.50"></text></g><g><title>CompressScript (2 samples, 0.04%)</title><rect x="41.4436%" y="741" width="0.0369%" height="15" fill="rgb(213,98,42)" fg:x="2245" fg:w="2"/><text x="41.6936%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="725" width="0.0185%" height="15" fill="rgb(250,136,47)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="709" width="0.0185%" height="15" fill="rgb(251,124,27)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="693" width="0.0185%" height="15" fill="rgb(229,180,14)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="703.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="677" width="0.0185%" height="15" fill="rgb(245,216,25)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="687.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="661" width="0.0185%" height="15" fill="rgb(251,43,5)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="671.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="645" width="0.0185%" height="15" fill="rgb(250,128,24)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="629" width="0.0185%" height="15" fill="rgb(217,117,27)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="639.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="613" width="0.0185%" height="15" fill="rgb(245,147,4)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="623.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="597" width="0.0185%" height="15" fill="rgb(242,201,35)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="581" width="0.0185%" height="15" fill="rgb(218,181,1)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="591.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="41.4621%" y="565" width="0.0185%" height="15" fill="rgb(222,6,29)" fg:x="2246" fg:w="1"/><text x="41.7121%" y="575.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="41.4805%" y="1269" width="0.0185%" height="15" fill="rgb(208,186,3)" fg:x="2247" fg:w="1"/><text x="41.7305%" y="1279.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="41.4990%" y="1269" width="0.0185%" height="15" fill="rgb(216,36,26)" fg:x="2248" fg:w="1"/><text x="41.7490%" y="1279.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::vector (15 samples, 0.28%)</title><rect x="41.5174%" y="1269" width="0.2769%" height="15" fill="rgb(248,201,23)" fg:x="2249" fg:w="15"/><text x="41.7674%" y="1279.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_default_initialize (15 samples, 0.28%)</title><rect x="41.5174%" y="1253" width="0.2769%" height="15" fill="rgb(251,170,31)" fg:x="2249" fg:w="15"/><text x="41.7674%" y="1263.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_a&lt;PrecomputedTransactionData*, unsigned long, PrecomputedTransactionData&gt; (15 samples, 0.28%)</title><rect x="41.5174%" y="1237" width="0.2769%" height="15" fill="rgb(207,110,25)" fg:x="2249" fg:w="15"/><text x="41.7674%" y="1247.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (15 samples, 0.28%)</title><rect x="41.5174%" y="1221" width="0.2769%" height="15" fill="rgb(250,54,15)" fg:x="2249" fg:w="15"/><text x="41.7674%" y="1231.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (15 samples, 0.28%)</title><rect x="41.5174%" y="1205" width="0.2769%" height="15" fill="rgb(227,68,33)" fg:x="2249" fg:w="15"/><text x="41.7674%" y="1215.50"></text></g><g><title>void std::_Construct&lt;PrecomputedTransactionData&gt; (14 samples, 0.26%)</title><rect x="41.5359%" y="1189" width="0.2584%" height="15" fill="rgb(238,34,41)" fg:x="2250" fg:w="14"/><text x="41.7859%" y="1199.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="41.6467%" y="1173" width="0.1477%" height="15" fill="rgb(220,11,15)" fg:x="2256" fg:w="8"/><text x="41.8967%" y="1183.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="41.6467%" y="1157" width="0.1477%" height="15" fill="rgb(246,111,35)" fg:x="2256" fg:w="8"/><text x="41.8967%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="41.6467%" y="1141" width="0.1477%" height="15" fill="rgb(209,88,53)" fg:x="2256" fg:w="8"/><text x="41.8967%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="41.6467%" y="1125" width="0.1477%" height="15" fill="rgb(231,185,47)" fg:x="2256" fg:w="8"/><text x="41.8967%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="41.6467%" y="1109" width="0.1477%" height="15" fill="rgb(233,154,1)" fg:x="2256" fg:w="8"/><text x="41.8967%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="41.6651%" y="1093" width="0.1292%" height="15" fill="rgb(225,15,46)" fg:x="2257" fg:w="7"/><text x="41.9151%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="41.6651%" y="1077" width="0.1292%" height="15" fill="rgb(211,135,41)" fg:x="2257" fg:w="7"/><text x="41.9151%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="41.6836%" y="1061" width="0.1108%" height="15" fill="rgb(208,54,0)" fg:x="2258" fg:w="6"/><text x="41.9336%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="41.7020%" y="1045" width="0.0923%" height="15" fill="rgb(244,136,14)" fg:x="2259" fg:w="5"/><text x="41.9520%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.7574%" y="1029" width="0.0369%" height="15" fill="rgb(241,56,14)" fg:x="2262" fg:w="2"/><text x="42.0074%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.7759%" y="1013" width="0.0185%" height="15" fill="rgb(205,80,24)" fg:x="2263" fg:w="1"/><text x="42.0259%" y="1023.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (2 samples, 0.04%)</title><rect x="41.8313%" y="1141" width="0.0369%" height="15" fill="rgb(220,57,4)" fg:x="2266" fg:w="2"/><text x="42.0813%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (2 samples, 0.04%)</title><rect x="41.8313%" y="1125" width="0.0369%" height="15" fill="rgb(226,193,50)" fg:x="2266" fg:w="2"/><text x="42.0813%" y="1135.50"></text></g><g><title>Chainstate::ConnectBlock (954 samples, 17.61%)</title><rect x="24.2754%" y="1285" width="17.6112%" height="15" fill="rgb(231,168,22)" fg:x="1315" fg:w="954"/><text x="24.5254%" y="1295.50">Chainstate::ConnectBlock</text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::~vector (5 samples, 0.09%)</title><rect x="41.7944%" y="1269" width="0.0923%" height="15" fill="rgb(254,215,14)" fg:x="2264" fg:w="5"/><text x="42.0444%" y="1279.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*, PrecomputedTransactionData&gt; (5 samples, 0.09%)</title><rect x="41.7944%" y="1253" width="0.0923%" height="15" fill="rgb(211,115,16)" fg:x="2264" fg:w="5"/><text x="42.0444%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*&gt; (5 samples, 0.09%)</title><rect x="41.7944%" y="1237" width="0.0923%" height="15" fill="rgb(236,210,16)" fg:x="2264" fg:w="5"/><text x="42.0444%" y="1247.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;PrecomputedTransactionData*&gt; (5 samples, 0.09%)</title><rect x="41.7944%" y="1221" width="0.0923%" height="15" fill="rgb(221,94,12)" fg:x="2264" fg:w="5"/><text x="42.0444%" y="1231.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData&gt; (4 samples, 0.07%)</title><rect x="41.8128%" y="1205" width="0.0738%" height="15" fill="rgb(235,218,49)" fg:x="2265" fg:w="4"/><text x="42.0628%" y="1215.50"></text></g><g><title>void std::destroy_at&lt;PrecomputedTransactionData&gt; (4 samples, 0.07%)</title><rect x="41.8128%" y="1189" width="0.0738%" height="15" fill="rgb(217,114,14)" fg:x="2265" fg:w="4"/><text x="42.0628%" y="1199.50"></text></g><g><title>PrecomputedTransactionData::~PrecomputedTransactionData (4 samples, 0.07%)</title><rect x="41.8128%" y="1173" width="0.0738%" height="15" fill="rgb(216,145,22)" fg:x="2265" fg:w="4"/><text x="42.0628%" y="1183.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (4 samples, 0.07%)</title><rect x="41.8128%" y="1157" width="0.0738%" height="15" fill="rgb(217,112,39)" fg:x="2265" fg:w="4"/><text x="42.0628%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (1 samples, 0.02%)</title><rect x="41.8682%" y="1141" width="0.0185%" height="15" fill="rgb(225,85,32)" fg:x="2268" fg:w="1"/><text x="42.1182%" y="1151.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (1 samples, 0.02%)</title><rect x="41.8682%" y="1125" width="0.0185%" height="15" fill="rgb(245,209,47)" fg:x="2268" fg:w="1"/><text x="42.1182%" y="1135.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (1 samples, 0.02%)</title><rect x="41.8682%" y="1109" width="0.0185%" height="15" fill="rgb(218,220,15)" fg:x="2268" fg:w="1"/><text x="42.1182%" y="1119.50"></text></g><g><title>Chainstate::ConnectTip (1,593 samples, 29.41%)</title><rect x="12.4977%" y="1301" width="29.4074%" height="15" fill="rgb(222,202,31)" fg:x="677" fg:w="1593"/><text x="12.7477%" y="1311.50">Chainstate::ConnectTip</text></g><g><title>std::_Rb_tree&lt;COutPoint const*, std::pair&lt;COutPoint const* const, CTransaction const*&gt;, std::_Select1st&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt;, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="41.8867%" y="1285" width="0.0185%" height="15" fill="rgb(243,203,4)" fg:x="2269" fg:w="1"/><text x="42.1367%" y="1295.50"></text></g><g><title>Chainstate::ActivateBestChain (1,594 samples, 29.43%)</title><rect x="12.4977%" y="1333" width="29.4259%" height="15" fill="rgb(237,92,17)" fg:x="677" fg:w="1594"/><text x="12.7477%" y="1343.50">Chainstate::ActivateBestChain</text></g><g><title>Chainstate::ActivateBestChainStep (1,594 samples, 29.43%)</title><rect x="12.4977%" y="1317" width="29.4259%" height="15" fill="rgb(231,119,7)" fg:x="677" fg:w="1594"/><text x="12.7477%" y="1327.50">Chainstate::ActivateBestChainStep</text></g><g><title>DisconnectedBlockTransactions::DisconnectedBlockTransactions (1 samples, 0.02%)</title><rect x="41.9051%" y="1301" width="0.0185%" height="15" fill="rgb(237,82,41)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1311.50"></text></g><g><title>std::unordered_map&lt;uint256, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; &gt;::unordered_map (1 samples, 0.02%)</title><rect x="41.9051%" y="1285" width="0.0185%" height="15" fill="rgb(226,81,48)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1295.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="41.9051%" y="1269" width="0.0185%" height="15" fill="rgb(234,70,51)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1279.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable_base (1 samples, 0.02%)</title><rect x="41.9051%" y="1253" width="0.0185%" height="15" fill="rgb(251,86,4)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1263.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_Hash_code_base (1 samples, 0.02%)</title><rect x="41.9051%" y="1237" width="0.0185%" height="15" fill="rgb(244,144,28)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_ebo_helper&lt;1, SaltedTxidHasher, false&gt;::_Hashtable_ebo_helper (1 samples, 0.02%)</title><rect x="41.9051%" y="1221" width="0.0185%" height="15" fill="rgb(232,161,39)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1231.50"></text></g><g><title>SaltedTxidHasher::SaltedTxidHasher (1 samples, 0.02%)</title><rect x="41.9051%" y="1205" width="0.0185%" height="15" fill="rgb(247,34,51)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1215.50"></text></g><g><title>FastRandomContext::rand64 (1 samples, 0.02%)</title><rect x="41.9051%" y="1189" width="0.0185%" height="15" fill="rgb(225,132,2)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1199.50"></text></g><g><title>FastRandomContext::RandomSeed (1 samples, 0.02%)</title><rect x="41.9051%" y="1173" width="0.0185%" height="15" fill="rgb(209,159,44)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1183.50"></text></g><g><title>GetRandHash (1 samples, 0.02%)</title><rect x="41.9051%" y="1157" width="0.0185%" height="15" fill="rgb(251,214,1)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1167.50"></text></g><g><title>CSHA512::Finalize (1 samples, 0.02%)</title><rect x="41.9051%" y="1141" width="0.0185%" height="15" fill="rgb(247,84,47)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1151.50"></text></g><g><title>CSHA512::Write (1 samples, 0.02%)</title><rect x="41.9051%" y="1125" width="0.0185%" height="15" fill="rgb(240,111,43)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1135.50"></text></g><g><title>Transform (1 samples, 0.02%)</title><rect x="41.9051%" y="1109" width="0.0185%" height="15" fill="rgb(215,214,35)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1119.50"></text></g><g><title>Round (1 samples, 0.02%)</title><rect x="41.9051%" y="1093" width="0.0185%" height="15" fill="rgb(248,207,23)" fg:x="2270" fg:w="1"/><text x="42.1551%" y="1103.50"></text></g><g><title>void Serialize&lt;HashWriter, uint256&gt; (1 samples, 0.02%)</title><rect x="41.9236%" y="1173" width="0.0185%" height="15" fill="rgb(214,186,4)" fg:x="2271" fg:w="1"/><text x="42.1736%" y="1183.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="41.9236%" y="1157" width="0.0185%" height="15" fill="rgb(220,133,22)" fg:x="2271" fg:w="1"/><text x="42.1736%" y="1167.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="41.9236%" y="1141" width="0.0185%" height="15" fill="rgb(239,134,19)" fg:x="2271" fg:w="1"/><text x="42.1736%" y="1151.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="41.9236%" y="1125" width="0.0185%" height="15" fill="rgb(250,140,9)" fg:x="2271" fg:w="1"/><text x="42.1736%" y="1135.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="41.9236%" y="1109" width="0.0185%" height="15" fill="rgb(225,59,14)" fg:x="2271" fg:w="1"/><text x="42.1736%" y="1119.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="41.9236%" y="1093" width="0.0185%" height="15" fill="rgb(214,152,51)" fg:x="2271" fg:w="1"/><text x="42.1736%" y="1103.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="41.9236%" y="1077" width="0.0185%" height="15" fill="rgb(251,227,43)" fg:x="2271" fg:w="1"/><text x="42.1736%" y="1087.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (2 samples, 0.04%)</title><rect x="41.9236%" y="1317" width="0.0369%" height="15" fill="rgb(241,96,17)" fg:x="2271" fg:w="2"/><text x="42.1736%" y="1327.50"></text></g><g><title>CBlockHeader::GetHash (2 samples, 0.04%)</title><rect x="41.9236%" y="1301" width="0.0369%" height="15" fill="rgb(234,198,43)" fg:x="2271" fg:w="2"/><text x="42.1736%" y="1311.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (2 samples, 0.04%)</title><rect x="41.9236%" y="1285" width="0.0369%" height="15" fill="rgb(220,108,29)" fg:x="2271" fg:w="2"/><text x="42.1736%" y="1295.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (2 samples, 0.04%)</title><rect x="41.9236%" y="1269" width="0.0369%" height="15" fill="rgb(226,163,33)" fg:x="2271" fg:w="2"/><text x="42.1736%" y="1279.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="41.9236%" y="1253" width="0.0369%" height="15" fill="rgb(205,194,45)" fg:x="2271" fg:w="2"/><text x="42.1736%" y="1263.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="41.9236%" y="1237" width="0.0369%" height="15" fill="rgb(206,143,44)" fg:x="2271" fg:w="2"/><text x="42.1736%" y="1247.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="41.9236%" y="1221" width="0.0369%" height="15" fill="rgb(236,136,36)" fg:x="2271" fg:w="2"/><text x="42.1736%" y="1231.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (2 samples, 0.04%)</title><rect x="41.9236%" y="1205" width="0.0369%" height="15" fill="rgb(249,172,42)" fg:x="2271" fg:w="2"/><text x="42.1736%" y="1215.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (2 samples, 0.04%)</title><rect x="41.9236%" y="1189" width="0.0369%" height="15" fill="rgb(216,139,23)" fg:x="2271" fg:w="2"/><text x="42.1736%" y="1199.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="41.9420%" y="1173" width="0.0185%" height="15" fill="rgb(207,166,20)" fg:x="2272" fg:w="1"/><text x="42.1920%" y="1183.50"></text></g><g><title>void ser_writedata32&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="41.9420%" y="1157" width="0.0185%" height="15" fill="rgb(210,209,22)" fg:x="2272" fg:w="1"/><text x="42.1920%" y="1167.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="41.9420%" y="1141" width="0.0185%" height="15" fill="rgb(232,118,20)" fg:x="2272" fg:w="1"/><text x="42.1920%" y="1151.50"></text></g><g><title>ChainstateManager::AcceptBlock (1 samples, 0.02%)</title><rect x="41.9420%" y="1125" width="0.0185%" height="15" fill="rgb(238,113,42)" fg:x="2272" fg:w="1"/><text x="42.1920%" y="1135.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="42.0713%" y="885" width="0.0369%" height="15" fill="rgb(231,42,5)" fg:x="2279" fg:w="2"/><text x="42.3213%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="42.0713%" y="869" width="0.0369%" height="15" fill="rgb(243,166,24)" fg:x="2279" fg:w="2"/><text x="42.3213%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="42.0713%" y="853" width="0.0369%" height="15" fill="rgb(237,226,12)" fg:x="2279" fg:w="2"/><text x="42.3213%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.0713%" y="837" width="0.0369%" height="15" fill="rgb(229,133,24)" fg:x="2279" fg:w="2"/><text x="42.3213%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="42.0713%" y="821" width="0.0369%" height="15" fill="rgb(238,33,43)" fg:x="2279" fg:w="2"/><text x="42.3213%" y="831.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="42.0897%" y="805" width="0.0185%" height="15" fill="rgb(227,59,38)" fg:x="2280" fg:w="1"/><text x="42.3397%" y="815.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="42.0528%" y="901" width="0.0738%" height="15" fill="rgb(230,97,0)" fg:x="2278" fg:w="4"/><text x="42.3028%" y="911.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="42.1082%" y="885" width="0.0185%" height="15" fill="rgb(250,173,50)" fg:x="2281" fg:w="1"/><text x="42.3582%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="42.1082%" y="869" width="0.0185%" height="15" fill="rgb(240,15,50)" fg:x="2281" fg:w="1"/><text x="42.3582%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.1082%" y="853" width="0.0185%" height="15" fill="rgb(221,93,22)" fg:x="2281" fg:w="1"/><text x="42.3582%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.1082%" y="837" width="0.0185%" height="15" fill="rgb(245,180,53)" fg:x="2281" fg:w="1"/><text x="42.3582%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="42.1082%" y="821" width="0.0185%" height="15" fill="rgb(231,88,51)" fg:x="2281" fg:w="1"/><text x="42.3582%" y="831.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="42.1082%" y="805" width="0.0185%" height="15" fill="rgb(240,58,21)" fg:x="2281" fg:w="1"/><text x="42.3582%" y="815.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (9 samples, 0.17%)</title><rect x="41.9790%" y="981" width="0.1661%" height="15" fill="rgb(237,21,10)" fg:x="2274" fg:w="9"/><text x="42.2290%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (9 samples, 0.17%)</title><rect x="41.9790%" y="965" width="0.1661%" height="15" fill="rgb(218,43,11)" fg:x="2274" fg:w="9"/><text x="42.2290%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.17%)</title><rect x="41.9790%" y="949" width="0.1661%" height="15" fill="rgb(218,221,29)" fg:x="2274" fg:w="9"/><text x="42.2290%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.17%)</title><rect x="41.9790%" y="933" width="0.1661%" height="15" fill="rgb(214,118,42)" fg:x="2274" fg:w="9"/><text x="42.2290%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="41.9974%" y="917" width="0.1477%" height="15" fill="rgb(251,200,26)" fg:x="2275" fg:w="8"/><text x="42.2474%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.1266%" y="901" width="0.0185%" height="15" fill="rgb(237,101,39)" fg:x="2282" fg:w="1"/><text x="42.3766%" y="911.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (2 samples, 0.04%)</title><rect x="42.2189%" y="901" width="0.0369%" height="15" fill="rgb(251,117,11)" fg:x="2287" fg:w="2"/><text x="42.4689%" y="911.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="901" width="0.0369%" height="15" fill="rgb(216,223,23)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="885" width="0.0369%" height="15" fill="rgb(251,54,12)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="895.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="869" width="0.0369%" height="15" fill="rgb(254,176,54)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="879.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="853" width="0.0369%" height="15" fill="rgb(210,32,8)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="863.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="837" width="0.0369%" height="15" fill="rgb(235,52,38)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="821" width="0.0369%" height="15" fill="rgb(231,4,44)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="805" width="0.0369%" height="15" fill="rgb(249,2,32)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="789" width="0.0369%" height="15" fill="rgb(224,65,26)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="773" width="0.0369%" height="15" fill="rgb(250,73,40)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="757" width="0.0369%" height="15" fill="rgb(253,177,16)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="741" width="0.0369%" height="15" fill="rgb(217,32,34)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="725" width="0.0369%" height="15" fill="rgb(212,7,10)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="709" width="0.0369%" height="15" fill="rgb(245,89,8)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="42.2559%" y="693" width="0.0369%" height="15" fill="rgb(237,16,53)" fg:x="2289" fg:w="2"/><text x="42.5059%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2743%" y="677" width="0.0185%" height="15" fill="rgb(250,204,30)" fg:x="2290" fg:w="1"/><text x="42.5243%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2743%" y="661" width="0.0185%" height="15" fill="rgb(208,77,27)" fg:x="2290" fg:w="1"/><text x="42.5243%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="42.2743%" y="645" width="0.0185%" height="15" fill="rgb(250,204,28)" fg:x="2290" fg:w="1"/><text x="42.5243%" y="655.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="42.2743%" y="629" width="0.0185%" height="15" fill="rgb(244,63,21)" fg:x="2290" fg:w="1"/><text x="42.5243%" y="639.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (10 samples, 0.18%)</title><rect x="42.1451%" y="981" width="0.1846%" height="15" fill="rgb(236,85,44)" fg:x="2283" fg:w="10"/><text x="42.3951%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (10 samples, 0.18%)</title><rect x="42.1451%" y="965" width="0.1846%" height="15" fill="rgb(215,98,4)" fg:x="2283" fg:w="10"/><text x="42.3951%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.18%)</title><rect x="42.1451%" y="949" width="0.1846%" height="15" fill="rgb(235,38,11)" fg:x="2283" fg:w="10"/><text x="42.3951%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.18%)</title><rect x="42.1451%" y="933" width="0.1846%" height="15" fill="rgb(254,186,25)" fg:x="2283" fg:w="10"/><text x="42.3951%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="42.1636%" y="917" width="0.1661%" height="15" fill="rgb(225,55,31)" fg:x="2284" fg:w="9"/><text x="42.4136%" y="927.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="42.2928%" y="901" width="0.0369%" height="15" fill="rgb(211,15,21)" fg:x="2291" fg:w="2"/><text x="42.5428%" y="911.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="42.2928%" y="885" width="0.0369%" height="15" fill="rgb(215,187,41)" fg:x="2291" fg:w="2"/><text x="42.5428%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="42.2928%" y="869" width="0.0369%" height="15" fill="rgb(248,69,32)" fg:x="2291" fg:w="2"/><text x="42.5428%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="42.2928%" y="853" width="0.0369%" height="15" fill="rgb(252,102,52)" fg:x="2291" fg:w="2"/><text x="42.5428%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.2928%" y="837" width="0.0369%" height="15" fill="rgb(253,140,32)" fg:x="2291" fg:w="2"/><text x="42.5428%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="42.2928%" y="821" width="0.0369%" height="15" fill="rgb(216,56,42)" fg:x="2291" fg:w="2"/><text x="42.5428%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="805" width="0.0185%" height="15" fill="rgb(216,184,14)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="789" width="0.0185%" height="15" fill="rgb(237,187,27)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="799.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="773" width="0.0185%" height="15" fill="rgb(219,65,3)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="783.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="757" width="0.0185%" height="15" fill="rgb(245,83,25)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="767.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="741" width="0.0185%" height="15" fill="rgb(214,205,45)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="725" width="0.0185%" height="15" fill="rgb(241,20,18)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="709" width="0.0185%" height="15" fill="rgb(232,163,23)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="693" width="0.0185%" height="15" fill="rgb(214,5,46)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="703.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="677" width="0.0185%" height="15" fill="rgb(229,78,17)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="687.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="661" width="0.0185%" height="15" fill="rgb(248,89,10)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="671.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="645" width="0.0185%" height="15" fill="rgb(248,54,15)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="629" width="0.0185%" height="15" fill="rgb(223,116,6)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="613" width="0.0185%" height="15" fill="rgb(205,125,38)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="42.3112%" y="597" width="0.0185%" height="15" fill="rgb(251,78,38)" fg:x="2292" fg:w="1"/><text x="42.5612%" y="607.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="42.3482%" y="869" width="0.0185%" height="15" fill="rgb(253,78,28)" fg:x="2294" fg:w="1"/><text x="42.5982%" y="879.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="42.3482%" y="853" width="0.0185%" height="15" fill="rgb(209,120,3)" fg:x="2294" fg:w="1"/><text x="42.5982%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="42.3666%" y="853" width="0.0185%" height="15" fill="rgb(238,229,9)" fg:x="2295" fg:w="1"/><text x="42.6166%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3666%" y="837" width="0.0185%" height="15" fill="rgb(253,159,18)" fg:x="2295" fg:w="1"/><text x="42.6166%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3666%" y="821" width="0.0185%" height="15" fill="rgb(244,42,34)" fg:x="2295" fg:w="1"/><text x="42.6166%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3666%" y="805" width="0.0185%" height="15" fill="rgb(224,8,7)" fg:x="2295" fg:w="1"/><text x="42.6166%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="42.3666%" y="789" width="0.0185%" height="15" fill="rgb(210,201,45)" fg:x="2295" fg:w="1"/><text x="42.6166%" y="799.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (4 samples, 0.07%)</title><rect x="42.3297%" y="981" width="0.0738%" height="15" fill="rgb(252,185,21)" fg:x="2293" fg:w="4"/><text x="42.5797%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="42.3297%" y="965" width="0.0738%" height="15" fill="rgb(223,131,1)" fg:x="2293" fg:w="4"/><text x="42.5797%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="42.3297%" y="949" width="0.0738%" height="15" fill="rgb(245,141,16)" fg:x="2293" fg:w="4"/><text x="42.5797%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="42.3297%" y="933" width="0.0738%" height="15" fill="rgb(229,55,45)" fg:x="2293" fg:w="4"/><text x="42.5797%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="42.3297%" y="917" width="0.0738%" height="15" fill="rgb(208,92,15)" fg:x="2293" fg:w="4"/><text x="42.5797%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="42.3297%" y="901" width="0.0738%" height="15" fill="rgb(234,185,47)" fg:x="2293" fg:w="4"/><text x="42.5797%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (4 samples, 0.07%)</title><rect x="42.3297%" y="885" width="0.0738%" height="15" fill="rgb(253,104,50)" fg:x="2293" fg:w="4"/><text x="42.5797%" y="895.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="42.3666%" y="869" width="0.0369%" height="15" fill="rgb(205,70,7)" fg:x="2295" fg:w="2"/><text x="42.6166%" y="879.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="42.3851%" y="853" width="0.0185%" height="15" fill="rgb(240,178,43)" fg:x="2296" fg:w="1"/><text x="42.6351%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="42.3851%" y="837" width="0.0185%" height="15" fill="rgb(214,112,2)" fg:x="2296" fg:w="1"/><text x="42.6351%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3851%" y="821" width="0.0185%" height="15" fill="rgb(206,46,17)" fg:x="2296" fg:w="1"/><text x="42.6351%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3851%" y="805" width="0.0185%" height="15" fill="rgb(225,220,16)" fg:x="2296" fg:w="1"/><text x="42.6351%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="42.3851%" y="789" width="0.0185%" height="15" fill="rgb(238,65,40)" fg:x="2296" fg:w="1"/><text x="42.6351%" y="799.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (26 samples, 0.48%)</title><rect x="41.9605%" y="997" width="0.4800%" height="15" fill="rgb(230,151,21)" fg:x="2273" fg:w="26"/><text x="42.2105%" y="1007.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (2 samples, 0.04%)</title><rect x="42.4035%" y="981" width="0.0369%" height="15" fill="rgb(218,58,49)" fg:x="2297" fg:w="2"/><text x="42.6535%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.4035%" y="965" width="0.0369%" height="15" fill="rgb(219,179,14)" fg:x="2297" fg:w="2"/><text x="42.6535%" y="975.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.4035%" y="949" width="0.0369%" height="15" fill="rgb(223,72,1)" fg:x="2297" fg:w="2"/><text x="42.6535%" y="959.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="42.4035%" y="933" width="0.0369%" height="15" fill="rgb(238,126,10)" fg:x="2297" fg:w="2"/><text x="42.6535%" y="943.50"></text></g><g><title>SizeComputer::write (2 samples, 0.04%)</title><rect x="42.4035%" y="917" width="0.0369%" height="15" fill="rgb(224,206,38)" fg:x="2297" fg:w="2"/><text x="42.6535%" y="927.50"></text></g><g><title>ContextualCheckBlock (28 samples, 0.52%)</title><rect x="41.9605%" y="1317" width="0.5169%" height="15" fill="rgb(212,201,54)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1327.50"></text></g><g><title>GetBlockWeight (28 samples, 0.52%)</title><rect x="41.9605%" y="1301" width="0.5169%" height="15" fill="rgb(218,154,48)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1311.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1285" width="0.5169%" height="15" fill="rgb(232,93,24)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1295.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (28 samples, 0.52%)</title><rect x="41.9605%" y="1269" width="0.5169%" height="15" fill="rgb(245,30,21)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1279.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1253" width="0.5169%" height="15" fill="rgb(242,148,29)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1263.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1237" width="0.5169%" height="15" fill="rgb(244,153,54)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1247.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1221" width="0.5169%" height="15" fill="rgb(252,87,22)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1231.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1205" width="0.5169%" height="15" fill="rgb(210,51,29)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1215.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1189" width="0.5169%" height="15" fill="rgb(242,136,47)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1199.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1173" width="0.5169%" height="15" fill="rgb(238,68,4)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1157" width="0.5169%" height="15" fill="rgb(242,161,30)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1167.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1141" width="0.5169%" height="15" fill="rgb(218,58,44)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1125" width="0.5169%" height="15" fill="rgb(252,125,32)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1109" width="0.5169%" height="15" fill="rgb(219,178,0)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1093" width="0.5169%" height="15" fill="rgb(213,152,7)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1077" width="0.5169%" height="15" fill="rgb(249,109,34)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1061" width="0.5169%" height="15" fill="rgb(232,96,21)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1045" width="0.5169%" height="15" fill="rgb(228,27,39)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1029" width="0.5169%" height="15" fill="rgb(211,182,52)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1039.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.52%)</title><rect x="41.9605%" y="1013" width="0.5169%" height="15" fill="rgb(234,178,38)" fg:x="2273" fg:w="28"/><text x="42.2105%" y="1023.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.4405%" y="997" width="0.0369%" height="15" fill="rgb(221,111,3)" fg:x="2299" fg:w="2"/><text x="42.6905%" y="1007.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="42.6620%" y="917" width="0.0185%" height="15" fill="rgb(228,175,21)" fg:x="2311" fg:w="1"/><text x="42.9120%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6620%" y="901" width="0.0185%" height="15" fill="rgb(228,174,43)" fg:x="2311" fg:w="1"/><text x="42.9120%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6620%" y="885" width="0.0185%" height="15" fill="rgb(211,191,0)" fg:x="2311" fg:w="1"/><text x="42.9120%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6620%" y="869" width="0.0185%" height="15" fill="rgb(253,117,3)" fg:x="2311" fg:w="1"/><text x="42.9120%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6620%" y="853" width="0.0185%" height="15" fill="rgb(241,127,19)" fg:x="2311" fg:w="1"/><text x="42.9120%" y="863.50"></text></g><g><title>[[ext4]] (8 samples, 0.15%)</title><rect x="42.5512%" y="1029" width="0.1477%" height="15" fill="rgb(218,103,12)" fg:x="2305" fg:w="8"/><text x="42.8012%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="42.5697%" y="1013" width="0.1292%" height="15" fill="rgb(236,214,43)" fg:x="2306" fg:w="7"/><text x="42.8197%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="42.6251%" y="997" width="0.0738%" height="15" fill="rgb(244,144,19)" fg:x="2309" fg:w="4"/><text x="42.8751%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.6620%" y="981" width="0.0369%" height="15" fill="rgb(246,188,10)" fg:x="2311" fg:w="2"/><text x="42.9120%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.6620%" y="965" width="0.0369%" height="15" fill="rgb(212,193,33)" fg:x="2311" fg:w="2"/><text x="42.9120%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.6620%" y="949" width="0.0369%" height="15" fill="rgb(241,51,29)" fg:x="2311" fg:w="2"/><text x="42.9120%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.6620%" y="933" width="0.0369%" height="15" fill="rgb(211,58,19)" fg:x="2311" fg:w="2"/><text x="42.9120%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6805%" y="917" width="0.0185%" height="15" fill="rgb(229,111,26)" fg:x="2312" fg:w="1"/><text x="42.9305%" y="927.50"></text></g><g><title>FlatFileSeq::Flush (16 samples, 0.30%)</title><rect x="42.4774%" y="1269" width="0.2954%" height="15" fill="rgb(213,115,40)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1279.50"></text></g><g><title>FileCommit (16 samples, 0.30%)</title><rect x="42.4774%" y="1253" width="0.2954%" height="15" fill="rgb(209,56,44)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1263.50"></text></g><g><title>fdatasync (16 samples, 0.30%)</title><rect x="42.4774%" y="1237" width="0.2954%" height="15" fill="rgb(230,108,32)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1247.50"></text></g><g><title>[unknown] (16 samples, 0.30%)</title><rect x="42.4774%" y="1221" width="0.2954%" height="15" fill="rgb(216,165,31)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1231.50"></text></g><g><title>[unknown] (16 samples, 0.30%)</title><rect x="42.4774%" y="1205" width="0.2954%" height="15" fill="rgb(218,122,21)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1215.50"></text></g><g><title>[unknown] (16 samples, 0.30%)</title><rect x="42.4774%" y="1189" width="0.2954%" height="15" fill="rgb(223,224,47)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1199.50"></text></g><g><title>[[ext4]] (16 samples, 0.30%)</title><rect x="42.4774%" y="1173" width="0.2954%" height="15" fill="rgb(238,102,44)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1183.50"></text></g><g><title>[unknown] (16 samples, 0.30%)</title><rect x="42.4774%" y="1157" width="0.2954%" height="15" fill="rgb(236,46,40)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1167.50"></text></g><g><title>[unknown] (16 samples, 0.30%)</title><rect x="42.4774%" y="1141" width="0.2954%" height="15" fill="rgb(247,202,50)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1151.50"></text></g><g><title>[unknown] (16 samples, 0.30%)</title><rect x="42.4774%" y="1125" width="0.2954%" height="15" fill="rgb(209,99,20)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1135.50"></text></g><g><title>[unknown] (16 samples, 0.30%)</title><rect x="42.4774%" y="1109" width="0.2954%" height="15" fill="rgb(252,27,34)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1119.50"></text></g><g><title>[[ext4]] (16 samples, 0.30%)</title><rect x="42.4774%" y="1093" width="0.2954%" height="15" fill="rgb(215,206,23)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1103.50"></text></g><g><title>[[ext4]] (16 samples, 0.30%)</title><rect x="42.4774%" y="1077" width="0.2954%" height="15" fill="rgb(212,135,36)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1087.50"></text></g><g><title>[[ext4]] (16 samples, 0.30%)</title><rect x="42.4774%" y="1061" width="0.2954%" height="15" fill="rgb(240,189,1)" fg:x="2301" fg:w="16"/><text x="42.7274%" y="1071.50"></text></g><g><title>[[ext4]] (14 samples, 0.26%)</title><rect x="42.5143%" y="1045" width="0.2584%" height="15" fill="rgb(242,56,20)" fg:x="2303" fg:w="14"/><text x="42.7643%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="42.6989%" y="1029" width="0.0738%" height="15" fill="rgb(247,132,33)" fg:x="2313" fg:w="4"/><text x="42.9489%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="42.7174%" y="1013" width="0.0554%" height="15" fill="rgb(208,149,11)" fg:x="2314" fg:w="3"/><text x="42.9674%" y="1023.50"></text></g><g><title>node::BlockManager::FindNextBlockPos (19 samples, 0.35%)</title><rect x="42.4774%" y="1301" width="0.3507%" height="15" fill="rgb(211,33,11)" fg:x="2301" fg:w="19"/><text x="42.7274%" y="1311.50"></text></g><g><title>node::BlockManager::FlushBlockFile (19 samples, 0.35%)</title><rect x="42.4774%" y="1285" width="0.3507%" height="15" fill="rgb(221,29,38)" fg:x="2301" fg:w="19"/><text x="42.7274%" y="1295.50"></text></g><g><title>node::BlockManager::FlushUndoFile (3 samples, 0.06%)</title><rect x="42.7728%" y="1269" width="0.0554%" height="15" fill="rgb(206,182,49)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1279.50"></text></g><g><title>FlatFileSeq::Flush (3 samples, 0.06%)</title><rect x="42.7728%" y="1253" width="0.0554%" height="15" fill="rgb(216,140,1)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1263.50"></text></g><g><title>FileCommit (3 samples, 0.06%)</title><rect x="42.7728%" y="1237" width="0.0554%" height="15" fill="rgb(232,57,40)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1247.50"></text></g><g><title>fdatasync (3 samples, 0.06%)</title><rect x="42.7728%" y="1221" width="0.0554%" height="15" fill="rgb(224,186,18)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="42.7728%" y="1205" width="0.0554%" height="15" fill="rgb(215,121,11)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="42.7728%" y="1189" width="0.0554%" height="15" fill="rgb(245,147,10)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="42.7728%" y="1173" width="0.0554%" height="15" fill="rgb(238,153,13)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1183.50"></text></g><g><title>[[ext4]] (3 samples, 0.06%)</title><rect x="42.7728%" y="1157" width="0.0554%" height="15" fill="rgb(233,108,0)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="42.7728%" y="1141" width="0.0554%" height="15" fill="rgb(212,157,17)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="42.7728%" y="1125" width="0.0554%" height="15" fill="rgb(225,213,38)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="42.7728%" y="1109" width="0.0554%" height="15" fill="rgb(248,16,11)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="42.7728%" y="1093" width="0.0554%" height="15" fill="rgb(241,33,4)" fg:x="2317" fg:w="3"/><text x="43.0228%" y="1103.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="42.7912%" y="1077" width="0.0369%" height="15" fill="rgb(222,26,43)" fg:x="2318" fg:w="2"/><text x="43.0412%" y="1087.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="42.7912%" y="1061" width="0.0369%" height="15" fill="rgb(243,29,36)" fg:x="2318" fg:w="2"/><text x="43.0412%" y="1071.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="42.7912%" y="1045" width="0.0369%" height="15" fill="rgb(241,9,27)" fg:x="2318" fg:w="2"/><text x="43.0412%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.7912%" y="1029" width="0.0369%" height="15" fill="rgb(205,117,26)" fg:x="2318" fg:w="2"/><text x="43.0412%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8097%" y="1013" width="0.0185%" height="15" fill="rgb(209,80,39)" fg:x="2319" fg:w="1"/><text x="43.0597%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8097%" y="997" width="0.0185%" height="15" fill="rgb(239,155,6)" fg:x="2319" fg:w="1"/><text x="43.0597%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8097%" y="981" width="0.0185%" height="15" fill="rgb(212,104,12)" fg:x="2319" fg:w="1"/><text x="43.0597%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8097%" y="965" width="0.0185%" height="15" fill="rgb(234,204,3)" fg:x="2319" fg:w="1"/><text x="43.0597%" y="975.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="42.8097%" y="949" width="0.0185%" height="15" fill="rgb(251,218,7)" fg:x="2319" fg:w="1"/><text x="43.0597%" y="959.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="42.8097%" y="933" width="0.0185%" height="15" fill="rgb(221,81,32)" fg:x="2319" fg:w="1"/><text x="43.0597%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8097%" y="917" width="0.0185%" height="15" fill="rgb(214,152,26)" fg:x="2319" fg:w="1"/><text x="43.0597%" y="927.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (4 samples, 0.07%)</title><rect x="42.8651%" y="1141" width="0.0738%" height="15" fill="rgb(223,22,3)" fg:x="2322" fg:w="4"/><text x="43.1151%" y="1151.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (4 samples, 0.07%)</title><rect x="42.8651%" y="1125" width="0.0738%" height="15" fill="rgb(207,174,7)" fg:x="2322" fg:w="4"/><text x="43.1151%" y="1135.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (4 samples, 0.07%)</title><rect x="42.8651%" y="1109" width="0.0738%" height="15" fill="rgb(224,19,52)" fg:x="2322" fg:w="4"/><text x="43.1151%" y="1119.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (4 samples, 0.07%)</title><rect x="42.8651%" y="1093" width="0.0738%" height="15" fill="rgb(228,24,14)" fg:x="2322" fg:w="4"/><text x="43.1151%" y="1103.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (4 samples, 0.07%)</title><rect x="42.8651%" y="1077" width="0.0738%" height="15" fill="rgb(230,153,43)" fg:x="2322" fg:w="4"/><text x="43.1151%" y="1087.50"></text></g><g><title>AutoFile::write (11 samples, 0.20%)</title><rect x="42.8281%" y="1157" width="0.2031%" height="15" fill="rgb(231,106,12)" fg:x="2320" fg:w="11"/><text x="43.0781%" y="1167.50"></text></g><g><title>util::Xor (5 samples, 0.09%)</title><rect x="42.9389%" y="1141" width="0.0923%" height="15" fill="rgb(215,92,2)" fg:x="2326" fg:w="5"/><text x="43.1889%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.0312%" y="805" width="0.0738%" height="15" fill="rgb(249,143,25)" fg:x="2331" fg:w="4"/><text x="43.2812%" y="815.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.0312%" y="789" width="0.0738%" height="15" fill="rgb(252,7,35)" fg:x="2331" fg:w="4"/><text x="43.2812%" y="799.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="43.0312%" y="773" width="0.0738%" height="15" fill="rgb(216,69,40)" fg:x="2331" fg:w="4"/><text x="43.2812%" y="783.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="43.0312%" y="757" width="0.0738%" height="15" fill="rgb(240,36,33)" fg:x="2331" fg:w="4"/><text x="43.2812%" y="767.50"></text></g><g><title>_IO_fwrite (3 samples, 0.06%)</title><rect x="43.0497%" y="741" width="0.0554%" height="15" fill="rgb(231,128,14)" fg:x="2332" fg:w="3"/><text x="43.2997%" y="751.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.0866%" y="725" width="0.0185%" height="15" fill="rgb(245,143,14)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="735.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.0866%" y="709" width="0.0185%" height="15" fill="rgb(222,130,28)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="719.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="43.0866%" y="693" width="0.0185%" height="15" fill="rgb(212,10,48)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="703.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.0866%" y="677" width="0.0185%" height="15" fill="rgb(254,118,45)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="687.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="43.0866%" y="661" width="0.0185%" height="15" fill="rgb(228,6,45)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.0866%" y="645" width="0.0185%" height="15" fill="rgb(241,18,35)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.0866%" y="629" width="0.0185%" height="15" fill="rgb(227,214,53)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.0866%" y="613" width="0.0185%" height="15" fill="rgb(224,107,51)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.0866%" y="597" width="0.0185%" height="15" fill="rgb(248,60,28)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="607.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.0866%" y="581" width="0.0185%" height="15" fill="rgb(249,101,23)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.0866%" y="565" width="0.0185%" height="15" fill="rgb(228,51,19)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="575.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.0866%" y="549" width="0.0185%" height="15" fill="rgb(213,20,6)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.0866%" y="533" width="0.0185%" height="15" fill="rgb(212,124,10)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.0866%" y="517" width="0.0185%" height="15" fill="rgb(248,3,40)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.0866%" y="501" width="0.0185%" height="15" fill="rgb(223,178,23)" fg:x="2334" fg:w="1"/><text x="43.3366%" y="511.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.1420%" y="629" width="0.0185%" height="15" fill="rgb(240,132,45)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="639.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.1420%" y="613" width="0.0185%" height="15" fill="rgb(245,164,36)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="623.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="43.1420%" y="597" width="0.0185%" height="15" fill="rgb(231,188,53)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.1420%" y="581" width="0.0185%" height="15" fill="rgb(237,198,39)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="591.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="43.1420%" y="565" width="0.0185%" height="15" fill="rgb(223,120,35)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="549" width="0.0185%" height="15" fill="rgb(253,107,49)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="533" width="0.0185%" height="15" fill="rgb(216,44,31)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="517" width="0.0185%" height="15" fill="rgb(253,87,21)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="501" width="0.0185%" height="15" fill="rgb(226,18,2)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="511.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.1420%" y="485" width="0.0185%" height="15" fill="rgb(216,8,46)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="469" width="0.0185%" height="15" fill="rgb(226,140,39)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="479.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.1420%" y="453" width="0.0185%" height="15" fill="rgb(221,194,54)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="437" width="0.0185%" height="15" fill="rgb(213,92,11)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="421" width="0.0185%" height="15" fill="rgb(229,162,46)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="405" width="0.0185%" height="15" fill="rgb(214,111,36)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="389" width="0.0185%" height="15" fill="rgb(207,6,21)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.1420%" y="373" width="0.0185%" height="15" fill="rgb(213,127,38)" fg:x="2337" fg:w="1"/><text x="43.3920%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.1050%" y="709" width="0.0738%" height="15" fill="rgb(238,118,32)" fg:x="2335" fg:w="4"/><text x="43.3550%" y="719.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.1050%" y="693" width="0.0738%" height="15" fill="rgb(240,139,39)" fg:x="2335" fg:w="4"/><text x="43.3550%" y="703.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="43.1050%" y="677" width="0.0738%" height="15" fill="rgb(235,10,37)" fg:x="2335" fg:w="4"/><text x="43.3550%" y="687.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="43.1050%" y="661" width="0.0738%" height="15" fill="rgb(249,171,38)" fg:x="2335" fg:w="4"/><text x="43.3550%" y="671.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="43.1050%" y="645" width="0.0738%" height="15" fill="rgb(242,144,32)" fg:x="2335" fg:w="4"/><text x="43.3550%" y="655.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="43.1604%" y="629" width="0.0185%" height="15" fill="rgb(217,117,21)" fg:x="2338" fg:w="1"/><text x="43.4104%" y="639.50"></text></g><g><title>[[ext4]] (7 samples, 0.13%)</title><rect x="43.1973%" y="405" width="0.1292%" height="15" fill="rgb(249,87,1)" fg:x="2340" fg:w="7"/><text x="43.4473%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="43.1973%" y="389" width="0.1292%" height="15" fill="rgb(248,196,48)" fg:x="2340" fg:w="7"/><text x="43.4473%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="43.1973%" y="373" width="0.1292%" height="15" fill="rgb(251,206,33)" fg:x="2340" fg:w="7"/><text x="43.4473%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="43.2158%" y="357" width="0.1108%" height="15" fill="rgb(232,141,28)" fg:x="2341" fg:w="6"/><text x="43.4658%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="43.2343%" y="341" width="0.0923%" height="15" fill="rgb(209,167,14)" fg:x="2342" fg:w="5"/><text x="43.4843%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="43.2527%" y="325" width="0.0738%" height="15" fill="rgb(225,11,50)" fg:x="2343" fg:w="4"/><text x="43.5027%" y="335.50"></text></g><g><title>_IO_fwrite (9 samples, 0.17%)</title><rect x="43.1789%" y="597" width="0.1661%" height="15" fill="rgb(209,50,20)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="607.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (9 samples, 0.17%)</title><rect x="43.1789%" y="581" width="0.1661%" height="15" fill="rgb(212,17,46)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="591.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (9 samples, 0.17%)</title><rect x="43.1789%" y="565" width="0.1661%" height="15" fill="rgb(216,101,39)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="575.50"></text></g><g><title>new_do_write (9 samples, 0.17%)</title><rect x="43.1789%" y="549" width="0.1661%" height="15" fill="rgb(212,228,48)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="559.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (9 samples, 0.17%)</title><rect x="43.1789%" y="533" width="0.1661%" height="15" fill="rgb(250,6,50)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="543.50"></text></g><g><title>__GI___libc_write (9 samples, 0.17%)</title><rect x="43.1789%" y="517" width="0.1661%" height="15" fill="rgb(250,160,48)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="527.50"></text></g><g><title>[unknown] (9 samples, 0.17%)</title><rect x="43.1789%" y="501" width="0.1661%" height="15" fill="rgb(244,216,33)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="511.50"></text></g><g><title>[unknown] (9 samples, 0.17%)</title><rect x="43.1789%" y="485" width="0.1661%" height="15" fill="rgb(207,157,5)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="495.50"></text></g><g><title>[unknown] (9 samples, 0.17%)</title><rect x="43.1789%" y="469" width="0.1661%" height="15" fill="rgb(228,199,8)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="479.50"></text></g><g><title>[unknown] (9 samples, 0.17%)</title><rect x="43.1789%" y="453" width="0.1661%" height="15" fill="rgb(227,80,20)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="463.50"></text></g><g><title>[[ext4]] (9 samples, 0.17%)</title><rect x="43.1789%" y="437" width="0.1661%" height="15" fill="rgb(222,9,33)" fg:x="2339" fg:w="9"/><text x="43.4289%" y="447.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="43.1973%" y="421" width="0.1477%" height="15" fill="rgb(239,44,28)" fg:x="2340" fg:w="8"/><text x="43.4473%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.3266%" y="405" width="0.0185%" height="15" fill="rgb(249,187,43)" fg:x="2347" fg:w="1"/><text x="43.5766%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.3266%" y="389" width="0.0185%" height="15" fill="rgb(216,141,28)" fg:x="2347" fg:w="1"/><text x="43.5766%" y="399.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="43.3450%" y="597" width="0.0185%" height="15" fill="rgb(230,154,53)" fg:x="2348" fg:w="1"/><text x="43.5950%" y="607.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="43.3450%" y="581" width="0.0185%" height="15" fill="rgb(227,82,4)" fg:x="2348" fg:w="1"/><text x="43.5950%" y="591.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="43.3450%" y="565" width="0.0185%" height="15" fill="rgb(220,107,16)" fg:x="2348" fg:w="1"/><text x="43.5950%" y="575.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="43.3450%" y="549" width="0.0185%" height="15" fill="rgb(207,187,2)" fg:x="2348" fg:w="1"/><text x="43.5950%" y="559.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="43.3450%" y="533" width="0.0185%" height="15" fill="rgb(210,162,52)" fg:x="2348" fg:w="1"/><text x="43.5950%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (19 samples, 0.35%)</title><rect x="43.1050%" y="805" width="0.3507%" height="15" fill="rgb(217,216,49)" fg:x="2335" fg:w="19"/><text x="43.3550%" y="815.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.35%)</title><rect x="43.1050%" y="789" width="0.3507%" height="15" fill="rgb(218,146,49)" fg:x="2335" fg:w="19"/><text x="43.3550%" y="799.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.35%)</title><rect x="43.1050%" y="773" width="0.3507%" height="15" fill="rgb(216,55,40)" fg:x="2335" fg:w="19"/><text x="43.3550%" y="783.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (19 samples, 0.35%)</title><rect x="43.1050%" y="757" width="0.3507%" height="15" fill="rgb(208,196,21)" fg:x="2335" fg:w="19"/><text x="43.3550%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (19 samples, 0.35%)</title><rect x="43.1050%" y="741" width="0.3507%" height="15" fill="rgb(242,117,42)" fg:x="2335" fg:w="19"/><text x="43.3550%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (19 samples, 0.35%)</title><rect x="43.1050%" y="725" width="0.3507%" height="15" fill="rgb(210,11,23)" fg:x="2335" fg:w="19"/><text x="43.3550%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (15 samples, 0.28%)</title><rect x="43.1789%" y="709" width="0.2769%" height="15" fill="rgb(217,110,2)" fg:x="2339" fg:w="15"/><text x="43.4289%" y="719.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.28%)</title><rect x="43.1789%" y="693" width="0.2769%" height="15" fill="rgb(229,77,54)" fg:x="2339" fg:w="15"/><text x="43.4289%" y="703.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.28%)</title><rect x="43.1789%" y="677" width="0.2769%" height="15" fill="rgb(218,53,16)" fg:x="2339" fg:w="15"/><text x="43.4289%" y="687.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (15 samples, 0.28%)</title><rect x="43.1789%" y="661" width="0.2769%" height="15" fill="rgb(215,38,13)" fg:x="2339" fg:w="15"/><text x="43.4289%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (15 samples, 0.28%)</title><rect x="43.1789%" y="645" width="0.2769%" height="15" fill="rgb(235,42,18)" fg:x="2339" fg:w="15"/><text x="43.4289%" y="655.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (15 samples, 0.28%)</title><rect x="43.1789%" y="629" width="0.2769%" height="15" fill="rgb(219,66,54)" fg:x="2339" fg:w="15"/><text x="43.4289%" y="639.50"></text></g><g><title>AutoFile::write (15 samples, 0.28%)</title><rect x="43.1789%" y="613" width="0.2769%" height="15" fill="rgb(222,205,4)" fg:x="2339" fg:w="15"/><text x="43.4289%" y="623.50"></text></g><g><title>util::Xor (5 samples, 0.09%)</title><rect x="43.3635%" y="597" width="0.0923%" height="15" fill="rgb(227,213,46)" fg:x="2349" fg:w="5"/><text x="43.6135%" y="607.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="43.4373%" y="581" width="0.0185%" height="15" fill="rgb(250,145,42)" fg:x="2353" fg:w="1"/><text x="43.6873%" y="591.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="43.4373%" y="565" width="0.0185%" height="15" fill="rgb(219,15,2)" fg:x="2353" fg:w="1"/><text x="43.6873%" y="575.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.4558%" y="469" width="0.0185%" height="15" fill="rgb(231,181,52)" fg:x="2354" fg:w="1"/><text x="43.7058%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.4558%" y="453" width="0.0185%" height="15" fill="rgb(235,1,42)" fg:x="2354" fg:w="1"/><text x="43.7058%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.4558%" y="437" width="0.0185%" height="15" fill="rgb(249,88,27)" fg:x="2354" fg:w="1"/><text x="43.7058%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.4558%" y="421" width="0.0185%" height="15" fill="rgb(235,145,16)" fg:x="2354" fg:w="1"/><text x="43.7058%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.4558%" y="405" width="0.0185%" height="15" fill="rgb(237,114,19)" fg:x="2354" fg:w="1"/><text x="43.7058%" y="415.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="43.4558%" y="693" width="0.0369%" height="15" fill="rgb(238,51,50)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="703.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="43.4558%" y="677" width="0.0369%" height="15" fill="rgb(205,194,25)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="687.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="43.4558%" y="661" width="0.0369%" height="15" fill="rgb(215,203,17)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="671.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="43.4558%" y="645" width="0.0369%" height="15" fill="rgb(233,112,49)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="655.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="43.4558%" y="629" width="0.0369%" height="15" fill="rgb(241,130,26)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="639.50"></text></g><g><title>new_do_write (2 samples, 0.04%)</title><rect x="43.4558%" y="613" width="0.0369%" height="15" fill="rgb(252,223,19)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="623.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="43.4558%" y="597" width="0.0369%" height="15" fill="rgb(211,95,25)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="607.50"></text></g><g><title>__GI___libc_write (2 samples, 0.04%)</title><rect x="43.4558%" y="581" width="0.0369%" height="15" fill="rgb(251,182,27)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="43.4558%" y="565" width="0.0369%" height="15" fill="rgb(238,24,4)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="43.4558%" y="549" width="0.0369%" height="15" fill="rgb(224,220,25)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="43.4558%" y="533" width="0.0369%" height="15" fill="rgb(239,133,26)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="43.4558%" y="517" width="0.0369%" height="15" fill="rgb(211,94,48)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="527.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="43.4558%" y="501" width="0.0369%" height="15" fill="rgb(239,87,6)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="43.4558%" y="485" width="0.0369%" height="15" fill="rgb(227,62,0)" fg:x="2354" fg:w="2"/><text x="43.7058%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.4742%" y="469" width="0.0185%" height="15" fill="rgb(211,226,4)" fg:x="2355" fg:w="1"/><text x="43.7242%" y="479.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (31 samples, 0.57%)</title><rect x="43.0312%" y="917" width="0.5723%" height="15" fill="rgb(253,38,52)" fg:x="2331" fg:w="31"/><text x="43.2812%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (31 samples, 0.57%)</title><rect x="43.0312%" y="901" width="0.5723%" height="15" fill="rgb(229,126,40)" fg:x="2331" fg:w="31"/><text x="43.2812%" y="911.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.57%)</title><rect x="43.0312%" y="885" width="0.5723%" height="15" fill="rgb(229,165,44)" fg:x="2331" fg:w="31"/><text x="43.2812%" y="895.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.57%)</title><rect x="43.0312%" y="869" width="0.5723%" height="15" fill="rgb(247,95,47)" fg:x="2331" fg:w="31"/><text x="43.2812%" y="879.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (31 samples, 0.57%)</title><rect x="43.0312%" y="853" width="0.5723%" height="15" fill="rgb(216,140,30)" fg:x="2331" fg:w="31"/><text x="43.2812%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (31 samples, 0.57%)</title><rect x="43.0312%" y="837" width="0.5723%" height="15" fill="rgb(246,214,8)" fg:x="2331" fg:w="31"/><text x="43.2812%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (31 samples, 0.57%)</title><rect x="43.0312%" y="821" width="0.5723%" height="15" fill="rgb(227,224,15)" fg:x="2331" fg:w="31"/><text x="43.2812%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (8 samples, 0.15%)</title><rect x="43.4558%" y="805" width="0.1477%" height="15" fill="rgb(233,175,4)" fg:x="2354" fg:w="8"/><text x="43.7058%" y="815.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.15%)</title><rect x="43.4558%" y="789" width="0.1477%" height="15" fill="rgb(221,66,45)" fg:x="2354" fg:w="8"/><text x="43.7058%" y="799.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.15%)</title><rect x="43.4558%" y="773" width="0.1477%" height="15" fill="rgb(221,178,18)" fg:x="2354" fg:w="8"/><text x="43.7058%" y="783.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (8 samples, 0.15%)</title><rect x="43.4558%" y="757" width="0.1477%" height="15" fill="rgb(213,81,29)" fg:x="2354" fg:w="8"/><text x="43.7058%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.15%)</title><rect x="43.4558%" y="741" width="0.1477%" height="15" fill="rgb(220,89,49)" fg:x="2354" fg:w="8"/><text x="43.7058%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.15%)</title><rect x="43.4558%" y="725" width="0.1477%" height="15" fill="rgb(227,60,33)" fg:x="2354" fg:w="8"/><text x="43.7058%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (8 samples, 0.15%)</title><rect x="43.4558%" y="709" width="0.1477%" height="15" fill="rgb(205,113,12)" fg:x="2354" fg:w="8"/><text x="43.7058%" y="719.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="43.4927%" y="693" width="0.1108%" height="15" fill="rgb(211,32,1)" fg:x="2356" fg:w="6"/><text x="43.7427%" y="703.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="43.4927%" y="677" width="0.1108%" height="15" fill="rgb(246,2,12)" fg:x="2356" fg:w="6"/><text x="43.7427%" y="687.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (6 samples, 0.11%)</title><rect x="43.4927%" y="661" width="0.1108%" height="15" fill="rgb(243,37,27)" fg:x="2356" fg:w="6"/><text x="43.7427%" y="671.50"></text></g><g><title>AutoFile::write (6 samples, 0.11%)</title><rect x="43.4927%" y="645" width="0.1108%" height="15" fill="rgb(248,211,31)" fg:x="2356" fg:w="6"/><text x="43.7427%" y="655.50"></text></g><g><title>_IO_fwrite (6 samples, 0.11%)</title><rect x="43.4927%" y="629" width="0.1108%" height="15" fill="rgb(242,146,47)" fg:x="2356" fg:w="6"/><text x="43.7427%" y="639.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="43.5850%" y="613" width="0.0185%" height="15" fill="rgb(206,70,20)" fg:x="2361" fg:w="1"/><text x="43.8350%" y="623.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (35 samples, 0.65%)</title><rect x="43.0312%" y="997" width="0.6461%" height="15" fill="rgb(215,10,51)" fg:x="2331" fg:w="35"/><text x="43.2812%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (35 samples, 0.65%)</title><rect x="43.0312%" y="981" width="0.6461%" height="15" fill="rgb(243,178,53)" fg:x="2331" fg:w="35"/><text x="43.2812%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (35 samples, 0.65%)</title><rect x="43.0312%" y="965" width="0.6461%" height="15" fill="rgb(233,221,20)" fg:x="2331" fg:w="35"/><text x="43.2812%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (35 samples, 0.65%)</title><rect x="43.0312%" y="949" width="0.6461%" height="15" fill="rgb(218,95,35)" fg:x="2331" fg:w="35"/><text x="43.2812%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (35 samples, 0.65%)</title><rect x="43.0312%" y="933" width="0.6461%" height="15" fill="rgb(229,13,5)" fg:x="2331" fg:w="35"/><text x="43.2812%" y="943.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.6035%" y="917" width="0.0738%" height="15" fill="rgb(252,164,30)" fg:x="2362" fg:w="4"/><text x="43.8535%" y="927.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.6035%" y="901" width="0.0738%" height="15" fill="rgb(232,68,36)" fg:x="2362" fg:w="4"/><text x="43.8535%" y="911.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="43.6035%" y="885" width="0.0738%" height="15" fill="rgb(219,59,54)" fg:x="2362" fg:w="4"/><text x="43.8535%" y="895.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="43.6035%" y="869" width="0.0738%" height="15" fill="rgb(250,92,33)" fg:x="2362" fg:w="4"/><text x="43.8535%" y="879.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="43.6035%" y="853" width="0.0738%" height="15" fill="rgb(229,162,54)" fg:x="2362" fg:w="4"/><text x="43.8535%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="43.6773%" y="805" width="0.0554%" height="15" fill="rgb(244,114,52)" fg:x="2366" fg:w="3"/><text x="43.9273%" y="815.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="43.6773%" y="789" width="0.0554%" height="15" fill="rgb(212,211,43)" fg:x="2366" fg:w="3"/><text x="43.9273%" y="799.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (3 samples, 0.06%)</title><rect x="43.6773%" y="773" width="0.0554%" height="15" fill="rgb(226,147,8)" fg:x="2366" fg:w="3"/><text x="43.9273%" y="783.50"></text></g><g><title>AutoFile::write (3 samples, 0.06%)</title><rect x="43.6773%" y="757" width="0.0554%" height="15" fill="rgb(226,23,13)" fg:x="2366" fg:w="3"/><text x="43.9273%" y="767.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="43.7142%" y="741" width="0.0185%" height="15" fill="rgb(240,63,4)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="751.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.7142%" y="725" width="0.0185%" height="15" fill="rgb(221,1,32)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="735.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.7142%" y="709" width="0.0185%" height="15" fill="rgb(242,117,10)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="719.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="43.7142%" y="693" width="0.0185%" height="15" fill="rgb(249,172,44)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="703.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.7142%" y="677" width="0.0185%" height="15" fill="rgb(244,46,45)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="687.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="43.7142%" y="661" width="0.0185%" height="15" fill="rgb(206,43,17)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7142%" y="645" width="0.0185%" height="15" fill="rgb(239,218,39)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7142%" y="629" width="0.0185%" height="15" fill="rgb(208,169,54)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7142%" y="613" width="0.0185%" height="15" fill="rgb(247,25,42)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7142%" y="597" width="0.0185%" height="15" fill="rgb(226,23,31)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="607.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.7142%" y="581" width="0.0185%" height="15" fill="rgb(247,16,28)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7142%" y="565" width="0.0185%" height="15" fill="rgb(231,147,38)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7142%" y="549" width="0.0185%" height="15" fill="rgb(253,81,48)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7142%" y="533" width="0.0185%" height="15" fill="rgb(249,222,43)" fg:x="2368" fg:w="1"/><text x="43.9642%" y="543.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="43.7696%" y="629" width="0.0185%" height="15" fill="rgb(221,3,27)" fg:x="2371" fg:w="1"/><text x="44.0196%" y="639.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.8065%" y="581" width="0.0185%" height="15" fill="rgb(228,180,5)" fg:x="2373" fg:w="1"/><text x="44.0565%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.8065%" y="565" width="0.0185%" height="15" fill="rgb(227,131,42)" fg:x="2373" fg:w="1"/><text x="44.0565%" y="575.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.8804%" y="453" width="0.0185%" height="15" fill="rgb(212,3,39)" fg:x="2377" fg:w="1"/><text x="44.1304%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.8804%" y="437" width="0.0185%" height="15" fill="rgb(226,45,5)" fg:x="2377" fg:w="1"/><text x="44.1304%" y="447.50"></text></g><g><title>[[ext4]] (12 samples, 0.22%)</title><rect x="43.8619%" y="469" width="0.2215%" height="15" fill="rgb(215,167,45)" fg:x="2376" fg:w="12"/><text x="44.1119%" y="479.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="43.8988%" y="453" width="0.1846%" height="15" fill="rgb(250,218,53)" fg:x="2378" fg:w="10"/><text x="44.1488%" y="463.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="43.8988%" y="437" width="0.1846%" height="15" fill="rgb(207,140,0)" fg:x="2378" fg:w="10"/><text x="44.1488%" y="447.50"></text></g><g><title>[unknown] (9 samples, 0.17%)</title><rect x="43.9173%" y="421" width="0.1661%" height="15" fill="rgb(238,133,51)" fg:x="2379" fg:w="9"/><text x="44.1673%" y="431.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="43.9358%" y="405" width="0.1477%" height="15" fill="rgb(218,203,53)" fg:x="2380" fg:w="8"/><text x="44.1858%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="43.9542%" y="389" width="0.1292%" height="15" fill="rgb(226,184,25)" fg:x="2381" fg:w="7"/><text x="44.2042%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="44.0465%" y="373" width="0.0369%" height="15" fill="rgb(231,121,21)" fg:x="2386" fg:w="2"/><text x="44.2965%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.0650%" y="357" width="0.0185%" height="15" fill="rgb(251,14,34)" fg:x="2387" fg:w="1"/><text x="44.3150%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.0650%" y="341" width="0.0185%" height="15" fill="rgb(249,193,11)" fg:x="2387" fg:w="1"/><text x="44.3150%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.0650%" y="325" width="0.0185%" height="15" fill="rgb(220,172,37)" fg:x="2387" fg:w="1"/><text x="44.3150%" y="335.50"></text></g><g><title>[[ext4]] (13 samples, 0.24%)</title><rect x="43.8619%" y="501" width="0.2400%" height="15" fill="rgb(231,229,43)" fg:x="2376" fg:w="13"/><text x="44.1119%" y="511.50"></text></g><g><title>[unknown] (13 samples, 0.24%)</title><rect x="43.8619%" y="485" width="0.2400%" height="15" fill="rgb(250,161,5)" fg:x="2376" fg:w="13"/><text x="44.1119%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.0834%" y="469" width="0.0185%" height="15" fill="rgb(218,225,18)" fg:x="2388" fg:w="1"/><text x="44.3334%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.0834%" y="453" width="0.0185%" height="15" fill="rgb(245,45,42)" fg:x="2388" fg:w="1"/><text x="44.3334%" y="463.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (20 samples, 0.37%)</title><rect x="43.7881%" y="629" width="0.3692%" height="15" fill="rgb(211,115,1)" fg:x="2372" fg:w="20"/><text x="44.0381%" y="639.50"></text></g><g><title>new_do_write (20 samples, 0.37%)</title><rect x="43.7881%" y="613" width="0.3692%" height="15" fill="rgb(248,133,52)" fg:x="2372" fg:w="20"/><text x="44.0381%" y="623.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (20 samples, 0.37%)</title><rect x="43.7881%" y="597" width="0.3692%" height="15" fill="rgb(238,100,21)" fg:x="2372" fg:w="20"/><text x="44.0381%" y="607.50"></text></g><g><title>__GI___libc_write (18 samples, 0.33%)</title><rect x="43.8250%" y="581" width="0.3323%" height="15" fill="rgb(247,144,11)" fg:x="2374" fg:w="18"/><text x="44.0750%" y="591.50"></text></g><g><title>[unknown] (18 samples, 0.33%)</title><rect x="43.8250%" y="565" width="0.3323%" height="15" fill="rgb(206,164,16)" fg:x="2374" fg:w="18"/><text x="44.0750%" y="575.50"></text></g><g><title>[unknown] (18 samples, 0.33%)</title><rect x="43.8250%" y="549" width="0.3323%" height="15" fill="rgb(222,34,3)" fg:x="2374" fg:w="18"/><text x="44.0750%" y="559.50"></text></g><g><title>[unknown] (18 samples, 0.33%)</title><rect x="43.8250%" y="533" width="0.3323%" height="15" fill="rgb(248,82,4)" fg:x="2374" fg:w="18"/><text x="44.0750%" y="543.50"></text></g><g><title>[unknown] (17 samples, 0.31%)</title><rect x="43.8435%" y="517" width="0.3138%" height="15" fill="rgb(228,81,46)" fg:x="2375" fg:w="17"/><text x="44.0935%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="44.1019%" y="501" width="0.0554%" height="15" fill="rgb(227,67,47)" fg:x="2389" fg:w="3"/><text x="44.3519%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.1388%" y="485" width="0.0185%" height="15" fill="rgb(215,93,53)" fg:x="2391" fg:w="1"/><text x="44.3888%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.1388%" y="469" width="0.0185%" height="15" fill="rgb(248,194,39)" fg:x="2391" fg:w="1"/><text x="44.3888%" y="479.50"></text></g><g><title>_IO_fwrite (23 samples, 0.42%)</title><rect x="43.7512%" y="661" width="0.4246%" height="15" fill="rgb(215,5,19)" fg:x="2370" fg:w="23"/><text x="44.0012%" y="671.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (22 samples, 0.41%)</title><rect x="43.7696%" y="645" width="0.4061%" height="15" fill="rgb(226,215,51)" fg:x="2371" fg:w="22"/><text x="44.0196%" y="655.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="44.1573%" y="629" width="0.0185%" height="15" fill="rgb(225,56,26)" fg:x="2392" fg:w="1"/><text x="44.4073%" y="639.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (3 samples, 0.06%)</title><rect x="44.1757%" y="661" width="0.0554%" height="15" fill="rgb(222,75,29)" fg:x="2393" fg:w="3"/><text x="44.4257%" y="671.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (3 samples, 0.06%)</title><rect x="44.1757%" y="645" width="0.0554%" height="15" fill="rgb(236,139,6)" fg:x="2393" fg:w="3"/><text x="44.4257%" y="655.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (3 samples, 0.06%)</title><rect x="44.1757%" y="629" width="0.0554%" height="15" fill="rgb(223,137,36)" fg:x="2393" fg:w="3"/><text x="44.4257%" y="639.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (3 samples, 0.06%)</title><rect x="44.1757%" y="613" width="0.0554%" height="15" fill="rgb(226,99,2)" fg:x="2393" fg:w="3"/><text x="44.4257%" y="623.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (3 samples, 0.06%)</title><rect x="44.1757%" y="597" width="0.0554%" height="15" fill="rgb(206,133,23)" fg:x="2393" fg:w="3"/><text x="44.4257%" y="607.50"></text></g><g><title>AutoFile::write (30 samples, 0.55%)</title><rect x="43.7327%" y="677" width="0.5538%" height="15" fill="rgb(243,173,15)" fg:x="2369" fg:w="30"/><text x="43.9827%" y="687.50"></text></g><g><title>util::Xor (3 samples, 0.06%)</title><rect x="44.2311%" y="661" width="0.0554%" height="15" fill="rgb(228,69,28)" fg:x="2396" fg:w="3"/><text x="44.4811%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="44.2865%" y="213" width="0.0185%" height="15" fill="rgb(212,51,22)" fg:x="2399" fg:w="1"/><text x="44.5365%" y="223.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (33 samples, 0.61%)</title><rect x="43.7327%" y="693" width="0.6092%" height="15" fill="rgb(227,113,0)" fg:x="2369" fg:w="33"/><text x="43.9827%" y="703.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="677" width="0.0554%" height="15" fill="rgb(252,84,27)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="661" width="0.0554%" height="15" fill="rgb(223,145,39)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="645" width="0.0554%" height="15" fill="rgb(239,219,30)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="655.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="629" width="0.0554%" height="15" fill="rgb(224,196,39)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="613" width="0.0554%" height="15" fill="rgb(205,35,43)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="597" width="0.0554%" height="15" fill="rgb(228,201,21)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="581" width="0.0554%" height="15" fill="rgb(237,118,16)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="565" width="0.0554%" height="15" fill="rgb(241,17,19)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="575.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="549" width="0.0554%" height="15" fill="rgb(214,10,25)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="559.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="533" width="0.0554%" height="15" fill="rgb(238,37,29)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="543.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (3 samples, 0.06%)</title><rect x="44.2865%" y="517" width="0.0554%" height="15" fill="rgb(253,83,25)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="501" width="0.0554%" height="15" fill="rgb(234,192,12)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="485" width="0.0554%" height="15" fill="rgb(241,216,45)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="495.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="469" width="0.0554%" height="15" fill="rgb(242,22,33)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="479.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="453" width="0.0554%" height="15" fill="rgb(231,105,49)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="463.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="437" width="0.0554%" height="15" fill="rgb(218,204,15)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="421" width="0.0554%" height="15" fill="rgb(235,138,41)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="431.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="405" width="0.0554%" height="15" fill="rgb(246,0,9)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="415.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="389" width="0.0554%" height="15" fill="rgb(210,74,4)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="399.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="373" width="0.0554%" height="15" fill="rgb(250,60,41)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="383.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="357" width="0.0554%" height="15" fill="rgb(220,115,12)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="367.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="341" width="0.0554%" height="15" fill="rgb(237,100,13)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="351.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="325" width="0.0554%" height="15" fill="rgb(213,55,26)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="335.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="309" width="0.0554%" height="15" fill="rgb(216,17,4)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="319.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="293" width="0.0554%" height="15" fill="rgb(220,153,47)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="303.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="277" width="0.0554%" height="15" fill="rgb(215,131,9)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="287.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="261" width="0.0554%" height="15" fill="rgb(233,46,42)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="271.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="245" width="0.0554%" height="15" fill="rgb(226,86,7)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="255.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.06%)</title><rect x="44.2865%" y="229" width="0.0554%" height="15" fill="rgb(239,226,21)" fg:x="2399" fg:w="3"/><text x="44.5365%" y="239.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (2 samples, 0.04%)</title><rect x="44.3050%" y="213" width="0.0369%" height="15" fill="rgb(244,137,22)" fg:x="2400" fg:w="2"/><text x="44.5550%" y="223.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (2 samples, 0.04%)</title><rect x="44.3050%" y="197" width="0.0369%" height="15" fill="rgb(211,139,35)" fg:x="2400" fg:w="2"/><text x="44.5550%" y="207.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (2 samples, 0.04%)</title><rect x="44.3050%" y="181" width="0.0369%" height="15" fill="rgb(214,62,50)" fg:x="2400" fg:w="2"/><text x="44.5550%" y="191.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (39 samples, 0.72%)</title><rect x="43.6773%" y="917" width="0.7200%" height="15" fill="rgb(212,113,44)" fg:x="2366" fg:w="39"/><text x="43.9273%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (39 samples, 0.72%)</title><rect x="43.6773%" y="901" width="0.7200%" height="15" fill="rgb(226,150,43)" fg:x="2366" fg:w="39"/><text x="43.9273%" y="911.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (39 samples, 0.72%)</title><rect x="43.6773%" y="885" width="0.7200%" height="15" fill="rgb(250,71,37)" fg:x="2366" fg:w="39"/><text x="43.9273%" y="895.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (39 samples, 0.72%)</title><rect x="43.6773%" y="869" width="0.7200%" height="15" fill="rgb(219,76,19)" fg:x="2366" fg:w="39"/><text x="43.9273%" y="879.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (39 samples, 0.72%)</title><rect x="43.6773%" y="853" width="0.7200%" height="15" fill="rgb(250,39,11)" fg:x="2366" fg:w="39"/><text x="43.9273%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (39 samples, 0.72%)</title><rect x="43.6773%" y="837" width="0.7200%" height="15" fill="rgb(230,64,31)" fg:x="2366" fg:w="39"/><text x="43.9273%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (39 samples, 0.72%)</title><rect x="43.6773%" y="821" width="0.7200%" height="15" fill="rgb(208,222,23)" fg:x="2366" fg:w="39"/><text x="43.9273%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (36 samples, 0.66%)</title><rect x="43.7327%" y="805" width="0.6646%" height="15" fill="rgb(227,125,18)" fg:x="2369" fg:w="36"/><text x="43.9827%" y="815.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (36 samples, 0.66%)</title><rect x="43.7327%" y="789" width="0.6646%" height="15" fill="rgb(234,210,9)" fg:x="2369" fg:w="36"/><text x="43.9827%" y="799.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (36 samples, 0.66%)</title><rect x="43.7327%" y="773" width="0.6646%" height="15" fill="rgb(217,127,24)" fg:x="2369" fg:w="36"/><text x="43.9827%" y="783.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (36 samples, 0.66%)</title><rect x="43.7327%" y="757" width="0.6646%" height="15" fill="rgb(239,141,48)" fg:x="2369" fg:w="36"/><text x="43.9827%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (36 samples, 0.66%)</title><rect x="43.7327%" y="741" width="0.6646%" height="15" fill="rgb(227,109,8)" fg:x="2369" fg:w="36"/><text x="43.9827%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (36 samples, 0.66%)</title><rect x="43.7327%" y="725" width="0.6646%" height="15" fill="rgb(235,184,23)" fg:x="2369" fg:w="36"/><text x="43.9827%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (36 samples, 0.66%)</title><rect x="43.7327%" y="709" width="0.6646%" height="15" fill="rgb(227,226,48)" fg:x="2369" fg:w="36"/><text x="43.9827%" y="719.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="44.3419%" y="693" width="0.0554%" height="15" fill="rgb(206,150,11)" fg:x="2402" fg:w="3"/><text x="44.5919%" y="703.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="44.3419%" y="677" width="0.0554%" height="15" fill="rgb(254,2,33)" fg:x="2402" fg:w="3"/><text x="44.5919%" y="687.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (3 samples, 0.06%)</title><rect x="44.3419%" y="661" width="0.0554%" height="15" fill="rgb(243,160,20)" fg:x="2402" fg:w="3"/><text x="44.5919%" y="671.50"></text></g><g><title>AutoFile::write (3 samples, 0.06%)</title><rect x="44.3419%" y="645" width="0.0554%" height="15" fill="rgb(218,208,30)" fg:x="2402" fg:w="3"/><text x="44.5919%" y="655.50"></text></g><g><title>_IO_fwrite (3 samples, 0.06%)</title><rect x="44.3419%" y="629" width="0.0554%" height="15" fill="rgb(224,120,49)" fg:x="2402" fg:w="3"/><text x="44.5919%" y="639.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (41 samples, 0.76%)</title><rect x="43.6773%" y="997" width="0.7569%" height="15" fill="rgb(246,12,2)" fg:x="2366" fg:w="41"/><text x="43.9273%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (41 samples, 0.76%)</title><rect x="43.6773%" y="981" width="0.7569%" height="15" fill="rgb(236,117,3)" fg:x="2366" fg:w="41"/><text x="43.9273%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.76%)</title><rect x="43.6773%" y="965" width="0.7569%" height="15" fill="rgb(216,128,52)" fg:x="2366" fg:w="41"/><text x="43.9273%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.76%)</title><rect x="43.6773%" y="949" width="0.7569%" height="15" fill="rgb(246,145,19)" fg:x="2366" fg:w="41"/><text x="43.9273%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (41 samples, 0.76%)</title><rect x="43.6773%" y="933" width="0.7569%" height="15" fill="rgb(222,11,46)" fg:x="2366" fg:w="41"/><text x="43.9273%" y="943.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.3973%" y="917" width="0.0369%" height="15" fill="rgb(245,82,36)" fg:x="2405" fg:w="2"/><text x="44.6473%" y="927.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.3973%" y="901" width="0.0369%" height="15" fill="rgb(250,73,51)" fg:x="2405" fg:w="2"/><text x="44.6473%" y="911.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="44.3973%" y="885" width="0.0369%" height="15" fill="rgb(221,189,23)" fg:x="2405" fg:w="2"/><text x="44.6473%" y="895.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="44.3973%" y="869" width="0.0369%" height="15" fill="rgb(210,33,7)" fg:x="2405" fg:w="2"/><text x="44.6473%" y="879.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="44.3973%" y="853" width="0.0369%" height="15" fill="rgb(210,107,22)" fg:x="2405" fg:w="2"/><text x="44.6473%" y="863.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.5819%" y="629" width="0.0185%" height="15" fill="rgb(222,116,37)" fg:x="2415" fg:w="1"/><text x="44.8319%" y="639.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.5819%" y="613" width="0.0185%" height="15" fill="rgb(254,17,48)" fg:x="2415" fg:w="1"/><text x="44.8319%" y="623.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="44.5819%" y="645" width="0.0738%" height="15" fill="rgb(224,36,32)" fg:x="2415" fg:w="4"/><text x="44.8319%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="44.6003%" y="629" width="0.0554%" height="15" fill="rgb(232,90,46)" fg:x="2416" fg:w="3"/><text x="44.8503%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="44.6003%" y="613" width="0.0554%" height="15" fill="rgb(241,66,40)" fg:x="2416" fg:w="3"/><text x="44.8503%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="44.6003%" y="597" width="0.0554%" height="15" fill="rgb(249,184,29)" fg:x="2416" fg:w="3"/><text x="44.8503%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="44.6003%" y="581" width="0.0554%" height="15" fill="rgb(231,181,1)" fg:x="2416" fg:w="3"/><text x="44.8503%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="44.6003%" y="565" width="0.0554%" height="15" fill="rgb(224,94,2)" fg:x="2416" fg:w="3"/><text x="44.8503%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.6373%" y="549" width="0.0185%" height="15" fill="rgb(229,170,15)" fg:x="2418" fg:w="1"/><text x="44.8873%" y="559.50"></text></g><g><title>[[ext4]] (28 samples, 0.52%)</title><rect x="44.5634%" y="661" width="0.5169%" height="15" fill="rgb(240,127,35)" fg:x="2414" fg:w="28"/><text x="44.8134%" y="671.50"></text></g><g><title>[unknown] (23 samples, 0.42%)</title><rect x="44.6557%" y="645" width="0.4246%" height="15" fill="rgb(248,196,34)" fg:x="2419" fg:w="23"/><text x="44.9057%" y="655.50"></text></g><g><title>[unknown] (23 samples, 0.42%)</title><rect x="44.6557%" y="629" width="0.4246%" height="15" fill="rgb(236,137,7)" fg:x="2419" fg:w="23"/><text x="44.9057%" y="639.50"></text></g><g><title>[unknown] (18 samples, 0.33%)</title><rect x="44.7480%" y="613" width="0.3323%" height="15" fill="rgb(235,127,16)" fg:x="2424" fg:w="18"/><text x="44.9980%" y="623.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="44.8588%" y="597" width="0.2215%" height="15" fill="rgb(250,192,54)" fg:x="2430" fg:w="12"/><text x="45.1088%" y="607.50"></text></g><g><title>[unknown] (9 samples, 0.17%)</title><rect x="44.9142%" y="581" width="0.1661%" height="15" fill="rgb(218,98,20)" fg:x="2433" fg:w="9"/><text x="45.1642%" y="591.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.0065%" y="565" width="0.0738%" height="15" fill="rgb(230,176,47)" fg:x="2438" fg:w="4"/><text x="45.2565%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.0618%" y="549" width="0.0185%" height="15" fill="rgb(244,2,33)" fg:x="2441" fg:w="1"/><text x="45.3118%" y="559.50"></text></g><g><title>[[ext4]] (29 samples, 0.54%)</title><rect x="44.5634%" y="693" width="0.5354%" height="15" fill="rgb(231,100,17)" fg:x="2414" fg:w="29"/><text x="44.8134%" y="703.50"></text></g><g><title>[unknown] (29 samples, 0.54%)</title><rect x="44.5634%" y="677" width="0.5354%" height="15" fill="rgb(245,23,12)" fg:x="2414" fg:w="29"/><text x="44.8134%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.0803%" y="661" width="0.0185%" height="15" fill="rgb(249,55,22)" fg:x="2442" fg:w="1"/><text x="45.3303%" y="671.50"></text></g><g><title>_IO_fwrite (35 samples, 0.65%)</title><rect x="44.4896%" y="853" width="0.6461%" height="15" fill="rgb(207,134,9)" fg:x="2410" fg:w="35"/><text x="44.7396%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (35 samples, 0.65%)</title><rect x="44.4896%" y="837" width="0.6461%" height="15" fill="rgb(218,134,0)" fg:x="2410" fg:w="35"/><text x="44.7396%" y="847.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (35 samples, 0.65%)</title><rect x="44.4896%" y="821" width="0.6461%" height="15" fill="rgb(213,212,33)" fg:x="2410" fg:w="35"/><text x="44.7396%" y="831.50"></text></g><g><title>new_do_write (35 samples, 0.65%)</title><rect x="44.4896%" y="805" width="0.6461%" height="15" fill="rgb(252,106,18)" fg:x="2410" fg:w="35"/><text x="44.7396%" y="815.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (35 samples, 0.65%)</title><rect x="44.4896%" y="789" width="0.6461%" height="15" fill="rgb(208,126,42)" fg:x="2410" fg:w="35"/><text x="44.7396%" y="799.50"></text></g><g><title>__GI___libc_write (34 samples, 0.63%)</title><rect x="44.5080%" y="773" width="0.6277%" height="15" fill="rgb(246,175,29)" fg:x="2411" fg:w="34"/><text x="44.7580%" y="783.50"></text></g><g><title>[unknown] (34 samples, 0.63%)</title><rect x="44.5080%" y="757" width="0.6277%" height="15" fill="rgb(215,13,50)" fg:x="2411" fg:w="34"/><text x="44.7580%" y="767.50"></text></g><g><title>[unknown] (34 samples, 0.63%)</title><rect x="44.5080%" y="741" width="0.6277%" height="15" fill="rgb(216,172,15)" fg:x="2411" fg:w="34"/><text x="44.7580%" y="751.50"></text></g><g><title>[unknown] (33 samples, 0.61%)</title><rect x="44.5265%" y="725" width="0.6092%" height="15" fill="rgb(212,103,13)" fg:x="2412" fg:w="33"/><text x="44.7765%" y="735.50"></text></g><g><title>[unknown] (33 samples, 0.61%)</title><rect x="44.5265%" y="709" width="0.6092%" height="15" fill="rgb(231,171,36)" fg:x="2412" fg:w="33"/><text x="44.7765%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="45.0988%" y="693" width="0.0369%" height="15" fill="rgb(250,123,20)" fg:x="2443" fg:w="2"/><text x="45.3488%" y="703.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (5 samples, 0.09%)</title><rect x="45.1357%" y="853" width="0.0923%" height="15" fill="rgb(212,53,50)" fg:x="2445" fg:w="5"/><text x="45.3857%" y="863.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (5 samples, 0.09%)</title><rect x="45.1357%" y="837" width="0.0923%" height="15" fill="rgb(243,54,12)" fg:x="2445" fg:w="5"/><text x="45.3857%" y="847.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (5 samples, 0.09%)</title><rect x="45.1357%" y="821" width="0.0923%" height="15" fill="rgb(234,101,34)" fg:x="2445" fg:w="5"/><text x="45.3857%" y="831.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (5 samples, 0.09%)</title><rect x="45.1357%" y="805" width="0.0923%" height="15" fill="rgb(254,67,22)" fg:x="2445" fg:w="5"/><text x="45.3857%" y="815.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (5 samples, 0.09%)</title><rect x="45.1357%" y="789" width="0.0923%" height="15" fill="rgb(250,35,47)" fg:x="2445" fg:w="5"/><text x="45.3857%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.2095%" y="773" width="0.0185%" height="15" fill="rgb(226,126,38)" fg:x="2449" fg:w="1"/><text x="45.4595%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.2095%" y="757" width="0.0185%" height="15" fill="rgb(216,138,53)" fg:x="2449" fg:w="1"/><text x="45.4595%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.2095%" y="741" width="0.0185%" height="15" fill="rgb(246,199,43)" fg:x="2449" fg:w="1"/><text x="45.4595%" y="751.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="45.2280%" y="853" width="0.0185%" height="15" fill="rgb(232,125,11)" fg:x="2450" fg:w="1"/><text x="45.4780%" y="863.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (57 samples, 1.05%)</title><rect x="44.4342%" y="885" width="1.0522%" height="15" fill="rgb(218,219,45)" fg:x="2407" fg:w="57"/><text x="44.6842%" y="895.50"></text></g><g><title>AutoFile::write (57 samples, 1.05%)</title><rect x="44.4342%" y="869" width="1.0522%" height="15" fill="rgb(216,102,54)" fg:x="2407" fg:w="57"/><text x="44.6842%" y="879.50"></text></g><g><title>util::Xor (13 samples, 0.24%)</title><rect x="45.2464%" y="853" width="0.2400%" height="15" fill="rgb(250,228,7)" fg:x="2451" fg:w="13"/><text x="45.4964%" y="863.50"></text></g><g><title>std::operator^= (3 samples, 0.06%)</title><rect x="45.4311%" y="837" width="0.0554%" height="15" fill="rgb(226,125,25)" fg:x="2461" fg:w="3"/><text x="45.6811%" y="847.50"></text></g><g><title>std::operator^ (3 samples, 0.06%)</title><rect x="45.4311%" y="821" width="0.0554%" height="15" fill="rgb(224,165,27)" fg:x="2461" fg:w="3"/><text x="45.6811%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (59 samples, 1.09%)</title><rect x="44.4342%" y="917" width="1.0892%" height="15" fill="rgb(233,86,3)" fg:x="2407" fg:w="59"/><text x="44.6842%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (59 samples, 1.09%)</title><rect x="44.4342%" y="901" width="1.0892%" height="15" fill="rgb(228,116,20)" fg:x="2407" fg:w="59"/><text x="44.6842%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="45.4864%" y="885" width="0.0369%" height="15" fill="rgb(209,192,17)" fg:x="2464" fg:w="2"/><text x="45.7364%" y="895.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="45.4864%" y="869" width="0.0369%" height="15" fill="rgb(224,88,34)" fg:x="2464" fg:w="2"/><text x="45.7364%" y="879.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="45.4864%" y="853" width="0.0369%" height="15" fill="rgb(233,38,6)" fg:x="2464" fg:w="2"/><text x="45.7364%" y="863.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="45.4864%" y="837" width="0.0369%" height="15" fill="rgb(212,59,30)" fg:x="2464" fg:w="2"/><text x="45.7364%" y="847.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="45.4864%" y="821" width="0.0369%" height="15" fill="rgb(213,80,3)" fg:x="2464" fg:w="2"/><text x="45.7364%" y="831.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="45.5049%" y="805" width="0.0185%" height="15" fill="rgb(251,178,7)" fg:x="2465" fg:w="1"/><text x="45.7549%" y="815.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (62 samples, 1.14%)</title><rect x="44.4342%" y="997" width="1.1445%" height="15" fill="rgb(213,154,26)" fg:x="2407" fg:w="62"/><text x="44.6842%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (62 samples, 1.14%)</title><rect x="44.4342%" y="981" width="1.1445%" height="15" fill="rgb(238,165,49)" fg:x="2407" fg:w="62"/><text x="44.6842%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (62 samples, 1.14%)</title><rect x="44.4342%" y="965" width="1.1445%" height="15" fill="rgb(248,91,46)" fg:x="2407" fg:w="62"/><text x="44.6842%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (62 samples, 1.14%)</title><rect x="44.4342%" y="949" width="1.1445%" height="15" fill="rgb(244,21,52)" fg:x="2407" fg:w="62"/><text x="44.6842%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (62 samples, 1.14%)</title><rect x="44.4342%" y="933" width="1.1445%" height="15" fill="rgb(247,122,20)" fg:x="2407" fg:w="62"/><text x="44.6842%" y="943.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="45.5234%" y="917" width="0.0554%" height="15" fill="rgb(218,27,9)" fg:x="2466" fg:w="3"/><text x="45.7734%" y="927.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="45.5234%" y="901" width="0.0554%" height="15" fill="rgb(246,7,6)" fg:x="2466" fg:w="3"/><text x="45.7734%" y="911.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (3 samples, 0.06%)</title><rect x="45.5234%" y="885" width="0.0554%" height="15" fill="rgb(227,135,54)" fg:x="2466" fg:w="3"/><text x="45.7734%" y="895.50"></text></g><g><title>AutoFile::write (3 samples, 0.06%)</title><rect x="45.5234%" y="869" width="0.0554%" height="15" fill="rgb(247,14,11)" fg:x="2466" fg:w="3"/><text x="45.7734%" y="879.50"></text></g><g><title>_IO_fwrite (3 samples, 0.06%)</title><rect x="45.5234%" y="853" width="0.0554%" height="15" fill="rgb(206,149,34)" fg:x="2466" fg:w="3"/><text x="45.7734%" y="863.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (2 samples, 0.04%)</title><rect x="45.5787%" y="997" width="0.0369%" height="15" fill="rgb(227,228,4)" fg:x="2469" fg:w="2"/><text x="45.8287%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="45.5787%" y="981" width="0.0369%" height="15" fill="rgb(238,218,28)" fg:x="2469" fg:w="2"/><text x="45.8287%" y="991.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.5972%" y="965" width="0.0185%" height="15" fill="rgb(252,86,40)" fg:x="2470" fg:w="1"/><text x="45.8472%" y="975.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="45.5972%" y="949" width="0.0185%" height="15" fill="rgb(251,225,11)" fg:x="2470" fg:w="1"/><text x="45.8472%" y="959.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="45.5972%" y="933" width="0.0185%" height="15" fill="rgb(206,46,49)" fg:x="2470" fg:w="1"/><text x="45.8472%" y="943.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="45.5972%" y="917" width="0.0185%" height="15" fill="rgb(245,128,24)" fg:x="2470" fg:w="1"/><text x="45.8472%" y="927.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (154 samples, 2.84%)</title><rect x="42.8281%" y="1285" width="2.8429%" height="15" fill="rgb(219,177,34)" fg:x="2320" fg:w="154"/><text x="43.0781%" y="1295.50">Au..</text></g><g><title>void Serialize&lt;AutoFile, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (154 samples, 2.84%)</title><rect x="42.8281%" y="1269" width="2.8429%" height="15" fill="rgb(218,60,48)" fg:x="2320" fg:w="154"/><text x="43.0781%" y="1279.50">vo..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;AutoFile&gt; (154 samples, 2.84%)</title><rect x="42.8281%" y="1253" width="2.8429%" height="15" fill="rgb(221,11,5)" fg:x="2320" fg:w="154"/><text x="43.0781%" y="1263.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock&gt; (154 samples, 2.84%)</title><rect x="42.8281%" y="1237" width="2.8429%" height="15" fill="rgb(220,148,13)" fg:x="2320" fg:w="154"/><text x="43.0781%" y="1247.50">vo..</text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (154 samples, 2.84%)</title><rect x="42.8281%" y="1221" width="2.8429%" height="15" fill="rgb(210,16,3)" fg:x="2320" fg:w="154"/><text x="43.0781%" y="1231.50">vo..</text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (154 samples, 2.84%)</title><rect x="42.8281%" y="1205" width="2.8429%" height="15" fill="rgb(236,80,2)" fg:x="2320" fg:w="154"/><text x="43.0781%" y="1215.50">vo..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (154 samples, 2.84%)</title><rect x="42.8281%" y="1189" width="2.8429%" height="15" fill="rgb(239,129,19)" fg:x="2320" fg:w="154"/><text x="43.0781%" y="1199.50">vo..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (154 samples, 2.84%)</title><rect x="42.8281%" y="1173" width="2.8429%" height="15" fill="rgb(220,106,35)" fg:x="2320" fg:w="154"/><text x="43.0781%" y="1183.50">vo..</text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1157" width="2.6398%" height="15" fill="rgb(252,139,45)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1167.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1141" width="2.6398%" height="15" fill="rgb(229,8,36)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1151.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1125" width="2.6398%" height="15" fill="rgb(230,126,33)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1135.50">vo..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1109" width="2.6398%" height="15" fill="rgb(239,140,21)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1119.50">vo..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1093" width="2.6398%" height="15" fill="rgb(254,104,9)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1103.50">vo..</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1077" width="2.6398%" height="15" fill="rgb(239,52,14)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1087.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1061" width="2.6398%" height="15" fill="rgb(208,227,44)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1071.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1045" width="2.6398%" height="15" fill="rgb(246,18,19)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1055.50">vo..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1029" width="2.6398%" height="15" fill="rgb(235,228,25)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1039.50">vo..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (143 samples, 2.64%)</title><rect x="43.0312%" y="1013" width="2.6398%" height="15" fill="rgb(240,156,20)" fg:x="2331" fg:w="143"/><text x="43.2812%" y="1023.50">vo..</text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (3 samples, 0.06%)</title><rect x="45.6157%" y="997" width="0.0554%" height="15" fill="rgb(224,8,20)" fg:x="2471" fg:w="3"/><text x="45.8657%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="45.6157%" y="981" width="0.0554%" height="15" fill="rgb(214,12,52)" fg:x="2471" fg:w="3"/><text x="45.8657%" y="991.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="45.6157%" y="965" width="0.0554%" height="15" fill="rgb(211,220,47)" fg:x="2471" fg:w="3"/><text x="45.8657%" y="975.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (3 samples, 0.06%)</title><rect x="45.6157%" y="949" width="0.0554%" height="15" fill="rgb(250,173,5)" fg:x="2471" fg:w="3"/><text x="45.8657%" y="959.50"></text></g><g><title>AutoFile::write (3 samples, 0.06%)</title><rect x="45.6157%" y="933" width="0.0554%" height="15" fill="rgb(250,125,52)" fg:x="2471" fg:w="3"/><text x="45.8657%" y="943.50"></text></g><g><title>_IO_fwrite (3 samples, 0.06%)</title><rect x="45.6157%" y="917" width="0.0554%" height="15" fill="rgb(209,133,18)" fg:x="2471" fg:w="3"/><text x="45.8657%" y="927.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="45.6341%" y="901" width="0.0369%" height="15" fill="rgb(216,173,22)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="911.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="45.6341%" y="885" width="0.0369%" height="15" fill="rgb(205,3,22)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="895.50"></text></g><g><title>new_do_write (2 samples, 0.04%)</title><rect x="45.6341%" y="869" width="0.0369%" height="15" fill="rgb(248,22,20)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="879.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="45.6341%" y="853" width="0.0369%" height="15" fill="rgb(233,6,29)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="863.50"></text></g><g><title>__GI___libc_write (2 samples, 0.04%)</title><rect x="45.6341%" y="837" width="0.0369%" height="15" fill="rgb(240,22,54)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="45.6341%" y="821" width="0.0369%" height="15" fill="rgb(231,133,32)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="45.6341%" y="805" width="0.0369%" height="15" fill="rgb(248,193,4)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="45.6341%" y="789" width="0.0369%" height="15" fill="rgb(211,178,46)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="45.6341%" y="773" width="0.0369%" height="15" fill="rgb(224,5,42)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="783.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="45.6341%" y="757" width="0.0369%" height="15" fill="rgb(239,176,25)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="45.6341%" y="741" width="0.0369%" height="15" fill="rgb(245,187,50)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="751.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="45.6341%" y="725" width="0.0369%" height="15" fill="rgb(248,24,15)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="45.6341%" y="709" width="0.0369%" height="15" fill="rgb(205,166,13)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="45.6341%" y="693" width="0.0369%" height="15" fill="rgb(208,114,23)" fg:x="2472" fg:w="2"/><text x="45.8841%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6526%" y="677" width="0.0185%" height="15" fill="rgb(239,127,18)" fg:x="2473" fg:w="1"/><text x="45.9026%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6526%" y="661" width="0.0185%" height="15" fill="rgb(219,154,28)" fg:x="2473" fg:w="1"/><text x="45.9026%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6526%" y="645" width="0.0185%" height="15" fill="rgb(225,157,23)" fg:x="2473" fg:w="1"/><text x="45.9026%" y="655.50"></text></g><g><title>AutoFile::~AutoFile (1 samples, 0.02%)</title><rect x="45.6710%" y="1285" width="0.0185%" height="15" fill="rgb(219,8,6)" fg:x="2474" fg:w="1"/><text x="45.9210%" y="1295.50"></text></g><g><title>AutoFile::fclose (1 samples, 0.02%)</title><rect x="45.6710%" y="1269" width="0.0185%" height="15" fill="rgb(212,47,6)" fg:x="2474" fg:w="1"/><text x="45.9210%" y="1279.50"></text></g><g><title>fclose@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="45.6710%" y="1253" width="0.0185%" height="15" fill="rgb(224,190,4)" fg:x="2474" fg:w="1"/><text x="45.9210%" y="1263.50"></text></g><g><title>_IO_file_close_it@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="45.6710%" y="1237" width="0.0185%" height="15" fill="rgb(239,183,29)" fg:x="2474" fg:w="1"/><text x="45.9210%" y="1247.50"></text></g><g><title>__close_nocancel (1 samples, 0.02%)</title><rect x="45.6710%" y="1221" width="0.0185%" height="15" fill="rgb(213,57,7)" fg:x="2474" fg:w="1"/><text x="45.9210%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6710%" y="1205" width="0.0185%" height="15" fill="rgb(216,148,1)" fg:x="2474" fg:w="1"/><text x="45.9210%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6710%" y="1189" width="0.0185%" height="15" fill="rgb(236,182,29)" fg:x="2474" fg:w="1"/><text x="45.9210%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6710%" y="1173" width="0.0185%" height="15" fill="rgb(244,120,48)" fg:x="2474" fg:w="1"/><text x="45.9210%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6710%" y="1157" width="0.0185%" height="15" fill="rgb(206,71,34)" fg:x="2474" fg:w="1"/><text x="45.9210%" y="1167.50"></text></g><g><title>node::BlockManager::OpenBlockFile (1 samples, 0.02%)</title><rect x="45.6895%" y="1285" width="0.0185%" height="15" fill="rgb(242,32,6)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1295.50"></text></g><g><title>FlatFileSeq::Open (1 samples, 0.02%)</title><rect x="45.6895%" y="1269" width="0.0185%" height="15" fill="rgb(241,35,3)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1279.50"></text></g><g><title>__fopen_internal (1 samples, 0.02%)</title><rect x="45.6895%" y="1253" width="0.0185%" height="15" fill="rgb(222,62,19)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1263.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="45.6895%" y="1237" width="0.0185%" height="15" fill="rgb(223,110,41)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1247.50"></text></g><g><title>_IO_file_open (1 samples, 0.02%)</title><rect x="45.6895%" y="1221" width="0.0185%" height="15" fill="rgb(208,224,4)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1231.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="45.6895%" y="1205" width="0.0185%" height="15" fill="rgb(241,137,19)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6895%" y="1189" width="0.0185%" height="15" fill="rgb(244,24,17)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6895%" y="1173" width="0.0185%" height="15" fill="rgb(245,178,49)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6895%" y="1157" width="0.0185%" height="15" fill="rgb(219,160,38)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6895%" y="1141" width="0.0185%" height="15" fill="rgb(228,137,14)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6895%" y="1125" width="0.0185%" height="15" fill="rgb(237,134,11)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6895%" y="1109" width="0.0185%" height="15" fill="rgb(211,126,44)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6895%" y="1093" width="0.0185%" height="15" fill="rgb(226,171,33)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6895%" y="1077" width="0.0185%" height="15" fill="rgb(253,99,13)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6895%" y="1061" width="0.0185%" height="15" fill="rgb(244,48,7)" fg:x="2475" fg:w="1"/><text x="45.9395%" y="1071.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (3 samples, 0.06%)</title><rect x="45.7080%" y="981" width="0.0554%" height="15" fill="rgb(244,217,54)" fg:x="2476" fg:w="3"/><text x="45.9580%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (3 samples, 0.06%)</title><rect x="45.7080%" y="965" width="0.0554%" height="15" fill="rgb(224,15,18)" fg:x="2476" fg:w="3"/><text x="45.9580%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="45.7080%" y="949" width="0.0554%" height="15" fill="rgb(244,99,12)" fg:x="2476" fg:w="3"/><text x="45.9580%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="45.7080%" y="933" width="0.0554%" height="15" fill="rgb(233,226,8)" fg:x="2476" fg:w="3"/><text x="45.9580%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="45.7264%" y="917" width="0.0369%" height="15" fill="rgb(229,211,3)" fg:x="2477" fg:w="2"/><text x="45.9764%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7449%" y="901" width="0.0185%" height="15" fill="rgb(216,140,21)" fg:x="2478" fg:w="1"/><text x="45.9949%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7449%" y="885" width="0.0185%" height="15" fill="rgb(234,122,30)" fg:x="2478" fg:w="1"/><text x="45.9949%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="45.7449%" y="869" width="0.0185%" height="15" fill="rgb(236,25,46)" fg:x="2478" fg:w="1"/><text x="45.9949%" y="879.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="45.7449%" y="853" width="0.0185%" height="15" fill="rgb(217,52,54)" fg:x="2478" fg:w="1"/><text x="45.9949%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="45.7633%" y="741" width="0.0185%" height="15" fill="rgb(222,29,26)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="725" width="0.0185%" height="15" fill="rgb(216,177,29)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="709" width="0.0185%" height="15" fill="rgb(247,136,51)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="693" width="0.0185%" height="15" fill="rgb(231,47,47)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="677" width="0.0185%" height="15" fill="rgb(211,192,36)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="687.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="661" width="0.0185%" height="15" fill="rgb(229,156,32)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="645" width="0.0185%" height="15" fill="rgb(248,213,20)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="655.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="629" width="0.0185%" height="15" fill="rgb(217,64,7)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="639.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="613" width="0.0185%" height="15" fill="rgb(232,142,8)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="623.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="597" width="0.0185%" height="15" fill="rgb(224,92,44)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="581" width="0.0185%" height="15" fill="rgb(214,169,17)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="565" width="0.0185%" height="15" fill="rgb(210,59,37)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="549" width="0.0185%" height="15" fill="rgb(214,116,48)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="533" width="0.0185%" height="15" fill="rgb(244,191,6)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="517" width="0.0185%" height="15" fill="rgb(241,50,52)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="501" width="0.0185%" height="15" fill="rgb(236,75,39)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="485" width="0.0185%" height="15" fill="rgb(236,99,0)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7633%" y="469" width="0.0185%" height="15" fill="rgb(207,202,15)" fg:x="2479" fg:w="1"/><text x="46.0133%" y="479.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="45.7633%" y="981" width="0.0369%" height="15" fill="rgb(233,207,14)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="965" width="0.0369%" height="15" fill="rgb(226,27,51)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="949" width="0.0369%" height="15" fill="rgb(206,104,42)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="933" width="0.0369%" height="15" fill="rgb(212,225,4)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="917" width="0.0369%" height="15" fill="rgb(233,96,42)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="927.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="901" width="0.0369%" height="15" fill="rgb(229,21,32)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="885" width="0.0369%" height="15" fill="rgb(226,216,24)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="869" width="0.0369%" height="15" fill="rgb(221,163,17)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="853" width="0.0369%" height="15" fill="rgb(216,216,42)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="837" width="0.0369%" height="15" fill="rgb(240,118,7)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="821" width="0.0369%" height="15" fill="rgb(221,67,37)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="805" width="0.0369%" height="15" fill="rgb(241,32,44)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="789" width="0.0369%" height="15" fill="rgb(235,204,43)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="799.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="773" width="0.0369%" height="15" fill="rgb(213,116,10)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="783.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="45.7633%" y="757" width="0.0369%" height="15" fill="rgb(239,15,48)" fg:x="2479" fg:w="2"/><text x="46.0133%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="45.7818%" y="741" width="0.0185%" height="15" fill="rgb(207,123,36)" fg:x="2480" fg:w="1"/><text x="46.0318%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7818%" y="725" width="0.0185%" height="15" fill="rgb(209,103,30)" fg:x="2480" fg:w="1"/><text x="46.0318%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7818%" y="709" width="0.0185%" height="15" fill="rgb(238,100,19)" fg:x="2480" fg:w="1"/><text x="46.0318%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.7818%" y="693" width="0.0185%" height="15" fill="rgb(244,30,14)" fg:x="2480" fg:w="1"/><text x="46.0318%" y="703.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="45.8003%" y="901" width="0.0369%" height="15" fill="rgb(249,174,6)" fg:x="2481" fg:w="2"/><text x="46.0503%" y="911.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="1141" width="0.1661%" height="15" fill="rgb(235,213,41)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="1125" width="0.1661%" height="15" fill="rgb(213,118,6)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="1109" width="0.1661%" height="15" fill="rgb(235,44,51)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="1093" width="0.1661%" height="15" fill="rgb(217,9,53)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="1077" width="0.1661%" height="15" fill="rgb(237,172,34)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="1061" width="0.1661%" height="15" fill="rgb(206,206,11)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="1045" width="0.1661%" height="15" fill="rgb(214,149,29)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="1029" width="0.1661%" height="15" fill="rgb(208,123,3)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1039.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="1013" width="0.1661%" height="15" fill="rgb(229,126,4)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1023.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.17%)</title><rect x="45.7080%" y="997" width="0.1661%" height="15" fill="rgb(222,92,36)" fg:x="2476" fg:w="9"/><text x="45.9580%" y="1007.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (4 samples, 0.07%)</title><rect x="45.8003%" y="981" width="0.0738%" height="15" fill="rgb(216,39,41)" fg:x="2481" fg:w="4"/><text x="46.0503%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="45.8003%" y="965" width="0.0738%" height="15" fill="rgb(253,127,28)" fg:x="2481" fg:w="4"/><text x="46.0503%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="45.8003%" y="949" width="0.0738%" height="15" fill="rgb(249,152,51)" fg:x="2481" fg:w="4"/><text x="46.0503%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="45.8003%" y="933" width="0.0738%" height="15" fill="rgb(209,123,42)" fg:x="2481" fg:w="4"/><text x="46.0503%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="45.8003%" y="917" width="0.0738%" height="15" fill="rgb(241,118,22)" fg:x="2481" fg:w="4"/><text x="46.0503%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="45.8372%" y="901" width="0.0369%" height="15" fill="rgb(208,25,7)" fg:x="2483" fg:w="2"/><text x="46.0872%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.04%)</title><rect x="45.8372%" y="885" width="0.0369%" height="15" fill="rgb(243,144,39)" fg:x="2483" fg:w="2"/><text x="46.0872%" y="895.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (169 samples, 3.12%)</title><rect x="42.8281%" y="1301" width="3.1198%" height="15" fill="rgb(250,50,5)" fg:x="2320" fg:w="169"/><text x="43.0781%" y="1311.50">nod..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (13 samples, 0.24%)</title><rect x="45.7080%" y="1285" width="0.2400%" height="15" fill="rgb(207,67,11)" fg:x="2476" fg:w="13"/><text x="45.9580%" y="1295.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (13 samples, 0.24%)</title><rect x="45.7080%" y="1269" width="0.2400%" height="15" fill="rgb(245,204,40)" fg:x="2476" fg:w="13"/><text x="45.9580%" y="1279.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (13 samples, 0.24%)</title><rect x="45.7080%" y="1253" width="0.2400%" height="15" fill="rgb(238,228,24)" fg:x="2476" fg:w="13"/><text x="45.9580%" y="1263.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (13 samples, 0.24%)</title><rect x="45.7080%" y="1237" width="0.2400%" height="15" fill="rgb(217,116,22)" fg:x="2476" fg:w="13"/><text x="45.9580%" y="1247.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (13 samples, 0.24%)</title><rect x="45.7080%" y="1221" width="0.2400%" height="15" fill="rgb(234,98,12)" fg:x="2476" fg:w="13"/><text x="45.9580%" y="1231.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.24%)</title><rect x="45.7080%" y="1205" width="0.2400%" height="15" fill="rgb(242,170,50)" fg:x="2476" fg:w="13"/><text x="45.9580%" y="1215.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.24%)</title><rect x="45.7080%" y="1189" width="0.2400%" height="15" fill="rgb(235,7,5)" fg:x="2476" fg:w="13"/><text x="45.9580%" y="1199.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (13 samples, 0.24%)</title><rect x="45.7080%" y="1173" width="0.2400%" height="15" fill="rgb(241,114,28)" fg:x="2476" fg:w="13"/><text x="45.9580%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (13 samples, 0.24%)</title><rect x="45.7080%" y="1157" width="0.2400%" height="15" fill="rgb(246,112,42)" fg:x="2476" fg:w="13"/><text x="45.9580%" y="1167.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="45.8741%" y="1141" width="0.0738%" height="15" fill="rgb(248,228,14)" fg:x="2485" fg:w="4"/><text x="46.1241%" y="1151.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="45.8926%" y="1125" width="0.0554%" height="15" fill="rgb(208,133,18)" fg:x="2486" fg:w="3"/><text x="46.1426%" y="1135.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (3 samples, 0.06%)</title><rect x="45.8926%" y="1109" width="0.0554%" height="15" fill="rgb(207,35,49)" fg:x="2486" fg:w="3"/><text x="46.1426%" y="1119.50"></text></g><g><title>SizeComputer::write (3 samples, 0.06%)</title><rect x="45.8926%" y="1093" width="0.0554%" height="15" fill="rgb(205,68,36)" fg:x="2486" fg:w="3"/><text x="46.1426%" y="1103.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (5 samples, 0.09%)</title><rect x="45.9479%" y="997" width="0.0923%" height="15" fill="rgb(245,62,40)" fg:x="2489" fg:w="5"/><text x="46.1979%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (5 samples, 0.09%)</title><rect x="45.9479%" y="981" width="0.0923%" height="15" fill="rgb(228,27,24)" fg:x="2489" fg:w="5"/><text x="46.1979%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="45.9479%" y="965" width="0.0923%" height="15" fill="rgb(253,19,12)" fg:x="2489" fg:w="5"/><text x="46.1979%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="45.9479%" y="949" width="0.0923%" height="15" fill="rgb(232,28,20)" fg:x="2489" fg:w="5"/><text x="46.1979%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="45.9479%" y="933" width="0.0923%" height="15" fill="rgb(218,35,51)" fg:x="2489" fg:w="5"/><text x="46.1979%" y="943.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="917" width="0.0185%" height="15" fill="rgb(212,90,40)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="901" width="0.0185%" height="15" fill="rgb(220,172,12)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="911.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="885" width="0.0185%" height="15" fill="rgb(226,159,20)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="895.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="869" width="0.0185%" height="15" fill="rgb(234,205,16)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="879.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="853" width="0.0185%" height="15" fill="rgb(207,9,39)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="837" width="0.0185%" height="15" fill="rgb(249,143,15)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="821" width="0.0185%" height="15" fill="rgb(253,133,29)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="805" width="0.0185%" height="15" fill="rgb(221,187,0)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="815.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="789" width="0.0185%" height="15" fill="rgb(205,204,26)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="799.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="773" width="0.0185%" height="15" fill="rgb(224,68,54)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="783.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="757" width="0.0185%" height="15" fill="rgb(209,67,4)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="741" width="0.0185%" height="15" fill="rgb(228,229,18)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0218%" y="725" width="0.0185%" height="15" fill="rgb(231,89,13)" fg:x="2493" fg:w="1"/><text x="46.2718%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="885" width="0.0185%" height="15" fill="rgb(210,182,18)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="869" width="0.0185%" height="15" fill="rgb(240,105,2)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="853" width="0.0185%" height="15" fill="rgb(207,170,50)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="837" width="0.0185%" height="15" fill="rgb(232,133,24)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="821" width="0.0185%" height="15" fill="rgb(235,166,27)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="805" width="0.0185%" height="15" fill="rgb(209,19,13)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="789" width="0.0185%" height="15" fill="rgb(226,79,39)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="773" width="0.0185%" height="15" fill="rgb(222,163,10)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="783.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="757" width="0.0185%" height="15" fill="rgb(214,44,19)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="767.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="741" width="0.0185%" height="15" fill="rgb(210,217,13)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="751.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.0772%" y="725" width="0.0185%" height="15" fill="rgb(237,61,54)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="709" width="0.0185%" height="15" fill="rgb(226,184,24)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="693" width="0.0185%" height="15" fill="rgb(223,226,4)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="677" width="0.0185%" height="15" fill="rgb(210,26,41)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.0772%" y="661" width="0.0185%" height="15" fill="rgb(220,221,6)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="671.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.0772%" y="645" width="0.0185%" height="15" fill="rgb(225,89,49)" fg:x="2496" fg:w="1"/><text x="46.3272%" y="655.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (4 samples, 0.07%)</title><rect x="46.0402%" y="997" width="0.0738%" height="15" fill="rgb(218,70,45)" fg:x="2494" fg:w="4"/><text x="46.2902%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="46.0402%" y="981" width="0.0738%" height="15" fill="rgb(238,166,21)" fg:x="2494" fg:w="4"/><text x="46.2902%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="46.0402%" y="965" width="0.0738%" height="15" fill="rgb(224,141,44)" fg:x="2494" fg:w="4"/><text x="46.2902%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="46.0402%" y="949" width="0.0738%" height="15" fill="rgb(230,12,49)" fg:x="2494" fg:w="4"/><text x="46.2902%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="46.0402%" y="933" width="0.0738%" height="15" fill="rgb(212,174,12)" fg:x="2494" fg:w="4"/><text x="46.2902%" y="943.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="46.0587%" y="917" width="0.0554%" height="15" fill="rgb(246,67,9)" fg:x="2495" fg:w="3"/><text x="46.3087%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (3 samples, 0.06%)</title><rect x="46.0587%" y="901" width="0.0554%" height="15" fill="rgb(239,35,23)" fg:x="2495" fg:w="3"/><text x="46.3087%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0956%" y="885" width="0.0185%" height="15" fill="rgb(211,167,0)" fg:x="2497" fg:w="1"/><text x="46.3456%" y="895.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.0956%" y="869" width="0.0185%" height="15" fill="rgb(225,119,45)" fg:x="2497" fg:w="1"/><text x="46.3456%" y="879.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="46.0956%" y="853" width="0.0185%" height="15" fill="rgb(210,162,6)" fg:x="2497" fg:w="1"/><text x="46.3456%" y="863.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="46.0956%" y="837" width="0.0185%" height="15" fill="rgb(208,118,35)" fg:x="2497" fg:w="1"/><text x="46.3456%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1157" width="0.1846%" height="15" fill="rgb(239,4,53)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1141" width="0.1846%" height="15" fill="rgb(213,130,21)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1125" width="0.1846%" height="15" fill="rgb(235,148,0)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1135.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1109" width="0.1846%" height="15" fill="rgb(244,224,18)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1119.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1093" width="0.1846%" height="15" fill="rgb(211,214,4)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1103.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1077" width="0.1846%" height="15" fill="rgb(206,119,25)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1061" width="0.1846%" height="15" fill="rgb(243,93,47)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1045" width="0.1846%" height="15" fill="rgb(224,194,6)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1055.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1029" width="0.1846%" height="15" fill="rgb(243,229,6)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1039.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.18%)</title><rect x="45.9479%" y="1013" width="0.1846%" height="15" fill="rgb(207,23,50)" fg:x="2489" fg:w="10"/><text x="46.1979%" y="1023.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="46.1141%" y="997" width="0.0185%" height="15" fill="rgb(253,192,32)" fg:x="2498" fg:w="1"/><text x="46.3641%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.1141%" y="981" width="0.0185%" height="15" fill="rgb(213,21,6)" fg:x="2498" fg:w="1"/><text x="46.3641%" y="991.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.1141%" y="965" width="0.0185%" height="15" fill="rgb(243,151,13)" fg:x="2498" fg:w="1"/><text x="46.3641%" y="975.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="46.1141%" y="949" width="0.0185%" height="15" fill="rgb(233,165,41)" fg:x="2498" fg:w="1"/><text x="46.3641%" y="959.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="46.1141%" y="933" width="0.0185%" height="15" fill="rgb(246,176,45)" fg:x="2498" fg:w="1"/><text x="46.3641%" y="943.50"></text></g><g><title>node::BlockManager::SaveBlockToDisk (201 samples, 3.71%)</title><rect x="42.4774%" y="1317" width="3.7105%" height="15" fill="rgb(217,170,52)" fg:x="2301" fg:w="201"/><text x="42.7274%" y="1327.50">node..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (13 samples, 0.24%)</title><rect x="45.9479%" y="1301" width="0.2400%" height="15" fill="rgb(214,203,54)" fg:x="2489" fg:w="13"/><text x="46.1979%" y="1311.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (13 samples, 0.24%)</title><rect x="45.9479%" y="1285" width="0.2400%" height="15" fill="rgb(248,215,49)" fg:x="2489" fg:w="13"/><text x="46.1979%" y="1295.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (13 samples, 0.24%)</title><rect x="45.9479%" y="1269" width="0.2400%" height="15" fill="rgb(208,46,10)" fg:x="2489" fg:w="13"/><text x="46.1979%" y="1279.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (13 samples, 0.24%)</title><rect x="45.9479%" y="1253" width="0.2400%" height="15" fill="rgb(254,5,31)" fg:x="2489" fg:w="13"/><text x="46.1979%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (13 samples, 0.24%)</title><rect x="45.9479%" y="1237" width="0.2400%" height="15" fill="rgb(222,104,33)" fg:x="2489" fg:w="13"/><text x="46.1979%" y="1247.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.24%)</title><rect x="45.9479%" y="1221" width="0.2400%" height="15" fill="rgb(248,49,16)" fg:x="2489" fg:w="13"/><text x="46.1979%" y="1231.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.24%)</title><rect x="45.9479%" y="1205" width="0.2400%" height="15" fill="rgb(232,198,41)" fg:x="2489" fg:w="13"/><text x="46.1979%" y="1215.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (13 samples, 0.24%)</title><rect x="45.9479%" y="1189" width="0.2400%" height="15" fill="rgb(214,125,3)" fg:x="2489" fg:w="13"/><text x="46.1979%" y="1199.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (13 samples, 0.24%)</title><rect x="45.9479%" y="1173" width="0.2400%" height="15" fill="rgb(229,220,28)" fg:x="2489" fg:w="13"/><text x="46.1979%" y="1183.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="46.1325%" y="1157" width="0.0554%" height="15" fill="rgb(222,64,37)" fg:x="2499" fg:w="3"/><text x="46.3825%" y="1167.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.1695%" y="1141" width="0.0185%" height="15" fill="rgb(249,184,13)" fg:x="2501" fg:w="1"/><text x="46.4195%" y="1151.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="46.1695%" y="1125" width="0.0185%" height="15" fill="rgb(252,176,6)" fg:x="2501" fg:w="1"/><text x="46.4195%" y="1135.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="46.1695%" y="1109" width="0.0185%" height="15" fill="rgb(228,153,7)" fg:x="2501" fg:w="1"/><text x="46.4195%" y="1119.50"></text></g><g><title>ChainstateManager::AcceptBlock (232 samples, 4.28%)</title><rect x="41.9236%" y="1333" width="4.2828%" height="15" fill="rgb(242,193,5)" fg:x="2271" fg:w="232"/><text x="42.1736%" y="1343.50">Chain..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.1879%" y="1317" width="0.0185%" height="15" fill="rgb(232,140,9)" fg:x="2502" fg:w="1"/><text x="46.4379%" y="1327.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="46.2064%" y="1317" width="0.0185%" height="15" fill="rgb(213,222,16)" fg:x="2503" fg:w="1"/><text x="46.4564%" y="1327.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="46.2064%" y="1301" width="0.0185%" height="15" fill="rgb(222,75,50)" fg:x="2503" fg:w="1"/><text x="46.4564%" y="1311.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="46.2248%" y="1317" width="0.0185%" height="15" fill="rgb(205,180,2)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1327.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="46.2248%" y="1301" width="0.0185%" height="15" fill="rgb(216,34,7)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1311.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="46.2248%" y="1285" width="0.0185%" height="15" fill="rgb(253,16,32)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1295.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="46.2248%" y="1269" width="0.0185%" height="15" fill="rgb(208,97,28)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1279.50"></text></g><g><title>bool std::all_of&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="46.2248%" y="1253" width="0.0185%" height="15" fill="rgb(225,92,11)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1263.50"></text></g><g><title>unsigned char const* std::find_if_not&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="46.2248%" y="1237" width="0.0185%" height="15" fill="rgb(243,38,12)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1247.50"></text></g><g><title>unsigned char const* std::__find_if_not&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_pred&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="46.2248%" y="1221" width="0.0185%" height="15" fill="rgb(208,139,16)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1231.50"></text></g><g><title>unsigned char const* std::__find_if&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_negate&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="46.2248%" y="1205" width="0.0185%" height="15" fill="rgb(227,24,9)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1189" width="0.0185%" height="15" fill="rgb(206,62,11)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1173" width="0.0185%" height="15" fill="rgb(228,134,27)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1157" width="0.0185%" height="15" fill="rgb(205,55,33)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1141" width="0.0185%" height="15" fill="rgb(243,75,43)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1125" width="0.0185%" height="15" fill="rgb(223,27,42)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1109" width="0.0185%" height="15" fill="rgb(232,189,33)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1093" width="0.0185%" height="15" fill="rgb(210,9,39)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1077" width="0.0185%" height="15" fill="rgb(242,85,26)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1061" width="0.0185%" height="15" fill="rgb(248,44,4)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.2248%" y="1045" width="0.0185%" height="15" fill="rgb(250,96,46)" fg:x="2504" fg:w="1"/><text x="46.4748%" y="1055.50"></text></g><g><title>CheckBlock (1 samples, 0.02%)</title><rect x="46.2433%" y="1317" width="0.0185%" height="15" fill="rgb(229,116,26)" fg:x="2505" fg:w="1"/><text x="46.4933%" y="1327.50"></text></g><g><title>CheckTransaction (1 samples, 0.02%)</title><rect x="46.2618%" y="1285" width="0.0185%" height="15" fill="rgb(246,94,34)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1295.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1269" width="0.0185%" height="15" fill="rgb(251,73,21)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.2618%" y="1253" width="0.0185%" height="15" fill="rgb(254,121,25)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1237" width="0.0185%" height="15" fill="rgb(215,161,49)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1221" width="0.0185%" height="15" fill="rgb(221,43,13)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1205" width="0.0185%" height="15" fill="rgb(249,5,37)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1215.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1189" width="0.0185%" height="15" fill="rgb(226,25,44)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1199.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1173" width="0.0185%" height="15" fill="rgb(238,189,16)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1183.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.2618%" y="1157" width="0.0185%" height="15" fill="rgb(251,186,8)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1141" width="0.0185%" height="15" fill="rgb(254,34,31)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1125" width="0.0185%" height="15" fill="rgb(225,215,27)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1135.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1109" width="0.0185%" height="15" fill="rgb(221,192,48)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1119.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.2618%" y="1093" width="0.0185%" height="15" fill="rgb(219,137,20)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1103.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.2618%" y="1077" width="0.0185%" height="15" fill="rgb(219,84,11)" fg:x="2506" fg:w="1"/><text x="46.5118%" y="1087.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="46.3171%" y="1125" width="0.0185%" height="15" fill="rgb(224,10,23)" fg:x="2509" fg:w="1"/><text x="46.5671%" y="1135.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (5 samples, 0.09%)</title><rect x="46.2802%" y="1269" width="0.0923%" height="15" fill="rgb(248,22,39)" fg:x="2507" fg:w="5"/><text x="46.5302%" y="1279.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (3 samples, 0.06%)</title><rect x="46.3171%" y="1253" width="0.0554%" height="15" fill="rgb(212,154,20)" fg:x="2509" fg:w="3"/><text x="46.5671%" y="1263.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (3 samples, 0.06%)</title><rect x="46.3171%" y="1237" width="0.0554%" height="15" fill="rgb(236,199,50)" fg:x="2509" fg:w="3"/><text x="46.5671%" y="1247.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (3 samples, 0.06%)</title><rect x="46.3171%" y="1221" width="0.0554%" height="15" fill="rgb(211,9,17)" fg:x="2509" fg:w="3"/><text x="46.5671%" y="1231.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (3 samples, 0.06%)</title><rect x="46.3171%" y="1205" width="0.0554%" height="15" fill="rgb(243,216,36)" fg:x="2509" fg:w="3"/><text x="46.5671%" y="1215.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (3 samples, 0.06%)</title><rect x="46.3171%" y="1189" width="0.0554%" height="15" fill="rgb(250,2,10)" fg:x="2509" fg:w="3"/><text x="46.5671%" y="1199.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (3 samples, 0.06%)</title><rect x="46.3171%" y="1173" width="0.0554%" height="15" fill="rgb(226,50,48)" fg:x="2509" fg:w="3"/><text x="46.5671%" y="1183.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (3 samples, 0.06%)</title><rect x="46.3171%" y="1157" width="0.0554%" height="15" fill="rgb(243,81,16)" fg:x="2509" fg:w="3"/><text x="46.5671%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (3 samples, 0.06%)</title><rect x="46.3171%" y="1141" width="0.0554%" height="15" fill="rgb(250,14,2)" fg:x="2509" fg:w="3"/><text x="46.5671%" y="1151.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (2 samples, 0.04%)</title><rect x="46.3356%" y="1125" width="0.0369%" height="15" fill="rgb(233,135,29)" fg:x="2510" fg:w="2"/><text x="46.5856%" y="1135.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="46.3725%" y="1253" width="0.0185%" height="15" fill="rgb(224,64,43)" fg:x="2512" fg:w="1"/><text x="46.6225%" y="1263.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (9 samples, 0.17%)</title><rect x="46.2618%" y="1301" width="0.1661%" height="15" fill="rgb(238,84,13)" fg:x="2506" fg:w="9"/><text x="46.5118%" y="1311.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (8 samples, 0.15%)</title><rect x="46.2802%" y="1285" width="0.1477%" height="15" fill="rgb(253,48,26)" fg:x="2507" fg:w="8"/><text x="46.5302%" y="1295.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (3 samples, 0.06%)</title><rect x="46.3725%" y="1269" width="0.0554%" height="15" fill="rgb(205,223,31)" fg:x="2512" fg:w="3"/><text x="46.6225%" y="1279.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (2 samples, 0.04%)</title><rect x="46.3910%" y="1253" width="0.0369%" height="15" fill="rgb(221,41,32)" fg:x="2513" fg:w="2"/><text x="46.6410%" y="1263.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (2 samples, 0.04%)</title><rect x="46.3910%" y="1237" width="0.0369%" height="15" fill="rgb(213,158,31)" fg:x="2513" fg:w="2"/><text x="46.6410%" y="1247.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="46.3910%" y="1221" width="0.0369%" height="15" fill="rgb(245,126,43)" fg:x="2513" fg:w="2"/><text x="46.6410%" y="1231.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (2 samples, 0.04%)</title><rect x="46.3910%" y="1205" width="0.0369%" height="15" fill="rgb(227,7,22)" fg:x="2513" fg:w="2"/><text x="46.6410%" y="1215.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (2 samples, 0.04%)</title><rect x="46.3910%" y="1189" width="0.0369%" height="15" fill="rgb(252,90,44)" fg:x="2513" fg:w="2"/><text x="46.6410%" y="1199.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (2 samples, 0.04%)</title><rect x="46.3910%" y="1173" width="0.0369%" height="15" fill="rgb(253,91,0)" fg:x="2513" fg:w="2"/><text x="46.6410%" y="1183.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (2 samples, 0.04%)</title><rect x="46.3910%" y="1157" width="0.0369%" height="15" fill="rgb(252,175,49)" fg:x="2513" fg:w="2"/><text x="46.6410%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (2 samples, 0.04%)</title><rect x="46.3910%" y="1141" width="0.0369%" height="15" fill="rgb(246,150,1)" fg:x="2513" fg:w="2"/><text x="46.6410%" y="1151.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (2 samples, 0.04%)</title><rect x="46.3910%" y="1125" width="0.0369%" height="15" fill="rgb(241,192,25)" fg:x="2513" fg:w="2"/><text x="46.6410%" y="1135.50"></text></g><g><title>CheckTransaction (1 samples, 0.02%)</title><rect x="46.4279%" y="1269" width="0.0185%" height="15" fill="rgb(239,187,11)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1279.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1253" width="0.0185%" height="15" fill="rgb(218,202,51)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1263.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.4279%" y="1237" width="0.0185%" height="15" fill="rgb(225,176,8)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1247.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1221" width="0.0185%" height="15" fill="rgb(219,122,41)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1231.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1205" width="0.0185%" height="15" fill="rgb(248,140,20)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1189" width="0.0185%" height="15" fill="rgb(245,41,37)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1199.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1173" width="0.0185%" height="15" fill="rgb(235,82,39)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1183.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1157" width="0.0185%" height="15" fill="rgb(230,108,42)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1167.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.4279%" y="1141" width="0.0185%" height="15" fill="rgb(215,150,50)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1125" width="0.0185%" height="15" fill="rgb(233,212,5)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1109" width="0.0185%" height="15" fill="rgb(245,80,22)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1093" width="0.0185%" height="15" fill="rgb(238,129,16)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="1077" width="0.0185%" height="15" fill="rgb(240,19,0)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1087.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.4279%" y="1061" width="0.0185%" height="15" fill="rgb(232,42,35)" fg:x="2515" fg:w="1"/><text x="46.6779%" y="1071.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="46.4464%" y="1269" width="0.0185%" height="15" fill="rgb(223,130,24)" fg:x="2516" fg:w="1"/><text x="46.6964%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="46.4464%" y="1253" width="0.0185%" height="15" fill="rgb(237,16,22)" fg:x="2516" fg:w="1"/><text x="46.6964%" y="1263.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_drop_node (1 samples, 0.02%)</title><rect x="46.4464%" y="1237" width="0.0185%" height="15" fill="rgb(248,192,20)" fg:x="2516" fg:w="1"/><text x="46.6964%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_put_node (1 samples, 0.02%)</title><rect x="46.4464%" y="1221" width="0.0185%" height="15" fill="rgb(233,167,2)" fg:x="2516" fg:w="1"/><text x="46.6964%" y="1231.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="46.4464%" y="1205" width="0.0185%" height="15" fill="rgb(252,71,44)" fg:x="2516" fg:w="1"/><text x="46.6964%" y="1215.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="46.4464%" y="1189" width="0.0185%" height="15" fill="rgb(238,37,47)" fg:x="2516" fg:w="1"/><text x="46.6964%" y="1199.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="46.4464%" y="1173" width="0.0185%" height="15" fill="rgb(214,202,54)" fg:x="2516" fg:w="1"/><text x="46.6964%" y="1183.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="46.4464%" y="1157" width="0.0185%" height="15" fill="rgb(254,165,40)" fg:x="2516" fg:w="1"/><text x="46.6964%" y="1167.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="46.4464%" y="1141" width="0.0185%" height="15" fill="rgb(246,173,38)" fg:x="2516" fg:w="1"/><text x="46.6964%" y="1151.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (3 samples, 0.06%)</title><rect x="46.4279%" y="1301" width="0.0554%" height="15" fill="rgb(215,3,27)" fg:x="2515" fg:w="3"/><text x="46.6779%" y="1311.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (3 samples, 0.06%)</title><rect x="46.4279%" y="1285" width="0.0554%" height="15" fill="rgb(239,169,51)" fg:x="2515" fg:w="3"/><text x="46.6779%" y="1295.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="46.4648%" y="1269" width="0.0185%" height="15" fill="rgb(212,5,25)" fg:x="2517" fg:w="1"/><text x="46.7148%" y="1279.50"></text></g><g><title>CheckTransaction (13 samples, 0.24%)</title><rect x="46.2618%" y="1317" width="0.2400%" height="15" fill="rgb(243,45,17)" fg:x="2506" fg:w="13"/><text x="46.5118%" y="1327.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1301" width="0.0185%" height="15" fill="rgb(242,97,9)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1311.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.4833%" y="1285" width="0.0185%" height="15" fill="rgb(228,71,31)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1295.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1269" width="0.0185%" height="15" fill="rgb(252,184,16)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1279.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1253" width="0.0185%" height="15" fill="rgb(236,169,46)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1237" width="0.0185%" height="15" fill="rgb(207,17,47)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1247.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1221" width="0.0185%" height="15" fill="rgb(206,201,28)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1231.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1205" width="0.0185%" height="15" fill="rgb(224,184,23)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1215.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.4833%" y="1189" width="0.0185%" height="15" fill="rgb(208,139,48)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1173" width="0.0185%" height="15" fill="rgb(208,130,10)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1157" width="0.0185%" height="15" fill="rgb(211,213,45)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1167.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1141" width="0.0185%" height="15" fill="rgb(235,100,30)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1151.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1125" width="0.0185%" height="15" fill="rgb(206,144,31)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1135.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1109" width="0.0185%" height="15" fill="rgb(224,200,26)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1093" width="0.0185%" height="15" fill="rgb(247,104,53)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1103.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1077" width="0.0185%" height="15" fill="rgb(220,14,17)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1087.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1061" width="0.0185%" height="15" fill="rgb(230,140,40)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1071.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1045" width="0.0185%" height="15" fill="rgb(229,2,41)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1055.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1029" width="0.0185%" height="15" fill="rgb(232,89,16)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1039.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="1013" width="0.0185%" height="15" fill="rgb(247,59,52)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="997" width="0.0185%" height="15" fill="rgb(226,110,21)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="1007.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="981" width="0.0185%" height="15" fill="rgb(224,176,43)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="991.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="965" width="0.0185%" height="15" fill="rgb(221,73,6)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="975.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="949" width="0.0185%" height="15" fill="rgb(232,78,19)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="959.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="933" width="0.0185%" height="15" fill="rgb(233,112,48)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="943.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4833%" y="917" width="0.0185%" height="15" fill="rgb(243,131,47)" fg:x="2518" fg:w="1"/><text x="46.7333%" y="927.50"></text></g><g><title>CScript::GetSigOpCount (5 samples, 0.09%)</title><rect x="46.6310%" y="1269" width="0.0923%" height="15" fill="rgb(226,51,1)" fg:x="2526" fg:w="5"/><text x="46.8810%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="46.7233%" y="1253" width="0.0185%" height="15" fill="rgb(247,58,7)" fg:x="2531" fg:w="1"/><text x="46.9733%" y="1263.50"></text></g><g><title>GetLegacySigOpCount (2 samples, 0.04%)</title><rect x="46.7233%" y="1269" width="0.0369%" height="15" fill="rgb(209,7,32)" fg:x="2531" fg:w="2"/><text x="46.9733%" y="1279.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::end (1 samples, 0.02%)</title><rect x="46.7417%" y="1253" width="0.0185%" height="15" fill="rgb(209,39,41)" fg:x="2532" fg:w="1"/><text x="46.9917%" y="1263.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="46.7417%" y="1237" width="0.0185%" height="15" fill="rgb(226,182,46)" fg:x="2532" fg:w="1"/><text x="46.9917%" y="1247.50"></text></g><g><title>CScript::GetOp (22 samples, 0.41%)</title><rect x="46.5756%" y="1285" width="0.4061%" height="15" fill="rgb(230,219,10)" fg:x="2523" fg:w="22"/><text x="46.8256%" y="1295.50"></text></g><g><title>GetScriptOp (12 samples, 0.22%)</title><rect x="46.7602%" y="1269" width="0.2215%" height="15" fill="rgb(227,175,30)" fg:x="2533" fg:w="12"/><text x="47.0102%" y="1279.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="46.9633%" y="1253" width="0.0185%" height="15" fill="rgb(217,2,50)" fg:x="2544" fg:w="1"/><text x="47.2133%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="46.9633%" y="1237" width="0.0185%" height="15" fill="rgb(229,160,0)" fg:x="2544" fg:w="1"/><text x="47.2133%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="46.9817%" y="1269" width="0.0185%" height="15" fill="rgb(207,78,37)" fg:x="2545" fg:w="1"/><text x="47.2317%" y="1279.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::indirect_ptr (1 samples, 0.02%)</title><rect x="46.9817%" y="1253" width="0.0185%" height="15" fill="rgb(225,57,0)" fg:x="2545" fg:w="1"/><text x="47.2317%" y="1263.50"></text></g><g><title>CScript::GetSigOpCount (28 samples, 0.52%)</title><rect x="46.5018%" y="1301" width="0.5169%" height="15" fill="rgb(232,154,2)" fg:x="2519" fg:w="28"/><text x="46.7518%" y="1311.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (2 samples, 0.04%)</title><rect x="46.9817%" y="1285" width="0.0369%" height="15" fill="rgb(241,212,25)" fg:x="2545" fg:w="2"/><text x="47.2317%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="47.0002%" y="1269" width="0.0185%" height="15" fill="rgb(226,69,20)" fg:x="2546" fg:w="1"/><text x="47.2502%" y="1279.50"></text></g><g><title>GetLegacySigOpCount (3 samples, 0.06%)</title><rect x="47.0186%" y="1301" width="0.0554%" height="15" fill="rgb(247,184,54)" fg:x="2547" fg:w="3"/><text x="47.2686%" y="1311.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="47.0556%" y="1285" width="0.0185%" height="15" fill="rgb(210,145,0)" fg:x="2549" fg:w="1"/><text x="47.3056%" y="1295.50"></text></g><g><title>GetLegacySigOpCount (41 samples, 0.76%)</title><rect x="46.5018%" y="1317" width="0.7569%" height="15" fill="rgb(253,82,12)" fg:x="2519" fg:w="41"/><text x="46.7518%" y="1327.50"></text></g><g><title>GetScriptOp (10 samples, 0.18%)</title><rect x="47.0740%" y="1301" width="0.1846%" height="15" fill="rgb(245,42,11)" fg:x="2550" fg:w="10"/><text x="47.3240%" y="1311.50"></text></g><g><title>operator- (1 samples, 0.02%)</title><rect x="47.2402%" y="1285" width="0.0185%" height="15" fill="rgb(219,147,32)" fg:x="2559" fg:w="1"/><text x="47.4902%" y="1295.50"></text></g><g><title>GetScriptOp (2 samples, 0.04%)</title><rect x="47.2586%" y="1317" width="0.0369%" height="15" fill="rgb(246,12,7)" fg:x="2560" fg:w="2"/><text x="47.5086%" y="1327.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="47.2956%" y="1317" width="0.0185%" height="15" fill="rgb(243,50,9)" fg:x="2562" fg:w="1"/><text x="47.5456%" y="1327.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="47.3140%" y="1317" width="0.0185%" height="15" fill="rgb(219,149,6)" fg:x="2563" fg:w="1"/><text x="47.5640%" y="1327.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="47.3140%" y="1301" width="0.0185%" height="15" fill="rgb(241,51,42)" fg:x="2563" fg:w="1"/><text x="47.5640%" y="1311.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (1 samples, 0.02%)</title><rect x="47.3140%" y="1285" width="0.0185%" height="15" fill="rgb(226,128,27)" fg:x="2563" fg:w="1"/><text x="47.5640%" y="1295.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="47.3140%" y="1269" width="0.0185%" height="15" fill="rgb(244,144,4)" fg:x="2563" fg:w="1"/><text x="47.5640%" y="1279.50"></text></g><g><title>void std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_construct_node&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="47.3140%" y="1253" width="0.0185%" height="15" fill="rgb(221,4,13)" fg:x="2563" fg:w="1"/><text x="47.5640%" y="1263.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::construct&lt;COutPoint, COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="47.3140%" y="1237" width="0.0185%" height="15" fill="rgb(208,170,28)" fg:x="2563" fg:w="1"/><text x="47.5640%" y="1247.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="47.3140%" y="1221" width="0.0185%" height="15" fill="rgb(226,131,13)" fg:x="2563" fg:w="1"/><text x="47.5640%" y="1231.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.3325%" y="933" width="0.0185%" height="15" fill="rgb(215,72,41)" fg:x="2564" fg:w="1"/><text x="47.5825%" y="943.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="47.3325%" y="917" width="0.0185%" height="15" fill="rgb(243,108,20)" fg:x="2564" fg:w="1"/><text x="47.5825%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3325%" y="901" width="0.0185%" height="15" fill="rgb(230,189,17)" fg:x="2564" fg:w="1"/><text x="47.5825%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3325%" y="885" width="0.0185%" height="15" fill="rgb(220,50,17)" fg:x="2564" fg:w="1"/><text x="47.5825%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3325%" y="869" width="0.0185%" height="15" fill="rgb(248,152,48)" fg:x="2564" fg:w="1"/><text x="47.5825%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.3325%" y="853" width="0.0185%" height="15" fill="rgb(244,91,11)" fg:x="2564" fg:w="1"/><text x="47.5825%" y="863.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="47.3325%" y="837" width="0.0185%" height="15" fill="rgb(220,157,5)" fg:x="2564" fg:w="1"/><text x="47.5825%" y="847.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="47.3325%" y="1013" width="0.0369%" height="15" fill="rgb(253,137,8)" fg:x="2564" fg:w="2"/><text x="47.5825%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (2 samples, 0.04%)</title><rect x="47.3325%" y="997" width="0.0369%" height="15" fill="rgb(217,137,51)" fg:x="2564" fg:w="2"/><text x="47.5825%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="47.3325%" y="981" width="0.0369%" height="15" fill="rgb(218,209,53)" fg:x="2564" fg:w="2"/><text x="47.5825%" y="991.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="47.3325%" y="965" width="0.0369%" height="15" fill="rgb(249,137,25)" fg:x="2564" fg:w="2"/><text x="47.5825%" y="975.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="47.3325%" y="949" width="0.0369%" height="15" fill="rgb(239,155,26)" fg:x="2564" fg:w="2"/><text x="47.5825%" y="959.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3509%" y="933" width="0.0185%" height="15" fill="rgb(227,85,46)" fg:x="2565" fg:w="1"/><text x="47.6009%" y="943.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="47.3694%" y="1013" width="0.0369%" height="15" fill="rgb(251,107,43)" fg:x="2566" fg:w="2"/><text x="47.6194%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="47.3694%" y="997" width="0.0369%" height="15" fill="rgb(234,170,33)" fg:x="2566" fg:w="2"/><text x="47.6194%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="47.3694%" y="981" width="0.0369%" height="15" fill="rgb(206,29,35)" fg:x="2566" fg:w="2"/><text x="47.6194%" y="991.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="47.3694%" y="965" width="0.0369%" height="15" fill="rgb(227,138,25)" fg:x="2566" fg:w="2"/><text x="47.6194%" y="975.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="47.3694%" y="949" width="0.0369%" height="15" fill="rgb(249,131,35)" fg:x="2566" fg:w="2"/><text x="47.6194%" y="959.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="933" width="0.0185%" height="15" fill="rgb(239,6,40)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="943.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="917" width="0.0185%" height="15" fill="rgb(246,136,47)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="927.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="901" width="0.0185%" height="15" fill="rgb(253,58,26)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="911.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="885" width="0.0185%" height="15" fill="rgb(237,141,10)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="895.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="869" width="0.0185%" height="15" fill="rgb(234,156,12)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="879.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="853" width="0.0185%" height="15" fill="rgb(243,224,36)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="863.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="837" width="0.0185%" height="15" fill="rgb(205,229,51)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="821" width="0.0185%" height="15" fill="rgb(223,189,4)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="831.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="805" width="0.0185%" height="15" fill="rgb(249,167,54)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="815.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="789" width="0.0185%" height="15" fill="rgb(218,34,28)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="799.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="773" width="0.0185%" height="15" fill="rgb(232,109,42)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="757" width="0.0185%" height="15" fill="rgb(248,214,46)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="741" width="0.0185%" height="15" fill="rgb(244,216,40)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="47.3879%" y="725" width="0.0185%" height="15" fill="rgb(231,226,31)" fg:x="2567" fg:w="1"/><text x="47.6379%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (5 samples, 0.09%)</title><rect x="47.3325%" y="1029" width="0.0923%" height="15" fill="rgb(238,38,43)" fg:x="2564" fg:w="5"/><text x="47.5825%" y="1039.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="47.4063%" y="1013" width="0.0185%" height="15" fill="rgb(208,88,43)" fg:x="2568" fg:w="1"/><text x="47.6563%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.4063%" y="997" width="0.0185%" height="15" fill="rgb(205,136,37)" fg:x="2568" fg:w="1"/><text x="47.6563%" y="1007.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.4063%" y="981" width="0.0185%" height="15" fill="rgb(237,34,14)" fg:x="2568" fg:w="1"/><text x="47.6563%" y="991.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="47.4063%" y="965" width="0.0185%" height="15" fill="rgb(236,193,44)" fg:x="2568" fg:w="1"/><text x="47.6563%" y="975.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="47.4063%" y="949" width="0.0185%" height="15" fill="rgb(231,48,10)" fg:x="2568" fg:w="1"/><text x="47.6563%" y="959.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (1,894 samples, 34.96%)</title><rect x="12.4977%" y="1349" width="34.9640%" height="15" fill="rgb(213,141,34)" fg:x="677" fg:w="1894"/><text x="12.7477%" y="1359.50">ChainstateManager::ProcessNewBlock</text></g><g><title>CheckBlock (68 samples, 1.26%)</title><rect x="46.2064%" y="1333" width="1.2553%" height="15" fill="rgb(249,130,34)" fg:x="2503" fg:w="68"/><text x="46.4564%" y="1343.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1317" width="0.1292%" height="15" fill="rgb(219,42,41)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1327.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (7 samples, 0.13%)</title><rect x="47.3325%" y="1301" width="0.1292%" height="15" fill="rgb(224,100,54)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1311.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1285" width="0.1292%" height="15" fill="rgb(229,200,27)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1295.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1269" width="0.1292%" height="15" fill="rgb(217,118,10)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1253" width="0.1292%" height="15" fill="rgb(206,22,3)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1263.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1237" width="0.1292%" height="15" fill="rgb(232,163,46)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1247.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1221" width="0.1292%" height="15" fill="rgb(206,95,13)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1231.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1205" width="0.1292%" height="15" fill="rgb(253,154,18)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1215.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1189" width="0.1292%" height="15" fill="rgb(219,32,23)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1199.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1173" width="0.1292%" height="15" fill="rgb(230,191,45)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1157" width="0.1292%" height="15" fill="rgb(229,64,36)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1141" width="0.1292%" height="15" fill="rgb(205,129,25)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1151.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1125" width="0.1292%" height="15" fill="rgb(254,112,7)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1135.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1109" width="0.1292%" height="15" fill="rgb(226,53,48)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1119.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1093" width="0.1292%" height="15" fill="rgb(214,153,38)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1103.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1077" width="0.1292%" height="15" fill="rgb(243,101,7)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1061" width="0.1292%" height="15" fill="rgb(240,140,22)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1071.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="47.3325%" y="1045" width="0.1292%" height="15" fill="rgb(235,114,2)" fg:x="2564" fg:w="7"/><text x="47.5825%" y="1055.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="47.4248%" y="1029" width="0.0369%" height="15" fill="rgb(242,59,12)" fg:x="2569" fg:w="2"/><text x="47.6748%" y="1039.50"></text></g><g><title>node::BlockManager::AddToBlockIndex (2 samples, 0.04%)</title><rect x="47.4617%" y="1317" width="0.0369%" height="15" fill="rgb(252,134,9)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1327.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;CBlockHeader const&amp;&gt; (2 samples, 0.04%)</title><rect x="47.4617%" y="1301" width="0.0369%" height="15" fill="rgb(236,4,44)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1311.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256, CBlockHeader const&amp;&gt; (2 samples, 0.04%)</title><rect x="47.4617%" y="1285" width="0.0369%" height="15" fill="rgb(254,172,41)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1295.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256&amp;&amp;&gt;, std::tuple&lt;CBlockHeader const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="47.4617%" y="1269" width="0.0369%" height="15" fill="rgb(244,63,20)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1279.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256&amp;&amp;&gt;, std::tuple&lt;CBlockHeader const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="47.4617%" y="1253" width="0.0369%" height="15" fill="rgb(250,73,31)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1263.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="47.4617%" y="1237" width="0.0369%" height="15" fill="rgb(241,38,36)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1247.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="47.4617%" y="1221" width="0.0369%" height="15" fill="rgb(245,211,2)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1231.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="47.4617%" y="1205" width="0.0369%" height="15" fill="rgb(206,120,28)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1215.50"></text></g><g><title>operator new (2 samples, 0.04%)</title><rect x="47.4617%" y="1189" width="0.0369%" height="15" fill="rgb(211,59,34)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1199.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="47.4617%" y="1173" width="0.0369%" height="15" fill="rgb(233,168,5)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1183.50"></text></g><g><title>_int_malloc (2 samples, 0.04%)</title><rect x="47.4617%" y="1157" width="0.0369%" height="15" fill="rgb(234,33,13)" fg:x="2571" fg:w="2"/><text x="47.7117%" y="1167.50"></text></g><g><title>ChainstateManager::ProcessNewBlockHeaders (3 samples, 0.06%)</title><rect x="47.4617%" y="1349" width="0.0554%" height="15" fill="rgb(231,150,26)" fg:x="2571" fg:w="3"/><text x="47.7117%" y="1359.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (3 samples, 0.06%)</title><rect x="47.4617%" y="1333" width="0.0554%" height="15" fill="rgb(217,191,4)" fg:x="2571" fg:w="3"/><text x="47.7117%" y="1343.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.4986%" y="1317" width="0.0185%" height="15" fill="rgb(246,198,38)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1327.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="47.4986%" y="1301" width="0.0185%" height="15" fill="rgb(245,64,37)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1311.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="47.4986%" y="1285" width="0.0185%" height="15" fill="rgb(250,30,36)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1295.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="47.4986%" y="1269" width="0.0185%" height="15" fill="rgb(217,86,53)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1279.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="47.4986%" y="1253" width="0.0185%" height="15" fill="rgb(228,157,16)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1263.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.4986%" y="1237" width="0.0185%" height="15" fill="rgb(217,59,31)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1247.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="47.4986%" y="1221" width="0.0185%" height="15" fill="rgb(237,138,41)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1231.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.4986%" y="1205" width="0.0185%" height="15" fill="rgb(227,91,49)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1215.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="47.4986%" y="1189" width="0.0185%" height="15" fill="rgb(247,21,44)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4986%" y="1173" width="0.0185%" height="15" fill="rgb(219,210,51)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4986%" y="1157" width="0.0185%" height="15" fill="rgb(209,140,6)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4986%" y="1141" width="0.0185%" height="15" fill="rgb(221,188,24)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4986%" y="1125" width="0.0185%" height="15" fill="rgb(232,154,20)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4986%" y="1109" width="0.0185%" height="15" fill="rgb(244,137,50)" fg:x="2573" fg:w="1"/><text x="47.7486%" y="1119.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="47.5171%" y="1109" width="0.0369%" height="15" fill="rgb(225,185,43)" fg:x="2574" fg:w="2"/><text x="47.7671%" y="1119.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="47.5171%" y="1093" width="0.0369%" height="15" fill="rgb(213,205,38)" fg:x="2574" fg:w="2"/><text x="47.7671%" y="1103.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="47.5540%" y="1093" width="0.0185%" height="15" fill="rgb(236,73,12)" fg:x="2576" fg:w="1"/><text x="47.8040%" y="1103.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="47.5540%" y="1077" width="0.0185%" height="15" fill="rgb(235,219,13)" fg:x="2576" fg:w="1"/><text x="47.8040%" y="1087.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="47.5171%" y="1125" width="0.0738%" height="15" fill="rgb(218,59,36)" fg:x="2574" fg:w="4"/><text x="47.7671%" y="1135.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="47.5540%" y="1109" width="0.0369%" height="15" fill="rgb(205,110,39)" fg:x="2576" fg:w="2"/><text x="47.8040%" y="1119.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="47.5725%" y="1093" width="0.0185%" height="15" fill="rgb(218,206,42)" fg:x="2577" fg:w="1"/><text x="47.8225%" y="1103.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="47.5725%" y="1077" width="0.0185%" height="15" fill="rgb(248,125,24)" fg:x="2577" fg:w="1"/><text x="47.8225%" y="1087.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="47.5909%" y="1125" width="0.0185%" height="15" fill="rgb(242,28,27)" fg:x="2578" fg:w="1"/><text x="47.8409%" y="1135.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="47.6094%" y="869" width="0.0369%" height="15" fill="rgb(216,228,15)" fg:x="2579" fg:w="2"/><text x="47.8594%" y="879.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.6278%" y="853" width="0.0185%" height="15" fill="rgb(235,116,46)" fg:x="2580" fg:w="1"/><text x="47.8778%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="47.6463%" y="869" width="0.0185%" height="15" fill="rgb(224,18,32)" fg:x="2581" fg:w="1"/><text x="47.8963%" y="879.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="47.6463%" y="853" width="0.0185%" height="15" fill="rgb(252,5,12)" fg:x="2581" fg:w="1"/><text x="47.8963%" y="863.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="47.6463%" y="837" width="0.0185%" height="15" fill="rgb(251,36,5)" fg:x="2581" fg:w="1"/><text x="47.8963%" y="847.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.6648%" y="869" width="0.0185%" height="15" fill="rgb(217,53,14)" fg:x="2582" fg:w="1"/><text x="47.9148%" y="879.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="47.6832%" y="869" width="0.0185%" height="15" fill="rgb(215,86,45)" fg:x="2583" fg:w="1"/><text x="47.9332%" y="879.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::vector (2 samples, 0.04%)</title><rect x="47.7386%" y="709" width="0.0369%" height="15" fill="rgb(242,169,11)" fg:x="2586" fg:w="2"/><text x="47.9886%" y="719.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_base (2 samples, 0.04%)</title><rect x="47.7386%" y="693" width="0.0369%" height="15" fill="rgb(211,213,45)" fg:x="2586" fg:w="2"/><text x="47.9886%" y="703.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl::_Vector_impl (2 samples, 0.04%)</title><rect x="47.7386%" y="677" width="0.0369%" height="15" fill="rgb(205,88,11)" fg:x="2586" fg:w="2"/><text x="47.9886%" y="687.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl_data::_Vector_impl_data (2 samples, 0.04%)</title><rect x="47.7386%" y="661" width="0.0369%" height="15" fill="rgb(252,69,26)" fg:x="2586" fg:w="2"/><text x="47.9886%" y="671.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="47.7386%" y="853" width="0.0738%" height="15" fill="rgb(246,123,37)" fg:x="2586" fg:w="4"/><text x="47.9886%" y="863.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="47.7386%" y="837" width="0.0738%" height="15" fill="rgb(212,205,5)" fg:x="2586" fg:w="4"/><text x="47.9886%" y="847.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="47.7386%" y="821" width="0.0738%" height="15" fill="rgb(253,148,0)" fg:x="2586" fg:w="4"/><text x="47.9886%" y="831.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="47.7386%" y="805" width="0.0738%" height="15" fill="rgb(239,22,4)" fg:x="2586" fg:w="4"/><text x="47.9886%" y="815.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="47.7386%" y="789" width="0.0738%" height="15" fill="rgb(226,26,53)" fg:x="2586" fg:w="4"/><text x="47.9886%" y="799.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="47.7386%" y="773" width="0.0738%" height="15" fill="rgb(225,229,45)" fg:x="2586" fg:w="4"/><text x="47.9886%" y="783.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="47.7386%" y="757" width="0.0738%" height="15" fill="rgb(220,60,37)" fg:x="2586" fg:w="4"/><text x="47.9886%" y="767.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="47.7386%" y="741" width="0.0738%" height="15" fill="rgb(217,180,35)" fg:x="2586" fg:w="4"/><text x="47.9886%" y="751.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="47.7386%" y="725" width="0.0738%" height="15" fill="rgb(229,7,53)" fg:x="2586" fg:w="4"/><text x="47.9886%" y="735.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="47.7755%" y="709" width="0.0369%" height="15" fill="rgb(254,137,3)" fg:x="2588" fg:w="2"/><text x="48.0255%" y="719.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (2 samples, 0.04%)</title><rect x="47.7755%" y="693" width="0.0369%" height="15" fill="rgb(215,140,41)" fg:x="2588" fg:w="2"/><text x="48.0255%" y="703.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (2 samples, 0.04%)</title><rect x="47.7755%" y="677" width="0.0369%" height="15" fill="rgb(250,80,15)" fg:x="2588" fg:w="2"/><text x="48.0255%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (2 samples, 0.04%)</title><rect x="47.7755%" y="661" width="0.0369%" height="15" fill="rgb(252,191,6)" fg:x="2588" fg:w="2"/><text x="48.0255%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="47.7755%" y="645" width="0.0369%" height="15" fill="rgb(246,217,18)" fg:x="2588" fg:w="2"/><text x="48.0255%" y="655.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="47.7755%" y="629" width="0.0369%" height="15" fill="rgb(223,93,7)" fg:x="2588" fg:w="2"/><text x="48.0255%" y="639.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.13%)</title><rect x="47.7017%" y="869" width="0.1292%" height="15" fill="rgb(225,55,52)" fg:x="2584" fg:w="7"/><text x="47.9517%" y="879.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::operator= (1 samples, 0.02%)</title><rect x="47.8124%" y="853" width="0.0185%" height="15" fill="rgb(240,31,24)" fg:x="2590" fg:w="1"/><text x="48.0624%" y="863.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.02%)</title><rect x="47.8124%" y="837" width="0.0185%" height="15" fill="rgb(205,56,52)" fg:x="2590" fg:w="1"/><text x="48.0624%" y="847.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.02%)</title><rect x="47.8124%" y="821" width="0.0185%" height="15" fill="rgb(246,146,12)" fg:x="2590" fg:w="1"/><text x="48.0624%" y="831.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.02%)</title><rect x="47.8124%" y="805" width="0.0185%" height="15" fill="rgb(239,84,36)" fg:x="2590" fg:w="1"/><text x="48.0624%" y="815.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.13%)</title><rect x="47.8494%" y="725" width="0.1292%" height="15" fill="rgb(207,41,40)" fg:x="2592" fg:w="7"/><text x="48.0994%" y="735.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="47.8494%" y="709" width="0.1292%" height="15" fill="rgb(241,179,25)" fg:x="2592" fg:w="7"/><text x="48.0994%" y="719.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="47.8494%" y="693" width="0.1292%" height="15" fill="rgb(210,0,34)" fg:x="2592" fg:w="7"/><text x="48.0994%" y="703.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="47.8494%" y="677" width="0.1292%" height="15" fill="rgb(225,217,29)" fg:x="2592" fg:w="7"/><text x="48.0994%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="47.8863%" y="661" width="0.0923%" height="15" fill="rgb(216,191,38)" fg:x="2594" fg:w="5"/><text x="48.1363%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="47.8863%" y="645" width="0.0923%" height="15" fill="rgb(232,140,52)" fg:x="2594" fg:w="5"/><text x="48.1363%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="47.9047%" y="629" width="0.0738%" height="15" fill="rgb(223,158,51)" fg:x="2595" fg:w="4"/><text x="48.1547%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="47.9047%" y="613" width="0.0738%" height="15" fill="rgb(235,29,51)" fg:x="2595" fg:w="4"/><text x="48.1547%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.9601%" y="597" width="0.0185%" height="15" fill="rgb(215,181,18)" fg:x="2598" fg:w="1"/><text x="48.2101%" y="607.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (47 samples, 0.87%)</title><rect x="47.8494%" y="837" width="0.8676%" height="15" fill="rgb(227,125,34)" fg:x="2592" fg:w="47"/><text x="48.0994%" y="847.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (47 samples, 0.87%)</title><rect x="47.8494%" y="821" width="0.8676%" height="15" fill="rgb(230,197,49)" fg:x="2592" fg:w="47"/><text x="48.0994%" y="831.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (47 samples, 0.87%)</title><rect x="47.8494%" y="805" width="0.8676%" height="15" fill="rgb(239,141,16)" fg:x="2592" fg:w="47"/><text x="48.0994%" y="815.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (47 samples, 0.87%)</title><rect x="47.8494%" y="789" width="0.8676%" height="15" fill="rgb(225,105,43)" fg:x="2592" fg:w="47"/><text x="48.0994%" y="799.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (47 samples, 0.87%)</title><rect x="47.8494%" y="773" width="0.8676%" height="15" fill="rgb(214,131,14)" fg:x="2592" fg:w="47"/><text x="48.0994%" y="783.50"></text></g><g><title>operator new (47 samples, 0.87%)</title><rect x="47.8494%" y="757" width="0.8676%" height="15" fill="rgb(229,177,11)" fg:x="2592" fg:w="47"/><text x="48.0994%" y="767.50"></text></g><g><title>malloc (47 samples, 0.87%)</title><rect x="47.8494%" y="741" width="0.8676%" height="15" fill="rgb(231,180,14)" fg:x="2592" fg:w="47"/><text x="48.0994%" y="751.50"></text></g><g><title>_int_malloc (40 samples, 0.74%)</title><rect x="47.9786%" y="725" width="0.7384%" height="15" fill="rgb(232,88,2)" fg:x="2599" fg:w="40"/><text x="48.2286%" y="735.50"></text></g><g><title>malloc_consolidate (22 samples, 0.41%)</title><rect x="48.3109%" y="709" width="0.4061%" height="15" fill="rgb(205,220,8)" fg:x="2617" fg:w="22"/><text x="48.5609%" y="719.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (48 samples, 0.89%)</title><rect x="47.8494%" y="853" width="0.8861%" height="15" fill="rgb(225,23,53)" fg:x="2592" fg:w="48"/><text x="48.0994%" y="863.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_S_relocate (1 samples, 0.02%)</title><rect x="48.7170%" y="837" width="0.0185%" height="15" fill="rgb(213,62,29)" fg:x="2639" fg:w="1"/><text x="48.9670%" y="847.50"></text></g><g><title>CTxIn* std::__relocate_a&lt;CTxIn*, CTxIn*, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7170%" y="821" width="0.0185%" height="15" fill="rgb(227,75,7)" fg:x="2639" fg:w="1"/><text x="48.9670%" y="831.50"></text></g><g><title>CTxIn* std::__relocate_a_1&lt;CTxIn*, CTxIn*, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7170%" y="805" width="0.0185%" height="15" fill="rgb(207,105,14)" fg:x="2639" fg:w="1"/><text x="48.9670%" y="815.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (1 samples, 0.02%)</title><rect x="48.7355%" y="629" width="0.0185%" height="15" fill="rgb(245,62,29)" fg:x="2640" fg:w="1"/><text x="48.9855%" y="639.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (1 samples, 0.02%)</title><rect x="48.7355%" y="613" width="0.0185%" height="15" fill="rgb(236,202,4)" fg:x="2640" fg:w="1"/><text x="48.9855%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.02%)</title><rect x="48.7355%" y="597" width="0.0185%" height="15" fill="rgb(250,67,1)" fg:x="2640" fg:w="1"/><text x="48.9855%" y="607.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="48.7355%" y="581" width="0.0185%" height="15" fill="rgb(253,115,44)" fg:x="2640" fg:w="1"/><text x="48.9855%" y="591.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="48.7355%" y="565" width="0.0185%" height="15" fill="rgb(251,139,18)" fg:x="2640" fg:w="1"/><text x="48.9855%" y="575.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="853" width="0.0369%" height="15" fill="rgb(218,22,32)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="837" width="0.0369%" height="15" fill="rgb(243,53,5)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="847.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="821" width="0.0369%" height="15" fill="rgb(227,56,16)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="831.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="805" width="0.0369%" height="15" fill="rgb(245,53,0)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="815.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="789" width="0.0369%" height="15" fill="rgb(216,170,35)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="799.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="773" width="0.0369%" height="15" fill="rgb(211,200,8)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="783.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="757" width="0.0369%" height="15" fill="rgb(228,204,44)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="741" width="0.0369%" height="15" fill="rgb(214,121,17)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="751.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="725" width="0.0369%" height="15" fill="rgb(233,64,38)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="735.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="709" width="0.0369%" height="15" fill="rgb(253,54,19)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="719.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="693" width="0.0369%" height="15" fill="rgb(253,94,18)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="703.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="677" width="0.0369%" height="15" fill="rgb(227,57,52)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="687.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="661" width="0.0369%" height="15" fill="rgb(230,228,50)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="48.7355%" y="645" width="0.0369%" height="15" fill="rgb(217,205,27)" fg:x="2640" fg:w="2"/><text x="48.9855%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="48.7539%" y="629" width="0.0185%" height="15" fill="rgb(252,71,50)" fg:x="2641" fg:w="1"/><text x="49.0039%" y="639.50"></text></g><g><title>CTxIn&amp; std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="48.7539%" y="613" width="0.0185%" height="15" fill="rgb(209,86,4)" fg:x="2641" fg:w="1"/><text x="49.0039%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (64 samples, 1.18%)</title><rect x="47.6094%" y="933" width="1.1815%" height="15" fill="rgb(229,94,0)" fg:x="2579" fg:w="64"/><text x="47.8594%" y="943.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (64 samples, 1.18%)</title><rect x="47.6094%" y="917" width="1.1815%" height="15" fill="rgb(252,223,21)" fg:x="2579" fg:w="64"/><text x="47.8594%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (64 samples, 1.18%)</title><rect x="47.6094%" y="901" width="1.1815%" height="15" fill="rgb(230,210,4)" fg:x="2579" fg:w="64"/><text x="47.8594%" y="911.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (64 samples, 1.18%)</title><rect x="47.6094%" y="885" width="1.1815%" height="15" fill="rgb(240,149,38)" fg:x="2579" fg:w="64"/><text x="47.8594%" y="895.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (52 samples, 0.96%)</title><rect x="47.8309%" y="869" width="0.9599%" height="15" fill="rgb(254,105,20)" fg:x="2591" fg:w="52"/><text x="48.0809%" y="879.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="853" width="0.0185%" height="15" fill="rgb(253,87,46)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="863.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="837" width="0.0185%" height="15" fill="rgb(253,116,33)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="847.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="821" width="0.0185%" height="15" fill="rgb(229,198,5)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="831.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="805" width="0.0185%" height="15" fill="rgb(242,38,37)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="815.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="789" width="0.0185%" height="15" fill="rgb(242,69,53)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="799.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="773" width="0.0185%" height="15" fill="rgb(249,80,16)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="783.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="757" width="0.0185%" height="15" fill="rgb(206,128,11)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="767.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="741" width="0.0185%" height="15" fill="rgb(212,35,20)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="751.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="725" width="0.0185%" height="15" fill="rgb(236,79,13)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="735.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="709" width="0.0185%" height="15" fill="rgb(233,123,3)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="719.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="693" width="0.0185%" height="15" fill="rgb(214,93,52)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="703.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="677" width="0.0185%" height="15" fill="rgb(251,37,40)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="687.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (1 samples, 0.02%)</title><rect x="48.7724%" y="661" width="0.0185%" height="15" fill="rgb(227,80,54)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="645" width="0.0185%" height="15" fill="rgb(254,48,11)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="655.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7724%" y="629" width="0.0185%" height="15" fill="rgb(235,193,26)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="639.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="48.7724%" y="613" width="0.0185%" height="15" fill="rgb(229,99,21)" fg:x="2642" fg:w="1"/><text x="49.0224%" y="623.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7908%" y="869" width="0.0185%" height="15" fill="rgb(211,140,41)" fg:x="2643" fg:w="1"/><text x="49.0408%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="869" width="0.0369%" height="15" fill="rgb(240,227,30)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="879.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="853" width="0.0369%" height="15" fill="rgb(215,224,45)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="837" width="0.0369%" height="15" fill="rgb(206,123,31)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="847.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="821" width="0.0369%" height="15" fill="rgb(210,138,16)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="831.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="805" width="0.0369%" height="15" fill="rgb(228,57,28)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="815.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="789" width="0.0369%" height="15" fill="rgb(242,170,10)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="799.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="773" width="0.0369%" height="15" fill="rgb(228,214,39)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="783.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="757" width="0.0369%" height="15" fill="rgb(218,179,33)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="741" width="0.0369%" height="15" fill="rgb(235,193,39)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="751.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="725" width="0.0369%" height="15" fill="rgb(219,221,36)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="735.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="709" width="0.0369%" height="15" fill="rgb(248,218,19)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="719.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="693" width="0.0369%" height="15" fill="rgb(205,50,9)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="703.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="677" width="0.0369%" height="15" fill="rgb(238,81,28)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="687.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="661" width="0.0369%" height="15" fill="rgb(235,110,19)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="645" width="0.0369%" height="15" fill="rgb(214,7,14)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="655.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="629" width="0.0369%" height="15" fill="rgb(211,77,3)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="639.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.8093%" y="613" width="0.0369%" height="15" fill="rgb(229,5,9)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.04%)</title><rect x="48.8093%" y="597" width="0.0369%" height="15" fill="rgb(225,90,11)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="607.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="48.8093%" y="581" width="0.0369%" height="15" fill="rgb(242,56,8)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="591.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (2 samples, 0.04%)</title><rect x="48.8093%" y="565" width="0.0369%" height="15" fill="rgb(249,212,39)" fg:x="2644" fg:w="2"/><text x="49.0593%" y="575.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.13%)</title><rect x="48.8462%" y="725" width="0.1292%" height="15" fill="rgb(236,90,9)" fg:x="2646" fg:w="7"/><text x="49.0962%" y="735.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="48.8462%" y="709" width="0.1292%" height="15" fill="rgb(206,88,35)" fg:x="2646" fg:w="7"/><text x="49.0962%" y="719.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="48.8462%" y="693" width="0.1292%" height="15" fill="rgb(205,126,30)" fg:x="2646" fg:w="7"/><text x="49.0962%" y="703.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="48.8462%" y="677" width="0.1292%" height="15" fill="rgb(230,176,12)" fg:x="2646" fg:w="7"/><text x="49.0962%" y="687.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="48.8462%" y="661" width="0.1292%" height="15" fill="rgb(243,19,9)" fg:x="2646" fg:w="7"/><text x="49.0962%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="48.8647%" y="645" width="0.1108%" height="15" fill="rgb(245,171,17)" fg:x="2647" fg:w="6"/><text x="49.1147%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="48.9016%" y="629" width="0.0738%" height="15" fill="rgb(227,52,21)" fg:x="2649" fg:w="4"/><text x="49.1516%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="48.9016%" y="613" width="0.0738%" height="15" fill="rgb(238,69,14)" fg:x="2649" fg:w="4"/><text x="49.1516%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.9570%" y="597" width="0.0185%" height="15" fill="rgb(241,156,39)" fg:x="2652" fg:w="1"/><text x="49.2070%" y="607.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (19 samples, 0.35%)</title><rect x="48.8462%" y="837" width="0.3507%" height="15" fill="rgb(212,227,28)" fg:x="2646" fg:w="19"/><text x="49.0962%" y="847.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (19 samples, 0.35%)</title><rect x="48.8462%" y="821" width="0.3507%" height="15" fill="rgb(209,118,27)" fg:x="2646" fg:w="19"/><text x="49.0962%" y="831.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (19 samples, 0.35%)</title><rect x="48.8462%" y="805" width="0.3507%" height="15" fill="rgb(226,102,5)" fg:x="2646" fg:w="19"/><text x="49.0962%" y="815.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::allocate (19 samples, 0.35%)</title><rect x="48.8462%" y="789" width="0.3507%" height="15" fill="rgb(223,34,3)" fg:x="2646" fg:w="19"/><text x="49.0962%" y="799.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::allocate (19 samples, 0.35%)</title><rect x="48.8462%" y="773" width="0.3507%" height="15" fill="rgb(221,81,38)" fg:x="2646" fg:w="19"/><text x="49.0962%" y="783.50"></text></g><g><title>operator new (19 samples, 0.35%)</title><rect x="48.8462%" y="757" width="0.3507%" height="15" fill="rgb(236,219,28)" fg:x="2646" fg:w="19"/><text x="49.0962%" y="767.50"></text></g><g><title>malloc (19 samples, 0.35%)</title><rect x="48.8462%" y="741" width="0.3507%" height="15" fill="rgb(213,200,14)" fg:x="2646" fg:w="19"/><text x="49.0962%" y="751.50"></text></g><g><title>_int_malloc (12 samples, 0.22%)</title><rect x="48.9754%" y="725" width="0.2215%" height="15" fill="rgb(240,33,19)" fg:x="2653" fg:w="12"/><text x="49.2254%" y="735.50"></text></g><g><title>malloc_consolidate (6 samples, 0.11%)</title><rect x="49.0862%" y="709" width="0.1108%" height="15" fill="rgb(233,113,27)" fg:x="2659" fg:w="6"/><text x="49.3362%" y="719.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (20 samples, 0.37%)</title><rect x="48.8462%" y="853" width="0.3692%" height="15" fill="rgb(220,221,18)" fg:x="2646" fg:w="20"/><text x="49.0962%" y="863.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_S_relocate (1 samples, 0.02%)</title><rect x="49.1970%" y="837" width="0.0185%" height="15" fill="rgb(238,92,8)" fg:x="2665" fg:w="1"/><text x="49.4470%" y="847.50"></text></g><g><title>CTxOut* std::__relocate_a&lt;CTxOut*, CTxOut*, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="49.1970%" y="821" width="0.0185%" height="15" fill="rgb(222,164,16)" fg:x="2665" fg:w="1"/><text x="49.4470%" y="831.50"></text></g><g><title>CTxOut* std::__relocate_a_1&lt;CTxOut*, CTxOut*, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="49.1970%" y="805" width="0.0185%" height="15" fill="rgb(241,119,3)" fg:x="2665" fg:w="1"/><text x="49.4470%" y="815.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="49.2154%" y="613" width="0.0369%" height="15" fill="rgb(241,44,8)" fg:x="2666" fg:w="2"/><text x="49.4654%" y="623.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="49.2339%" y="597" width="0.0185%" height="15" fill="rgb(230,36,40)" fg:x="2667" fg:w="1"/><text x="49.4839%" y="607.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (3 samples, 0.06%)</title><rect x="49.2154%" y="629" width="0.0554%" height="15" fill="rgb(243,16,36)" fg:x="2666" fg:w="3"/><text x="49.4654%" y="639.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::GetStream (1 samples, 0.02%)</title><rect x="49.2524%" y="613" width="0.0185%" height="15" fill="rgb(231,4,26)" fg:x="2668" fg:w="1"/><text x="49.5024%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (1 samples, 0.02%)</title><rect x="49.2708%" y="629" width="0.0185%" height="15" fill="rgb(240,9,31)" fg:x="2669" fg:w="1"/><text x="49.5208%" y="639.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="49.2708%" y="613" width="0.0185%" height="15" fill="rgb(207,173,15)" fg:x="2669" fg:w="1"/><text x="49.5208%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="49.2708%" y="597" width="0.0185%" height="15" fill="rgb(224,192,53)" fg:x="2669" fg:w="1"/><text x="49.5208%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="49.2708%" y="581" width="0.0185%" height="15" fill="rgb(223,67,28)" fg:x="2669" fg:w="1"/><text x="49.5208%" y="591.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="49.2708%" y="565" width="0.0185%" height="15" fill="rgb(211,20,47)" fg:x="2669" fg:w="1"/><text x="49.5208%" y="575.50"></text></g><g><title>__lll_lock_wake_private (10 samples, 0.18%)</title><rect x="49.3077%" y="565" width="0.1846%" height="15" fill="rgb(240,228,2)" fg:x="2671" fg:w="10"/><text x="49.5577%" y="575.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="49.3077%" y="549" width="0.1846%" height="15" fill="rgb(248,151,12)" fg:x="2671" fg:w="10"/><text x="49.5577%" y="559.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="49.3077%" y="533" width="0.1846%" height="15" fill="rgb(244,8,39)" fg:x="2671" fg:w="10"/><text x="49.5577%" y="543.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="49.3077%" y="517" width="0.1846%" height="15" fill="rgb(222,26,8)" fg:x="2671" fg:w="10"/><text x="49.5577%" y="527.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="49.3447%" y="501" width="0.1477%" height="15" fill="rgb(213,106,44)" fg:x="2673" fg:w="8"/><text x="49.5947%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="49.3447%" y="485" width="0.1477%" height="15" fill="rgb(214,129,20)" fg:x="2673" fg:w="8"/><text x="49.5947%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="49.3631%" y="469" width="0.1292%" height="15" fill="rgb(212,32,13)" fg:x="2674" fg:w="7"/><text x="49.6131%" y="479.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="49.3631%" y="453" width="0.1292%" height="15" fill="rgb(208,168,33)" fg:x="2674" fg:w="7"/><text x="49.6131%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.4739%" y="437" width="0.0185%" height="15" fill="rgb(231,207,8)" fg:x="2680" fg:w="1"/><text x="49.7239%" y="447.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (15 samples, 0.28%)</title><rect x="49.2893%" y="629" width="0.2769%" height="15" fill="rgb(235,219,23)" fg:x="2670" fg:w="15"/><text x="49.5393%" y="639.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (15 samples, 0.28%)</title><rect x="49.2893%" y="613" width="0.2769%" height="15" fill="rgb(226,216,26)" fg:x="2670" fg:w="15"/><text x="49.5393%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (15 samples, 0.28%)</title><rect x="49.2893%" y="597" width="0.2769%" height="15" fill="rgb(239,137,16)" fg:x="2670" fg:w="15"/><text x="49.5393%" y="607.50"></text></g><g><title>malloc (14 samples, 0.26%)</title><rect x="49.3077%" y="581" width="0.2584%" height="15" fill="rgb(207,12,36)" fg:x="2671" fg:w="14"/><text x="49.5577%" y="591.50"></text></g><g><title>_int_malloc (4 samples, 0.07%)</title><rect x="49.4923%" y="565" width="0.0738%" height="15" fill="rgb(210,214,24)" fg:x="2681" fg:w="4"/><text x="49.7423%" y="575.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.5662%" y="629" width="0.0185%" height="15" fill="rgb(206,56,30)" fg:x="2685" fg:w="1"/><text x="49.8162%" y="639.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (21 samples, 0.39%)</title><rect x="49.2154%" y="645" width="0.3877%" height="15" fill="rgb(228,143,26)" fg:x="2666" fg:w="21"/><text x="49.4654%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.5846%" y="629" width="0.0185%" height="15" fill="rgb(216,218,46)" fg:x="2686" fg:w="1"/><text x="49.8346%" y="639.50"></text></g><g><title>CTxOut&amp; std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="49.5846%" y="613" width="0.0185%" height="15" fill="rgb(206,6,19)" fg:x="2686" fg:w="1"/><text x="49.8346%" y="623.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::construct&lt;CTxOut&gt; (1 samples, 0.02%)</title><rect x="49.5846%" y="597" width="0.0185%" height="15" fill="rgb(239,177,51)" fg:x="2686" fg:w="1"/><text x="49.8346%" y="607.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="49.5846%" y="581" width="0.0185%" height="15" fill="rgb(216,55,25)" fg:x="2686" fg:w="1"/><text x="49.8346%" y="591.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="49.5846%" y="565" width="0.0185%" height="15" fill="rgb(231,163,29)" fg:x="2686" fg:w="1"/><text x="49.8346%" y="575.50"></text></g><g><title>CTxOut::SetNull (1 samples, 0.02%)</title><rect x="49.5846%" y="549" width="0.0185%" height="15" fill="rgb(232,149,50)" fg:x="2686" fg:w="1"/><text x="49.8346%" y="559.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="853" width="0.4246%" height="15" fill="rgb(223,142,48)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="837" width="0.4246%" height="15" fill="rgb(245,83,23)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="847.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="821" width="0.4246%" height="15" fill="rgb(224,63,2)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="831.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="805" width="0.4246%" height="15" fill="rgb(218,65,53)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="815.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="789" width="0.4246%" height="15" fill="rgb(221,84,29)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="799.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="773" width="0.4246%" height="15" fill="rgb(234,0,32)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="783.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="757" width="0.4246%" height="15" fill="rgb(206,20,16)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="741" width="0.4246%" height="15" fill="rgb(244,172,18)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="751.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="725" width="0.4246%" height="15" fill="rgb(254,133,1)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="735.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="709" width="0.4246%" height="15" fill="rgb(222,206,41)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="719.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="693" width="0.4246%" height="15" fill="rgb(212,3,42)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="703.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="677" width="0.4246%" height="15" fill="rgb(241,11,4)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="687.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (23 samples, 0.42%)</title><rect x="49.2154%" y="661" width="0.4246%" height="15" fill="rgb(205,19,26)" fg:x="2666" fg:w="23"/><text x="49.4654%" y="671.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.6031%" y="645" width="0.0369%" height="15" fill="rgb(210,179,32)" fg:x="2687" fg:w="2"/><text x="49.8531%" y="655.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="49.6216%" y="629" width="0.0185%" height="15" fill="rgb(227,116,49)" fg:x="2688" fg:w="1"/><text x="49.8716%" y="639.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="49.6216%" y="613" width="0.0185%" height="15" fill="rgb(211,146,6)" fg:x="2688" fg:w="1"/><text x="49.8716%" y="623.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="49.6400%" y="837" width="0.0185%" height="15" fill="rgb(219,44,39)" fg:x="2689" fg:w="1"/><text x="49.8900%" y="847.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (48 samples, 0.89%)</title><rect x="48.7908%" y="933" width="0.8861%" height="15" fill="rgb(234,128,11)" fg:x="2643" fg:w="48"/><text x="49.0408%" y="943.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (48 samples, 0.89%)</title><rect x="48.7908%" y="917" width="0.8861%" height="15" fill="rgb(220,183,53)" fg:x="2643" fg:w="48"/><text x="49.0408%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (48 samples, 0.89%)</title><rect x="48.7908%" y="901" width="0.8861%" height="15" fill="rgb(213,219,32)" fg:x="2643" fg:w="48"/><text x="49.0408%" y="911.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.89%)</title><rect x="48.7908%" y="885" width="0.8861%" height="15" fill="rgb(232,156,16)" fg:x="2643" fg:w="48"/><text x="49.0408%" y="895.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (45 samples, 0.83%)</title><rect x="48.8462%" y="869" width="0.8307%" height="15" fill="rgb(246,135,34)" fg:x="2646" fg:w="45"/><text x="49.0962%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.6400%" y="853" width="0.0369%" height="15" fill="rgb(241,99,0)" fg:x="2689" fg:w="2"/><text x="49.8900%" y="863.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="49.6585%" y="837" width="0.0185%" height="15" fill="rgb(222,103,45)" fg:x="2690" fg:w="1"/><text x="49.9085%" y="847.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="49.6769%" y="725" width="0.0185%" height="15" fill="rgb(212,57,4)" fg:x="2691" fg:w="1"/><text x="49.9269%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6769%" y="709" width="0.0185%" height="15" fill="rgb(215,68,47)" fg:x="2691" fg:w="1"/><text x="49.9269%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6769%" y="693" width="0.0185%" height="15" fill="rgb(230,84,2)" fg:x="2691" fg:w="1"/><text x="49.9269%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6769%" y="677" width="0.0185%" height="15" fill="rgb(220,102,14)" fg:x="2691" fg:w="1"/><text x="49.9269%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6769%" y="661" width="0.0185%" height="15" fill="rgb(240,10,32)" fg:x="2691" fg:w="1"/><text x="49.9269%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6769%" y="645" width="0.0185%" height="15" fill="rgb(215,47,27)" fg:x="2691" fg:w="1"/><text x="49.9269%" y="655.50"></text></g><g><title>__lll_lock_wake_private (12 samples, 0.22%)</title><rect x="49.6954%" y="725" width="0.2215%" height="15" fill="rgb(233,188,43)" fg:x="2692" fg:w="12"/><text x="49.9454%" y="735.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="49.6954%" y="709" width="0.2215%" height="15" fill="rgb(253,190,1)" fg:x="2692" fg:w="12"/><text x="49.9454%" y="719.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="49.6954%" y="693" width="0.2215%" height="15" fill="rgb(206,114,52)" fg:x="2692" fg:w="12"/><text x="49.9454%" y="703.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="49.6954%" y="677" width="0.2215%" height="15" fill="rgb(233,120,37)" fg:x="2692" fg:w="12"/><text x="49.9454%" y="687.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="49.6954%" y="661" width="0.2215%" height="15" fill="rgb(214,52,39)" fg:x="2692" fg:w="12"/><text x="49.9454%" y="671.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="49.6954%" y="645" width="0.2215%" height="15" fill="rgb(223,80,29)" fg:x="2692" fg:w="12"/><text x="49.9454%" y="655.50"></text></g><g><title>[unknown] (11 samples, 0.20%)</title><rect x="49.7139%" y="629" width="0.2031%" height="15" fill="rgb(230,101,40)" fg:x="2693" fg:w="11"/><text x="49.9639%" y="639.50"></text></g><g><title>[unknown] (11 samples, 0.20%)</title><rect x="49.7139%" y="613" width="0.2031%" height="15" fill="rgb(219,211,8)" fg:x="2693" fg:w="11"/><text x="49.9639%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="49.8431%" y="597" width="0.0738%" height="15" fill="rgb(252,126,28)" fg:x="2700" fg:w="4"/><text x="50.0931%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.8985%" y="581" width="0.0185%" height="15" fill="rgb(215,56,38)" fg:x="2703" fg:w="1"/><text x="50.1485%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.8985%" y="565" width="0.0185%" height="15" fill="rgb(249,55,44)" fg:x="2703" fg:w="1"/><text x="50.1485%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.8985%" y="549" width="0.0185%" height="15" fill="rgb(220,221,32)" fg:x="2703" fg:w="1"/><text x="50.1485%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.8985%" y="533" width="0.0185%" height="15" fill="rgb(212,216,41)" fg:x="2703" fg:w="1"/><text x="50.1485%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.8985%" y="517" width="0.0185%" height="15" fill="rgb(228,213,43)" fg:x="2703" fg:w="1"/><text x="50.1485%" y="527.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (20 samples, 0.37%)</title><rect x="49.6769%" y="853" width="0.3692%" height="15" fill="rgb(211,31,26)" fg:x="2691" fg:w="20"/><text x="49.9269%" y="863.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (20 samples, 0.37%)</title><rect x="49.6769%" y="837" width="0.3692%" height="15" fill="rgb(229,202,19)" fg:x="2691" fg:w="20"/><text x="49.9269%" y="847.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (20 samples, 0.37%)</title><rect x="49.6769%" y="821" width="0.3692%" height="15" fill="rgb(229,105,46)" fg:x="2691" fg:w="20"/><text x="49.9269%" y="831.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (20 samples, 0.37%)</title><rect x="49.6769%" y="805" width="0.3692%" height="15" fill="rgb(235,108,1)" fg:x="2691" fg:w="20"/><text x="49.9269%" y="815.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (20 samples, 0.37%)</title><rect x="49.6769%" y="789" width="0.3692%" height="15" fill="rgb(245,111,35)" fg:x="2691" fg:w="20"/><text x="49.9269%" y="799.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (20 samples, 0.37%)</title><rect x="49.6769%" y="773" width="0.3692%" height="15" fill="rgb(219,185,31)" fg:x="2691" fg:w="20"/><text x="49.9269%" y="783.50"></text></g><g><title>operator new (20 samples, 0.37%)</title><rect x="49.6769%" y="757" width="0.3692%" height="15" fill="rgb(214,4,43)" fg:x="2691" fg:w="20"/><text x="49.9269%" y="767.50"></text></g><g><title>malloc (20 samples, 0.37%)</title><rect x="49.6769%" y="741" width="0.3692%" height="15" fill="rgb(235,227,40)" fg:x="2691" fg:w="20"/><text x="49.9269%" y="751.50"></text></g><g><title>_int_malloc (7 samples, 0.13%)</title><rect x="49.9169%" y="725" width="0.1292%" height="15" fill="rgb(230,88,30)" fg:x="2704" fg:w="7"/><text x="50.1669%" y="735.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.0462%" y="853" width="0.0185%" height="15" fill="rgb(216,217,1)" fg:x="2711" fg:w="1"/><text x="50.2962%" y="863.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.04%)</title><rect x="50.0831%" y="821" width="0.0369%" height="15" fill="rgb(248,139,50)" fg:x="2713" fg:w="2"/><text x="50.3331%" y="831.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="50.0831%" y="805" width="0.0369%" height="15" fill="rgb(233,1,21)" fg:x="2713" fg:w="2"/><text x="50.3331%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="50.1015%" y="789" width="0.0185%" height="15" fill="rgb(215,183,12)" fg:x="2714" fg:w="1"/><text x="50.3515%" y="799.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="50.1015%" y="773" width="0.0185%" height="15" fill="rgb(229,104,42)" fg:x="2714" fg:w="1"/><text x="50.3515%" y="783.50"></text></g><g><title>malloc@plt (1 samples, 0.02%)</title><rect x="50.1385%" y="709" width="0.0185%" height="15" fill="rgb(243,34,48)" fg:x="2716" fg:w="1"/><text x="50.3885%" y="719.50"></text></g><g><title>__lll_lock_wait_private (2 samples, 0.04%)</title><rect x="50.2123%" y="677" width="0.0369%" height="15" fill="rgb(239,11,44)" fg:x="2720" fg:w="2"/><text x="50.4623%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="661" width="0.0185%" height="15" fill="rgb(231,98,35)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="645" width="0.0185%" height="15" fill="rgb(233,28,25)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="629" width="0.0185%" height="15" fill="rgb(234,123,11)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="613" width="0.0185%" height="15" fill="rgb(220,69,3)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="597" width="0.0185%" height="15" fill="rgb(214,64,36)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="581" width="0.0185%" height="15" fill="rgb(211,138,32)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="565" width="0.0185%" height="15" fill="rgb(213,118,47)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="549" width="0.0185%" height="15" fill="rgb(243,124,49)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="533" width="0.0185%" height="15" fill="rgb(221,30,28)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="517" width="0.0185%" height="15" fill="rgb(246,37,13)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.2308%" y="501" width="0.0185%" height="15" fill="rgb(249,66,14)" fg:x="2721" fg:w="1"/><text x="50.4808%" y="511.50"></text></g><g><title>__lll_lock_wake_private (13 samples, 0.24%)</title><rect x="50.2492%" y="677" width="0.2400%" height="15" fill="rgb(213,166,5)" fg:x="2722" fg:w="13"/><text x="50.4992%" y="687.50"></text></g><g><title>[unknown] (13 samples, 0.24%)</title><rect x="50.2492%" y="661" width="0.2400%" height="15" fill="rgb(221,66,24)" fg:x="2722" fg:w="13"/><text x="50.4992%" y="671.50"></text></g><g><title>[unknown] (13 samples, 0.24%)</title><rect x="50.2492%" y="645" width="0.2400%" height="15" fill="rgb(210,132,17)" fg:x="2722" fg:w="13"/><text x="50.4992%" y="655.50"></text></g><g><title>[unknown] (13 samples, 0.24%)</title><rect x="50.2492%" y="629" width="0.2400%" height="15" fill="rgb(243,202,5)" fg:x="2722" fg:w="13"/><text x="50.4992%" y="639.50"></text></g><g><title>[unknown] (13 samples, 0.24%)</title><rect x="50.2492%" y="613" width="0.2400%" height="15" fill="rgb(233,70,48)" fg:x="2722" fg:w="13"/><text x="50.4992%" y="623.50"></text></g><g><title>[unknown] (13 samples, 0.24%)</title><rect x="50.2492%" y="597" width="0.2400%" height="15" fill="rgb(238,41,26)" fg:x="2722" fg:w="13"/><text x="50.4992%" y="607.50"></text></g><g><title>[unknown] (11 samples, 0.20%)</title><rect x="50.2861%" y="581" width="0.2031%" height="15" fill="rgb(241,19,31)" fg:x="2724" fg:w="11"/><text x="50.5361%" y="591.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="50.3046%" y="565" width="0.1846%" height="15" fill="rgb(214,76,10)" fg:x="2725" fg:w="10"/><text x="50.5546%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.4707%" y="549" width="0.0185%" height="15" fill="rgb(254,202,22)" fg:x="2734" fg:w="1"/><text x="50.7207%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.4707%" y="533" width="0.0185%" height="15" fill="rgb(214,72,24)" fg:x="2734" fg:w="1"/><text x="50.7207%" y="543.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (30 samples, 0.55%)</title><rect x="50.1200%" y="789" width="0.5538%" height="15" fill="rgb(221,92,46)" fg:x="2715" fg:w="30"/><text x="50.3700%" y="799.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (30 samples, 0.55%)</title><rect x="50.1200%" y="773" width="0.5538%" height="15" fill="rgb(246,13,50)" fg:x="2715" fg:w="30"/><text x="50.3700%" y="783.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (30 samples, 0.55%)</title><rect x="50.1200%" y="757" width="0.5538%" height="15" fill="rgb(240,165,38)" fg:x="2715" fg:w="30"/><text x="50.3700%" y="767.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (30 samples, 0.55%)</title><rect x="50.1200%" y="741" width="0.5538%" height="15" fill="rgb(241,24,51)" fg:x="2715" fg:w="30"/><text x="50.3700%" y="751.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (30 samples, 0.55%)</title><rect x="50.1200%" y="725" width="0.5538%" height="15" fill="rgb(227,51,44)" fg:x="2715" fg:w="30"/><text x="50.3700%" y="735.50"></text></g><g><title>operator new (28 samples, 0.52%)</title><rect x="50.1569%" y="709" width="0.5169%" height="15" fill="rgb(231,121,3)" fg:x="2717" fg:w="28"/><text x="50.4069%" y="719.50"></text></g><g><title>malloc (28 samples, 0.52%)</title><rect x="50.1569%" y="693" width="0.5169%" height="15" fill="rgb(245,3,41)" fg:x="2717" fg:w="28"/><text x="50.4069%" y="703.50"></text></g><g><title>_int_malloc (10 samples, 0.18%)</title><rect x="50.4892%" y="677" width="0.1846%" height="15" fill="rgb(214,13,26)" fg:x="2735" fg:w="10"/><text x="50.7392%" y="687.50"></text></g><g><title>malloc_consolidate (3 samples, 0.06%)</title><rect x="50.6184%" y="661" width="0.0554%" height="15" fill="rgb(252,75,11)" fg:x="2742" fg:w="3"/><text x="50.8684%" y="671.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (31 samples, 0.57%)</title><rect x="50.1200%" y="805" width="0.5723%" height="15" fill="rgb(218,226,17)" fg:x="2715" fg:w="31"/><text x="50.3700%" y="815.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.02%)</title><rect x="50.6738%" y="789" width="0.0185%" height="15" fill="rgb(248,89,38)" fg:x="2745" fg:w="1"/><text x="50.9238%" y="799.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="50.6738%" y="773" width="0.0185%" height="15" fill="rgb(237,73,46)" fg:x="2745" fg:w="1"/><text x="50.9238%" y="783.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="50.6738%" y="757" width="0.0185%" height="15" fill="rgb(242,78,33)" fg:x="2745" fg:w="1"/><text x="50.9238%" y="767.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="50.6738%" y="741" width="0.0185%" height="15" fill="rgb(235,60,3)" fg:x="2745" fg:w="1"/><text x="50.9238%" y="751.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.02%)</title><rect x="50.6738%" y="725" width="0.0185%" height="15" fill="rgb(216,172,19)" fg:x="2745" fg:w="1"/><text x="50.9238%" y="735.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.02%)</title><rect x="50.6738%" y="709" width="0.0185%" height="15" fill="rgb(227,6,42)" fg:x="2745" fg:w="1"/><text x="50.9238%" y="719.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="50.6738%" y="693" width="0.0185%" height="15" fill="rgb(223,207,42)" fg:x="2745" fg:w="1"/><text x="50.9238%" y="703.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (1 samples, 0.02%)</title><rect x="50.6738%" y="677" width="0.0185%" height="15" fill="rgb(246,138,30)" fg:x="2745" fg:w="1"/><text x="50.9238%" y="687.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="50.6923%" y="805" width="0.0369%" height="15" fill="rgb(251,199,47)" fg:x="2746" fg:w="2"/><text x="50.9423%" y="815.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7107%" y="789" width="0.0185%" height="15" fill="rgb(228,218,44)" fg:x="2747" fg:w="1"/><text x="50.9607%" y="799.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="50.7107%" y="773" width="0.0185%" height="15" fill="rgb(220,68,6)" fg:x="2747" fg:w="1"/><text x="50.9607%" y="783.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="50.7107%" y="757" width="0.0185%" height="15" fill="rgb(240,60,26)" fg:x="2747" fg:w="1"/><text x="50.9607%" y="767.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.7107%" y="741" width="0.0185%" height="15" fill="rgb(211,200,19)" fg:x="2747" fg:w="1"/><text x="50.9607%" y="751.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="50.7661%" y="533" width="0.0185%" height="15" fill="rgb(242,145,30)" fg:x="2750" fg:w="1"/><text x="51.0161%" y="543.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="50.7661%" y="517" width="0.0185%" height="15" fill="rgb(225,64,13)" fg:x="2750" fg:w="1"/><text x="51.0161%" y="527.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="50.7846%" y="533" width="0.0185%" height="15" fill="rgb(218,103,35)" fg:x="2751" fg:w="1"/><text x="51.0346%" y="543.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&gt; (1 samples, 0.02%)</title><rect x="50.7846%" y="517" width="0.0185%" height="15" fill="rgb(216,93,46)" fg:x="2751" fg:w="1"/><text x="51.0346%" y="527.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="50.7846%" y="501" width="0.0185%" height="15" fill="rgb(225,159,27)" fg:x="2751" fg:w="1"/><text x="51.0346%" y="511.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="50.7846%" y="485" width="0.0185%" height="15" fill="rgb(225,204,11)" fg:x="2751" fg:w="1"/><text x="51.0346%" y="495.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="50.7846%" y="469" width="0.0185%" height="15" fill="rgb(205,56,4)" fg:x="2751" fg:w="1"/><text x="51.0346%" y="479.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="50.7846%" y="453" width="0.0185%" height="15" fill="rgb(206,6,35)" fg:x="2751" fg:w="1"/><text x="51.0346%" y="463.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="50.7846%" y="437" width="0.0185%" height="15" fill="rgb(247,73,52)" fg:x="2751" fg:w="1"/><text x="51.0346%" y="447.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (62 samples, 1.14%)</title><rect x="49.6769%" y="933" width="1.1445%" height="15" fill="rgb(246,97,4)" fg:x="2691" fg:w="62"/><text x="49.9269%" y="943.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (62 samples, 1.14%)</title><rect x="49.6769%" y="917" width="1.1445%" height="15" fill="rgb(212,37,15)" fg:x="2691" fg:w="62"/><text x="49.9269%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (62 samples, 1.14%)</title><rect x="49.6769%" y="901" width="1.1445%" height="15" fill="rgb(208,130,40)" fg:x="2691" fg:w="62"/><text x="49.9269%" y="911.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (62 samples, 1.14%)</title><rect x="49.6769%" y="885" width="1.1445%" height="15" fill="rgb(236,55,29)" fg:x="2691" fg:w="62"/><text x="49.9269%" y="895.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (62 samples, 1.14%)</title><rect x="49.6769%" y="869" width="1.1445%" height="15" fill="rgb(209,156,45)" fg:x="2691" fg:w="62"/><text x="49.9269%" y="879.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (41 samples, 0.76%)</title><rect x="50.0646%" y="853" width="0.7569%" height="15" fill="rgb(249,107,4)" fg:x="2712" fg:w="41"/><text x="50.3146%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (41 samples, 0.76%)</title><rect x="50.0646%" y="837" width="0.7569%" height="15" fill="rgb(227,7,13)" fg:x="2712" fg:w="41"/><text x="50.3146%" y="847.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (38 samples, 0.70%)</title><rect x="50.1200%" y="821" width="0.7015%" height="15" fill="rgb(250,129,14)" fg:x="2715" fg:w="38"/><text x="50.3700%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="805" width="0.0923%" height="15" fill="rgb(229,92,13)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="815.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="789" width="0.0923%" height="15" fill="rgb(245,98,39)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="799.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="773" width="0.0923%" height="15" fill="rgb(234,135,48)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="783.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="757" width="0.0923%" height="15" fill="rgb(230,98,28)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="767.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="741" width="0.0923%" height="15" fill="rgb(223,121,0)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="751.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="725" width="0.0923%" height="15" fill="rgb(234,173,33)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="735.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="709" width="0.0923%" height="15" fill="rgb(245,47,8)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="719.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="693" width="0.0923%" height="15" fill="rgb(205,17,20)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="703.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="677" width="0.0923%" height="15" fill="rgb(232,151,16)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="687.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="661" width="0.0923%" height="15" fill="rgb(208,30,32)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="671.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="645" width="0.0923%" height="15" fill="rgb(254,26,3)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="655.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (5 samples, 0.09%)</title><rect x="50.7292%" y="629" width="0.0923%" height="15" fill="rgb(240,177,30)" fg:x="2748" fg:w="5"/><text x="50.9792%" y="639.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (4 samples, 0.07%)</title><rect x="50.7476%" y="613" width="0.0738%" height="15" fill="rgb(248,76,44)" fg:x="2749" fg:w="4"/><text x="50.9976%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="50.7476%" y="597" width="0.0738%" height="15" fill="rgb(241,186,54)" fg:x="2749" fg:w="4"/><text x="50.9976%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="50.7476%" y="581" width="0.0738%" height="15" fill="rgb(249,171,29)" fg:x="2749" fg:w="4"/><text x="50.9976%" y="591.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="50.7476%" y="565" width="0.0738%" height="15" fill="rgb(237,151,44)" fg:x="2749" fg:w="4"/><text x="50.9976%" y="575.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="50.7476%" y="549" width="0.0738%" height="15" fill="rgb(228,174,30)" fg:x="2749" fg:w="4"/><text x="50.9976%" y="559.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.8030%" y="533" width="0.0185%" height="15" fill="rgb(252,14,37)" fg:x="2752" fg:w="1"/><text x="51.0530%" y="543.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="50.8030%" y="517" width="0.0185%" height="15" fill="rgb(207,111,40)" fg:x="2752" fg:w="1"/><text x="51.0530%" y="527.50"></text></g><g><title>unsigned int const&amp; std::min&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="50.8030%" y="501" width="0.0185%" height="15" fill="rgb(248,171,54)" fg:x="2752" fg:w="1"/><text x="51.0530%" y="511.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="50.8215%" y="869" width="0.0369%" height="15" fill="rgb(211,127,2)" fg:x="2753" fg:w="2"/><text x="51.0715%" y="879.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="50.8584%" y="869" width="0.0185%" height="15" fill="rgb(236,87,47)" fg:x="2755" fg:w="1"/><text x="51.1084%" y="879.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="50.8584%" y="853" width="0.0185%" height="15" fill="rgb(223,190,45)" fg:x="2755" fg:w="1"/><text x="51.1084%" y="863.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="50.8584%" y="837" width="0.0185%" height="15" fill="rgb(215,5,16)" fg:x="2755" fg:w="1"/><text x="51.1084%" y="847.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="50.8584%" y="821" width="0.0185%" height="15" fill="rgb(252,82,33)" fg:x="2755" fg:w="1"/><text x="51.1084%" y="831.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (178 samples, 3.29%)</title><rect x="47.6094%" y="981" width="3.2860%" height="15" fill="rgb(247,213,44)" fg:x="2579" fg:w="178"/><text x="47.8594%" y="991.50">CMu..</text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (178 samples, 3.29%)</title><rect x="47.6094%" y="965" width="3.2860%" height="15" fill="rgb(205,196,44)" fg:x="2579" fg:w="178"/><text x="47.8594%" y="975.50">voi..</text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (178 samples, 3.29%)</title><rect x="47.6094%" y="949" width="3.2860%" height="15" fill="rgb(237,96,54)" fg:x="2579" fg:w="178"/><text x="47.8594%" y="959.50">voi..</text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (4 samples, 0.07%)</title><rect x="50.8215%" y="933" width="0.0738%" height="15" fill="rgb(230,113,34)" fg:x="2753" fg:w="4"/><text x="51.0715%" y="943.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="50.8215%" y="917" width="0.0738%" height="15" fill="rgb(221,224,12)" fg:x="2753" fg:w="4"/><text x="51.0715%" y="927.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="50.8215%" y="901" width="0.0738%" height="15" fill="rgb(219,112,44)" fg:x="2753" fg:w="4"/><text x="51.0715%" y="911.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (4 samples, 0.07%)</title><rect x="50.8215%" y="885" width="0.0738%" height="15" fill="rgb(210,31,13)" fg:x="2753" fg:w="4"/><text x="51.0715%" y="895.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.8769%" y="869" width="0.0185%" height="15" fill="rgb(230,25,16)" fg:x="2756" fg:w="1"/><text x="51.1269%" y="879.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="50.8953%" y="965" width="0.0185%" height="15" fill="rgb(246,108,53)" fg:x="2757" fg:w="1"/><text x="51.1453%" y="975.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="50.8953%" y="949" width="0.0185%" height="15" fill="rgb(241,172,50)" fg:x="2757" fg:w="1"/><text x="51.1453%" y="959.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="50.9138%" y="869" width="0.0738%" height="15" fill="rgb(235,141,10)" fg:x="2758" fg:w="4"/><text x="51.1638%" y="879.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="50.9692%" y="853" width="0.0185%" height="15" fill="rgb(220,174,43)" fg:x="2761" fg:w="1"/><text x="51.2192%" y="863.50"></text></g><g><title>CTransaction::ComputeHash (2 samples, 0.04%)</title><rect x="50.9876%" y="773" width="0.0369%" height="15" fill="rgb(215,181,40)" fg:x="2762" fg:w="2"/><text x="51.2376%" y="783.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.0246%" y="597" width="0.0185%" height="15" fill="rgb(230,97,2)" fg:x="2764" fg:w="1"/><text x="51.2746%" y="607.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="51.0430%" y="565" width="0.0185%" height="15" fill="rgb(211,25,27)" fg:x="2765" fg:w="1"/><text x="51.2930%" y="575.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="51.0430%" y="549" width="0.0185%" height="15" fill="rgb(230,87,26)" fg:x="2765" fg:w="1"/><text x="51.2930%" y="559.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="51.0430%" y="581" width="0.0369%" height="15" fill="rgb(227,160,17)" fg:x="2765" fg:w="2"/><text x="51.2930%" y="591.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="51.0615%" y="565" width="0.0185%" height="15" fill="rgb(244,85,34)" fg:x="2766" fg:w="1"/><text x="51.3115%" y="575.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="51.0615%" y="549" width="0.0185%" height="15" fill="rgb(207,70,0)" fg:x="2766" fg:w="1"/><text x="51.3115%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="51.0246%" y="661" width="0.0738%" height="15" fill="rgb(223,129,7)" fg:x="2764" fg:w="4"/><text x="51.2746%" y="671.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="51.0246%" y="645" width="0.0738%" height="15" fill="rgb(246,105,7)" fg:x="2764" fg:w="4"/><text x="51.2746%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="51.0246%" y="629" width="0.0738%" height="15" fill="rgb(215,154,42)" fg:x="2764" fg:w="4"/><text x="51.2746%" y="639.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="51.0246%" y="613" width="0.0738%" height="15" fill="rgb(220,215,30)" fg:x="2764" fg:w="4"/><text x="51.2746%" y="623.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.06%)</title><rect x="51.0430%" y="597" width="0.0554%" height="15" fill="rgb(228,81,51)" fg:x="2765" fg:w="3"/><text x="51.2930%" y="607.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="51.0799%" y="581" width="0.0185%" height="15" fill="rgb(247,71,54)" fg:x="2767" fg:w="1"/><text x="51.3299%" y="591.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="51.0799%" y="565" width="0.0185%" height="15" fill="rgb(234,176,34)" fg:x="2767" fg:w="1"/><text x="51.3299%" y="575.50"></text></g><g><title>CTransaction::ComputeHash (1 samples, 0.02%)</title><rect x="51.0984%" y="501" width="0.0185%" height="15" fill="rgb(241,103,54)" fg:x="2768" fg:w="1"/><text x="51.3484%" y="511.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="51.0984%" y="485" width="0.0185%" height="15" fill="rgb(228,22,34)" fg:x="2768" fg:w="1"/><text x="51.3484%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0984%" y="469" width="0.0185%" height="15" fill="rgb(241,179,48)" fg:x="2768" fg:w="1"/><text x="51.3484%" y="479.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="51.0984%" y="453" width="0.0185%" height="15" fill="rgb(235,167,37)" fg:x="2768" fg:w="1"/><text x="51.3484%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="51.0984%" y="437" width="0.0185%" height="15" fill="rgb(213,109,30)" fg:x="2768" fg:w="1"/><text x="51.3484%" y="447.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0984%" y="421" width="0.0185%" height="15" fill="rgb(222,172,16)" fg:x="2768" fg:w="1"/><text x="51.3484%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="51.0984%" y="565" width="0.0369%" height="15" fill="rgb(233,192,5)" fg:x="2768" fg:w="2"/><text x="51.3484%" y="575.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="51.0984%" y="549" width="0.0369%" height="15" fill="rgb(247,189,41)" fg:x="2768" fg:w="2"/><text x="51.3484%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="51.0984%" y="533" width="0.0369%" height="15" fill="rgb(218,134,47)" fg:x="2768" fg:w="2"/><text x="51.3484%" y="543.50"></text></g><g><title>HashWriter::write (2 samples, 0.04%)</title><rect x="51.0984%" y="517" width="0.0369%" height="15" fill="rgb(216,29,3)" fg:x="2768" fg:w="2"/><text x="51.3484%" y="527.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="51.1169%" y="501" width="0.0185%" height="15" fill="rgb(246,140,12)" fg:x="2769" fg:w="1"/><text x="51.3669%" y="511.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="51.1169%" y="485" width="0.0185%" height="15" fill="rgb(230,136,11)" fg:x="2769" fg:w="1"/><text x="51.3669%" y="495.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="51.1169%" y="469" width="0.0185%" height="15" fill="rgb(247,22,47)" fg:x="2769" fg:w="1"/><text x="51.3669%" y="479.50"></text></g><g><title>CSHA256::CSHA256 (2 samples, 0.04%)</title><rect x="51.1353%" y="453" width="0.0369%" height="15" fill="rgb(218,84,22)" fg:x="2770" fg:w="2"/><text x="51.3853%" y="463.50"></text></g><g><title>CSHA256::CSHA256 (2 samples, 0.04%)</title><rect x="51.1353%" y="437" width="0.0369%" height="15" fill="rgb(216,87,39)" fg:x="2770" fg:w="2"/><text x="51.3853%" y="447.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.1722%" y="453" width="0.0185%" height="15" fill="rgb(221,178,8)" fg:x="2772" fg:w="1"/><text x="51.4222%" y="463.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.1722%" y="437" width="0.0185%" height="15" fill="rgb(230,42,11)" fg:x="2772" fg:w="1"/><text x="51.4222%" y="447.50"></text></g><g><title>CTransaction::ComputeHash (1 samples, 0.02%)</title><rect x="51.1907%" y="453" width="0.0185%" height="15" fill="rgb(237,229,4)" fg:x="2773" fg:w="1"/><text x="51.4407%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (9 samples, 0.17%)</title><rect x="51.0984%" y="661" width="0.1661%" height="15" fill="rgb(222,31,33)" fg:x="2768" fg:w="9"/><text x="51.3484%" y="671.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.17%)</title><rect x="51.0984%" y="645" width="0.1661%" height="15" fill="rgb(210,17,39)" fg:x="2768" fg:w="9"/><text x="51.3484%" y="655.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.17%)</title><rect x="51.0984%" y="629" width="0.1661%" height="15" fill="rgb(244,93,20)" fg:x="2768" fg:w="9"/><text x="51.3484%" y="639.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (9 samples, 0.17%)</title><rect x="51.0984%" y="613" width="0.1661%" height="15" fill="rgb(210,40,47)" fg:x="2768" fg:w="9"/><text x="51.3484%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (9 samples, 0.17%)</title><rect x="51.0984%" y="597" width="0.1661%" height="15" fill="rgb(239,211,47)" fg:x="2768" fg:w="9"/><text x="51.3484%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (9 samples, 0.17%)</title><rect x="51.0984%" y="581" width="0.1661%" height="15" fill="rgb(251,223,49)" fg:x="2768" fg:w="9"/><text x="51.3484%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (7 samples, 0.13%)</title><rect x="51.1353%" y="565" width="0.1292%" height="15" fill="rgb(221,149,5)" fg:x="2770" fg:w="7"/><text x="51.3853%" y="575.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="51.1353%" y="549" width="0.1292%" height="15" fill="rgb(219,224,51)" fg:x="2770" fg:w="7"/><text x="51.3853%" y="559.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="51.1353%" y="533" width="0.1292%" height="15" fill="rgb(223,7,8)" fg:x="2770" fg:w="7"/><text x="51.3853%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (7 samples, 0.13%)</title><rect x="51.1353%" y="517" width="0.1292%" height="15" fill="rgb(241,217,22)" fg:x="2770" fg:w="7"/><text x="51.3853%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (7 samples, 0.13%)</title><rect x="51.1353%" y="501" width="0.1292%" height="15" fill="rgb(248,209,0)" fg:x="2770" fg:w="7"/><text x="51.3853%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (7 samples, 0.13%)</title><rect x="51.1353%" y="485" width="0.1292%" height="15" fill="rgb(217,205,4)" fg:x="2770" fg:w="7"/><text x="51.3853%" y="495.50"></text></g><g><title>HashWriter::write (7 samples, 0.13%)</title><rect x="51.1353%" y="469" width="0.1292%" height="15" fill="rgb(228,124,39)" fg:x="2770" fg:w="7"/><text x="51.3853%" y="479.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.06%)</title><rect x="51.2092%" y="453" width="0.0554%" height="15" fill="rgb(250,116,42)" fg:x="2774" fg:w="3"/><text x="51.4592%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (3 samples, 0.06%)</title><rect x="51.2092%" y="437" width="0.0554%" height="15" fill="rgb(223,202,9)" fg:x="2774" fg:w="3"/><text x="51.4592%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="51.2092%" y="421" width="0.0554%" height="15" fill="rgb(242,222,40)" fg:x="2774" fg:w="3"/><text x="51.4592%" y="431.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="51.2092%" y="405" width="0.0554%" height="15" fill="rgb(229,99,46)" fg:x="2774" fg:w="3"/><text x="51.4592%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.06%)</title><rect x="51.2092%" y="389" width="0.0554%" height="15" fill="rgb(225,56,46)" fg:x="2774" fg:w="3"/><text x="51.4592%" y="399.50"></text></g><g><title>HashWriter::write (3 samples, 0.06%)</title><rect x="51.2092%" y="373" width="0.0554%" height="15" fill="rgb(227,94,5)" fg:x="2774" fg:w="3"/><text x="51.4592%" y="383.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="51.2645%" y="549" width="0.0369%" height="15" fill="rgb(205,112,38)" fg:x="2777" fg:w="2"/><text x="51.5145%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="51.3015%" y="549" width="0.0185%" height="15" fill="rgb(231,133,46)" fg:x="2779" fg:w="1"/><text x="51.5515%" y="559.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="51.3015%" y="533" width="0.0185%" height="15" fill="rgb(217,16,9)" fg:x="2779" fg:w="1"/><text x="51.5515%" y="543.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.3015%" y="517" width="0.0185%" height="15" fill="rgb(249,173,9)" fg:x="2779" fg:w="1"/><text x="51.5515%" y="527.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="51.3015%" y="501" width="0.0185%" height="15" fill="rgb(205,163,53)" fg:x="2779" fg:w="1"/><text x="51.5515%" y="511.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="51.3015%" y="485" width="0.0185%" height="15" fill="rgb(217,54,41)" fg:x="2779" fg:w="1"/><text x="51.5515%" y="495.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="51.3015%" y="469" width="0.0185%" height="15" fill="rgb(228,216,12)" fg:x="2779" fg:w="1"/><text x="51.5515%" y="479.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="51.3384%" y="453" width="0.0185%" height="15" fill="rgb(244,228,15)" fg:x="2781" fg:w="1"/><text x="51.5884%" y="463.50"></text></g><g><title>CSHA256::Write (3 samples, 0.06%)</title><rect x="51.3199%" y="485" width="0.0554%" height="15" fill="rgb(221,176,53)" fg:x="2780" fg:w="3"/><text x="51.5699%" y="495.50"></text></g><g><title>memcpy (2 samples, 0.04%)</title><rect x="51.3384%" y="469" width="0.0369%" height="15" fill="rgb(205,94,34)" fg:x="2781" fg:w="2"/><text x="51.5884%" y="479.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.3568%" y="453" width="0.0185%" height="15" fill="rgb(213,110,48)" fg:x="2782" fg:w="1"/><text x="51.6068%" y="463.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (20 samples, 0.37%)</title><rect x="51.0246%" y="773" width="0.3692%" height="15" fill="rgb(236,142,28)" fg:x="2764" fg:w="20"/><text x="51.2746%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (20 samples, 0.37%)</title><rect x="51.0246%" y="757" width="0.3692%" height="15" fill="rgb(225,135,29)" fg:x="2764" fg:w="20"/><text x="51.2746%" y="767.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.37%)</title><rect x="51.0246%" y="741" width="0.3692%" height="15" fill="rgb(252,45,31)" fg:x="2764" fg:w="20"/><text x="51.2746%" y="751.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.37%)</title><rect x="51.0246%" y="725" width="0.3692%" height="15" fill="rgb(211,187,50)" fg:x="2764" fg:w="20"/><text x="51.2746%" y="735.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (20 samples, 0.37%)</title><rect x="51.0246%" y="709" width="0.3692%" height="15" fill="rgb(229,109,7)" fg:x="2764" fg:w="20"/><text x="51.2746%" y="719.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (20 samples, 0.37%)</title><rect x="51.0246%" y="693" width="0.3692%" height="15" fill="rgb(251,131,51)" fg:x="2764" fg:w="20"/><text x="51.2746%" y="703.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (20 samples, 0.37%)</title><rect x="51.0246%" y="677" width="0.3692%" height="15" fill="rgb(251,180,35)" fg:x="2764" fg:w="20"/><text x="51.2746%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (7 samples, 0.13%)</title><rect x="51.2645%" y="661" width="0.1292%" height="15" fill="rgb(211,46,32)" fg:x="2777" fg:w="7"/><text x="51.5145%" y="671.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="51.2645%" y="645" width="0.1292%" height="15" fill="rgb(248,123,17)" fg:x="2777" fg:w="7"/><text x="51.5145%" y="655.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="51.2645%" y="629" width="0.1292%" height="15" fill="rgb(227,141,18)" fg:x="2777" fg:w="7"/><text x="51.5145%" y="639.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (7 samples, 0.13%)</title><rect x="51.2645%" y="613" width="0.1292%" height="15" fill="rgb(216,102,9)" fg:x="2777" fg:w="7"/><text x="51.5145%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.13%)</title><rect x="51.2645%" y="597" width="0.1292%" height="15" fill="rgb(253,47,13)" fg:x="2777" fg:w="7"/><text x="51.5145%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.13%)</title><rect x="51.2645%" y="581" width="0.1292%" height="15" fill="rgb(226,93,23)" fg:x="2777" fg:w="7"/><text x="51.5145%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (7 samples, 0.13%)</title><rect x="51.2645%" y="565" width="0.1292%" height="15" fill="rgb(247,104,17)" fg:x="2777" fg:w="7"/><text x="51.5145%" y="575.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="51.3199%" y="549" width="0.0738%" height="15" fill="rgb(233,203,26)" fg:x="2780" fg:w="4"/><text x="51.5699%" y="559.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="51.3199%" y="533" width="0.0738%" height="15" fill="rgb(244,98,49)" fg:x="2780" fg:w="4"/><text x="51.5699%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="51.3199%" y="517" width="0.0738%" height="15" fill="rgb(235,134,22)" fg:x="2780" fg:w="4"/><text x="51.5699%" y="527.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="51.3199%" y="501" width="0.0738%" height="15" fill="rgb(221,70,32)" fg:x="2780" fg:w="4"/><text x="51.5699%" y="511.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.3753%" y="485" width="0.0185%" height="15" fill="rgb(238,15,50)" fg:x="2783" fg:w="1"/><text x="51.6253%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (23 samples, 0.42%)</title><rect x="50.9876%" y="853" width="0.4246%" height="15" fill="rgb(215,221,48)" fg:x="2762" fg:w="23"/><text x="51.2376%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (23 samples, 0.42%)</title><rect x="50.9876%" y="837" width="0.4246%" height="15" fill="rgb(236,73,3)" fg:x="2762" fg:w="23"/><text x="51.2376%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (23 samples, 0.42%)</title><rect x="50.9876%" y="821" width="0.4246%" height="15" fill="rgb(250,107,11)" fg:x="2762" fg:w="23"/><text x="51.2376%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.42%)</title><rect x="50.9876%" y="805" width="0.4246%" height="15" fill="rgb(242,39,14)" fg:x="2762" fg:w="23"/><text x="51.2376%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (23 samples, 0.42%)</title><rect x="50.9876%" y="789" width="0.4246%" height="15" fill="rgb(248,164,37)" fg:x="2762" fg:w="23"/><text x="51.2376%" y="799.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.3938%" y="773" width="0.0185%" height="15" fill="rgb(217,60,12)" fg:x="2784" fg:w="1"/><text x="51.6438%" y="783.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.3938%" y="757" width="0.0185%" height="15" fill="rgb(240,125,29)" fg:x="2784" fg:w="1"/><text x="51.6438%" y="767.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="51.3938%" y="741" width="0.0185%" height="15" fill="rgb(208,207,28)" fg:x="2784" fg:w="1"/><text x="51.6438%" y="751.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="51.3938%" y="725" width="0.0185%" height="15" fill="rgb(209,159,27)" fg:x="2784" fg:w="1"/><text x="51.6438%" y="735.50"></text></g><g><title>CTransaction::ComputeHasWitness (1 samples, 0.02%)</title><rect x="51.3938%" y="709" width="0.0185%" height="15" fill="rgb(251,176,53)" fg:x="2784" fg:w="1"/><text x="51.6438%" y="719.50"></text></g><g><title>CTransaction::ComputeHasWitness (1 samples, 0.02%)</title><rect x="51.3938%" y="693" width="0.0185%" height="15" fill="rgb(211,85,7)" fg:x="2784" fg:w="1"/><text x="51.6438%" y="703.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.4122%" y="773" width="0.0185%" height="15" fill="rgb(216,64,54)" fg:x="2785" fg:w="1"/><text x="51.6622%" y="783.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.4307%" y="597" width="0.0185%" height="15" fill="rgb(217,54,24)" fg:x="2786" fg:w="1"/><text x="51.6807%" y="607.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.4307%" y="581" width="0.0185%" height="15" fill="rgb(208,206,53)" fg:x="2786" fg:w="1"/><text x="51.6807%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="51.4307%" y="661" width="0.0369%" height="15" fill="rgb(251,74,39)" fg:x="2786" fg:w="2"/><text x="51.6807%" y="671.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="51.4307%" y="645" width="0.0369%" height="15" fill="rgb(226,47,5)" fg:x="2786" fg:w="2"/><text x="51.6807%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="51.4307%" y="629" width="0.0369%" height="15" fill="rgb(234,111,33)" fg:x="2786" fg:w="2"/><text x="51.6807%" y="639.50"></text></g><g><title>HashWriter::write (2 samples, 0.04%)</title><rect x="51.4307%" y="613" width="0.0369%" height="15" fill="rgb(251,14,10)" fg:x="2786" fg:w="2"/><text x="51.6807%" y="623.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4491%" y="597" width="0.0185%" height="15" fill="rgb(232,43,0)" fg:x="2787" fg:w="1"/><text x="51.6991%" y="607.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4491%" y="581" width="0.0185%" height="15" fill="rgb(222,68,43)" fg:x="2787" fg:w="1"/><text x="51.6991%" y="591.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="51.4676%" y="549" width="0.0369%" height="15" fill="rgb(217,24,23)" fg:x="2788" fg:w="2"/><text x="51.7176%" y="559.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="51.4861%" y="533" width="0.0185%" height="15" fill="rgb(229,209,14)" fg:x="2789" fg:w="1"/><text x="51.7361%" y="543.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="51.5414%" y="501" width="0.0738%" height="15" fill="rgb(250,149,48)" fg:x="2792" fg:w="4"/><text x="51.7914%" y="511.50"></text></g><g><title>CSHA256::Write (7 samples, 0.13%)</title><rect x="51.5045%" y="517" width="0.1292%" height="15" fill="rgb(210,120,37)" fg:x="2790" fg:w="7"/><text x="51.7545%" y="527.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="51.6153%" y="501" width="0.0185%" height="15" fill="rgb(210,21,8)" fg:x="2796" fg:w="1"/><text x="51.8653%" y="511.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="51.6337%" y="485" width="0.0185%" height="15" fill="rgb(243,145,7)" fg:x="2797" fg:w="1"/><text x="51.8837%" y="495.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="51.6337%" y="501" width="0.0369%" height="15" fill="rgb(238,178,32)" fg:x="2797" fg:w="2"/><text x="51.8837%" y="511.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="51.6522%" y="485" width="0.0185%" height="15" fill="rgb(222,4,10)" fg:x="2798" fg:w="1"/><text x="51.9022%" y="495.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="51.6707%" y="469" width="0.0369%" height="15" fill="rgb(239,7,37)" fg:x="2799" fg:w="2"/><text x="51.9207%" y="479.50"></text></g><g><title>ShiftMessageB (4 samples, 0.07%)</title><rect x="51.6707%" y="501" width="0.0738%" height="15" fill="rgb(215,31,37)" fg:x="2799" fg:w="4"/><text x="51.9207%" y="511.50"></text></g><g><title>ShiftMessageC (4 samples, 0.07%)</title><rect x="51.6707%" y="485" width="0.0738%" height="15" fill="rgb(224,83,33)" fg:x="2799" fg:w="4"/><text x="51.9207%" y="495.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="51.7076%" y="469" width="0.0369%" height="15" fill="rgb(239,55,3)" fg:x="2801" fg:w="2"/><text x="51.9576%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.17%)</title><rect x="51.6337%" y="517" width="0.1661%" height="15" fill="rgb(247,92,11)" fg:x="2797" fg:w="9"/><text x="51.8837%" y="527.50"></text></g><g><title>ShiftMessageC (3 samples, 0.06%)</title><rect x="51.7445%" y="501" width="0.0554%" height="15" fill="rgb(239,200,7)" fg:x="2803" fg:w="3"/><text x="51.9945%" y="511.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.06%)</title><rect x="51.7445%" y="485" width="0.0554%" height="15" fill="rgb(227,115,8)" fg:x="2803" fg:w="3"/><text x="51.9945%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="51.7999%" y="517" width="0.0185%" height="15" fill="rgb(215,189,27)" fg:x="2806" fg:w="1"/><text x="52.0499%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="51.7999%" y="501" width="0.0185%" height="15" fill="rgb(251,216,39)" fg:x="2806" fg:w="1"/><text x="52.0499%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="51.7999%" y="485" width="0.0185%" height="15" fill="rgb(207,29,47)" fg:x="2806" fg:w="1"/><text x="52.0499%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="51.7999%" y="469" width="0.0185%" height="15" fill="rgb(210,71,34)" fg:x="2806" fg:w="1"/><text x="52.0499%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.7999%" y="453" width="0.0185%" height="15" fill="rgb(253,217,51)" fg:x="2806" fg:w="1"/><text x="52.0499%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.7999%" y="437" width="0.0185%" height="15" fill="rgb(222,117,46)" fg:x="2806" fg:w="1"/><text x="52.0499%" y="447.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="51.7999%" y="421" width="0.0185%" height="15" fill="rgb(226,132,6)" fg:x="2806" fg:w="1"/><text x="52.0499%" y="431.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (22 samples, 0.41%)</title><rect x="51.4307%" y="773" width="0.4061%" height="15" fill="rgb(254,145,51)" fg:x="2786" fg:w="22"/><text x="51.6807%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (22 samples, 0.41%)</title><rect x="51.4307%" y="757" width="0.4061%" height="15" fill="rgb(231,199,27)" fg:x="2786" fg:w="22"/><text x="51.6807%" y="767.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.41%)</title><rect x="51.4307%" y="741" width="0.4061%" height="15" fill="rgb(245,158,14)" fg:x="2786" fg:w="22"/><text x="51.6807%" y="751.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.41%)</title><rect x="51.4307%" y="725" width="0.4061%" height="15" fill="rgb(240,113,14)" fg:x="2786" fg:w="22"/><text x="51.6807%" y="735.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (22 samples, 0.41%)</title><rect x="51.4307%" y="709" width="0.4061%" height="15" fill="rgb(210,20,13)" fg:x="2786" fg:w="22"/><text x="51.6807%" y="719.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (22 samples, 0.41%)</title><rect x="51.4307%" y="693" width="0.4061%" height="15" fill="rgb(241,144,13)" fg:x="2786" fg:w="22"/><text x="51.6807%" y="703.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (22 samples, 0.41%)</title><rect x="51.4307%" y="677" width="0.4061%" height="15" fill="rgb(235,43,34)" fg:x="2786" fg:w="22"/><text x="51.6807%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (20 samples, 0.37%)</title><rect x="51.4676%" y="661" width="0.3692%" height="15" fill="rgb(208,36,20)" fg:x="2788" fg:w="20"/><text x="51.7176%" y="671.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.37%)</title><rect x="51.4676%" y="645" width="0.3692%" height="15" fill="rgb(239,204,10)" fg:x="2788" fg:w="20"/><text x="51.7176%" y="655.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.37%)</title><rect x="51.4676%" y="629" width="0.3692%" height="15" fill="rgb(217,84,43)" fg:x="2788" fg:w="20"/><text x="51.7176%" y="639.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (20 samples, 0.37%)</title><rect x="51.4676%" y="613" width="0.3692%" height="15" fill="rgb(241,170,50)" fg:x="2788" fg:w="20"/><text x="51.7176%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (20 samples, 0.37%)</title><rect x="51.4676%" y="597" width="0.3692%" height="15" fill="rgb(226,205,29)" fg:x="2788" fg:w="20"/><text x="51.7176%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (20 samples, 0.37%)</title><rect x="51.4676%" y="581" width="0.3692%" height="15" fill="rgb(233,113,1)" fg:x="2788" fg:w="20"/><text x="51.7176%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (20 samples, 0.37%)</title><rect x="51.4676%" y="565" width="0.3692%" height="15" fill="rgb(253,98,13)" fg:x="2788" fg:w="20"/><text x="51.7176%" y="575.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (18 samples, 0.33%)</title><rect x="51.5045%" y="549" width="0.3323%" height="15" fill="rgb(211,115,12)" fg:x="2790" fg:w="18"/><text x="51.7545%" y="559.50"></text></g><g><title>HashWriter::write (18 samples, 0.33%)</title><rect x="51.5045%" y="533" width="0.3323%" height="15" fill="rgb(208,12,16)" fg:x="2790" fg:w="18"/><text x="51.7545%" y="543.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8183%" y="517" width="0.0185%" height="15" fill="rgb(237,193,54)" fg:x="2807" fg:w="1"/><text x="52.0683%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (24 samples, 0.44%)</title><rect x="51.4122%" y="853" width="0.4430%" height="15" fill="rgb(243,22,42)" fg:x="2785" fg:w="24"/><text x="51.6622%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (24 samples, 0.44%)</title><rect x="51.4122%" y="837" width="0.4430%" height="15" fill="rgb(233,151,36)" fg:x="2785" fg:w="24"/><text x="51.6622%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (24 samples, 0.44%)</title><rect x="51.4122%" y="821" width="0.4430%" height="15" fill="rgb(237,57,45)" fg:x="2785" fg:w="24"/><text x="51.6622%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.44%)</title><rect x="51.4122%" y="805" width="0.4430%" height="15" fill="rgb(221,88,17)" fg:x="2785" fg:w="24"/><text x="51.6622%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (24 samples, 0.44%)</title><rect x="51.4122%" y="789" width="0.4430%" height="15" fill="rgb(230,79,15)" fg:x="2785" fg:w="24"/><text x="51.6622%" y="799.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="773" width="0.0185%" height="15" fill="rgb(213,57,13)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="783.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="51.8368%" y="757" width="0.0185%" height="15" fill="rgb(222,116,39)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="741" width="0.0185%" height="15" fill="rgb(245,107,2)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="725" width="0.0185%" height="15" fill="rgb(238,1,10)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="709" width="0.0185%" height="15" fill="rgb(249,4,48)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="693" width="0.0185%" height="15" fill="rgb(223,151,18)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="703.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="677" width="0.0185%" height="15" fill="rgb(227,65,43)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="661" width="0.0185%" height="15" fill="rgb(218,40,45)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="671.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="645" width="0.0185%" height="15" fill="rgb(252,121,31)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="655.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="629" width="0.0185%" height="15" fill="rgb(219,158,43)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="639.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="613" width="0.0185%" height="15" fill="rgb(231,162,42)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="597" width="0.0185%" height="15" fill="rgb(217,179,25)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="581" width="0.0185%" height="15" fill="rgb(206,212,31)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="565" width="0.0185%" height="15" fill="rgb(235,144,12)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="575.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="549" width="0.0185%" height="15" fill="rgb(213,51,10)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="559.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="533" width="0.0185%" height="15" fill="rgb(231,145,14)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="543.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="517" width="0.0185%" height="15" fill="rgb(235,15,28)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="501" width="0.0185%" height="15" fill="rgb(237,206,10)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="485" width="0.0185%" height="15" fill="rgb(236,227,27)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="469" width="0.0185%" height="15" fill="rgb(246,83,35)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="479.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8368%" y="453" width="0.0185%" height="15" fill="rgb(220,136,24)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="51.8368%" y="437" width="0.0185%" height="15" fill="rgb(217,3,25)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="447.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="51.8368%" y="421" width="0.0185%" height="15" fill="rgb(239,24,14)" fg:x="2808" fg:w="1"/><text x="52.0868%" y="431.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (49 samples, 0.90%)</title><rect x="50.9876%" y="869" width="0.9046%" height="15" fill="rgb(244,16,53)" fg:x="2762" fg:w="49"/><text x="51.2376%" y="879.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (2 samples, 0.04%)</title><rect x="51.8553%" y="853" width="0.0369%" height="15" fill="rgb(208,175,44)" fg:x="2809" fg:w="2"/><text x="52.1053%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="51.8553%" y="837" width="0.0369%" height="15" fill="rgb(252,18,48)" fg:x="2809" fg:w="2"/><text x="52.1053%" y="847.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="51.8553%" y="821" width="0.0369%" height="15" fill="rgb(234,199,32)" fg:x="2809" fg:w="2"/><text x="52.1053%" y="831.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="51.8553%" y="805" width="0.0369%" height="15" fill="rgb(225,77,54)" fg:x="2809" fg:w="2"/><text x="52.1053%" y="815.50"></text></g><g><title>HashWriter::write (2 samples, 0.04%)</title><rect x="51.8553%" y="789" width="0.0369%" height="15" fill="rgb(225,42,25)" fg:x="2809" fg:w="2"/><text x="52.1053%" y="799.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.8737%" y="773" width="0.0185%" height="15" fill="rgb(242,227,46)" fg:x="2810" fg:w="1"/><text x="52.1237%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="51.8922%" y="869" width="0.0185%" height="15" fill="rgb(246,197,35)" fg:x="2811" fg:w="1"/><text x="52.1422%" y="879.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.8922%" y="853" width="0.0185%" height="15" fill="rgb(215,159,26)" fg:x="2811" fg:w="1"/><text x="52.1422%" y="863.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.8922%" y="837" width="0.0185%" height="15" fill="rgb(212,194,50)" fg:x="2811" fg:w="1"/><text x="52.1422%" y="847.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.8922%" y="821" width="0.0185%" height="15" fill="rgb(246,132,1)" fg:x="2811" fg:w="1"/><text x="52.1422%" y="831.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.8922%" y="805" width="0.0185%" height="15" fill="rgb(217,71,7)" fg:x="2811" fg:w="1"/><text x="52.1422%" y="815.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.8922%" y="789" width="0.0185%" height="15" fill="rgb(252,59,32)" fg:x="2811" fg:w="1"/><text x="52.1422%" y="799.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_ptr (1 samples, 0.02%)</title><rect x="51.8922%" y="773" width="0.0185%" height="15" fill="rgb(253,204,25)" fg:x="2811" fg:w="1"/><text x="52.1422%" y="783.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;CTransaction const&gt;::_M_ptr (1 samples, 0.02%)</title><rect x="51.8922%" y="757" width="0.0185%" height="15" fill="rgb(232,21,16)" fg:x="2811" fg:w="1"/><text x="52.1422%" y="767.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;CTransaction const&gt;::_M_addr (1 samples, 0.02%)</title><rect x="51.8922%" y="741" width="0.0185%" height="15" fill="rgb(248,90,29)" fg:x="2811" fg:w="1"/><text x="52.1422%" y="751.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (55 samples, 1.02%)</title><rect x="50.9138%" y="949" width="1.0153%" height="15" fill="rgb(249,223,7)" fg:x="2758" fg:w="55"/><text x="51.1638%" y="959.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (55 samples, 1.02%)</title><rect x="50.9138%" y="933" width="1.0153%" height="15" fill="rgb(231,119,42)" fg:x="2758" fg:w="55"/><text x="51.1638%" y="943.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (55 samples, 1.02%)</title><rect x="50.9138%" y="917" width="1.0153%" height="15" fill="rgb(215,41,35)" fg:x="2758" fg:w="55"/><text x="51.1638%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (55 samples, 1.02%)</title><rect x="50.9138%" y="901" width="1.0153%" height="15" fill="rgb(220,44,45)" fg:x="2758" fg:w="55"/><text x="51.1638%" y="911.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (55 samples, 1.02%)</title><rect x="50.9138%" y="885" width="1.0153%" height="15" fill="rgb(253,197,36)" fg:x="2758" fg:w="55"/><text x="51.1638%" y="895.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.9107%" y="869" width="0.0185%" height="15" fill="rgb(245,225,54)" fg:x="2812" fg:w="1"/><text x="52.1607%" y="879.50"></text></g><g><title>CSHA256::Finalize (3 samples, 0.06%)</title><rect x="51.9660%" y="901" width="0.0554%" height="15" fill="rgb(239,94,37)" fg:x="2815" fg:w="3"/><text x="52.2160%" y="911.50"></text></g><g><title>WriteBE32 (1 samples, 0.02%)</title><rect x="52.0030%" y="885" width="0.0185%" height="15" fill="rgb(242,217,10)" fg:x="2817" fg:w="1"/><text x="52.2530%" y="895.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="52.0030%" y="869" width="0.0185%" height="15" fill="rgb(250,193,7)" fg:x="2817" fg:w="1"/><text x="52.2530%" y="879.50"></text></g><g><title>CSHA256::Write (9 samples, 0.17%)</title><rect x="52.0214%" y="901" width="0.1661%" height="15" fill="rgb(230,104,19)" fg:x="2818" fg:w="9"/><text x="52.2714%" y="911.50"></text></g><g><title>memcpy (2 samples, 0.04%)</title><rect x="52.1506%" y="885" width="0.0369%" height="15" fill="rgb(230,181,4)" fg:x="2825" fg:w="2"/><text x="52.4006%" y="895.50"></text></g><g><title>CTransaction::ComputeHash (1 samples, 0.02%)</title><rect x="52.1876%" y="901" width="0.0185%" height="15" fill="rgb(216,219,49)" fg:x="2827" fg:w="1"/><text x="52.4376%" y="911.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.02%)</title><rect x="52.1876%" y="885" width="0.0185%" height="15" fill="rgb(254,144,0)" fg:x="2827" fg:w="1"/><text x="52.4376%" y="895.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="52.2245%" y="869" width="0.0369%" height="15" fill="rgb(205,209,38)" fg:x="2829" fg:w="2"/><text x="52.4745%" y="879.50"></text></g><g><title>QuadRound (3 samples, 0.06%)</title><rect x="52.2245%" y="885" width="0.0554%" height="15" fill="rgb(240,21,42)" fg:x="2829" fg:w="3"/><text x="52.4745%" y="895.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="52.2614%" y="869" width="0.0185%" height="15" fill="rgb(241,132,3)" fg:x="2831" fg:w="1"/><text x="52.5114%" y="879.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="52.2799%" y="869" width="0.0369%" height="15" fill="rgb(225,14,2)" fg:x="2832" fg:w="2"/><text x="52.5299%" y="879.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="52.2799%" y="853" width="0.0369%" height="15" fill="rgb(210,141,35)" fg:x="2832" fg:w="2"/><text x="52.5299%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.13%)</title><rect x="52.2060%" y="901" width="0.1292%" height="15" fill="rgb(251,14,44)" fg:x="2828" fg:w="7"/><text x="52.4560%" y="911.50"></text></g><g><title>ShiftMessageB (3 samples, 0.06%)</title><rect x="52.2799%" y="885" width="0.0554%" height="15" fill="rgb(247,48,18)" fg:x="2832" fg:w="3"/><text x="52.5299%" y="895.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="52.3168%" y="869" width="0.0185%" height="15" fill="rgb(225,0,40)" fg:x="2834" fg:w="1"/><text x="52.5668%" y="879.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="52.3168%" y="853" width="0.0185%" height="15" fill="rgb(221,31,33)" fg:x="2834" fg:w="1"/><text x="52.5668%" y="863.50"></text></g><g><title>CSHA256::Write (24 samples, 0.44%)</title><rect x="51.9291%" y="917" width="0.4430%" height="15" fill="rgb(237,42,40)" fg:x="2813" fg:w="24"/><text x="52.1791%" y="927.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="52.3352%" y="901" width="0.0369%" height="15" fill="rgb(233,51,29)" fg:x="2835" fg:w="2"/><text x="52.5852%" y="911.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="52.3537%" y="885" width="0.0185%" height="15" fill="rgb(226,58,20)" fg:x="2836" fg:w="1"/><text x="52.6037%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.3537%" y="869" width="0.0185%" height="15" fill="rgb(208,98,7)" fg:x="2836" fg:w="1"/><text x="52.6037%" y="879.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.3537%" y="853" width="0.0185%" height="15" fill="rgb(228,143,44)" fg:x="2836" fg:w="1"/><text x="52.6037%" y="863.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.3537%" y="837" width="0.0185%" height="15" fill="rgb(246,55,38)" fg:x="2836" fg:w="1"/><text x="52.6037%" y="847.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.3537%" y="821" width="0.0185%" height="15" fill="rgb(247,87,16)" fg:x="2836" fg:w="1"/><text x="52.6037%" y="831.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="52.3722%" y="885" width="0.0369%" height="15" fill="rgb(234,129,42)" fg:x="2837" fg:w="2"/><text x="52.6222%" y="895.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="52.4091%" y="885" width="0.0185%" height="15" fill="rgb(220,82,16)" fg:x="2839" fg:w="1"/><text x="52.6591%" y="895.50"></text></g><g><title>QuadRound (4 samples, 0.07%)</title><rect x="52.3722%" y="901" width="0.0738%" height="15" fill="rgb(211,88,4)" fg:x="2837" fg:w="4"/><text x="52.6222%" y="911.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="52.4275%" y="885" width="0.0185%" height="15" fill="rgb(248,151,21)" fg:x="2840" fg:w="1"/><text x="52.6775%" y="895.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="52.4460%" y="885" width="0.0369%" height="15" fill="rgb(238,163,6)" fg:x="2841" fg:w="2"/><text x="52.6960%" y="895.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="52.4460%" y="869" width="0.0369%" height="15" fill="rgb(209,183,11)" fg:x="2841" fg:w="2"/><text x="52.6960%" y="879.50"></text></g><g><title>CSHA256::Finalize (32 samples, 0.59%)</title><rect x="51.9291%" y="933" width="0.5907%" height="15" fill="rgb(219,37,20)" fg:x="2813" fg:w="32"/><text x="52.1791%" y="943.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.15%)</title><rect x="52.3722%" y="917" width="0.1477%" height="15" fill="rgb(210,158,4)" fg:x="2837" fg:w="8"/><text x="52.6222%" y="927.50"></text></g><g><title>ShiftMessageB (4 samples, 0.07%)</title><rect x="52.4460%" y="901" width="0.0738%" height="15" fill="rgb(221,167,53)" fg:x="2841" fg:w="4"/><text x="52.6960%" y="911.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="52.4829%" y="885" width="0.0369%" height="15" fill="rgb(237,151,45)" fg:x="2843" fg:w="2"/><text x="52.7329%" y="895.50"></text></g><g><title>_mm_alignr_epi8 (2 samples, 0.04%)</title><rect x="52.4829%" y="869" width="0.0369%" height="15" fill="rgb(231,39,3)" fg:x="2843" fg:w="2"/><text x="52.7329%" y="879.50"></text></g><g><title>CTransaction::ComputeHash (88 samples, 1.62%)</title><rect x="50.9138%" y="965" width="1.6245%" height="15" fill="rgb(212,167,28)" fg:x="2758" fg:w="88"/><text x="51.1638%" y="975.50"></text></g><g><title>HashWriter::GetHash (33 samples, 0.61%)</title><rect x="51.9291%" y="949" width="0.6092%" height="15" fill="rgb(232,178,8)" fg:x="2813" fg:w="33"/><text x="52.1791%" y="959.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="52.5198%" y="933" width="0.0185%" height="15" fill="rgb(225,151,20)" fg:x="2845" fg:w="1"/><text x="52.7698%" y="943.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="52.5198%" y="917" width="0.0185%" height="15" fill="rgb(238,3,37)" fg:x="2845" fg:w="1"/><text x="52.7698%" y="927.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="52.5198%" y="901" width="0.0185%" height="15" fill="rgb(251,147,42)" fg:x="2845" fg:w="1"/><text x="52.7698%" y="911.50"></text></g><g><title>CSHA256::Write (3 samples, 0.06%)</title><rect x="52.5383%" y="853" width="0.0554%" height="15" fill="rgb(208,173,10)" fg:x="2846" fg:w="3"/><text x="52.7883%" y="863.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.02%)</title><rect x="52.5937%" y="853" width="0.0185%" height="15" fill="rgb(246,225,4)" fg:x="2849" fg:w="1"/><text x="52.8437%" y="863.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.02%)</title><rect x="52.5937%" y="837" width="0.0185%" height="15" fill="rgb(248,102,6)" fg:x="2849" fg:w="1"/><text x="52.8437%" y="847.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="52.5937%" y="821" width="0.0185%" height="15" fill="rgb(232,6,21)" fg:x="2849" fg:w="1"/><text x="52.8437%" y="831.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="52.5937%" y="805" width="0.0185%" height="15" fill="rgb(221,179,22)" fg:x="2849" fg:w="1"/><text x="52.8437%" y="815.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="52.5937%" y="789" width="0.0185%" height="15" fill="rgb(252,50,20)" fg:x="2849" fg:w="1"/><text x="52.8437%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="52.5937%" y="773" width="0.0185%" height="15" fill="rgb(222,56,38)" fg:x="2849" fg:w="1"/><text x="52.8437%" y="783.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.5937%" y="757" width="0.0185%" height="15" fill="rgb(206,193,29)" fg:x="2849" fg:w="1"/><text x="52.8437%" y="767.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="52.6121%" y="837" width="0.0369%" height="15" fill="rgb(239,192,45)" fg:x="2850" fg:w="2"/><text x="52.8621%" y="847.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="52.6121%" y="821" width="0.0369%" height="15" fill="rgb(254,18,36)" fg:x="2850" fg:w="2"/><text x="52.8621%" y="831.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="52.6491%" y="821" width="0.0185%" height="15" fill="rgb(221,127,11)" fg:x="2852" fg:w="1"/><text x="52.8991%" y="831.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="52.6491%" y="805" width="0.0185%" height="15" fill="rgb(234,146,35)" fg:x="2852" fg:w="1"/><text x="52.8991%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="52.6121%" y="853" width="0.0738%" height="15" fill="rgb(254,201,37)" fg:x="2850" fg:w="4"/><text x="52.8621%" y="863.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="52.6491%" y="837" width="0.0369%" height="15" fill="rgb(211,202,23)" fg:x="2852" fg:w="2"/><text x="52.8991%" y="847.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="52.6675%" y="821" width="0.0185%" height="15" fill="rgb(237,91,2)" fg:x="2853" fg:w="1"/><text x="52.9175%" y="831.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="52.6675%" y="805" width="0.0185%" height="15" fill="rgb(226,228,36)" fg:x="2853" fg:w="1"/><text x="52.9175%" y="815.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.02%)</title><rect x="52.7044%" y="757" width="0.0185%" height="15" fill="rgb(213,63,50)" fg:x="2855" fg:w="1"/><text x="52.9544%" y="767.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.02%)</title><rect x="52.7044%" y="741" width="0.0185%" height="15" fill="rgb(235,194,19)" fg:x="2855" fg:w="1"/><text x="52.9544%" y="751.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="52.7598%" y="549" width="0.0185%" height="15" fill="rgb(207,204,18)" fg:x="2858" fg:w="1"/><text x="53.0098%" y="559.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="52.7598%" y="533" width="0.0185%" height="15" fill="rgb(248,8,7)" fg:x="2858" fg:w="1"/><text x="53.0098%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="52.7229%" y="645" width="0.0738%" height="15" fill="rgb(223,145,47)" fg:x="2856" fg:w="4"/><text x="52.9729%" y="655.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="52.7229%" y="629" width="0.0738%" height="15" fill="rgb(228,84,11)" fg:x="2856" fg:w="4"/><text x="52.9729%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="52.7229%" y="613" width="0.0738%" height="15" fill="rgb(218,76,45)" fg:x="2856" fg:w="4"/><text x="52.9729%" y="623.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="52.7229%" y="597" width="0.0738%" height="15" fill="rgb(223,80,15)" fg:x="2856" fg:w="4"/><text x="52.9729%" y="607.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.06%)</title><rect x="52.7414%" y="581" width="0.0554%" height="15" fill="rgb(219,218,33)" fg:x="2857" fg:w="3"/><text x="52.9914%" y="591.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="52.7598%" y="565" width="0.0369%" height="15" fill="rgb(208,51,11)" fg:x="2858" fg:w="2"/><text x="53.0098%" y="575.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="52.7783%" y="549" width="0.0185%" height="15" fill="rgb(229,165,39)" fg:x="2859" fg:w="1"/><text x="53.0283%" y="559.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="52.7783%" y="533" width="0.0185%" height="15" fill="rgb(241,100,24)" fg:x="2859" fg:w="1"/><text x="53.0283%" y="543.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="52.7968%" y="485" width="0.0185%" height="15" fill="rgb(228,14,23)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="469" width="0.0185%" height="15" fill="rgb(247,116,52)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="52.7968%" y="453" width="0.0185%" height="15" fill="rgb(216,149,33)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="437" width="0.0185%" height="15" fill="rgb(238,142,29)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="421" width="0.0185%" height="15" fill="rgb(224,83,40)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="431.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="405" width="0.0185%" height="15" fill="rgb(234,165,11)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="389" width="0.0185%" height="15" fill="rgb(215,96,23)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="373" width="0.0185%" height="15" fill="rgb(233,179,26)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="357" width="0.0185%" height="15" fill="rgb(225,129,33)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="367.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="341" width="0.0185%" height="15" fill="rgb(237,49,13)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="351.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="325" width="0.0185%" height="15" fill="rgb(211,3,31)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="335.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="309" width="0.0185%" height="15" fill="rgb(216,152,19)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="293" width="0.0185%" height="15" fill="rgb(251,121,35)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="303.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="277" width="0.0185%" height="15" fill="rgb(210,217,47)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="261" width="0.0185%" height="15" fill="rgb(244,116,22)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="271.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="245" width="0.0185%" height="15" fill="rgb(228,17,21)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="255.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="229" width="0.0185%" height="15" fill="rgb(240,149,34)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="239.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="213" width="0.0185%" height="15" fill="rgb(208,125,47)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="223.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="197" width="0.0185%" height="15" fill="rgb(249,186,39)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="207.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="181" width="0.0185%" height="15" fill="rgb(240,220,33)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="191.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="52.7968%" y="165" width="0.0185%" height="15" fill="rgb(243,110,23)" fg:x="2860" fg:w="1"/><text x="53.0468%" y="175.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.7968%" y="549" width="0.0369%" height="15" fill="rgb(219,163,46)" fg:x="2860" fg:w="2"/><text x="53.0468%" y="559.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.7968%" y="533" width="0.0369%" height="15" fill="rgb(216,126,30)" fg:x="2860" fg:w="2"/><text x="53.0468%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="52.7968%" y="517" width="0.0369%" height="15" fill="rgb(208,139,11)" fg:x="2860" fg:w="2"/><text x="53.0468%" y="527.50"></text></g><g><title>HashWriter::write (2 samples, 0.04%)</title><rect x="52.7968%" y="501" width="0.0369%" height="15" fill="rgb(213,118,36)" fg:x="2860" fg:w="2"/><text x="53.0468%" y="511.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="52.8152%" y="485" width="0.0185%" height="15" fill="rgb(226,43,17)" fg:x="2861" fg:w="1"/><text x="53.0652%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (3 samples, 0.06%)</title><rect x="52.7968%" y="645" width="0.0554%" height="15" fill="rgb(254,217,4)" fg:x="2860" fg:w="3"/><text x="53.0468%" y="655.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="52.7968%" y="629" width="0.0554%" height="15" fill="rgb(210,134,47)" fg:x="2860" fg:w="3"/><text x="53.0468%" y="639.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="52.7968%" y="613" width="0.0554%" height="15" fill="rgb(237,24,49)" fg:x="2860" fg:w="3"/><text x="53.0468%" y="623.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (3 samples, 0.06%)</title><rect x="52.7968%" y="597" width="0.0554%" height="15" fill="rgb(251,39,46)" fg:x="2860" fg:w="3"/><text x="53.0468%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (3 samples, 0.06%)</title><rect x="52.7968%" y="581" width="0.0554%" height="15" fill="rgb(251,220,3)" fg:x="2860" fg:w="3"/><text x="53.0468%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (3 samples, 0.06%)</title><rect x="52.7968%" y="565" width="0.0554%" height="15" fill="rgb(228,105,12)" fg:x="2860" fg:w="3"/><text x="53.0468%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8337%" y="549" width="0.0185%" height="15" fill="rgb(215,196,1)" fg:x="2862" fg:w="1"/><text x="53.0837%" y="559.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8337%" y="533" width="0.0185%" height="15" fill="rgb(214,33,39)" fg:x="2862" fg:w="1"/><text x="53.0837%" y="543.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8337%" y="517" width="0.0185%" height="15" fill="rgb(220,19,52)" fg:x="2862" fg:w="1"/><text x="53.0837%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="52.8337%" y="501" width="0.0185%" height="15" fill="rgb(221,78,38)" fg:x="2862" fg:w="1"/><text x="53.0837%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="52.8337%" y="485" width="0.0185%" height="15" fill="rgb(253,30,16)" fg:x="2862" fg:w="1"/><text x="53.0837%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.8337%" y="469" width="0.0185%" height="15" fill="rgb(242,65,0)" fg:x="2862" fg:w="1"/><text x="53.0837%" y="479.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.8337%" y="453" width="0.0185%" height="15" fill="rgb(235,201,12)" fg:x="2862" fg:w="1"/><text x="53.0837%" y="463.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="52.8337%" y="437" width="0.0185%" height="15" fill="rgb(233,161,9)" fg:x="2862" fg:w="1"/><text x="53.0837%" y="447.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="52.8337%" y="421" width="0.0185%" height="15" fill="rgb(241,207,41)" fg:x="2862" fg:w="1"/><text x="53.0837%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="52.8521%" y="533" width="0.0369%" height="15" fill="rgb(212,69,46)" fg:x="2863" fg:w="2"/><text x="53.1021%" y="543.50"></text></g><g><title>HashWriter::write (2 samples, 0.04%)</title><rect x="52.8521%" y="517" width="0.0369%" height="15" fill="rgb(239,69,45)" fg:x="2863" fg:w="2"/><text x="53.1021%" y="527.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="52.8521%" y="501" width="0.0369%" height="15" fill="rgb(242,117,48)" fg:x="2863" fg:w="2"/><text x="53.1021%" y="511.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="52.8521%" y="485" width="0.0369%" height="15" fill="rgb(228,41,36)" fg:x="2863" fg:w="2"/><text x="53.1021%" y="495.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="52.8706%" y="469" width="0.0185%" height="15" fill="rgb(212,3,32)" fg:x="2864" fg:w="1"/><text x="53.1206%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="52.8891%" y="469" width="0.0369%" height="15" fill="rgb(233,41,49)" fg:x="2865" fg:w="2"/><text x="53.1391%" y="479.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="52.9075%" y="453" width="0.0185%" height="15" fill="rgb(252,170,49)" fg:x="2866" fg:w="1"/><text x="53.1575%" y="463.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="52.9075%" y="437" width="0.0185%" height="15" fill="rgb(229,53,26)" fg:x="2866" fg:w="1"/><text x="53.1575%" y="447.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="52.9260%" y="469" width="0.0185%" height="15" fill="rgb(217,157,12)" fg:x="2867" fg:w="1"/><text x="53.1760%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="52.9260%" y="453" width="0.0185%" height="15" fill="rgb(227,17,9)" fg:x="2867" fg:w="1"/><text x="53.1760%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9260%" y="437" width="0.0185%" height="15" fill="rgb(218,84,12)" fg:x="2867" fg:w="1"/><text x="53.1760%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9260%" y="421" width="0.0185%" height="15" fill="rgb(212,79,24)" fg:x="2867" fg:w="1"/><text x="53.1760%" y="431.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9260%" y="405" width="0.0185%" height="15" fill="rgb(217,222,37)" fg:x="2867" fg:w="1"/><text x="53.1760%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.9260%" y="389" width="0.0185%" height="15" fill="rgb(246,208,8)" fg:x="2867" fg:w="1"/><text x="53.1760%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.24%)</title><rect x="52.7229%" y="757" width="0.2400%" height="15" fill="rgb(244,133,10)" fg:x="2856" fg:w="13"/><text x="52.9729%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.24%)</title><rect x="52.7229%" y="741" width="0.2400%" height="15" fill="rgb(209,219,41)" fg:x="2856" fg:w="13"/><text x="52.9729%" y="751.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.24%)</title><rect x="52.7229%" y="725" width="0.2400%" height="15" fill="rgb(253,175,45)" fg:x="2856" fg:w="13"/><text x="52.9729%" y="735.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.24%)</title><rect x="52.7229%" y="709" width="0.2400%" height="15" fill="rgb(235,100,37)" fg:x="2856" fg:w="13"/><text x="52.9729%" y="719.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (13 samples, 0.24%)</title><rect x="52.7229%" y="693" width="0.2400%" height="15" fill="rgb(225,87,19)" fg:x="2856" fg:w="13"/><text x="52.9729%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.24%)</title><rect x="52.7229%" y="677" width="0.2400%" height="15" fill="rgb(217,152,17)" fg:x="2856" fg:w="13"/><text x="52.9729%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.24%)</title><rect x="52.7229%" y="661" width="0.2400%" height="15" fill="rgb(235,72,13)" fg:x="2856" fg:w="13"/><text x="52.9729%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (6 samples, 0.11%)</title><rect x="52.8521%" y="645" width="0.1108%" height="15" fill="rgb(233,140,18)" fg:x="2863" fg:w="6"/><text x="53.1021%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="52.8521%" y="629" width="0.1108%" height="15" fill="rgb(207,212,28)" fg:x="2863" fg:w="6"/><text x="53.1021%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="52.8521%" y="613" width="0.1108%" height="15" fill="rgb(220,130,25)" fg:x="2863" fg:w="6"/><text x="53.1021%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (6 samples, 0.11%)</title><rect x="52.8521%" y="597" width="0.1108%" height="15" fill="rgb(205,55,34)" fg:x="2863" fg:w="6"/><text x="53.1021%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.11%)</title><rect x="52.8521%" y="581" width="0.1108%" height="15" fill="rgb(237,54,35)" fg:x="2863" fg:w="6"/><text x="53.1021%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.11%)</title><rect x="52.8521%" y="565" width="0.1108%" height="15" fill="rgb(208,67,23)" fg:x="2863" fg:w="6"/><text x="53.1021%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (6 samples, 0.11%)</title><rect x="52.8521%" y="549" width="0.1108%" height="15" fill="rgb(206,207,50)" fg:x="2863" fg:w="6"/><text x="53.1021%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="52.8891%" y="533" width="0.0738%" height="15" fill="rgb(213,211,42)" fg:x="2865" fg:w="4"/><text x="53.1391%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="52.8891%" y="517" width="0.0738%" height="15" fill="rgb(252,197,50)" fg:x="2865" fg:w="4"/><text x="53.1391%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="52.8891%" y="501" width="0.0738%" height="15" fill="rgb(251,211,41)" fg:x="2865" fg:w="4"/><text x="53.1391%" y="511.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="52.8891%" y="485" width="0.0738%" height="15" fill="rgb(229,211,5)" fg:x="2865" fg:w="4"/><text x="53.1391%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9444%" y="469" width="0.0185%" height="15" fill="rgb(239,36,31)" fg:x="2868" fg:w="1"/><text x="53.1944%" y="479.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9444%" y="453" width="0.0185%" height="15" fill="rgb(248,67,31)" fg:x="2868" fg:w="1"/><text x="53.1944%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.9444%" y="437" width="0.0185%" height="15" fill="rgb(249,55,44)" fg:x="2868" fg:w="1"/><text x="53.1944%" y="447.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.9444%" y="421" width="0.0185%" height="15" fill="rgb(216,82,12)" fg:x="2868" fg:w="1"/><text x="53.1944%" y="431.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (5 samples, 0.09%)</title><rect x="52.9629%" y="757" width="0.0923%" height="15" fill="rgb(242,174,1)" fg:x="2869" fg:w="5"/><text x="53.2129%" y="767.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (2 samples, 0.04%)</title><rect x="53.0183%" y="741" width="0.0369%" height="15" fill="rgb(208,120,29)" fg:x="2872" fg:w="2"/><text x="53.2683%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="53.0183%" y="725" width="0.0369%" height="15" fill="rgb(221,105,43)" fg:x="2872" fg:w="2"/><text x="53.2683%" y="735.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="53.0183%" y="709" width="0.0369%" height="15" fill="rgb(234,124,22)" fg:x="2872" fg:w="2"/><text x="53.2683%" y="719.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="53.0183%" y="693" width="0.0369%" height="15" fill="rgb(212,23,30)" fg:x="2872" fg:w="2"/><text x="53.2683%" y="703.50"></text></g><g><title>HashWriter::write (2 samples, 0.04%)</title><rect x="53.0183%" y="677" width="0.0369%" height="15" fill="rgb(219,122,53)" fg:x="2872" fg:w="2"/><text x="53.2683%" y="687.50"></text></g><g><title>CTransaction::ComputeWitnessHash (4 samples, 0.07%)</title><rect x="53.0552%" y="693" width="0.0738%" height="15" fill="rgb(248,84,24)" fg:x="2874" fg:w="4"/><text x="53.3052%" y="703.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.02%)</title><rect x="53.1106%" y="677" width="0.0185%" height="15" fill="rgb(245,115,18)" fg:x="2877" fg:w="1"/><text x="53.3606%" y="687.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (25 samples, 0.46%)</title><rect x="52.7044%" y="837" width="0.4615%" height="15" fill="rgb(227,176,51)" fg:x="2855" fg:w="25"/><text x="52.9544%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (25 samples, 0.46%)</title><rect x="52.7044%" y="821" width="0.4615%" height="15" fill="rgb(229,63,42)" fg:x="2855" fg:w="25"/><text x="52.9544%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (25 samples, 0.46%)</title><rect x="52.7044%" y="805" width="0.4615%" height="15" fill="rgb(247,202,24)" fg:x="2855" fg:w="25"/><text x="52.9544%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.46%)</title><rect x="52.7044%" y="789" width="0.4615%" height="15" fill="rgb(244,173,20)" fg:x="2855" fg:w="25"/><text x="52.9544%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (25 samples, 0.46%)</title><rect x="52.7044%" y="773" width="0.4615%" height="15" fill="rgb(242,81,47)" fg:x="2855" fg:w="25"/><text x="52.9544%" y="783.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="53.0552%" y="757" width="0.1108%" height="15" fill="rgb(231,185,54)" fg:x="2874" fg:w="6"/><text x="53.3052%" y="767.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="53.0552%" y="741" width="0.1108%" height="15" fill="rgb(243,55,32)" fg:x="2874" fg:w="6"/><text x="53.3052%" y="751.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (6 samples, 0.11%)</title><rect x="53.0552%" y="725" width="0.1108%" height="15" fill="rgb(208,167,19)" fg:x="2874" fg:w="6"/><text x="53.3052%" y="735.50"></text></g><g><title>HashWriter::write (6 samples, 0.11%)</title><rect x="53.0552%" y="709" width="0.1108%" height="15" fill="rgb(231,72,35)" fg:x="2874" fg:w="6"/><text x="53.3052%" y="719.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="53.1290%" y="693" width="0.0369%" height="15" fill="rgb(250,173,51)" fg:x="2878" fg:w="2"/><text x="53.3790%" y="703.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.1660%" y="757" width="0.0185%" height="15" fill="rgb(209,5,22)" fg:x="2880" fg:w="1"/><text x="53.4160%" y="767.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="53.1844%" y="581" width="0.0369%" height="15" fill="rgb(250,174,19)" fg:x="2881" fg:w="2"/><text x="53.4344%" y="591.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="53.2029%" y="565" width="0.0185%" height="15" fill="rgb(217,3,49)" fg:x="2882" fg:w="1"/><text x="53.4529%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.2213%" y="373" width="0.0185%" height="15" fill="rgb(218,225,5)" fg:x="2883" fg:w="1"/><text x="53.4713%" y="383.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.2213%" y="357" width="0.0185%" height="15" fill="rgb(236,89,11)" fg:x="2883" fg:w="1"/><text x="53.4713%" y="367.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="53.2213%" y="341" width="0.0185%" height="15" fill="rgb(206,33,28)" fg:x="2883" fg:w="1"/><text x="53.4713%" y="351.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="53.2213%" y="325" width="0.0185%" height="15" fill="rgb(241,56,42)" fg:x="2883" fg:w="1"/><text x="53.4713%" y="335.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="581" width="0.0738%" height="15" fill="rgb(222,44,11)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="591.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (4 samples, 0.07%)</title><rect x="53.2213%" y="565" width="0.0738%" height="15" fill="rgb(234,111,20)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="549" width="0.0738%" height="15" fill="rgb(237,77,6)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="533" width="0.0738%" height="15" fill="rgb(235,111,23)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="517" width="0.0738%" height="15" fill="rgb(251,135,29)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="501" width="0.0738%" height="15" fill="rgb(217,57,1)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="485" width="0.0738%" height="15" fill="rgb(249,119,31)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="469" width="0.0738%" height="15" fill="rgb(233,164,33)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="479.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="453" width="0.0738%" height="15" fill="rgb(250,217,43)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="463.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="437" width="0.0738%" height="15" fill="rgb(232,154,50)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="447.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="421" width="0.0738%" height="15" fill="rgb(227,190,8)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="405" width="0.0738%" height="15" fill="rgb(209,217,32)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="415.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (4 samples, 0.07%)</title><rect x="53.2213%" y="389" width="0.0738%" height="15" fill="rgb(243,203,50)" fg:x="2883" fg:w="4"/><text x="53.4713%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.06%)</title><rect x="53.2398%" y="373" width="0.0554%" height="15" fill="rgb(232,152,27)" fg:x="2884" fg:w="3"/><text x="53.4898%" y="383.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="53.2398%" y="357" width="0.0554%" height="15" fill="rgb(240,34,29)" fg:x="2884" fg:w="3"/><text x="53.4898%" y="367.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="53.2398%" y="341" width="0.0554%" height="15" fill="rgb(215,185,52)" fg:x="2884" fg:w="3"/><text x="53.4898%" y="351.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.06%)</title><rect x="53.2398%" y="325" width="0.0554%" height="15" fill="rgb(240,89,49)" fg:x="2884" fg:w="3"/><text x="53.4898%" y="335.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.06%)</title><rect x="53.2398%" y="309" width="0.0554%" height="15" fill="rgb(225,12,52)" fg:x="2884" fg:w="3"/><text x="53.4898%" y="319.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.06%)</title><rect x="53.2398%" y="293" width="0.0554%" height="15" fill="rgb(239,128,45)" fg:x="2884" fg:w="3"/><text x="53.4898%" y="303.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.06%)</title><rect x="53.2398%" y="277" width="0.0554%" height="15" fill="rgb(211,78,47)" fg:x="2884" fg:w="3"/><text x="53.4898%" y="287.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="53.2767%" y="261" width="0.0185%" height="15" fill="rgb(232,31,21)" fg:x="2886" fg:w="1"/><text x="53.5267%" y="271.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="53.1844%" y="645" width="0.1292%" height="15" fill="rgb(222,168,14)" fg:x="2881" fg:w="7"/><text x="53.4344%" y="655.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.13%)</title><rect x="53.1844%" y="629" width="0.1292%" height="15" fill="rgb(209,128,24)" fg:x="2881" fg:w="7"/><text x="53.4344%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (7 samples, 0.13%)</title><rect x="53.1844%" y="613" width="0.1292%" height="15" fill="rgb(249,35,13)" fg:x="2881" fg:w="7"/><text x="53.4344%" y="623.50"></text></g><g><title>HashWriter::write (7 samples, 0.13%)</title><rect x="53.1844%" y="597" width="0.1292%" height="15" fill="rgb(218,7,2)" fg:x="2881" fg:w="7"/><text x="53.4344%" y="607.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.2952%" y="581" width="0.0185%" height="15" fill="rgb(238,107,27)" fg:x="2887" fg:w="1"/><text x="53.5452%" y="591.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.3321%" y="533" width="0.0185%" height="15" fill="rgb(217,88,38)" fg:x="2889" fg:w="1"/><text x="53.5821%" y="543.50"></text></g><g><title>CSHA256::Write (5 samples, 0.09%)</title><rect x="53.4613%" y="485" width="0.0923%" height="15" fill="rgb(230,207,0)" fg:x="2896" fg:w="5"/><text x="53.7113%" y="495.50"></text></g><g><title>memcpy (2 samples, 0.04%)</title><rect x="53.5167%" y="469" width="0.0369%" height="15" fill="rgb(249,64,54)" fg:x="2899" fg:w="2"/><text x="53.7667%" y="479.50"></text></g><g><title>CSHA256::Write (13 samples, 0.24%)</title><rect x="53.3506%" y="501" width="0.2400%" height="15" fill="rgb(231,7,11)" fg:x="2890" fg:w="13"/><text x="53.6006%" y="511.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="53.5536%" y="485" width="0.0369%" height="15" fill="rgb(205,149,21)" fg:x="2901" fg:w="2"/><text x="53.8036%" y="495.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.5721%" y="469" width="0.0185%" height="15" fill="rgb(215,126,34)" fg:x="2902" fg:w="1"/><text x="53.8221%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="53.5721%" y="453" width="0.0185%" height="15" fill="rgb(241,132,45)" fg:x="2902" fg:w="1"/><text x="53.8221%" y="463.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="53.5721%" y="437" width="0.0185%" height="15" fill="rgb(252,69,32)" fg:x="2902" fg:w="1"/><text x="53.8221%" y="447.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="53.5905%" y="485" width="0.0185%" height="15" fill="rgb(232,204,19)" fg:x="2903" fg:w="1"/><text x="53.8405%" y="495.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="53.5905%" y="469" width="0.0185%" height="15" fill="rgb(249,15,47)" fg:x="2903" fg:w="1"/><text x="53.8405%" y="479.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="53.6090%" y="453" width="0.0185%" height="15" fill="rgb(209,227,23)" fg:x="2904" fg:w="1"/><text x="53.8590%" y="463.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="53.5905%" y="501" width="0.0738%" height="15" fill="rgb(248,92,24)" fg:x="2903" fg:w="4"/><text x="53.8405%" y="511.50"></text></g><g><title>ShiftMessageB (3 samples, 0.06%)</title><rect x="53.6090%" y="485" width="0.0554%" height="15" fill="rgb(247,59,2)" fg:x="2904" fg:w="3"/><text x="53.8590%" y="495.50"></text></g><g><title>ShiftMessageC (3 samples, 0.06%)</title><rect x="53.6090%" y="469" width="0.0554%" height="15" fill="rgb(221,30,5)" fg:x="2904" fg:w="3"/><text x="53.8590%" y="479.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="53.6275%" y="453" width="0.0369%" height="15" fill="rgb(208,108,53)" fg:x="2905" fg:w="2"/><text x="53.8775%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (18 samples, 0.33%)</title><rect x="53.3506%" y="533" width="0.3323%" height="15" fill="rgb(211,183,26)" fg:x="2890" fg:w="18"/><text x="53.6006%" y="543.50"></text></g><g><title>HashWriter::write (18 samples, 0.33%)</title><rect x="53.3506%" y="517" width="0.3323%" height="15" fill="rgb(232,132,4)" fg:x="2890" fg:w="18"/><text x="53.6006%" y="527.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="53.6644%" y="501" width="0.0185%" height="15" fill="rgb(253,128,37)" fg:x="2907" fg:w="1"/><text x="53.9144%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="53.6644%" y="485" width="0.0185%" height="15" fill="rgb(221,58,24)" fg:x="2907" fg:w="1"/><text x="53.9144%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="53.6644%" y="469" width="0.0185%" height="15" fill="rgb(230,54,45)" fg:x="2907" fg:w="1"/><text x="53.9144%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="53.6644%" y="453" width="0.0185%" height="15" fill="rgb(254,21,18)" fg:x="2907" fg:w="1"/><text x="53.9144%" y="463.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.6644%" y="437" width="0.0185%" height="15" fill="rgb(221,108,0)" fg:x="2907" fg:w="1"/><text x="53.9144%" y="447.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.6644%" y="421" width="0.0185%" height="15" fill="rgb(206,95,1)" fg:x="2907" fg:w="1"/><text x="53.9144%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="53.6829%" y="533" width="0.0185%" height="15" fill="rgb(237,52,5)" fg:x="2908" fg:w="1"/><text x="53.9329%" y="543.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="53.6829%" y="517" width="0.0185%" height="15" fill="rgb(218,150,34)" fg:x="2908" fg:w="1"/><text x="53.9329%" y="527.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="53.6829%" y="501" width="0.0185%" height="15" fill="rgb(235,194,28)" fg:x="2908" fg:w="1"/><text x="53.9329%" y="511.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="53.6829%" y="485" width="0.0185%" height="15" fill="rgb(245,92,18)" fg:x="2908" fg:w="1"/><text x="53.9329%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (30 samples, 0.55%)</title><rect x="53.1660%" y="837" width="0.5538%" height="15" fill="rgb(253,203,53)" fg:x="2880" fg:w="30"/><text x="53.4160%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (30 samples, 0.55%)</title><rect x="53.1660%" y="821" width="0.5538%" height="15" fill="rgb(249,185,47)" fg:x="2880" fg:w="30"/><text x="53.4160%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (30 samples, 0.55%)</title><rect x="53.1660%" y="805" width="0.5538%" height="15" fill="rgb(252,194,52)" fg:x="2880" fg:w="30"/><text x="53.4160%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.55%)</title><rect x="53.1660%" y="789" width="0.5538%" height="15" fill="rgb(210,53,36)" fg:x="2880" fg:w="30"/><text x="53.4160%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (30 samples, 0.55%)</title><rect x="53.1660%" y="773" width="0.5538%" height="15" fill="rgb(237,37,25)" fg:x="2880" fg:w="30"/><text x="53.4160%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (29 samples, 0.54%)</title><rect x="53.1844%" y="757" width="0.5354%" height="15" fill="rgb(242,116,27)" fg:x="2881" fg:w="29"/><text x="53.4344%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (29 samples, 0.54%)</title><rect x="53.1844%" y="741" width="0.5354%" height="15" fill="rgb(213,185,26)" fg:x="2881" fg:w="29"/><text x="53.4344%" y="751.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (29 samples, 0.54%)</title><rect x="53.1844%" y="725" width="0.5354%" height="15" fill="rgb(225,204,8)" fg:x="2881" fg:w="29"/><text x="53.4344%" y="735.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (29 samples, 0.54%)</title><rect x="53.1844%" y="709" width="0.5354%" height="15" fill="rgb(254,111,37)" fg:x="2881" fg:w="29"/><text x="53.4344%" y="719.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (29 samples, 0.54%)</title><rect x="53.1844%" y="693" width="0.5354%" height="15" fill="rgb(242,35,9)" fg:x="2881" fg:w="29"/><text x="53.4344%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (29 samples, 0.54%)</title><rect x="53.1844%" y="677" width="0.5354%" height="15" fill="rgb(232,138,49)" fg:x="2881" fg:w="29"/><text x="53.4344%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (29 samples, 0.54%)</title><rect x="53.1844%" y="661" width="0.5354%" height="15" fill="rgb(247,56,4)" fg:x="2881" fg:w="29"/><text x="53.4344%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (22 samples, 0.41%)</title><rect x="53.3136%" y="645" width="0.4061%" height="15" fill="rgb(226,179,17)" fg:x="2888" fg:w="22"/><text x="53.5636%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.41%)</title><rect x="53.3136%" y="629" width="0.4061%" height="15" fill="rgb(216,163,45)" fg:x="2888" fg:w="22"/><text x="53.5636%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.41%)</title><rect x="53.3136%" y="613" width="0.4061%" height="15" fill="rgb(211,157,3)" fg:x="2888" fg:w="22"/><text x="53.5636%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (22 samples, 0.41%)</title><rect x="53.3136%" y="597" width="0.4061%" height="15" fill="rgb(234,44,20)" fg:x="2888" fg:w="22"/><text x="53.5636%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (22 samples, 0.41%)</title><rect x="53.3136%" y="581" width="0.4061%" height="15" fill="rgb(254,138,23)" fg:x="2888" fg:w="22"/><text x="53.5636%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (22 samples, 0.41%)</title><rect x="53.3136%" y="565" width="0.4061%" height="15" fill="rgb(206,119,39)" fg:x="2888" fg:w="22"/><text x="53.5636%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (22 samples, 0.41%)</title><rect x="53.3136%" y="549" width="0.4061%" height="15" fill="rgb(231,105,52)" fg:x="2888" fg:w="22"/><text x="53.5636%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.7013%" y="533" width="0.0185%" height="15" fill="rgb(250,20,5)" fg:x="2909" fg:w="1"/><text x="53.9513%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.7013%" y="517" width="0.0185%" height="15" fill="rgb(215,198,30)" fg:x="2909" fg:w="1"/><text x="53.9513%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="53.7013%" y="501" width="0.0185%" height="15" fill="rgb(246,142,8)" fg:x="2909" fg:w="1"/><text x="53.9513%" y="511.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="53.7013%" y="485" width="0.0185%" height="15" fill="rgb(243,26,38)" fg:x="2909" fg:w="1"/><text x="53.9513%" y="495.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.7013%" y="469" width="0.0185%" height="15" fill="rgb(205,133,28)" fg:x="2909" fg:w="1"/><text x="53.9513%" y="479.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.7198%" y="757" width="0.0185%" height="15" fill="rgb(212,34,0)" fg:x="2910" fg:w="1"/><text x="53.9698%" y="767.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.7382%" y="725" width="0.0185%" height="15" fill="rgb(251,226,22)" fg:x="2911" fg:w="1"/><text x="53.9882%" y="735.50"></text></g><g><title>CSHA256::Write (7 samples, 0.13%)</title><rect x="53.7936%" y="677" width="0.1292%" height="15" fill="rgb(252,119,9)" fg:x="2914" fg:w="7"/><text x="54.0436%" y="687.50"></text></g><g><title>_mm_add_epi32 (4 samples, 0.07%)</title><rect x="53.9228%" y="645" width="0.0738%" height="15" fill="rgb(213,150,50)" fg:x="2921" fg:w="4"/><text x="54.1728%" y="655.50"></text></g><g><title>QuadRound (5 samples, 0.09%)</title><rect x="53.9228%" y="661" width="0.0923%" height="15" fill="rgb(212,24,39)" fg:x="2921" fg:w="5"/><text x="54.1728%" y="671.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="53.9967%" y="645" width="0.0185%" height="15" fill="rgb(213,46,39)" fg:x="2925" fg:w="1"/><text x="54.2467%" y="655.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="54.0151%" y="645" width="0.0369%" height="15" fill="rgb(239,106,12)" fg:x="2926" fg:w="2"/><text x="54.2651%" y="655.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="54.0151%" y="629" width="0.0369%" height="15" fill="rgb(249,229,21)" fg:x="2926" fg:w="2"/><text x="54.2651%" y="639.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="54.0521%" y="629" width="0.0185%" height="15" fill="rgb(212,158,3)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="613" width="0.0185%" height="15" fill="rgb(253,26,48)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="597" width="0.0185%" height="15" fill="rgb(238,178,20)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="581" width="0.0185%" height="15" fill="rgb(208,86,15)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="565" width="0.0185%" height="15" fill="rgb(239,42,53)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="549" width="0.0185%" height="15" fill="rgb(245,226,8)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="533" width="0.0185%" height="15" fill="rgb(216,176,32)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="517" width="0.0185%" height="15" fill="rgb(231,186,21)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="501" width="0.0185%" height="15" fill="rgb(205,95,49)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="485" width="0.0185%" height="15" fill="rgb(217,145,8)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="469" width="0.0185%" height="15" fill="rgb(239,144,48)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="453" width="0.0185%" height="15" fill="rgb(214,189,23)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="437" width="0.0185%" height="15" fill="rgb(229,157,17)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.0521%" y="421" width="0.0185%" height="15" fill="rgb(230,5,48)" fg:x="2928" fg:w="1"/><text x="54.3021%" y="431.50"></text></g><g><title>ShiftMessageB (5 samples, 0.09%)</title><rect x="54.0151%" y="661" width="0.0923%" height="15" fill="rgb(224,156,48)" fg:x="2926" fg:w="5"/><text x="54.2651%" y="671.50"></text></g><g><title>ShiftMessageC (3 samples, 0.06%)</title><rect x="54.0521%" y="645" width="0.0554%" height="15" fill="rgb(223,14,29)" fg:x="2928" fg:w="3"/><text x="54.3021%" y="655.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="54.0705%" y="629" width="0.0369%" height="15" fill="rgb(229,96,36)" fg:x="2929" fg:w="2"/><text x="54.3205%" y="639.50"></text></g><g><title>sha256_x86_shani::Transform (14 samples, 0.26%)</title><rect x="53.9228%" y="677" width="0.2584%" height="15" fill="rgb(231,102,53)" fg:x="2921" fg:w="14"/><text x="54.1728%" y="687.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="54.1074%" y="661" width="0.0738%" height="15" fill="rgb(210,77,38)" fg:x="2931" fg:w="4"/><text x="54.3574%" y="671.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="54.1074%" y="645" width="0.0738%" height="15" fill="rgb(235,131,6)" fg:x="2931" fg:w="4"/><text x="54.3574%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="54.1074%" y="629" width="0.0738%" height="15" fill="rgb(252,55,38)" fg:x="2931" fg:w="4"/><text x="54.3574%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="54.1074%" y="613" width="0.0738%" height="15" fill="rgb(246,38,14)" fg:x="2931" fg:w="4"/><text x="54.3574%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="54.1074%" y="597" width="0.0738%" height="15" fill="rgb(242,27,5)" fg:x="2931" fg:w="4"/><text x="54.3574%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="54.1074%" y="581" width="0.0738%" height="15" fill="rgb(228,65,35)" fg:x="2931" fg:w="4"/><text x="54.3574%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="54.1259%" y="565" width="0.0554%" height="15" fill="rgb(245,93,11)" fg:x="2932" fg:w="3"/><text x="54.3759%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="54.1259%" y="549" width="0.0554%" height="15" fill="rgb(213,1,31)" fg:x="2932" fg:w="3"/><text x="54.3759%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="54.1259%" y="533" width="0.0554%" height="15" fill="rgb(237,205,14)" fg:x="2932" fg:w="3"/><text x="54.3759%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="54.1259%" y="517" width="0.0554%" height="15" fill="rgb(232,118,45)" fg:x="2932" fg:w="3"/><text x="54.3759%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="54.1259%" y="501" width="0.0554%" height="15" fill="rgb(218,5,6)" fg:x="2932" fg:w="3"/><text x="54.3759%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="54.1259%" y="485" width="0.0554%" height="15" fill="rgb(251,87,51)" fg:x="2932" fg:w="3"/><text x="54.3759%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="54.1813%" y="661" width="0.0369%" height="15" fill="rgb(207,225,20)" fg:x="2935" fg:w="2"/><text x="54.4313%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="54.1813%" y="645" width="0.0369%" height="15" fill="rgb(222,78,54)" fg:x="2935" fg:w="2"/><text x="54.4313%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="54.1813%" y="629" width="0.0369%" height="15" fill="rgb(232,85,16)" fg:x="2935" fg:w="2"/><text x="54.4313%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="54.1813%" y="613" width="0.0369%" height="15" fill="rgb(244,25,33)" fg:x="2935" fg:w="2"/><text x="54.4313%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="54.1813%" y="597" width="0.0369%" height="15" fill="rgb(233,24,36)" fg:x="2935" fg:w="2"/><text x="54.4313%" y="607.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.2182%" y="549" width="0.0185%" height="15" fill="rgb(253,49,54)" fg:x="2937" fg:w="1"/><text x="54.4682%" y="559.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="54.2182%" y="533" width="0.0185%" height="15" fill="rgb(245,12,22)" fg:x="2937" fg:w="1"/><text x="54.4682%" y="543.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="54.1813%" y="677" width="0.0738%" height="15" fill="rgb(253,141,28)" fg:x="2935" fg:w="4"/><text x="54.4313%" y="687.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="54.2182%" y="661" width="0.0369%" height="15" fill="rgb(225,207,27)" fg:x="2937" fg:w="2"/><text x="54.4682%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="54.2182%" y="645" width="0.0369%" height="15" fill="rgb(220,84,2)" fg:x="2937" fg:w="2"/><text x="54.4682%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="54.2182%" y="629" width="0.0369%" height="15" fill="rgb(224,37,37)" fg:x="2937" fg:w="2"/><text x="54.4682%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="54.2182%" y="613" width="0.0369%" height="15" fill="rgb(220,143,18)" fg:x="2937" fg:w="2"/><text x="54.4682%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="54.2182%" y="597" width="0.0369%" height="15" fill="rgb(210,88,33)" fg:x="2937" fg:w="2"/><text x="54.4682%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="54.2182%" y="581" width="0.0369%" height="15" fill="rgb(219,87,51)" fg:x="2937" fg:w="2"/><text x="54.4682%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.04%)</title><rect x="54.2182%" y="565" width="0.0369%" height="15" fill="rgb(211,7,35)" fg:x="2937" fg:w="2"/><text x="54.4682%" y="575.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::empty (1 samples, 0.02%)</title><rect x="54.2367%" y="549" width="0.0185%" height="15" fill="rgb(232,77,2)" fg:x="2938" fg:w="1"/><text x="54.4867%" y="559.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::begin (1 samples, 0.02%)</title><rect x="54.2367%" y="533" width="0.0185%" height="15" fill="rgb(249,94,25)" fg:x="2938" fg:w="1"/><text x="54.4867%" y="543.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="54.2367%" y="517" width="0.0185%" height="15" fill="rgb(215,112,2)" fg:x="2938" fg:w="1"/><text x="54.4867%" y="527.50"></text></g><g><title>CSHA256::Write (28 samples, 0.52%)</title><rect x="53.7567%" y="693" width="0.5169%" height="15" fill="rgb(226,115,48)" fg:x="2912" fg:w="28"/><text x="54.0067%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2551%" y="677" width="0.0185%" height="15" fill="rgb(249,196,10)" fg:x="2939" fg:w="1"/><text x="54.5051%" y="687.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.2736%" y="677" width="0.0185%" height="15" fill="rgb(237,109,14)" fg:x="2940" fg:w="1"/><text x="54.5236%" y="687.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.2736%" y="661" width="0.0185%" height="15" fill="rgb(217,103,53)" fg:x="2940" fg:w="1"/><text x="54.5236%" y="671.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="54.2920%" y="677" width="0.0185%" height="15" fill="rgb(244,137,9)" fg:x="2941" fg:w="1"/><text x="54.5420%" y="687.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="54.2920%" y="661" width="0.0185%" height="15" fill="rgb(227,201,3)" fg:x="2941" fg:w="1"/><text x="54.5420%" y="671.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="54.2920%" y="645" width="0.0185%" height="15" fill="rgb(243,94,6)" fg:x="2941" fg:w="1"/><text x="54.5420%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (31 samples, 0.57%)</title><rect x="53.7567%" y="725" width="0.5723%" height="15" fill="rgb(235,118,5)" fg:x="2912" fg:w="31"/><text x="54.0067%" y="735.50"></text></g><g><title>HashWriter::write (31 samples, 0.57%)</title><rect x="53.7567%" y="709" width="0.5723%" height="15" fill="rgb(247,10,30)" fg:x="2912" fg:w="31"/><text x="54.0067%" y="719.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.06%)</title><rect x="54.2736%" y="693" width="0.0554%" height="15" fill="rgb(205,26,28)" fg:x="2940" fg:w="3"/><text x="54.5236%" y="703.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="54.3105%" y="677" width="0.0185%" height="15" fill="rgb(206,99,35)" fg:x="2942" fg:w="1"/><text x="54.5605%" y="687.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="54.3105%" y="661" width="0.0185%" height="15" fill="rgb(238,130,40)" fg:x="2942" fg:w="1"/><text x="54.5605%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (33 samples, 0.61%)</title><rect x="53.7382%" y="757" width="0.6092%" height="15" fill="rgb(224,126,31)" fg:x="2911" fg:w="33"/><text x="53.9882%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (33 samples, 0.61%)</title><rect x="53.7382%" y="741" width="0.6092%" height="15" fill="rgb(254,105,17)" fg:x="2911" fg:w="33"/><text x="53.9882%" y="751.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.3290%" y="725" width="0.0185%" height="15" fill="rgb(216,87,36)" fg:x="2943" fg:w="1"/><text x="54.5790%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (37 samples, 0.68%)</title><rect x="53.7198%" y="837" width="0.6830%" height="15" fill="rgb(240,21,12)" fg:x="2910" fg:w="37"/><text x="53.9698%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (37 samples, 0.68%)</title><rect x="53.7198%" y="821" width="0.6830%" height="15" fill="rgb(245,192,34)" fg:x="2910" fg:w="37"/><text x="53.9698%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (37 samples, 0.68%)</title><rect x="53.7198%" y="805" width="0.6830%" height="15" fill="rgb(226,100,49)" fg:x="2910" fg:w="37"/><text x="53.9698%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (37 samples, 0.68%)</title><rect x="53.7198%" y="789" width="0.6830%" height="15" fill="rgb(245,188,27)" fg:x="2910" fg:w="37"/><text x="53.9698%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (37 samples, 0.68%)</title><rect x="53.7198%" y="773" width="0.6830%" height="15" fill="rgb(212,170,8)" fg:x="2910" fg:w="37"/><text x="53.9698%" y="783.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="54.3474%" y="757" width="0.0554%" height="15" fill="rgb(217,113,29)" fg:x="2944" fg:w="3"/><text x="54.5974%" y="767.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.06%)</title><rect x="54.3474%" y="741" width="0.0554%" height="15" fill="rgb(237,30,3)" fg:x="2944" fg:w="3"/><text x="54.5974%" y="751.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.06%)</title><rect x="54.3474%" y="725" width="0.0554%" height="15" fill="rgb(227,19,28)" fg:x="2944" fg:w="3"/><text x="54.5974%" y="735.50"></text></g><g><title>HashWriter::write (3 samples, 0.06%)</title><rect x="54.3474%" y="709" width="0.0554%" height="15" fill="rgb(239,172,45)" fg:x="2944" fg:w="3"/><text x="54.5974%" y="719.50"></text></g><g><title>CSHA256::Write (3 samples, 0.06%)</title><rect x="54.3474%" y="693" width="0.0554%" height="15" fill="rgb(254,55,39)" fg:x="2944" fg:w="3"/><text x="54.5974%" y="703.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="54.3843%" y="677" width="0.0185%" height="15" fill="rgb(249,208,12)" fg:x="2946" fg:w="1"/><text x="54.6343%" y="687.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="54.4028%" y="757" width="0.0185%" height="15" fill="rgb(240,52,13)" fg:x="2947" fg:w="1"/><text x="54.6528%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="54.4028%" y="741" width="0.0185%" height="15" fill="rgb(252,149,13)" fg:x="2947" fg:w="1"/><text x="54.6528%" y="751.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="54.4028%" y="725" width="0.0185%" height="15" fill="rgb(232,81,48)" fg:x="2947" fg:w="1"/><text x="54.6528%" y="735.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="54.4028%" y="709" width="0.0185%" height="15" fill="rgb(222,144,2)" fg:x="2947" fg:w="1"/><text x="54.6528%" y="719.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="54.4028%" y="693" width="0.0185%" height="15" fill="rgb(216,81,32)" fg:x="2947" fg:w="1"/><text x="54.6528%" y="703.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.4213%" y="741" width="0.0185%" height="15" fill="rgb(244,78,51)" fg:x="2948" fg:w="1"/><text x="54.6713%" y="751.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.4213%" y="725" width="0.0185%" height="15" fill="rgb(217,66,21)" fg:x="2948" fg:w="1"/><text x="54.6713%" y="735.50"></text></g><g><title>ShiftMessageA (3 samples, 0.06%)</title><rect x="54.4397%" y="725" width="0.0554%" height="15" fill="rgb(247,101,42)" fg:x="2949" fg:w="3"/><text x="54.6897%" y="735.50"></text></g><g><title>_mm_sha256msg1_epu32 (3 samples, 0.06%)</title><rect x="54.4397%" y="709" width="0.0554%" height="15" fill="rgb(227,81,39)" fg:x="2949" fg:w="3"/><text x="54.6897%" y="719.50"></text></g><g><title>ShiftMessageB (5 samples, 0.09%)</title><rect x="54.4397%" y="741" width="0.0923%" height="15" fill="rgb(220,223,44)" fg:x="2949" fg:w="5"/><text x="54.6897%" y="751.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="54.4951%" y="725" width="0.0369%" height="15" fill="rgb(205,218,2)" fg:x="2952" fg:w="2"/><text x="54.7451%" y="735.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="54.4951%" y="709" width="0.0369%" height="15" fill="rgb(212,207,28)" fg:x="2952" fg:w="2"/><text x="54.7451%" y="719.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (101 samples, 1.86%)</title><rect x="52.6860%" y="853" width="1.8645%" height="15" fill="rgb(224,12,41)" fg:x="2854" fg:w="101"/><text x="52.9360%" y="863.50">v..</text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (8 samples, 0.15%)</title><rect x="54.4028%" y="837" width="0.1477%" height="15" fill="rgb(216,118,12)" fg:x="2947" fg:w="8"/><text x="54.6528%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.15%)</title><rect x="54.4028%" y="821" width="0.1477%" height="15" fill="rgb(252,97,46)" fg:x="2947" fg:w="8"/><text x="54.6528%" y="831.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.15%)</title><rect x="54.4028%" y="805" width="0.1477%" height="15" fill="rgb(244,206,19)" fg:x="2947" fg:w="8"/><text x="54.6528%" y="815.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (8 samples, 0.15%)</title><rect x="54.4028%" y="789" width="0.1477%" height="15" fill="rgb(231,84,31)" fg:x="2947" fg:w="8"/><text x="54.6528%" y="799.50"></text></g><g><title>HashWriter::write (8 samples, 0.15%)</title><rect x="54.4028%" y="773" width="0.1477%" height="15" fill="rgb(244,133,0)" fg:x="2947" fg:w="8"/><text x="54.6528%" y="783.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.13%)</title><rect x="54.4213%" y="757" width="0.1292%" height="15" fill="rgb(223,15,50)" fg:x="2948" fg:w="7"/><text x="54.6713%" y="767.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.5320%" y="741" width="0.0185%" height="15" fill="rgb(250,118,49)" fg:x="2954" fg:w="1"/><text x="54.7820%" y="751.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (110 samples, 2.03%)</title><rect x="52.5383%" y="933" width="2.0306%" height="15" fill="rgb(248,25,38)" fg:x="2846" fg:w="110"/><text x="52.7883%" y="943.50">H..</text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (110 samples, 2.03%)</title><rect x="52.5383%" y="917" width="2.0306%" height="15" fill="rgb(215,70,14)" fg:x="2846" fg:w="110"/><text x="52.7883%" y="927.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (110 samples, 2.03%)</title><rect x="52.5383%" y="901" width="2.0306%" height="15" fill="rgb(215,28,15)" fg:x="2846" fg:w="110"/><text x="52.7883%" y="911.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (110 samples, 2.03%)</title><rect x="52.5383%" y="885" width="2.0306%" height="15" fill="rgb(243,6,28)" fg:x="2846" fg:w="110"/><text x="52.7883%" y="895.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (110 samples, 2.03%)</title><rect x="52.5383%" y="869" width="2.0306%" height="15" fill="rgb(222,130,1)" fg:x="2846" fg:w="110"/><text x="52.7883%" y="879.50">v..</text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5505%" y="853" width="0.0185%" height="15" fill="rgb(236,166,44)" fg:x="2955" fg:w="1"/><text x="54.8005%" y="863.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="54.5689%" y="885" width="0.0185%" height="15" fill="rgb(221,108,14)" fg:x="2956" fg:w="1"/><text x="54.8189%" y="895.50"></text></g><g><title>CSHA256::Write (5 samples, 0.09%)</title><rect x="54.5874%" y="885" width="0.0923%" height="15" fill="rgb(252,3,45)" fg:x="2957" fg:w="5"/><text x="54.8374%" y="895.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="54.6797%" y="885" width="0.0185%" height="15" fill="rgb(237,68,30)" fg:x="2962" fg:w="1"/><text x="54.9297%" y="895.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="54.6982%" y="885" width="0.0185%" height="15" fill="rgb(211,79,22)" fg:x="2963" fg:w="1"/><text x="54.9482%" y="895.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.6982%" y="869" width="0.0185%" height="15" fill="rgb(252,185,21)" fg:x="2963" fg:w="1"/><text x="54.9482%" y="879.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.6982%" y="853" width="0.0185%" height="15" fill="rgb(225,189,26)" fg:x="2963" fg:w="1"/><text x="54.9482%" y="863.50"></text></g><g><title>CSHA256::Write (10 samples, 0.18%)</title><rect x="54.5689%" y="901" width="0.1846%" height="15" fill="rgb(241,30,40)" fg:x="2956" fg:w="10"/><text x="54.8189%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="54.7166%" y="885" width="0.0369%" height="15" fill="rgb(235,215,44)" fg:x="2964" fg:w="2"/><text x="54.9666%" y="895.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="54.7351%" y="869" width="0.0185%" height="15" fill="rgb(205,8,29)" fg:x="2965" fg:w="1"/><text x="54.9851%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7351%" y="853" width="0.0185%" height="15" fill="rgb(241,137,42)" fg:x="2965" fg:w="1"/><text x="54.9851%" y="863.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="54.7720%" y="869" width="0.0369%" height="15" fill="rgb(237,155,2)" fg:x="2967" fg:w="2"/><text x="55.0220%" y="879.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.8089%" y="869" width="0.0185%" height="15" fill="rgb(245,29,42)" fg:x="2969" fg:w="1"/><text x="55.0589%" y="879.50"></text></g><g><title>QuadRound (4 samples, 0.07%)</title><rect x="54.7720%" y="885" width="0.0738%" height="15" fill="rgb(234,101,35)" fg:x="2967" fg:w="4"/><text x="55.0220%" y="895.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="54.8274%" y="869" width="0.0185%" height="15" fill="rgb(228,64,37)" fg:x="2970" fg:w="1"/><text x="55.0774%" y="879.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="54.8459%" y="885" width="0.0185%" height="15" fill="rgb(217,214,36)" fg:x="2971" fg:w="1"/><text x="55.0959%" y="895.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="54.8459%" y="869" width="0.0185%" height="15" fill="rgb(243,70,3)" fg:x="2971" fg:w="1"/><text x="55.0959%" y="879.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="54.8643%" y="869" width="0.0369%" height="15" fill="rgb(253,158,52)" fg:x="2972" fg:w="2"/><text x="55.1143%" y="879.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="54.8643%" y="853" width="0.0369%" height="15" fill="rgb(234,111,54)" fg:x="2972" fg:w="2"/><text x="55.1143%" y="863.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="54.9012%" y="853" width="0.0369%" height="15" fill="rgb(217,70,32)" fg:x="2974" fg:w="2"/><text x="55.1512%" y="863.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="54.9382%" y="853" width="0.0185%" height="15" fill="rgb(234,18,33)" fg:x="2976" fg:w="1"/><text x="55.1882%" y="863.50"></text></g><g><title>ShiftMessageB (8 samples, 0.15%)</title><rect x="54.8643%" y="885" width="0.1477%" height="15" fill="rgb(234,12,49)" fg:x="2972" fg:w="8"/><text x="55.1143%" y="895.50"></text></g><g><title>ShiftMessageC (6 samples, 0.11%)</title><rect x="54.9012%" y="869" width="0.1108%" height="15" fill="rgb(236,10,21)" fg:x="2974" fg:w="6"/><text x="55.1512%" y="879.50"></text></g><g><title>_mm_sha256msg2_epu32 (3 samples, 0.06%)</title><rect x="54.9566%" y="853" width="0.0554%" height="15" fill="rgb(248,182,45)" fg:x="2977" fg:w="3"/><text x="55.2066%" y="863.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.0120%" y="869" width="0.0185%" height="15" fill="rgb(217,95,36)" fg:x="2980" fg:w="1"/><text x="55.2620%" y="879.50"></text></g><g><title>CSHA256::Finalize (26 samples, 0.48%)</title><rect x="54.5689%" y="917" width="0.4800%" height="15" fill="rgb(212,110,31)" fg:x="2956" fg:w="26"/><text x="54.8189%" y="927.50"></text></g><g><title>sha256_x86_shani::Transform (16 samples, 0.30%)</title><rect x="54.7536%" y="901" width="0.2954%" height="15" fill="rgb(206,32,53)" fg:x="2966" fg:w="16"/><text x="55.0036%" y="911.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="55.0120%" y="885" width="0.0369%" height="15" fill="rgb(246,141,37)" fg:x="2980" fg:w="2"/><text x="55.2620%" y="895.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="55.0305%" y="869" width="0.0185%" height="15" fill="rgb(219,16,7)" fg:x="2981" fg:w="1"/><text x="55.2805%" y="879.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="55.0489%" y="901" width="0.0185%" height="15" fill="rgb(230,205,45)" fg:x="2982" fg:w="1"/><text x="55.2989%" y="911.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.0489%" y="885" width="0.0185%" height="15" fill="rgb(231,43,49)" fg:x="2982" fg:w="1"/><text x="55.2989%" y="895.50"></text></g><g><title>CTransaction::ComputeWitnessHash (138 samples, 2.55%)</title><rect x="52.5383%" y="965" width="2.5475%" height="15" fill="rgb(212,106,34)" fg:x="2846" fg:w="138"/><text x="52.7883%" y="975.50">CT..</text></g><g><title>CTransaction::ComputeWitnessHash (138 samples, 2.55%)</title><rect x="52.5383%" y="949" width="2.5475%" height="15" fill="rgb(206,83,17)" fg:x="2846" fg:w="138"/><text x="52.7883%" y="959.50">CT..</text></g><g><title>HashWriter::GetHash (28 samples, 0.52%)</title><rect x="54.5689%" y="933" width="0.5169%" height="15" fill="rgb(244,154,49)" fg:x="2956" fg:w="28"/><text x="54.8189%" y="943.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="55.0489%" y="917" width="0.0369%" height="15" fill="rgb(244,149,49)" fg:x="2982" fg:w="2"/><text x="55.2989%" y="927.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="55.0674%" y="901" width="0.0185%" height="15" fill="rgb(227,134,18)" fg:x="2983" fg:w="1"/><text x="55.3174%" y="911.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.0674%" y="885" width="0.0185%" height="15" fill="rgb(237,116,36)" fg:x="2983" fg:w="1"/><text x="55.3174%" y="895.50"></text></g><g><title>CTransaction::CTransaction (228 samples, 4.21%)</title><rect x="50.8953%" y="981" width="4.2090%" height="15" fill="rgb(205,129,40)" fg:x="2757" fg:w="228"/><text x="51.1453%" y="991.50">CTran..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="965" width="0.0185%" height="15" fill="rgb(236,178,4)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="975.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="949" width="0.0185%" height="15" fill="rgb(251,76,53)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="959.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="933" width="0.0185%" height="15" fill="rgb(242,92,40)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="943.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="917" width="0.0185%" height="15" fill="rgb(209,45,30)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="927.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="901" width="0.0185%" height="15" fill="rgb(218,157,36)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="911.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="885" width="0.0185%" height="15" fill="rgb(222,186,16)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="895.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="869" width="0.0185%" height="15" fill="rgb(254,72,35)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="879.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="853" width="0.0185%" height="15" fill="rgb(224,25,35)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="863.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="837" width="0.0185%" height="15" fill="rgb(206,135,52)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="847.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="821" width="0.0185%" height="15" fill="rgb(229,174,47)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="831.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="805" width="0.0185%" height="15" fill="rgb(242,184,21)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="815.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.02%)</title><rect x="55.0858%" y="789" width="0.0185%" height="15" fill="rgb(213,22,45)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="799.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.0858%" y="773" width="0.0185%" height="15" fill="rgb(237,81,54)" fg:x="2984" fg:w="1"/><text x="55.3358%" y="783.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="55.1043%" y="981" width="0.0185%" height="15" fill="rgb(248,177,18)" fg:x="2985" fg:w="1"/><text x="55.3543%" y="991.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (409 samples, 7.55%)</title><rect x="47.6094%" y="1045" width="7.5503%" height="15" fill="rgb(254,31,16)" fg:x="2579" fg:w="409"/><text x="47.8594%" y="1055.50">std::_Sp_c..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (409 samples, 7.55%)</title><rect x="47.6094%" y="1029" width="7.5503%" height="15" fill="rgb(235,20,31)" fg:x="2579" fg:w="409"/><text x="47.8594%" y="1039.50">void std::..</text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (409 samples, 7.55%)</title><rect x="47.6094%" y="1013" width="7.5503%" height="15" fill="rgb(240,56,43)" fg:x="2579" fg:w="409"/><text x="47.8594%" y="1023.50">void std::..</text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (409 samples, 7.55%)</title><rect x="47.6094%" y="997" width="7.5503%" height="15" fill="rgb(237,197,51)" fg:x="2579" fg:w="409"/><text x="47.8594%" y="1007.50">CTransacti..</text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="55.1228%" y="981" width="0.0369%" height="15" fill="rgb(241,162,44)" fg:x="2986" fg:w="2"/><text x="55.3728%" y="991.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (410 samples, 7.57%)</title><rect x="47.6094%" y="1125" width="7.5688%" height="15" fill="rgb(224,23,20)" fg:x="2579" fg:w="410"/><text x="47.8594%" y="1135.50">void Unser..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (410 samples, 7.57%)</title><rect x="47.6094%" y="1109" width="7.5688%" height="15" fill="rgb(250,109,34)" fg:x="2579" fg:w="410"/><text x="47.8594%" y="1119.50">std::share..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (410 samples, 7.57%)</title><rect x="47.6094%" y="1093" width="7.5688%" height="15" fill="rgb(214,175,50)" fg:x="2579" fg:w="410"/><text x="47.8594%" y="1103.50">std::share..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (410 samples, 7.57%)</title><rect x="47.6094%" y="1077" width="7.5688%" height="15" fill="rgb(213,182,5)" fg:x="2579" fg:w="410"/><text x="47.8594%" y="1087.50">std::__sha..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (410 samples, 7.57%)</title><rect x="47.6094%" y="1061" width="7.5688%" height="15" fill="rgb(209,199,19)" fg:x="2579" fg:w="410"/><text x="47.8594%" y="1071.50">std::__sha..</text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.1597%" y="1045" width="0.0185%" height="15" fill="rgb(236,224,42)" fg:x="2988" fg:w="1"/><text x="55.4097%" y="1055.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="55.1597%" y="1029" width="0.0185%" height="15" fill="rgb(246,226,29)" fg:x="2988" fg:w="1"/><text x="55.4097%" y="1039.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="55.1597%" y="1013" width="0.0185%" height="15" fill="rgb(227,223,11)" fg:x="2988" fg:w="1"/><text x="55.4097%" y="1023.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="55.1597%" y="997" width="0.0185%" height="15" fill="rgb(219,7,51)" fg:x="2988" fg:w="1"/><text x="55.4097%" y="1007.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="55.1597%" y="981" width="0.0185%" height="15" fill="rgb(245,167,10)" fg:x="2988" fg:w="1"/><text x="55.4097%" y="991.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="55.1597%" y="965" width="0.0185%" height="15" fill="rgb(237,224,16)" fg:x="2988" fg:w="1"/><text x="55.4097%" y="975.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="55.1597%" y="949" width="0.0185%" height="15" fill="rgb(226,132,13)" fg:x="2988" fg:w="1"/><text x="55.4097%" y="959.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (416 samples, 7.68%)</title><rect x="47.5171%" y="1349" width="7.6795%" height="15" fill="rgb(214,140,3)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1359.50">DataStream&amp;..</text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1333" width="7.6795%" height="15" fill="rgb(221,177,4)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1343.50">void Unseri..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1317" width="7.6795%" height="15" fill="rgb(238,139,3)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1327.50">void Params..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1301" width="7.6795%" height="15" fill="rgb(216,17,39)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1311.50">void Unseri..</text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1285" width="7.6795%" height="15" fill="rgb(238,120,9)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1295.50">void CBlock..</text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1269" width="7.6795%" height="15" fill="rgb(244,92,53)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1279.50">void CBlock..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1253" width="7.6795%" height="15" fill="rgb(224,148,33)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1263.50">void CBlock..</text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1237" width="7.6795%" height="15" fill="rgb(243,6,36)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1247.50">void Action..</text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1221" width="7.6795%" height="15" fill="rgb(230,102,11)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1231.50">void Unseri..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1205" width="7.6795%" height="15" fill="rgb(234,148,36)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1215.50">void Unseri..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1189" width="7.6795%" height="15" fill="rgb(251,153,25)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1199.50">void Unseri..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1173" width="7.6795%" height="15" fill="rgb(215,129,8)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1183.50">void Wrappe..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1157" width="7.6795%" height="15" fill="rgb(224,128,35)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1167.50">void Vector..</text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (416 samples, 7.68%)</title><rect x="47.5171%" y="1141" width="7.6795%" height="15" fill="rgb(237,56,52)" fg:x="2574" fg:w="416"/><text x="47.7671%" y="1151.50">void Defaul..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="1125" width="0.0185%" height="15" fill="rgb(234,213,19)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="1135.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="1109" width="0.0185%" height="15" fill="rgb(252,82,23)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="1119.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="1093" width="0.0185%" height="15" fill="rgb(254,201,21)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="1103.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="1077" width="0.0185%" height="15" fill="rgb(250,186,11)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="1087.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="1061" width="0.0185%" height="15" fill="rgb(211,174,5)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="1071.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="1045" width="0.0185%" height="15" fill="rgb(214,121,10)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="1055.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="1029" width="0.0185%" height="15" fill="rgb(241,66,2)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="1039.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="1013" width="0.0185%" height="15" fill="rgb(220,167,19)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="1023.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="997" width="0.0185%" height="15" fill="rgb(231,54,50)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="1007.50"></text></g><g><title>unsigned long ser_readdata64&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.1781%" y="981" width="0.0185%" height="15" fill="rgb(239,217,53)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="991.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="55.1781%" y="965" width="0.0185%" height="15" fill="rgb(248,8,0)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="975.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="55.1781%" y="949" width="0.0185%" height="15" fill="rgb(229,118,37)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="959.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.1781%" y="933" width="0.0185%" height="15" fill="rgb(253,223,43)" fg:x="2989" fg:w="1"/><text x="55.4281%" y="943.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.06%)</title><rect x="55.1966%" y="1237" width="0.0554%" height="15" fill="rgb(211,77,36)" fg:x="2990" fg:w="3"/><text x="55.4466%" y="1247.50"></text></g><g><title>QuadRound (6 samples, 0.11%)</title><rect x="55.1966%" y="1253" width="0.1108%" height="15" fill="rgb(219,3,53)" fg:x="2990" fg:w="6"/><text x="55.4466%" y="1263.50"></text></g><g><title>_mm_sha256rnds2_epu32 (3 samples, 0.06%)</title><rect x="55.2520%" y="1237" width="0.0554%" height="15" fill="rgb(244,45,42)" fg:x="2993" fg:w="3"/><text x="55.5020%" y="1247.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="55.3074%" y="1237" width="0.0185%" height="15" fill="rgb(225,95,27)" fg:x="2996" fg:w="1"/><text x="55.5574%" y="1247.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="55.3074%" y="1221" width="0.0185%" height="15" fill="rgb(207,74,8)" fg:x="2996" fg:w="1"/><text x="55.5574%" y="1231.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="55.3258%" y="1221" width="0.0369%" height="15" fill="rgb(243,63,36)" fg:x="2997" fg:w="2"/><text x="55.5758%" y="1231.50"></text></g><g><title>_mm_alignr_epi8 (3 samples, 0.06%)</title><rect x="55.3627%" y="1221" width="0.0554%" height="15" fill="rgb(211,180,12)" fg:x="2999" fg:w="3"/><text x="55.6127%" y="1231.50"></text></g><g><title>SHA256D64 (17 samples, 0.31%)</title><rect x="55.1966%" y="1285" width="0.3138%" height="15" fill="rgb(254,166,49)" fg:x="2990" fg:w="17"/><text x="55.4466%" y="1295.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (17 samples, 0.31%)</title><rect x="55.1966%" y="1269" width="0.3138%" height="15" fill="rgb(205,19,0)" fg:x="2990" fg:w="17"/><text x="55.4466%" y="1279.50"></text></g><g><title>ShiftMessageB (11 samples, 0.20%)</title><rect x="55.3074%" y="1253" width="0.2031%" height="15" fill="rgb(224,172,32)" fg:x="2996" fg:w="11"/><text x="55.5574%" y="1263.50"></text></g><g><title>ShiftMessageC (10 samples, 0.18%)</title><rect x="55.3258%" y="1237" width="0.1846%" height="15" fill="rgb(254,136,30)" fg:x="2997" fg:w="10"/><text x="55.5758%" y="1247.50"></text></g><g><title>_mm_sha256msg2_epu32 (5 samples, 0.09%)</title><rect x="55.4181%" y="1221" width="0.0923%" height="15" fill="rgb(246,19,35)" fg:x="3002" fg:w="5"/><text x="55.6681%" y="1231.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="55.5104%" y="1285" width="0.0185%" height="15" fill="rgb(219,24,36)" fg:x="3007" fg:w="1"/><text x="55.7604%" y="1295.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="55.5104%" y="1269" width="0.0185%" height="15" fill="rgb(251,55,1)" fg:x="3007" fg:w="1"/><text x="55.7604%" y="1279.50"></text></g><g><title>CheckMerkleRoot (19 samples, 0.35%)</title><rect x="55.1966%" y="1333" width="0.3507%" height="15" fill="rgb(218,117,39)" fg:x="2990" fg:w="19"/><text x="55.4466%" y="1343.50"></text></g><g><title>BlockMerkleRoot (19 samples, 0.35%)</title><rect x="55.1966%" y="1317" width="0.3507%" height="15" fill="rgb(248,169,11)" fg:x="2990" fg:w="19"/><text x="55.4466%" y="1327.50"></text></g><g><title>ComputeMerkleRoot (19 samples, 0.35%)</title><rect x="55.1966%" y="1301" width="0.3507%" height="15" fill="rgb(244,40,44)" fg:x="2990" fg:w="19"/><text x="55.4466%" y="1311.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="55.5289%" y="1285" width="0.0185%" height="15" fill="rgb(234,62,37)" fg:x="3008" fg:w="1"/><text x="55.7789%" y="1295.50"></text></g><g><title>void std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_realloc_insert&lt;uint256 const&amp;&gt; (1 samples, 0.02%)</title><rect x="55.5289%" y="1269" width="0.0185%" height="15" fill="rgb(207,117,42)" fg:x="3008" fg:w="1"/><text x="55.7789%" y="1279.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_S_relocate (1 samples, 0.02%)</title><rect x="55.5289%" y="1253" width="0.0185%" height="15" fill="rgb(213,43,2)" fg:x="3008" fg:w="1"/><text x="55.7789%" y="1263.50"></text></g><g><title>uint256* std::__relocate_a&lt;uint256*, uint256*, std::allocator&lt;uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="55.5289%" y="1237" width="0.0185%" height="15" fill="rgb(244,202,51)" fg:x="3008" fg:w="1"/><text x="55.7789%" y="1247.50"></text></g><g><title>uint256* std::__relocate_a_1&lt;uint256*, uint256*, std::allocator&lt;uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="55.5289%" y="1221" width="0.0185%" height="15" fill="rgb(253,174,46)" fg:x="3008" fg:w="1"/><text x="55.7789%" y="1231.50"></text></g><g><title>void std::__relocate_object_a&lt;uint256, uint256, std::allocator&lt;uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="55.5289%" y="1205" width="0.0185%" height="15" fill="rgb(251,23,1)" fg:x="3008" fg:w="1"/><text x="55.7789%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;uint256&gt; &gt;::construct&lt;uint256, uint256&gt; (1 samples, 0.02%)</title><rect x="55.5289%" y="1189" width="0.0185%" height="15" fill="rgb(253,26,1)" fg:x="3008" fg:w="1"/><text x="55.7789%" y="1199.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="55.5289%" y="1173" width="0.0185%" height="15" fill="rgb(216,89,31)" fg:x="3008" fg:w="1"/><text x="55.7789%" y="1183.50"></text></g><g><title>SHA256D64 (1 samples, 0.02%)</title><rect x="55.5843%" y="1269" width="0.0185%" height="15" fill="rgb(209,109,5)" fg:x="3011" fg:w="1"/><text x="55.8343%" y="1279.50"></text></g><g><title>Load (1 samples, 0.02%)</title><rect x="55.6027%" y="1253" width="0.0185%" height="15" fill="rgb(229,63,13)" fg:x="3012" fg:w="1"/><text x="55.8527%" y="1263.50"></text></g><g><title>_mm_shuffle_epi8 (1 samples, 0.02%)</title><rect x="55.6027%" y="1237" width="0.0185%" height="15" fill="rgb(238,137,54)" fg:x="3012" fg:w="1"/><text x="55.8527%" y="1247.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.06%)</title><rect x="55.6212%" y="1237" width="0.0554%" height="15" fill="rgb(228,1,9)" fg:x="3013" fg:w="3"/><text x="55.8712%" y="1247.50"></text></g><g><title>_mm_sha256rnds2_epu32 (8 samples, 0.15%)</title><rect x="55.6766%" y="1237" width="0.1477%" height="15" fill="rgb(249,120,48)" fg:x="3016" fg:w="8"/><text x="55.9266%" y="1247.50"></text></g><g><title>QuadRound (12 samples, 0.22%)</title><rect x="55.6212%" y="1253" width="0.2215%" height="15" fill="rgb(209,72,36)" fg:x="3013" fg:w="12"/><text x="55.8712%" y="1263.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="55.8243%" y="1237" width="0.0185%" height="15" fill="rgb(247,98,49)" fg:x="3024" fg:w="1"/><text x="56.0743%" y="1247.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="55.8427%" y="1253" width="0.0185%" height="15" fill="rgb(233,75,36)" fg:x="3025" fg:w="1"/><text x="56.0927%" y="1263.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="55.8427%" y="1237" width="0.0185%" height="15" fill="rgb(225,14,24)" fg:x="3025" fg:w="1"/><text x="56.0927%" y="1247.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="55.8612%" y="1237" width="0.0369%" height="15" fill="rgb(237,193,20)" fg:x="3026" fg:w="2"/><text x="56.1112%" y="1247.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="55.8612%" y="1221" width="0.0369%" height="15" fill="rgb(239,122,19)" fg:x="3026" fg:w="2"/><text x="56.1112%" y="1231.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="55.8981%" y="1221" width="0.0369%" height="15" fill="rgb(231,220,10)" fg:x="3028" fg:w="2"/><text x="56.1481%" y="1231.50"></text></g><g><title>_mm_alignr_epi8 (2 samples, 0.04%)</title><rect x="55.9350%" y="1221" width="0.0369%" height="15" fill="rgb(220,66,15)" fg:x="3030" fg:w="2"/><text x="56.1850%" y="1231.50"></text></g><g><title>ShiftMessageB (11 samples, 0.20%)</title><rect x="55.8612%" y="1253" width="0.2031%" height="15" fill="rgb(215,171,52)" fg:x="3026" fg:w="11"/><text x="56.1112%" y="1263.50"></text></g><g><title>ShiftMessageC (9 samples, 0.17%)</title><rect x="55.8981%" y="1237" width="0.1661%" height="15" fill="rgb(241,169,50)" fg:x="3028" fg:w="9"/><text x="56.1481%" y="1247.50"></text></g><g><title>_mm_sha256msg2_epu32 (5 samples, 0.09%)</title><rect x="55.9719%" y="1221" width="0.0923%" height="15" fill="rgb(236,189,0)" fg:x="3032" fg:w="5"/><text x="56.2219%" y="1231.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="56.0642%" y="1253" width="0.0185%" height="15" fill="rgb(217,147,20)" fg:x="3037" fg:w="1"/><text x="56.3142%" y="1263.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="56.0642%" y="1237" width="0.0185%" height="15" fill="rgb(206,188,39)" fg:x="3037" fg:w="1"/><text x="56.3142%" y="1247.50"></text></g><g><title>Unshuffle (1 samples, 0.02%)</title><rect x="56.0827%" y="1253" width="0.0185%" height="15" fill="rgb(227,118,25)" fg:x="3038" fg:w="1"/><text x="56.3327%" y="1263.50"></text></g><g><title>_mm_blend_epi16 (1 samples, 0.02%)</title><rect x="56.0827%" y="1237" width="0.0185%" height="15" fill="rgb(248,171,40)" fg:x="3038" fg:w="1"/><text x="56.3327%" y="1247.50"></text></g><g><title>IsBlockMutated (50 samples, 0.92%)</title><rect x="55.1966%" y="1349" width="0.9230%" height="15" fill="rgb(251,90,54)" fg:x="2990" fg:w="50"/><text x="55.4466%" y="1359.50"></text></g><g><title>CheckWitnessMalleation (31 samples, 0.57%)</title><rect x="55.5474%" y="1333" width="0.5723%" height="15" fill="rgb(234,11,46)" fg:x="3009" fg:w="31"/><text x="55.7974%" y="1343.50"></text></g><g><title>BlockWitnessMerkleRoot (31 samples, 0.57%)</title><rect x="55.5474%" y="1317" width="0.5723%" height="15" fill="rgb(229,134,13)" fg:x="3009" fg:w="31"/><text x="55.7974%" y="1327.50"></text></g><g><title>ComputeMerkleRoot (29 samples, 0.54%)</title><rect x="55.5843%" y="1301" width="0.5354%" height="15" fill="rgb(223,129,3)" fg:x="3011" fg:w="29"/><text x="55.8343%" y="1311.50"></text></g><g><title>SHA256D64 (29 samples, 0.54%)</title><rect x="55.5843%" y="1285" width="0.5354%" height="15" fill="rgb(221,124,13)" fg:x="3011" fg:w="29"/><text x="55.8343%" y="1295.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (28 samples, 0.52%)</title><rect x="55.6027%" y="1269" width="0.5169%" height="15" fill="rgb(234,3,18)" fg:x="3012" fg:w="28"/><text x="55.8527%" y="1279.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="56.1012%" y="1253" width="0.0185%" height="15" fill="rgb(249,199,20)" fg:x="3039" fg:w="1"/><text x="56.3512%" y="1263.50"></text></g><g><title>IsBlockRequested (1 samples, 0.02%)</title><rect x="56.1196%" y="1349" width="0.0185%" height="15" fill="rgb(224,134,6)" fg:x="3040" fg:w="1"/><text x="56.3696%" y="1359.50"></text></g><g><title>CBlockIndex::IsValid (1 samples, 0.02%)</title><rect x="56.1196%" y="1333" width="0.0185%" height="15" fill="rgb(254,83,26)" fg:x="3040" fg:w="1"/><text x="56.3696%" y="1343.50"></text></g><g><title>ProcessHeadersMessage (1 samples, 0.02%)</title><rect x="56.1381%" y="1349" width="0.0185%" height="15" fill="rgb(217,88,9)" fg:x="3041" fg:w="1"/><text x="56.3881%" y="1359.50"></text></g><g><title>CalculateClaimedHeadersWork (1 samples, 0.02%)</title><rect x="56.1381%" y="1333" width="0.0185%" height="15" fill="rgb(225,73,2)" fg:x="3041" fg:w="1"/><text x="56.3881%" y="1343.50"></text></g><g><title>GetBlockProof (1 samples, 0.02%)</title><rect x="56.1381%" y="1317" width="0.0185%" height="15" fill="rgb(226,44,39)" fg:x="3041" fg:w="1"/><text x="56.3881%" y="1327.50"></text></g><g><title>operator/ (1 samples, 0.02%)</title><rect x="56.1381%" y="1301" width="0.0185%" height="15" fill="rgb(228,53,17)" fg:x="3041" fg:w="1"/><text x="56.3881%" y="1311.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.02%)</title><rect x="56.1381%" y="1285" width="0.0185%" height="15" fill="rgb(212,27,27)" fg:x="3041" fg:w="1"/><text x="56.3881%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (1 samples, 0.02%)</title><rect x="56.1381%" y="1269" width="0.0185%" height="15" fill="rgb(241,50,6)" fg:x="3041" fg:w="1"/><text x="56.3881%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (1 samples, 0.02%)</title><rect x="56.1381%" y="1253" width="0.0185%" height="15" fill="rgb(225,28,51)" fg:x="3041" fg:w="1"/><text x="56.3881%" y="1263.50"></text></g><g><title>State (1 samples, 0.02%)</title><rect x="56.1565%" y="1349" width="0.0185%" height="15" fill="rgb(215,33,16)" fg:x="3042" fg:w="1"/><text x="56.4065%" y="1359.50"></text></g><g><title>State (1 samples, 0.02%)</title><rect x="56.1565%" y="1333" width="0.0185%" height="15" fill="rgb(243,40,39)" fg:x="3042" fg:w="1"/><text x="56.4065%" y="1343.50"></text></g><g><title>find (1 samples, 0.02%)</title><rect x="56.1565%" y="1317" width="0.0185%" height="15" fill="rgb(225,11,42)" fg:x="3042" fg:w="1"/><text x="56.4065%" y="1327.50"></text></g><g><title>find (1 samples, 0.02%)</title><rect x="56.1565%" y="1301" width="0.0185%" height="15" fill="rgb(241,220,38)" fg:x="3042" fg:w="1"/><text x="56.4065%" y="1311.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (4 samples, 0.07%)</title><rect x="56.1750%" y="1349" width="0.0738%" height="15" fill="rgb(244,52,35)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1359.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::Enter (4 samples, 0.07%)</title><rect x="56.1750%" y="1333" width="0.0738%" height="15" fill="rgb(246,42,46)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1343.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (4 samples, 0.07%)</title><rect x="56.1750%" y="1317" width="0.0738%" height="15" fill="rgb(205,184,13)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1327.50"></text></g><g><title>std::mutex::lock (4 samples, 0.07%)</title><rect x="56.1750%" y="1301" width="0.0738%" height="15" fill="rgb(209,48,36)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1311.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (4 samples, 0.07%)</title><rect x="56.1750%" y="1285" width="0.0738%" height="15" fill="rgb(244,34,51)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1295.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="56.1750%" y="1269" width="0.0738%" height="15" fill="rgb(221,107,33)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1279.50"></text></g><g><title>__GI___lll_lock_wait (4 samples, 0.07%)</title><rect x="56.1750%" y="1253" width="0.0738%" height="15" fill="rgb(224,203,12)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1237" width="0.0738%" height="15" fill="rgb(230,215,18)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1221" width="0.0738%" height="15" fill="rgb(206,185,35)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1205" width="0.0738%" height="15" fill="rgb(228,140,34)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1189" width="0.0738%" height="15" fill="rgb(208,93,13)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1173" width="0.0738%" height="15" fill="rgb(221,193,39)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1157" width="0.0738%" height="15" fill="rgb(241,132,34)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1141" width="0.0738%" height="15" fill="rgb(221,141,10)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1125" width="0.0738%" height="15" fill="rgb(226,90,31)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1109" width="0.0738%" height="15" fill="rgb(243,75,5)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1093" width="0.0738%" height="15" fill="rgb(227,156,21)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1077" width="0.0738%" height="15" fill="rgb(250,195,8)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1061" width="0.0738%" height="15" fill="rgb(220,134,5)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="56.1750%" y="1045" width="0.0738%" height="15" fill="rgb(246,106,34)" fg:x="3043" fg:w="4"/><text x="56.4250%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="56.1935%" y="1029" width="0.0554%" height="15" fill="rgb(205,1,4)" fg:x="3044" fg:w="3"/><text x="56.4435%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="56.1935%" y="1013" width="0.0554%" height="15" fill="rgb(224,151,29)" fg:x="3044" fg:w="3"/><text x="56.4435%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="56.1935%" y="997" width="0.0554%" height="15" fill="rgb(251,196,0)" fg:x="3044" fg:w="3"/><text x="56.4435%" y="1007.50"></text></g><g><title>__clone (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1525" width="43.8250%" height="15" fill="rgb(212,127,0)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1535.50">__clone</text></g><g><title>start_thread (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1509" width="43.8250%" height="15" fill="rgb(236,71,53)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1519.50">start_thread</text></g><g><title>execute_native_thread_routine (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1493" width="43.8250%" height="15" fill="rgb(227,99,0)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1503.50">execute_native_thread_routine</text></g><g><title>_M_run (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1477" width="43.8250%" height="15" fill="rgb(239,89,21)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1487.50">_M_run</text></g><g><title>operator (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1461" width="43.8250%" height="15" fill="rgb(243,122,19)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1471.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1445" width="43.8250%" height="15" fill="rgb(229,192,45)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1455.50">_M_invoke&lt;0, 1, 2&gt;</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1429" width="43.8250%" height="15" fill="rgb(235,165,35)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1439.50">__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), ..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1413" width="43.8250%" height="15" fill="rgb(253,202,0)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1423.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::..</text></g><g><title>util::TraceThread (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1397" width="43.8250%" height="15" fill="rgb(235,51,20)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1407.50">util::TraceThread</text></g><g><title>std::function&lt;void ()&gt;::operator (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1381" width="43.8250%" height="15" fill="rgb(218,95,46)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1391.50">std::function&lt;void ()&gt;::operator</text></g><g><title>CConnman::ThreadMessageHandler (2,374 samples, 43.82%)</title><rect x="12.4608%" y="1365" width="43.8250%" height="15" fill="rgb(212,81,10)" fg:x="675" fg:w="2374"/><text x="12.7108%" y="1375.50">CConnman::ThreadMessageHandler</text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::~optional (2 samples, 0.04%)</title><rect x="56.2488%" y="1349" width="0.0369%" height="15" fill="rgb(240,59,0)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1359.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::~_Optional_base (2 samples, 0.04%)</title><rect x="56.2488%" y="1333" width="0.0369%" height="15" fill="rgb(212,191,42)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1343.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::~_Optional_payload (2 samples, 0.04%)</title><rect x="56.2488%" y="1317" width="0.0369%" height="15" fill="rgb(233,140,3)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1327.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="56.2488%" y="1301" width="0.0369%" height="15" fill="rgb(215,69,23)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1311.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_destroy (2 samples, 0.04%)</title><rect x="56.2488%" y="1285" width="0.0369%" height="15" fill="rgb(240,202,20)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1295.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::~pair (2 samples, 0.04%)</title><rect x="56.2488%" y="1269" width="0.0369%" height="15" fill="rgb(209,146,50)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1279.50"></text></g><g><title>CNetMessage::~CNetMessage (2 samples, 0.04%)</title><rect x="56.2488%" y="1253" width="0.0369%" height="15" fill="rgb(253,102,54)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1263.50"></text></g><g><title>DataStream::~DataStream (2 samples, 0.04%)</title><rect x="56.2488%" y="1237" width="0.0369%" height="15" fill="rgb(250,173,47)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1247.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="56.2488%" y="1221" width="0.0369%" height="15" fill="rgb(232,142,7)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (2 samples, 0.04%)</title><rect x="56.2488%" y="1205" width="0.0369%" height="15" fill="rgb(230,157,47)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (2 samples, 0.04%)</title><rect x="56.2488%" y="1189" width="0.0369%" height="15" fill="rgb(214,177,35)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (2 samples, 0.04%)</title><rect x="56.2488%" y="1173" width="0.0369%" height="15" fill="rgb(234,119,46)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1183.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (2 samples, 0.04%)</title><rect x="56.2488%" y="1157" width="0.0369%" height="15" fill="rgb(241,180,50)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1167.50"></text></g><g><title>memory_cleanse (2 samples, 0.04%)</title><rect x="56.2488%" y="1141" width="0.0369%" height="15" fill="rgb(221,54,25)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1151.50"></text></g><g><title>memory_cleanse (2 samples, 0.04%)</title><rect x="56.2488%" y="1125" width="0.0369%" height="15" fill="rgb(209,157,44)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1135.50"></text></g><g><title>__memset_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="56.2488%" y="1109" width="0.0369%" height="15" fill="rgb(246,115,41)" fg:x="3047" fg:w="2"/><text x="56.4988%" y="1119.50"></text></g><g><title>__io_vtables (1 samples, 0.02%)</title><rect x="56.2858%" y="1525" width="0.0185%" height="15" fill="rgb(229,86,1)" fg:x="3049" fg:w="1"/><text x="56.5358%" y="1535.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="56.2858%" y="1509" width="0.0185%" height="15" fill="rgb(240,108,53)" fg:x="3049" fg:w="1"/><text x="56.5358%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.06%)</title><rect x="56.3042%" y="1525" width="0.0554%" height="15" fill="rgb(227,134,2)" fg:x="3050" fg:w="3"/><text x="56.5542%" y="1535.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="56.3596%" y="1525" width="0.0369%" height="15" fill="rgb(213,129,25)" fg:x="3053" fg:w="2"/><text x="56.6096%" y="1535.50"></text></g><g><title>_int_malloc (8 samples, 0.15%)</title><rect x="56.3965%" y="1525" width="0.1477%" height="15" fill="rgb(226,35,21)" fg:x="3055" fg:w="8"/><text x="56.6465%" y="1535.50"></text></g><g><title>crc32c::ExtendSse42 (7 samples, 0.13%)</title><rect x="56.5442%" y="1525" width="0.1292%" height="15" fill="rgb(208,129,26)" fg:x="3063" fg:w="7"/><text x="56.7942%" y="1535.50"></text></g><g><title>_mm_crc32_u64 (4 samples, 0.07%)</title><rect x="56.5996%" y="1509" width="0.0738%" height="15" fill="rgb(224,83,6)" fg:x="3066" fg:w="4"/><text x="56.8496%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="56.6734%" y="1525" width="0.0369%" height="15" fill="rgb(227,52,39)" fg:x="3070" fg:w="2"/><text x="56.9234%" y="1535.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.04%)</title><rect x="56.6734%" y="1509" width="0.0369%" height="15" fill="rgb(241,30,17)" fg:x="3070" fg:w="2"/><text x="56.9234%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="56.6919%" y="1493" width="0.0185%" height="15" fill="rgb(246,186,42)" fg:x="3071" fg:w="1"/><text x="56.9419%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="56.7104%" y="1525" width="0.0185%" height="15" fill="rgb(221,169,15)" fg:x="3072" fg:w="1"/><text x="56.9604%" y="1535.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="56.7104%" y="1509" width="0.0185%" height="15" fill="rgb(235,108,21)" fg:x="3072" fg:w="1"/><text x="56.9604%" y="1519.50"></text></g><g><title>leveldb::Block::Iter::status (1 samples, 0.02%)</title><rect x="56.7104%" y="1493" width="0.0185%" height="15" fill="rgb(219,148,30)" fg:x="3072" fg:w="1"/><text x="56.9604%" y="1503.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="56.7288%" y="1525" width="0.0185%" height="15" fill="rgb(220,109,5)" fg:x="3073" fg:w="1"/><text x="56.9788%" y="1535.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="56.7473%" y="1525" width="0.0185%" height="15" fill="rgb(213,203,48)" fg:x="3074" fg:w="1"/><text x="56.9973%" y="1535.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="56.7657%" y="1525" width="0.0369%" height="15" fill="rgb(244,71,33)" fg:x="3075" fg:w="2"/><text x="57.0157%" y="1535.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="56.7842%" y="1509" width="0.0185%" height="15" fill="rgb(209,23,2)" fg:x="3076" fg:w="1"/><text x="57.0342%" y="1519.50"></text></g><g><title>leveldb::SaveValue (2 samples, 0.04%)</title><rect x="56.8027%" y="1525" width="0.0369%" height="15" fill="rgb(219,97,7)" fg:x="3077" fg:w="2"/><text x="57.0527%" y="1535.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="56.8211%" y="1509" width="0.0185%" height="15" fill="rgb(216,161,23)" fg:x="3078" fg:w="1"/><text x="57.0711%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="56.8211%" y="1493" width="0.0185%" height="15" fill="rgb(207,45,42)" fg:x="3078" fg:w="1"/><text x="57.0711%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="56.8211%" y="1477" width="0.0185%" height="15" fill="rgb(241,61,4)" fg:x="3078" fg:w="1"/><text x="57.0711%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="56.8211%" y="1461" width="0.0185%" height="15" fill="rgb(236,170,1)" fg:x="3078" fg:w="1"/><text x="57.0711%" y="1471.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="56.8396%" y="1525" width="0.0369%" height="15" fill="rgb(239,72,5)" fg:x="3079" fg:w="2"/><text x="57.0896%" y="1535.50"></text></g><g><title>malloc@plt (1 samples, 0.02%)</title><rect x="56.8765%" y="1525" width="0.0185%" height="15" fill="rgb(214,13,50)" fg:x="3081" fg:w="1"/><text x="57.1265%" y="1535.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="56.9134%" y="1061" width="0.0554%" height="15" fill="rgb(224,88,9)" fg:x="3083" fg:w="3"/><text x="57.1634%" y="1071.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="56.9134%" y="1045" width="0.0554%" height="15" fill="rgb(238,192,34)" fg:x="3083" fg:w="3"/><text x="57.1634%" y="1055.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (3 samples, 0.06%)</title><rect x="56.9134%" y="1029" width="0.0554%" height="15" fill="rgb(217,203,50)" fg:x="3083" fg:w="3"/><text x="57.1634%" y="1039.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (3 samples, 0.06%)</title><rect x="56.9134%" y="1013" width="0.0554%" height="15" fill="rgb(241,123,32)" fg:x="3083" fg:w="3"/><text x="57.1634%" y="1023.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="56.9134%" y="997" width="0.0554%" height="15" fill="rgb(248,151,39)" fg:x="3083" fg:w="3"/><text x="57.1634%" y="1007.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.06%)</title><rect x="56.9134%" y="981" width="0.0554%" height="15" fill="rgb(208,89,6)" fg:x="3083" fg:w="3"/><text x="57.1634%" y="991.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (3 samples, 0.06%)</title><rect x="56.9134%" y="965" width="0.0554%" height="15" fill="rgb(254,43,26)" fg:x="3083" fg:w="3"/><text x="57.1634%" y="975.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (3 samples, 0.06%)</title><rect x="56.9134%" y="949" width="0.0554%" height="15" fill="rgb(216,158,13)" fg:x="3083" fg:w="3"/><text x="57.1634%" y="959.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (2 samples, 0.04%)</title><rect x="56.9319%" y="933" width="0.0369%" height="15" fill="rgb(212,47,37)" fg:x="3084" fg:w="2"/><text x="57.1819%" y="943.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="56.9134%" y="1157" width="0.0738%" height="15" fill="rgb(254,16,10)" fg:x="3083" fg:w="4"/><text x="57.1634%" y="1167.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="56.9134%" y="1141" width="0.0738%" height="15" fill="rgb(223,228,16)" fg:x="3083" fg:w="4"/><text x="57.1634%" y="1151.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="56.9134%" y="1125" width="0.0738%" height="15" fill="rgb(249,108,50)" fg:x="3083" fg:w="4"/><text x="57.1634%" y="1135.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="56.9134%" y="1109" width="0.0738%" height="15" fill="rgb(208,220,5)" fg:x="3083" fg:w="4"/><text x="57.1634%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="56.9134%" y="1093" width="0.0738%" height="15" fill="rgb(217,89,48)" fg:x="3083" fg:w="4"/><text x="57.1634%" y="1103.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="56.9134%" y="1077" width="0.0738%" height="15" fill="rgb(212,113,41)" fg:x="3083" fg:w="4"/><text x="57.1634%" y="1087.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="56.9688%" y="1061" width="0.0185%" height="15" fill="rgb(231,127,5)" fg:x="3086" fg:w="1"/><text x="57.2188%" y="1071.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="56.9688%" y="1045" width="0.0185%" height="15" fill="rgb(217,141,17)" fg:x="3086" fg:w="1"/><text x="57.2188%" y="1055.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="56.9688%" y="1029" width="0.0185%" height="15" fill="rgb(245,125,54)" fg:x="3086" fg:w="1"/><text x="57.2188%" y="1039.50"></text></g><g><title>Span&lt;unsigned char const&gt;::Span&lt;CScript&gt; (1 samples, 0.02%)</title><rect x="56.9688%" y="1013" width="0.0185%" height="15" fill="rgb(248,125,3)" fg:x="3086" fg:w="1"/><text x="57.2188%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (1 samples, 0.02%)</title><rect x="56.9688%" y="997" width="0.0185%" height="15" fill="rgb(236,119,51)" fg:x="3086" fg:w="1"/><text x="57.2188%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="56.9688%" y="981" width="0.0185%" height="15" fill="rgb(239,99,8)" fg:x="3086" fg:w="1"/><text x="57.2188%" y="991.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (6 samples, 0.11%)</title><rect x="56.8950%" y="1509" width="0.1108%" height="15" fill="rgb(224,228,4)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1519.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1493" width="0.1108%" height="15" fill="rgb(220,131,45)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1503.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1477" width="0.1108%" height="15" fill="rgb(215,62,5)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1487.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1461" width="0.1108%" height="15" fill="rgb(253,12,24)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1471.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1445" width="0.1108%" height="15" fill="rgb(248,120,50)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1455.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1429" width="0.1108%" height="15" fill="rgb(245,194,10)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1439.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1413" width="0.1108%" height="15" fill="rgb(241,149,38)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1423.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1397" width="0.1108%" height="15" fill="rgb(219,215,7)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1407.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1381" width="0.1108%" height="15" fill="rgb(208,120,31)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1391.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1365" width="0.1108%" height="15" fill="rgb(244,30,8)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1375.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="56.8950%" y="1349" width="0.1108%" height="15" fill="rgb(238,35,44)" fg:x="3082" fg:w="6"/><text x="57.1450%" y="1359.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1333" width="0.0923%" height="15" fill="rgb(243,218,37)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1343.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1317" width="0.0923%" height="15" fill="rgb(218,169,10)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1327.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1301" width="0.0923%" height="15" fill="rgb(221,144,10)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1311.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1285" width="0.0923%" height="15" fill="rgb(226,41,38)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1295.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1269" width="0.0923%" height="15" fill="rgb(228,3,1)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1279.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1253" width="0.0923%" height="15" fill="rgb(209,129,12)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1263.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1237" width="0.0923%" height="15" fill="rgb(213,136,33)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1247.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1221" width="0.0923%" height="15" fill="rgb(209,181,29)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1231.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1205" width="0.0923%" height="15" fill="rgb(234,173,18)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1215.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1189" width="0.0923%" height="15" fill="rgb(227,73,47)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1199.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="56.9134%" y="1173" width="0.0923%" height="15" fill="rgb(234,9,34)" fg:x="3083" fg:w="5"/><text x="57.1634%" y="1183.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="56.9873%" y="1157" width="0.0185%" height="15" fill="rgb(235,172,15)" fg:x="3087" fg:w="1"/><text x="57.2373%" y="1167.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="56.9873%" y="1141" width="0.0185%" height="15" fill="rgb(245,61,2)" fg:x="3087" fg:w="1"/><text x="57.2373%" y="1151.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (7 samples, 0.13%)</title><rect x="56.8950%" y="1525" width="0.1292%" height="15" fill="rgb(238,39,47)" fg:x="3082" fg:w="7"/><text x="57.1450%" y="1535.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="57.0057%" y="1509" width="0.0185%" height="15" fill="rgb(234,37,24)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1519.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1493" width="0.0185%" height="15" fill="rgb(248,223,24)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1503.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1477" width="0.0185%" height="15" fill="rgb(223,12,15)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1487.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1461" width="0.0185%" height="15" fill="rgb(249,6,3)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1471.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1445" width="0.0185%" height="15" fill="rgb(237,105,33)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1455.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1429" width="0.0185%" height="15" fill="rgb(252,208,35)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1439.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1413" width="0.0185%" height="15" fill="rgb(215,181,35)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1423.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1397" width="0.0185%" height="15" fill="rgb(246,212,3)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1407.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1381" width="0.0185%" height="15" fill="rgb(247,156,24)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1391.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1365" width="0.0185%" height="15" fill="rgb(248,9,31)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1375.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1349" width="0.0185%" height="15" fill="rgb(234,26,45)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1359.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1333" width="0.0185%" height="15" fill="rgb(249,11,32)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1343.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1317" width="0.0185%" height="15" fill="rgb(249,162,33)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1327.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1301" width="0.0185%" height="15" fill="rgb(232,4,32)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1311.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1285" width="0.0185%" height="15" fill="rgb(212,5,45)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1295.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1269" width="0.0185%" height="15" fill="rgb(227,95,13)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1279.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1253" width="0.0185%" height="15" fill="rgb(223,205,10)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1263.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1237" width="0.0185%" height="15" fill="rgb(222,178,8)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1247.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1221" width="0.0185%" height="15" fill="rgb(216,13,22)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1231.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1205" width="0.0185%" height="15" fill="rgb(240,167,12)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1215.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1189" width="0.0185%" height="15" fill="rgb(235,68,35)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1199.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1173" width="0.0185%" height="15" fill="rgb(253,40,27)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1183.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1157" width="0.0185%" height="15" fill="rgb(214,19,28)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1167.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1141" width="0.0185%" height="15" fill="rgb(210,167,45)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1151.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1125" width="0.0185%" height="15" fill="rgb(232,97,40)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1135.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1109" width="0.0185%" height="15" fill="rgb(250,35,23)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1093" width="0.0185%" height="15" fill="rgb(248,47,53)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1103.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1077" width="0.0185%" height="15" fill="rgb(226,58,50)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1087.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1061" width="0.0185%" height="15" fill="rgb(217,105,26)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1071.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1045" width="0.0185%" height="15" fill="rgb(208,64,1)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1055.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="1029" width="0.0185%" height="15" fill="rgb(214,80,1)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1039.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="57.0057%" y="1013" width="0.0185%" height="15" fill="rgb(206,175,26)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1023.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="997" width="0.0185%" height="15" fill="rgb(235,156,37)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="1007.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="981" width="0.0185%" height="15" fill="rgb(213,100,9)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="991.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="965" width="0.0185%" height="15" fill="rgb(241,15,13)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="975.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="949" width="0.0185%" height="15" fill="rgb(205,97,43)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="959.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="57.0057%" y="933" width="0.0185%" height="15" fill="rgb(216,106,32)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="943.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="57.0057%" y="917" width="0.0185%" height="15" fill="rgb(226,200,8)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="927.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="57.0057%" y="901" width="0.0185%" height="15" fill="rgb(244,54,29)" fg:x="3088" fg:w="1"/><text x="57.2557%" y="911.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="57.0242%" y="1525" width="0.0185%" height="15" fill="rgb(252,169,12)" fg:x="3089" fg:w="1"/><text x="57.2742%" y="1535.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="57.0426%" y="1525" width="0.0185%" height="15" fill="rgb(231,199,11)" fg:x="3090" fg:w="1"/><text x="57.2926%" y="1535.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="57.0426%" y="1509" width="0.0185%" height="15" fill="rgb(233,191,18)" fg:x="3090" fg:w="1"/><text x="57.2926%" y="1519.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="57.0426%" y="1493" width="0.0185%" height="15" fill="rgb(215,83,47)" fg:x="3090" fg:w="1"/><text x="57.2926%" y="1503.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="57.0426%" y="1477" width="0.0185%" height="15" fill="rgb(251,67,19)" fg:x="3090" fg:w="1"/><text x="57.2926%" y="1487.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="57.0611%" y="1525" width="0.0369%" height="15" fill="rgb(240,7,20)" fg:x="3091" fg:w="2"/><text x="57.3111%" y="1535.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="57.0611%" y="1509" width="0.0369%" height="15" fill="rgb(210,150,26)" fg:x="3091" fg:w="2"/><text x="57.3111%" y="1519.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="57.0611%" y="1493" width="0.0369%" height="15" fill="rgb(228,75,42)" fg:x="3091" fg:w="2"/><text x="57.3111%" y="1503.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="57.0611%" y="1477" width="0.0369%" height="15" fill="rgb(237,134,48)" fg:x="3091" fg:w="2"/><text x="57.3111%" y="1487.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="57.0611%" y="1461" width="0.0369%" height="15" fill="rgb(205,80,50)" fg:x="3091" fg:w="2"/><text x="57.3111%" y="1471.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (2 samples, 0.04%)</title><rect x="57.0980%" y="1525" width="0.0369%" height="15" fill="rgb(217,74,48)" fg:x="3093" fg:w="2"/><text x="57.3480%" y="1535.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="57.1349%" y="1525" width="0.0185%" height="15" fill="rgb(205,82,50)" fg:x="3095" fg:w="1"/><text x="57.3849%" y="1535.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (1 samples, 0.02%)</title><rect x="57.1534%" y="1525" width="0.0185%" height="15" fill="rgb(228,1,33)" fg:x="3096" fg:w="1"/><text x="57.4034%" y="1535.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.02%)</title><rect x="57.1534%" y="1509" width="0.0185%" height="15" fill="rgb(214,50,23)" fg:x="3096" fg:w="1"/><text x="57.4034%" y="1519.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="57.1534%" y="1493" width="0.0185%" height="15" fill="rgb(210,62,9)" fg:x="3096" fg:w="1"/><text x="57.4034%" y="1503.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="57.1719%" y="1525" width="0.0185%" height="15" fill="rgb(210,104,37)" fg:x="3097" fg:w="1"/><text x="57.4219%" y="1535.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (2 samples, 0.04%)</title><rect x="57.1903%" y="1525" width="0.0369%" height="15" fill="rgb(232,104,43)" fg:x="3098" fg:w="2"/><text x="57.4403%" y="1535.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.15%)</title><rect x="57.2272%" y="1525" width="0.1477%" height="15" fill="rgb(244,52,6)" fg:x="3100" fg:w="8"/><text x="57.4772%" y="1535.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.3565%" y="1509" width="0.0185%" height="15" fill="rgb(211,174,52)" fg:x="3107" fg:w="1"/><text x="57.6065%" y="1519.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="57.3565%" y="1493" width="0.0185%" height="15" fill="rgb(229,48,4)" fg:x="3107" fg:w="1"/><text x="57.6065%" y="1503.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="57.3565%" y="1477" width="0.0185%" height="15" fill="rgb(205,155,16)" fg:x="3107" fg:w="1"/><text x="57.6065%" y="1487.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="57.3565%" y="1461" width="0.0185%" height="15" fill="rgb(211,141,53)" fg:x="3107" fg:w="1"/><text x="57.6065%" y="1471.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="57.3749%" y="1525" width="0.0185%" height="15" fill="rgb(240,148,11)" fg:x="3108" fg:w="1"/><text x="57.6249%" y="1535.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt;&amp;&amp;) (1 samples, 0.02%)</title><rect x="57.3749%" y="1509" width="0.0185%" height="15" fill="rgb(214,45,23)" fg:x="3108" fg:w="1"/><text x="57.6249%" y="1519.50"></text></g><g><title>void Unserialize&lt;DataStream, unsigned char&gt; (1 samples, 0.02%)</title><rect x="57.3749%" y="1493" width="0.0185%" height="15" fill="rgb(248,74,26)" fg:x="3108" fg:w="1"/><text x="57.6249%" y="1503.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="57.3749%" y="1477" width="0.0185%" height="15" fill="rgb(218,121,16)" fg:x="3108" fg:w="1"/><text x="57.6249%" y="1487.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="57.3749%" y="1461" width="0.0185%" height="15" fill="rgb(218,10,47)" fg:x="3108" fg:w="1"/><text x="57.6249%" y="1471.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="57.4119%" y="1365" width="0.0185%" height="15" fill="rgb(227,99,14)" fg:x="3110" fg:w="1"/><text x="57.6619%" y="1375.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4119%" y="1349" width="0.0185%" height="15" fill="rgb(229,83,46)" fg:x="3110" fg:w="1"/><text x="57.6619%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4119%" y="1333" width="0.0185%" height="15" fill="rgb(228,25,1)" fg:x="3110" fg:w="1"/><text x="57.6619%" y="1343.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4119%" y="1317" width="0.0185%" height="15" fill="rgb(252,190,15)" fg:x="3110" fg:w="1"/><text x="57.6619%" y="1327.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.4119%" y="1301" width="0.0185%" height="15" fill="rgb(213,103,51)" fg:x="3110" fg:w="1"/><text x="57.6619%" y="1311.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="57.4303%" y="1365" width="0.0185%" height="15" fill="rgb(220,38,44)" fg:x="3111" fg:w="1"/><text x="57.6803%" y="1375.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.4303%" y="1349" width="0.0185%" height="15" fill="rgb(210,45,26)" fg:x="3111" fg:w="1"/><text x="57.6803%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4303%" y="1333" width="0.0185%" height="15" fill="rgb(205,95,48)" fg:x="3111" fg:w="1"/><text x="57.6803%" y="1343.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4303%" y="1317" width="0.0185%" height="15" fill="rgb(225,179,37)" fg:x="3111" fg:w="1"/><text x="57.6803%" y="1327.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.4303%" y="1301" width="0.0185%" height="15" fill="rgb(230,209,3)" fg:x="3111" fg:w="1"/><text x="57.6803%" y="1311.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.4303%" y="1285" width="0.0185%" height="15" fill="rgb(248,12,46)" fg:x="3111" fg:w="1"/><text x="57.6803%" y="1295.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4303%" y="1269" width="0.0185%" height="15" fill="rgb(234,18,0)" fg:x="3111" fg:w="1"/><text x="57.6803%" y="1279.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1525" width="0.0738%" height="15" fill="rgb(238,197,14)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1535.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1509" width="0.0738%" height="15" fill="rgb(251,162,48)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1519.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1493" width="0.0738%" height="15" fill="rgb(237,73,42)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1503.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1477" width="0.0738%" height="15" fill="rgb(211,108,8)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1487.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1461" width="0.0738%" height="15" fill="rgb(213,45,22)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1471.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1445" width="0.0738%" height="15" fill="rgb(252,154,5)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1455.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1429" width="0.0738%" height="15" fill="rgb(221,79,52)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1439.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1413" width="0.0738%" height="15" fill="rgb(229,220,36)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1423.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1397" width="0.0738%" height="15" fill="rgb(211,17,16)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1407.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="57.3934%" y="1381" width="0.0738%" height="15" fill="rgb(222,55,31)" fg:x="3109" fg:w="4"/><text x="57.6434%" y="1391.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="57.4488%" y="1365" width="0.0185%" height="15" fill="rgb(221,221,31)" fg:x="3112" fg:w="1"/><text x="57.6988%" y="1375.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4488%" y="1349" width="0.0185%" height="15" fill="rgb(227,168,26)" fg:x="3112" fg:w="1"/><text x="57.6988%" y="1359.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4488%" y="1333" width="0.0185%" height="15" fill="rgb(224,139,9)" fg:x="3112" fg:w="1"/><text x="57.6988%" y="1343.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="57.4488%" y="1317" width="0.0185%" height="15" fill="rgb(254,172,0)" fg:x="3112" fg:w="1"/><text x="57.6988%" y="1327.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="57.4857%" y="1253" width="0.0369%" height="15" fill="rgb(235,203,1)" fg:x="3114" fg:w="2"/><text x="57.7357%" y="1263.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="57.4857%" y="1381" width="0.0738%" height="15" fill="rgb(216,205,24)" fg:x="3114" fg:w="4"/><text x="57.7357%" y="1391.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="57.4857%" y="1365" width="0.0738%" height="15" fill="rgb(233,24,6)" fg:x="3114" fg:w="4"/><text x="57.7357%" y="1375.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (4 samples, 0.07%)</title><rect x="57.4857%" y="1349" width="0.0738%" height="15" fill="rgb(244,110,9)" fg:x="3114" fg:w="4"/><text x="57.7357%" y="1359.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (4 samples, 0.07%)</title><rect x="57.4857%" y="1333" width="0.0738%" height="15" fill="rgb(239,222,42)" fg:x="3114" fg:w="4"/><text x="57.7357%" y="1343.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="57.4857%" y="1317" width="0.0738%" height="15" fill="rgb(218,145,13)" fg:x="3114" fg:w="4"/><text x="57.7357%" y="1327.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="57.4857%" y="1301" width="0.0738%" height="15" fill="rgb(207,69,11)" fg:x="3114" fg:w="4"/><text x="57.7357%" y="1311.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="57.4857%" y="1285" width="0.0738%" height="15" fill="rgb(220,223,22)" fg:x="3114" fg:w="4"/><text x="57.7357%" y="1295.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="57.4857%" y="1269" width="0.0738%" height="15" fill="rgb(245,102,5)" fg:x="3114" fg:w="4"/><text x="57.7357%" y="1279.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="57.5226%" y="1253" width="0.0369%" height="15" fill="rgb(211,148,2)" fg:x="3116" fg:w="2"/><text x="57.7726%" y="1263.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.04%)</title><rect x="57.5226%" y="1237" width="0.0369%" height="15" fill="rgb(241,13,44)" fg:x="3116" fg:w="2"/><text x="57.7726%" y="1247.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="57.5411%" y="1221" width="0.0185%" height="15" fill="rgb(219,137,21)" fg:x="3117" fg:w="1"/><text x="57.7911%" y="1231.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="57.5411%" y="1205" width="0.0185%" height="15" fill="rgb(242,206,5)" fg:x="3117" fg:w="1"/><text x="57.7911%" y="1215.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="57.5411%" y="1189" width="0.0185%" height="15" fill="rgb(217,114,22)" fg:x="3117" fg:w="1"/><text x="57.7911%" y="1199.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.17%)</title><rect x="57.4672%" y="1525" width="0.1661%" height="15" fill="rgb(253,206,42)" fg:x="3113" fg:w="9"/><text x="57.7172%" y="1535.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="57.4857%" y="1509" width="0.1477%" height="15" fill="rgb(236,102,18)" fg:x="3114" fg:w="8"/><text x="57.7357%" y="1519.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="57.4857%" y="1493" width="0.1477%" height="15" fill="rgb(208,59,49)" fg:x="3114" fg:w="8"/><text x="57.7357%" y="1503.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="57.4857%" y="1477" width="0.1477%" height="15" fill="rgb(215,194,28)" fg:x="3114" fg:w="8"/><text x="57.7357%" y="1487.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="57.4857%" y="1461" width="0.1477%" height="15" fill="rgb(243,207,11)" fg:x="3114" fg:w="8"/><text x="57.7357%" y="1471.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="57.4857%" y="1445" width="0.1477%" height="15" fill="rgb(254,179,35)" fg:x="3114" fg:w="8"/><text x="57.7357%" y="1455.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="57.4857%" y="1429" width="0.1477%" height="15" fill="rgb(235,97,3)" fg:x="3114" fg:w="8"/><text x="57.7357%" y="1439.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="57.4857%" y="1413" width="0.1477%" height="15" fill="rgb(215,155,33)" fg:x="3114" fg:w="8"/><text x="57.7357%" y="1423.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.15%)</title><rect x="57.4857%" y="1397" width="0.1477%" height="15" fill="rgb(223,128,12)" fg:x="3114" fg:w="8"/><text x="57.7357%" y="1407.50"></text></g><g><title>malloc (4 samples, 0.07%)</title><rect x="57.5595%" y="1381" width="0.0738%" height="15" fill="rgb(208,157,18)" fg:x="3118" fg:w="4"/><text x="57.8095%" y="1391.50"></text></g><g><title>CTxIn&amp; std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="57.6334%" y="1509" width="0.0185%" height="15" fill="rgb(249,70,54)" fg:x="3122" fg:w="1"/><text x="57.8834%" y="1519.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="57.6518%" y="1509" width="0.0185%" height="15" fill="rgb(244,118,24)" fg:x="3123" fg:w="1"/><text x="57.9018%" y="1519.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="57.6518%" y="1493" width="0.0185%" height="15" fill="rgb(211,54,0)" fg:x="3123" fg:w="1"/><text x="57.9018%" y="1503.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="57.6334%" y="1525" width="0.0554%" height="15" fill="rgb(245,137,45)" fg:x="3122" fg:w="3"/><text x="57.8834%" y="1535.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1509" width="0.0185%" height="15" fill="rgb(232,154,31)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1519.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1493" width="0.0185%" height="15" fill="rgb(253,6,39)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1503.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1477" width="0.0185%" height="15" fill="rgb(234,183,24)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1487.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1461" width="0.0185%" height="15" fill="rgb(252,84,40)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1471.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1445" width="0.0185%" height="15" fill="rgb(224,65,2)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1455.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1429" width="0.0185%" height="15" fill="rgb(229,38,24)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1439.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1413" width="0.0185%" height="15" fill="rgb(218,131,50)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1423.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1397" width="0.0185%" height="15" fill="rgb(233,106,18)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1407.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1381" width="0.0185%" height="15" fill="rgb(220,216,11)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1391.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1365" width="0.0185%" height="15" fill="rgb(251,100,45)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1375.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1349" width="0.0185%" height="15" fill="rgb(235,143,32)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1359.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1333" width="0.0185%" height="15" fill="rgb(248,124,34)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1343.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1317" width="0.0185%" height="15" fill="rgb(225,221,4)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1327.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1301" width="0.0185%" height="15" fill="rgb(242,27,43)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1311.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.6703%" y="1285" width="0.0185%" height="15" fill="rgb(227,54,8)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1295.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="57.6703%" y="1269" width="0.0185%" height="15" fill="rgb(253,139,49)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1279.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="57.6703%" y="1253" width="0.0185%" height="15" fill="rgb(231,26,43)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1263.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="57.6703%" y="1237" width="0.0185%" height="15" fill="rgb(207,121,39)" fg:x="3124" fg:w="1"/><text x="57.9203%" y="1247.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="57.6888%" y="1525" width="0.1108%" height="15" fill="rgb(223,101,35)" fg:x="3125" fg:w="6"/><text x="57.9388%" y="1535.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="57.7626%" y="1509" width="0.0369%" height="15" fill="rgb(232,87,23)" fg:x="3129" fg:w="2"/><text x="58.0126%" y="1519.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="57.7811%" y="1493" width="0.0185%" height="15" fill="rgb(225,180,29)" fg:x="3130" fg:w="1"/><text x="58.0311%" y="1503.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::GetStream (1 samples, 0.02%)</title><rect x="57.7811%" y="1477" width="0.0185%" height="15" fill="rgb(225,25,17)" fg:x="3130" fg:w="1"/><text x="58.0311%" y="1487.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="57.7995%" y="1525" width="0.0369%" height="15" fill="rgb(223,8,52)" fg:x="3131" fg:w="2"/><text x="58.0495%" y="1535.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (4 samples, 0.07%)</title><rect x="57.8364%" y="1525" width="0.0738%" height="15" fill="rgb(246,42,21)" fg:x="3133" fg:w="4"/><text x="58.0864%" y="1535.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="57.8918%" y="1509" width="0.0185%" height="15" fill="rgb(205,64,43)" fg:x="3136" fg:w="1"/><text x="58.1418%" y="1519.50"></text></g><g><title>vtable for std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="57.9103%" y="1525" width="0.0185%" height="15" fill="rgb(221,160,13)" fg:x="3137" fg:w="1"/><text x="58.1603%" y="1535.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="57.9103%" y="1509" width="0.0185%" height="15" fill="rgb(239,58,35)" fg:x="3137" fg:w="1"/><text x="58.1603%" y="1519.50"></text></g><g><title>b-msghand (3,139 samples, 57.95%)</title><rect x="0.0000%" y="1541" width="57.9472%" height="15" fill="rgb(251,26,40)" fg:x="0" fg:w="3139"/><text x="0.2500%" y="1551.50">b-msghand</text></g><g><title>vtable for std::ios_base (1 samples, 0.02%)</title><rect x="57.9287%" y="1525" width="0.0185%" height="15" fill="rgb(247,0,4)" fg:x="3138" fg:w="1"/><text x="58.1787%" y="1535.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="57.9287%" y="1509" width="0.0185%" height="15" fill="rgb(218,130,10)" fg:x="3138" fg:w="1"/><text x="58.1787%" y="1519.50"></text></g><g><title>DataStream::resize (21 samples, 0.39%)</title><rect x="57.9472%" y="1477" width="0.3877%" height="15" fill="rgb(239,32,7)" fg:x="3139" fg:w="21"/><text x="58.1972%" y="1487.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::resize (21 samples, 0.39%)</title><rect x="57.9472%" y="1461" width="0.3877%" height="15" fill="rgb(210,192,24)" fg:x="3139" fg:w="21"/><text x="58.1972%" y="1471.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (21 samples, 0.39%)</title><rect x="57.9472%" y="1445" width="0.3877%" height="15" fill="rgb(226,212,17)" fg:x="3139" fg:w="21"/><text x="58.1972%" y="1455.50"></text></g><g><title>std::byte* std::__uninitialized_fill_n_a&lt;std::byte*, unsigned long, std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; (21 samples, 0.39%)</title><rect x="57.9472%" y="1429" width="0.3877%" height="15" fill="rgb(219,201,28)" fg:x="3139" fg:w="21"/><text x="58.1972%" y="1439.50"></text></g><g><title>decltype  (14 samples, 0.26%)</title><rect x="58.0764%" y="1413" width="0.2584%" height="15" fill="rgb(235,207,41)" fg:x="3146" fg:w="14"/><text x="58.3264%" y="1423.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (14 samples, 0.26%)</title><rect x="58.0764%" y="1397" width="0.2584%" height="15" fill="rgb(241,95,54)" fg:x="3146" fg:w="14"/><text x="58.3264%" y="1407.50"></text></g><g><title>decltype (14 samples, 0.26%)</title><rect x="58.0764%" y="1381" width="0.2584%" height="15" fill="rgb(248,12,23)" fg:x="3146" fg:w="14"/><text x="58.3264%" y="1391.50"></text></g><g><title>V2Transport::GetReceivedMessage (22 samples, 0.41%)</title><rect x="57.9472%" y="1493" width="0.4061%" height="15" fill="rgb(228,173,4)" fg:x="3139" fg:w="22"/><text x="58.1972%" y="1503.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="58.3349%" y="1477" width="0.0185%" height="15" fill="rgb(254,99,5)" fg:x="3160" fg:w="1"/><text x="58.5849%" y="1487.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="58.3349%" y="1461" width="0.0185%" height="15" fill="rgb(212,184,17)" fg:x="3160" fg:w="1"/><text x="58.5849%" y="1471.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="58.3349%" y="1445" width="0.0185%" height="15" fill="rgb(252,174,1)" fg:x="3160" fg:w="1"/><text x="58.5849%" y="1455.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="58.3349%" y="1429" width="0.0185%" height="15" fill="rgb(241,118,51)" fg:x="3160" fg:w="1"/><text x="58.5849%" y="1439.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (1 samples, 0.02%)</title><rect x="58.3349%" y="1413" width="0.0185%" height="15" fill="rgb(227,94,47)" fg:x="3160" fg:w="1"/><text x="58.5849%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="58.3349%" y="1397" width="0.0185%" height="15" fill="rgb(229,104,2)" fg:x="3160" fg:w="1"/><text x="58.5849%" y="1407.50"></text></g><g><title>ReadLE32 (1 samples, 0.02%)</title><rect x="60.2917%" y="1381" width="0.0185%" height="15" fill="rgb(219,28,31)" fg:x="3266" fg:w="1"/><text x="60.5417%" y="1391.50"></text></g><g><title>ChaCha20Aligned::Crypt (1 samples, 0.02%)</title><rect x="60.2917%" y="1365" width="0.0185%" height="15" fill="rgb(233,109,36)" fg:x="3266" fg:w="1"/><text x="60.5417%" y="1375.50"></text></g><g><title>WriteLE32 (2 samples, 0.04%)</title><rect x="60.3101%" y="1381" width="0.0369%" height="15" fill="rgb(246,88,11)" fg:x="3267" fg:w="2"/><text x="60.5601%" y="1391.50"></text></g><g><title>ChaCha20Aligned::Crypt (2 samples, 0.04%)</title><rect x="60.3101%" y="1365" width="0.0369%" height="15" fill="rgb(209,212,17)" fg:x="3267" fg:w="2"/><text x="60.5601%" y="1375.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="60.3471%" y="1381" width="0.1477%" height="15" fill="rgb(243,59,29)" fg:x="3269" fg:w="8"/><text x="60.5971%" y="1391.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="60.3471%" y="1365" width="0.1477%" height="15" fill="rgb(244,205,48)" fg:x="3269" fg:w="8"/><text x="60.5971%" y="1375.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="60.3471%" y="1349" width="0.1477%" height="15" fill="rgb(227,30,6)" fg:x="3269" fg:w="8"/><text x="60.5971%" y="1359.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="60.3655%" y="1333" width="0.1292%" height="15" fill="rgb(220,205,48)" fg:x="3270" fg:w="7"/><text x="60.6155%" y="1343.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="60.3840%" y="1317" width="0.1108%" height="15" fill="rgb(250,94,14)" fg:x="3271" fg:w="6"/><text x="60.6340%" y="1327.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="60.3840%" y="1301" width="0.1108%" height="15" fill="rgb(216,119,42)" fg:x="3271" fg:w="6"/><text x="60.6340%" y="1311.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="60.3840%" y="1285" width="0.1108%" height="15" fill="rgb(232,155,0)" fg:x="3271" fg:w="6"/><text x="60.6340%" y="1295.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="60.3840%" y="1269" width="0.1108%" height="15" fill="rgb(212,24,32)" fg:x="3271" fg:w="6"/><text x="60.6340%" y="1279.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="60.3840%" y="1253" width="0.1108%" height="15" fill="rgb(216,69,20)" fg:x="3271" fg:w="6"/><text x="60.6340%" y="1263.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="60.3840%" y="1237" width="0.1108%" height="15" fill="rgb(229,73,31)" fg:x="3271" fg:w="6"/><text x="60.6340%" y="1247.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="60.3840%" y="1221" width="0.1108%" height="15" fill="rgb(224,219,20)" fg:x="3271" fg:w="6"/><text x="60.6340%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="60.4394%" y="1205" width="0.0554%" height="15" fill="rgb(215,146,41)" fg:x="3274" fg:w="3"/><text x="60.6894%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="60.4394%" y="1189" width="0.0554%" height="15" fill="rgb(244,71,31)" fg:x="3274" fg:w="3"/><text x="60.6894%" y="1199.50"></text></g><g><title>ChaCha20::Crypt (153 samples, 2.82%)</title><rect x="58.3533%" y="1413" width="2.8244%" height="15" fill="rgb(224,24,11)" fg:x="3161" fg:w="153"/><text x="58.6033%" y="1423.50">Ch..</text></g><g><title>ChaCha20Aligned::Crypt (153 samples, 2.82%)</title><rect x="58.3533%" y="1397" width="2.8244%" height="15" fill="rgb(229,76,15)" fg:x="3161" fg:w="153"/><text x="58.6033%" y="1407.50">Ch..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (37 samples, 0.68%)</title><rect x="60.4947%" y="1381" width="0.6830%" height="15" fill="rgb(209,93,2)" fg:x="3277" fg:w="37"/><text x="60.7447%" y="1391.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (37 samples, 0.68%)</title><rect x="60.4947%" y="1365" width="0.6830%" height="15" fill="rgb(216,200,50)" fg:x="3277" fg:w="37"/><text x="60.7447%" y="1375.50"></text></g><g><title>BIP324Cipher::Decrypt (236 samples, 4.36%)</title><rect x="58.3533%" y="1461" width="4.3567%" height="15" fill="rgb(211,67,34)" fg:x="3161" fg:w="236"/><text x="58.6033%" y="1471.50">BIP32..</text></g><g><title>FSChaCha20Poly1305::Decrypt (236 samples, 4.36%)</title><rect x="58.3533%" y="1445" width="4.3567%" height="15" fill="rgb(225,87,47)" fg:x="3161" fg:w="236"/><text x="58.6033%" y="1455.50">FSCha..</text></g><g><title>AEADChaCha20Poly1305::Decrypt (236 samples, 4.36%)</title><rect x="58.3533%" y="1429" width="4.3567%" height="15" fill="rgb(217,185,16)" fg:x="3161" fg:w="236"/><text x="58.6033%" y="1439.50">AEADC..</text></g><g><title>ComputeTag (83 samples, 1.53%)</title><rect x="61.1778%" y="1413" width="1.5322%" height="15" fill="rgb(205,0,0)" fg:x="3314" fg:w="83"/><text x="61.4278%" y="1423.50"></text></g><g><title>Poly1305::Update (83 samples, 1.53%)</title><rect x="61.1778%" y="1397" width="1.5322%" height="15" fill="rgb(207,116,45)" fg:x="3314" fg:w="83"/><text x="61.4278%" y="1407.50"></text></g><g><title>poly1305_donna::poly1305_update (83 samples, 1.53%)</title><rect x="61.1778%" y="1381" width="1.5322%" height="15" fill="rgb(221,156,26)" fg:x="3314" fg:w="83"/><text x="61.4278%" y="1391.50"></text></g><g><title>poly1305_donna::poly1305_blocks (83 samples, 1.53%)</title><rect x="61.1778%" y="1365" width="1.5322%" height="15" fill="rgb(213,140,4)" fg:x="3314" fg:w="83"/><text x="61.4278%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="62.6361%" y="1349" width="0.0738%" height="15" fill="rgb(231,224,15)" fg:x="3393" fg:w="4"/><text x="62.8861%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="62.6361%" y="1333" width="0.0738%" height="15" fill="rgb(244,76,20)" fg:x="3393" fg:w="4"/><text x="62.8861%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="62.6361%" y="1317" width="0.0738%" height="15" fill="rgb(238,117,7)" fg:x="3393" fg:w="4"/><text x="62.8861%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="62.6546%" y="1301" width="0.0554%" height="15" fill="rgb(235,1,10)" fg:x="3394" fg:w="3"/><text x="62.9046%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="62.6546%" y="1285" width="0.0554%" height="15" fill="rgb(216,165,6)" fg:x="3394" fg:w="3"/><text x="62.9046%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="62.6546%" y="1269" width="0.0554%" height="15" fill="rgb(246,91,35)" fg:x="3394" fg:w="3"/><text x="62.9046%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="62.6546%" y="1253" width="0.0554%" height="15" fill="rgb(228,96,24)" fg:x="3394" fg:w="3"/><text x="62.9046%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="62.6546%" y="1237" width="0.0554%" height="15" fill="rgb(254,217,53)" fg:x="3394" fg:w="3"/><text x="62.9046%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="62.6546%" y="1221" width="0.0554%" height="15" fill="rgb(209,60,0)" fg:x="3394" fg:w="3"/><text x="62.9046%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="62.6546%" y="1205" width="0.0554%" height="15" fill="rgb(250,93,26)" fg:x="3394" fg:w="3"/><text x="62.9046%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="62.6546%" y="1189" width="0.0554%" height="15" fill="rgb(211,9,40)" fg:x="3394" fg:w="3"/><text x="62.9046%" y="1199.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (239 samples, 4.41%)</title><rect x="58.3533%" y="1477" width="4.4120%" height="15" fill="rgb(242,57,20)" fg:x="3161" fg:w="239"/><text x="58.6033%" y="1487.50">V2Tra..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (3 samples, 0.06%)</title><rect x="62.7100%" y="1461" width="0.0554%" height="15" fill="rgb(248,85,48)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1471.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (3 samples, 0.06%)</title><rect x="62.7100%" y="1445" width="0.0554%" height="15" fill="rgb(212,117,2)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1455.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (3 samples, 0.06%)</title><rect x="62.7100%" y="1429" width="0.0554%" height="15" fill="rgb(243,19,3)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1439.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (3 samples, 0.06%)</title><rect x="62.7100%" y="1413" width="0.0554%" height="15" fill="rgb(232,217,24)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (3 samples, 0.06%)</title><rect x="62.7100%" y="1397" width="0.0554%" height="15" fill="rgb(224,175,40)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1407.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (3 samples, 0.06%)</title><rect x="62.7100%" y="1381" width="0.0554%" height="15" fill="rgb(212,162,32)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1391.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (3 samples, 0.06%)</title><rect x="62.7100%" y="1365" width="0.0554%" height="15" fill="rgb(215,9,4)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1375.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (3 samples, 0.06%)</title><rect x="62.7100%" y="1349" width="0.0554%" height="15" fill="rgb(242,42,7)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1359.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (3 samples, 0.06%)</title><rect x="62.7100%" y="1333" width="0.0554%" height="15" fill="rgb(242,184,45)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1343.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (3 samples, 0.06%)</title><rect x="62.7100%" y="1317" width="0.0554%" height="15" fill="rgb(228,111,51)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1327.50"></text></g><g><title>__memset_avx512_unaligned_erms (3 samples, 0.06%)</title><rect x="62.7100%" y="1301" width="0.0554%" height="15" fill="rgb(236,147,17)" fg:x="3397" fg:w="3"/><text x="62.9600%" y="1311.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1477" width="0.0369%" height="15" fill="rgb(210,75,22)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1487.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1461" width="0.0369%" height="15" fill="rgb(217,159,45)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1471.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1445" width="0.0369%" height="15" fill="rgb(245,165,53)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1455.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1429" width="0.0369%" height="15" fill="rgb(251,190,50)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1439.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1413" width="0.0369%" height="15" fill="rgb(208,203,29)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1423.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1397" width="0.0369%" height="15" fill="rgb(207,209,35)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1407.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1381" width="0.0369%" height="15" fill="rgb(230,144,49)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1365" width="0.0369%" height="15" fill="rgb(229,31,6)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1349" width="0.0369%" height="15" fill="rgb(251,129,24)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1359.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (2 samples, 0.04%)</title><rect x="62.7654%" y="1333" width="0.0369%" height="15" fill="rgb(235,105,15)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="62.7654%" y="1317" width="0.0369%" height="15" fill="rgb(216,52,43)" fg:x="3400" fg:w="2"/><text x="63.0154%" y="1327.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="62.8023%" y="1461" width="0.0185%" height="15" fill="rgb(238,144,41)" fg:x="3402" fg:w="1"/><text x="63.0523%" y="1471.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="62.8023%" y="1445" width="0.0185%" height="15" fill="rgb(243,63,9)" fg:x="3402" fg:w="1"/><text x="63.0523%" y="1455.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="62.8023%" y="1429" width="0.0185%" height="15" fill="rgb(246,208,1)" fg:x="3402" fg:w="1"/><text x="63.0523%" y="1439.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="62.8023%" y="1413" width="0.0185%" height="15" fill="rgb(233,182,18)" fg:x="3402" fg:w="1"/><text x="63.0523%" y="1423.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="62.8023%" y="1397" width="0.0185%" height="15" fill="rgb(242,224,8)" fg:x="3402" fg:w="1"/><text x="63.0523%" y="1407.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="62.8023%" y="1381" width="0.0185%" height="15" fill="rgb(243,54,37)" fg:x="3402" fg:w="1"/><text x="63.0523%" y="1391.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="62.8023%" y="1365" width="0.0185%" height="15" fill="rgb(233,192,12)" fg:x="3402" fg:w="1"/><text x="63.0523%" y="1375.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="62.8023%" y="1349" width="0.0185%" height="15" fill="rgb(251,192,53)" fg:x="3402" fg:w="1"/><text x="63.0523%" y="1359.50"></text></g><g><title>CNode::ReceiveMsgBytes (280 samples, 5.17%)</title><rect x="57.9472%" y="1509" width="5.1689%" height="15" fill="rgb(246,141,26)" fg:x="3139" fg:w="280"/><text x="58.1972%" y="1519.50">CNode:..</text></g><g><title>V2Transport::ReceivedBytes (258 samples, 4.76%)</title><rect x="58.3533%" y="1493" width="4.7628%" height="15" fill="rgb(239,195,19)" fg:x="3161" fg:w="258"/><text x="58.6033%" y="1503.50">V2Tran..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (17 samples, 0.31%)</title><rect x="62.8023%" y="1477" width="0.3138%" height="15" fill="rgb(241,16,39)" fg:x="3402" fg:w="17"/><text x="63.0523%" y="1487.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (16 samples, 0.30%)</title><rect x="62.8207%" y="1461" width="0.2954%" height="15" fill="rgb(223,13,53)" fg:x="3403" fg:w="16"/><text x="63.0707%" y="1471.50"></text></g><g><title>unsigned char* std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (16 samples, 0.30%)</title><rect x="62.8207%" y="1445" width="0.2954%" height="15" fill="rgb(214,227,0)" fg:x="3403" fg:w="16"/><text x="63.0707%" y="1455.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;unsigned char, void&gt;::value, unsigned char*&gt;::type std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (16 samples, 0.30%)</title><rect x="62.8207%" y="1429" width="0.2954%" height="15" fill="rgb(228,103,26)" fg:x="3403" fg:w="16"/><text x="63.0707%" y="1439.50"></text></g><g><title>__memmove_avx512_unaligned_erms (16 samples, 0.30%)</title><rect x="62.8207%" y="1413" width="0.2954%" height="15" fill="rgb(254,177,53)" fg:x="3403" fg:w="16"/><text x="63.0707%" y="1423.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="63.0238%" y="1397" width="0.0923%" height="15" fill="rgb(208,201,34)" fg:x="3414" fg:w="5"/><text x="63.2738%" y="1407.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="63.0238%" y="1381" width="0.0923%" height="15" fill="rgb(212,39,5)" fg:x="3414" fg:w="5"/><text x="63.2738%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="63.0423%" y="1365" width="0.0738%" height="15" fill="rgb(246,117,3)" fg:x="3415" fg:w="4"/><text x="63.2923%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="63.0423%" y="1349" width="0.0738%" height="15" fill="rgb(244,118,39)" fg:x="3415" fg:w="4"/><text x="63.2923%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="63.0423%" y="1333" width="0.0738%" height="15" fill="rgb(241,64,10)" fg:x="3415" fg:w="4"/><text x="63.2923%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="63.0423%" y="1317" width="0.0738%" height="15" fill="rgb(229,39,44)" fg:x="3415" fg:w="4"/><text x="63.2923%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="63.0423%" y="1301" width="0.0738%" height="15" fill="rgb(230,226,3)" fg:x="3415" fg:w="4"/><text x="63.2923%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="63.0423%" y="1285" width="0.0738%" height="15" fill="rgb(222,13,42)" fg:x="3415" fg:w="4"/><text x="63.2923%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.0607%" y="1269" width="0.0554%" height="15" fill="rgb(247,180,54)" fg:x="3416" fg:w="3"/><text x="63.3107%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.0607%" y="1253" width="0.0554%" height="15" fill="rgb(205,96,16)" fg:x="3416" fg:w="3"/><text x="63.3107%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.0607%" y="1237" width="0.0554%" height="15" fill="rgb(205,100,21)" fg:x="3416" fg:w="3"/><text x="63.3107%" y="1247.50"></text></g><g><title>[[nf_conntrack]] (2 samples, 0.04%)</title><rect x="63.5776%" y="1285" width="0.0369%" height="15" fill="rgb(248,51,4)" fg:x="3444" fg:w="2"/><text x="63.8276%" y="1295.50"></text></g><g><title>[[nf_conntrack]] (2 samples, 0.04%)</title><rect x="63.5776%" y="1269" width="0.0369%" height="15" fill="rgb(217,197,30)" fg:x="3444" fg:w="2"/><text x="63.8276%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="63.5961%" y="1253" width="0.0185%" height="15" fill="rgb(240,179,40)" fg:x="3445" fg:w="1"/><text x="63.8461%" y="1263.50"></text></g><g><title>CConnman::SocketHandlerConnected (310 samples, 5.72%)</title><rect x="57.9472%" y="1525" width="5.7227%" height="15" fill="rgb(212,185,35)" fg:x="3139" fg:w="310"/><text x="58.1972%" y="1535.50">CConnma..</text></g><g><title>__libc_recv (30 samples, 0.55%)</title><rect x="63.1161%" y="1509" width="0.5538%" height="15" fill="rgb(251,222,31)" fg:x="3419" fg:w="30"/><text x="63.3661%" y="1519.50"></text></g><g><title>[unknown] (30 samples, 0.55%)</title><rect x="63.1161%" y="1493" width="0.5538%" height="15" fill="rgb(208,140,36)" fg:x="3419" fg:w="30"/><text x="63.3661%" y="1503.50"></text></g><g><title>[unknown] (30 samples, 0.55%)</title><rect x="63.1161%" y="1477" width="0.5538%" height="15" fill="rgb(220,148,1)" fg:x="3419" fg:w="30"/><text x="63.3661%" y="1487.50"></text></g><g><title>[unknown] (30 samples, 0.55%)</title><rect x="63.1161%" y="1461" width="0.5538%" height="15" fill="rgb(254,4,28)" fg:x="3419" fg:w="30"/><text x="63.3661%" y="1471.50"></text></g><g><title>[unknown] (30 samples, 0.55%)</title><rect x="63.1161%" y="1445" width="0.5538%" height="15" fill="rgb(222,185,44)" fg:x="3419" fg:w="30"/><text x="63.3661%" y="1455.50"></text></g><g><title>[unknown] (30 samples, 0.55%)</title><rect x="63.1161%" y="1429" width="0.5538%" height="15" fill="rgb(215,74,39)" fg:x="3419" fg:w="30"/><text x="63.3661%" y="1439.50"></text></g><g><title>[unknown] (30 samples, 0.55%)</title><rect x="63.1161%" y="1413" width="0.5538%" height="15" fill="rgb(247,86,4)" fg:x="3419" fg:w="30"/><text x="63.3661%" y="1423.50"></text></g><g><title>[unknown] (29 samples, 0.54%)</title><rect x="63.1346%" y="1397" width="0.5354%" height="15" fill="rgb(231,105,32)" fg:x="3420" fg:w="29"/><text x="63.3846%" y="1407.50"></text></g><g><title>[unknown] (28 samples, 0.52%)</title><rect x="63.1530%" y="1381" width="0.5169%" height="15" fill="rgb(222,65,35)" fg:x="3421" fg:w="28"/><text x="63.4030%" y="1391.50"></text></g><g><title>[unknown] (27 samples, 0.50%)</title><rect x="63.1715%" y="1365" width="0.4984%" height="15" fill="rgb(218,145,35)" fg:x="3422" fg:w="27"/><text x="63.4215%" y="1375.50"></text></g><g><title>[unknown] (26 samples, 0.48%)</title><rect x="63.1900%" y="1349" width="0.4800%" height="15" fill="rgb(208,7,15)" fg:x="3423" fg:w="26"/><text x="63.4400%" y="1359.50"></text></g><g><title>[unknown] (26 samples, 0.48%)</title><rect x="63.1900%" y="1333" width="0.4800%" height="15" fill="rgb(209,83,13)" fg:x="3423" fg:w="26"/><text x="63.4400%" y="1343.50"></text></g><g><title>[unknown] (24 samples, 0.44%)</title><rect x="63.2269%" y="1317" width="0.4430%" height="15" fill="rgb(218,3,10)" fg:x="3425" fg:w="24"/><text x="63.4769%" y="1327.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="63.4853%" y="1301" width="0.1846%" height="15" fill="rgb(211,219,4)" fg:x="3439" fg:w="10"/><text x="63.7353%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.6145%" y="1285" width="0.0554%" height="15" fill="rgb(228,194,12)" fg:x="3446" fg:w="3"/><text x="63.8645%" y="1295.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="63.6515%" y="1269" width="0.0185%" height="15" fill="rgb(210,175,7)" fg:x="3448" fg:w="1"/><text x="63.9015%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="63.6515%" y="1253" width="0.0185%" height="15" fill="rgb(243,132,6)" fg:x="3448" fg:w="1"/><text x="63.9015%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="63.6515%" y="1237" width="0.0185%" height="15" fill="rgb(207,72,18)" fg:x="3448" fg:w="1"/><text x="63.9015%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="63.6515%" y="1221" width="0.0185%" height="15" fill="rgb(236,1,18)" fg:x="3448" fg:w="1"/><text x="63.9015%" y="1231.50"></text></g><g><title>CConnman::GenerateWaitSockets (1 samples, 0.02%)</title><rect x="63.6699%" y="1333" width="0.0185%" height="15" fill="rgb(227,0,18)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1343.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;std::shared_ptr&lt;Sock const&gt;, Sock::Events, Sock::HashSharedPtrSock, Sock::EqualSharedPtrSock, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt; &gt;::emplace&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.02%)</title><rect x="63.6699%" y="1317" width="0.0185%" height="15" fill="rgb(247,37,5)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1327.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, false, true&gt;, bool&gt; std::_Hashtable&lt;std::shared_ptr&lt;Sock const&gt;, std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt;, std::__detail::_Select1st, Sock::EqualSharedPtrSock, Sock::HashSharedPtrSock, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::emplace&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.02%)</title><rect x="63.6699%" y="1301" width="0.0185%" height="15" fill="rgb(237,179,24)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1311.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, false, true&gt;, bool&gt; std::_Hashtable&lt;std::shared_ptr&lt;Sock const&gt;, std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt;, std::__detail::_Select1st, Sock::EqualSharedPtrSock, Sock::HashSharedPtrSock, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.02%)</title><rect x="63.6699%" y="1285" width="0.0185%" height="15" fill="rgb(226,53,20)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1295.50"></text></g><g><title>std::_Hashtable&lt;std::shared_ptr&lt;Sock const&gt;, std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt;, std::__detail::_Select1st, Sock::EqualSharedPtrSock, Sock::HashSharedPtrSock, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.02%)</title><rect x="63.6699%" y="1269" width="0.0185%" height="15" fill="rgb(247,75,7)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1279.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.02%)</title><rect x="63.6699%" y="1253" width="0.0185%" height="15" fill="rgb(233,96,12)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1263.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.02%)</title><rect x="63.6699%" y="1237" width="0.0185%" height="15" fill="rgb(224,125,0)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1247.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="63.6699%" y="1221" width="0.0185%" height="15" fill="rgb(224,92,25)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1231.50"></text></g><g><title>std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;::pair&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.02%)</title><rect x="63.6699%" y="1205" width="0.0185%" height="15" fill="rgb(224,42,24)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1215.50"></text></g><g><title>std::shared_ptr&lt;Sock const&gt;::shared_ptr&lt;Sock, void&gt; (1 samples, 0.02%)</title><rect x="63.6699%" y="1189" width="0.0185%" height="15" fill="rgb(234,132,49)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1199.50"></text></g><g><title>std::__shared_ptr&lt;Sock const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;Sock, void&gt; (1 samples, 0.02%)</title><rect x="63.6699%" y="1173" width="0.0185%" height="15" fill="rgb(248,100,35)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1183.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.02%)</title><rect x="63.6699%" y="1157" width="0.0185%" height="15" fill="rgb(239,94,40)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1167.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (1 samples, 0.02%)</title><rect x="63.6699%" y="1141" width="0.0185%" height="15" fill="rgb(235,139,28)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1151.50"></text></g><g><title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.02%)</title><rect x="63.6699%" y="1125" width="0.0185%" height="15" fill="rgb(217,144,7)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1135.50"></text></g><g><title>__gnu_cxx::__atomic_add (1 samples, 0.02%)</title><rect x="63.6699%" y="1109" width="0.0185%" height="15" fill="rgb(227,55,4)" fg:x="3449" fg:w="1"/><text x="63.9199%" y="1119.50"></text></g><g><title>b-net (316 samples, 5.83%)</title><rect x="57.9472%" y="1541" width="5.8335%" height="15" fill="rgb(252,82,54)" fg:x="3139" fg:w="316"/><text x="58.1972%" y="1551.50">b-net</text></g><g><title>__clone (6 samples, 0.11%)</title><rect x="63.6699%" y="1525" width="0.1108%" height="15" fill="rgb(245,172,4)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1535.50"></text></g><g><title>start_thread (6 samples, 0.11%)</title><rect x="63.6699%" y="1509" width="0.1108%" height="15" fill="rgb(207,26,27)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1519.50"></text></g><g><title>execute_native_thread_routine (6 samples, 0.11%)</title><rect x="63.6699%" y="1493" width="0.1108%" height="15" fill="rgb(252,98,18)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1503.50"></text></g><g><title>_M_run (6 samples, 0.11%)</title><rect x="63.6699%" y="1477" width="0.1108%" height="15" fill="rgb(244,8,26)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1487.50"></text></g><g><title>operator (6 samples, 0.11%)</title><rect x="63.6699%" y="1461" width="0.1108%" height="15" fill="rgb(237,173,45)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1471.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (6 samples, 0.11%)</title><rect x="63.6699%" y="1445" width="0.1108%" height="15" fill="rgb(208,213,49)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1455.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (6 samples, 0.11%)</title><rect x="63.6699%" y="1429" width="0.1108%" height="15" fill="rgb(212,122,37)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1439.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (6 samples, 0.11%)</title><rect x="63.6699%" y="1413" width="0.1108%" height="15" fill="rgb(213,80,17)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1423.50"></text></g><g><title>util::TraceThread (6 samples, 0.11%)</title><rect x="63.6699%" y="1397" width="0.1108%" height="15" fill="rgb(206,210,43)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1407.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (6 samples, 0.11%)</title><rect x="63.6699%" y="1381" width="0.1108%" height="15" fill="rgb(229,214,3)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1391.50"></text></g><g><title>CConnman::ThreadSocketHandler (6 samples, 0.11%)</title><rect x="63.6699%" y="1365" width="0.1108%" height="15" fill="rgb(235,213,29)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1375.50"></text></g><g><title>CConnman::SocketHandler (6 samples, 0.11%)</title><rect x="63.6699%" y="1349" width="0.1108%" height="15" fill="rgb(248,135,26)" fg:x="3449" fg:w="6"/><text x="63.9199%" y="1359.50"></text></g><g><title>Sock::WaitMany (5 samples, 0.09%)</title><rect x="63.6884%" y="1333" width="0.0923%" height="15" fill="rgb(242,188,12)" fg:x="3450" fg:w="5"/><text x="63.9384%" y="1343.50"></text></g><g><title>Sock::WaitMany (5 samples, 0.09%)</title><rect x="63.6884%" y="1317" width="0.0923%" height="15" fill="rgb(245,38,12)" fg:x="3450" fg:w="5"/><text x="63.9384%" y="1327.50"></text></g><g><title>__poll (5 samples, 0.09%)</title><rect x="63.6884%" y="1301" width="0.0923%" height="15" fill="rgb(218,42,13)" fg:x="3450" fg:w="5"/><text x="63.9384%" y="1311.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="63.6884%" y="1285" width="0.0923%" height="15" fill="rgb(238,132,49)" fg:x="3450" fg:w="5"/><text x="63.9384%" y="1295.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="63.6884%" y="1269" width="0.0923%" height="15" fill="rgb(209,196,19)" fg:x="3450" fg:w="5"/><text x="63.9384%" y="1279.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="63.6884%" y="1253" width="0.0923%" height="15" fill="rgb(244,131,22)" fg:x="3450" fg:w="5"/><text x="63.9384%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="63.7068%" y="1237" width="0.0738%" height="15" fill="rgb(223,18,34)" fg:x="3451" fg:w="4"/><text x="63.9568%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="63.7068%" y="1221" width="0.0738%" height="15" fill="rgb(252,124,54)" fg:x="3451" fg:w="4"/><text x="63.9568%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="63.7068%" y="1205" width="0.0738%" height="15" fill="rgb(229,106,42)" fg:x="3451" fg:w="4"/><text x="63.9568%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.7253%" y="1189" width="0.0554%" height="15" fill="rgb(221,129,1)" fg:x="3452" fg:w="3"/><text x="63.9753%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.7253%" y="1173" width="0.0554%" height="15" fill="rgb(229,74,15)" fg:x="3452" fg:w="3"/><text x="63.9753%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.7253%" y="1157" width="0.0554%" height="15" fill="rgb(210,206,50)" fg:x="3452" fg:w="3"/><text x="63.9753%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.7253%" y="1141" width="0.0554%" height="15" fill="rgb(251,114,31)" fg:x="3452" fg:w="3"/><text x="63.9753%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.7253%" y="1125" width="0.0554%" height="15" fill="rgb(215,225,28)" fg:x="3452" fg:w="3"/><text x="63.9753%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.7253%" y="1109" width="0.0554%" height="15" fill="rgb(237,109,14)" fg:x="3452" fg:w="3"/><text x="63.9753%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="63.7253%" y="1093" width="0.0554%" height="15" fill="rgb(230,13,37)" fg:x="3452" fg:w="3"/><text x="63.9753%" y="1103.50"></text></g><g><title>b-opencon (1 samples, 0.02%)</title><rect x="63.7807%" y="1541" width="0.0185%" height="15" fill="rgb(231,40,28)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1551.50"></text></g><g><title>__clone (1 samples, 0.02%)</title><rect x="63.7807%" y="1525" width="0.0185%" height="15" fill="rgb(231,202,18)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1535.50"></text></g><g><title>start_thread (1 samples, 0.02%)</title><rect x="63.7807%" y="1509" width="0.0185%" height="15" fill="rgb(225,33,18)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1519.50"></text></g><g><title>execute_native_thread_routine (1 samples, 0.02%)</title><rect x="63.7807%" y="1493" width="0.0185%" height="15" fill="rgb(223,64,47)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1503.50"></text></g><g><title>_M_run (1 samples, 0.02%)</title><rect x="63.7807%" y="1477" width="0.0185%" height="15" fill="rgb(234,114,13)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1487.50"></text></g><g><title>operator (1 samples, 0.02%)</title><rect x="63.7807%" y="1461" width="0.0185%" height="15" fill="rgb(248,56,40)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1471.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (1 samples, 0.02%)</title><rect x="63.7807%" y="1445" width="0.0185%" height="15" fill="rgb(221,194,21)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1455.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="63.7807%" y="1429" width="0.0185%" height="15" fill="rgb(242,108,46)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1439.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt; &gt; &gt;::_M_run (1 samples, 0.02%)</title><rect x="63.7807%" y="1413" width="0.0185%" height="15" fill="rgb(220,106,10)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1423.50"></text></g><g><title>util::TraceThread (1 samples, 0.02%)</title><rect x="63.7807%" y="1397" width="0.0185%" height="15" fill="rgb(211,88,4)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1407.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (1 samples, 0.02%)</title><rect x="63.7807%" y="1381" width="0.0185%" height="15" fill="rgb(214,95,34)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1391.50"></text></g><g><title>_M_invoke (1 samples, 0.02%)</title><rect x="63.7807%" y="1365" width="0.0185%" height="15" fill="rgb(250,160,33)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1375.50"></text></g><g><title>__invoke_r&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="63.7807%" y="1349" width="0.0185%" height="15" fill="rgb(225,29,10)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1359.50"></text></g><g><title>__invoke_impl&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="63.7807%" y="1333" width="0.0185%" height="15" fill="rgb(224,28,30)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1343.50"></text></g><g><title>std::_Function_handler&lt;void (), CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt;::_M_invoke (1 samples, 0.02%)</title><rect x="63.7807%" y="1317" width="0.0185%" height="15" fill="rgb(231,77,4)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1327.50"></text></g><g><title>CConnman::ThreadOpenConnections (1 samples, 0.02%)</title><rect x="63.7807%" y="1301" width="0.0185%" height="15" fill="rgb(209,63,21)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1311.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (1 samples, 0.02%)</title><rect x="63.7807%" y="1285" width="0.0185%" height="15" fill="rgb(226,22,11)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1295.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="63.7807%" y="1269" width="0.0185%" height="15" fill="rgb(216,82,30)" fg:x="3455" fg:w="1"/><text x="64.0307%" y="1279.50"></text></g><g><title>MurmurHash3 (1 samples, 0.02%)</title><rect x="63.7992%" y="1525" width="0.0185%" height="15" fill="rgb(246,227,38)" fg:x="3456" fg:w="1"/><text x="64.0492%" y="1535.50"></text></g><g><title>[[heap]] (2 samples, 0.04%)</title><rect x="63.8176%" y="1525" width="0.0369%" height="15" fill="rgb(251,203,53)" fg:x="3457" fg:w="2"/><text x="64.0676%" y="1535.50"></text></g><g><title>MurmurHash3 (2 samples, 0.04%)</title><rect x="63.8176%" y="1509" width="0.0369%" height="15" fill="rgb(254,101,1)" fg:x="3457" fg:w="2"/><text x="64.0676%" y="1519.50"></text></g><g><title>_int_free (31 samples, 0.57%)</title><rect x="63.8545%" y="1509" width="0.5723%" height="15" fill="rgb(241,180,5)" fg:x="3459" fg:w="31"/><text x="64.1045%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 0.24%)</title><rect x="64.4268%" y="1509" width="0.2400%" height="15" fill="rgb(218,168,4)" fg:x="3490" fg:w="13"/><text x="64.6768%" y="1519.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="64.6668%" y="1509" width="0.0185%" height="15" fill="rgb(224,223,32)" fg:x="3503" fg:w="1"/><text x="64.9168%" y="1519.50"></text></g><g><title>[anon] (49 samples, 0.90%)</title><rect x="63.8545%" y="1525" width="0.9046%" height="15" fill="rgb(236,106,22)" fg:x="3459" fg:w="49"/><text x="64.1045%" y="1535.50"></text></g><g><title>operator delete (4 samples, 0.07%)</title><rect x="64.6853%" y="1509" width="0.0738%" height="15" fill="rgb(206,121,5)" fg:x="3504" fg:w="4"/><text x="64.9353%" y="1519.50"></text></g><g><title>MurmurHash3 (3 samples, 0.06%)</title><rect x="64.7591%" y="1509" width="0.0554%" height="15" fill="rgb(233,87,28)" fg:x="3508" fg:w="3"/><text x="65.0091%" y="1519.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.8145%" y="1509" width="0.0369%" height="15" fill="rgb(236,137,17)" fg:x="3511" fg:w="2"/><text x="65.0645%" y="1519.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.8145%" y="1493" width="0.0369%" height="15" fill="rgb(209,183,38)" fg:x="3511" fg:w="2"/><text x="65.0645%" y="1503.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.8145%" y="1477" width="0.0369%" height="15" fill="rgb(206,162,44)" fg:x="3511" fg:w="2"/><text x="65.0645%" y="1487.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="64.8514%" y="1509" width="0.0185%" height="15" fill="rgb(237,70,39)" fg:x="3513" fg:w="1"/><text x="65.1014%" y="1519.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="64.8699%" y="1509" width="0.0738%" height="15" fill="rgb(212,176,5)" fg:x="3514" fg:w="4"/><text x="65.1199%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="64.9437%" y="1509" width="0.0738%" height="15" fill="rgb(232,95,16)" fg:x="3518" fg:w="4"/><text x="65.1937%" y="1519.50"></text></g><g><title>operator delete (2 samples, 0.04%)</title><rect x="65.0175%" y="1509" width="0.0369%" height="15" fill="rgb(219,115,35)" fg:x="3522" fg:w="2"/><text x="65.2675%" y="1519.50"></text></g><g><title>[unknown] (17 samples, 0.31%)</title><rect x="64.7591%" y="1525" width="0.3138%" height="15" fill="rgb(251,67,27)" fg:x="3508" fg:w="17"/><text x="65.0091%" y="1535.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (1 samples, 0.02%)</title><rect x="65.0545%" y="1509" width="0.0185%" height="15" fill="rgb(222,95,40)" fg:x="3524" fg:w="1"/><text x="65.3045%" y="1519.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="65.0729%" y="1349" width="0.0185%" height="15" fill="rgb(250,35,16)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1359.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="65.0729%" y="1333" width="0.0185%" height="15" fill="rgb(224,86,44)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1343.50"></text></g><g><title>std::__condvar::wait_until (1 samples, 0.02%)</title><rect x="65.0729%" y="1317" width="0.0185%" height="15" fill="rgb(237,53,53)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1327.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (1 samples, 0.02%)</title><rect x="65.0729%" y="1301" width="0.0185%" height="15" fill="rgb(208,171,33)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1311.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.02%)</title><rect x="65.0729%" y="1285" width="0.0185%" height="15" fill="rgb(222,64,27)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0729%" y="1269" width="0.0185%" height="15" fill="rgb(221,121,35)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0729%" y="1253" width="0.0185%" height="15" fill="rgb(228,137,42)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0729%" y="1237" width="0.0185%" height="15" fill="rgb(227,54,21)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0729%" y="1221" width="0.0185%" height="15" fill="rgb(240,168,33)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0729%" y="1205" width="0.0185%" height="15" fill="rgb(243,159,6)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0729%" y="1189" width="0.0185%" height="15" fill="rgb(205,211,41)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0729%" y="1173" width="0.0185%" height="15" fill="rgb(253,30,1)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0729%" y="1157" width="0.0185%" height="15" fill="rgb(226,80,18)" fg:x="3525" fg:w="1"/><text x="65.3229%" y="1167.50"></text></g><g><title>CRollingBloomFilter::insert (1 samples, 0.02%)</title><rect x="65.0914%" y="1189" width="0.0185%" height="15" fill="rgb(253,156,46)" fg:x="3526" fg:w="1"/><text x="65.3414%" y="1199.50"></text></g><g><title>CRollingBloomFilter::insert (1 samples, 0.02%)</title><rect x="65.0914%" y="1173" width="0.0185%" height="15" fill="rgb(248,87,27)" fg:x="3526" fg:w="1"/><text x="65.3414%" y="1183.50"></text></g><g><title>CRollingBloomFilter::insert (1 samples, 0.02%)</title><rect x="65.8483%" y="1125" width="0.0185%" height="15" fill="rgb(227,122,2)" fg:x="3567" fg:w="1"/><text x="66.0983%" y="1135.50"></text></g><g><title>FastRange32 (6 samples, 0.11%)</title><rect x="65.8667%" y="1125" width="0.1108%" height="15" fill="rgb(229,94,39)" fg:x="3568" fg:w="6"/><text x="66.1167%" y="1135.50"></text></g><g><title>CRollingBloomFilter::insert (39 samples, 0.72%)</title><rect x="65.4237%" y="1141" width="0.7200%" height="15" fill="rgb(225,173,31)" fg:x="3544" fg:w="39"/><text x="65.6737%" y="1151.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (9 samples, 0.17%)</title><rect x="65.9775%" y="1125" width="0.1661%" height="15" fill="rgb(239,176,30)" fg:x="3574" fg:w="9"/><text x="66.2275%" y="1135.50"></text></g><g><title>MurmurHash3 (62 samples, 1.14%)</title><rect x="66.1436%" y="1141" width="1.1445%" height="15" fill="rgb(212,104,21)" fg:x="3583" fg:w="62"/><text x="66.3936%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (10 samples, 0.18%)</title><rect x="67.1036%" y="1125" width="0.1846%" height="15" fill="rgb(240,209,40)" fg:x="3635" fg:w="10"/><text x="67.3536%" y="1135.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (10 samples, 0.18%)</title><rect x="67.1036%" y="1109" width="0.1846%" height="15" fill="rgb(234,195,5)" fg:x="3635" fg:w="10"/><text x="67.3536%" y="1119.50"></text></g><g><title>CRollingBloomFilter::insert (109 samples, 2.01%)</title><rect x="65.2944%" y="1157" width="2.0122%" height="15" fill="rgb(238,213,1)" fg:x="3537" fg:w="109"/><text x="65.5444%" y="1167.50">C..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (1 samples, 0.02%)</title><rect x="67.2882%" y="1141" width="0.0185%" height="15" fill="rgb(235,182,54)" fg:x="3645" fg:w="1"/><text x="67.5382%" y="1151.50"></text></g><g><title>FastRange32 (7 samples, 0.13%)</title><rect x="67.3066%" y="1157" width="0.1292%" height="15" fill="rgb(229,50,46)" fg:x="3646" fg:w="7"/><text x="67.5566%" y="1167.50"></text></g><g><title>RollingBloomHash (2 samples, 0.04%)</title><rect x="67.4359%" y="1157" width="0.0369%" height="15" fill="rgb(219,145,13)" fg:x="3653" fg:w="2"/><text x="67.6859%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1157" width="0.1477%" height="15" fill="rgb(220,226,10)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1141" width="0.1477%" height="15" fill="rgb(248,47,30)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1125" width="0.1477%" height="15" fill="rgb(231,209,44)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1109" width="0.1477%" height="15" fill="rgb(209,80,30)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1093" width="0.1477%" height="15" fill="rgb(232,9,14)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1077" width="0.1477%" height="15" fill="rgb(243,91,43)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1087.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1061" width="0.1477%" height="15" fill="rgb(231,90,52)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1071.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1045" width="0.1477%" height="15" fill="rgb(253,192,44)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1055.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1029" width="0.1477%" height="15" fill="rgb(241,66,31)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1039.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="67.4728%" y="1013" width="0.1477%" height="15" fill="rgb(235,81,37)" fg:x="3655" fg:w="8"/><text x="67.7228%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="67.5282%" y="997" width="0.0923%" height="15" fill="rgb(223,221,9)" fg:x="3658" fg:w="5"/><text x="67.7782%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="67.5282%" y="981" width="0.0923%" height="15" fill="rgb(242,180,7)" fg:x="3658" fg:w="5"/><text x="67.7782%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="67.5282%" y="965" width="0.0923%" height="15" fill="rgb(243,78,19)" fg:x="3658" fg:w="5"/><text x="67.7782%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="67.5835%" y="949" width="0.0369%" height="15" fill="rgb(233,23,17)" fg:x="3661" fg:w="2"/><text x="67.8335%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="67.5835%" y="933" width="0.0369%" height="15" fill="rgb(252,122,45)" fg:x="3661" fg:w="2"/><text x="67.8335%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="67.5835%" y="917" width="0.0369%" height="15" fill="rgb(247,108,20)" fg:x="3661" fg:w="2"/><text x="67.8335%" y="927.50"></text></g><g><title>CRollingBloomFilter::insert (140 samples, 2.58%)</title><rect x="65.1098%" y="1173" width="2.5845%" height="15" fill="rgb(235,84,21)" fg:x="3527" fg:w="140"/><text x="65.3598%" y="1183.50">CR..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (4 samples, 0.07%)</title><rect x="67.6205%" y="1157" width="0.0738%" height="15" fill="rgb(247,129,10)" fg:x="3663" fg:w="4"/><text x="67.8705%" y="1167.50"></text></g><g><title>MurmurHash3 (82 samples, 1.51%)</title><rect x="67.6943%" y="1173" width="1.5138%" height="15" fill="rgb(208,173,14)" fg:x="3667" fg:w="82"/><text x="67.9443%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (11 samples, 0.20%)</title><rect x="69.0050%" y="1157" width="0.2031%" height="15" fill="rgb(236,31,38)" fg:x="3738" fg:w="11"/><text x="69.2550%" y="1167.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (11 samples, 0.20%)</title><rect x="69.0050%" y="1141" width="0.2031%" height="15" fill="rgb(232,65,17)" fg:x="3738" fg:w="11"/><text x="69.2550%" y="1151.50"></text></g><g><title>TxOrphanage::EraseForBlock (1 samples, 0.02%)</title><rect x="69.2265%" y="1141" width="0.0185%" height="15" fill="rgb(224,45,49)" fg:x="3750" fg:w="1"/><text x="69.4765%" y="1151.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (3 samples, 0.06%)</title><rect x="69.2080%" y="1157" width="0.0554%" height="15" fill="rgb(225,2,53)" fg:x="3749" fg:w="3"/><text x="69.4580%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="69.2450%" y="1141" width="0.0185%" height="15" fill="rgb(248,210,53)" fg:x="3751" fg:w="1"/><text x="69.4950%" y="1151.50"></text></g><g><title>TxOrphanage::EraseForBlock (4 samples, 0.07%)</title><rect x="69.2080%" y="1173" width="0.0738%" height="15" fill="rgb(211,1,30)" fg:x="3749" fg:w="4"/><text x="69.4580%" y="1183.50"></text></g><g><title>std::vector&lt;transaction_identifier&lt;true&gt;, std::allocator&lt;transaction_identifier&lt;true&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="69.2634%" y="1157" width="0.0185%" height="15" fill="rgb(224,96,15)" fg:x="3752" fg:w="1"/><text x="69.5134%" y="1167.50"></text></g><g><title>std::_Vector_base&lt;transaction_identifier&lt;true&gt;, std::allocator&lt;transaction_identifier&lt;true&gt; &gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="69.2634%" y="1141" width="0.0185%" height="15" fill="rgb(252,45,11)" fg:x="3752" fg:w="1"/><text x="69.5134%" y="1151.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (228 samples, 4.21%)</title><rect x="65.0914%" y="1285" width="4.2090%" height="15" fill="rgb(220,125,38)" fg:x="3526" fg:w="228"/><text x="65.3414%" y="1295.50">__inv..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (228 samples, 4.21%)</title><rect x="65.0914%" y="1269" width="4.2090%" height="15" fill="rgb(243,161,33)" fg:x="3526" fg:w="228"/><text x="65.3414%" y="1279.50">__inv..</text></g><g><title>operator (228 samples, 4.21%)</title><rect x="65.0914%" y="1253" width="4.2090%" height="15" fill="rgb(248,197,34)" fg:x="3526" fg:w="228"/><text x="65.3414%" y="1263.50">opera..</text></g><g><title>operator (228 samples, 4.21%)</title><rect x="65.0914%" y="1237" width="4.2090%" height="15" fill="rgb(228,165,23)" fg:x="3526" fg:w="228"/><text x="65.3414%" y="1247.50">opera..</text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (228 samples, 4.21%)</title><rect x="65.0914%" y="1221" width="4.2090%" height="15" fill="rgb(236,94,38)" fg:x="3526" fg:w="228"/><text x="65.3414%" y="1231.50">Itera..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (228 samples, 4.21%)</title><rect x="65.0914%" y="1205" width="4.2090%" height="15" fill="rgb(220,13,23)" fg:x="3526" fg:w="228"/><text x="65.3414%" y="1215.50">std::..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (227 samples, 4.19%)</title><rect x="65.1098%" y="1189" width="4.1905%" height="15" fill="rgb(234,26,39)" fg:x="3527" fg:w="227"/><text x="65.3598%" y="1199.50">node:..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (1 samples, 0.02%)</title><rect x="69.2819%" y="1173" width="0.0185%" height="15" fill="rgb(205,117,44)" fg:x="3753" fg:w="1"/><text x="69.5319%" y="1183.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="69.3004%" y="1285" width="0.0369%" height="15" fill="rgb(250,42,2)" fg:x="3754" fg:w="2"/><text x="69.5504%" y="1295.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="69.3004%" y="1269" width="0.0369%" height="15" fill="rgb(223,83,14)" fg:x="3754" fg:w="2"/><text x="69.5504%" y="1279.50"></text></g><g><title>operator (2 samples, 0.04%)</title><rect x="69.3004%" y="1253" width="0.0369%" height="15" fill="rgb(241,147,50)" fg:x="3754" fg:w="2"/><text x="69.5504%" y="1263.50"></text></g><g><title>operator (2 samples, 0.04%)</title><rect x="69.3004%" y="1237" width="0.0369%" height="15" fill="rgb(218,90,6)" fg:x="3754" fg:w="2"/><text x="69.5504%" y="1247.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (2 samples, 0.04%)</title><rect x="69.3004%" y="1221" width="0.0369%" height="15" fill="rgb(210,191,5)" fg:x="3754" fg:w="2"/><text x="69.5504%" y="1231.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (2 samples, 0.04%)</title><rect x="69.3004%" y="1205" width="0.0369%" height="15" fill="rgb(225,139,19)" fg:x="3754" fg:w="2"/><text x="69.5504%" y="1215.50"></text></g><g><title>CBlockPolicyEstimator::processBlock (2 samples, 0.04%)</title><rect x="69.3004%" y="1189" width="0.0369%" height="15" fill="rgb(210,1,33)" fg:x="3754" fg:w="2"/><text x="69.5504%" y="1199.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (2 samples, 0.04%)</title><rect x="69.3004%" y="1173" width="0.0369%" height="15" fill="rgb(213,50,3)" fg:x="3754" fg:w="2"/><text x="69.5504%" y="1183.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (231 samples, 4.26%)</title><rect x="65.0914%" y="1317" width="4.2644%" height="15" fill="rgb(234,227,4)" fg:x="3526" fg:w="231"/><text x="65.3414%" y="1327.50">std::..</text></g><g><title>_M_invoke (231 samples, 4.26%)</title><rect x="65.0914%" y="1301" width="4.2644%" height="15" fill="rgb(246,63,5)" fg:x="3526" fg:w="231"/><text x="65.3414%" y="1311.50">_M_in..</text></g><g><title>__invoke_r&lt;void, ValidationSignals::UpdatedBlockTip(const CBlockIndex*, const CBlockIndex*, bool)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="69.3373%" y="1285" width="0.0185%" height="15" fill="rgb(245,136,27)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1295.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::UpdatedBlockTip(const CBlockIndex*, const CBlockIndex*, bool)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="69.3373%" y="1269" width="0.0185%" height="15" fill="rgb(247,199,27)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1279.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::UpdatedBlockTip(CBlockIndex const*, CBlockIndex const*, bool)::{lambda()#2}&gt;::_M_invoke (1 samples, 0.02%)</title><rect x="69.3373%" y="1253" width="0.0185%" height="15" fill="rgb(252,158,49)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1263.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.02%)</title><rect x="69.3373%" y="1237" width="0.0185%" height="15" fill="rgb(254,73,1)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1247.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="69.3373%" y="1221" width="0.0185%" height="15" fill="rgb(248,93,19)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1231.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="69.3373%" y="1205" width="0.0185%" height="15" fill="rgb(206,67,5)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1215.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="69.3373%" y="1189" width="0.0185%" height="15" fill="rgb(209,210,4)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1199.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="69.3373%" y="1173" width="0.0185%" height="15" fill="rgb(214,185,36)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1183.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="69.3373%" y="1157" width="0.0185%" height="15" fill="rgb(233,191,26)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1167.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="69.3373%" y="1141" width="0.0185%" height="15" fill="rgb(248,94,17)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1151.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="69.3373%" y="1125" width="0.0185%" height="15" fill="rgb(250,64,4)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1135.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="69.3373%" y="1109" width="0.0185%" height="15" fill="rgb(218,41,53)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.3373%" y="1093" width="0.0185%" height="15" fill="rgb(251,176,28)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.3373%" y="1077" width="0.0185%" height="15" fill="rgb(247,22,9)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.3373%" y="1061" width="0.0185%" height="15" fill="rgb(218,201,14)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.3373%" y="1045" width="0.0185%" height="15" fill="rgb(218,94,10)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="69.3373%" y="1029" width="0.0185%" height="15" fill="rgb(222,183,52)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.3373%" y="1013" width="0.0185%" height="15" fill="rgb(242,140,25)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.3373%" y="997" width="0.0185%" height="15" fill="rgb(235,197,38)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.3373%" y="981" width="0.0185%" height="15" fill="rgb(237,136,15)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="991.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="69.3373%" y="965" width="0.0185%" height="15" fill="rgb(223,44,49)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="975.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="69.3373%" y="949" width="0.0185%" height="15" fill="rgb(227,71,15)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="959.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="69.3373%" y="933" width="0.0185%" height="15" fill="rgb(225,153,20)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="943.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="69.3373%" y="917" width="0.0185%" height="15" fill="rgb(210,190,26)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="927.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="69.3373%" y="901" width="0.0185%" height="15" fill="rgb(223,147,5)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="911.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="69.3373%" y="885" width="0.0185%" height="15" fill="rgb(207,14,23)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="895.50"></text></g><g><title>[[crc32c_intel]] (1 samples, 0.02%)</title><rect x="69.3373%" y="869" width="0.0185%" height="15" fill="rgb(211,195,53)" fg:x="3756" fg:w="1"/><text x="69.5873%" y="879.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.06%)</title><rect x="69.3557%" y="1141" width="0.0554%" height="15" fill="rgb(237,75,46)" fg:x="3757" fg:w="3"/><text x="69.6057%" y="1151.50"></text></g><g><title>_int_free (3 samples, 0.06%)</title><rect x="69.3557%" y="1125" width="0.0554%" height="15" fill="rgb(254,55,14)" fg:x="3757" fg:w="3"/><text x="69.6057%" y="1135.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (3 samples, 0.06%)</title><rect x="69.3557%" y="1109" width="0.0554%" height="15" fill="rgb(230,185,30)" fg:x="3757" fg:w="3"/><text x="69.6057%" y="1119.50"></text></g><g><title>malloc_consolidate (3 samples, 0.06%)</title><rect x="69.3557%" y="1093" width="0.0554%" height="15" fill="rgb(220,14,11)" fg:x="3757" fg:w="3"/><text x="69.6057%" y="1103.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.13%)</title><rect x="69.4480%" y="869" width="0.1292%" height="15" fill="rgb(215,169,44)" fg:x="3762" fg:w="7"/><text x="69.6980%" y="879.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="69.4480%" y="853" width="0.1292%" height="15" fill="rgb(253,203,20)" fg:x="3762" fg:w="7"/><text x="69.6980%" y="863.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="69.4665%" y="837" width="0.1108%" height="15" fill="rgb(229,225,17)" fg:x="3763" fg:w="6"/><text x="69.7165%" y="847.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="69.4665%" y="821" width="0.1108%" height="15" fill="rgb(236,76,26)" fg:x="3763" fg:w="6"/><text x="69.7165%" y="831.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="69.4665%" y="805" width="0.1108%" height="15" fill="rgb(234,15,30)" fg:x="3763" fg:w="6"/><text x="69.7165%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="69.4850%" y="789" width="0.0923%" height="15" fill="rgb(211,113,48)" fg:x="3764" fg:w="5"/><text x="69.7350%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.5588%" y="773" width="0.0185%" height="15" fill="rgb(221,31,36)" fg:x="3768" fg:w="1"/><text x="69.8088%" y="783.50"></text></g><g><title>__lll_lock_wait_private (65 samples, 1.20%)</title><rect x="69.6880%" y="853" width="1.1999%" height="15" fill="rgb(215,118,52)" fg:x="3775" fg:w="65"/><text x="69.9380%" y="863.50"></text></g><g><title>[unknown] (59 samples, 1.09%)</title><rect x="69.7988%" y="837" width="1.0892%" height="15" fill="rgb(241,151,27)" fg:x="3781" fg:w="59"/><text x="70.0488%" y="847.50"></text></g><g><title>[unknown] (58 samples, 1.07%)</title><rect x="69.8172%" y="821" width="1.0707%" height="15" fill="rgb(253,51,3)" fg:x="3782" fg:w="58"/><text x="70.0672%" y="831.50"></text></g><g><title>[unknown] (55 samples, 1.02%)</title><rect x="69.8726%" y="805" width="1.0153%" height="15" fill="rgb(216,201,24)" fg:x="3785" fg:w="55"/><text x="70.1226%" y="815.50"></text></g><g><title>[unknown] (53 samples, 0.98%)</title><rect x="69.9095%" y="789" width="0.9784%" height="15" fill="rgb(231,107,4)" fg:x="3787" fg:w="53"/><text x="70.1595%" y="799.50"></text></g><g><title>[unknown] (52 samples, 0.96%)</title><rect x="69.9280%" y="773" width="0.9599%" height="15" fill="rgb(243,97,54)" fg:x="3788" fg:w="52"/><text x="70.1780%" y="783.50"></text></g><g><title>[unknown] (49 samples, 0.90%)</title><rect x="69.9834%" y="757" width="0.9046%" height="15" fill="rgb(221,32,51)" fg:x="3791" fg:w="49"/><text x="70.2334%" y="767.50"></text></g><g><title>[unknown] (46 samples, 0.85%)</title><rect x="70.0388%" y="741" width="0.8492%" height="15" fill="rgb(218,171,35)" fg:x="3794" fg:w="46"/><text x="70.2888%" y="751.50"></text></g><g><title>[unknown] (40 samples, 0.74%)</title><rect x="70.1495%" y="725" width="0.7384%" height="15" fill="rgb(214,20,53)" fg:x="3800" fg:w="40"/><text x="70.3995%" y="735.50"></text></g><g><title>[unknown] (33 samples, 0.61%)</title><rect x="70.2788%" y="709" width="0.6092%" height="15" fill="rgb(239,9,52)" fg:x="3807" fg:w="33"/><text x="70.5288%" y="719.50"></text></g><g><title>[unknown] (28 samples, 0.52%)</title><rect x="70.3711%" y="693" width="0.5169%" height="15" fill="rgb(215,114,45)" fg:x="3812" fg:w="28"/><text x="70.6211%" y="703.50"></text></g><g><title>[unknown] (17 samples, 0.31%)</title><rect x="70.5741%" y="677" width="0.3138%" height="15" fill="rgb(208,118,9)" fg:x="3823" fg:w="17"/><text x="70.8241%" y="687.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="70.7033%" y="661" width="0.1846%" height="15" fill="rgb(235,7,39)" fg:x="3830" fg:w="10"/><text x="70.9533%" y="671.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="70.7403%" y="645" width="0.1477%" height="15" fill="rgb(243,225,15)" fg:x="3832" fg:w="8"/><text x="70.9903%" y="655.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="70.7403%" y="629" width="0.1477%" height="15" fill="rgb(225,216,18)" fg:x="3832" fg:w="8"/><text x="70.9903%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="70.7772%" y="613" width="0.1108%" height="15" fill="rgb(233,36,38)" fg:x="3834" fg:w="6"/><text x="71.0272%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="70.8326%" y="597" width="0.0554%" height="15" fill="rgb(239,88,23)" fg:x="3837" fg:w="3"/><text x="71.0826%" y="607.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (4 samples, 0.07%)</title><rect x="70.8879%" y="853" width="0.0738%" height="15" fill="rgb(219,181,35)" fg:x="3840" fg:w="4"/><text x="71.1379%" y="863.50"></text></g><g><title>malloc_consolidate (4 samples, 0.07%)</title><rect x="70.8879%" y="837" width="0.0738%" height="15" fill="rgb(215,18,46)" fg:x="3840" fg:w="4"/><text x="71.1379%" y="847.50"></text></g><g><title>cfree@GLIBC_2.2.5 (85 samples, 1.57%)</title><rect x="69.4480%" y="885" width="1.5691%" height="15" fill="rgb(241,38,11)" fg:x="3762" fg:w="85"/><text x="69.6980%" y="895.50"></text></g><g><title>_int_free (78 samples, 1.44%)</title><rect x="69.5773%" y="869" width="1.4399%" height="15" fill="rgb(248,169,45)" fg:x="3769" fg:w="78"/><text x="69.8273%" y="879.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.06%)</title><rect x="70.9618%" y="853" width="0.0554%" height="15" fill="rgb(239,50,49)" fg:x="3844" fg:w="3"/><text x="71.2118%" y="863.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.04%)</title><rect x="70.9802%" y="837" width="0.0369%" height="15" fill="rgb(231,96,31)" fg:x="3845" fg:w="2"/><text x="71.2302%" y="847.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (7 samples, 0.13%)</title><rect x="71.0172%" y="661" width="0.1292%" height="15" fill="rgb(224,193,37)" fg:x="3847" fg:w="7"/><text x="71.2672%" y="671.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (7 samples, 0.13%)</title><rect x="71.0172%" y="645" width="0.1292%" height="15" fill="rgb(227,153,50)" fg:x="3847" fg:w="7"/><text x="71.2672%" y="655.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (7 samples, 0.13%)</title><rect x="71.0172%" y="629" width="0.1292%" height="15" fill="rgb(249,228,3)" fg:x="3847" fg:w="7"/><text x="71.2672%" y="639.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (7 samples, 0.13%)</title><rect x="71.0172%" y="613" width="0.1292%" height="15" fill="rgb(219,164,43)" fg:x="3847" fg:w="7"/><text x="71.2672%" y="623.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (7 samples, 0.13%)</title><rect x="71.0172%" y="597" width="0.1292%" height="15" fill="rgb(216,45,41)" fg:x="3847" fg:w="7"/><text x="71.2672%" y="607.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.13%)</title><rect x="71.0172%" y="581" width="0.1292%" height="15" fill="rgb(210,226,51)" fg:x="3847" fg:w="7"/><text x="71.2672%" y="591.50"></text></g><g><title>_int_free (6 samples, 0.11%)</title><rect x="71.0356%" y="565" width="0.1108%" height="15" fill="rgb(209,117,49)" fg:x="3848" fg:w="6"/><text x="71.2856%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.2572%" y="453" width="0.0738%" height="15" fill="rgb(206,196,24)" fg:x="3860" fg:w="4"/><text x="71.5072%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.2572%" y="437" width="0.0738%" height="15" fill="rgb(253,218,3)" fg:x="3860" fg:w="4"/><text x="71.5072%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="71.2756%" y="421" width="0.0554%" height="15" fill="rgb(252,166,2)" fg:x="3861" fg:w="3"/><text x="71.5256%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="71.2756%" y="405" width="0.0554%" height="15" fill="rgb(236,218,26)" fg:x="3861" fg:w="3"/><text x="71.5256%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="71.2756%" y="389" width="0.0554%" height="15" fill="rgb(254,84,19)" fg:x="3861" fg:w="3"/><text x="71.5256%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="71.2756%" y="373" width="0.0554%" height="15" fill="rgb(219,137,29)" fg:x="3861" fg:w="3"/><text x="71.5256%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="71.2756%" y="357" width="0.0554%" height="15" fill="rgb(227,47,52)" fg:x="3861" fg:w="3"/><text x="71.5256%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="71.2756%" y="341" width="0.0554%" height="15" fill="rgb(229,167,24)" fg:x="3861" fg:w="3"/><text x="71.5256%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="71.2756%" y="325" width="0.0554%" height="15" fill="rgb(233,164,1)" fg:x="3861" fg:w="3"/><text x="71.5256%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="71.2756%" y="309" width="0.0554%" height="15" fill="rgb(218,88,48)" fg:x="3861" fg:w="3"/><text x="71.5256%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="71.2756%" y="293" width="0.0554%" height="15" fill="rgb(226,214,24)" fg:x="3861" fg:w="3"/><text x="71.5256%" y="303.50"></text></g><g><title>_int_free (10 samples, 0.18%)</title><rect x="71.1833%" y="469" width="0.1846%" height="15" fill="rgb(233,29,12)" fg:x="3856" fg:w="10"/><text x="71.4333%" y="479.50"></text></g><g><title>__lll_lock_wait_private (2 samples, 0.04%)</title><rect x="71.3310%" y="453" width="0.0369%" height="15" fill="rgb(219,120,34)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="437" width="0.0369%" height="15" fill="rgb(226,78,44)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="421" width="0.0369%" height="15" fill="rgb(240,15,48)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="405" width="0.0369%" height="15" fill="rgb(253,176,7)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="389" width="0.0369%" height="15" fill="rgb(206,166,28)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="373" width="0.0369%" height="15" fill="rgb(241,53,51)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="357" width="0.0369%" height="15" fill="rgb(249,112,30)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="341" width="0.0369%" height="15" fill="rgb(217,85,30)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="325" width="0.0369%" height="15" fill="rgb(233,49,7)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="309" width="0.0369%" height="15" fill="rgb(234,109,9)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="293" width="0.0369%" height="15" fill="rgb(253,95,22)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="277" width="0.0369%" height="15" fill="rgb(233,176,25)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3310%" y="261" width="0.0369%" height="15" fill="rgb(236,33,39)" fg:x="3864" fg:w="2"/><text x="71.5810%" y="271.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (20 samples, 0.37%)</title><rect x="71.0172%" y="805" width="0.3692%" height="15" fill="rgb(223,226,42)" fg:x="3847" fg:w="20"/><text x="71.2672%" y="815.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (20 samples, 0.37%)</title><rect x="71.0172%" y="789" width="0.3692%" height="15" fill="rgb(216,99,33)" fg:x="3847" fg:w="20"/><text x="71.2672%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (20 samples, 0.37%)</title><rect x="71.0172%" y="773" width="0.3692%" height="15" fill="rgb(235,84,23)" fg:x="3847" fg:w="20"/><text x="71.2672%" y="783.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (20 samples, 0.37%)</title><rect x="71.0172%" y="757" width="0.3692%" height="15" fill="rgb(232,2,27)" fg:x="3847" fg:w="20"/><text x="71.2672%" y="767.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (20 samples, 0.37%)</title><rect x="71.0172%" y="741" width="0.3692%" height="15" fill="rgb(241,23,22)" fg:x="3847" fg:w="20"/><text x="71.2672%" y="751.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (20 samples, 0.37%)</title><rect x="71.0172%" y="725" width="0.3692%" height="15" fill="rgb(211,73,27)" fg:x="3847" fg:w="20"/><text x="71.2672%" y="735.50"></text></g><g><title>CTxIn::~CTxIn (20 samples, 0.37%)</title><rect x="71.0172%" y="709" width="0.3692%" height="15" fill="rgb(235,109,49)" fg:x="3847" fg:w="20"/><text x="71.2672%" y="719.50"></text></g><g><title>CScriptWitness::~CScriptWitness (20 samples, 0.37%)</title><rect x="71.0172%" y="693" width="0.3692%" height="15" fill="rgb(230,99,29)" fg:x="3847" fg:w="20"/><text x="71.2672%" y="703.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (20 samples, 0.37%)</title><rect x="71.0172%" y="677" width="0.3692%" height="15" fill="rgb(245,199,7)" fg:x="3847" fg:w="20"/><text x="71.2672%" y="687.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (13 samples, 0.24%)</title><rect x="71.1464%" y="661" width="0.2400%" height="15" fill="rgb(217,179,10)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="671.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (13 samples, 0.24%)</title><rect x="71.1464%" y="645" width="0.2400%" height="15" fill="rgb(254,99,47)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="655.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (13 samples, 0.24%)</title><rect x="71.1464%" y="629" width="0.2400%" height="15" fill="rgb(251,121,7)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="639.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (13 samples, 0.24%)</title><rect x="71.1464%" y="613" width="0.2400%" height="15" fill="rgb(250,177,26)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="623.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (13 samples, 0.24%)</title><rect x="71.1464%" y="597" width="0.2400%" height="15" fill="rgb(232,88,15)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="607.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (13 samples, 0.24%)</title><rect x="71.1464%" y="581" width="0.2400%" height="15" fill="rgb(251,54,54)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="591.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (13 samples, 0.24%)</title><rect x="71.1464%" y="565" width="0.2400%" height="15" fill="rgb(208,177,15)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="575.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (13 samples, 0.24%)</title><rect x="71.1464%" y="549" width="0.2400%" height="15" fill="rgb(205,97,32)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="559.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (13 samples, 0.24%)</title><rect x="71.1464%" y="533" width="0.2400%" height="15" fill="rgb(217,192,13)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="543.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (13 samples, 0.24%)</title><rect x="71.1464%" y="517" width="0.2400%" height="15" fill="rgb(215,163,41)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="527.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (13 samples, 0.24%)</title><rect x="71.1464%" y="501" width="0.2400%" height="15" fill="rgb(246,83,29)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="511.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 0.24%)</title><rect x="71.1464%" y="485" width="0.2400%" height="15" fill="rgb(219,2,45)" fg:x="3854" fg:w="13"/><text x="71.3964%" y="495.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="71.3679%" y="469" width="0.0185%" height="15" fill="rgb(242,215,33)" fg:x="3866" fg:w="1"/><text x="71.6179%" y="479.50"></text></g><g><title>__lll_lock_wake_private (2 samples, 0.04%)</title><rect x="71.3864%" y="693" width="0.0369%" height="15" fill="rgb(217,1,6)" fg:x="3867" fg:w="2"/><text x="71.6364%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3864%" y="677" width="0.0369%" height="15" fill="rgb(207,85,52)" fg:x="3867" fg:w="2"/><text x="71.6364%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.3864%" y="661" width="0.0369%" height="15" fill="rgb(231,171,19)" fg:x="3867" fg:w="2"/><text x="71.6364%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4048%" y="645" width="0.0185%" height="15" fill="rgb(207,128,4)" fg:x="3868" fg:w="1"/><text x="71.6548%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4048%" y="629" width="0.0185%" height="15" fill="rgb(219,208,4)" fg:x="3868" fg:w="1"/><text x="71.6548%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4048%" y="613" width="0.0185%" height="15" fill="rgb(235,161,42)" fg:x="3868" fg:w="1"/><text x="71.6548%" y="623.50"></text></g><g><title>_int_free (3 samples, 0.06%)</title><rect x="71.4233%" y="693" width="0.0554%" height="15" fill="rgb(247,218,18)" fg:x="3869" fg:w="3"/><text x="71.6733%" y="703.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="71.4602%" y="677" width="0.0185%" height="15" fill="rgb(232,114,51)" fg:x="3871" fg:w="1"/><text x="71.7102%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4602%" y="661" width="0.0185%" height="15" fill="rgb(222,95,3)" fg:x="3871" fg:w="1"/><text x="71.7102%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4602%" y="645" width="0.0185%" height="15" fill="rgb(240,65,29)" fg:x="3871" fg:w="1"/><text x="71.7102%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4602%" y="629" width="0.0185%" height="15" fill="rgb(249,209,20)" fg:x="3871" fg:w="1"/><text x="71.7102%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4602%" y="613" width="0.0185%" height="15" fill="rgb(241,48,37)" fg:x="3871" fg:w="1"/><text x="71.7102%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4602%" y="597" width="0.0185%" height="15" fill="rgb(230,140,42)" fg:x="3871" fg:w="1"/><text x="71.7102%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4602%" y="581" width="0.0185%" height="15" fill="rgb(230,176,45)" fg:x="3871" fg:w="1"/><text x="71.7102%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4602%" y="565" width="0.0185%" height="15" fill="rgb(245,112,21)" fg:x="3871" fg:w="1"/><text x="71.7102%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.4602%" y="549" width="0.0185%" height="15" fill="rgb(207,183,35)" fg:x="3871" fg:w="1"/><text x="71.7102%" y="559.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (6 samples, 0.11%)</title><rect x="71.3864%" y="789" width="0.1108%" height="15" fill="rgb(227,44,33)" fg:x="3867" fg:w="6"/><text x="71.6364%" y="799.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (6 samples, 0.11%)</title><rect x="71.3864%" y="773" width="0.1108%" height="15" fill="rgb(246,120,21)" fg:x="3867" fg:w="6"/><text x="71.6364%" y="783.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::deallocate (6 samples, 0.11%)</title><rect x="71.3864%" y="757" width="0.1108%" height="15" fill="rgb(235,57,52)" fg:x="3867" fg:w="6"/><text x="71.6364%" y="767.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::deallocate (6 samples, 0.11%)</title><rect x="71.3864%" y="741" width="0.1108%" height="15" fill="rgb(238,84,10)" fg:x="3867" fg:w="6"/><text x="71.6364%" y="751.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::deallocate (6 samples, 0.11%)</title><rect x="71.3864%" y="725" width="0.1108%" height="15" fill="rgb(251,200,32)" fg:x="3867" fg:w="6"/><text x="71.6364%" y="735.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.11%)</title><rect x="71.3864%" y="709" width="0.1108%" height="15" fill="rgb(247,159,13)" fg:x="3867" fg:w="6"/><text x="71.6364%" y="719.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="71.4787%" y="693" width="0.0185%" height="15" fill="rgb(238,64,4)" fg:x="3872" fg:w="1"/><text x="71.7287%" y="703.50"></text></g><g><title>__clone (353 samples, 6.52%)</title><rect x="65.0729%" y="1525" width="6.5165%" height="15" fill="rgb(221,131,51)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1535.50">__clone</text></g><g><title>start_thread (353 samples, 6.52%)</title><rect x="65.0729%" y="1509" width="6.5165%" height="15" fill="rgb(242,5,29)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1519.50">start_thr..</text></g><g><title>execute_native_thread_routine (353 samples, 6.52%)</title><rect x="65.0729%" y="1493" width="6.5165%" height="15" fill="rgb(214,130,32)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1503.50">execute_n..</text></g><g><title>_M_run (353 samples, 6.52%)</title><rect x="65.0729%" y="1477" width="6.5165%" height="15" fill="rgb(244,210,16)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1487.50">_M_run</text></g><g><title>operator (353 samples, 6.52%)</title><rect x="65.0729%" y="1461" width="6.5165%" height="15" fill="rgb(234,48,26)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1471.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (353 samples, 6.52%)</title><rect x="65.0729%" y="1445" width="6.5165%" height="15" fill="rgb(231,82,38)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1455.50">_M_invoke..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (353 samples, 6.52%)</title><rect x="65.0729%" y="1429" width="6.5165%" height="15" fill="rgb(254,128,41)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1439.50">__invoke&lt;..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (353 samples, 6.52%)</title><rect x="65.0729%" y="1413" width="6.5165%" height="15" fill="rgb(212,73,49)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1423.50">std::thre..</text></g><g><title>util::TraceThread (353 samples, 6.52%)</title><rect x="65.0729%" y="1397" width="6.5165%" height="15" fill="rgb(205,62,54)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1407.50">util::Tra..</text></g><g><title>std::function&lt;void ()&gt;::operator (353 samples, 6.52%)</title><rect x="65.0729%" y="1381" width="6.5165%" height="15" fill="rgb(228,0,8)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1391.50">std::func..</text></g><g><title>CScheduler::serviceQueue (353 samples, 6.52%)</title><rect x="65.0729%" y="1365" width="6.5165%" height="15" fill="rgb(251,28,17)" fg:x="3525" fg:w="353"/><text x="65.3229%" y="1375.50">CSchedule..</text></g><g><title>std::function&lt;void ()&gt;::operator (352 samples, 6.50%)</title><rect x="65.0914%" y="1349" width="6.4981%" height="15" fill="rgb(238,105,27)" fg:x="3526" fg:w="352"/><text x="65.3414%" y="1359.50">std::func..</text></g><g><title>SerialTaskRunner::ProcessQueue (352 samples, 6.50%)</title><rect x="65.0914%" y="1333" width="6.4981%" height="15" fill="rgb(237,216,33)" fg:x="3526" fg:w="352"/><text x="65.3414%" y="1343.50">SerialTas..</text></g><g><title>std::function&lt;void ()&gt;::~function (121 samples, 2.23%)</title><rect x="69.3557%" y="1317" width="2.2337%" height="15" fill="rgb(229,228,25)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1327.50">s..</text></g><g><title>std::_Function_base::~_Function_base (121 samples, 2.23%)</title><rect x="69.3557%" y="1301" width="2.2337%" height="15" fill="rgb(233,75,23)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1311.50">s..</text></g><g><title>_M_manager (121 samples, 2.23%)</title><rect x="69.3557%" y="1285" width="2.2337%" height="15" fill="rgb(231,207,16)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1295.50">_..</text></g><g><title>_M_manager (121 samples, 2.23%)</title><rect x="69.3557%" y="1269" width="2.2337%" height="15" fill="rgb(231,191,45)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1279.50">_..</text></g><g><title>_M_destroy (121 samples, 2.23%)</title><rect x="69.3557%" y="1253" width="2.2337%" height="15" fill="rgb(224,133,17)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1263.50">_..</text></g><g><title>~&lt;lambda&gt; (121 samples, 2.23%)</title><rect x="69.3557%" y="1237" width="2.2337%" height="15" fill="rgb(209,178,27)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1247.50">~..</text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (121 samples, 2.23%)</title><rect x="69.3557%" y="1221" width="2.2337%" height="15" fill="rgb(218,37,11)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1231.50">s..</text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (121 samples, 2.23%)</title><rect x="69.3557%" y="1205" width="2.2337%" height="15" fill="rgb(251,226,25)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1215.50">s..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (121 samples, 2.23%)</title><rect x="69.3557%" y="1189" width="2.2337%" height="15" fill="rgb(209,222,27)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1199.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (121 samples, 2.23%)</title><rect x="69.3557%" y="1173" width="2.2337%" height="15" fill="rgb(238,22,21)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1183.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (121 samples, 2.23%)</title><rect x="69.3557%" y="1157" width="2.2337%" height="15" fill="rgb(233,161,25)" fg:x="3757" fg:w="121"/><text x="69.6057%" y="1167.50">s..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (118 samples, 2.18%)</title><rect x="69.4111%" y="1141" width="2.1783%" height="15" fill="rgb(226,122,53)" fg:x="3760" fg:w="118"/><text x="69.6611%" y="1151.50">s..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (118 samples, 2.18%)</title><rect x="69.4111%" y="1125" width="2.1783%" height="15" fill="rgb(220,123,17)" fg:x="3760" fg:w="118"/><text x="69.6611%" y="1135.50">v..</text></g><g><title>void std::_Destroy&lt;CBlock&gt; (118 samples, 2.18%)</title><rect x="69.4111%" y="1109" width="2.1783%" height="15" fill="rgb(230,224,35)" fg:x="3760" fg:w="118"/><text x="69.6611%" y="1119.50">v..</text></g><g><title>void std::destroy_at&lt;CBlock&gt; (118 samples, 2.18%)</title><rect x="69.4111%" y="1093" width="2.1783%" height="15" fill="rgb(246,83,8)" fg:x="3760" fg:w="118"/><text x="69.6611%" y="1103.50">v..</text></g><g><title>CBlock::~CBlock (118 samples, 2.18%)</title><rect x="69.4111%" y="1077" width="2.1783%" height="15" fill="rgb(230,214,17)" fg:x="3760" fg:w="118"/><text x="69.6611%" y="1087.50">C..</text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (118 samples, 2.18%)</title><rect x="69.4111%" y="1061" width="2.1783%" height="15" fill="rgb(222,97,18)" fg:x="3760" fg:w="118"/><text x="69.6611%" y="1071.50">s..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (118 samples, 2.18%)</title><rect x="69.4111%" y="1045" width="2.1783%" height="15" fill="rgb(206,79,1)" fg:x="3760" fg:w="118"/><text x="69.6611%" y="1055.50">v..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (118 samples, 2.18%)</title><rect x="69.4111%" y="1029" width="2.1783%" height="15" fill="rgb(214,121,34)" fg:x="3760" fg:w="118"/><text x="69.6611%" y="1039.50">v..</text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (118 samples, 2.18%)</title><rect x="69.4111%" y="1013" width="2.1783%" height="15" fill="rgb(249,199,46)" fg:x="3760" fg:w="118"/><text x="69.6611%" y="1023.50">v..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (117 samples, 2.16%)</title><rect x="69.4296%" y="997" width="2.1599%" height="15" fill="rgb(214,222,46)" fg:x="3761" fg:w="117"/><text x="69.6796%" y="1007.50">v..</text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (117 samples, 2.16%)</title><rect x="69.4296%" y="981" width="2.1599%" height="15" fill="rgb(248,168,30)" fg:x="3761" fg:w="117"/><text x="69.6796%" y="991.50">v..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (117 samples, 2.16%)</title><rect x="69.4296%" y="965" width="2.1599%" height="15" fill="rgb(226,14,28)" fg:x="3761" fg:w="117"/><text x="69.6796%" y="975.50">s..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (117 samples, 2.16%)</title><rect x="69.4296%" y="949" width="2.1599%" height="15" fill="rgb(253,123,1)" fg:x="3761" fg:w="117"/><text x="69.6796%" y="959.50">s..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (117 samples, 2.16%)</title><rect x="69.4296%" y="933" width="2.1599%" height="15" fill="rgb(225,24,42)" fg:x="3761" fg:w="117"/><text x="69.6796%" y="943.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (117 samples, 2.16%)</title><rect x="69.4296%" y="917" width="2.1599%" height="15" fill="rgb(216,161,37)" fg:x="3761" fg:w="117"/><text x="69.6796%" y="927.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (116 samples, 2.14%)</title><rect x="69.4480%" y="901" width="2.1414%" height="15" fill="rgb(251,164,26)" fg:x="3762" fg:w="116"/><text x="69.6980%" y="911.50">s..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (31 samples, 0.57%)</title><rect x="71.0172%" y="885" width="0.5723%" height="15" fill="rgb(219,177,3)" fg:x="3847" fg:w="31"/><text x="71.2672%" y="895.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (31 samples, 0.57%)</title><rect x="71.0172%" y="869" width="0.5723%" height="15" fill="rgb(222,65,0)" fg:x="3847" fg:w="31"/><text x="71.2672%" y="879.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (31 samples, 0.57%)</title><rect x="71.0172%" y="853" width="0.5723%" height="15" fill="rgb(223,69,54)" fg:x="3847" fg:w="31"/><text x="71.2672%" y="863.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (31 samples, 0.57%)</title><rect x="71.0172%" y="837" width="0.5723%" height="15" fill="rgb(235,30,27)" fg:x="3847" fg:w="31"/><text x="71.2672%" y="847.50"></text></g><g><title>CTransaction::~CTransaction (31 samples, 0.57%)</title><rect x="71.0172%" y="821" width="0.5723%" height="15" fill="rgb(220,183,50)" fg:x="3847" fg:w="31"/><text x="71.2672%" y="831.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (11 samples, 0.20%)</title><rect x="71.3864%" y="805" width="0.2031%" height="15" fill="rgb(248,198,15)" fg:x="3867" fg:w="11"/><text x="71.6364%" y="815.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (5 samples, 0.09%)</title><rect x="71.4971%" y="789" width="0.0923%" height="15" fill="rgb(222,211,4)" fg:x="3873" fg:w="5"/><text x="71.7471%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (5 samples, 0.09%)</title><rect x="71.4971%" y="773" width="0.0923%" height="15" fill="rgb(214,102,34)" fg:x="3873" fg:w="5"/><text x="71.7471%" y="783.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (5 samples, 0.09%)</title><rect x="71.4971%" y="757" width="0.0923%" height="15" fill="rgb(245,92,5)" fg:x="3873" fg:w="5"/><text x="71.7471%" y="767.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (4 samples, 0.07%)</title><rect x="71.5156%" y="741" width="0.0738%" height="15" fill="rgb(252,72,51)" fg:x="3874" fg:w="4"/><text x="71.7656%" y="751.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (4 samples, 0.07%)</title><rect x="71.5156%" y="725" width="0.0738%" height="15" fill="rgb(252,208,19)" fg:x="3874" fg:w="4"/><text x="71.7656%" y="735.50"></text></g><g><title>CTxOut::~CTxOut (4 samples, 0.07%)</title><rect x="71.5156%" y="709" width="0.0738%" height="15" fill="rgb(211,69,7)" fg:x="3874" fg:w="4"/><text x="71.7656%" y="719.50"></text></g><g><title>CScript::~CScript (4 samples, 0.07%)</title><rect x="71.5156%" y="693" width="0.0738%" height="15" fill="rgb(211,27,16)" fg:x="3874" fg:w="4"/><text x="71.7656%" y="703.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (4 samples, 0.07%)</title><rect x="71.5156%" y="677" width="0.0738%" height="15" fill="rgb(219,216,14)" fg:x="3874" fg:w="4"/><text x="71.7656%" y="687.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="71.5710%" y="661" width="0.0185%" height="15" fill="rgb(219,71,8)" fg:x="3877" fg:w="1"/><text x="71.8210%" y="671.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="71.5710%" y="645" width="0.0185%" height="15" fill="rgb(223,170,53)" fg:x="3877" fg:w="1"/><text x="71.8210%" y="655.50"></text></g><g><title>_int_free (3 samples, 0.06%)</title><rect x="71.5894%" y="1525" width="0.0554%" height="15" fill="rgb(246,21,26)" fg:x="3878" fg:w="3"/><text x="71.8394%" y="1535.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.26%)</title><rect x="71.6448%" y="1525" width="0.2584%" height="15" fill="rgb(248,20,46)" fg:x="3881" fg:w="14"/><text x="71.8948%" y="1535.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (8 samples, 0.15%)</title><rect x="71.9033%" y="1525" width="0.1477%" height="15" fill="rgb(252,94,11)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1535.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (8 samples, 0.15%)</title><rect x="71.9033%" y="1509" width="0.1477%" height="15" fill="rgb(236,163,8)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1519.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (8 samples, 0.15%)</title><rect x="71.9033%" y="1493" width="0.1477%" height="15" fill="rgb(217,221,45)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1503.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (8 samples, 0.15%)</title><rect x="71.9033%" y="1477" width="0.1477%" height="15" fill="rgb(238,38,17)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1487.50"></text></g><g><title>CBlock::~CBlock (8 samples, 0.15%)</title><rect x="71.9033%" y="1461" width="0.1477%" height="15" fill="rgb(242,210,23)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1471.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (8 samples, 0.15%)</title><rect x="71.9033%" y="1445" width="0.1477%" height="15" fill="rgb(250,86,53)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1455.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (8 samples, 0.15%)</title><rect x="71.9033%" y="1429" width="0.1477%" height="15" fill="rgb(223,168,25)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (8 samples, 0.15%)</title><rect x="71.9033%" y="1413" width="0.1477%" height="15" fill="rgb(251,189,4)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1423.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (8 samples, 0.15%)</title><rect x="71.9033%" y="1397" width="0.1477%" height="15" fill="rgb(245,19,28)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1407.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (8 samples, 0.15%)</title><rect x="71.9033%" y="1381" width="0.1477%" height="15" fill="rgb(207,10,34)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1391.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (8 samples, 0.15%)</title><rect x="71.9033%" y="1365" width="0.1477%" height="15" fill="rgb(235,153,31)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1375.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (8 samples, 0.15%)</title><rect x="71.9033%" y="1349" width="0.1477%" height="15" fill="rgb(228,72,37)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1359.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (8 samples, 0.15%)</title><rect x="71.9033%" y="1333" width="0.1477%" height="15" fill="rgb(215,15,16)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1343.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (8 samples, 0.15%)</title><rect x="71.9033%" y="1317" width="0.1477%" height="15" fill="rgb(250,119,29)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1327.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (8 samples, 0.15%)</title><rect x="71.9033%" y="1301" width="0.1477%" height="15" fill="rgb(214,59,1)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1311.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (8 samples, 0.15%)</title><rect x="71.9033%" y="1285" width="0.1477%" height="15" fill="rgb(223,109,25)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1295.50"></text></g><g><title>_int_free (8 samples, 0.15%)</title><rect x="71.9033%" y="1269" width="0.1477%" height="15" fill="rgb(230,198,22)" fg:x="3895" fg:w="8"/><text x="72.1533%" y="1279.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="72.0510%" y="1429" width="0.0185%" height="15" fill="rgb(245,184,46)" fg:x="3903" fg:w="1"/><text x="72.3010%" y="1439.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="72.0694%" y="1333" width="0.0185%" height="15" fill="rgb(253,73,16)" fg:x="3904" fg:w="1"/><text x="72.3194%" y="1343.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="72.0694%" y="1317" width="0.0185%" height="15" fill="rgb(206,94,45)" fg:x="3904" fg:w="1"/><text x="72.3194%" y="1327.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="72.0879%" y="1301" width="0.0185%" height="15" fill="rgb(236,83,27)" fg:x="3905" fg:w="1"/><text x="72.3379%" y="1311.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="72.0879%" y="1285" width="0.0185%" height="15" fill="rgb(220,196,8)" fg:x="3905" fg:w="1"/><text x="72.3379%" y="1295.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="72.0879%" y="1269" width="0.0185%" height="15" fill="rgb(254,185,14)" fg:x="3905" fg:w="1"/><text x="72.3379%" y="1279.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="72.0879%" y="1253" width="0.0185%" height="15" fill="rgb(226,50,22)" fg:x="3905" fg:w="1"/><text x="72.3379%" y="1263.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="72.0879%" y="1237" width="0.0185%" height="15" fill="rgb(253,147,0)" fg:x="3905" fg:w="1"/><text x="72.3379%" y="1247.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (5 samples, 0.09%)</title><rect x="72.0510%" y="1445" width="0.0923%" height="15" fill="rgb(252,46,33)" fg:x="3903" fg:w="5"/><text x="72.3010%" y="1455.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (4 samples, 0.07%)</title><rect x="72.0694%" y="1429" width="0.0738%" height="15" fill="rgb(242,22,54)" fg:x="3904" fg:w="4"/><text x="72.3194%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (4 samples, 0.07%)</title><rect x="72.0694%" y="1413" width="0.0738%" height="15" fill="rgb(223,178,32)" fg:x="3904" fg:w="4"/><text x="72.3194%" y="1423.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (4 samples, 0.07%)</title><rect x="72.0694%" y="1397" width="0.0738%" height="15" fill="rgb(214,106,53)" fg:x="3904" fg:w="4"/><text x="72.3194%" y="1407.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (4 samples, 0.07%)</title><rect x="72.0694%" y="1381" width="0.0738%" height="15" fill="rgb(232,65,50)" fg:x="3904" fg:w="4"/><text x="72.3194%" y="1391.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (4 samples, 0.07%)</title><rect x="72.0694%" y="1365" width="0.0738%" height="15" fill="rgb(231,110,28)" fg:x="3904" fg:w="4"/><text x="72.3194%" y="1375.50"></text></g><g><title>CTxIn::~CTxIn (4 samples, 0.07%)</title><rect x="72.0694%" y="1349" width="0.0738%" height="15" fill="rgb(216,71,40)" fg:x="3904" fg:w="4"/><text x="72.3194%" y="1359.50"></text></g><g><title>CScriptWitness::~CScriptWitness (3 samples, 0.06%)</title><rect x="72.0879%" y="1333" width="0.0554%" height="15" fill="rgb(229,89,53)" fg:x="3905" fg:w="3"/><text x="72.3379%" y="1343.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="72.0879%" y="1317" width="0.0554%" height="15" fill="rgb(210,124,14)" fg:x="3905" fg:w="3"/><text x="72.3379%" y="1327.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="72.1063%" y="1301" width="0.0369%" height="15" fill="rgb(236,213,6)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (2 samples, 0.04%)</title><rect x="72.1063%" y="1285" width="0.0369%" height="15" fill="rgb(228,41,5)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1295.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (2 samples, 0.04%)</title><rect x="72.1063%" y="1269" width="0.0369%" height="15" fill="rgb(221,167,25)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1279.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="72.1063%" y="1253" width="0.0369%" height="15" fill="rgb(228,144,37)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1263.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="72.1063%" y="1237" width="0.0369%" height="15" fill="rgb(227,189,38)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1247.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="72.1063%" y="1221" width="0.0369%" height="15" fill="rgb(218,8,2)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (2 samples, 0.04%)</title><rect x="72.1063%" y="1205" width="0.0369%" height="15" fill="rgb(209,61,28)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (2 samples, 0.04%)</title><rect x="72.1063%" y="1189" width="0.0369%" height="15" fill="rgb(233,140,39)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (2 samples, 0.04%)</title><rect x="72.1063%" y="1173" width="0.0369%" height="15" fill="rgb(251,66,48)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1183.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (2 samples, 0.04%)</title><rect x="72.1063%" y="1157" width="0.0369%" height="15" fill="rgb(210,44,45)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1167.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (2 samples, 0.04%)</title><rect x="72.1063%" y="1141" width="0.0369%" height="15" fill="rgb(214,136,46)" fg:x="3906" fg:w="2"/><text x="72.3563%" y="1151.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="72.1248%" y="1125" width="0.0185%" height="15" fill="rgb(207,130,50)" fg:x="3907" fg:w="1"/><text x="72.3748%" y="1135.50"></text></g><g><title>b-scheduler (455 samples, 8.40%)</title><rect x="63.7992%" y="1541" width="8.3995%" height="15" fill="rgb(228,102,49)" fg:x="3456" fg:w="455"/><text x="64.0492%" y="1551.50">b-scheduler</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (8 samples, 0.15%)</title><rect x="72.0510%" y="1525" width="0.1477%" height="15" fill="rgb(253,55,1)" fg:x="3903" fg:w="8"/><text x="72.3010%" y="1535.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (8 samples, 0.15%)</title><rect x="72.0510%" y="1509" width="0.1477%" height="15" fill="rgb(238,222,9)" fg:x="3903" fg:w="8"/><text x="72.3010%" y="1519.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (8 samples, 0.15%)</title><rect x="72.0510%" y="1493" width="0.1477%" height="15" fill="rgb(246,99,6)" fg:x="3903" fg:w="8"/><text x="72.3010%" y="1503.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (8 samples, 0.15%)</title><rect x="72.0510%" y="1477" width="0.1477%" height="15" fill="rgb(219,110,26)" fg:x="3903" fg:w="8"/><text x="72.3010%" y="1487.50"></text></g><g><title>CTransaction::~CTransaction (8 samples, 0.15%)</title><rect x="72.0510%" y="1461" width="0.1477%" height="15" fill="rgb(239,160,33)" fg:x="3903" fg:w="8"/><text x="72.3010%" y="1471.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="72.1433%" y="1445" width="0.0554%" height="15" fill="rgb(220,202,23)" fg:x="3908" fg:w="3"/><text x="72.3933%" y="1455.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (3 samples, 0.06%)</title><rect x="72.1433%" y="1429" width="0.0554%" height="15" fill="rgb(208,80,26)" fg:x="3908" fg:w="3"/><text x="72.3933%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (3 samples, 0.06%)</title><rect x="72.1433%" y="1413" width="0.0554%" height="15" fill="rgb(243,85,7)" fg:x="3908" fg:w="3"/><text x="72.3933%" y="1423.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (3 samples, 0.06%)</title><rect x="72.1433%" y="1397" width="0.0554%" height="15" fill="rgb(228,77,47)" fg:x="3908" fg:w="3"/><text x="72.3933%" y="1407.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (1 samples, 0.02%)</title><rect x="72.1802%" y="1381" width="0.0185%" height="15" fill="rgb(212,226,8)" fg:x="3910" fg:w="1"/><text x="72.4302%" y="1391.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (1 samples, 0.02%)</title><rect x="72.1802%" y="1365" width="0.0185%" height="15" fill="rgb(241,120,54)" fg:x="3910" fg:w="1"/><text x="72.4302%" y="1375.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.02%)</title><rect x="72.1802%" y="1349" width="0.0185%" height="15" fill="rgb(226,80,16)" fg:x="3910" fg:w="1"/><text x="72.4302%" y="1359.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="72.1802%" y="1333" width="0.0185%" height="15" fill="rgb(240,76,13)" fg:x="3910" fg:w="1"/><text x="72.4302%" y="1343.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="72.1802%" y="1317" width="0.0185%" height="15" fill="rgb(252,74,8)" fg:x="3910" fg:w="1"/><text x="72.4302%" y="1327.50"></text></g><g><title>b-scriptch.10 (4 samples, 0.07%)</title><rect x="72.1986%" y="1541" width="0.0738%" height="15" fill="rgb(244,155,2)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1551.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="72.1986%" y="1525" width="0.0738%" height="15" fill="rgb(215,81,35)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1535.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="72.1986%" y="1509" width="0.0738%" height="15" fill="rgb(206,55,2)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1519.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="72.1986%" y="1493" width="0.0738%" height="15" fill="rgb(231,2,34)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1503.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="72.1986%" y="1477" width="0.0738%" height="15" fill="rgb(242,176,48)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1487.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="72.1986%" y="1461" width="0.0738%" height="15" fill="rgb(249,31,36)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1471.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="72.1986%" y="1445" width="0.0738%" height="15" fill="rgb(205,18,17)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1429" width="0.0738%" height="15" fill="rgb(254,130,5)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1413" width="0.0738%" height="15" fill="rgb(229,42,45)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1397" width="0.0738%" height="15" fill="rgb(245,95,25)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1381" width="0.0738%" height="15" fill="rgb(249,193,38)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1365" width="0.0738%" height="15" fill="rgb(241,140,43)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1349" width="0.0738%" height="15" fill="rgb(245,78,48)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1333" width="0.0738%" height="15" fill="rgb(214,92,39)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1317" width="0.0738%" height="15" fill="rgb(211,189,14)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1301" width="0.0738%" height="15" fill="rgb(218,7,24)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.1986%" y="1285" width="0.0738%" height="15" fill="rgb(224,200,49)" fg:x="3911" fg:w="4"/><text x="72.4486%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2171%" y="1269" width="0.0554%" height="15" fill="rgb(218,210,14)" fg:x="3912" fg:w="3"/><text x="72.4671%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2171%" y="1253" width="0.0554%" height="15" fill="rgb(234,142,31)" fg:x="3912" fg:w="3"/><text x="72.4671%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2171%" y="1237" width="0.0554%" height="15" fill="rgb(227,165,2)" fg:x="3912" fg:w="3"/><text x="72.4671%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2171%" y="1221" width="0.0554%" height="15" fill="rgb(232,44,46)" fg:x="3912" fg:w="3"/><text x="72.4671%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2171%" y="1205" width="0.0554%" height="15" fill="rgb(236,149,47)" fg:x="3912" fg:w="3"/><text x="72.4671%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2171%" y="1189" width="0.0554%" height="15" fill="rgb(227,45,31)" fg:x="3912" fg:w="3"/><text x="72.4671%" y="1199.50"></text></g><g><title>b-scriptch.11 (4 samples, 0.07%)</title><rect x="72.2725%" y="1541" width="0.0738%" height="15" fill="rgb(240,176,51)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1551.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="72.2725%" y="1525" width="0.0738%" height="15" fill="rgb(249,146,41)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1535.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="72.2725%" y="1509" width="0.0738%" height="15" fill="rgb(213,208,4)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1519.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="72.2725%" y="1493" width="0.0738%" height="15" fill="rgb(245,84,36)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1503.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="72.2725%" y="1477" width="0.0738%" height="15" fill="rgb(254,84,18)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1487.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="72.2725%" y="1461" width="0.0738%" height="15" fill="rgb(225,38,54)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1471.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="72.2725%" y="1445" width="0.0738%" height="15" fill="rgb(246,50,30)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1429" width="0.0738%" height="15" fill="rgb(246,148,9)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1413" width="0.0738%" height="15" fill="rgb(223,75,4)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1397" width="0.0738%" height="15" fill="rgb(239,148,41)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1381" width="0.0738%" height="15" fill="rgb(205,195,3)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1365" width="0.0738%" height="15" fill="rgb(254,161,1)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1349" width="0.0738%" height="15" fill="rgb(211,229,8)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1333" width="0.0738%" height="15" fill="rgb(220,97,9)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1317" width="0.0738%" height="15" fill="rgb(240,218,8)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1301" width="0.0738%" height="15" fill="rgb(250,44,0)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2725%" y="1285" width="0.0738%" height="15" fill="rgb(236,41,53)" fg:x="3915" fg:w="4"/><text x="72.5225%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2909%" y="1269" width="0.0554%" height="15" fill="rgb(218,227,13)" fg:x="3916" fg:w="3"/><text x="72.5409%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2909%" y="1253" width="0.0554%" height="15" fill="rgb(217,94,32)" fg:x="3916" fg:w="3"/><text x="72.5409%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2909%" y="1237" width="0.0554%" height="15" fill="rgb(213,217,12)" fg:x="3916" fg:w="3"/><text x="72.5409%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2909%" y="1221" width="0.0554%" height="15" fill="rgb(229,13,46)" fg:x="3916" fg:w="3"/><text x="72.5409%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2909%" y="1205" width="0.0554%" height="15" fill="rgb(243,139,5)" fg:x="3916" fg:w="3"/><text x="72.5409%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.2909%" y="1189" width="0.0554%" height="15" fill="rgb(249,38,45)" fg:x="3916" fg:w="3"/><text x="72.5409%" y="1199.50"></text></g><g><title>b-scriptch.12 (4 samples, 0.07%)</title><rect x="72.3463%" y="1541" width="0.0738%" height="15" fill="rgb(216,70,11)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1551.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="72.3463%" y="1525" width="0.0738%" height="15" fill="rgb(253,101,25)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1535.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="72.3463%" y="1509" width="0.0738%" height="15" fill="rgb(207,197,30)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1519.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="72.3463%" y="1493" width="0.0738%" height="15" fill="rgb(238,87,13)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1503.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="72.3463%" y="1477" width="0.0738%" height="15" fill="rgb(215,155,8)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1487.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="72.3463%" y="1461" width="0.0738%" height="15" fill="rgb(239,166,38)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1471.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="72.3463%" y="1445" width="0.0738%" height="15" fill="rgb(240,194,35)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1429" width="0.0738%" height="15" fill="rgb(219,10,44)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1413" width="0.0738%" height="15" fill="rgb(251,220,35)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1397" width="0.0738%" height="15" fill="rgb(218,117,13)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1381" width="0.0738%" height="15" fill="rgb(221,213,40)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1365" width="0.0738%" height="15" fill="rgb(251,224,35)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1349" width="0.0738%" height="15" fill="rgb(241,33,39)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1333" width="0.0738%" height="15" fill="rgb(222,74,17)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1317" width="0.0738%" height="15" fill="rgb(225,103,0)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1301" width="0.0738%" height="15" fill="rgb(240,0,12)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1285" width="0.0738%" height="15" fill="rgb(233,213,37)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.3463%" y="1269" width="0.0738%" height="15" fill="rgb(225,84,52)" fg:x="3919" fg:w="4"/><text x="72.5963%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.3648%" y="1253" width="0.0554%" height="15" fill="rgb(247,160,51)" fg:x="3920" fg:w="3"/><text x="72.6148%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.3648%" y="1237" width="0.0554%" height="15" fill="rgb(244,60,51)" fg:x="3920" fg:w="3"/><text x="72.6148%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.3648%" y="1221" width="0.0554%" height="15" fill="rgb(233,114,7)" fg:x="3920" fg:w="3"/><text x="72.6148%" y="1231.50"></text></g><g><title>b-scriptch.13 (4 samples, 0.07%)</title><rect x="72.4202%" y="1541" width="0.0738%" height="15" fill="rgb(246,136,16)" fg:x="3923" fg:w="4"/><text x="72.6702%" y="1551.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="72.4202%" y="1525" width="0.0738%" height="15" fill="rgb(243,114,45)" fg:x="3923" fg:w="4"/><text x="72.6702%" y="1535.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="72.4202%" y="1509" width="0.0738%" height="15" fill="rgb(247,183,43)" fg:x="3923" fg:w="4"/><text x="72.6702%" y="1519.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="72.4202%" y="1493" width="0.0738%" height="15" fill="rgb(251,210,42)" fg:x="3923" fg:w="4"/><text x="72.6702%" y="1503.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="72.4202%" y="1477" width="0.0738%" height="15" fill="rgb(221,88,35)" fg:x="3923" fg:w="4"/><text x="72.6702%" y="1487.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="72.4202%" y="1461" width="0.0738%" height="15" fill="rgb(242,21,20)" fg:x="3923" fg:w="4"/><text x="72.6702%" y="1471.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="72.4202%" y="1445" width="0.0738%" height="15" fill="rgb(233,226,36)" fg:x="3923" fg:w="4"/><text x="72.6702%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4202%" y="1429" width="0.0738%" height="15" fill="rgb(243,189,34)" fg:x="3923" fg:w="4"/><text x="72.6702%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4202%" y="1413" width="0.0738%" height="15" fill="rgb(207,145,50)" fg:x="3923" fg:w="4"/><text x="72.6702%" y="1423.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1397" width="0.0554%" height="15" fill="rgb(242,1,50)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1407.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1381" width="0.0554%" height="15" fill="rgb(231,65,32)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1391.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1365" width="0.0554%" height="15" fill="rgb(208,68,49)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1375.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1349" width="0.0554%" height="15" fill="rgb(253,54,49)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1359.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1333" width="0.0554%" height="15" fill="rgb(245,186,24)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1317" width="0.0554%" height="15" fill="rgb(209,2,41)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1301" width="0.0554%" height="15" fill="rgb(242,208,54)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1285" width="0.0554%" height="15" fill="rgb(225,9,51)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1269" width="0.0554%" height="15" fill="rgb(207,207,25)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.4386%" y="1253" width="0.0554%" height="15" fill="rgb(253,96,18)" fg:x="3924" fg:w="3"/><text x="72.6886%" y="1263.50"></text></g><g><title>b-scriptch.14 (4 samples, 0.07%)</title><rect x="72.4940%" y="1541" width="0.0738%" height="15" fill="rgb(252,215,20)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1551.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="72.4940%" y="1525" width="0.0738%" height="15" fill="rgb(245,227,26)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1535.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="72.4940%" y="1509" width="0.0738%" height="15" fill="rgb(241,208,0)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1519.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="72.4940%" y="1493" width="0.0738%" height="15" fill="rgb(224,130,10)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1503.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="72.4940%" y="1477" width="0.0738%" height="15" fill="rgb(237,29,0)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1487.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="72.4940%" y="1461" width="0.0738%" height="15" fill="rgb(219,27,41)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1471.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="72.4940%" y="1445" width="0.0738%" height="15" fill="rgb(245,101,19)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1429" width="0.0738%" height="15" fill="rgb(243,44,37)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1413" width="0.0738%" height="15" fill="rgb(228,213,43)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1397" width="0.0738%" height="15" fill="rgb(219,163,21)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1381" width="0.0738%" height="15" fill="rgb(234,86,24)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1365" width="0.0738%" height="15" fill="rgb(225,10,24)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1349" width="0.0738%" height="15" fill="rgb(218,109,7)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1333" width="0.0738%" height="15" fill="rgb(210,20,26)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1317" width="0.0738%" height="15" fill="rgb(216,18,1)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1301" width="0.0738%" height="15" fill="rgb(206,163,23)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1285" width="0.0738%" height="15" fill="rgb(229,150,31)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1269" width="0.0738%" height="15" fill="rgb(231,10,5)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1253" width="0.0738%" height="15" fill="rgb(250,40,50)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1237" width="0.0738%" height="15" fill="rgb(217,119,7)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.4940%" y="1221" width="0.0738%" height="15" fill="rgb(245,214,40)" fg:x="3927" fg:w="4"/><text x="72.7440%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5494%" y="1205" width="0.0185%" height="15" fill="rgb(216,187,1)" fg:x="3930" fg:w="1"/><text x="72.7994%" y="1215.50"></text></g><g><title>b-scriptch.8 (4 samples, 0.07%)</title><rect x="72.5678%" y="1541" width="0.0738%" height="15" fill="rgb(237,146,21)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1551.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="72.5678%" y="1525" width="0.0738%" height="15" fill="rgb(210,174,47)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1535.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="72.5678%" y="1509" width="0.0738%" height="15" fill="rgb(218,111,39)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1519.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="72.5678%" y="1493" width="0.0738%" height="15" fill="rgb(224,95,19)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1503.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="72.5678%" y="1477" width="0.0738%" height="15" fill="rgb(234,15,38)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1487.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="72.5678%" y="1461" width="0.0738%" height="15" fill="rgb(246,56,12)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1471.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="72.5678%" y="1445" width="0.0738%" height="15" fill="rgb(247,16,17)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1429" width="0.0738%" height="15" fill="rgb(215,151,11)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1413" width="0.0738%" height="15" fill="rgb(225,16,24)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1397" width="0.0738%" height="15" fill="rgb(217,117,5)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1381" width="0.0738%" height="15" fill="rgb(246,187,53)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1365" width="0.0738%" height="15" fill="rgb(241,71,40)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1349" width="0.0738%" height="15" fill="rgb(231,67,39)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1333" width="0.0738%" height="15" fill="rgb(222,120,24)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1317" width="0.0738%" height="15" fill="rgb(248,3,3)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1301" width="0.0738%" height="15" fill="rgb(228,218,5)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.5678%" y="1285" width="0.0738%" height="15" fill="rgb(212,202,43)" fg:x="3931" fg:w="4"/><text x="72.8178%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.5863%" y="1269" width="0.0554%" height="15" fill="rgb(235,183,2)" fg:x="3932" fg:w="3"/><text x="72.8363%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.5863%" y="1253" width="0.0554%" height="15" fill="rgb(230,165,10)" fg:x="3932" fg:w="3"/><text x="72.8363%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.5863%" y="1237" width="0.0554%" height="15" fill="rgb(219,54,40)" fg:x="3932" fg:w="3"/><text x="72.8363%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="72.5863%" y="1221" width="0.0554%" height="15" fill="rgb(244,73,9)" fg:x="3932" fg:w="3"/><text x="72.8363%" y="1231.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="72.6417%" y="1525" width="0.0185%" height="15" fill="rgb(212,32,45)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1535.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1509" width="0.0185%" height="15" fill="rgb(205,58,31)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1519.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="72.6417%" y="1493" width="0.0185%" height="15" fill="rgb(250,120,43)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1503.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1477" width="0.0185%" height="15" fill="rgb(235,13,10)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1487.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1461" width="0.0185%" height="15" fill="rgb(232,219,31)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1471.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1445" width="0.0185%" height="15" fill="rgb(218,157,51)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1455.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1429" width="0.0185%" height="15" fill="rgb(211,91,52)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1439.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1413" width="0.0185%" height="15" fill="rgb(240,173,1)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1423.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1397" width="0.0185%" height="15" fill="rgb(248,20,47)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1407.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1381" width="0.0185%" height="15" fill="rgb(217,221,40)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1391.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1365" width="0.0185%" height="15" fill="rgb(226,149,51)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1375.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1349" width="0.0185%" height="15" fill="rgb(252,193,7)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1359.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1333" width="0.0185%" height="15" fill="rgb(205,123,0)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1343.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1317" width="0.0185%" height="15" fill="rgb(233,173,25)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1327.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="72.6417%" y="1301" width="0.0185%" height="15" fill="rgb(216,63,32)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1311.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1285" width="0.0185%" height="15" fill="rgb(209,56,45)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1295.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1269" width="0.0185%" height="15" fill="rgb(226,111,49)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1279.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1253" width="0.0185%" height="15" fill="rgb(244,181,21)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1263.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1237" width="0.0185%" height="15" fill="rgb(222,126,15)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1247.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1221" width="0.0185%" height="15" fill="rgb(222,95,17)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1231.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="72.6417%" y="1205" width="0.0185%" height="15" fill="rgb(254,46,5)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="72.6417%" y="1189" width="0.0185%" height="15" fill="rgb(236,216,35)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1199.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="72.6417%" y="1173" width="0.0185%" height="15" fill="rgb(217,187,26)" fg:x="3935" fg:w="1"/><text x="72.8917%" y="1183.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.06%)</title><rect x="72.6601%" y="1509" width="0.0554%" height="15" fill="rgb(207,192,25)" fg:x="3936" fg:w="3"/><text x="72.9101%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="72.7155%" y="1509" width="0.0185%" height="15" fill="rgb(253,135,27)" fg:x="3939" fg:w="1"/><text x="72.9655%" y="1519.50"></text></g><g><title>_int_free (9 samples, 0.17%)</title><rect x="72.7340%" y="1509" width="0.1661%" height="15" fill="rgb(211,122,29)" fg:x="3940" fg:w="9"/><text x="72.9840%" y="1519.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.04%)</title><rect x="72.9001%" y="1509" width="0.0369%" height="15" fill="rgb(233,162,40)" fg:x="3949" fg:w="2"/><text x="73.1501%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.11%)</title><rect x="72.9371%" y="1509" width="0.1108%" height="15" fill="rgb(222,184,47)" fg:x="3951" fg:w="6"/><text x="73.1871%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="73.0478%" y="1509" width="0.0738%" height="15" fill="rgb(249,99,23)" fg:x="3957" fg:w="4"/><text x="73.2978%" y="1519.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.04%)</title><rect x="73.1217%" y="1509" width="0.0369%" height="15" fill="rgb(214,60,12)" fg:x="3961" fg:w="2"/><text x="73.3717%" y="1519.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="73.1586%" y="1509" width="0.0185%" height="15" fill="rgb(250,229,36)" fg:x="3963" fg:w="1"/><text x="73.4086%" y="1519.50"></text></g><g><title>[[heap]] (40 samples, 0.74%)</title><rect x="72.6601%" y="1525" width="0.7384%" height="15" fill="rgb(232,195,10)" fg:x="3936" fg:w="40"/><text x="72.9101%" y="1535.50"></text></g><g><title>malloc_consolidate (12 samples, 0.22%)</title><rect x="73.1770%" y="1509" width="0.2215%" height="15" fill="rgb(205,213,31)" fg:x="3964" fg:w="12"/><text x="73.4270%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.04%)</title><rect x="73.3986%" y="1509" width="0.0369%" height="15" fill="rgb(237,43,8)" fg:x="3976" fg:w="2"/><text x="73.6486%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="73.4355%" y="1509" width="0.0185%" height="15" fill="rgb(216,208,3)" fg:x="3978" fg:w="1"/><text x="73.6855%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="73.4539%" y="1509" width="0.0738%" height="15" fill="rgb(228,179,44)" fg:x="3979" fg:w="4"/><text x="73.7039%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.09%)</title><rect x="73.5278%" y="1509" width="0.0923%" height="15" fill="rgb(230,192,27)" fg:x="3983" fg:w="5"/><text x="73.7778%" y="1519.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (4 samples, 0.07%)</title><rect x="73.6201%" y="1509" width="0.0738%" height="15" fill="rgb(251,30,38)" fg:x="3988" fg:w="4"/><text x="73.8701%" y="1519.50"></text></g><g><title>leveldb::VarintLength (1 samples, 0.02%)</title><rect x="73.6939%" y="1509" width="0.0185%" height="15" fill="rgb(246,55,52)" fg:x="3992" fg:w="1"/><text x="73.9439%" y="1519.50"></text></g><g><title>memcmp@plt (4 samples, 0.07%)</title><rect x="73.7124%" y="1509" width="0.0738%" height="15" fill="rgb(249,79,26)" fg:x="3993" fg:w="4"/><text x="73.9624%" y="1519.50"></text></g><g><title>[[stack]] (22 samples, 0.41%)</title><rect x="73.3986%" y="1525" width="0.4061%" height="15" fill="rgb(220,202,16)" fg:x="3976" fg:w="22"/><text x="73.6486%" y="1535.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="73.7862%" y="1509" width="0.0185%" height="15" fill="rgb(250,170,23)" fg:x="3997" fg:w="1"/><text x="74.0362%" y="1519.50"></text></g><g><title>[anon] (4 samples, 0.07%)</title><rect x="73.8047%" y="1525" width="0.0738%" height="15" fill="rgb(230,7,37)" fg:x="3998" fg:w="4"/><text x="74.0547%" y="1535.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.07%)</title><rect x="73.8047%" y="1509" width="0.0738%" height="15" fill="rgb(213,71,1)" fg:x="3998" fg:w="4"/><text x="74.0547%" y="1519.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="73.8785%" y="1509" width="0.0185%" height="15" fill="rgb(227,87,39)" fg:x="4002" fg:w="1"/><text x="74.1285%" y="1519.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="73.8970%" y="1509" width="0.1292%" height="15" fill="rgb(210,41,29)" fg:x="4003" fg:w="7"/><text x="74.1470%" y="1519.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="73.8970%" y="1493" width="0.1292%" height="15" fill="rgb(206,191,31)" fg:x="4003" fg:w="7"/><text x="74.1470%" y="1503.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="73.8970%" y="1477" width="0.1292%" height="15" fill="rgb(247,75,54)" fg:x="4003" fg:w="7"/><text x="74.1470%" y="1487.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="73.8970%" y="1461" width="0.1292%" height="15" fill="rgb(208,54,50)" fg:x="4003" fg:w="7"/><text x="74.1470%" y="1471.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="73.8970%" y="1445" width="0.1292%" height="15" fill="rgb(214,90,37)" fg:x="4003" fg:w="7"/><text x="74.1470%" y="1455.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="73.8970%" y="1429" width="0.1292%" height="15" fill="rgb(220,132,6)" fg:x="4003" fg:w="7"/><text x="74.1470%" y="1439.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="73.8970%" y="1413" width="0.1292%" height="15" fill="rgb(213,167,7)" fg:x="4003" fg:w="7"/><text x="74.1470%" y="1423.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="73.8970%" y="1397" width="0.1292%" height="15" fill="rgb(243,36,27)" fg:x="4003" fg:w="7"/><text x="74.1470%" y="1407.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="73.9155%" y="1381" width="0.1108%" height="15" fill="rgb(235,147,12)" fg:x="4004" fg:w="6"/><text x="74.1655%" y="1391.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="73.9155%" y="1365" width="0.1108%" height="15" fill="rgb(212,198,44)" fg:x="4004" fg:w="6"/><text x="74.1655%" y="1375.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="73.9339%" y="1349" width="0.0923%" height="15" fill="rgb(218,68,50)" fg:x="4005" fg:w="5"/><text x="74.1839%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.9524%" y="1333" width="0.0738%" height="15" fill="rgb(224,79,48)" fg:x="4006" fg:w="4"/><text x="74.2024%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="73.9708%" y="1317" width="0.0554%" height="15" fill="rgb(213,191,50)" fg:x="4007" fg:w="3"/><text x="74.2208%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.0078%" y="1301" width="0.0185%" height="15" fill="rgb(254,146,10)" fg:x="4009" fg:w="1"/><text x="74.2578%" y="1311.50"></text></g><g><title>__memcmp_evex_movbe (4 samples, 0.07%)</title><rect x="74.0262%" y="1509" width="0.0738%" height="15" fill="rgb(215,175,11)" fg:x="4010" fg:w="4"/><text x="74.2762%" y="1519.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="74.1001%" y="1509" width="0.0185%" height="15" fill="rgb(207,49,7)" fg:x="4014" fg:w="1"/><text x="74.3501%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.09%)</title><rect x="74.1185%" y="1509" width="0.0923%" height="15" fill="rgb(234,144,29)" fg:x="4015" fg:w="5"/><text x="74.3685%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="74.2108%" y="1509" width="0.0738%" height="15" fill="rgb(213,222,48)" fg:x="4020" fg:w="4"/><text x="74.4608%" y="1519.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="74.2847%" y="1509" width="0.0185%" height="15" fill="rgb(222,8,6)" fg:x="4024" fg:w="1"/><text x="74.5347%" y="1519.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="74.3031%" y="1509" width="0.0185%" height="15" fill="rgb(221,114,49)" fg:x="4025" fg:w="1"/><text x="74.5531%" y="1519.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="74.3216%" y="1509" width="0.0185%" height="15" fill="rgb(250,140,42)" fg:x="4026" fg:w="1"/><text x="74.5716%" y="1519.50"></text></g><g><title>[unknown] (26 samples, 0.48%)</title><rect x="73.8785%" y="1525" width="0.4800%" height="15" fill="rgb(250,150,27)" fg:x="4002" fg:w="26"/><text x="74.1285%" y="1535.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="74.3400%" y="1509" width="0.0185%" height="15" fill="rgb(252,159,3)" fg:x="4027" fg:w="1"/><text x="74.5900%" y="1519.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.04%)</title><rect x="74.3585%" y="1525" width="0.0369%" height="15" fill="rgb(241,182,3)" fg:x="4028" fg:w="2"/><text x="74.6085%" y="1535.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (8 samples, 0.15%)</title><rect x="74.3954%" y="1381" width="0.1477%" height="15" fill="rgb(236,3,9)" fg:x="4030" fg:w="8"/><text x="74.6454%" y="1391.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.15%)</title><rect x="74.3954%" y="1365" width="0.1477%" height="15" fill="rgb(223,227,51)" fg:x="4030" fg:w="8"/><text x="74.6454%" y="1375.50"></text></g><g><title>_int_free (8 samples, 0.15%)</title><rect x="74.3954%" y="1349" width="0.1477%" height="15" fill="rgb(232,133,30)" fg:x="4030" fg:w="8"/><text x="74.6454%" y="1359.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (8 samples, 0.15%)</title><rect x="74.3954%" y="1333" width="0.1477%" height="15" fill="rgb(209,93,27)" fg:x="4030" fg:w="8"/><text x="74.6454%" y="1343.50"></text></g><g><title>malloc_consolidate (8 samples, 0.15%)</title><rect x="74.3954%" y="1317" width="0.1477%" height="15" fill="rgb(208,108,34)" fg:x="4030" fg:w="8"/><text x="74.6454%" y="1327.50"></text></g><g><title>unlink_chunk.isra.0 (2 samples, 0.04%)</title><rect x="74.5062%" y="1301" width="0.0369%" height="15" fill="rgb(215,189,13)" fg:x="4036" fg:w="2"/><text x="74.7562%" y="1311.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (9 samples, 0.17%)</title><rect x="74.3954%" y="1397" width="0.1661%" height="15" fill="rgb(206,88,23)" fg:x="4030" fg:w="9"/><text x="74.6454%" y="1407.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (1 samples, 0.02%)</title><rect x="74.5431%" y="1381" width="0.0185%" height="15" fill="rgb(240,173,0)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1391.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="74.5431%" y="1365" width="0.0185%" height="15" fill="rgb(223,106,52)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1375.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="74.5431%" y="1349" width="0.0185%" height="15" fill="rgb(206,130,16)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1333" width="0.0185%" height="15" fill="rgb(220,54,25)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1317" width="0.0185%" height="15" fill="rgb(210,4,38)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1301" width="0.0185%" height="15" fill="rgb(238,94,39)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1285" width="0.0185%" height="15" fill="rgb(234,124,34)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1269" width="0.0185%" height="15" fill="rgb(221,91,40)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1253" width="0.0185%" height="15" fill="rgb(246,53,28)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1237" width="0.0185%" height="15" fill="rgb(229,109,7)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1221" width="0.0185%" height="15" fill="rgb(249,117,8)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1205" width="0.0185%" height="15" fill="rgb(210,181,1)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1189" width="0.0185%" height="15" fill="rgb(211,66,1)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1173" width="0.0185%" height="15" fill="rgb(221,90,14)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.5431%" y="1157" width="0.0185%" height="15" fill="rgb(219,222,44)" fg:x="4038" fg:w="1"/><text x="74.7931%" y="1167.50"></text></g><g><title>leveldb::WriteBatch::Delete (1 samples, 0.02%)</title><rect x="74.5616%" y="1349" width="0.0185%" height="15" fill="rgb(246,34,33)" fg:x="4039" fg:w="1"/><text x="74.8116%" y="1359.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="74.5616%" y="1333" width="0.0185%" height="15" fill="rgb(227,135,41)" fg:x="4039" fg:w="1"/><text x="74.8116%" y="1343.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="74.5616%" y="1317" width="0.0185%" height="15" fill="rgb(226,15,14)" fg:x="4039" fg:w="1"/><text x="74.8116%" y="1327.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="74.5616%" y="1301" width="0.0185%" height="15" fill="rgb(236,148,47)" fg:x="4039" fg:w="1"/><text x="74.8116%" y="1311.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="74.5616%" y="1285" width="0.0185%" height="15" fill="rgb(233,162,52)" fg:x="4039" fg:w="1"/><text x="74.8116%" y="1295.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="74.5616%" y="1269" width="0.0185%" height="15" fill="rgb(244,35,28)" fg:x="4039" fg:w="1"/><text x="74.8116%" y="1279.50"></text></g><g><title>CDBBatch::EraseImpl (5 samples, 0.09%)</title><rect x="74.5616%" y="1365" width="0.0923%" height="15" fill="rgb(205,121,10)" fg:x="4039" fg:w="5"/><text x="74.8116%" y="1375.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (4 samples, 0.07%)</title><rect x="74.5800%" y="1349" width="0.0738%" height="15" fill="rgb(250,58,18)" fg:x="4040" fg:w="4"/><text x="74.8300%" y="1359.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (4 samples, 0.07%)</title><rect x="74.5800%" y="1333" width="0.0738%" height="15" fill="rgb(216,37,13)" fg:x="4040" fg:w="4"/><text x="74.8300%" y="1343.50"></text></g><g><title>decltype  (2 samples, 0.04%)</title><rect x="74.6169%" y="1317" width="0.0369%" height="15" fill="rgb(221,215,42)" fg:x="4042" fg:w="2"/><text x="74.8669%" y="1327.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (2 samples, 0.04%)</title><rect x="74.6169%" y="1301" width="0.0369%" height="15" fill="rgb(217,214,19)" fg:x="4042" fg:w="2"/><text x="74.8669%" y="1311.50"></text></g><g><title>decltype (2 samples, 0.04%)</title><rect x="74.6169%" y="1285" width="0.0369%" height="15" fill="rgb(233,139,13)" fg:x="4042" fg:w="2"/><text x="74.8669%" y="1295.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="74.6539%" y="1349" width="0.0185%" height="15" fill="rgb(247,168,23)" fg:x="4044" fg:w="1"/><text x="74.9039%" y="1359.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="74.6539%" y="1333" width="0.0185%" height="15" fill="rgb(207,202,1)" fg:x="4044" fg:w="1"/><text x="74.9039%" y="1343.50"></text></g><g><title>CDBBatch::WriteImpl (2 samples, 0.04%)</title><rect x="74.6723%" y="1349" width="0.0369%" height="15" fill="rgb(220,155,48)" fg:x="4045" fg:w="2"/><text x="74.9223%" y="1359.50"></text></g><g><title>DataStream::Xor (2 samples, 0.04%)</title><rect x="74.6723%" y="1333" width="0.0369%" height="15" fill="rgb(250,43,26)" fg:x="4045" fg:w="2"/><text x="74.9223%" y="1343.50"></text></g><g><title>util::Xor (2 samples, 0.04%)</title><rect x="74.6723%" y="1317" width="0.0369%" height="15" fill="rgb(212,190,23)" fg:x="4045" fg:w="2"/><text x="74.9223%" y="1327.50"></text></g><g><title>CDBBatch::WriteImpl (3 samples, 0.06%)</title><rect x="74.7092%" y="1333" width="0.0554%" height="15" fill="rgb(216,39,24)" fg:x="4047" fg:w="3"/><text x="74.9592%" y="1343.50"></text></g><g><title>DataStream::Xor (3 samples, 0.06%)</title><rect x="74.7092%" y="1317" width="0.0554%" height="15" fill="rgb(252,113,16)" fg:x="4047" fg:w="3"/><text x="74.9592%" y="1327.50"></text></g><g><title>util::Xor (3 samples, 0.06%)</title><rect x="74.7092%" y="1301" width="0.0554%" height="15" fill="rgb(208,113,19)" fg:x="4047" fg:w="3"/><text x="74.9592%" y="1311.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="74.7462%" y="1285" width="0.0185%" height="15" fill="rgb(234,107,25)" fg:x="4049" fg:w="1"/><text x="74.9962%" y="1295.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="74.7462%" y="1269" width="0.0185%" height="15" fill="rgb(234,217,51)" fg:x="4049" fg:w="1"/><text x="74.9962%" y="1279.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (4 samples, 0.07%)</title><rect x="74.7092%" y="1349" width="0.0738%" height="15" fill="rgb(251,29,42)" fg:x="4047" fg:w="4"/><text x="74.9592%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="74.7646%" y="1333" width="0.0185%" height="15" fill="rgb(221,62,51)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="74.7646%" y="1317" width="0.0185%" height="15" fill="rgb(240,192,43)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="74.7646%" y="1301" width="0.0185%" height="15" fill="rgb(224,157,47)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="74.7646%" y="1285" width="0.0185%" height="15" fill="rgb(226,84,45)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="74.7646%" y="1269" width="0.0185%" height="15" fill="rgb(208,207,23)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1279.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="74.7646%" y="1253" width="0.0185%" height="15" fill="rgb(253,34,51)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="74.7646%" y="1237" width="0.0185%" height="15" fill="rgb(227,26,34)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.7646%" y="1221" width="0.0185%" height="15" fill="rgb(245,75,19)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.7646%" y="1205" width="0.0185%" height="15" fill="rgb(250,191,31)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.7646%" y="1189" width="0.0185%" height="15" fill="rgb(224,11,50)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.7646%" y="1173" width="0.0185%" height="15" fill="rgb(231,171,7)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.7646%" y="1157" width="0.0185%" height="15" fill="rgb(252,214,10)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.7646%" y="1141" width="0.0185%" height="15" fill="rgb(249,45,46)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.7646%" y="1125" width="0.0185%" height="15" fill="rgb(240,173,7)" fg:x="4050" fg:w="1"/><text x="75.0146%" y="1135.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="74.7831%" y="1333" width="0.0185%" height="15" fill="rgb(235,214,13)" fg:x="4051" fg:w="1"/><text x="75.0331%" y="1343.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="74.7831%" y="1317" width="0.0185%" height="15" fill="rgb(245,156,8)" fg:x="4051" fg:w="1"/><text x="75.0331%" y="1327.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.02%)</title><rect x="74.8016%" y="1333" width="0.0185%" height="15" fill="rgb(235,46,12)" fg:x="4052" fg:w="1"/><text x="75.0516%" y="1343.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="74.8016%" y="1317" width="0.0185%" height="15" fill="rgb(221,81,14)" fg:x="4052" fg:w="1"/><text x="75.0516%" y="1327.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="74.8016%" y="1301" width="0.0185%" height="15" fill="rgb(238,207,9)" fg:x="4052" fg:w="1"/><text x="75.0516%" y="1311.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="74.8200%" y="1317" width="0.0185%" height="15" fill="rgb(224,129,35)" fg:x="4053" fg:w="1"/><text x="75.0700%" y="1327.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="74.8200%" y="1301" width="0.0185%" height="15" fill="rgb(243,218,34)" fg:x="4053" fg:w="1"/><text x="75.0700%" y="1311.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="74.8200%" y="1285" width="0.0185%" height="15" fill="rgb(220,166,13)" fg:x="4053" fg:w="1"/><text x="75.0700%" y="1295.50"></text></g><g><title>leveldb::WriteBatch::Put (4 samples, 0.07%)</title><rect x="74.7831%" y="1349" width="0.0738%" height="15" fill="rgb(227,167,49)" fg:x="4051" fg:w="4"/><text x="75.0331%" y="1359.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (2 samples, 0.04%)</title><rect x="74.8200%" y="1333" width="0.0369%" height="15" fill="rgb(234,142,12)" fg:x="4053" fg:w="2"/><text x="75.0700%" y="1343.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="74.8385%" y="1317" width="0.0185%" height="15" fill="rgb(207,100,48)" fg:x="4054" fg:w="1"/><text x="75.0885%" y="1327.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="74.8385%" y="1301" width="0.0185%" height="15" fill="rgb(210,25,14)" fg:x="4054" fg:w="1"/><text x="75.0885%" y="1311.50"></text></g><g><title>CDBBatch::WriteImpl (13 samples, 0.24%)</title><rect x="74.6539%" y="1365" width="0.2400%" height="15" fill="rgb(246,116,27)" fg:x="4044" fg:w="13"/><text x="74.9039%" y="1375.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.04%)</title><rect x="74.8569%" y="1349" width="0.0369%" height="15" fill="rgb(214,193,42)" fg:x="4055" fg:w="2"/><text x="75.1069%" y="1359.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.04%)</title><rect x="74.8569%" y="1333" width="0.0369%" height="15" fill="rgb(214,122,8)" fg:x="4055" fg:w="2"/><text x="75.1069%" y="1343.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="74.8754%" y="1317" width="0.0185%" height="15" fill="rgb(244,173,18)" fg:x="4056" fg:w="1"/><text x="75.1254%" y="1327.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="74.8754%" y="1301" width="0.0185%" height="15" fill="rgb(232,68,19)" fg:x="4056" fg:w="1"/><text x="75.1254%" y="1311.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="74.8754%" y="1285" width="0.0185%" height="15" fill="rgb(236,224,1)" fg:x="4056" fg:w="1"/><text x="75.1254%" y="1295.50"></text></g><g><title>CCoinsViewDB::BatchWrite (31 samples, 0.57%)</title><rect x="74.5616%" y="1381" width="0.5723%" height="15" fill="rgb(240,11,8)" fg:x="4039" fg:w="31"/><text x="74.8116%" y="1391.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (13 samples, 0.24%)</title><rect x="74.8939%" y="1365" width="0.2400%" height="15" fill="rgb(244,159,20)" fg:x="4057" fg:w="13"/><text x="75.1439%" y="1375.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (13 samples, 0.24%)</title><rect x="74.8939%" y="1349" width="0.2400%" height="15" fill="rgb(240,223,54)" fg:x="4057" fg:w="13"/><text x="75.1439%" y="1359.50"></text></g><g><title>decltype  (2 samples, 0.04%)</title><rect x="75.0969%" y="1333" width="0.0369%" height="15" fill="rgb(237,146,5)" fg:x="4068" fg:w="2"/><text x="75.3469%" y="1343.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (2 samples, 0.04%)</title><rect x="75.0969%" y="1317" width="0.0369%" height="15" fill="rgb(218,221,32)" fg:x="4068" fg:w="2"/><text x="75.3469%" y="1327.50"></text></g><g><title>decltype (2 samples, 0.04%)</title><rect x="75.0969%" y="1301" width="0.0369%" height="15" fill="rgb(244,96,26)" fg:x="4068" fg:w="2"/><text x="75.3469%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="75.1338%" y="1317" width="0.0185%" height="15" fill="rgb(245,184,37)" fg:x="4070" fg:w="1"/><text x="75.3838%" y="1327.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.06%)</title><rect x="75.1523%" y="1317" width="0.0554%" height="15" fill="rgb(248,91,47)" fg:x="4071" fg:w="3"/><text x="75.4023%" y="1327.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="75.1892%" y="1301" width="0.0185%" height="15" fill="rgb(243,199,8)" fg:x="4073" fg:w="1"/><text x="75.4392%" y="1311.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="75.1892%" y="1285" width="0.0185%" height="15" fill="rgb(249,12,15)" fg:x="4073" fg:w="1"/><text x="75.4392%" y="1295.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (3 samples, 0.06%)</title><rect x="75.2077%" y="1317" width="0.0554%" height="15" fill="rgb(245,97,12)" fg:x="4074" fg:w="3"/><text x="75.4577%" y="1327.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (2 samples, 0.04%)</title><rect x="75.2631%" y="1301" width="0.0369%" height="15" fill="rgb(244,61,1)" fg:x="4077" fg:w="2"/><text x="75.5131%" y="1311.50"></text></g><g><title>leveldb::Slice::remove_prefix (1 samples, 0.02%)</title><rect x="75.2815%" y="1285" width="0.0185%" height="15" fill="rgb(222,194,10)" fg:x="4078" fg:w="1"/><text x="75.5315%" y="1295.50"></text></g><g><title>leveldb::Arena::Allocate (1 samples, 0.02%)</title><rect x="75.3000%" y="1285" width="0.0185%" height="15" fill="rgb(226,178,8)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1295.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="75.3000%" y="1269" width="0.0185%" height="15" fill="rgb(241,32,34)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1279.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="75.3000%" y="1253" width="0.0185%" height="15" fill="rgb(254,26,6)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1263.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (1 samples, 0.02%)</title><rect x="75.3000%" y="1237" width="0.0185%" height="15" fill="rgb(249,71,11)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1247.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="75.3000%" y="1221" width="0.0185%" height="15" fill="rgb(232,170,27)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1231.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="75.3000%" y="1205" width="0.0185%" height="15" fill="rgb(214,223,17)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1215.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="75.3000%" y="1189" width="0.0185%" height="15" fill="rgb(250,18,15)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1173" width="0.0185%" height="15" fill="rgb(212,153,51)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1157" width="0.0185%" height="15" fill="rgb(219,194,12)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1141" width="0.0185%" height="15" fill="rgb(212,58,17)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1125" width="0.0185%" height="15" fill="rgb(254,5,10)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1109" width="0.0185%" height="15" fill="rgb(246,91,7)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1093" width="0.0185%" height="15" fill="rgb(218,108,49)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1077" width="0.0185%" height="15" fill="rgb(238,123,20)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1061" width="0.0185%" height="15" fill="rgb(231,69,23)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1045" width="0.0185%" height="15" fill="rgb(230,209,3)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1029" width="0.0185%" height="15" fill="rgb(231,19,0)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="1013" width="0.0185%" height="15" fill="rgb(226,192,25)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.3000%" y="997" width="0.0185%" height="15" fill="rgb(223,175,53)" fg:x="4079" fg:w="1"/><text x="75.5500%" y="1007.50"></text></g><g><title>leveldb::GetVarint32 (1 samples, 0.02%)</title><rect x="75.3184%" y="1285" width="0.0185%" height="15" fill="rgb(248,35,51)" fg:x="4080" fg:w="1"/><text x="75.5684%" y="1295.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.04%)</title><rect x="75.3369%" y="1285" width="0.0369%" height="15" fill="rgb(230,37,26)" fg:x="4081" fg:w="2"/><text x="75.5869%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="75.3923%" y="1269" width="0.0185%" height="15" fill="rgb(206,120,22)" fg:x="4084" fg:w="1"/><text x="75.6423%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="75.4107%" y="1269" width="0.0369%" height="15" fill="rgb(207,165,28)" fg:x="4085" fg:w="2"/><text x="75.6607%" y="1279.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (10 samples, 0.18%)</title><rect x="75.4477%" y="1269" width="0.1846%" height="15" fill="rgb(226,23,46)" fg:x="4087" fg:w="10"/><text x="75.6977%" y="1279.50"></text></g><g><title>GetLengthPrefixedSlice (3 samples, 0.06%)</title><rect x="75.5769%" y="1253" width="0.0554%" height="15" fill="rgb(208,130,44)" fg:x="4094" fg:w="3"/><text x="75.8269%" y="1263.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.04%)</title><rect x="75.5953%" y="1237" width="0.0369%" height="15" fill="rgb(231,67,8)" fg:x="4095" fg:w="2"/><text x="75.8453%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="75.6323%" y="1253" width="0.0185%" height="15" fill="rgb(205,183,22)" fg:x="4097" fg:w="1"/><text x="75.8823%" y="1263.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="75.6323%" y="1237" width="0.0185%" height="15" fill="rgb(224,47,9)" fg:x="4097" fg:w="1"/><text x="75.8823%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="75.6507%" y="1221" width="0.0369%" height="15" fill="rgb(250,183,49)" fg:x="4098" fg:w="2"/><text x="75.9007%" y="1231.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="75.6692%" y="1205" width="0.0185%" height="15" fill="rgb(220,151,39)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1215.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="75.6692%" y="1189" width="0.0185%" height="15" fill="rgb(220,118,20)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1173" width="0.0185%" height="15" fill="rgb(231,65,51)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1157" width="0.0185%" height="15" fill="rgb(253,125,37)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1141" width="0.0185%" height="15" fill="rgb(232,102,6)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1125" width="0.0185%" height="15" fill="rgb(251,105,13)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1109" width="0.0185%" height="15" fill="rgb(222,179,29)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1093" width="0.0185%" height="15" fill="rgb(229,180,53)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1077" width="0.0185%" height="15" fill="rgb(238,104,13)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1061" width="0.0185%" height="15" fill="rgb(210,130,5)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1045" width="0.0185%" height="15" fill="rgb(233,87,49)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1029" width="0.0185%" height="15" fill="rgb(243,34,9)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="1013" width="0.0185%" height="15" fill="rgb(235,225,10)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="997" width="0.0185%" height="15" fill="rgb(212,0,30)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.6692%" y="981" width="0.0185%" height="15" fill="rgb(211,177,0)" fg:x="4099" fg:w="1"/><text x="75.9192%" y="991.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.06%)</title><rect x="75.6507%" y="1237" width="0.0554%" height="15" fill="rgb(225,220,11)" fg:x="4098" fg:w="3"/><text x="75.9007%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="75.6876%" y="1221" width="0.0185%" height="15" fill="rgb(215,10,13)" fg:x="4100" fg:w="1"/><text x="75.9376%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (7 samples, 0.13%)</title><rect x="75.6323%" y="1269" width="0.1292%" height="15" fill="rgb(240,177,14)" fg:x="4097" fg:w="7"/><text x="75.8823%" y="1279.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (6 samples, 0.11%)</title><rect x="75.6507%" y="1253" width="0.1108%" height="15" fill="rgb(243,7,39)" fg:x="4098" fg:w="6"/><text x="75.9007%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.06%)</title><rect x="75.7061%" y="1237" width="0.0554%" height="15" fill="rgb(212,99,0)" fg:x="4101" fg:w="3"/><text x="75.9561%" y="1247.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.04%)</title><rect x="75.7246%" y="1221" width="0.0369%" height="15" fill="rgb(225,162,48)" fg:x="4102" fg:w="2"/><text x="75.9746%" y="1231.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.04%)</title><rect x="75.7246%" y="1205" width="0.0369%" height="15" fill="rgb(246,16,25)" fg:x="4102" fg:w="2"/><text x="75.9746%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.06%)</title><rect x="75.8538%" y="1237" width="0.0554%" height="15" fill="rgb(220,150,2)" fg:x="4109" fg:w="3"/><text x="76.1038%" y="1247.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.04%)</title><rect x="75.8723%" y="1221" width="0.0369%" height="15" fill="rgb(237,113,11)" fg:x="4110" fg:w="2"/><text x="76.1223%" y="1231.50"></text></g><g><title>GetLengthPrefixedSlice (4 samples, 0.07%)</title><rect x="76.0015%" y="1221" width="0.0738%" height="15" fill="rgb(236,70,20)" fg:x="4117" fg:w="4"/><text x="76.2515%" y="1231.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.04%)</title><rect x="76.0384%" y="1205" width="0.0369%" height="15" fill="rgb(234,94,7)" fg:x="4119" fg:w="2"/><text x="76.2884%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (12 samples, 0.22%)</title><rect x="76.0753%" y="1221" width="0.2215%" height="15" fill="rgb(250,221,0)" fg:x="4121" fg:w="12"/><text x="76.3253%" y="1231.50"></text></g><g><title>leveldb::Slice::compare (7 samples, 0.13%)</title><rect x="76.1676%" y="1205" width="0.1292%" height="15" fill="rgb(245,149,46)" fg:x="4126" fg:w="7"/><text x="76.4176%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20 samples, 0.37%)</title><rect x="76.4814%" y="1205" width="0.3692%" height="15" fill="rgb(215,37,27)" fg:x="4143" fg:w="20"/><text x="76.7314%" y="1215.50"></text></g><g><title>leveldb::Slice::compare (9 samples, 0.17%)</title><rect x="76.6845%" y="1189" width="0.1661%" height="15" fill="rgb(232,65,3)" fg:x="4154" fg:w="9"/><text x="76.9345%" y="1199.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="76.8507%" y="1205" width="0.0185%" height="15" fill="rgb(214,2,16)" fg:x="4163" fg:w="1"/><text x="77.1007%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.28%)</title><rect x="76.8691%" y="1205" width="0.2769%" height="15" fill="rgb(227,131,50)" fg:x="4164" fg:w="15"/><text x="77.1191%" y="1215.50"></text></g><g><title>leveldb::ExtractUserKey (5 samples, 0.09%)</title><rect x="77.0537%" y="1189" width="0.0923%" height="15" fill="rgb(247,131,45)" fg:x="4174" fg:w="5"/><text x="77.3037%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (10 samples, 0.18%)</title><rect x="77.1460%" y="1205" width="0.1846%" height="15" fill="rgb(215,97,47)" fg:x="4179" fg:w="10"/><text x="77.3960%" y="1215.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="77.3122%" y="1189" width="0.0185%" height="15" fill="rgb(233,143,12)" fg:x="4188" fg:w="1"/><text x="77.5622%" y="1199.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="77.3122%" y="1173" width="0.0185%" height="15" fill="rgb(222,57,17)" fg:x="4188" fg:w="1"/><text x="77.5622%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (8 samples, 0.15%)</title><rect x="77.4598%" y="1189" width="0.1477%" height="15" fill="rgb(214,119,38)" fg:x="4196" fg:w="8"/><text x="77.7098%" y="1199.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (72 samples, 1.33%)</title><rect x="76.2968%" y="1221" width="1.3291%" height="15" fill="rgb(217,28,47)" fg:x="4133" fg:w="72"/><text x="76.5468%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (16 samples, 0.30%)</title><rect x="77.3306%" y="1205" width="0.2954%" height="15" fill="rgb(231,14,52)" fg:x="4189" fg:w="16"/><text x="77.5806%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="77.6075%" y="1189" width="0.0185%" height="15" fill="rgb(220,158,18)" fg:x="4204" fg:w="1"/><text x="77.8575%" y="1199.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="77.6075%" y="1173" width="0.0185%" height="15" fill="rgb(222,143,46)" fg:x="4204" fg:w="1"/><text x="77.8575%" y="1183.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="77.6075%" y="1157" width="0.0185%" height="15" fill="rgb(227,165,5)" fg:x="4204" fg:w="1"/><text x="77.8575%" y="1167.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="77.6260%" y="1221" width="0.0185%" height="15" fill="rgb(216,222,49)" fg:x="4205" fg:w="1"/><text x="77.8760%" y="1231.50"></text></g><g><title>GetLengthPrefixedSlice (25 samples, 0.46%)</title><rect x="77.9767%" y="1205" width="0.4615%" height="15" fill="rgb(238,73,39)" fg:x="4224" fg:w="25"/><text x="78.2267%" y="1215.50"></text></g><g><title>leveldb::GetVarint32Ptr (20 samples, 0.37%)</title><rect x="78.0690%" y="1189" width="0.3692%" height="15" fill="rgb(252,115,9)" fg:x="4229" fg:w="20"/><text x="78.3190%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (44 samples, 0.81%)</title><rect x="77.6445%" y="1221" width="0.8123%" height="15" fill="rgb(238,202,4)" fg:x="4206" fg:w="44"/><text x="77.8945%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="78.4382%" y="1205" width="0.0185%" height="15" fill="rgb(252,153,44)" fg:x="4249" fg:w="1"/><text x="78.6882%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (5 samples, 0.09%)</title><rect x="78.4567%" y="1221" width="0.0923%" height="15" fill="rgb(235,128,27)" fg:x="4250" fg:w="5"/><text x="78.7067%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="78.5306%" y="1205" width="0.0185%" height="15" fill="rgb(221,121,47)" fg:x="4254" fg:w="1"/><text x="78.7806%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (144 samples, 2.66%)</title><rect x="75.9092%" y="1237" width="2.6583%" height="15" fill="rgb(247,211,47)" fg:x="4112" fg:w="144"/><text x="76.1592%" y="1247.50">le..</text></g><g><title>leveldb::VarintLength (1 samples, 0.02%)</title><rect x="78.5490%" y="1221" width="0.0185%" height="15" fill="rgb(252,47,49)" fg:x="4255" fg:w="1"/><text x="78.7990%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (3 samples, 0.06%)</title><rect x="78.5859%" y="1221" width="0.0554%" height="15" fill="rgb(219,119,53)" fg:x="4257" fg:w="3"/><text x="78.8359%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (156 samples, 2.88%)</title><rect x="75.7800%" y="1253" width="2.8798%" height="15" fill="rgb(243,165,53)" fg:x="4105" fg:w="156"/><text x="76.0300%" y="1263.50">le..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (5 samples, 0.09%)</title><rect x="78.5675%" y="1237" width="0.0923%" height="15" fill="rgb(230,12,35)" fg:x="4256" fg:w="5"/><text x="78.8175%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="78.6413%" y="1221" width="0.0185%" height="15" fill="rgb(239,57,49)" fg:x="4260" fg:w="1"/><text x="78.8913%" y="1231.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="78.6413%" y="1205" width="0.0185%" height="15" fill="rgb(231,154,7)" fg:x="4260" fg:w="1"/><text x="78.8913%" y="1215.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="78.6413%" y="1189" width="0.0185%" height="15" fill="rgb(248,81,34)" fg:x="4260" fg:w="1"/><text x="78.8913%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (159 samples, 2.94%)</title><rect x="75.7615%" y="1269" width="2.9352%" height="15" fill="rgb(247,9,5)" fg:x="4104" fg:w="159"/><text x="76.0115%" y="1279.50">le..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (2 samples, 0.04%)</title><rect x="78.6598%" y="1253" width="0.0369%" height="15" fill="rgb(228,172,27)" fg:x="4261" fg:w="2"/><text x="78.9098%" y="1263.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (2 samples, 0.04%)</title><rect x="78.6598%" y="1237" width="0.0369%" height="15" fill="rgb(230,57,44)" fg:x="4261" fg:w="2"/><text x="78.9098%" y="1247.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (2 samples, 0.04%)</title><rect x="78.6598%" y="1221" width="0.0369%" height="15" fill="rgb(249,35,22)" fg:x="4261" fg:w="2"/><text x="78.9098%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (1 samples, 0.02%)</title><rect x="78.6967%" y="1269" width="0.0185%" height="15" fill="rgb(250,137,27)" fg:x="4263" fg:w="1"/><text x="78.9467%" y="1279.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Node (1 samples, 0.02%)</title><rect x="78.6967%" y="1253" width="0.0185%" height="15" fill="rgb(251,57,31)" fg:x="4263" fg:w="1"/><text x="78.9467%" y="1263.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (182 samples, 3.36%)</title><rect x="75.3738%" y="1285" width="3.3598%" height="15" fill="rgb(238,60,0)" fg:x="4083" fg:w="182"/><text x="75.6238%" y="1295.50">lev..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (1 samples, 0.02%)</title><rect x="78.7152%" y="1269" width="0.0185%" height="15" fill="rgb(242,185,39)" fg:x="4264" fg:w="1"/><text x="78.9652%" y="1279.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (196 samples, 3.62%)</title><rect x="75.1338%" y="1349" width="3.6182%" height="15" fill="rgb(240,63,43)" fg:x="4070" fg:w="196"/><text x="75.3838%" y="1359.50">leve..</text></g><g><title>leveldb::WriteBatch::Iterate (196 samples, 3.62%)</title><rect x="75.1338%" y="1333" width="3.6182%" height="15" fill="rgb(236,155,6)" fg:x="4070" fg:w="196"/><text x="75.3838%" y="1343.50">leve..</text></g><g><title>leveldb::WriteBatch::Iterate (189 samples, 3.49%)</title><rect x="75.2631%" y="1317" width="3.4890%" height="15" fill="rgb(215,11,29)" fg:x="4077" fg:w="189"/><text x="75.5131%" y="1327.50">lev..</text></g><g><title>leveldb::MemTable::Add (187 samples, 3.45%)</title><rect x="75.3000%" y="1301" width="3.4521%" height="15" fill="rgb(228,180,48)" fg:x="4079" fg:w="187"/><text x="75.5500%" y="1311.50">lev..</text></g><g><title>leveldb::WriteBatch::Iterate (1 samples, 0.02%)</title><rect x="78.7336%" y="1285" width="0.0185%" height="15" fill="rgb(241,102,12)" fg:x="4265" fg:w="1"/><text x="78.9836%" y="1295.50"></text></g><g><title>Append (1 samples, 0.02%)</title><rect x="78.7521%" y="1317" width="0.0185%" height="15" fill="rgb(246,213,4)" fg:x="4266" fg:w="1"/><text x="79.0021%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="78.7521%" y="1301" width="0.0185%" height="15" fill="rgb(218,134,35)" fg:x="4266" fg:w="1"/><text x="79.0021%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="78.7521%" y="1285" width="0.0185%" height="15" fill="rgb(251,117,35)" fg:x="4266" fg:w="1"/><text x="79.0021%" y="1295.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="78.7705%" y="1125" width="0.0369%" height="15" fill="rgb(206,156,45)" fg:x="4267" fg:w="2"/><text x="79.0205%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.7890%" y="1109" width="0.0185%" height="15" fill="rgb(218,52,27)" fg:x="4268" fg:w="1"/><text x="79.0390%" y="1119.50"></text></g><g><title>[[ext4]] (5 samples, 0.09%)</title><rect x="78.7705%" y="1141" width="0.0923%" height="15" fill="rgb(238,83,36)" fg:x="4267" fg:w="5"/><text x="79.0205%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="78.8075%" y="1125" width="0.0554%" height="15" fill="rgb(218,53,43)" fg:x="4269" fg:w="3"/><text x="79.0575%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.8444%" y="1109" width="0.0185%" height="15" fill="rgb(239,54,39)" fg:x="4271" fg:w="1"/><text x="79.0944%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.8444%" y="1093" width="0.0185%" height="15" fill="rgb(212,198,13)" fg:x="4271" fg:w="1"/><text x="79.0944%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.8444%" y="1077" width="0.0185%" height="15" fill="rgb(234,54,46)" fg:x="4271" fg:w="1"/><text x="79.0944%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.8444%" y="1061" width="0.0185%" height="15" fill="rgb(217,120,7)" fg:x="4271" fg:w="1"/><text x="79.0944%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.8444%" y="1045" width="0.0185%" height="15" fill="rgb(246,39,15)" fg:x="4271" fg:w="1"/><text x="79.0944%" y="1055.50"></text></g><g><title>Flush (15 samples, 0.28%)</title><rect x="78.7705%" y="1317" width="0.2769%" height="15" fill="rgb(242,143,31)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1327.50"></text></g><g><title>FlushBuffer (15 samples, 0.28%)</title><rect x="78.7705%" y="1301" width="0.2769%" height="15" fill="rgb(252,60,24)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (15 samples, 0.28%)</title><rect x="78.7705%" y="1285" width="0.2769%" height="15" fill="rgb(249,220,7)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1295.50"></text></g><g><title>__GI___libc_write (15 samples, 0.28%)</title><rect x="78.7705%" y="1269" width="0.2769%" height="15" fill="rgb(236,67,13)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1279.50"></text></g><g><title>[unknown] (15 samples, 0.28%)</title><rect x="78.7705%" y="1253" width="0.2769%" height="15" fill="rgb(210,62,39)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1263.50"></text></g><g><title>[unknown] (15 samples, 0.28%)</title><rect x="78.7705%" y="1237" width="0.2769%" height="15" fill="rgb(219,122,53)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1247.50"></text></g><g><title>[unknown] (15 samples, 0.28%)</title><rect x="78.7705%" y="1221" width="0.2769%" height="15" fill="rgb(218,87,25)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1231.50"></text></g><g><title>[unknown] (15 samples, 0.28%)</title><rect x="78.7705%" y="1205" width="0.2769%" height="15" fill="rgb(234,179,48)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1215.50"></text></g><g><title>[[ext4]] (15 samples, 0.28%)</title><rect x="78.7705%" y="1189" width="0.2769%" height="15" fill="rgb(248,90,0)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1199.50"></text></g><g><title>[unknown] (15 samples, 0.28%)</title><rect x="78.7705%" y="1173" width="0.2769%" height="15" fill="rgb(207,228,37)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1183.50"></text></g><g><title>[[ext4]] (15 samples, 0.28%)</title><rect x="78.7705%" y="1157" width="0.2769%" height="15" fill="rgb(235,214,15)" fg:x="4267" fg:w="15"/><text x="79.0205%" y="1167.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="78.8628%" y="1141" width="0.1846%" height="15" fill="rgb(210,144,39)" fg:x="4272" fg:w="10"/><text x="79.1128%" y="1151.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="78.8628%" y="1125" width="0.1846%" height="15" fill="rgb(222,67,41)" fg:x="4272" fg:w="10"/><text x="79.1128%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="78.8998%" y="1109" width="0.1477%" height="15" fill="rgb(205,35,37)" fg:x="4274" fg:w="8"/><text x="79.1498%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="78.9551%" y="1093" width="0.0923%" height="15" fill="rgb(216,125,40)" fg:x="4277" fg:w="5"/><text x="79.2051%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="78.9736%" y="1077" width="0.0738%" height="15" fill="rgb(228,227,20)" fg:x="4278" fg:w="4"/><text x="79.2236%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="79.0105%" y="1061" width="0.0369%" height="15" fill="rgb(242,173,45)" fg:x="4280" fg:w="2"/><text x="79.2605%" y="1071.50"></text></g><g><title>CDBWrapper::WriteBatch (213 samples, 3.93%)</title><rect x="75.1338%" y="1381" width="3.9321%" height="15" fill="rgb(215,79,24)" fg:x="4070" fg:w="213"/><text x="75.3838%" y="1391.50">CDBW..</text></g><g><title>leveldb::DBImpl::Write (213 samples, 3.93%)</title><rect x="75.1338%" y="1365" width="3.9321%" height="15" fill="rgb(238,164,38)" fg:x="4070" fg:w="213"/><text x="75.3838%" y="1375.50">leve..</text></g><g><title>leveldb::log::Writer::AddRecord (17 samples, 0.31%)</title><rect x="78.7521%" y="1349" width="0.3138%" height="15" fill="rgb(245,196,38)" fg:x="4266" fg:w="17"/><text x="79.0021%" y="1359.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (17 samples, 0.31%)</title><rect x="78.7521%" y="1333" width="0.3138%" height="15" fill="rgb(231,217,29)" fg:x="4266" fg:w="17"/><text x="79.0021%" y="1343.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="79.0474%" y="1317" width="0.0185%" height="15" fill="rgb(245,6,4)" fg:x="4282" fg:w="1"/><text x="79.2974%" y="1327.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="79.0474%" y="1301" width="0.0185%" height="15" fill="rgb(214,76,49)" fg:x="4282" fg:w="1"/><text x="79.2974%" y="1311.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="79.0659%" y="1141" width="0.0185%" height="15" fill="rgb(205,96,12)" fg:x="4283" fg:w="1"/><text x="79.3159%" y="1151.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1381" width="0.0369%" height="15" fill="rgb(243,131,4)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1391.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1365" width="0.0369%" height="15" fill="rgb(214,114,4)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1375.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1349" width="0.0369%" height="15" fill="rgb(234,215,15)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1359.50"></text></g><g><title>Serialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1333" width="0.0369%" height="15" fill="rgb(250,216,45)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1343.50"></text></g><g><title>Ser&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1317" width="0.0369%" height="15" fill="rgb(236,128,4)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1327.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1301" width="0.0369%" height="15" fill="rgb(234,50,33)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1311.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1285" width="0.0369%" height="15" fill="rgb(253,131,37)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1295.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1269" width="0.0369%" height="15" fill="rgb(218,55,27)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1279.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1253" width="0.0369%" height="15" fill="rgb(241,220,28)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1263.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1237" width="0.0369%" height="15" fill="rgb(241,90,48)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1247.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1221" width="0.0369%" height="15" fill="rgb(216,43,37)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1231.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.04%)</title><rect x="79.0659%" y="1205" width="0.0369%" height="15" fill="rgb(207,173,9)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1215.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1189" width="0.0369%" height="15" fill="rgb(240,126,30)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1199.50"></text></g><g><title>DataStream::write (2 samples, 0.04%)</title><rect x="79.0659%" y="1173" width="0.0369%" height="15" fill="rgb(228,178,53)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.04%)</title><rect x="79.0659%" y="1157" width="0.0369%" height="15" fill="rgb(217,33,4)" fg:x="4283" fg:w="2"/><text x="79.3159%" y="1167.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="79.0844%" y="1141" width="0.0185%" height="15" fill="rgb(206,124,34)" fg:x="4284" fg:w="1"/><text x="79.3344%" y="1151.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="79.1028%" y="1045" width="0.0185%" height="15" fill="rgb(208,122,53)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="1055.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="1029" width="0.0185%" height="15" fill="rgb(215,202,26)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="1039.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="79.1028%" y="1013" width="0.0185%" height="15" fill="rgb(232,198,31)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="1023.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="997" width="0.0185%" height="15" fill="rgb(222,23,35)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="1007.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="981" width="0.0185%" height="15" fill="rgb(242,27,53)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="991.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="965" width="0.0185%" height="15" fill="rgb(210,216,42)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="975.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="949" width="0.0185%" height="15" fill="rgb(234,39,38)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="959.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="933" width="0.0185%" height="15" fill="rgb(235,126,54)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="943.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="917" width="0.0185%" height="15" fill="rgb(235,150,33)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="901" width="0.0185%" height="15" fill="rgb(249,49,53)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="911.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="885" width="0.0185%" height="15" fill="rgb(238,60,50)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="895.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="869" width="0.0185%" height="15" fill="rgb(210,5,2)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="879.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="853" width="0.0185%" height="15" fill="rgb(214,207,24)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="863.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="837" width="0.0185%" height="15" fill="rgb(228,173,2)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="847.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="79.1028%" y="821" width="0.0185%" height="15" fill="rgb(244,26,8)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="831.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="805" width="0.0185%" height="15" fill="rgb(249,153,35)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="815.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="789" width="0.0185%" height="15" fill="rgb(221,215,40)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="799.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="773" width="0.0185%" height="15" fill="rgb(238,106,35)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="783.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="79.1028%" y="757" width="0.0185%" height="15" fill="rgb(207,195,21)" fg:x="4285" fg:w="1"/><text x="79.3528%" y="767.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (4 samples, 0.07%)</title><rect x="79.1028%" y="1173" width="0.0738%" height="15" fill="rgb(205,43,29)" fg:x="4285" fg:w="4"/><text x="79.3528%" y="1183.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="79.1028%" y="1157" width="0.0738%" height="15" fill="rgb(236,35,21)" fg:x="4285" fg:w="4"/><text x="79.3528%" y="1167.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="79.1028%" y="1141" width="0.0738%" height="15" fill="rgb(244,74,8)" fg:x="4285" fg:w="4"/><text x="79.3528%" y="1151.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (4 samples, 0.07%)</title><rect x="79.1028%" y="1125" width="0.0738%" height="15" fill="rgb(241,229,7)" fg:x="4285" fg:w="4"/><text x="79.3528%" y="1135.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (4 samples, 0.07%)</title><rect x="79.1028%" y="1109" width="0.0738%" height="15" fill="rgb(212,223,25)" fg:x="4285" fg:w="4"/><text x="79.3528%" y="1119.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="79.1028%" y="1093" width="0.0738%" height="15" fill="rgb(234,58,53)" fg:x="4285" fg:w="4"/><text x="79.3528%" y="1103.50"></text></g><g><title>DataStream::write (4 samples, 0.07%)</title><rect x="79.1028%" y="1077" width="0.0738%" height="15" fill="rgb(244,36,1)" fg:x="4285" fg:w="4"/><text x="79.3528%" y="1087.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (4 samples, 0.07%)</title><rect x="79.1028%" y="1061" width="0.0738%" height="15" fill="rgb(222,40,54)" fg:x="4285" fg:w="4"/><text x="79.3528%" y="1071.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (3 samples, 0.06%)</title><rect x="79.1213%" y="1045" width="0.0554%" height="15" fill="rgb(210,207,39)" fg:x="4286" fg:w="3"/><text x="79.3713%" y="1055.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1582%" y="1029" width="0.0185%" height="15" fill="rgb(234,52,14)" fg:x="4288" fg:w="1"/><text x="79.4082%" y="1039.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="79.1582%" y="1013" width="0.0185%" height="15" fill="rgb(239,108,46)" fg:x="4288" fg:w="1"/><text x="79.4082%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="79.1582%" y="997" width="0.0185%" height="15" fill="rgb(252,223,5)" fg:x="4288" fg:w="1"/><text x="79.4082%" y="1007.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="79.1582%" y="981" width="0.0185%" height="15" fill="rgb(227,181,11)" fg:x="4288" fg:w="1"/><text x="79.4082%" y="991.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="79.1028%" y="1221" width="0.0923%" height="15" fill="rgb(248,126,40)" fg:x="4285" fg:w="5"/><text x="79.3528%" y="1231.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (5 samples, 0.09%)</title><rect x="79.1028%" y="1205" width="0.0923%" height="15" fill="rgb(243,1,18)" fg:x="4285" fg:w="5"/><text x="79.3528%" y="1215.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (5 samples, 0.09%)</title><rect x="79.1028%" y="1189" width="0.0923%" height="15" fill="rgb(214,145,23)" fg:x="4285" fg:w="5"/><text x="79.3528%" y="1199.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="79.1767%" y="1173" width="0.0185%" height="15" fill="rgb(241,218,11)" fg:x="4289" fg:w="1"/><text x="79.4267%" y="1183.50"></text></g><g><title>void std::advance&lt;std::byte const*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="79.1767%" y="1157" width="0.0185%" height="15" fill="rgb(214,219,24)" fg:x="4289" fg:w="1"/><text x="79.4267%" y="1167.50"></text></g><g><title>void std::__advance&lt;std::byte const*, long&gt; (1 samples, 0.02%)</title><rect x="79.1767%" y="1141" width="0.0185%" height="15" fill="rgb(235,32,7)" fg:x="4289" fg:w="1"/><text x="79.4267%" y="1151.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="79.1951%" y="1157" width="0.0185%" height="15" fill="rgb(227,121,28)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1167.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="1141" width="0.0185%" height="15" fill="rgb(216,129,49)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1151.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="79.1951%" y="1125" width="0.0185%" height="15" fill="rgb(207,194,50)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1135.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="1109" width="0.0185%" height="15" fill="rgb(207,4,18)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1119.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="1093" width="0.0185%" height="15" fill="rgb(213,50,30)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="1077" width="0.0185%" height="15" fill="rgb(208,77,22)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1087.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="1061" width="0.0185%" height="15" fill="rgb(244,204,34)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1071.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="1045" width="0.0185%" height="15" fill="rgb(230,20,17)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1055.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="1029" width="0.0185%" height="15" fill="rgb(237,83,15)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1039.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="1013" width="0.0185%" height="15" fill="rgb(221,109,25)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1023.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="997" width="0.0185%" height="15" fill="rgb(205,194,52)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="1007.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="981" width="0.0185%" height="15" fill="rgb(244,173,54)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="991.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="965" width="0.0185%" height="15" fill="rgb(227,181,18)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="975.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="949" width="0.0185%" height="15" fill="rgb(238,36,30)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="959.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="79.1951%" y="933" width="0.0185%" height="15" fill="rgb(254,85,0)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="943.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="917" width="0.0185%" height="15" fill="rgb(247,63,33)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="927.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="901" width="0.0185%" height="15" fill="rgb(220,7,54)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="911.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="885" width="0.0185%" height="15" fill="rgb(238,227,21)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="895.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="869" width="0.0185%" height="15" fill="rgb(237,29,31)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="879.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="853" width="0.0185%" height="15" fill="rgb(211,21,50)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="863.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="79.1951%" y="837" width="0.0185%" height="15" fill="rgb(239,119,2)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="847.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="79.1951%" y="821" width="0.0185%" height="15" fill="rgb(250,2,39)" fg:x="4290" fg:w="1"/><text x="79.4451%" y="831.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="79.2136%" y="1157" width="0.0185%" height="15" fill="rgb(244,46,53)" fg:x="4291" fg:w="1"/><text x="79.4636%" y="1167.50"></text></g><g><title>CompressScript (3 samples, 0.06%)</title><rect x="79.1951%" y="1173" width="0.0554%" height="15" fill="rgb(209,21,19)" fg:x="4290" fg:w="3"/><text x="79.4451%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="79.2320%" y="1157" width="0.0185%" height="15" fill="rgb(236,145,4)" fg:x="4292" fg:w="1"/><text x="79.4820%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::copy&lt;std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="79.2320%" y="1141" width="0.0185%" height="15" fill="rgb(220,133,36)" fg:x="4292" fg:w="1"/><text x="79.4820%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::__copy_move_a&lt;false, std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="79.2320%" y="1125" width="0.0185%" height="15" fill="rgb(244,18,3)" fg:x="4292" fg:w="1"/><text x="79.4820%" y="1135.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="79.2320%" y="1109" width="0.0185%" height="15" fill="rgb(232,171,48)" fg:x="4292" fg:w="1"/><text x="79.4820%" y="1119.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="79.2320%" y="1093" width="0.0185%" height="15" fill="rgb(223,223,53)" fg:x="4292" fg:w="1"/><text x="79.4820%" y="1103.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="79.2320%" y="1077" width="0.0185%" height="15" fill="rgb(246,92,13)" fg:x="4292" fg:w="1"/><text x="79.4820%" y="1087.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="79.2505%" y="1109" width="0.0185%" height="15" fill="rgb(229,171,10)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="1119.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="1093" width="0.0185%" height="15" fill="rgb(213,131,26)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="79.2505%" y="1077" width="0.0185%" height="15" fill="rgb(242,87,54)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="1087.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="1061" width="0.0185%" height="15" fill="rgb(237,21,35)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="1071.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="1045" width="0.0185%" height="15" fill="rgb(253,13,47)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="1055.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="1029" width="0.0185%" height="15" fill="rgb(215,122,49)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="1039.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="1013" width="0.0185%" height="15" fill="rgb(209,179,30)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="1023.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="997" width="0.0185%" height="15" fill="rgb(235,100,24)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="1007.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="981" width="0.0185%" height="15" fill="rgb(209,67,24)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="965" width="0.0185%" height="15" fill="rgb(206,74,32)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="975.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="949" width="0.0185%" height="15" fill="rgb(212,45,25)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="959.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="933" width="0.0185%" height="15" fill="rgb(239,26,3)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="943.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="917" width="0.0185%" height="15" fill="rgb(218,36,15)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="927.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="901" width="0.0185%" height="15" fill="rgb(206,108,24)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="911.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="79.2505%" y="885" width="0.0185%" height="15" fill="rgb(234,204,42)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="895.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="869" width="0.0185%" height="15" fill="rgb(229,2,11)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="879.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="853" width="0.0185%" height="15" fill="rgb(221,20,48)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="863.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="837" width="0.0185%" height="15" fill="rgb(244,164,10)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="847.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="79.2505%" y="821" width="0.0185%" height="15" fill="rgb(243,229,2)" fg:x="4293" fg:w="1"/><text x="79.5005%" y="831.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (6 samples, 0.11%)</title><rect x="79.2505%" y="1173" width="0.1108%" height="15" fill="rgb(232,131,37)" fg:x="4293" fg:w="6"/><text x="79.5005%" y="1183.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (6 samples, 0.11%)</title><rect x="79.2505%" y="1157" width="0.1108%" height="15" fill="rgb(217,156,11)" fg:x="4293" fg:w="6"/><text x="79.5005%" y="1167.50"></text></g><g><title>DataStream::write (6 samples, 0.11%)</title><rect x="79.2505%" y="1141" width="0.1108%" height="15" fill="rgb(239,99,48)" fg:x="4293" fg:w="6"/><text x="79.5005%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (6 samples, 0.11%)</title><rect x="79.2505%" y="1125" width="0.1108%" height="15" fill="rgb(231,209,9)" fg:x="4293" fg:w="6"/><text x="79.5005%" y="1135.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (5 samples, 0.09%)</title><rect x="79.2690%" y="1109" width="0.0923%" height="15" fill="rgb(254,97,27)" fg:x="4294" fg:w="5"/><text x="79.5190%" y="1119.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.04%)</title><rect x="79.3243%" y="1093" width="0.0369%" height="15" fill="rgb(223,151,38)" fg:x="4297" fg:w="2"/><text x="79.5743%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (1 samples, 0.02%)</title><rect x="79.3613%" y="1173" width="0.0185%" height="15" fill="rgb(219,206,35)" fg:x="4299" fg:w="1"/><text x="79.6113%" y="1183.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char&gt; (1 samples, 0.02%)</title><rect x="79.3613%" y="1157" width="0.0185%" height="15" fill="rgb(216,130,31)" fg:x="4299" fg:w="1"/><text x="79.6113%" y="1167.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="79.3613%" y="1141" width="0.0185%" height="15" fill="rgb(251,97,34)" fg:x="4299" fg:w="1"/><text x="79.6113%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="79.3613%" y="1125" width="0.0185%" height="15" fill="rgb(246,159,47)" fg:x="4299" fg:w="1"/><text x="79.6113%" y="1135.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="79.3613%" y="1109" width="0.0185%" height="15" fill="rgb(232,87,10)" fg:x="4299" fg:w="1"/><text x="79.6113%" y="1119.50"></text></g><g><title>IsToScriptID (1 samples, 0.02%)</title><rect x="79.3613%" y="1093" width="0.0185%" height="15" fill="rgb(249,1,37)" fg:x="4299" fg:w="1"/><text x="79.6113%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="79.3797%" y="1173" width="0.0185%" height="15" fill="rgb(239,135,14)" fg:x="4300" fg:w="1"/><text x="79.6297%" y="1183.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="79.3797%" y="1157" width="0.0185%" height="15" fill="rgb(253,116,46)" fg:x="4300" fg:w="1"/><text x="79.6297%" y="1167.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="79.3797%" y="1141" width="0.0185%" height="15" fill="rgb(222,217,37)" fg:x="4300" fg:w="1"/><text x="79.6297%" y="1151.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="79.3797%" y="1125" width="0.0185%" height="15" fill="rgb(252,96,8)" fg:x="4300" fg:w="1"/><text x="79.6297%" y="1135.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="79.3797%" y="1109" width="0.0185%" height="15" fill="rgb(254,103,41)" fg:x="4300" fg:w="1"/><text x="79.6297%" y="1119.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (17 samples, 0.31%)</title><rect x="79.1028%" y="1317" width="0.3138%" height="15" fill="rgb(218,213,19)" fg:x="4285" fg:w="17"/><text x="79.3528%" y="1327.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (17 samples, 0.31%)</title><rect x="79.1028%" y="1301" width="0.3138%" height="15" fill="rgb(253,95,21)" fg:x="4285" fg:w="17"/><text x="79.3528%" y="1311.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (17 samples, 0.31%)</title><rect x="79.1028%" y="1285" width="0.3138%" height="15" fill="rgb(229,26,28)" fg:x="4285" fg:w="17"/><text x="79.3528%" y="1295.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (17 samples, 0.31%)</title><rect x="79.1028%" y="1269" width="0.3138%" height="15" fill="rgb(230,129,16)" fg:x="4285" fg:w="17"/><text x="79.3528%" y="1279.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (17 samples, 0.31%)</title><rect x="79.1028%" y="1253" width="0.3138%" height="15" fill="rgb(236,126,17)" fg:x="4285" fg:w="17"/><text x="79.3528%" y="1263.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (17 samples, 0.31%)</title><rect x="79.1028%" y="1237" width="0.3138%" height="15" fill="rgb(209,33,33)" fg:x="4285" fg:w="17"/><text x="79.3528%" y="1247.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (12 samples, 0.22%)</title><rect x="79.1951%" y="1221" width="0.2215%" height="15" fill="rgb(227,85,29)" fg:x="4290" fg:w="12"/><text x="79.4451%" y="1231.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (12 samples, 0.22%)</title><rect x="79.1951%" y="1205" width="0.2215%" height="15" fill="rgb(241,53,46)" fg:x="4290" fg:w="12"/><text x="79.4451%" y="1215.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (12 samples, 0.22%)</title><rect x="79.1951%" y="1189" width="0.2215%" height="15" fill="rgb(228,167,53)" fg:x="4290" fg:w="12"/><text x="79.4451%" y="1199.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="79.3982%" y="1173" width="0.0185%" height="15" fill="rgb(238,195,45)" fg:x="4301" fg:w="1"/><text x="79.6482%" y="1183.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="79.3982%" y="1157" width="0.0185%" height="15" fill="rgb(252,124,45)" fg:x="4301" fg:w="1"/><text x="79.6482%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::copy&lt;std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="79.4351%" y="1189" width="0.0185%" height="15" fill="rgb(251,38,35)" fg:x="4303" fg:w="1"/><text x="79.6851%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::__copy_move_a&lt;false, std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="79.4351%" y="1173" width="0.0185%" height="15" fill="rgb(227,33,2)" fg:x="4303" fg:w="1"/><text x="79.6851%" y="1183.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="79.4351%" y="1157" width="0.0185%" height="15" fill="rgb(223,157,46)" fg:x="4303" fg:w="1"/><text x="79.6851%" y="1167.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="79.4351%" y="1141" width="0.0185%" height="15" fill="rgb(222,78,41)" fg:x="4303" fg:w="1"/><text x="79.6851%" y="1151.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="79.4351%" y="1125" width="0.0185%" height="15" fill="rgb(248,176,11)" fg:x="4303" fg:w="1"/><text x="79.6851%" y="1135.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (21 samples, 0.39%)</title><rect x="79.4167%" y="1269" width="0.3877%" height="15" fill="rgb(241,221,18)" fg:x="4302" fg:w="21"/><text x="79.6667%" y="1279.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (21 samples, 0.39%)</title><rect x="79.4167%" y="1253" width="0.3877%" height="15" fill="rgb(218,85,22)" fg:x="4302" fg:w="21"/><text x="79.6667%" y="1263.50"></text></g><g><title>DataStream::write (21 samples, 0.39%)</title><rect x="79.4167%" y="1237" width="0.3877%" height="15" fill="rgb(222,223,7)" fg:x="4302" fg:w="21"/><text x="79.6667%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (21 samples, 0.39%)</title><rect x="79.4167%" y="1221" width="0.3877%" height="15" fill="rgb(254,59,39)" fg:x="4302" fg:w="21"/><text x="79.6667%" y="1231.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (21 samples, 0.39%)</title><rect x="79.4167%" y="1205" width="0.3877%" height="15" fill="rgb(247,100,27)" fg:x="4302" fg:w="21"/><text x="79.6667%" y="1215.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (19 samples, 0.35%)</title><rect x="79.4536%" y="1189" width="0.3507%" height="15" fill="rgb(237,207,10)" fg:x="4304" fg:w="19"/><text x="79.7036%" y="1199.50"></text></g><g><title>decltype  (11 samples, 0.20%)</title><rect x="79.6013%" y="1173" width="0.2031%" height="15" fill="rgb(220,121,28)" fg:x="4312" fg:w="11"/><text x="79.8513%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (11 samples, 0.20%)</title><rect x="79.6013%" y="1157" width="0.2031%" height="15" fill="rgb(213,223,20)" fg:x="4312" fg:w="11"/><text x="79.8513%" y="1167.50"></text></g><g><title>decltype (11 samples, 0.20%)</title><rect x="79.6013%" y="1141" width="0.2031%" height="15" fill="rgb(205,121,27)" fg:x="4312" fg:w="11"/><text x="79.8513%" y="1151.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (50 samples, 0.92%)</title><rect x="79.1028%" y="1365" width="0.9230%" height="15" fill="rgb(253,24,53)" fg:x="4285" fg:w="50"/><text x="79.3528%" y="1375.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (50 samples, 0.92%)</title><rect x="79.1028%" y="1349" width="0.9230%" height="15" fill="rgb(224,224,47)" fg:x="4285" fg:w="50"/><text x="79.3528%" y="1359.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (50 samples, 0.92%)</title><rect x="79.1028%" y="1333" width="0.9230%" height="15" fill="rgb(250,125,36)" fg:x="4285" fg:w="50"/><text x="79.3528%" y="1343.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (33 samples, 0.61%)</title><rect x="79.4167%" y="1317" width="0.6092%" height="15" fill="rgb(240,144,38)" fg:x="4302" fg:w="33"/><text x="79.6667%" y="1327.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (33 samples, 0.61%)</title><rect x="79.4167%" y="1301" width="0.6092%" height="15" fill="rgb(250,15,50)" fg:x="4302" fg:w="33"/><text x="79.6667%" y="1311.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (33 samples, 0.61%)</title><rect x="79.4167%" y="1285" width="0.6092%" height="15" fill="rgb(210,24,26)" fg:x="4302" fg:w="33"/><text x="79.6667%" y="1295.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (12 samples, 0.22%)</title><rect x="79.8043%" y="1269" width="0.2215%" height="15" fill="rgb(234,53,53)" fg:x="4323" fg:w="12"/><text x="80.0543%" y="1279.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (12 samples, 0.22%)</title><rect x="79.8043%" y="1253" width="0.2215%" height="15" fill="rgb(208,108,28)" fg:x="4323" fg:w="12"/><text x="80.0543%" y="1263.50"></text></g><g><title>decltype  (7 samples, 0.13%)</title><rect x="79.8966%" y="1237" width="0.1292%" height="15" fill="rgb(227,143,7)" fg:x="4328" fg:w="7"/><text x="80.1466%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (7 samples, 0.13%)</title><rect x="79.8966%" y="1221" width="0.1292%" height="15" fill="rgb(238,189,38)" fg:x="4328" fg:w="7"/><text x="80.1466%" y="1231.50"></text></g><g><title>decltype (7 samples, 0.13%)</title><rect x="79.8966%" y="1205" width="0.1292%" height="15" fill="rgb(222,69,15)" fg:x="4328" fg:w="7"/><text x="80.1466%" y="1215.50"></text></g><g><title>DataStream::clear (1 samples, 0.02%)</title><rect x="80.0258%" y="1365" width="0.0185%" height="15" fill="rgb(213,169,7)" fg:x="4335" fg:w="1"/><text x="80.2758%" y="1375.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="80.0443%" y="1253" width="0.0185%" height="15" fill="rgb(251,219,4)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1263.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.0443%" y="1237" width="0.0185%" height="15" fill="rgb(241,55,40)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1247.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="80.0443%" y="1221" width="0.0185%" height="15" fill="rgb(243,57,30)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1231.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="80.0443%" y="1205" width="0.0185%" height="15" fill="rgb(234,50,30)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1215.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.0443%" y="1189" width="0.0185%" height="15" fill="rgb(239,23,42)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1199.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="80.0443%" y="1173" width="0.0185%" height="15" fill="rgb(217,38,19)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="80.0443%" y="1157" width="0.0185%" height="15" fill="rgb(215,179,16)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1167.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="80.0443%" y="1141" width="0.0185%" height="15" fill="rgb(254,21,37)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1151.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="80.0443%" y="1125" width="0.0185%" height="15" fill="rgb(219,207,48)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1135.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="80.0443%" y="1109" width="0.0185%" height="15" fill="rgb(227,225,41)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="80.0443%" y="1093" width="0.0185%" height="15" fill="rgb(223,130,1)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1103.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="80.0443%" y="1077" width="0.0185%" height="15" fill="rgb(249,54,42)" fg:x="4336" fg:w="1"/><text x="80.2943%" y="1087.50"></text></g><g><title>DataStream::clear (1 samples, 0.02%)</title><rect x="80.0628%" y="1109" width="0.0185%" height="15" fill="rgb(248,69,25)" fg:x="4337" fg:w="1"/><text x="80.3128%" y="1119.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="80.0628%" y="1093" width="0.0185%" height="15" fill="rgb(234,21,32)" fg:x="4337" fg:w="1"/><text x="80.3128%" y="1103.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="80.0628%" y="1077" width="0.0185%" height="15" fill="rgb(252,136,6)" fg:x="4337" fg:w="1"/><text x="80.3128%" y="1087.50"></text></g><g><title>CCoinsViewDB::BatchWrite (2 samples, 0.04%)</title><rect x="80.0628%" y="1141" width="0.0369%" height="15" fill="rgb(245,87,12)" fg:x="4337" fg:w="2"/><text x="80.3128%" y="1151.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.04%)</title><rect x="80.0628%" y="1125" width="0.0369%" height="15" fill="rgb(208,12,15)" fg:x="4337" fg:w="2"/><text x="80.3128%" y="1135.50"></text></g><g><title>DataStream::reserve (1 samples, 0.02%)</title><rect x="80.0812%" y="1109" width="0.0185%" height="15" fill="rgb(250,98,2)" fg:x="4338" fg:w="1"/><text x="80.3312%" y="1119.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="80.0812%" y="1093" width="0.0185%" height="15" fill="rgb(205,213,15)" fg:x="4338" fg:w="1"/><text x="80.3312%" y="1103.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="80.0997%" y="1141" width="0.0185%" height="15" fill="rgb(248,192,44)" fg:x="4339" fg:w="1"/><text x="80.3497%" y="1151.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (4 samples, 0.07%)</title><rect x="80.0628%" y="1253" width="0.0738%" height="15" fill="rgb(221,89,17)" fg:x="4337" fg:w="4"/><text x="80.3128%" y="1263.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="80.0628%" y="1237" width="0.0738%" height="15" fill="rgb(209,55,3)" fg:x="4337" fg:w="4"/><text x="80.3128%" y="1247.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="80.0628%" y="1221" width="0.0738%" height="15" fill="rgb(247,23,45)" fg:x="4337" fg:w="4"/><text x="80.3128%" y="1231.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (4 samples, 0.07%)</title><rect x="80.0628%" y="1205" width="0.0738%" height="15" fill="rgb(235,152,23)" fg:x="4337" fg:w="4"/><text x="80.3128%" y="1215.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (4 samples, 0.07%)</title><rect x="80.0628%" y="1189" width="0.0738%" height="15" fill="rgb(244,63,13)" fg:x="4337" fg:w="4"/><text x="80.3128%" y="1199.50"></text></g><g><title>DataStream::write (4 samples, 0.07%)</title><rect x="80.0628%" y="1173" width="0.0738%" height="15" fill="rgb(227,30,37)" fg:x="4337" fg:w="4"/><text x="80.3128%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (4 samples, 0.07%)</title><rect x="80.0628%" y="1157" width="0.0738%" height="15" fill="rgb(224,49,42)" fg:x="4337" fg:w="4"/><text x="80.3128%" y="1167.50"></text></g><g><title>leveldb::WriteBatch::Put (1 samples, 0.02%)</title><rect x="80.1181%" y="1141" width="0.0185%" height="15" fill="rgb(218,129,5)" fg:x="4340" fg:w="1"/><text x="80.3681%" y="1151.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (57 samples, 1.05%)</title><rect x="79.1028%" y="1381" width="1.0522%" height="15" fill="rgb(240,199,54)" fg:x="4285" fg:w="57"/><text x="79.3528%" y="1391.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (6 samples, 0.11%)</title><rect x="80.0443%" y="1365" width="0.1108%" height="15" fill="rgb(234,31,13)" fg:x="4336" fg:w="6"/><text x="80.2943%" y="1375.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (6 samples, 0.11%)</title><rect x="80.0443%" y="1349" width="0.1108%" height="15" fill="rgb(219,73,54)" fg:x="4336" fg:w="6"/><text x="80.2943%" y="1359.50"></text></g><g><title>Serialize&lt;DataStream&gt; (6 samples, 0.11%)</title><rect x="80.0443%" y="1333" width="0.1108%" height="15" fill="rgb(251,162,10)" fg:x="4336" fg:w="6"/><text x="80.2943%" y="1343.50"></text></g><g><title>Ser&lt;DataStream&gt; (6 samples, 0.11%)</title><rect x="80.0443%" y="1317" width="0.1108%" height="15" fill="rgb(240,138,47)" fg:x="4336" fg:w="6"/><text x="80.2943%" y="1327.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (6 samples, 0.11%)</title><rect x="80.0443%" y="1301" width="0.1108%" height="15" fill="rgb(216,138,26)" fg:x="4336" fg:w="6"/><text x="80.2943%" y="1311.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="80.0443%" y="1285" width="0.1108%" height="15" fill="rgb(243,17,35)" fg:x="4336" fg:w="6"/><text x="80.2943%" y="1295.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="80.0443%" y="1269" width="0.1108%" height="15" fill="rgb(241,60,18)" fg:x="4336" fg:w="6"/><text x="80.2943%" y="1279.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.1366%" y="1253" width="0.0185%" height="15" fill="rgb(234,2,44)" fg:x="4341" fg:w="1"/><text x="80.3866%" y="1263.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.1366%" y="1237" width="0.0185%" height="15" fill="rgb(225,225,33)" fg:x="4341" fg:w="1"/><text x="80.3866%" y="1247.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="80.1366%" y="1221" width="0.0185%" height="15" fill="rgb(234,50,31)" fg:x="4341" fg:w="1"/><text x="80.3866%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="80.1366%" y="1205" width="0.0185%" height="15" fill="rgb(249,6,25)" fg:x="4341" fg:w="1"/><text x="80.3866%" y="1215.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="80.1366%" y="1189" width="0.0185%" height="15" fill="rgb(241,5,17)" fg:x="4341" fg:w="1"/><text x="80.3866%" y="1199.50"></text></g><g><title>CCoinsViewDB::BatchWrite (307 samples, 5.67%)</title><rect x="74.5616%" y="1397" width="5.6673%" height="15" fill="rgb(207,116,10)" fg:x="4039" fg:w="307"/><text x="74.8116%" y="1407.50">CCoinsV..</text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.1551%" y="1381" width="0.0738%" height="15" fill="rgb(222,128,18)" fg:x="4342" fg:w="4"/><text x="80.4051%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.1551%" y="1365" width="0.0738%" height="15" fill="rgb(229,109,25)" fg:x="4342" fg:w="4"/><text x="80.4051%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.1551%" y="1349" width="0.0738%" height="15" fill="rgb(222,102,25)" fg:x="4342" fg:w="4"/><text x="80.4051%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.1551%" y="1333" width="0.0738%" height="15" fill="rgb(239,211,5)" fg:x="4342" fg:w="4"/><text x="80.4051%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.1551%" y="1317" width="0.0738%" height="15" fill="rgb(223,136,26)" fg:x="4342" fg:w="4"/><text x="80.4051%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.1551%" y="1301" width="0.0738%" height="15" fill="rgb(227,30,15)" fg:x="4342" fg:w="4"/><text x="80.4051%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.1551%" y="1285" width="0.0738%" height="15" fill="rgb(247,76,4)" fg:x="4342" fg:w="4"/><text x="80.4051%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1269" width="0.0554%" height="15" fill="rgb(245,38,48)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1253" width="0.0554%" height="15" fill="rgb(210,220,14)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1237" width="0.0554%" height="15" fill="rgb(224,60,51)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1221" width="0.0554%" height="15" fill="rgb(212,133,49)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1205" width="0.0554%" height="15" fill="rgb(231,39,22)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1189" width="0.0554%" height="15" fill="rgb(236,173,22)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1173" width="0.0554%" height="15" fill="rgb(210,70,0)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1157" width="0.0554%" height="15" fill="rgb(215,170,11)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1141" width="0.0554%" height="15" fill="rgb(220,154,28)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="80.1735%" y="1125" width="0.0554%" height="15" fill="rgb(240,160,41)" fg:x="4343" fg:w="3"/><text x="80.4235%" y="1135.50"></text></g><g><title>CDBBatch::EraseImpl (1 samples, 0.02%)</title><rect x="80.2289%" y="1397" width="0.0185%" height="15" fill="rgb(243,215,41)" fg:x="4346" fg:w="1"/><text x="80.4789%" y="1407.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.02%)</title><rect x="80.2474%" y="1397" width="0.0185%" height="15" fill="rgb(214,208,31)" fg:x="4347" fg:w="1"/><text x="80.4974%" y="1407.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="80.2658%" y="1397" width="0.0185%" height="15" fill="rgb(247,57,22)" fg:x="4348" fg:w="1"/><text x="80.5158%" y="1407.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="80.2843%" y="1397" width="0.0185%" height="15" fill="rgb(228,73,52)" fg:x="4349" fg:w="1"/><text x="80.5343%" y="1407.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="80.3028%" y="1397" width="0.0185%" height="15" fill="rgb(252,60,9)" fg:x="4350" fg:w="1"/><text x="80.5528%" y="1407.50"></text></g><g><title>leveldb::WriteBatchInternal::SetCount (1 samples, 0.02%)</title><rect x="80.3212%" y="1397" width="0.0185%" height="15" fill="rgb(233,9,51)" fg:x="4351" fg:w="1"/><text x="80.5712%" y="1407.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="80.3397%" y="1365" width="0.0185%" height="15" fill="rgb(223,67,14)" fg:x="4352" fg:w="1"/><text x="80.5897%" y="1375.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (1 samples, 0.02%)</title><rect x="80.4135%" y="1349" width="0.0185%" height="15" fill="rgb(222,86,2)" fg:x="4356" fg:w="1"/><text x="80.6635%" y="1359.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (9 samples, 0.17%)</title><rect x="80.4320%" y="1333" width="0.1661%" height="15" fill="rgb(243,58,54)" fg:x="4357" fg:w="9"/><text x="80.6820%" y="1343.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (9 samples, 0.17%)</title><rect x="80.4320%" y="1317" width="0.1661%" height="15" fill="rgb(210,200,39)" fg:x="4357" fg:w="9"/><text x="80.6820%" y="1327.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (9 samples, 0.17%)</title><rect x="80.4320%" y="1301" width="0.1661%" height="15" fill="rgb(238,135,9)" fg:x="4357" fg:w="9"/><text x="80.6820%" y="1311.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (6 samples, 0.11%)</title><rect x="80.4874%" y="1285" width="0.1108%" height="15" fill="rgb(232,179,7)" fg:x="4360" fg:w="6"/><text x="80.7374%" y="1295.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (6 samples, 0.11%)</title><rect x="80.4874%" y="1269" width="0.1108%" height="15" fill="rgb(245,65,41)" fg:x="4360" fg:w="6"/><text x="80.7374%" y="1279.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (6 samples, 0.11%)</title><rect x="80.4874%" y="1253" width="0.1108%" height="15" fill="rgb(227,43,8)" fg:x="4360" fg:w="6"/><text x="80.7374%" y="1263.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (1 samples, 0.02%)</title><rect x="80.5797%" y="1237" width="0.0185%" height="15" fill="rgb(235,91,14)" fg:x="4365" fg:w="1"/><text x="80.8297%" y="1247.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (4 samples, 0.07%)</title><rect x="80.5981%" y="1237" width="0.0738%" height="15" fill="rgb(235,219,31)" fg:x="4366" fg:w="4"/><text x="80.8481%" y="1247.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (2 samples, 0.04%)</title><rect x="80.6350%" y="1221" width="0.0369%" height="15" fill="rgb(227,121,25)" fg:x="4368" fg:w="2"/><text x="80.8850%" y="1231.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (34 samples, 0.63%)</title><rect x="80.3397%" y="1397" width="0.6277%" height="15" fill="rgb(254,129,24)" fg:x="4352" fg:w="34"/><text x="80.5897%" y="1407.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (34 samples, 0.63%)</title><rect x="80.3397%" y="1381" width="0.6277%" height="15" fill="rgb(226,144,49)" fg:x="4352" fg:w="34"/><text x="80.5897%" y="1391.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (33 samples, 0.61%)</title><rect x="80.3581%" y="1365" width="0.6092%" height="15" fill="rgb(214,187,32)" fg:x="4353" fg:w="33"/><text x="80.6081%" y="1375.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (29 samples, 0.54%)</title><rect x="80.4320%" y="1349" width="0.5354%" height="15" fill="rgb(243,129,46)" fg:x="4357" fg:w="29"/><text x="80.6820%" y="1359.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (20 samples, 0.37%)</title><rect x="80.5981%" y="1333" width="0.3692%" height="15" fill="rgb(221,185,35)" fg:x="4366" fg:w="20"/><text x="80.8481%" y="1343.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (20 samples, 0.37%)</title><rect x="80.5981%" y="1317" width="0.3692%" height="15" fill="rgb(205,0,32)" fg:x="4366" fg:w="20"/><text x="80.8481%" y="1327.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (20 samples, 0.37%)</title><rect x="80.5981%" y="1301" width="0.3692%" height="15" fill="rgb(229,179,12)" fg:x="4366" fg:w="20"/><text x="80.8481%" y="1311.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (20 samples, 0.37%)</title><rect x="80.5981%" y="1285" width="0.3692%" height="15" fill="rgb(252,107,19)" fg:x="4366" fg:w="20"/><text x="80.8481%" y="1295.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (20 samples, 0.37%)</title><rect x="80.5981%" y="1269" width="0.3692%" height="15" fill="rgb(220,95,27)" fg:x="4366" fg:w="20"/><text x="80.8481%" y="1279.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (20 samples, 0.37%)</title><rect x="80.5981%" y="1253" width="0.3692%" height="15" fill="rgb(240,113,40)" fg:x="4366" fg:w="20"/><text x="80.8481%" y="1263.50"></text></g><g><title>Coin::~Coin (16 samples, 0.30%)</title><rect x="80.6720%" y="1237" width="0.2954%" height="15" fill="rgb(208,4,43)" fg:x="4370" fg:w="16"/><text x="80.9220%" y="1247.50"></text></g><g><title>CTxOut::~CTxOut (16 samples, 0.30%)</title><rect x="80.6720%" y="1221" width="0.2954%" height="15" fill="rgb(247,189,30)" fg:x="4370" fg:w="16"/><text x="80.9220%" y="1231.50"></text></g><g><title>CScript::~CScript (16 samples, 0.30%)</title><rect x="80.6720%" y="1205" width="0.2954%" height="15" fill="rgb(231,157,17)" fg:x="4370" fg:w="16"/><text x="80.9220%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (16 samples, 0.30%)</title><rect x="80.6720%" y="1189" width="0.2954%" height="15" fill="rgb(224,139,6)" fg:x="4370" fg:w="16"/><text x="80.9220%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="80.9489%" y="1173" width="0.0185%" height="15" fill="rgb(223,83,16)" fg:x="4385" fg:w="1"/><text x="81.1989%" y="1183.50"></text></g><g><title>CCoinsViewCache::Flush (357 samples, 6.59%)</title><rect x="74.3954%" y="1413" width="6.5904%" height="15" fill="rgb(232,211,20)" fg:x="4030" fg:w="357"/><text x="74.6454%" y="1423.50">CCoinsVie..</text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="80.9673%" y="1397" width="0.0185%" height="15" fill="rgb(225,203,35)" fg:x="4386" fg:w="1"/><text x="81.2173%" y="1407.50"></text></g><g><title>CDiskBlockIndex::CDiskBlockIndex (4 samples, 0.07%)</title><rect x="80.9858%" y="1381" width="0.0738%" height="15" fill="rgb(215,211,44)" fg:x="4387" fg:w="4"/><text x="81.2358%" y="1391.50"></text></g><g><title>CBlockIndex::CBlockIndex (4 samples, 0.07%)</title><rect x="80.9858%" y="1365" width="0.0738%" height="15" fill="rgb(248,213,26)" fg:x="4387" fg:w="4"/><text x="81.2358%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.9858%" y="1349" width="0.0738%" height="15" fill="rgb(214,23,52)" fg:x="4387" fg:w="4"/><text x="81.2358%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.9858%" y="1333" width="0.0738%" height="15" fill="rgb(225,173,50)" fg:x="4387" fg:w="4"/><text x="81.2358%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.9858%" y="1317" width="0.0738%" height="15" fill="rgb(206,150,22)" fg:x="4387" fg:w="4"/><text x="81.2358%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.9858%" y="1301" width="0.0738%" height="15" fill="rgb(239,64,23)" fg:x="4387" fg:w="4"/><text x="81.2358%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.9858%" y="1285" width="0.0738%" height="15" fill="rgb(242,50,38)" fg:x="4387" fg:w="4"/><text x="81.2358%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="81.0042%" y="1269" width="0.0554%" height="15" fill="rgb(217,91,15)" fg:x="4388" fg:w="3"/><text x="81.2542%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="81.0042%" y="1253" width="0.0554%" height="15" fill="rgb(230,172,6)" fg:x="4388" fg:w="3"/><text x="81.2542%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="81.0042%" y="1237" width="0.0554%" height="15" fill="rgb(221,98,26)" fg:x="4388" fg:w="3"/><text x="81.2542%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="81.0042%" y="1221" width="0.0554%" height="15" fill="rgb(227,210,45)" fg:x="4388" fg:w="3"/><text x="81.2542%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="81.0042%" y="1205" width="0.0554%" height="15" fill="rgb(206,8,30)" fg:x="4388" fg:w="3"/><text x="81.2542%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="81.0042%" y="1189" width="0.0554%" height="15" fill="rgb(241,219,17)" fg:x="4388" fg:w="3"/><text x="81.2542%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="81.0042%" y="1173" width="0.0554%" height="15" fill="rgb(247,121,29)" fg:x="4388" fg:w="3"/><text x="81.2542%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="81.0042%" y="1157" width="0.0554%" height="15" fill="rgb(219,169,49)" fg:x="4388" fg:w="3"/><text x="81.2542%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="81.0042%" y="1141" width="0.0554%" height="15" fill="rgb(253,49,49)" fg:x="4388" fg:w="3"/><text x="81.2542%" y="1151.50"></text></g><g><title>Chainstate::ForceFlushStateToDisk (362 samples, 6.68%)</title><rect x="74.3954%" y="1445" width="6.6827%" height="15" fill="rgb(217,178,3)" fg:x="4030" fg:w="362"/><text x="74.6454%" y="1455.50">Chainstat..</text></g><g><title>Chainstate::FlushStateToDisk (362 samples, 6.68%)</title><rect x="74.3954%" y="1429" width="6.6827%" height="15" fill="rgb(234,73,37)" fg:x="4030" fg:w="362"/><text x="74.6454%" y="1439.50">Chainstat..</text></g><g><title>node::BlockManager::WriteBlockIndexDB (5 samples, 0.09%)</title><rect x="80.9858%" y="1413" width="0.0923%" height="15" fill="rgb(250,98,22)" fg:x="4387" fg:w="5"/><text x="81.2358%" y="1423.50"></text></g><g><title>kernel::BlockTreeDB::WriteBatchSync (5 samples, 0.09%)</title><rect x="80.9858%" y="1397" width="0.0923%" height="15" fill="rgb(220,108,37)" fg:x="4387" fg:w="5"/><text x="81.2358%" y="1407.50"></text></g><g><title>void CDBBatch::Write&lt;std::pair&lt;unsigned char, uint256&gt;, CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="81.0596%" y="1381" width="0.0185%" height="15" fill="rgb(225,168,10)" fg:x="4391" fg:w="1"/><text x="81.3096%" y="1391.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.02%)</title><rect x="81.0596%" y="1365" width="0.0185%" height="15" fill="rgb(247,215,21)" fg:x="4391" fg:w="1"/><text x="81.3096%" y="1375.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="81.0596%" y="1349" width="0.0185%" height="15" fill="rgb(253,189,31)" fg:x="4391" fg:w="1"/><text x="81.3096%" y="1359.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="81.0596%" y="1333" width="0.0185%" height="15" fill="rgb(241,54,22)" fg:x="4391" fg:w="1"/><text x="81.3096%" y="1343.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="81.0596%" y="1317" width="0.0185%" height="15" fill="rgb(211,87,4)" fg:x="4391" fg:w="1"/><text x="81.3096%" y="1327.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="81.0596%" y="1301" width="0.0185%" height="15" fill="rgb(245,112,24)" fg:x="4391" fg:w="1"/><text x="81.3096%" y="1311.50"></text></g><g><title>Chainstate::ResetCoinsViews (22 samples, 0.41%)</title><rect x="81.0781%" y="1445" width="0.4061%" height="15" fill="rgb(235,190,41)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1455.50"></text></g><g><title>std::unique_ptr&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (22 samples, 0.41%)</title><rect x="81.0781%" y="1429" width="0.4061%" height="15" fill="rgb(214,89,8)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1439.50"></text></g><g><title>std::__uniq_ptr_impl&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (22 samples, 0.41%)</title><rect x="81.0781%" y="1413" width="0.4061%" height="15" fill="rgb(249,155,35)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1423.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (22 samples, 0.41%)</title><rect x="81.0781%" y="1397" width="0.4061%" height="15" fill="rgb(249,88,26)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1407.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (22 samples, 0.41%)</title><rect x="81.0781%" y="1381" width="0.4061%" height="15" fill="rgb(232,56,8)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1391.50"></text></g><g><title>CoinsViews::~CoinsViews (22 samples, 0.41%)</title><rect x="81.0781%" y="1365" width="0.4061%" height="15" fill="rgb(240,95,3)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1375.50"></text></g><g><title>CCoinsViewDB::~CCoinsViewDB (22 samples, 0.41%)</title><rect x="81.0781%" y="1349" width="0.4061%" height="15" fill="rgb(222,44,28)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1359.50"></text></g><g><title>std::unique_ptr&lt;CDBWrapper, std::default_delete&lt;CDBWrapper&gt; &gt;::~unique_ptr (22 samples, 0.41%)</title><rect x="81.0781%" y="1333" width="0.4061%" height="15" fill="rgb(234,16,30)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1343.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (22 samples, 0.41%)</title><rect x="81.0781%" y="1317" width="0.4061%" height="15" fill="rgb(223,26,17)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1327.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (22 samples, 0.41%)</title><rect x="81.0781%" y="1301" width="0.4061%" height="15" fill="rgb(239,187,47)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1311.50"></text></g><g><title>CDBWrapper::~CDBWrapper (22 samples, 0.41%)</title><rect x="81.0781%" y="1285" width="0.4061%" height="15" fill="rgb(247,102,50)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1295.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (22 samples, 0.41%)</title><rect x="81.0781%" y="1269" width="0.4061%" height="15" fill="rgb(231,216,22)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1279.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (22 samples, 0.41%)</title><rect x="81.0781%" y="1253" width="0.4061%" height="15" fill="rgb(216,201,26)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1263.50"></text></g><g><title>leveldb::TableCache::~TableCache (22 samples, 0.41%)</title><rect x="81.0781%" y="1237" width="0.4061%" height="15" fill="rgb(214,186,23)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1247.50"></text></g><g><title>~ShardedLRUCache (22 samples, 0.41%)</title><rect x="81.0781%" y="1221" width="0.4061%" height="15" fill="rgb(235,184,4)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::~ShardedLRUCache (22 samples, 0.41%)</title><rect x="81.0781%" y="1205" width="0.4061%" height="15" fill="rgb(244,46,17)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1215.50"></text></g><g><title>~LRUCache (22 samples, 0.41%)</title><rect x="81.0781%" y="1189" width="0.4061%" height="15" fill="rgb(248,74,46)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::~LRUCache (22 samples, 0.41%)</title><rect x="81.0781%" y="1173" width="0.4061%" height="15" fill="rgb(243,79,5)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1183.50"></text></g><g><title>leveldb::DeleteEntry (22 samples, 0.41%)</title><rect x="81.0781%" y="1157" width="0.4061%" height="15" fill="rgb(213,148,1)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1167.50"></text></g><g><title>~PosixMmapReadableFile (22 samples, 0.41%)</title><rect x="81.0781%" y="1141" width="0.4061%" height="15" fill="rgb(221,30,0)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (22 samples, 0.41%)</title><rect x="81.0781%" y="1125" width="0.4061%" height="15" fill="rgb(207,85,29)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1135.50"></text></g><g><title>__munmap (22 samples, 0.41%)</title><rect x="81.0781%" y="1109" width="0.4061%" height="15" fill="rgb(239,31,46)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1119.50"></text></g><g><title>[unknown] (22 samples, 0.41%)</title><rect x="81.0781%" y="1093" width="0.4061%" height="15" fill="rgb(219,6,1)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1103.50"></text></g><g><title>[unknown] (22 samples, 0.41%)</title><rect x="81.0781%" y="1077" width="0.4061%" height="15" fill="rgb(229,90,29)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1087.50"></text></g><g><title>[unknown] (22 samples, 0.41%)</title><rect x="81.0781%" y="1061" width="0.4061%" height="15" fill="rgb(242,201,42)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1071.50"></text></g><g><title>[unknown] (22 samples, 0.41%)</title><rect x="81.0781%" y="1045" width="0.4061%" height="15" fill="rgb(243,80,54)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1055.50"></text></g><g><title>[unknown] (22 samples, 0.41%)</title><rect x="81.0781%" y="1029" width="0.4061%" height="15" fill="rgb(223,166,15)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1039.50"></text></g><g><title>[unknown] (22 samples, 0.41%)</title><rect x="81.0781%" y="1013" width="0.4061%" height="15" fill="rgb(238,78,27)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1023.50"></text></g><g><title>[unknown] (22 samples, 0.41%)</title><rect x="81.0781%" y="997" width="0.4061%" height="15" fill="rgb(235,28,43)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="1007.50"></text></g><g><title>[unknown] (22 samples, 0.41%)</title><rect x="81.0781%" y="981" width="0.4061%" height="15" fill="rgb(240,210,28)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="991.50"></text></g><g><title>[unknown] (22 samples, 0.41%)</title><rect x="81.0781%" y="965" width="0.4061%" height="15" fill="rgb(253,6,46)" fg:x="4392" fg:w="22"/><text x="81.3281%" y="975.50"></text></g><g><title>[unknown] (17 samples, 0.31%)</title><rect x="81.1704%" y="949" width="0.3138%" height="15" fill="rgb(250,159,47)" fg:x="4397" fg:w="17"/><text x="81.4204%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.4658%" y="933" width="0.0185%" height="15" fill="rgb(216,139,2)" fg:x="4413" fg:w="1"/><text x="81.7158%" y="943.50"></text></g><g><title>StopRPC (1 samples, 0.02%)</title><rect x="81.4842%" y="1445" width="0.0185%" height="15" fill="rgb(221,124,44)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1455.50"></text></g><g><title>call_once&lt;StopRPC()::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="81.4842%" y="1429" width="0.0185%" height="15" fill="rgb(205,37,22)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1439.50"></text></g><g><title>StopRPC (1 samples, 0.02%)</title><rect x="81.4842%" y="1413" width="0.0185%" height="15" fill="rgb(250,55,8)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1423.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.02%)</title><rect x="81.4842%" y="1397" width="0.0185%" height="15" fill="rgb(215,83,48)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1407.50"></text></g><g><title>_FUN (1 samples, 0.02%)</title><rect x="81.4842%" y="1381" width="0.0185%" height="15" fill="rgb(253,2,32)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1391.50"></text></g><g><title>operator (1 samples, 0.02%)</title><rect x="81.4842%" y="1365" width="0.0185%" height="15" fill="rgb(236,67,28)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1375.50"></text></g><g><title>operator (1 samples, 0.02%)</title><rect x="81.4842%" y="1349" width="0.0185%" height="15" fill="rgb(252,55,15)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1359.50"></text></g><g><title>__invoke&lt;StopRPC()::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="81.4842%" y="1333" width="0.0185%" height="15" fill="rgb(243,173,17)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1343.50"></text></g><g><title>__invoke_impl&lt;void, StopRPC()::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="81.4842%" y="1317" width="0.0185%" height="15" fill="rgb(215,212,13)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1327.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;StopRPC()::{lambda()#1}&gt;(std::once_flag&amp;, StopRPC()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (1 samples, 0.02%)</title><rect x="81.4842%" y="1301" width="0.0185%" height="15" fill="rgb(253,176,6)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1311.50"></text></g><g><title>DeleteAuthCookie (1 samples, 0.02%)</title><rect x="81.4842%" y="1285" width="0.0185%" height="15" fill="rgb(236,105,26)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1295.50"></text></g><g><title>std::filesystem::remove (1 samples, 0.02%)</title><rect x="81.4842%" y="1269" width="0.0185%" height="15" fill="rgb(239,226,32)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1279.50"></text></g><g><title>std::filesystem::remove (1 samples, 0.02%)</title><rect x="81.4842%" y="1253" width="0.0185%" height="15" fill="rgb(236,104,51)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1263.50"></text></g><g><title>remove (1 samples, 0.02%)</title><rect x="81.4842%" y="1237" width="0.0185%" height="15" fill="rgb(220,172,33)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1247.50"></text></g><g><title>__unlink (1 samples, 0.02%)</title><rect x="81.4842%" y="1221" width="0.0185%" height="15" fill="rgb(224,182,25)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.4842%" y="1205" width="0.0185%" height="15" fill="rgb(236,184,24)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.4842%" y="1189" width="0.0185%" height="15" fill="rgb(241,221,14)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.4842%" y="1173" width="0.0185%" height="15" fill="rgb(227,146,5)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.4842%" y="1157" width="0.0185%" height="15" fill="rgb(214,15,23)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.4842%" y="1141" width="0.0185%" height="15" fill="rgb(233,157,31)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1151.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="81.4842%" y="1125" width="0.0185%" height="15" fill="rgb(211,27,52)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="81.4842%" y="1109" width="0.0185%" height="15" fill="rgb(212,223,15)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="81.4842%" y="1093" width="0.0185%" height="15" fill="rgb(254,211,0)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1103.50"></text></g><g><title>[[crc32c_intel]] (1 samples, 0.02%)</title><rect x="81.4842%" y="1077" width="0.0185%" height="15" fill="rgb(205,43,38)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1087.50"></text></g><g><title>[[crc32c_intel]] (1 samples, 0.02%)</title><rect x="81.4842%" y="1061" width="0.0185%" height="15" fill="rgb(242,206,46)" fg:x="4414" fg:w="1"/><text x="81.7342%" y="1071.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="81.5027%" y="1189" width="0.0185%" height="15" fill="rgb(220,221,12)" fg:x="4415" fg:w="1"/><text x="81.7527%" y="1199.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="81.5027%" y="1173" width="0.0185%" height="15" fill="rgb(217,156,35)" fg:x="4415" fg:w="1"/><text x="81.7527%" y="1183.50"></text></g><g><title>_start (387 samples, 7.14%)</title><rect x="74.3954%" y="1525" width="7.1442%" height="15" fill="rgb(207,181,49)" fg:x="4030" fg:w="387"/><text x="74.6454%" y="1535.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (387 samples, 7.14%)</title><rect x="74.3954%" y="1509" width="7.1442%" height="15" fill="rgb(235,103,47)" fg:x="4030" fg:w="387"/><text x="74.6454%" y="1519.50">__libc_sta..</text></g><g><title>__libc_start_call_main (387 samples, 7.14%)</title><rect x="74.3954%" y="1493" width="7.1442%" height="15" fill="rgb(222,63,28)" fg:x="4030" fg:w="387"/><text x="74.6454%" y="1503.50">__libc_sta..</text></g><g><title>main (387 samples, 7.14%)</title><rect x="74.3954%" y="1477" width="7.1442%" height="15" fill="rgb(244,137,21)" fg:x="4030" fg:w="387"/><text x="74.6454%" y="1487.50">main</text></g><g><title>Shutdown (387 samples, 7.14%)</title><rect x="74.3954%" y="1461" width="7.1442%" height="15" fill="rgb(228,35,27)" fg:x="4030" fg:w="387"/><text x="74.6454%" y="1471.50">Shutdown</text></g><g><title>std::unique_ptr&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (2 samples, 0.04%)</title><rect x="81.5027%" y="1445" width="0.0369%" height="15" fill="rgb(226,191,41)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1455.50"></text></g><g><title>std::__uniq_ptr_impl&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (2 samples, 0.04%)</title><rect x="81.5027%" y="1429" width="0.0369%" height="15" fill="rgb(210,154,3)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1439.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (2 samples, 0.04%)</title><rect x="81.5027%" y="1413" width="0.0369%" height="15" fill="rgb(216,60,49)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1423.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (2 samples, 0.04%)</title><rect x="81.5027%" y="1397" width="0.0369%" height="15" fill="rgb(226,17,20)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1407.50"></text></g><g><title>ChainstateManager::~ChainstateManager (2 samples, 0.04%)</title><rect x="81.5027%" y="1381" width="0.0369%" height="15" fill="rgb(206,115,35)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1391.50"></text></g><g><title>node::BlockManager::~BlockManager (2 samples, 0.04%)</title><rect x="81.5027%" y="1365" width="0.0369%" height="15" fill="rgb(227,88,1)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1375.50"></text></g><g><title>std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::~unordered_map (2 samples, 0.04%)</title><rect x="81.5027%" y="1349" width="0.0369%" height="15" fill="rgb(230,222,24)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1359.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="81.5027%" y="1333" width="0.0369%" height="15" fill="rgb(214,124,32)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1343.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="81.5027%" y="1317" width="0.0369%" height="15" fill="rgb(240,41,36)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1327.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="81.5027%" y="1301" width="0.0369%" height="15" fill="rgb(221,17,52)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1311.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_node (2 samples, 0.04%)</title><rect x="81.5027%" y="1285" width="0.0369%" height="15" fill="rgb(252,70,16)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1295.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (2 samples, 0.04%)</title><rect x="81.5027%" y="1269" width="0.0369%" height="15" fill="rgb(250,177,4)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1279.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::deallocate (2 samples, 0.04%)</title><rect x="81.5027%" y="1253" width="0.0369%" height="15" fill="rgb(240,188,47)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1263.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::deallocate (2 samples, 0.04%)</title><rect x="81.5027%" y="1237" width="0.0369%" height="15" fill="rgb(215,92,12)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1247.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::deallocate (2 samples, 0.04%)</title><rect x="81.5027%" y="1221" width="0.0369%" height="15" fill="rgb(242,110,29)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1231.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="81.5027%" y="1205" width="0.0369%" height="15" fill="rgb(208,211,26)" fg:x="4415" fg:w="2"/><text x="81.7527%" y="1215.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="81.5211%" y="1189" width="0.0185%" height="15" fill="rgb(244,147,6)" fg:x="4416" fg:w="1"/><text x="81.7711%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.06%)</title><rect x="81.5396%" y="1525" width="0.0554%" height="15" fill="rgb(211,130,42)" fg:x="4417" fg:w="3"/><text x="81.7896%" y="1535.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="81.5950%" y="1525" width="0.0185%" height="15" fill="rgb(220,63,1)" fg:x="4420" fg:w="1"/><text x="81.8450%" y="1535.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="81.5950%" y="1509" width="0.0185%" height="15" fill="rgb(241,212,30)" fg:x="4420" fg:w="1"/><text x="81.8450%" y="1519.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="81.5950%" y="1493" width="0.0185%" height="15" fill="rgb(233,153,17)" fg:x="4420" fg:w="1"/><text x="81.8450%" y="1503.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="81.6134%" y="1525" width="0.0185%" height="15" fill="rgb(236,3,10)" fg:x="4421" fg:w="1"/><text x="81.8634%" y="1535.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="81.6134%" y="1509" width="0.0185%" height="15" fill="rgb(232,41,21)" fg:x="4421" fg:w="1"/><text x="81.8634%" y="1519.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="81.6134%" y="1493" width="0.0185%" height="15" fill="rgb(206,63,51)" fg:x="4421" fg:w="1"/><text x="81.8634%" y="1503.50"></text></g><g><title>node::BlockManager::~BlockManager (1 samples, 0.02%)</title><rect x="81.6319%" y="1525" width="0.0185%" height="15" fill="rgb(250,214,3)" fg:x="4422" fg:w="1"/><text x="81.8819%" y="1535.50"></text></g><g><title>std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::~unordered_map (1 samples, 0.02%)</title><rect x="81.6319%" y="1509" width="0.0185%" height="15" fill="rgb(254,89,27)" fg:x="4422" fg:w="1"/><text x="81.8819%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="81.6319%" y="1493" width="0.0185%" height="15" fill="rgb(249,41,14)" fg:x="4422" fg:w="1"/><text x="81.8819%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="81.6319%" y="1477" width="0.0185%" height="15" fill="rgb(221,196,51)" fg:x="4422" fg:w="1"/><text x="81.8819%" y="1487.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="81.6319%" y="1461" width="0.0185%" height="15" fill="rgb(214,116,26)" fg:x="4422" fg:w="1"/><text x="81.8819%" y="1471.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.02%)</title><rect x="81.6319%" y="1445" width="0.0185%" height="15" fill="rgb(236,67,7)" fg:x="4422" fg:w="1"/><text x="81.8819%" y="1455.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (1 samples, 0.02%)</title><rect x="81.6504%" y="1477" width="0.0185%" height="15" fill="rgb(253,179,32)" fg:x="4423" fg:w="1"/><text x="81.9004%" y="1487.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="81.6504%" y="1461" width="0.0185%" height="15" fill="rgb(218,33,15)" fg:x="4423" fg:w="1"/><text x="81.9004%" y="1471.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (1 samples, 0.02%)</title><rect x="81.6504%" y="1445" width="0.0185%" height="15" fill="rgb(217,202,41)" fg:x="4423" fg:w="1"/><text x="81.9004%" y="1455.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.02%)</title><rect x="81.6504%" y="1429" width="0.0185%" height="15" fill="rgb(234,133,5)" fg:x="4423" fg:w="1"/><text x="81.9004%" y="1439.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.02%)</title><rect x="81.6504%" y="1413" width="0.0185%" height="15" fill="rgb(240,47,40)" fg:x="4423" fg:w="1"/><text x="81.9004%" y="1423.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (1 samples, 0.02%)</title><rect x="81.6504%" y="1397" width="0.0185%" height="15" fill="rgb(234,166,26)" fg:x="4423" fg:w="1"/><text x="81.9004%" y="1407.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="81.6688%" y="1381" width="0.0185%" height="15" fill="rgb(244,125,51)" fg:x="4424" fg:w="1"/><text x="81.9188%" y="1391.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="81.6688%" y="1365" width="0.0185%" height="15" fill="rgb(229,171,11)" fg:x="4424" fg:w="1"/><text x="81.9188%" y="1375.50"></text></g><g><title>b-shutoff (498 samples, 9.19%)</title><rect x="72.6417%" y="1541" width="9.1933%" height="15" fill="rgb(224,38,45)" fg:x="3935" fg:w="498"/><text x="72.8917%" y="1551.50">b-shutoff</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (10 samples, 0.18%)</title><rect x="81.6504%" y="1525" width="0.1846%" height="15" fill="rgb(237,27,7)" fg:x="4423" fg:w="10"/><text x="81.9004%" y="1535.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (10 samples, 0.18%)</title><rect x="81.6504%" y="1509" width="0.1846%" height="15" fill="rgb(216,52,7)" fg:x="4423" fg:w="10"/><text x="81.9004%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (10 samples, 0.18%)</title><rect x="81.6504%" y="1493" width="0.1846%" height="15" fill="rgb(243,11,11)" fg:x="4423" fg:w="10"/><text x="81.9004%" y="1503.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (9 samples, 0.17%)</title><rect x="81.6688%" y="1477" width="0.1661%" height="15" fill="rgb(253,167,20)" fg:x="4424" fg:w="9"/><text x="81.9188%" y="1487.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (9 samples, 0.17%)</title><rect x="81.6688%" y="1461" width="0.1661%" height="15" fill="rgb(215,207,5)" fg:x="4424" fg:w="9"/><text x="81.9188%" y="1471.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (9 samples, 0.17%)</title><rect x="81.6688%" y="1445" width="0.1661%" height="15" fill="rgb(252,127,31)" fg:x="4424" fg:w="9"/><text x="81.9188%" y="1455.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (9 samples, 0.17%)</title><rect x="81.6688%" y="1429" width="0.1661%" height="15" fill="rgb(209,106,27)" fg:x="4424" fg:w="9"/><text x="81.9188%" y="1439.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (9 samples, 0.17%)</title><rect x="81.6688%" y="1413" width="0.1661%" height="15" fill="rgb(214,220,18)" fg:x="4424" fg:w="9"/><text x="81.9188%" y="1423.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (9 samples, 0.17%)</title><rect x="81.6688%" y="1397" width="0.1661%" height="15" fill="rgb(237,89,12)" fg:x="4424" fg:w="9"/><text x="81.9188%" y="1407.50"></text></g><g><title>Coin::~Coin (8 samples, 0.15%)</title><rect x="81.6873%" y="1381" width="0.1477%" height="15" fill="rgb(209,167,36)" fg:x="4425" fg:w="8"/><text x="81.9373%" y="1391.50"></text></g><g><title>CTxOut::~CTxOut (8 samples, 0.15%)</title><rect x="81.6873%" y="1365" width="0.1477%" height="15" fill="rgb(243,45,22)" fg:x="4425" fg:w="8"/><text x="81.9373%" y="1375.50"></text></g><g><title>CScript::~CScript (8 samples, 0.15%)</title><rect x="81.6873%" y="1349" width="0.1477%" height="15" fill="rgb(239,2,46)" fg:x="4425" fg:w="8"/><text x="81.9373%" y="1359.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (8 samples, 0.15%)</title><rect x="81.6873%" y="1333" width="0.1477%" height="15" fill="rgb(241,101,0)" fg:x="4425" fg:w="8"/><text x="81.9373%" y="1343.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="81.8165%" y="1317" width="0.0185%" height="15" fill="rgb(244,34,31)" fg:x="4432" fg:w="1"/><text x="82.0665%" y="1327.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="81.8350%" y="1525" width="0.0185%" height="15" fill="rgb(248,23,22)" fg:x="4433" fg:w="1"/><text x="82.0850%" y="1535.50"></text></g><g><title>[000009.ldb] (1 samples, 0.02%)</title><rect x="81.8534%" y="1525" width="0.0185%" height="15" fill="rgb(218,27,48)" fg:x="4434" fg:w="1"/><text x="82.1034%" y="1535.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="81.8534%" y="1509" width="0.0185%" height="15" fill="rgb(232,78,1)" fg:x="4434" fg:w="1"/><text x="82.1034%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="81.8719%" y="1509" width="0.0185%" height="15" fill="rgb(233,169,12)" fg:x="4435" fg:w="1"/><text x="82.1219%" y="1519.50"></text></g><g><title>[001834.ldb] (2 samples, 0.04%)</title><rect x="81.8719%" y="1525" width="0.0369%" height="15" fill="rgb(225,222,54)" fg:x="4435" fg:w="2"/><text x="82.1219%" y="1535.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="81.8903%" y="1509" width="0.0185%" height="15" fill="rgb(245,126,29)" fg:x="4436" fg:w="1"/><text x="82.1403%" y="1519.50"></text></g><g><title>[001850.ldb] (1 samples, 0.02%)</title><rect x="81.9088%" y="1525" width="0.0185%" height="15" fill="rgb(241,63,48)" fg:x="4437" fg:w="1"/><text x="82.1588%" y="1535.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="81.9088%" y="1509" width="0.0185%" height="15" fill="rgb(235,126,38)" fg:x="4437" fg:w="1"/><text x="82.1588%" y="1519.50"></text></g><g><title>[002341.ldb] (1 samples, 0.02%)</title><rect x="81.9273%" y="1525" width="0.0185%" height="15" fill="rgb(232,96,49)" fg:x="4438" fg:w="1"/><text x="82.1773%" y="1535.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="81.9273%" y="1509" width="0.0185%" height="15" fill="rgb(211,146,40)" fg:x="4438" fg:w="1"/><text x="82.1773%" y="1519.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="81.9457%" y="1509" width="0.0185%" height="15" fill="rgb(247,93,44)" fg:x="4439" fg:w="1"/><text x="82.1957%" y="1519.50"></text></g><g><title>__clone (84 samples, 1.55%)</title><rect x="81.9642%" y="1509" width="1.5507%" height="15" fill="rgb(251,41,49)" fg:x="4440" fg:w="84"/><text x="82.2142%" y="1519.50"></text></g><g><title>[unknown] (83 samples, 1.53%)</title><rect x="81.9826%" y="1493" width="1.5322%" height="15" fill="rgb(218,155,12)" fg:x="4441" fg:w="83"/><text x="82.2326%" y="1503.50"></text></g><g><title>[unknown] (79 samples, 1.46%)</title><rect x="82.0565%" y="1477" width="1.4584%" height="15" fill="rgb(221,161,30)" fg:x="4445" fg:w="79"/><text x="82.3065%" y="1487.50"></text></g><g><title>[unknown] (77 samples, 1.42%)</title><rect x="82.0934%" y="1461" width="1.4215%" height="15" fill="rgb(221,179,11)" fg:x="4447" fg:w="77"/><text x="82.3434%" y="1471.50"></text></g><g><title>[unknown] (77 samples, 1.42%)</title><rect x="82.0934%" y="1445" width="1.4215%" height="15" fill="rgb(224,170,48)" fg:x="4447" fg:w="77"/><text x="82.3434%" y="1455.50"></text></g><g><title>[unknown] (77 samples, 1.42%)</title><rect x="82.0934%" y="1429" width="1.4215%" height="15" fill="rgb(223,117,5)" fg:x="4447" fg:w="77"/><text x="82.3434%" y="1439.50"></text></g><g><title>[unknown] (76 samples, 1.40%)</title><rect x="82.1119%" y="1413" width="1.4030%" height="15" fill="rgb(209,52,20)" fg:x="4448" fg:w="76"/><text x="82.3619%" y="1423.50"></text></g><g><title>[unknown] (75 samples, 1.38%)</title><rect x="82.1303%" y="1397" width="1.3845%" height="15" fill="rgb(209,19,41)" fg:x="4449" fg:w="75"/><text x="82.3803%" y="1407.50"></text></g><g><title>[unknown] (75 samples, 1.38%)</title><rect x="82.1303%" y="1381" width="1.3845%" height="15" fill="rgb(210,177,12)" fg:x="4449" fg:w="75"/><text x="82.3803%" y="1391.50"></text></g><g><title>[unknown] (63 samples, 1.16%)</title><rect x="82.3519%" y="1365" width="1.1630%" height="15" fill="rgb(211,159,37)" fg:x="4461" fg:w="63"/><text x="82.6019%" y="1375.50"></text></g><g><title>[unknown] (24 samples, 0.44%)</title><rect x="83.0718%" y="1349" width="0.4430%" height="15" fill="rgb(209,20,2)" fg:x="4500" fg:w="24"/><text x="83.3218%" y="1359.50"></text></g><g><title>[unknown] (15 samples, 0.28%)</title><rect x="83.2380%" y="1333" width="0.2769%" height="15" fill="rgb(244,3,46)" fg:x="4509" fg:w="15"/><text x="83.4880%" y="1343.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="83.5149%" y="1509" width="0.0185%" height="15" fill="rgb(220,94,38)" fg:x="4524" fg:w="1"/><text x="83.7649%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="83.5333%" y="1509" width="0.0185%" height="15" fill="rgb(253,14,31)" fg:x="4525" fg:w="1"/><text x="83.7833%" y="1519.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="83.5518%" y="1509" width="0.0185%" height="15" fill="rgb(234,176,13)" fg:x="4526" fg:w="1"/><text x="83.8018%" y="1519.50"></text></g><g><title>_int_malloc (3 samples, 0.06%)</title><rect x="83.5702%" y="1509" width="0.0554%" height="15" fill="rgb(218,62,25)" fg:x="4527" fg:w="3"/><text x="83.8202%" y="1519.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="83.6256%" y="1509" width="0.0185%" height="15" fill="rgb(216,124,40)" fg:x="4530" fg:w="1"/><text x="83.8756%" y="1519.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="83.6441%" y="1509" width="0.0185%" height="15" fill="rgb(228,170,12)" fg:x="4531" fg:w="1"/><text x="83.8941%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="83.6625%" y="1509" width="0.0738%" height="15" fill="rgb(231,226,5)" fg:x="4532" fg:w="4"/><text x="83.9125%" y="1519.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="83.7364%" y="1509" width="0.0185%" height="15" fill="rgb(237,122,22)" fg:x="4536" fg:w="1"/><text x="83.9864%" y="1519.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (1 samples, 0.02%)</title><rect x="83.7548%" y="1509" width="0.0185%" height="15" fill="rgb(209,185,25)" fg:x="4537" fg:w="1"/><text x="84.0048%" y="1519.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.04%)</title><rect x="83.7733%" y="1509" width="0.0369%" height="15" fill="rgb(228,200,32)" fg:x="4538" fg:w="2"/><text x="84.0233%" y="1519.50"></text></g><g><title>[[heap]] (102 samples, 1.88%)</title><rect x="81.9457%" y="1525" width="1.8830%" height="15" fill="rgb(217,140,10)" fg:x="4439" fg:w="102"/><text x="82.1957%" y="1535.50">[..</text></g><g><title>util::SignalInterrupt::operator bool (1 samples, 0.02%)</title><rect x="83.8102%" y="1509" width="0.0185%" height="15" fill="rgb(253,17,24)" fg:x="4540" fg:w="1"/><text x="84.0602%" y="1519.50"></text></g><g><title>CDBIterator::GetValueImpl (2 samples, 0.04%)</title><rect x="83.8287%" y="1509" width="0.0369%" height="15" fill="rgb(212,61,6)" fg:x="4541" fg:w="2"/><text x="84.0787%" y="1519.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="83.8656%" y="1509" width="0.0185%" height="15" fill="rgb(205,14,25)" fg:x="4543" fg:w="1"/><text x="84.1156%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="83.8841%" y="1509" width="0.0185%" height="15" fill="rgb(232,69,41)" fg:x="4544" fg:w="1"/><text x="84.1341%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.06%)</title><rect x="83.9025%" y="1509" width="0.0554%" height="15" fill="rgb(241,106,47)" fg:x="4545" fg:w="3"/><text x="84.1525%" y="1519.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.04%)</title><rect x="83.9579%" y="1509" width="0.0369%" height="15" fill="rgb(210,213,53)" fg:x="4548" fg:w="2"/><text x="84.2079%" y="1519.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="83.9948%" y="1509" width="0.0185%" height="15" fill="rgb(253,175,27)" fg:x="4550" fg:w="1"/><text x="84.2448%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="84.0133%" y="1509" width="0.0185%" height="15" fill="rgb(211,171,24)" fg:x="4551" fg:w="1"/><text x="84.2633%" y="1519.50"></text></g><g><title>[[stack]] (12 samples, 0.22%)</title><rect x="83.8287%" y="1525" width="0.2215%" height="15" fill="rgb(229,80,7)" fg:x="4541" fg:w="12"/><text x="84.0787%" y="1535.50"></text></g><g><title>util::SignalInterrupt::operator bool (1 samples, 0.02%)</title><rect x="84.0318%" y="1509" width="0.0185%" height="15" fill="rgb(212,46,39)" fg:x="4552" fg:w="1"/><text x="84.2818%" y="1519.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="84.0502%" y="1509" width="0.0185%" height="15" fill="rgb(240,80,45)" fg:x="4553" fg:w="1"/><text x="84.3002%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.06%)</title><rect x="84.0687%" y="1509" width="0.0554%" height="15" fill="rgb(253,177,40)" fg:x="4554" fg:w="3"/><text x="84.3187%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (6 samples, 0.11%)</title><rect x="84.1241%" y="1509" width="0.1108%" height="15" fill="rgb(249,200,15)" fg:x="4557" fg:w="6"/><text x="84.3741%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="84.2348%" y="1509" width="0.0369%" height="15" fill="rgb(217,78,26)" fg:x="4563" fg:w="2"/><text x="84.4848%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (2 samples, 0.04%)</title><rect x="84.2717%" y="1509" width="0.0369%" height="15" fill="rgb(254,151,32)" fg:x="4565" fg:w="2"/><text x="84.5217%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1 samples, 0.02%)</title><rect x="84.3087%" y="1509" width="0.0185%" height="15" fill="rgb(226,165,27)" fg:x="4567" fg:w="1"/><text x="84.5587%" y="1519.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="84.3271%" y="1509" width="0.0185%" height="15" fill="rgb(250,206,4)" fg:x="4568" fg:w="1"/><text x="84.5771%" y="1519.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (2 samples, 0.04%)</title><rect x="84.3456%" y="1509" width="0.0369%" height="15" fill="rgb(231,229,27)" fg:x="4569" fg:w="2"/><text x="84.5956%" y="1519.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="84.3825%" y="1509" width="0.0185%" height="15" fill="rgb(239,217,8)" fg:x="4571" fg:w="1"/><text x="84.6325%" y="1519.50"></text></g><g><title>leveldb::Hash (4 samples, 0.07%)</title><rect x="84.4010%" y="1509" width="0.0738%" height="15" fill="rgb(225,204,27)" fg:x="4572" fg:w="4"/><text x="84.6510%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (9 samples, 0.17%)</title><rect x="84.4748%" y="1509" width="0.1661%" height="15" fill="rgb(230,56,32)" fg:x="4576" fg:w="9"/><text x="84.7248%" y="1519.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="84.6409%" y="1509" width="0.0185%" height="15" fill="rgb(222,56,27)" fg:x="4585" fg:w="1"/><text x="84.8909%" y="1519.50"></text></g><g><title>leveldb::TableBuilder::FileSize (1 samples, 0.02%)</title><rect x="84.6594%" y="1509" width="0.0185%" height="15" fill="rgb(253,108,27)" fg:x="4586" fg:w="1"/><text x="84.9094%" y="1519.50"></text></g><g><title>leveldb::TableBuilder::status (2 samples, 0.04%)</title><rect x="84.6779%" y="1509" width="0.0369%" height="15" fill="rgb(212,87,36)" fg:x="4587" fg:w="2"/><text x="84.9279%" y="1519.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="84.7148%" y="1509" width="0.0185%" height="15" fill="rgb(247,82,36)" fg:x="4589" fg:w="1"/><text x="84.9648%" y="1519.50"></text></g><g><title>[anon] (38 samples, 0.70%)</title><rect x="84.0502%" y="1525" width="0.7015%" height="15" fill="rgb(222,143,9)" fg:x="4553" fg:w="38"/><text x="84.3002%" y="1535.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="84.7332%" y="1509" width="0.0185%" height="15" fill="rgb(238,162,48)" fg:x="4590" fg:w="1"/><text x="84.9832%" y="1519.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="84.8071%" y="1509" width="0.0554%" height="15" fill="rgb(221,59,43)" fg:x="4594" fg:w="3"/><text x="85.0571%" y="1519.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="84.8071%" y="1493" width="0.0554%" height="15" fill="rgb(205,166,41)" fg:x="4594" fg:w="3"/><text x="85.0571%" y="1503.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="84.8255%" y="1477" width="0.0369%" height="15" fill="rgb(241,186,40)" fg:x="4595" fg:w="2"/><text x="85.0755%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1461" width="0.0185%" height="15" fill="rgb(216,119,35)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1445" width="0.0185%" height="15" fill="rgb(208,68,38)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1429" width="0.0185%" height="15" fill="rgb(217,113,1)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1413" width="0.0185%" height="15" fill="rgb(242,153,3)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1397" width="0.0185%" height="15" fill="rgb(229,76,35)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1381" width="0.0185%" height="15" fill="rgb(229,125,34)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1365" width="0.0185%" height="15" fill="rgb(238,179,36)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1349" width="0.0185%" height="15" fill="rgb(244,183,19)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1333" width="0.0185%" height="15" fill="rgb(216,85,49)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1317" width="0.0185%" height="15" fill="rgb(208,161,47)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8440%" y="1301" width="0.0185%" height="15" fill="rgb(233,210,18)" fg:x="4596" fg:w="1"/><text x="85.0940%" y="1311.50"></text></g><g><title>__memcmp_evex_movbe (4 samples, 0.07%)</title><rect x="84.8625%" y="1509" width="0.0738%" height="15" fill="rgb(205,104,42)" fg:x="4597" fg:w="4"/><text x="85.1125%" y="1519.50"></text></g><g><title>__memset_avx512_unaligned (1 samples, 0.02%)</title><rect x="84.9363%" y="1509" width="0.0185%" height="15" fill="rgb(248,90,43)" fg:x="4601" fg:w="1"/><text x="85.1863%" y="1519.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="84.9548%" y="1509" width="0.0185%" height="15" fill="rgb(206,198,11)" fg:x="4602" fg:w="1"/><text x="85.2048%" y="1519.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="84.9732%" y="1509" width="0.0185%" height="15" fill="rgb(239,165,27)" fg:x="4603" fg:w="1"/><text x="85.2232%" y="1519.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (1 samples, 0.02%)</title><rect x="84.9732%" y="1493" width="0.0185%" height="15" fill="rgb(246,44,32)" fg:x="4603" fg:w="1"/><text x="85.2232%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="84.9732%" y="1477" width="0.0185%" height="15" fill="rgb(252,65,42)" fg:x="4603" fg:w="1"/><text x="85.2232%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="84.9917%" y="1509" width="0.0185%" height="15" fill="rgb(246,197,18)" fg:x="4604" fg:w="1"/><text x="85.2417%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="85.0102%" y="1509" width="0.0185%" height="15" fill="rgb(216,192,4)" fg:x="4605" fg:w="1"/><text x="85.2602%" y="1519.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="85.0286%" y="1509" width="0.0185%" height="15" fill="rgb(208,117,10)" fg:x="4606" fg:w="1"/><text x="85.2786%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="85.0471%" y="1509" width="0.0185%" height="15" fill="rgb(240,61,47)" fg:x="4607" fg:w="1"/><text x="85.2971%" y="1519.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="85.0655%" y="1509" width="0.0185%" height="15" fill="rgb(228,178,21)" fg:x="4608" fg:w="1"/><text x="85.3155%" y="1519.50"></text></g><g><title>[unknown] (19 samples, 0.35%)</title><rect x="84.7517%" y="1525" width="0.3507%" height="15" fill="rgb(219,96,54)" fg:x="4591" fg:w="19"/><text x="85.0017%" y="1535.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="85.0840%" y="1509" width="0.0185%" height="15" fill="rgb(250,177,24)" fg:x="4609" fg:w="1"/><text x="85.3340%" y="1519.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="85.1394%" y="1493" width="0.1846%" height="15" fill="rgb(242,154,46)" fg:x="4612" fg:w="10"/><text x="85.3894%" y="1503.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="85.1394%" y="1477" width="0.1846%" height="15" fill="rgb(226,176,29)" fg:x="4612" fg:w="10"/><text x="85.3894%" y="1487.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="85.1394%" y="1461" width="0.1846%" height="15" fill="rgb(226,29,2)" fg:x="4612" fg:w="10"/><text x="85.3894%" y="1471.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="85.1763%" y="1445" width="0.1477%" height="15" fill="rgb(237,104,14)" fg:x="4614" fg:w="8"/><text x="85.4263%" y="1455.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="85.2317%" y="1429" width="0.0923%" height="15" fill="rgb(245,207,31)" fg:x="4617" fg:w="5"/><text x="85.4817%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3055%" y="1413" width="0.0185%" height="15" fill="rgb(229,211,45)" fg:x="4621" fg:w="1"/><text x="85.5555%" y="1423.50"></text></g><g><title>__ctype_init (1 samples, 0.02%)</title><rect x="85.3240%" y="1493" width="0.0185%" height="15" fill="rgb(229,113,15)" fg:x="4622" fg:w="1"/><text x="85.5740%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="85.3424%" y="1413" width="0.0185%" height="15" fill="rgb(237,147,15)" fg:x="4623" fg:w="1"/><text x="85.5924%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (4 samples, 0.07%)</title><rect x="85.3609%" y="1413" width="0.0738%" height="15" fill="rgb(244,120,12)" fg:x="4624" fg:w="4"/><text x="85.6109%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (3 samples, 0.06%)</title><rect x="85.4347%" y="1413" width="0.0554%" height="15" fill="rgb(205,120,12)" fg:x="4628" fg:w="3"/><text x="85.6847%" y="1423.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3 samples, 0.06%)</title><rect x="85.4347%" y="1397" width="0.0554%" height="15" fill="rgb(231,26,45)" fg:x="4628" fg:w="3"/><text x="85.6847%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.06%)</title><rect x="85.4347%" y="1381" width="0.0554%" height="15" fill="rgb(246,98,1)" fg:x="4628" fg:w="3"/><text x="85.6847%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.04%)</title><rect x="85.4532%" y="1365" width="0.0369%" height="15" fill="rgb(207,68,45)" fg:x="4629" fg:w="2"/><text x="85.7032%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="85.4901%" y="1413" width="0.0185%" height="15" fill="rgb(231,27,38)" fg:x="4631" fg:w="1"/><text x="85.7401%" y="1423.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="85.4901%" y="1397" width="0.0185%" height="15" fill="rgb(214,223,3)" fg:x="4631" fg:w="1"/><text x="85.7401%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="85.5086%" y="1413" width="0.0185%" height="15" fill="rgb(228,195,46)" fg:x="4632" fg:w="1"/><text x="85.7586%" y="1423.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="85.5270%" y="1237" width="0.0185%" height="15" fill="rgb(231,100,42)" fg:x="4633" fg:w="1"/><text x="85.7770%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5270%" y="1221" width="0.0185%" height="15" fill="rgb(236,53,4)" fg:x="4633" fg:w="1"/><text x="85.7770%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (12 samples, 0.22%)</title><rect x="85.5270%" y="1397" width="0.2215%" height="15" fill="rgb(230,152,12)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1407.50"></text></g><g><title>__unlink (12 samples, 0.22%)</title><rect x="85.5270%" y="1381" width="0.2215%" height="15" fill="rgb(226,101,19)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1391.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="85.5270%" y="1365" width="0.2215%" height="15" fill="rgb(250,149,32)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1375.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="85.5270%" y="1349" width="0.2215%" height="15" fill="rgb(232,178,12)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1359.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="85.5270%" y="1333" width="0.2215%" height="15" fill="rgb(246,151,17)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1343.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="85.5270%" y="1317" width="0.2215%" height="15" fill="rgb(252,17,51)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1327.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="85.5270%" y="1301" width="0.2215%" height="15" fill="rgb(250,207,23)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1311.50"></text></g><g><title>[[ext4]] (12 samples, 0.22%)</title><rect x="85.5270%" y="1285" width="0.2215%" height="15" fill="rgb(205,27,5)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1295.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="85.5270%" y="1269" width="0.2215%" height="15" fill="rgb(224,32,19)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1279.50"></text></g><g><title>[unknown] (12 samples, 0.22%)</title><rect x="85.5270%" y="1253" width="0.2215%" height="15" fill="rgb(247,214,40)" fg:x="4633" fg:w="12"/><text x="85.7770%" y="1263.50"></text></g><g><title>[unknown] (11 samples, 0.20%)</title><rect x="85.5455%" y="1237" width="0.2031%" height="15" fill="rgb(239,199,17)" fg:x="4634" fg:w="11"/><text x="85.7955%" y="1247.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="85.5640%" y="1221" width="0.1846%" height="15" fill="rgb(251,159,9)" fg:x="4635" fg:w="10"/><text x="85.8140%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="85.6747%" y="1205" width="0.0738%" height="15" fill="rgb(225,78,32)" fg:x="4641" fg:w="4"/><text x="85.9247%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="85.6932%" y="1189" width="0.0554%" height="15" fill="rgb(206,97,47)" fg:x="4642" fg:w="3"/><text x="85.9432%" y="1199.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (14 samples, 0.26%)</title><rect x="85.5270%" y="1413" width="0.2584%" height="15" fill="rgb(227,107,4)" fg:x="4633" fg:w="14"/><text x="85.7770%" y="1423.50"></text></g><g><title>leveldb::TableCache::Evict (2 samples, 0.04%)</title><rect x="85.7486%" y="1397" width="0.0369%" height="15" fill="rgb(241,146,50)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1407.50"></text></g><g><title>Erase (2 samples, 0.04%)</title><rect x="85.7486%" y="1381" width="0.0369%" height="15" fill="rgb(232,92,30)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (2 samples, 0.04%)</title><rect x="85.7486%" y="1365" width="0.0369%" height="15" fill="rgb(222,0,40)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (2 samples, 0.04%)</title><rect x="85.7486%" y="1349" width="0.0369%" height="15" fill="rgb(219,54,33)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (2 samples, 0.04%)</title><rect x="85.7486%" y="1333" width="0.0369%" height="15" fill="rgb(226,209,28)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1343.50"></text></g><g><title>leveldb::DeleteEntry (2 samples, 0.04%)</title><rect x="85.7486%" y="1317" width="0.0369%" height="15" fill="rgb(254,205,35)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1327.50"></text></g><g><title>~PosixMmapReadableFile (2 samples, 0.04%)</title><rect x="85.7486%" y="1301" width="0.0369%" height="15" fill="rgb(230,159,3)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (2 samples, 0.04%)</title><rect x="85.7486%" y="1285" width="0.0369%" height="15" fill="rgb(232,190,24)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1295.50"></text></g><g><title>__munmap (2 samples, 0.04%)</title><rect x="85.7486%" y="1269" width="0.0369%" height="15" fill="rgb(217,227,44)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1253" width="0.0369%" height="15" fill="rgb(236,211,1)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1237" width="0.0369%" height="15" fill="rgb(250,127,46)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1221" width="0.0369%" height="15" fill="rgb(229,213,6)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1205" width="0.0369%" height="15" fill="rgb(237,15,36)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1189" width="0.0369%" height="15" fill="rgb(213,131,41)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1173" width="0.0369%" height="15" fill="rgb(225,82,44)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1157" width="0.0369%" height="15" fill="rgb(249,42,11)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1141" width="0.0369%" height="15" fill="rgb(253,11,29)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1125" width="0.0369%" height="15" fill="rgb(206,8,54)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.7486%" y="1109" width="0.0369%" height="15" fill="rgb(222,186,2)" fg:x="4645" fg:w="2"/><text x="85.9986%" y="1119.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="85.8040%" y="1397" width="0.0185%" height="15" fill="rgb(221,206,53)" fg:x="4648" fg:w="1"/><text x="86.0540%" y="1407.50"></text></g><g><title>key (1 samples, 0.02%)</title><rect x="85.8224%" y="1397" width="0.0185%" height="15" fill="rgb(230,150,21)" fg:x="4649" fg:w="1"/><text x="86.0724%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="85.8224%" y="1381" width="0.0185%" height="15" fill="rgb(253,202,10)" fg:x="4649" fg:w="1"/><text x="86.0724%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="85.8409%" y="1397" width="0.0738%" height="15" fill="rgb(238,109,40)" fg:x="4650" fg:w="4"/><text x="86.0909%" y="1407.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="85.8963%" y="1381" width="0.0185%" height="15" fill="rgb(247,120,22)" fg:x="4653" fg:w="1"/><text x="86.1463%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (5 samples, 0.09%)</title><rect x="85.9147%" y="1397" width="0.0923%" height="15" fill="rgb(207,43,30)" fg:x="4654" fg:w="5"/><text x="86.1647%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="85.9886%" y="1381" width="0.0185%" height="15" fill="rgb(213,211,24)" fg:x="4658" fg:w="1"/><text x="86.2386%" y="1391.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="86.0070%" y="1381" width="0.0185%" height="15" fill="rgb(239,73,39)" fg:x="4659" fg:w="1"/><text x="86.2570%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="86.0070%" y="1365" width="0.0185%" height="15" fill="rgb(245,182,19)" fg:x="4659" fg:w="1"/><text x="86.2570%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.0070%" y="1349" width="0.0185%" height="15" fill="rgb(247,143,26)" fg:x="4659" fg:w="1"/><text x="86.2570%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.0070%" y="1333" width="0.0185%" height="15" fill="rgb(228,191,23)" fg:x="4659" fg:w="1"/><text x="86.2570%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.04%)</title><rect x="86.0439%" y="1365" width="0.0369%" height="15" fill="rgb(253,165,31)" fg:x="4661" fg:w="2"/><text x="86.2939%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="86.0809%" y="1365" width="0.0185%" height="15" fill="rgb(234,138,20)" fg:x="4663" fg:w="1"/><text x="86.3309%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="86.0993%" y="1349" width="0.0738%" height="15" fill="rgb(218,191,29)" fg:x="4664" fg:w="4"/><text x="86.3493%" y="1359.50"></text></g><g><title>leveldb::Slice::compare (3 samples, 0.06%)</title><rect x="86.1178%" y="1333" width="0.0554%" height="15" fill="rgb(221,157,19)" fg:x="4665" fg:w="3"/><text x="86.3678%" y="1343.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="86.1547%" y="1317" width="0.0185%" height="15" fill="rgb(237,26,42)" fg:x="4667" fg:w="1"/><text x="86.4047%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="86.1732%" y="1349" width="0.0185%" height="15" fill="rgb(220,163,24)" fg:x="4668" fg:w="1"/><text x="86.4232%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="86.1916%" y="1349" width="0.0185%" height="15" fill="rgb(242,115,20)" fg:x="4669" fg:w="1"/><text x="86.4416%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="86.1916%" y="1333" width="0.0185%" height="15" fill="rgb(210,206,9)" fg:x="4669" fg:w="1"/><text x="86.4416%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.1916%" y="1317" width="0.0185%" height="15" fill="rgb(208,71,17)" fg:x="4669" fg:w="1"/><text x="86.4416%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (3 samples, 0.06%)</title><rect x="86.2101%" y="1349" width="0.0554%" height="15" fill="rgb(233,7,5)" fg:x="4670" fg:w="3"/><text x="86.4601%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (3 samples, 0.06%)</title><rect x="86.2655%" y="1349" width="0.0554%" height="15" fill="rgb(207,92,33)" fg:x="4673" fg:w="3"/><text x="86.5155%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="86.3024%" y="1333" width="0.0185%" height="15" fill="rgb(218,87,9)" fg:x="4675" fg:w="1"/><text x="86.5524%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="86.3208%" y="1349" width="0.0185%" height="15" fill="rgb(219,47,37)" fg:x="4676" fg:w="1"/><text x="86.5708%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (18 samples, 0.33%)</title><rect x="86.0255%" y="1381" width="0.3323%" height="15" fill="rgb(221,152,34)" fg:x="4660" fg:w="18"/><text x="86.2755%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (14 samples, 0.26%)</title><rect x="86.0993%" y="1365" width="0.2584%" height="15" fill="rgb(235,176,21)" fg:x="4664" fg:w="14"/><text x="86.3493%" y="1375.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="86.3393%" y="1349" width="0.0185%" height="15" fill="rgb(232,212,21)" fg:x="4677" fg:w="1"/><text x="86.5893%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="86.3578%" y="1381" width="0.0185%" height="15" fill="rgb(245,82,39)" fg:x="4678" fg:w="1"/><text x="86.6078%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="86.3578%" y="1365" width="0.0185%" height="15" fill="rgb(241,52,51)" fg:x="4678" fg:w="1"/><text x="86.6078%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.3578%" y="1349" width="0.0185%" height="15" fill="rgb(219,91,24)" fg:x="4678" fg:w="1"/><text x="86.6078%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="86.3762%" y="1381" width="0.0185%" height="15" fill="rgb(241,142,12)" fg:x="4679" fg:w="1"/><text x="86.6262%" y="1391.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="86.3947%" y="1381" width="0.0185%" height="15" fill="rgb(230,27,9)" fg:x="4680" fg:w="1"/><text x="86.6447%" y="1391.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="86.4131%" y="1381" width="0.0185%" height="15" fill="rgb(249,181,32)" fg:x="4681" fg:w="1"/><text x="86.6631%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="86.4131%" y="1365" width="0.0185%" height="15" fill="rgb(230,107,3)" fg:x="4681" fg:w="1"/><text x="86.6631%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="86.4131%" y="1349" width="0.0185%" height="15" fill="rgb(246,204,14)" fg:x="4681" fg:w="1"/><text x="86.6631%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="86.4131%" y="1333" width="0.0185%" height="15" fill="rgb(213,192,47)" fg:x="4681" fg:w="1"/><text x="86.6631%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (2 samples, 0.04%)</title><rect x="86.4316%" y="1301" width="0.0369%" height="15" fill="rgb(240,44,36)" fg:x="4682" fg:w="2"/><text x="86.6816%" y="1311.50"></text></g><g><title>leveldb::operator== (2 samples, 0.04%)</title><rect x="86.4316%" y="1285" width="0.0369%" height="15" fill="rgb(244,209,38)" fg:x="4682" fg:w="2"/><text x="86.6816%" y="1295.50"></text></g><g><title>Next (3 samples, 0.06%)</title><rect x="86.4316%" y="1333" width="0.0554%" height="15" fill="rgb(219,34,37)" fg:x="4682" fg:w="3"/><text x="86.6816%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3 samples, 0.06%)</title><rect x="86.4316%" y="1317" width="0.0554%" height="15" fill="rgb(210,28,6)" fg:x="4682" fg:w="3"/><text x="86.6816%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.4685%" y="1301" width="0.0185%" height="15" fill="rgb(244,110,52)" fg:x="4684" fg:w="1"/><text x="86.7185%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.4685%" y="1285" width="0.0185%" height="15" fill="rgb(254,124,47)" fg:x="4684" fg:w="1"/><text x="86.7185%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="86.4685%" y="1269" width="0.0185%" height="15" fill="rgb(254,110,13)" fg:x="4684" fg:w="1"/><text x="86.7185%" y="1279.50"></text></g><g><title>leveldb::crc32c::Unmask (3 samples, 0.06%)</title><rect x="86.4870%" y="1253" width="0.0554%" height="15" fill="rgb(252,57,21)" fg:x="4685" fg:w="3"/><text x="86.7370%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="86.4870%" y="1237" width="0.0554%" height="15" fill="rgb(242,60,45)" fg:x="4685" fg:w="3"/><text x="86.7370%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="86.4870%" y="1221" width="0.0554%" height="15" fill="rgb(234,49,30)" fg:x="4685" fg:w="3"/><text x="86.7370%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="86.4870%" y="1205" width="0.0554%" height="15" fill="rgb(218,98,6)" fg:x="4685" fg:w="3"/><text x="86.7370%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="86.4870%" y="1189" width="0.0554%" height="15" fill="rgb(220,174,29)" fg:x="4685" fg:w="3"/><text x="86.7370%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="86.4870%" y="1173" width="0.0554%" height="15" fill="rgb(236,163,23)" fg:x="4685" fg:w="3"/><text x="86.7370%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="86.4870%" y="1157" width="0.0554%" height="15" fill="rgb(242,114,45)" fg:x="4685" fg:w="3"/><text x="86.7370%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="86.4870%" y="1141" width="0.0554%" height="15" fill="rgb(232,10,53)" fg:x="4685" fg:w="3"/><text x="86.7370%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="86.4870%" y="1125" width="0.0554%" height="15" fill="rgb(245,108,29)" fg:x="4685" fg:w="3"/><text x="86.7370%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.5054%" y="1109" width="0.0369%" height="15" fill="rgb(240,89,53)" fg:x="4686" fg:w="2"/><text x="86.7554%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.5239%" y="1093" width="0.0185%" height="15" fill="rgb(226,60,45)" fg:x="4687" fg:w="1"/><text x="86.7739%" y="1103.50"></text></g><g><title>SkipEmptyDataBlocksForward (13 samples, 0.24%)</title><rect x="86.4870%" y="1333" width="0.2400%" height="15" fill="rgb(230,41,44)" fg:x="4685" fg:w="13"/><text x="86.7370%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (13 samples, 0.24%)</title><rect x="86.4870%" y="1317" width="0.2400%" height="15" fill="rgb(230,26,20)" fg:x="4685" fg:w="13"/><text x="86.7370%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (13 samples, 0.24%)</title><rect x="86.4870%" y="1301" width="0.2400%" height="15" fill="rgb(237,170,32)" fg:x="4685" fg:w="13"/><text x="86.7370%" y="1311.50"></text></g><g><title>leveldb::Table::BlockReader (13 samples, 0.24%)</title><rect x="86.4870%" y="1285" width="0.2400%" height="15" fill="rgb(212,35,42)" fg:x="4685" fg:w="13"/><text x="86.7370%" y="1295.50"></text></g><g><title>leveldb::ReadBlock (13 samples, 0.24%)</title><rect x="86.4870%" y="1269" width="0.2400%" height="15" fill="rgb(227,31,34)" fg:x="4685" fg:w="13"/><text x="86.7370%" y="1279.50"></text></g><g><title>leveldb::crc32c::Value (10 samples, 0.18%)</title><rect x="86.5424%" y="1253" width="0.1846%" height="15" fill="rgb(216,19,18)" fg:x="4688" fg:w="10"/><text x="86.7924%" y="1263.50"></text></g><g><title>crc32c::ExtendSse42 (10 samples, 0.18%)</title><rect x="86.5424%" y="1237" width="0.1846%" height="15" fill="rgb(211,133,42)" fg:x="4688" fg:w="10"/><text x="86.7924%" y="1247.50"></text></g><g><title>_mm_crc32_u64 (4 samples, 0.07%)</title><rect x="86.6531%" y="1221" width="0.0738%" height="15" fill="rgb(244,66,13)" fg:x="4694" fg:w="4"/><text x="86.9031%" y="1231.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="86.7270%" y="1333" width="0.0185%" height="15" fill="rgb(218,185,50)" fg:x="4698" fg:w="1"/><text x="86.9770%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="86.7270%" y="1317" width="0.0185%" height="15" fill="rgb(219,149,13)" fg:x="4698" fg:w="1"/><text x="86.9770%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="86.7270%" y="1301" width="0.0185%" height="15" fill="rgb(221,125,0)" fg:x="4698" fg:w="1"/><text x="86.9770%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="86.7270%" y="1285" width="0.0185%" height="15" fill="rgb(247,126,27)" fg:x="4698" fg:w="1"/><text x="86.9770%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="86.7270%" y="1269" width="0.0185%" height="15" fill="rgb(250,138,30)" fg:x="4698" fg:w="1"/><text x="86.9770%" y="1279.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="86.7270%" y="1253" width="0.0185%" height="15" fill="rgb(230,151,9)" fg:x="4698" fg:w="1"/><text x="86.9770%" y="1263.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (2 samples, 0.04%)</title><rect x="86.7454%" y="1333" width="0.0369%" height="15" fill="rgb(233,80,38)" fg:x="4699" fg:w="2"/><text x="86.9954%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="86.7824%" y="1317" width="0.0185%" height="15" fill="rgb(232,68,43)" fg:x="4701" fg:w="1"/><text x="87.0324%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="86.7824%" y="1301" width="0.0185%" height="15" fill="rgb(254,5,50)" fg:x="4701" fg:w="1"/><text x="87.0324%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="86.8008%" y="1301" width="0.0185%" height="15" fill="rgb(225,45,5)" fg:x="4702" fg:w="1"/><text x="87.0508%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.06%)</title><rect x="86.7824%" y="1333" width="0.0554%" height="15" fill="rgb(239,22,3)" fg:x="4701" fg:w="3"/><text x="87.0324%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.04%)</title><rect x="86.8008%" y="1317" width="0.0369%" height="15" fill="rgb(243,129,0)" fg:x="4702" fg:w="2"/><text x="87.0508%" y="1327.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="86.8193%" y="1301" width="0.0185%" height="15" fill="rgb(223,164,0)" fg:x="4703" fg:w="1"/><text x="87.0693%" y="1311.50"></text></g><g><title>Next (24 samples, 0.44%)</title><rect x="86.4316%" y="1365" width="0.4430%" height="15" fill="rgb(221,46,29)" fg:x="4682" fg:w="24"/><text x="86.6816%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Next (24 samples, 0.44%)</title><rect x="86.4316%" y="1349" width="0.4430%" height="15" fill="rgb(205,97,47)" fg:x="4682" fg:w="24"/><text x="86.6816%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (2 samples, 0.04%)</title><rect x="86.8377%" y="1333" width="0.0369%" height="15" fill="rgb(249,14,8)" fg:x="4704" fg:w="2"/><text x="87.0877%" y="1343.50"></text></g><g><title>leveldb::crc32c::Unmask (1 samples, 0.02%)</title><rect x="86.8747%" y="1285" width="0.0185%" height="15" fill="rgb(216,77,3)" fg:x="4706" fg:w="1"/><text x="87.1247%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.8747%" y="1269" width="0.0185%" height="15" fill="rgb(206,168,54)" fg:x="4706" fg:w="1"/><text x="87.1247%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.8747%" y="1253" width="0.0185%" height="15" fill="rgb(236,3,41)" fg:x="4706" fg:w="1"/><text x="87.1247%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.8747%" y="1237" width="0.0185%" height="15" fill="rgb(231,132,24)" fg:x="4706" fg:w="1"/><text x="87.1247%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.8747%" y="1221" width="0.0185%" height="15" fill="rgb(227,221,40)" fg:x="4706" fg:w="1"/><text x="87.1247%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.8747%" y="1205" width="0.0185%" height="15" fill="rgb(233,151,11)" fg:x="4706" fg:w="1"/><text x="87.1247%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.8747%" y="1189" width="0.0185%" height="15" fill="rgb(247,81,35)" fg:x="4706" fg:w="1"/><text x="87.1247%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.8747%" y="1173" width="0.0185%" height="15" fill="rgb(243,128,48)" fg:x="4706" fg:w="1"/><text x="87.1247%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.8747%" y="1157" width="0.0185%" height="15" fill="rgb(253,16,10)" fg:x="4706" fg:w="1"/><text x="87.1247%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (4 samples, 0.07%)</title><rect x="86.8747%" y="1333" width="0.0738%" height="15" fill="rgb(228,67,27)" fg:x="4706" fg:w="4"/><text x="87.1247%" y="1343.50"></text></g><g><title>leveldb::Table::BlockReader (4 samples, 0.07%)</title><rect x="86.8747%" y="1317" width="0.0738%" height="15" fill="rgb(231,105,25)" fg:x="4706" fg:w="4"/><text x="87.1247%" y="1327.50"></text></g><g><title>leveldb::ReadBlock (4 samples, 0.07%)</title><rect x="86.8747%" y="1301" width="0.0738%" height="15" fill="rgb(213,166,47)" fg:x="4706" fg:w="4"/><text x="87.1247%" y="1311.50"></text></g><g><title>leveldb::crc32c::Value (3 samples, 0.06%)</title><rect x="86.8931%" y="1285" width="0.0554%" height="15" fill="rgb(209,27,10)" fg:x="4707" fg:w="3"/><text x="87.1431%" y="1295.50"></text></g><g><title>crc32c::ExtendSse42 (3 samples, 0.06%)</title><rect x="86.8931%" y="1269" width="0.0554%" height="15" fill="rgb(241,44,30)" fg:x="4707" fg:w="3"/><text x="87.1431%" y="1279.50"></text></g><g><title>_mm_crc32_u64 (2 samples, 0.04%)</title><rect x="86.9116%" y="1253" width="0.0369%" height="15" fill="rgb(223,216,15)" fg:x="4708" fg:w="2"/><text x="87.1616%" y="1263.50"></text></g><g><title>SkipEmptyDataBlocksForward (5 samples, 0.09%)</title><rect x="86.8747%" y="1365" width="0.0923%" height="15" fill="rgb(227,14,7)" fg:x="4706" fg:w="5"/><text x="87.1247%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (5 samples, 0.09%)</title><rect x="86.8747%" y="1349" width="0.0923%" height="15" fill="rgb(237,14,5)" fg:x="4706" fg:w="5"/><text x="87.1247%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="86.9485%" y="1333" width="0.0185%" height="15" fill="rgb(232,14,36)" fg:x="4710" fg:w="1"/><text x="87.1985%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="86.9670%" y="1365" width="0.0185%" height="15" fill="rgb(234,0,38)" fg:x="4711" fg:w="1"/><text x="87.2170%" y="1375.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="86.9670%" y="1349" width="0.0185%" height="15" fill="rgb(207,170,14)" fg:x="4711" fg:w="1"/><text x="87.2170%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (3 samples, 0.06%)</title><rect x="86.9854%" y="1365" width="0.0554%" height="15" fill="rgb(252,45,13)" fg:x="4712" fg:w="3"/><text x="87.2354%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (2 samples, 0.04%)</title><rect x="87.0408%" y="1365" width="0.0369%" height="15" fill="rgb(213,142,7)" fg:x="4715" fg:w="2"/><text x="87.2908%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="87.0593%" y="1349" width="0.0185%" height="15" fill="rgb(216,157,23)" fg:x="4716" fg:w="1"/><text x="87.3093%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="87.0777%" y="1365" width="0.0185%" height="15" fill="rgb(212,145,33)" fg:x="4717" fg:w="1"/><text x="87.3277%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::NextEntryOffset (1 samples, 0.02%)</title><rect x="87.0777%" y="1349" width="0.0185%" height="15" fill="rgb(233,26,13)" fg:x="4717" fg:w="1"/><text x="87.3277%" y="1359.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="87.0962%" y="1349" width="0.0185%" height="15" fill="rgb(219,196,19)" fg:x="4718" fg:w="1"/><text x="87.3462%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (61 samples, 1.13%)</title><rect x="86.0070%" y="1397" width="1.1261%" height="15" fill="rgb(246,56,21)" fg:x="4659" fg:w="61"/><text x="86.2570%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::Next (38 samples, 0.70%)</title><rect x="86.4316%" y="1381" width="0.7015%" height="15" fill="rgb(222,28,53)" fg:x="4682" fg:w="38"/><text x="86.6816%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.04%)</title><rect x="87.0962%" y="1365" width="0.0369%" height="15" fill="rgb(224,5,27)" fg:x="4718" fg:w="2"/><text x="87.3462%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="87.1146%" y="1349" width="0.0185%" height="15" fill="rgb(220,153,33)" fg:x="4719" fg:w="1"/><text x="87.3646%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="87.1146%" y="1333" width="0.0185%" height="15" fill="rgb(226,58,19)" fg:x="4719" fg:w="1"/><text x="87.3646%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (1 samples, 0.02%)</title><rect x="87.1331%" y="1397" width="0.0185%" height="15" fill="rgb(239,112,23)" fg:x="4720" fg:w="1"/><text x="87.3831%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (3 samples, 0.06%)</title><rect x="87.1516%" y="1397" width="0.0554%" height="15" fill="rgb(251,213,20)" fg:x="4721" fg:w="3"/><text x="87.4016%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="87.1885%" y="1381" width="0.0185%" height="15" fill="rgb(215,181,21)" fg:x="4723" fg:w="1"/><text x="87.4385%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (3 samples, 0.06%)</title><rect x="87.2069%" y="1397" width="0.0554%" height="15" fill="rgb(240,8,35)" fg:x="4724" fg:w="3"/><text x="87.4569%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1 samples, 0.02%)</title><rect x="87.2623%" y="1397" width="0.0185%" height="15" fill="rgb(232,203,3)" fg:x="4727" fg:w="1"/><text x="87.5123%" y="1407.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="87.2808%" y="1397" width="0.0185%" height="15" fill="rgb(214,202,43)" fg:x="4728" fg:w="1"/><text x="87.5308%" y="1407.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.02%)</title><rect x="87.2992%" y="1397" width="0.0185%" height="15" fill="rgb(254,35,11)" fg:x="4729" fg:w="1"/><text x="87.5492%" y="1407.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="87.3546%" y="1381" width="0.0185%" height="15" fill="rgb(239,173,13)" fg:x="4732" fg:w="1"/><text x="87.6046%" y="1391.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="87.3731%" y="1381" width="0.0185%" height="15" fill="rgb(220,141,0)" fg:x="4733" fg:w="1"/><text x="87.6231%" y="1391.50"></text></g><g><title>std::atomic&lt;bool&gt;::load (1 samples, 0.02%)</title><rect x="87.3731%" y="1365" width="0.0185%" height="15" fill="rgb(210,98,12)" fg:x="4733" fg:w="1"/><text x="87.6231%" y="1375.50"></text></g><g><title>std::__atomic_base&lt;bool&gt;::load (1 samples, 0.02%)</title><rect x="87.3731%" y="1349" width="0.0185%" height="15" fill="rgb(254,153,22)" fg:x="4733" fg:w="1"/><text x="87.6231%" y="1359.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (5 samples, 0.09%)</title><rect x="87.3177%" y="1397" width="0.0923%" height="15" fill="rgb(247,223,17)" fg:x="4730" fg:w="5"/><text x="87.5677%" y="1407.50"></text></g><g><title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (1 samples, 0.02%)</title><rect x="87.3915%" y="1381" width="0.0185%" height="15" fill="rgb(246,56,7)" fg:x="4734" fg:w="1"/><text x="87.6415%" y="1391.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="87.4285%" y="1381" width="0.0185%" height="15" fill="rgb(240,226,12)" fg:x="4736" fg:w="1"/><text x="87.6785%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="87.4469%" y="1365" width="0.0185%" height="15" fill="rgb(205,87,46)" fg:x="4737" fg:w="1"/><text x="87.6969%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="87.4469%" y="1349" width="0.0185%" height="15" fill="rgb(245,214,51)" fg:x="4737" fg:w="1"/><text x="87.6969%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="87.4469%" y="1333" width="0.0185%" height="15" fill="rgb(223,172,33)" fg:x="4737" fg:w="1"/><text x="87.6969%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="87.4469%" y="1317" width="0.0185%" height="15" fill="rgb(227,203,34)" fg:x="4737" fg:w="1"/><text x="87.6969%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1 samples, 0.02%)</title><rect x="87.4654%" y="1365" width="0.0185%" height="15" fill="rgb(248,143,44)" fg:x="4738" fg:w="1"/><text x="87.7154%" y="1375.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (5 samples, 0.09%)</title><rect x="87.4100%" y="1397" width="0.0923%" height="15" fill="rgb(226,162,5)" fg:x="4735" fg:w="5"/><text x="87.6600%" y="1407.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.06%)</title><rect x="87.4469%" y="1381" width="0.0554%" height="15" fill="rgb(211,143,1)" fg:x="4737" fg:w="3"/><text x="87.6969%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="87.4838%" y="1365" width="0.0185%" height="15" fill="rgb(224,96,15)" fg:x="4739" fg:w="1"/><text x="87.7338%" y="1375.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="87.5023%" y="1205" width="0.0185%" height="15" fill="rgb(222,4,38)" fg:x="4740" fg:w="1"/><text x="87.7523%" y="1215.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="87.5208%" y="1205" width="0.0185%" height="15" fill="rgb(253,228,15)" fg:x="4741" fg:w="1"/><text x="87.7708%" y="1215.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (5 samples, 0.09%)</title><rect x="87.5023%" y="1381" width="0.0923%" height="15" fill="rgb(242,194,12)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (5 samples, 0.09%)</title><rect x="87.5023%" y="1365" width="0.0923%" height="15" fill="rgb(214,177,31)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1375.50"></text></g><g><title>__unlink (5 samples, 0.09%)</title><rect x="87.5023%" y="1349" width="0.0923%" height="15" fill="rgb(226,58,51)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1359.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.5023%" y="1333" width="0.0923%" height="15" fill="rgb(250,119,16)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1343.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.5023%" y="1317" width="0.0923%" height="15" fill="rgb(223,128,53)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1327.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.5023%" y="1301" width="0.0923%" height="15" fill="rgb(251,199,15)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1311.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.5023%" y="1285" width="0.0923%" height="15" fill="rgb(235,168,42)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1295.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.5023%" y="1269" width="0.0923%" height="15" fill="rgb(250,210,17)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1279.50"></text></g><g><title>[[ext4]] (5 samples, 0.09%)</title><rect x="87.5023%" y="1253" width="0.0923%" height="15" fill="rgb(226,36,41)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1263.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.5023%" y="1237" width="0.0923%" height="15" fill="rgb(225,87,10)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1247.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.5023%" y="1221" width="0.0923%" height="15" fill="rgb(228,83,9)" fg:x="4740" fg:w="5"/><text x="87.7523%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="87.5392%" y="1205" width="0.0554%" height="15" fill="rgb(225,16,36)" fg:x="4742" fg:w="3"/><text x="87.7892%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.5577%" y="1189" width="0.0369%" height="15" fill="rgb(242,198,13)" fg:x="4743" fg:w="2"/><text x="87.8077%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.5577%" y="1173" width="0.0369%" height="15" fill="rgb(239,25,51)" fg:x="4743" fg:w="2"/><text x="87.8077%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.5577%" y="1157" width="0.0369%" height="15" fill="rgb(239,28,37)" fg:x="4743" fg:w="2"/><text x="87.8077%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="87.6131%" y="1125" width="0.0185%" height="15" fill="rgb(234,70,17)" fg:x="4746" fg:w="1"/><text x="87.8631%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6131%" y="1109" width="0.0185%" height="15" fill="rgb(231,215,53)" fg:x="4746" fg:w="1"/><text x="87.8631%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6131%" y="1093" width="0.0185%" height="15" fill="rgb(218,140,42)" fg:x="4746" fg:w="1"/><text x="87.8631%" y="1103.50"></text></g><g><title>Sync (4 samples, 0.07%)</title><rect x="87.5946%" y="1349" width="0.0738%" height="15" fill="rgb(233,227,45)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (4 samples, 0.07%)</title><rect x="87.5946%" y="1333" width="0.0738%" height="15" fill="rgb(225,189,21)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1343.50"></text></g><g><title>fdatasync (4 samples, 0.07%)</title><rect x="87.5946%" y="1317" width="0.0738%" height="15" fill="rgb(237,176,54)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.5946%" y="1301" width="0.0738%" height="15" fill="rgb(215,131,46)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.5946%" y="1285" width="0.0738%" height="15" fill="rgb(218,95,20)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.5946%" y="1269" width="0.0738%" height="15" fill="rgb(208,198,12)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1279.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="87.5946%" y="1253" width="0.0738%" height="15" fill="rgb(239,107,50)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.5946%" y="1237" width="0.0738%" height="15" fill="rgb(240,217,37)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.5946%" y="1221" width="0.0738%" height="15" fill="rgb(242,197,49)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.5946%" y="1205" width="0.0738%" height="15" fill="rgb(219,171,17)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.5946%" y="1189" width="0.0738%" height="15" fill="rgb(209,81,40)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1199.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="87.5946%" y="1173" width="0.0738%" height="15" fill="rgb(237,156,30)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1183.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="87.5946%" y="1157" width="0.0738%" height="15" fill="rgb(212,127,16)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1167.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="87.5946%" y="1141" width="0.0738%" height="15" fill="rgb(226,66,32)" fg:x="4745" fg:w="4"/><text x="87.8446%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.6315%" y="1125" width="0.0369%" height="15" fill="rgb(245,22,46)" fg:x="4747" fg:w="2"/><text x="87.8815%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6500%" y="1109" width="0.0185%" height="15" fill="rgb(210,112,21)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6500%" y="1093" width="0.0185%" height="15" fill="rgb(207,118,39)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6500%" y="1077" width="0.0185%" height="15" fill="rgb(205,206,35)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6500%" y="1061" width="0.0185%" height="15" fill="rgb(222,120,2)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="1071.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="87.6500%" y="1045" width="0.0185%" height="15" fill="rgb(205,38,18)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="1055.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="87.6500%" y="1029" width="0.0185%" height="15" fill="rgb(226,61,2)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6500%" y="1013" width="0.0185%" height="15" fill="rgb(242,161,23)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6500%" y="997" width="0.0185%" height="15" fill="rgb(213,13,52)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6500%" y="981" width="0.0185%" height="15" fill="rgb(246,209,47)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6500%" y="965" width="0.0185%" height="15" fill="rgb(214,41,3)" fg:x="4748" fg:w="1"/><text x="87.9000%" y="975.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="87.6685%" y="1349" width="0.0185%" height="15" fill="rgb(236,119,38)" fg:x="4749" fg:w="1"/><text x="87.9185%" y="1359.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (1 samples, 0.02%)</title><rect x="87.6869%" y="1349" width="0.0185%" height="15" fill="rgb(218,50,11)" fg:x="4750" fg:w="1"/><text x="87.9369%" y="1359.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (1 samples, 0.02%)</title><rect x="87.6869%" y="1333" width="0.0185%" height="15" fill="rgb(228,38,11)" fg:x="4750" fg:w="1"/><text x="87.9369%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (2 samples, 0.04%)</title><rect x="87.7977%" y="1317" width="0.0369%" height="15" fill="rgb(212,13,9)" fg:x="4756" fg:w="2"/><text x="88.0477%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (6 samples, 0.11%)</title><rect x="88.0377%" y="1301" width="0.1108%" height="15" fill="rgb(208,211,9)" fg:x="4769" fg:w="6"/><text x="88.2877%" y="1311.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="88.1300%" y="1285" width="0.0185%" height="15" fill="rgb(239,39,32)" fg:x="4774" fg:w="1"/><text x="88.3800%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (18 samples, 0.33%)</title><rect x="87.8346%" y="1317" width="0.3323%" height="15" fill="rgb(254,179,26)" fg:x="4758" fg:w="18"/><text x="88.0846%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="88.1484%" y="1301" width="0.0185%" height="15" fill="rgb(249,165,28)" fg:x="4775" fg:w="1"/><text x="88.3984%" y="1311.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="88.1669%" y="1301" width="0.0185%" height="15" fill="rgb(225,59,50)" fg:x="4776" fg:w="1"/><text x="88.4169%" y="1311.50"></text></g><g><title>leveldb::PutVarint32 (2 samples, 0.04%)</title><rect x="88.1669%" y="1317" width="0.0369%" height="15" fill="rgb(209,122,5)" fg:x="4776" fg:w="2"/><text x="88.4169%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="88.1853%" y="1301" width="0.0185%" height="15" fill="rgb(214,65,34)" fg:x="4777" fg:w="1"/><text x="88.4353%" y="1311.50"></text></g><g><title>leveldb::Slice::operator[] (2 samples, 0.04%)</title><rect x="88.2038%" y="1317" width="0.0369%" height="15" fill="rgb(249,183,32)" fg:x="4778" fg:w="2"/><text x="88.4538%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="88.2407%" y="1317" width="0.0185%" height="15" fill="rgb(218,122,24)" fg:x="4780" fg:w="1"/><text x="88.4907%" y="1327.50"></text></g><g><title>leveldb::operator== (3 samples, 0.06%)</title><rect x="88.2592%" y="1317" width="0.0554%" height="15" fill="rgb(224,109,18)" fg:x="4781" fg:w="3"/><text x="88.5092%" y="1327.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.06%)</title><rect x="88.2592%" y="1301" width="0.0554%" height="15" fill="rgb(210,68,50)" fg:x="4781" fg:w="3"/><text x="88.5092%" y="1311.50"></text></g><g><title>leveldb::BlockBuilder::Add (35 samples, 0.65%)</title><rect x="87.7054%" y="1333" width="0.6461%" height="15" fill="rgb(212,184,34)" fg:x="4751" fg:w="35"/><text x="87.9554%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.04%)</title><rect x="88.3146%" y="1317" width="0.0369%" height="15" fill="rgb(238,105,48)" fg:x="4784" fg:w="2"/><text x="88.5646%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.04%)</title><rect x="88.3146%" y="1301" width="0.0369%" height="15" fill="rgb(222,134,54)" fg:x="4784" fg:w="2"/><text x="88.5646%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="88.3146%" y="1285" width="0.0369%" height="15" fill="rgb(246,24,43)" fg:x="4784" fg:w="2"/><text x="88.5646%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="88.3146%" y="1269" width="0.0369%" height="15" fill="rgb(227,169,22)" fg:x="4784" fg:w="2"/><text x="88.5646%" y="1279.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.04%)</title><rect x="88.3146%" y="1253" width="0.0369%" height="15" fill="rgb(253,152,4)" fg:x="4784" fg:w="2"/><text x="88.5646%" y="1263.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.04%)</title><rect x="88.3146%" y="1237" width="0.0369%" height="15" fill="rgb(219,158,36)" fg:x="4784" fg:w="2"/><text x="88.5646%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (1 samples, 0.02%)</title><rect x="88.3515%" y="1333" width="0.0185%" height="15" fill="rgb(251,128,40)" fg:x="4786" fg:w="1"/><text x="88.6015%" y="1343.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (1 samples, 0.02%)</title><rect x="88.3515%" y="1317" width="0.0185%" height="15" fill="rgb(254,101,39)" fg:x="4786" fg:w="1"/><text x="88.6015%" y="1327.50"></text></g><g><title>leveldb::EncodeVarint32 (2 samples, 0.04%)</title><rect x="88.3699%" y="1333" width="0.0369%" height="15" fill="rgb(221,168,40)" fg:x="4787" fg:w="2"/><text x="88.6199%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="88.4069%" y="1333" width="0.0185%" height="15" fill="rgb(221,14,27)" fg:x="4789" fg:w="1"/><text x="88.6569%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="88.4069%" y="1317" width="0.0185%" height="15" fill="rgb(207,36,43)" fg:x="4789" fg:w="1"/><text x="88.6569%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="88.4069%" y="1301" width="0.0185%" height="15" fill="rgb(240,172,53)" fg:x="4789" fg:w="1"/><text x="88.6569%" y="1311.50"></text></g><g><title>BloomHash (1 samples, 0.02%)</title><rect x="88.4622%" y="1285" width="0.0185%" height="15" fill="rgb(241,138,43)" fg:x="4792" fg:w="1"/><text x="88.7122%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (4 samples, 0.07%)</title><rect x="88.4253%" y="1301" width="0.0738%" height="15" fill="rgb(227,78,19)" fg:x="4790" fg:w="4"/><text x="88.6753%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="88.4807%" y="1285" width="0.0185%" height="15" fill="rgb(215,127,44)" fg:x="4793" fg:w="1"/><text x="88.7307%" y="1295.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="88.4807%" y="1269" width="0.0185%" height="15" fill="rgb(227,13,10)" fg:x="4793" fg:w="1"/><text x="88.7307%" y="1279.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (5 samples, 0.09%)</title><rect x="88.4253%" y="1333" width="0.0923%" height="15" fill="rgb(249,177,6)" fg:x="4790" fg:w="5"/><text x="88.6753%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (5 samples, 0.09%)</title><rect x="88.4253%" y="1317" width="0.0923%" height="15" fill="rgb(215,154,26)" fg:x="4790" fg:w="5"/><text x="88.6753%" y="1327.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="88.4992%" y="1301" width="0.0185%" height="15" fill="rgb(250,168,20)" fg:x="4794" fg:w="1"/><text x="88.7492%" y="1311.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="88.4992%" y="1285" width="0.0185%" height="15" fill="rgb(222,53,38)" fg:x="4794" fg:w="1"/><text x="88.7492%" y="1295.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (1 samples, 0.02%)</title><rect x="88.4992%" y="1269" width="0.0185%" height="15" fill="rgb(245,154,5)" fg:x="4794" fg:w="1"/><text x="88.7492%" y="1279.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="88.4992%" y="1253" width="0.0185%" height="15" fill="rgb(214,89,50)" fg:x="4794" fg:w="1"/><text x="88.7492%" y="1263.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="88.4992%" y="1237" width="0.0185%" height="15" fill="rgb(232,73,14)" fg:x="4794" fg:w="1"/><text x="88.7492%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="88.5176%" y="1333" width="0.0369%" height="15" fill="rgb(230,101,20)" fg:x="4795" fg:w="2"/><text x="88.7676%" y="1343.50"></text></g><g><title>leveldb::PutVarint32 (3 samples, 0.06%)</title><rect x="88.5546%" y="1333" width="0.0554%" height="15" fill="rgb(208,56,28)" fg:x="4797" fg:w="3"/><text x="88.8046%" y="1343.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="88.6838%" y="1109" width="0.0185%" height="15" fill="rgb(247,205,22)" fg:x="4804" fg:w="1"/><text x="88.9338%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="88.6838%" y="1093" width="0.0185%" height="15" fill="rgb(252,109,51)" fg:x="4804" fg:w="1"/><text x="88.9338%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.6838%" y="1077" width="0.0185%" height="15" fill="rgb(220,40,24)" fg:x="4804" fg:w="1"/><text x="88.9338%" y="1087.50"></text></g><g><title>[[ext4]] (3 samples, 0.06%)</title><rect x="88.6653%" y="1125" width="0.0554%" height="15" fill="rgb(251,108,7)" fg:x="4803" fg:w="3"/><text x="88.9153%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.7022%" y="1109" width="0.0185%" height="15" fill="rgb(238,102,51)" fg:x="4805" fg:w="1"/><text x="88.9522%" y="1119.50"></text></g><g><title>[[ext4]] (6 samples, 0.11%)</title><rect x="88.6653%" y="1141" width="0.1108%" height="15" fill="rgb(219,149,34)" fg:x="4803" fg:w="6"/><text x="88.9153%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="88.7207%" y="1125" width="0.0554%" height="15" fill="rgb(239,70,0)" fg:x="4806" fg:w="3"/><text x="88.9707%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.7576%" y="1109" width="0.0185%" height="15" fill="rgb(246,214,23)" fg:x="4808" fg:w="1"/><text x="89.0076%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.7576%" y="1093" width="0.0185%" height="15" fill="rgb(239,221,51)" fg:x="4808" fg:w="1"/><text x="89.0076%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.7576%" y="1077" width="0.0185%" height="15" fill="rgb(254,62,14)" fg:x="4808" fg:w="1"/><text x="89.0076%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.7576%" y="1061" width="0.0185%" height="15" fill="rgb(253,57,33)" fg:x="4808" fg:w="1"/><text x="89.0076%" y="1071.50"></text></g><g><title>[[ext4]] (15 samples, 0.28%)</title><rect x="88.6653%" y="1157" width="0.2769%" height="15" fill="rgb(229,34,6)" fg:x="4803" fg:w="15"/><text x="88.9153%" y="1167.50"></text></g><g><title>[unknown] (9 samples, 0.17%)</title><rect x="88.7761%" y="1141" width="0.1661%" height="15" fill="rgb(235,191,23)" fg:x="4809" fg:w="9"/><text x="89.0261%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="88.7945%" y="1125" width="0.1477%" height="15" fill="rgb(217,207,27)" fg:x="4810" fg:w="8"/><text x="89.0445%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="88.7945%" y="1109" width="0.1477%" height="15" fill="rgb(232,41,44)" fg:x="4810" fg:w="8"/><text x="89.0445%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="88.8315%" y="1093" width="0.1108%" height="15" fill="rgb(221,188,19)" fg:x="4812" fg:w="6"/><text x="89.0815%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="88.8499%" y="1077" width="0.0923%" height="15" fill="rgb(245,180,45)" fg:x="4813" fg:w="5"/><text x="89.0999%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="88.8868%" y="1061" width="0.0554%" height="15" fill="rgb(250,220,42)" fg:x="4815" fg:w="3"/><text x="89.1368%" y="1071.50"></text></g><g><title>Flush (19 samples, 0.35%)</title><rect x="88.6099%" y="1317" width="0.3507%" height="15" fill="rgb(234,16,34)" fg:x="4800" fg:w="19"/><text x="88.8599%" y="1327.50"></text></g><g><title>FlushBuffer (19 samples, 0.35%)</title><rect x="88.6099%" y="1301" width="0.3507%" height="15" fill="rgb(233,217,23)" fg:x="4800" fg:w="19"/><text x="88.8599%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (19 samples, 0.35%)</title><rect x="88.6099%" y="1285" width="0.3507%" height="15" fill="rgb(209,22,46)" fg:x="4800" fg:w="19"/><text x="88.8599%" y="1295.50"></text></g><g><title>__GI___libc_write (19 samples, 0.35%)</title><rect x="88.6099%" y="1269" width="0.3507%" height="15" fill="rgb(213,101,18)" fg:x="4800" fg:w="19"/><text x="88.8599%" y="1279.50"></text></g><g><title>[unknown] (19 samples, 0.35%)</title><rect x="88.6099%" y="1253" width="0.3507%" height="15" fill="rgb(215,179,52)" fg:x="4800" fg:w="19"/><text x="88.8599%" y="1263.50"></text></g><g><title>[unknown] (18 samples, 0.33%)</title><rect x="88.6284%" y="1237" width="0.3323%" height="15" fill="rgb(223,50,25)" fg:x="4801" fg:w="18"/><text x="88.8784%" y="1247.50"></text></g><g><title>[unknown] (18 samples, 0.33%)</title><rect x="88.6284%" y="1221" width="0.3323%" height="15" fill="rgb(224,51,44)" fg:x="4801" fg:w="18"/><text x="88.8784%" y="1231.50"></text></g><g><title>[unknown] (17 samples, 0.31%)</title><rect x="88.6469%" y="1205" width="0.3138%" height="15" fill="rgb(224,13,54)" fg:x="4802" fg:w="17"/><text x="88.8969%" y="1215.50"></text></g><g><title>[[ext4]] (17 samples, 0.31%)</title><rect x="88.6469%" y="1189" width="0.3138%" height="15" fill="rgb(219,58,47)" fg:x="4802" fg:w="17"/><text x="88.8969%" y="1199.50"></text></g><g><title>[unknown] (16 samples, 0.30%)</title><rect x="88.6653%" y="1173" width="0.2954%" height="15" fill="rgb(246,124,34)" fg:x="4803" fg:w="16"/><text x="88.9153%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9422%" y="1157" width="0.0185%" height="15" fill="rgb(245,109,25)" fg:x="4818" fg:w="1"/><text x="89.1922%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9422%" y="1141" width="0.0185%" height="15" fill="rgb(235,48,23)" fg:x="4818" fg:w="1"/><text x="89.1922%" y="1151.50"></text></g><g><title>leveldb::TableBuilder::Add (69 samples, 1.27%)</title><rect x="87.7054%" y="1349" width="1.2738%" height="15" fill="rgb(229,203,36)" fg:x="4751" fg:w="69"/><text x="87.9554%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Flush (20 samples, 0.37%)</title><rect x="88.6099%" y="1333" width="0.3692%" height="15" fill="rgb(234,180,9)" fg:x="4800" fg:w="20"/><text x="88.8599%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.02%)</title><rect x="88.9607%" y="1317" width="0.0185%" height="15" fill="rgb(228,98,45)" fg:x="4819" fg:w="1"/><text x="89.2107%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="88.9607%" y="1301" width="0.0185%" height="15" fill="rgb(240,24,36)" fg:x="4819" fg:w="1"/><text x="89.2107%" y="1311.50"></text></g><g><title>leveldb::BlockBuilder::Finish (1 samples, 0.02%)</title><rect x="88.9607%" y="1285" width="0.0185%" height="15" fill="rgb(227,154,19)" fg:x="4819" fg:w="1"/><text x="89.2107%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Finish (1 samples, 0.02%)</title><rect x="88.9791%" y="1349" width="0.0185%" height="15" fill="rgb(231,2,48)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.02%)</title><rect x="88.9791%" y="1333" width="0.0185%" height="15" fill="rgb(219,216,0)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="88.9791%" y="1317" width="0.0185%" height="15" fill="rgb(251,88,0)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1327.50"></text></g><g><title>Append (1 samples, 0.02%)</title><rect x="88.9791%" y="1301" width="0.0185%" height="15" fill="rgb(242,45,45)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="88.9791%" y="1285" width="0.0185%" height="15" fill="rgb(218,149,45)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1295.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="88.9791%" y="1269" width="0.0185%" height="15" fill="rgb(247,194,10)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9791%" y="1253" width="0.0185%" height="15" fill="rgb(234,33,37)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9791%" y="1237" width="0.0185%" height="15" fill="rgb(218,61,13)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9791%" y="1221" width="0.0185%" height="15" fill="rgb(210,80,52)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9791%" y="1205" width="0.0185%" height="15" fill="rgb(218,203,27)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="88.9791%" y="1189" width="0.0185%" height="15" fill="rgb(209,126,33)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9791%" y="1173" width="0.0185%" height="15" fill="rgb(234,173,41)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9791%" y="1157" width="0.0185%" height="15" fill="rgb(228,166,9)" fg:x="4820" fg:w="1"/><text x="89.2291%" y="1167.50"></text></g><g><title>leveldb::DBImpl::CompactMemTable (82 samples, 1.51%)</title><rect x="87.5023%" y="1397" width="1.5138%" height="15" fill="rgb(208,124,43)" fg:x="4740" fg:w="82"/><text x="87.7523%" y="1407.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (77 samples, 1.42%)</title><rect x="87.5946%" y="1381" width="1.4215%" height="15" fill="rgb(212,154,38)" fg:x="4745" fg:w="77"/><text x="87.8446%" y="1391.50"></text></g><g><title>leveldb::BuildTable (77 samples, 1.42%)</title><rect x="87.5946%" y="1365" width="1.4215%" height="15" fill="rgb(246,179,35)" fg:x="4745" fg:w="77"/><text x="87.8446%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="88.9976%" y="1349" width="0.0185%" height="15" fill="rgb(251,3,50)" fg:x="4821" fg:w="1"/><text x="89.2476%" y="1359.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (4 samples, 0.07%)</title><rect x="89.0161%" y="1397" width="0.0738%" height="15" fill="rgb(219,96,8)" fg:x="4822" fg:w="4"/><text x="89.2661%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="89.0714%" y="1381" width="0.0185%" height="15" fill="rgb(251,216,33)" fg:x="4825" fg:w="1"/><text x="89.3214%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="89.0714%" y="1365" width="0.0185%" height="15" fill="rgb(243,145,29)" fg:x="4825" fg:w="1"/><text x="89.3214%" y="1375.50"></text></g><g><title>[[nvme]] (3 samples, 0.06%)</title><rect x="89.2560%" y="1045" width="0.0554%" height="15" fill="rgb(210,75,20)" fg:x="4835" fg:w="3"/><text x="89.5060%" y="1055.50"></text></g><g><title>[[nvme]] (3 samples, 0.06%)</title><rect x="89.2560%" y="1029" width="0.0554%" height="15" fill="rgb(235,56,8)" fg:x="4835" fg:w="3"/><text x="89.5060%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="89.2560%" y="1013" width="0.0554%" height="15" fill="rgb(226,175,49)" fg:x="4835" fg:w="3"/><text x="89.5060%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.2745%" y="997" width="0.0369%" height="15" fill="rgb(242,204,23)" fg:x="4836" fg:w="2"/><text x="89.5245%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.2745%" y="981" width="0.0369%" height="15" fill="rgb(225,104,24)" fg:x="4836" fg:w="2"/><text x="89.5245%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.2745%" y="965" width="0.0369%" height="15" fill="rgb(253,34,1)" fg:x="4836" fg:w="2"/><text x="89.5245%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.2745%" y="949" width="0.0369%" height="15" fill="rgb(233,199,23)" fg:x="4836" fg:w="2"/><text x="89.5245%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.2745%" y="933" width="0.0369%" height="15" fill="rgb(247,7,51)" fg:x="4836" fg:w="2"/><text x="89.5245%" y="943.50"></text></g><g><title>[[ext4]] (9 samples, 0.17%)</title><rect x="89.1637%" y="1141" width="0.1661%" height="15" fill="rgb(214,146,12)" fg:x="4830" fg:w="9"/><text x="89.4137%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.15%)</title><rect x="89.1822%" y="1125" width="0.1477%" height="15" fill="rgb(234,181,43)" fg:x="4831" fg:w="8"/><text x="89.4322%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="89.2191%" y="1109" width="0.1108%" height="15" fill="rgb(239,148,6)" fg:x="4833" fg:w="6"/><text x="89.4691%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="89.2191%" y="1093" width="0.1108%" height="15" fill="rgb(206,151,17)" fg:x="4833" fg:w="6"/><text x="89.4691%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="89.2560%" y="1077" width="0.0738%" height="15" fill="rgb(213,215,10)" fg:x="4835" fg:w="4"/><text x="89.5060%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="89.2560%" y="1061" width="0.0738%" height="15" fill="rgb(215,220,44)" fg:x="4835" fg:w="4"/><text x="89.5060%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.3114%" y="1045" width="0.0185%" height="15" fill="rgb(245,205,37)" fg:x="4838" fg:w="1"/><text x="89.5614%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.3114%" y="1029" width="0.0185%" height="15" fill="rgb(245,130,43)" fg:x="4838" fg:w="1"/><text x="89.5614%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.3114%" y="1013" width="0.0185%" height="15" fill="rgb(231,227,38)" fg:x="4838" fg:w="1"/><text x="89.5614%" y="1023.50"></text></g><g><title>[[ext4]] (14 samples, 0.26%)</title><rect x="89.1637%" y="1157" width="0.2584%" height="15" fill="rgb(233,185,4)" fg:x="4830" fg:w="14"/><text x="89.4137%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="89.3299%" y="1141" width="0.0923%" height="15" fill="rgb(224,154,43)" fg:x="4839" fg:w="5"/><text x="89.5799%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="89.3668%" y="1125" width="0.0554%" height="15" fill="rgb(235,156,15)" fg:x="4841" fg:w="3"/><text x="89.6168%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.3853%" y="1109" width="0.0369%" height="15" fill="rgb(211,55,43)" fg:x="4842" fg:w="2"/><text x="89.6353%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4037%" y="1093" width="0.0185%" height="15" fill="rgb(247,149,40)" fg:x="4843" fg:w="1"/><text x="89.6537%" y="1103.50"></text></g><g><title>[[ext4]] (19 samples, 0.35%)</title><rect x="89.1084%" y="1205" width="0.3507%" height="15" fill="rgb(232,171,16)" fg:x="4827" fg:w="19"/><text x="89.3584%" y="1215.50"></text></g><g><title>[[ext4]] (19 samples, 0.35%)</title><rect x="89.1084%" y="1189" width="0.3507%" height="15" fill="rgb(215,117,49)" fg:x="4827" fg:w="19"/><text x="89.3584%" y="1199.50"></text></g><g><title>[[ext4]] (19 samples, 0.35%)</title><rect x="89.1084%" y="1173" width="0.3507%" height="15" fill="rgb(246,194,11)" fg:x="4827" fg:w="19"/><text x="89.3584%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.4222%" y="1157" width="0.0369%" height="15" fill="rgb(242,101,44)" fg:x="4844" fg:w="2"/><text x="89.6722%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4406%" y="1141" width="0.0185%" height="15" fill="rgb(226,174,6)" fg:x="4845" fg:w="1"/><text x="89.6906%" y="1151.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (26 samples, 0.48%)</title><rect x="89.0899%" y="1397" width="0.4800%" height="15" fill="rgb(213,150,20)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1407.50"></text></g><g><title>Sync (26 samples, 0.48%)</title><rect x="89.0899%" y="1381" width="0.4800%" height="15" fill="rgb(222,124,42)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (26 samples, 0.48%)</title><rect x="89.0899%" y="1365" width="0.4800%" height="15" fill="rgb(250,19,47)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1375.50"></text></g><g><title>fdatasync (26 samples, 0.48%)</title><rect x="89.0899%" y="1349" width="0.4800%" height="15" fill="rgb(241,217,19)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1359.50"></text></g><g><title>[unknown] (26 samples, 0.48%)</title><rect x="89.0899%" y="1333" width="0.4800%" height="15" fill="rgb(207,210,34)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1343.50"></text></g><g><title>[unknown] (26 samples, 0.48%)</title><rect x="89.0899%" y="1317" width="0.4800%" height="15" fill="rgb(244,45,4)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1327.50"></text></g><g><title>[unknown] (26 samples, 0.48%)</title><rect x="89.0899%" y="1301" width="0.4800%" height="15" fill="rgb(252,134,50)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1311.50"></text></g><g><title>[[ext4]] (26 samples, 0.48%)</title><rect x="89.0899%" y="1285" width="0.4800%" height="15" fill="rgb(238,74,2)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1295.50"></text></g><g><title>[unknown] (26 samples, 0.48%)</title><rect x="89.0899%" y="1269" width="0.4800%" height="15" fill="rgb(226,58,46)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1279.50"></text></g><g><title>[unknown] (26 samples, 0.48%)</title><rect x="89.0899%" y="1253" width="0.4800%" height="15" fill="rgb(232,83,35)" fg:x="4826" fg:w="26"/><text x="89.3399%" y="1263.50"></text></g><g><title>[unknown] (25 samples, 0.46%)</title><rect x="89.1084%" y="1237" width="0.4615%" height="15" fill="rgb(212,148,47)" fg:x="4827" fg:w="25"/><text x="89.3584%" y="1247.50"></text></g><g><title>[unknown] (25 samples, 0.46%)</title><rect x="89.1084%" y="1221" width="0.4615%" height="15" fill="rgb(235,29,1)" fg:x="4827" fg:w="25"/><text x="89.3584%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="89.4591%" y="1205" width="0.1108%" height="15" fill="rgb(247,55,37)" fg:x="4846" fg:w="6"/><text x="89.7091%" y="1215.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="89.4776%" y="1189" width="0.0923%" height="15" fill="rgb(222,48,3)" fg:x="4847" fg:w="5"/><text x="89.7276%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="89.4776%" y="1173" width="0.0923%" height="15" fill="rgb(234,21,33)" fg:x="4847" fg:w="5"/><text x="89.7276%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="89.4776%" y="1157" width="0.0923%" height="15" fill="rgb(247,178,53)" fg:x="4847" fg:w="5"/><text x="89.7276%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="89.4776%" y="1141" width="0.0923%" height="15" fill="rgb(225,75,7)" fg:x="4847" fg:w="5"/><text x="89.7276%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="89.4960%" y="1125" width="0.0738%" height="15" fill="rgb(219,199,7)" fg:x="4848" fg:w="4"/><text x="89.7460%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="89.5145%" y="1109" width="0.0554%" height="15" fill="rgb(209,93,42)" fg:x="4849" fg:w="3"/><text x="89.7645%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="89.5145%" y="1093" width="0.0554%" height="15" fill="rgb(240,175,17)" fg:x="4849" fg:w="3"/><text x="89.7645%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="89.5145%" y="1077" width="0.0554%" height="15" fill="rgb(232,106,7)" fg:x="4849" fg:w="3"/><text x="89.7645%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="89.5145%" y="1061" width="0.0554%" height="15" fill="rgb(242,106,43)" fg:x="4849" fg:w="3"/><text x="89.7645%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="89.5145%" y="1045" width="0.0554%" height="15" fill="rgb(242,61,37)" fg:x="4849" fg:w="3"/><text x="89.7645%" y="1055.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="89.5699%" y="1397" width="0.0369%" height="15" fill="rgb(205,72,10)" fg:x="4852" fg:w="2"/><text x="89.8199%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (3 samples, 0.06%)</title><rect x="89.6068%" y="1381" width="0.0554%" height="15" fill="rgb(214,184,36)" fg:x="4854" fg:w="3"/><text x="89.8568%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::value (1 samples, 0.02%)</title><rect x="89.6437%" y="1365" width="0.0185%" height="15" fill="rgb(206,107,18)" fg:x="4856" fg:w="1"/><text x="89.8937%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::value (2 samples, 0.04%)</title><rect x="89.6622%" y="1381" width="0.0369%" height="15" fill="rgb(210,75,5)" fg:x="4857" fg:w="2"/><text x="89.9122%" y="1391.50"></text></g><g><title>leveldb::BlockBuilder::Add (2 samples, 0.04%)</title><rect x="89.8283%" y="1365" width="0.0369%" height="15" fill="rgb(205,3,19)" fg:x="4866" fg:w="2"/><text x="90.0783%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="89.9022%" y="1333" width="0.0185%" height="15" fill="rgb(207,181,42)" fg:x="4870" fg:w="1"/><text x="90.1522%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="89.9022%" y="1317" width="0.0185%" height="15" fill="rgb(229,179,43)" fg:x="4870" fg:w="1"/><text x="90.1522%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="89.9022%" y="1301" width="0.0185%" height="15" fill="rgb(246,95,30)" fg:x="4870" fg:w="1"/><text x="90.1522%" y="1311.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (4 samples, 0.07%)</title><rect x="89.8652%" y="1365" width="0.0738%" height="15" fill="rgb(234,144,45)" fg:x="4868" fg:w="4"/><text x="90.1152%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.04%)</title><rect x="89.9022%" y="1349" width="0.0369%" height="15" fill="rgb(250,54,25)" fg:x="4870" fg:w="2"/><text x="90.1522%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="89.9206%" y="1333" width="0.0185%" height="15" fill="rgb(215,195,40)" fg:x="4871" fg:w="1"/><text x="90.1706%" y="1343.50"></text></g><g><title>[bitcoind-base] (1 samples, 0.02%)</title><rect x="89.9391%" y="1349" width="0.0185%" height="15" fill="rgb(233,188,42)" fg:x="4872" fg:w="1"/><text x="90.1891%" y="1359.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="89.9391%" y="1333" width="0.0185%" height="15" fill="rgb(247,227,35)" fg:x="4872" fg:w="1"/><text x="90.1891%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.09%)</title><rect x="89.9575%" y="1349" width="0.0923%" height="15" fill="rgb(249,124,27)" fg:x="4873" fg:w="5"/><text x="90.2075%" y="1359.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.04%)</title><rect x="90.0129%" y="1333" width="0.0369%" height="15" fill="rgb(219,207,25)" fg:x="4876" fg:w="2"/><text x="90.2629%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (10 samples, 0.18%)</title><rect x="89.9391%" y="1365" width="0.1846%" height="15" fill="rgb(241,216,47)" fg:x="4872" fg:w="10"/><text x="90.1891%" y="1375.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="90.0498%" y="1349" width="0.0738%" height="15" fill="rgb(233,82,50)" fg:x="4878" fg:w="4"/><text x="90.2998%" y="1359.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.04%)</title><rect x="90.0868%" y="1333" width="0.0369%" height="15" fill="rgb(232,63,2)" fg:x="4880" fg:w="2"/><text x="90.3368%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="90.1237%" y="1349" width="0.0185%" height="15" fill="rgb(236,184,28)" fg:x="4882" fg:w="1"/><text x="90.3737%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="90.1237%" y="1333" width="0.0185%" height="15" fill="rgb(254,63,27)" fg:x="4882" fg:w="1"/><text x="90.3737%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="90.1237%" y="1317" width="0.0185%" height="15" fill="rgb(253,106,28)" fg:x="4882" fg:w="1"/><text x="90.3737%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="90.1237%" y="1301" width="0.0185%" height="15" fill="rgb(225,141,39)" fg:x="4882" fg:w="1"/><text x="90.3737%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="90.1237%" y="1285" width="0.0185%" height="15" fill="rgb(222,157,20)" fg:x="4882" fg:w="1"/><text x="90.3737%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="90.1237%" y="1269" width="0.0185%" height="15" fill="rgb(210,190,9)" fg:x="4882" fg:w="1"/><text x="90.3737%" y="1279.50"></text></g><g><title>leveldb::PutVarint32 (3 samples, 0.06%)</title><rect x="90.1237%" y="1365" width="0.0554%" height="15" fill="rgb(242,167,7)" fg:x="4882" fg:w="3"/><text x="90.3737%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Add (2 samples, 0.04%)</title><rect x="90.1421%" y="1349" width="0.0369%" height="15" fill="rgb(227,82,41)" fg:x="4883" fg:w="2"/><text x="90.3921%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="90.1606%" y="1333" width="0.0185%" height="15" fill="rgb(222,131,13)" fg:x="4884" fg:w="1"/><text x="90.4106%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="90.1606%" y="1317" width="0.0185%" height="15" fill="rgb(221,98,26)" fg:x="4884" fg:w="1"/><text x="90.4106%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="90.1606%" y="1301" width="0.0185%" height="15" fill="rgb(251,63,52)" fg:x="4884" fg:w="1"/><text x="90.4106%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="90.1606%" y="1285" width="0.0185%" height="15" fill="rgb(246,25,43)" fg:x="4884" fg:w="1"/><text x="90.4106%" y="1295.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="90.1606%" y="1269" width="0.0185%" height="15" fill="rgb(247,167,15)" fg:x="4884" fg:w="1"/><text x="90.4106%" y="1279.50"></text></g><g><title>leveldb::Slice::data (1 samples, 0.02%)</title><rect x="90.1791%" y="1365" width="0.0185%" height="15" fill="rgb(240,104,42)" fg:x="4885" fg:w="1"/><text x="90.4291%" y="1375.50"></text></g><g><title>leveldb::Slice::operator[] (8 samples, 0.15%)</title><rect x="90.1975%" y="1365" width="0.1477%" height="15" fill="rgb(224,54,6)" fg:x="4886" fg:w="8"/><text x="90.4475%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="90.3637%" y="1317" width="0.0185%" height="15" fill="rgb(244,108,35)" fg:x="4895" fg:w="1"/><text x="90.6137%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Add (3 samples, 0.06%)</title><rect x="90.3452%" y="1365" width="0.0554%" height="15" fill="rgb(216,154,2)" fg:x="4894" fg:w="3"/><text x="90.5952%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (2 samples, 0.04%)</title><rect x="90.3637%" y="1349" width="0.0369%" height="15" fill="rgb(222,8,47)" fg:x="4895" fg:w="2"/><text x="90.6137%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2 samples, 0.04%)</title><rect x="90.3637%" y="1333" width="0.0369%" height="15" fill="rgb(252,93,1)" fg:x="4895" fg:w="2"/><text x="90.6137%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (1 samples, 0.02%)</title><rect x="90.3821%" y="1317" width="0.0185%" height="15" fill="rgb(223,226,51)" fg:x="4896" fg:w="1"/><text x="90.6321%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::status (2 samples, 0.04%)</title><rect x="90.4006%" y="1365" width="0.0369%" height="15" fill="rgb(206,147,9)" fg:x="4897" fg:w="2"/><text x="90.6506%" y="1375.50"></text></g><g><title>leveldb::Status::Status (2 samples, 0.04%)</title><rect x="90.4006%" y="1349" width="0.0369%" height="15" fill="rgb(248,180,41)" fg:x="4897" fg:w="2"/><text x="90.6506%" y="1359.50"></text></g><g><title>__memcmp_evex_movbe (4 samples, 0.07%)</title><rect x="90.4375%" y="1349" width="0.0738%" height="15" fill="rgb(209,47,50)" fg:x="4899" fg:w="4"/><text x="90.6875%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="90.4375%" y="1333" width="0.0738%" height="15" fill="rgb(243,65,31)" fg:x="4899" fg:w="4"/><text x="90.6875%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="90.4375%" y="1317" width="0.0738%" height="15" fill="rgb(228,128,1)" fg:x="4899" fg:w="4"/><text x="90.6875%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="90.4375%" y="1301" width="0.0738%" height="15" fill="rgb(231,192,16)" fg:x="4899" fg:w="4"/><text x="90.6875%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="90.4375%" y="1285" width="0.0738%" height="15" fill="rgb(224,26,40)" fg:x="4899" fg:w="4"/><text x="90.6875%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="90.4375%" y="1269" width="0.0738%" height="15" fill="rgb(214,192,17)" fg:x="4899" fg:w="4"/><text x="90.6875%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="90.4560%" y="1253" width="0.0554%" height="15" fill="rgb(225,147,18)" fg:x="4900" fg:w="3"/><text x="90.7060%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="90.4560%" y="1237" width="0.0554%" height="15" fill="rgb(205,35,11)" fg:x="4900" fg:w="3"/><text x="90.7060%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="90.4560%" y="1221" width="0.0554%" height="15" fill="rgb(242,40,42)" fg:x="4900" fg:w="3"/><text x="90.7060%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="90.4560%" y="1205" width="0.0554%" height="15" fill="rgb(250,170,13)" fg:x="4900" fg:w="3"/><text x="90.7060%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="90.4560%" y="1189" width="0.0554%" height="15" fill="rgb(240,161,28)" fg:x="4900" fg:w="3"/><text x="90.7060%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="90.4560%" y="1173" width="0.0554%" height="15" fill="rgb(245,179,12)" fg:x="4900" fg:w="3"/><text x="90.7060%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="90.4560%" y="1157" width="0.0554%" height="15" fill="rgb(250,92,32)" fg:x="4900" fg:w="3"/><text x="90.7060%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="90.4560%" y="1141" width="0.0554%" height="15" fill="rgb(233,10,40)" fg:x="4900" fg:w="3"/><text x="90.7060%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.06%)</title><rect x="90.5114%" y="1349" width="0.0554%" height="15" fill="rgb(217,98,1)" fg:x="4903" fg:w="3"/><text x="90.7614%" y="1359.50"></text></g><g><title>leveldb::operator== (8 samples, 0.15%)</title><rect x="90.4375%" y="1365" width="0.1477%" height="15" fill="rgb(238,202,7)" fg:x="4899" fg:w="8"/><text x="90.6875%" y="1375.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="90.5667%" y="1349" width="0.0185%" height="15" fill="rgb(222,91,3)" fg:x="4906" fg:w="1"/><text x="90.8167%" y="1359.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.04%)</title><rect x="90.6406%" y="1285" width="0.0369%" height="15" fill="rgb(211,170,49)" fg:x="4910" fg:w="2"/><text x="90.8906%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (6 samples, 0.11%)</title><rect x="90.5852%" y="1349" width="0.1108%" height="15" fill="rgb(253,139,18)" fg:x="4907" fg:w="6"/><text x="90.8352%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (4 samples, 0.07%)</title><rect x="90.6221%" y="1333" width="0.0738%" height="15" fill="rgb(222,4,43)" fg:x="4909" fg:w="4"/><text x="90.8721%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (4 samples, 0.07%)</title><rect x="90.6221%" y="1317" width="0.0738%" height="15" fill="rgb(207,205,12)" fg:x="4909" fg:w="4"/><text x="90.8721%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.06%)</title><rect x="90.6406%" y="1301" width="0.0554%" height="15" fill="rgb(216,159,46)" fg:x="4910" fg:w="3"/><text x="90.8906%" y="1311.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="90.6775%" y="1285" width="0.0185%" height="15" fill="rgb(236,115,1)" fg:x="4912" fg:w="1"/><text x="90.9275%" y="1295.50"></text></g><g><title>leveldb::BlockBuilder::Add (55 samples, 1.02%)</title><rect x="89.6991%" y="1381" width="1.0153%" height="15" fill="rgb(251,35,33)" fg:x="4859" fg:w="55"/><text x="89.9491%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (7 samples, 0.13%)</title><rect x="90.5852%" y="1365" width="0.1292%" height="15" fill="rgb(248,62,51)" fg:x="4907" fg:w="7"/><text x="90.8352%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="90.6960%" y="1349" width="0.0185%" height="15" fill="rgb(254,180,19)" fg:x="4913" fg:w="1"/><text x="90.9460%" y="1359.50"></text></g><g><title>leveldb::BlockHandle::EncodeTo (1 samples, 0.02%)</title><rect x="90.7144%" y="1381" width="0.0185%" height="15" fill="rgb(217,100,32)" fg:x="4914" fg:w="1"/><text x="90.9644%" y="1391.50"></text></g><g><title>leveldb::PutVarint64 (1 samples, 0.02%)</title><rect x="90.7144%" y="1365" width="0.0185%" height="15" fill="rgb(224,71,22)" fg:x="4914" fg:w="1"/><text x="90.9644%" y="1375.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="90.7144%" y="1349" width="0.0185%" height="15" fill="rgb(251,185,33)" fg:x="4914" fg:w="1"/><text x="90.9644%" y="1359.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (2 samples, 0.04%)</title><rect x="90.7329%" y="1381" width="0.0369%" height="15" fill="rgb(209,75,48)" fg:x="4915" fg:w="2"/><text x="90.9829%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="90.7513%" y="1365" width="0.0185%" height="15" fill="rgb(253,190,16)" fg:x="4916" fg:w="1"/><text x="91.0013%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="90.7513%" y="1349" width="0.0185%" height="15" fill="rgb(226,140,1)" fg:x="4916" fg:w="1"/><text x="91.0013%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="90.7513%" y="1333" width="0.0185%" height="15" fill="rgb(206,75,30)" fg:x="4916" fg:w="1"/><text x="91.0013%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="90.7513%" y="1317" width="0.0185%" height="15" fill="rgb(231,208,37)" fg:x="4916" fg:w="1"/><text x="91.0013%" y="1327.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="90.7698%" y="1381" width="0.0185%" height="15" fill="rgb(238,136,40)" fg:x="4917" fg:w="1"/><text x="91.0198%" y="1391.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (2 samples, 0.04%)</title><rect x="90.7883%" y="1381" width="0.0369%" height="15" fill="rgb(247,137,17)" fg:x="4918" fg:w="2"/><text x="91.0383%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="90.8067%" y="1365" width="0.0185%" height="15" fill="rgb(240,60,40)" fg:x="4919" fg:w="1"/><text x="91.0567%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="90.8067%" y="1349" width="0.0185%" height="15" fill="rgb(236,68,50)" fg:x="4919" fg:w="1"/><text x="91.0567%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="90.8067%" y="1333" width="0.0185%" height="15" fill="rgb(230,42,12)" fg:x="4919" fg:w="1"/><text x="91.0567%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="90.8067%" y="1317" width="0.0185%" height="15" fill="rgb(219,16,16)" fg:x="4919" fg:w="1"/><text x="91.0567%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="90.8067%" y="1301" width="0.0185%" height="15" fill="rgb(220,38,35)" fg:x="4919" fg:w="1"/><text x="91.0567%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="90.8067%" y="1285" width="0.0185%" height="15" fill="rgb(228,33,1)" fg:x="4919" fg:w="1"/><text x="91.0567%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="90.8252%" y="1365" width="0.0185%" height="15" fill="rgb(241,46,31)" fg:x="4920" fg:w="1"/><text x="91.0752%" y="1375.50"></text></g><g><title>BloomHash (2 samples, 0.04%)</title><rect x="91.0098%" y="1333" width="0.0369%" height="15" fill="rgb(232,58,20)" fg:x="4930" fg:w="2"/><text x="91.2598%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (3 samples, 0.06%)</title><rect x="91.0467%" y="1317" width="0.0554%" height="15" fill="rgb(206,228,53)" fg:x="4932" fg:w="3"/><text x="91.2967%" y="1327.50"></text></g><g><title>leveldb::Hash (2 samples, 0.04%)</title><rect x="91.1021%" y="1317" width="0.0369%" height="15" fill="rgb(206,88,33)" fg:x="4935" fg:w="2"/><text x="91.3521%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (6 samples, 0.11%)</title><rect x="91.0467%" y="1333" width="0.1108%" height="15" fill="rgb(238,69,7)" fg:x="4932" fg:w="6"/><text x="91.2967%" y="1343.50"></text></g><g><title>leveldb::InternalFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="91.1390%" y="1317" width="0.0185%" height="15" fill="rgb(250,21,46)" fg:x="4937" fg:w="1"/><text x="91.3890%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (17 samples, 0.31%)</title><rect x="90.8621%" y="1349" width="0.3138%" height="15" fill="rgb(215,212,21)" fg:x="4922" fg:w="17"/><text x="91.1121%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="91.1575%" y="1333" width="0.0185%" height="15" fill="rgb(211,35,12)" fg:x="4938" fg:w="1"/><text x="91.4075%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="91.1575%" y="1317" width="0.0185%" height="15" fill="rgb(231,184,16)" fg:x="4938" fg:w="1"/><text x="91.4075%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (1 samples, 0.02%)</title><rect x="91.1575%" y="1301" width="0.0185%" height="15" fill="rgb(242,140,15)" fg:x="4938" fg:w="1"/><text x="91.4075%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_assign (1 samples, 0.02%)</title><rect x="91.1575%" y="1285" width="0.0185%" height="15" fill="rgb(220,37,14)" fg:x="4938" fg:w="1"/><text x="91.4075%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_assign (1 samples, 0.02%)</title><rect x="91.1575%" y="1269" width="0.0185%" height="15" fill="rgb(223,146,22)" fg:x="4938" fg:w="1"/><text x="91.4075%" y="1279.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="91.1575%" y="1253" width="0.0185%" height="15" fill="rgb(216,132,15)" fg:x="4938" fg:w="1"/><text x="91.4075%" y="1263.50"></text></g><g><title>leveldb::Hash (10 samples, 0.18%)</title><rect x="91.1759%" y="1349" width="0.1846%" height="15" fill="rgb(248,83,5)" fg:x="4939" fg:w="10"/><text x="91.4259%" y="1359.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (29 samples, 0.54%)</title><rect x="90.8436%" y="1365" width="0.5354%" height="15" fill="rgb(231,206,48)" fg:x="4921" fg:w="29"/><text x="91.0936%" y="1375.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="91.3605%" y="1349" width="0.0185%" height="15" fill="rgb(253,185,37)" fg:x="4949" fg:w="1"/><text x="91.6105%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Flush (1 samples, 0.02%)</title><rect x="91.3605%" y="1333" width="0.0185%" height="15" fill="rgb(208,21,44)" fg:x="4949" fg:w="1"/><text x="91.6105%" y="1343.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="91.3605%" y="1317" width="0.0185%" height="15" fill="rgb(236,125,4)" fg:x="4949" fg:w="1"/><text x="91.6105%" y="1327.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="91.3605%" y="1301" width="0.0185%" height="15" fill="rgb(226,134,25)" fg:x="4949" fg:w="1"/><text x="91.6105%" y="1311.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (31 samples, 0.57%)</title><rect x="90.8252%" y="1381" width="0.5723%" height="15" fill="rgb(250,201,12)" fg:x="4920" fg:w="31"/><text x="91.0752%" y="1391.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="91.3790%" y="1365" width="0.0185%" height="15" fill="rgb(225,92,18)" fg:x="4950" fg:w="1"/><text x="91.6290%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="91.4344%" y="1365" width="0.0738%" height="15" fill="rgb(227,35,22)" fg:x="4953" fg:w="4"/><text x="91.6844%" y="1375.50"></text></g><g><title>leveldb::Slice::compare (4 samples, 0.07%)</title><rect x="91.4344%" y="1349" width="0.0738%" height="15" fill="rgb(214,180,52)" fg:x="4953" fg:w="4"/><text x="91.6844%" y="1359.50"></text></g><g><title>__memcmp_evex_movbe (4 samples, 0.07%)</title><rect x="91.4344%" y="1333" width="0.0738%" height="15" fill="rgb(233,55,38)" fg:x="4953" fg:w="4"/><text x="91.6844%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="91.4344%" y="1317" width="0.0738%" height="15" fill="rgb(249,171,43)" fg:x="4953" fg:w="4"/><text x="91.6844%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="91.4344%" y="1301" width="0.0738%" height="15" fill="rgb(239,87,2)" fg:x="4953" fg:w="4"/><text x="91.6844%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="91.4344%" y="1285" width="0.0738%" height="15" fill="rgb(248,141,5)" fg:x="4953" fg:w="4"/><text x="91.6844%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="91.4344%" y="1269" width="0.0738%" height="15" fill="rgb(238,33,42)" fg:x="4953" fg:w="4"/><text x="91.6844%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="91.4528%" y="1253" width="0.0554%" height="15" fill="rgb(231,57,19)" fg:x="4954" fg:w="3"/><text x="91.7028%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="91.4528%" y="1237" width="0.0554%" height="15" fill="rgb(214,78,53)" fg:x="4954" fg:w="3"/><text x="91.7028%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="91.4528%" y="1221" width="0.0554%" height="15" fill="rgb(206,132,29)" fg:x="4954" fg:w="3"/><text x="91.7028%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="91.4528%" y="1205" width="0.0554%" height="15" fill="rgb(248,174,31)" fg:x="4954" fg:w="3"/><text x="91.7028%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="91.4528%" y="1189" width="0.0554%" height="15" fill="rgb(221,87,13)" fg:x="4954" fg:w="3"/><text x="91.7028%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="91.4528%" y="1173" width="0.0554%" height="15" fill="rgb(223,197,17)" fg:x="4954" fg:w="3"/><text x="91.7028%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="91.4528%" y="1157" width="0.0554%" height="15" fill="rgb(220,144,50)" fg:x="4954" fg:w="3"/><text x="91.7028%" y="1167.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="91.5082%" y="1365" width="0.0185%" height="15" fill="rgb(244,201,11)" fg:x="4957" fg:w="1"/><text x="91.7582%" y="1375.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="91.5082%" y="1349" width="0.0185%" height="15" fill="rgb(249,81,34)" fg:x="4957" fg:w="1"/><text x="91.7582%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="91.5082%" y="1333" width="0.0185%" height="15" fill="rgb(205,161,12)" fg:x="4957" fg:w="1"/><text x="91.7582%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="91.5082%" y="1317" width="0.0185%" height="15" fill="rgb(252,139,50)" fg:x="4957" fg:w="1"/><text x="91.7582%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="91.5082%" y="1301" width="0.0185%" height="15" fill="rgb(205,169,14)" fg:x="4957" fg:w="1"/><text x="91.7582%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="91.5082%" y="1285" width="0.0185%" height="15" fill="rgb(248,198,33)" fg:x="4957" fg:w="1"/><text x="91.7582%" y="1295.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="91.5082%" y="1269" width="0.0185%" height="15" fill="rgb(236,23,21)" fg:x="4957" fg:w="1"/><text x="91.7582%" y="1279.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="91.5267%" y="1365" width="0.0185%" height="15" fill="rgb(231,13,38)" fg:x="4958" fg:w="1"/><text x="91.7767%" y="1375.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="91.5267%" y="1349" width="0.0185%" height="15" fill="rgb(239,139,21)" fg:x="4958" fg:w="1"/><text x="91.7767%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (9 samples, 0.17%)</title><rect x="91.3975%" y="1381" width="0.1661%" height="15" fill="rgb(222,164,45)" fg:x="4951" fg:w="9"/><text x="91.6475%" y="1391.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (1 samples, 0.02%)</title><rect x="91.5451%" y="1365" width="0.0185%" height="15" fill="rgb(230,52,27)" fg:x="4959" fg:w="1"/><text x="91.7951%" y="1375.50"></text></g><g><title>FindShortestSeparator (1 samples, 0.02%)</title><rect x="91.5636%" y="1365" width="0.0185%" height="15" fill="rgb(227,143,42)" fg:x="4960" fg:w="1"/><text x="91.8136%" y="1375.50"></text></g><g><title>Compare (1 samples, 0.02%)</title><rect x="91.5636%" y="1349" width="0.0185%" height="15" fill="rgb(249,127,1)" fg:x="4960" fg:w="1"/><text x="91.8136%" y="1359.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="91.5636%" y="1333" width="0.0185%" height="15" fill="rgb(243,107,26)" fg:x="4960" fg:w="1"/><text x="91.8136%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (1 samples, 0.02%)</title><rect x="91.5636%" y="1317" width="0.0185%" height="15" fill="rgb(225,7,45)" fg:x="4960" fg:w="1"/><text x="91.8136%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (2 samples, 0.04%)</title><rect x="91.5636%" y="1381" width="0.0369%" height="15" fill="rgb(241,88,38)" fg:x="4960" fg:w="2"/><text x="91.8136%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (1 samples, 0.02%)</title><rect x="91.5821%" y="1365" width="0.0185%" height="15" fill="rgb(226,121,9)" fg:x="4961" fg:w="1"/><text x="91.8321%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="91.5821%" y="1349" width="0.0185%" height="15" fill="rgb(253,60,29)" fg:x="4961" fg:w="1"/><text x="91.8321%" y="1359.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="91.5821%" y="1333" width="0.0185%" height="15" fill="rgb(244,181,39)" fg:x="4961" fg:w="1"/><text x="91.8321%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="91.5821%" y="1317" width="0.0185%" height="15" fill="rgb(252,203,31)" fg:x="4961" fg:w="1"/><text x="91.8321%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (1 samples, 0.02%)</title><rect x="91.5821%" y="1301" width="0.0185%" height="15" fill="rgb(224,120,8)" fg:x="4961" fg:w="1"/><text x="91.8321%" y="1311.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="91.5821%" y="1285" width="0.0185%" height="15" fill="rgb(205,171,54)" fg:x="4961" fg:w="1"/><text x="91.8321%" y="1295.50"></text></g><g><title>std::allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="91.5821%" y="1269" width="0.0185%" height="15" fill="rgb(235,89,11)" fg:x="4961" fg:w="1"/><text x="91.8321%" y="1279.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="91.5821%" y="1253" width="0.0185%" height="15" fill="rgb(212,180,28)" fg:x="4961" fg:w="1"/><text x="91.8321%" y="1263.50"></text></g><g><title>leveldb::PutVarint32 (6 samples, 0.11%)</title><rect x="91.6005%" y="1381" width="0.1108%" height="15" fill="rgb(247,84,49)" fg:x="4962" fg:w="6"/><text x="91.8505%" y="1391.50"></text></g><g><title>WriteUnbuffered (2 samples, 0.04%)</title><rect x="91.7113%" y="1333" width="0.0369%" height="15" fill="rgb(236,187,52)" fg:x="4968" fg:w="2"/><text x="91.9613%" y="1343.50"></text></g><g><title>leveldb::Status::OK (1 samples, 0.02%)</title><rect x="91.7297%" y="1317" width="0.0185%" height="15" fill="rgb(227,24,15)" fg:x="4969" fg:w="1"/><text x="91.9797%" y="1327.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="91.9328%" y="1157" width="0.0738%" height="15" fill="rgb(227,211,13)" fg:x="4980" fg:w="4"/><text x="92.1828%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.9882%" y="1141" width="0.0185%" height="15" fill="rgb(245,52,14)" fg:x="4983" fg:w="1"/><text x="92.2382%" y="1151.50"></text></g><g><title>[[ext4]] (7 samples, 0.13%)</title><rect x="91.8959%" y="1173" width="0.1292%" height="15" fill="rgb(225,185,13)" fg:x="4978" fg:w="7"/><text x="92.1459%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.0066%" y="1157" width="0.0185%" height="15" fill="rgb(217,160,29)" fg:x="4984" fg:w="1"/><text x="92.2566%" y="1167.50"></text></g><g><title>[[ext4]] (13 samples, 0.24%)</title><rect x="91.8774%" y="1189" width="0.2400%" height="15" fill="rgb(216,115,53)" fg:x="4977" fg:w="13"/><text x="92.1274%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.0251%" y="1173" width="0.0923%" height="15" fill="rgb(236,99,5)" fg:x="4985" fg:w="5"/><text x="92.2751%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.0251%" y="1157" width="0.0923%" height="15" fill="rgb(222,60,38)" fg:x="4985" fg:w="5"/><text x="92.2751%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.0251%" y="1141" width="0.0923%" height="15" fill="rgb(212,82,22)" fg:x="4985" fg:w="5"/><text x="92.2751%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.0251%" y="1125" width="0.0923%" height="15" fill="rgb(214,48,28)" fg:x="4985" fg:w="5"/><text x="92.2751%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="1109" width="0.0554%" height="15" fill="rgb(245,196,50)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="1093" width="0.0554%" height="15" fill="rgb(225,159,46)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="1077" width="0.0554%" height="15" fill="rgb(207,195,48)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="1061" width="0.0554%" height="15" fill="rgb(240,73,3)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="1045" width="0.0554%" height="15" fill="rgb(245,57,23)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="1029" width="0.0554%" height="15" fill="rgb(240,75,18)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="1013" width="0.0554%" height="15" fill="rgb(238,168,12)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="997" width="0.0554%" height="15" fill="rgb(226,20,40)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="981" width="0.0554%" height="15" fill="rgb(224,130,35)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.0620%" y="965" width="0.0554%" height="15" fill="rgb(225,63,41)" fg:x="4987" fg:w="3"/><text x="92.3120%" y="975.50"></text></g><g><title>[[ext4]] (50 samples, 0.92%)</title><rect x="91.8405%" y="1205" width="0.9230%" height="15" fill="rgb(219,3,3)" fg:x="4975" fg:w="50"/><text x="92.0905%" y="1215.50"></text></g><g><title>[unknown] (35 samples, 0.65%)</title><rect x="92.1174%" y="1189" width="0.6461%" height="15" fill="rgb(218,157,4)" fg:x="4990" fg:w="35"/><text x="92.3674%" y="1199.50"></text></g><g><title>[unknown] (35 samples, 0.65%)</title><rect x="92.1174%" y="1173" width="0.6461%" height="15" fill="rgb(232,76,36)" fg:x="4990" fg:w="35"/><text x="92.3674%" y="1183.50"></text></g><g><title>[unknown] (29 samples, 0.54%)</title><rect x="92.2282%" y="1157" width="0.5354%" height="15" fill="rgb(247,36,0)" fg:x="4996" fg:w="29"/><text x="92.4782%" y="1167.50"></text></g><g><title>[unknown] (24 samples, 0.44%)</title><rect x="92.3205%" y="1141" width="0.4430%" height="15" fill="rgb(205,2,34)" fg:x="5001" fg:w="24"/><text x="92.5705%" y="1151.50"></text></g><g><title>[unknown] (18 samples, 0.33%)</title><rect x="92.4312%" y="1125" width="0.3323%" height="15" fill="rgb(239,136,13)" fg:x="5007" fg:w="18"/><text x="92.6812%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="92.6343%" y="1109" width="0.1292%" height="15" fill="rgb(253,122,12)" fg:x="5018" fg:w="7"/><text x="92.8843%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="92.6897%" y="1093" width="0.0738%" height="15" fill="rgb(222,174,7)" fg:x="5021" fg:w="4"/><text x="92.9397%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.7266%" y="1077" width="0.0369%" height="15" fill="rgb(208,191,42)" fg:x="5023" fg:w="2"/><text x="92.9766%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.7266%" y="1061" width="0.0369%" height="15" fill="rgb(237,212,15)" fg:x="5023" fg:w="2"/><text x="92.9766%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.7266%" y="1045" width="0.0369%" height="15" fill="rgb(215,65,20)" fg:x="5023" fg:w="2"/><text x="92.9766%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.7266%" y="1029" width="0.0369%" height="15" fill="rgb(232,103,11)" fg:x="5023" fg:w="2"/><text x="92.9766%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.7451%" y="1013" width="0.0185%" height="15" fill="rgb(235,148,18)" fg:x="5024" fg:w="1"/><text x="92.9951%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.7451%" y="997" width="0.0185%" height="15" fill="rgb(240,173,7)" fg:x="5024" fg:w="1"/><text x="92.9951%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.7451%" y="981" width="0.0185%" height="15" fill="rgb(228,182,25)" fg:x="5024" fg:w="1"/><text x="92.9951%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.7451%" y="965" width="0.0185%" height="15" fill="rgb(247,3,52)" fg:x="5024" fg:w="1"/><text x="92.9951%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.7451%" y="949" width="0.0185%" height="15" fill="rgb(226,155,8)" fg:x="5024" fg:w="1"/><text x="92.9951%" y="959.50"></text></g><g><title>[[ext4]] (53 samples, 0.98%)</title><rect x="91.8405%" y="1237" width="0.9784%" height="15" fill="rgb(243,195,38)" fg:x="4975" fg:w="53"/><text x="92.0905%" y="1247.50"></text></g><g><title>[unknown] (53 samples, 0.98%)</title><rect x="91.8405%" y="1221" width="0.9784%" height="15" fill="rgb(254,181,33)" fg:x="4975" fg:w="53"/><text x="92.0905%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="92.7635%" y="1205" width="0.0554%" height="15" fill="rgb(232,98,23)" fg:x="5025" fg:w="3"/><text x="93.0135%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.7820%" y="1189" width="0.0369%" height="15" fill="rgb(205,23,10)" fg:x="5026" fg:w="2"/><text x="93.0320%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8004%" y="1173" width="0.0185%" height="15" fill="rgb(212,124,38)" fg:x="5027" fg:w="1"/><text x="93.0504%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8004%" y="1157" width="0.0185%" height="15" fill="rgb(228,207,2)" fg:x="5027" fg:w="1"/><text x="93.0504%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8004%" y="1141" width="0.0185%" height="15" fill="rgb(215,120,22)" fg:x="5027" fg:w="1"/><text x="93.0504%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8004%" y="1125" width="0.0185%" height="15" fill="rgb(251,172,33)" fg:x="5027" fg:w="1"/><text x="93.0504%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8004%" y="1109" width="0.0185%" height="15" fill="rgb(250,83,2)" fg:x="5027" fg:w="1"/><text x="93.0504%" y="1119.50"></text></g><g><title>Flush (61 samples, 1.13%)</title><rect x="91.7113%" y="1365" width="1.1261%" height="15" fill="rgb(210,132,53)" fg:x="4968" fg:w="61"/><text x="91.9613%" y="1375.50"></text></g><g><title>FlushBuffer (61 samples, 1.13%)</title><rect x="91.7113%" y="1349" width="1.1261%" height="15" fill="rgb(221,208,36)" fg:x="4968" fg:w="61"/><text x="91.9613%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (59 samples, 1.09%)</title><rect x="91.7482%" y="1333" width="1.0892%" height="15" fill="rgb(205,192,46)" fg:x="4970" fg:w="59"/><text x="91.9982%" y="1343.50"></text></g><g><title>__GI___libc_write (59 samples, 1.09%)</title><rect x="91.7482%" y="1317" width="1.0892%" height="15" fill="rgb(223,163,14)" fg:x="4970" fg:w="59"/><text x="91.9982%" y="1327.50"></text></g><g><title>[unknown] (59 samples, 1.09%)</title><rect x="91.7482%" y="1301" width="1.0892%" height="15" fill="rgb(218,41,28)" fg:x="4970" fg:w="59"/><text x="91.9982%" y="1311.50"></text></g><g><title>[unknown] (59 samples, 1.09%)</title><rect x="91.7482%" y="1285" width="1.0892%" height="15" fill="rgb(235,104,10)" fg:x="4970" fg:w="59"/><text x="91.9982%" y="1295.50"></text></g><g><title>[unknown] (59 samples, 1.09%)</title><rect x="91.7482%" y="1269" width="1.0892%" height="15" fill="rgb(246,17,4)" fg:x="4970" fg:w="59"/><text x="91.9982%" y="1279.50"></text></g><g><title>[unknown] (58 samples, 1.07%)</title><rect x="91.7667%" y="1253" width="1.0707%" height="15" fill="rgb(240,7,16)" fg:x="4971" fg:w="58"/><text x="92.0167%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8189%" y="1237" width="0.0185%" height="15" fill="rgb(213,160,23)" fg:x="5028" fg:w="1"/><text x="93.0689%" y="1247.50"></text></g><g><title>Append (1 samples, 0.02%)</title><rect x="92.8374%" y="1333" width="0.0185%" height="15" fill="rgb(251,179,49)" fg:x="5029" fg:w="1"/><text x="93.0874%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="92.8374%" y="1317" width="0.0185%" height="15" fill="rgb(247,198,10)" fg:x="5029" fg:w="1"/><text x="93.0874%" y="1327.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="92.8374%" y="1301" width="0.0185%" height="15" fill="rgb(220,65,29)" fg:x="5029" fg:w="1"/><text x="93.0874%" y="1311.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="92.8558%" y="1333" width="0.0185%" height="15" fill="rgb(237,171,28)" fg:x="5030" fg:w="1"/><text x="93.1058%" y="1343.50"></text></g><g><title>crc32c::Extend (1 samples, 0.02%)</title><rect x="92.8743%" y="1317" width="0.0185%" height="15" fill="rgb(228,44,26)" fg:x="5031" fg:w="1"/><text x="93.1243%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Flush (65 samples, 1.20%)</title><rect x="91.7113%" y="1381" width="1.1999%" height="15" fill="rgb(216,210,27)" fg:x="4968" fg:w="65"/><text x="91.9613%" y="1391.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (4 samples, 0.07%)</title><rect x="92.8374%" y="1365" width="0.0738%" height="15" fill="rgb(252,10,17)" fg:x="5029" fg:w="4"/><text x="93.0874%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (4 samples, 0.07%)</title><rect x="92.8374%" y="1349" width="0.0738%" height="15" fill="rgb(214,172,30)" fg:x="5029" fg:w="4"/><text x="93.0874%" y="1359.50"></text></g><g><title>leveldb::crc32c::Value (2 samples, 0.04%)</title><rect x="92.8743%" y="1333" width="0.0369%" height="15" fill="rgb(253,130,48)" fg:x="5031" fg:w="2"/><text x="93.1243%" y="1343.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="92.8927%" y="1317" width="0.0185%" height="15" fill="rgb(226,99,43)" fg:x="5032" fg:w="1"/><text x="93.1427%" y="1327.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="92.8927%" y="1301" width="0.0185%" height="15" fill="rgb(239,111,26)" fg:x="5032" fg:w="1"/><text x="93.1427%" y="1311.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="92.9112%" y="1365" width="0.0185%" height="15" fill="rgb(240,27,53)" fg:x="5033" fg:w="1"/><text x="93.1612%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Add (181 samples, 3.34%)</title><rect x="89.6068%" y="1397" width="3.3413%" height="15" fill="rgb(254,163,12)" fg:x="4854" fg:w="181"/><text x="89.8568%" y="1407.50">lev..</text></g><g><title>leveldb::TableBuilder::ok (2 samples, 0.04%)</title><rect x="92.9112%" y="1381" width="0.0369%" height="15" fill="rgb(225,51,48)" fg:x="5033" fg:w="2"/><text x="93.1612%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="92.9297%" y="1365" width="0.0185%" height="15" fill="rgb(205,19,32)" fg:x="5034" fg:w="1"/><text x="93.1797%" y="1375.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="92.9297%" y="1349" width="0.0185%" height="15" fill="rgb(218,119,26)" fg:x="5034" fg:w="1"/><text x="93.1797%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="92.9481%" y="1397" width="0.0185%" height="15" fill="rgb(231,173,33)" fg:x="5035" fg:w="1"/><text x="93.1981%" y="1407.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (390 samples, 7.20%)</title><rect x="85.7855%" y="1413" width="7.1996%" height="15" fill="rgb(241,100,29)" fg:x="4647" fg:w="390"/><text x="86.0355%" y="1423.50">leveldb::D..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="92.9666%" y="1397" width="0.0185%" height="15" fill="rgb(250,194,34)" fg:x="5036" fg:w="1"/><text x="93.2166%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="92.9666%" y="1381" width="0.0185%" height="15" fill="rgb(215,23,50)" fg:x="5036" fg:w="1"/><text x="93.2166%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="92.9666%" y="1365" width="0.0185%" height="15" fill="rgb(206,49,37)" fg:x="5036" fg:w="1"/><text x="93.2166%" y="1375.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (415 samples, 7.66%)</title><rect x="85.3424%" y="1429" width="7.6611%" height="15" fill="rgb(247,39,21)" fg:x="4623" fg:w="415"/><text x="85.5924%" y="1439.50">leveldb::D..</text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="92.9850%" y="1413" width="0.0185%" height="15" fill="rgb(209,220,15)" fg:x="5037" fg:w="1"/><text x="93.2350%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (2 samples, 0.04%)</title><rect x="93.0035%" y="1397" width="0.0369%" height="15" fill="rgb(206,41,33)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1407.50"></text></g><g><title>__unlink (2 samples, 0.04%)</title><rect x="93.0035%" y="1381" width="0.0369%" height="15" fill="rgb(221,225,45)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1391.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.0035%" y="1365" width="0.0369%" height="15" fill="rgb(216,27,18)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1375.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.0035%" y="1349" width="0.0369%" height="15" fill="rgb(250,193,34)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1359.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.0035%" y="1333" width="0.0369%" height="15" fill="rgb(227,215,20)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1343.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.0035%" y="1317" width="0.0369%" height="15" fill="rgb(242,211,27)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1327.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.0035%" y="1301" width="0.0369%" height="15" fill="rgb(229,190,30)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1311.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="93.0035%" y="1285" width="0.0369%" height="15" fill="rgb(253,31,29)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1295.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.0035%" y="1269" width="0.0369%" height="15" fill="rgb(229,177,52)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.0035%" y="1253" width="0.0369%" height="15" fill="rgb(226,88,8)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.0035%" y="1237" width="0.0369%" height="15" fill="rgb(214,55,27)" fg:x="5038" fg:w="2"/><text x="93.2535%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0220%" y="1221" width="0.0185%" height="15" fill="rgb(233,202,5)" fg:x="5039" fg:w="1"/><text x="93.2720%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0220%" y="1205" width="0.0185%" height="15" fill="rgb(251,49,30)" fg:x="5039" fg:w="1"/><text x="93.2720%" y="1215.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (3 samples, 0.06%)</title><rect x="93.0035%" y="1413" width="0.0554%" height="15" fill="rgb(235,18,52)" fg:x="5038" fg:w="3"/><text x="93.2535%" y="1423.50"></text></g><g><title>leveldb::TableCache::Evict (1 samples, 0.02%)</title><rect x="93.0404%" y="1397" width="0.0185%" height="15" fill="rgb(250,111,51)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1407.50"></text></g><g><title>Erase (1 samples, 0.02%)</title><rect x="93.0404%" y="1381" width="0.0185%" height="15" fill="rgb(218,13,25)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (1 samples, 0.02%)</title><rect x="93.0404%" y="1365" width="0.0185%" height="15" fill="rgb(248,96,7)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (1 samples, 0.02%)</title><rect x="93.0404%" y="1349" width="0.0185%" height="15" fill="rgb(217,31,15)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (1 samples, 0.02%)</title><rect x="93.0404%" y="1333" width="0.0185%" height="15" fill="rgb(228,59,49)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1343.50"></text></g><g><title>leveldb::DeleteEntry (1 samples, 0.02%)</title><rect x="93.0404%" y="1317" width="0.0185%" height="15" fill="rgb(210,152,38)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1327.50"></text></g><g><title>~PosixMmapReadableFile (1 samples, 0.02%)</title><rect x="93.0404%" y="1301" width="0.0185%" height="15" fill="rgb(206,71,11)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (1 samples, 0.02%)</title><rect x="93.0404%" y="1285" width="0.0185%" height="15" fill="rgb(244,199,5)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1295.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="93.0404%" y="1269" width="0.0185%" height="15" fill="rgb(253,49,1)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0404%" y="1253" width="0.0185%" height="15" fill="rgb(225,206,40)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0404%" y="1237" width="0.0185%" height="15" fill="rgb(243,116,47)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0404%" y="1221" width="0.0185%" height="15" fill="rgb(219,225,16)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0404%" y="1205" width="0.0185%" height="15" fill="rgb(233,29,47)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0404%" y="1189" width="0.0185%" height="15" fill="rgb(250,179,18)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0404%" y="1173" width="0.0185%" height="15" fill="rgb(215,176,6)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0404%" y="1157" width="0.0185%" height="15" fill="rgb(214,117,39)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0404%" y="1141" width="0.0185%" height="15" fill="rgb(247,183,36)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0404%" y="1125" width="0.0185%" height="15" fill="rgb(237,200,3)" fg:x="5040" fg:w="1"/><text x="93.2904%" y="1135.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="93.0958%" y="1333" width="0.0185%" height="15" fill="rgb(212,220,24)" fg:x="5043" fg:w="1"/><text x="93.3458%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="93.0589%" y="1349" width="0.0738%" height="15" fill="rgb(245,216,20)" fg:x="5041" fg:w="4"/><text x="93.3089%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="93.1143%" y="1333" width="0.0185%" height="15" fill="rgb(219,124,7)" fg:x="5044" fg:w="1"/><text x="93.3643%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="93.1327%" y="1333" width="0.0185%" height="15" fill="rgb(227,167,8)" fg:x="5045" fg:w="1"/><text x="93.3827%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (6 samples, 0.11%)</title><rect x="93.0589%" y="1365" width="0.1108%" height="15" fill="rgb(241,37,2)" fg:x="5041" fg:w="6"/><text x="93.3089%" y="1375.50"></text></g><g><title>leveldb::PutVarint32 (2 samples, 0.04%)</title><rect x="93.1327%" y="1349" width="0.0369%" height="15" fill="rgb(238,134,33)" fg:x="5045" fg:w="2"/><text x="93.3827%" y="1359.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="93.1512%" y="1333" width="0.0185%" height="15" fill="rgb(248,48,27)" fg:x="5046" fg:w="1"/><text x="93.4012%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="93.1697%" y="1333" width="0.0185%" height="15" fill="rgb(212,14,16)" fg:x="5047" fg:w="1"/><text x="93.4197%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="93.1697%" y="1317" width="0.0185%" height="15" fill="rgb(217,205,37)" fg:x="5047" fg:w="1"/><text x="93.4197%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="93.1697%" y="1301" width="0.0185%" height="15" fill="rgb(233,185,47)" fg:x="5047" fg:w="1"/><text x="93.4197%" y="1311.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (2 samples, 0.04%)</title><rect x="93.1697%" y="1365" width="0.0369%" height="15" fill="rgb(244,88,8)" fg:x="5047" fg:w="2"/><text x="93.4197%" y="1375.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (2 samples, 0.04%)</title><rect x="93.1697%" y="1349" width="0.0369%" height="15" fill="rgb(213,0,20)" fg:x="5047" fg:w="2"/><text x="93.4197%" y="1359.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="93.1881%" y="1333" width="0.0185%" height="15" fill="rgb(238,159,36)" fg:x="5048" fg:w="1"/><text x="93.4381%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="93.2066%" y="1365" width="0.0185%" height="15" fill="rgb(253,173,17)" fg:x="5049" fg:w="1"/><text x="93.4566%" y="1375.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.02%)</title><rect x="93.2066%" y="1349" width="0.0185%" height="15" fill="rgb(221,23,28)" fg:x="5049" fg:w="1"/><text x="93.4566%" y="1359.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="93.2250%" y="1365" width="0.0185%" height="15" fill="rgb(218,113,15)" fg:x="5050" fg:w="1"/><text x="93.4750%" y="1375.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="93.2435%" y="1189" width="0.0185%" height="15" fill="rgb(233,58,3)" fg:x="5051" fg:w="1"/><text x="93.4935%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2435%" y="1173" width="0.0185%" height="15" fill="rgb(250,46,35)" fg:x="5051" fg:w="1"/><text x="93.4935%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2435%" y="1157" width="0.0185%" height="15" fill="rgb(210,169,11)" fg:x="5051" fg:w="1"/><text x="93.4935%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2435%" y="1141" width="0.0185%" height="15" fill="rgb(246,88,19)" fg:x="5051" fg:w="1"/><text x="93.4935%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2435%" y="1125" width="0.0185%" height="15" fill="rgb(206,81,49)" fg:x="5051" fg:w="1"/><text x="93.4935%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2435%" y="1109" width="0.0185%" height="15" fill="rgb(232,144,18)" fg:x="5051" fg:w="1"/><text x="93.4935%" y="1119.50"></text></g><g><title>__clone (443 samples, 8.18%)</title><rect x="85.1025%" y="1525" width="8.1780%" height="15" fill="rgb(235,2,27)" fg:x="4610" fg:w="443"/><text x="85.3525%" y="1535.50">__clone</text></g><g><title>start_thread (442 samples, 8.16%)</title><rect x="85.1209%" y="1509" width="8.1595%" height="15" fill="rgb(239,157,39)" fg:x="4611" fg:w="442"/><text x="85.3709%" y="1519.50">start_thread</text></g><g><title>execute_native_thread_routine (430 samples, 7.94%)</title><rect x="85.3424%" y="1493" width="7.9380%" height="15" fill="rgb(220,11,17)" fg:x="4623" fg:w="430"/><text x="85.5924%" y="1503.50">execute_nat..</text></g><g><title>BackgroundThreadEntryPoint (430 samples, 7.94%)</title><rect x="85.3424%" y="1477" width="7.9380%" height="15" fill="rgb(243,94,50)" fg:x="4623" fg:w="430"/><text x="85.5924%" y="1487.50">BackgroundT..</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (430 samples, 7.94%)</title><rect x="85.3424%" y="1461" width="7.9380%" height="15" fill="rgb(218,22,0)" fg:x="4623" fg:w="430"/><text x="85.5924%" y="1471.50">leveldb::(a..</text></g><g><title>leveldb::DBImpl::BackgroundCall (430 samples, 7.94%)</title><rect x="85.3424%" y="1445" width="7.9380%" height="15" fill="rgb(249,70,21)" fg:x="4623" fg:w="430"/><text x="85.5924%" y="1455.50">leveldb::DB..</text></g><g><title>leveldb::DBImpl::CompactMemTable (15 samples, 0.28%)</title><rect x="93.0035%" y="1429" width="0.2769%" height="15" fill="rgb(245,111,46)" fg:x="5038" fg:w="15"/><text x="93.2535%" y="1439.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (12 samples, 0.22%)</title><rect x="93.0589%" y="1413" width="0.2215%" height="15" fill="rgb(244,183,12)" fg:x="5041" fg:w="12"/><text x="93.3089%" y="1423.50"></text></g><g><title>leveldb::BuildTable (12 samples, 0.22%)</title><rect x="93.0589%" y="1397" width="0.2215%" height="15" fill="rgb(207,117,0)" fg:x="5041" fg:w="12"/><text x="93.3089%" y="1407.50"></text></g><g><title>leveldb::TableBuilder::Add (12 samples, 0.22%)</title><rect x="93.0589%" y="1381" width="0.2215%" height="15" fill="rgb(206,20,43)" fg:x="5041" fg:w="12"/><text x="93.3089%" y="1391.50"></text></g><g><title>leveldb::TableBuilder::Flush (2 samples, 0.04%)</title><rect x="93.2435%" y="1365" width="0.0369%" height="15" fill="rgb(221,104,11)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1375.50"></text></g><g><title>Flush (2 samples, 0.04%)</title><rect x="93.2435%" y="1349" width="0.0369%" height="15" fill="rgb(254,36,50)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1359.50"></text></g><g><title>FlushBuffer (2 samples, 0.04%)</title><rect x="93.2435%" y="1333" width="0.0369%" height="15" fill="rgb(252,17,15)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (2 samples, 0.04%)</title><rect x="93.2435%" y="1317" width="0.0369%" height="15" fill="rgb(219,129,43)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1327.50"></text></g><g><title>__GI___libc_write (2 samples, 0.04%)</title><rect x="93.2435%" y="1301" width="0.0369%" height="15" fill="rgb(205,34,45)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1311.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.2435%" y="1285" width="0.0369%" height="15" fill="rgb(251,201,32)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1295.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.2435%" y="1269" width="0.0369%" height="15" fill="rgb(205,56,0)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.2435%" y="1253" width="0.0369%" height="15" fill="rgb(211,193,27)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.2435%" y="1237" width="0.0369%" height="15" fill="rgb(231,100,42)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1247.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="93.2435%" y="1221" width="0.0369%" height="15" fill="rgb(245,85,27)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.2435%" y="1205" width="0.0369%" height="15" fill="rgb(241,76,24)" fg:x="5051" fg:w="2"/><text x="93.4935%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2620%" y="1189" width="0.0185%" height="15" fill="rgb(249,157,15)" fg:x="5052" fg:w="1"/><text x="93.5120%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2620%" y="1173" width="0.0185%" height="15" fill="rgb(222,218,25)" fg:x="5052" fg:w="1"/><text x="93.5120%" y="1183.50"></text></g><g><title>CompleteChainstateInitialization (1 samples, 0.02%)</title><rect x="93.2804%" y="1397" width="0.0185%" height="15" fill="rgb(252,156,52)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1407.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (1 samples, 0.02%)</title><rect x="93.2804%" y="1381" width="0.0185%" height="15" fill="rgb(211,185,7)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1391.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (1 samples, 0.02%)</title><rect x="93.2804%" y="1365" width="0.0185%" height="15" fill="rgb(234,108,24)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1375.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.02%)</title><rect x="93.2804%" y="1349" width="0.0185%" height="15" fill="rgb(227,218,2)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1359.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.02%)</title><rect x="93.2804%" y="1333" width="0.0185%" height="15" fill="rgb(224,0,36)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1343.50"></text></g><g><title>leveldb::DBImpl::Recover (1 samples, 0.02%)</title><rect x="93.2804%" y="1317" width="0.0185%" height="15" fill="rgb(233,201,10)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1327.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (1 samples, 0.02%)</title><rect x="93.2804%" y="1301" width="0.0185%" height="15" fill="rgb(252,209,14)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="93.2804%" y="1285" width="0.0185%" height="15" fill="rgb(205,93,49)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="93.2804%" y="1269" width="0.0185%" height="15" fill="rgb(234,116,45)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1 samples, 0.02%)</title><rect x="93.2804%" y="1253" width="0.0185%" height="15" fill="rgb(248,89,35)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1263.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="93.2804%" y="1237" width="0.0185%" height="15" fill="rgb(233,167,45)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1247.50"></text></g><g><title>std::allocator&lt;char&gt;::deallocate (1 samples, 0.02%)</title><rect x="93.2804%" y="1221" width="0.0185%" height="15" fill="rgb(248,228,14)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1231.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::deallocate (1 samples, 0.02%)</title><rect x="93.2804%" y="1205" width="0.0185%" height="15" fill="rgb(246,91,14)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="93.2804%" y="1189" width="0.0185%" height="15" fill="rgb(227,142,5)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1199.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="93.2804%" y="1173" width="0.0185%" height="15" fill="rgb(221,63,33)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2804%" y="1157" width="0.0185%" height="15" fill="rgb(233,49,0)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2804%" y="1141" width="0.0185%" height="15" fill="rgb(251,115,38)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2804%" y="1125" width="0.0185%" height="15" fill="rgb(231,214,32)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2804%" y="1109" width="0.0185%" height="15" fill="rgb(248,73,46)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2804%" y="1093" width="0.0185%" height="15" fill="rgb(237,156,4)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2804%" y="1077" width="0.0185%" height="15" fill="rgb(227,132,2)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2804%" y="1061" width="0.0185%" height="15" fill="rgb(248,161,9)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2804%" y="1045" width="0.0185%" height="15" fill="rgb(238,77,38)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2804%" y="1029" width="0.0185%" height="15" fill="rgb(222,166,40)" fg:x="5053" fg:w="1"/><text x="93.5304%" y="1039.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="93.2989%" y="1301" width="0.0185%" height="15" fill="rgb(214,168,45)" fg:x="5054" fg:w="1"/><text x="93.5489%" y="1311.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="93.3173%" y="1301" width="0.0185%" height="15" fill="rgb(226,64,37)" fg:x="5055" fg:w="1"/><text x="93.5673%" y="1311.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (3 samples, 0.06%)</title><rect x="93.3358%" y="1301" width="0.0554%" height="15" fill="rgb(232,210,43)" fg:x="5056" fg:w="3"/><text x="93.5858%" y="1311.50"></text></g><g><title>CheckProofOfWorkImpl (6 samples, 0.11%)</title><rect x="93.2989%" y="1317" width="0.1108%" height="15" fill="rgb(214,76,33)" fg:x="5054" fg:w="6"/><text x="93.5489%" y="1327.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="93.3912%" y="1301" width="0.0185%" height="15" fill="rgb(210,78,5)" fg:x="5059" fg:w="1"/><text x="93.6412%" y="1311.50"></text></g><g><title>__libc_start_call_main (8 samples, 0.15%)</title><rect x="93.2804%" y="1525" width="0.1477%" height="15" fill="rgb(211,107,37)" fg:x="5053" fg:w="8"/><text x="93.5304%" y="1535.50"></text></g><g><title>main (8 samples, 0.15%)</title><rect x="93.2804%" y="1509" width="0.1477%" height="15" fill="rgb(249,67,16)" fg:x="5053" fg:w="8"/><text x="93.5304%" y="1519.50"></text></g><g><title>main (8 samples, 0.15%)</title><rect x="93.2804%" y="1493" width="0.1477%" height="15" fill="rgb(222,114,31)" fg:x="5053" fg:w="8"/><text x="93.5304%" y="1503.50"></text></g><g><title>AppInitMain (8 samples, 0.15%)</title><rect x="93.2804%" y="1477" width="0.1477%" height="15" fill="rgb(242,118,19)" fg:x="5053" fg:w="8"/><text x="93.5304%" y="1487.50"></text></g><g><title>InitAndLoadChainstate (8 samples, 0.15%)</title><rect x="93.2804%" y="1461" width="0.1477%" height="15" fill="rgb(223,115,1)" fg:x="5053" fg:w="8"/><text x="93.5304%" y="1471.50"></text></g><g><title>operator (8 samples, 0.15%)</title><rect x="93.2804%" y="1445" width="0.1477%" height="15" fill="rgb(241,182,54)" fg:x="5053" fg:w="8"/><text x="93.5304%" y="1455.50"></text></g><g><title>InitAndLoadChainstate (8 samples, 0.15%)</title><rect x="93.2804%" y="1429" width="0.1477%" height="15" fill="rgb(244,166,36)" fg:x="5053" fg:w="8"/><text x="93.5304%" y="1439.50"></text></g><g><title>node::LoadChainstate (8 samples, 0.15%)</title><rect x="93.2804%" y="1413" width="0.1477%" height="15" fill="rgb(241,52,43)" fg:x="5053" fg:w="8"/><text x="93.5304%" y="1423.50"></text></g><g><title>node::CompleteChainstateInitialization (7 samples, 0.13%)</title><rect x="93.2989%" y="1397" width="0.1292%" height="15" fill="rgb(236,82,9)" fg:x="5054" fg:w="7"/><text x="93.5489%" y="1407.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (7 samples, 0.13%)</title><rect x="93.2989%" y="1381" width="0.1292%" height="15" fill="rgb(241,119,0)" fg:x="5054" fg:w="7"/><text x="93.5489%" y="1391.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (7 samples, 0.13%)</title><rect x="93.2989%" y="1365" width="0.1292%" height="15" fill="rgb(221,19,22)" fg:x="5054" fg:w="7"/><text x="93.5489%" y="1375.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (7 samples, 0.13%)</title><rect x="93.2989%" y="1349" width="0.1292%" height="15" fill="rgb(254,144,35)" fg:x="5054" fg:w="7"/><text x="93.5489%" y="1359.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (7 samples, 0.13%)</title><rect x="93.2989%" y="1333" width="0.1292%" height="15" fill="rgb(246,132,30)" fg:x="5054" fg:w="7"/><text x="93.5489%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.02%)</title><rect x="93.4096%" y="1317" width="0.0185%" height="15" fill="rgb(234,69,28)" fg:x="5060" fg:w="1"/><text x="93.6596%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="93.4096%" y="1301" width="0.0185%" height="15" fill="rgb(219,106,47)" fg:x="5060" fg:w="1"/><text x="93.6596%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="93.4096%" y="1285" width="0.0185%" height="15" fill="rgb(218,79,24)" fg:x="5060" fg:w="1"/><text x="93.6596%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="93.4096%" y="1269" width="0.0185%" height="15" fill="rgb(225,26,21)" fg:x="5060" fg:w="1"/><text x="93.6596%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="93.4096%" y="1253" width="0.0185%" height="15" fill="rgb(217,68,49)" fg:x="5060" fg:w="1"/><text x="93.6596%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="93.4096%" y="1237" width="0.0185%" height="15" fill="rgb(220,204,28)" fg:x="5060" fg:w="1"/><text x="93.6596%" y="1247.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (5 samples, 0.09%)</title><rect x="93.4281%" y="1301" width="0.0923%" height="15" fill="rgb(237,208,43)" fg:x="5061" fg:w="5"/><text x="93.6781%" y="1311.50"></text></g><g><title>CBlockHeader::GetHash (5 samples, 0.09%)</title><rect x="93.4281%" y="1285" width="0.0923%" height="15" fill="rgb(213,97,42)" fg:x="5061" fg:w="5"/><text x="93.6781%" y="1295.50"></text></g><g><title>HashWriter::GetHash (5 samples, 0.09%)</title><rect x="93.4281%" y="1269" width="0.0923%" height="15" fill="rgb(238,96,52)" fg:x="5061" fg:w="5"/><text x="93.6781%" y="1279.50"></text></g><g><title>CSHA256::Finalize (5 samples, 0.09%)</title><rect x="93.4281%" y="1253" width="0.0923%" height="15" fill="rgb(228,14,13)" fg:x="5061" fg:w="5"/><text x="93.6781%" y="1263.50"></text></g><g><title>CSHA256::Write (5 samples, 0.09%)</title><rect x="93.4281%" y="1237" width="0.0923%" height="15" fill="rgb(219,123,13)" fg:x="5061" fg:w="5"/><text x="93.6781%" y="1247.50"></text></g><g><title>CSHA256::Write (5 samples, 0.09%)</title><rect x="93.4281%" y="1221" width="0.0923%" height="15" fill="rgb(216,144,17)" fg:x="5061" fg:w="5"/><text x="93.6781%" y="1231.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="93.5019%" y="1205" width="0.0185%" height="15" fill="rgb(230,228,29)" fg:x="5065" fg:w="1"/><text x="93.7519%" y="1215.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="93.5204%" y="1253" width="0.0185%" height="15" fill="rgb(233,18,5)" fg:x="5066" fg:w="1"/><text x="93.7704%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="93.5204%" y="1237" width="0.0185%" height="15" fill="rgb(233,197,12)" fg:x="5066" fg:w="1"/><text x="93.7704%" y="1247.50"></text></g><g><title>UintToArith256 (1 samples, 0.02%)</title><rect x="93.5204%" y="1221" width="0.0185%" height="15" fill="rgb(234,140,29)" fg:x="5066" fg:w="1"/><text x="93.7704%" y="1231.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (7 samples, 0.13%)</title><rect x="93.4281%" y="1525" width="0.1292%" height="15" fill="rgb(233,113,19)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1535.50"></text></g><g><title>__libc_start_call_main (7 samples, 0.13%)</title><rect x="93.4281%" y="1509" width="0.1292%" height="15" fill="rgb(246,209,13)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1519.50"></text></g><g><title>main (7 samples, 0.13%)</title><rect x="93.4281%" y="1493" width="0.1292%" height="15" fill="rgb(242,79,54)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1503.50"></text></g><g><title>main (7 samples, 0.13%)</title><rect x="93.4281%" y="1477" width="0.1292%" height="15" fill="rgb(219,73,16)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1487.50"></text></g><g><title>AppInitMain (7 samples, 0.13%)</title><rect x="93.4281%" y="1461" width="0.1292%" height="15" fill="rgb(224,52,10)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1471.50"></text></g><g><title>InitAndLoadChainstate (7 samples, 0.13%)</title><rect x="93.4281%" y="1445" width="0.1292%" height="15" fill="rgb(237,179,5)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1455.50"></text></g><g><title>operator (7 samples, 0.13%)</title><rect x="93.4281%" y="1429" width="0.1292%" height="15" fill="rgb(231,20,6)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1439.50"></text></g><g><title>InitAndLoadChainstate (7 samples, 0.13%)</title><rect x="93.4281%" y="1413" width="0.1292%" height="15" fill="rgb(253,171,45)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1423.50"></text></g><g><title>node::LoadChainstate (7 samples, 0.13%)</title><rect x="93.4281%" y="1397" width="0.1292%" height="15" fill="rgb(230,75,49)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1407.50"></text></g><g><title>node::CompleteChainstateInitialization (7 samples, 0.13%)</title><rect x="93.4281%" y="1381" width="0.1292%" height="15" fill="rgb(216,83,46)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1391.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (7 samples, 0.13%)</title><rect x="93.4281%" y="1365" width="0.1292%" height="15" fill="rgb(236,56,9)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1375.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (7 samples, 0.13%)</title><rect x="93.4281%" y="1349" width="0.1292%" height="15" fill="rgb(215,28,34)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1359.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (7 samples, 0.13%)</title><rect x="93.4281%" y="1333" width="0.1292%" height="15" fill="rgb(230,222,20)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1343.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (7 samples, 0.13%)</title><rect x="93.4281%" y="1317" width="0.1292%" height="15" fill="rgb(235,209,51)" fg:x="5061" fg:w="7"/><text x="93.6781%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (2 samples, 0.04%)</title><rect x="93.5204%" y="1301" width="0.0369%" height="15" fill="rgb(235,167,1)" fg:x="5066" fg:w="2"/><text x="93.7704%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (2 samples, 0.04%)</title><rect x="93.5204%" y="1285" width="0.0369%" height="15" fill="rgb(248,220,0)" fg:x="5066" fg:w="2"/><text x="93.7704%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.04%)</title><rect x="93.5204%" y="1269" width="0.0369%" height="15" fill="rgb(239,0,18)" fg:x="5066" fg:w="2"/><text x="93.7704%" y="1279.50"></text></g><g><title>SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="93.5389%" y="1253" width="0.0185%" height="15" fill="rgb(229,179,11)" fg:x="5067" fg:w="1"/><text x="93.7889%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="93.5389%" y="1237" width="0.0185%" height="15" fill="rgb(226,116,53)" fg:x="5067" fg:w="1"/><text x="93.7889%" y="1247.50"></text></g><g><title>[bitcoind-base] (1 samples, 0.02%)</title><rect x="93.5389%" y="1221" width="0.0185%" height="15" fill="rgb(218,1,49)" fg:x="5067" fg:w="1"/><text x="93.7889%" y="1231.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="93.5389%" y="1205" width="0.0185%" height="15" fill="rgb(208,184,47)" fg:x="5067" fg:w="1"/><text x="93.7889%" y="1215.50"></text></g><g><title>__printf_buffer (1 samples, 0.02%)</title><rect x="93.5573%" y="1525" width="0.0185%" height="15" fill="rgb(238,174,3)" fg:x="5068" fg:w="1"/><text x="93.8073%" y="1535.50"></text></g><g><title>AppInit (14 samples, 0.26%)</title><rect x="93.5758%" y="1461" width="0.2584%" height="15" fill="rgb(247,188,6)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1471.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::Context&gt;::__single_object std::make_unique&lt;kernel::Context&gt; (14 samples, 0.26%)</title><rect x="93.5758%" y="1445" width="0.2584%" height="15" fill="rgb(211,165,46)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1455.50"></text></g><g><title>kernel::Context::Context (14 samples, 0.26%)</title><rect x="93.5758%" y="1429" width="0.2584%" height="15" fill="rgb(222,190,10)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1439.50"></text></g><g><title>call_once&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (14 samples, 0.26%)</title><rect x="93.5758%" y="1413" width="0.2584%" height="15" fill="rgb(206,185,3)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1423.50"></text></g><g><title>kernel::Context::Context (14 samples, 0.26%)</title><rect x="93.5758%" y="1397" width="0.2584%" height="15" fill="rgb(244,125,37)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1407.50"></text></g><g><title>__pthread_once_slow (14 samples, 0.26%)</title><rect x="93.5758%" y="1381" width="0.2584%" height="15" fill="rgb(211,43,7)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1391.50"></text></g><g><title>_FUN (14 samples, 0.26%)</title><rect x="93.5758%" y="1365" width="0.2584%" height="15" fill="rgb(250,41,42)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1375.50"></text></g><g><title>operator (14 samples, 0.26%)</title><rect x="93.5758%" y="1349" width="0.2584%" height="15" fill="rgb(254,54,42)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1359.50"></text></g><g><title>operator (14 samples, 0.26%)</title><rect x="93.5758%" y="1333" width="0.2584%" height="15" fill="rgb(213,71,43)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1343.50"></text></g><g><title>__invoke&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (14 samples, 0.26%)</title><rect x="93.5758%" y="1317" width="0.2584%" height="15" fill="rgb(249,3,44)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1327.50"></text></g><g><title>__invoke_impl&lt;void, kernel::Context::Context()::&lt;lambda()&gt; &gt; (14 samples, 0.26%)</title><rect x="93.5758%" y="1301" width="0.2584%" height="15" fill="rgb(229,80,41)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1311.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;kernel::Context::Context()::{lambda()#1}&gt;(std::once_flag&amp;, kernel::Context::Context()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (14 samples, 0.26%)</title><rect x="93.5758%" y="1285" width="0.2584%" height="15" fill="rgb(231,25,28)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1295.50"></text></g><g><title>RandomInit (14 samples, 0.26%)</title><rect x="93.5758%" y="1269" width="0.2584%" height="15" fill="rgb(208,79,48)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1279.50"></text></g><g><title>CSHA512::Finalize (14 samples, 0.26%)</title><rect x="93.5758%" y="1253" width="0.2584%" height="15" fill="rgb(207,196,38)" fg:x="5069" fg:w="14"/><text x="93.8258%" y="1263.50"></text></g><g><title>CSHA512::Write (13 samples, 0.24%)</title><rect x="93.5942%" y="1237" width="0.2400%" height="15" fill="rgb(228,105,49)" fg:x="5070" fg:w="13"/><text x="93.8442%" y="1247.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="93.7050%" y="1221" width="0.1292%" height="15" fill="rgb(237,99,15)" fg:x="5076" fg:w="7"/><text x="93.9550%" y="1231.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="93.7050%" y="1205" width="0.1292%" height="15" fill="rgb(224,207,46)" fg:x="5076" fg:w="7"/><text x="93.9550%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="93.7050%" y="1189" width="0.1292%" height="15" fill="rgb(249,117,50)" fg:x="5076" fg:w="7"/><text x="93.9550%" y="1199.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1173" width="0.1108%" height="15" fill="rgb(248,17,13)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1183.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1157" width="0.1108%" height="15" fill="rgb(228,187,36)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1141" width="0.1108%" height="15" fill="rgb(234,132,20)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1125" width="0.1108%" height="15" fill="rgb(209,170,46)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1109" width="0.1108%" height="15" fill="rgb(237,23,19)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1093" width="0.1108%" height="15" fill="rgb(227,21,26)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1077" width="0.1108%" height="15" fill="rgb(222,220,48)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1061" width="0.1108%" height="15" fill="rgb(214,9,16)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1071.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1045" width="0.1108%" height="15" fill="rgb(209,73,30)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1029" width="0.1108%" height="15" fill="rgb(207,20,33)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="1013" width="0.1108%" height="15" fill="rgb(219,153,12)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1023.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="997" width="0.1108%" height="15" fill="rgb(235,97,25)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="1007.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="981" width="0.1108%" height="15" fill="rgb(244,30,34)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.7235%" y="965" width="0.1108%" height="15" fill="rgb(214,106,45)" fg:x="5077" fg:w="6"/><text x="93.9735%" y="975.50"></text></g><g><title>CompleteChainstateInitialization (1 samples, 0.02%)</title><rect x="93.8342%" y="1365" width="0.0185%" height="15" fill="rgb(226,41,9)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1375.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (1 samples, 0.02%)</title><rect x="93.8342%" y="1349" width="0.0185%" height="15" fill="rgb(253,139,29)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1359.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (1 samples, 0.02%)</title><rect x="93.8342%" y="1333" width="0.0185%" height="15" fill="rgb(213,205,39)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1343.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.02%)</title><rect x="93.8342%" y="1317" width="0.0185%" height="15" fill="rgb(209,27,10)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1327.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.02%)</title><rect x="93.8342%" y="1301" width="0.0185%" height="15" fill="rgb(249,142,16)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1311.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (1 samples, 0.02%)</title><rect x="93.8342%" y="1285" width="0.0185%" height="15" fill="rgb(242,65,12)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (1 samples, 0.02%)</title><rect x="93.8342%" y="1269" width="0.0185%" height="15" fill="rgb(232,48,10)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1279.50"></text></g><g><title>__unlink (1 samples, 0.02%)</title><rect x="93.8342%" y="1253" width="0.0185%" height="15" fill="rgb(253,67,19)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8342%" y="1237" width="0.0185%" height="15" fill="rgb(227,93,29)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8342%" y="1221" width="0.0185%" height="15" fill="rgb(226,189,53)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8342%" y="1205" width="0.0185%" height="15" fill="rgb(223,224,1)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8342%" y="1189" width="0.0185%" height="15" fill="rgb(221,84,32)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8342%" y="1173" width="0.0185%" height="15" fill="rgb(214,189,28)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="93.8342%" y="1157" width="0.0185%" height="15" fill="rgb(234,7,52)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8342%" y="1141" width="0.0185%" height="15" fill="rgb(249,73,31)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8342%" y="1125" width="0.0185%" height="15" fill="rgb(253,153,41)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8342%" y="1109" width="0.0185%" height="15" fill="rgb(249,52,34)" fg:x="5083" fg:w="1"/><text x="94.0842%" y="1119.50"></text></g><g><title>Chainstate::LoadChainTip (6 samples, 0.11%)</title><rect x="93.8527%" y="1349" width="0.1108%" height="15" fill="rgb(236,177,47)" fg:x="5084" fg:w="6"/><text x="94.1027%" y="1359.50"></text></g><g><title>CChain::SetTip (6 samples, 0.11%)</title><rect x="93.8527%" y="1333" width="0.1108%" height="15" fill="rgb(252,185,45)" fg:x="5084" fg:w="6"/><text x="94.1027%" y="1343.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="93.9450%" y="1317" width="0.0185%" height="15" fill="rgb(251,15,30)" fg:x="5089" fg:w="1"/><text x="94.1950%" y="1327.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="93.9634%" y="1333" width="0.0185%" height="15" fill="rgb(233,31,4)" fg:x="5090" fg:w="1"/><text x="94.2134%" y="1343.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (1 samples, 0.02%)</title><rect x="93.9819%" y="1317" width="0.0185%" height="15" fill="rgb(254,44,24)" fg:x="5091" fg:w="1"/><text x="94.2319%" y="1327.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (1 samples, 0.02%)</title><rect x="93.9819%" y="1301" width="0.0185%" height="15" fill="rgb(218,54,1)" fg:x="5091" fg:w="1"/><text x="94.2319%" y="1311.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.02%)</title><rect x="93.9819%" y="1285" width="0.0185%" height="15" fill="rgb(243,209,39)" fg:x="5091" fg:w="1"/><text x="94.2319%" y="1295.50"></text></g><g><title>std::tuple_element&lt;1ul, std::pair&lt;uint256 const, CBlockIndex&gt; &gt;::type&amp; std::get&lt;1ul, uint256 const, CBlockIndex&gt; (2 samples, 0.04%)</title><rect x="94.0004%" y="1317" width="0.0369%" height="15" fill="rgb(206,75,33)" fg:x="5092" fg:w="2"/><text x="94.2504%" y="1327.50"></text></g><g><title>CBlockIndex&amp; std::__pair_get&lt;1ul&gt;::__get&lt;uint256 const, CBlockIndex&gt; (2 samples, 0.04%)</title><rect x="94.0004%" y="1301" width="0.0369%" height="15" fill="rgb(223,108,18)" fg:x="5092" fg:w="2"/><text x="94.2504%" y="1311.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (7 samples, 0.13%)</title><rect x="93.9819%" y="1333" width="0.1292%" height="15" fill="rgb(244,89,31)" fg:x="5091" fg:w="7"/><text x="94.2319%" y="1343.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (4 samples, 0.07%)</title><rect x="94.0373%" y="1317" width="0.0738%" height="15" fill="rgb(222,167,27)" fg:x="5094" fg:w="4"/><text x="94.2873%" y="1327.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (4 samples, 0.07%)</title><rect x="94.0373%" y="1301" width="0.0738%" height="15" fill="rgb(247,41,16)" fg:x="5094" fg:w="4"/><text x="94.2873%" y="1311.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CBlockIndex*&gt; &gt;::construct&lt;CBlockIndex*, CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.0927%" y="1285" width="0.0185%" height="15" fill="rgb(233,168,40)" fg:x="5097" fg:w="1"/><text x="94.3427%" y="1295.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="94.0927%" y="1269" width="0.0185%" height="15" fill="rgb(205,211,8)" fg:x="5097" fg:w="1"/><text x="94.3427%" y="1279.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.02%)</title><rect x="94.2034%" y="1317" width="0.0185%" height="15" fill="rgb(238,105,11)" fg:x="5103" fg:w="1"/><text x="94.4534%" y="1327.50"></text></g><g><title>GetSkipHeight (1 samples, 0.02%)</title><rect x="94.2034%" y="1301" width="0.0185%" height="15" fill="rgb(223,142,52)" fg:x="5103" fg:w="1"/><text x="94.4534%" y="1311.50"></text></g><g><title>GetSkipHeight (1 samples, 0.02%)</title><rect x="94.2034%" y="1285" width="0.0185%" height="15" fill="rgb(238,51,33)" fg:x="5103" fg:w="1"/><text x="94.4534%" y="1295.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.02%)</title><rect x="94.2034%" y="1269" width="0.0185%" height="15" fill="rgb(231,188,43)" fg:x="5103" fg:w="1"/><text x="94.4534%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.02%)</title><rect x="94.2219%" y="1317" width="0.0185%" height="15" fill="rgb(216,92,17)" fg:x="5104" fg:w="1"/><text x="94.4719%" y="1327.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="94.2404%" y="1317" width="0.0185%" height="15" fill="rgb(228,2,40)" fg:x="5105" fg:w="1"/><text x="94.4904%" y="1327.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (3 samples, 0.06%)</title><rect x="94.3142%" y="1237" width="0.0554%" height="15" fill="rgb(226,73,15)" fg:x="5109" fg:w="3"/><text x="94.5642%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (8 samples, 0.15%)</title><rect x="94.3142%" y="1253" width="0.1477%" height="15" fill="rgb(227,66,46)" fg:x="5109" fg:w="8"/><text x="94.5642%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator- (5 samples, 0.09%)</title><rect x="94.3696%" y="1237" width="0.0923%" height="15" fill="rgb(209,71,6)" fg:x="5112" fg:w="5"/><text x="94.6196%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator++ (2 samples, 0.04%)</title><rect x="94.4250%" y="1221" width="0.0369%" height="15" fill="rgb(246,100,25)" fg:x="5115" fg:w="2"/><text x="94.6750%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (2 samples, 0.04%)</title><rect x="94.4803%" y="1237" width="0.0369%" height="15" fill="rgb(248,185,27)" fg:x="5118" fg:w="2"/><text x="94.7303%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (2 samples, 0.04%)</title><rect x="94.4803%" y="1221" width="0.0369%" height="15" fill="rgb(225,118,47)" fg:x="5118" fg:w="2"/><text x="94.7303%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (7 samples, 0.13%)</title><rect x="94.4619%" y="1253" width="0.1292%" height="15" fill="rgb(220,185,44)" fg:x="5117" fg:w="7"/><text x="94.7119%" y="1263.50"></text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (4 samples, 0.07%)</title><rect x="94.5173%" y="1237" width="0.0738%" height="15" fill="rgb(227,95,24)" fg:x="5120" fg:w="4"/><text x="94.7673%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (4 samples, 0.07%)</title><rect x="94.5173%" y="1221" width="0.0738%" height="15" fill="rgb(252,84,24)" fg:x="5120" fg:w="4"/><text x="94.7673%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (4 samples, 0.07%)</title><rect x="94.5911%" y="1253" width="0.0738%" height="15" fill="rgb(240,34,44)" fg:x="5124" fg:w="4"/><text x="94.8411%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (1 samples, 0.02%)</title><rect x="94.6465%" y="1237" width="0.0185%" height="15" fill="rgb(209,72,54)" fg:x="5127" fg:w="1"/><text x="94.8965%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (29 samples, 0.54%)</title><rect x="94.6649%" y="1253" width="0.5354%" height="15" fill="rgb(226,19,45)" fg:x="5128" fg:w="29"/><text x="94.9149%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.1265%" y="1237" width="0.0738%" height="15" fill="rgb(246,7,45)" fg:x="5153" fg:w="4"/><text x="95.3765%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.1265%" y="1221" width="0.0738%" height="15" fill="rgb(225,45,2)" fg:x="5153" fg:w="4"/><text x="95.3765%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.1265%" y="1205" width="0.0738%" height="15" fill="rgb(221,80,29)" fg:x="5153" fg:w="4"/><text x="95.3765%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.1265%" y="1189" width="0.0738%" height="15" fill="rgb(228,11,19)" fg:x="5153" fg:w="4"/><text x="95.3765%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.1265%" y="1173" width="0.0738%" height="15" fill="rgb(243,17,21)" fg:x="5153" fg:w="4"/><text x="95.3765%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.1265%" y="1157" width="0.0738%" height="15" fill="rgb(243,88,8)" fg:x="5153" fg:w="4"/><text x="95.3765%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="95.1449%" y="1141" width="0.0554%" height="15" fill="rgb(214,17,9)" fg:x="5154" fg:w="3"/><text x="95.3949%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="95.1449%" y="1125" width="0.0554%" height="15" fill="rgb(232,169,15)" fg:x="5154" fg:w="3"/><text x="95.3949%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="95.1449%" y="1109" width="0.0554%" height="15" fill="rgb(232,86,53)" fg:x="5154" fg:w="3"/><text x="95.3949%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="95.1449%" y="1093" width="0.0554%" height="15" fill="rgb(222,100,4)" fg:x="5154" fg:w="3"/><text x="95.3949%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="95.1449%" y="1077" width="0.0554%" height="15" fill="rgb(253,151,38)" fg:x="5154" fg:w="3"/><text x="95.3949%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="95.1449%" y="1061" width="0.0554%" height="15" fill="rgb(238,215,29)" fg:x="5154" fg:w="3"/><text x="95.3949%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="95.1449%" y="1045" width="0.0554%" height="15" fill="rgb(205,128,53)" fg:x="5154" fg:w="3"/><text x="95.3949%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="95.1449%" y="1029" width="0.0554%" height="15" fill="rgb(248,183,14)" fg:x="5154" fg:w="3"/><text x="95.3949%" y="1039.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (50 samples, 0.92%)</title><rect x="94.2957%" y="1269" width="0.9230%" height="15" fill="rgb(244,172,35)" fg:x="5108" fg:w="50"/><text x="94.5457%" y="1279.50"></text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.02%)</title><rect x="95.2003%" y="1253" width="0.0185%" height="15" fill="rgb(234,93,19)" fg:x="5157" fg:w="1"/><text x="95.4503%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="95.2003%" y="1237" width="0.0185%" height="15" fill="rgb(227,109,7)" fg:x="5157" fg:w="1"/><text x="95.4503%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (3 samples, 0.06%)</title><rect x="95.2188%" y="1269" width="0.0554%" height="15" fill="rgb(233,136,54)" fg:x="5158" fg:w="3"/><text x="95.4688%" y="1279.50"></text></g><g><title>GetBlockProof (77 samples, 1.42%)</title><rect x="94.2957%" y="1301" width="1.4215%" height="15" fill="rgb(233,19,40)" fg:x="5108" fg:w="77"/><text x="94.5457%" y="1311.50"></text></g><g><title>operator/ (77 samples, 1.42%)</title><rect x="94.2957%" y="1285" width="1.4215%" height="15" fill="rgb(247,41,18)" fg:x="5108" fg:w="77"/><text x="94.5457%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (24 samples, 0.44%)</title><rect x="95.2741%" y="1269" width="0.4430%" height="15" fill="rgb(220,34,34)" fg:x="5161" fg:w="24"/><text x="95.5241%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (1 samples, 0.02%)</title><rect x="95.6987%" y="1253" width="0.0185%" height="15" fill="rgb(222,135,32)" fg:x="5184" fg:w="1"/><text x="95.9487%" y="1263.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="95.7172%" y="1301" width="0.0185%" height="15" fill="rgb(214,80,19)" fg:x="5185" fg:w="1"/><text x="95.9672%" y="1311.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (5 samples, 0.09%)</title><rect x="95.7356%" y="1301" width="0.0923%" height="15" fill="rgb(234,54,46)" fg:x="5186" fg:w="5"/><text x="95.9856%" y="1311.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (2 samples, 0.04%)</title><rect x="95.7910%" y="1285" width="0.0369%" height="15" fill="rgb(251,48,23)" fg:x="5189" fg:w="2"/><text x="96.0410%" y="1295.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="95.8649%" y="1077" width="0.0369%" height="15" fill="rgb(254,109,52)" fg:x="5193" fg:w="2"/><text x="96.1149%" y="1087.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="95.8649%" y="1061" width="0.0369%" height="15" fill="rgb(240,186,19)" fg:x="5193" fg:w="2"/><text x="96.1149%" y="1071.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (4 samples, 0.07%)</title><rect x="95.8464%" y="1253" width="0.0738%" height="15" fill="rgb(246,187,17)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1263.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (4 samples, 0.07%)</title><rect x="95.8464%" y="1237" width="0.0738%" height="15" fill="rgb(212,21,5)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1247.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="95.8464%" y="1221" width="0.0738%" height="15" fill="rgb(225,185,18)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1231.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="95.8464%" y="1205" width="0.0738%" height="15" fill="rgb(245,114,17)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1215.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="95.8464%" y="1189" width="0.0738%" height="15" fill="rgb(223,164,24)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1199.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (4 samples, 0.07%)</title><rect x="95.8464%" y="1173" width="0.0738%" height="15" fill="rgb(211,228,3)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1183.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (4 samples, 0.07%)</title><rect x="95.8464%" y="1157" width="0.0738%" height="15" fill="rgb(223,16,38)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1167.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="95.8464%" y="1141" width="0.0738%" height="15" fill="rgb(207,31,54)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1151.50"></text></g><g><title>void ser_writedata32&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="95.8464%" y="1125" width="0.0738%" height="15" fill="rgb(220,39,11)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1135.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="95.8464%" y="1109" width="0.0738%" height="15" fill="rgb(235,185,0)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1119.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="95.8464%" y="1093" width="0.0738%" height="15" fill="rgb(249,39,18)" fg:x="5192" fg:w="4"/><text x="96.0964%" y="1103.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="95.9018%" y="1077" width="0.0185%" height="15" fill="rgb(240,110,33)" fg:x="5195" fg:w="1"/><text x="96.1518%" y="1087.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="95.9018%" y="1061" width="0.0185%" height="15" fill="rgb(210,92,42)" fg:x="5195" fg:w="1"/><text x="96.1518%" y="1071.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="95.9018%" y="1045" width="0.0185%" height="15" fill="rgb(218,215,28)" fg:x="5195" fg:w="1"/><text x="96.1518%" y="1055.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="95.9203%" y="1221" width="0.0185%" height="15" fill="rgb(238,215,36)" fg:x="5196" fg:w="1"/><text x="96.1703%" y="1231.50"></text></g><g><title>CSHA256::Finalize (3 samples, 0.06%)</title><rect x="95.9203%" y="1237" width="0.0554%" height="15" fill="rgb(220,31,10)" fg:x="5196" fg:w="3"/><text x="96.1703%" y="1247.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="95.9387%" y="1221" width="0.0369%" height="15" fill="rgb(212,93,14)" fg:x="5197" fg:w="2"/><text x="96.1887%" y="1231.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="95.9387%" y="1205" width="0.0369%" height="15" fill="rgb(254,207,2)" fg:x="5197" fg:w="2"/><text x="96.1887%" y="1215.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="95.9387%" y="1189" width="0.0369%" height="15" fill="rgb(205,57,44)" fg:x="5197" fg:w="2"/><text x="96.1887%" y="1199.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="95.9387%" y="1173" width="0.0369%" height="15" fill="rgb(226,151,19)" fg:x="5197" fg:w="2"/><text x="96.1887%" y="1183.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="95.9756%" y="1237" width="0.0185%" height="15" fill="rgb(230,72,30)" fg:x="5199" fg:w="1"/><text x="96.2256%" y="1247.50"></text></g><g><title>CBlockHeader::GetHash (10 samples, 0.18%)</title><rect x="95.8464%" y="1269" width="0.1846%" height="15" fill="rgb(244,0,8)" fg:x="5192" fg:w="10"/><text x="96.0964%" y="1279.50"></text></g><g><title>HashWriter::GetHash (6 samples, 0.11%)</title><rect x="95.9203%" y="1253" width="0.1108%" height="15" fill="rgb(230,192,6)" fg:x="5196" fg:w="6"/><text x="96.1703%" y="1263.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="95.9941%" y="1237" width="0.0369%" height="15" fill="rgb(233,207,13)" fg:x="5200" fg:w="2"/><text x="96.2441%" y="1247.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="95.9941%" y="1221" width="0.0369%" height="15" fill="rgb(206,227,7)" fg:x="5200" fg:w="2"/><text x="96.2441%" y="1231.50"></text></g><g><title>_mm_sha256rnds2_epu32 (2 samples, 0.04%)</title><rect x="95.9941%" y="1205" width="0.0369%" height="15" fill="rgb(213,217,25)" fg:x="5200" fg:w="2"/><text x="96.2441%" y="1215.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="96.0310%" y="1269" width="0.0369%" height="15" fill="rgb(249,75,4)" fg:x="5202" fg:w="2"/><text x="96.2810%" y="1279.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (13 samples, 0.24%)</title><rect x="95.8464%" y="1285" width="0.2400%" height="15" fill="rgb(225,114,18)" fg:x="5192" fg:w="13"/><text x="96.0964%" y="1295.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.0679%" y="1269" width="0.0185%" height="15" fill="rgb(211,162,40)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1279.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="96.0679%" y="1253" width="0.0185%" height="15" fill="rgb(206,49,29)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1263.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (1 samples, 0.02%)</title><rect x="96.0679%" y="1237" width="0.0185%" height="15" fill="rgb(244,8,6)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1247.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (1 samples, 0.02%)</title><rect x="96.0679%" y="1221" width="0.0185%" height="15" fill="rgb(231,194,28)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1231.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.0679%" y="1205" width="0.0185%" height="15" fill="rgb(210,69,5)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1215.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.0679%" y="1189" width="0.0185%" height="15" fill="rgb(216,186,12)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1199.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="96.0679%" y="1173" width="0.0185%" height="15" fill="rgb(238,61,15)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1183.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="96.0679%" y="1157" width="0.0185%" height="15" fill="rgb(226,104,1)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1167.50"></text></g><g><title>void UnserializeMany&lt;DataStream, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="96.0679%" y="1141" width="0.0185%" height="15" fill="rgb(229,128,15)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1151.50"></text></g><g><title>void Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.0679%" y="1125" width="0.0185%" height="15" fill="rgb(247,110,15)" fg:x="5204" fg:w="1"/><text x="96.3179%" y="1135.50"></text></g><g><title>CheckProofOfWorkImpl (1 samples, 0.02%)</title><rect x="96.0864%" y="1285" width="0.0185%" height="15" fill="rgb(210,74,48)" fg:x="5205" fg:w="1"/><text x="96.3364%" y="1295.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="96.0864%" y="1269" width="0.0185%" height="15" fill="rgb(246,121,10)" fg:x="5205" fg:w="1"/><text x="96.3364%" y="1279.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (2 samples, 0.04%)</title><rect x="96.1049%" y="1285" width="0.0369%" height="15" fill="rgb(214,156,37)" fg:x="5206" fg:w="2"/><text x="96.3549%" y="1295.50"></text></g><g><title>DataStream::DataStream (2 samples, 0.04%)</title><rect x="96.1049%" y="1269" width="0.0369%" height="15" fill="rgb(214,210,34)" fg:x="5206" fg:w="2"/><text x="96.3549%" y="1279.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (2 samples, 0.04%)</title><rect x="96.1049%" y="1253" width="0.0369%" height="15" fill="rgb(237,93,35)" fg:x="5206" fg:w="2"/><text x="96.3549%" y="1263.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (2 samples, 0.04%)</title><rect x="96.1049%" y="1237" width="0.0369%" height="15" fill="rgb(206,36,8)" fg:x="5206" fg:w="2"/><text x="96.3549%" y="1247.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.04%)</title><rect x="96.1049%" y="1221" width="0.0369%" height="15" fill="rgb(208,151,12)" fg:x="5206" fg:w="2"/><text x="96.3549%" y="1231.50"></text></g><g><title>decltype  (2 samples, 0.04%)</title><rect x="96.1049%" y="1205" width="0.0369%" height="15" fill="rgb(225,133,52)" fg:x="5206" fg:w="2"/><text x="96.3549%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (2 samples, 0.04%)</title><rect x="96.1049%" y="1189" width="0.0369%" height="15" fill="rgb(231,71,53)" fg:x="5206" fg:w="2"/><text x="96.3549%" y="1199.50"></text></g><g><title>decltype (2 samples, 0.04%)</title><rect x="96.1049%" y="1173" width="0.0369%" height="15" fill="rgb(243,76,21)" fg:x="5206" fg:w="2"/><text x="96.3549%" y="1183.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, int&amp;&gt; (1 samples, 0.02%)</title><rect x="96.1418%" y="1189" width="0.0185%" height="15" fill="rgb(252,144,3)" fg:x="5208" fg:w="1"/><text x="96.3918%" y="1199.50"></text></g><g><title>void UnserializeMany&lt;DataStream, int&amp;&gt; (1 samples, 0.02%)</title><rect x="96.1418%" y="1173" width="0.0185%" height="15" fill="rgb(231,199,10)" fg:x="5208" fg:w="1"/><text x="96.3918%" y="1183.50"></text></g><g><title>void Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.1418%" y="1157" width="0.0185%" height="15" fill="rgb(215,18,11)" fg:x="5208" fg:w="1"/><text x="96.3918%" y="1167.50"></text></g><g><title>unsigned int ser_readdata32&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.1418%" y="1141" width="0.0185%" height="15" fill="rgb(241,65,24)" fg:x="5208" fg:w="1"/><text x="96.3918%" y="1151.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.1418%" y="1125" width="0.0185%" height="15" fill="rgb(251,192,38)" fg:x="5208" fg:w="1"/><text x="96.3918%" y="1135.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="96.1418%" y="1109" width="0.0185%" height="15" fill="rgb(205,9,35)" fg:x="5208" fg:w="1"/><text x="96.3918%" y="1119.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="96.1418%" y="1093" width="0.0185%" height="15" fill="rgb(229,225,49)" fg:x="5208" fg:w="1"/><text x="96.3918%" y="1103.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="96.1418%" y="1077" width="0.0185%" height="15" fill="rgb(207,125,39)" fg:x="5208" fg:w="1"/><text x="96.3918%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.1602%" y="1125" width="0.0185%" height="15" fill="rgb(222,78,19)" fg:x="5209" fg:w="1"/><text x="96.4102%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.1602%" y="1109" width="0.0185%" height="15" fill="rgb(248,207,20)" fg:x="5209" fg:w="1"/><text x="96.4102%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.1602%" y="1093" width="0.0185%" height="15" fill="rgb(205,103,49)" fg:x="5209" fg:w="1"/><text x="96.4102%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.1602%" y="1077" width="0.0185%" height="15" fill="rgb(216,42,28)" fg:x="5209" fg:w="1"/><text x="96.4102%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.1602%" y="1061" width="0.0185%" height="15" fill="rgb(213,205,53)" fg:x="5209" fg:w="1"/><text x="96.4102%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.1602%" y="1045" width="0.0185%" height="15" fill="rgb(239,140,53)" fg:x="5209" fg:w="1"/><text x="96.4102%" y="1055.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (3 samples, 0.06%)</title><rect x="96.1418%" y="1269" width="0.0554%" height="15" fill="rgb(248,95,9)" fg:x="5208" fg:w="3"/><text x="96.3918%" y="1279.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (3 samples, 0.06%)</title><rect x="96.1418%" y="1253" width="0.0554%" height="15" fill="rgb(254,58,47)" fg:x="5208" fg:w="3"/><text x="96.3918%" y="1263.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (3 samples, 0.06%)</title><rect x="96.1418%" y="1237" width="0.0554%" height="15" fill="rgb(234,227,14)" fg:x="5208" fg:w="3"/><text x="96.3918%" y="1247.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (3 samples, 0.06%)</title><rect x="96.1418%" y="1221" width="0.0554%" height="15" fill="rgb(205,192,45)" fg:x="5208" fg:w="3"/><text x="96.3918%" y="1231.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (3 samples, 0.06%)</title><rect x="96.1418%" y="1205" width="0.0554%" height="15" fill="rgb(253,187,31)" fg:x="5208" fg:w="3"/><text x="96.3918%" y="1215.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, uint256&amp;&gt; (2 samples, 0.04%)</title><rect x="96.1602%" y="1189" width="0.0369%" height="15" fill="rgb(222,6,32)" fg:x="5209" fg:w="2"/><text x="96.4102%" y="1199.50"></text></g><g><title>void UnserializeMany&lt;DataStream, uint256&amp;&gt; (2 samples, 0.04%)</title><rect x="96.1602%" y="1173" width="0.0369%" height="15" fill="rgb(249,190,19)" fg:x="5209" fg:w="2"/><text x="96.4102%" y="1183.50"></text></g><g><title>void Unserialize&lt;DataStream, uint256&amp;&gt; (2 samples, 0.04%)</title><rect x="96.1602%" y="1157" width="0.0369%" height="15" fill="rgb(251,28,20)" fg:x="5209" fg:w="2"/><text x="96.4102%" y="1167.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="96.1602%" y="1141" width="0.0369%" height="15" fill="rgb(210,223,40)" fg:x="5209" fg:w="2"/><text x="96.4102%" y="1151.50"></text></g><g><title>int ReadVarInt&lt;DataStream, (VarIntMode)1, int&gt; (1 samples, 0.02%)</title><rect x="96.1787%" y="1125" width="0.0185%" height="15" fill="rgb(216,137,22)" fg:x="5210" fg:w="1"/><text x="96.4287%" y="1135.50"></text></g><g><title>unsigned char ser_readdata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.1787%" y="1109" width="0.0185%" height="15" fill="rgb(247,39,34)" fg:x="5210" fg:w="1"/><text x="96.4287%" y="1119.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="96.1787%" y="1093" width="0.0185%" height="15" fill="rgb(239,43,50)" fg:x="5210" fg:w="1"/><text x="96.4287%" y="1103.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="96.1787%" y="1077" width="0.0185%" height="15" fill="rgb(241,212,9)" fg:x="5210" fg:w="1"/><text x="96.4287%" y="1087.50"></text></g><g><title>DataStream::DataStream (9 samples, 0.17%)</title><rect x="96.1972%" y="1269" width="0.1661%" height="15" fill="rgb(205,8,2)" fg:x="5211" fg:w="9"/><text x="96.4472%" y="1279.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (9 samples, 0.17%)</title><rect x="96.1972%" y="1253" width="0.1661%" height="15" fill="rgb(217,173,54)" fg:x="5211" fg:w="9"/><text x="96.4472%" y="1263.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (9 samples, 0.17%)</title><rect x="96.1972%" y="1237" width="0.1661%" height="15" fill="rgb(208,149,52)" fg:x="5211" fg:w="9"/><text x="96.4472%" y="1247.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (8 samples, 0.15%)</title><rect x="96.2156%" y="1221" width="0.1477%" height="15" fill="rgb(239,99,40)" fg:x="5212" fg:w="8"/><text x="96.4656%" y="1231.50"></text></g><g><title>decltype  (5 samples, 0.09%)</title><rect x="96.2710%" y="1205" width="0.0923%" height="15" fill="rgb(233,214,26)" fg:x="5215" fg:w="5"/><text x="96.5210%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (5 samples, 0.09%)</title><rect x="96.2710%" y="1189" width="0.0923%" height="15" fill="rgb(231,225,37)" fg:x="5215" fg:w="5"/><text x="96.5210%" y="1199.50"></text></g><g><title>decltype (5 samples, 0.09%)</title><rect x="96.2710%" y="1173" width="0.0923%" height="15" fill="rgb(252,55,35)" fg:x="5215" fg:w="5"/><text x="96.5210%" y="1183.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (13 samples, 0.24%)</title><rect x="96.1418%" y="1285" width="0.2400%" height="15" fill="rgb(239,43,18)" fg:x="5208" fg:w="13"/><text x="96.3918%" y="1295.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="96.3633%" y="1269" width="0.0185%" height="15" fill="rgb(251,125,49)" fg:x="5220" fg:w="1"/><text x="96.6133%" y="1279.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="96.3633%" y="1253" width="0.0185%" height="15" fill="rgb(212,83,54)" fg:x="5220" fg:w="1"/><text x="96.6133%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="96.3818%" y="1285" width="0.0185%" height="15" fill="rgb(250,75,6)" fg:x="5221" fg:w="1"/><text x="96.6318%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.02%)</title><rect x="96.4002%" y="1269" width="0.0185%" height="15" fill="rgb(252,36,40)" fg:x="5222" fg:w="1"/><text x="96.6502%" y="1279.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="96.4002%" y="1253" width="0.0185%" height="15" fill="rgb(230,91,51)" fg:x="5222" fg:w="1"/><text x="96.6502%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="96.4187%" y="1269" width="0.0185%" height="15" fill="rgb(212,92,28)" fg:x="5223" fg:w="1"/><text x="96.6687%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="96.4187%" y="1253" width="0.0185%" height="15" fill="rgb(227,13,22)" fg:x="5223" fg:w="1"/><text x="96.6687%" y="1263.50"></text></g><g><title>CheckProofOfWorkImpl (1 samples, 0.02%)</title><rect x="96.4187%" y="1237" width="0.0185%" height="15" fill="rgb(239,204,32)" fg:x="5223" fg:w="1"/><text x="96.6687%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (3 samples, 0.06%)</title><rect x="96.4002%" y="1285" width="0.0554%" height="15" fill="rgb(228,49,41)" fg:x="5222" fg:w="3"/><text x="96.6502%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="96.4371%" y="1269" width="0.0185%" height="15" fill="rgb(206,95,6)" fg:x="5224" fg:w="1"/><text x="96.6871%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="96.4556%" y="1285" width="0.0185%" height="15" fill="rgb(251,20,14)" fg:x="5225" fg:w="1"/><text x="96.7056%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="96.4741%" y="1285" width="0.0185%" height="15" fill="rgb(214,99,28)" fg:x="5226" fg:w="1"/><text x="96.7241%" y="1295.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="96.4925%" y="1157" width="0.0185%" height="15" fill="rgb(239,122,54)" fg:x="5227" fg:w="1"/><text x="96.7425%" y="1167.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="96.4925%" y="1205" width="0.0369%" height="15" fill="rgb(218,217,46)" fg:x="5227" fg:w="2"/><text x="96.7425%" y="1215.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="96.4925%" y="1189" width="0.0369%" height="15" fill="rgb(249,106,28)" fg:x="5227" fg:w="2"/><text x="96.7425%" y="1199.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="96.4925%" y="1173" width="0.0369%" height="15" fill="rgb(250,158,18)" fg:x="5227" fg:w="2"/><text x="96.7425%" y="1183.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="96.5110%" y="1157" width="0.0185%" height="15" fill="rgb(226,137,29)" fg:x="5228" fg:w="1"/><text x="96.7610%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3 samples, 0.06%)</title><rect x="96.4925%" y="1221" width="0.0554%" height="15" fill="rgb(210,188,1)" fg:x="5227" fg:w="3"/><text x="96.7425%" y="1231.50"></text></g><g><title>std::_Function_handler&lt;CBlockIndex* (uint256 const&amp;), node::BlockManager::LoadBlockIndex(std::optional&lt;uint256&gt; const&amp;)::{lambda(uint256 const&amp;)#1}&gt;::_M_invoke (1 samples, 0.02%)</title><rect x="96.5294%" y="1205" width="0.0185%" height="15" fill="rgb(227,84,42)" fg:x="5229" fg:w="1"/><text x="96.7794%" y="1215.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (48 samples, 0.89%)</title><rect x="95.8279%" y="1301" width="0.8861%" height="15" fill="rgb(222,147,48)" fg:x="5191" fg:w="48"/><text x="96.0779%" y="1311.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (12 samples, 0.22%)</title><rect x="96.4925%" y="1285" width="0.2215%" height="15" fill="rgb(241,150,43)" fg:x="5227" fg:w="12"/><text x="96.7425%" y="1295.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (12 samples, 0.22%)</title><rect x="96.4925%" y="1269" width="0.2215%" height="15" fill="rgb(206,139,52)" fg:x="5227" fg:w="12"/><text x="96.7425%" y="1279.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (12 samples, 0.22%)</title><rect x="96.4925%" y="1253" width="0.2215%" height="15" fill="rgb(230,63,14)" fg:x="5227" fg:w="12"/><text x="96.7425%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (12 samples, 0.22%)</title><rect x="96.4925%" y="1237" width="0.2215%" height="15" fill="rgb(247,8,20)" fg:x="5227" fg:w="12"/><text x="96.7425%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (9 samples, 0.17%)</title><rect x="96.5479%" y="1221" width="0.1661%" height="15" fill="rgb(213,115,4)" fg:x="5230" fg:w="9"/><text x="96.7979%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (9 samples, 0.17%)</title><rect x="96.5479%" y="1205" width="0.1661%" height="15" fill="rgb(241,79,49)" fg:x="5230" fg:w="9"/><text x="96.7979%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (9 samples, 0.17%)</title><rect x="96.5479%" y="1189" width="0.1661%" height="15" fill="rgb(222,42,35)" fg:x="5230" fg:w="9"/><text x="96.7979%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="96.7140%" y="1285" width="0.0185%" height="15" fill="rgb(247,59,23)" fg:x="5239" fg:w="1"/><text x="96.9640%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (2 samples, 0.04%)</title><rect x="96.7140%" y="1301" width="0.0369%" height="15" fill="rgb(247,93,18)" fg:x="5239" fg:w="2"/><text x="96.9640%" y="1311.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="96.7325%" y="1285" width="0.0185%" height="15" fill="rgb(249,107,47)" fg:x="5240" fg:w="1"/><text x="96.9825%" y="1295.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (1 samples, 0.02%)</title><rect x="96.7510%" y="1285" width="0.0185%" height="15" fill="rgb(219,27,1)" fg:x="5241" fg:w="1"/><text x="97.0010%" y="1295.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (1 samples, 0.02%)</title><rect x="96.7510%" y="1269" width="0.0185%" height="15" fill="rgb(217,82,32)" fg:x="5241" fg:w="1"/><text x="97.0010%" y="1279.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.02%)</title><rect x="96.7510%" y="1253" width="0.0185%" height="15" fill="rgb(250,129,47)" fg:x="5241" fg:w="1"/><text x="97.0010%" y="1263.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="96.8617%" y="1237" width="0.0185%" height="15" fill="rgb(253,88,35)" fg:x="5247" fg:w="1"/><text x="97.1117%" y="1247.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (8 samples, 0.15%)</title><rect x="96.7510%" y="1301" width="0.1477%" height="15" fill="rgb(245,221,14)" fg:x="5241" fg:w="8"/><text x="97.0010%" y="1311.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (7 samples, 0.13%)</title><rect x="96.7694%" y="1285" width="0.1292%" height="15" fill="rgb(217,119,54)" fg:x="5242" fg:w="7"/><text x="97.0194%" y="1295.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (7 samples, 0.13%)</title><rect x="96.7694%" y="1269" width="0.1292%" height="15" fill="rgb(247,128,31)" fg:x="5242" fg:w="7"/><text x="97.0194%" y="1279.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CBlockIndex*&gt; &gt;::construct&lt;CBlockIndex*, CBlockIndex*&gt; (2 samples, 0.04%)</title><rect x="96.8617%" y="1253" width="0.0369%" height="15" fill="rgb(211,99,22)" fg:x="5247" fg:w="2"/><text x="97.1117%" y="1263.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="96.8802%" y="1237" width="0.0185%" height="15" fill="rgb(212,20,17)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1221" width="0.0185%" height="15" fill="rgb(209,159,29)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1205" width="0.0185%" height="15" fill="rgb(222,177,53)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1189" width="0.0185%" height="15" fill="rgb(234,46,43)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1173" width="0.0185%" height="15" fill="rgb(208,108,14)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1157" width="0.0185%" height="15" fill="rgb(226,78,53)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1141" width="0.0185%" height="15" fill="rgb(230,20,41)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1125" width="0.0185%" height="15" fill="rgb(213,195,35)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1109" width="0.0185%" height="15" fill="rgb(242,62,36)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1093" width="0.0185%" height="15" fill="rgb(222,210,37)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1077" width="0.0185%" height="15" fill="rgb(232,107,19)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1061" width="0.0185%" height="15" fill="rgb(235,85,17)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1045" width="0.0185%" height="15" fill="rgb(219,195,31)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8802%" y="1029" width="0.0185%" height="15" fill="rgb(231,183,30)" fg:x="5248" fg:w="1"/><text x="97.1302%" y="1039.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (1 samples, 0.02%)</title><rect x="96.8987%" y="1301" width="0.0185%" height="15" fill="rgb(212,0,11)" fg:x="5249" fg:w="1"/><text x="97.1487%" y="1311.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (3 samples, 0.06%)</title><rect x="96.9171%" y="1205" width="0.0554%" height="15" fill="rgb(249,53,54)" fg:x="5250" fg:w="3"/><text x="97.1671%" y="1215.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (3 samples, 0.06%)</title><rect x="96.9171%" y="1189" width="0.0554%" height="15" fill="rgb(211,118,13)" fg:x="5250" fg:w="3"/><text x="97.1671%" y="1199.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.06%)</title><rect x="96.9171%" y="1173" width="0.0554%" height="15" fill="rgb(237,42,9)" fg:x="5250" fg:w="3"/><text x="97.1671%" y="1183.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.06%)</title><rect x="96.9171%" y="1157" width="0.0554%" height="15" fill="rgb(227,68,32)" fg:x="5250" fg:w="3"/><text x="97.1671%" y="1167.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.06%)</title><rect x="96.9171%" y="1141" width="0.0554%" height="15" fill="rgb(238,10,7)" fg:x="5250" fg:w="3"/><text x="97.1671%" y="1151.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="96.9540%" y="1125" width="0.0185%" height="15" fill="rgb(224,42,12)" fg:x="5252" fg:w="1"/><text x="97.2040%" y="1135.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="96.9540%" y="1109" width="0.0185%" height="15" fill="rgb(252,190,5)" fg:x="5252" fg:w="1"/><text x="97.2040%" y="1119.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="96.9171%" y="1269" width="0.0738%" height="15" fill="rgb(220,214,39)" fg:x="5250" fg:w="4"/><text x="97.1671%" y="1279.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="96.9171%" y="1253" width="0.0738%" height="15" fill="rgb(247,98,4)" fg:x="5250" fg:w="4"/><text x="97.1671%" y="1263.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="96.9171%" y="1237" width="0.0738%" height="15" fill="rgb(211,60,12)" fg:x="5250" fg:w="4"/><text x="97.1671%" y="1247.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (4 samples, 0.07%)</title><rect x="96.9171%" y="1221" width="0.0738%" height="15" fill="rgb(224,42,10)" fg:x="5250" fg:w="4"/><text x="97.1671%" y="1231.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="96.9725%" y="1205" width="0.0185%" height="15" fill="rgb(217,167,4)" fg:x="5253" fg:w="1"/><text x="97.2225%" y="1215.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.04%)</title><rect x="96.9910%" y="1205" width="0.0369%" height="15" fill="rgb(253,18,17)" fg:x="5254" fg:w="2"/><text x="97.2410%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="96.9910%" y="1253" width="0.0738%" height="15" fill="rgb(249,186,44)" fg:x="5254" fg:w="4"/><text x="97.2410%" y="1263.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="96.9910%" y="1237" width="0.0738%" height="15" fill="rgb(254,124,54)" fg:x="5254" fg:w="4"/><text x="97.2410%" y="1247.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (4 samples, 0.07%)</title><rect x="96.9910%" y="1221" width="0.0738%" height="15" fill="rgb(220,124,39)" fg:x="5254" fg:w="4"/><text x="97.2410%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.0279%" y="1205" width="0.0369%" height="15" fill="rgb(225,96,46)" fg:x="5256" fg:w="2"/><text x="97.2779%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.0279%" y="1189" width="0.0369%" height="15" fill="rgb(221,106,12)" fg:x="5256" fg:w="2"/><text x="97.2779%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.0279%" y="1173" width="0.0369%" height="15" fill="rgb(227,133,23)" fg:x="5256" fg:w="2"/><text x="97.2779%" y="1183.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.0463%" y="1157" width="0.0185%" height="15" fill="rgb(216,44,52)" fg:x="5257" fg:w="1"/><text x="97.2963%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.0648%" y="1237" width="0.0923%" height="15" fill="rgb(239,149,7)" fg:x="5258" fg:w="5"/><text x="97.3148%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.0648%" y="1221" width="0.0923%" height="15" fill="rgb(211,157,31)" fg:x="5258" fg:w="5"/><text x="97.3148%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (5 samples, 0.09%)</title><rect x="97.0648%" y="1205" width="0.0923%" height="15" fill="rgb(206,215,22)" fg:x="5258" fg:w="5"/><text x="97.3148%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.0833%" y="1189" width="0.0738%" height="15" fill="rgb(208,113,15)" fg:x="5259" fg:w="4"/><text x="97.3333%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.0833%" y="1173" width="0.0738%" height="15" fill="rgb(207,189,15)" fg:x="5259" fg:w="4"/><text x="97.3333%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.0833%" y="1157" width="0.0738%" height="15" fill="rgb(231,115,4)" fg:x="5259" fg:w="4"/><text x="97.3333%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;::operator-- (1 samples, 0.02%)</title><rect x="97.1386%" y="1141" width="0.0185%" height="15" fill="rgb(253,117,2)" fg:x="5262" fg:w="1"/><text x="97.3886%" y="1151.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.1571%" y="1173" width="0.0185%" height="15" fill="rgb(248,48,24)" fg:x="5263" fg:w="1"/><text x="97.4071%" y="1183.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (159 samples, 2.94%)</title><rect x="94.2588%" y="1317" width="2.9352%" height="15" fill="rgb(241,28,46)" fg:x="5106" fg:w="159"/><text x="94.5088%" y="1327.50">no..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (15 samples, 0.28%)</title><rect x="96.9171%" y="1301" width="0.2769%" height="15" fill="rgb(216,165,52)" fg:x="5250" fg:w="15"/><text x="97.1671%" y="1311.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (15 samples, 0.28%)</title><rect x="96.9171%" y="1285" width="0.2769%" height="15" fill="rgb(220,222,34)" fg:x="5250" fg:w="15"/><text x="97.1671%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (11 samples, 0.20%)</title><rect x="96.9910%" y="1269" width="0.2031%" height="15" fill="rgb(247,222,49)" fg:x="5254" fg:w="11"/><text x="97.2410%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (7 samples, 0.13%)</title><rect x="97.0648%" y="1253" width="0.1292%" height="15" fill="rgb(240,10,31)" fg:x="5258" fg:w="7"/><text x="97.3148%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.1571%" y="1237" width="0.0369%" height="15" fill="rgb(221,199,35)" fg:x="5263" fg:w="2"/><text x="97.4071%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.1571%" y="1221" width="0.0369%" height="15" fill="rgb(230,223,11)" fg:x="5263" fg:w="2"/><text x="97.4071%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.1571%" y="1205" width="0.0369%" height="15" fill="rgb(218,82,45)" fg:x="5263" fg:w="2"/><text x="97.4071%" y="1215.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.04%)</title><rect x="97.1571%" y="1189" width="0.0369%" height="15" fill="rgb(233,213,33)" fg:x="5263" fg:w="2"/><text x="97.4071%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.1756%" y="1173" width="0.0185%" height="15" fill="rgb(210,143,52)" fg:x="5264" fg:w="1"/><text x="97.4256%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.1756%" y="1157" width="0.0185%" height="15" fill="rgb(206,95,4)" fg:x="5264" fg:w="1"/><text x="97.4256%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.1756%" y="1141" width="0.0185%" height="15" fill="rgb(246,164,46)" fg:x="5264" fg:w="1"/><text x="97.4256%" y="1151.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.1756%" y="1125" width="0.0185%" height="15" fill="rgb(213,210,47)" fg:x="5264" fg:w="1"/><text x="97.4256%" y="1135.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (169 samples, 3.12%)</title><rect x="94.1111%" y="1333" width="3.1198%" height="15" fill="rgb(210,12,38)" fg:x="5098" fg:w="169"/><text x="94.3611%" y="1343.50">nod..</text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (2 samples, 0.04%)</title><rect x="97.1940%" y="1317" width="0.0369%" height="15" fill="rgb(252,192,54)" fg:x="5265" fg:w="2"/><text x="97.4440%" y="1327.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (2 samples, 0.04%)</title><rect x="97.1940%" y="1301" width="0.0369%" height="15" fill="rgb(242,92,6)" fg:x="5265" fg:w="2"/><text x="97.4440%" y="1311.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (2 samples, 0.04%)</title><rect x="97.1940%" y="1285" width="0.0369%" height="15" fill="rgb(253,154,15)" fg:x="5265" fg:w="2"/><text x="97.4440%" y="1295.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (4 samples, 0.07%)</title><rect x="97.2309%" y="1237" width="0.0738%" height="15" fill="rgb(209,20,43)" fg:x="5267" fg:w="4"/><text x="97.4809%" y="1247.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (4 samples, 0.07%)</title><rect x="97.2309%" y="1221" width="0.0738%" height="15" fill="rgb(232,28,49)" fg:x="5267" fg:w="4"/><text x="97.4809%" y="1231.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.2309%" y="1205" width="0.0738%" height="15" fill="rgb(248,131,53)" fg:x="5267" fg:w="4"/><text x="97.4809%" y="1215.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.2309%" y="1189" width="0.0738%" height="15" fill="rgb(214,16,30)" fg:x="5267" fg:w="4"/><text x="97.4809%" y="1199.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.2309%" y="1173" width="0.0738%" height="15" fill="rgb(245,16,0)" fg:x="5267" fg:w="4"/><text x="97.4809%" y="1183.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.2863%" y="1157" width="0.0185%" height="15" fill="rgb(245,17,35)" fg:x="5270" fg:w="1"/><text x="97.5363%" y="1167.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.2863%" y="1141" width="0.0185%" height="15" fill="rgb(249,27,53)" fg:x="5270" fg:w="1"/><text x="97.5363%" y="1151.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.2309%" y="1301" width="0.0923%" height="15" fill="rgb(214,73,24)" fg:x="5267" fg:w="5"/><text x="97.4809%" y="1311.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.2309%" y="1285" width="0.0923%" height="15" fill="rgb(223,84,37)" fg:x="5267" fg:w="5"/><text x="97.4809%" y="1295.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.2309%" y="1269" width="0.0923%" height="15" fill="rgb(210,109,28)" fg:x="5267" fg:w="5"/><text x="97.4809%" y="1279.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (5 samples, 0.09%)</title><rect x="97.2309%" y="1253" width="0.0923%" height="15" fill="rgb(208,186,6)" fg:x="5267" fg:w="5"/><text x="97.4809%" y="1263.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.3048%" y="1237" width="0.0185%" height="15" fill="rgb(235,201,30)" fg:x="5271" fg:w="1"/><text x="97.5548%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.06%)</title><rect x="97.3232%" y="1285" width="0.0554%" height="15" fill="rgb(216,198,48)" fg:x="5272" fg:w="3"/><text x="97.5732%" y="1295.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.06%)</title><rect x="97.3232%" y="1269" width="0.0554%" height="15" fill="rgb(254,186,25)" fg:x="5272" fg:w="3"/><text x="97.5732%" y="1279.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (3 samples, 0.06%)</title><rect x="97.3232%" y="1253" width="0.0554%" height="15" fill="rgb(227,87,5)" fg:x="5272" fg:w="3"/><text x="97.5732%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.06%)</title><rect x="97.3232%" y="1237" width="0.0554%" height="15" fill="rgb(236,205,25)" fg:x="5272" fg:w="3"/><text x="97.5732%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.06%)</title><rect x="97.3232%" y="1221" width="0.0554%" height="15" fill="rgb(229,99,32)" fg:x="5272" fg:w="3"/><text x="97.5732%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.06%)</title><rect x="97.3232%" y="1205" width="0.0554%" height="15" fill="rgb(231,177,31)" fg:x="5272" fg:w="3"/><text x="97.5732%" y="1215.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (3 samples, 0.06%)</title><rect x="97.3232%" y="1189" width="0.0554%" height="15" fill="rgb(246,15,2)" fg:x="5272" fg:w="3"/><text x="97.5732%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.3786%" y="1269" width="0.0185%" height="15" fill="rgb(207,39,15)" fg:x="5275" fg:w="1"/><text x="97.6286%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.3786%" y="1253" width="0.0185%" height="15" fill="rgb(207,44,9)" fg:x="5275" fg:w="1"/><text x="97.6286%" y="1263.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3971%" y="1253" width="0.0369%" height="15" fill="rgb(225,224,33)" fg:x="5276" fg:w="2"/><text x="97.6471%" y="1263.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3971%" y="1237" width="0.0369%" height="15" fill="rgb(252,151,3)" fg:x="5276" fg:w="2"/><text x="97.6471%" y="1247.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.04%)</title><rect x="97.3971%" y="1221" width="0.0369%" height="15" fill="rgb(211,140,13)" fg:x="5276" fg:w="2"/><text x="97.6471%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3971%" y="1205" width="0.0369%" height="15" fill="rgb(239,225,17)" fg:x="5276" fg:w="2"/><text x="97.6471%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3971%" y="1189" width="0.0369%" height="15" fill="rgb(223,170,52)" fg:x="5276" fg:w="2"/><text x="97.6471%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3971%" y="1173" width="0.0369%" height="15" fill="rgb(212,64,21)" fg:x="5276" fg:w="2"/><text x="97.6471%" y="1183.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.04%)</title><rect x="97.3971%" y="1157" width="0.0369%" height="15" fill="rgb(236,126,48)" fg:x="5276" fg:w="2"/><text x="97.6471%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4340%" y="1237" width="0.0185%" height="15" fill="rgb(209,135,11)" fg:x="5278" fg:w="1"/><text x="97.6840%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4340%" y="1221" width="0.0185%" height="15" fill="rgb(228,126,40)" fg:x="5278" fg:w="1"/><text x="97.6840%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.4340%" y="1205" width="0.0185%" height="15" fill="rgb(205,196,36)" fg:x="5278" fg:w="1"/><text x="97.6840%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4340%" y="1189" width="0.0185%" height="15" fill="rgb(243,160,33)" fg:x="5278" fg:w="1"/><text x="97.6840%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4340%" y="1173" width="0.0185%" height="15" fill="rgb(210,84,20)" fg:x="5278" fg:w="1"/><text x="97.6840%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4340%" y="1157" width="0.0185%" height="15" fill="rgb(228,213,30)" fg:x="5278" fg:w="1"/><text x="97.6840%" y="1167.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.4340%" y="1141" width="0.0185%" height="15" fill="rgb(252,33,45)" fg:x="5278" fg:w="1"/><text x="97.6840%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4525%" y="1221" width="0.0185%" height="15" fill="rgb(254,227,20)" fg:x="5279" fg:w="1"/><text x="97.7025%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4525%" y="1205" width="0.0185%" height="15" fill="rgb(228,192,2)" fg:x="5279" fg:w="1"/><text x="97.7025%" y="1215.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.4525%" y="1189" width="0.0185%" height="15" fill="rgb(233,32,8)" fg:x="5279" fg:w="1"/><text x="97.7025%" y="1199.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.4525%" y="1173" width="0.0185%" height="15" fill="rgb(220,146,47)" fg:x="5279" fg:w="1"/><text x="97.7025%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4709%" y="1205" width="0.0185%" height="15" fill="rgb(246,194,1)" fg:x="5280" fg:w="1"/><text x="97.7209%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4709%" y="1189" width="0.0185%" height="15" fill="rgb(218,203,9)" fg:x="5280" fg:w="1"/><text x="97.7209%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;::operator-- (1 samples, 0.02%)</title><rect x="97.4709%" y="1173" width="0.0185%" height="15" fill="rgb(237,97,14)" fg:x="5280" fg:w="1"/><text x="97.7209%" y="1183.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (192 samples, 3.54%)</title><rect x="93.9634%" y="1349" width="3.5444%" height="15" fill="rgb(239,76,15)" fg:x="5090" fg:w="192"/><text x="94.2134%" y="1359.50">Chai..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (15 samples, 0.28%)</title><rect x="97.2309%" y="1333" width="0.2769%" height="15" fill="rgb(222,53,45)" fg:x="5267" fg:w="15"/><text x="97.4809%" y="1343.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (15 samples, 0.28%)</title><rect x="97.2309%" y="1317" width="0.2769%" height="15" fill="rgb(237,88,5)" fg:x="5267" fg:w="15"/><text x="97.4809%" y="1327.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (10 samples, 0.18%)</title><rect x="97.3232%" y="1301" width="0.1846%" height="15" fill="rgb(218,223,35)" fg:x="5272" fg:w="10"/><text x="97.5732%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (7 samples, 0.13%)</title><rect x="97.3786%" y="1285" width="0.1292%" height="15" fill="rgb(243,229,38)" fg:x="5275" fg:w="7"/><text x="97.6286%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (6 samples, 0.11%)</title><rect x="97.3971%" y="1269" width="0.1108%" height="15" fill="rgb(240,75,41)" fg:x="5276" fg:w="6"/><text x="97.6471%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.4340%" y="1253" width="0.0738%" height="15" fill="rgb(209,110,37)" fg:x="5278" fg:w="4"/><text x="97.6840%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.06%)</title><rect x="97.4525%" y="1237" width="0.0554%" height="15" fill="rgb(221,130,46)" fg:x="5279" fg:w="3"/><text x="97.7025%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.4709%" y="1221" width="0.0369%" height="15" fill="rgb(237,160,20)" fg:x="5280" fg:w="2"/><text x="97.7209%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4894%" y="1205" width="0.0185%" height="15" fill="rgb(234,126,24)" fg:x="5281" fg:w="1"/><text x="97.7394%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4894%" y="1189" width="0.0185%" height="15" fill="rgb(207,177,9)" fg:x="5281" fg:w="1"/><text x="97.7394%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4894%" y="1173" width="0.0185%" height="15" fill="rgb(231,191,33)" fg:x="5281" fg:w="1"/><text x="97.7394%" y="1183.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.4894%" y="1157" width="0.0185%" height="15" fill="rgb(207,42,1)" fg:x="5281" fg:w="1"/><text x="97.7394%" y="1167.50"></text></g><g><title>any_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (3 samples, 0.06%)</title><rect x="97.5078%" y="1349" width="0.0554%" height="15" fill="rgb(218,34,50)" fg:x="5282" fg:w="3"/><text x="97.7578%" y="1359.50"></text></g><g><title>none_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (3 samples, 0.06%)</title><rect x="97.5078%" y="1333" width="0.0554%" height="15" fill="rgb(254,126,39)" fg:x="5282" fg:w="3"/><text x="97.7578%" y="1343.50"></text></g><g><title>find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (3 samples, 0.06%)</title><rect x="97.5078%" y="1317" width="0.0554%" height="15" fill="rgb(251,17,26)" fg:x="5282" fg:w="3"/><text x="97.7578%" y="1327.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="97.5078%" y="1301" width="0.0554%" height="15" fill="rgb(252,215,34)" fg:x="5282" fg:w="3"/><text x="97.7578%" y="1311.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="97.5078%" y="1285" width="0.0554%" height="15" fill="rgb(217,120,44)" fg:x="5282" fg:w="3"/><text x="97.7578%" y="1295.50"></text></g><g><title>operator (3 samples, 0.06%)</title><rect x="97.5078%" y="1269" width="0.0554%" height="15" fill="rgb(211,31,11)" fg:x="5282" fg:w="3"/><text x="97.7578%" y="1279.50"></text></g><g><title>node::CompleteChainstateInitialization (3 samples, 0.06%)</title><rect x="97.5078%" y="1253" width="0.0554%" height="15" fill="rgb(222,69,51)" fg:x="5282" fg:w="3"/><text x="97.7578%" y="1263.50"></text></g><g><title>Chainstate::NeedsRedownload (3 samples, 0.06%)</title><rect x="97.5078%" y="1237" width="0.0554%" height="15" fill="rgb(215,229,42)" fg:x="5282" fg:w="3"/><text x="97.7578%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (2 samples, 0.04%)</title><rect x="97.5632%" y="1349" width="0.0369%" height="15" fill="rgb(212,102,15)" fg:x="5285" fg:w="2"/><text x="97.8132%" y="1359.50"></text></g><g><title>node::CBlockIndexWorkComparator::operator (1 samples, 0.02%)</title><rect x="97.6001%" y="1349" width="0.0185%" height="15" fill="rgb(205,179,41)" fg:x="5287" fg:w="1"/><text x="97.8501%" y="1359.50"></text></g><g><title>operator (207 samples, 3.82%)</title><rect x="93.8342%" y="1413" width="3.8213%" height="15" fill="rgb(219,148,46)" fg:x="5083" fg:w="207"/><text x="94.0842%" y="1423.50">oper..</text></g><g><title>InitAndLoadChainstate (207 samples, 3.82%)</title><rect x="93.8342%" y="1397" width="3.8213%" height="15" fill="rgb(243,40,19)" fg:x="5083" fg:w="207"/><text x="94.0842%" y="1407.50">Init..</text></g><g><title>node::LoadChainstate (207 samples, 3.82%)</title><rect x="93.8342%" y="1381" width="3.8213%" height="15" fill="rgb(208,206,34)" fg:x="5083" fg:w="207"/><text x="94.0842%" y="1391.50">node..</text></g><g><title>node::CompleteChainstateInitialization (206 samples, 3.80%)</title><rect x="93.8527%" y="1365" width="3.8028%" height="15" fill="rgb(244,184,38)" fg:x="5084" fg:w="206"/><text x="94.1027%" y="1375.50">node..</text></g><g><title>util::SignalInterrupt::operator bool (2 samples, 0.04%)</title><rect x="97.6186%" y="1349" width="0.0369%" height="15" fill="rgb(244,151,47)" fg:x="5288" fg:w="2"/><text x="97.8686%" y="1359.50"></text></g><g><title>main (208 samples, 3.84%)</title><rect x="93.8342%" y="1461" width="3.8398%" height="15" fill="rgb(236,134,42)" fg:x="5083" fg:w="208"/><text x="94.0842%" y="1471.50">main</text></g><g><title>AppInitMain (208 samples, 3.84%)</title><rect x="93.8342%" y="1445" width="3.8398%" height="15" fill="rgb(233,93,22)" fg:x="5083" fg:w="208"/><text x="94.0842%" y="1455.50">AppI..</text></g><g><title>InitAndLoadChainstate (208 samples, 3.84%)</title><rect x="93.8342%" y="1429" width="3.8398%" height="15" fill="rgb(211,202,10)" fg:x="5083" fg:w="208"/><text x="94.0842%" y="1439.50">Init..</text></g><g><title>std::__detail::_MakeUniq&lt;ChainstateManager&gt;::__single_object std::make_unique&lt;ChainstateManager, util::SignalInterrupt&amp;, kernel::ChainstateManagerOpts&amp;, kernel::BlockManagerOpts&amp;&gt; (1 samples, 0.02%)</title><rect x="97.6555%" y="1413" width="0.0185%" height="15" fill="rgb(240,63,8)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1423.50"></text></g><g><title>ChainstateManager::ChainstateManager (1 samples, 0.02%)</title><rect x="97.6555%" y="1397" width="0.0185%" height="15" fill="rgb(214,9,4)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1407.50"></text></g><g><title>ValidationCache::ValidationCache (1 samples, 0.02%)</title><rect x="97.6555%" y="1381" width="0.0185%" height="15" fill="rgb(243,66,45)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1391.50"></text></g><g><title>SignatureCache::SignatureCache (1 samples, 0.02%)</title><rect x="97.6555%" y="1365" width="0.0185%" height="15" fill="rgb(220,50,42)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1375.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup_bytes (1 samples, 0.02%)</title><rect x="97.6555%" y="1349" width="0.0185%" height="15" fill="rgb(220,134,27)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1359.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup (1 samples, 0.02%)</title><rect x="97.6555%" y="1333" width="0.0185%" height="15" fill="rgb(246,151,50)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1343.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="97.6555%" y="1317" width="0.0185%" height="15" fill="rgb(238,216,27)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1327.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="97.6555%" y="1301" width="0.0185%" height="15" fill="rgb(250,92,11)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1311.50"></text></g><g><title>uint256* std::__uninitialized_default_n_a&lt;uint256*, unsigned long, uint256&gt; (1 samples, 0.02%)</title><rect x="97.6555%" y="1285" width="0.0185%" height="15" fill="rgb(248,183,6)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1295.50"></text></g><g><title>uint256* std::__uninitialized_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="97.6555%" y="1269" width="0.0185%" height="15" fill="rgb(211,204,50)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1279.50"></text></g><g><title>uint256* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="97.6555%" y="1253" width="0.0185%" height="15" fill="rgb(252,55,47)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1263.50"></text></g><g><title>void std::_Construct&lt;uint256&gt; (1 samples, 0.02%)</title><rect x="97.6555%" y="1237" width="0.0185%" height="15" fill="rgb(240,198,32)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1247.50"></text></g><g><title>uint256::uint256 (1 samples, 0.02%)</title><rect x="97.6555%" y="1221" width="0.0185%" height="15" fill="rgb(224,203,19)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1231.50"></text></g><g><title>base_blob&lt;256u&gt;::base_blob (1 samples, 0.02%)</title><rect x="97.6555%" y="1205" width="0.0185%" height="15" fill="rgb(205,27,16)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1215.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="97.6555%" y="1189" width="0.0185%" height="15" fill="rgb(224,226,17)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6555%" y="1173" width="0.0185%" height="15" fill="rgb(205,216,54)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6555%" y="1157" width="0.0185%" height="15" fill="rgb(248,168,46)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6555%" y="1141" width="0.0185%" height="15" fill="rgb(226,111,45)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6555%" y="1125" width="0.0185%" height="15" fill="rgb(231,15,9)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6555%" y="1109" width="0.0185%" height="15" fill="rgb(243,168,3)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6555%" y="1093" width="0.0185%" height="15" fill="rgb(221,220,54)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6555%" y="1077" width="0.0185%" height="15" fill="rgb(232,174,38)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6555%" y="1061" width="0.0185%" height="15" fill="rgb(205,14,38)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6555%" y="1045" width="0.0185%" height="15" fill="rgb(234,89,19)" fg:x="5290" fg:w="1"/><text x="97.9055%" y="1055.50"></text></g><g><title>_start (226 samples, 4.17%)</title><rect x="93.5758%" y="1525" width="4.1721%" height="15" fill="rgb(216,68,51)" fg:x="5069" fg:w="226"/><text x="93.8258%" y="1535.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (226 samples, 4.17%)</title><rect x="93.5758%" y="1509" width="4.1721%" height="15" fill="rgb(213,49,2)" fg:x="5069" fg:w="226"/><text x="93.8258%" y="1519.50">__lib..</text></g><g><title>__libc_start_call_main (226 samples, 4.17%)</title><rect x="93.5758%" y="1493" width="4.1721%" height="15" fill="rgb(242,146,30)" fg:x="5069" fg:w="226"/><text x="93.8258%" y="1503.50">__lib..</text></g><g><title>main (226 samples, 4.17%)</title><rect x="93.5758%" y="1477" width="4.1721%" height="15" fill="rgb(224,188,11)" fg:x="5069" fg:w="226"/><text x="93.8258%" y="1487.50">main</text></g><g><title>util::SignalInterrupt::wait (4 samples, 0.07%)</title><rect x="97.6740%" y="1461" width="0.0738%" height="15" fill="rgb(213,159,11)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1471.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.07%)</title><rect x="97.6740%" y="1445" width="0.0738%" height="15" fill="rgb(229,13,31)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1455.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.07%)</title><rect x="97.6740%" y="1429" width="0.0738%" height="15" fill="rgb(209,103,11)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1439.50"></text></g><g><title>read (4 samples, 0.07%)</title><rect x="97.6740%" y="1413" width="0.0738%" height="15" fill="rgb(206,3,4)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.6740%" y="1397" width="0.0738%" height="15" fill="rgb(252,10,49)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.6740%" y="1381" width="0.0738%" height="15" fill="rgb(217,160,32)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.6740%" y="1365" width="0.0738%" height="15" fill="rgb(249,196,0)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.6740%" y="1349" width="0.0738%" height="15" fill="rgb(213,17,48)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.6740%" y="1333" width="0.0738%" height="15" fill="rgb(206,42,46)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.6740%" y="1317" width="0.0738%" height="15" fill="rgb(212,105,24)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.6740%" y="1301" width="0.0738%" height="15" fill="rgb(243,216,30)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.6740%" y="1285" width="0.0738%" height="15" fill="rgb(207,121,3)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.6740%" y="1269" width="0.0738%" height="15" fill="rgb(249,78,0)" fg:x="5291" fg:w="4"/><text x="97.9240%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="97.6924%" y="1253" width="0.0554%" height="15" fill="rgb(244,151,32)" fg:x="5292" fg:w="3"/><text x="97.9424%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="97.6924%" y="1237" width="0.0554%" height="15" fill="rgb(228,63,25)" fg:x="5292" fg:w="3"/><text x="97.9424%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="97.6924%" y="1221" width="0.0554%" height="15" fill="rgb(231,158,23)" fg:x="5292" fg:w="3"/><text x="97.9424%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="97.6924%" y="1205" width="0.0554%" height="15" fill="rgb(248,107,23)" fg:x="5292" fg:w="3"/><text x="97.9424%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="97.6924%" y="1189" width="0.0554%" height="15" fill="rgb(215,168,21)" fg:x="5292" fg:w="3"/><text x="97.9424%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="97.6924%" y="1173" width="0.0554%" height="15" fill="rgb(227,83,22)" fg:x="5292" fg:w="3"/><text x="97.9424%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="97.6924%" y="1157" width="0.0554%" height="15" fill="rgb(217,118,43)" fg:x="5292" fg:w="3"/><text x="97.9424%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="97.6924%" y="1141" width="0.0554%" height="15" fill="rgb(229,220,41)" fg:x="5292" fg:w="3"/><text x="97.9424%" y="1151.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (3 samples, 0.06%)</title><rect x="97.7478%" y="1525" width="0.0554%" height="15" fill="rgb(254,146,46)" fg:x="5295" fg:w="3"/><text x="97.9978%" y="1535.50"></text></g><g><title>crc32c::ExtendSse42 (3 samples, 0.06%)</title><rect x="97.8032%" y="1525" width="0.0554%" height="15" fill="rgb(233,208,31)" fg:x="5298" fg:w="3"/><text x="98.0532%" y="1535.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="97.8401%" y="1509" width="0.0185%" height="15" fill="rgb(222,162,7)" fg:x="5300" fg:w="1"/><text x="98.0901%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="97.8586%" y="1525" width="0.0185%" height="15" fill="rgb(230,117,45)" fg:x="5301" fg:w="1"/><text x="98.1086%" y="1535.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="97.8586%" y="1509" width="0.0185%" height="15" fill="rgb(239,163,6)" fg:x="5301" fg:w="1"/><text x="98.1086%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="97.8586%" y="1493" width="0.0185%" height="15" fill="rgb(246,130,17)" fg:x="5301" fg:w="1"/><text x="98.1086%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="97.8771%" y="1525" width="0.0185%" height="15" fill="rgb(216,84,5)" fg:x="5302" fg:w="1"/><text x="98.1271%" y="1535.50"></text></g><g><title>ParseKey (1 samples, 0.02%)</title><rect x="97.8771%" y="1509" width="0.0185%" height="15" fill="rgb(230,200,21)" fg:x="5302" fg:w="1"/><text x="98.1271%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="97.8771%" y="1493" width="0.0185%" height="15" fill="rgb(224,2,8)" fg:x="5302" fg:w="1"/><text x="98.1271%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="97.8955%" y="1525" width="0.0185%" height="15" fill="rgb(238,178,10)" fg:x="5303" fg:w="1"/><text x="98.1455%" y="1535.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="97.8955%" y="1509" width="0.0185%" height="15" fill="rgb(242,153,24)" fg:x="5303" fg:w="1"/><text x="98.1455%" y="1519.50"></text></g><g><title>leveldb::operator== (2 samples, 0.04%)</title><rect x="97.9140%" y="1509" width="0.0369%" height="15" fill="rgb(242,32,48)" fg:x="5304" fg:w="2"/><text x="98.1640%" y="1519.50"></text></g><g><title>leveldb::EncodeVarint32 (2 samples, 0.04%)</title><rect x="97.9140%" y="1493" width="0.0369%" height="15" fill="rgb(227,36,0)" fg:x="5304" fg:w="2"/><text x="98.1640%" y="1503.50"></text></g><g><title>leveldb::BlockBuilder::Add (3 samples, 0.06%)</title><rect x="97.9140%" y="1525" width="0.0554%" height="15" fill="rgb(251,33,35)" fg:x="5304" fg:w="3"/><text x="98.1640%" y="1535.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="97.9509%" y="1509" width="0.0185%" height="15" fill="rgb(232,168,51)" fg:x="5306" fg:w="1"/><text x="98.2009%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="97.9509%" y="1493" width="0.0185%" height="15" fill="rgb(228,56,10)" fg:x="5306" fg:w="1"/><text x="98.2009%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="97.9509%" y="1477" width="0.0185%" height="15" fill="rgb(231,10,26)" fg:x="5306" fg:w="1"/><text x="98.2009%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="97.9509%" y="1461" width="0.0185%" height="15" fill="rgb(226,202,12)" fg:x="5306" fg:w="1"/><text x="98.2009%" y="1471.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="97.9509%" y="1445" width="0.0185%" height="15" fill="rgb(251,49,21)" fg:x="5306" fg:w="1"/><text x="98.2009%" y="1455.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="97.9509%" y="1429" width="0.0185%" height="15" fill="rgb(206,228,28)" fg:x="5306" fg:w="1"/><text x="98.2009%" y="1439.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.02%)</title><rect x="97.9694%" y="1525" width="0.0185%" height="15" fill="rgb(205,198,31)" fg:x="5307" fg:w="1"/><text x="98.2194%" y="1535.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="97.9694%" y="1509" width="0.0185%" height="15" fill="rgb(213,69,1)" fg:x="5307" fg:w="1"/><text x="98.2194%" y="1519.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="97.9878%" y="1525" width="0.0185%" height="15" fill="rgb(209,177,9)" fg:x="5308" fg:w="1"/><text x="98.2378%" y="1535.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="97.9878%" y="1509" width="0.0185%" height="15" fill="rgb(227,119,30)" fg:x="5308" fg:w="1"/><text x="98.2378%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="98.0063%" y="1429" width="0.0185%" height="15" fill="rgb(234,106,41)" fg:x="5309" fg:w="1"/><text x="98.2563%" y="1439.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (2 samples, 0.04%)</title><rect x="98.0063%" y="1525" width="0.0369%" height="15" fill="rgb(244,103,47)" fg:x="5309" fg:w="2"/><text x="98.2563%" y="1535.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.04%)</title><rect x="98.0063%" y="1509" width="0.0369%" height="15" fill="rgb(212,211,25)" fg:x="5309" fg:w="2"/><text x="98.2563%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.04%)</title><rect x="98.0063%" y="1493" width="0.0369%" height="15" fill="rgb(208,63,53)" fg:x="5309" fg:w="2"/><text x="98.2563%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="98.0063%" y="1477" width="0.0369%" height="15" fill="rgb(213,176,21)" fg:x="5309" fg:w="2"/><text x="98.2563%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="98.0063%" y="1461" width="0.0369%" height="15" fill="rgb(243,124,12)" fg:x="5309" fg:w="2"/><text x="98.2563%" y="1471.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.04%)</title><rect x="98.0063%" y="1445" width="0.0369%" height="15" fill="rgb(239,2,35)" fg:x="5309" fg:w="2"/><text x="98.2563%" y="1455.50"></text></g><g><title>leveldb::MemTableIterator::value (1 samples, 0.02%)</title><rect x="98.0247%" y="1429" width="0.0185%" height="15" fill="rgb(253,169,22)" fg:x="5310" fg:w="1"/><text x="98.2747%" y="1439.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.0432%" y="1525" width="0.0185%" height="15" fill="rgb(254,51,12)" fg:x="5311" fg:w="1"/><text x="98.2932%" y="1535.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.0432%" y="1509" width="0.0185%" height="15" fill="rgb(244,17,47)" fg:x="5311" fg:w="1"/><text x="98.2932%" y="1519.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="98.0617%" y="1525" width="0.0185%" height="15" fill="rgb(251,45,46)" fg:x="5312" fg:w="1"/><text x="98.3117%" y="1535.50"></text></g><g><title>leveldb::Status::~Status (1 samples, 0.02%)</title><rect x="98.0617%" y="1509" width="0.0185%" height="15" fill="rgb(223,87,43)" fg:x="5312" fg:w="1"/><text x="98.3117%" y="1519.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="98.0801%" y="1525" width="0.0185%" height="15" fill="rgb(230,132,31)" fg:x="5313" fg:w="1"/><text x="98.3301%" y="1535.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (1 samples, 0.02%)</title><rect x="98.0801%" y="1509" width="0.0185%" height="15" fill="rgb(206,99,1)" fg:x="5313" fg:w="1"/><text x="98.3301%" y="1519.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="98.0986%" y="1029" width="0.0185%" height="15" fill="rgb(227,110,25)" fg:x="5314" fg:w="1"/><text x="98.3486%" y="1039.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="98.0986%" y="1013" width="0.0185%" height="15" fill="rgb(217,182,7)" fg:x="5314" fg:w="1"/><text x="98.3486%" y="1023.50"></text></g><g><title>NewWritableFile (2 samples, 0.04%)</title><rect x="98.0986%" y="1269" width="0.0369%" height="15" fill="rgb(250,176,4)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (2 samples, 0.04%)</title><rect x="98.0986%" y="1253" width="0.0369%" height="15" fill="rgb(244,98,30)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1263.50"></text></g><g><title>__GI___libc_open (2 samples, 0.04%)</title><rect x="98.0986%" y="1237" width="0.0369%" height="15" fill="rgb(228,150,42)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1221" width="0.0369%" height="15" fill="rgb(231,91,46)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1205" width="0.0369%" height="15" fill="rgb(252,161,32)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1189" width="0.0369%" height="15" fill="rgb(236,69,41)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1173" width="0.0369%" height="15" fill="rgb(212,160,3)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1157" width="0.0369%" height="15" fill="rgb(216,5,50)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1141" width="0.0369%" height="15" fill="rgb(241,138,25)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1125" width="0.0369%" height="15" fill="rgb(239,42,18)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1109" width="0.0369%" height="15" fill="rgb(239,40,7)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1119.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="98.0986%" y="1093" width="0.0369%" height="15" fill="rgb(239,11,31)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1077" width="0.0369%" height="15" fill="rgb(224,77,40)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1061" width="0.0369%" height="15" fill="rgb(226,15,5)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.0986%" y="1045" width="0.0369%" height="15" fill="rgb(254,188,5)" fg:x="5314" fg:w="2"/><text x="98.3486%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1170%" y="1029" width="0.0185%" height="15" fill="rgb(241,148,52)" fg:x="5315" fg:w="1"/><text x="98.3670%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1170%" y="1013" width="0.0185%" height="15" fill="rgb(251,48,36)" fg:x="5315" fg:w="1"/><text x="98.3670%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1170%" y="997" width="0.0185%" height="15" fill="rgb(243,83,13)" fg:x="5315" fg:w="1"/><text x="98.3670%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1170%" y="981" width="0.0185%" height="15" fill="rgb(210,105,0)" fg:x="5315" fg:w="1"/><text x="98.3670%" y="991.50"></text></g><g><title>Sync (1 samples, 0.02%)</title><rect x="98.1355%" y="1269" width="0.0185%" height="15" fill="rgb(239,60,36)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1 samples, 0.02%)</title><rect x="98.1355%" y="1253" width="0.0185%" height="15" fill="rgb(210,20,0)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1263.50"></text></g><g><title>fdatasync (1 samples, 0.02%)</title><rect x="98.1355%" y="1237" width="0.0185%" height="15" fill="rgb(244,26,53)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="1221" width="0.0185%" height="15" fill="rgb(240,100,49)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="1205" width="0.0185%" height="15" fill="rgb(250,46,45)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="1189" width="0.0185%" height="15" fill="rgb(220,181,29)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1199.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.1355%" y="1173" width="0.0185%" height="15" fill="rgb(213,137,33)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="1157" width="0.0185%" height="15" fill="rgb(213,27,48)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="1141" width="0.0185%" height="15" fill="rgb(245,180,39)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="1125" width="0.0185%" height="15" fill="rgb(212,158,42)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="1109" width="0.0185%" height="15" fill="rgb(228,193,18)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.1355%" y="1093" width="0.0185%" height="15" fill="rgb(245,172,29)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.1355%" y="1077" width="0.0185%" height="15" fill="rgb(207,98,24)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.1355%" y="1061" width="0.0185%" height="15" fill="rgb(249,92,26)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.1355%" y="1045" width="0.0185%" height="15" fill="rgb(217,176,26)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.1355%" y="1029" width="0.0185%" height="15" fill="rgb(221,8,39)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="1013" width="0.0185%" height="15" fill="rgb(208,90,18)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="997" width="0.0185%" height="15" fill="rgb(207,202,30)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="981" width="0.0185%" height="15" fill="rgb(231,124,22)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="965" width="0.0185%" height="15" fill="rgb(206,15,5)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="949" width="0.0185%" height="15" fill="rgb(239,16,52)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="959.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="98.1355%" y="933" width="0.0185%" height="15" fill="rgb(245,213,29)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="943.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="98.1355%" y="917" width="0.0185%" height="15" fill="rgb(213,203,36)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="901" width="0.0185%" height="15" fill="rgb(209,55,18)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="885" width="0.0185%" height="15" fill="rgb(207,133,49)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="869" width="0.0185%" height="15" fill="rgb(240,33,46)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="853" width="0.0185%" height="15" fill="rgb(212,35,2)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="837" width="0.0185%" height="15" fill="rgb(231,119,28)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.1355%" y="821" width="0.0185%" height="15" fill="rgb(252,178,7)" fg:x="5316" fg:w="1"/><text x="98.3855%" y="831.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (6 samples, 0.11%)</title><rect x="98.1540%" y="1237" width="0.1108%" height="15" fill="rgb(251,91,4)" fg:x="5317" fg:w="6"/><text x="98.4040%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.06%)</title><rect x="98.2093%" y="1221" width="0.0554%" height="15" fill="rgb(233,122,19)" fg:x="5320" fg:w="3"/><text x="98.4593%" y="1231.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="98.2647%" y="1237" width="0.0185%" height="15" fill="rgb(231,208,46)" fg:x="5323" fg:w="1"/><text x="98.5147%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::ok (1 samples, 0.02%)</title><rect x="98.2647%" y="1221" width="0.0185%" height="15" fill="rgb(243,15,41)" fg:x="5323" fg:w="1"/><text x="98.5147%" y="1231.50"></text></g><g><title>leveldb::BlockBuilder::Add (8 samples, 0.15%)</title><rect x="98.1540%" y="1253" width="0.1477%" height="15" fill="rgb(210,32,43)" fg:x="5317" fg:w="8"/><text x="98.4040%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="98.2832%" y="1237" width="0.0185%" height="15" fill="rgb(222,177,15)" fg:x="5324" fg:w="1"/><text x="98.5332%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="98.2832%" y="1221" width="0.0185%" height="15" fill="rgb(244,121,34)" fg:x="5324" fg:w="1"/><text x="98.5332%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="98.2832%" y="1205" width="0.0185%" height="15" fill="rgb(234,138,4)" fg:x="5324" fg:w="1"/><text x="98.5332%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="98.2832%" y="1189" width="0.0185%" height="15" fill="rgb(240,97,48)" fg:x="5324" fg:w="1"/><text x="98.5332%" y="1199.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="98.3016%" y="1221" width="0.0185%" height="15" fill="rgb(237,65,54)" fg:x="5325" fg:w="1"/><text x="98.5516%" y="1231.50"></text></g><g><title>leveldb::TableBuilder::Flush (1 samples, 0.02%)</title><rect x="98.3016%" y="1205" width="0.0185%" height="15" fill="rgb(214,25,24)" fg:x="5325" fg:w="1"/><text x="98.5516%" y="1215.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="98.3016%" y="1189" width="0.0185%" height="15" fill="rgb(213,5,3)" fg:x="5325" fg:w="1"/><text x="98.5516%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="98.3016%" y="1173" width="0.0185%" height="15" fill="rgb(219,81,29)" fg:x="5325" fg:w="1"/><text x="98.5516%" y="1183.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (2 samples, 0.04%)</title><rect x="98.3016%" y="1253" width="0.0369%" height="15" fill="rgb(220,43,48)" fg:x="5325" fg:w="2"/><text x="98.5516%" y="1263.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (2 samples, 0.04%)</title><rect x="98.3016%" y="1237" width="0.0369%" height="15" fill="rgb(239,157,2)" fg:x="5325" fg:w="2"/><text x="98.5516%" y="1247.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="98.3201%" y="1221" width="0.0185%" height="15" fill="rgb(213,104,43)" fg:x="5326" fg:w="1"/><text x="98.5701%" y="1231.50"></text></g><g><title>unsigned int&amp; std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::emplace_back&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="98.3201%" y="1205" width="0.0185%" height="15" fill="rgb(237,84,9)" fg:x="5326" fg:w="1"/><text x="98.5701%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_realloc_insert&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="98.3201%" y="1189" width="0.0185%" height="15" fill="rgb(252,6,33)" fg:x="5326" fg:w="1"/><text x="98.5701%" y="1199.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_S_relocate (1 samples, 0.02%)</title><rect x="98.3201%" y="1173" width="0.0185%" height="15" fill="rgb(251,172,22)" fg:x="5326" fg:w="1"/><text x="98.5701%" y="1183.50"></text></g><g><title>unsigned int* std::__relocate_a&lt;unsigned int*, unsigned int*, std::allocator&lt;unsigned int&gt; &gt; (1 samples, 0.02%)</title><rect x="98.3201%" y="1157" width="0.0185%" height="15" fill="rgb(244,91,53)" fg:x="5326" fg:w="1"/><text x="98.5701%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;unsigned int, void&gt;::value, unsigned int*&gt;::type std::__relocate_a_1&lt;unsigned int, unsigned int&gt; (1 samples, 0.02%)</title><rect x="98.3201%" y="1141" width="0.0185%" height="15" fill="rgb(219,29,30)" fg:x="5326" fg:w="1"/><text x="98.5701%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="98.3201%" y="1125" width="0.0185%" height="15" fill="rgb(213,3,15)" fg:x="5326" fg:w="1"/><text x="98.5701%" y="1135.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="98.3386%" y="1253" width="0.0185%" height="15" fill="rgb(208,25,28)" fg:x="5327" fg:w="1"/><text x="98.5886%" y="1263.50"></text></g><g><title>[[ext4]] (5 samples, 0.09%)</title><rect x="98.3570%" y="1077" width="0.0923%" height="15" fill="rgb(252,144,25)" fg:x="5328" fg:w="5"/><text x="98.6070%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="98.3570%" y="1061" width="0.0923%" height="15" fill="rgb(226,220,25)" fg:x="5328" fg:w="5"/><text x="98.6070%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.3755%" y="1045" width="0.0738%" height="15" fill="rgb(212,131,28)" fg:x="5329" fg:w="4"/><text x="98.6255%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.3755%" y="1029" width="0.0738%" height="15" fill="rgb(219,143,52)" fg:x="5329" fg:w="4"/><text x="98.6255%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="98.3939%" y="1013" width="0.0554%" height="15" fill="rgb(215,56,7)" fg:x="5330" fg:w="3"/><text x="98.6439%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="98.3939%" y="997" width="0.0554%" height="15" fill="rgb(239,59,51)" fg:x="5330" fg:w="3"/><text x="98.6439%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.4124%" y="981" width="0.0369%" height="15" fill="rgb(209,215,4)" fg:x="5331" fg:w="2"/><text x="98.6624%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4309%" y="965" width="0.0185%" height="15" fill="rgb(221,118,39)" fg:x="5332" fg:w="1"/><text x="98.6809%" y="975.50"></text></g><g><title>[[ext4]] (6 samples, 0.11%)</title><rect x="98.3570%" y="1109" width="0.1108%" height="15" fill="rgb(236,6,44)" fg:x="5328" fg:w="6"/><text x="98.6070%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.3570%" y="1093" width="0.1108%" height="15" fill="rgb(216,122,9)" fg:x="5328" fg:w="6"/><text x="98.6070%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4493%" y="1077" width="0.0185%" height="15" fill="rgb(244,134,42)" fg:x="5333" fg:w="1"/><text x="98.6993%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4493%" y="1061" width="0.0185%" height="15" fill="rgb(209,189,35)" fg:x="5333" fg:w="1"/><text x="98.6993%" y="1071.50"></text></g><g><title>Flush (7 samples, 0.13%)</title><rect x="98.3570%" y="1237" width="0.1292%" height="15" fill="rgb(250,47,36)" fg:x="5328" fg:w="7"/><text x="98.6070%" y="1247.50"></text></g><g><title>FlushBuffer (7 samples, 0.13%)</title><rect x="98.3570%" y="1221" width="0.1292%" height="15" fill="rgb(252,112,4)" fg:x="5328" fg:w="7"/><text x="98.6070%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (7 samples, 0.13%)</title><rect x="98.3570%" y="1205" width="0.1292%" height="15" fill="rgb(221,79,51)" fg:x="5328" fg:w="7"/><text x="98.6070%" y="1215.50"></text></g><g><title>__GI___libc_write (7 samples, 0.13%)</title><rect x="98.3570%" y="1189" width="0.1292%" height="15" fill="rgb(232,65,53)" fg:x="5328" fg:w="7"/><text x="98.6070%" y="1199.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="98.3570%" y="1173" width="0.1292%" height="15" fill="rgb(211,37,7)" fg:x="5328" fg:w="7"/><text x="98.6070%" y="1183.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="98.3570%" y="1157" width="0.1292%" height="15" fill="rgb(234,221,18)" fg:x="5328" fg:w="7"/><text x="98.6070%" y="1167.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="98.3570%" y="1141" width="0.1292%" height="15" fill="rgb(220,158,26)" fg:x="5328" fg:w="7"/><text x="98.6070%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.13%)</title><rect x="98.3570%" y="1125" width="0.1292%" height="15" fill="rgb(220,70,6)" fg:x="5328" fg:w="7"/><text x="98.6070%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4678%" y="1109" width="0.0185%" height="15" fill="rgb(250,39,48)" fg:x="5334" fg:w="1"/><text x="98.7178%" y="1119.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (22 samples, 0.41%)</title><rect x="98.0986%" y="1301" width="0.4061%" height="15" fill="rgb(206,40,27)" fg:x="5314" fg:w="22"/><text x="98.3486%" y="1311.50"></text></g><g><title>leveldb::BuildTable (22 samples, 0.41%)</title><rect x="98.0986%" y="1285" width="0.4061%" height="15" fill="rgb(247,80,36)" fg:x="5314" fg:w="22"/><text x="98.3486%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Add (19 samples, 0.35%)</title><rect x="98.1540%" y="1269" width="0.3507%" height="15" fill="rgb(222,9,20)" fg:x="5317" fg:w="19"/><text x="98.4040%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Flush (8 samples, 0.15%)</title><rect x="98.3570%" y="1253" width="0.1477%" height="15" fill="rgb(217,26,45)" fg:x="5328" fg:w="8"/><text x="98.6070%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.02%)</title><rect x="98.4862%" y="1237" width="0.0185%" height="15" fill="rgb(221,67,14)" fg:x="5335" fg:w="1"/><text x="98.7362%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="98.4862%" y="1221" width="0.0185%" height="15" fill="rgb(248,100,24)" fg:x="5335" fg:w="1"/><text x="98.7362%" y="1231.50"></text></g><g><title>Append (1 samples, 0.02%)</title><rect x="98.4862%" y="1205" width="0.0185%" height="15" fill="rgb(230,187,16)" fg:x="5335" fg:w="1"/><text x="98.7362%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="98.4862%" y="1189" width="0.0185%" height="15" fill="rgb(205,108,13)" fg:x="5335" fg:w="1"/><text x="98.7362%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="98.4862%" y="1173" width="0.0185%" height="15" fill="rgb(235,71,51)" fg:x="5335" fg:w="1"/><text x="98.7362%" y="1183.50"></text></g><g><title>leveldb::MemTable::Unref (1 samples, 0.02%)</title><rect x="98.5047%" y="1301" width="0.0185%" height="15" fill="rgb(251,172,48)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1311.50"></text></g><g><title>leveldb::MemTable::~MemTable (1 samples, 0.02%)</title><rect x="98.5047%" y="1285" width="0.0185%" height="15" fill="rgb(240,96,49)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1295.50"></text></g><g><title>leveldb::Arena::~Arena (1 samples, 0.02%)</title><rect x="98.5047%" y="1269" width="0.0185%" height="15" fill="rgb(235,46,36)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="98.5047%" y="1253" width="0.0185%" height="15" fill="rgb(244,3,49)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1263.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="98.5047%" y="1237" width="0.0185%" height="15" fill="rgb(206,78,54)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1247.50"></text></g><g><title>systrim.constprop.0 (1 samples, 0.02%)</title><rect x="98.5047%" y="1221" width="0.0185%" height="15" fill="rgb(208,85,42)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1231.50"></text></g><g><title>__default_morecore@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="98.5047%" y="1205" width="0.0185%" height="15" fill="rgb(219,196,21)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1215.50"></text></g><g><title>__sbrk (1 samples, 0.02%)</title><rect x="98.5047%" y="1189" width="0.0185%" height="15" fill="rgb(238,19,9)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1199.50"></text></g><g><title>__brk (1 samples, 0.02%)</title><rect x="98.5047%" y="1173" width="0.0185%" height="15" fill="rgb(206,86,13)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.5047%" y="1157" width="0.0185%" height="15" fill="rgb(214,123,40)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.5047%" y="1141" width="0.0185%" height="15" fill="rgb(243,53,5)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.5047%" y="1125" width="0.0185%" height="15" fill="rgb(254,186,31)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.5047%" y="1109" width="0.0185%" height="15" fill="rgb(221,216,25)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.5047%" y="1093" width="0.0185%" height="15" fill="rgb(248,107,42)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.5047%" y="1077" width="0.0185%" height="15" fill="rgb(221,85,43)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.5047%" y="1061" width="0.0185%" height="15" fill="rgb(225,34,24)" fg:x="5336" fg:w="1"/><text x="98.7547%" y="1071.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.5232%" y="1285" width="0.0185%" height="15" fill="rgb(211,119,1)" fg:x="5337" fg:w="1"/><text x="98.7732%" y="1295.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.5232%" y="1269" width="0.0185%" height="15" fill="rgb(254,216,46)" fg:x="5337" fg:w="1"/><text x="98.7732%" y="1279.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="98.5416%" y="1269" width="0.0185%" height="15" fill="rgb(238,11,38)" fg:x="5338" fg:w="1"/><text x="98.7916%" y="1279.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="98.5416%" y="1253" width="0.0185%" height="15" fill="rgb(233,50,15)" fg:x="5338" fg:w="1"/><text x="98.7916%" y="1263.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (1 samples, 0.02%)</title><rect x="98.5416%" y="1237" width="0.0185%" height="15" fill="rgb(217,181,29)" fg:x="5338" fg:w="1"/><text x="98.7916%" y="1247.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.5601%" y="1269" width="0.0185%" height="15" fill="rgb(214,56,3)" fg:x="5339" fg:w="1"/><text x="98.8101%" y="1279.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="98.5601%" y="1253" width="0.0185%" height="15" fill="rgb(230,69,45)" fg:x="5339" fg:w="1"/><text x="98.8101%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="98.5785%" y="1237" width="0.0185%" height="15" fill="rgb(224,201,50)" fg:x="5340" fg:w="1"/><text x="98.8285%" y="1247.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.5970%" y="1125" width="0.1108%" height="15" fill="rgb(217,228,18)" fg:x="5341" fg:w="6"/><text x="98.8470%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.5970%" y="1109" width="0.1108%" height="15" fill="rgb(239,33,44)" fg:x="5341" fg:w="6"/><text x="98.8470%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.5970%" y="1093" width="0.1108%" height="15" fill="rgb(248,210,23)" fg:x="5341" fg:w="6"/><text x="98.8470%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.5970%" y="1077" width="0.1108%" height="15" fill="rgb(253,135,8)" fg:x="5341" fg:w="6"/><text x="98.8470%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.5970%" y="1061" width="0.1108%" height="15" fill="rgb(217,98,21)" fg:x="5341" fg:w="6"/><text x="98.8470%" y="1071.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.5970%" y="1045" width="0.1108%" height="15" fill="rgb(253,130,21)" fg:x="5341" fg:w="6"/><text x="98.8470%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="98.6155%" y="1029" width="0.0923%" height="15" fill="rgb(207,81,54)" fg:x="5342" fg:w="5"/><text x="98.8655%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.6339%" y="1013" width="0.0738%" height="15" fill="rgb(232,48,33)" fg:x="5343" fg:w="4"/><text x="98.8839%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="98.6524%" y="997" width="0.0554%" height="15" fill="rgb(211,9,35)" fg:x="5344" fg:w="3"/><text x="98.9024%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6893%" y="981" width="0.0185%" height="15" fill="rgb(205,152,21)" fg:x="5346" fg:w="1"/><text x="98.9393%" y="991.50"></text></g><g><title>leveldb::Arena::Allocate (7 samples, 0.13%)</title><rect x="98.5970%" y="1237" width="0.1292%" height="15" fill="rgb(249,21,27)" fg:x="5341" fg:w="7"/><text x="98.8470%" y="1247.50"></text></g><g><title>leveldb::Arena::AllocateFallback (7 samples, 0.13%)</title><rect x="98.5970%" y="1221" width="0.1292%" height="15" fill="rgb(252,29,24)" fg:x="5341" fg:w="7"/><text x="98.8470%" y="1231.50"></text></g><g><title>leveldb::Arena::AllocateFallback (7 samples, 0.13%)</title><rect x="98.5970%" y="1205" width="0.1292%" height="15" fill="rgb(230,130,50)" fg:x="5341" fg:w="7"/><text x="98.8470%" y="1215.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (7 samples, 0.13%)</title><rect x="98.5970%" y="1189" width="0.1292%" height="15" fill="rgb(239,144,14)" fg:x="5341" fg:w="7"/><text x="98.8470%" y="1199.50"></text></g><g><title>operator new (7 samples, 0.13%)</title><rect x="98.5970%" y="1173" width="0.1292%" height="15" fill="rgb(227,111,50)" fg:x="5341" fg:w="7"/><text x="98.8470%" y="1183.50"></text></g><g><title>malloc (7 samples, 0.13%)</title><rect x="98.5970%" y="1157" width="0.1292%" height="15" fill="rgb(254,84,20)" fg:x="5341" fg:w="7"/><text x="98.8470%" y="1167.50"></text></g><g><title>_int_malloc (7 samples, 0.13%)</title><rect x="98.5970%" y="1141" width="0.1292%" height="15" fill="rgb(232,90,48)" fg:x="5341" fg:w="7"/><text x="98.8470%" y="1151.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="98.7078%" y="1125" width="0.0185%" height="15" fill="rgb(253,63,47)" fg:x="5347" fg:w="1"/><text x="98.9578%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7078%" y="1109" width="0.0185%" height="15" fill="rgb(251,146,35)" fg:x="5347" fg:w="1"/><text x="98.9578%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7078%" y="1093" width="0.0185%" height="15" fill="rgb(229,192,35)" fg:x="5347" fg:w="1"/><text x="98.9578%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7078%" y="1077" width="0.0185%" height="15" fill="rgb(225,68,9)" fg:x="5347" fg:w="1"/><text x="98.9578%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7078%" y="1061" width="0.0185%" height="15" fill="rgb(214,97,34)" fg:x="5347" fg:w="1"/><text x="98.9578%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7078%" y="1045" width="0.0185%" height="15" fill="rgb(253,31,26)" fg:x="5347" fg:w="1"/><text x="98.9578%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7078%" y="1029" width="0.0185%" height="15" fill="rgb(225,151,47)" fg:x="5347" fg:w="1"/><text x="98.9578%" y="1039.50"></text></g><g><title>leveldb::GetVarint32 (1 samples, 0.02%)</title><rect x="98.7262%" y="1237" width="0.0185%" height="15" fill="rgb(206,185,9)" fg:x="5348" fg:w="1"/><text x="98.9762%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="98.7447%" y="1237" width="0.0185%" height="15" fill="rgb(249,65,17)" fg:x="5349" fg:w="1"/><text x="98.9947%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.7632%" y="1221" width="0.0185%" height="15" fill="rgb(220,110,10)" fg:x="5350" fg:w="1"/><text x="99.0132%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (6 samples, 0.11%)</title><rect x="98.7816%" y="1221" width="0.1108%" height="15" fill="rgb(222,198,49)" fg:x="5351" fg:w="6"/><text x="99.0316%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.8739%" y="1205" width="0.0185%" height="15" fill="rgb(239,81,13)" fg:x="5356" fg:w="1"/><text x="99.1239%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (1 samples, 0.02%)</title><rect x="98.8924%" y="1221" width="0.0185%" height="15" fill="rgb(216,128,11)" fg:x="5357" fg:w="1"/><text x="99.1424%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.8924%" y="1205" width="0.0185%" height="15" fill="rgb(247,156,8)" fg:x="5357" fg:w="1"/><text x="99.1424%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.8924%" y="1189" width="0.0185%" height="15" fill="rgb(219,173,1)" fg:x="5357" fg:w="1"/><text x="99.1424%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="98.9293%" y="1189" width="0.0185%" height="15" fill="rgb(227,42,24)" fg:x="5359" fg:w="1"/><text x="99.1793%" y="1199.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="98.9293%" y="1173" width="0.0185%" height="15" fill="rgb(253,219,50)" fg:x="5359" fg:w="1"/><text x="99.1793%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="98.9478%" y="1189" width="0.0369%" height="15" fill="rgb(215,191,54)" fg:x="5360" fg:w="2"/><text x="99.1978%" y="1199.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="98.9662%" y="1173" width="0.0185%" height="15" fill="rgb(238,83,12)" fg:x="5361" fg:w="1"/><text x="99.2162%" y="1183.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="98.9847%" y="1189" width="0.0185%" height="15" fill="rgb(205,124,9)" fg:x="5362" fg:w="1"/><text x="99.2347%" y="1199.50"></text></g><g><title>leveldb::Arena::Allocate (1 samples, 0.02%)</title><rect x="98.9847%" y="1173" width="0.0185%" height="15" fill="rgb(253,174,7)" fg:x="5362" fg:w="1"/><text x="99.2347%" y="1183.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="99.0216%" y="1173" width="0.0185%" height="15" fill="rgb(206,134,49)" fg:x="5364" fg:w="1"/><text x="99.2716%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="99.0401%" y="1157" width="0.0738%" height="15" fill="rgb(221,89,20)" fg:x="5365" fg:w="4"/><text x="99.2901%" y="1167.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="99.0954%" y="1141" width="0.0185%" height="15" fill="rgb(240,205,13)" fg:x="5368" fg:w="1"/><text x="99.3454%" y="1151.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (7 samples, 0.13%)</title><rect x="99.0401%" y="1173" width="0.1292%" height="15" fill="rgb(237,174,32)" fg:x="5365" fg:w="7"/><text x="99.2901%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.06%)</title><rect x="99.1139%" y="1157" width="0.0554%" height="15" fill="rgb(226,12,15)" fg:x="5369" fg:w="3"/><text x="99.3639%" y="1167.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.04%)</title><rect x="99.1324%" y="1141" width="0.0369%" height="15" fill="rgb(245,160,52)" fg:x="5370" fg:w="2"/><text x="99.3824%" y="1151.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="99.1508%" y="1125" width="0.0185%" height="15" fill="rgb(253,80,21)" fg:x="5371" fg:w="1"/><text x="99.4008%" y="1135.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (5 samples, 0.09%)</title><rect x="99.1693%" y="1173" width="0.0923%" height="15" fill="rgb(231,225,22)" fg:x="5372" fg:w="5"/><text x="99.4193%" y="1183.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.04%)</title><rect x="99.2247%" y="1157" width="0.0369%" height="15" fill="rgb(253,185,12)" fg:x="5375" fg:w="2"/><text x="99.4747%" y="1167.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.04%)</title><rect x="99.2247%" y="1141" width="0.0369%" height="15" fill="rgb(234,197,21)" fg:x="5375" fg:w="2"/><text x="99.4747%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (15 samples, 0.28%)</title><rect x="99.0031%" y="1189" width="0.2769%" height="15" fill="rgb(210,47,30)" fg:x="5363" fg:w="15"/><text x="99.2531%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="99.2616%" y="1173" width="0.0185%" height="15" fill="rgb(246,139,27)" fg:x="5377" fg:w="1"/><text x="99.5116%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (22 samples, 0.41%)</title><rect x="98.9108%" y="1205" width="0.4061%" height="15" fill="rgb(226,130,16)" fg:x="5358" fg:w="22"/><text x="99.1608%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (2 samples, 0.04%)</title><rect x="99.2800%" y="1189" width="0.0369%" height="15" fill="rgb(237,208,20)" fg:x="5378" fg:w="2"/><text x="99.5300%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="99.2985%" y="1173" width="0.0185%" height="15" fill="rgb(245,186,28)" fg:x="5379" fg:w="1"/><text x="99.5485%" y="1183.50"></text></g><g><title>leveldb::MemTable::Add (41 samples, 0.76%)</title><rect x="98.5785%" y="1253" width="0.7569%" height="15" fill="rgb(238,105,39)" fg:x="5340" fg:w="41"/><text x="98.8285%" y="1263.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (31 samples, 0.57%)</title><rect x="98.7632%" y="1237" width="0.5723%" height="15" fill="rgb(253,228,11)" fg:x="5350" fg:w="31"/><text x="99.0132%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (23 samples, 0.42%)</title><rect x="98.9108%" y="1221" width="0.4246%" height="15" fill="rgb(224,136,38)" fg:x="5358" fg:w="23"/><text x="99.1608%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="99.3170%" y="1205" width="0.0185%" height="15" fill="rgb(211,3,25)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1215.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="99.3170%" y="1189" width="0.0185%" height="15" fill="rgb(238,66,34)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1199.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="99.3170%" y="1173" width="0.0185%" height="15" fill="rgb(223,188,11)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1157" width="0.0185%" height="15" fill="rgb(221,10,35)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1141" width="0.0185%" height="15" fill="rgb(223,18,44)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1125" width="0.0185%" height="15" fill="rgb(220,97,41)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1109" width="0.0185%" height="15" fill="rgb(206,95,45)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1093" width="0.0185%" height="15" fill="rgb(209,96,13)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1077" width="0.0185%" height="15" fill="rgb(237,39,34)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1061" width="0.0185%" height="15" fill="rgb(213,49,47)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1045" width="0.0185%" height="15" fill="rgb(205,107,27)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1029" width="0.0185%" height="15" fill="rgb(212,142,9)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3170%" y="1013" width="0.0185%" height="15" fill="rgb(226,182,0)" fg:x="5380" fg:w="1"/><text x="99.5670%" y="1023.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (45 samples, 0.83%)</title><rect x="98.5232%" y="1301" width="0.8307%" height="15" fill="rgb(231,3,53)" fg:x="5337" fg:w="45"/><text x="98.7732%" y="1311.50"></text></g><g><title>leveldb::WriteBatch::Iterate (44 samples, 0.81%)</title><rect x="98.5416%" y="1285" width="0.8123%" height="15" fill="rgb(246,111,28)" fg:x="5338" fg:w="44"/><text x="98.7916%" y="1295.50"></text></g><g><title>leveldb::WriteBatch::Iterate (42 samples, 0.78%)</title><rect x="98.5785%" y="1269" width="0.7753%" height="15" fill="rgb(254,183,7)" fg:x="5340" fg:w="42"/><text x="98.8285%" y="1279.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="99.3354%" y="1253" width="0.0185%" height="15" fill="rgb(247,177,28)" fg:x="5381" fg:w="1"/><text x="99.5854%" y="1263.50"></text></g><g><title>leveldb::WriteBatchInternal::SetContents (3 samples, 0.06%)</title><rect x="99.3539%" y="1301" width="0.0554%" height="15" fill="rgb(244,43,1)" fg:x="5382" fg:w="3"/><text x="99.6039%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (3 samples, 0.06%)</title><rect x="99.3539%" y="1285" width="0.0554%" height="15" fill="rgb(207,2,35)" fg:x="5382" fg:w="3"/><text x="99.6039%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (3 samples, 0.06%)</title><rect x="99.3539%" y="1269" width="0.0554%" height="15" fill="rgb(213,83,22)" fg:x="5382" fg:w="3"/><text x="99.6039%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.06%)</title><rect x="99.3539%" y="1253" width="0.0554%" height="15" fill="rgb(246,212,13)" fg:x="5382" fg:w="3"/><text x="99.6039%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.06%)</title><rect x="99.3539%" y="1237" width="0.0554%" height="15" fill="rgb(213,127,46)" fg:x="5382" fg:w="3"/><text x="99.6039%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.06%)</title><rect x="99.3539%" y="1221" width="0.0554%" height="15" fill="rgb(219,215,39)" fg:x="5382" fg:w="3"/><text x="99.6039%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.06%)</title><rect x="99.3539%" y="1205" width="0.0554%" height="15" fill="rgb(227,99,17)" fg:x="5382" fg:w="3"/><text x="99.6039%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.06%)</title><rect x="99.3539%" y="1189" width="0.0554%" height="15" fill="rgb(208,155,18)" fg:x="5382" fg:w="3"/><text x="99.6039%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.3539%" y="1173" width="0.0554%" height="15" fill="rgb(223,204,38)" fg:x="5382" fg:w="3"/><text x="99.6039%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1157" width="0.0369%" height="15" fill="rgb(212,114,21)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1141" width="0.0369%" height="15" fill="rgb(250,74,13)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1125" width="0.0369%" height="15" fill="rgb(234,7,1)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1109" width="0.0369%" height="15" fill="rgb(207,138,31)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1093" width="0.0369%" height="15" fill="rgb(215,186,42)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1077" width="0.0369%" height="15" fill="rgb(229,205,49)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1061" width="0.0369%" height="15" fill="rgb(216,156,32)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1045" width="0.0369%" height="15" fill="rgb(238,7,21)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1029" width="0.0369%" height="15" fill="rgb(249,190,22)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.3723%" y="1013" width="0.0369%" height="15" fill="rgb(253,51,31)" fg:x="5383" fg:w="2"/><text x="99.6223%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.3908%" y="997" width="0.0185%" height="15" fill="rgb(237,90,54)" fg:x="5384" fg:w="1"/><text x="99.6408%" y="1007.50"></text></g><g><title>leveldb::log::Reader::ReadPhysicalRecord (2 samples, 0.04%)</title><rect x="99.4093%" y="1285" width="0.0369%" height="15" fill="rgb(250,214,33)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1295.50"></text></g><g><title>Read (2 samples, 0.04%)</title><rect x="99.4093%" y="1269" width="0.0369%" height="15" fill="rgb(237,10,49)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixSequentialFile::Read (2 samples, 0.04%)</title><rect x="99.4093%" y="1253" width="0.0369%" height="15" fill="rgb(241,56,36)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1263.50"></text></g><g><title>read (2 samples, 0.04%)</title><rect x="99.4093%" y="1237" width="0.0369%" height="15" fill="rgb(227,164,12)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4093%" y="1221" width="0.0369%" height="15" fill="rgb(249,149,35)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4093%" y="1205" width="0.0369%" height="15" fill="rgb(238,227,50)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4093%" y="1189" width="0.0369%" height="15" fill="rgb(235,102,45)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4093%" y="1173" width="0.0369%" height="15" fill="rgb(211,10,38)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4093%" y="1157" width="0.0369%" height="15" fill="rgb(219,77,48)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4093%" y="1141" width="0.0369%" height="15" fill="rgb(246,6,15)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4093%" y="1125" width="0.0369%" height="15" fill="rgb(207,220,2)" fg:x="5385" fg:w="2"/><text x="99.6593%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4277%" y="1109" width="0.0185%" height="15" fill="rgb(242,48,14)" fg:x="5386" fg:w="1"/><text x="99.6777%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.06%)</title><rect x="99.4462%" y="1253" width="0.0554%" height="15" fill="rgb(218,19,27)" fg:x="5387" fg:w="3"/><text x="99.6962%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.06%)</title><rect x="99.4462%" y="1237" width="0.0554%" height="15" fill="rgb(228,0,35)" fg:x="5387" fg:w="3"/><text x="99.6962%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.06%)</title><rect x="99.4462%" y="1221" width="0.0554%" height="15" fill="rgb(244,142,54)" fg:x="5387" fg:w="3"/><text x="99.6962%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.06%)</title><rect x="99.4462%" y="1205" width="0.0554%" height="15" fill="rgb(243,217,40)" fg:x="5387" fg:w="3"/><text x="99.6962%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.06%)</title><rect x="99.4462%" y="1189" width="0.0554%" height="15" fill="rgb(207,114,16)" fg:x="5387" fg:w="3"/><text x="99.6962%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4646%" y="1173" width="0.0369%" height="15" fill="rgb(224,33,25)" fg:x="5388" fg:w="2"/><text x="99.7146%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4646%" y="1157" width="0.0369%" height="15" fill="rgb(230,93,54)" fg:x="5388" fg:w="2"/><text x="99.7146%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4646%" y="1141" width="0.0369%" height="15" fill="rgb(224,56,24)" fg:x="5388" fg:w="2"/><text x="99.7146%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4646%" y="1125" width="0.0369%" height="15" fill="rgb(235,189,50)" fg:x="5388" fg:w="2"/><text x="99.7146%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.4646%" y="1109" width="0.0369%" height="15" fill="rgb(242,173,8)" fg:x="5388" fg:w="2"/><text x="99.7146%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4831%" y="1093" width="0.0185%" height="15" fill="rgb(209,206,10)" fg:x="5389" fg:w="1"/><text x="99.7331%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4831%" y="1077" width="0.0185%" height="15" fill="rgb(213,182,44)" fg:x="5389" fg:w="1"/><text x="99.7331%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4831%" y="1061" width="0.0185%" height="15" fill="rgb(243,51,15)" fg:x="5389" fg:w="1"/><text x="99.7331%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4831%" y="1045" width="0.0185%" height="15" fill="rgb(241,13,14)" fg:x="5389" fg:w="1"/><text x="99.7331%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4831%" y="1029" width="0.0185%" height="15" fill="rgb(239,147,24)" fg:x="5389" fg:w="1"/><text x="99.7331%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4831%" y="1013" width="0.0185%" height="15" fill="rgb(223,129,16)" fg:x="5389" fg:w="1"/><text x="99.7331%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4831%" y="997" width="0.0185%" height="15" fill="rgb(209,169,13)" fg:x="5389" fg:w="1"/><text x="99.7331%" y="1007.50"></text></g><g><title>CompleteChainstateInitialization (79 samples, 1.46%)</title><rect x="98.0986%" y="1413" width="1.4584%" height="15" fill="rgb(235,159,41)" fg:x="5314" fg:w="79"/><text x="98.3486%" y="1423.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (79 samples, 1.46%)</title><rect x="98.0986%" y="1397" width="1.4584%" height="15" fill="rgb(223,219,48)" fg:x="5314" fg:w="79"/><text x="98.3486%" y="1407.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (79 samples, 1.46%)</title><rect x="98.0986%" y="1381" width="1.4584%" height="15" fill="rgb(236,80,13)" fg:x="5314" fg:w="79"/><text x="98.3486%" y="1391.50"></text></g><g><title>CDBWrapper::CDBWrapper (79 samples, 1.46%)</title><rect x="98.0986%" y="1365" width="1.4584%" height="15" fill="rgb(213,5,6)" fg:x="5314" fg:w="79"/><text x="98.3486%" y="1375.50"></text></g><g><title>leveldb::DB::Open (79 samples, 1.46%)</title><rect x="98.0986%" y="1349" width="1.4584%" height="15" fill="rgb(205,59,21)" fg:x="5314" fg:w="79"/><text x="98.3486%" y="1359.50"></text></g><g><title>leveldb::DBImpl::Recover (79 samples, 1.46%)</title><rect x="98.0986%" y="1333" width="1.4584%" height="15" fill="rgb(247,137,35)" fg:x="5314" fg:w="79"/><text x="98.3486%" y="1343.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (79 samples, 1.46%)</title><rect x="98.0986%" y="1317" width="1.4584%" height="15" fill="rgb(242,208,28)" fg:x="5314" fg:w="79"/><text x="98.3486%" y="1327.50"></text></g><g><title>leveldb::log::Reader::ReadRecord (8 samples, 0.15%)</title><rect x="99.4093%" y="1301" width="0.1477%" height="15" fill="rgb(245,62,25)" fg:x="5385" fg:w="8"/><text x="99.6593%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (6 samples, 0.11%)</title><rect x="99.4462%" y="1285" width="0.1108%" height="15" fill="rgb(233,99,54)" fg:x="5387" fg:w="6"/><text x="99.6962%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (6 samples, 0.11%)</title><rect x="99.4462%" y="1269" width="0.1108%" height="15" fill="rgb(213,10,37)" fg:x="5387" fg:w="6"/><text x="99.6962%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.06%)</title><rect x="99.5016%" y="1253" width="0.0554%" height="15" fill="rgb(235,143,30)" fg:x="5390" fg:w="3"/><text x="99.7516%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.06%)</title><rect x="99.5016%" y="1237" width="0.0554%" height="15" fill="rgb(250,146,33)" fg:x="5390" fg:w="3"/><text x="99.7516%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.06%)</title><rect x="99.5016%" y="1221" width="0.0554%" height="15" fill="rgb(226,198,42)" fg:x="5390" fg:w="3"/><text x="99.7516%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.06%)</title><rect x="99.5016%" y="1205" width="0.0554%" height="15" fill="rgb(222,55,6)" fg:x="5390" fg:w="3"/><text x="99.7516%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.5016%" y="1189" width="0.0554%" height="15" fill="rgb(213,224,31)" fg:x="5390" fg:w="3"/><text x="99.7516%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.5200%" y="1173" width="0.0369%" height="15" fill="rgb(226,103,35)" fg:x="5391" fg:w="2"/><text x="99.7700%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.5200%" y="1157" width="0.0369%" height="15" fill="rgb(205,66,45)" fg:x="5391" fg:w="2"/><text x="99.7700%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5385%" y="1141" width="0.0185%" height="15" fill="rgb(226,51,42)" fg:x="5392" fg:w="1"/><text x="99.7885%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5385%" y="1125" width="0.0185%" height="15" fill="rgb(206,69,1)" fg:x="5392" fg:w="1"/><text x="99.7885%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5385%" y="1109" width="0.0185%" height="15" fill="rgb(213,228,47)" fg:x="5392" fg:w="1"/><text x="99.7885%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5385%" y="1093" width="0.0185%" height="15" fill="rgb(224,204,18)" fg:x="5392" fg:w="1"/><text x="99.7885%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5385%" y="1077" width="0.0185%" height="15" fill="rgb(253,187,47)" fg:x="5392" fg:w="1"/><text x="99.7885%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5385%" y="1061" width="0.0185%" height="15" fill="rgb(232,61,2)" fg:x="5392" fg:w="1"/><text x="99.7885%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5385%" y="1045" width="0.0185%" height="15" fill="rgb(213,132,35)" fg:x="5392" fg:w="1"/><text x="99.7885%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5385%" y="1029" width="0.0185%" height="15" fill="rgb(247,33,21)" fg:x="5392" fg:w="1"/><text x="99.7885%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5385%" y="1013" width="0.0185%" height="15" fill="rgb(233,71,46)" fg:x="5392" fg:w="1"/><text x="99.7885%" y="1023.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="99.5570%" y="1301" width="0.0185%" height="15" fill="rgb(222,173,43)" fg:x="5393" fg:w="1"/><text x="99.8070%" y="1311.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="99.5570%" y="1285" width="0.0185%" height="15" fill="rgb(249,218,47)" fg:x="5393" fg:w="1"/><text x="99.8070%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="99.5570%" y="1269" width="0.0185%" height="15" fill="rgb(254,185,48)" fg:x="5393" fg:w="1"/><text x="99.8070%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="99.5570%" y="1253" width="0.0185%" height="15" fill="rgb(252,165,50)" fg:x="5393" fg:w="1"/><text x="99.8070%" y="1263.50"></text></g><g><title>SetDataIterator (1 samples, 0.02%)</title><rect x="99.5754%" y="1237" width="0.0185%" height="15" fill="rgb(206,219,6)" fg:x="5394" fg:w="1"/><text x="99.8254%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Set (1 samples, 0.02%)</title><rect x="99.5754%" y="1221" width="0.0185%" height="15" fill="rgb(212,212,45)" fg:x="5394" fg:w="1"/><text x="99.8254%" y="1231.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="99.5754%" y="1205" width="0.0185%" height="15" fill="rgb(221,31,9)" fg:x="5394" fg:w="1"/><text x="99.8254%" y="1215.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="99.5754%" y="1189" width="0.0185%" height="15" fill="rgb(234,198,39)" fg:x="5394" fg:w="1"/><text x="99.8254%" y="1199.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="99.5754%" y="1173" width="0.0185%" height="15" fill="rgb(252,145,46)" fg:x="5394" fg:w="1"/><text x="99.8254%" y="1183.50"></text></g><g><title>leveldb::crc32c::Value (2 samples, 0.04%)</title><rect x="99.5939%" y="1205" width="0.0369%" height="15" fill="rgb(237,149,0)" fg:x="5395" fg:w="2"/><text x="99.8439%" y="1215.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.04%)</title><rect x="99.5939%" y="1189" width="0.0369%" height="15" fill="rgb(229,65,5)" fg:x="5395" fg:w="2"/><text x="99.8439%" y="1199.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="99.6123%" y="1173" width="0.0185%" height="15" fill="rgb(235,60,36)" fg:x="5396" fg:w="1"/><text x="99.8623%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (6 samples, 0.11%)</title><rect x="99.5570%" y="1333" width="0.1108%" height="15" fill="rgb(222,47,18)" fg:x="5393" fg:w="6"/><text x="99.8070%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (6 samples, 0.11%)</title><rect x="99.5570%" y="1317" width="0.1108%" height="15" fill="rgb(235,114,22)" fg:x="5393" fg:w="6"/><text x="99.8070%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (5 samples, 0.09%)</title><rect x="99.5754%" y="1301" width="0.0923%" height="15" fill="rgb(209,167,11)" fg:x="5394" fg:w="5"/><text x="99.8254%" y="1311.50"></text></g><g><title>SkipEmptyDataBlocksForward (5 samples, 0.09%)</title><rect x="99.5754%" y="1285" width="0.0923%" height="15" fill="rgb(251,73,18)" fg:x="5394" fg:w="5"/><text x="99.8254%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (5 samples, 0.09%)</title><rect x="99.5754%" y="1269" width="0.0923%" height="15" fill="rgb(217,60,17)" fg:x="5394" fg:w="5"/><text x="99.8254%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (5 samples, 0.09%)</title><rect x="99.5754%" y="1253" width="0.0923%" height="15" fill="rgb(224,36,37)" fg:x="5394" fg:w="5"/><text x="99.8254%" y="1263.50"></text></g><g><title>leveldb::Table::BlockReader (4 samples, 0.07%)</title><rect x="99.5939%" y="1237" width="0.0738%" height="15" fill="rgb(211,21,32)" fg:x="5395" fg:w="4"/><text x="99.8439%" y="1247.50"></text></g><g><title>leveldb::ReadBlock (4 samples, 0.07%)</title><rect x="99.5939%" y="1221" width="0.0738%" height="15" fill="rgb(231,55,48)" fg:x="5395" fg:w="4"/><text x="99.8439%" y="1231.50"></text></g><g><title>operator new (2 samples, 0.04%)</title><rect x="99.6308%" y="1205" width="0.0369%" height="15" fill="rgb(227,42,18)" fg:x="5397" fg:w="2"/><text x="99.8808%" y="1215.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="99.6308%" y="1189" width="0.0369%" height="15" fill="rgb(217,2,27)" fg:x="5397" fg:w="2"/><text x="99.8808%" y="1199.50"></text></g><g><title>_int_malloc (2 samples, 0.04%)</title><rect x="99.6308%" y="1173" width="0.0369%" height="15" fill="rgb(251,138,23)" fg:x="5397" fg:w="2"/><text x="99.8808%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6308%" y="1157" width="0.0369%" height="15" fill="rgb(226,184,11)" fg:x="5397" fg:w="2"/><text x="99.8808%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6308%" y="1141" width="0.0369%" height="15" fill="rgb(242,142,12)" fg:x="5397" fg:w="2"/><text x="99.8808%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6308%" y="1125" width="0.0369%" height="15" fill="rgb(234,187,18)" fg:x="5397" fg:w="2"/><text x="99.8808%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6308%" y="1109" width="0.0369%" height="15" fill="rgb(237,44,42)" fg:x="5397" fg:w="2"/><text x="99.8808%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6308%" y="1093" width="0.0369%" height="15" fill="rgb(211,90,23)" fg:x="5397" fg:w="2"/><text x="99.8808%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6308%" y="1077" width="0.0369%" height="15" fill="rgb(207,81,18)" fg:x="5397" fg:w="2"/><text x="99.8808%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6493%" y="1061" width="0.0185%" height="15" fill="rgb(222,107,28)" fg:x="5398" fg:w="1"/><text x="99.8993%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6493%" y="1045" width="0.0185%" height="15" fill="rgb(237,83,52)" fg:x="5398" fg:w="1"/><text x="99.8993%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6493%" y="1029" width="0.0185%" height="15" fill="rgb(208,67,11)" fg:x="5398" fg:w="1"/><text x="99.8993%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6493%" y="1013" width="0.0185%" height="15" fill="rgb(249,157,49)" fg:x="5398" fg:w="1"/><text x="99.8993%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6493%" y="997" width="0.0185%" height="15" fill="rgb(243,200,1)" fg:x="5398" fg:w="1"/><text x="99.8993%" y="1007.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (8 samples, 0.15%)</title><rect x="99.5570%" y="1349" width="0.1477%" height="15" fill="rgb(225,162,37)" fg:x="5393" fg:w="8"/><text x="99.8070%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (2 samples, 0.04%)</title><rect x="99.6677%" y="1333" width="0.0369%" height="15" fill="rgb(242,92,13)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (2 samples, 0.04%)</title><rect x="99.6677%" y="1317" width="0.0369%" height="15" fill="rgb(220,43,36)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.04%)</title><rect x="99.6677%" y="1301" width="0.0369%" height="15" fill="rgb(213,165,48)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1311.50"></text></g><g><title>SkipEmptyDataBlocksForward (2 samples, 0.04%)</title><rect x="99.6677%" y="1285" width="0.0369%" height="15" fill="rgb(227,200,9)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (2 samples, 0.04%)</title><rect x="99.6677%" y="1269" width="0.0369%" height="15" fill="rgb(221,222,28)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (2 samples, 0.04%)</title><rect x="99.6677%" y="1253" width="0.0369%" height="15" fill="rgb(223,142,26)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1263.50"></text></g><g><title>leveldb::Table::BlockReader (2 samples, 0.04%)</title><rect x="99.6677%" y="1237" width="0.0369%" height="15" fill="rgb(243,46,9)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1247.50"></text></g><g><title>leveldb::ReadBlock (2 samples, 0.04%)</title><rect x="99.6677%" y="1221" width="0.0369%" height="15" fill="rgb(250,56,11)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1231.50"></text></g><g><title>operator new (2 samples, 0.04%)</title><rect x="99.6677%" y="1205" width="0.0369%" height="15" fill="rgb(229,113,5)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1215.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="99.6677%" y="1189" width="0.0369%" height="15" fill="rgb(244,108,28)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1199.50"></text></g><g><title>_int_malloc (2 samples, 0.04%)</title><rect x="99.6677%" y="1173" width="0.0369%" height="15" fill="rgb(242,119,50)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6677%" y="1157" width="0.0369%" height="15" fill="rgb(224,164,23)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6677%" y="1141" width="0.0369%" height="15" fill="rgb(214,227,44)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6677%" y="1125" width="0.0369%" height="15" fill="rgb(238,202,4)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6677%" y="1109" width="0.0369%" height="15" fill="rgb(213,190,30)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.6677%" y="1093" width="0.0369%" height="15" fill="rgb(239,15,2)" fg:x="5399" fg:w="2"/><text x="99.9177%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6862%" y="1077" width="0.0185%" height="15" fill="rgb(249,229,4)" fg:x="5400" fg:w="1"/><text x="99.9362%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6862%" y="1061" width="0.0185%" height="15" fill="rgb(239,75,44)" fg:x="5400" fg:w="1"/><text x="99.9362%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6862%" y="1045" width="0.0185%" height="15" fill="rgb(251,206,23)" fg:x="5400" fg:w="1"/><text x="99.9362%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6862%" y="1029" width="0.0185%" height="15" fill="rgb(215,208,0)" fg:x="5400" fg:w="1"/><text x="99.9362%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6862%" y="1013" width="0.0185%" height="15" fill="rgb(230,75,50)" fg:x="5400" fg:w="1"/><text x="99.9362%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6862%" y="997" width="0.0185%" height="15" fill="rgb(246,180,39)" fg:x="5400" fg:w="1"/><text x="99.9362%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6862%" y="981" width="0.0185%" height="15" fill="rgb(249,175,24)" fg:x="5400" fg:w="1"/><text x="99.9362%" y="991.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="99.7046%" y="1205" width="0.0185%" height="15" fill="rgb(247,176,22)" fg:x="5401" fg:w="1"/><text x="99.9546%" y="1215.50"></text></g><g><title>main (89 samples, 1.64%)</title><rect x="98.0986%" y="1525" width="1.6430%" height="15" fill="rgb(241,100,24)" fg:x="5314" fg:w="89"/><text x="98.3486%" y="1535.50"></text></g><g><title>main (89 samples, 1.64%)</title><rect x="98.0986%" y="1509" width="1.6430%" height="15" fill="rgb(233,4,35)" fg:x="5314" fg:w="89"/><text x="98.3486%" y="1519.50"></text></g><g><title>AppInitMain (89 samples, 1.64%)</title><rect x="98.0986%" y="1493" width="1.6430%" height="15" fill="rgb(211,164,46)" fg:x="5314" fg:w="89"/><text x="98.3486%" y="1503.50"></text></g><g><title>InitAndLoadChainstate (89 samples, 1.64%)</title><rect x="98.0986%" y="1477" width="1.6430%" height="15" fill="rgb(242,99,53)" fg:x="5314" fg:w="89"/><text x="98.3486%" y="1487.50"></text></g><g><title>operator (89 samples, 1.64%)</title><rect x="98.0986%" y="1461" width="1.6430%" height="15" fill="rgb(243,45,33)" fg:x="5314" fg:w="89"/><text x="98.3486%" y="1471.50"></text></g><g><title>InitAndLoadChainstate (89 samples, 1.64%)</title><rect x="98.0986%" y="1445" width="1.6430%" height="15" fill="rgb(217,55,21)" fg:x="5314" fg:w="89"/><text x="98.3486%" y="1455.50"></text></g><g><title>node::LoadChainstate (89 samples, 1.64%)</title><rect x="98.0986%" y="1429" width="1.6430%" height="15" fill="rgb(245,145,46)" fg:x="5314" fg:w="89"/><text x="98.3486%" y="1439.50"></text></g><g><title>node::CompleteChainstateInitialization (10 samples, 0.18%)</title><rect x="99.5570%" y="1413" width="0.1846%" height="15" fill="rgb(215,112,45)" fg:x="5393" fg:w="10"/><text x="99.8070%" y="1423.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (10 samples, 0.18%)</title><rect x="99.5570%" y="1397" width="0.1846%" height="15" fill="rgb(228,104,16)" fg:x="5393" fg:w="10"/><text x="99.8070%" y="1407.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (10 samples, 0.18%)</title><rect x="99.5570%" y="1381" width="0.1846%" height="15" fill="rgb(239,186,38)" fg:x="5393" fg:w="10"/><text x="99.8070%" y="1391.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (10 samples, 0.18%)</title><rect x="99.5570%" y="1365" width="0.1846%" height="15" fill="rgb(228,38,35)" fg:x="5393" fg:w="10"/><text x="99.8070%" y="1375.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (2 samples, 0.04%)</title><rect x="99.7046%" y="1349" width="0.0369%" height="15" fill="rgb(251,42,40)" fg:x="5401" fg:w="2"/><text x="99.9546%" y="1359.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="99.7046%" y="1333" width="0.0369%" height="15" fill="rgb(210,51,19)" fg:x="5401" fg:w="2"/><text x="99.9546%" y="1343.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="99.7046%" y="1317" width="0.0369%" height="15" fill="rgb(236,94,42)" fg:x="5401" fg:w="2"/><text x="99.9546%" y="1327.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="99.7046%" y="1301" width="0.0369%" height="15" fill="rgb(239,167,16)" fg:x="5401" fg:w="2"/><text x="99.9546%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="99.7046%" y="1285" width="0.0369%" height="15" fill="rgb(252,175,31)" fg:x="5401" fg:w="2"/><text x="99.9546%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="99.7046%" y="1269" width="0.0369%" height="15" fill="rgb(206,166,30)" fg:x="5401" fg:w="2"/><text x="99.9546%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="99.7046%" y="1253" width="0.0369%" height="15" fill="rgb(206,209,37)" fg:x="5401" fg:w="2"/><text x="99.9546%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="99.7046%" y="1237" width="0.0369%" height="15" fill="rgb(226,91,4)" fg:x="5401" fg:w="2"/><text x="99.9546%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="99.7046%" y="1221" width="0.0369%" height="15" fill="rgb(222,167,0)" fg:x="5401" fg:w="2"/><text x="99.9546%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7231%" y="1205" width="0.0185%" height="15" fill="rgb(211,70,14)" fg:x="5402" fg:w="1"/><text x="99.9731%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7231%" y="1189" width="0.0185%" height="15" fill="rgb(214,84,42)" fg:x="5402" fg:w="1"/><text x="99.9731%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7231%" y="1173" width="0.0185%" height="15" fill="rgb(235,157,37)" fg:x="5402" fg:w="1"/><text x="99.9731%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7231%" y="1157" width="0.0185%" height="15" fill="rgb(225,13,6)" fg:x="5402" fg:w="1"/><text x="99.9731%" y="1167.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="99.7231%" y="1141" width="0.0185%" height="15" fill="rgb(205,202,1)" fg:x="5402" fg:w="1"/><text x="99.9731%" y="1151.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="99.7416%" y="1525" width="0.0185%" height="15" fill="rgb(232,195,26)" fg:x="5403" fg:w="1"/><text x="99.9916%" y="1535.50"></text></g><g><title>bitcoind-base (976 samples, 18.02%)</title><rect x="81.8350%" y="1541" width="18.0174%" height="15" fill="rgb(208,102,26)" fg:x="4433" fg:w="976"/><text x="82.0850%" y="1551.50">bitcoind-base</text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="99.7600%" y="1525" width="0.0923%" height="15" fill="rgb(215,41,39)" fg:x="5404" fg:w="5"/><text x="100.0100%" y="1535.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="99.8339%" y="1509" width="0.0185%" height="15" fill="rgb(247,139,11)" fg:x="5408" fg:w="1"/><text x="100.0839%" y="1519.50"></text></g><g><title>perf-exec (4 samples, 0.07%)</title><rect x="99.8523%" y="1541" width="0.0738%" height="15" fill="rgb(243,99,6)" fg:x="5409" fg:w="4"/><text x="100.1023%" y="1551.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8523%" y="1525" width="0.0738%" height="15" fill="rgb(230,168,48)" fg:x="5409" fg:w="4"/><text x="100.1023%" y="1535.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8523%" y="1509" width="0.0738%" height="15" fill="rgb(238,227,13)" fg:x="5409" fg:w="4"/><text x="100.1023%" y="1519.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8523%" y="1493" width="0.0738%" height="15" fill="rgb(209,109,13)" fg:x="5409" fg:w="4"/><text x="100.1023%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8523%" y="1477" width="0.0738%" height="15" fill="rgb(228,195,1)" fg:x="5409" fg:w="4"/><text x="100.1023%" y="1487.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8523%" y="1461" width="0.0738%" height="15" fill="rgb(230,218,0)" fg:x="5409" fg:w="4"/><text x="100.1023%" y="1471.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8523%" y="1445" width="0.0738%" height="15" fill="rgb(206,1,45)" fg:x="5409" fg:w="4"/><text x="100.1023%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8523%" y="1429" width="0.0738%" height="15" fill="rgb(209,124,26)" fg:x="5409" fg:w="4"/><text x="100.1023%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8523%" y="1413" width="0.0738%" height="15" fill="rgb(220,59,8)" fg:x="5409" fg:w="4"/><text x="100.1023%" y="1423.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.8708%" y="1397" width="0.0554%" height="15" fill="rgb(251,41,37)" fg:x="5410" fg:w="3"/><text x="100.1208%" y="1407.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.8708%" y="1381" width="0.0554%" height="15" fill="rgb(239,152,21)" fg:x="5410" fg:w="3"/><text x="100.1208%" y="1391.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.8708%" y="1365" width="0.0554%" height="15" fill="rgb(226,32,1)" fg:x="5410" fg:w="3"/><text x="100.1208%" y="1375.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.8708%" y="1349" width="0.0554%" height="15" fill="rgb(230,154,36)" fg:x="5410" fg:w="3"/><text x="100.1208%" y="1359.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.8708%" y="1333" width="0.0554%" height="15" fill="rgb(208,228,43)" fg:x="5410" fg:w="3"/><text x="100.1208%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.8708%" y="1317" width="0.0554%" height="15" fill="rgb(214,203,3)" fg:x="5410" fg:w="3"/><text x="100.1208%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.8708%" y="1301" width="0.0554%" height="15" fill="rgb(207,149,29)" fg:x="5410" fg:w="3"/><text x="100.1208%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.8708%" y="1285" width="0.0554%" height="15" fill="rgb(250,105,7)" fg:x="5410" fg:w="3"/><text x="100.1208%" y="1295.50"></text></g><g><title>all (5,417 samples, 100%)</title><rect x="0.0000%" y="1557" width="100.0000%" height="15" fill="rgb(232,222,16)" fg:x="0" fg:w="5417"/><text x="0.2500%" y="1567.50"></text></g><g><title>taskset (4 samples, 0.07%)</title><rect x="99.9262%" y="1541" width="0.0738%" height="15" fill="rgb(209,32,24)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1551.50"></text></g><g><title>_start (4 samples, 0.07%)</title><rect x="99.9262%" y="1525" width="0.0738%" height="15" fill="rgb(225,13,6)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1535.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (4 samples, 0.07%)</title><rect x="99.9262%" y="1509" width="0.0738%" height="15" fill="rgb(245,226,26)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1519.50"></text></g><g><title>__libc_start_call_main (4 samples, 0.07%)</title><rect x="99.9262%" y="1493" width="0.0738%" height="15" fill="rgb(229,178,27)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1503.50"></text></g><g><title>main (4 samples, 0.07%)</title><rect x="99.9262%" y="1477" width="0.0738%" height="15" fill="rgb(205,227,28)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1487.50"></text></g><g><title>do_taskset (4 samples, 0.07%)</title><rect x="99.9262%" y="1461" width="0.0738%" height="15" fill="rgb(210,191,45)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1471.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (4 samples, 0.07%)</title><rect x="99.9262%" y="1445" width="0.0738%" height="15" fill="rgb(206,124,16)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1429" width="0.0738%" height="15" fill="rgb(210,162,0)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1413" width="0.0738%" height="15" fill="rgb(211,54,38)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1397" width="0.0738%" height="15" fill="rgb(248,192,3)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1381" width="0.0738%" height="15" fill="rgb(233,187,18)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1365" width="0.0738%" height="15" fill="rgb(237,208,14)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1349" width="0.0738%" height="15" fill="rgb(212,77,1)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1333" width="0.0738%" height="15" fill="rgb(210,163,22)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1317" width="0.0738%" height="15" fill="rgb(250,58,28)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1301" width="0.0738%" height="15" fill="rgb(254,28,41)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9262%" y="1285" width="0.0738%" height="15" fill="rgb(237,162,36)" fg:x="5413" fg:w="4"/><text x="100.1762%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1269" width="0.0554%" height="15" fill="rgb(232,56,6)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1253" width="0.0554%" height="15" fill="rgb(216,127,42)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1237" width="0.0554%" height="15" fill="rgb(241,69,15)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1221" width="0.0554%" height="15" fill="rgb(227,180,19)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1205" width="0.0554%" height="15" fill="rgb(231,188,29)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1189" width="0.0554%" height="15" fill="rgb(224,176,27)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1173" width="0.0554%" height="15" fill="rgb(249,214,19)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1157" width="0.0554%" height="15" fill="rgb(240,0,4)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1141" width="0.0554%" height="15" fill="rgb(233,28,41)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1125" width="0.0554%" height="15" fill="rgb(220,90,51)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1109" width="0.0554%" height="15" fill="rgb(250,52,22)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="99.9446%" y="1093" width="0.0554%" height="15" fill="rgb(231,152,36)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="1103.50"></text></g></svg></svg>