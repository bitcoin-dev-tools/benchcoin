<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1366" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1349.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1349.00"> </text><svg id="frames" x="10" width="1180" total_samples="123358"><g><title>_IO_fwrite (24 samples, 0.02%)</title><rect x="0.5747%" y="1269" width="0.0195%" height="15" fill="rgb(227,0,7)" fg:x="709" fg:w="24"/><text x="0.8247%" y="1279.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (266 samples, 0.22%)</title><rect x="0.5942%" y="1269" width="0.2156%" height="15" fill="rgb(217,0,24)" fg:x="733" fg:w="266"/><text x="0.8442%" y="1279.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (266 samples, 0.22%)</title><rect x="0.5942%" y="1253" width="0.2156%" height="15" fill="rgb(221,193,54)" fg:x="733" fg:w="266"/><text x="0.8442%" y="1263.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (266 samples, 0.22%)</title><rect x="0.5942%" y="1237" width="0.2156%" height="15" fill="rgb(248,212,6)" fg:x="733" fg:w="266"/><text x="0.8442%" y="1247.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (266 samples, 0.22%)</title><rect x="0.5942%" y="1221" width="0.2156%" height="15" fill="rgb(208,68,35)" fg:x="733" fg:w="266"/><text x="0.8442%" y="1231.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (266 samples, 0.22%)</title><rect x="0.5942%" y="1205" width="0.2156%" height="15" fill="rgb(232,128,0)" fg:x="733" fg:w="266"/><text x="0.8442%" y="1215.50"></text></g><g><title>void std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;std::byte, std::byte const&gt; (76 samples, 0.06%)</title><rect x="0.7482%" y="1189" width="0.0616%" height="15" fill="rgb(207,160,47)" fg:x="923" fg:w="76"/><text x="0.9982%" y="1199.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (23 samples, 0.02%)</title><rect x="0.8098%" y="1269" width="0.0186%" height="15" fill="rgb(228,23,34)" fg:x="999" fg:w="23"/><text x="1.0598%" y="1279.50"></text></g><g><title>AutoFile::write (2,390 samples, 1.94%)</title><rect x="0.0203%" y="1285" width="1.9375%" height="15" fill="rgb(218,30,26)" fg:x="25" fg:w="2390"/><text x="0.2703%" y="1295.50">A..</text></g><g><title>util::Xor (1,393 samples, 1.13%)</title><rect x="0.8285%" y="1269" width="1.1292%" height="15" fill="rgb(220,122,19)" fg:x="1022" fg:w="1393"/><text x="1.0785%" y="1279.50"></text></g><g><title>std::operator^= (445 samples, 0.36%)</title><rect x="1.5970%" y="1253" width="0.3607%" height="15" fill="rgb(250,228,42)" fg:x="1970" fg:w="445"/><text x="1.8470%" y="1263.50"></text></g><g><title>std::operator^ (445 samples, 0.36%)</title><rect x="1.5970%" y="1237" width="0.3607%" height="15" fill="rgb(240,193,28)" fg:x="1970" fg:w="445"/><text x="1.8470%" y="1247.50"></text></g><g><title>CCoinsViewCache::BatchWrite (27 samples, 0.02%)</title><rect x="1.9699%" y="1285" width="0.0219%" height="15" fill="rgb(216,20,37)" fg:x="2430" fg:w="27"/><text x="2.2199%" y="1295.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (27 samples, 0.02%)</title><rect x="1.9699%" y="1269" width="0.0219%" height="15" fill="rgb(206,188,39)" fg:x="2430" fg:w="27"/><text x="2.2199%" y="1279.50"></text></g><g><title>_int_free (27 samples, 0.02%)</title><rect x="1.9699%" y="1253" width="0.0219%" height="15" fill="rgb(217,207,13)" fg:x="2430" fg:w="27"/><text x="2.2199%" y="1263.50"></text></g><g><title>CCoinsViewCache::FetchCoin (15 samples, 0.01%)</title><rect x="1.9918%" y="1285" width="0.0122%" height="15" fill="rgb(231,73,38)" fg:x="2457" fg:w="15"/><text x="2.2418%" y="1295.50"></text></g><g><title>CCoinsViewCache::GetCoin (18 samples, 0.01%)</title><rect x="2.0039%" y="1285" width="0.0146%" height="15" fill="rgb(225,20,46)" fg:x="2472" fg:w="18"/><text x="2.2539%" y="1295.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (17 samples, 0.01%)</title><rect x="2.0047%" y="1269" width="0.0138%" height="15" fill="rgb(210,31,41)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1279.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (17 samples, 0.01%)</title><rect x="2.0047%" y="1253" width="0.0138%" height="15" fill="rgb(221,200,47)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1263.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (17 samples, 0.01%)</title><rect x="2.0047%" y="1237" width="0.0138%" height="15" fill="rgb(226,26,5)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1247.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (17 samples, 0.01%)</title><rect x="2.0047%" y="1221" width="0.0138%" height="15" fill="rgb(249,33,26)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1231.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (17 samples, 0.01%)</title><rect x="2.0047%" y="1205" width="0.0138%" height="15" fill="rgb(235,183,28)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1215.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (17 samples, 0.01%)</title><rect x="2.0047%" y="1189" width="0.0138%" height="15" fill="rgb(221,5,38)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1199.50"></text></g><g><title>Coin::Coin (17 samples, 0.01%)</title><rect x="2.0047%" y="1173" width="0.0138%" height="15" fill="rgb(247,18,42)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1183.50"></text></g><g><title>CTxOut::CTxOut (17 samples, 0.01%)</title><rect x="2.0047%" y="1157" width="0.0138%" height="15" fill="rgb(241,131,45)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1167.50"></text></g><g><title>CScript::CScript (17 samples, 0.01%)</title><rect x="2.0047%" y="1141" width="0.0138%" height="15" fill="rgb(249,31,29)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (17 samples, 0.01%)</title><rect x="2.0047%" y="1125" width="0.0138%" height="15" fill="rgb(225,111,53)" fg:x="2473" fg:w="17"/><text x="2.2547%" y="1135.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (19 samples, 0.02%)</title><rect x="2.0266%" y="1269" width="0.0154%" height="15" fill="rgb(238,160,17)" fg:x="2500" fg:w="19"/><text x="2.2766%" y="1279.50"></text></g><g><title>CCoinsViewDB::GetCoin (21 samples, 0.02%)</title><rect x="2.0258%" y="1285" width="0.0170%" height="15" fill="rgb(214,148,48)" fg:x="2499" fg:w="21"/><text x="2.2758%" y="1295.50"></text></g><g><title>CSHA256::Write (19 samples, 0.02%)</title><rect x="2.0582%" y="1253" width="0.0154%" height="15" fill="rgb(232,36,49)" fg:x="2539" fg:w="19"/><text x="2.3082%" y="1263.50"></text></g><g><title>CSHA256::Write (23 samples, 0.02%)</title><rect x="2.0566%" y="1269" width="0.0186%" height="15" fill="rgb(209,103,24)" fg:x="2537" fg:w="23"/><text x="2.3066%" y="1279.50"></text></g><g><title>CSHA256::Write (29 samples, 0.02%)</title><rect x="2.0534%" y="1285" width="0.0235%" height="15" fill="rgb(229,88,8)" fg:x="2533" fg:w="29"/><text x="2.3034%" y="1295.50"></text></g><g><title>CScript::IsWitnessProgram (15 samples, 0.01%)</title><rect x="2.0890%" y="1285" width="0.0122%" height="15" fill="rgb(213,181,19)" fg:x="2577" fg:w="15"/><text x="2.3390%" y="1295.50"></text></g><g><title>Chainstate::ConnectBlock (32 samples, 0.03%)</title><rect x="2.1126%" y="1285" width="0.0259%" height="15" fill="rgb(254,191,54)" fg:x="2606" fg:w="32"/><text x="2.3626%" y="1295.50"></text></g><g><title>[[ext4]] (22 samples, 0.02%)</title><rect x="2.2374%" y="405" width="0.0178%" height="15" fill="rgb(241,83,37)" fg:x="2760" fg:w="22"/><text x="2.4874%" y="415.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="2.2374%" y="389" width="0.0178%" height="15" fill="rgb(233,36,39)" fg:x="2760" fg:w="22"/><text x="2.4874%" y="399.50"></text></g><g><title>[[ext4]] (21 samples, 0.02%)</title><rect x="2.2382%" y="373" width="0.0170%" height="15" fill="rgb(226,3,54)" fg:x="2761" fg:w="21"/><text x="2.4882%" y="383.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="2.2423%" y="357" width="0.0130%" height="15" fill="rgb(245,192,40)" fg:x="2766" fg:w="16"/><text x="2.4923%" y="367.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="2.2431%" y="341" width="0.0122%" height="15" fill="rgb(238,167,29)" fg:x="2767" fg:w="15"/><text x="2.4931%" y="351.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (25 samples, 0.02%)</title><rect x="2.2358%" y="533" width="0.0203%" height="15" fill="rgb(232,182,51)" fg:x="2758" fg:w="25"/><text x="2.4858%" y="543.50"></text></g><g><title>new_do_write (25 samples, 0.02%)</title><rect x="2.2358%" y="517" width="0.0203%" height="15" fill="rgb(231,60,39)" fg:x="2758" fg:w="25"/><text x="2.4858%" y="527.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (25 samples, 0.02%)</title><rect x="2.2358%" y="501" width="0.0203%" height="15" fill="rgb(208,69,12)" fg:x="2758" fg:w="25"/><text x="2.4858%" y="511.50"></text></g><g><title>__GI___libc_write (25 samples, 0.02%)</title><rect x="2.2358%" y="485" width="0.0203%" height="15" fill="rgb(235,93,37)" fg:x="2758" fg:w="25"/><text x="2.4858%" y="495.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="2.2358%" y="469" width="0.0203%" height="15" fill="rgb(213,116,39)" fg:x="2758" fg:w="25"/><text x="2.4858%" y="479.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="2.2358%" y="453" width="0.0203%" height="15" fill="rgb(222,207,29)" fg:x="2758" fg:w="25"/><text x="2.4858%" y="463.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="2.2358%" y="437" width="0.0203%" height="15" fill="rgb(206,96,30)" fg:x="2758" fg:w="25"/><text x="2.4858%" y="447.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="2.2358%" y="421" width="0.0203%" height="15" fill="rgb(218,138,4)" fg:x="2758" fg:w="25"/><text x="2.4858%" y="431.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (26 samples, 0.02%)</title><rect x="2.2358%" y="549" width="0.0211%" height="15" fill="rgb(250,191,14)" fg:x="2758" fg:w="26"/><text x="2.4858%" y="559.50"></text></g><g><title>_IO_fwrite (144 samples, 0.12%)</title><rect x="2.1434%" y="565" width="0.1167%" height="15" fill="rgb(239,60,40)" fg:x="2644" fg:w="144"/><text x="2.3934%" y="575.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (153 samples, 0.12%)</title><rect x="2.1393%" y="725" width="0.1240%" height="15" fill="rgb(206,27,48)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="735.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (153 samples, 0.12%)</title><rect x="2.1393%" y="709" width="0.1240%" height="15" fill="rgb(225,35,8)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="719.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (153 samples, 0.12%)</title><rect x="2.1393%" y="693" width="0.1240%" height="15" fill="rgb(250,213,24)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="703.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (153 samples, 0.12%)</title><rect x="2.1393%" y="677" width="0.1240%" height="15" fill="rgb(247,123,22)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="687.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (153 samples, 0.12%)</title><rect x="2.1393%" y="661" width="0.1240%" height="15" fill="rgb(231,138,38)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="671.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (153 samples, 0.12%)</title><rect x="2.1393%" y="645" width="0.1240%" height="15" fill="rgb(231,145,46)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="655.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (153 samples, 0.12%)</title><rect x="2.1393%" y="629" width="0.1240%" height="15" fill="rgb(251,118,11)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="639.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (153 samples, 0.12%)</title><rect x="2.1393%" y="613" width="0.1240%" height="15" fill="rgb(217,147,25)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="623.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (153 samples, 0.12%)</title><rect x="2.1393%" y="597" width="0.1240%" height="15" fill="rgb(247,81,37)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="607.50"></text></g><g><title>AutoFile::write (153 samples, 0.12%)</title><rect x="2.1393%" y="581" width="0.1240%" height="15" fill="rgb(209,12,38)" fg:x="2639" fg:w="153"/><text x="2.3893%" y="591.50"></text></g><g><title>[[ext4]] (16 samples, 0.01%)</title><rect x="2.2885%" y="421" width="0.0130%" height="15" fill="rgb(227,1,9)" fg:x="2823" fg:w="16"/><text x="2.5385%" y="431.50"></text></g><g><title>[[ext4]] (87 samples, 0.07%)</title><rect x="2.2877%" y="437" width="0.0705%" height="15" fill="rgb(248,47,43)" fg:x="2822" fg:w="87"/><text x="2.5377%" y="447.50"></text></g><g><title>[unknown] (70 samples, 0.06%)</title><rect x="2.3014%" y="421" width="0.0567%" height="15" fill="rgb(221,10,30)" fg:x="2839" fg:w="70"/><text x="2.5514%" y="431.50"></text></g><g><title>[unknown] (68 samples, 0.06%)</title><rect x="2.3031%" y="405" width="0.0551%" height="15" fill="rgb(210,229,1)" fg:x="2841" fg:w="68"/><text x="2.5531%" y="415.50"></text></g><g><title>[unknown] (59 samples, 0.05%)</title><rect x="2.3103%" y="389" width="0.0478%" height="15" fill="rgb(222,148,37)" fg:x="2850" fg:w="59"/><text x="2.5603%" y="399.50"></text></g><g><title>[unknown] (48 samples, 0.04%)</title><rect x="2.3193%" y="373" width="0.0389%" height="15" fill="rgb(234,67,33)" fg:x="2861" fg:w="48"/><text x="2.5693%" y="383.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="2.3274%" y="357" width="0.0308%" height="15" fill="rgb(247,98,35)" fg:x="2871" fg:w="38"/><text x="2.5774%" y="367.50"></text></g><g><title>[[ext4]] (106 samples, 0.09%)</title><rect x="2.2820%" y="469" width="0.0859%" height="15" fill="rgb(247,138,52)" fg:x="2815" fg:w="106"/><text x="2.5320%" y="479.50"></text></g><g><title>[unknown] (102 samples, 0.08%)</title><rect x="2.2852%" y="453" width="0.0827%" height="15" fill="rgb(213,79,30)" fg:x="2819" fg:w="102"/><text x="2.5352%" y="463.50"></text></g><g><title>_IO_fwrite (131 samples, 0.11%)</title><rect x="2.2690%" y="629" width="0.1062%" height="15" fill="rgb(246,177,23)" fg:x="2799" fg:w="131"/><text x="2.5190%" y="639.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (127 samples, 0.10%)</title><rect x="2.2722%" y="613" width="0.1030%" height="15" fill="rgb(230,62,27)" fg:x="2803" fg:w="127"/><text x="2.5222%" y="623.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (127 samples, 0.10%)</title><rect x="2.2722%" y="597" width="0.1030%" height="15" fill="rgb(216,154,8)" fg:x="2803" fg:w="127"/><text x="2.5222%" y="607.50"></text></g><g><title>new_do_write (125 samples, 0.10%)</title><rect x="2.2739%" y="581" width="0.1013%" height="15" fill="rgb(244,35,45)" fg:x="2805" fg:w="125"/><text x="2.5239%" y="591.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (125 samples, 0.10%)</title><rect x="2.2739%" y="565" width="0.1013%" height="15" fill="rgb(251,115,12)" fg:x="2805" fg:w="125"/><text x="2.5239%" y="575.50"></text></g><g><title>__GI___libc_write (125 samples, 0.10%)</title><rect x="2.2739%" y="549" width="0.1013%" height="15" fill="rgb(240,54,50)" fg:x="2805" fg:w="125"/><text x="2.5239%" y="559.50"></text></g><g><title>[unknown] (125 samples, 0.10%)</title><rect x="2.2739%" y="533" width="0.1013%" height="15" fill="rgb(233,84,52)" fg:x="2805" fg:w="125"/><text x="2.5239%" y="543.50"></text></g><g><title>[unknown] (125 samples, 0.10%)</title><rect x="2.2739%" y="517" width="0.1013%" height="15" fill="rgb(207,117,47)" fg:x="2805" fg:w="125"/><text x="2.5239%" y="527.50"></text></g><g><title>[unknown] (125 samples, 0.10%)</title><rect x="2.2739%" y="501" width="0.1013%" height="15" fill="rgb(249,43,39)" fg:x="2805" fg:w="125"/><text x="2.5239%" y="511.50"></text></g><g><title>[unknown] (123 samples, 0.10%)</title><rect x="2.2755%" y="485" width="0.0997%" height="15" fill="rgb(209,38,44)" fg:x="2807" fg:w="123"/><text x="2.5255%" y="495.50"></text></g><g><title>AutoFile::write (167 samples, 0.14%)</title><rect x="2.2633%" y="645" width="0.1354%" height="15" fill="rgb(236,212,23)" fg:x="2792" fg:w="167"/><text x="2.5133%" y="655.50"></text></g><g><title>util::Xor (19 samples, 0.02%)</title><rect x="2.3833%" y="629" width="0.0154%" height="15" fill="rgb(242,79,21)" fg:x="2940" fg:w="19"/><text x="2.6333%" y="639.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (169 samples, 0.14%)</title><rect x="2.2633%" y="677" width="0.1370%" height="15" fill="rgb(211,96,35)" fg:x="2792" fg:w="169"/><text x="2.5133%" y="687.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (169 samples, 0.14%)</title><rect x="2.2633%" y="661" width="0.1370%" height="15" fill="rgb(253,215,40)" fg:x="2792" fg:w="169"/><text x="2.5133%" y="671.50"></text></g><g><title>[[ext4]] (19 samples, 0.02%)</title><rect x="2.4011%" y="437" width="0.0154%" height="15" fill="rgb(211,81,21)" fg:x="2962" fg:w="19"/><text x="2.6511%" y="447.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="2.4052%" y="421" width="0.0113%" height="15" fill="rgb(208,190,38)" fg:x="2967" fg:w="14"/><text x="2.6552%" y="431.50"></text></g><g><title>_IO_fwrite (22 samples, 0.02%)</title><rect x="2.4011%" y="629" width="0.0178%" height="15" fill="rgb(235,213,38)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="639.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (22 samples, 0.02%)</title><rect x="2.4011%" y="613" width="0.0178%" height="15" fill="rgb(237,122,38)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="623.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (22 samples, 0.02%)</title><rect x="2.4011%" y="597" width="0.0178%" height="15" fill="rgb(244,218,35)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="607.50"></text></g><g><title>new_do_write (22 samples, 0.02%)</title><rect x="2.4011%" y="581" width="0.0178%" height="15" fill="rgb(240,68,47)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="591.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (22 samples, 0.02%)</title><rect x="2.4011%" y="565" width="0.0178%" height="15" fill="rgb(210,16,53)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="575.50"></text></g><g><title>__GI___libc_write (22 samples, 0.02%)</title><rect x="2.4011%" y="549" width="0.0178%" height="15" fill="rgb(235,124,12)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="559.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="2.4011%" y="533" width="0.0178%" height="15" fill="rgb(224,169,11)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="543.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="2.4011%" y="517" width="0.0178%" height="15" fill="rgb(250,166,2)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="527.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="2.4011%" y="501" width="0.0178%" height="15" fill="rgb(242,216,29)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="511.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="2.4011%" y="485" width="0.0178%" height="15" fill="rgb(230,116,27)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="495.50"></text></g><g><title>[[ext4]] (22 samples, 0.02%)</title><rect x="2.4011%" y="469" width="0.0178%" height="15" fill="rgb(228,99,48)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="479.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="2.4011%" y="453" width="0.0178%" height="15" fill="rgb(253,11,6)" fg:x="2962" fg:w="22"/><text x="2.6511%" y="463.50"></text></g><g><title>AutoFile::write (28 samples, 0.02%)</title><rect x="2.4003%" y="645" width="0.0227%" height="15" fill="rgb(247,143,39)" fg:x="2961" fg:w="28"/><text x="2.6503%" y="655.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (47 samples, 0.04%)</title><rect x="2.4003%" y="677" width="0.0381%" height="15" fill="rgb(236,97,10)" fg:x="2961" fg:w="47"/><text x="2.6503%" y="687.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char&gt; (47 samples, 0.04%)</title><rect x="2.4003%" y="661" width="0.0381%" height="15" fill="rgb(233,208,19)" fg:x="2961" fg:w="47"/><text x="2.6503%" y="671.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (388 samples, 0.31%)</title><rect x="2.1393%" y="821" width="0.3145%" height="15" fill="rgb(216,164,2)" fg:x="2639" fg:w="388"/><text x="2.3893%" y="831.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (388 samples, 0.31%)</title><rect x="2.1393%" y="805" width="0.3145%" height="15" fill="rgb(220,129,5)" fg:x="2639" fg:w="388"/><text x="2.3893%" y="815.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (388 samples, 0.31%)</title><rect x="2.1393%" y="789" width="0.3145%" height="15" fill="rgb(242,17,10)" fg:x="2639" fg:w="388"/><text x="2.3893%" y="799.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (388 samples, 0.31%)</title><rect x="2.1393%" y="773" width="0.3145%" height="15" fill="rgb(242,107,0)" fg:x="2639" fg:w="388"/><text x="2.3893%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (388 samples, 0.31%)</title><rect x="2.1393%" y="757" width="0.3145%" height="15" fill="rgb(251,28,31)" fg:x="2639" fg:w="388"/><text x="2.3893%" y="767.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (388 samples, 0.31%)</title><rect x="2.1393%" y="741" width="0.3145%" height="15" fill="rgb(233,223,10)" fg:x="2639" fg:w="388"/><text x="2.3893%" y="751.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (235 samples, 0.19%)</title><rect x="2.2633%" y="725" width="0.1905%" height="15" fill="rgb(215,21,27)" fg:x="2792" fg:w="235"/><text x="2.5133%" y="735.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (235 samples, 0.19%)</title><rect x="2.2633%" y="709" width="0.1905%" height="15" fill="rgb(232,23,21)" fg:x="2792" fg:w="235"/><text x="2.5133%" y="719.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (235 samples, 0.19%)</title><rect x="2.2633%" y="693" width="0.1905%" height="15" fill="rgb(244,5,23)" fg:x="2792" fg:w="235"/><text x="2.5133%" y="703.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (19 samples, 0.02%)</title><rect x="2.4384%" y="677" width="0.0154%" height="15" fill="rgb(226,81,46)" fg:x="3008" fg:w="19"/><text x="2.6884%" y="687.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (19 samples, 0.02%)</title><rect x="2.4384%" y="661" width="0.0154%" height="15" fill="rgb(247,70,30)" fg:x="3008" fg:w="19"/><text x="2.6884%" y="671.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (19 samples, 0.02%)</title><rect x="2.4384%" y="645" width="0.0154%" height="15" fill="rgb(212,68,19)" fg:x="3008" fg:w="19"/><text x="2.6884%" y="655.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (19 samples, 0.02%)</title><rect x="2.4384%" y="629" width="0.0154%" height="15" fill="rgb(240,187,13)" fg:x="3008" fg:w="19"/><text x="2.6884%" y="639.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="2.5390%" y="533" width="0.0105%" height="15" fill="rgb(223,113,26)" fg:x="3132" fg:w="13"/><text x="2.7890%" y="543.50"></text></g><g><title>[[ext4]] (18 samples, 0.01%)</title><rect x="2.5381%" y="565" width="0.0146%" height="15" fill="rgb(206,192,2)" fg:x="3131" fg:w="18"/><text x="2.7881%" y="575.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="2.5381%" y="549" width="0.0146%" height="15" fill="rgb(241,108,4)" fg:x="3131" fg:w="18"/><text x="2.7881%" y="559.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (25 samples, 0.02%)</title><rect x="2.5349%" y="693" width="0.0203%" height="15" fill="rgb(247,173,49)" fg:x="3127" fg:w="25"/><text x="2.7849%" y="703.50"></text></g><g><title>new_do_write (25 samples, 0.02%)</title><rect x="2.5349%" y="677" width="0.0203%" height="15" fill="rgb(224,114,35)" fg:x="3127" fg:w="25"/><text x="2.7849%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (24 samples, 0.02%)</title><rect x="2.5357%" y="661" width="0.0195%" height="15" fill="rgb(245,159,27)" fg:x="3128" fg:w="24"/><text x="2.7857%" y="671.50"></text></g><g><title>__GI___libc_write (23 samples, 0.02%)</title><rect x="2.5365%" y="645" width="0.0186%" height="15" fill="rgb(245,172,44)" fg:x="3129" fg:w="23"/><text x="2.7865%" y="655.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="2.5365%" y="629" width="0.0186%" height="15" fill="rgb(236,23,11)" fg:x="3129" fg:w="23"/><text x="2.7865%" y="639.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="2.5365%" y="613" width="0.0186%" height="15" fill="rgb(205,117,38)" fg:x="3129" fg:w="23"/><text x="2.7865%" y="623.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="2.5365%" y="597" width="0.0186%" height="15" fill="rgb(237,72,25)" fg:x="3129" fg:w="23"/><text x="2.7865%" y="607.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="2.5365%" y="581" width="0.0186%" height="15" fill="rgb(244,70,9)" fg:x="3129" fg:w="23"/><text x="2.7865%" y="591.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (28 samples, 0.02%)</title><rect x="2.5341%" y="709" width="0.0227%" height="15" fill="rgb(217,125,39)" fg:x="3126" fg:w="28"/><text x="2.7841%" y="719.50"></text></g><g><title>_IO_fwrite (126 samples, 0.10%)</title><rect x="2.4555%" y="725" width="0.1021%" height="15" fill="rgb(235,36,10)" fg:x="3029" fg:w="126"/><text x="2.7055%" y="735.50"></text></g><g><title>AutoFile::write (131 samples, 0.11%)</title><rect x="2.4538%" y="741" width="0.1062%" height="15" fill="rgb(251,123,47)" fg:x="3027" fg:w="131"/><text x="2.7038%" y="751.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (134 samples, 0.11%)</title><rect x="2.4538%" y="821" width="0.1086%" height="15" fill="rgb(221,13,13)" fg:x="3027" fg:w="134"/><text x="2.7038%" y="831.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (134 samples, 0.11%)</title><rect x="2.4538%" y="805" width="0.1086%" height="15" fill="rgb(238,131,9)" fg:x="3027" fg:w="134"/><text x="2.7038%" y="815.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (134 samples, 0.11%)</title><rect x="2.4538%" y="789" width="0.1086%" height="15" fill="rgb(211,50,8)" fg:x="3027" fg:w="134"/><text x="2.7038%" y="799.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (134 samples, 0.11%)</title><rect x="2.4538%" y="773" width="0.1086%" height="15" fill="rgb(245,182,24)" fg:x="3027" fg:w="134"/><text x="2.7038%" y="783.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (134 samples, 0.11%)</title><rect x="2.4538%" y="757" width="0.1086%" height="15" fill="rgb(242,14,37)" fg:x="3027" fg:w="134"/><text x="2.7038%" y="767.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (560 samples, 0.45%)</title><rect x="2.1393%" y="837" width="0.4540%" height="15" fill="rgb(246,228,12)" fg:x="2639" fg:w="560"/><text x="2.3893%" y="847.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (38 samples, 0.03%)</title><rect x="2.5625%" y="821" width="0.0308%" height="15" fill="rgb(213,55,15)" fg:x="3161" fg:w="38"/><text x="2.8125%" y="831.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (38 samples, 0.03%)</title><rect x="2.5625%" y="805" width="0.0308%" height="15" fill="rgb(209,9,3)" fg:x="3161" fg:w="38"/><text x="2.8125%" y="815.50"></text></g><g><title>AutoFile::write (38 samples, 0.03%)</title><rect x="2.5625%" y="789" width="0.0308%" height="15" fill="rgb(230,59,30)" fg:x="3161" fg:w="38"/><text x="2.8125%" y="799.50"></text></g><g><title>_IO_fwrite (38 samples, 0.03%)</title><rect x="2.5625%" y="773" width="0.0308%" height="15" fill="rgb(209,121,21)" fg:x="3161" fg:w="38"/><text x="2.8125%" y="783.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (582 samples, 0.47%)</title><rect x="2.1393%" y="1173" width="0.4718%" height="15" fill="rgb(220,109,13)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1183.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1157" width="0.4718%" height="15" fill="rgb(232,18,1)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1167.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1141" width="0.4718%" height="15" fill="rgb(215,41,42)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1151.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1125" width="0.4718%" height="15" fill="rgb(224,123,36)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1135.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1109" width="0.4718%" height="15" fill="rgb(240,125,3)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1093" width="0.4718%" height="15" fill="rgb(205,98,50)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1103.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1077" width="0.4718%" height="15" fill="rgb(205,185,37)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1087.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1061" width="0.4718%" height="15" fill="rgb(238,207,15)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1045" width="0.4718%" height="15" fill="rgb(213,199,42)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1055.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1029" width="0.4718%" height="15" fill="rgb(235,201,11)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1039.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="1013" width="0.4718%" height="15" fill="rgb(207,46,11)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1023.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="997" width="0.4718%" height="15" fill="rgb(241,35,35)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="981" width="0.4718%" height="15" fill="rgb(243,32,47)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="991.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="965" width="0.4718%" height="15" fill="rgb(247,202,23)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="975.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="949" width="0.4718%" height="15" fill="rgb(219,102,11)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="959.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="933" width="0.4718%" height="15" fill="rgb(243,110,44)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="943.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="917" width="0.4718%" height="15" fill="rgb(222,74,54)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="927.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="901" width="0.4718%" height="15" fill="rgb(216,99,12)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="885" width="0.4718%" height="15" fill="rgb(226,22,26)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="869" width="0.4718%" height="15" fill="rgb(217,163,10)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="879.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (582 samples, 0.47%)</title><rect x="2.1393%" y="853" width="0.4718%" height="15" fill="rgb(213,25,53)" fg:x="2639" fg:w="582"/><text x="2.3893%" y="863.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (22 samples, 0.02%)</title><rect x="2.5933%" y="837" width="0.0178%" height="15" fill="rgb(252,105,26)" fg:x="3199" fg:w="22"/><text x="2.8433%" y="847.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (22 samples, 0.02%)</title><rect x="2.5933%" y="821" width="0.0178%" height="15" fill="rgb(220,39,43)" fg:x="3199" fg:w="22"/><text x="2.8433%" y="831.50"></text></g><g><title>AutoFile::write (22 samples, 0.02%)</title><rect x="2.5933%" y="805" width="0.0178%" height="15" fill="rgb(229,68,48)" fg:x="3199" fg:w="22"/><text x="2.8433%" y="815.50"></text></g><g><title>_IO_fwrite (22 samples, 0.02%)</title><rect x="2.5933%" y="789" width="0.0178%" height="15" fill="rgb(252,8,32)" fg:x="3199" fg:w="22"/><text x="2.8433%" y="799.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (584 samples, 0.47%)</title><rect x="2.1385%" y="1285" width="0.4734%" height="15" fill="rgb(223,20,43)" fg:x="2638" fg:w="584"/><text x="2.3885%" y="1295.50"></text></g><g><title>Chainstate::ActivateBestChain (584 samples, 0.47%)</title><rect x="2.1385%" y="1269" width="0.4734%" height="15" fill="rgb(229,81,49)" fg:x="2638" fg:w="584"/><text x="2.3885%" y="1279.50"></text></g><g><title>Chainstate::ActivateBestChainStep (584 samples, 0.47%)</title><rect x="2.1385%" y="1253" width="0.4734%" height="15" fill="rgb(236,28,36)" fg:x="2638" fg:w="584"/><text x="2.3885%" y="1263.50"></text></g><g><title>Chainstate::ConnectTip (584 samples, 0.47%)</title><rect x="2.1385%" y="1237" width="0.4734%" height="15" fill="rgb(249,185,26)" fg:x="2638" fg:w="584"/><text x="2.3885%" y="1247.50"></text></g><g><title>Chainstate::ConnectBlock (584 samples, 0.47%)</title><rect x="2.1385%" y="1221" width="0.4734%" height="15" fill="rgb(249,174,33)" fg:x="2638" fg:w="584"/><text x="2.3885%" y="1231.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (584 samples, 0.47%)</title><rect x="2.1385%" y="1205" width="0.4734%" height="15" fill="rgb(233,201,37)" fg:x="2638" fg:w="584"/><text x="2.3885%" y="1215.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (583 samples, 0.47%)</title><rect x="2.1393%" y="1189" width="0.4726%" height="15" fill="rgb(221,78,26)" fg:x="2639" fg:w="583"/><text x="2.3893%" y="1199.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (13 samples, 0.01%)</title><rect x="2.6403%" y="1157" width="0.0105%" height="15" fill="rgb(250,127,30)" fg:x="3257" fg:w="13"/><text x="2.8903%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (13 samples, 0.01%)</title><rect x="2.6403%" y="1141" width="0.0105%" height="15" fill="rgb(230,49,44)" fg:x="3257" fg:w="13"/><text x="2.8903%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (13 samples, 0.01%)</title><rect x="2.6403%" y="1125" width="0.0105%" height="15" fill="rgb(229,67,23)" fg:x="3257" fg:w="13"/><text x="2.8903%" y="1135.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="2.6403%" y="1109" width="0.0105%" height="15" fill="rgb(249,83,47)" fg:x="3257" fg:w="13"/><text x="2.8903%" y="1119.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="2.6403%" y="1093" width="0.0105%" height="15" fill="rgb(215,43,3)" fg:x="3257" fg:w="13"/><text x="2.8903%" y="1103.50"></text></g><g><title>CheckTransaction (47 samples, 0.04%)</title><rect x="2.6135%" y="1285" width="0.0381%" height="15" fill="rgb(238,154,13)" fg:x="3224" fg:w="47"/><text x="2.8635%" y="1295.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (17 samples, 0.01%)</title><rect x="2.6379%" y="1269" width="0.0138%" height="15" fill="rgb(219,56,2)" fg:x="3254" fg:w="17"/><text x="2.8879%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (17 samples, 0.01%)</title><rect x="2.6379%" y="1253" width="0.0138%" height="15" fill="rgb(233,0,4)" fg:x="3254" fg:w="17"/><text x="2.8879%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (17 samples, 0.01%)</title><rect x="2.6379%" y="1237" width="0.0138%" height="15" fill="rgb(235,30,7)" fg:x="3254" fg:w="17"/><text x="2.8879%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (17 samples, 0.01%)</title><rect x="2.6379%" y="1221" width="0.0138%" height="15" fill="rgb(250,79,13)" fg:x="3254" fg:w="17"/><text x="2.8879%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (17 samples, 0.01%)</title><rect x="2.6379%" y="1205" width="0.0138%" height="15" fill="rgb(211,146,34)" fg:x="3254" fg:w="17"/><text x="2.8879%" y="1215.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="2.6379%" y="1189" width="0.0138%" height="15" fill="rgb(228,22,38)" fg:x="3254" fg:w="17"/><text x="2.8879%" y="1199.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (17 samples, 0.01%)</title><rect x="2.6379%" y="1173" width="0.0138%" height="15" fill="rgb(235,168,5)" fg:x="3254" fg:w="17"/><text x="2.8879%" y="1183.50"></text></g><g><title>CompressAmount (33 samples, 0.03%)</title><rect x="2.6516%" y="1285" width="0.0268%" height="15" fill="rgb(221,155,16)" fg:x="3271" fg:w="33"/><text x="2.9016%" y="1295.50"></text></g><g><title>CompressScript (22 samples, 0.02%)</title><rect x="2.6784%" y="1285" width="0.0178%" height="15" fill="rgb(215,215,53)" fg:x="3304" fg:w="22"/><text x="2.9284%" y="1295.50"></text></g><g><title>CountWitnessSigOps (25 samples, 0.02%)</title><rect x="2.6970%" y="1285" width="0.0203%" height="15" fill="rgb(223,4,10)" fg:x="3327" fg:w="25"/><text x="2.9470%" y="1295.50"></text></g><g><title>DataStream::read (15 samples, 0.01%)</title><rect x="2.7173%" y="1285" width="0.0122%" height="15" fill="rgb(234,103,6)" fg:x="3352" fg:w="15"/><text x="2.9673%" y="1295.50"></text></g><g><title>SipHashUint256Extra (111 samples, 0.09%)</title><rect x="2.7643%" y="1285" width="0.0900%" height="15" fill="rgb(227,97,0)" fg:x="3410" fg:w="111"/><text x="3.0143%" y="1295.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (32 samples, 0.03%)</title><rect x="2.8284%" y="1269" width="0.0259%" height="15" fill="rgb(234,150,53)" fg:x="3489" fg:w="32"/><text x="3.0784%" y="1279.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (32 samples, 0.03%)</title><rect x="2.8284%" y="1253" width="0.0259%" height="15" fill="rgb(228,201,54)" fg:x="3489" fg:w="32"/><text x="3.0784%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (16 samples, 0.01%)</title><rect x="2.8616%" y="1253" width="0.0130%" height="15" fill="rgb(222,22,37)" fg:x="3530" fg:w="16"/><text x="3.1116%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (16 samples, 0.01%)</title><rect x="2.8616%" y="1237" width="0.0130%" height="15" fill="rgb(237,53,32)" fg:x="3530" fg:w="16"/><text x="3.1116%" y="1247.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (16 samples, 0.01%)</title><rect x="2.8616%" y="1221" width="0.0130%" height="15" fill="rgb(233,25,53)" fg:x="3530" fg:w="16"/><text x="3.1116%" y="1231.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (16 samples, 0.01%)</title><rect x="2.8616%" y="1205" width="0.0130%" height="15" fill="rgb(210,40,34)" fg:x="3530" fg:w="16"/><text x="3.1116%" y="1215.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (16 samples, 0.01%)</title><rect x="2.8616%" y="1189" width="0.0130%" height="15" fill="rgb(241,220,44)" fg:x="3530" fg:w="16"/><text x="3.1116%" y="1199.50"></text></g><g><title>operator new (15 samples, 0.01%)</title><rect x="2.8624%" y="1173" width="0.0122%" height="15" fill="rgb(235,28,35)" fg:x="3531" fg:w="15"/><text x="3.1124%" y="1183.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.01%)</title><rect x="2.8632%" y="1157" width="0.0113%" height="15" fill="rgb(210,56,17)" fg:x="3532" fg:w="14"/><text x="3.1132%" y="1167.50"></text></g><g><title>UpdateCoins (26 samples, 0.02%)</title><rect x="2.8543%" y="1285" width="0.0211%" height="15" fill="rgb(224,130,29)" fg:x="3521" fg:w="26"/><text x="3.1043%" y="1295.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (17 samples, 0.01%)</title><rect x="2.8616%" y="1269" width="0.0138%" height="15" fill="rgb(235,212,8)" fg:x="3530" fg:w="17"/><text x="3.1116%" y="1279.50"></text></g><g><title>_int_free (54 samples, 0.04%)</title><rect x="2.9824%" y="1269" width="0.0438%" height="15" fill="rgb(223,33,50)" fg:x="3679" fg:w="54"/><text x="3.2324%" y="1279.50"></text></g><g><title>malloc_consolidate (41 samples, 0.03%)</title><rect x="3.0707%" y="1269" width="0.0332%" height="15" fill="rgb(219,149,13)" fg:x="3788" fg:w="41"/><text x="3.3207%" y="1279.50"></text></g><g><title>[[heap]] (240 samples, 0.19%)</title><rect x="2.9451%" y="1285" width="0.1946%" height="15" fill="rgb(250,156,29)" fg:x="3633" fg:w="240"/><text x="3.1951%" y="1295.50"></text></g><g><title>AutoFile::write (94 samples, 0.08%)</title><rect x="3.1421%" y="1269" width="0.0762%" height="15" fill="rgb(216,193,19)" fg:x="3876" fg:w="94"/><text x="3.3921%" y="1279.50"></text></g><g><title>CCoinsViewCache::FetchCoin (55 samples, 0.04%)</title><rect x="3.2458%" y="1269" width="0.0446%" height="15" fill="rgb(216,135,14)" fg:x="4004" fg:w="55"/><text x="3.4958%" y="1279.50"></text></g><g><title>CSHA256::Write (221 samples, 0.18%)</title><rect x="3.3212%" y="1269" width="0.1792%" height="15" fill="rgb(241,47,5)" fg:x="4097" fg:w="221"/><text x="3.5712%" y="1279.50"></text></g><g><title>CScript::GetSigOpCount (27 samples, 0.02%)</title><rect x="3.5004%" y="1269" width="0.0219%" height="15" fill="rgb(233,42,35)" fg:x="4318" fg:w="27"/><text x="3.7504%" y="1279.50"></text></g><g><title>CompressAmount (16 samples, 0.01%)</title><rect x="3.5547%" y="1269" width="0.0130%" height="15" fill="rgb(231,13,6)" fg:x="4385" fg:w="16"/><text x="3.8047%" y="1279.50"></text></g><g><title>CompressScript (13 samples, 0.01%)</title><rect x="3.5677%" y="1269" width="0.0105%" height="15" fill="rgb(207,181,40)" fg:x="4401" fg:w="13"/><text x="3.8177%" y="1279.50"></text></g><g><title>GetScriptOp (77 samples, 0.06%)</title><rect x="3.6017%" y="1269" width="0.0624%" height="15" fill="rgb(254,173,49)" fg:x="4443" fg:w="77"/><text x="3.8517%" y="1279.50"></text></g><g><title>SipHashUint256Extra (82 samples, 0.07%)</title><rect x="3.6698%" y="1269" width="0.0665%" height="15" fill="rgb(221,1,38)" fg:x="4527" fg:w="82"/><text x="3.9198%" y="1279.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (238 samples, 0.19%)</title><rect x="3.7509%" y="1269" width="0.1929%" height="15" fill="rgb(206,124,46)" fg:x="4627" fg:w="238"/><text x="4.0009%" y="1279.50"></text></g><g><title>_IO_fwrite (430 samples, 0.35%)</title><rect x="3.9438%" y="1269" width="0.3486%" height="15" fill="rgb(249,21,11)" fg:x="4865" fg:w="430"/><text x="4.1938%" y="1279.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (27 samples, 0.02%)</title><rect x="4.2924%" y="1269" width="0.0219%" height="15" fill="rgb(222,201,40)" fg:x="5295" fg:w="27"/><text x="4.5424%" y="1279.50"></text></g><g><title>__memcmp_evex_movbe (711 samples, 0.58%)</title><rect x="4.3183%" y="1269" width="0.5764%" height="15" fill="rgb(235,61,29)" fg:x="5327" fg:w="711"/><text x="4.5683%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (628 samples, 0.51%)</title><rect x="4.8947%" y="1269" width="0.5091%" height="15" fill="rgb(219,207,3)" fg:x="6038" fg:w="628"/><text x="5.1447%" y="1279.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (22 samples, 0.02%)</title><rect x="5.4135%" y="1269" width="0.0178%" height="15" fill="rgb(222,56,46)" fg:x="6678" fg:w="22"/><text x="5.6635%" y="1279.50"></text></g><g><title>_int_free (140 samples, 0.11%)</title><rect x="5.4378%" y="1269" width="0.1135%" height="15" fill="rgb(239,76,54)" fg:x="6708" fg:w="140"/><text x="5.6878%" y="1279.50"></text></g><g><title>_int_malloc (312 samples, 0.25%)</title><rect x="5.5619%" y="1269" width="0.2529%" height="15" fill="rgb(231,124,27)" fg:x="6861" fg:w="312"/><text x="5.8119%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (83 samples, 0.07%)</title><rect x="5.8180%" y="1269" width="0.0673%" height="15" fill="rgb(249,195,6)" fg:x="7177" fg:w="83"/><text x="6.0680%" y="1279.50"></text></g><g><title>free@plt (17 samples, 0.01%)</title><rect x="5.8869%" y="1269" width="0.0138%" height="15" fill="rgb(237,174,47)" fg:x="7262" fg:w="17"/><text x="6.1369%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (184 samples, 0.15%)</title><rect x="5.9137%" y="1269" width="0.1492%" height="15" fill="rgb(206,201,31)" fg:x="7295" fg:w="184"/><text x="6.1637%" y="1279.50"></text></g><g><title>leveldb::Hash (13 samples, 0.01%)</title><rect x="6.1350%" y="1269" width="0.0105%" height="15" fill="rgb(231,57,52)" fg:x="7568" fg:w="13"/><text x="6.3850%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (489 samples, 0.40%)</title><rect x="6.1480%" y="1269" width="0.3964%" height="15" fill="rgb(248,177,22)" fg:x="7584" fg:w="489"/><text x="6.3980%" y="1279.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (91 samples, 0.07%)</title><rect x="6.5598%" y="1269" width="0.0738%" height="15" fill="rgb(215,211,37)" fg:x="8092" fg:w="91"/><text x="6.8098%" y="1279.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (15 samples, 0.01%)</title><rect x="6.6400%" y="1269" width="0.0122%" height="15" fill="rgb(241,128,51)" fg:x="8191" fg:w="15"/><text x="6.8900%" y="1279.50"></text></g><g><title>malloc (245 samples, 0.20%)</title><rect x="6.6814%" y="1269" width="0.1986%" height="15" fill="rgb(227,165,31)" fg:x="8242" fg:w="245"/><text x="6.9314%" y="1279.50"></text></g><g><title>malloc@plt (17 samples, 0.01%)</title><rect x="6.8800%" y="1269" width="0.0138%" height="15" fill="rgb(228,167,24)" fg:x="8487" fg:w="17"/><text x="7.1300%" y="1279.50"></text></g><g><title>malloc_consolidate (20 samples, 0.02%)</title><rect x="6.8938%" y="1269" width="0.0162%" height="15" fill="rgb(228,143,12)" fg:x="8504" fg:w="20"/><text x="7.1438%" y="1279.50"></text></g><g><title>memcmp@plt (44 samples, 0.04%)</title><rect x="6.9100%" y="1269" width="0.0357%" height="15" fill="rgb(249,149,8)" fg:x="8524" fg:w="44"/><text x="7.1600%" y="1279.50"></text></g><g><title>memcpy@plt (85 samples, 0.07%)</title><rect x="6.9456%" y="1269" width="0.0689%" height="15" fill="rgb(243,35,44)" fg:x="8568" fg:w="85"/><text x="7.1956%" y="1279.50"></text></g><g><title>operator delete (38 samples, 0.03%)</title><rect x="7.0194%" y="1269" width="0.0308%" height="15" fill="rgb(246,89,9)" fg:x="8659" fg:w="38"/><text x="7.2694%" y="1279.50"></text></g><g><title>operator new (61 samples, 0.05%)</title><rect x="7.0510%" y="1269" width="0.0494%" height="15" fill="rgb(233,213,13)" fg:x="8698" fg:w="61"/><text x="7.3010%" y="1279.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (26 samples, 0.02%)</title><rect x="7.1061%" y="1269" width="0.0211%" height="15" fill="rgb(233,141,41)" fg:x="8766" fg:w="26"/><text x="7.3561%" y="1279.50"></text></g><g><title>sha256_x86_shani::Transform (21 samples, 0.02%)</title><rect x="7.1305%" y="1269" width="0.0170%" height="15" fill="rgb(239,167,4)" fg:x="8796" fg:w="21"/><text x="7.3805%" y="1279.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.01%)</title><rect x="7.1491%" y="1269" width="0.0122%" height="15" fill="rgb(209,217,16)" fg:x="8819" fg:w="15"/><text x="7.3991%" y="1279.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (36 samples, 0.03%)</title><rect x="7.1791%" y="1269" width="0.0292%" height="15" fill="rgb(219,88,35)" fg:x="8856" fg:w="36"/><text x="7.4291%" y="1279.50"></text></g><g><title>unlink_chunk.isra.0 (35 samples, 0.03%)</title><rect x="7.2488%" y="1269" width="0.0284%" height="15" fill="rgb(220,193,23)" fg:x="8942" fg:w="35"/><text x="7.4988%" y="1279.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="7.2804%" y="1269" width="0.0105%" height="15" fill="rgb(230,90,52)" fg:x="8981" fg:w="13"/><text x="7.5304%" y="1279.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (15 samples, 0.01%)</title><rect x="7.3023%" y="1269" width="0.0122%" height="15" fill="rgb(252,106,19)" fg:x="9008" fg:w="15"/><text x="7.5523%" y="1279.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (37 samples, 0.03%)</title><rect x="7.3258%" y="1269" width="0.0300%" height="15" fill="rgb(206,74,20)" fg:x="9037" fg:w="37"/><text x="7.5758%" y="1279.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (75 samples, 0.06%)</title><rect x="7.3558%" y="1269" width="0.0608%" height="15" fill="rgb(230,138,44)" fg:x="9074" fg:w="75"/><text x="7.6058%" y="1279.50"></text></g><g><title>[anon] (5,318 samples, 4.31%)</title><rect x="3.1396%" y="1285" width="4.3110%" height="15" fill="rgb(235,182,43)" fg:x="3873" fg:w="5318"/><text x="3.3896%" y="1295.50">[anon]</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (20 samples, 0.02%)</title><rect x="7.4345%" y="1269" width="0.0162%" height="15" fill="rgb(242,16,51)" fg:x="9171" fg:w="20"/><text x="7.6845%" y="1279.50"></text></g><g><title>[bitcoind-head] (18 samples, 0.01%)</title><rect x="7.4507%" y="1285" width="0.0146%" height="15" fill="rgb(248,9,4)" fg:x="9191" fg:w="18"/><text x="7.7007%" y="1295.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (13 samples, 0.01%)</title><rect x="7.5439%" y="1253" width="0.0105%" height="15" fill="rgb(210,31,22)" fg:x="9306" fg:w="13"/><text x="7.7939%" y="1263.50"></text></g><g><title>AutoFile::write (63 samples, 0.05%)</title><rect x="7.5042%" y="1269" width="0.0511%" height="15" fill="rgb(239,54,39)" fg:x="9257" fg:w="63"/><text x="7.7542%" y="1279.50"></text></g><g><title>CCoinsViewCache::FetchCoin (42 samples, 0.03%)</title><rect x="7.5739%" y="1269" width="0.0340%" height="15" fill="rgb(230,99,41)" fg:x="9343" fg:w="42"/><text x="7.8239%" y="1279.50"></text></g><g><title>CSHA256::Write (34 samples, 0.03%)</title><rect x="7.6250%" y="1269" width="0.0276%" height="15" fill="rgb(253,106,12)" fg:x="9406" fg:w="34"/><text x="7.8750%" y="1279.50"></text></g><g><title>DataStream::read (14 samples, 0.01%)</title><rect x="7.6841%" y="1269" width="0.0113%" height="15" fill="rgb(213,46,41)" fg:x="9479" fg:w="14"/><text x="7.9341%" y="1279.50"></text></g><g><title>GetScriptOp (23 samples, 0.02%)</title><rect x="7.6987%" y="1269" width="0.0186%" height="15" fill="rgb(215,133,35)" fg:x="9497" fg:w="23"/><text x="7.9487%" y="1279.50"></text></g><g><title>SipHashUint256Extra (109 samples, 0.09%)</title><rect x="7.7190%" y="1269" width="0.0884%" height="15" fill="rgb(213,28,5)" fg:x="9522" fg:w="109"/><text x="7.9690%" y="1279.50"></text></g><g><title>[unknown] (81 samples, 0.07%)</title><rect x="7.8130%" y="1269" width="0.0657%" height="15" fill="rgb(215,77,49)" fg:x="9638" fg:w="81"/><text x="8.0630%" y="1279.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="7.8374%" y="1253" width="0.0413%" height="15" fill="rgb(248,100,22)" fg:x="9668" fg:w="51"/><text x="8.0874%" y="1263.50"></text></g><g><title>[unknown] (40 samples, 0.03%)</title><rect x="7.8463%" y="1237" width="0.0324%" height="15" fill="rgb(208,67,9)" fg:x="9679" fg:w="40"/><text x="8.0963%" y="1247.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="7.8600%" y="1221" width="0.0186%" height="15" fill="rgb(219,133,21)" fg:x="9696" fg:w="23"/><text x="8.1100%" y="1231.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (313 samples, 0.25%)</title><rect x="7.8819%" y="1269" width="0.2537%" height="15" fill="rgb(246,46,29)" fg:x="9723" fg:w="313"/><text x="8.1319%" y="1279.50"></text></g><g><title>_IO_fwrite (378 samples, 0.31%)</title><rect x="8.1357%" y="1269" width="0.3064%" height="15" fill="rgb(246,185,52)" fg:x="10036" fg:w="378"/><text x="8.3857%" y="1279.50"></text></g><g><title>__memcmp_evex_movbe (65 samples, 0.05%)</title><rect x="8.4510%" y="1269" width="0.0527%" height="15" fill="rgb(252,136,11)" fg:x="10425" fg:w="65"/><text x="8.7010%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (196 samples, 0.16%)</title><rect x="8.5037%" y="1269" width="0.1589%" height="15" fill="rgb(219,138,53)" fg:x="10490" fg:w="196"/><text x="8.7537%" y="1279.50"></text></g><g><title>__mempcpy@plt (14 samples, 0.01%)</title><rect x="8.6626%" y="1269" width="0.0113%" height="15" fill="rgb(211,51,23)" fg:x="10686" fg:w="14"/><text x="8.9126%" y="1279.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (17 samples, 0.01%)</title><rect x="8.6739%" y="1269" width="0.0138%" height="15" fill="rgb(247,221,28)" fg:x="10700" fg:w="17"/><text x="8.9239%" y="1279.50"></text></g><g><title>_int_free (70 samples, 0.06%)</title><rect x="8.7031%" y="1269" width="0.0567%" height="15" fill="rgb(251,222,45)" fg:x="10736" fg:w="70"/><text x="8.9531%" y="1279.50"></text></g><g><title>_int_malloc (336 samples, 0.27%)</title><rect x="8.7720%" y="1269" width="0.2724%" height="15" fill="rgb(217,162,53)" fg:x="10821" fg:w="336"/><text x="9.0220%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (51 samples, 0.04%)</title><rect x="9.0460%" y="1269" width="0.0413%" height="15" fill="rgb(229,93,14)" fg:x="11159" fg:w="51"/><text x="9.2960%" y="1279.50"></text></g><g><title>free@plt (15 samples, 0.01%)</title><rect x="9.0890%" y="1269" width="0.0122%" height="15" fill="rgb(209,67,49)" fg:x="11212" fg:w="15"/><text x="9.3390%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (47 samples, 0.04%)</title><rect x="9.1117%" y="1269" width="0.0381%" height="15" fill="rgb(213,87,29)" fg:x="11240" fg:w="47"/><text x="9.3617%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (82 samples, 0.07%)</title><rect x="9.1709%" y="1269" width="0.0665%" height="15" fill="rgb(205,151,52)" fg:x="11313" fg:w="82"/><text x="9.4209%" y="1279.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (26 samples, 0.02%)</title><rect x="9.2382%" y="1269" width="0.0211%" height="15" fill="rgb(253,215,39)" fg:x="11396" fg:w="26"/><text x="9.4882%" y="1279.50"></text></g><g><title>malloc (234 samples, 0.19%)</title><rect x="9.2803%" y="1269" width="0.1897%" height="15" fill="rgb(221,220,41)" fg:x="11448" fg:w="234"/><text x="9.5303%" y="1279.50"></text></g><g><title>memcpy@plt (14 samples, 0.01%)</title><rect x="9.4870%" y="1269" width="0.0113%" height="15" fill="rgb(218,133,21)" fg:x="11703" fg:w="14"/><text x="9.7370%" y="1279.50"></text></g><g><title>operator delete (16 samples, 0.01%)</title><rect x="9.5057%" y="1269" width="0.0130%" height="15" fill="rgb(221,193,43)" fg:x="11726" fg:w="16"/><text x="9.7557%" y="1279.50"></text></g><g><title>operator new (42 samples, 0.03%)</title><rect x="9.5219%" y="1269" width="0.0340%" height="15" fill="rgb(240,128,52)" fg:x="11746" fg:w="42"/><text x="9.7719%" y="1279.50"></text></g><g><title>unlink_chunk.isra.0 (16 samples, 0.01%)</title><rect x="9.6078%" y="1269" width="0.0130%" height="15" fill="rgb(253,114,12)" fg:x="11852" fg:w="16"/><text x="9.8578%" y="1279.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.01%)</title><rect x="9.6208%" y="1269" width="0.0146%" height="15" fill="rgb(215,223,47)" fg:x="11868" fg:w="18"/><text x="9.8708%" y="1279.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="9.6532%" y="1269" width="0.0113%" height="15" fill="rgb(248,225,23)" fg:x="11908" fg:w="14"/><text x="9.9032%" y="1279.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (94 samples, 0.08%)</title><rect x="9.6710%" y="1269" width="0.0762%" height="15" fill="rgb(250,108,0)" fg:x="11930" fg:w="94"/><text x="9.9210%" y="1279.50"></text></g><g><title>[unknown] (2,823 samples, 2.29%)</title><rect x="7.4661%" y="1285" width="2.2885%" height="15" fill="rgb(228,208,7)" fg:x="9210" fg:w="2823"/><text x="7.7161%" y="1295.50">[..</text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (134 samples, 0.11%)</title><rect x="9.7545%" y="1285" width="0.1086%" height="15" fill="rgb(244,45,10)" fg:x="12033" fg:w="134"/><text x="10.0045%" y="1295.50"></text></g><g><title>_IO_fwrite (42 samples, 0.03%)</title><rect x="9.8632%" y="1285" width="0.0340%" height="15" fill="rgb(207,125,25)" fg:x="12167" fg:w="42"/><text x="10.1132%" y="1295.50"></text></g><g><title>SipHashUint256Extra (25 samples, 0.02%)</title><rect x="9.9856%" y="981" width="0.0203%" height="15" fill="rgb(210,195,18)" fg:x="12318" fg:w="25"/><text x="10.2356%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (24 samples, 0.02%)</title><rect x="10.0075%" y="981" width="0.0195%" height="15" fill="rgb(249,80,12)" fg:x="12345" fg:w="24"/><text x="10.2575%" y="991.50"></text></g><g><title>SipHashUint256Extra (209 samples, 0.17%)</title><rect x="10.0293%" y="965" width="0.1694%" height="15" fill="rgb(221,65,9)" fg:x="12372" fg:w="209"/><text x="10.2793%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (96 samples, 0.08%)</title><rect x="10.1209%" y="949" width="0.0778%" height="15" fill="rgb(235,49,36)" fg:x="12485" fg:w="96"/><text x="10.3709%" y="959.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (96 samples, 0.08%)</title><rect x="10.1209%" y="933" width="0.0778%" height="15" fill="rgb(225,32,20)" fg:x="12485" fg:w="96"/><text x="10.3709%" y="943.50"></text></g><g><title>SipHashUint256Extra (1,100 samples, 0.89%)</title><rect x="10.2271%" y="885" width="0.8917%" height="15" fill="rgb(215,141,46)" fg:x="12616" fg:w="1100"/><text x="10.4771%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (408 samples, 0.33%)</title><rect x="10.7881%" y="869" width="0.3307%" height="15" fill="rgb(250,160,47)" fg:x="13308" fg:w="408"/><text x="11.0381%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (408 samples, 0.33%)</title><rect x="10.7881%" y="853" width="0.3307%" height="15" fill="rgb(216,222,40)" fg:x="13308" fg:w="408"/><text x="11.0381%" y="863.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (63 samples, 0.05%)</title><rect x="11.1691%" y="837" width="0.0511%" height="15" fill="rgb(234,217,39)" fg:x="13778" fg:w="63"/><text x="11.4191%" y="847.50"></text></g><g><title>SaltedOutpointHasher::operator (63 samples, 0.05%)</title><rect x="11.1691%" y="821" width="0.0511%" height="15" fill="rgb(207,178,40)" fg:x="13778" fg:w="63"/><text x="11.4191%" y="831.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (23 samples, 0.02%)</title><rect x="11.2015%" y="805" width="0.0186%" height="15" fill="rgb(221,136,13)" fg:x="13818" fg:w="23"/><text x="11.4515%" y="815.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (126 samples, 0.10%)</title><rect x="11.1189%" y="885" width="0.1021%" height="15" fill="rgb(249,199,10)" fg:x="13716" fg:w="126"/><text x="11.3689%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (64 samples, 0.05%)</title><rect x="11.1691%" y="869" width="0.0519%" height="15" fill="rgb(249,222,13)" fg:x="13778" fg:w="64"/><text x="11.4191%" y="879.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (64 samples, 0.05%)</title><rect x="11.1691%" y="853" width="0.0519%" height="15" fill="rgb(244,185,38)" fg:x="13778" fg:w="64"/><text x="11.4191%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,478 samples, 1.20%)</title><rect x="10.0269%" y="981" width="1.1981%" height="15" fill="rgb(236,202,9)" fg:x="12369" fg:w="1478"/><text x="10.2769%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,266 samples, 1.03%)</title><rect x="10.1988%" y="965" width="1.0263%" height="15" fill="rgb(250,229,37)" fg:x="12581" fg:w="1266"/><text x="10.4488%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,243 samples, 1.01%)</title><rect x="10.2174%" y="949" width="1.0076%" height="15" fill="rgb(206,174,23)" fg:x="12604" fg:w="1243"/><text x="10.4674%" y="959.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,243 samples, 1.01%)</title><rect x="10.2174%" y="933" width="1.0076%" height="15" fill="rgb(211,33,43)" fg:x="12604" fg:w="1243"/><text x="10.4674%" y="943.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1,243 samples, 1.01%)</title><rect x="10.2174%" y="917" width="1.0076%" height="15" fill="rgb(245,58,50)" fg:x="12604" fg:w="1243"/><text x="10.4674%" y="927.50"></text></g><g><title>SaltedOutpointHasher::operator (1,243 samples, 1.01%)</title><rect x="10.2174%" y="901" width="1.0076%" height="15" fill="rgb(244,68,36)" fg:x="12604" fg:w="1243"/><text x="10.4674%" y="911.50"></text></g><g><title>SipHashUint256Extra (834 samples, 0.68%)</title><rect x="11.2251%" y="965" width="0.6761%" height="15" fill="rgb(232,229,15)" fg:x="13847" fg:w="834"/><text x="11.4751%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (429 samples, 0.35%)</title><rect x="11.5534%" y="949" width="0.3478%" height="15" fill="rgb(254,30,23)" fg:x="14252" fg:w="429"/><text x="11.8034%" y="959.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (429 samples, 0.35%)</title><rect x="11.5534%" y="933" width="0.3478%" height="15" fill="rgb(235,160,14)" fg:x="14252" fg:w="429"/><text x="11.8034%" y="943.50"></text></g><g><title>SipHashUint256Extra (122 samples, 0.10%)</title><rect x="11.9068%" y="885" width="0.0989%" height="15" fill="rgb(212,155,44)" fg:x="14688" fg:w="122"/><text x="12.1568%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (47 samples, 0.04%)</title><rect x="11.9676%" y="869" width="0.0381%" height="15" fill="rgb(226,2,50)" fg:x="14763" fg:w="47"/><text x="12.2176%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (47 samples, 0.04%)</title><rect x="11.9676%" y="853" width="0.0381%" height="15" fill="rgb(234,177,6)" fg:x="14763" fg:w="47"/><text x="12.2176%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (280 samples, 0.23%)</title><rect x="12.0057%" y="885" width="0.2270%" height="15" fill="rgb(217,24,9)" fg:x="14810" fg:w="280"/><text x="12.2557%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (411 samples, 0.33%)</title><rect x="11.9011%" y="965" width="0.3332%" height="15" fill="rgb(220,13,46)" fg:x="14681" fg:w="411"/><text x="12.1511%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (411 samples, 0.33%)</title><rect x="11.9011%" y="949" width="0.3332%" height="15" fill="rgb(239,221,27)" fg:x="14681" fg:w="411"/><text x="12.1511%" y="959.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (411 samples, 0.33%)</title><rect x="11.9011%" y="933" width="0.3332%" height="15" fill="rgb(222,198,25)" fg:x="14681" fg:w="411"/><text x="12.1511%" y="943.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (411 samples, 0.33%)</title><rect x="11.9011%" y="917" width="0.3332%" height="15" fill="rgb(211,99,13)" fg:x="14681" fg:w="411"/><text x="12.1511%" y="927.50"></text></g><g><title>SaltedOutpointHasher::operator (411 samples, 0.33%)</title><rect x="11.9011%" y="901" width="0.3332%" height="15" fill="rgb(232,111,31)" fg:x="14681" fg:w="411"/><text x="12.1511%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (17 samples, 0.01%)</title><rect x="12.2894%" y="933" width="0.0138%" height="15" fill="rgb(245,82,37)" fg:x="15160" fg:w="17"/><text x="12.5394%" y="943.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (17 samples, 0.01%)</title><rect x="12.2894%" y="917" width="0.0138%" height="15" fill="rgb(227,149,46)" fg:x="15160" fg:w="17"/><text x="12.5394%" y="927.50"></text></g><g><title>__memset_avx512_unaligned_erms (17 samples, 0.01%)</title><rect x="12.2894%" y="901" width="0.0138%" height="15" fill="rgb(218,36,50)" fg:x="15160" fg:w="17"/><text x="12.5394%" y="911.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (18 samples, 0.01%)</title><rect x="12.3032%" y="917" width="0.0146%" height="15" fill="rgb(226,80,48)" fg:x="15177" fg:w="18"/><text x="12.5532%" y="927.50"></text></g><g><title>SaltedOutpointHasher::operator (18 samples, 0.01%)</title><rect x="12.3032%" y="901" width="0.0146%" height="15" fill="rgb(238,224,15)" fg:x="15177" fg:w="18"/><text x="12.5532%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1,349 samples, 1.09%)</title><rect x="11.2251%" y="981" width="1.0936%" height="15" fill="rgb(241,136,10)" fg:x="13847" fg:w="1349"/><text x="11.4751%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (104 samples, 0.08%)</title><rect x="12.2343%" y="965" width="0.0843%" height="15" fill="rgb(208,32,45)" fg:x="15092" fg:w="104"/><text x="12.4843%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (104 samples, 0.08%)</title><rect x="12.2343%" y="949" width="0.0843%" height="15" fill="rgb(207,135,9)" fg:x="15092" fg:w="104"/><text x="12.4843%" y="959.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (19 samples, 0.02%)</title><rect x="12.3032%" y="933" width="0.0154%" height="15" fill="rgb(206,86,44)" fg:x="15177" fg:w="19"/><text x="12.5532%" y="943.50"></text></g><g><title>SipHashUint256Extra (24 samples, 0.02%)</title><rect x="12.3186%" y="965" width="0.0195%" height="15" fill="rgb(245,177,15)" fg:x="15196" fg:w="24"/><text x="12.5686%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.02%)</title><rect x="12.3381%" y="965" width="0.0178%" height="15" fill="rgb(206,64,50)" fg:x="15220" fg:w="22"/><text x="12.5881%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (176 samples, 0.14%)</title><rect x="12.3186%" y="981" width="0.1427%" height="15" fill="rgb(234,36,40)" fg:x="15196" fg:w="176"/><text x="12.5686%" y="991.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (127 samples, 0.10%)</title><rect x="12.3583%" y="965" width="0.1030%" height="15" fill="rgb(213,64,8)" fg:x="15245" fg:w="127"/><text x="12.6083%" y="975.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (125 samples, 0.10%)</title><rect x="12.3600%" y="949" width="0.1013%" height="15" fill="rgb(210,75,36)" fg:x="15247" fg:w="125"/><text x="12.6100%" y="959.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (125 samples, 0.10%)</title><rect x="12.3600%" y="933" width="0.1013%" height="15" fill="rgb(229,88,21)" fg:x="15247" fg:w="125"/><text x="12.6100%" y="943.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (125 samples, 0.10%)</title><rect x="12.3600%" y="917" width="0.1013%" height="15" fill="rgb(252,204,47)" fg:x="15247" fg:w="125"/><text x="12.6100%" y="927.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (125 samples, 0.10%)</title><rect x="12.3600%" y="901" width="0.1013%" height="15" fill="rgb(208,77,27)" fg:x="15247" fg:w="125"/><text x="12.6100%" y="911.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (125 samples, 0.10%)</title><rect x="12.3600%" y="885" width="0.1013%" height="15" fill="rgb(221,76,26)" fg:x="15247" fg:w="125"/><text x="12.6100%" y="895.50"></text></g><g><title>operator new (125 samples, 0.10%)</title><rect x="12.3600%" y="869" width="0.1013%" height="15" fill="rgb(225,139,18)" fg:x="15247" fg:w="125"/><text x="12.6100%" y="879.50"></text></g><g><title>__posix_memalign (125 samples, 0.10%)</title><rect x="12.3600%" y="853" width="0.1013%" height="15" fill="rgb(230,137,11)" fg:x="15247" fg:w="125"/><text x="12.6100%" y="863.50"></text></g><g><title>malloc (125 samples, 0.10%)</title><rect x="12.3600%" y="837" width="0.1013%" height="15" fill="rgb(212,28,1)" fg:x="15247" fg:w="125"/><text x="12.6100%" y="847.50"></text></g><g><title>_int_malloc (125 samples, 0.10%)</title><rect x="12.3600%" y="821" width="0.1013%" height="15" fill="rgb(248,164,17)" fg:x="15247" fg:w="125"/><text x="12.6100%" y="831.50"></text></g><g><title>malloc_consolidate (20 samples, 0.02%)</title><rect x="12.4451%" y="805" width="0.0162%" height="15" fill="rgb(222,171,42)" fg:x="15352" fg:w="20"/><text x="12.6951%" y="815.50"></text></g><g><title>SipHashUint256Extra (15 samples, 0.01%)</title><rect x="12.4613%" y="949" width="0.0122%" height="15" fill="rgb(243,84,45)" fg:x="15372" fg:w="15"/><text x="12.7113%" y="959.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (3,075 samples, 2.49%)</title><rect x="9.9839%" y="1013" width="2.4927%" height="15" fill="rgb(252,49,23)" fg:x="12316" fg:w="3075"/><text x="10.2339%" y="1023.50">st..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (3,075 samples, 2.49%)</title><rect x="9.9839%" y="997" width="2.4927%" height="15" fill="rgb(215,19,7)" fg:x="12316" fg:w="3075"/><text x="10.2339%" y="1007.50">st..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (19 samples, 0.02%)</title><rect x="12.4613%" y="981" width="0.0154%" height="15" fill="rgb(238,81,41)" fg:x="15372" fg:w="19"/><text x="12.7113%" y="991.50"></text></g><g><title>SaltedOutpointHasher::operator (19 samples, 0.02%)</title><rect x="12.4613%" y="965" width="0.0154%" height="15" fill="rgb(210,199,37)" fg:x="15372" fg:w="19"/><text x="12.7113%" y="975.50"></text></g><g><title>Coin::DynamicMemoryUsage (18 samples, 0.01%)</title><rect x="12.5010%" y="949" width="0.0146%" height="15" fill="rgb(244,192,49)" fg:x="15421" fg:w="18"/><text x="12.7510%" y="959.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (18 samples, 0.01%)</title><rect x="12.5010%" y="933" width="0.0146%" height="15" fill="rgb(226,211,11)" fg:x="15421" fg:w="18"/><text x="12.7510%" y="943.50"></text></g><g><title>Coin::DynamicMemoryUsage (23 samples, 0.02%)</title><rect x="12.5010%" y="965" width="0.0186%" height="15" fill="rgb(236,162,54)" fg:x="15421" fg:w="23"/><text x="12.7510%" y="975.50"></text></g><g><title>CCoinsViewCache::BatchWrite (57 samples, 0.05%)</title><rect x="12.4767%" y="981" width="0.0462%" height="15" fill="rgb(220,229,9)" fg:x="15391" fg:w="57"/><text x="12.7267%" y="991.50"></text></g><g><title>SipHashUint256Extra (878 samples, 0.71%)</title><rect x="12.5229%" y="981" width="0.7117%" height="15" fill="rgb(250,87,22)" fg:x="15448" fg:w="878"/><text x="12.7729%" y="991.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (453 samples, 0.37%)</title><rect x="12.8674%" y="965" width="0.3672%" height="15" fill="rgb(239,43,17)" fg:x="15873" fg:w="453"/><text x="13.1174%" y="975.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (453 samples, 0.37%)</title><rect x="12.8674%" y="949" width="0.3672%" height="15" fill="rgb(231,177,25)" fg:x="15873" fg:w="453"/><text x="13.1174%" y="959.50"></text></g><g><title>SipHashUint256Extra (23 samples, 0.02%)</title><rect x="13.2403%" y="901" width="0.0186%" height="15" fill="rgb(219,179,1)" fg:x="16333" fg:w="23"/><text x="13.4903%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.01%)</title><rect x="13.2590%" y="901" width="0.0146%" height="15" fill="rgb(238,219,53)" fg:x="16356" fg:w="18"/><text x="13.5090%" y="911.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (14 samples, 0.01%)</title><rect x="13.2622%" y="885" width="0.0113%" height="15" fill="rgb(232,167,36)" fg:x="16360" fg:w="14"/><text x="13.5122%" y="895.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (14 samples, 0.01%)</title><rect x="13.2622%" y="869" width="0.0113%" height="15" fill="rgb(244,19,51)" fg:x="16360" fg:w="14"/><text x="13.5122%" y="879.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (14 samples, 0.01%)</title><rect x="13.2622%" y="853" width="0.0113%" height="15" fill="rgb(224,6,22)" fg:x="16360" fg:w="14"/><text x="13.5122%" y="863.50"></text></g><g><title>operator== (14 samples, 0.01%)</title><rect x="13.2622%" y="837" width="0.0113%" height="15" fill="rgb(224,145,5)" fg:x="16360" fg:w="14"/><text x="13.5122%" y="847.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (14 samples, 0.01%)</title><rect x="13.2622%" y="821" width="0.0113%" height="15" fill="rgb(234,130,49)" fg:x="16360" fg:w="14"/><text x="13.5122%" y="831.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (14 samples, 0.01%)</title><rect x="13.2622%" y="805" width="0.0113%" height="15" fill="rgb(254,6,2)" fg:x="16360" fg:w="14"/><text x="13.5122%" y="815.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (14 samples, 0.01%)</title><rect x="13.2622%" y="789" width="0.0113%" height="15" fill="rgb(208,96,46)" fg:x="16360" fg:w="14"/><text x="13.5122%" y="799.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (46 samples, 0.04%)</title><rect x="13.2387%" y="965" width="0.0373%" height="15" fill="rgb(239,3,39)" fg:x="16331" fg:w="46"/><text x="13.4887%" y="975.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (45 samples, 0.04%)</title><rect x="13.2395%" y="949" width="0.0365%" height="15" fill="rgb(233,210,1)" fg:x="16332" fg:w="45"/><text x="13.4895%" y="959.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (45 samples, 0.04%)</title><rect x="13.2395%" y="933" width="0.0365%" height="15" fill="rgb(244,137,37)" fg:x="16332" fg:w="45"/><text x="13.4895%" y="943.50"></text></g><g><title>SaltedOutpointHasher::operator (45 samples, 0.04%)</title><rect x="13.2395%" y="917" width="0.0365%" height="15" fill="rgb(240,136,2)" fg:x="16332" fg:w="45"/><text x="13.4895%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (53 samples, 0.04%)</title><rect x="13.2347%" y="981" width="0.0430%" height="15" fill="rgb(239,18,37)" fg:x="16326" fg:w="53"/><text x="13.4847%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (83 samples, 0.07%)</title><rect x="13.2776%" y="981" width="0.0673%" height="15" fill="rgb(218,185,22)" fg:x="16379" fg:w="83"/><text x="13.5276%" y="991.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (59 samples, 0.05%)</title><rect x="13.2971%" y="965" width="0.0478%" height="15" fill="rgb(225,218,4)" fg:x="16403" fg:w="59"/><text x="13.5471%" y="975.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (59 samples, 0.05%)</title><rect x="13.2971%" y="949" width="0.0478%" height="15" fill="rgb(230,182,32)" fg:x="16403" fg:w="59"/><text x="13.5471%" y="959.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (59 samples, 0.05%)</title><rect x="13.2971%" y="933" width="0.0478%" height="15" fill="rgb(242,56,43)" fg:x="16403" fg:w="59"/><text x="13.5471%" y="943.50"></text></g><g><title>operator== (59 samples, 0.05%)</title><rect x="13.2971%" y="917" width="0.0478%" height="15" fill="rgb(233,99,24)" fg:x="16403" fg:w="59"/><text x="13.5471%" y="927.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (58 samples, 0.05%)</title><rect x="13.2979%" y="901" width="0.0470%" height="15" fill="rgb(234,209,42)" fg:x="16404" fg:w="58"/><text x="13.5479%" y="911.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (58 samples, 0.05%)</title><rect x="13.2979%" y="885" width="0.0470%" height="15" fill="rgb(227,7,12)" fg:x="16404" fg:w="58"/><text x="13.5479%" y="895.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (58 samples, 0.05%)</title><rect x="13.2979%" y="869" width="0.0470%" height="15" fill="rgb(245,203,43)" fg:x="16404" fg:w="58"/><text x="13.5479%" y="879.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (20 samples, 0.02%)</title><rect x="13.3490%" y="933" width="0.0162%" height="15" fill="rgb(238,205,33)" fg:x="16467" fg:w="20"/><text x="13.5990%" y="943.50"></text></g><g><title>SaltedOutpointHasher::operator (20 samples, 0.02%)</title><rect x="13.3490%" y="917" width="0.0162%" height="15" fill="rgb(231,56,7)" fg:x="16467" fg:w="20"/><text x="13.5990%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (22 samples, 0.02%)</title><rect x="13.3481%" y="965" width="0.0178%" height="15" fill="rgb(244,186,29)" fg:x="16466" fg:w="22"/><text x="13.5981%" y="975.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (21 samples, 0.02%)</title><rect x="13.3490%" y="949" width="0.0170%" height="15" fill="rgb(234,111,31)" fg:x="16467" fg:w="21"/><text x="13.5990%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (27 samples, 0.02%)</title><rect x="13.3449%" y="981" width="0.0219%" height="15" fill="rgb(241,149,10)" fg:x="16462" fg:w="27"/><text x="13.5949%" y="991.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (1,101 samples, 0.89%)</title><rect x="12.4767%" y="1013" width="0.8925%" height="15" fill="rgb(249,206,44)" fg:x="15391" fg:w="1101"/><text x="12.7267%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1,101 samples, 0.89%)</title><rect x="12.4767%" y="997" width="0.8925%" height="15" fill="rgb(251,153,30)" fg:x="15391" fg:w="1101"/><text x="12.7267%" y="1007.50"></text></g><g><title>SipHashUint256Extra (55 samples, 0.04%)</title><rect x="13.3741%" y="997" width="0.0446%" height="15" fill="rgb(239,152,38)" fg:x="16498" fg:w="55"/><text x="13.6241%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (17 samples, 0.01%)</title><rect x="13.4049%" y="981" width="0.0138%" height="15" fill="rgb(249,139,47)" fg:x="16536" fg:w="17"/><text x="13.6549%" y="991.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (17 samples, 0.01%)</title><rect x="13.4049%" y="965" width="0.0138%" height="15" fill="rgb(244,64,35)" fg:x="16536" fg:w="17"/><text x="13.6549%" y="975.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (24 samples, 0.02%)</title><rect x="13.4462%" y="933" width="0.0195%" height="15" fill="rgb(216,46,15)" fg:x="16587" fg:w="24"/><text x="13.6962%" y="943.50"></text></g><g><title>Coin::operator= (14 samples, 0.01%)</title><rect x="13.4730%" y="933" width="0.0113%" height="15" fill="rgb(250,74,19)" fg:x="16620" fg:w="14"/><text x="13.7230%" y="943.50"></text></g><g><title>CCoinsViewCache::BatchWrite (94 samples, 0.08%)</title><rect x="13.4324%" y="949" width="0.0762%" height="15" fill="rgb(249,42,33)" fg:x="16570" fg:w="94"/><text x="13.6824%" y="959.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (14 samples, 0.01%)</title><rect x="13.4973%" y="933" width="0.0113%" height="15" fill="rgb(242,149,17)" fg:x="16650" fg:w="14"/><text x="13.7473%" y="943.50"></text></g><g><title>SipHashUint256Extra (1,547 samples, 1.25%)</title><rect x="13.5086%" y="949" width="1.2541%" height="15" fill="rgb(244,29,21)" fg:x="16664" fg:w="1547"/><text x="13.7586%" y="959.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (608 samples, 0.49%)</title><rect x="14.2698%" y="933" width="0.4929%" height="15" fill="rgb(220,130,37)" fg:x="17603" fg:w="608"/><text x="14.5198%" y="943.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (608 samples, 0.49%)</title><rect x="14.2698%" y="917" width="0.4929%" height="15" fill="rgb(211,67,2)" fg:x="17603" fg:w="608"/><text x="14.5198%" y="927.50"></text></g><g><title>[[igc]] (25 samples, 0.02%)</title><rect x="14.8770%" y="837" width="0.0203%" height="15" fill="rgb(235,68,52)" fg:x="18352" fg:w="25"/><text x="15.1270%" y="847.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="14.8851%" y="821" width="0.0122%" height="15" fill="rgb(246,142,3)" fg:x="18362" fg:w="15"/><text x="15.1351%" y="831.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="14.8851%" y="805" width="0.0122%" height="15" fill="rgb(241,25,7)" fg:x="18362" fg:w="15"/><text x="15.1351%" y="815.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="14.8730%" y="933" width="0.0316%" height="15" fill="rgb(242,119,39)" fg:x="18347" fg:w="39"/><text x="15.1230%" y="943.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="14.8738%" y="917" width="0.0308%" height="15" fill="rgb(241,98,45)" fg:x="18348" fg:w="38"/><text x="15.1238%" y="927.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="14.8738%" y="901" width="0.0308%" height="15" fill="rgb(254,28,30)" fg:x="18348" fg:w="38"/><text x="15.1238%" y="911.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="14.8754%" y="885" width="0.0292%" height="15" fill="rgb(241,142,54)" fg:x="18350" fg:w="36"/><text x="15.1254%" y="895.50"></text></g><g><title>[unknown] (35 samples, 0.03%)</title><rect x="14.8762%" y="869" width="0.0284%" height="15" fill="rgb(222,85,15)" fg:x="18351" fg:w="35"/><text x="15.1262%" y="879.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="14.8770%" y="853" width="0.0276%" height="15" fill="rgb(210,85,47)" fg:x="18352" fg:w="34"/><text x="15.1270%" y="863.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="14.9200%" y="869" width="0.0113%" height="15" fill="rgb(224,206,25)" fg:x="18405" fg:w="14"/><text x="15.1700%" y="879.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="14.9208%" y="853" width="0.0105%" height="15" fill="rgb(243,201,19)" fg:x="18406" fg:w="13"/><text x="15.1708%" y="863.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="14.9208%" y="837" width="0.0105%" height="15" fill="rgb(236,59,4)" fg:x="18406" fg:w="13"/><text x="15.1708%" y="847.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="14.9208%" y="821" width="0.0105%" height="15" fill="rgb(254,179,45)" fg:x="18406" fg:w="13"/><text x="15.1708%" y="831.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="14.9208%" y="805" width="0.0105%" height="15" fill="rgb(226,14,10)" fg:x="18406" fg:w="13"/><text x="15.1708%" y="815.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (21 samples, 0.02%)</title><rect x="14.9313%" y="869" width="0.0170%" height="15" fill="rgb(244,27,41)" fg:x="18419" fg:w="21"/><text x="15.1813%" y="879.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (66 samples, 0.05%)</title><rect x="14.9046%" y="901" width="0.0535%" height="15" fill="rgb(235,35,32)" fg:x="18386" fg:w="66"/><text x="15.1546%" y="911.50"></text></g><g><title>SaltedOutpointHasher::operator (66 samples, 0.05%)</title><rect x="14.9046%" y="885" width="0.0535%" height="15" fill="rgb(218,68,31)" fg:x="18386" fg:w="66"/><text x="15.1546%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (68 samples, 0.06%)</title><rect x="14.9046%" y="933" width="0.0551%" height="15" fill="rgb(207,120,37)" fg:x="18386" fg:w="68"/><text x="15.1546%" y="943.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (68 samples, 0.06%)</title><rect x="14.9046%" y="917" width="0.0551%" height="15" fill="rgb(227,98,0)" fg:x="18386" fg:w="68"/><text x="15.1546%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (245 samples, 0.20%)</title><rect x="14.7700%" y="949" width="0.1986%" height="15" fill="rgb(207,7,3)" fg:x="18220" fg:w="245"/><text x="15.0200%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (66 samples, 0.05%)</title><rect x="14.9702%" y="949" width="0.0535%" height="15" fill="rgb(206,98,19)" fg:x="18467" fg:w="66"/><text x="15.2202%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (39 samples, 0.03%)</title><rect x="14.9921%" y="933" width="0.0316%" height="15" fill="rgb(217,5,26)" fg:x="18494" fg:w="39"/><text x="15.2421%" y="943.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (30 samples, 0.02%)</title><rect x="14.9994%" y="917" width="0.0243%" height="15" fill="rgb(235,190,38)" fg:x="18503" fg:w="30"/><text x="15.2494%" y="927.50"></text></g><g><title>SaltedOutpointHasher::operator (30 samples, 0.02%)</title><rect x="14.9994%" y="901" width="0.0243%" height="15" fill="rgb(247,86,24)" fg:x="18503" fg:w="30"/><text x="15.2494%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,970 samples, 1.60%)</title><rect x="13.4324%" y="965" width="1.5970%" height="15" fill="rgb(205,101,16)" fg:x="16570" fg:w="1970"/><text x="13.6824%" y="975.50"></text></g><g><title>SipHashUint256Extra (81 samples, 0.07%)</title><rect x="15.0351%" y="933" width="0.0657%" height="15" fill="rgb(246,168,33)" fg:x="18547" fg:w="81"/><text x="15.2851%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (33 samples, 0.03%)</title><rect x="15.0740%" y="917" width="0.0268%" height="15" fill="rgb(231,114,1)" fg:x="18595" fg:w="33"/><text x="15.3240%" y="927.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (33 samples, 0.03%)</title><rect x="15.0740%" y="901" width="0.0268%" height="15" fill="rgb(207,184,53)" fg:x="18595" fg:w="33"/><text x="15.3240%" y="911.50"></text></g><g><title>CCoinsViewCache::BatchWrite (6,335 samples, 5.14%)</title><rect x="9.9710%" y="1029" width="5.1355%" height="15" fill="rgb(224,95,51)" fg:x="12300" fg:w="6335"/><text x="10.2210%" y="1039.50">CCoins..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (2,143 samples, 1.74%)</title><rect x="13.3692%" y="1013" width="1.7372%" height="15" fill="rgb(212,188,45)" fg:x="16492" fg:w="2143"/><text x="13.6192%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,066 samples, 1.67%)</title><rect x="13.4316%" y="997" width="1.6748%" height="15" fill="rgb(223,154,38)" fg:x="16569" fg:w="2066"/><text x="13.6816%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,066 samples, 1.67%)</title><rect x="13.4316%" y="981" width="1.6748%" height="15" fill="rgb(251,22,52)" fg:x="16569" fg:w="2066"/><text x="13.6816%" y="991.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (95 samples, 0.08%)</title><rect x="15.0294%" y="965" width="0.0770%" height="15" fill="rgb(229,209,22)" fg:x="18540" fg:w="95"/><text x="15.2794%" y="975.50"></text></g><g><title>SaltedOutpointHasher::operator (95 samples, 0.08%)</title><rect x="15.0294%" y="949" width="0.0770%" height="15" fill="rgb(234,138,34)" fg:x="18540" fg:w="95"/><text x="15.2794%" y="959.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (28 samples, 0.02%)</title><rect x="15.1064%" y="1013" width="0.0227%" height="15" fill="rgb(212,95,11)" fg:x="18635" fg:w="28"/><text x="15.3564%" y="1023.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (28 samples, 0.02%)</title><rect x="15.1064%" y="997" width="0.0227%" height="15" fill="rgb(240,179,47)" fg:x="18635" fg:w="28"/><text x="15.3564%" y="1007.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (28 samples, 0.02%)</title><rect x="15.1064%" y="981" width="0.0227%" height="15" fill="rgb(240,163,11)" fg:x="18635" fg:w="28"/><text x="15.3564%" y="991.50"></text></g><g><title>operator new (28 samples, 0.02%)</title><rect x="15.1064%" y="965" width="0.0227%" height="15" fill="rgb(236,37,12)" fg:x="18635" fg:w="28"/><text x="15.3564%" y="975.50"></text></g><g><title>__posix_memalign (28 samples, 0.02%)</title><rect x="15.1064%" y="949" width="0.0227%" height="15" fill="rgb(232,164,16)" fg:x="18635" fg:w="28"/><text x="15.3564%" y="959.50"></text></g><g><title>malloc (28 samples, 0.02%)</title><rect x="15.1064%" y="933" width="0.0227%" height="15" fill="rgb(244,205,15)" fg:x="18635" fg:w="28"/><text x="15.3564%" y="943.50"></text></g><g><title>_int_malloc (28 samples, 0.02%)</title><rect x="15.1064%" y="917" width="0.0227%" height="15" fill="rgb(223,117,47)" fg:x="18635" fg:w="28"/><text x="15.3564%" y="927.50"></text></g><g><title>cfree@GLIBC_2.2.5 (21 samples, 0.02%)</title><rect x="15.1324%" y="997" width="0.0170%" height="15" fill="rgb(244,107,35)" fg:x="18667" fg:w="21"/><text x="15.3824%" y="1007.50"></text></g><g><title>_int_free (21 samples, 0.02%)</title><rect x="15.1324%" y="981" width="0.0170%" height="15" fill="rgb(205,140,8)" fg:x="18667" fg:w="21"/><text x="15.3824%" y="991.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (21 samples, 0.02%)</title><rect x="15.1324%" y="965" width="0.0170%" height="15" fill="rgb(228,84,46)" fg:x="18667" fg:w="21"/><text x="15.3824%" y="975.50"></text></g><g><title>malloc_consolidate (21 samples, 0.02%)</title><rect x="15.1324%" y="949" width="0.0170%" height="15" fill="rgb(254,188,9)" fg:x="18667" fg:w="21"/><text x="15.3824%" y="959.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (55 samples, 0.04%)</title><rect x="15.1064%" y="1029" width="0.0446%" height="15" fill="rgb(206,112,54)" fg:x="18635" fg:w="55"/><text x="15.3564%" y="1039.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (23 samples, 0.02%)</title><rect x="15.1324%" y="1013" width="0.0186%" height="15" fill="rgb(216,84,49)" fg:x="18667" fg:w="23"/><text x="15.3824%" y="1023.50"></text></g><g><title>SipHashUint256Extra (295 samples, 0.24%)</title><rect x="15.1510%" y="1029" width="0.2391%" height="15" fill="rgb(214,194,35)" fg:x="18690" fg:w="295"/><text x="15.4010%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (119 samples, 0.10%)</title><rect x="15.2937%" y="1013" width="0.0965%" height="15" fill="rgb(249,28,3)" fg:x="18866" fg:w="119"/><text x="15.5437%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (119 samples, 0.10%)</title><rect x="15.2937%" y="997" width="0.0965%" height="15" fill="rgb(222,56,52)" fg:x="18866" fg:w="119"/><text x="15.5437%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (45 samples, 0.04%)</title><rect x="15.3902%" y="1029" width="0.0365%" height="15" fill="rgb(245,217,50)" fg:x="18985" fg:w="45"/><text x="15.6402%" y="1039.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (13 samples, 0.01%)</title><rect x="15.4161%" y="1013" width="0.0105%" height="15" fill="rgb(213,201,24)" fg:x="19017" fg:w="13"/><text x="15.6661%" y="1023.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (13 samples, 0.01%)</title><rect x="15.4161%" y="997" width="0.0105%" height="15" fill="rgb(248,116,28)" fg:x="19017" fg:w="13"/><text x="15.6661%" y="1007.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (13 samples, 0.01%)</title><rect x="15.4161%" y="981" width="0.0105%" height="15" fill="rgb(219,72,43)" fg:x="19017" fg:w="13"/><text x="15.6661%" y="991.50"></text></g><g><title>operator== (13 samples, 0.01%)</title><rect x="15.4161%" y="965" width="0.0105%" height="15" fill="rgb(209,138,14)" fg:x="19017" fg:w="13"/><text x="15.6661%" y="975.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (13 samples, 0.01%)</title><rect x="15.4161%" y="949" width="0.0105%" height="15" fill="rgb(222,18,33)" fg:x="19017" fg:w="13"/><text x="15.6661%" y="959.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (13 samples, 0.01%)</title><rect x="15.4161%" y="933" width="0.0105%" height="15" fill="rgb(213,199,7)" fg:x="19017" fg:w="13"/><text x="15.6661%" y="943.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (13 samples, 0.01%)</title><rect x="15.4161%" y="917" width="0.0105%" height="15" fill="rgb(250,110,10)" fg:x="19017" fg:w="13"/><text x="15.6661%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (20 samples, 0.02%)</title><rect x="15.4266%" y="1029" width="0.0162%" height="15" fill="rgb(248,123,6)" fg:x="19030" fg:w="20"/><text x="15.6766%" y="1039.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (30 samples, 0.02%)</title><rect x="15.4445%" y="1029" width="0.0243%" height="15" fill="rgb(206,91,31)" fg:x="19052" fg:w="30"/><text x="15.6945%" y="1039.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (26 samples, 0.02%)</title><rect x="15.4866%" y="965" width="0.0211%" height="15" fill="rgb(211,154,13)" fg:x="19104" fg:w="26"/><text x="15.7366%" y="975.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (26 samples, 0.02%)</title><rect x="15.4866%" y="949" width="0.0211%" height="15" fill="rgb(225,148,7)" fg:x="19104" fg:w="26"/><text x="15.7366%" y="959.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (26 samples, 0.02%)</title><rect x="15.4866%" y="933" width="0.0211%" height="15" fill="rgb(220,160,43)" fg:x="19104" fg:w="26"/><text x="15.7366%" y="943.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (24 samples, 0.02%)</title><rect x="15.4883%" y="917" width="0.0195%" height="15" fill="rgb(213,52,39)" fg:x="19106" fg:w="24"/><text x="15.7383%" y="927.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (24 samples, 0.02%)</title><rect x="15.4883%" y="901" width="0.0195%" height="15" fill="rgb(243,137,7)" fg:x="19106" fg:w="24"/><text x="15.7383%" y="911.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (24 samples, 0.02%)</title><rect x="15.4883%" y="885" width="0.0195%" height="15" fill="rgb(230,79,13)" fg:x="19106" fg:w="24"/><text x="15.7383%" y="895.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (63 samples, 0.05%)</title><rect x="15.5077%" y="869" width="0.0511%" height="15" fill="rgb(247,105,23)" fg:x="19130" fg:w="63"/><text x="15.7577%" y="879.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (49 samples, 0.04%)</title><rect x="15.5191%" y="853" width="0.0397%" height="15" fill="rgb(223,179,41)" fg:x="19144" fg:w="49"/><text x="15.7691%" y="863.50"></text></g><g><title>CCoinsViewCache::Flush (6,915 samples, 5.61%)</title><rect x="9.9710%" y="1045" width="5.6056%" height="15" fill="rgb(218,9,34)" fg:x="12300" fg:w="6915"/><text x="10.2210%" y="1055.50">CCoinsV..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (133 samples, 0.11%)</title><rect x="15.4688%" y="1029" width="0.1078%" height="15" fill="rgb(222,106,8)" fg:x="19082" fg:w="133"/><text x="15.7188%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (132 samples, 0.11%)</title><rect x="15.4696%" y="1013" width="0.1070%" height="15" fill="rgb(211,220,0)" fg:x="19083" fg:w="132"/><text x="15.7196%" y="1023.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (126 samples, 0.10%)</title><rect x="15.4745%" y="997" width="0.1021%" height="15" fill="rgb(229,52,16)" fg:x="19089" fg:w="126"/><text x="15.7245%" y="1007.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (111 samples, 0.09%)</title><rect x="15.4866%" y="981" width="0.0900%" height="15" fill="rgb(212,155,18)" fg:x="19104" fg:w="111"/><text x="15.7366%" y="991.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (85 samples, 0.07%)</title><rect x="15.5077%" y="965" width="0.0689%" height="15" fill="rgb(242,21,14)" fg:x="19130" fg:w="85"/><text x="15.7577%" y="975.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (85 samples, 0.07%)</title><rect x="15.5077%" y="949" width="0.0689%" height="15" fill="rgb(222,19,48)" fg:x="19130" fg:w="85"/><text x="15.7577%" y="959.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (85 samples, 0.07%)</title><rect x="15.5077%" y="933" width="0.0689%" height="15" fill="rgb(232,45,27)" fg:x="19130" fg:w="85"/><text x="15.7577%" y="943.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (85 samples, 0.07%)</title><rect x="15.5077%" y="917" width="0.0689%" height="15" fill="rgb(249,103,42)" fg:x="19130" fg:w="85"/><text x="15.7577%" y="927.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (85 samples, 0.07%)</title><rect x="15.5077%" y="901" width="0.0689%" height="15" fill="rgb(246,81,33)" fg:x="19130" fg:w="85"/><text x="15.7577%" y="911.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (85 samples, 0.07%)</title><rect x="15.5077%" y="885" width="0.0689%" height="15" fill="rgb(252,33,42)" fg:x="19130" fg:w="85"/><text x="15.7577%" y="895.50"></text></g><g><title>Coin::~Coin (22 samples, 0.02%)</title><rect x="15.5588%" y="869" width="0.0178%" height="15" fill="rgb(209,212,41)" fg:x="19193" fg:w="22"/><text x="15.8088%" y="879.50"></text></g><g><title>CTxOut::~CTxOut (22 samples, 0.02%)</title><rect x="15.5588%" y="853" width="0.0178%" height="15" fill="rgb(207,154,6)" fg:x="19193" fg:w="22"/><text x="15.8088%" y="863.50"></text></g><g><title>CScript::~CScript (22 samples, 0.02%)</title><rect x="15.5588%" y="837" width="0.0178%" height="15" fill="rgb(223,64,47)" fg:x="19193" fg:w="22"/><text x="15.8088%" y="847.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (22 samples, 0.02%)</title><rect x="15.5588%" y="821" width="0.0178%" height="15" fill="rgb(211,161,38)" fg:x="19193" fg:w="22"/><text x="15.8088%" y="831.50"></text></g><g><title>CScript::IsWitnessProgram (21 samples, 0.02%)</title><rect x="15.5782%" y="1045" width="0.0170%" height="15" fill="rgb(219,138,40)" fg:x="19217" fg:w="21"/><text x="15.8282%" y="1055.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="1029" width="0.0138%" height="15" fill="rgb(241,228,46)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="1039.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="1013" width="0.0138%" height="15" fill="rgb(223,209,38)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="1023.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="997" width="0.0138%" height="15" fill="rgb(236,164,45)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="1007.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="981" width="0.0138%" height="15" fill="rgb(231,15,5)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="991.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="965" width="0.0138%" height="15" fill="rgb(252,35,15)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="975.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="949" width="0.0138%" height="15" fill="rgb(248,181,18)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="959.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="933" width="0.0138%" height="15" fill="rgb(233,39,42)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="943.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="917" width="0.0138%" height="15" fill="rgb(238,110,33)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="927.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="901" width="0.0138%" height="15" fill="rgb(233,195,10)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="911.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (17 samples, 0.01%)</title><rect x="15.5815%" y="885" width="0.0138%" height="15" fill="rgb(254,105,3)" fg:x="19221" fg:w="17"/><text x="15.8315%" y="895.50"></text></g><g><title>CTxMemPool::removeConflicts (17 samples, 0.01%)</title><rect x="15.6009%" y="1029" width="0.0138%" height="15" fill="rgb(221,225,9)" fg:x="19245" fg:w="17"/><text x="15.8509%" y="1039.50"></text></g><g><title>indirectmap&lt;COutPoint, CTransaction const*&gt;::find (16 samples, 0.01%)</title><rect x="15.6017%" y="1013" width="0.0130%" height="15" fill="rgb(224,227,45)" fg:x="19246" fg:w="16"/><text x="15.8517%" y="1023.50"></text></g><g><title>std::map&lt;COutPoint const*, CTransaction const*, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (16 samples, 0.01%)</title><rect x="15.6017%" y="997" width="0.0130%" height="15" fill="rgb(229,198,43)" fg:x="19246" fg:w="16"/><text x="15.8517%" y="1007.50"></text></g><g><title>SipHashUint256 (177 samples, 0.14%)</title><rect x="15.6163%" y="1029" width="0.1435%" height="15" fill="rgb(206,209,35)" fg:x="19264" fg:w="177"/><text x="15.8663%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (61 samples, 0.05%)</title><rect x="15.7104%" y="1013" width="0.0494%" height="15" fill="rgb(245,195,53)" fg:x="19380" fg:w="61"/><text x="15.9604%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (61 samples, 0.05%)</title><rect x="15.7104%" y="997" width="0.0494%" height="15" fill="rgb(240,92,26)" fg:x="19380" fg:w="61"/><text x="15.9604%" y="1007.50"></text></g><g><title>SaltedTxidHasher::operator (28 samples, 0.02%)</title><rect x="15.7655%" y="965" width="0.0227%" height="15" fill="rgb(207,40,23)" fg:x="19448" fg:w="28"/><text x="16.0155%" y="975.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt; &gt; (29 samples, 0.02%)</title><rect x="15.7655%" y="1029" width="0.0235%" height="15" fill="rgb(223,111,35)" fg:x="19448" fg:w="29"/><text x="16.0155%" y="1039.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt;, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (29 samples, 0.02%)</title><rect x="15.7655%" y="1013" width="0.0235%" height="15" fill="rgb(229,147,28)" fg:x="19448" fg:w="29"/><text x="16.0155%" y="1023.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (29 samples, 0.02%)</title><rect x="15.7655%" y="997" width="0.0235%" height="15" fill="rgb(211,29,28)" fg:x="19448" fg:w="29"/><text x="16.0155%" y="1007.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;uint256, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (29 samples, 0.02%)</title><rect x="15.7655%" y="981" width="0.0235%" height="15" fill="rgb(228,72,33)" fg:x="19448" fg:w="29"/><text x="16.0155%" y="991.50"></text></g><g><title>SipHashUint256 (24 samples, 0.02%)</title><rect x="15.7979%" y="1013" width="0.0195%" height="15" fill="rgb(205,214,31)" fg:x="19488" fg:w="24"/><text x="16.0479%" y="1023.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase (14 samples, 0.01%)</title><rect x="15.8174%" y="1013" width="0.0113%" height="15" fill="rgb(224,111,15)" fg:x="19512" fg:w="14"/><text x="16.0674%" y="1023.50"></text></g><g><title>SipHashUint256 (15 samples, 0.01%)</title><rect x="15.8320%" y="981" width="0.0122%" height="15" fill="rgb(253,21,26)" fg:x="19530" fg:w="15"/><text x="16.0820%" y="991.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (23 samples, 0.02%)</title><rect x="15.8287%" y="1013" width="0.0186%" height="15" fill="rgb(245,139,43)" fg:x="19526" fg:w="23"/><text x="16.0787%" y="1023.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (23 samples, 0.02%)</title><rect x="15.8287%" y="997" width="0.0186%" height="15" fill="rgb(252,170,7)" fg:x="19526" fg:w="23"/><text x="16.0787%" y="1007.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (71 samples, 0.06%)</title><rect x="15.7939%" y="1029" width="0.0576%" height="15" fill="rgb(231,118,14)" fg:x="19483" fg:w="71"/><text x="16.0439%" y="1039.50"></text></g><g><title>CTxMemPool::removeForBlock (313 samples, 0.25%)</title><rect x="15.5993%" y="1045" width="0.2537%" height="15" fill="rgb(238,83,0)" fg:x="19243" fg:w="313"/><text x="15.8493%" y="1055.50"></text></g><g><title>Coin::Coin (80 samples, 0.06%)</title><rect x="15.8644%" y="997" width="0.0649%" height="15" fill="rgb(221,39,39)" fg:x="19570" fg:w="80"/><text x="16.1144%" y="1007.50"></text></g><g><title>CTxOut::CTxOut (79 samples, 0.06%)</title><rect x="15.8652%" y="981" width="0.0640%" height="15" fill="rgb(222,119,46)" fg:x="19571" fg:w="79"/><text x="16.1152%" y="991.50"></text></g><g><title>CScript::CScript (77 samples, 0.06%)</title><rect x="15.8668%" y="965" width="0.0624%" height="15" fill="rgb(222,165,49)" fg:x="19573" fg:w="77"/><text x="16.1168%" y="975.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (77 samples, 0.06%)</title><rect x="15.8668%" y="949" width="0.0624%" height="15" fill="rgb(219,113,52)" fg:x="19573" fg:w="77"/><text x="16.1168%" y="959.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (71 samples, 0.06%)</title><rect x="15.8717%" y="933" width="0.0576%" height="15" fill="rgb(214,7,15)" fg:x="19579" fg:w="71"/><text x="16.1217%" y="943.50"></text></g><g><title>AddCoins (91 samples, 0.07%)</title><rect x="15.8587%" y="1013" width="0.0738%" height="15" fill="rgb(235,32,4)" fg:x="19563" fg:w="91"/><text x="16.1087%" y="1023.50"></text></g><g><title>SipHashUint256Extra (28 samples, 0.02%)</title><rect x="15.9560%" y="949" width="0.0227%" height="15" fill="rgb(238,90,54)" fg:x="19683" fg:w="28"/><text x="16.2060%" y="959.50"></text></g><g><title>AddCoins (20 samples, 0.02%)</title><rect x="15.9860%" y="933" width="0.0162%" height="15" fill="rgb(213,208,19)" fg:x="19720" fg:w="20"/><text x="16.2360%" y="943.50"></text></g><g><title>CCoinsViewCache::AddCoin (18 samples, 0.01%)</title><rect x="16.0022%" y="933" width="0.0146%" height="15" fill="rgb(233,156,4)" fg:x="19740" fg:w="18"/><text x="16.2522%" y="943.50"></text></g><g><title>SipHashUint256Extra (122 samples, 0.10%)</title><rect x="16.0168%" y="933" width="0.0989%" height="15" fill="rgb(207,194,5)" fg:x="19758" fg:w="122"/><text x="16.2668%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (44 samples, 0.04%)</title><rect x="16.0800%" y="917" width="0.0357%" height="15" fill="rgb(206,111,30)" fg:x="19836" fg:w="44"/><text x="16.3300%" y="927.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (44 samples, 0.04%)</title><rect x="16.0800%" y="901" width="0.0357%" height="15" fill="rgb(243,70,54)" fg:x="19836" fg:w="44"/><text x="16.3300%" y="911.50"></text></g><g><title>SipHashUint256Extra (48 samples, 0.04%)</title><rect x="16.1319%" y="853" width="0.0389%" height="15" fill="rgb(242,28,8)" fg:x="19900" fg:w="48"/><text x="16.3819%" y="863.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (16 samples, 0.01%)</title><rect x="16.1578%" y="837" width="0.0130%" height="15" fill="rgb(219,106,18)" fg:x="19932" fg:w="16"/><text x="16.4078%" y="847.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (16 samples, 0.01%)</title><rect x="16.1578%" y="821" width="0.0130%" height="15" fill="rgb(244,222,10)" fg:x="19932" fg:w="16"/><text x="16.4078%" y="831.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (66 samples, 0.05%)</title><rect x="16.1254%" y="917" width="0.0535%" height="15" fill="rgb(236,179,52)" fg:x="19892" fg:w="66"/><text x="16.3754%" y="927.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (66 samples, 0.05%)</title><rect x="16.1254%" y="901" width="0.0535%" height="15" fill="rgb(213,23,39)" fg:x="19892" fg:w="66"/><text x="16.3754%" y="911.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (66 samples, 0.05%)</title><rect x="16.1254%" y="885" width="0.0535%" height="15" fill="rgb(238,48,10)" fg:x="19892" fg:w="66"/><text x="16.3754%" y="895.50"></text></g><g><title>SaltedOutpointHasher::operator (66 samples, 0.05%)</title><rect x="16.1254%" y="869" width="0.0535%" height="15" fill="rgb(251,196,23)" fg:x="19892" fg:w="66"/><text x="16.3754%" y="879.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (83 samples, 0.07%)</title><rect x="16.1157%" y="933" width="0.0673%" height="15" fill="rgb(250,152,24)" fg:x="19880" fg:w="83"/><text x="16.3657%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (256 samples, 0.21%)</title><rect x="15.9836%" y="949" width="0.2075%" height="15" fill="rgb(209,150,17)" fg:x="19717" fg:w="256"/><text x="16.2336%" y="959.50"></text></g><g><title>SipHashUint256Extra (97 samples, 0.08%)</title><rect x="16.1919%" y="933" width="0.0786%" height="15" fill="rgb(234,202,34)" fg:x="19974" fg:w="97"/><text x="16.4419%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (39 samples, 0.03%)</title><rect x="16.2389%" y="917" width="0.0316%" height="15" fill="rgb(253,148,53)" fg:x="20032" fg:w="39"/><text x="16.4889%" y="927.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (39 samples, 0.03%)</title><rect x="16.2389%" y="901" width="0.0316%" height="15" fill="rgb(218,129,16)" fg:x="20032" fg:w="39"/><text x="16.4889%" y="911.50"></text></g><g><title>CCoinsViewCache::AddCoin (14 samples, 0.01%)</title><rect x="16.2738%" y="853" width="0.0113%" height="15" fill="rgb(216,85,19)" fg:x="20075" fg:w="14"/><text x="16.5238%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (33 samples, 0.03%)</title><rect x="16.2705%" y="933" width="0.0268%" height="15" fill="rgb(235,228,7)" fg:x="20071" fg:w="33"/><text x="16.5205%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (32 samples, 0.03%)</title><rect x="16.2713%" y="917" width="0.0259%" height="15" fill="rgb(245,175,0)" fg:x="20072" fg:w="32"/><text x="16.5213%" y="927.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (32 samples, 0.03%)</title><rect x="16.2713%" y="901" width="0.0259%" height="15" fill="rgb(208,168,36)" fg:x="20072" fg:w="32"/><text x="16.5213%" y="911.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (32 samples, 0.03%)</title><rect x="16.2713%" y="885" width="0.0259%" height="15" fill="rgb(246,171,24)" fg:x="20072" fg:w="32"/><text x="16.5213%" y="895.50"></text></g><g><title>SaltedOutpointHasher::operator (32 samples, 0.03%)</title><rect x="16.2713%" y="869" width="0.0259%" height="15" fill="rgb(215,142,24)" fg:x="20072" fg:w="32"/><text x="16.5213%" y="879.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (13 samples, 0.01%)</title><rect x="16.3094%" y="901" width="0.0105%" height="15" fill="rgb(250,187,7)" fg:x="20119" fg:w="13"/><text x="16.5594%" y="911.50"></text></g><g><title>SipHashUint256Extra (115 samples, 0.09%)</title><rect x="16.3208%" y="853" width="0.0932%" height="15" fill="rgb(228,66,33)" fg:x="20133" fg:w="115"/><text x="16.5708%" y="863.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (52 samples, 0.04%)</title><rect x="16.3719%" y="837" width="0.0422%" height="15" fill="rgb(234,215,21)" fg:x="20196" fg:w="52"/><text x="16.6219%" y="847.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (52 samples, 0.04%)</title><rect x="16.3719%" y="821" width="0.0422%" height="15" fill="rgb(222,191,20)" fg:x="20196" fg:w="52"/><text x="16.6219%" y="831.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (128 samples, 0.10%)</title><rect x="16.3200%" y="885" width="0.1038%" height="15" fill="rgb(245,79,54)" fg:x="20132" fg:w="128"/><text x="16.5700%" y="895.50"></text></g><g><title>SaltedOutpointHasher::operator (128 samples, 0.10%)</title><rect x="16.3200%" y="869" width="0.1038%" height="15" fill="rgb(240,10,37)" fg:x="20132" fg:w="128"/><text x="16.5700%" y="879.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (129 samples, 0.10%)</title><rect x="16.3200%" y="901" width="0.1046%" height="15" fill="rgb(214,192,32)" fg:x="20132" fg:w="129"/><text x="16.5700%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (289 samples, 0.23%)</title><rect x="16.1911%" y="949" width="0.2343%" height="15" fill="rgb(209,36,54)" fg:x="19973" fg:w="289"/><text x="16.4411%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (158 samples, 0.13%)</title><rect x="16.2973%" y="933" width="0.1281%" height="15" fill="rgb(220,10,11)" fg:x="20104" fg:w="158"/><text x="16.5473%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (158 samples, 0.13%)</title><rect x="16.2973%" y="917" width="0.1281%" height="15" fill="rgb(221,106,17)" fg:x="20104" fg:w="158"/><text x="16.5473%" y="927.50"></text></g><g><title>AddCoins (66 samples, 0.05%)</title><rect x="16.4254%" y="933" width="0.0535%" height="15" fill="rgb(251,142,44)" fg:x="20262" fg:w="66"/><text x="16.6754%" y="943.50"></text></g><g><title>Coin::Coin (64 samples, 0.05%)</title><rect x="16.4270%" y="917" width="0.0519%" height="15" fill="rgb(238,13,15)" fg:x="20264" fg:w="64"/><text x="16.6770%" y="927.50"></text></g><g><title>CTxOut::CTxOut (63 samples, 0.05%)</title><rect x="16.4278%" y="901" width="0.0511%" height="15" fill="rgb(208,107,27)" fg:x="20265" fg:w="63"/><text x="16.6778%" y="911.50"></text></g><g><title>CScript::CScript (63 samples, 0.05%)</title><rect x="16.4278%" y="885" width="0.0511%" height="15" fill="rgb(205,136,37)" fg:x="20265" fg:w="63"/><text x="16.6778%" y="895.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (63 samples, 0.05%)</title><rect x="16.4278%" y="869" width="0.0511%" height="15" fill="rgb(250,205,27)" fg:x="20265" fg:w="63"/><text x="16.6778%" y="879.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (59 samples, 0.05%)</title><rect x="16.4310%" y="853" width="0.0478%" height="15" fill="rgb(210,80,43)" fg:x="20269" fg:w="59"/><text x="16.6810%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (75 samples, 0.06%)</title><rect x="16.4254%" y="949" width="0.0608%" height="15" fill="rgb(247,160,36)" fg:x="20262" fg:w="75"/><text x="16.6754%" y="959.50"></text></g><g><title>CCoinsViewCache::AddCoin (691 samples, 0.56%)</title><rect x="15.9325%" y="1013" width="0.5602%" height="15" fill="rgb(234,13,49)" fg:x="19654" fg:w="691"/><text x="16.1825%" y="1023.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (683 samples, 0.55%)</title><rect x="15.9390%" y="997" width="0.5537%" height="15" fill="rgb(234,122,0)" fg:x="19662" fg:w="683"/><text x="16.1890%" y="1007.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (682 samples, 0.55%)</title><rect x="15.9398%" y="981" width="0.5529%" height="15" fill="rgb(207,146,38)" fg:x="19663" fg:w="682"/><text x="16.1898%" y="991.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (682 samples, 0.55%)</title><rect x="15.9398%" y="965" width="0.5529%" height="15" fill="rgb(207,177,25)" fg:x="19663" fg:w="682"/><text x="16.1898%" y="975.50"></text></g><g><title>CTxOut::CTxOut (42 samples, 0.03%)</title><rect x="16.5016%" y="997" width="0.0340%" height="15" fill="rgb(211,178,42)" fg:x="20356" fg:w="42"/><text x="16.7516%" y="1007.50"></text></g><g><title>CScript::CScript (42 samples, 0.03%)</title><rect x="16.5016%" y="981" width="0.0340%" height="15" fill="rgb(230,69,54)" fg:x="20356" fg:w="42"/><text x="16.7516%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (42 samples, 0.03%)</title><rect x="16.5016%" y="965" width="0.0340%" height="15" fill="rgb(214,135,41)" fg:x="20356" fg:w="42"/><text x="16.7516%" y="975.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (32 samples, 0.03%)</title><rect x="16.5097%" y="949" width="0.0259%" height="15" fill="rgb(237,67,25)" fg:x="20366" fg:w="32"/><text x="16.7597%" y="959.50"></text></g><g><title>Coin::Coin (47 samples, 0.04%)</title><rect x="16.4983%" y="1013" width="0.0381%" height="15" fill="rgb(222,189,50)" fg:x="20352" fg:w="47"/><text x="16.7483%" y="1023.50"></text></g><g><title>SipHashUint256Extra (482 samples, 0.39%)</title><rect x="16.5364%" y="1013" width="0.3907%" height="15" fill="rgb(245,148,34)" fg:x="20399" fg:w="482"/><text x="16.7864%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (170 samples, 0.14%)</title><rect x="16.7893%" y="997" width="0.1378%" height="15" fill="rgb(222,29,6)" fg:x="20711" fg:w="170"/><text x="17.0393%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (170 samples, 0.14%)</title><rect x="16.7893%" y="981" width="0.1378%" height="15" fill="rgb(221,189,43)" fg:x="20711" fg:w="170"/><text x="17.0393%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (79 samples, 0.06%)</title><rect x="16.9272%" y="1013" width="0.0640%" height="15" fill="rgb(207,36,27)" fg:x="20881" fg:w="79"/><text x="17.1772%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (21 samples, 0.02%)</title><rect x="16.9912%" y="1013" width="0.0170%" height="15" fill="rgb(217,90,24)" fg:x="20960" fg:w="21"/><text x="17.2412%" y="1023.50"></text></g><g><title>AddCoins (1,427 samples, 1.16%)</title><rect x="15.8555%" y="1029" width="1.1568%" height="15" fill="rgb(224,66,35)" fg:x="19559" fg:w="1427"/><text x="16.1055%" y="1039.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~_Vector_base (62 samples, 0.05%)</title><rect x="17.0228%" y="997" width="0.0503%" height="15" fill="rgb(221,13,50)" fg:x="20999" fg:w="62"/><text x="17.2728%" y="1007.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::_M_deallocate (62 samples, 0.05%)</title><rect x="17.0228%" y="981" width="0.0503%" height="15" fill="rgb(236,68,49)" fg:x="20999" fg:w="62"/><text x="17.2728%" y="991.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxUndo&gt; &gt;::deallocate (62 samples, 0.05%)</title><rect x="17.0228%" y="965" width="0.0503%" height="15" fill="rgb(229,146,28)" fg:x="20999" fg:w="62"/><text x="17.2728%" y="975.50"></text></g><g><title>std::allocator&lt;CTxUndo&gt;::deallocate (62 samples, 0.05%)</title><rect x="17.0228%" y="949" width="0.0503%" height="15" fill="rgb(225,31,38)" fg:x="20999" fg:w="62"/><text x="17.2728%" y="959.50"></text></g><g><title>std::__new_allocator&lt;CTxUndo&gt;::deallocate (62 samples, 0.05%)</title><rect x="17.0228%" y="933" width="0.0503%" height="15" fill="rgb(250,208,3)" fg:x="20999" fg:w="62"/><text x="17.2728%" y="943.50"></text></g><g><title>cfree@GLIBC_2.2.5 (62 samples, 0.05%)</title><rect x="17.0228%" y="917" width="0.0503%" height="15" fill="rgb(246,54,23)" fg:x="20999" fg:w="62"/><text x="17.2728%" y="927.50"></text></g><g><title>_int_free (62 samples, 0.05%)</title><rect x="17.0228%" y="901" width="0.0503%" height="15" fill="rgb(243,76,11)" fg:x="20999" fg:w="62"/><text x="17.2728%" y="911.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (62 samples, 0.05%)</title><rect x="17.0228%" y="885" width="0.0503%" height="15" fill="rgb(245,21,50)" fg:x="20999" fg:w="62"/><text x="17.2728%" y="895.50"></text></g><g><title>malloc_consolidate (62 samples, 0.05%)</title><rect x="17.0228%" y="869" width="0.0503%" height="15" fill="rgb(228,9,43)" fg:x="20999" fg:w="62"/><text x="17.2728%" y="879.50"></text></g><g><title>_int_free (38 samples, 0.03%)</title><rect x="17.0771%" y="789" width="0.0308%" height="15" fill="rgb(208,100,47)" fg:x="21066" fg:w="38"/><text x="17.3271%" y="799.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~_Vector_base (45 samples, 0.04%)</title><rect x="17.0739%" y="885" width="0.0365%" height="15" fill="rgb(232,26,8)" fg:x="21062" fg:w="45"/><text x="17.3239%" y="895.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_deallocate (43 samples, 0.03%)</title><rect x="17.0755%" y="869" width="0.0349%" height="15" fill="rgb(216,166,38)" fg:x="21064" fg:w="43"/><text x="17.3255%" y="879.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::deallocate (43 samples, 0.03%)</title><rect x="17.0755%" y="853" width="0.0349%" height="15" fill="rgb(251,202,51)" fg:x="21064" fg:w="43"/><text x="17.3255%" y="863.50"></text></g><g><title>std::allocator&lt;Coin&gt;::deallocate (43 samples, 0.03%)</title><rect x="17.0755%" y="837" width="0.0349%" height="15" fill="rgb(254,216,34)" fg:x="21064" fg:w="43"/><text x="17.3255%" y="847.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::deallocate (43 samples, 0.03%)</title><rect x="17.0755%" y="821" width="0.0349%" height="15" fill="rgb(251,32,27)" fg:x="21064" fg:w="43"/><text x="17.3255%" y="831.50"></text></g><g><title>cfree@GLIBC_2.2.5 (43 samples, 0.03%)</title><rect x="17.0755%" y="805" width="0.0349%" height="15" fill="rgb(208,127,28)" fg:x="21064" fg:w="43"/><text x="17.3255%" y="815.50"></text></g><g><title>_int_free (15 samples, 0.01%)</title><rect x="17.1209%" y="725" width="0.0122%" height="15" fill="rgb(224,137,22)" fg:x="21120" fg:w="15"/><text x="17.3709%" y="735.50"></text></g><g><title>CBlockUndo::~CBlockUndo (137 samples, 0.11%)</title><rect x="17.0228%" y="1029" width="0.1111%" height="15" fill="rgb(254,70,32)" fg:x="20999" fg:w="137"/><text x="17.2728%" y="1039.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (137 samples, 0.11%)</title><rect x="17.0228%" y="1013" width="0.1111%" height="15" fill="rgb(229,75,37)" fg:x="20999" fg:w="137"/><text x="17.2728%" y="1023.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (75 samples, 0.06%)</title><rect x="17.0731%" y="997" width="0.0608%" height="15" fill="rgb(252,64,23)" fg:x="21061" fg:w="75"/><text x="17.3231%" y="1007.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (75 samples, 0.06%)</title><rect x="17.0731%" y="981" width="0.0608%" height="15" fill="rgb(232,162,48)" fg:x="21061" fg:w="75"/><text x="17.3231%" y="991.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (75 samples, 0.06%)</title><rect x="17.0731%" y="965" width="0.0608%" height="15" fill="rgb(246,160,12)" fg:x="21061" fg:w="75"/><text x="17.3231%" y="975.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (75 samples, 0.06%)</title><rect x="17.0731%" y="949" width="0.0608%" height="15" fill="rgb(247,166,0)" fg:x="21061" fg:w="75"/><text x="17.3231%" y="959.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (75 samples, 0.06%)</title><rect x="17.0731%" y="933" width="0.0608%" height="15" fill="rgb(249,219,21)" fg:x="21061" fg:w="75"/><text x="17.3231%" y="943.50"></text></g><g><title>CTxUndo::~CTxUndo (75 samples, 0.06%)</title><rect x="17.0731%" y="917" width="0.0608%" height="15" fill="rgb(205,209,3)" fg:x="21061" fg:w="75"/><text x="17.3231%" y="927.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (75 samples, 0.06%)</title><rect x="17.0731%" y="901" width="0.0608%" height="15" fill="rgb(243,44,1)" fg:x="21061" fg:w="75"/><text x="17.3231%" y="911.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (29 samples, 0.02%)</title><rect x="17.1104%" y="885" width="0.0235%" height="15" fill="rgb(206,159,16)" fg:x="21107" fg:w="29"/><text x="17.3604%" y="895.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (29 samples, 0.02%)</title><rect x="17.1104%" y="869" width="0.0235%" height="15" fill="rgb(244,77,30)" fg:x="21107" fg:w="29"/><text x="17.3604%" y="879.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (29 samples, 0.02%)</title><rect x="17.1104%" y="853" width="0.0235%" height="15" fill="rgb(218,69,12)" fg:x="21107" fg:w="29"/><text x="17.3604%" y="863.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (28 samples, 0.02%)</title><rect x="17.1112%" y="837" width="0.0227%" height="15" fill="rgb(212,87,7)" fg:x="21108" fg:w="28"/><text x="17.3612%" y="847.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (28 samples, 0.02%)</title><rect x="17.1112%" y="821" width="0.0227%" height="15" fill="rgb(245,114,25)" fg:x="21108" fg:w="28"/><text x="17.3612%" y="831.50"></text></g><g><title>Coin::~Coin (28 samples, 0.02%)</title><rect x="17.1112%" y="805" width="0.0227%" height="15" fill="rgb(210,61,42)" fg:x="21108" fg:w="28"/><text x="17.3612%" y="815.50"></text></g><g><title>CTxOut::~CTxOut (28 samples, 0.02%)</title><rect x="17.1112%" y="789" width="0.0227%" height="15" fill="rgb(211,52,33)" fg:x="21108" fg:w="28"/><text x="17.3612%" y="799.50"></text></g><g><title>CScript::~CScript (28 samples, 0.02%)</title><rect x="17.1112%" y="773" width="0.0227%" height="15" fill="rgb(234,58,33)" fg:x="21108" fg:w="28"/><text x="17.3612%" y="783.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (28 samples, 0.02%)</title><rect x="17.1112%" y="757" width="0.0227%" height="15" fill="rgb(220,115,36)" fg:x="21108" fg:w="28"/><text x="17.3612%" y="767.50"></text></g><g><title>cfree@GLIBC_2.2.5 (20 samples, 0.02%)</title><rect x="17.1177%" y="741" width="0.0162%" height="15" fill="rgb(243,153,54)" fg:x="21116" fg:w="20"/><text x="17.3677%" y="751.50"></text></g><g><title>SipHashUint256Extra (34 samples, 0.03%)</title><rect x="17.1460%" y="949" width="0.0276%" height="15" fill="rgb(251,47,18)" fg:x="21151" fg:w="34"/><text x="17.3960%" y="959.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (17 samples, 0.01%)</title><rect x="17.1598%" y="933" width="0.0138%" height="15" fill="rgb(242,102,42)" fg:x="21168" fg:w="17"/><text x="17.4098%" y="943.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (17 samples, 0.01%)</title><rect x="17.1598%" y="917" width="0.0138%" height="15" fill="rgb(234,31,38)" fg:x="21168" fg:w="17"/><text x="17.4098%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (55 samples, 0.04%)</title><rect x="17.1363%" y="965" width="0.0446%" height="15" fill="rgb(221,117,51)" fg:x="21139" fg:w="55"/><text x="17.3863%" y="975.50"></text></g><g><title>SipHashUint256Extra (102 samples, 0.08%)</title><rect x="17.2060%" y="933" width="0.0827%" height="15" fill="rgb(212,20,18)" fg:x="21225" fg:w="102"/><text x="17.4560%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (45 samples, 0.04%)</title><rect x="17.2522%" y="917" width="0.0365%" height="15" fill="rgb(245,133,36)" fg:x="21282" fg:w="45"/><text x="17.5022%" y="927.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (45 samples, 0.04%)</title><rect x="17.2522%" y="901" width="0.0365%" height="15" fill="rgb(212,6,19)" fg:x="21282" fg:w="45"/><text x="17.5022%" y="911.50"></text></g><g><title>CCoinsViewCache::FetchCoin (199 samples, 0.16%)</title><rect x="17.1355%" y="1013" width="0.1613%" height="15" fill="rgb(218,1,36)" fg:x="21138" fg:w="199"/><text x="17.3855%" y="1023.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (198 samples, 0.16%)</title><rect x="17.1363%" y="997" width="0.1605%" height="15" fill="rgb(246,84,54)" fg:x="21139" fg:w="198"/><text x="17.3863%" y="1007.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (198 samples, 0.16%)</title><rect x="17.1363%" y="981" width="0.1605%" height="15" fill="rgb(242,110,6)" fg:x="21139" fg:w="198"/><text x="17.3863%" y="991.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (143 samples, 0.12%)</title><rect x="17.1809%" y="965" width="0.1159%" height="15" fill="rgb(214,47,5)" fg:x="21194" fg:w="143"/><text x="17.4309%" y="975.50"></text></g><g><title>SaltedOutpointHasher::operator (143 samples, 0.12%)</title><rect x="17.1809%" y="949" width="0.1159%" height="15" fill="rgb(218,159,25)" fg:x="21194" fg:w="143"/><text x="17.4309%" y="959.50"></text></g><g><title>SipHashUint256Extra (27 samples, 0.02%)</title><rect x="17.3033%" y="1013" width="0.0219%" height="15" fill="rgb(215,211,28)" fg:x="21345" fg:w="27"/><text x="17.5533%" y="1023.50"></text></g><g><title>CCoinsViewCache::AccessCoin (240 samples, 0.19%)</title><rect x="17.1339%" y="1029" width="0.1946%" height="15" fill="rgb(238,59,32)" fg:x="21136" fg:w="240"/><text x="17.3839%" y="1039.50"></text></g><g><title>CCoinsViewCache::AddCoin (16 samples, 0.01%)</title><rect x="17.3284%" y="1029" width="0.0130%" height="15" fill="rgb(226,82,3)" fg:x="21376" fg:w="16"/><text x="17.5784%" y="1039.50"></text></g><g><title>CCoinsViewCache::FetchCoin (37 samples, 0.03%)</title><rect x="17.3414%" y="1029" width="0.0300%" height="15" fill="rgb(240,164,32)" fg:x="21392" fg:w="37"/><text x="17.5914%" y="1039.50"></text></g><g><title>CCoinsViewCache::GetCoin (146 samples, 0.12%)</title><rect x="17.3714%" y="1029" width="0.1184%" height="15" fill="rgb(232,46,7)" fg:x="21429" fg:w="146"/><text x="17.6214%" y="1039.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (144 samples, 0.12%)</title><rect x="17.3730%" y="1013" width="0.1167%" height="15" fill="rgb(229,129,53)" fg:x="21431" fg:w="144"/><text x="17.6230%" y="1023.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (144 samples, 0.12%)</title><rect x="17.3730%" y="997" width="0.1167%" height="15" fill="rgb(234,188,29)" fg:x="21431" fg:w="144"/><text x="17.6230%" y="1007.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (144 samples, 0.12%)</title><rect x="17.3730%" y="981" width="0.1167%" height="15" fill="rgb(246,141,4)" fg:x="21431" fg:w="144"/><text x="17.6230%" y="991.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (144 samples, 0.12%)</title><rect x="17.3730%" y="965" width="0.1167%" height="15" fill="rgb(229,23,39)" fg:x="21431" fg:w="144"/><text x="17.6230%" y="975.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (144 samples, 0.12%)</title><rect x="17.3730%" y="949" width="0.1167%" height="15" fill="rgb(206,12,3)" fg:x="21431" fg:w="144"/><text x="17.6230%" y="959.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (144 samples, 0.12%)</title><rect x="17.3730%" y="933" width="0.1167%" height="15" fill="rgb(252,226,20)" fg:x="21431" fg:w="144"/><text x="17.6230%" y="943.50"></text></g><g><title>Coin::Coin (144 samples, 0.12%)</title><rect x="17.3730%" y="917" width="0.1167%" height="15" fill="rgb(216,123,35)" fg:x="21431" fg:w="144"/><text x="17.6230%" y="927.50"></text></g><g><title>CTxOut::CTxOut (144 samples, 0.12%)</title><rect x="17.3730%" y="901" width="0.1167%" height="15" fill="rgb(212,68,40)" fg:x="21431" fg:w="144"/><text x="17.6230%" y="911.50"></text></g><g><title>CScript::CScript (143 samples, 0.12%)</title><rect x="17.3738%" y="885" width="0.1159%" height="15" fill="rgb(254,125,32)" fg:x="21432" fg:w="143"/><text x="17.6238%" y="895.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (143 samples, 0.12%)</title><rect x="17.3738%" y="869" width="0.1159%" height="15" fill="rgb(253,97,22)" fg:x="21432" fg:w="143"/><text x="17.6238%" y="879.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (133 samples, 0.11%)</title><rect x="17.3819%" y="853" width="0.1078%" height="15" fill="rgb(241,101,14)" fg:x="21442" fg:w="133"/><text x="17.6319%" y="863.50"></text></g><g><title>CCoinsViewCache::SpendCoin (17 samples, 0.01%)</title><rect x="17.4906%" y="1029" width="0.0138%" height="15" fill="rgb(238,103,29)" fg:x="21576" fg:w="17"/><text x="17.7406%" y="1039.50"></text></g><g><title>CScript::IsWitnessProgram (43 samples, 0.03%)</title><rect x="17.5051%" y="1029" width="0.0349%" height="15" fill="rgb(233,195,47)" fg:x="21594" fg:w="43"/><text x="17.7551%" y="1039.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (36 samples, 0.03%)</title><rect x="17.5108%" y="1013" width="0.0292%" height="15" fill="rgb(246,218,30)" fg:x="21601" fg:w="36"/><text x="17.7608%" y="1023.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (36 samples, 0.03%)</title><rect x="17.5108%" y="997" width="0.0292%" height="15" fill="rgb(219,145,47)" fg:x="21601" fg:w="36"/><text x="17.7608%" y="1007.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (35 samples, 0.03%)</title><rect x="17.5116%" y="981" width="0.0284%" height="15" fill="rgb(243,12,26)" fg:x="21602" fg:w="35"/><text x="17.7616%" y="991.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (35 samples, 0.03%)</title><rect x="17.5116%" y="965" width="0.0284%" height="15" fill="rgb(214,87,16)" fg:x="21602" fg:w="35"/><text x="17.7616%" y="975.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (35 samples, 0.03%)</title><rect x="17.5116%" y="949" width="0.0284%" height="15" fill="rgb(208,99,42)" fg:x="21602" fg:w="35"/><text x="17.7616%" y="959.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (35 samples, 0.03%)</title><rect x="17.5116%" y="933" width="0.0284%" height="15" fill="rgb(253,99,2)" fg:x="21602" fg:w="35"/><text x="17.7616%" y="943.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (35 samples, 0.03%)</title><rect x="17.5116%" y="917" width="0.0284%" height="15" fill="rgb(220,168,23)" fg:x="21602" fg:w="35"/><text x="17.7616%" y="927.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (35 samples, 0.03%)</title><rect x="17.5116%" y="901" width="0.0284%" height="15" fill="rgb(242,38,24)" fg:x="21602" fg:w="35"/><text x="17.7616%" y="911.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (35 samples, 0.03%)</title><rect x="17.5116%" y="885" width="0.0284%" height="15" fill="rgb(225,182,9)" fg:x="21602" fg:w="35"/><text x="17.7616%" y="895.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (35 samples, 0.03%)</title><rect x="17.5116%" y="869" width="0.0284%" height="15" fill="rgb(243,178,37)" fg:x="21602" fg:w="35"/><text x="17.7616%" y="879.50"></text></g><g><title>CCoinsViewCache::FetchCoin (70 samples, 0.06%)</title><rect x="17.5773%" y="933" width="0.0567%" height="15" fill="rgb(232,139,19)" fg:x="21683" fg:w="70"/><text x="17.8273%" y="943.50"></text></g><g><title>SipHashUint256Extra (72 samples, 0.06%)</title><rect x="17.6511%" y="933" width="0.0584%" height="15" fill="rgb(225,201,24)" fg:x="21774" fg:w="72"/><text x="17.9011%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (30 samples, 0.02%)</title><rect x="17.6851%" y="917" width="0.0243%" height="15" fill="rgb(221,47,46)" fg:x="21816" fg:w="30"/><text x="17.9351%" y="927.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (30 samples, 0.02%)</title><rect x="17.6851%" y="901" width="0.0243%" height="15" fill="rgb(249,23,13)" fg:x="21816" fg:w="30"/><text x="17.9351%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (166 samples, 0.13%)</title><rect x="17.5773%" y="949" width="0.1346%" height="15" fill="rgb(219,9,5)" fg:x="21683" fg:w="166"/><text x="17.8273%" y="959.50"></text></g><g><title>CCoinsViewCache::FetchCoin (55 samples, 0.04%)</title><rect x="17.7151%" y="917" width="0.0446%" height="15" fill="rgb(254,171,16)" fg:x="21853" fg:w="55"/><text x="17.9651%" y="927.50"></text></g><g><title>CCoinsViewCache::GetCoin (24 samples, 0.02%)</title><rect x="17.7597%" y="917" width="0.0195%" height="15" fill="rgb(230,171,20)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="927.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (24 samples, 0.02%)</title><rect x="17.7597%" y="901" width="0.0195%" height="15" fill="rgb(210,71,41)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="911.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (24 samples, 0.02%)</title><rect x="17.7597%" y="885" width="0.0195%" height="15" fill="rgb(206,173,20)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="895.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (24 samples, 0.02%)</title><rect x="17.7597%" y="869" width="0.0195%" height="15" fill="rgb(233,88,34)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="879.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (24 samples, 0.02%)</title><rect x="17.7597%" y="853" width="0.0195%" height="15" fill="rgb(223,209,46)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="863.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (24 samples, 0.02%)</title><rect x="17.7597%" y="837" width="0.0195%" height="15" fill="rgb(250,43,18)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="847.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (24 samples, 0.02%)</title><rect x="17.7597%" y="821" width="0.0195%" height="15" fill="rgb(208,13,10)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="831.50"></text></g><g><title>Coin::Coin (24 samples, 0.02%)</title><rect x="17.7597%" y="805" width="0.0195%" height="15" fill="rgb(212,200,36)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="815.50"></text></g><g><title>CTxOut::CTxOut (24 samples, 0.02%)</title><rect x="17.7597%" y="789" width="0.0195%" height="15" fill="rgb(225,90,30)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="799.50"></text></g><g><title>CScript::CScript (24 samples, 0.02%)</title><rect x="17.7597%" y="773" width="0.0195%" height="15" fill="rgb(236,182,39)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="783.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (24 samples, 0.02%)</title><rect x="17.7597%" y="757" width="0.0195%" height="15" fill="rgb(212,144,35)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="767.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (24 samples, 0.02%)</title><rect x="17.7597%" y="741" width="0.0195%" height="15" fill="rgb(228,63,44)" fg:x="21908" fg:w="24"/><text x="18.0097%" y="751.50"></text></g><g><title>SipHashUint256Extra (36 samples, 0.03%)</title><rect x="17.7954%" y="917" width="0.0292%" height="15" fill="rgb(228,109,6)" fg:x="21952" fg:w="36"/><text x="18.0454%" y="927.50"></text></g><g><title>CCoinsViewCache::FetchCoin (330 samples, 0.27%)</title><rect x="17.5627%" y="997" width="0.2675%" height="15" fill="rgb(238,117,24)" fg:x="21665" fg:w="330"/><text x="17.8127%" y="1007.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (314 samples, 0.25%)</title><rect x="17.5757%" y="981" width="0.2545%" height="15" fill="rgb(242,26,26)" fg:x="21681" fg:w="314"/><text x="17.8257%" y="991.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (313 samples, 0.25%)</title><rect x="17.5765%" y="965" width="0.2537%" height="15" fill="rgb(221,92,48)" fg:x="21682" fg:w="313"/><text x="17.8265%" y="975.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (146 samples, 0.12%)</title><rect x="17.7119%" y="949" width="0.1184%" height="15" fill="rgb(209,209,32)" fg:x="21849" fg:w="146"/><text x="17.9619%" y="959.50"></text></g><g><title>SaltedOutpointHasher::operator (146 samples, 0.12%)</title><rect x="17.7119%" y="933" width="0.1184%" height="15" fill="rgb(221,70,22)" fg:x="21849" fg:w="146"/><text x="17.9619%" y="943.50"></text></g><g><title>CCoinsViewCache::GetCoin (53 samples, 0.04%)</title><rect x="17.8302%" y="997" width="0.0430%" height="15" fill="rgb(248,145,5)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="1007.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (53 samples, 0.04%)</title><rect x="17.8302%" y="981" width="0.0430%" height="15" fill="rgb(226,116,26)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="991.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (53 samples, 0.04%)</title><rect x="17.8302%" y="965" width="0.0430%" height="15" fill="rgb(244,5,17)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="975.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (53 samples, 0.04%)</title><rect x="17.8302%" y="949" width="0.0430%" height="15" fill="rgb(252,159,33)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="959.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (53 samples, 0.04%)</title><rect x="17.8302%" y="933" width="0.0430%" height="15" fill="rgb(206,71,0)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="943.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (53 samples, 0.04%)</title><rect x="17.8302%" y="917" width="0.0430%" height="15" fill="rgb(233,118,54)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="927.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (53 samples, 0.04%)</title><rect x="17.8302%" y="901" width="0.0430%" height="15" fill="rgb(234,83,48)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="911.50"></text></g><g><title>Coin::Coin (53 samples, 0.04%)</title><rect x="17.8302%" y="885" width="0.0430%" height="15" fill="rgb(228,3,54)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="895.50"></text></g><g><title>CTxOut::CTxOut (53 samples, 0.04%)</title><rect x="17.8302%" y="869" width="0.0430%" height="15" fill="rgb(226,155,13)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="879.50"></text></g><g><title>CScript::CScript (53 samples, 0.04%)</title><rect x="17.8302%" y="853" width="0.0430%" height="15" fill="rgb(241,28,37)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="863.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (53 samples, 0.04%)</title><rect x="17.8302%" y="837" width="0.0430%" height="15" fill="rgb(233,93,10)" fg:x="21995" fg:w="53"/><text x="18.0802%" y="847.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (52 samples, 0.04%)</title><rect x="17.8310%" y="821" width="0.0422%" height="15" fill="rgb(225,113,19)" fg:x="21996" fg:w="52"/><text x="18.0810%" y="831.50"></text></g><g><title>SipHashUint256Extra (19 samples, 0.02%)</title><rect x="17.8780%" y="997" width="0.0154%" height="15" fill="rgb(241,2,18)" fg:x="22054" fg:w="19"/><text x="18.1280%" y="1007.50"></text></g><g><title>CCoinsViewCache::AccessCoin (411 samples, 0.33%)</title><rect x="17.5619%" y="1013" width="0.3332%" height="15" fill="rgb(228,207,21)" fg:x="21664" fg:w="411"/><text x="17.8119%" y="1023.50"></text></g><g><title>Coin::operator= (18 samples, 0.01%)</title><rect x="17.9178%" y="997" width="0.0146%" height="15" fill="rgb(213,211,35)" fg:x="22103" fg:w="18"/><text x="18.1678%" y="1007.50"></text></g><g><title>CTxOut::operator= (14 samples, 0.01%)</title><rect x="17.9210%" y="981" width="0.0113%" height="15" fill="rgb(209,83,10)" fg:x="22107" fg:w="14"/><text x="18.1710%" y="991.50"></text></g><g><title>CScript::operator= (14 samples, 0.01%)</title><rect x="17.9210%" y="965" width="0.0113%" height="15" fill="rgb(209,164,1)" fg:x="22107" fg:w="14"/><text x="18.1710%" y="975.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (14 samples, 0.01%)</title><rect x="17.9210%" y="949" width="0.0113%" height="15" fill="rgb(213,184,43)" fg:x="22107" fg:w="14"/><text x="18.1710%" y="959.50"></text></g><g><title>CCoinsViewCache::FetchCoin (52 samples, 0.04%)</title><rect x="17.8959%" y="1013" width="0.0422%" height="15" fill="rgb(231,61,34)" fg:x="22076" fg:w="52"/><text x="18.1459%" y="1023.50"></text></g><g><title>CCoinsViewCache::GetCoin (376 samples, 0.30%)</title><rect x="17.9380%" y="1013" width="0.3048%" height="15" fill="rgb(235,75,3)" fg:x="22128" fg:w="376"/><text x="18.1880%" y="1023.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (365 samples, 0.30%)</title><rect x="17.9470%" y="997" width="0.2959%" height="15" fill="rgb(220,106,47)" fg:x="22139" fg:w="365"/><text x="18.1970%" y="1007.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (364 samples, 0.30%)</title><rect x="17.9478%" y="981" width="0.2951%" height="15" fill="rgb(210,196,33)" fg:x="22140" fg:w="364"/><text x="18.1978%" y="991.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (364 samples, 0.30%)</title><rect x="17.9478%" y="965" width="0.2951%" height="15" fill="rgb(229,154,42)" fg:x="22140" fg:w="364"/><text x="18.1978%" y="975.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (364 samples, 0.30%)</title><rect x="17.9478%" y="949" width="0.2951%" height="15" fill="rgb(228,114,26)" fg:x="22140" fg:w="364"/><text x="18.1978%" y="959.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (364 samples, 0.30%)</title><rect x="17.9478%" y="933" width="0.2951%" height="15" fill="rgb(208,144,1)" fg:x="22140" fg:w="364"/><text x="18.1978%" y="943.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (363 samples, 0.29%)</title><rect x="17.9486%" y="917" width="0.2943%" height="15" fill="rgb(239,112,37)" fg:x="22141" fg:w="363"/><text x="18.1986%" y="927.50"></text></g><g><title>Coin::Coin (363 samples, 0.29%)</title><rect x="17.9486%" y="901" width="0.2943%" height="15" fill="rgb(210,96,50)" fg:x="22141" fg:w="363"/><text x="18.1986%" y="911.50"></text></g><g><title>CTxOut::CTxOut (362 samples, 0.29%)</title><rect x="17.9494%" y="885" width="0.2935%" height="15" fill="rgb(222,178,2)" fg:x="22142" fg:w="362"/><text x="18.1994%" y="895.50"></text></g><g><title>CScript::CScript (362 samples, 0.29%)</title><rect x="17.9494%" y="869" width="0.2935%" height="15" fill="rgb(226,74,18)" fg:x="22142" fg:w="362"/><text x="18.1994%" y="879.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (362 samples, 0.29%)</title><rect x="17.9494%" y="853" width="0.2935%" height="15" fill="rgb(225,67,54)" fg:x="22142" fg:w="362"/><text x="18.1994%" y="863.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (345 samples, 0.28%)</title><rect x="17.9632%" y="837" width="0.2797%" height="15" fill="rgb(251,92,32)" fg:x="22159" fg:w="345"/><text x="18.2132%" y="847.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (15 samples, 0.01%)</title><rect x="18.3247%" y="789" width="0.0122%" height="15" fill="rgb(228,149,22)" fg:x="22605" fg:w="15"/><text x="18.5747%" y="799.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (118 samples, 0.10%)</title><rect x="18.3369%" y="773" width="0.0957%" height="15" fill="rgb(243,54,13)" fg:x="22620" fg:w="118"/><text x="18.5869%" y="783.50"></text></g><g><title>leveldb::Slice::compare (41 samples, 0.03%)</title><rect x="18.3993%" y="757" width="0.0332%" height="15" fill="rgb(243,180,28)" fg:x="22697" fg:w="41"/><text x="18.6493%" y="767.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (139 samples, 0.11%)</title><rect x="18.4325%" y="773" width="0.1127%" height="15" fill="rgb(208,167,24)" fg:x="22738" fg:w="139"/><text x="18.6825%" y="783.50"></text></g><g><title>leveldb::ExtractUserKey (28 samples, 0.02%)</title><rect x="18.5225%" y="757" width="0.0227%" height="15" fill="rgb(245,73,45)" fg:x="22849" fg:w="28"/><text x="18.7725%" y="767.50"></text></g><g><title>GetLengthPrefixedSlice (832 samples, 0.67%)</title><rect x="20.2614%" y="757" width="0.6745%" height="15" fill="rgb(237,203,48)" fg:x="24994" fg:w="832"/><text x="20.5114%" y="767.50"></text></g><g><title>leveldb::GetVarint32Ptr (719 samples, 0.58%)</title><rect x="20.3530%" y="741" width="0.5829%" height="15" fill="rgb(211,197,16)" fg:x="25107" fg:w="719"/><text x="20.6030%" y="751.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2,958 samples, 2.40%)</title><rect x="18.5525%" y="773" width="2.3979%" height="15" fill="rgb(243,99,51)" fg:x="22886" fg:w="2958"/><text x="18.8025%" y="783.50">le..</text></g><g><title>leveldb::MemTable::KeyComparator::operator (18 samples, 0.01%)</title><rect x="20.9358%" y="757" width="0.0146%" height="15" fill="rgb(215,123,29)" fg:x="25826" fg:w="18"/><text x="21.1858%" y="767.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (33 samples, 0.03%)</title><rect x="21.0307%" y="741" width="0.0268%" height="15" fill="rgb(239,186,37)" fg:x="25943" fg:w="33"/><text x="21.2807%" y="751.50"></text></g><g><title>leveldb::Slice::compare (15 samples, 0.01%)</title><rect x="21.0453%" y="725" width="0.0122%" height="15" fill="rgb(252,136,39)" fg:x="25961" fg:w="15"/><text x="21.2953%" y="735.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (40 samples, 0.03%)</title><rect x="21.0607%" y="741" width="0.0324%" height="15" fill="rgb(223,213,32)" fg:x="25980" fg:w="40"/><text x="21.3107%" y="751.50"></text></g><g><title>[[igc]] (14 samples, 0.01%)</title><rect x="21.4109%" y="597" width="0.0113%" height="15" fill="rgb(233,115,5)" fg:x="26412" fg:w="14"/><text x="21.6609%" y="607.50"></text></g><g><title>GetLengthPrefixedSlice (123 samples, 0.10%)</title><rect x="21.3257%" y="725" width="0.0997%" height="15" fill="rgb(207,226,44)" fg:x="26307" fg:w="123"/><text x="21.5757%" y="735.50"></text></g><g><title>leveldb::GetVarint32Ptr (105 samples, 0.09%)</title><rect x="21.3403%" y="709" width="0.0851%" height="15" fill="rgb(208,126,0)" fg:x="26325" fg:w="105"/><text x="21.5903%" y="719.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="21.4092%" y="693" width="0.0162%" height="15" fill="rgb(244,66,21)" fg:x="26410" fg:w="20"/><text x="21.6592%" y="703.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="21.4092%" y="677" width="0.0162%" height="15" fill="rgb(222,97,12)" fg:x="26410" fg:w="20"/><text x="21.6592%" y="687.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="21.4092%" y="661" width="0.0162%" height="15" fill="rgb(219,213,19)" fg:x="26410" fg:w="20"/><text x="21.6592%" y="671.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="21.4092%" y="645" width="0.0162%" height="15" fill="rgb(252,169,30)" fg:x="26410" fg:w="20"/><text x="21.6592%" y="655.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="21.4092%" y="629" width="0.0162%" height="15" fill="rgb(206,32,51)" fg:x="26410" fg:w="20"/><text x="21.6592%" y="639.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="21.4100%" y="613" width="0.0154%" height="15" fill="rgb(250,172,42)" fg:x="26411" fg:w="19"/><text x="21.6600%" y="623.50"></text></g><g><title>__memcmp_evex_movbe (15 samples, 0.01%)</title><rect x="21.5049%" y="677" width="0.0122%" height="15" fill="rgb(209,34,43)" fg:x="26528" fg:w="15"/><text x="21.7549%" y="687.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (74 samples, 0.06%)</title><rect x="21.4652%" y="709" width="0.0600%" height="15" fill="rgb(223,11,35)" fg:x="26479" fg:w="74"/><text x="21.7152%" y="719.50"></text></g><g><title>leveldb::Slice::compare (53 samples, 0.04%)</title><rect x="21.4822%" y="693" width="0.0430%" height="15" fill="rgb(251,219,26)" fg:x="26500" fg:w="53"/><text x="21.7322%" y="703.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (90 samples, 0.07%)</title><rect x="21.5292%" y="709" width="0.0730%" height="15" fill="rgb(231,119,3)" fg:x="26558" fg:w="90"/><text x="21.7792%" y="719.50"></text></g><g><title>GetLengthPrefixedSlice (49 samples, 0.04%)</title><rect x="21.7059%" y="693" width="0.0397%" height="15" fill="rgb(216,97,11)" fg:x="26776" fg:w="49"/><text x="21.9559%" y="703.50"></text></g><g><title>leveldb::GetVarint32Ptr (41 samples, 0.03%)</title><rect x="21.7124%" y="677" width="0.0332%" height="15" fill="rgb(223,59,9)" fg:x="26784" fg:w="41"/><text x="21.9624%" y="687.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (174 samples, 0.14%)</title><rect x="21.6062%" y="709" width="0.1411%" height="15" fill="rgb(233,93,31)" fg:x="26653" fg:w="174"/><text x="21.8562%" y="719.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (413 samples, 0.33%)</title><rect x="21.4481%" y="725" width="0.3348%" height="15" fill="rgb(239,81,33)" fg:x="26458" fg:w="413"/><text x="21.6981%" y="735.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (44 samples, 0.04%)</title><rect x="21.7473%" y="709" width="0.0357%" height="15" fill="rgb(213,120,34)" fg:x="26827" fg:w="44"/><text x="21.9973%" y="719.50"></text></g><g><title>GetLengthPrefixedSlice (88 samples, 0.07%)</title><rect x="21.8672%" y="709" width="0.0713%" height="15" fill="rgb(243,49,53)" fg:x="26975" fg:w="88"/><text x="22.1172%" y="719.50"></text></g><g><title>leveldb::GetVarint32Ptr (74 samples, 0.06%)</title><rect x="21.8786%" y="693" width="0.0600%" height="15" fill="rgb(247,216,33)" fg:x="26989" fg:w="74"/><text x="22.1286%" y="703.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (188 samples, 0.15%)</title><rect x="21.7967%" y="725" width="0.1524%" height="15" fill="rgb(226,26,14)" fg:x="26888" fg:w="188"/><text x="22.0467%" y="735.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (13 samples, 0.01%)</title><rect x="21.9386%" y="709" width="0.0105%" height="15" fill="rgb(215,49,53)" fg:x="27063" fg:w="13"/><text x="22.1886%" y="719.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1,061 samples, 0.86%)</title><rect x="21.0979%" y="741" width="0.8601%" height="15" fill="rgb(245,162,40)" fg:x="26026" fg:w="1061"/><text x="21.3479%" y="751.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (27 samples, 0.02%)</title><rect x="21.9888%" y="725" width="0.0219%" height="15" fill="rgb(229,68,17)" fg:x="27125" fg:w="27"/><text x="22.2388%" y="735.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (83 samples, 0.07%)</title><rect x="21.9580%" y="741" width="0.0673%" height="15" fill="rgb(213,182,10)" fg:x="27087" fg:w="83"/><text x="22.2080%" y="751.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (18 samples, 0.01%)</title><rect x="22.0107%" y="725" width="0.0146%" height="15" fill="rgb(245,125,30)" fg:x="27152" fg:w="18"/><text x="22.2607%" y="735.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (13 samples, 0.01%)</title><rect x="22.0148%" y="709" width="0.0105%" height="15" fill="rgb(232,202,2)" fg:x="27157" fg:w="13"/><text x="22.2648%" y="719.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (13 samples, 0.01%)</title><rect x="22.0148%" y="693" width="0.0105%" height="15" fill="rgb(237,140,51)" fg:x="27157" fg:w="13"/><text x="22.2648%" y="703.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1,267 samples, 1.03%)</title><rect x="21.0007%" y="757" width="1.0271%" height="15" fill="rgb(236,157,25)" fg:x="25906" fg:w="1267"/><text x="21.2507%" y="767.50"></text></g><g><title>[[igc]] (22 samples, 0.02%)</title><rect x="22.0578%" y="613" width="0.0178%" height="15" fill="rgb(219,209,0)" fg:x="27210" fg:w="22"/><text x="22.3078%" y="623.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="22.0618%" y="597" width="0.0138%" height="15" fill="rgb(240,116,54)" fg:x="27215" fg:w="17"/><text x="22.3118%" y="607.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="22.0634%" y="581" width="0.0122%" height="15" fill="rgb(216,10,36)" fg:x="27217" fg:w="15"/><text x="22.3134%" y="591.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="22.0650%" y="565" width="0.0105%" height="15" fill="rgb(222,72,44)" fg:x="27219" fg:w="13"/><text x="22.3150%" y="575.50"></text></g><g><title>leveldb::MemTable::Get (4,648 samples, 3.77%)</title><rect x="18.3182%" y="805" width="3.7679%" height="15" fill="rgb(232,159,9)" fg:x="22597" fg:w="4648"/><text x="18.5682%" y="815.50">leve..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Seek (4,625 samples, 3.75%)</title><rect x="18.3369%" y="789" width="3.7493%" height="15" fill="rgb(210,39,32)" fg:x="22620" fg:w="4625"/><text x="18.5869%" y="799.50">leve..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,401 samples, 1.14%)</title><rect x="20.9504%" y="773" width="1.1357%" height="15" fill="rgb(216,194,45)" fg:x="25844" fg:w="1401"/><text x="21.2004%" y="783.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (72 samples, 0.06%)</title><rect x="22.0278%" y="757" width="0.0584%" height="15" fill="rgb(218,18,35)" fg:x="27173" fg:w="72"/><text x="22.2778%" y="767.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (68 samples, 0.06%)</title><rect x="22.0310%" y="741" width="0.0551%" height="15" fill="rgb(207,83,51)" fg:x="27177" fg:w="68"/><text x="22.2810%" y="751.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (68 samples, 0.06%)</title><rect x="22.0310%" y="725" width="0.0551%" height="15" fill="rgb(225,63,43)" fg:x="27177" fg:w="68"/><text x="22.2810%" y="735.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="22.0545%" y="709" width="0.0316%" height="15" fill="rgb(207,57,36)" fg:x="27206" fg:w="39"/><text x="22.3045%" y="719.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="22.0545%" y="693" width="0.0316%" height="15" fill="rgb(216,99,33)" fg:x="27206" fg:w="39"/><text x="22.3045%" y="703.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="22.0553%" y="677" width="0.0308%" height="15" fill="rgb(225,42,16)" fg:x="27207" fg:w="38"/><text x="22.3053%" y="687.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="22.0561%" y="661" width="0.0300%" height="15" fill="rgb(220,201,45)" fg:x="27208" fg:w="37"/><text x="22.3061%" y="671.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="22.0569%" y="645" width="0.0292%" height="15" fill="rgb(225,33,4)" fg:x="27209" fg:w="36"/><text x="22.3069%" y="655.50"></text></g><g><title>[unknown] (35 samples, 0.03%)</title><rect x="22.0578%" y="629" width="0.0284%" height="15" fill="rgb(224,33,50)" fg:x="27210" fg:w="35"/><text x="22.3078%" y="639.50"></text></g><g><title>GetLengthPrefixedSlice (33 samples, 0.03%)</title><rect x="22.1623%" y="789" width="0.0268%" height="15" fill="rgb(246,198,51)" fg:x="27339" fg:w="33"/><text x="22.4123%" y="799.50"></text></g><g><title>leveldb::GetVarint32Ptr (30 samples, 0.02%)</title><rect x="22.1648%" y="773" width="0.0243%" height="15" fill="rgb(205,22,4)" fg:x="27342" fg:w="30"/><text x="22.4148%" y="783.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (128 samples, 0.10%)</title><rect x="22.0861%" y="805" width="0.1038%" height="15" fill="rgb(206,3,8)" fg:x="27245" fg:w="128"/><text x="22.3361%" y="815.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (95 samples, 0.08%)</title><rect x="22.2264%" y="789" width="0.0770%" height="15" fill="rgb(251,23,15)" fg:x="27418" fg:w="95"/><text x="22.4764%" y="799.50"></text></g><g><title>GetLengthPrefixedSlice (29 samples, 0.02%)</title><rect x="22.2799%" y="773" width="0.0235%" height="15" fill="rgb(252,88,28)" fg:x="27484" fg:w="29"/><text x="22.5299%" y="783.50"></text></g><g><title>leveldb::GetVarint32Ptr (25 samples, 0.02%)</title><rect x="22.2831%" y="757" width="0.0203%" height="15" fill="rgb(212,127,14)" fg:x="27488" fg:w="25"/><text x="22.5331%" y="767.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (15 samples, 0.01%)</title><rect x="22.3034%" y="789" width="0.0122%" height="15" fill="rgb(247,145,37)" fg:x="27513" fg:w="15"/><text x="22.5534%" y="799.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (54 samples, 0.04%)</title><rect x="22.3163%" y="773" width="0.0438%" height="15" fill="rgb(209,117,53)" fg:x="27529" fg:w="54"/><text x="22.5663%" y="783.50"></text></g><g><title>leveldb::Slice::compare (26 samples, 0.02%)</title><rect x="22.3390%" y="757" width="0.0211%" height="15" fill="rgb(212,90,42)" fg:x="27557" fg:w="26"/><text x="22.5890%" y="767.50"></text></g><g><title>leveldb::FindFile (18 samples, 0.01%)</title><rect x="22.4088%" y="757" width="0.0146%" height="15" fill="rgb(218,164,37)" fg:x="27643" fg:w="18"/><text x="22.6588%" y="767.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (70 samples, 0.06%)</title><rect x="22.4331%" y="741" width="0.0567%" height="15" fill="rgb(246,65,34)" fg:x="27673" fg:w="70"/><text x="22.6831%" y="751.50"></text></g><g><title>leveldb::Slice::compare (44 samples, 0.04%)</title><rect x="22.4542%" y="725" width="0.0357%" height="15" fill="rgb(231,100,33)" fg:x="27699" fg:w="44"/><text x="22.7042%" y="735.50"></text></g><g><title>leveldb::FindFile (45 samples, 0.04%)</title><rect x="22.4914%" y="741" width="0.0365%" height="15" fill="rgb(228,126,14)" fg:x="27745" fg:w="45"/><text x="22.7414%" y="751.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (31 samples, 0.03%)</title><rect x="22.5279%" y="741" width="0.0251%" height="15" fill="rgb(215,173,21)" fg:x="27790" fg:w="31"/><text x="22.7779%" y="751.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (13 samples, 0.01%)</title><rect x="22.5547%" y="741" width="0.0105%" height="15" fill="rgb(210,6,40)" fg:x="27823" fg:w="13"/><text x="22.8047%" y="751.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (177 samples, 0.14%)</title><rect x="22.4266%" y="757" width="0.1435%" height="15" fill="rgb(212,48,18)" fg:x="27665" fg:w="177"/><text x="22.6766%" y="767.50"></text></g><g><title>leveldb::FindFile (261 samples, 0.21%)</title><rect x="22.3682%" y="773" width="0.2116%" height="15" fill="rgb(230,214,11)" fg:x="27593" fg:w="261"/><text x="22.6182%" y="783.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (35 samples, 0.03%)</title><rect x="22.5798%" y="773" width="0.0284%" height="15" fill="rgb(254,105,39)" fg:x="27854" fg:w="35"/><text x="22.8298%" y="783.50"></text></g><g><title>leveldb::MemTable::Get (26 samples, 0.02%)</title><rect x="22.6082%" y="773" width="0.0211%" height="15" fill="rgb(245,158,5)" fg:x="27889" fg:w="26"/><text x="22.8582%" y="783.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (15 samples, 0.01%)</title><rect x="22.6876%" y="741" width="0.0122%" height="15" fill="rgb(249,208,11)" fg:x="27987" fg:w="15"/><text x="22.9376%" y="751.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (879 samples, 0.71%)</title><rect x="22.7598%" y="725" width="0.7126%" height="15" fill="rgb(210,39,28)" fg:x="28076" fg:w="879"/><text x="23.0098%" y="735.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (52 samples, 0.04%)</title><rect x="23.4723%" y="725" width="0.0422%" height="15" fill="rgb(211,56,53)" fg:x="28955" fg:w="52"/><text x="23.7223%" y="735.50"></text></g><g><title>leveldb::Slice::compare (22 samples, 0.02%)</title><rect x="23.4967%" y="709" width="0.0178%" height="15" fill="rgb(226,201,30)" fg:x="28985" fg:w="22"/><text x="23.7467%" y="719.50"></text></g><g><title>leveldb::Block::Block (14 samples, 0.01%)</title><rect x="23.5242%" y="725" width="0.0113%" height="15" fill="rgb(239,101,34)" fg:x="29019" fg:w="14"/><text x="23.7742%" y="735.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (15 samples, 0.01%)</title><rect x="23.5615%" y="709" width="0.0122%" height="15" fill="rgb(226,209,5)" fg:x="29065" fg:w="15"/><text x="23.8115%" y="719.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (63 samples, 0.05%)</title><rect x="23.5356%" y="725" width="0.0511%" height="15" fill="rgb(250,105,47)" fg:x="29033" fg:w="63"/><text x="23.7856%" y="735.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (16 samples, 0.01%)</title><rect x="23.5737%" y="709" width="0.0130%" height="15" fill="rgb(230,72,3)" fg:x="29080" fg:w="16"/><text x="23.8237%" y="719.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (16 samples, 0.01%)</title><rect x="23.5737%" y="693" width="0.0130%" height="15" fill="rgb(232,218,39)" fg:x="29080" fg:w="16"/><text x="23.8237%" y="703.50"></text></g><g><title>[[igc]] (17 samples, 0.01%)</title><rect x="23.7998%" y="597" width="0.0138%" height="15" fill="rgb(248,166,6)" fg:x="29359" fg:w="17"/><text x="24.0498%" y="607.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="23.7958%" y="693" width="0.0203%" height="15" fill="rgb(247,89,20)" fg:x="29354" fg:w="25"/><text x="24.0458%" y="703.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="23.7966%" y="677" width="0.0195%" height="15" fill="rgb(248,130,54)" fg:x="29355" fg:w="24"/><text x="24.0466%" y="687.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="23.7966%" y="661" width="0.0195%" height="15" fill="rgb(234,196,4)" fg:x="29355" fg:w="24"/><text x="24.0466%" y="671.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="23.7966%" y="645" width="0.0195%" height="15" fill="rgb(250,143,31)" fg:x="29355" fg:w="24"/><text x="24.0466%" y="655.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="23.7966%" y="629" width="0.0195%" height="15" fill="rgb(211,110,34)" fg:x="29355" fg:w="24"/><text x="24.0466%" y="639.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="23.7982%" y="613" width="0.0178%" height="15" fill="rgb(215,124,48)" fg:x="29357" fg:w="22"/><text x="24.0482%" y="623.50"></text></g><g><title>DecodeEntry (61 samples, 0.05%)</title><rect x="23.7698%" y="709" width="0.0494%" height="15" fill="rgb(216,46,13)" fg:x="29322" fg:w="61"/><text x="24.0198%" y="719.50"></text></g><g><title>leveldb::Block::Iter::Seek (21 samples, 0.02%)</title><rect x="24.1152%" y="693" width="0.0170%" height="15" fill="rgb(205,184,25)" fg:x="29748" fg:w="21"/><text x="24.3652%" y="703.50"></text></g><g><title>leveldb::Block::NewIterator (18 samples, 0.01%)</title><rect x="24.1322%" y="693" width="0.0146%" height="15" fill="rgb(228,1,10)" fg:x="29769" fg:w="18"/><text x="24.3822%" y="703.50"></text></g><g><title>__memcmp_evex_movbe (99 samples, 0.08%)</title><rect x="24.1719%" y="645" width="0.0803%" height="15" fill="rgb(213,116,27)" fg:x="29818" fg:w="99"/><text x="24.4219%" y="655.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (130 samples, 0.11%)</title><rect x="24.1598%" y="677" width="0.1054%" height="15" fill="rgb(241,95,50)" fg:x="29803" fg:w="130"/><text x="24.4098%" y="687.50"></text></g><g><title>leveldb::Slice::compare (122 samples, 0.10%)</title><rect x="24.1662%" y="661" width="0.0989%" height="15" fill="rgb(238,48,32)" fg:x="29811" fg:w="122"/><text x="24.4162%" y="671.50"></text></g><g><title>leveldb::Block::Iter::Compare (34 samples, 0.03%)</title><rect x="24.3551%" y="661" width="0.0276%" height="15" fill="rgb(235,113,49)" fg:x="30044" fg:w="34"/><text x="24.6051%" y="671.50"></text></g><g><title>leveldb::Block::Iter::Seek (154 samples, 0.12%)</title><rect x="24.2651%" y="677" width="0.1248%" height="15" fill="rgb(205,127,43)" fg:x="29933" fg:w="154"/><text x="24.5151%" y="687.50"></text></g><g><title>leveldb::Block::NewIterator (17 samples, 0.01%)</title><rect x="24.3900%" y="677" width="0.0138%" height="15" fill="rgb(250,162,2)" fg:x="30087" fg:w="17"/><text x="24.6400%" y="687.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (84 samples, 0.07%)</title><rect x="24.4038%" y="677" width="0.0681%" height="15" fill="rgb(220,13,41)" fg:x="30104" fg:w="84"/><text x="24.6538%" y="687.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (434 samples, 0.35%)</title><rect x="24.1468%" y="693" width="0.3518%" height="15" fill="rgb(249,221,25)" fg:x="29787" fg:w="434"/><text x="24.3968%" y="703.50"></text></g><g><title>leveldb::Block::Iter::Compare (845 samples, 0.68%)</title><rect x="23.8209%" y="709" width="0.6850%" height="15" fill="rgb(215,208,19)" fg:x="29385" fg:w="845"/><text x="24.0709%" y="719.50"></text></g><g><title>[[igc]] (17 samples, 0.01%)</title><rect x="24.5237%" y="597" width="0.0138%" height="15" fill="rgb(236,175,2)" fg:x="30252" fg:w="17"/><text x="24.7737%" y="607.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="24.5229%" y="693" width="0.0203%" height="15" fill="rgb(241,52,2)" fg:x="30251" fg:w="25"/><text x="24.7729%" y="703.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="24.5229%" y="677" width="0.0203%" height="15" fill="rgb(248,140,14)" fg:x="30251" fg:w="25"/><text x="24.7729%" y="687.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="24.5229%" y="661" width="0.0203%" height="15" fill="rgb(253,22,42)" fg:x="30251" fg:w="25"/><text x="24.7729%" y="671.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="24.5237%" y="645" width="0.0195%" height="15" fill="rgb(234,61,47)" fg:x="30252" fg:w="24"/><text x="24.7737%" y="655.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="24.5237%" y="629" width="0.0195%" height="15" fill="rgb(208,226,15)" fg:x="30252" fg:w="24"/><text x="24.7737%" y="639.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="24.5237%" y="613" width="0.0195%" height="15" fill="rgb(217,221,4)" fg:x="30252" fg:w="24"/><text x="24.7737%" y="623.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20 samples, 0.02%)</title><rect x="24.5432%" y="693" width="0.0162%" height="15" fill="rgb(212,174,34)" fg:x="30276" fg:w="20"/><text x="24.7932%" y="703.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (14 samples, 0.01%)</title><rect x="24.5894%" y="645" width="0.0113%" height="15" fill="rgb(253,83,4)" fg:x="30333" fg:w="14"/><text x="24.8394%" y="655.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (15 samples, 0.01%)</title><rect x="24.5894%" y="661" width="0.0122%" height="15" fill="rgb(250,195,49)" fg:x="30333" fg:w="15"/><text x="24.8394%" y="671.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (32 samples, 0.03%)</title><rect x="24.5781%" y="677" width="0.0259%" height="15" fill="rgb(241,192,25)" fg:x="30319" fg:w="32"/><text x="24.8281%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (29 samples, 0.02%)</title><rect x="24.6510%" y="629" width="0.0235%" height="15" fill="rgb(208,124,10)" fg:x="30409" fg:w="29"/><text x="24.9010%" y="639.50"></text></g><g><title>__memmove_avx512_unaligned_erms (17 samples, 0.01%)</title><rect x="24.6745%" y="629" width="0.0138%" height="15" fill="rgb(222,33,0)" fg:x="30438" fg:w="17"/><text x="24.9245%" y="639.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (116 samples, 0.09%)</title><rect x="24.6186%" y="661" width="0.0940%" height="15" fill="rgb(234,209,28)" fg:x="30369" fg:w="116"/><text x="24.8686%" y="671.50"></text></g><g><title>leveldb::Slice::compare (89 samples, 0.07%)</title><rect x="24.6405%" y="645" width="0.0721%" height="15" fill="rgb(224,11,23)" fg:x="30396" fg:w="89"/><text x="24.8905%" y="655.50"></text></g><g><title>DecodeEntry (26 samples, 0.02%)</title><rect x="24.7523%" y="645" width="0.0211%" height="15" fill="rgb(232,99,1)" fg:x="30534" fg:w="26"/><text x="25.0023%" y="655.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (18 samples, 0.01%)</title><rect x="24.8075%" y="613" width="0.0146%" height="15" fill="rgb(237,95,45)" fg:x="30602" fg:w="18"/><text x="25.0575%" y="623.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (14 samples, 0.01%)</title><rect x="24.8107%" y="597" width="0.0113%" height="15" fill="rgb(208,109,11)" fg:x="30606" fg:w="14"/><text x="25.0607%" y="607.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (13 samples, 0.01%)</title><rect x="24.8115%" y="581" width="0.0105%" height="15" fill="rgb(216,190,48)" fg:x="30607" fg:w="13"/><text x="25.0615%" y="591.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (55 samples, 0.04%)</title><rect x="24.7848%" y="629" width="0.0446%" height="15" fill="rgb(251,171,36)" fg:x="30574" fg:w="55"/><text x="25.0348%" y="639.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (62 samples, 0.05%)</title><rect x="24.7848%" y="645" width="0.0503%" height="15" fill="rgb(230,62,22)" fg:x="30574" fg:w="62"/><text x="25.0348%" y="655.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (163 samples, 0.13%)</title><rect x="24.7126%" y="661" width="0.1321%" height="15" fill="rgb(225,114,35)" fg:x="30485" fg:w="163"/><text x="24.9626%" y="671.50"></text></g><g><title>leveldb::Block::Iter::Seek (24 samples, 0.02%)</title><rect x="24.8569%" y="645" width="0.0195%" height="15" fill="rgb(215,118,42)" fg:x="30663" fg:w="24"/><text x="25.1069%" y="655.50"></text></g><g><title>leveldb::Block::Iter::Seek (47 samples, 0.04%)</title><rect x="24.8448%" y="661" width="0.0381%" height="15" fill="rgb(243,119,21)" fg:x="30648" fg:w="47"/><text x="25.0948%" y="671.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (62 samples, 0.05%)</title><rect x="24.8845%" y="661" width="0.0503%" height="15" fill="rgb(252,177,53)" fg:x="30697" fg:w="62"/><text x="25.1345%" y="671.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (421 samples, 0.34%)</title><rect x="24.6129%" y="677" width="0.3413%" height="15" fill="rgb(237,209,29)" fg:x="30362" fg:w="421"/><text x="24.8629%" y="687.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (24 samples, 0.02%)</title><rect x="24.9347%" y="661" width="0.0195%" height="15" fill="rgb(212,65,23)" fg:x="30759" fg:w="24"/><text x="25.1847%" y="671.50"></text></g><g><title>leveldb::Block::Iter::Compare (496 samples, 0.40%)</title><rect x="24.5594%" y="693" width="0.4021%" height="15" fill="rgb(230,222,46)" fg:x="30296" fg:w="496"/><text x="24.8094%" y="703.50"></text></g><g><title>leveldb::Block::Iter::Seek (24 samples, 0.02%)</title><rect x="24.9809%" y="645" width="0.0195%" height="15" fill="rgb(215,135,32)" fg:x="30816" fg:w="24"/><text x="25.2309%" y="655.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (13 samples, 0.01%)</title><rect x="25.0069%" y="645" width="0.0105%" height="15" fill="rgb(246,101,22)" fg:x="30848" fg:w="13"/><text x="25.2569%" y="655.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (63 samples, 0.05%)</title><rect x="24.9704%" y="661" width="0.0511%" height="15" fill="rgb(206,107,13)" fg:x="30803" fg:w="63"/><text x="25.2204%" y="671.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (76 samples, 0.06%)</title><rect x="24.9615%" y="693" width="0.0616%" height="15" fill="rgb(250,100,44)" fg:x="30792" fg:w="76"/><text x="25.2115%" y="703.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (65 samples, 0.05%)</title><rect x="24.9704%" y="677" width="0.0527%" height="15" fill="rgb(231,147,38)" fg:x="30803" fg:w="65"/><text x="25.2204%" y="687.50"></text></g><g><title>leveldb::Block::Iter::Seek (33 samples, 0.03%)</title><rect x="25.0231%" y="693" width="0.0268%" height="15" fill="rgb(229,8,40)" fg:x="30868" fg:w="33"/><text x="25.2731%" y="703.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (44 samples, 0.04%)</title><rect x="25.0499%" y="693" width="0.0357%" height="15" fill="rgb(221,135,30)" fg:x="30901" fg:w="44"/><text x="25.2999%" y="703.50"></text></g><g><title>leveldb::Slice::Slice (14 samples, 0.01%)</title><rect x="25.0855%" y="693" width="0.0113%" height="15" fill="rgb(249,193,18)" fg:x="30945" fg:w="14"/><text x="25.3355%" y="703.50"></text></g><g><title>leveldb::Block::Iter::Seek (725 samples, 0.59%)</title><rect x="24.5132%" y="709" width="0.5877%" height="15" fill="rgb(209,133,39)" fg:x="30239" fg:w="725"/><text x="24.7632%" y="719.50"></text></g><g><title>leveldb::Block::Iter::Seek (1,897 samples, 1.54%)</title><rect x="23.5866%" y="725" width="1.5378%" height="15" fill="rgb(232,100,14)" fg:x="29096" fg:w="1897"/><text x="23.8366%" y="735.50"></text></g><g><title>leveldb::Slice::Slice (29 samples, 0.02%)</title><rect x="25.1009%" y="709" width="0.0235%" height="15" fill="rgb(224,185,1)" fg:x="30964" fg:w="29"/><text x="25.3509%" y="719.50"></text></g><g><title>leveldb::Block::Iter::~Iter (27 samples, 0.02%)</title><rect x="25.1325%" y="725" width="0.0219%" height="15" fill="rgb(223,139,8)" fg:x="31003" fg:w="27"/><text x="25.3825%" y="735.50"></text></g><g><title>leveldb::Block::Iter::~Iter (27 samples, 0.02%)</title><rect x="25.1325%" y="709" width="0.0219%" height="15" fill="rgb(232,213,38)" fg:x="31003" fg:w="27"/><text x="25.3825%" y="719.50"></text></g><g><title>leveldb::Block::Iter::Iter (56 samples, 0.05%)</title><rect x="25.2112%" y="709" width="0.0454%" height="15" fill="rgb(207,94,22)" fg:x="31100" fg:w="56"/><text x="25.4612%" y="719.50"></text></g><g><title>leveldb::Block::NewIterator (131 samples, 0.11%)</title><rect x="25.1544%" y="725" width="0.1062%" height="15" fill="rgb(219,183,54)" fg:x="31030" fg:w="131"/><text x="25.4044%" y="735.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (25 samples, 0.02%)</title><rect x="25.2606%" y="725" width="0.0203%" height="15" fill="rgb(216,185,54)" fg:x="31161" fg:w="25"/><text x="25.5106%" y="735.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (30 samples, 0.02%)</title><rect x="25.2882%" y="693" width="0.0243%" height="15" fill="rgb(254,217,39)" fg:x="31195" fg:w="30"/><text x="25.5382%" y="703.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (61 samples, 0.05%)</title><rect x="25.2809%" y="725" width="0.0494%" height="15" fill="rgb(240,178,23)" fg:x="31186" fg:w="61"/><text x="25.5309%" y="735.50"></text></g><g><title>leveldb::InternalFilterPolicy::KeyMayMatch (52 samples, 0.04%)</title><rect x="25.2882%" y="709" width="0.0422%" height="15" fill="rgb(218,11,47)" fg:x="31195" fg:w="52"/><text x="25.5382%" y="719.50"></text></g><g><title>leveldb::GetVarint64Ptr (39 samples, 0.03%)</title><rect x="25.3393%" y="725" width="0.0316%" height="15" fill="rgb(218,51,51)" fg:x="31258" fg:w="39"/><text x="25.5893%" y="735.50"></text></g><g><title>leveldb::Hash (17 samples, 0.01%)</title><rect x="25.3709%" y="725" width="0.0138%" height="15" fill="rgb(238,126,27)" fg:x="31297" fg:w="17"/><text x="25.6209%" y="735.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (330 samples, 0.27%)</title><rect x="25.3855%" y="725" width="0.2675%" height="15" fill="rgb(249,202,22)" fg:x="31315" fg:w="330"/><text x="25.6355%" y="735.50"></text></g><g><title>leveldb::ExtractUserKey (17 samples, 0.01%)</title><rect x="25.6392%" y="709" width="0.0138%" height="15" fill="rgb(254,195,49)" fg:x="31628" fg:w="17"/><text x="25.8892%" y="719.50"></text></g><g><title>leveldb::Iterator::Iterator (13 samples, 0.01%)</title><rect x="25.6530%" y="725" width="0.0105%" height="15" fill="rgb(208,123,14)" fg:x="31645" fg:w="13"/><text x="25.9030%" y="735.50"></text></g><g><title>leveldb::SaveValue (15 samples, 0.01%)</title><rect x="25.6635%" y="725" width="0.0122%" height="15" fill="rgb(224,200,8)" fg:x="31658" fg:w="15"/><text x="25.9135%" y="735.50"></text></g><g><title>Lookup (14 samples, 0.01%)</title><rect x="25.6805%" y="709" width="0.0113%" height="15" fill="rgb(217,61,36)" fg:x="31679" fg:w="14"/><text x="25.9305%" y="719.50"></text></g><g><title>_mm_crc32_u64 (27 samples, 0.02%)</title><rect x="25.7203%" y="693" width="0.0219%" height="15" fill="rgb(206,35,45)" fg:x="31728" fg:w="27"/><text x="25.9703%" y="703.50"></text></g><g><title>crc32c::ExtendSse42 (64 samples, 0.05%)</title><rect x="25.6919%" y="709" width="0.0519%" height="15" fill="rgb(217,65,33)" fg:x="31693" fg:w="64"/><text x="25.9419%" y="719.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (30 samples, 0.02%)</title><rect x="25.7438%" y="709" width="0.0243%" height="15" fill="rgb(222,158,48)" fg:x="31757" fg:w="30"/><text x="25.9938%" y="719.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (14 samples, 0.01%)</title><rect x="25.7835%" y="693" width="0.0113%" height="15" fill="rgb(254,2,54)" fg:x="31806" fg:w="14"/><text x="26.0335%" y="703.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (21 samples, 0.02%)</title><rect x="25.7965%" y="677" width="0.0170%" height="15" fill="rgb(250,143,38)" fg:x="31822" fg:w="21"/><text x="26.0465%" y="687.50"></text></g><g><title>leveldb::GetVarint64 (22 samples, 0.02%)</title><rect x="25.7965%" y="693" width="0.0178%" height="15" fill="rgb(248,25,0)" fg:x="31822" fg:w="22"/><text x="26.0465%" y="703.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (50 samples, 0.04%)</title><rect x="25.7762%" y="709" width="0.0405%" height="15" fill="rgb(206,152,27)" fg:x="31797" fg:w="50"/><text x="26.0262%" y="719.50"></text></g><g><title>leveldb::GetVarint64 (13 samples, 0.01%)</title><rect x="25.8175%" y="709" width="0.0105%" height="15" fill="rgb(240,77,30)" fg:x="31848" fg:w="13"/><text x="26.0675%" y="719.50"></text></g><g><title>leveldb::GetVarint64Ptr (25 samples, 0.02%)</title><rect x="25.8281%" y="709" width="0.0203%" height="15" fill="rgb(231,5,3)" fg:x="31861" fg:w="25"/><text x="26.0781%" y="719.50"></text></g><g><title>leveldb::crc32c::Unmask (685 samples, 0.56%)</title><rect x="25.8946%" y="693" width="0.5553%" height="15" fill="rgb(207,226,32)" fg:x="31943" fg:w="685"/><text x="26.1446%" y="703.50"></text></g><g><title>[unknown] (679 samples, 0.55%)</title><rect x="25.8994%" y="677" width="0.5504%" height="15" fill="rgb(222,207,47)" fg:x="31949" fg:w="679"/><text x="26.1494%" y="687.50"></text></g><g><title>[unknown] (676 samples, 0.55%)</title><rect x="25.9018%" y="661" width="0.5480%" height="15" fill="rgb(229,115,45)" fg:x="31952" fg:w="676"/><text x="26.1518%" y="671.50"></text></g><g><title>[unknown] (668 samples, 0.54%)</title><rect x="25.9083%" y="645" width="0.5415%" height="15" fill="rgb(224,191,6)" fg:x="31960" fg:w="668"/><text x="26.1583%" y="655.50"></text></g><g><title>[unknown] (662 samples, 0.54%)</title><rect x="25.9132%" y="629" width="0.5366%" height="15" fill="rgb(230,227,24)" fg:x="31966" fg:w="662"/><text x="26.1632%" y="639.50"></text></g><g><title>[unknown] (613 samples, 0.50%)</title><rect x="25.9529%" y="613" width="0.4969%" height="15" fill="rgb(228,80,19)" fg:x="32015" fg:w="613"/><text x="26.2029%" y="623.50"></text></g><g><title>[unknown] (577 samples, 0.47%)</title><rect x="25.9821%" y="597" width="0.4677%" height="15" fill="rgb(247,229,0)" fg:x="32051" fg:w="577"/><text x="26.2321%" y="607.50"></text></g><g><title>[unknown] (545 samples, 0.44%)</title><rect x="26.0080%" y="581" width="0.4418%" height="15" fill="rgb(237,194,15)" fg:x="32083" fg:w="545"/><text x="26.2580%" y="591.50"></text></g><g><title>[unknown] (430 samples, 0.35%)</title><rect x="26.1013%" y="565" width="0.3486%" height="15" fill="rgb(219,203,20)" fg:x="32198" fg:w="430"/><text x="26.3513%" y="575.50"></text></g><g><title>[unknown] (247 samples, 0.20%)</title><rect x="26.2496%" y="549" width="0.2002%" height="15" fill="rgb(234,128,8)" fg:x="32381" fg:w="247"/><text x="26.4996%" y="559.50"></text></g><g><title>[unknown] (126 samples, 0.10%)</title><rect x="26.3477%" y="533" width="0.1021%" height="15" fill="rgb(248,202,8)" fg:x="32502" fg:w="126"/><text x="26.5977%" y="543.50"></text></g><g><title>[unknown] (79 samples, 0.06%)</title><rect x="26.3858%" y="517" width="0.0640%" height="15" fill="rgb(206,104,37)" fg:x="32549" fg:w="79"/><text x="26.6358%" y="527.50"></text></g><g><title>[unknown] (33 samples, 0.03%)</title><rect x="26.4231%" y="501" width="0.0268%" height="15" fill="rgb(223,8,27)" fg:x="32595" fg:w="33"/><text x="26.6731%" y="511.50"></text></g><g><title>_mm_crc32_u64 (1,185 samples, 0.96%)</title><rect x="27.1527%" y="661" width="0.9606%" height="15" fill="rgb(216,217,28)" fg:x="33495" fg:w="1185"/><text x="27.4027%" y="671.50"></text></g><g><title>crc32c::ExtendSse42 (2,078 samples, 1.68%)</title><rect x="26.4547%" y="677" width="1.6845%" height="15" fill="rgb(249,199,1)" fg:x="32634" fg:w="2078"/><text x="26.7047%" y="687.50"></text></g><g><title>_mm_crc32_u8 (32 samples, 0.03%)</title><rect x="28.1133%" y="661" width="0.0259%" height="15" fill="rgb(240,85,17)" fg:x="34680" fg:w="32"/><text x="28.3633%" y="671.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="28.1173%" y="645" width="0.0219%" height="15" fill="rgb(206,108,45)" fg:x="34685" fg:w="27"/><text x="28.3673%" y="655.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="28.1173%" y="629" width="0.0219%" height="15" fill="rgb(245,210,41)" fg:x="34685" fg:w="27"/><text x="28.3673%" y="639.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="28.1173%" y="613" width="0.0219%" height="15" fill="rgb(206,13,37)" fg:x="34685" fg:w="27"/><text x="28.3673%" y="623.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="28.1182%" y="597" width="0.0211%" height="15" fill="rgb(250,61,18)" fg:x="34686" fg:w="26"/><text x="28.3682%" y="607.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="28.1206%" y="581" width="0.0186%" height="15" fill="rgb(235,172,48)" fg:x="34689" fg:w="23"/><text x="28.3706%" y="591.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="28.1206%" y="565" width="0.0186%" height="15" fill="rgb(249,201,17)" fg:x="34689" fg:w="23"/><text x="28.3706%" y="575.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="28.1222%" y="549" width="0.0170%" height="15" fill="rgb(219,208,6)" fg:x="34691" fg:w="21"/><text x="28.3722%" y="559.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="28.1263%" y="533" width="0.0130%" height="15" fill="rgb(248,31,23)" fg:x="34696" fg:w="16"/><text x="28.3763%" y="543.50"></text></g><g><title>leveldb::crc32c::Value (2,111 samples, 1.71%)</title><rect x="26.4498%" y="693" width="1.7113%" height="15" fill="rgb(245,15,42)" fg:x="32628" fg:w="2111"/><text x="26.6998%" y="703.50"></text></g><g><title>operator new (23 samples, 0.02%)</title><rect x="28.1627%" y="693" width="0.0186%" height="15" fill="rgb(222,217,39)" fg:x="34741" fg:w="23"/><text x="28.4127%" y="703.50"></text></g><g><title>malloc (23 samples, 0.02%)</title><rect x="28.1627%" y="677" width="0.0186%" height="15" fill="rgb(210,219,27)" fg:x="34741" fg:w="23"/><text x="28.4127%" y="687.50"></text></g><g><title>_int_malloc (20 samples, 0.02%)</title><rect x="28.1652%" y="661" width="0.0162%" height="15" fill="rgb(252,166,36)" fg:x="34744" fg:w="20"/><text x="28.4152%" y="671.50"></text></g><g><title>leveldb::ReadBlock (2,868 samples, 2.32%)</title><rect x="25.8581%" y="709" width="2.3249%" height="15" fill="rgb(245,132,34)" fg:x="31898" fg:w="2868"/><text x="26.1081%" y="719.50">l..</text></g><g><title>leveldb::Table::BlockReader (21 samples, 0.02%)</title><rect x="28.1838%" y="709" width="0.0170%" height="15" fill="rgb(236,54,3)" fg:x="34767" fg:w="21"/><text x="28.4338%" y="719.50"></text></g><g><title>leveldb::Table::BlockReader (3,117 samples, 2.53%)</title><rect x="25.6765%" y="725" width="2.5268%" height="15" fill="rgb(241,173,43)" fg:x="31674" fg:w="3117"/><text x="25.9265%" y="735.50">le..</text></g><g><title>leveldb::Table::InternalGet (69 samples, 0.06%)</title><rect x="28.2033%" y="725" width="0.0559%" height="15" fill="rgb(215,190,9)" fg:x="34791" fg:w="69"/><text x="28.4533%" y="735.50"></text></g><g><title>leveldb::Table::InternalGet (6,821 samples, 5.53%)</title><rect x="22.7403%" y="741" width="5.5294%" height="15" fill="rgb(242,101,16)" fg:x="28052" fg:w="6821"/><text x="22.9903%" y="751.50">leveldb..</text></g><g><title>Lookup (27 samples, 0.02%)</title><rect x="28.2730%" y="725" width="0.0219%" height="15" fill="rgb(223,190,21)" fg:x="34877" fg:w="27"/><text x="28.5230%" y="735.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (21 samples, 0.02%)</title><rect x="28.2779%" y="709" width="0.0170%" height="15" fill="rgb(215,228,25)" fg:x="34883" fg:w="21"/><text x="28.5279%" y="719.50"></text></g><g><title>Lookup (13 samples, 0.01%)</title><rect x="28.3095%" y="709" width="0.0105%" height="15" fill="rgb(225,36,22)" fg:x="34922" fg:w="13"/><text x="28.5595%" y="719.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (21 samples, 0.02%)</title><rect x="28.3038%" y="725" width="0.0170%" height="15" fill="rgb(251,106,46)" fg:x="34915" fg:w="21"/><text x="28.5538%" y="735.50"></text></g><g><title>leveldb::TableCache::FindTable (47 samples, 0.04%)</title><rect x="28.3338%" y="725" width="0.0381%" height="15" fill="rgb(208,90,1)" fg:x="34952" fg:w="47"/><text x="28.5838%" y="735.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (13 samples, 0.01%)</title><rect x="28.3800%" y="725" width="0.0105%" height="15" fill="rgb(243,10,4)" fg:x="35009" fg:w="13"/><text x="28.6300%" y="735.50"></text></g><g><title>leveldb::TableCache::FindTable (160 samples, 0.13%)</title><rect x="28.2698%" y="741" width="0.1297%" height="15" fill="rgb(212,137,27)" fg:x="34873" fg:w="160"/><text x="28.5198%" y="751.50"></text></g><g><title>leveldb::Version::Get (7,647 samples, 6.20%)</title><rect x="22.2012%" y="805" width="6.1990%" height="15" fill="rgb(231,220,49)" fg:x="27387" fg:w="7647"/><text x="22.4512%" y="815.50">leveldb:..</text></g><g><title>leveldb::Version::ForEachOverlapping (7,505 samples, 6.08%)</title><rect x="22.3163%" y="789" width="6.0839%" height="15" fill="rgb(237,96,20)" fg:x="27529" fg:w="7505"/><text x="22.5663%" y="799.50">leveldb:..</text></g><g><title>leveldb::Version::Get (7,104 samples, 5.76%)</title><rect x="22.6414%" y="773" width="5.7588%" height="15" fill="rgb(239,229,30)" fg:x="27930" fg:w="7104"/><text x="22.8914%" y="783.50">leveldb..</text></g><g><title>leveldb::TableCache::Get (7,072 samples, 5.73%)</title><rect x="22.6674%" y="757" width="5.7329%" height="15" fill="rgb(219,65,33)" fg:x="27962" fg:w="7072"/><text x="22.9174%" y="767.50">leveldb..</text></g><g><title>leveldb::DBImpl::Get (12,496 samples, 10.13%)</title><rect x="18.2866%" y="821" width="10.1299%" height="15" fill="rgb(243,134,7)" fg:x="22558" fg:w="12496"/><text x="18.5366%" y="831.50">leveldb::DBImpl..</text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (12,625 samples, 10.23%)</title><rect x="18.2777%" y="837" width="10.2344%" height="15" fill="rgb(216,177,54)" fg:x="22547" fg:w="12625"/><text x="18.5277%" y="847.50">CDBWrapper::Rea..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (70 samples, 0.06%)</title><rect x="28.4554%" y="821" width="0.0567%" height="15" fill="rgb(211,160,20)" fg:x="35102" fg:w="70"/><text x="28.7054%" y="831.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (54 samples, 0.04%)</title><rect x="28.4684%" y="805" width="0.0438%" height="15" fill="rgb(239,85,39)" fg:x="35118" fg:w="54"/><text x="28.7184%" y="815.50"></text></g><g><title>decltype  (25 samples, 0.02%)</title><rect x="28.4919%" y="789" width="0.0203%" height="15" fill="rgb(232,125,22)" fg:x="35147" fg:w="25"/><text x="28.7419%" y="799.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (25 samples, 0.02%)</title><rect x="28.4919%" y="773" width="0.0203%" height="15" fill="rgb(244,57,34)" fg:x="35147" fg:w="25"/><text x="28.7419%" y="783.50"></text></g><g><title>decltype (25 samples, 0.02%)</title><rect x="28.4919%" y="757" width="0.0203%" height="15" fill="rgb(214,203,32)" fg:x="35147" fg:w="25"/><text x="28.7419%" y="767.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (18 samples, 0.01%)</title><rect x="28.5235%" y="821" width="0.0146%" height="15" fill="rgb(207,58,43)" fg:x="35186" fg:w="18"/><text x="28.7735%" y="831.50"></text></g><g><title>CCoinsViewDB::GetCoin (12,661 samples, 10.26%)</title><rect x="18.2761%" y="853" width="10.2636%" height="15" fill="rgb(215,193,15)" fg:x="22545" fg:w="12661"/><text x="18.5261%" y="863.50">CCoinsViewDB::G..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (30 samples, 0.02%)</title><rect x="28.5154%" y="837" width="0.0243%" height="15" fill="rgb(232,15,44)" fg:x="35176" fg:w="30"/><text x="28.7654%" y="847.50"></text></g><g><title>DataStream::DataStream (19 samples, 0.02%)</title><rect x="28.5438%" y="613" width="0.0154%" height="15" fill="rgb(212,3,48)" fg:x="35211" fg:w="19"/><text x="28.7938%" y="623.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (19 samples, 0.02%)</title><rect x="28.5438%" y="597" width="0.0154%" height="15" fill="rgb(218,128,7)" fg:x="35211" fg:w="19"/><text x="28.7938%" y="607.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (19 samples, 0.02%)</title><rect x="28.5438%" y="581" width="0.0154%" height="15" fill="rgb(226,216,39)" fg:x="35211" fg:w="19"/><text x="28.7938%" y="591.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (18 samples, 0.01%)</title><rect x="28.5446%" y="565" width="0.0146%" height="15" fill="rgb(243,47,51)" fg:x="35212" fg:w="18"/><text x="28.7946%" y="575.50"></text></g><g><title>decltype  (14 samples, 0.01%)</title><rect x="28.5478%" y="549" width="0.0113%" height="15" fill="rgb(241,183,40)" fg:x="35216" fg:w="14"/><text x="28.7978%" y="559.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (14 samples, 0.01%)</title><rect x="28.5478%" y="533" width="0.0113%" height="15" fill="rgb(231,217,32)" fg:x="35216" fg:w="14"/><text x="28.7978%" y="543.50"></text></g><g><title>decltype (14 samples, 0.01%)</title><rect x="28.5478%" y="517" width="0.0113%" height="15" fill="rgb(229,61,38)" fg:x="35216" fg:w="14"/><text x="28.7978%" y="527.50"></text></g><g><title>CCoinsViewDB::GetCoin (28 samples, 0.02%)</title><rect x="28.5438%" y="645" width="0.0227%" height="15" fill="rgb(225,210,5)" fg:x="35211" fg:w="28"/><text x="28.7938%" y="655.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (28 samples, 0.02%)</title><rect x="28.5438%" y="629" width="0.0227%" height="15" fill="rgb(231,79,45)" fg:x="35211" fg:w="28"/><text x="28.7938%" y="639.50"></text></g><g><title>CCoinsViewDB::GetCoin (15 samples, 0.01%)</title><rect x="28.5664%" y="581" width="0.0122%" height="15" fill="rgb(224,100,7)" fg:x="35239" fg:w="15"/><text x="28.8164%" y="591.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (15 samples, 0.01%)</title><rect x="28.5664%" y="565" width="0.0122%" height="15" fill="rgb(241,198,18)" fg:x="35239" fg:w="15"/><text x="28.8164%" y="575.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&amp;) (17 samples, 0.01%)</title><rect x="28.5664%" y="645" width="0.0138%" height="15" fill="rgb(252,97,53)" fg:x="35239" fg:w="17"/><text x="28.8164%" y="655.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&gt; (17 samples, 0.01%)</title><rect x="28.5664%" y="629" width="0.0138%" height="15" fill="rgb(220,88,7)" fg:x="35239" fg:w="17"/><text x="28.8164%" y="639.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Unserialize&lt;DataStream&gt; (17 samples, 0.01%)</title><rect x="28.5664%" y="613" width="0.0138%" height="15" fill="rgb(213,176,14)" fg:x="35239" fg:w="17"/><text x="28.8164%" y="623.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned long&gt; (17 samples, 0.01%)</title><rect x="28.5664%" y="597" width="0.0138%" height="15" fill="rgb(246,73,7)" fg:x="35239" fg:w="17"/><text x="28.8164%" y="607.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;&gt; (47 samples, 0.04%)</title><rect x="28.5438%" y="693" width="0.0381%" height="15" fill="rgb(245,64,36)" fg:x="35211" fg:w="47"/><text x="28.7938%" y="703.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long&amp;&gt;::Unserialize&lt;DataStream&gt; (47 samples, 0.04%)</title><rect x="28.5438%" y="677" width="0.0381%" height="15" fill="rgb(245,80,10)" fg:x="35211" fg:w="47"/><text x="28.7938%" y="687.50"></text></g><g><title>void AmountCompression::Unser&lt;DataStream, long&gt; (47 samples, 0.04%)</title><rect x="28.5438%" y="661" width="0.0381%" height="15" fill="rgb(232,107,50)" fg:x="35211" fg:w="47"/><text x="28.7938%" y="671.50"></text></g><g><title>DataStream::DataStream (17 samples, 0.01%)</title><rect x="28.5835%" y="629" width="0.0138%" height="15" fill="rgb(253,3,0)" fg:x="35260" fg:w="17"/><text x="28.8335%" y="639.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (17 samples, 0.01%)</title><rect x="28.5835%" y="613" width="0.0138%" height="15" fill="rgb(212,99,53)" fg:x="35260" fg:w="17"/><text x="28.8335%" y="623.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (17 samples, 0.01%)</title><rect x="28.5835%" y="597" width="0.0138%" height="15" fill="rgb(249,111,54)" fg:x="35260" fg:w="17"/><text x="28.8335%" y="607.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (16 samples, 0.01%)</title><rect x="28.5843%" y="581" width="0.0130%" height="15" fill="rgb(249,55,30)" fg:x="35261" fg:w="16"/><text x="28.8343%" y="591.50"></text></g><g><title>CCoinsViewDB::GetCoin (39 samples, 0.03%)</title><rect x="28.5819%" y="661" width="0.0316%" height="15" fill="rgb(237,47,42)" fg:x="35258" fg:w="39"/><text x="28.8319%" y="671.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (39 samples, 0.03%)</title><rect x="28.5819%" y="645" width="0.0316%" height="15" fill="rgb(211,20,18)" fg:x="35258" fg:w="39"/><text x="28.8319%" y="655.50"></text></g><g><title>DataStream::Xor (20 samples, 0.02%)</title><rect x="28.5973%" y="629" width="0.0162%" height="15" fill="rgb(231,203,46)" fg:x="35277" fg:w="20"/><text x="28.8473%" y="639.50"></text></g><g><title>util::Xor (20 samples, 0.02%)</title><rect x="28.5973%" y="613" width="0.0162%" height="15" fill="rgb(237,142,3)" fg:x="35277" fg:w="20"/><text x="28.8473%" y="623.50"></text></g><g><title>unsigned int ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (14 samples, 0.01%)</title><rect x="28.6256%" y="661" width="0.0113%" height="15" fill="rgb(241,107,1)" fg:x="35312" fg:w="14"/><text x="28.8756%" y="671.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (14 samples, 0.01%)</title><rect x="28.6370%" y="661" width="0.0113%" height="15" fill="rgb(229,83,13)" fg:x="35326" fg:w="14"/><text x="28.8870%" y="671.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&amp;) (13 samples, 0.01%)</title><rect x="28.6556%" y="645" width="0.0105%" height="15" fill="rgb(241,91,40)" fg:x="35349" fg:w="13"/><text x="28.9056%" y="655.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (13 samples, 0.01%)</title><rect x="28.6556%" y="629" width="0.0105%" height="15" fill="rgb(225,3,45)" fg:x="35349" fg:w="13"/><text x="28.9056%" y="639.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Unserialize&lt;DataStream&gt; (13 samples, 0.01%)</title><rect x="28.6556%" y="613" width="0.0105%" height="15" fill="rgb(244,223,14)" fg:x="35349" fg:w="13"/><text x="28.9056%" y="623.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned int&gt; (13 samples, 0.01%)</title><rect x="28.6556%" y="597" width="0.0105%" height="15" fill="rgb(224,124,37)" fg:x="35349" fg:w="13"/><text x="28.9056%" y="607.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut&amp;&gt; &gt; (162 samples, 0.13%)</title><rect x="28.5438%" y="789" width="0.1313%" height="15" fill="rgb(251,171,30)" fg:x="35211" fg:w="162"/><text x="28.7938%" y="799.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut&amp;&gt;::Unserialize&lt;DataStream&gt; (162 samples, 0.13%)</title><rect x="28.5438%" y="773" width="0.1313%" height="15" fill="rgb(236,46,54)" fg:x="35211" fg:w="162"/><text x="28.7938%" y="783.50"></text></g><g><title>void TxOutCompression::Unser&lt;DataStream&gt; (162 samples, 0.13%)</title><rect x="28.5438%" y="757" width="0.1313%" height="15" fill="rgb(245,213,5)" fg:x="35211" fg:w="162"/><text x="28.7938%" y="767.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut, ActionUnserialize&gt; (162 samples, 0.13%)</title><rect x="28.5438%" y="741" width="0.1313%" height="15" fill="rgb(230,144,27)" fg:x="35211" fg:w="162"/><text x="28.7938%" y="751.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;, Wrapper&lt;ScriptCompression, CScript&amp;&gt; &gt; (162 samples, 0.13%)</title><rect x="28.5438%" y="725" width="0.1313%" height="15" fill="rgb(220,86,6)" fg:x="35211" fg:w="162"/><text x="28.7938%" y="735.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (162 samples, 0.13%)</title><rect x="28.5438%" y="709" width="0.1313%" height="15" fill="rgb(240,20,13)" fg:x="35211" fg:w="162"/><text x="28.7938%" y="719.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (115 samples, 0.09%)</title><rect x="28.5819%" y="693" width="0.0932%" height="15" fill="rgb(217,89,34)" fg:x="35258" fg:w="115"/><text x="28.8319%" y="703.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript&amp;&gt;::Unserialize&lt;DataStream&gt; (115 samples, 0.09%)</title><rect x="28.5819%" y="677" width="0.0932%" height="15" fill="rgb(229,13,5)" fg:x="35258" fg:w="115"/><text x="28.8319%" y="687.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (33 samples, 0.03%)</title><rect x="28.6483%" y="661" width="0.0268%" height="15" fill="rgb(244,67,35)" fg:x="35340" fg:w="33"/><text x="28.8983%" y="671.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Coin&amp;&gt;(Coin&amp;) (167 samples, 0.14%)</title><rect x="28.5438%" y="837" width="0.1354%" height="15" fill="rgb(221,40,2)" fg:x="35211" fg:w="167"/><text x="28.7938%" y="847.50"></text></g><g><title>void Unserialize&lt;DataStream, Coin&amp;&gt; (167 samples, 0.14%)</title><rect x="28.5438%" y="821" width="0.1354%" height="15" fill="rgb(237,157,21)" fg:x="35211" fg:w="167"/><text x="28.7938%" y="831.50"></text></g><g><title>void Coin::Unserialize&lt;DataStream&gt; (167 samples, 0.14%)</title><rect x="28.5438%" y="805" width="0.1354%" height="15" fill="rgb(222,94,11)" fg:x="35211" fg:w="167"/><text x="28.7938%" y="815.50"></text></g><g><title>DataStream::DataStream (19 samples, 0.02%)</title><rect x="28.6791%" y="837" width="0.0154%" height="15" fill="rgb(249,113,6)" fg:x="35378" fg:w="19"/><text x="28.9291%" y="847.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (19 samples, 0.02%)</title><rect x="28.6791%" y="821" width="0.0154%" height="15" fill="rgb(238,137,36)" fg:x="35378" fg:w="19"/><text x="28.9291%" y="831.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (18 samples, 0.01%)</title><rect x="28.6799%" y="805" width="0.0146%" height="15" fill="rgb(210,102,26)" fg:x="35379" fg:w="18"/><text x="28.9299%" y="815.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (17 samples, 0.01%)</title><rect x="28.6808%" y="789" width="0.0138%" height="15" fill="rgb(218,30,30)" fg:x="35380" fg:w="17"/><text x="28.9308%" y="799.50"></text></g><g><title>DataStream::Xor (16 samples, 0.01%)</title><rect x="28.6945%" y="837" width="0.0130%" height="15" fill="rgb(214,67,26)" fg:x="35397" fg:w="16"/><text x="28.9445%" y="847.50"></text></g><g><title>util::Xor (16 samples, 0.01%)</title><rect x="28.6945%" y="821" width="0.0130%" height="15" fill="rgb(251,9,53)" fg:x="35397" fg:w="16"/><text x="28.9445%" y="831.50"></text></g><g><title>Coin::Coin (13 samples, 0.01%)</title><rect x="28.7391%" y="597" width="0.0105%" height="15" fill="rgb(228,204,25)" fg:x="35452" fg:w="13"/><text x="28.9891%" y="607.50"></text></g><g><title>CCoinsViewDB::GetCoin (50 samples, 0.04%)</title><rect x="28.7221%" y="613" width="0.0405%" height="15" fill="rgb(207,153,8)" fg:x="35431" fg:w="50"/><text x="28.9721%" y="623.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (16 samples, 0.01%)</title><rect x="28.7497%" y="597" width="0.0130%" height="15" fill="rgb(242,9,16)" fg:x="35465" fg:w="16"/><text x="28.9997%" y="607.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (69 samples, 0.06%)</title><rect x="28.7197%" y="725" width="0.0559%" height="15" fill="rgb(217,211,10)" fg:x="35428" fg:w="69"/><text x="28.9697%" y="735.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (69 samples, 0.06%)</title><rect x="28.7197%" y="709" width="0.0559%" height="15" fill="rgb(219,228,52)" fg:x="35428" fg:w="69"/><text x="28.9697%" y="719.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (69 samples, 0.06%)</title><rect x="28.7197%" y="693" width="0.0559%" height="15" fill="rgb(231,92,29)" fg:x="35428" fg:w="69"/><text x="28.9697%" y="703.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (69 samples, 0.06%)</title><rect x="28.7197%" y="677" width="0.0559%" height="15" fill="rgb(232,8,23)" fg:x="35428" fg:w="69"/><text x="28.9697%" y="687.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (69 samples, 0.06%)</title><rect x="28.7197%" y="661" width="0.0559%" height="15" fill="rgb(216,211,34)" fg:x="35428" fg:w="69"/><text x="28.9697%" y="671.50"></text></g><g><title>DataStream::write (69 samples, 0.06%)</title><rect x="28.7197%" y="645" width="0.0559%" height="15" fill="rgb(236,151,0)" fg:x="35428" fg:w="69"/><text x="28.9697%" y="655.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (69 samples, 0.06%)</title><rect x="28.7197%" y="629" width="0.0559%" height="15" fill="rgb(209,168,3)" fg:x="35428" fg:w="69"/><text x="28.9697%" y="639.50"></text></g><g><title>SipHashUint256Extra (32 samples, 0.03%)</title><rect x="28.7756%" y="661" width="0.0259%" height="15" fill="rgb(208,129,28)" fg:x="35497" fg:w="32"/><text x="29.0256%" y="671.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (119 samples, 0.10%)</title><rect x="28.7156%" y="837" width="0.0965%" height="15" fill="rgb(229,78,22)" fg:x="35423" fg:w="119"/><text x="28.9656%" y="847.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (119 samples, 0.10%)</title><rect x="28.7156%" y="821" width="0.0965%" height="15" fill="rgb(228,187,13)" fg:x="35423" fg:w="119"/><text x="28.9656%" y="831.50"></text></g><g><title>Serialize&lt;DataStream&gt; (119 samples, 0.10%)</title><rect x="28.7156%" y="805" width="0.0965%" height="15" fill="rgb(240,119,24)" fg:x="35423" fg:w="119"/><text x="28.9656%" y="815.50"></text></g><g><title>Ser&lt;DataStream&gt; (119 samples, 0.10%)</title><rect x="28.7156%" y="789" width="0.0965%" height="15" fill="rgb(209,194,42)" fg:x="35423" fg:w="119"/><text x="28.9656%" y="799.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (119 samples, 0.10%)</title><rect x="28.7156%" y="773" width="0.0965%" height="15" fill="rgb(247,200,46)" fg:x="35423" fg:w="119"/><text x="28.9656%" y="783.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (119 samples, 0.10%)</title><rect x="28.7156%" y="757" width="0.0965%" height="15" fill="rgb(218,76,16)" fg:x="35423" fg:w="119"/><text x="28.9656%" y="767.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (119 samples, 0.10%)</title><rect x="28.7156%" y="741" width="0.0965%" height="15" fill="rgb(225,21,48)" fg:x="35423" fg:w="119"/><text x="28.9656%" y="751.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (45 samples, 0.04%)</title><rect x="28.7756%" y="725" width="0.0365%" height="15" fill="rgb(239,223,50)" fg:x="35497" fg:w="45"/><text x="29.0256%" y="735.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (45 samples, 0.04%)</title><rect x="28.7756%" y="709" width="0.0365%" height="15" fill="rgb(244,45,21)" fg:x="35497" fg:w="45"/><text x="29.0256%" y="719.50"></text></g><g><title>DataStream::write (45 samples, 0.04%)</title><rect x="28.7756%" y="693" width="0.0365%" height="15" fill="rgb(232,33,43)" fg:x="35497" fg:w="45"/><text x="29.0256%" y="703.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (45 samples, 0.04%)</title><rect x="28.7756%" y="677" width="0.0365%" height="15" fill="rgb(209,8,3)" fg:x="35497" fg:w="45"/><text x="29.0256%" y="687.50"></text></g><g><title>CCoinsViewDB::GetCoin (13,002 samples, 10.54%)</title><rect x="18.2761%" y="869" width="10.5401%" height="15" fill="rgb(214,25,53)" fg:x="22545" fg:w="13002"/><text x="18.5261%" y="879.50">CCoinsViewDB::G..</text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (341 samples, 0.28%)</title><rect x="28.5397%" y="853" width="0.2764%" height="15" fill="rgb(254,186,54)" fg:x="35206" fg:w="341"/><text x="28.7897%" y="863.50"></text></g><g><title>SipHashUint256Extra (309 samples, 0.25%)</title><rect x="28.8323%" y="869" width="0.2505%" height="15" fill="rgb(208,174,49)" fg:x="35567" fg:w="309"/><text x="29.0823%" y="879.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (137 samples, 0.11%)</title><rect x="28.9718%" y="853" width="0.1111%" height="15" fill="rgb(233,191,51)" fg:x="35739" fg:w="137"/><text x="29.2218%" y="863.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (137 samples, 0.11%)</title><rect x="28.9718%" y="837" width="0.1111%" height="15" fill="rgb(222,134,10)" fg:x="35739" fg:w="137"/><text x="29.2218%" y="847.50"></text></g><g><title>leveldb::DBImpl::Get (18 samples, 0.01%)</title><rect x="29.0828%" y="869" width="0.0146%" height="15" fill="rgb(230,226,20)" fg:x="35876" fg:w="18"/><text x="29.3328%" y="879.50"></text></g><g><title>CCoinsViewBacked::GetCoin (13,385 samples, 10.85%)</title><rect x="18.2728%" y="885" width="10.8505%" height="15" fill="rgb(251,111,25)" fg:x="22541" fg:w="13385"/><text x="18.5228%" y="895.50">CCoinsViewBacked..</text></g><g><title>SipHashUint256Extra (199 samples, 0.16%)</title><rect x="29.1242%" y="885" width="0.1613%" height="15" fill="rgb(224,40,46)" fg:x="35927" fg:w="199"/><text x="29.3742%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (71 samples, 0.06%)</title><rect x="29.2279%" y="869" width="0.0576%" height="15" fill="rgb(236,108,47)" fg:x="36055" fg:w="71"/><text x="29.4779%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (71 samples, 0.06%)</title><rect x="29.2279%" y="853" width="0.0576%" height="15" fill="rgb(234,93,0)" fg:x="36055" fg:w="71"/><text x="29.4779%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (68 samples, 0.06%)</title><rect x="29.2855%" y="885" width="0.0551%" height="15" fill="rgb(224,213,32)" fg:x="36126" fg:w="68"/><text x="29.5355%" y="895.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (13,654 samples, 11.07%)</title><rect x="18.2728%" y="933" width="11.0686%" height="15" fill="rgb(251,11,48)" fg:x="22541" fg:w="13654"/><text x="18.5228%" y="943.50">CCoinsViewErrorC..</text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (13,654 samples, 11.07%)</title><rect x="18.2728%" y="917" width="11.0686%" height="15" fill="rgb(236,173,5)" fg:x="22541" fg:w="13654"/><text x="18.5228%" y="927.50">ExecuteBackedWra..</text></g><g><title>CCoinsViewErrorCatcher::GetCoin (13,654 samples, 11.07%)</title><rect x="18.2728%" y="901" width="11.0686%" height="15" fill="rgb(230,95,12)" fg:x="22541" fg:w="13654"/><text x="18.5228%" y="911.50">CCoinsViewErrorC..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (40 samples, 0.03%)</title><rect x="29.3495%" y="933" width="0.0324%" height="15" fill="rgb(232,209,1)" fg:x="36205" fg:w="40"/><text x="29.5995%" y="943.50"></text></g><g><title>CCoinsViewCache::FetchCoin (42 samples, 0.03%)</title><rect x="29.3974%" y="885" width="0.0340%" height="15" fill="rgb(232,6,1)" fg:x="36264" fg:w="42"/><text x="29.6474%" y="895.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (19 samples, 0.02%)</title><rect x="29.4160%" y="869" width="0.0154%" height="15" fill="rgb(210,224,50)" fg:x="36287" fg:w="19"/><text x="29.6660%" y="879.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (18 samples, 0.01%)</title><rect x="29.4168%" y="853" width="0.0146%" height="15" fill="rgb(228,127,35)" fg:x="36288" fg:w="18"/><text x="29.6668%" y="863.50"></text></g><g><title>SipHashUint256Extra (523 samples, 0.42%)</title><rect x="29.4322%" y="885" width="0.4240%" height="15" fill="rgb(245,102,45)" fg:x="36307" fg:w="523"/><text x="29.6822%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (190 samples, 0.15%)</title><rect x="29.7022%" y="869" width="0.1540%" height="15" fill="rgb(214,1,49)" fg:x="36640" fg:w="190"/><text x="29.9522%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (190 samples, 0.15%)</title><rect x="29.7022%" y="853" width="0.1540%" height="15" fill="rgb(226,163,40)" fg:x="36640" fg:w="190"/><text x="29.9522%" y="863.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="29.9129%" y="869" width="0.0146%" height="15" fill="rgb(239,212,28)" fg:x="36900" fg:w="18"/><text x="30.1629%" y="879.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="29.9154%" y="853" width="0.0122%" height="15" fill="rgb(220,20,13)" fg:x="36903" fg:w="15"/><text x="30.1654%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (31 samples, 0.03%)</title><rect x="29.9275%" y="869" width="0.0251%" height="15" fill="rgb(210,164,35)" fg:x="36918" fg:w="31"/><text x="30.1775%" y="879.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (31 samples, 0.03%)</title><rect x="29.9275%" y="853" width="0.0251%" height="15" fill="rgb(248,109,41)" fg:x="36918" fg:w="31"/><text x="30.1775%" y="863.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (31 samples, 0.03%)</title><rect x="29.9275%" y="837" width="0.0251%" height="15" fill="rgb(238,23,50)" fg:x="36918" fg:w="31"/><text x="30.1775%" y="847.50"></text></g><g><title>SaltedOutpointHasher::operator (31 samples, 0.03%)</title><rect x="29.9275%" y="821" width="0.0251%" height="15" fill="rgb(211,48,49)" fg:x="36918" fg:w="31"/><text x="30.1775%" y="831.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (130 samples, 0.11%)</title><rect x="29.8562%" y="885" width="0.1054%" height="15" fill="rgb(223,36,21)" fg:x="36830" fg:w="130"/><text x="30.1062%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (30 samples, 0.02%)</title><rect x="29.9616%" y="885" width="0.0243%" height="15" fill="rgb(207,123,46)" fg:x="36960" fg:w="30"/><text x="30.2116%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (734 samples, 0.60%)</title><rect x="29.3957%" y="901" width="0.5950%" height="15" fill="rgb(240,218,32)" fg:x="36262" fg:w="734"/><text x="29.6457%" y="911.50"></text></g><g><title>SipHashUint256Extra (349 samples, 0.28%)</title><rect x="29.9908%" y="885" width="0.2829%" height="15" fill="rgb(252,5,43)" fg:x="36996" fg:w="349"/><text x="30.2408%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (183 samples, 0.15%)</title><rect x="30.1253%" y="869" width="0.1483%" height="15" fill="rgb(252,84,19)" fg:x="37162" fg:w="183"/><text x="30.3753%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (183 samples, 0.15%)</title><rect x="30.1253%" y="853" width="0.1483%" height="15" fill="rgb(243,152,39)" fg:x="37162" fg:w="183"/><text x="30.3753%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (404 samples, 0.33%)</title><rect x="29.9908%" y="901" width="0.3275%" height="15" fill="rgb(234,160,15)" fg:x="36996" fg:w="404"/><text x="30.2408%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (50 samples, 0.04%)</title><rect x="30.2777%" y="885" width="0.0405%" height="15" fill="rgb(237,34,20)" fg:x="37350" fg:w="50"/><text x="30.5277%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (50 samples, 0.04%)</title><rect x="30.2777%" y="869" width="0.0405%" height="15" fill="rgb(229,97,13)" fg:x="37350" fg:w="50"/><text x="30.5277%" y="879.50"></text></g><g><title>SipHashUint256Extra (34 samples, 0.03%)</title><rect x="30.3207%" y="885" width="0.0276%" height="15" fill="rgb(234,71,50)" fg:x="37403" fg:w="34"/><text x="30.5707%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (13 samples, 0.01%)</title><rect x="30.3377%" y="869" width="0.0105%" height="15" fill="rgb(253,155,4)" fg:x="37424" fg:w="13"/><text x="30.5877%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (13 samples, 0.01%)</title><rect x="30.3377%" y="853" width="0.0105%" height="15" fill="rgb(222,185,37)" fg:x="37424" fg:w="13"/><text x="30.5877%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (54 samples, 0.04%)</title><rect x="30.3183%" y="901" width="0.0438%" height="15" fill="rgb(251,177,13)" fg:x="37400" fg:w="54"/><text x="30.5683%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (17 samples, 0.01%)</title><rect x="30.3483%" y="885" width="0.0138%" height="15" fill="rgb(250,179,40)" fg:x="37437" fg:w="17"/><text x="30.5983%" y="895.50"></text></g><g><title>CCoinsViewCache::FetchCoin (14,927 samples, 12.10%)</title><rect x="18.2720%" y="949" width="12.1006%" height="15" fill="rgb(242,44,2)" fg:x="22540" fg:w="14927"/><text x="18.5220%" y="959.50">CCoinsViewCache::F..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1,222 samples, 0.99%)</title><rect x="29.3820%" y="933" width="0.9906%" height="15" fill="rgb(216,177,13)" fg:x="36245" fg:w="1222"/><text x="29.6320%" y="943.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1,221 samples, 0.99%)</title><rect x="29.3828%" y="917" width="0.9898%" height="15" fill="rgb(216,106,43)" fg:x="36246" fg:w="1221"/><text x="29.6328%" y="927.50"></text></g><g><title>CCoinsViewDB::GetCoin (14 samples, 0.01%)</title><rect x="30.3726%" y="949" width="0.0113%" height="15" fill="rgb(216,183,2)" fg:x="37467" fg:w="14"/><text x="30.6226%" y="959.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (14 samples, 0.01%)</title><rect x="30.3726%" y="933" width="0.0113%" height="15" fill="rgb(249,75,3)" fg:x="37467" fg:w="14"/><text x="30.6226%" y="943.50"></text></g><g><title>SipHashUint256Extra (232 samples, 0.19%)</title><rect x="30.3839%" y="949" width="0.1881%" height="15" fill="rgb(219,67,39)" fg:x="37481" fg:w="232"/><text x="30.6339%" y="959.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (82 samples, 0.07%)</title><rect x="30.5055%" y="933" width="0.0665%" height="15" fill="rgb(253,228,2)" fg:x="37631" fg:w="82"/><text x="30.7555%" y="943.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (82 samples, 0.07%)</title><rect x="30.5055%" y="917" width="0.0665%" height="15" fill="rgb(235,138,27)" fg:x="37631" fg:w="82"/><text x="30.7555%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (58 samples, 0.05%)</title><rect x="30.5736%" y="949" width="0.0470%" height="15" fill="rgb(236,97,51)" fg:x="37715" fg:w="58"/><text x="30.8236%" y="959.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (23 samples, 0.02%)</title><rect x="30.6328%" y="789" width="0.0186%" height="15" fill="rgb(240,80,30)" fg:x="37788" fg:w="23"/><text x="30.8828%" y="799.50"></text></g><g><title>CCoinsViewCache::GetCoin (15,287 samples, 12.39%)</title><rect x="18.2720%" y="965" width="12.3924%" height="15" fill="rgb(230,178,19)" fg:x="22540" fg:w="15287"/><text x="18.5220%" y="975.50">CCoinsViewCache::Ge..</text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (51 samples, 0.04%)</title><rect x="30.6231%" y="949" width="0.0413%" height="15" fill="rgb(210,190,27)" fg:x="37776" fg:w="51"/><text x="30.8731%" y="959.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (51 samples, 0.04%)</title><rect x="30.6231%" y="933" width="0.0413%" height="15" fill="rgb(222,107,31)" fg:x="37776" fg:w="51"/><text x="30.8731%" y="943.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (51 samples, 0.04%)</title><rect x="30.6231%" y="917" width="0.0413%" height="15" fill="rgb(216,127,34)" fg:x="37776" fg:w="51"/><text x="30.8731%" y="927.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (51 samples, 0.04%)</title><rect x="30.6231%" y="901" width="0.0413%" height="15" fill="rgb(234,116,52)" fg:x="37776" fg:w="51"/><text x="30.8731%" y="911.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (51 samples, 0.04%)</title><rect x="30.6231%" y="885" width="0.0413%" height="15" fill="rgb(222,124,15)" fg:x="37776" fg:w="51"/><text x="30.8731%" y="895.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (50 samples, 0.04%)</title><rect x="30.6239%" y="869" width="0.0405%" height="15" fill="rgb(231,179,28)" fg:x="37777" fg:w="50"/><text x="30.8739%" y="879.50"></text></g><g><title>Coin::Coin (50 samples, 0.04%)</title><rect x="30.6239%" y="853" width="0.0405%" height="15" fill="rgb(226,93,45)" fg:x="37777" fg:w="50"/><text x="30.8739%" y="863.50"></text></g><g><title>CTxOut::CTxOut (50 samples, 0.04%)</title><rect x="30.6239%" y="837" width="0.0405%" height="15" fill="rgb(215,8,51)" fg:x="37777" fg:w="50"/><text x="30.8739%" y="847.50"></text></g><g><title>CScript::CScript (50 samples, 0.04%)</title><rect x="30.6239%" y="821" width="0.0405%" height="15" fill="rgb(223,106,5)" fg:x="37777" fg:w="50"/><text x="30.8739%" y="831.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (50 samples, 0.04%)</title><rect x="30.6239%" y="805" width="0.0405%" height="15" fill="rgb(250,191,5)" fg:x="37777" fg:w="50"/><text x="30.8739%" y="815.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (16 samples, 0.01%)</title><rect x="30.6514%" y="789" width="0.0130%" height="15" fill="rgb(242,132,44)" fg:x="37811" fg:w="16"/><text x="30.9014%" y="799.50"></text></g><g><title>SipHashUint256Extra (87 samples, 0.07%)</title><rect x="30.6725%" y="965" width="0.0705%" height="15" fill="rgb(251,152,29)" fg:x="37837" fg:w="87"/><text x="30.9225%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (32 samples, 0.03%)</title><rect x="30.7171%" y="949" width="0.0259%" height="15" fill="rgb(218,179,5)" fg:x="37892" fg:w="32"/><text x="30.9671%" y="959.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (32 samples, 0.03%)</title><rect x="30.7171%" y="933" width="0.0259%" height="15" fill="rgb(227,67,19)" fg:x="37892" fg:w="32"/><text x="30.9671%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (13 samples, 0.01%)</title><rect x="30.7706%" y="949" width="0.0105%" height="15" fill="rgb(233,119,31)" fg:x="37958" fg:w="13"/><text x="31.0206%" y="959.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (13 samples, 0.01%)</title><rect x="30.7706%" y="933" width="0.0105%" height="15" fill="rgb(241,120,22)" fg:x="37958" fg:w="13"/><text x="31.0206%" y="943.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (13 samples, 0.01%)</title><rect x="30.7706%" y="917" width="0.0105%" height="15" fill="rgb(224,102,30)" fg:x="37958" fg:w="13"/><text x="31.0206%" y="927.50"></text></g><g><title>SaltedOutpointHasher::operator (13 samples, 0.01%)</title><rect x="30.7706%" y="901" width="0.0105%" height="15" fill="rgb(210,164,37)" fg:x="37958" fg:w="13"/><text x="31.0206%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (56 samples, 0.05%)</title><rect x="30.7447%" y="965" width="0.0454%" height="15" fill="rgb(226,191,16)" fg:x="37926" fg:w="56"/><text x="30.9947%" y="975.50"></text></g><g><title>CCoinsViewCache::FetchCoin (14 samples, 0.01%)</title><rect x="30.7909%" y="933" width="0.0113%" height="15" fill="rgb(214,40,45)" fg:x="37983" fg:w="14"/><text x="31.0409%" y="943.50"></text></g><g><title>SipHashUint256Extra (34 samples, 0.03%)</title><rect x="30.8103%" y="933" width="0.0276%" height="15" fill="rgb(244,29,26)" fg:x="38007" fg:w="34"/><text x="31.0603%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (19 samples, 0.02%)</title><rect x="30.8225%" y="917" width="0.0154%" height="15" fill="rgb(216,16,5)" fg:x="38022" fg:w="19"/><text x="31.0725%" y="927.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (19 samples, 0.02%)</title><rect x="30.8225%" y="901" width="0.0154%" height="15" fill="rgb(249,76,35)" fg:x="38022" fg:w="19"/><text x="31.0725%" y="911.50"></text></g><g><title>Coin::operator= (15 samples, 0.01%)</title><rect x="30.8817%" y="901" width="0.0122%" height="15" fill="rgb(207,11,44)" fg:x="38095" fg:w="15"/><text x="31.1317%" y="911.50"></text></g><g><title>CCoinsViewCache::FetchCoin (80 samples, 0.06%)</title><rect x="30.8403%" y="917" width="0.0649%" height="15" fill="rgb(228,190,49)" fg:x="38044" fg:w="80"/><text x="31.0903%" y="927.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (14 samples, 0.01%)</title><rect x="30.8938%" y="901" width="0.0113%" height="15" fill="rgb(214,173,12)" fg:x="38110" fg:w="14"/><text x="31.1438%" y="911.50"></text></g><g><title>CCoinsViewCache::GetCoin (92 samples, 0.07%)</title><rect x="30.9052%" y="917" width="0.0746%" height="15" fill="rgb(218,26,35)" fg:x="38124" fg:w="92"/><text x="31.1552%" y="927.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (90 samples, 0.07%)</title><rect x="30.9068%" y="901" width="0.0730%" height="15" fill="rgb(220,200,19)" fg:x="38126" fg:w="90"/><text x="31.1568%" y="911.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (90 samples, 0.07%)</title><rect x="30.9068%" y="885" width="0.0730%" height="15" fill="rgb(239,95,49)" fg:x="38126" fg:w="90"/><text x="31.1568%" y="895.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (90 samples, 0.07%)</title><rect x="30.9068%" y="869" width="0.0730%" height="15" fill="rgb(235,85,53)" fg:x="38126" fg:w="90"/><text x="31.1568%" y="879.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (90 samples, 0.07%)</title><rect x="30.9068%" y="853" width="0.0730%" height="15" fill="rgb(233,133,31)" fg:x="38126" fg:w="90"/><text x="31.1568%" y="863.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (90 samples, 0.07%)</title><rect x="30.9068%" y="837" width="0.0730%" height="15" fill="rgb(218,25,20)" fg:x="38126" fg:w="90"/><text x="31.1568%" y="847.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (89 samples, 0.07%)</title><rect x="30.9076%" y="821" width="0.0721%" height="15" fill="rgb(252,210,38)" fg:x="38127" fg:w="89"/><text x="31.1576%" y="831.50"></text></g><g><title>Coin::Coin (89 samples, 0.07%)</title><rect x="30.9076%" y="805" width="0.0721%" height="15" fill="rgb(242,134,21)" fg:x="38127" fg:w="89"/><text x="31.1576%" y="815.50"></text></g><g><title>CTxOut::CTxOut (80 samples, 0.06%)</title><rect x="30.9149%" y="789" width="0.0649%" height="15" fill="rgb(213,28,48)" fg:x="38136" fg:w="80"/><text x="31.1649%" y="799.50"></text></g><g><title>CScript::CScript (80 samples, 0.06%)</title><rect x="30.9149%" y="773" width="0.0649%" height="15" fill="rgb(250,196,2)" fg:x="38136" fg:w="80"/><text x="31.1649%" y="783.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (80 samples, 0.06%)</title><rect x="30.9149%" y="757" width="0.0649%" height="15" fill="rgb(227,5,17)" fg:x="38136" fg:w="80"/><text x="31.1649%" y="767.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (79 samples, 0.06%)</title><rect x="30.9157%" y="741" width="0.0640%" height="15" fill="rgb(221,226,24)" fg:x="38137" fg:w="79"/><text x="31.1657%" y="751.50"></text></g><g><title>SipHashUint256Extra (128 samples, 0.10%)</title><rect x="30.9943%" y="917" width="0.1038%" height="15" fill="rgb(211,5,48)" fg:x="38234" fg:w="128"/><text x="31.2443%" y="927.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (47 samples, 0.04%)</title><rect x="31.0600%" y="901" width="0.0381%" height="15" fill="rgb(219,150,6)" fg:x="38315" fg:w="47"/><text x="31.3100%" y="911.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (47 samples, 0.04%)</title><rect x="31.0600%" y="885" width="0.0381%" height="15" fill="rgb(251,46,16)" fg:x="38315" fg:w="47"/><text x="31.3100%" y="895.50"></text></g><g><title>CCoinsViewCache::FetchCoin (18 samples, 0.01%)</title><rect x="31.1005%" y="837" width="0.0146%" height="15" fill="rgb(220,204,40)" fg:x="38365" fg:w="18"/><text x="31.3505%" y="847.50"></text></g><g><title>SipHashUint256Extra (40 samples, 0.03%)</title><rect x="31.1216%" y="837" width="0.0324%" height="15" fill="rgb(211,85,2)" fg:x="38391" fg:w="40"/><text x="31.3716%" y="847.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (69 samples, 0.06%)</title><rect x="31.1005%" y="901" width="0.0559%" height="15" fill="rgb(229,17,7)" fg:x="38365" fg:w="69"/><text x="31.3505%" y="911.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (69 samples, 0.06%)</title><rect x="31.1005%" y="885" width="0.0559%" height="15" fill="rgb(239,72,28)" fg:x="38365" fg:w="69"/><text x="31.3505%" y="895.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (69 samples, 0.06%)</title><rect x="31.1005%" y="869" width="0.0559%" height="15" fill="rgb(230,47,54)" fg:x="38365" fg:w="69"/><text x="31.3505%" y="879.50"></text></g><g><title>SaltedOutpointHasher::operator (69 samples, 0.06%)</title><rect x="31.1005%" y="853" width="0.0559%" height="15" fill="rgb(214,50,8)" fg:x="38365" fg:w="69"/><text x="31.3505%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (392 samples, 0.32%)</title><rect x="30.8403%" y="933" width="0.3178%" height="15" fill="rgb(216,198,43)" fg:x="38044" fg:w="392"/><text x="31.0903%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (74 samples, 0.06%)</title><rect x="31.0981%" y="917" width="0.0600%" height="15" fill="rgb(234,20,35)" fg:x="38362" fg:w="74"/><text x="31.3481%" y="927.50"></text></g><g><title>SipHashUint256Extra (107 samples, 0.09%)</title><rect x="31.1581%" y="917" width="0.0867%" height="15" fill="rgb(254,45,19)" fg:x="38436" fg:w="107"/><text x="31.4081%" y="927.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (46 samples, 0.04%)</title><rect x="31.2075%" y="901" width="0.0373%" height="15" fill="rgb(219,14,44)" fg:x="38497" fg:w="46"/><text x="31.4575%" y="911.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (46 samples, 0.04%)</title><rect x="31.2075%" y="885" width="0.0373%" height="15" fill="rgb(217,220,26)" fg:x="38497" fg:w="46"/><text x="31.4575%" y="895.50"></text></g><g><title>CCoinsViewCache::FetchCoin (16 samples, 0.01%)</title><rect x="31.2489%" y="837" width="0.0130%" height="15" fill="rgb(213,158,28)" fg:x="38548" fg:w="16"/><text x="31.4989%" y="847.50"></text></g><g><title>SipHashUint256Extra (66 samples, 0.05%)</title><rect x="31.2651%" y="837" width="0.0535%" height="15" fill="rgb(252,51,52)" fg:x="38568" fg:w="66"/><text x="31.5151%" y="847.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (24 samples, 0.02%)</title><rect x="31.2991%" y="821" width="0.0195%" height="15" fill="rgb(246,89,16)" fg:x="38610" fg:w="24"/><text x="31.5491%" y="831.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (24 samples, 0.02%)</title><rect x="31.2991%" y="805" width="0.0195%" height="15" fill="rgb(216,158,49)" fg:x="38610" fg:w="24"/><text x="31.5491%" y="815.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (91 samples, 0.07%)</title><rect x="31.2456%" y="917" width="0.0738%" height="15" fill="rgb(236,107,19)" fg:x="38544" fg:w="91"/><text x="31.4956%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (87 samples, 0.07%)</title><rect x="31.2489%" y="901" width="0.0705%" height="15" fill="rgb(228,185,30)" fg:x="38548" fg:w="87"/><text x="31.4989%" y="911.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (87 samples, 0.07%)</title><rect x="31.2489%" y="885" width="0.0705%" height="15" fill="rgb(246,134,8)" fg:x="38548" fg:w="87"/><text x="31.4989%" y="895.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (87 samples, 0.07%)</title><rect x="31.2489%" y="869" width="0.0705%" height="15" fill="rgb(214,143,50)" fg:x="38548" fg:w="87"/><text x="31.4989%" y="879.50"></text></g><g><title>SaltedOutpointHasher::operator (87 samples, 0.07%)</title><rect x="31.2489%" y="853" width="0.0705%" height="15" fill="rgb(228,75,8)" fg:x="38548" fg:w="87"/><text x="31.4989%" y="863.50"></text></g><g><title>SipHashUint256Extra (118 samples, 0.10%)</title><rect x="31.3364%" y="837" width="0.0957%" height="15" fill="rgb(207,175,4)" fg:x="38656" fg:w="118"/><text x="31.5864%" y="847.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (46 samples, 0.04%)</title><rect x="31.3948%" y="821" width="0.0373%" height="15" fill="rgb(205,108,24)" fg:x="38728" fg:w="46"/><text x="31.6448%" y="831.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (46 samples, 0.04%)</title><rect x="31.3948%" y="805" width="0.0373%" height="15" fill="rgb(244,120,49)" fg:x="38728" fg:w="46"/><text x="31.6448%" y="815.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (133 samples, 0.11%)</title><rect x="31.3340%" y="885" width="0.1078%" height="15" fill="rgb(223,47,38)" fg:x="38653" fg:w="133"/><text x="31.5840%" y="895.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (133 samples, 0.11%)</title><rect x="31.3340%" y="869" width="0.1078%" height="15" fill="rgb(229,179,11)" fg:x="38653" fg:w="133"/><text x="31.5840%" y="879.50"></text></g><g><title>SaltedOutpointHasher::operator (133 samples, 0.11%)</title><rect x="31.3340%" y="853" width="0.1078%" height="15" fill="rgb(231,122,1)" fg:x="38653" fg:w="133"/><text x="31.5840%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (351 samples, 0.28%)</title><rect x="31.1581%" y="933" width="0.2845%" height="15" fill="rgb(245,119,9)" fg:x="38436" fg:w="351"/><text x="31.4081%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (152 samples, 0.12%)</title><rect x="31.3194%" y="917" width="0.1232%" height="15" fill="rgb(241,163,25)" fg:x="38635" fg:w="152"/><text x="31.5694%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (152 samples, 0.12%)</title><rect x="31.3194%" y="901" width="0.1232%" height="15" fill="rgb(217,214,3)" fg:x="38635" fg:w="152"/><text x="31.5694%" y="911.50"></text></g><g><title>CCoinsViewCache::FetchCoin (38 samples, 0.03%)</title><rect x="31.4426%" y="917" width="0.0308%" height="15" fill="rgb(240,86,28)" fg:x="38787" fg:w="38"/><text x="31.6926%" y="927.50"></text></g><g><title>CCoinsViewCache::GetCoin (18 samples, 0.01%)</title><rect x="31.4734%" y="917" width="0.0146%" height="15" fill="rgb(215,47,9)" fg:x="38825" fg:w="18"/><text x="31.7234%" y="927.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (18 samples, 0.01%)</title><rect x="31.4734%" y="901" width="0.0146%" height="15" fill="rgb(252,25,45)" fg:x="38825" fg:w="18"/><text x="31.7234%" y="911.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (18 samples, 0.01%)</title><rect x="31.4734%" y="885" width="0.0146%" height="15" fill="rgb(251,164,9)" fg:x="38825" fg:w="18"/><text x="31.7234%" y="895.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (18 samples, 0.01%)</title><rect x="31.4734%" y="869" width="0.0146%" height="15" fill="rgb(233,194,0)" fg:x="38825" fg:w="18"/><text x="31.7234%" y="879.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (18 samples, 0.01%)</title><rect x="31.4734%" y="853" width="0.0146%" height="15" fill="rgb(249,111,24)" fg:x="38825" fg:w="18"/><text x="31.7234%" y="863.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (18 samples, 0.01%)</title><rect x="31.4734%" y="837" width="0.0146%" height="15" fill="rgb(250,223,3)" fg:x="38825" fg:w="18"/><text x="31.7234%" y="847.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (18 samples, 0.01%)</title><rect x="31.4734%" y="821" width="0.0146%" height="15" fill="rgb(236,178,37)" fg:x="38825" fg:w="18"/><text x="31.7234%" y="831.50"></text></g><g><title>Coin::Coin (18 samples, 0.01%)</title><rect x="31.4734%" y="805" width="0.0146%" height="15" fill="rgb(241,158,50)" fg:x="38825" fg:w="18"/><text x="31.7234%" y="815.50"></text></g><g><title>CTxOut::CTxOut (16 samples, 0.01%)</title><rect x="31.4751%" y="789" width="0.0130%" height="15" fill="rgb(213,121,41)" fg:x="38827" fg:w="16"/><text x="31.7251%" y="799.50"></text></g><g><title>CScript::CScript (16 samples, 0.01%)</title><rect x="31.4751%" y="773" width="0.0130%" height="15" fill="rgb(240,92,3)" fg:x="38827" fg:w="16"/><text x="31.7251%" y="783.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (16 samples, 0.01%)</title><rect x="31.4751%" y="757" width="0.0130%" height="15" fill="rgb(205,123,3)" fg:x="38827" fg:w="16"/><text x="31.7251%" y="767.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (16 samples, 0.01%)</title><rect x="31.4751%" y="741" width="0.0130%" height="15" fill="rgb(205,97,47)" fg:x="38827" fg:w="16"/><text x="31.7251%" y="751.50"></text></g><g><title>SipHashUint256Extra (19 samples, 0.02%)</title><rect x="31.4896%" y="917" width="0.0154%" height="15" fill="rgb(247,152,14)" fg:x="38845" fg:w="19"/><text x="31.7396%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (81 samples, 0.07%)</title><rect x="31.4426%" y="933" width="0.0657%" height="15" fill="rgb(248,195,53)" fg:x="38787" fg:w="81"/><text x="31.6926%" y="943.50"></text></g><g><title>CCoinsViewCache::GetCoin (129 samples, 0.10%)</title><rect x="31.5205%" y="901" width="0.1046%" height="15" fill="rgb(226,201,16)" fg:x="38883" fg:w="129"/><text x="31.7705%" y="911.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (127 samples, 0.10%)</title><rect x="31.5221%" y="885" width="0.1030%" height="15" fill="rgb(205,98,0)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="895.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (127 samples, 0.10%)</title><rect x="31.5221%" y="869" width="0.1030%" height="15" fill="rgb(214,191,48)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="879.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (127 samples, 0.10%)</title><rect x="31.5221%" y="853" width="0.1030%" height="15" fill="rgb(237,112,39)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="863.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (127 samples, 0.10%)</title><rect x="31.5221%" y="837" width="0.1030%" height="15" fill="rgb(247,203,27)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="847.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (127 samples, 0.10%)</title><rect x="31.5221%" y="821" width="0.1030%" height="15" fill="rgb(235,124,28)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="831.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (127 samples, 0.10%)</title><rect x="31.5221%" y="805" width="0.1030%" height="15" fill="rgb(208,207,46)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="815.50"></text></g><g><title>Coin::Coin (127 samples, 0.10%)</title><rect x="31.5221%" y="789" width="0.1030%" height="15" fill="rgb(234,176,4)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="799.50"></text></g><g><title>CTxOut::CTxOut (127 samples, 0.10%)</title><rect x="31.5221%" y="773" width="0.1030%" height="15" fill="rgb(230,133,28)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="783.50"></text></g><g><title>CScript::CScript (127 samples, 0.10%)</title><rect x="31.5221%" y="757" width="0.1030%" height="15" fill="rgb(211,137,40)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="767.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (127 samples, 0.10%)</title><rect x="31.5221%" y="741" width="0.1030%" height="15" fill="rgb(254,35,13)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="751.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (127 samples, 0.10%)</title><rect x="31.5221%" y="725" width="0.1030%" height="15" fill="rgb(225,49,51)" fg:x="38885" fg:w="127"/><text x="31.7721%" y="735.50"></text></g><g><title>Chainstate::ConnectBlock (17 samples, 0.01%)</title><rect x="31.6250%" y="901" width="0.0138%" height="15" fill="rgb(251,10,15)" fg:x="39012" fg:w="17"/><text x="31.8750%" y="911.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (168 samples, 0.14%)</title><rect x="31.5083%" y="933" width="0.1362%" height="15" fill="rgb(228,207,15)" fg:x="38868" fg:w="168"/><text x="31.7583%" y="943.50"></text></g><g><title>SaltedOutpointHasher::operator (168 samples, 0.14%)</title><rect x="31.5083%" y="917" width="0.1362%" height="15" fill="rgb(241,99,19)" fg:x="38868" fg:w="168"/><text x="31.7583%" y="927.50"></text></g><g><title>CCoinsViewCache::FetchCoin (16,518 samples, 13.39%)</title><rect x="18.2566%" y="981" width="13.3903%" height="15" fill="rgb(207,104,49)" fg:x="22521" fg:w="16518"/><text x="18.5066%" y="991.50">CCoinsViewCache::Fet..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1,057 samples, 0.86%)</title><rect x="30.7901%" y="965" width="0.8569%" height="15" fill="rgb(234,99,18)" fg:x="37982" fg:w="1057"/><text x="31.0401%" y="975.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1,056 samples, 0.86%)</title><rect x="30.7909%" y="949" width="0.8560%" height="15" fill="rgb(213,191,49)" fg:x="37983" fg:w="1056"/><text x="31.0409%" y="959.50"></text></g><g><title>CCoinsViewCache::GetCoin (290 samples, 0.24%)</title><rect x="31.6469%" y="981" width="0.2351%" height="15" fill="rgb(210,226,19)" fg:x="39039" fg:w="290"/><text x="31.8969%" y="991.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (287 samples, 0.23%)</title><rect x="31.6493%" y="965" width="0.2327%" height="15" fill="rgb(229,97,18)" fg:x="39042" fg:w="287"/><text x="31.8993%" y="975.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (287 samples, 0.23%)</title><rect x="31.6493%" y="949" width="0.2327%" height="15" fill="rgb(211,167,15)" fg:x="39042" fg:w="287"/><text x="31.8993%" y="959.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (287 samples, 0.23%)</title><rect x="31.6493%" y="933" width="0.2327%" height="15" fill="rgb(210,169,34)" fg:x="39042" fg:w="287"/><text x="31.8993%" y="943.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (287 samples, 0.23%)</title><rect x="31.6493%" y="917" width="0.2327%" height="15" fill="rgb(241,121,31)" fg:x="39042" fg:w="287"/><text x="31.8993%" y="927.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (287 samples, 0.23%)</title><rect x="31.6493%" y="901" width="0.2327%" height="15" fill="rgb(232,40,11)" fg:x="39042" fg:w="287"/><text x="31.8993%" y="911.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (286 samples, 0.23%)</title><rect x="31.6502%" y="885" width="0.2318%" height="15" fill="rgb(205,86,26)" fg:x="39043" fg:w="286"/><text x="31.9002%" y="895.50"></text></g><g><title>Coin::Coin (286 samples, 0.23%)</title><rect x="31.6502%" y="869" width="0.2318%" height="15" fill="rgb(231,126,28)" fg:x="39043" fg:w="286"/><text x="31.9002%" y="879.50"></text></g><g><title>CTxOut::CTxOut (284 samples, 0.23%)</title><rect x="31.6518%" y="853" width="0.2302%" height="15" fill="rgb(219,221,18)" fg:x="39045" fg:w="284"/><text x="31.9018%" y="863.50"></text></g><g><title>CScript::CScript (284 samples, 0.23%)</title><rect x="31.6518%" y="837" width="0.2302%" height="15" fill="rgb(211,40,0)" fg:x="39045" fg:w="284"/><text x="31.9018%" y="847.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (284 samples, 0.23%)</title><rect x="31.6518%" y="821" width="0.2302%" height="15" fill="rgb(239,85,43)" fg:x="39045" fg:w="284"/><text x="31.9018%" y="831.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (271 samples, 0.22%)</title><rect x="31.6623%" y="805" width="0.2197%" height="15" fill="rgb(231,55,21)" fg:x="39058" fg:w="271"/><text x="31.9123%" y="815.50"></text></g><g><title>SipHashUint256Extra (13 samples, 0.01%)</title><rect x="31.8990%" y="981" width="0.0105%" height="15" fill="rgb(225,184,43)" fg:x="39350" fg:w="13"/><text x="32.1490%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.01%)</title><rect x="31.9096%" y="981" width="0.0122%" height="15" fill="rgb(251,158,41)" fg:x="39363" fg:w="15"/><text x="32.1596%" y="991.50"></text></g><g><title>CCoinsViewCache::HaveInputs (16,878 samples, 13.68%)</title><rect x="18.2428%" y="1013" width="13.6821%" height="15" fill="rgb(234,159,37)" fg:x="22504" fg:w="16878"/><text x="18.4928%" y="1023.50">CCoinsViewCache::Have..</text></g><g><title>CCoinsViewCache::HaveCoin (16,872 samples, 13.68%)</title><rect x="18.2477%" y="997" width="13.6773%" height="15" fill="rgb(216,204,22)" fg:x="22510" fg:w="16872"/><text x="18.4977%" y="1007.50">CCoinsViewCache::Have..</text></g><g><title>SipHashUint256Extra (71 samples, 0.06%)</title><rect x="31.9315%" y="1013" width="0.0576%" height="15" fill="rgb(214,17,3)" fg:x="39390" fg:w="71"/><text x="32.1815%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (33 samples, 0.03%)</title><rect x="31.9623%" y="997" width="0.0268%" height="15" fill="rgb(212,111,17)" fg:x="39428" fg:w="33"/><text x="32.2123%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (33 samples, 0.03%)</title><rect x="31.9623%" y="981" width="0.0268%" height="15" fill="rgb(221,157,24)" fg:x="39428" fg:w="33"/><text x="32.2123%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (33 samples, 0.03%)</title><rect x="31.9890%" y="1013" width="0.0268%" height="15" fill="rgb(252,16,13)" fg:x="39461" fg:w="33"/><text x="32.2390%" y="1023.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (15 samples, 0.01%)</title><rect x="32.0036%" y="997" width="0.0122%" height="15" fill="rgb(221,62,2)" fg:x="39479" fg:w="15"/><text x="32.2536%" y="1007.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (15 samples, 0.01%)</title><rect x="32.0036%" y="981" width="0.0122%" height="15" fill="rgb(247,87,22)" fg:x="39479" fg:w="15"/><text x="32.2536%" y="991.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (15 samples, 0.01%)</title><rect x="32.0036%" y="965" width="0.0122%" height="15" fill="rgb(215,73,9)" fg:x="39479" fg:w="15"/><text x="32.2536%" y="975.50"></text></g><g><title>operator== (15 samples, 0.01%)</title><rect x="32.0036%" y="949" width="0.0122%" height="15" fill="rgb(207,175,33)" fg:x="39479" fg:w="15"/><text x="32.2536%" y="959.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (14 samples, 0.01%)</title><rect x="32.0044%" y="933" width="0.0113%" height="15" fill="rgb(243,129,54)" fg:x="39480" fg:w="14"/><text x="32.2544%" y="943.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (14 samples, 0.01%)</title><rect x="32.0044%" y="917" width="0.0113%" height="15" fill="rgb(227,119,45)" fg:x="39480" fg:w="14"/><text x="32.2544%" y="927.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (14 samples, 0.01%)</title><rect x="32.0044%" y="901" width="0.0113%" height="15" fill="rgb(205,109,36)" fg:x="39480" fg:w="14"/><text x="32.2544%" y="911.50"></text></g><g><title>Consensus::CheckTxInputs (17,837 samples, 14.46%)</title><rect x="17.5570%" y="1029" width="14.4595%" height="15" fill="rgb(205,6,39)" fg:x="21658" fg:w="17837"/><text x="17.8070%" y="1039.50">Consensus::CheckTxInpu..</text></g><g><title>CBlockIndex::GetMedianTimePast (25 samples, 0.02%)</title><rect x="32.0247%" y="1013" width="0.0203%" height="15" fill="rgb(221,32,16)" fg:x="39505" fg:w="25"/><text x="32.2747%" y="1023.50"></text></g><g><title>void std::sort&lt;long*&gt; (22 samples, 0.02%)</title><rect x="32.0271%" y="997" width="0.0178%" height="15" fill="rgb(228,144,50)" fg:x="39508" fg:w="22"/><text x="32.2771%" y="1007.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (22 samples, 0.02%)</title><rect x="32.0271%" y="981" width="0.0178%" height="15" fill="rgb(229,201,53)" fg:x="39508" fg:w="22"/><text x="32.2771%" y="991.50"></text></g><g><title>SipHashUint256Extra (20 samples, 0.02%)</title><rect x="32.0287%" y="965" width="0.0162%" height="15" fill="rgb(249,153,27)" fg:x="39510" fg:w="20"/><text x="32.2787%" y="975.50"></text></g><g><title>CCoinsViewCache::FetchCoin (13 samples, 0.01%)</title><rect x="32.0482%" y="1013" width="0.0105%" height="15" fill="rgb(227,106,25)" fg:x="39534" fg:w="13"/><text x="32.2982%" y="1023.50"></text></g><g><title>Chainstate::ConnectBlock (27 samples, 0.02%)</title><rect x="32.0766%" y="1013" width="0.0219%" height="15" fill="rgb(230,65,29)" fg:x="39569" fg:w="27"/><text x="32.3266%" y="1023.50"></text></g><g><title>SipHashUint256Extra (107 samples, 0.09%)</title><rect x="32.1066%" y="1013" width="0.0867%" height="15" fill="rgb(221,57,46)" fg:x="39606" fg:w="107"/><text x="32.3566%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (34 samples, 0.03%)</title><rect x="32.1657%" y="997" width="0.0276%" height="15" fill="rgb(229,161,17)" fg:x="39679" fg:w="34"/><text x="32.4157%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (34 samples, 0.03%)</title><rect x="32.1657%" y="981" width="0.0276%" height="15" fill="rgb(222,213,11)" fg:x="39679" fg:w="34"/><text x="32.4157%" y="991.50"></text></g><g><title>EvaluateSequenceLocks (216 samples, 0.18%)</title><rect x="32.0247%" y="1029" width="0.1751%" height="15" fill="rgb(235,35,13)" fg:x="39505" fg:w="216"/><text x="32.2747%" y="1039.50"></text></g><g><title>GetP2SHSigOpCount (44 samples, 0.04%)</title><rect x="32.2225%" y="933" width="0.0357%" height="15" fill="rgb(233,158,34)" fg:x="39749" fg:w="44"/><text x="32.4725%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (62 samples, 0.05%)</title><rect x="32.2200%" y="949" width="0.0503%" height="15" fill="rgb(215,151,48)" fg:x="39746" fg:w="62"/><text x="32.4700%" y="959.50"></text></g><g><title>CCoinsViewCache::FetchCoin (114 samples, 0.09%)</title><rect x="32.2184%" y="997" width="0.0924%" height="15" fill="rgb(229,84,14)" fg:x="39744" fg:w="114"/><text x="32.4684%" y="1007.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (113 samples, 0.09%)</title><rect x="32.2192%" y="981" width="0.0916%" height="15" fill="rgb(229,68,14)" fg:x="39745" fg:w="113"/><text x="32.4692%" y="991.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (113 samples, 0.09%)</title><rect x="32.2192%" y="965" width="0.0916%" height="15" fill="rgb(243,106,26)" fg:x="39745" fg:w="113"/><text x="32.4692%" y="975.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (50 samples, 0.04%)</title><rect x="32.2703%" y="949" width="0.0405%" height="15" fill="rgb(206,45,38)" fg:x="39808" fg:w="50"/><text x="32.5203%" y="959.50"></text></g><g><title>SaltedOutpointHasher::operator (50 samples, 0.04%)</title><rect x="32.2703%" y="933" width="0.0405%" height="15" fill="rgb(226,6,15)" fg:x="39808" fg:w="50"/><text x="32.5203%" y="943.50"></text></g><g><title>GetP2SHSigOpCount (37 samples, 0.03%)</title><rect x="32.3198%" y="997" width="0.0300%" height="15" fill="rgb(232,22,54)" fg:x="39869" fg:w="37"/><text x="32.5698%" y="1007.50"></text></g><g><title>CCoinsViewCache::AccessCoin (180 samples, 0.15%)</title><rect x="32.2160%" y="1013" width="0.1459%" height="15" fill="rgb(229,222,32)" fg:x="39741" fg:w="180"/><text x="32.4660%" y="1023.50"></text></g><g><title>CScript::GetSigOpCount (13 samples, 0.01%)</title><rect x="32.3716%" y="1013" width="0.0105%" height="15" fill="rgb(228,62,29)" fg:x="39933" fg:w="13"/><text x="32.6216%" y="1023.50"></text></g><g><title>CScript::IsWitnessProgram (46 samples, 0.04%)</title><rect x="32.3830%" y="1013" width="0.0373%" height="15" fill="rgb(251,103,34)" fg:x="39947" fg:w="46"/><text x="32.6330%" y="1023.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (40 samples, 0.03%)</title><rect x="32.3878%" y="997" width="0.0324%" height="15" fill="rgb(233,12,30)" fg:x="39953" fg:w="40"/><text x="32.6378%" y="1007.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (39 samples, 0.03%)</title><rect x="32.3887%" y="981" width="0.0316%" height="15" fill="rgb(238,52,0)" fg:x="39954" fg:w="39"/><text x="32.6387%" y="991.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (33 samples, 0.03%)</title><rect x="32.3935%" y="965" width="0.0268%" height="15" fill="rgb(223,98,5)" fg:x="39960" fg:w="33"/><text x="32.6435%" y="975.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (33 samples, 0.03%)</title><rect x="32.3935%" y="949" width="0.0268%" height="15" fill="rgb(228,75,37)" fg:x="39960" fg:w="33"/><text x="32.6435%" y="959.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (33 samples, 0.03%)</title><rect x="32.3935%" y="933" width="0.0268%" height="15" fill="rgb(205,115,49)" fg:x="39960" fg:w="33"/><text x="32.6435%" y="943.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (33 samples, 0.03%)</title><rect x="32.3935%" y="917" width="0.0268%" height="15" fill="rgb(250,154,43)" fg:x="39960" fg:w="33"/><text x="32.6435%" y="927.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (33 samples, 0.03%)</title><rect x="32.3935%" y="901" width="0.0268%" height="15" fill="rgb(226,43,29)" fg:x="39960" fg:w="33"/><text x="32.6435%" y="911.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (33 samples, 0.03%)</title><rect x="32.3935%" y="885" width="0.0268%" height="15" fill="rgb(249,228,39)" fg:x="39960" fg:w="33"/><text x="32.6435%" y="895.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (33 samples, 0.03%)</title><rect x="32.3935%" y="869" width="0.0268%" height="15" fill="rgb(216,79,43)" fg:x="39960" fg:w="33"/><text x="32.6435%" y="879.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (33 samples, 0.03%)</title><rect x="32.3935%" y="853" width="0.0268%" height="15" fill="rgb(228,95,12)" fg:x="39960" fg:w="33"/><text x="32.6435%" y="863.50"></text></g><g><title>CalculateSequenceLocks (16 samples, 0.01%)</title><rect x="32.4203%" y="1013" width="0.0130%" height="15" fill="rgb(249,221,15)" fg:x="39993" fg:w="16"/><text x="32.6703%" y="1023.50"></text></g><g><title>CCoinsViewCache::FetchCoin (25 samples, 0.02%)</title><rect x="32.4381%" y="997" width="0.0203%" height="15" fill="rgb(233,34,13)" fg:x="40015" fg:w="25"/><text x="32.6881%" y="1007.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (13 samples, 0.01%)</title><rect x="32.4478%" y="981" width="0.0105%" height="15" fill="rgb(214,103,39)" fg:x="40027" fg:w="13"/><text x="32.6978%" y="991.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (13 samples, 0.01%)</title><rect x="32.4478%" y="965" width="0.0105%" height="15" fill="rgb(251,126,39)" fg:x="40027" fg:w="13"/><text x="32.6978%" y="975.50"></text></g><g><title>CScript::GetOp (39 samples, 0.03%)</title><rect x="32.4616%" y="997" width="0.0316%" height="15" fill="rgb(214,216,36)" fg:x="40044" fg:w="39"/><text x="32.7116%" y="1007.50"></text></g><g><title>GetScriptOp (15 samples, 0.01%)</title><rect x="32.5184%" y="997" width="0.0122%" height="15" fill="rgb(220,221,8)" fg:x="40114" fg:w="15"/><text x="32.7684%" y="1007.50"></text></g><g><title>SipHashUint256Extra (151 samples, 0.12%)</title><rect x="32.5354%" y="997" width="0.1224%" height="15" fill="rgb(240,216,3)" fg:x="40135" fg:w="151"/><text x="32.7854%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (56 samples, 0.05%)</title><rect x="32.6124%" y="981" width="0.0454%" height="15" fill="rgb(232,218,17)" fg:x="40230" fg:w="56"/><text x="32.8624%" y="991.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (56 samples, 0.05%)</title><rect x="32.6124%" y="965" width="0.0454%" height="15" fill="rgb(229,163,45)" fg:x="40230" fg:w="56"/><text x="32.8624%" y="975.50"></text></g><g><title>WitnessSigOps (37 samples, 0.03%)</title><rect x="32.6578%" y="997" width="0.0300%" height="15" fill="rgb(231,110,42)" fg:x="40286" fg:w="37"/><text x="32.9078%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (16 samples, 0.01%)</title><rect x="32.6894%" y="997" width="0.0130%" height="15" fill="rgb(208,170,48)" fg:x="40325" fg:w="16"/><text x="32.9394%" y="1007.50"></text></g><g><title>CountWitnessSigOps (335 samples, 0.27%)</title><rect x="32.4332%" y="1013" width="0.2716%" height="15" fill="rgb(239,116,25)" fg:x="40009" fg:w="335"/><text x="32.6832%" y="1023.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (57 samples, 0.05%)</title><rect x="32.7105%" y="997" width="0.0462%" height="15" fill="rgb(219,200,50)" fg:x="40351" fg:w="57"/><text x="32.9605%" y="1007.50"></text></g><g><title>void std::sort&lt;long*&gt; (31 samples, 0.03%)</title><rect x="32.7316%" y="981" width="0.0251%" height="15" fill="rgb(245,200,0)" fg:x="40377" fg:w="31"/><text x="32.9816%" y="991.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (31 samples, 0.03%)</title><rect x="32.7316%" y="965" width="0.0251%" height="15" fill="rgb(245,119,33)" fg:x="40377" fg:w="31"/><text x="32.9816%" y="975.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (25 samples, 0.02%)</title><rect x="32.7364%" y="949" width="0.0203%" height="15" fill="rgb(231,125,12)" fg:x="40383" fg:w="25"/><text x="32.9864%" y="959.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (24 samples, 0.02%)</title><rect x="32.7372%" y="933" width="0.0195%" height="15" fill="rgb(216,96,41)" fg:x="40384" fg:w="24"/><text x="32.9872%" y="943.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (37 samples, 0.03%)</title><rect x="32.7770%" y="965" width="0.0300%" height="15" fill="rgb(248,43,45)" fg:x="40433" fg:w="37"/><text x="33.0270%" y="975.50"></text></g><g><title>void std::sort&lt;long*&gt; (29 samples, 0.02%)</title><rect x="32.7834%" y="949" width="0.0235%" height="15" fill="rgb(217,222,7)" fg:x="40441" fg:w="29"/><text x="33.0334%" y="959.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (29 samples, 0.02%)</title><rect x="32.7834%" y="933" width="0.0235%" height="15" fill="rgb(233,28,6)" fg:x="40441" fg:w="29"/><text x="33.0334%" y="943.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (28 samples, 0.02%)</title><rect x="32.7843%" y="917" width="0.0227%" height="15" fill="rgb(231,218,15)" fg:x="40442" fg:w="28"/><text x="33.0343%" y="927.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (28 samples, 0.02%)</title><rect x="32.7843%" y="901" width="0.0227%" height="15" fill="rgb(226,171,48)" fg:x="40442" fg:w="28"/><text x="33.0343%" y="911.50"></text></g><g><title>CScript::GetOp (34 samples, 0.03%)</title><rect x="32.8329%" y="949" width="0.0276%" height="15" fill="rgb(235,201,9)" fg:x="40502" fg:w="34"/><text x="33.0829%" y="959.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (18 samples, 0.01%)</title><rect x="32.8645%" y="933" width="0.0146%" height="15" fill="rgb(217,80,15)" fg:x="40541" fg:w="18"/><text x="33.1145%" y="943.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::indirect_ptr (16 samples, 0.01%)</title><rect x="32.8661%" y="917" width="0.0130%" height="15" fill="rgb(219,152,8)" fg:x="40543" fg:w="16"/><text x="33.1161%" y="927.50"></text></g><g><title>CScript::GetSigOpCount (93 samples, 0.08%)</title><rect x="32.8070%" y="965" width="0.0754%" height="15" fill="rgb(243,107,38)" fg:x="40470" fg:w="93"/><text x="33.0570%" y="975.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (22 samples, 0.02%)</title><rect x="32.8645%" y="949" width="0.0178%" height="15" fill="rgb(231,17,5)" fg:x="40541" fg:w="22"/><text x="33.1145%" y="959.50"></text></g><g><title>GetLegacySigOpCount (30 samples, 0.02%)</title><rect x="32.8913%" y="965" width="0.0243%" height="15" fill="rgb(209,25,54)" fg:x="40574" fg:w="30"/><text x="33.1413%" y="975.50"></text></g><g><title>GetScriptOp (71 samples, 0.06%)</title><rect x="32.9156%" y="965" width="0.0576%" height="15" fill="rgb(219,0,2)" fg:x="40604" fg:w="71"/><text x="33.1656%" y="975.50"></text></g><g><title>CScript::GetOp (265 samples, 0.21%)</title><rect x="32.7672%" y="981" width="0.2148%" height="15" fill="rgb(246,9,5)" fg:x="40421" fg:w="265"/><text x="33.0172%" y="991.50"></text></g><g><title>CScript::GetSigOpCount (289 samples, 0.23%)</title><rect x="32.7567%" y="997" width="0.2343%" height="15" fill="rgb(226,159,4)" fg:x="40408" fg:w="289"/><text x="33.0067%" y="1007.50"></text></g><g><title>GetLegacySigOpCount (14 samples, 0.01%)</title><rect x="32.9942%" y="997" width="0.0113%" height="15" fill="rgb(219,175,34)" fg:x="40701" fg:w="14"/><text x="33.2442%" y="1007.50"></text></g><g><title>GetScriptOp (73 samples, 0.06%)</title><rect x="33.0056%" y="997" width="0.0592%" height="15" fill="rgb(236,10,46)" fg:x="40715" fg:w="73"/><text x="33.2556%" y="1007.50"></text></g><g><title>GetLegacySigOpCount (474 samples, 0.38%)</title><rect x="32.7048%" y="1013" width="0.3842%" height="15" fill="rgb(240,211,16)" fg:x="40344" fg:w="474"/><text x="32.9548%" y="1023.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (15 samples, 0.01%)</title><rect x="33.0769%" y="997" width="0.0122%" height="15" fill="rgb(205,3,43)" fg:x="40803" fg:w="15"/><text x="33.3269%" y="1007.50"></text></g><g><title>SipHashUint256Extra (25 samples, 0.02%)</title><rect x="33.1158%" y="901" width="0.0203%" height="15" fill="rgb(245,7,22)" fg:x="40851" fg:w="25"/><text x="33.3658%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (57 samples, 0.05%)</title><rect x="33.0915%" y="917" width="0.0462%" height="15" fill="rgb(239,132,32)" fg:x="40821" fg:w="57"/><text x="33.3415%" y="927.50"></text></g><g><title>GetScriptOp (14 samples, 0.01%)</title><rect x="33.1507%" y="885" width="0.0113%" height="15" fill="rgb(228,202,34)" fg:x="40894" fg:w="14"/><text x="33.4007%" y="895.50"></text></g><g><title>CCoinsViewCache::FetchCoin (93 samples, 0.08%)</title><rect x="33.0907%" y="965" width="0.0754%" height="15" fill="rgb(254,200,22)" fg:x="40820" fg:w="93"/><text x="33.3407%" y="975.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (93 samples, 0.08%)</title><rect x="33.0907%" y="949" width="0.0754%" height="15" fill="rgb(219,10,39)" fg:x="40820" fg:w="93"/><text x="33.3407%" y="959.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (93 samples, 0.08%)</title><rect x="33.0907%" y="933" width="0.0754%" height="15" fill="rgb(226,210,39)" fg:x="40820" fg:w="93"/><text x="33.3407%" y="943.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (35 samples, 0.03%)</title><rect x="33.1377%" y="917" width="0.0284%" height="15" fill="rgb(208,219,16)" fg:x="40878" fg:w="35"/><text x="33.3877%" y="927.50"></text></g><g><title>SaltedOutpointHasher::operator (35 samples, 0.03%)</title><rect x="33.1377%" y="901" width="0.0284%" height="15" fill="rgb(216,158,51)" fg:x="40878" fg:w="35"/><text x="33.3877%" y="911.50"></text></g><g><title>GetScriptOp (20 samples, 0.02%)</title><rect x="33.1799%" y="965" width="0.0162%" height="15" fill="rgb(233,14,44)" fg:x="40930" fg:w="20"/><text x="33.4299%" y="975.50"></text></g><g><title>CCoinsViewCache::AccessCoin (141 samples, 0.11%)</title><rect x="33.0899%" y="981" width="0.1143%" height="15" fill="rgb(237,97,39)" fg:x="40819" fg:w="141"/><text x="33.3399%" y="991.50"></text></g><g><title>SipHashUint256Extra (32 samples, 0.03%)</title><rect x="33.2261%" y="949" width="0.0259%" height="15" fill="rgb(218,198,43)" fg:x="40987" fg:w="32"/><text x="33.4761%" y="959.50"></text></g><g><title>CScript::GetOp (60 samples, 0.05%)</title><rect x="33.2066%" y="965" width="0.0486%" height="15" fill="rgb(231,104,20)" fg:x="40963" fg:w="60"/><text x="33.4566%" y="975.50"></text></g><g><title>CScript::GetSigOpCount (14 samples, 0.01%)</title><rect x="33.2552%" y="965" width="0.0113%" height="15" fill="rgb(254,36,13)" fg:x="41023" fg:w="14"/><text x="33.5052%" y="975.50"></text></g><g><title>CScript::GetSigOpCount (91 samples, 0.07%)</title><rect x="33.2042%" y="981" width="0.0738%" height="15" fill="rgb(248,14,50)" fg:x="40960" fg:w="91"/><text x="33.4542%" y="991.50"></text></g><g><title>SipHashUint256Extra (13 samples, 0.01%)</title><rect x="33.2877%" y="981" width="0.0105%" height="15" fill="rgb(217,107,29)" fg:x="41063" fg:w="13"/><text x="33.5377%" y="991.50"></text></g><g><title>GetP2SHSigOpCount (260 samples, 0.21%)</title><rect x="33.0891%" y="1013" width="0.2108%" height="15" fill="rgb(251,169,33)" fg:x="40818" fg:w="260"/><text x="33.3391%" y="1023.50"></text></g><g><title>GetP2SHSigOpCount (259 samples, 0.21%)</title><rect x="33.0899%" y="997" width="0.2100%" height="15" fill="rgb(217,108,32)" fg:x="40819" fg:w="259"/><text x="33.3399%" y="1007.50"></text></g><g><title>GetScriptOp (24 samples, 0.02%)</title><rect x="33.2998%" y="1013" width="0.0195%" height="15" fill="rgb(219,66,42)" fg:x="41078" fg:w="24"/><text x="33.5498%" y="1023.50"></text></g><g><title>SipHashUint256Extra (27 samples, 0.02%)</title><rect x="33.3225%" y="1013" width="0.0219%" height="15" fill="rgb(206,180,7)" fg:x="41106" fg:w="27"/><text x="33.5725%" y="1023.50"></text></g><g><title>GetTransactionSigOpCost (1,411 samples, 1.14%)</title><rect x="32.2103%" y="1029" width="1.1438%" height="15" fill="rgb(208,226,31)" fg:x="39734" fg:w="1411"/><text x="32.4603%" y="1039.50"></text></g><g><title>SequenceLocks (27 samples, 0.02%)</title><rect x="33.3541%" y="1029" width="0.0219%" height="15" fill="rgb(218,26,49)" fg:x="41145" fg:w="27"/><text x="33.6041%" y="1039.50"></text></g><g><title>SipHashUint256Extra (206 samples, 0.17%)</title><rect x="33.3760%" y="1029" width="0.1670%" height="15" fill="rgb(233,197,48)" fg:x="41172" fg:w="206"/><text x="33.6260%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (81 samples, 0.07%)</title><rect x="33.4774%" y="1013" width="0.0657%" height="15" fill="rgb(252,181,51)" fg:x="41297" fg:w="81"/><text x="33.7274%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (81 samples, 0.07%)</title><rect x="33.4774%" y="997" width="0.0657%" height="15" fill="rgb(253,90,19)" fg:x="41297" fg:w="81"/><text x="33.7274%" y="1007.50"></text></g><g><title>CCoinsViewCache::FetchCoin (43 samples, 0.03%)</title><rect x="33.5560%" y="1013" width="0.0349%" height="15" fill="rgb(215,171,30)" fg:x="41394" fg:w="43"/><text x="33.8060%" y="1023.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (21 samples, 0.02%)</title><rect x="33.5738%" y="997" width="0.0170%" height="15" fill="rgb(214,222,9)" fg:x="41416" fg:w="21"/><text x="33.8238%" y="1007.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (20 samples, 0.02%)</title><rect x="33.5746%" y="981" width="0.0162%" height="15" fill="rgb(223,3,22)" fg:x="41417" fg:w="20"/><text x="33.8246%" y="991.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (19 samples, 0.02%)</title><rect x="33.5754%" y="965" width="0.0154%" height="15" fill="rgb(225,196,46)" fg:x="41418" fg:w="19"/><text x="33.8254%" y="975.50"></text></g><g><title>SaltedOutpointHasher::operator (19 samples, 0.02%)</title><rect x="33.5754%" y="949" width="0.0154%" height="15" fill="rgb(209,110,37)" fg:x="41418" fg:w="19"/><text x="33.8254%" y="959.50"></text></g><g><title>CCoinsViewCache::FetchCoin (20 samples, 0.02%)</title><rect x="33.6054%" y="997" width="0.0162%" height="15" fill="rgb(249,89,12)" fg:x="41455" fg:w="20"/><text x="33.8554%" y="1007.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (18 samples, 0.01%)</title><rect x="33.6071%" y="981" width="0.0146%" height="15" fill="rgb(226,27,33)" fg:x="41457" fg:w="18"/><text x="33.8571%" y="991.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (18 samples, 0.01%)</title><rect x="33.6071%" y="965" width="0.0146%" height="15" fill="rgb(213,82,22)" fg:x="41457" fg:w="18"/><text x="33.8571%" y="975.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (15 samples, 0.01%)</title><rect x="33.6095%" y="949" width="0.0122%" height="15" fill="rgb(248,140,0)" fg:x="41460" fg:w="15"/><text x="33.8595%" y="959.50"></text></g><g><title>SaltedOutpointHasher::operator (15 samples, 0.01%)</title><rect x="33.6095%" y="933" width="0.0122%" height="15" fill="rgb(228,106,3)" fg:x="41460" fg:w="15"/><text x="33.8595%" y="943.50"></text></g><g><title>SipHashUint256Extra (22 samples, 0.02%)</title><rect x="33.6606%" y="965" width="0.0178%" height="15" fill="rgb(209,23,37)" fg:x="41523" fg:w="22"/><text x="33.9106%" y="975.50"></text></g><g><title>CCoinsViewCache::SpendCoin (133 samples, 0.11%)</title><rect x="33.5908%" y="1013" width="0.1078%" height="15" fill="rgb(241,93,50)" fg:x="41437" fg:w="133"/><text x="33.8408%" y="1023.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (62 samples, 0.05%)</title><rect x="33.6484%" y="997" width="0.0503%" height="15" fill="rgb(253,46,43)" fg:x="41508" fg:w="62"/><text x="33.8984%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (62 samples, 0.05%)</title><rect x="33.6484%" y="981" width="0.0503%" height="15" fill="rgb(226,206,43)" fg:x="41508" fg:w="62"/><text x="33.8984%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (16 samples, 0.01%)</title><rect x="33.6857%" y="965" width="0.0130%" height="15" fill="rgb(217,54,7)" fg:x="41554" fg:w="16"/><text x="33.9357%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (16 samples, 0.01%)</title><rect x="33.6857%" y="949" width="0.0130%" height="15" fill="rgb(223,5,52)" fg:x="41554" fg:w="16"/><text x="33.9357%" y="959.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (16 samples, 0.01%)</title><rect x="33.6857%" y="933" width="0.0130%" height="15" fill="rgb(206,52,46)" fg:x="41554" fg:w="16"/><text x="33.9357%" y="943.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (16 samples, 0.01%)</title><rect x="33.6857%" y="917" width="0.0130%" height="15" fill="rgb(253,136,11)" fg:x="41554" fg:w="16"/><text x="33.9357%" y="927.50"></text></g><g><title>SaltedOutpointHasher::operator (16 samples, 0.01%)</title><rect x="33.6857%" y="901" width="0.0130%" height="15" fill="rgb(208,106,33)" fg:x="41554" fg:w="16"/><text x="33.9357%" y="911.50"></text></g><g><title>SipHashUint256Extra (149 samples, 0.12%)</title><rect x="33.7019%" y="1013" width="0.1208%" height="15" fill="rgb(206,54,4)" fg:x="41574" fg:w="149"/><text x="33.9519%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (65 samples, 0.05%)</title><rect x="33.7700%" y="997" width="0.0527%" height="15" fill="rgb(213,3,15)" fg:x="41658" fg:w="65"/><text x="34.0200%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (65 samples, 0.05%)</title><rect x="33.7700%" y="981" width="0.0527%" height="15" fill="rgb(252,211,39)" fg:x="41658" fg:w="65"/><text x="34.0200%" y="991.50"></text></g><g><title>Coin&amp; std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::emplace_back&lt;&gt; (14 samples, 0.01%)</title><rect x="33.8259%" y="997" width="0.0113%" height="15" fill="rgb(223,6,36)" fg:x="41727" fg:w="14"/><text x="34.0759%" y="1007.50"></text></g><g><title>UpdateCoins (29 samples, 0.02%)</title><rect x="33.8227%" y="1013" width="0.0235%" height="15" fill="rgb(252,169,45)" fg:x="41723" fg:w="29"/><text x="34.0727%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (16 samples, 0.01%)</title><rect x="33.8478%" y="1013" width="0.0130%" height="15" fill="rgb(212,48,26)" fg:x="41754" fg:w="16"/><text x="34.0978%" y="1023.50"></text></g><g><title>malloc (20 samples, 0.02%)</title><rect x="33.8640%" y="901" width="0.0162%" height="15" fill="rgb(251,102,48)" fg:x="41774" fg:w="20"/><text x="34.1140%" y="911.50"></text></g><g><title>_int_malloc (15 samples, 0.01%)</title><rect x="33.8681%" y="885" width="0.0122%" height="15" fill="rgb(243,208,16)" fg:x="41779" fg:w="15"/><text x="34.1181%" y="895.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (27 samples, 0.02%)</title><rect x="33.8608%" y="997" width="0.0219%" height="15" fill="rgb(219,96,24)" fg:x="41770" fg:w="27"/><text x="34.1108%" y="1007.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (27 samples, 0.02%)</title><rect x="33.8608%" y="981" width="0.0219%" height="15" fill="rgb(219,33,29)" fg:x="41770" fg:w="27"/><text x="34.1108%" y="991.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (27 samples, 0.02%)</title><rect x="33.8608%" y="965" width="0.0219%" height="15" fill="rgb(223,176,5)" fg:x="41770" fg:w="27"/><text x="34.1108%" y="975.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (27 samples, 0.02%)</title><rect x="33.8608%" y="949" width="0.0219%" height="15" fill="rgb(228,140,14)" fg:x="41770" fg:w="27"/><text x="34.1108%" y="959.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (27 samples, 0.02%)</title><rect x="33.8608%" y="933" width="0.0219%" height="15" fill="rgb(217,179,31)" fg:x="41770" fg:w="27"/><text x="34.1108%" y="943.50"></text></g><g><title>operator new (25 samples, 0.02%)</title><rect x="33.8624%" y="917" width="0.0203%" height="15" fill="rgb(230,9,30)" fg:x="41772" fg:w="25"/><text x="34.1124%" y="927.50"></text></g><g><title>UpdateCoins (412 samples, 0.33%)</title><rect x="33.5495%" y="1029" width="0.3340%" height="15" fill="rgb(230,136,20)" fg:x="41386" fg:w="412"/><text x="33.7995%" y="1039.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (28 samples, 0.02%)</title><rect x="33.8608%" y="1013" width="0.0227%" height="15" fill="rgb(215,210,22)" fg:x="41770" fg:w="28"/><text x="34.1108%" y="1023.50"></text></g><g><title>AutoFile::write (36 samples, 0.03%)</title><rect x="33.8900%" y="1013" width="0.0292%" height="15" fill="rgb(218,43,5)" fg:x="41806" fg:w="36"/><text x="34.1400%" y="1023.50"></text></g><g><title>util::Xor (21 samples, 0.02%)</title><rect x="33.9021%" y="997" width="0.0170%" height="15" fill="rgb(216,11,5)" fg:x="41821" fg:w="21"/><text x="34.1521%" y="1007.50"></text></g><g><title>CSHA256::Write (49 samples, 0.04%)</title><rect x="33.9192%" y="1013" width="0.0397%" height="15" fill="rgb(209,82,29)" fg:x="41842" fg:w="49"/><text x="34.1692%" y="1023.50"></text></g><g><title>node::BlockManager::FindUndoPos (25 samples, 0.02%)</title><rect x="33.9621%" y="1013" width="0.0203%" height="15" fill="rgb(244,115,12)" fg:x="41895" fg:w="25"/><text x="34.2121%" y="1023.50"></text></g><g><title>FlatFileSeq::Allocate (25 samples, 0.02%)</title><rect x="33.9621%" y="997" width="0.0203%" height="15" fill="rgb(222,82,18)" fg:x="41895" fg:w="25"/><text x="34.2121%" y="1007.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (19 samples, 0.02%)</title><rect x="33.9946%" y="501" width="0.0154%" height="15" fill="rgb(249,227,8)" fg:x="41935" fg:w="19"/><text x="34.2446%" y="511.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (19 samples, 0.02%)</title><rect x="33.9946%" y="485" width="0.0154%" height="15" fill="rgb(253,141,45)" fg:x="41935" fg:w="19"/><text x="34.2446%" y="495.50"></text></g><g><title>AutoFile::write (19 samples, 0.02%)</title><rect x="33.9946%" y="469" width="0.0154%" height="15" fill="rgb(234,184,4)" fg:x="41935" fg:w="19"/><text x="34.2446%" y="479.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (42 samples, 0.03%)</title><rect x="33.9881%" y="645" width="0.0340%" height="15" fill="rgb(218,194,23)" fg:x="41927" fg:w="42"/><text x="34.2381%" y="655.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (42 samples, 0.03%)</title><rect x="33.9881%" y="629" width="0.0340%" height="15" fill="rgb(235,66,41)" fg:x="41927" fg:w="42"/><text x="34.2381%" y="639.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (42 samples, 0.03%)</title><rect x="33.9881%" y="613" width="0.0340%" height="15" fill="rgb(245,217,1)" fg:x="41927" fg:w="42"/><text x="34.2381%" y="623.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (42 samples, 0.03%)</title><rect x="33.9881%" y="597" width="0.0340%" height="15" fill="rgb(229,91,1)" fg:x="41927" fg:w="42"/><text x="34.2381%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (42 samples, 0.03%)</title><rect x="33.9881%" y="581" width="0.0340%" height="15" fill="rgb(207,101,30)" fg:x="41927" fg:w="42"/><text x="34.2381%" y="591.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (42 samples, 0.03%)</title><rect x="33.9881%" y="565" width="0.0340%" height="15" fill="rgb(223,82,49)" fg:x="41927" fg:w="42"/><text x="34.2381%" y="575.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (34 samples, 0.03%)</title><rect x="33.9946%" y="549" width="0.0276%" height="15" fill="rgb(218,167,17)" fg:x="41935" fg:w="34"/><text x="34.2446%" y="559.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (34 samples, 0.03%)</title><rect x="33.9946%" y="533" width="0.0276%" height="15" fill="rgb(208,103,14)" fg:x="41935" fg:w="34"/><text x="34.2446%" y="543.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (34 samples, 0.03%)</title><rect x="33.9946%" y="517" width="0.0276%" height="15" fill="rgb(238,20,8)" fg:x="41935" fg:w="34"/><text x="34.2446%" y="527.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (53 samples, 0.04%)</title><rect x="33.9824%" y="997" width="0.0430%" height="15" fill="rgb(218,80,54)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="981" width="0.0430%" height="15" fill="rgb(240,144,17)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="991.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="965" width="0.0430%" height="15" fill="rgb(245,27,50)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="975.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="949" width="0.0430%" height="15" fill="rgb(251,51,7)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="959.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="933" width="0.0430%" height="15" fill="rgb(245,217,29)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="943.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="917" width="0.0430%" height="15" fill="rgb(221,176,29)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="927.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="901" width="0.0430%" height="15" fill="rgb(212,180,24)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="885" width="0.0430%" height="15" fill="rgb(254,24,2)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="895.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="869" width="0.0430%" height="15" fill="rgb(230,100,2)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="853" width="0.0430%" height="15" fill="rgb(219,142,25)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="837" width="0.0430%" height="15" fill="rgb(240,73,43)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="821" width="0.0430%" height="15" fill="rgb(214,114,15)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="831.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="805" width="0.0430%" height="15" fill="rgb(207,130,4)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="815.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="789" width="0.0430%" height="15" fill="rgb(221,25,40)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="799.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="773" width="0.0430%" height="15" fill="rgb(241,184,7)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="783.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="757" width="0.0430%" height="15" fill="rgb(235,159,4)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="741" width="0.0430%" height="15" fill="rgb(214,87,48)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="751.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="725" width="0.0430%" height="15" fill="rgb(246,198,24)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="709" width="0.0430%" height="15" fill="rgb(209,66,40)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="693" width="0.0430%" height="15" fill="rgb(233,147,39)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="703.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (53 samples, 0.04%)</title><rect x="33.9824%" y="677" width="0.0430%" height="15" fill="rgb(231,145,52)" fg:x="41920" fg:w="53"/><text x="34.2324%" y="687.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (49 samples, 0.04%)</title><rect x="33.9856%" y="661" width="0.0397%" height="15" fill="rgb(206,20,26)" fg:x="41924" fg:w="49"/><text x="34.2356%" y="671.50"></text></g><g><title>CSHA256::Write (14 samples, 0.01%)</title><rect x="34.0335%" y="501" width="0.0113%" height="15" fill="rgb(238,220,4)" fg:x="41983" fg:w="14"/><text x="34.2835%" y="511.50"></text></g><g><title>CSHA256::Write (19 samples, 0.02%)</title><rect x="34.1170%" y="373" width="0.0154%" height="15" fill="rgb(252,195,42)" fg:x="42086" fg:w="19"/><text x="34.3670%" y="383.50"></text></g><g><title>CSHA256::Write (103 samples, 0.08%)</title><rect x="34.0537%" y="389" width="0.0835%" height="15" fill="rgb(209,10,6)" fg:x="42008" fg:w="103"/><text x="34.3037%" y="399.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (19 samples, 0.02%)</title><rect x="34.1461%" y="389" width="0.0154%" height="15" fill="rgb(229,3,52)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="399.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (19 samples, 0.02%)</title><rect x="34.1461%" y="373" width="0.0154%" height="15" fill="rgb(253,49,37)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="383.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="357" width="0.0154%" height="15" fill="rgb(240,103,49)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="367.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="341" width="0.0154%" height="15" fill="rgb(250,182,30)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="351.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="325" width="0.0154%" height="15" fill="rgb(248,8,30)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="335.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="309" width="0.0154%" height="15" fill="rgb(237,120,30)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="293" width="0.0154%" height="15" fill="rgb(221,146,34)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="303.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="277" width="0.0154%" height="15" fill="rgb(242,55,13)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="287.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="261" width="0.0154%" height="15" fill="rgb(242,112,31)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="271.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="245" width="0.0154%" height="15" fill="rgb(249,192,27)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="255.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="229" width="0.0154%" height="15" fill="rgb(208,204,44)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="239.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="213" width="0.0154%" height="15" fill="rgb(208,93,54)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="223.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="197" width="0.0154%" height="15" fill="rgb(242,1,31)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="207.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="181" width="0.0154%" height="15" fill="rgb(241,83,25)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="191.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="165" width="0.0154%" height="15" fill="rgb(205,169,50)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="175.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="149" width="0.0154%" height="15" fill="rgb(239,186,37)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="159.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="133" width="0.0154%" height="15" fill="rgb(205,221,10)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="143.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="117" width="0.0154%" height="15" fill="rgb(218,196,15)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="127.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="101" width="0.0154%" height="15" fill="rgb(218,196,35)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="111.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="85" width="0.0154%" height="15" fill="rgb(233,63,24)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="95.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="69" width="0.0154%" height="15" fill="rgb(225,8,4)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="79.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="53" width="0.0154%" height="15" fill="rgb(234,105,35)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="63.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (19 samples, 0.02%)</title><rect x="34.1461%" y="37" width="0.0154%" height="15" fill="rgb(236,21,32)" fg:x="42122" fg:w="19"/><text x="34.3961%" y="47.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (155 samples, 0.13%)</title><rect x="34.0448%" y="501" width="0.1257%" height="15" fill="rgb(228,109,6)" fg:x="41997" fg:w="155"/><text x="34.2948%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (155 samples, 0.13%)</title><rect x="34.0448%" y="485" width="0.1257%" height="15" fill="rgb(229,215,31)" fg:x="41997" fg:w="155"/><text x="34.2948%" y="495.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (155 samples, 0.13%)</title><rect x="34.0448%" y="469" width="0.1257%" height="15" fill="rgb(221,52,54)" fg:x="41997" fg:w="155"/><text x="34.2948%" y="479.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (155 samples, 0.13%)</title><rect x="34.0448%" y="453" width="0.1257%" height="15" fill="rgb(252,129,43)" fg:x="41997" fg:w="155"/><text x="34.2948%" y="463.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (155 samples, 0.13%)</title><rect x="34.0448%" y="437" width="0.1257%" height="15" fill="rgb(248,183,27)" fg:x="41997" fg:w="155"/><text x="34.2948%" y="447.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (148 samples, 0.12%)</title><rect x="34.0505%" y="421" width="0.1200%" height="15" fill="rgb(250,0,22)" fg:x="42004" fg:w="148"/><text x="34.3005%" y="431.50"></text></g><g><title>HashWriter::write (148 samples, 0.12%)</title><rect x="34.0505%" y="405" width="0.1200%" height="15" fill="rgb(213,166,10)" fg:x="42004" fg:w="148"/><text x="34.3005%" y="415.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (182 samples, 0.15%)</title><rect x="34.0335%" y="549" width="0.1475%" height="15" fill="rgb(207,163,36)" fg:x="41983" fg:w="182"/><text x="34.2835%" y="559.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (182 samples, 0.15%)</title><rect x="34.0335%" y="533" width="0.1475%" height="15" fill="rgb(208,122,22)" fg:x="41983" fg:w="182"/><text x="34.2835%" y="543.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (182 samples, 0.15%)</title><rect x="34.0335%" y="517" width="0.1475%" height="15" fill="rgb(207,104,49)" fg:x="41983" fg:w="182"/><text x="34.2835%" y="527.50"></text></g><g><title>CSHA256::Write (20 samples, 0.02%)</title><rect x="34.1883%" y="485" width="0.0162%" height="15" fill="rgb(248,211,50)" fg:x="42174" fg:w="20"/><text x="34.4383%" y="495.50"></text></g><g><title>CompressScript (33 samples, 0.03%)</title><rect x="34.1883%" y="501" width="0.0268%" height="15" fill="rgb(217,13,45)" fg:x="42174" fg:w="33"/><text x="34.4383%" y="511.50"></text></g><g><title>CSHA256::Write (19 samples, 0.02%)</title><rect x="34.2499%" y="437" width="0.0154%" height="15" fill="rgb(211,216,49)" fg:x="42250" fg:w="19"/><text x="34.4999%" y="447.50"></text></g><g><title>CSHA256::Write (83 samples, 0.07%)</title><rect x="34.2150%" y="453" width="0.0673%" height="15" fill="rgb(221,58,53)" fg:x="42207" fg:w="83"/><text x="34.4650%" y="463.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (100 samples, 0.08%)</title><rect x="34.2150%" y="501" width="0.0811%" height="15" fill="rgb(220,112,41)" fg:x="42207" fg:w="100"/><text x="34.4650%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (100 samples, 0.08%)</title><rect x="34.2150%" y="485" width="0.0811%" height="15" fill="rgb(236,38,28)" fg:x="42207" fg:w="100"/><text x="34.4650%" y="495.50"></text></g><g><title>HashWriter::write (100 samples, 0.08%)</title><rect x="34.2150%" y="469" width="0.0811%" height="15" fill="rgb(227,195,22)" fg:x="42207" fg:w="100"/><text x="34.4650%" y="479.50"></text></g><g><title>CSHA256::Write (17 samples, 0.01%)</title><rect x="34.3148%" y="389" width="0.0138%" height="15" fill="rgb(214,55,33)" fg:x="42330" fg:w="17"/><text x="34.5648%" y="399.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (42 samples, 0.03%)</title><rect x="34.3026%" y="501" width="0.0340%" height="15" fill="rgb(248,80,13)" fg:x="42315" fg:w="42"/><text x="34.5526%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (42 samples, 0.03%)</title><rect x="34.3026%" y="485" width="0.0340%" height="15" fill="rgb(238,52,6)" fg:x="42315" fg:w="42"/><text x="34.5526%" y="495.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (42 samples, 0.03%)</title><rect x="34.3026%" y="469" width="0.0340%" height="15" fill="rgb(224,198,47)" fg:x="42315" fg:w="42"/><text x="34.5526%" y="479.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (42 samples, 0.03%)</title><rect x="34.3026%" y="453" width="0.0340%" height="15" fill="rgb(233,171,20)" fg:x="42315" fg:w="42"/><text x="34.5526%" y="463.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (28 samples, 0.02%)</title><rect x="34.3139%" y="437" width="0.0227%" height="15" fill="rgb(241,30,25)" fg:x="42329" fg:w="28"/><text x="34.5639%" y="447.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (27 samples, 0.02%)</title><rect x="34.3148%" y="421" width="0.0219%" height="15" fill="rgb(207,171,38)" fg:x="42330" fg:w="27"/><text x="34.5648%" y="431.50"></text></g><g><title>HashWriter::write (27 samples, 0.02%)</title><rect x="34.3148%" y="405" width="0.0219%" height="15" fill="rgb(234,70,1)" fg:x="42330" fg:w="27"/><text x="34.5648%" y="415.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (377 samples, 0.31%)</title><rect x="34.0335%" y="645" width="0.3056%" height="15" fill="rgb(232,178,18)" fg:x="41983" fg:w="377"/><text x="34.2835%" y="655.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (377 samples, 0.31%)</title><rect x="34.0335%" y="629" width="0.3056%" height="15" fill="rgb(241,78,40)" fg:x="41983" fg:w="377"/><text x="34.2835%" y="639.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (377 samples, 0.31%)</title><rect x="34.0335%" y="613" width="0.3056%" height="15" fill="rgb(222,35,25)" fg:x="41983" fg:w="377"/><text x="34.2835%" y="623.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (377 samples, 0.31%)</title><rect x="34.0335%" y="597" width="0.3056%" height="15" fill="rgb(207,92,16)" fg:x="41983" fg:w="377"/><text x="34.2835%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (377 samples, 0.31%)</title><rect x="34.0335%" y="581" width="0.3056%" height="15" fill="rgb(216,59,51)" fg:x="41983" fg:w="377"/><text x="34.2835%" y="591.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (377 samples, 0.31%)</title><rect x="34.0335%" y="565" width="0.3056%" height="15" fill="rgb(213,80,28)" fg:x="41983" fg:w="377"/><text x="34.2835%" y="575.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (195 samples, 0.16%)</title><rect x="34.1810%" y="549" width="0.1581%" height="15" fill="rgb(220,93,7)" fg:x="42165" fg:w="195"/><text x="34.4310%" y="559.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (195 samples, 0.16%)</title><rect x="34.1810%" y="533" width="0.1581%" height="15" fill="rgb(225,24,44)" fg:x="42165" fg:w="195"/><text x="34.4310%" y="543.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (195 samples, 0.16%)</title><rect x="34.1810%" y="517" width="0.1581%" height="15" fill="rgb(243,74,40)" fg:x="42165" fg:w="195"/><text x="34.4310%" y="527.50"></text></g><g><title>ShiftMessageB (23 samples, 0.02%)</title><rect x="34.3634%" y="581" width="0.0186%" height="15" fill="rgb(228,39,7)" fg:x="42390" fg:w="23"/><text x="34.6134%" y="591.50"></text></g><g><title>ShiftMessageC (13 samples, 0.01%)</title><rect x="34.3715%" y="565" width="0.0105%" height="15" fill="rgb(227,79,8)" fg:x="42400" fg:w="13"/><text x="34.6215%" y="575.50"></text></g><g><title>sha256_x86_shani::Transform (30 samples, 0.02%)</title><rect x="34.3585%" y="597" width="0.0243%" height="15" fill="rgb(236,58,11)" fg:x="42384" fg:w="30"/><text x="34.6085%" y="607.50"></text></g><g><title>CSHA256::Write (41 samples, 0.03%)</title><rect x="34.3918%" y="549" width="0.0332%" height="15" fill="rgb(249,63,35)" fg:x="42425" fg:w="41"/><text x="34.6418%" y="559.50"></text></g><g><title>QuadRound (18 samples, 0.01%)</title><rect x="34.4388%" y="533" width="0.0146%" height="15" fill="rgb(252,114,16)" fg:x="42483" fg:w="18"/><text x="34.6888%" y="543.50"></text></g><g><title>ShiftMessageA (15 samples, 0.01%)</title><rect x="34.4534%" y="517" width="0.0122%" height="15" fill="rgb(254,151,24)" fg:x="42501" fg:w="15"/><text x="34.7034%" y="527.50"></text></g><g><title>_mm_sha256msg1_epu32 (15 samples, 0.01%)</title><rect x="34.4534%" y="501" width="0.0122%" height="15" fill="rgb(253,54,39)" fg:x="42501" fg:w="15"/><text x="34.7034%" y="511.50"></text></g><g><title>ShiftMessageB (36 samples, 0.03%)</title><rect x="34.4534%" y="533" width="0.0292%" height="15" fill="rgb(243,25,45)" fg:x="42501" fg:w="36"/><text x="34.7034%" y="543.50"></text></g><g><title>ShiftMessageC (21 samples, 0.02%)</title><rect x="34.4655%" y="517" width="0.0170%" height="15" fill="rgb(234,134,9)" fg:x="42516" fg:w="21"/><text x="34.7155%" y="527.50"></text></g><g><title>sha256_x86_shani::Transform (65 samples, 0.05%)</title><rect x="34.4364%" y="549" width="0.0527%" height="15" fill="rgb(227,166,31)" fg:x="42480" fg:w="65"/><text x="34.6864%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (192 samples, 0.16%)</title><rect x="34.3391%" y="645" width="0.1556%" height="15" fill="rgb(245,143,41)" fg:x="42360" fg:w="192"/><text x="34.5891%" y="655.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (192 samples, 0.16%)</title><rect x="34.3391%" y="629" width="0.1556%" height="15" fill="rgb(238,181,32)" fg:x="42360" fg:w="192"/><text x="34.5891%" y="639.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (192 samples, 0.16%)</title><rect x="34.3391%" y="613" width="0.1556%" height="15" fill="rgb(224,113,18)" fg:x="42360" fg:w="192"/><text x="34.5891%" y="623.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (138 samples, 0.11%)</title><rect x="34.3829%" y="597" width="0.1119%" height="15" fill="rgb(240,229,28)" fg:x="42414" fg:w="138"/><text x="34.6329%" y="607.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (128 samples, 0.10%)</title><rect x="34.3910%" y="581" width="0.1038%" height="15" fill="rgb(250,185,3)" fg:x="42424" fg:w="128"/><text x="34.6410%" y="591.50"></text></g><g><title>HashWriter::write (128 samples, 0.10%)</title><rect x="34.3910%" y="565" width="0.1038%" height="15" fill="rgb(212,59,25)" fg:x="42424" fg:w="128"/><text x="34.6410%" y="575.50"></text></g><g><title>CSHA256::Write (38 samples, 0.03%)</title><rect x="34.4947%" y="597" width="0.0308%" height="15" fill="rgb(221,87,20)" fg:x="42552" fg:w="38"/><text x="34.7447%" y="607.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (659 samples, 0.53%)</title><rect x="34.0327%" y="661" width="0.5342%" height="15" fill="rgb(213,74,28)" fg:x="41982" fg:w="659"/><text x="34.2827%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (89 samples, 0.07%)</title><rect x="34.4947%" y="645" width="0.0721%" height="15" fill="rgb(224,132,34)" fg:x="42552" fg:w="89"/><text x="34.7447%" y="655.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (89 samples, 0.07%)</title><rect x="34.4947%" y="629" width="0.0721%" height="15" fill="rgb(222,101,24)" fg:x="42552" fg:w="89"/><text x="34.7447%" y="639.50"></text></g><g><title>HashWriter::write (89 samples, 0.07%)</title><rect x="34.4947%" y="613" width="0.0721%" height="15" fill="rgb(254,142,4)" fg:x="42552" fg:w="89"/><text x="34.7447%" y="623.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (23 samples, 0.02%)</title><rect x="34.5482%" y="597" width="0.0186%" height="15" fill="rgb(230,229,49)" fg:x="42618" fg:w="23"/><text x="34.7982%" y="607.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (668 samples, 0.54%)</title><rect x="34.0318%" y="997" width="0.5415%" height="15" fill="rgb(238,70,47)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="1007.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="981" width="0.5415%" height="15" fill="rgb(231,160,17)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="991.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="965" width="0.5415%" height="15" fill="rgb(218,68,53)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="975.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="949" width="0.5415%" height="15" fill="rgb(236,111,10)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="959.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="933" width="0.5415%" height="15" fill="rgb(224,34,41)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="943.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="917" width="0.5415%" height="15" fill="rgb(241,118,19)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="927.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="901" width="0.5415%" height="15" fill="rgb(238,129,25)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="911.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="885" width="0.5415%" height="15" fill="rgb(238,22,31)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="895.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="869" width="0.5415%" height="15" fill="rgb(222,174,48)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="853" width="0.5415%" height="15" fill="rgb(206,152,40)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="837" width="0.5415%" height="15" fill="rgb(218,99,54)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="821" width="0.5415%" height="15" fill="rgb(220,174,26)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="831.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="805" width="0.5415%" height="15" fill="rgb(245,116,9)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="815.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="789" width="0.5415%" height="15" fill="rgb(209,72,35)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="799.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="773" width="0.5415%" height="15" fill="rgb(226,126,21)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="783.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="757" width="0.5415%" height="15" fill="rgb(227,192,1)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="741" width="0.5415%" height="15" fill="rgb(237,180,29)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="751.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="725" width="0.5415%" height="15" fill="rgb(230,197,35)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="709" width="0.5415%" height="15" fill="rgb(246,193,31)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="693" width="0.5415%" height="15" fill="rgb(241,36,4)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="703.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (668 samples, 0.54%)</title><rect x="34.0318%" y="677" width="0.5415%" height="15" fill="rgb(241,130,17)" fg:x="41981" fg:w="668"/><text x="34.2818%" y="687.50"></text></g><g><title>node::BlockManager::OpenUndoFile (22 samples, 0.02%)</title><rect x="34.5750%" y="997" width="0.0178%" height="15" fill="rgb(206,137,32)" fg:x="42651" fg:w="22"/><text x="34.8250%" y="1007.50"></text></g><g><title>FlatFileSeq::Open (22 samples, 0.02%)</title><rect x="34.5750%" y="981" width="0.0178%" height="15" fill="rgb(237,228,51)" fg:x="42651" fg:w="22"/><text x="34.8250%" y="991.50"></text></g><g><title>CompressAmount (17 samples, 0.01%)</title><rect x="34.5928%" y="821" width="0.0138%" height="15" fill="rgb(243,6,42)" fg:x="42673" fg:w="17"/><text x="34.8428%" y="831.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (24 samples, 0.02%)</title><rect x="34.6171%" y="533" width="0.0195%" height="15" fill="rgb(251,74,28)" fg:x="42703" fg:w="24"/><text x="34.8671%" y="543.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (24 samples, 0.02%)</title><rect x="34.6171%" y="517" width="0.0195%" height="15" fill="rgb(218,20,49)" fg:x="42703" fg:w="24"/><text x="34.8671%" y="527.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (24 samples, 0.02%)</title><rect x="34.6171%" y="501" width="0.0195%" height="15" fill="rgb(238,28,14)" fg:x="42703" fg:w="24"/><text x="34.8671%" y="511.50"></text></g><g><title>CompressScript (26 samples, 0.02%)</title><rect x="34.6479%" y="485" width="0.0211%" height="15" fill="rgb(229,40,46)" fg:x="42741" fg:w="26"/><text x="34.8979%" y="495.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (88 samples, 0.07%)</title><rect x="34.6171%" y="629" width="0.0713%" height="15" fill="rgb(244,195,20)" fg:x="42703" fg:w="88"/><text x="34.8671%" y="639.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (88 samples, 0.07%)</title><rect x="34.6171%" y="613" width="0.0713%" height="15" fill="rgb(253,56,35)" fg:x="42703" fg:w="88"/><text x="34.8671%" y="623.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (88 samples, 0.07%)</title><rect x="34.6171%" y="597" width="0.0713%" height="15" fill="rgb(210,149,44)" fg:x="42703" fg:w="88"/><text x="34.8671%" y="607.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (88 samples, 0.07%)</title><rect x="34.6171%" y="581" width="0.0713%" height="15" fill="rgb(240,135,12)" fg:x="42703" fg:w="88"/><text x="34.8671%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (88 samples, 0.07%)</title><rect x="34.6171%" y="565" width="0.0713%" height="15" fill="rgb(251,24,50)" fg:x="42703" fg:w="88"/><text x="34.8671%" y="575.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (88 samples, 0.07%)</title><rect x="34.6171%" y="549" width="0.0713%" height="15" fill="rgb(243,200,47)" fg:x="42703" fg:w="88"/><text x="34.8671%" y="559.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (64 samples, 0.05%)</title><rect x="34.6366%" y="533" width="0.0519%" height="15" fill="rgb(224,166,26)" fg:x="42727" fg:w="64"/><text x="34.8866%" y="543.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (64 samples, 0.05%)</title><rect x="34.6366%" y="517" width="0.0519%" height="15" fill="rgb(233,0,47)" fg:x="42727" fg:w="64"/><text x="34.8866%" y="527.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (64 samples, 0.05%)</title><rect x="34.6366%" y="501" width="0.0519%" height="15" fill="rgb(253,80,5)" fg:x="42727" fg:w="64"/><text x="34.8866%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="485" width="0.0122%" height="15" fill="rgb(214,133,25)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="469" width="0.0122%" height="15" fill="rgb(209,27,14)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="479.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="453" width="0.0122%" height="15" fill="rgb(219,102,51)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="463.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="437" width="0.0122%" height="15" fill="rgb(237,18,16)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="447.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="421" width="0.0122%" height="15" fill="rgb(241,85,17)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="431.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="405" width="0.0122%" height="15" fill="rgb(236,90,42)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="389" width="0.0122%" height="15" fill="rgb(249,57,21)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="399.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="373" width="0.0122%" height="15" fill="rgb(243,12,36)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="383.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="357" width="0.0122%" height="15" fill="rgb(253,128,47)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="367.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="341" width="0.0122%" height="15" fill="rgb(207,33,20)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="351.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="34.6763%" y="325" width="0.0122%" height="15" fill="rgb(233,215,35)" fg:x="42776" fg:w="15"/><text x="34.9263%" y="335.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (14 samples, 0.01%)</title><rect x="34.6771%" y="309" width="0.0113%" height="15" fill="rgb(249,188,52)" fg:x="42777" fg:w="14"/><text x="34.9271%" y="319.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (877 samples, 0.71%)</title><rect x="33.9824%" y="1013" width="0.7109%" height="15" fill="rgb(225,12,32)" fg:x="41920" fg:w="877"/><text x="34.2324%" y="1023.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="997" width="0.1005%" height="15" fill="rgb(247,98,14)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="1007.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (124 samples, 0.10%)</title><rect x="34.5928%" y="981" width="0.1005%" height="15" fill="rgb(247,219,48)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="991.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="965" width="0.1005%" height="15" fill="rgb(253,60,48)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="975.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="949" width="0.1005%" height="15" fill="rgb(245,15,52)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="959.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="933" width="0.1005%" height="15" fill="rgb(220,133,28)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="943.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="917" width="0.1005%" height="15" fill="rgb(217,180,4)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="901" width="0.1005%" height="15" fill="rgb(251,24,1)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="911.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="885" width="0.1005%" height="15" fill="rgb(212,185,49)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="895.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="869" width="0.1005%" height="15" fill="rgb(215,175,22)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="879.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="853" width="0.1005%" height="15" fill="rgb(250,205,14)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (124 samples, 0.10%)</title><rect x="34.5928%" y="837" width="0.1005%" height="15" fill="rgb(225,211,22)" fg:x="42673" fg:w="124"/><text x="34.8428%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (100 samples, 0.08%)</title><rect x="34.6123%" y="821" width="0.0811%" height="15" fill="rgb(251,179,42)" fg:x="42697" fg:w="100"/><text x="34.8623%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="805" width="0.0803%" height="15" fill="rgb(208,216,51)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="815.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="789" width="0.0803%" height="15" fill="rgb(235,36,11)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="799.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="773" width="0.0803%" height="15" fill="rgb(213,189,28)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="783.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="757" width="0.0803%" height="15" fill="rgb(227,203,42)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="767.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="741" width="0.0803%" height="15" fill="rgb(244,72,36)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="725" width="0.0803%" height="15" fill="rgb(213,53,17)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="735.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="709" width="0.0803%" height="15" fill="rgb(207,167,3)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="693" width="0.0803%" height="15" fill="rgb(216,98,30)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="677" width="0.0803%" height="15" fill="rgb(236,123,15)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="687.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (99 samples, 0.08%)</title><rect x="34.6131%" y="661" width="0.0803%" height="15" fill="rgb(248,81,50)" fg:x="42698" fg:w="99"/><text x="34.8631%" y="671.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (94 samples, 0.08%)</title><rect x="34.6171%" y="645" width="0.0762%" height="15" fill="rgb(214,120,4)" fg:x="42703" fg:w="94"/><text x="34.8671%" y="655.50"></text></g><g><title>ShiftMessageB (14 samples, 0.01%)</title><rect x="34.7006%" y="997" width="0.0113%" height="15" fill="rgb(208,179,34)" fg:x="42806" fg:w="14"/><text x="34.9506%" y="1007.50"></text></g><g><title>sha256_x86_shani::Transform (25 samples, 0.02%)</title><rect x="34.6941%" y="1013" width="0.0203%" height="15" fill="rgb(227,140,7)" fg:x="42798" fg:w="25"/><text x="34.9441%" y="1023.50"></text></g><g><title>CompressAmount (14 samples, 0.01%)</title><rect x="34.7144%" y="837" width="0.0113%" height="15" fill="rgb(214,22,6)" fg:x="42823" fg:w="14"/><text x="34.9644%" y="847.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (27 samples, 0.02%)</title><rect x="34.7403%" y="549" width="0.0219%" height="15" fill="rgb(207,137,27)" fg:x="42855" fg:w="27"/><text x="34.9903%" y="559.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (27 samples, 0.02%)</title><rect x="34.7403%" y="533" width="0.0219%" height="15" fill="rgb(210,8,46)" fg:x="42855" fg:w="27"/><text x="34.9903%" y="543.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (27 samples, 0.02%)</title><rect x="34.7403%" y="517" width="0.0219%" height="15" fill="rgb(240,16,54)" fg:x="42855" fg:w="27"/><text x="34.9903%" y="527.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (13 samples, 0.01%)</title><rect x="34.7995%" y="293" width="0.0105%" height="15" fill="rgb(211,209,29)" fg:x="42928" fg:w="13"/><text x="35.0495%" y="303.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (13 samples, 0.01%)</title><rect x="34.7995%" y="277" width="0.0105%" height="15" fill="rgb(226,228,24)" fg:x="42928" fg:w="13"/><text x="35.0495%" y="287.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (13 samples, 0.01%)</title><rect x="34.7995%" y="261" width="0.0105%" height="15" fill="rgb(222,84,9)" fg:x="42928" fg:w="13"/><text x="35.0495%" y="271.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (13 samples, 0.01%)</title><rect x="34.7995%" y="245" width="0.0105%" height="15" fill="rgb(234,203,30)" fg:x="42928" fg:w="13"/><text x="35.0495%" y="255.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (13 samples, 0.01%)</title><rect x="34.7995%" y="229" width="0.0105%" height="15" fill="rgb(238,109,14)" fg:x="42928" fg:w="13"/><text x="35.0495%" y="239.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (13 samples, 0.01%)</title><rect x="34.7995%" y="213" width="0.0105%" height="15" fill="rgb(233,206,34)" fg:x="42928" fg:w="13"/><text x="35.0495%" y="223.50"></text></g><g><title>CompressScript (51 samples, 0.04%)</title><rect x="34.7720%" y="501" width="0.0413%" height="15" fill="rgb(220,167,47)" fg:x="42894" fg:w="51"/><text x="35.0220%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (22 samples, 0.02%)</title><rect x="34.7955%" y="485" width="0.0178%" height="15" fill="rgb(238,105,10)" fg:x="42923" fg:w="22"/><text x="35.0455%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="469" width="0.0170%" height="15" fill="rgb(213,227,17)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="479.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="453" width="0.0170%" height="15" fill="rgb(217,132,38)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="463.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="437" width="0.0170%" height="15" fill="rgb(242,146,4)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="447.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="421" width="0.0170%" height="15" fill="rgb(212,61,9)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="431.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="405" width="0.0170%" height="15" fill="rgb(247,126,22)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="389" width="0.0170%" height="15" fill="rgb(220,196,2)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="399.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="373" width="0.0170%" height="15" fill="rgb(208,46,4)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="383.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="357" width="0.0170%" height="15" fill="rgb(252,104,46)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="367.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="341" width="0.0170%" height="15" fill="rgb(237,152,48)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="351.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (21 samples, 0.02%)</title><rect x="34.7963%" y="325" width="0.0170%" height="15" fill="rgb(221,59,37)" fg:x="42924" fg:w="21"/><text x="35.0463%" y="335.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (18 samples, 0.01%)</title><rect x="34.7987%" y="309" width="0.0146%" height="15" fill="rgb(209,202,51)" fg:x="42927" fg:w="18"/><text x="35.0487%" y="319.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (115 samples, 0.09%)</title><rect x="34.7403%" y="645" width="0.0932%" height="15" fill="rgb(228,81,30)" fg:x="42855" fg:w="115"/><text x="34.9903%" y="655.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (115 samples, 0.09%)</title><rect x="34.7403%" y="629" width="0.0932%" height="15" fill="rgb(227,42,39)" fg:x="42855" fg:w="115"/><text x="34.9903%" y="639.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (115 samples, 0.09%)</title><rect x="34.7403%" y="613" width="0.0932%" height="15" fill="rgb(221,26,2)" fg:x="42855" fg:w="115"/><text x="34.9903%" y="623.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (115 samples, 0.09%)</title><rect x="34.7403%" y="597" width="0.0932%" height="15" fill="rgb(254,61,31)" fg:x="42855" fg:w="115"/><text x="34.9903%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (115 samples, 0.09%)</title><rect x="34.7403%" y="581" width="0.0932%" height="15" fill="rgb(222,173,38)" fg:x="42855" fg:w="115"/><text x="34.9903%" y="591.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (115 samples, 0.09%)</title><rect x="34.7403%" y="565" width="0.0932%" height="15" fill="rgb(218,50,12)" fg:x="42855" fg:w="115"/><text x="34.9903%" y="575.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (88 samples, 0.07%)</title><rect x="34.7622%" y="549" width="0.0713%" height="15" fill="rgb(223,88,40)" fg:x="42882" fg:w="88"/><text x="35.0122%" y="559.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (88 samples, 0.07%)</title><rect x="34.7622%" y="533" width="0.0713%" height="15" fill="rgb(237,54,19)" fg:x="42882" fg:w="88"/><text x="35.0122%" y="543.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (88 samples, 0.07%)</title><rect x="34.7622%" y="517" width="0.0713%" height="15" fill="rgb(251,129,25)" fg:x="42882" fg:w="88"/><text x="35.0122%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="501" width="0.0146%" height="15" fill="rgb(238,97,19)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="485" width="0.0146%" height="15" fill="rgb(240,169,18)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="495.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="469" width="0.0146%" height="15" fill="rgb(230,187,49)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="479.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="453" width="0.0146%" height="15" fill="rgb(209,44,26)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="463.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="437" width="0.0146%" height="15" fill="rgb(244,0,6)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="447.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="421" width="0.0146%" height="15" fill="rgb(248,18,21)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="405" width="0.0146%" height="15" fill="rgb(245,180,19)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="415.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="389" width="0.0146%" height="15" fill="rgb(252,118,36)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="399.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="373" width="0.0146%" height="15" fill="rgb(210,224,19)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="383.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="357" width="0.0146%" height="15" fill="rgb(218,30,24)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="367.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (18 samples, 0.01%)</title><rect x="34.8190%" y="341" width="0.0146%" height="15" fill="rgb(219,75,50)" fg:x="42952" fg:w="18"/><text x="35.0690%" y="351.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (17 samples, 0.01%)</title><rect x="34.8198%" y="325" width="0.0138%" height="15" fill="rgb(234,72,50)" fg:x="42953" fg:w="17"/><text x="35.0698%" y="335.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="1013" width="0.1297%" height="15" fill="rgb(219,100,48)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="1023.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (160 samples, 0.13%)</title><rect x="34.7144%" y="997" width="0.1297%" height="15" fill="rgb(253,5,41)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="1007.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="981" width="0.1297%" height="15" fill="rgb(247,181,11)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="991.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="965" width="0.1297%" height="15" fill="rgb(222,223,25)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="975.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="949" width="0.1297%" height="15" fill="rgb(214,198,28)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="959.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="933" width="0.1297%" height="15" fill="rgb(230,46,43)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="943.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="917" width="0.1297%" height="15" fill="rgb(233,65,53)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="927.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="901" width="0.1297%" height="15" fill="rgb(221,121,27)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="911.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="885" width="0.1297%" height="15" fill="rgb(247,70,47)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="895.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="869" width="0.1297%" height="15" fill="rgb(228,85,35)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (160 samples, 0.13%)</title><rect x="34.7144%" y="853" width="0.1297%" height="15" fill="rgb(209,50,18)" fg:x="42823" fg:w="160"/><text x="34.9644%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (138 samples, 0.11%)</title><rect x="34.7322%" y="837" width="0.1119%" height="15" fill="rgb(250,19,35)" fg:x="42845" fg:w="138"/><text x="34.9822%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (137 samples, 0.11%)</title><rect x="34.7331%" y="821" width="0.1111%" height="15" fill="rgb(253,107,29)" fg:x="42846" fg:w="137"/><text x="34.9831%" y="831.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (137 samples, 0.11%)</title><rect x="34.7331%" y="805" width="0.1111%" height="15" fill="rgb(252,179,29)" fg:x="42846" fg:w="137"/><text x="34.9831%" y="815.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (137 samples, 0.11%)</title><rect x="34.7331%" y="789" width="0.1111%" height="15" fill="rgb(238,194,6)" fg:x="42846" fg:w="137"/><text x="34.9831%" y="799.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (137 samples, 0.11%)</title><rect x="34.7331%" y="773" width="0.1111%" height="15" fill="rgb(238,164,29)" fg:x="42846" fg:w="137"/><text x="34.9831%" y="783.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (137 samples, 0.11%)</title><rect x="34.7331%" y="757" width="0.1111%" height="15" fill="rgb(224,25,9)" fg:x="42846" fg:w="137"/><text x="34.9831%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (137 samples, 0.11%)</title><rect x="34.7331%" y="741" width="0.1111%" height="15" fill="rgb(244,153,23)" fg:x="42846" fg:w="137"/><text x="34.9831%" y="751.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (137 samples, 0.11%)</title><rect x="34.7331%" y="725" width="0.1111%" height="15" fill="rgb(212,203,14)" fg:x="42846" fg:w="137"/><text x="34.9831%" y="735.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (137 samples, 0.11%)</title><rect x="34.7331%" y="709" width="0.1111%" height="15" fill="rgb(220,164,20)" fg:x="42846" fg:w="137"/><text x="34.9831%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (137 samples, 0.11%)</title><rect x="34.7331%" y="693" width="0.1111%" height="15" fill="rgb(222,203,48)" fg:x="42846" fg:w="137"/><text x="34.9831%" y="703.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (136 samples, 0.11%)</title><rect x="34.7339%" y="677" width="0.1102%" height="15" fill="rgb(215,159,22)" fg:x="42847" fg:w="136"/><text x="34.9839%" y="687.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (132 samples, 0.11%)</title><rect x="34.7371%" y="661" width="0.1070%" height="15" fill="rgb(216,183,47)" fg:x="42851" fg:w="132"/><text x="34.9871%" y="671.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (1,188 samples, 0.96%)</title><rect x="33.8900%" y="1029" width="0.9631%" height="15" fill="rgb(229,195,25)" fg:x="41806" fg:w="1188"/><text x="34.1400%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (18 samples, 0.01%)</title><rect x="34.8530%" y="1029" width="0.0146%" height="15" fill="rgb(224,132,51)" fg:x="42994" fg:w="18"/><text x="35.1030%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (24 samples, 0.02%)</title><rect x="34.8676%" y="1029" width="0.0195%" height="15" fill="rgb(240,63,7)" fg:x="43012" fg:w="24"/><text x="35.1176%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (19 samples, 0.02%)</title><rect x="34.8871%" y="1029" width="0.0154%" height="15" fill="rgb(249,182,41)" fg:x="43036" fg:w="19"/><text x="35.1371%" y="1039.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::vector (70 samples, 0.06%)</title><rect x="34.9146%" y="1029" width="0.0567%" height="15" fill="rgb(243,47,26)" fg:x="43070" fg:w="70"/><text x="35.1646%" y="1039.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_default_initialize (69 samples, 0.06%)</title><rect x="34.9154%" y="1013" width="0.0559%" height="15" fill="rgb(233,48,2)" fg:x="43071" fg:w="69"/><text x="35.1654%" y="1023.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_a&lt;PrecomputedTransactionData*, unsigned long, PrecomputedTransactionData&gt; (69 samples, 0.06%)</title><rect x="34.9154%" y="997" width="0.0559%" height="15" fill="rgb(244,165,34)" fg:x="43071" fg:w="69"/><text x="35.1654%" y="1007.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (69 samples, 0.06%)</title><rect x="34.9154%" y="981" width="0.0559%" height="15" fill="rgb(207,89,7)" fg:x="43071" fg:w="69"/><text x="35.1654%" y="991.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (69 samples, 0.06%)</title><rect x="34.9154%" y="965" width="0.0559%" height="15" fill="rgb(244,117,36)" fg:x="43071" fg:w="69"/><text x="35.1654%" y="975.50"></text></g><g><title>void std::_Construct&lt;PrecomputedTransactionData&gt; (66 samples, 0.05%)</title><rect x="34.9179%" y="949" width="0.0535%" height="15" fill="rgb(226,144,34)" fg:x="43074" fg:w="66"/><text x="35.1679%" y="959.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::~vector (35 samples, 0.03%)</title><rect x="34.9714%" y="1029" width="0.0284%" height="15" fill="rgb(213,23,19)" fg:x="43140" fg:w="35"/><text x="35.2214%" y="1039.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*, PrecomputedTransactionData&gt; (35 samples, 0.03%)</title><rect x="34.9714%" y="1013" width="0.0284%" height="15" fill="rgb(217,75,12)" fg:x="43140" fg:w="35"/><text x="35.2214%" y="1023.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*&gt; (35 samples, 0.03%)</title><rect x="34.9714%" y="997" width="0.0284%" height="15" fill="rgb(224,159,17)" fg:x="43140" fg:w="35"/><text x="35.2214%" y="1007.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;PrecomputedTransactionData*&gt; (35 samples, 0.03%)</title><rect x="34.9714%" y="981" width="0.0284%" height="15" fill="rgb(217,118,1)" fg:x="43140" fg:w="35"/><text x="35.2214%" y="991.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData&gt; (24 samples, 0.02%)</title><rect x="34.9803%" y="965" width="0.0195%" height="15" fill="rgb(232,180,48)" fg:x="43151" fg:w="24"/><text x="35.2303%" y="975.50"></text></g><g><title>void std::destroy_at&lt;PrecomputedTransactionData&gt; (24 samples, 0.02%)</title><rect x="34.9803%" y="949" width="0.0195%" height="15" fill="rgb(230,27,33)" fg:x="43151" fg:w="24"/><text x="35.2303%" y="959.50"></text></g><g><title>PrecomputedTransactionData::~PrecomputedTransactionData (24 samples, 0.02%)</title><rect x="34.9803%" y="933" width="0.0195%" height="15" fill="rgb(205,31,21)" fg:x="43151" fg:w="24"/><text x="35.2303%" y="943.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (24 samples, 0.02%)</title><rect x="34.9803%" y="917" width="0.0195%" height="15" fill="rgb(253,59,4)" fg:x="43151" fg:w="24"/><text x="35.2303%" y="927.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (15 samples, 0.01%)</title><rect x="35.0038%" y="1029" width="0.0122%" height="15" fill="rgb(224,201,9)" fg:x="43180" fg:w="15"/><text x="35.2538%" y="1039.50"></text></g><g><title>Chainstate::ConnectBlock (23,647 samples, 19.17%)</title><rect x="15.8547%" y="1045" width="19.1694%" height="15" fill="rgb(229,206,30)" fg:x="19558" fg:w="23647"/><text x="16.1047%" y="1055.50">Chainstate::ConnectBlock</text></g><g><title>CCoinsViewCache::ReallocateCache (16 samples, 0.01%)</title><rect x="35.0241%" y="1013" width="0.0130%" height="15" fill="rgb(212,67,47)" fg:x="43205" fg:w="16"/><text x="35.2741%" y="1023.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (15 samples, 0.01%)</title><rect x="35.0403%" y="965" width="0.0122%" height="15" fill="rgb(211,96,50)" fg:x="43225" fg:w="15"/><text x="35.2903%" y="975.50"></text></g><g><title>CDBBatch::EraseImpl (62 samples, 0.05%)</title><rect x="35.0370%" y="981" width="0.0503%" height="15" fill="rgb(252,114,18)" fg:x="43221" fg:w="62"/><text x="35.2870%" y="991.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (32 samples, 0.03%)</title><rect x="35.0614%" y="965" width="0.0259%" height="15" fill="rgb(223,58,37)" fg:x="43251" fg:w="32"/><text x="35.3114%" y="975.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (29 samples, 0.02%)</title><rect x="35.0638%" y="949" width="0.0235%" height="15" fill="rgb(237,70,4)" fg:x="43254" fg:w="29"/><text x="35.3138%" y="959.50"></text></g><g><title>decltype  (17 samples, 0.01%)</title><rect x="35.0735%" y="933" width="0.0138%" height="15" fill="rgb(244,85,46)" fg:x="43266" fg:w="17"/><text x="35.3235%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (17 samples, 0.01%)</title><rect x="35.0735%" y="917" width="0.0138%" height="15" fill="rgb(223,39,52)" fg:x="43266" fg:w="17"/><text x="35.3235%" y="927.50"></text></g><g><title>decltype (17 samples, 0.01%)</title><rect x="35.0735%" y="901" width="0.0138%" height="15" fill="rgb(218,200,14)" fg:x="43266" fg:w="17"/><text x="35.3235%" y="911.50"></text></g><g><title>DataStream::Xor (13 samples, 0.01%)</title><rect x="35.0962%" y="933" width="0.0105%" height="15" fill="rgb(208,171,16)" fg:x="43294" fg:w="13"/><text x="35.3462%" y="943.50"></text></g><g><title>CDBBatch::WriteImpl (14 samples, 0.01%)</title><rect x="35.0962%" y="949" width="0.0113%" height="15" fill="rgb(234,200,18)" fg:x="43294" fg:w="14"/><text x="35.3462%" y="959.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (23 samples, 0.02%)</title><rect x="35.0962%" y="965" width="0.0186%" height="15" fill="rgb(228,45,11)" fg:x="43294" fg:w="23"/><text x="35.3462%" y="975.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (18 samples, 0.01%)</title><rect x="35.1197%" y="949" width="0.0146%" height="15" fill="rgb(237,182,11)" fg:x="43323" fg:w="18"/><text x="35.3697%" y="959.50"></text></g><g><title>leveldb::WriteBatch::Put (25 samples, 0.02%)</title><rect x="35.1149%" y="965" width="0.0203%" height="15" fill="rgb(241,175,49)" fg:x="43317" fg:w="25"/><text x="35.3649%" y="975.50"></text></g><g><title>CDBBatch::WriteImpl (67 samples, 0.05%)</title><rect x="35.0873%" y="981" width="0.0543%" height="15" fill="rgb(247,38,35)" fg:x="43283" fg:w="67"/><text x="35.3373%" y="991.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (29 samples, 0.02%)</title><rect x="35.1457%" y="965" width="0.0235%" height="15" fill="rgb(228,39,49)" fg:x="43355" fg:w="29"/><text x="35.3957%" y="975.50"></text></g><g><title>CCoinsViewDB::BatchWrite (164 samples, 0.13%)</title><rect x="35.0370%" y="997" width="0.1329%" height="15" fill="rgb(226,101,26)" fg:x="43221" fg:w="164"/><text x="35.2870%" y="1007.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (35 samples, 0.03%)</title><rect x="35.1416%" y="981" width="0.0284%" height="15" fill="rgb(206,141,19)" fg:x="43350" fg:w="35"/><text x="35.3916%" y="991.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (20 samples, 0.02%)</title><rect x="35.1740%" y="949" width="0.0162%" height="15" fill="rgb(211,200,13)" fg:x="43390" fg:w="20"/><text x="35.4240%" y="959.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (21 samples, 0.02%)</title><rect x="35.2016%" y="917" width="0.0170%" height="15" fill="rgb(241,121,6)" fg:x="43424" fg:w="21"/><text x="35.4516%" y="927.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (37 samples, 0.03%)</title><rect x="35.1927%" y="933" width="0.0300%" height="15" fill="rgb(234,221,29)" fg:x="43413" fg:w="37"/><text x="35.4427%" y="943.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (45 samples, 0.04%)</title><rect x="35.2259%" y="933" width="0.0365%" height="15" fill="rgb(229,136,5)" fg:x="43454" fg:w="45"/><text x="35.4759%" y="943.50"></text></g><g><title>GetLengthPrefixedSlice (18 samples, 0.01%)</title><rect x="35.2478%" y="917" width="0.0146%" height="15" fill="rgb(238,36,11)" fg:x="43481" fg:w="18"/><text x="35.4978%" y="927.50"></text></g><g><title>leveldb::GetVarint32Ptr (14 samples, 0.01%)</title><rect x="35.2511%" y="901" width="0.0113%" height="15" fill="rgb(251,55,41)" fg:x="43485" fg:w="14"/><text x="35.5011%" y="911.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (17 samples, 0.01%)</title><rect x="35.2900%" y="901" width="0.0138%" height="15" fill="rgb(242,34,40)" fg:x="43533" fg:w="17"/><text x="35.5400%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (32 samples, 0.03%)</title><rect x="35.3070%" y="885" width="0.0259%" height="15" fill="rgb(215,42,17)" fg:x="43554" fg:w="32"/><text x="35.5570%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (37 samples, 0.03%)</title><rect x="35.3410%" y="885" width="0.0300%" height="15" fill="rgb(207,44,46)" fg:x="43596" fg:w="37"/><text x="35.5910%" y="895.50"></text></g><g><title>GetLengthPrefixedSlice (173 samples, 0.14%)</title><rect x="35.7634%" y="869" width="0.1402%" height="15" fill="rgb(211,206,28)" fg:x="44117" fg:w="173"/><text x="36.0134%" y="879.50"></text></g><g><title>leveldb::GetVarint32Ptr (142 samples, 0.12%)</title><rect x="35.7885%" y="853" width="0.1151%" height="15" fill="rgb(237,167,16)" fg:x="44148" fg:w="142"/><text x="36.0385%" y="863.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (665 samples, 0.54%)</title><rect x="35.3727%" y="885" width="0.5391%" height="15" fill="rgb(233,66,6)" fg:x="43635" fg:w="665"/><text x="35.6227%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (17 samples, 0.01%)</title><rect x="35.9239%" y="853" width="0.0138%" height="15" fill="rgb(246,123,29)" fg:x="44315" fg:w="17"/><text x="36.1739%" y="863.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (43 samples, 0.03%)</title><rect x="35.9377%" y="853" width="0.0349%" height="15" fill="rgb(209,62,40)" fg:x="44332" fg:w="43"/><text x="36.1877%" y="863.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (78 samples, 0.06%)</title><rect x="35.9117%" y="885" width="0.0632%" height="15" fill="rgb(218,4,25)" fg:x="44300" fg:w="78"/><text x="36.1617%" y="895.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (78 samples, 0.06%)</title><rect x="35.9117%" y="869" width="0.0632%" height="15" fill="rgb(253,91,49)" fg:x="44300" fg:w="78"/><text x="36.1617%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (14 samples, 0.01%)</title><rect x="35.9969%" y="853" width="0.0113%" height="15" fill="rgb(228,155,29)" fg:x="44405" fg:w="14"/><text x="36.2469%" y="863.50"></text></g><g><title>GetLengthPrefixedSlice (72 samples, 0.06%)</title><rect x="36.1395%" y="837" width="0.0584%" height="15" fill="rgb(243,57,37)" fg:x="44581" fg:w="72"/><text x="36.3895%" y="847.50"></text></g><g><title>leveldb::GetVarint32Ptr (57 samples, 0.05%)</title><rect x="36.1517%" y="821" width="0.0462%" height="15" fill="rgb(244,167,17)" fg:x="44596" fg:w="57"/><text x="36.4017%" y="831.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (36 samples, 0.03%)</title><rect x="36.1979%" y="837" width="0.0292%" height="15" fill="rgb(207,181,38)" fg:x="44653" fg:w="36"/><text x="36.4479%" y="847.50"></text></g><g><title>leveldb::Slice::compare (17 samples, 0.01%)</title><rect x="36.2133%" y="821" width="0.0138%" height="15" fill="rgb(211,8,23)" fg:x="44672" fg:w="17"/><text x="36.4633%" y="831.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (104 samples, 0.08%)</title><rect x="36.2871%" y="821" width="0.0843%" height="15" fill="rgb(235,11,44)" fg:x="44763" fg:w="104"/><text x="36.5371%" y="831.50"></text></g><g><title>leveldb::Slice::compare (53 samples, 0.04%)</title><rect x="36.3284%" y="805" width="0.0430%" height="15" fill="rgb(248,18,52)" fg:x="44814" fg:w="53"/><text x="36.5784%" y="815.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (112 samples, 0.09%)</title><rect x="36.3819%" y="821" width="0.0908%" height="15" fill="rgb(208,4,7)" fg:x="44880" fg:w="112"/><text x="36.6319%" y="831.50"></text></g><g><title>leveldb::ExtractUserKey (20 samples, 0.02%)</title><rect x="36.4565%" y="805" width="0.0162%" height="15" fill="rgb(240,17,39)" fg:x="44972" fg:w="20"/><text x="36.7065%" y="815.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (122 samples, 0.10%)</title><rect x="36.4727%" y="821" width="0.0989%" height="15" fill="rgb(207,170,3)" fg:x="44992" fg:w="122"/><text x="36.7227%" y="831.50"></text></g><g><title>GetLengthPrefixedSlice (29 samples, 0.02%)</title><rect x="36.5481%" y="805" width="0.0235%" height="15" fill="rgb(236,100,52)" fg:x="45085" fg:w="29"/><text x="36.7981%" y="815.50"></text></g><g><title>leveldb::GetVarint32Ptr (26 samples, 0.02%)</title><rect x="36.5505%" y="789" width="0.0211%" height="15" fill="rgb(246,78,51)" fg:x="45088" fg:w="26"/><text x="36.8005%" y="799.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (25 samples, 0.02%)</title><rect x="36.6065%" y="805" width="0.0203%" height="15" fill="rgb(211,17,15)" fg:x="45157" fg:w="25"/><text x="36.8565%" y="815.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (82 samples, 0.07%)</title><rect x="36.5716%" y="821" width="0.0665%" height="15" fill="rgb(209,59,46)" fg:x="45114" fg:w="82"/><text x="36.8216%" y="831.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (14 samples, 0.01%)</title><rect x="36.6267%" y="805" width="0.0113%" height="15" fill="rgb(210,92,25)" fg:x="45182" fg:w="14"/><text x="36.8767%" y="815.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (13 samples, 0.01%)</title><rect x="36.6275%" y="789" width="0.0105%" height="15" fill="rgb(238,174,52)" fg:x="45183" fg:w="13"/><text x="36.8775%" y="799.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (13 samples, 0.01%)</title><rect x="36.6275%" y="773" width="0.0105%" height="15" fill="rgb(230,73,7)" fg:x="45183" fg:w="13"/><text x="36.8775%" y="783.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (507 samples, 0.41%)</title><rect x="36.2287%" y="837" width="0.4110%" height="15" fill="rgb(243,124,40)" fg:x="44691" fg:w="507"/><text x="36.4787%" y="847.50"></text></g><g><title>GetLengthPrefixedSlice (134 samples, 0.11%)</title><rect x="36.7637%" y="821" width="0.1086%" height="15" fill="rgb(244,170,11)" fg:x="45351" fg:w="134"/><text x="37.0137%" y="831.50"></text></g><g><title>leveldb::GetVarint32Ptr (109 samples, 0.09%)</title><rect x="36.7840%" y="805" width="0.0884%" height="15" fill="rgb(207,114,54)" fg:x="45376" fg:w="109"/><text x="37.0340%" y="815.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (300 samples, 0.24%)</title><rect x="36.6405%" y="837" width="0.2432%" height="15" fill="rgb(205,42,20)" fg:x="45199" fg:w="300"/><text x="36.8905%" y="847.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (14 samples, 0.01%)</title><rect x="36.8724%" y="821" width="0.0113%" height="15" fill="rgb(230,30,28)" fg:x="45485" fg:w="14"/><text x="37.1224%" y="831.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (36 samples, 0.03%)</title><rect x="36.8837%" y="837" width="0.0292%" height="15" fill="rgb(205,73,54)" fg:x="45499" fg:w="36"/><text x="37.1337%" y="847.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1,097 samples, 0.89%)</title><rect x="36.0244%" y="853" width="0.8893%" height="15" fill="rgb(254,227,23)" fg:x="44439" fg:w="1097"/><text x="36.2744%" y="863.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (36 samples, 0.03%)</title><rect x="36.9137%" y="853" width="0.0292%" height="15" fill="rgb(228,202,34)" fg:x="45536" fg:w="36"/><text x="37.1637%" y="863.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1,187 samples, 0.96%)</title><rect x="35.9839%" y="869" width="0.9622%" height="15" fill="rgb(222,225,37)" fg:x="44389" fg:w="1187"/><text x="36.2339%" y="879.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,213 samples, 0.98%)</title><rect x="35.9750%" y="885" width="0.9833%" height="15" fill="rgb(221,14,54)" fg:x="44378" fg:w="1213"/><text x="36.2250%" y="895.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (15 samples, 0.01%)</title><rect x="36.9461%" y="869" width="0.0122%" height="15" fill="rgb(254,102,2)" fg:x="45576" fg:w="15"/><text x="37.1961%" y="879.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (15 samples, 0.01%)</title><rect x="36.9461%" y="853" width="0.0122%" height="15" fill="rgb(232,104,17)" fg:x="45576" fg:w="15"/><text x="37.1961%" y="863.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (15 samples, 0.01%)</title><rect x="36.9461%" y="837" width="0.0122%" height="15" fill="rgb(250,220,14)" fg:x="45576" fg:w="15"/><text x="37.1961%" y="847.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (2,049 samples, 1.66%)</title><rect x="35.3070%" y="901" width="1.6610%" height="15" fill="rgb(241,158,9)" fg:x="43554" fg:w="2049"/><text x="35.5570%" y="911.50"></text></g><g><title>leveldb::MemTable::Add (2,079 samples, 1.69%)</title><rect x="35.2843%" y="917" width="1.6853%" height="15" fill="rgb(246,9,43)" fg:x="43526" fg:w="2079"/><text x="35.5343%" y="927.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (2,235 samples, 1.81%)</title><rect x="35.1732%" y="965" width="1.8118%" height="15" fill="rgb(206,73,33)" fg:x="43389" fg:w="2235"/><text x="35.4232%" y="975.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (2,212 samples, 1.79%)</title><rect x="35.1919%" y="949" width="1.7932%" height="15" fill="rgb(222,79,8)" fg:x="43412" fg:w="2212"/><text x="35.4419%" y="959.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (2,114 samples, 1.71%)</title><rect x="35.2713%" y="933" width="1.7137%" height="15" fill="rgb(234,8,54)" fg:x="43510" fg:w="2114"/><text x="35.5213%" y="943.50"></text></g><g><title>[[ext4]] (15 samples, 0.01%)</title><rect x="36.9907%" y="757" width="0.0122%" height="15" fill="rgb(209,134,38)" fg:x="45631" fg:w="15"/><text x="37.2407%" y="767.50"></text></g><g><title>[[ext4]] (55 samples, 0.04%)</title><rect x="36.9891%" y="773" width="0.0446%" height="15" fill="rgb(230,127,29)" fg:x="45629" fg:w="55"/><text x="37.2391%" y="783.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="37.0029%" y="757" width="0.0308%" height="15" fill="rgb(242,44,41)" fg:x="45646" fg:w="38"/><text x="37.2529%" y="767.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="37.0029%" y="741" width="0.0308%" height="15" fill="rgb(222,56,43)" fg:x="45646" fg:w="38"/><text x="37.2529%" y="751.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="37.0045%" y="725" width="0.0292%" height="15" fill="rgb(238,39,47)" fg:x="45648" fg:w="36"/><text x="37.2545%" y="735.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="37.0118%" y="709" width="0.0219%" height="15" fill="rgb(226,79,43)" fg:x="45657" fg:w="27"/><text x="37.2618%" y="719.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="37.0191%" y="693" width="0.0146%" height="15" fill="rgb(242,105,53)" fg:x="45666" fg:w="18"/><text x="37.2691%" y="703.50"></text></g><g><title>Flush (64 samples, 0.05%)</title><rect x="36.9883%" y="933" width="0.0519%" height="15" fill="rgb(251,132,46)" fg:x="45628" fg:w="64"/><text x="37.2383%" y="943.50"></text></g><g><title>FlushBuffer (64 samples, 0.05%)</title><rect x="36.9883%" y="917" width="0.0519%" height="15" fill="rgb(231,77,14)" fg:x="45628" fg:w="64"/><text x="37.2383%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (64 samples, 0.05%)</title><rect x="36.9883%" y="901" width="0.0519%" height="15" fill="rgb(240,135,9)" fg:x="45628" fg:w="64"/><text x="37.2383%" y="911.50"></text></g><g><title>__GI___libc_write (64 samples, 0.05%)</title><rect x="36.9883%" y="885" width="0.0519%" height="15" fill="rgb(248,109,14)" fg:x="45628" fg:w="64"/><text x="37.2383%" y="895.50"></text></g><g><title>[unknown] (64 samples, 0.05%)</title><rect x="36.9883%" y="869" width="0.0519%" height="15" fill="rgb(227,146,52)" fg:x="45628" fg:w="64"/><text x="37.2383%" y="879.50"></text></g><g><title>[unknown] (64 samples, 0.05%)</title><rect x="36.9883%" y="853" width="0.0519%" height="15" fill="rgb(232,54,3)" fg:x="45628" fg:w="64"/><text x="37.2383%" y="863.50"></text></g><g><title>[unknown] (64 samples, 0.05%)</title><rect x="36.9883%" y="837" width="0.0519%" height="15" fill="rgb(229,201,43)" fg:x="45628" fg:w="64"/><text x="37.2383%" y="847.50"></text></g><g><title>[unknown] (64 samples, 0.05%)</title><rect x="36.9883%" y="821" width="0.0519%" height="15" fill="rgb(252,161,33)" fg:x="45628" fg:w="64"/><text x="37.2383%" y="831.50"></text></g><g><title>[[ext4]] (63 samples, 0.05%)</title><rect x="36.9891%" y="805" width="0.0511%" height="15" fill="rgb(226,146,40)" fg:x="45629" fg:w="63"/><text x="37.2391%" y="815.50"></text></g><g><title>[unknown] (63 samples, 0.05%)</title><rect x="36.9891%" y="789" width="0.0511%" height="15" fill="rgb(219,47,25)" fg:x="45629" fg:w="63"/><text x="37.2391%" y="799.50"></text></g><g><title>CDBWrapper::WriteBatch (2,305 samples, 1.87%)</title><rect x="35.1732%" y="997" width="1.8685%" height="15" fill="rgb(250,135,13)" fg:x="43389" fg:w="2305"/><text x="35.4232%" y="1007.50">C..</text></g><g><title>leveldb::DBImpl::Write (2,305 samples, 1.87%)</title><rect x="35.1732%" y="981" width="1.8685%" height="15" fill="rgb(219,229,18)" fg:x="43389" fg:w="2305"/><text x="35.4232%" y="991.50">l..</text></g><g><title>leveldb::log::Writer::AddRecord (70 samples, 0.06%)</title><rect x="36.9850%" y="965" width="0.0567%" height="15" fill="rgb(217,152,27)" fg:x="45624" fg:w="70"/><text x="37.2350%" y="975.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (69 samples, 0.06%)</title><rect x="36.9858%" y="949" width="0.0559%" height="15" fill="rgb(225,71,47)" fg:x="45625" fg:w="69"/><text x="37.2358%" y="959.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (15 samples, 0.01%)</title><rect x="37.0442%" y="869" width="0.0122%" height="15" fill="rgb(220,139,14)" fg:x="45697" fg:w="15"/><text x="37.2942%" y="879.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (15 samples, 0.01%)</title><rect x="37.0442%" y="853" width="0.0122%" height="15" fill="rgb(247,54,32)" fg:x="45697" fg:w="15"/><text x="37.2942%" y="863.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (15 samples, 0.01%)</title><rect x="37.0442%" y="837" width="0.0122%" height="15" fill="rgb(252,131,39)" fg:x="45697" fg:w="15"/><text x="37.2942%" y="847.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (15 samples, 0.01%)</title><rect x="37.0442%" y="821" width="0.0122%" height="15" fill="rgb(210,108,39)" fg:x="45697" fg:w="15"/><text x="37.2942%" y="831.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (15 samples, 0.01%)</title><rect x="37.0442%" y="805" width="0.0122%" height="15" fill="rgb(205,23,29)" fg:x="45697" fg:w="15"/><text x="37.2942%" y="815.50"></text></g><g><title>DataStream::write (15 samples, 0.01%)</title><rect x="37.0442%" y="789" width="0.0122%" height="15" fill="rgb(246,139,46)" fg:x="45697" fg:w="15"/><text x="37.2942%" y="799.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (15 samples, 0.01%)</title><rect x="37.0442%" y="773" width="0.0122%" height="15" fill="rgb(250,81,26)" fg:x="45697" fg:w="15"/><text x="37.2942%" y="783.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (27 samples, 0.02%)</title><rect x="37.0418%" y="997" width="0.0219%" height="15" fill="rgb(214,104,7)" fg:x="45694" fg:w="27"/><text x="37.2918%" y="1007.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (26 samples, 0.02%)</title><rect x="37.0426%" y="981" width="0.0211%" height="15" fill="rgb(233,189,8)" fg:x="45695" fg:w="26"/><text x="37.2926%" y="991.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (26 samples, 0.02%)</title><rect x="37.0426%" y="965" width="0.0211%" height="15" fill="rgb(228,141,17)" fg:x="45695" fg:w="26"/><text x="37.2926%" y="975.50"></text></g><g><title>Serialize&lt;DataStream&gt; (26 samples, 0.02%)</title><rect x="37.0426%" y="949" width="0.0211%" height="15" fill="rgb(247,157,1)" fg:x="45695" fg:w="26"/><text x="37.2926%" y="959.50"></text></g><g><title>Ser&lt;DataStream&gt; (26 samples, 0.02%)</title><rect x="37.0426%" y="933" width="0.0211%" height="15" fill="rgb(249,225,5)" fg:x="45695" fg:w="26"/><text x="37.2926%" y="943.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (26 samples, 0.02%)</title><rect x="37.0426%" y="917" width="0.0211%" height="15" fill="rgb(242,55,13)" fg:x="45695" fg:w="26"/><text x="37.2926%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (26 samples, 0.02%)</title><rect x="37.0426%" y="901" width="0.0211%" height="15" fill="rgb(230,49,50)" fg:x="45695" fg:w="26"/><text x="37.2926%" y="911.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (26 samples, 0.02%)</title><rect x="37.0426%" y="885" width="0.0211%" height="15" fill="rgb(241,111,38)" fg:x="45695" fg:w="26"/><text x="37.2926%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (19 samples, 0.02%)</title><rect x="37.0637%" y="789" width="0.0154%" height="15" fill="rgb(252,155,4)" fg:x="45721" fg:w="19"/><text x="37.3137%" y="799.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (19 samples, 0.02%)</title><rect x="37.0637%" y="773" width="0.0154%" height="15" fill="rgb(212,69,32)" fg:x="45721" fg:w="19"/><text x="37.3137%" y="783.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (19 samples, 0.02%)</title><rect x="37.0637%" y="757" width="0.0154%" height="15" fill="rgb(243,107,47)" fg:x="45721" fg:w="19"/><text x="37.3137%" y="767.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (19 samples, 0.02%)</title><rect x="37.0637%" y="741" width="0.0154%" height="15" fill="rgb(247,130,12)" fg:x="45721" fg:w="19"/><text x="37.3137%" y="751.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (19 samples, 0.02%)</title><rect x="37.0637%" y="725" width="0.0154%" height="15" fill="rgb(233,74,16)" fg:x="45721" fg:w="19"/><text x="37.3137%" y="735.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (19 samples, 0.02%)</title><rect x="37.0637%" y="709" width="0.0154%" height="15" fill="rgb(208,58,18)" fg:x="45721" fg:w="19"/><text x="37.3137%" y="719.50"></text></g><g><title>DataStream::write (19 samples, 0.02%)</title><rect x="37.0637%" y="693" width="0.0154%" height="15" fill="rgb(242,225,1)" fg:x="45721" fg:w="19"/><text x="37.3137%" y="703.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (19 samples, 0.02%)</title><rect x="37.0637%" y="677" width="0.0154%" height="15" fill="rgb(249,39,40)" fg:x="45721" fg:w="19"/><text x="37.3137%" y="687.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (25 samples, 0.02%)</title><rect x="37.0637%" y="837" width="0.0203%" height="15" fill="rgb(207,72,44)" fg:x="45721" fg:w="25"/><text x="37.3137%" y="847.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (25 samples, 0.02%)</title><rect x="37.0637%" y="821" width="0.0203%" height="15" fill="rgb(215,193,12)" fg:x="45721" fg:w="25"/><text x="37.3137%" y="831.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (25 samples, 0.02%)</title><rect x="37.0637%" y="805" width="0.0203%" height="15" fill="rgb(248,41,39)" fg:x="45721" fg:w="25"/><text x="37.3137%" y="815.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (47 samples, 0.04%)</title><rect x="37.0637%" y="933" width="0.0381%" height="15" fill="rgb(253,85,4)" fg:x="45721" fg:w="47"/><text x="37.3137%" y="943.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (47 samples, 0.04%)</title><rect x="37.0637%" y="917" width="0.0381%" height="15" fill="rgb(243,70,31)" fg:x="45721" fg:w="47"/><text x="37.3137%" y="927.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (47 samples, 0.04%)</title><rect x="37.0637%" y="901" width="0.0381%" height="15" fill="rgb(253,195,26)" fg:x="45721" fg:w="47"/><text x="37.3137%" y="911.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (47 samples, 0.04%)</title><rect x="37.0637%" y="885" width="0.0381%" height="15" fill="rgb(243,42,11)" fg:x="45721" fg:w="47"/><text x="37.3137%" y="895.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (47 samples, 0.04%)</title><rect x="37.0637%" y="869" width="0.0381%" height="15" fill="rgb(239,66,17)" fg:x="45721" fg:w="47"/><text x="37.3137%" y="879.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (47 samples, 0.04%)</title><rect x="37.0637%" y="853" width="0.0381%" height="15" fill="rgb(217,132,21)" fg:x="45721" fg:w="47"/><text x="37.3137%" y="863.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (22 samples, 0.02%)</title><rect x="37.0839%" y="837" width="0.0178%" height="15" fill="rgb(252,202,21)" fg:x="45746" fg:w="22"/><text x="37.3339%" y="847.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (22 samples, 0.02%)</title><rect x="37.0839%" y="821" width="0.0178%" height="15" fill="rgb(233,98,36)" fg:x="45746" fg:w="22"/><text x="37.3339%" y="831.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (22 samples, 0.02%)</title><rect x="37.0839%" y="805" width="0.0178%" height="15" fill="rgb(216,153,54)" fg:x="45746" fg:w="22"/><text x="37.3339%" y="815.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (72 samples, 0.06%)</title><rect x="37.1018%" y="885" width="0.0584%" height="15" fill="rgb(250,99,7)" fg:x="45768" fg:w="72"/><text x="37.3518%" y="895.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (72 samples, 0.06%)</title><rect x="37.1018%" y="869" width="0.0584%" height="15" fill="rgb(207,56,50)" fg:x="45768" fg:w="72"/><text x="37.3518%" y="879.50"></text></g><g><title>DataStream::write (72 samples, 0.06%)</title><rect x="37.1018%" y="853" width="0.0584%" height="15" fill="rgb(244,61,34)" fg:x="45768" fg:w="72"/><text x="37.3518%" y="863.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (72 samples, 0.06%)</title><rect x="37.1018%" y="837" width="0.0584%" height="15" fill="rgb(241,50,38)" fg:x="45768" fg:w="72"/><text x="37.3518%" y="847.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (70 samples, 0.06%)</title><rect x="37.1034%" y="821" width="0.0567%" height="15" fill="rgb(212,166,30)" fg:x="45770" fg:w="70"/><text x="37.3534%" y="831.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (67 samples, 0.05%)</title><rect x="37.1058%" y="805" width="0.0543%" height="15" fill="rgb(249,127,32)" fg:x="45773" fg:w="67"/><text x="37.3558%" y="815.50"></text></g><g><title>decltype  (49 samples, 0.04%)</title><rect x="37.1204%" y="789" width="0.0397%" height="15" fill="rgb(209,103,0)" fg:x="45791" fg:w="49"/><text x="37.3704%" y="799.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (49 samples, 0.04%)</title><rect x="37.1204%" y="773" width="0.0397%" height="15" fill="rgb(238,209,51)" fg:x="45791" fg:w="49"/><text x="37.3704%" y="783.50"></text></g><g><title>decltype (49 samples, 0.04%)</title><rect x="37.1204%" y="757" width="0.0397%" height="15" fill="rgb(237,56,23)" fg:x="45791" fg:w="49"/><text x="37.3704%" y="767.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (147 samples, 0.12%)</title><rect x="37.0637%" y="981" width="0.1192%" height="15" fill="rgb(215,153,46)" fg:x="45721" fg:w="147"/><text x="37.3137%" y="991.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (147 samples, 0.12%)</title><rect x="37.0637%" y="965" width="0.1192%" height="15" fill="rgb(224,49,31)" fg:x="45721" fg:w="147"/><text x="37.3137%" y="975.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (147 samples, 0.12%)</title><rect x="37.0637%" y="949" width="0.1192%" height="15" fill="rgb(250,18,42)" fg:x="45721" fg:w="147"/><text x="37.3137%" y="959.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (100 samples, 0.08%)</title><rect x="37.1018%" y="933" width="0.0811%" height="15" fill="rgb(215,176,39)" fg:x="45768" fg:w="100"/><text x="37.3518%" y="943.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (100 samples, 0.08%)</title><rect x="37.1018%" y="917" width="0.0811%" height="15" fill="rgb(223,77,29)" fg:x="45768" fg:w="100"/><text x="37.3518%" y="927.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (100 samples, 0.08%)</title><rect x="37.1018%" y="901" width="0.0811%" height="15" fill="rgb(234,94,52)" fg:x="45768" fg:w="100"/><text x="37.3518%" y="911.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (28 samples, 0.02%)</title><rect x="37.1601%" y="885" width="0.0227%" height="15" fill="rgb(220,154,50)" fg:x="45840" fg:w="28"/><text x="37.4101%" y="895.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (25 samples, 0.02%)</title><rect x="37.1626%" y="869" width="0.0203%" height="15" fill="rgb(212,11,10)" fg:x="45843" fg:w="25"/><text x="37.4126%" y="879.50"></text></g><g><title>decltype  (19 samples, 0.02%)</title><rect x="37.1674%" y="853" width="0.0154%" height="15" fill="rgb(205,166,19)" fg:x="45849" fg:w="19"/><text x="37.4174%" y="863.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (19 samples, 0.02%)</title><rect x="37.1674%" y="837" width="0.0154%" height="15" fill="rgb(244,198,16)" fg:x="45849" fg:w="19"/><text x="37.4174%" y="847.50"></text></g><g><title>decltype (19 samples, 0.02%)</title><rect x="37.1674%" y="821" width="0.0154%" height="15" fill="rgb(219,69,12)" fg:x="45849" fg:w="19"/><text x="37.4174%" y="831.50"></text></g><g><title>CCoinsViewDB::BatchWrite (13 samples, 0.01%)</title><rect x="37.1836%" y="757" width="0.0105%" height="15" fill="rgb(245,30,7)" fg:x="45869" fg:w="13"/><text x="37.4336%" y="767.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (13 samples, 0.01%)</title><rect x="37.1836%" y="741" width="0.0105%" height="15" fill="rgb(218,221,48)" fg:x="45869" fg:w="13"/><text x="37.4336%" y="751.50"></text></g><g><title>CCoinsViewDB::BatchWrite (2,668 samples, 2.16%)</title><rect x="35.0370%" y="1013" width="2.1628%" height="15" fill="rgb(216,66,15)" fg:x="43221" fg:w="2668"/><text x="35.2870%" y="1023.50">C..</text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (168 samples, 0.14%)</title><rect x="37.0637%" y="997" width="0.1362%" height="15" fill="rgb(226,122,50)" fg:x="45721" fg:w="168"/><text x="37.3137%" y="1007.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (21 samples, 0.02%)</title><rect x="37.1828%" y="981" width="0.0170%" height="15" fill="rgb(239,156,16)" fg:x="45868" fg:w="21"/><text x="37.4328%" y="991.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (21 samples, 0.02%)</title><rect x="37.1828%" y="965" width="0.0170%" height="15" fill="rgb(224,27,38)" fg:x="45868" fg:w="21"/><text x="37.4328%" y="975.50"></text></g><g><title>Serialize&lt;DataStream&gt; (21 samples, 0.02%)</title><rect x="37.1828%" y="949" width="0.0170%" height="15" fill="rgb(224,39,27)" fg:x="45868" fg:w="21"/><text x="37.4328%" y="959.50"></text></g><g><title>Ser&lt;DataStream&gt; (21 samples, 0.02%)</title><rect x="37.1828%" y="933" width="0.0170%" height="15" fill="rgb(215,92,29)" fg:x="45868" fg:w="21"/><text x="37.4328%" y="943.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (21 samples, 0.02%)</title><rect x="37.1828%" y="917" width="0.0170%" height="15" fill="rgb(207,159,16)" fg:x="45868" fg:w="21"/><text x="37.4328%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (21 samples, 0.02%)</title><rect x="37.1828%" y="901" width="0.0170%" height="15" fill="rgb(238,163,47)" fg:x="45868" fg:w="21"/><text x="37.4328%" y="911.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (21 samples, 0.02%)</title><rect x="37.1828%" y="885" width="0.0170%" height="15" fill="rgb(219,91,49)" fg:x="45868" fg:w="21"/><text x="37.4328%" y="895.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (20 samples, 0.02%)</title><rect x="37.1836%" y="869" width="0.0162%" height="15" fill="rgb(227,167,31)" fg:x="45869" fg:w="20"/><text x="37.4336%" y="879.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (20 samples, 0.02%)</title><rect x="37.1836%" y="853" width="0.0162%" height="15" fill="rgb(234,80,54)" fg:x="45869" fg:w="20"/><text x="37.4336%" y="863.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (20 samples, 0.02%)</title><rect x="37.1836%" y="837" width="0.0162%" height="15" fill="rgb(212,114,2)" fg:x="45869" fg:w="20"/><text x="37.4336%" y="847.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (20 samples, 0.02%)</title><rect x="37.1836%" y="821" width="0.0162%" height="15" fill="rgb(234,50,24)" fg:x="45869" fg:w="20"/><text x="37.4336%" y="831.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (20 samples, 0.02%)</title><rect x="37.1836%" y="805" width="0.0162%" height="15" fill="rgb(221,68,8)" fg:x="45869" fg:w="20"/><text x="37.4336%" y="815.50"></text></g><g><title>DataStream::write (20 samples, 0.02%)</title><rect x="37.1836%" y="789" width="0.0162%" height="15" fill="rgb(254,180,31)" fg:x="45869" fg:w="20"/><text x="37.4336%" y="799.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (20 samples, 0.02%)</title><rect x="37.1836%" y="773" width="0.0162%" height="15" fill="rgb(247,130,50)" fg:x="45869" fg:w="20"/><text x="37.4336%" y="783.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (13 samples, 0.01%)</title><rect x="37.2242%" y="965" width="0.0105%" height="15" fill="rgb(211,109,4)" fg:x="45919" fg:w="13"/><text x="37.4742%" y="975.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (49 samples, 0.04%)</title><rect x="37.2347%" y="949" width="0.0397%" height="15" fill="rgb(238,50,21)" fg:x="45932" fg:w="49"/><text x="37.4847%" y="959.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (49 samples, 0.04%)</title><rect x="37.2347%" y="933" width="0.0397%" height="15" fill="rgb(225,57,45)" fg:x="45932" fg:w="49"/><text x="37.4847%" y="943.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (49 samples, 0.04%)</title><rect x="37.2347%" y="917" width="0.0397%" height="15" fill="rgb(209,196,50)" fg:x="45932" fg:w="49"/><text x="37.4847%" y="927.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (36 samples, 0.03%)</title><rect x="37.2453%" y="901" width="0.0292%" height="15" fill="rgb(242,140,13)" fg:x="45945" fg:w="36"/><text x="37.4953%" y="911.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (36 samples, 0.03%)</title><rect x="37.2453%" y="885" width="0.0292%" height="15" fill="rgb(217,111,7)" fg:x="45945" fg:w="36"/><text x="37.4953%" y="895.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (36 samples, 0.03%)</title><rect x="37.2453%" y="869" width="0.0292%" height="15" fill="rgb(253,193,51)" fg:x="45945" fg:w="36"/><text x="37.4953%" y="879.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (13 samples, 0.01%)</title><rect x="37.2639%" y="853" width="0.0105%" height="15" fill="rgb(252,70,29)" fg:x="45968" fg:w="13"/><text x="37.5139%" y="863.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (61 samples, 0.05%)</title><rect x="37.2923%" y="837" width="0.0494%" height="15" fill="rgb(232,127,12)" fg:x="46003" fg:w="61"/><text x="37.5423%" y="847.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (85 samples, 0.07%)</title><rect x="37.2744%" y="853" width="0.0689%" height="15" fill="rgb(211,180,21)" fg:x="45981" fg:w="85"/><text x="37.5244%" y="863.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (235 samples, 0.19%)</title><rect x="37.2096%" y="1013" width="0.1905%" height="15" fill="rgb(229,72,13)" fg:x="45901" fg:w="235"/><text x="37.4596%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (235 samples, 0.19%)</title><rect x="37.2096%" y="997" width="0.1905%" height="15" fill="rgb(240,211,49)" fg:x="45901" fg:w="235"/><text x="37.4596%" y="1007.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (235 samples, 0.19%)</title><rect x="37.2096%" y="981" width="0.1905%" height="15" fill="rgb(219,149,40)" fg:x="45901" fg:w="235"/><text x="37.4596%" y="991.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (204 samples, 0.17%)</title><rect x="37.2347%" y="965" width="0.1654%" height="15" fill="rgb(210,127,46)" fg:x="45932" fg:w="204"/><text x="37.4847%" y="975.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (155 samples, 0.13%)</title><rect x="37.2744%" y="949" width="0.1257%" height="15" fill="rgb(220,106,7)" fg:x="45981" fg:w="155"/><text x="37.5244%" y="959.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (155 samples, 0.13%)</title><rect x="37.2744%" y="933" width="0.1257%" height="15" fill="rgb(249,31,22)" fg:x="45981" fg:w="155"/><text x="37.5244%" y="943.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (155 samples, 0.13%)</title><rect x="37.2744%" y="917" width="0.1257%" height="15" fill="rgb(253,1,49)" fg:x="45981" fg:w="155"/><text x="37.5244%" y="927.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (155 samples, 0.13%)</title><rect x="37.2744%" y="901" width="0.1257%" height="15" fill="rgb(227,144,33)" fg:x="45981" fg:w="155"/><text x="37.5244%" y="911.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (155 samples, 0.13%)</title><rect x="37.2744%" y="885" width="0.1257%" height="15" fill="rgb(249,163,44)" fg:x="45981" fg:w="155"/><text x="37.5244%" y="895.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (155 samples, 0.13%)</title><rect x="37.2744%" y="869" width="0.1257%" height="15" fill="rgb(234,15,39)" fg:x="45981" fg:w="155"/><text x="37.5244%" y="879.50"></text></g><g><title>Coin::~Coin (70 samples, 0.06%)</title><rect x="37.3433%" y="853" width="0.0567%" height="15" fill="rgb(207,66,16)" fg:x="46066" fg:w="70"/><text x="37.5933%" y="863.50"></text></g><g><title>CTxOut::~CTxOut (70 samples, 0.06%)</title><rect x="37.3433%" y="837" width="0.0567%" height="15" fill="rgb(233,112,24)" fg:x="46066" fg:w="70"/><text x="37.5933%" y="847.50"></text></g><g><title>CScript::~CScript (70 samples, 0.06%)</title><rect x="37.3433%" y="821" width="0.0567%" height="15" fill="rgb(230,90,22)" fg:x="46066" fg:w="70"/><text x="37.5933%" y="831.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (70 samples, 0.06%)</title><rect x="37.3433%" y="805" width="0.0567%" height="15" fill="rgb(229,61,13)" fg:x="46066" fg:w="70"/><text x="37.5933%" y="815.50"></text></g><g><title>CCoinsViewCache::Flush (2,944 samples, 2.39%)</title><rect x="35.0241%" y="1029" width="2.3865%" height="15" fill="rgb(225,57,24)" fg:x="43205" fg:w="2944"/><text x="35.2741%" y="1039.50">CC..</text></g><g><title>Chainstate::FlushStateToDisk (2,950 samples, 2.39%)</title><rect x="35.0241%" y="1045" width="2.3914%" height="15" fill="rgb(208,169,48)" fg:x="43205" fg:w="2950"/><text x="35.2741%" y="1055.50">Ch..</text></g><g><title>SipHashUint256Extra (21 samples, 0.02%)</title><rect x="37.4301%" y="1045" width="0.0170%" height="15" fill="rgb(244,218,51)" fg:x="46173" fg:w="21"/><text x="37.6801%" y="1055.50"></text></g><g><title>ValidationSignals::BlockChecked (13 samples, 0.01%)</title><rect x="37.4471%" y="1045" width="0.0105%" height="15" fill="rgb(214,148,10)" fg:x="46194" fg:w="13"/><text x="37.6971%" y="1055.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [13], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="37.4471%" y="1029" width="0.0105%" height="15" fill="rgb(225,174,27)" fg:x="46194" fg:w="13"/><text x="37.6971%" y="1039.50"></text></g><g><title>BCLog::Logger::LogPrintStr (17 samples, 0.01%)</title><rect x="37.4795%" y="1029" width="0.0138%" height="15" fill="rgb(230,96,26)" fg:x="46234" fg:w="17"/><text x="37.7295%" y="1039.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (17 samples, 0.01%)</title><rect x="37.4795%" y="1013" width="0.0138%" height="15" fill="rgb(232,10,30)" fg:x="46234" fg:w="17"/><text x="37.7295%" y="1023.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (15 samples, 0.01%)</title><rect x="37.4812%" y="997" width="0.0122%" height="15" fill="rgb(222,8,50)" fg:x="46236" fg:w="15"/><text x="37.7312%" y="1007.50"></text></g><g><title>_IO_fwrite (15 samples, 0.01%)</title><rect x="37.4812%" y="981" width="0.0122%" height="15" fill="rgb(213,81,27)" fg:x="46236" fg:w="15"/><text x="37.7312%" y="991.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (15 samples, 0.01%)</title><rect x="37.4812%" y="965" width="0.0122%" height="15" fill="rgb(245,50,10)" fg:x="46236" fg:w="15"/><text x="37.7312%" y="975.50"></text></g><g><title>new_do_write (15 samples, 0.01%)</title><rect x="37.4812%" y="949" width="0.0122%" height="15" fill="rgb(216,100,18)" fg:x="46236" fg:w="15"/><text x="37.7312%" y="959.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (15 samples, 0.01%)</title><rect x="37.4812%" y="933" width="0.0122%" height="15" fill="rgb(236,147,54)" fg:x="46236" fg:w="15"/><text x="37.7312%" y="943.50"></text></g><g><title>__GI___libc_write (15 samples, 0.01%)</title><rect x="37.4812%" y="917" width="0.0122%" height="15" fill="rgb(205,143,26)" fg:x="46236" fg:w="15"/><text x="37.7312%" y="927.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="37.4812%" y="901" width="0.0122%" height="15" fill="rgb(236,26,9)" fg:x="46236" fg:w="15"/><text x="37.7312%" y="911.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="37.4812%" y="885" width="0.0122%" height="15" fill="rgb(221,165,53)" fg:x="46236" fg:w="15"/><text x="37.7312%" y="895.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="37.4812%" y="869" width="0.0122%" height="15" fill="rgb(214,110,17)" fg:x="46236" fg:w="15"/><text x="37.7312%" y="879.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (20 samples, 0.02%)</title><rect x="37.4795%" y="1045" width="0.0162%" height="15" fill="rgb(237,197,12)" fg:x="46234" fg:w="20"/><text x="37.7295%" y="1055.50"></text></g><g><title>Chainstate::ActivateBestChainStep (33,989 samples, 27.55%)</title><rect x="9.9491%" y="1077" width="27.5531%" height="15" fill="rgb(205,84,17)" fg:x="12273" fg:w="33989"/><text x="10.1991%" y="1087.50">Chainstate::ActivateBestChainStep</text></g><g><title>Chainstate::ConnectTip (33,989 samples, 27.55%)</title><rect x="9.9491%" y="1061" width="27.5531%" height="15" fill="rgb(237,18,45)" fg:x="12273" fg:w="33989"/><text x="10.1991%" y="1071.50">Chainstate::ConnectTip</text></g><g><title>cfree@GLIBC_2.2.5 (30 samples, 0.02%)</title><rect x="37.5079%" y="1013" width="0.0243%" height="15" fill="rgb(221,87,14)" fg:x="46269" fg:w="30"/><text x="37.7579%" y="1023.50"></text></g><g><title>_int_free (30 samples, 0.02%)</title><rect x="37.5079%" y="997" width="0.0243%" height="15" fill="rgb(238,186,15)" fg:x="46269" fg:w="30"/><text x="37.7579%" y="1007.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (30 samples, 0.02%)</title><rect x="37.5079%" y="981" width="0.0243%" height="15" fill="rgb(208,115,11)" fg:x="46269" fg:w="30"/><text x="37.7579%" y="991.50"></text></g><g><title>malloc_consolidate (30 samples, 0.02%)</title><rect x="37.5079%" y="965" width="0.0243%" height="15" fill="rgb(254,175,0)" fg:x="46269" fg:w="30"/><text x="37.7579%" y="975.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (38 samples, 0.03%)</title><rect x="37.5022%" y="1045" width="0.0308%" height="15" fill="rgb(227,24,42)" fg:x="46262" fg:w="38"/><text x="37.7522%" y="1055.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (31 samples, 0.03%)</title><rect x="37.5079%" y="1029" width="0.0251%" height="15" fill="rgb(223,211,37)" fg:x="46269" fg:w="31"/><text x="37.7579%" y="1039.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (13 samples, 0.01%)</title><rect x="37.5444%" y="981" width="0.0105%" height="15" fill="rgb(235,49,27)" fg:x="46314" fg:w="13"/><text x="37.7944%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (13 samples, 0.01%)</title><rect x="37.5444%" y="965" width="0.0105%" height="15" fill="rgb(254,97,51)" fg:x="46314" fg:w="13"/><text x="37.7944%" y="975.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (32 samples, 0.03%)</title><rect x="37.5363%" y="997" width="0.0259%" height="15" fill="rgb(249,51,40)" fg:x="46304" fg:w="32"/><text x="37.7863%" y="1007.50"></text></g><g><title>leveldb::WriteBatch::Delete (14 samples, 0.01%)</title><rect x="37.5622%" y="997" width="0.0113%" height="15" fill="rgb(210,128,45)" fg:x="46336" fg:w="14"/><text x="37.8122%" y="1007.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (13 samples, 0.01%)</title><rect x="37.5630%" y="981" width="0.0105%" height="15" fill="rgb(224,137,50)" fg:x="46337" fg:w="13"/><text x="37.8130%" y="991.50"></text></g><g><title>CDBBatch::EraseImpl (74 samples, 0.06%)</title><rect x="37.5347%" y="1013" width="0.0600%" height="15" fill="rgb(242,15,9)" fg:x="46302" fg:w="74"/><text x="37.7847%" y="1023.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (26 samples, 0.02%)</title><rect x="37.5736%" y="997" width="0.0211%" height="15" fill="rgb(233,187,41)" fg:x="46350" fg:w="26"/><text x="37.8236%" y="1007.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (20 samples, 0.02%)</title><rect x="37.5784%" y="981" width="0.0162%" height="15" fill="rgb(227,2,29)" fg:x="46356" fg:w="20"/><text x="37.8284%" y="991.50"></text></g><g><title>decltype  (13 samples, 0.01%)</title><rect x="37.5841%" y="965" width="0.0105%" height="15" fill="rgb(222,70,3)" fg:x="46363" fg:w="13"/><text x="37.8341%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (13 samples, 0.01%)</title><rect x="37.5841%" y="949" width="0.0105%" height="15" fill="rgb(213,11,42)" fg:x="46363" fg:w="13"/><text x="37.8341%" y="959.50"></text></g><g><title>decltype (13 samples, 0.01%)</title><rect x="37.5841%" y="933" width="0.0105%" height="15" fill="rgb(225,150,9)" fg:x="46363" fg:w="13"/><text x="37.8341%" y="943.50"></text></g><g><title>DataStream::Xor (22 samples, 0.02%)</title><rect x="37.5971%" y="965" width="0.0178%" height="15" fill="rgb(230,162,45)" fg:x="46379" fg:w="22"/><text x="37.8471%" y="975.50"></text></g><g><title>util::Xor (22 samples, 0.02%)</title><rect x="37.5971%" y="949" width="0.0178%" height="15" fill="rgb(222,14,52)" fg:x="46379" fg:w="22"/><text x="37.8471%" y="959.50"></text></g><g><title>CDBBatch::WriteImpl (24 samples, 0.02%)</title><rect x="37.5963%" y="981" width="0.0195%" height="15" fill="rgb(254,198,14)" fg:x="46378" fg:w="24"/><text x="37.8463%" y="991.50"></text></g><g><title>CDBBatch::WriteImpl (16 samples, 0.01%)</title><rect x="37.6157%" y="965" width="0.0130%" height="15" fill="rgb(220,217,30)" fg:x="46402" fg:w="16"/><text x="37.8657%" y="975.50"></text></g><g><title>DataStream::Xor (16 samples, 0.01%)</title><rect x="37.6157%" y="949" width="0.0130%" height="15" fill="rgb(215,146,41)" fg:x="46402" fg:w="16"/><text x="37.8657%" y="959.50"></text></g><g><title>util::Xor (15 samples, 0.01%)</title><rect x="37.6165%" y="933" width="0.0122%" height="15" fill="rgb(217,27,36)" fg:x="46403" fg:w="15"/><text x="37.8665%" y="943.50"></text></g><g><title>leveldb::PutVarint32 (19 samples, 0.02%)</title><rect x="37.6157%" y="981" width="0.0154%" height="15" fill="rgb(219,218,39)" fg:x="46402" fg:w="19"/><text x="37.8657%" y="991.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (59 samples, 0.05%)</title><rect x="37.5963%" y="997" width="0.0478%" height="15" fill="rgb(219,4,42)" fg:x="46378" fg:w="59"/><text x="37.8463%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (14 samples, 0.01%)</title><rect x="37.6327%" y="981" width="0.0113%" height="15" fill="rgb(249,119,36)" fg:x="46423" fg:w="14"/><text x="37.8827%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (14 samples, 0.01%)</title><rect x="37.6327%" y="965" width="0.0113%" height="15" fill="rgb(209,23,33)" fg:x="46423" fg:w="14"/><text x="37.8827%" y="975.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (15 samples, 0.01%)</title><rect x="37.6571%" y="965" width="0.0122%" height="15" fill="rgb(211,10,0)" fg:x="46453" fg:w="15"/><text x="37.9071%" y="975.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (15 samples, 0.01%)</title><rect x="37.6571%" y="949" width="0.0122%" height="15" fill="rgb(208,99,37)" fg:x="46453" fg:w="15"/><text x="37.9071%" y="959.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (27 samples, 0.02%)</title><rect x="37.6514%" y="981" width="0.0219%" height="15" fill="rgb(213,132,31)" fg:x="46446" fg:w="27"/><text x="37.9014%" y="991.50"></text></g><g><title>leveldb::WriteBatch::Put (46 samples, 0.04%)</title><rect x="37.6449%" y="997" width="0.0373%" height="15" fill="rgb(243,129,40)" fg:x="46438" fg:w="46"/><text x="37.8949%" y="1007.50"></text></g><g><title>CDBBatch::WriteImpl (119 samples, 0.10%)</title><rect x="37.5946%" y="1013" width="0.0965%" height="15" fill="rgb(210,66,33)" fg:x="46376" fg:w="119"/><text x="37.8446%" y="1023.50"></text></g><g><title>CCoinsViewDB::BatchWrite (264 samples, 0.21%)</title><rect x="37.5338%" y="1029" width="0.2140%" height="15" fill="rgb(209,189,4)" fg:x="46301" fg:w="264"/><text x="37.7838%" y="1039.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (67 samples, 0.05%)</title><rect x="37.6935%" y="1013" width="0.0543%" height="15" fill="rgb(214,107,37)" fg:x="46498" fg:w="67"/><text x="37.9435%" y="1023.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (65 samples, 0.05%)</title><rect x="37.6952%" y="997" width="0.0527%" height="15" fill="rgb(245,88,54)" fg:x="46500" fg:w="65"/><text x="37.9452%" y="1007.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (40 samples, 0.03%)</title><rect x="37.7560%" y="981" width="0.0324%" height="15" fill="rgb(205,146,20)" fg:x="46575" fg:w="40"/><text x="38.0060%" y="991.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (14 samples, 0.01%)</title><rect x="37.8095%" y="949" width="0.0113%" height="15" fill="rgb(220,161,25)" fg:x="46641" fg:w="14"/><text x="38.0595%" y="959.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (52 samples, 0.04%)</title><rect x="37.7941%" y="965" width="0.0422%" height="15" fill="rgb(215,152,15)" fg:x="46622" fg:w="52"/><text x="38.0441%" y="975.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (28 samples, 0.02%)</title><rect x="37.8411%" y="965" width="0.0227%" height="15" fill="rgb(233,192,44)" fg:x="46680" fg:w="28"/><text x="38.0911%" y="975.50"></text></g><g><title>leveldb::Arena::Allocate (24 samples, 0.02%)</title><rect x="37.8865%" y="933" width="0.0195%" height="15" fill="rgb(240,170,46)" fg:x="46736" fg:w="24"/><text x="38.1365%" y="943.50"></text></g><g><title>leveldb::Arena::AllocateFallback (24 samples, 0.02%)</title><rect x="37.8865%" y="917" width="0.0195%" height="15" fill="rgb(207,104,33)" fg:x="46736" fg:w="24"/><text x="38.1365%" y="927.50"></text></g><g><title>leveldb::Arena::AllocateFallback (24 samples, 0.02%)</title><rect x="37.8865%" y="901" width="0.0195%" height="15" fill="rgb(219,21,39)" fg:x="46736" fg:w="24"/><text x="38.1365%" y="911.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (24 samples, 0.02%)</title><rect x="37.8865%" y="885" width="0.0195%" height="15" fill="rgb(214,133,29)" fg:x="46736" fg:w="24"/><text x="38.1365%" y="895.50"></text></g><g><title>operator new (24 samples, 0.02%)</title><rect x="37.8865%" y="869" width="0.0195%" height="15" fill="rgb(226,93,6)" fg:x="46736" fg:w="24"/><text x="38.1365%" y="879.50"></text></g><g><title>malloc (24 samples, 0.02%)</title><rect x="37.8865%" y="853" width="0.0195%" height="15" fill="rgb(252,222,34)" fg:x="46736" fg:w="24"/><text x="38.1365%" y="863.50"></text></g><g><title>_int_malloc (24 samples, 0.02%)</title><rect x="37.8865%" y="837" width="0.0195%" height="15" fill="rgb(252,92,48)" fg:x="46736" fg:w="24"/><text x="38.1365%" y="847.50"></text></g><g><title>sysmalloc (24 samples, 0.02%)</title><rect x="37.8865%" y="821" width="0.0195%" height="15" fill="rgb(245,223,24)" fg:x="46736" fg:w="24"/><text x="38.1365%" y="831.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (52 samples, 0.04%)</title><rect x="37.9140%" y="933" width="0.0422%" height="15" fill="rgb(205,176,3)" fg:x="46770" fg:w="52"/><text x="38.1640%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (89 samples, 0.07%)</title><rect x="37.9659%" y="917" width="0.0721%" height="15" fill="rgb(235,151,15)" fg:x="46834" fg:w="89"/><text x="38.2159%" y="927.50"></text></g><g><title>leveldb::Slice::compare (31 samples, 0.03%)</title><rect x="38.0129%" y="901" width="0.0251%" height="15" fill="rgb(237,209,11)" fg:x="46892" fg:w="31"/><text x="38.2629%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (70 samples, 0.06%)</title><rect x="38.0502%" y="917" width="0.0567%" height="15" fill="rgb(243,227,24)" fg:x="46938" fg:w="70"/><text x="38.3002%" y="927.50"></text></g><g><title>GetLengthPrefixedSlice (218 samples, 0.18%)</title><rect x="38.6047%" y="901" width="0.1767%" height="15" fill="rgb(239,193,16)" fg:x="47622" fg:w="218"/><text x="38.8547%" y="911.50"></text></g><g><title>leveldb::GetVarint32Ptr (175 samples, 0.14%)</title><rect x="38.6396%" y="885" width="0.1419%" height="15" fill="rgb(231,27,9)" fg:x="47665" fg:w="175"/><text x="38.8896%" y="895.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (834 samples, 0.68%)</title><rect x="38.1102%" y="917" width="0.6761%" height="15" fill="rgb(219,169,10)" fg:x="47012" fg:w="834"/><text x="38.3602%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (19 samples, 0.02%)</title><rect x="38.7912%" y="885" width="0.0154%" height="15" fill="rgb(244,229,43)" fg:x="47852" fg:w="19"/><text x="39.0412%" y="895.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (47 samples, 0.04%)</title><rect x="38.7879%" y="901" width="0.0381%" height="15" fill="rgb(254,38,20)" fg:x="47848" fg:w="47"/><text x="39.0379%" y="911.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (24 samples, 0.02%)</title><rect x="38.8066%" y="885" width="0.0195%" height="15" fill="rgb(250,47,30)" fg:x="47871" fg:w="24"/><text x="39.0566%" y="895.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (51 samples, 0.04%)</title><rect x="38.7863%" y="917" width="0.0413%" height="15" fill="rgb(224,124,36)" fg:x="47846" fg:w="51"/><text x="39.0363%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (65 samples, 0.05%)</title><rect x="38.8933%" y="885" width="0.0527%" height="15" fill="rgb(246,68,51)" fg:x="47978" fg:w="65"/><text x="39.1433%" y="895.50"></text></g><g><title>leveldb::Slice::compare (30 samples, 0.02%)</title><rect x="38.9217%" y="869" width="0.0243%" height="15" fill="rgb(253,43,49)" fg:x="48013" fg:w="30"/><text x="39.1717%" y="879.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (60 samples, 0.05%)</title><rect x="38.9468%" y="885" width="0.0486%" height="15" fill="rgb(219,54,36)" fg:x="48044" fg:w="60"/><text x="39.1968%" y="895.50"></text></g><g><title>GetLengthPrefixedSlice (82 samples, 0.07%)</title><rect x="39.1868%" y="869" width="0.0665%" height="15" fill="rgb(227,133,34)" fg:x="48340" fg:w="82"/><text x="39.4368%" y="879.50"></text></g><g><title>leveldb::GetVarint32Ptr (66 samples, 0.05%)</title><rect x="39.1997%" y="853" width="0.0535%" height="15" fill="rgb(247,227,15)" fg:x="48356" fg:w="66"/><text x="39.4497%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (28 samples, 0.02%)</title><rect x="39.2630%" y="869" width="0.0227%" height="15" fill="rgb(229,96,14)" fg:x="48434" fg:w="28"/><text x="39.5130%" y="879.50"></text></g><g><title>__memcmp_evex_movbe (19 samples, 0.02%)</title><rect x="39.3870%" y="821" width="0.0154%" height="15" fill="rgb(220,79,17)" fg:x="48587" fg:w="19"/><text x="39.6370%" y="831.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (94 samples, 0.08%)</title><rect x="39.3294%" y="853" width="0.0762%" height="15" fill="rgb(205,131,53)" fg:x="48516" fg:w="94"/><text x="39.5794%" y="863.50"></text></g><g><title>leveldb::Slice::compare (52 samples, 0.04%)</title><rect x="39.3635%" y="837" width="0.0422%" height="15" fill="rgb(209,50,29)" fg:x="48558" fg:w="52"/><text x="39.6135%" y="847.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (98 samples, 0.08%)</title><rect x="39.4113%" y="853" width="0.0794%" height="15" fill="rgb(245,86,46)" fg:x="48617" fg:w="98"/><text x="39.6613%" y="863.50"></text></g><g><title>leveldb::ExtractUserKey (18 samples, 0.01%)</title><rect x="39.4762%" y="837" width="0.0146%" height="15" fill="rgb(235,66,46)" fg:x="48697" fg:w="18"/><text x="39.7262%" y="847.50"></text></g><g><title>GetLengthPrefixedSlice (57 samples, 0.05%)</title><rect x="39.5686%" y="837" width="0.0462%" height="15" fill="rgb(232,148,31)" fg:x="48811" fg:w="57"/><text x="39.8186%" y="847.50"></text></g><g><title>leveldb::GetVarint32Ptr (42 samples, 0.03%)</title><rect x="39.5807%" y="821" width="0.0340%" height="15" fill="rgb(217,149,8)" fg:x="48826" fg:w="42"/><text x="39.8307%" y="831.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (151 samples, 0.12%)</title><rect x="39.4956%" y="853" width="0.1224%" height="15" fill="rgb(209,183,11)" fg:x="48721" fg:w="151"/><text x="39.7456%" y="863.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (13 samples, 0.01%)</title><rect x="39.6383%" y="837" width="0.0105%" height="15" fill="rgb(208,55,20)" fg:x="48897" fg:w="13"/><text x="39.8883%" y="847.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (43 samples, 0.03%)</title><rect x="39.6180%" y="853" width="0.0349%" height="15" fill="rgb(218,39,14)" fg:x="48872" fg:w="43"/><text x="39.8680%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (451 samples, 0.37%)</title><rect x="39.2889%" y="869" width="0.3656%" height="15" fill="rgb(216,169,33)" fg:x="48466" fg:w="451"/><text x="39.5389%" y="879.50"></text></g><g><title>GetLengthPrefixedSlice (139 samples, 0.11%)</title><rect x="39.7720%" y="853" width="0.1127%" height="15" fill="rgb(233,80,24)" fg:x="49062" fg:w="139"/><text x="40.0220%" y="863.50"></text></g><g><title>leveldb::GetVarint32Ptr (113 samples, 0.09%)</title><rect x="39.7931%" y="837" width="0.0916%" height="15" fill="rgb(213,179,31)" fg:x="49088" fg:w="113"/><text x="40.0431%" y="847.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (298 samples, 0.24%)</title><rect x="39.6610%" y="869" width="0.2416%" height="15" fill="rgb(209,19,5)" fg:x="48925" fg:w="298"/><text x="39.9110%" y="879.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (22 samples, 0.02%)</title><rect x="39.8847%" y="853" width="0.0178%" height="15" fill="rgb(219,18,35)" fg:x="49201" fg:w="22"/><text x="40.1347%" y="863.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (19 samples, 0.02%)</title><rect x="39.9139%" y="853" width="0.0154%" height="15" fill="rgb(209,169,16)" fg:x="49237" fg:w="19"/><text x="40.1639%" y="863.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (34 samples, 0.03%)</title><rect x="39.9026%" y="869" width="0.0276%" height="15" fill="rgb(245,90,51)" fg:x="49223" fg:w="34"/><text x="40.1526%" y="879.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1,150 samples, 0.93%)</title><rect x="38.9995%" y="885" width="0.9322%" height="15" fill="rgb(220,99,45)" fg:x="48109" fg:w="1150"/><text x="39.2495%" y="895.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (50 samples, 0.04%)</title><rect x="39.9731%" y="869" width="0.0405%" height="15" fill="rgb(249,89,25)" fg:x="49310" fg:w="50"/><text x="40.2231%" y="879.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (119 samples, 0.10%)</title><rect x="39.9317%" y="885" width="0.0965%" height="15" fill="rgb(239,193,0)" fg:x="49259" fg:w="119"/><text x="40.1817%" y="895.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (18 samples, 0.01%)</title><rect x="40.0136%" y="869" width="0.0146%" height="15" fill="rgb(231,126,1)" fg:x="49360" fg:w="18"/><text x="40.2636%" y="879.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (17 samples, 0.01%)</title><rect x="40.0144%" y="853" width="0.0138%" height="15" fill="rgb(243,166,3)" fg:x="49361" fg:w="17"/><text x="40.2644%" y="863.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (17 samples, 0.01%)</title><rect x="40.0144%" y="837" width="0.0138%" height="15" fill="rgb(223,22,34)" fg:x="49361" fg:w="17"/><text x="40.2644%" y="847.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1,447 samples, 1.17%)</title><rect x="38.8609%" y="901" width="1.1730%" height="15" fill="rgb(251,52,51)" fg:x="47938" fg:w="1447"/><text x="39.1109%" y="911.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,510 samples, 1.22%)</title><rect x="38.8276%" y="917" width="1.2241%" height="15" fill="rgb(221,165,28)" fg:x="47897" fg:w="1510"/><text x="39.0776%" y="927.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (22 samples, 0.02%)</title><rect x="40.0339%" y="901" width="0.0178%" height="15" fill="rgb(218,121,47)" fg:x="49385" fg:w="22"/><text x="40.2839%" y="911.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (21 samples, 0.02%)</title><rect x="40.0347%" y="885" width="0.0170%" height="15" fill="rgb(209,120,9)" fg:x="49386" fg:w="21"/><text x="40.2847%" y="895.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (21 samples, 0.02%)</title><rect x="40.0347%" y="869" width="0.0170%" height="15" fill="rgb(236,68,12)" fg:x="49386" fg:w="21"/><text x="40.2847%" y="879.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (22 samples, 0.02%)</title><rect x="40.0517%" y="917" width="0.0178%" height="15" fill="rgb(225,194,26)" fg:x="49407" fg:w="22"/><text x="40.3017%" y="927.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (17 samples, 0.01%)</title><rect x="40.0558%" y="901" width="0.0138%" height="15" fill="rgb(231,84,39)" fg:x="49412" fg:w="17"/><text x="40.3058%" y="911.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (2,599 samples, 2.11%)</title><rect x="37.9651%" y="933" width="2.1069%" height="15" fill="rgb(210,11,45)" fg:x="46833" fg:w="2599"/><text x="38.2151%" y="943.50">l..</text></g><g><title>leveldb::MemTable::Add (2,706 samples, 2.19%)</title><rect x="37.8816%" y="949" width="2.1936%" height="15" fill="rgb(224,54,52)" fg:x="46730" fg:w="2706"/><text x="38.1316%" y="959.50">l..</text></g><g><title>leveldb::WriteBatchInternal::InsertInto (2,887 samples, 2.34%)</title><rect x="37.7527%" y="997" width="2.3403%" height="15" fill="rgb(238,102,14)" fg:x="46571" fg:w="2887"/><text x="38.0027%" y="1007.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (2,842 samples, 2.30%)</title><rect x="37.7892%" y="981" width="2.3039%" height="15" fill="rgb(243,160,52)" fg:x="46616" fg:w="2842"/><text x="38.0392%" y="991.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (2,743 samples, 2.22%)</title><rect x="37.8695%" y="965" width="2.2236%" height="15" fill="rgb(216,114,19)" fg:x="46715" fg:w="2743"/><text x="38.1195%" y="975.50">l..</text></g><g><title>[[ext4]] (18 samples, 0.01%)</title><rect x="40.0987%" y="773" width="0.0146%" height="15" fill="rgb(244,166,37)" fg:x="49465" fg:w="18"/><text x="40.3487%" y="783.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="40.1028%" y="757" width="0.0105%" height="15" fill="rgb(246,29,44)" fg:x="49470" fg:w="13"/><text x="40.3528%" y="767.50"></text></g><g><title>[[ext4]] (33 samples, 0.03%)</title><rect x="40.0979%" y="789" width="0.0268%" height="15" fill="rgb(215,56,53)" fg:x="49464" fg:w="33"/><text x="40.3479%" y="799.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="40.1133%" y="773" width="0.0113%" height="15" fill="rgb(217,60,2)" fg:x="49483" fg:w="14"/><text x="40.3633%" y="783.50"></text></g><g><title>[[ext4]] (83 samples, 0.07%)</title><rect x="40.0963%" y="805" width="0.0673%" height="15" fill="rgb(207,26,24)" fg:x="49462" fg:w="83"/><text x="40.3463%" y="815.50"></text></g><g><title>[unknown] (48 samples, 0.04%)</title><rect x="40.1247%" y="789" width="0.0389%" height="15" fill="rgb(252,210,15)" fg:x="49497" fg:w="48"/><text x="40.3747%" y="799.50"></text></g><g><title>[unknown] (48 samples, 0.04%)</title><rect x="40.1247%" y="773" width="0.0389%" height="15" fill="rgb(253,209,26)" fg:x="49497" fg:w="48"/><text x="40.3747%" y="783.50"></text></g><g><title>[unknown] (45 samples, 0.04%)</title><rect x="40.1271%" y="757" width="0.0365%" height="15" fill="rgb(238,170,14)" fg:x="49500" fg:w="45"/><text x="40.3771%" y="767.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="40.1336%" y="741" width="0.0300%" height="15" fill="rgb(216,178,15)" fg:x="49508" fg:w="37"/><text x="40.3836%" y="751.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="40.1433%" y="725" width="0.0203%" height="15" fill="rgb(250,197,2)" fg:x="49520" fg:w="25"/><text x="40.3933%" y="735.50"></text></g><g><title>[[ext4]] (91 samples, 0.07%)</title><rect x="40.0955%" y="837" width="0.0738%" height="15" fill="rgb(212,70,42)" fg:x="49461" fg:w="91"/><text x="40.3455%" y="847.50"></text></g><g><title>[unknown] (91 samples, 0.07%)</title><rect x="40.0955%" y="821" width="0.0738%" height="15" fill="rgb(227,213,9)" fg:x="49461" fg:w="91"/><text x="40.3455%" y="831.50"></text></g><g><title>Flush (93 samples, 0.08%)</title><rect x="40.0955%" y="965" width="0.0754%" height="15" fill="rgb(245,99,25)" fg:x="49461" fg:w="93"/><text x="40.3455%" y="975.50"></text></g><g><title>FlushBuffer (93 samples, 0.08%)</title><rect x="40.0955%" y="949" width="0.0754%" height="15" fill="rgb(250,82,29)" fg:x="49461" fg:w="93"/><text x="40.3455%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (93 samples, 0.08%)</title><rect x="40.0955%" y="933" width="0.0754%" height="15" fill="rgb(241,226,54)" fg:x="49461" fg:w="93"/><text x="40.3455%" y="943.50"></text></g><g><title>__GI___libc_write (93 samples, 0.08%)</title><rect x="40.0955%" y="917" width="0.0754%" height="15" fill="rgb(221,99,41)" fg:x="49461" fg:w="93"/><text x="40.3455%" y="927.50"></text></g><g><title>[unknown] (93 samples, 0.08%)</title><rect x="40.0955%" y="901" width="0.0754%" height="15" fill="rgb(213,90,21)" fg:x="49461" fg:w="93"/><text x="40.3455%" y="911.50"></text></g><g><title>[unknown] (93 samples, 0.08%)</title><rect x="40.0955%" y="885" width="0.0754%" height="15" fill="rgb(205,208,24)" fg:x="49461" fg:w="93"/><text x="40.3455%" y="895.50"></text></g><g><title>[unknown] (93 samples, 0.08%)</title><rect x="40.0955%" y="869" width="0.0754%" height="15" fill="rgb(246,31,12)" fg:x="49461" fg:w="93"/><text x="40.3455%" y="879.50"></text></g><g><title>[unknown] (93 samples, 0.08%)</title><rect x="40.0955%" y="853" width="0.0754%" height="15" fill="rgb(213,154,6)" fg:x="49461" fg:w="93"/><text x="40.3455%" y="863.50"></text></g><g><title>CDBWrapper::WriteBatch (2,996 samples, 2.43%)</title><rect x="37.7527%" y="1029" width="2.4287%" height="15" fill="rgb(222,163,29)" fg:x="46571" fg:w="2996"/><text x="38.0027%" y="1039.50">CD..</text></g><g><title>leveldb::DBImpl::Write (2,996 samples, 2.43%)</title><rect x="37.7527%" y="1013" width="2.4287%" height="15" fill="rgb(227,201,8)" fg:x="46571" fg:w="2996"/><text x="38.0027%" y="1023.50">le..</text></g><g><title>leveldb::log::Writer::AddRecord (109 samples, 0.09%)</title><rect x="40.0931%" y="997" width="0.0884%" height="15" fill="rgb(233,9,32)" fg:x="49458" fg:w="109"/><text x="40.3431%" y="1007.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (108 samples, 0.09%)</title><rect x="40.0939%" y="981" width="0.0876%" height="15" fill="rgb(217,54,24)" fg:x="49459" fg:w="108"/><text x="40.3439%" y="991.50"></text></g><g><title>crc32c::ExtendSse42 (13 samples, 0.01%)</title><rect x="40.1709%" y="965" width="0.0105%" height="15" fill="rgb(235,192,0)" fg:x="49554" fg:w="13"/><text x="40.4209%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (17 samples, 0.01%)</title><rect x="40.1830%" y="901" width="0.0138%" height="15" fill="rgb(235,45,9)" fg:x="49569" fg:w="17"/><text x="40.4330%" y="911.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (17 samples, 0.01%)</title><rect x="40.1830%" y="885" width="0.0138%" height="15" fill="rgb(246,42,40)" fg:x="49569" fg:w="17"/><text x="40.4330%" y="895.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (17 samples, 0.01%)</title><rect x="40.1830%" y="869" width="0.0138%" height="15" fill="rgb(248,111,24)" fg:x="49569" fg:w="17"/><text x="40.4330%" y="879.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (17 samples, 0.01%)</title><rect x="40.1830%" y="853" width="0.0138%" height="15" fill="rgb(249,65,22)" fg:x="49569" fg:w="17"/><text x="40.4330%" y="863.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (17 samples, 0.01%)</title><rect x="40.1830%" y="837" width="0.0138%" height="15" fill="rgb(238,111,51)" fg:x="49569" fg:w="17"/><text x="40.4330%" y="847.50"></text></g><g><title>DataStream::write (17 samples, 0.01%)</title><rect x="40.1830%" y="821" width="0.0138%" height="15" fill="rgb(250,118,22)" fg:x="49569" fg:w="17"/><text x="40.4330%" y="831.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (17 samples, 0.01%)</title><rect x="40.1830%" y="805" width="0.0138%" height="15" fill="rgb(234,84,26)" fg:x="49569" fg:w="17"/><text x="40.4330%" y="815.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (23 samples, 0.02%)</title><rect x="40.1814%" y="1029" width="0.0186%" height="15" fill="rgb(243,172,12)" fg:x="49567" fg:w="23"/><text x="40.4314%" y="1039.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (22 samples, 0.02%)</title><rect x="40.1822%" y="1013" width="0.0178%" height="15" fill="rgb(236,150,49)" fg:x="49568" fg:w="22"/><text x="40.4322%" y="1023.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (22 samples, 0.02%)</title><rect x="40.1822%" y="997" width="0.0178%" height="15" fill="rgb(225,197,26)" fg:x="49568" fg:w="22"/><text x="40.4322%" y="1007.50"></text></g><g><title>Serialize&lt;DataStream&gt; (22 samples, 0.02%)</title><rect x="40.1822%" y="981" width="0.0178%" height="15" fill="rgb(214,17,42)" fg:x="49568" fg:w="22"/><text x="40.4322%" y="991.50"></text></g><g><title>Ser&lt;DataStream&gt; (22 samples, 0.02%)</title><rect x="40.1822%" y="965" width="0.0178%" height="15" fill="rgb(224,165,40)" fg:x="49568" fg:w="22"/><text x="40.4322%" y="975.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (22 samples, 0.02%)</title><rect x="40.1822%" y="949" width="0.0178%" height="15" fill="rgb(246,100,4)" fg:x="49568" fg:w="22"/><text x="40.4322%" y="959.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (22 samples, 0.02%)</title><rect x="40.1822%" y="933" width="0.0178%" height="15" fill="rgb(222,103,0)" fg:x="49568" fg:w="22"/><text x="40.4322%" y="943.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (22 samples, 0.02%)</title><rect x="40.1822%" y="917" width="0.0178%" height="15" fill="rgb(227,189,26)" fg:x="49568" fg:w="22"/><text x="40.4322%" y="927.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (18 samples, 0.01%)</title><rect x="40.2171%" y="821" width="0.0146%" height="15" fill="rgb(214,202,17)" fg:x="49611" fg:w="18"/><text x="40.4671%" y="831.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (18 samples, 0.01%)</title><rect x="40.2171%" y="805" width="0.0146%" height="15" fill="rgb(229,111,3)" fg:x="49611" fg:w="18"/><text x="40.4671%" y="815.50"></text></g><g><title>DataStream::write (18 samples, 0.01%)</title><rect x="40.2171%" y="789" width="0.0146%" height="15" fill="rgb(229,172,15)" fg:x="49611" fg:w="18"/><text x="40.4671%" y="799.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (18 samples, 0.01%)</title><rect x="40.2171%" y="773" width="0.0146%" height="15" fill="rgb(230,224,35)" fg:x="49611" fg:w="18"/><text x="40.4671%" y="783.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (13 samples, 0.01%)</title><rect x="40.2211%" y="757" width="0.0105%" height="15" fill="rgb(251,141,6)" fg:x="49616" fg:w="13"/><text x="40.4711%" y="767.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (49 samples, 0.04%)</title><rect x="40.2001%" y="965" width="0.0397%" height="15" fill="rgb(225,208,6)" fg:x="49590" fg:w="49"/><text x="40.4501%" y="975.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (49 samples, 0.04%)</title><rect x="40.2001%" y="949" width="0.0397%" height="15" fill="rgb(246,181,16)" fg:x="49590" fg:w="49"/><text x="40.4501%" y="959.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (49 samples, 0.04%)</title><rect x="40.2001%" y="933" width="0.0397%" height="15" fill="rgb(227,129,36)" fg:x="49590" fg:w="49"/><text x="40.4501%" y="943.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (49 samples, 0.04%)</title><rect x="40.2001%" y="917" width="0.0397%" height="15" fill="rgb(248,117,24)" fg:x="49590" fg:w="49"/><text x="40.4501%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (49 samples, 0.04%)</title><rect x="40.2001%" y="901" width="0.0397%" height="15" fill="rgb(214,185,35)" fg:x="49590" fg:w="49"/><text x="40.4501%" y="911.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (49 samples, 0.04%)</title><rect x="40.2001%" y="885" width="0.0397%" height="15" fill="rgb(236,150,34)" fg:x="49590" fg:w="49"/><text x="40.4501%" y="895.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (39 samples, 0.03%)</title><rect x="40.2082%" y="869" width="0.0316%" height="15" fill="rgb(243,228,27)" fg:x="49600" fg:w="39"/><text x="40.4582%" y="879.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (39 samples, 0.03%)</title><rect x="40.2082%" y="853" width="0.0316%" height="15" fill="rgb(245,77,44)" fg:x="49600" fg:w="39"/><text x="40.4582%" y="863.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (39 samples, 0.03%)</title><rect x="40.2082%" y="837" width="0.0316%" height="15" fill="rgb(235,214,42)" fg:x="49600" fg:w="39"/><text x="40.4582%" y="847.50"></text></g><g><title>decltype (82 samples, 0.07%)</title><rect x="40.2779%" y="789" width="0.0665%" height="15" fill="rgb(221,74,3)" fg:x="49686" fg:w="82"/><text x="40.5279%" y="799.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (119 samples, 0.10%)</title><rect x="40.2487%" y="837" width="0.0965%" height="15" fill="rgb(206,121,29)" fg:x="49650" fg:w="119"/><text x="40.4987%" y="847.50"></text></g><g><title>decltype  (83 samples, 0.07%)</title><rect x="40.2779%" y="821" width="0.0673%" height="15" fill="rgb(249,131,53)" fg:x="49686" fg:w="83"/><text x="40.5279%" y="831.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (83 samples, 0.07%)</title><rect x="40.2779%" y="805" width="0.0673%" height="15" fill="rgb(236,170,29)" fg:x="49686" fg:w="83"/><text x="40.5279%" y="815.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (130 samples, 0.11%)</title><rect x="40.2414%" y="917" width="0.1054%" height="15" fill="rgb(247,96,15)" fg:x="49641" fg:w="130"/><text x="40.4914%" y="927.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (128 samples, 0.10%)</title><rect x="40.2430%" y="901" width="0.1038%" height="15" fill="rgb(211,210,7)" fg:x="49643" fg:w="128"/><text x="40.4930%" y="911.50"></text></g><g><title>DataStream::write (128 samples, 0.10%)</title><rect x="40.2430%" y="885" width="0.1038%" height="15" fill="rgb(240,88,50)" fg:x="49643" fg:w="128"/><text x="40.4930%" y="895.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (128 samples, 0.10%)</title><rect x="40.2430%" y="869" width="0.1038%" height="15" fill="rgb(209,229,26)" fg:x="49643" fg:w="128"/><text x="40.4930%" y="879.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (125 samples, 0.10%)</title><rect x="40.2455%" y="853" width="0.1013%" height="15" fill="rgb(210,68,23)" fg:x="49646" fg:w="125"/><text x="40.4955%" y="863.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (236 samples, 0.19%)</title><rect x="40.2001%" y="1013" width="0.1913%" height="15" fill="rgb(229,180,13)" fg:x="49590" fg:w="236"/><text x="40.4501%" y="1023.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (236 samples, 0.19%)</title><rect x="40.2001%" y="997" width="0.1913%" height="15" fill="rgb(236,53,44)" fg:x="49590" fg:w="236"/><text x="40.4501%" y="1007.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (236 samples, 0.19%)</title><rect x="40.2001%" y="981" width="0.1913%" height="15" fill="rgb(244,214,29)" fg:x="49590" fg:w="236"/><text x="40.4501%" y="991.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (187 samples, 0.15%)</title><rect x="40.2398%" y="965" width="0.1516%" height="15" fill="rgb(220,75,29)" fg:x="49639" fg:w="187"/><text x="40.4898%" y="975.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (187 samples, 0.15%)</title><rect x="40.2398%" y="949" width="0.1516%" height="15" fill="rgb(214,183,37)" fg:x="49639" fg:w="187"/><text x="40.4898%" y="959.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (187 samples, 0.15%)</title><rect x="40.2398%" y="933" width="0.1516%" height="15" fill="rgb(239,117,29)" fg:x="49639" fg:w="187"/><text x="40.4898%" y="943.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (55 samples, 0.04%)</title><rect x="40.3468%" y="917" width="0.0446%" height="15" fill="rgb(237,171,35)" fg:x="49771" fg:w="55"/><text x="40.5968%" y="927.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (51 samples, 0.04%)</title><rect x="40.3500%" y="901" width="0.0413%" height="15" fill="rgb(229,178,53)" fg:x="49775" fg:w="51"/><text x="40.6000%" y="911.50"></text></g><g><title>decltype  (37 samples, 0.03%)</title><rect x="40.3614%" y="885" width="0.0300%" height="15" fill="rgb(210,102,19)" fg:x="49789" fg:w="37"/><text x="40.6114%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (37 samples, 0.03%)</title><rect x="40.3614%" y="869" width="0.0300%" height="15" fill="rgb(235,127,22)" fg:x="49789" fg:w="37"/><text x="40.6114%" y="879.50"></text></g><g><title>decltype (37 samples, 0.03%)</title><rect x="40.3614%" y="853" width="0.0300%" height="15" fill="rgb(244,31,31)" fg:x="49789" fg:w="37"/><text x="40.6114%" y="863.50"></text></g><g><title>CCoinsViewDB::BatchWrite (14 samples, 0.01%)</title><rect x="40.3922%" y="789" width="0.0113%" height="15" fill="rgb(231,43,21)" fg:x="49827" fg:w="14"/><text x="40.6422%" y="799.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (14 samples, 0.01%)</title><rect x="40.3922%" y="773" width="0.0113%" height="15" fill="rgb(217,131,35)" fg:x="49827" fg:w="14"/><text x="40.6422%" y="783.50"></text></g><g><title>DataStream::reserve (14 samples, 0.01%)</title><rect x="40.3922%" y="757" width="0.0113%" height="15" fill="rgb(221,149,4)" fg:x="49827" fg:w="14"/><text x="40.6422%" y="767.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (14 samples, 0.01%)</title><rect x="40.3922%" y="741" width="0.0113%" height="15" fill="rgb(232,170,28)" fg:x="49827" fg:w="14"/><text x="40.6422%" y="751.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (26 samples, 0.02%)</title><rect x="40.3922%" y="901" width="0.0211%" height="15" fill="rgb(238,56,10)" fg:x="49827" fg:w="26"/><text x="40.6422%" y="911.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (26 samples, 0.02%)</title><rect x="40.3922%" y="885" width="0.0211%" height="15" fill="rgb(235,196,14)" fg:x="49827" fg:w="26"/><text x="40.6422%" y="895.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (26 samples, 0.02%)</title><rect x="40.3922%" y="869" width="0.0211%" height="15" fill="rgb(216,45,48)" fg:x="49827" fg:w="26"/><text x="40.6422%" y="879.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (26 samples, 0.02%)</title><rect x="40.3922%" y="853" width="0.0211%" height="15" fill="rgb(238,213,17)" fg:x="49827" fg:w="26"/><text x="40.6422%" y="863.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (26 samples, 0.02%)</title><rect x="40.3922%" y="837" width="0.0211%" height="15" fill="rgb(212,13,2)" fg:x="49827" fg:w="26"/><text x="40.6422%" y="847.50"></text></g><g><title>DataStream::write (26 samples, 0.02%)</title><rect x="40.3922%" y="821" width="0.0211%" height="15" fill="rgb(240,114,20)" fg:x="49827" fg:w="26"/><text x="40.6422%" y="831.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (26 samples, 0.02%)</title><rect x="40.3922%" y="805" width="0.0211%" height="15" fill="rgb(228,41,40)" fg:x="49827" fg:w="26"/><text x="40.6422%" y="815.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (267 samples, 0.22%)</title><rect x="40.2001%" y="1029" width="0.2164%" height="15" fill="rgb(244,132,35)" fg:x="49590" fg:w="267"/><text x="40.4501%" y="1039.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (31 samples, 0.03%)</title><rect x="40.3914%" y="1013" width="0.0251%" height="15" fill="rgb(253,189,4)" fg:x="49826" fg:w="31"/><text x="40.6414%" y="1023.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (31 samples, 0.03%)</title><rect x="40.3914%" y="997" width="0.0251%" height="15" fill="rgb(224,37,19)" fg:x="49826" fg:w="31"/><text x="40.6414%" y="1007.50"></text></g><g><title>Serialize&lt;DataStream&gt; (31 samples, 0.03%)</title><rect x="40.3914%" y="981" width="0.0251%" height="15" fill="rgb(235,223,18)" fg:x="49826" fg:w="31"/><text x="40.6414%" y="991.50"></text></g><g><title>Ser&lt;DataStream&gt; (31 samples, 0.03%)</title><rect x="40.3914%" y="965" width="0.0251%" height="15" fill="rgb(235,163,25)" fg:x="49826" fg:w="31"/><text x="40.6414%" y="975.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (31 samples, 0.03%)</title><rect x="40.3914%" y="949" width="0.0251%" height="15" fill="rgb(217,145,28)" fg:x="49826" fg:w="31"/><text x="40.6414%" y="959.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (31 samples, 0.03%)</title><rect x="40.3914%" y="933" width="0.0251%" height="15" fill="rgb(223,223,32)" fg:x="49826" fg:w="31"/><text x="40.6414%" y="943.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (31 samples, 0.03%)</title><rect x="40.3914%" y="917" width="0.0251%" height="15" fill="rgb(227,189,39)" fg:x="49826" fg:w="31"/><text x="40.6414%" y="927.50"></text></g><g><title>CCoinsViewDB::BatchWrite (3,558 samples, 2.88%)</title><rect x="37.5330%" y="1045" width="2.8843%" height="15" fill="rgb(248,10,22)" fg:x="46300" fg:w="3558"/><text x="37.7830%" y="1055.50">CC..</text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (28 samples, 0.02%)</title><rect x="40.4433%" y="997" width="0.0227%" height="15" fill="rgb(248,46,39)" fg:x="49890" fg:w="28"/><text x="40.6933%" y="1007.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (70 samples, 0.06%)</title><rect x="40.4660%" y="981" width="0.0567%" height="15" fill="rgb(248,113,48)" fg:x="49918" fg:w="70"/><text x="40.7160%" y="991.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (70 samples, 0.06%)</title><rect x="40.4660%" y="965" width="0.0567%" height="15" fill="rgb(245,16,25)" fg:x="49918" fg:w="70"/><text x="40.7160%" y="975.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (70 samples, 0.06%)</title><rect x="40.4660%" y="949" width="0.0567%" height="15" fill="rgb(249,152,16)" fg:x="49918" fg:w="70"/><text x="40.7160%" y="959.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (56 samples, 0.05%)</title><rect x="40.4773%" y="933" width="0.0454%" height="15" fill="rgb(250,16,1)" fg:x="49932" fg:w="56"/><text x="40.7273%" y="943.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (56 samples, 0.05%)</title><rect x="40.4773%" y="917" width="0.0454%" height="15" fill="rgb(249,138,3)" fg:x="49932" fg:w="56"/><text x="40.7273%" y="927.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (56 samples, 0.05%)</title><rect x="40.4773%" y="901" width="0.0454%" height="15" fill="rgb(227,71,41)" fg:x="49932" fg:w="56"/><text x="40.7273%" y="911.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (15 samples, 0.01%)</title><rect x="40.5105%" y="885" width="0.0122%" height="15" fill="rgb(209,184,23)" fg:x="49973" fg:w="15"/><text x="40.7605%" y="895.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (80 samples, 0.06%)</title><rect x="40.5227%" y="885" width="0.0649%" height="15" fill="rgb(223,215,31)" fg:x="49988" fg:w="80"/><text x="40.7727%" y="895.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (52 samples, 0.04%)</title><rect x="40.5454%" y="869" width="0.0422%" height="15" fill="rgb(210,146,28)" fg:x="50016" fg:w="52"/><text x="40.7954%" y="879.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (289 samples, 0.23%)</title><rect x="40.4311%" y="1045" width="0.2343%" height="15" fill="rgb(209,183,41)" fg:x="49875" fg:w="289"/><text x="40.6811%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (289 samples, 0.23%)</title><rect x="40.4311%" y="1029" width="0.2343%" height="15" fill="rgb(209,224,45)" fg:x="49875" fg:w="289"/><text x="40.6811%" y="1039.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (287 samples, 0.23%)</title><rect x="40.4327%" y="1013" width="0.2327%" height="15" fill="rgb(224,209,51)" fg:x="49877" fg:w="287"/><text x="40.6827%" y="1023.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (246 samples, 0.20%)</title><rect x="40.4660%" y="997" width="0.1994%" height="15" fill="rgb(223,17,39)" fg:x="49918" fg:w="246"/><text x="40.7160%" y="1007.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (176 samples, 0.14%)</title><rect x="40.5227%" y="981" width="0.1427%" height="15" fill="rgb(234,204,37)" fg:x="49988" fg:w="176"/><text x="40.7727%" y="991.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (176 samples, 0.14%)</title><rect x="40.5227%" y="965" width="0.1427%" height="15" fill="rgb(236,120,5)" fg:x="49988" fg:w="176"/><text x="40.7727%" y="975.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (176 samples, 0.14%)</title><rect x="40.5227%" y="949" width="0.1427%" height="15" fill="rgb(248,97,27)" fg:x="49988" fg:w="176"/><text x="40.7727%" y="959.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (176 samples, 0.14%)</title><rect x="40.5227%" y="933" width="0.1427%" height="15" fill="rgb(240,66,17)" fg:x="49988" fg:w="176"/><text x="40.7727%" y="943.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (176 samples, 0.14%)</title><rect x="40.5227%" y="917" width="0.1427%" height="15" fill="rgb(210,79,3)" fg:x="49988" fg:w="176"/><text x="40.7727%" y="927.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (176 samples, 0.14%)</title><rect x="40.5227%" y="901" width="0.1427%" height="15" fill="rgb(214,176,27)" fg:x="49988" fg:w="176"/><text x="40.7727%" y="911.50"></text></g><g><title>Coin::~Coin (96 samples, 0.08%)</title><rect x="40.5876%" y="885" width="0.0778%" height="15" fill="rgb(235,185,3)" fg:x="50068" fg:w="96"/><text x="40.8376%" y="895.50"></text></g><g><title>CTxOut::~CTxOut (96 samples, 0.08%)</title><rect x="40.5876%" y="869" width="0.0778%" height="15" fill="rgb(227,24,12)" fg:x="50068" fg:w="96"/><text x="40.8376%" y="879.50"></text></g><g><title>CScript::~CScript (96 samples, 0.08%)</title><rect x="40.5876%" y="853" width="0.0778%" height="15" fill="rgb(252,169,48)" fg:x="50068" fg:w="96"/><text x="40.8376%" y="863.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (96 samples, 0.08%)</title><rect x="40.5876%" y="837" width="0.0778%" height="15" fill="rgb(212,65,1)" fg:x="50068" fg:w="96"/><text x="40.8376%" y="847.50"></text></g><g><title>CCoinsViewCache::Flush (3,928 samples, 3.18%)</title><rect x="37.5022%" y="1061" width="3.1842%" height="15" fill="rgb(242,39,24)" fg:x="46262" fg:w="3928"/><text x="37.7522%" y="1071.50">CCo..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (23 samples, 0.02%)</title><rect x="40.6678%" y="1045" width="0.0186%" height="15" fill="rgb(249,32,23)" fg:x="50167" fg:w="23"/><text x="40.9178%" y="1055.50"></text></g><g><title>Chainstate::FlushStateToDisk (3,941 samples, 3.19%)</title><rect x="37.5022%" y="1077" width="3.1948%" height="15" fill="rgb(251,195,23)" fg:x="46262" fg:w="3941"/><text x="37.7522%" y="1087.50">Cha..</text></g><g><title>Chainstate::ActivateBestChain (37,951 samples, 30.76%)</title><rect x="9.9475%" y="1093" width="30.7649%" height="15" fill="rgb(236,174,8)" fg:x="12271" fg:w="37951"/><text x="10.1975%" y="1103.50">Chainstate::ActivateBestChain</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (22 samples, 0.02%)</title><rect x="40.7805%" y="661" width="0.0178%" height="15" fill="rgb(220,197,8)" fg:x="50306" fg:w="22"/><text x="41.0305%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (22 samples, 0.02%)</title><rect x="40.7805%" y="645" width="0.0178%" height="15" fill="rgb(240,108,37)" fg:x="50306" fg:w="22"/><text x="41.0305%" y="655.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="40.7805%" y="629" width="0.0178%" height="15" fill="rgb(232,176,24)" fg:x="50306" fg:w="22"/><text x="41.0305%" y="639.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="40.7805%" y="613" width="0.0178%" height="15" fill="rgb(243,35,29)" fg:x="50306" fg:w="22"/><text x="41.0305%" y="623.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (22 samples, 0.02%)</title><rect x="40.7805%" y="597" width="0.0178%" height="15" fill="rgb(210,37,18)" fg:x="50306" fg:w="22"/><text x="41.0305%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (22 samples, 0.02%)</title><rect x="40.7805%" y="581" width="0.0178%" height="15" fill="rgb(224,184,40)" fg:x="50306" fg:w="22"/><text x="41.0305%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (22 samples, 0.02%)</title><rect x="40.7805%" y="565" width="0.0178%" height="15" fill="rgb(236,39,29)" fg:x="50306" fg:w="22"/><text x="41.0305%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (19 samples, 0.02%)</title><rect x="40.7829%" y="549" width="0.0154%" height="15" fill="rgb(232,48,39)" fg:x="50309" fg:w="19"/><text x="41.0329%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.02%)</title><rect x="40.7829%" y="533" width="0.0154%" height="15" fill="rgb(236,34,42)" fg:x="50309" fg:w="19"/><text x="41.0329%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.02%)</title><rect x="40.7829%" y="517" width="0.0154%" height="15" fill="rgb(243,106,37)" fg:x="50309" fg:w="19"/><text x="41.0329%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (19 samples, 0.02%)</title><rect x="40.7829%" y="501" width="0.0154%" height="15" fill="rgb(218,96,6)" fg:x="50309" fg:w="19"/><text x="41.0329%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (19 samples, 0.02%)</title><rect x="40.7829%" y="485" width="0.0154%" height="15" fill="rgb(235,130,12)" fg:x="50309" fg:w="19"/><text x="41.0329%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (19 samples, 0.02%)</title><rect x="40.7829%" y="469" width="0.0154%" height="15" fill="rgb(231,95,0)" fg:x="50309" fg:w="19"/><text x="41.0329%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (16 samples, 0.01%)</title><rect x="40.7854%" y="453" width="0.0130%" height="15" fill="rgb(228,12,23)" fg:x="50312" fg:w="16"/><text x="41.0354%" y="463.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (20 samples, 0.02%)</title><rect x="40.7983%" y="661" width="0.0162%" height="15" fill="rgb(216,12,1)" fg:x="50328" fg:w="20"/><text x="41.0483%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (75 samples, 0.06%)</title><rect x="40.7675%" y="741" width="0.0608%" height="15" fill="rgb(219,59,3)" fg:x="50290" fg:w="75"/><text x="41.0175%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (75 samples, 0.06%)</title><rect x="40.7675%" y="725" width="0.0608%" height="15" fill="rgb(215,208,46)" fg:x="50290" fg:w="75"/><text x="41.0175%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (75 samples, 0.06%)</title><rect x="40.7675%" y="709" width="0.0608%" height="15" fill="rgb(254,224,29)" fg:x="50290" fg:w="75"/><text x="41.0175%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (75 samples, 0.06%)</title><rect x="40.7675%" y="693" width="0.0608%" height="15" fill="rgb(232,14,29)" fg:x="50290" fg:w="75"/><text x="41.0175%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (75 samples, 0.06%)</title><rect x="40.7675%" y="677" width="0.0608%" height="15" fill="rgb(208,45,52)" fg:x="50290" fg:w="75"/><text x="41.0175%" y="687.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="40.8145%" y="661" width="0.0138%" height="15" fill="rgb(234,191,28)" fg:x="50348" fg:w="17"/><text x="41.0645%" y="671.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="40.8178%" y="645" width="0.0105%" height="15" fill="rgb(244,67,43)" fg:x="50352" fg:w="13"/><text x="41.0678%" y="655.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (13 samples, 0.01%)</title><rect x="40.8178%" y="629" width="0.0105%" height="15" fill="rgb(236,189,24)" fg:x="50352" fg:w="13"/><text x="41.0678%" y="639.50"></text></g><g><title>SizeComputer::write (13 samples, 0.01%)</title><rect x="40.8178%" y="613" width="0.0105%" height="15" fill="rgb(239,214,33)" fg:x="50352" fg:w="13"/><text x="41.0678%" y="623.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (17 samples, 0.01%)</title><rect x="40.8518%" y="661" width="0.0138%" height="15" fill="rgb(226,176,41)" fg:x="50394" fg:w="17"/><text x="41.1018%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (26 samples, 0.02%)</title><rect x="40.8656%" y="661" width="0.0211%" height="15" fill="rgb(248,47,8)" fg:x="50411" fg:w="26"/><text x="41.1156%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (26 samples, 0.02%)</title><rect x="40.8656%" y="645" width="0.0211%" height="15" fill="rgb(218,81,44)" fg:x="50411" fg:w="26"/><text x="41.1156%" y="655.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.02%)</title><rect x="40.8656%" y="629" width="0.0211%" height="15" fill="rgb(213,98,6)" fg:x="50411" fg:w="26"/><text x="41.1156%" y="639.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.02%)</title><rect x="40.8656%" y="613" width="0.0211%" height="15" fill="rgb(222,85,22)" fg:x="50411" fg:w="26"/><text x="41.1156%" y="623.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (26 samples, 0.02%)</title><rect x="40.8656%" y="597" width="0.0211%" height="15" fill="rgb(239,46,39)" fg:x="50411" fg:w="26"/><text x="41.1156%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (26 samples, 0.02%)</title><rect x="40.8656%" y="581" width="0.0211%" height="15" fill="rgb(237,12,29)" fg:x="50411" fg:w="26"/><text x="41.1156%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (26 samples, 0.02%)</title><rect x="40.8656%" y="565" width="0.0211%" height="15" fill="rgb(214,77,8)" fg:x="50411" fg:w="26"/><text x="41.1156%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (17 samples, 0.01%)</title><rect x="40.8729%" y="549" width="0.0138%" height="15" fill="rgb(217,168,37)" fg:x="50420" fg:w="17"/><text x="41.1229%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="40.8729%" y="533" width="0.0138%" height="15" fill="rgb(221,217,23)" fg:x="50420" fg:w="17"/><text x="41.1229%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="40.8729%" y="517" width="0.0138%" height="15" fill="rgb(243,229,36)" fg:x="50420" fg:w="17"/><text x="41.1229%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (17 samples, 0.01%)</title><rect x="40.8729%" y="501" width="0.0138%" height="15" fill="rgb(251,163,40)" fg:x="50420" fg:w="17"/><text x="41.1229%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.01%)</title><rect x="40.8729%" y="485" width="0.0138%" height="15" fill="rgb(237,222,12)" fg:x="50420" fg:w="17"/><text x="41.1229%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.01%)</title><rect x="40.8729%" y="469" width="0.0138%" height="15" fill="rgb(248,132,6)" fg:x="50420" fg:w="17"/><text x="41.1229%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (17 samples, 0.01%)</title><rect x="40.8729%" y="453" width="0.0138%" height="15" fill="rgb(227,167,50)" fg:x="50420" fg:w="17"/><text x="41.1229%" y="463.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (81 samples, 0.07%)</title><rect x="40.8283%" y="741" width="0.0657%" height="15" fill="rgb(242,84,37)" fg:x="50365" fg:w="81"/><text x="41.0783%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (81 samples, 0.07%)</title><rect x="40.8283%" y="725" width="0.0657%" height="15" fill="rgb(212,4,50)" fg:x="50365" fg:w="81"/><text x="41.0783%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (81 samples, 0.07%)</title><rect x="40.8283%" y="709" width="0.0657%" height="15" fill="rgb(230,228,32)" fg:x="50365" fg:w="81"/><text x="41.0783%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (81 samples, 0.07%)</title><rect x="40.8283%" y="693" width="0.0657%" height="15" fill="rgb(248,217,23)" fg:x="50365" fg:w="81"/><text x="41.0783%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (79 samples, 0.06%)</title><rect x="40.8299%" y="677" width="0.0640%" height="15" fill="rgb(238,197,32)" fg:x="50367" fg:w="79"/><text x="41.0799%" y="687.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.02%)</title><rect x="40.9248%" y="629" width="0.0154%" height="15" fill="rgb(236,106,1)" fg:x="50484" fg:w="19"/><text x="41.1748%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (38 samples, 0.03%)</title><rect x="40.9126%" y="661" width="0.0308%" height="15" fill="rgb(219,228,13)" fg:x="50469" fg:w="38"/><text x="41.1626%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (36 samples, 0.03%)</title><rect x="40.9142%" y="645" width="0.0292%" height="15" fill="rgb(238,30,35)" fg:x="50471" fg:w="36"/><text x="41.1642%" y="655.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.01%)</title><rect x="40.9434%" y="661" width="0.0113%" height="15" fill="rgb(236,70,23)" fg:x="50507" fg:w="14"/><text x="41.1934%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (77 samples, 0.06%)</title><rect x="40.8940%" y="741" width="0.0624%" height="15" fill="rgb(249,104,48)" fg:x="50446" fg:w="77"/><text x="41.1440%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (77 samples, 0.06%)</title><rect x="40.8940%" y="725" width="0.0624%" height="15" fill="rgb(254,117,50)" fg:x="50446" fg:w="77"/><text x="41.1440%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (77 samples, 0.06%)</title><rect x="40.8940%" y="709" width="0.0624%" height="15" fill="rgb(223,152,4)" fg:x="50446" fg:w="77"/><text x="41.1440%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (77 samples, 0.06%)</title><rect x="40.8940%" y="693" width="0.0624%" height="15" fill="rgb(245,6,2)" fg:x="50446" fg:w="77"/><text x="41.1440%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (75 samples, 0.06%)</title><rect x="40.8956%" y="677" width="0.0608%" height="15" fill="rgb(249,150,24)" fg:x="50448" fg:w="75"/><text x="41.1456%" y="687.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (296 samples, 0.24%)</title><rect x="40.7278%" y="757" width="0.2400%" height="15" fill="rgb(228,185,42)" fg:x="50241" fg:w="296"/><text x="40.9778%" y="767.50"></text></g><g><title>GetBlockWeight (388 samples, 0.31%)</title><rect x="40.7254%" y="1061" width="0.3145%" height="15" fill="rgb(226,39,33)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="1071.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="1045" width="0.3145%" height="15" fill="rgb(221,166,19)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="1055.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (388 samples, 0.31%)</title><rect x="40.7254%" y="1029" width="0.3145%" height="15" fill="rgb(209,109,2)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="1013" width="0.3145%" height="15" fill="rgb(252,216,26)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="1023.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="997" width="0.3145%" height="15" fill="rgb(227,173,36)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="981" width="0.3145%" height="15" fill="rgb(209,90,7)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="991.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="965" width="0.3145%" height="15" fill="rgb(250,194,11)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="975.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="949" width="0.3145%" height="15" fill="rgb(220,72,50)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="959.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="933" width="0.3145%" height="15" fill="rgb(222,106,48)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="943.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="917" width="0.3145%" height="15" fill="rgb(216,220,45)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="927.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="901" width="0.3145%" height="15" fill="rgb(234,112,18)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="885" width="0.3145%" height="15" fill="rgb(206,179,9)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="869" width="0.3145%" height="15" fill="rgb(215,115,40)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="853" width="0.3145%" height="15" fill="rgb(222,69,34)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="837" width="0.3145%" height="15" fill="rgb(209,161,10)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="821" width="0.3145%" height="15" fill="rgb(217,6,38)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="805" width="0.3145%" height="15" fill="rgb(229,229,48)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="789" width="0.3145%" height="15" fill="rgb(225,21,28)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="799.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (388 samples, 0.31%)</title><rect x="40.7254%" y="773" width="0.3145%" height="15" fill="rgb(206,33,13)" fg:x="50238" fg:w="388"/><text x="40.9754%" y="783.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (89 samples, 0.07%)</title><rect x="40.9678%" y="757" width="0.0721%" height="15" fill="rgb(242,178,17)" fg:x="50537" fg:w="89"/><text x="41.2178%" y="767.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.03%)</title><rect x="41.0131%" y="741" width="0.0268%" height="15" fill="rgb(220,162,5)" fg:x="50593" fg:w="33"/><text x="41.2631%" y="751.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (33 samples, 0.03%)</title><rect x="41.0131%" y="725" width="0.0268%" height="15" fill="rgb(210,33,43)" fg:x="50593" fg:w="33"/><text x="41.2631%" y="735.50"></text></g><g><title>SizeComputer::write (33 samples, 0.03%)</title><rect x="41.0131%" y="709" width="0.0268%" height="15" fill="rgb(216,116,54)" fg:x="50593" fg:w="33"/><text x="41.2631%" y="719.50"></text></g><g><title>ContextualCheckBlock (405 samples, 0.33%)</title><rect x="40.7148%" y="1077" width="0.3283%" height="15" fill="rgb(249,92,24)" fg:x="50225" fg:w="405"/><text x="40.9648%" y="1087.50"></text></g><g><title>[[ext4]] (104 samples, 0.08%)</title><rect x="41.0853%" y="789" width="0.0843%" height="15" fill="rgb(231,189,14)" fg:x="50682" fg:w="104"/><text x="41.3353%" y="799.50"></text></g><g><title>[unknown] (84 samples, 0.07%)</title><rect x="41.1015%" y="773" width="0.0681%" height="15" fill="rgb(230,8,41)" fg:x="50702" fg:w="84"/><text x="41.3515%" y="783.50"></text></g><g><title>[unknown] (46 samples, 0.04%)</title><rect x="41.1323%" y="757" width="0.0373%" height="15" fill="rgb(249,7,27)" fg:x="50740" fg:w="46"/><text x="41.3823%" y="767.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="41.1542%" y="741" width="0.0154%" height="15" fill="rgb(232,86,5)" fg:x="50767" fg:w="19"/><text x="41.4042%" y="751.50"></text></g><g><title>[[ext4]] (165 samples, 0.13%)</title><rect x="41.0739%" y="805" width="0.1338%" height="15" fill="rgb(224,175,18)" fg:x="50668" fg:w="165"/><text x="41.3239%" y="815.50"></text></g><g><title>[unknown] (47 samples, 0.04%)</title><rect x="41.1696%" y="789" width="0.0381%" height="15" fill="rgb(220,129,12)" fg:x="50786" fg:w="47"/><text x="41.4196%" y="799.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="41.1874%" y="773" width="0.0203%" height="15" fill="rgb(210,19,36)" fg:x="50808" fg:w="25"/><text x="41.4374%" y="783.50"></text></g><g><title>[[nvme]] (13 samples, 0.01%)</title><rect x="41.2401%" y="725" width="0.0105%" height="15" fill="rgb(219,96,14)" fg:x="50873" fg:w="13"/><text x="41.4901%" y="735.50"></text></g><g><title>[[nvme]] (13 samples, 0.01%)</title><rect x="41.2401%" y="709" width="0.0105%" height="15" fill="rgb(249,106,1)" fg:x="50873" fg:w="13"/><text x="41.4901%" y="719.50"></text></g><g><title>[[ext4]] (246 samples, 0.20%)</title><rect x="41.0561%" y="821" width="0.1994%" height="15" fill="rgb(249,155,20)" fg:x="50646" fg:w="246"/><text x="41.3061%" y="831.50"></text></g><g><title>[unknown] (59 samples, 0.05%)</title><rect x="41.2077%" y="805" width="0.0478%" height="15" fill="rgb(244,168,9)" fg:x="50833" fg:w="59"/><text x="41.4577%" y="815.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="41.2239%" y="789" width="0.0316%" height="15" fill="rgb(216,23,50)" fg:x="50853" fg:w="39"/><text x="41.4739%" y="799.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="41.2328%" y="773" width="0.0227%" height="15" fill="rgb(224,219,20)" fg:x="50864" fg:w="28"/><text x="41.4828%" y="783.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="41.2345%" y="757" width="0.0211%" height="15" fill="rgb(222,156,15)" fg:x="50866" fg:w="26"/><text x="41.4845%" y="767.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="41.2345%" y="741" width="0.0211%" height="15" fill="rgb(231,97,17)" fg:x="50866" fg:w="26"/><text x="41.4845%" y="751.50"></text></g><g><title>[[ext4]] (251 samples, 0.20%)</title><rect x="41.0561%" y="853" width="0.2035%" height="15" fill="rgb(218,70,48)" fg:x="50646" fg:w="251"/><text x="41.3061%" y="863.50"></text></g><g><title>[[ext4]] (251 samples, 0.20%)</title><rect x="41.0561%" y="837" width="0.2035%" height="15" fill="rgb(212,196,52)" fg:x="50646" fg:w="251"/><text x="41.3061%" y="847.50"></text></g><g><title>FileCommit (271 samples, 0.22%)</title><rect x="41.0521%" y="1013" width="0.2197%" height="15" fill="rgb(243,203,18)" fg:x="50641" fg:w="271"/><text x="41.3021%" y="1023.50"></text></g><g><title>fdatasync (271 samples, 0.22%)</title><rect x="41.0521%" y="997" width="0.2197%" height="15" fill="rgb(252,125,41)" fg:x="50641" fg:w="271"/><text x="41.3021%" y="1007.50"></text></g><g><title>[unknown] (271 samples, 0.22%)</title><rect x="41.0521%" y="981" width="0.2197%" height="15" fill="rgb(223,180,33)" fg:x="50641" fg:w="271"/><text x="41.3021%" y="991.50"></text></g><g><title>[unknown] (271 samples, 0.22%)</title><rect x="41.0521%" y="965" width="0.2197%" height="15" fill="rgb(254,159,46)" fg:x="50641" fg:w="271"/><text x="41.3021%" y="975.50"></text></g><g><title>[unknown] (271 samples, 0.22%)</title><rect x="41.0521%" y="949" width="0.2197%" height="15" fill="rgb(254,38,10)" fg:x="50641" fg:w="271"/><text x="41.3021%" y="959.50"></text></g><g><title>[[ext4]] (271 samples, 0.22%)</title><rect x="41.0521%" y="933" width="0.2197%" height="15" fill="rgb(208,217,32)" fg:x="50641" fg:w="271"/><text x="41.3021%" y="943.50"></text></g><g><title>[unknown] (271 samples, 0.22%)</title><rect x="41.0521%" y="917" width="0.2197%" height="15" fill="rgb(221,120,13)" fg:x="50641" fg:w="271"/><text x="41.3021%" y="927.50"></text></g><g><title>[unknown] (271 samples, 0.22%)</title><rect x="41.0521%" y="901" width="0.2197%" height="15" fill="rgb(246,54,52)" fg:x="50641" fg:w="271"/><text x="41.3021%" y="911.50"></text></g><g><title>[unknown] (271 samples, 0.22%)</title><rect x="41.0521%" y="885" width="0.2197%" height="15" fill="rgb(242,34,25)" fg:x="50641" fg:w="271"/><text x="41.3021%" y="895.50"></text></g><g><title>[unknown] (267 samples, 0.22%)</title><rect x="41.0553%" y="869" width="0.2164%" height="15" fill="rgb(247,209,9)" fg:x="50645" fg:w="267"/><text x="41.3053%" y="879.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="41.2596%" y="853" width="0.0122%" height="15" fill="rgb(228,71,26)" fg:x="50897" fg:w="15"/><text x="41.5096%" y="863.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="41.2596%" y="837" width="0.0122%" height="15" fill="rgb(222,145,49)" fg:x="50897" fg:w="15"/><text x="41.5096%" y="847.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="41.2596%" y="821" width="0.0122%" height="15" fill="rgb(218,121,17)" fg:x="50897" fg:w="15"/><text x="41.5096%" y="831.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="41.2612%" y="805" width="0.0105%" height="15" fill="rgb(244,50,7)" fg:x="50899" fg:w="13"/><text x="41.5112%" y="815.50"></text></g><g><title>FlatFileSeq::Flush (272 samples, 0.22%)</title><rect x="41.0521%" y="1029" width="0.2205%" height="15" fill="rgb(246,229,37)" fg:x="50641" fg:w="272"/><text x="41.3021%" y="1039.50"></text></g><g><title>[[ext4]] (21 samples, 0.02%)</title><rect x="41.2920%" y="773" width="0.0170%" height="15" fill="rgb(225,18,5)" fg:x="50937" fg:w="21"/><text x="41.5420%" y="783.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="41.2920%" y="757" width="0.0170%" height="15" fill="rgb(213,204,8)" fg:x="50937" fg:w="21"/><text x="41.5420%" y="767.50"></text></g><g><title>[[ext4]] (29 samples, 0.02%)</title><rect x="41.2904%" y="789" width="0.0235%" height="15" fill="rgb(238,103,6)" fg:x="50935" fg:w="29"/><text x="41.5404%" y="799.50"></text></g><g><title>[[ext4]] (66 samples, 0.05%)</title><rect x="41.2774%" y="837" width="0.0535%" height="15" fill="rgb(222,25,35)" fg:x="50919" fg:w="66"/><text x="41.5274%" y="847.50"></text></g><g><title>[[ext4]] (66 samples, 0.05%)</title><rect x="41.2774%" y="821" width="0.0535%" height="15" fill="rgb(213,203,35)" fg:x="50919" fg:w="66"/><text x="41.5274%" y="831.50"></text></g><g><title>[[ext4]] (66 samples, 0.05%)</title><rect x="41.2774%" y="805" width="0.0535%" height="15" fill="rgb(221,79,53)" fg:x="50919" fg:w="66"/><text x="41.5274%" y="815.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="41.3139%" y="789" width="0.0170%" height="15" fill="rgb(243,200,35)" fg:x="50964" fg:w="21"/><text x="41.5639%" y="799.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="41.3204%" y="773" width="0.0105%" height="15" fill="rgb(248,60,25)" fg:x="50972" fg:w="13"/><text x="41.5704%" y="783.50"></text></g><g><title>node::BlockManager::FindNextBlockPos (365 samples, 0.30%)</title><rect x="41.0456%" y="1061" width="0.2959%" height="15" fill="rgb(227,53,46)" fg:x="50633" fg:w="365"/><text x="41.2956%" y="1071.50"></text></g><g><title>node::BlockManager::FlushBlockFile (357 samples, 0.29%)</title><rect x="41.0521%" y="1045" width="0.2894%" height="15" fill="rgb(216,120,32)" fg:x="50641" fg:w="357"/><text x="41.3021%" y="1055.50"></text></g><g><title>node::BlockManager::FlushUndoFile (85 samples, 0.07%)</title><rect x="41.2726%" y="1029" width="0.0689%" height="15" fill="rgb(220,134,1)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="1039.50"></text></g><g><title>FlatFileSeq::Flush (85 samples, 0.07%)</title><rect x="41.2726%" y="1013" width="0.0689%" height="15" fill="rgb(237,168,5)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="1023.50"></text></g><g><title>FileCommit (85 samples, 0.07%)</title><rect x="41.2726%" y="997" width="0.0689%" height="15" fill="rgb(231,100,33)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="1007.50"></text></g><g><title>fdatasync (85 samples, 0.07%)</title><rect x="41.2726%" y="981" width="0.0689%" height="15" fill="rgb(236,177,47)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="991.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="41.2726%" y="965" width="0.0689%" height="15" fill="rgb(235,7,49)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="975.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="41.2726%" y="949" width="0.0689%" height="15" fill="rgb(232,119,22)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="959.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="41.2726%" y="933" width="0.0689%" height="15" fill="rgb(254,73,53)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="943.50"></text></g><g><title>[[ext4]] (85 samples, 0.07%)</title><rect x="41.2726%" y="917" width="0.0689%" height="15" fill="rgb(251,35,20)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="927.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="41.2726%" y="901" width="0.0689%" height="15" fill="rgb(241,119,20)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="911.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="41.2726%" y="885" width="0.0689%" height="15" fill="rgb(207,102,14)" fg:x="50913" fg:w="85"/><text x="41.5226%" y="895.50"></text></g><g><title>[unknown] (84 samples, 0.07%)</title><rect x="41.2734%" y="869" width="0.0681%" height="15" fill="rgb(248,201,50)" fg:x="50914" fg:w="84"/><text x="41.5234%" y="879.50"></text></g><g><title>[unknown] (81 samples, 0.07%)</title><rect x="41.2758%" y="853" width="0.0657%" height="15" fill="rgb(222,185,44)" fg:x="50917" fg:w="81"/><text x="41.5258%" y="863.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="41.3309%" y="837" width="0.0105%" height="15" fill="rgb(218,107,18)" fg:x="50985" fg:w="13"/><text x="41.5809%" y="847.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="41.3309%" y="821" width="0.0105%" height="15" fill="rgb(237,177,39)" fg:x="50985" fg:w="13"/><text x="41.5809%" y="831.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="41.3309%" y="805" width="0.0105%" height="15" fill="rgb(246,69,6)" fg:x="50985" fg:w="13"/><text x="41.5809%" y="815.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="41.3309%" y="789" width="0.0105%" height="15" fill="rgb(234,208,37)" fg:x="50985" fg:w="13"/><text x="41.5809%" y="799.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (41 samples, 0.03%)</title><rect x="41.3552%" y="901" width="0.0332%" height="15" fill="rgb(225,4,6)" fg:x="51015" fg:w="41"/><text x="41.6052%" y="911.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (41 samples, 0.03%)</title><rect x="41.3552%" y="885" width="0.0332%" height="15" fill="rgb(233,45,0)" fg:x="51015" fg:w="41"/><text x="41.6052%" y="895.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (41 samples, 0.03%)</title><rect x="41.3552%" y="869" width="0.0332%" height="15" fill="rgb(226,136,5)" fg:x="51015" fg:w="41"/><text x="41.6052%" y="879.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (41 samples, 0.03%)</title><rect x="41.3552%" y="853" width="0.0332%" height="15" fill="rgb(211,91,47)" fg:x="51015" fg:w="41"/><text x="41.6052%" y="863.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (41 samples, 0.03%)</title><rect x="41.3552%" y="837" width="0.0332%" height="15" fill="rgb(242,88,51)" fg:x="51015" fg:w="41"/><text x="41.6052%" y="847.50"></text></g><g><title>AutoFile::write (142 samples, 0.12%)</title><rect x="41.3415%" y="917" width="0.1151%" height="15" fill="rgb(230,91,28)" fg:x="50998" fg:w="142"/><text x="41.5915%" y="927.50"></text></g><g><title>util::Xor (82 samples, 0.07%)</title><rect x="41.3901%" y="901" width="0.0665%" height="15" fill="rgb(254,186,29)" fg:x="51058" fg:w="82"/><text x="41.6401%" y="911.50"></text></g><g><title>std::operator^= (29 samples, 0.02%)</title><rect x="41.4331%" y="885" width="0.0235%" height="15" fill="rgb(238,6,4)" fg:x="51111" fg:w="29"/><text x="41.6831%" y="895.50"></text></g><g><title>std::operator^ (29 samples, 0.02%)</title><rect x="41.4331%" y="869" width="0.0235%" height="15" fill="rgb(221,151,16)" fg:x="51111" fg:w="29"/><text x="41.6831%" y="879.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="41.4866%" y="341" width="0.0105%" height="15" fill="rgb(251,143,52)" fg:x="51177" fg:w="13"/><text x="41.7366%" y="351.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="41.4866%" y="325" width="0.0105%" height="15" fill="rgb(206,90,15)" fg:x="51177" fg:w="13"/><text x="41.7366%" y="335.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (16 samples, 0.01%)</title><rect x="41.4849%" y="469" width="0.0130%" height="15" fill="rgb(218,35,8)" fg:x="51175" fg:w="16"/><text x="41.7349%" y="479.50"></text></g><g><title>new_do_write (16 samples, 0.01%)</title><rect x="41.4849%" y="453" width="0.0130%" height="15" fill="rgb(239,215,6)" fg:x="51175" fg:w="16"/><text x="41.7349%" y="463.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (16 samples, 0.01%)</title><rect x="41.4849%" y="437" width="0.0130%" height="15" fill="rgb(245,116,39)" fg:x="51175" fg:w="16"/><text x="41.7349%" y="447.50"></text></g><g><title>__GI___libc_write (16 samples, 0.01%)</title><rect x="41.4849%" y="421" width="0.0130%" height="15" fill="rgb(242,65,28)" fg:x="51175" fg:w="16"/><text x="41.7349%" y="431.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="41.4849%" y="405" width="0.0130%" height="15" fill="rgb(252,132,53)" fg:x="51175" fg:w="16"/><text x="41.7349%" y="415.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="41.4858%" y="389" width="0.0122%" height="15" fill="rgb(224,159,50)" fg:x="51176" fg:w="15"/><text x="41.7358%" y="399.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="41.4858%" y="373" width="0.0122%" height="15" fill="rgb(224,93,4)" fg:x="51176" fg:w="15"/><text x="41.7358%" y="383.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="41.4858%" y="357" width="0.0122%" height="15" fill="rgb(208,81,34)" fg:x="51176" fg:w="15"/><text x="41.7358%" y="367.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (19 samples, 0.02%)</title><rect x="41.4841%" y="485" width="0.0154%" height="15" fill="rgb(233,92,54)" fg:x="51174" fg:w="19"/><text x="41.7341%" y="495.50"></text></g><g><title>_IO_fwrite (45 samples, 0.04%)</title><rect x="41.4639%" y="501" width="0.0365%" height="15" fill="rgb(237,21,14)" fg:x="51149" fg:w="45"/><text x="41.7139%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (49 samples, 0.04%)</title><rect x="41.4614%" y="565" width="0.0397%" height="15" fill="rgb(249,128,51)" fg:x="51146" fg:w="49"/><text x="41.7114%" y="575.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (49 samples, 0.04%)</title><rect x="41.4614%" y="549" width="0.0397%" height="15" fill="rgb(223,129,24)" fg:x="51146" fg:w="49"/><text x="41.7114%" y="559.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (49 samples, 0.04%)</title><rect x="41.4614%" y="533" width="0.0397%" height="15" fill="rgb(231,168,25)" fg:x="51146" fg:w="49"/><text x="41.7114%" y="543.50"></text></g><g><title>AutoFile::write (48 samples, 0.04%)</title><rect x="41.4622%" y="517" width="0.0389%" height="15" fill="rgb(224,39,20)" fg:x="51147" fg:w="48"/><text x="41.7122%" y="527.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="41.5182%" y="245" width="0.0105%" height="15" fill="rgb(225,152,53)" fg:x="51216" fg:w="13"/><text x="41.7682%" y="255.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="41.5182%" y="229" width="0.0105%" height="15" fill="rgb(252,17,24)" fg:x="51216" fg:w="13"/><text x="41.7682%" y="239.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (19 samples, 0.02%)</title><rect x="41.5166%" y="373" width="0.0154%" height="15" fill="rgb(250,114,30)" fg:x="51214" fg:w="19"/><text x="41.7666%" y="383.50"></text></g><g><title>new_do_write (19 samples, 0.02%)</title><rect x="41.5166%" y="357" width="0.0154%" height="15" fill="rgb(229,5,4)" fg:x="51214" fg:w="19"/><text x="41.7666%" y="367.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (18 samples, 0.01%)</title><rect x="41.5174%" y="341" width="0.0146%" height="15" fill="rgb(225,176,49)" fg:x="51215" fg:w="18"/><text x="41.7674%" y="351.50"></text></g><g><title>__GI___libc_write (18 samples, 0.01%)</title><rect x="41.5174%" y="325" width="0.0146%" height="15" fill="rgb(224,221,49)" fg:x="51215" fg:w="18"/><text x="41.7674%" y="335.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="41.5174%" y="309" width="0.0146%" height="15" fill="rgb(253,169,27)" fg:x="51215" fg:w="18"/><text x="41.7674%" y="319.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="41.5174%" y="293" width="0.0146%" height="15" fill="rgb(211,206,16)" fg:x="51215" fg:w="18"/><text x="41.7674%" y="303.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="41.5174%" y="277" width="0.0146%" height="15" fill="rgb(244,87,35)" fg:x="51215" fg:w="18"/><text x="41.7674%" y="287.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="41.5182%" y="261" width="0.0138%" height="15" fill="rgb(246,28,10)" fg:x="51216" fg:w="17"/><text x="41.7682%" y="271.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (23 samples, 0.02%)</title><rect x="41.5166%" y="389" width="0.0186%" height="15" fill="rgb(229,12,44)" fg:x="51214" fg:w="23"/><text x="41.7666%" y="399.50"></text></g><g><title>_IO_fwrite (41 samples, 0.03%)</title><rect x="41.5028%" y="405" width="0.0332%" height="15" fill="rgb(210,145,37)" fg:x="51197" fg:w="41"/><text x="41.7528%" y="415.50"></text></g><g><title>AutoFile::write (50 samples, 0.04%)</title><rect x="41.5020%" y="421" width="0.0405%" height="15" fill="rgb(227,112,52)" fg:x="51196" fg:w="50"/><text x="41.7520%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (52 samples, 0.04%)</title><rect x="41.5012%" y="469" width="0.0422%" height="15" fill="rgb(238,155,34)" fg:x="51195" fg:w="52"/><text x="41.7512%" y="479.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (52 samples, 0.04%)</title><rect x="41.5012%" y="453" width="0.0422%" height="15" fill="rgb(239,226,36)" fg:x="51195" fg:w="52"/><text x="41.7512%" y="463.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (52 samples, 0.04%)</title><rect x="41.5012%" y="437" width="0.0422%" height="15" fill="rgb(230,16,23)" fg:x="51195" fg:w="52"/><text x="41.7512%" y="447.50"></text></g><g><title>[[ext4]] (34 samples, 0.03%)</title><rect x="41.5838%" y="149" width="0.0276%" height="15" fill="rgb(236,171,36)" fg:x="51297" fg:w="34"/><text x="41.8338%" y="159.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="41.5911%" y="133" width="0.0203%" height="15" fill="rgb(221,22,14)" fg:x="51306" fg:w="25"/><text x="41.8411%" y="143.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="41.5936%" y="117" width="0.0178%" height="15" fill="rgb(242,43,11)" fg:x="51309" fg:w="22"/><text x="41.8436%" y="127.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="41.5984%" y="101" width="0.0130%" height="15" fill="rgb(232,69,23)" fg:x="51315" fg:w="16"/><text x="41.8484%" y="111.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="41.6001%" y="85" width="0.0113%" height="15" fill="rgb(216,180,54)" fg:x="51317" fg:w="14"/><text x="41.8501%" y="95.50"></text></g><g><title>[[ext4]] (155 samples, 0.13%)</title><rect x="41.5830%" y="165" width="0.1257%" height="15" fill="rgb(216,5,24)" fg:x="51296" fg:w="155"/><text x="41.8330%" y="175.50"></text></g><g><title>[unknown] (120 samples, 0.10%)</title><rect x="41.6114%" y="149" width="0.0973%" height="15" fill="rgb(225,89,9)" fg:x="51331" fg:w="120"/><text x="41.8614%" y="159.50"></text></g><g><title>[unknown] (115 samples, 0.09%)</title><rect x="41.6155%" y="133" width="0.0932%" height="15" fill="rgb(243,75,33)" fg:x="51336" fg:w="115"/><text x="41.8655%" y="143.50"></text></g><g><title>[unknown] (92 samples, 0.07%)</title><rect x="41.6341%" y="117" width="0.0746%" height="15" fill="rgb(247,141,45)" fg:x="51359" fg:w="92"/><text x="41.8841%" y="127.50"></text></g><g><title>[unknown] (78 samples, 0.06%)</title><rect x="41.6455%" y="101" width="0.0632%" height="15" fill="rgb(232,177,36)" fg:x="51373" fg:w="78"/><text x="41.8955%" y="111.50"></text></g><g><title>[unknown] (56 samples, 0.05%)</title><rect x="41.6633%" y="85" width="0.0454%" height="15" fill="rgb(219,125,36)" fg:x="51395" fg:w="56"/><text x="41.9133%" y="95.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="41.6925%" y="69" width="0.0162%" height="15" fill="rgb(227,94,9)" fg:x="51431" fg:w="20"/><text x="41.9425%" y="79.50"></text></g><g><title>[[ext4]] (180 samples, 0.15%)</title><rect x="41.5782%" y="197" width="0.1459%" height="15" fill="rgb(240,34,52)" fg:x="51290" fg:w="180"/><text x="41.8282%" y="207.50"></text></g><g><title>[unknown] (177 samples, 0.14%)</title><rect x="41.5806%" y="181" width="0.1435%" height="15" fill="rgb(216,45,12)" fg:x="51293" fg:w="177"/><text x="41.8306%" y="191.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="41.7087%" y="165" width="0.0154%" height="15" fill="rgb(246,21,19)" fg:x="51451" fg:w="19"/><text x="41.9587%" y="175.50"></text></g><g><title>[unknown] (205 samples, 0.17%)</title><rect x="41.5628%" y="261" width="0.1662%" height="15" fill="rgb(213,98,42)" fg:x="51271" fg:w="205"/><text x="41.8128%" y="271.50"></text></g><g><title>[unknown] (203 samples, 0.16%)</title><rect x="41.5644%" y="245" width="0.1646%" height="15" fill="rgb(250,136,47)" fg:x="51273" fg:w="203"/><text x="41.8144%" y="255.50"></text></g><g><title>[unknown] (202 samples, 0.16%)</title><rect x="41.5652%" y="229" width="0.1638%" height="15" fill="rgb(251,124,27)" fg:x="51274" fg:w="202"/><text x="41.8152%" y="239.50"></text></g><g><title>[unknown] (198 samples, 0.16%)</title><rect x="41.5684%" y="213" width="0.1605%" height="15" fill="rgb(229,180,14)" fg:x="51278" fg:w="198"/><text x="41.8184%" y="223.50"></text></g><g><title>_IO_fwrite (214 samples, 0.17%)</title><rect x="41.5571%" y="357" width="0.1735%" height="15" fill="rgb(245,216,25)" fg:x="51264" fg:w="214"/><text x="41.8071%" y="367.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (213 samples, 0.17%)</title><rect x="41.5579%" y="341" width="0.1727%" height="15" fill="rgb(251,43,5)" fg:x="51265" fg:w="213"/><text x="41.8079%" y="351.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (212 samples, 0.17%)</title><rect x="41.5587%" y="325" width="0.1719%" height="15" fill="rgb(250,128,24)" fg:x="51266" fg:w="212"/><text x="41.8087%" y="335.50"></text></g><g><title>new_do_write (211 samples, 0.17%)</title><rect x="41.5595%" y="309" width="0.1710%" height="15" fill="rgb(217,117,27)" fg:x="51267" fg:w="211"/><text x="41.8095%" y="319.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (210 samples, 0.17%)</title><rect x="41.5603%" y="293" width="0.1702%" height="15" fill="rgb(245,147,4)" fg:x="51268" fg:w="210"/><text x="41.8103%" y="303.50"></text></g><g><title>__GI___libc_write (209 samples, 0.17%)</title><rect x="41.5611%" y="277" width="0.1694%" height="15" fill="rgb(242,201,35)" fg:x="51269" fg:w="209"/><text x="41.8111%" y="287.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (16 samples, 0.01%)</title><rect x="41.7306%" y="357" width="0.0130%" height="15" fill="rgb(218,181,1)" fg:x="51478" fg:w="16"/><text x="41.9806%" y="367.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (16 samples, 0.01%)</title><rect x="41.7306%" y="341" width="0.0130%" height="15" fill="rgb(222,6,29)" fg:x="51478" fg:w="16"/><text x="41.9806%" y="351.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (16 samples, 0.01%)</title><rect x="41.7306%" y="325" width="0.0130%" height="15" fill="rgb(208,186,3)" fg:x="51478" fg:w="16"/><text x="41.9806%" y="335.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (16 samples, 0.01%)</title><rect x="41.7306%" y="309" width="0.0130%" height="15" fill="rgb(216,36,26)" fg:x="51478" fg:w="16"/><text x="41.9806%" y="319.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (16 samples, 0.01%)</title><rect x="41.7306%" y="293" width="0.0130%" height="15" fill="rgb(248,201,23)" fg:x="51478" fg:w="16"/><text x="41.9806%" y="303.50"></text></g><g><title>AutoFile::write (305 samples, 0.25%)</title><rect x="41.5433%" y="373" width="0.2472%" height="15" fill="rgb(251,170,31)" fg:x="51247" fg:w="305"/><text x="41.7933%" y="383.50"></text></g><g><title>util::Xor (58 samples, 0.05%)</title><rect x="41.7435%" y="357" width="0.0470%" height="15" fill="rgb(207,110,25)" fg:x="51494" fg:w="58"/><text x="41.9935%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (360 samples, 0.29%)</title><rect x="41.5012%" y="565" width="0.2918%" height="15" fill="rgb(250,54,15)" fg:x="51195" fg:w="360"/><text x="41.7512%" y="575.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (360 samples, 0.29%)</title><rect x="41.5012%" y="549" width="0.2918%" height="15" fill="rgb(227,68,33)" fg:x="51195" fg:w="360"/><text x="41.7512%" y="559.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (360 samples, 0.29%)</title><rect x="41.5012%" y="533" width="0.2918%" height="15" fill="rgb(238,34,41)" fg:x="51195" fg:w="360"/><text x="41.7512%" y="543.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (360 samples, 0.29%)</title><rect x="41.5012%" y="517" width="0.2918%" height="15" fill="rgb(220,11,15)" fg:x="51195" fg:w="360"/><text x="41.7512%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (360 samples, 0.29%)</title><rect x="41.5012%" y="501" width="0.2918%" height="15" fill="rgb(246,111,35)" fg:x="51195" fg:w="360"/><text x="41.7512%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (360 samples, 0.29%)</title><rect x="41.5012%" y="485" width="0.2918%" height="15" fill="rgb(209,88,53)" fg:x="51195" fg:w="360"/><text x="41.7512%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (308 samples, 0.25%)</title><rect x="41.5433%" y="469" width="0.2497%" height="15" fill="rgb(231,185,47)" fg:x="51247" fg:w="308"/><text x="41.7933%" y="479.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (308 samples, 0.25%)</title><rect x="41.5433%" y="453" width="0.2497%" height="15" fill="rgb(233,154,1)" fg:x="51247" fg:w="308"/><text x="41.7933%" y="463.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (308 samples, 0.25%)</title><rect x="41.5433%" y="437" width="0.2497%" height="15" fill="rgb(225,15,46)" fg:x="51247" fg:w="308"/><text x="41.7933%" y="447.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (308 samples, 0.25%)</title><rect x="41.5433%" y="421" width="0.2497%" height="15" fill="rgb(211,135,41)" fg:x="51247" fg:w="308"/><text x="41.7933%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (308 samples, 0.25%)</title><rect x="41.5433%" y="405" width="0.2497%" height="15" fill="rgb(208,54,0)" fg:x="51247" fg:w="308"/><text x="41.7933%" y="415.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (308 samples, 0.25%)</title><rect x="41.5433%" y="389" width="0.2497%" height="15" fill="rgb(244,136,14)" fg:x="51247" fg:w="308"/><text x="41.7933%" y="399.50"></text></g><g><title>[[ext4]] (43 samples, 0.03%)</title><rect x="41.8035%" y="229" width="0.0349%" height="15" fill="rgb(241,56,14)" fg:x="51568" fg:w="43"/><text x="42.0535%" y="239.50"></text></g><g><title>[unknown] (33 samples, 0.03%)</title><rect x="41.8116%" y="213" width="0.0268%" height="15" fill="rgb(205,80,24)" fg:x="51578" fg:w="33"/><text x="42.0616%" y="223.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="41.8141%" y="197" width="0.0243%" height="15" fill="rgb(220,57,4)" fg:x="51581" fg:w="30"/><text x="42.0641%" y="207.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="41.8141%" y="181" width="0.0243%" height="15" fill="rgb(226,193,50)" fg:x="51581" fg:w="30"/><text x="42.0641%" y="191.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="41.8206%" y="165" width="0.0178%" height="15" fill="rgb(231,168,22)" fg:x="51589" fg:w="22"/><text x="42.0706%" y="175.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="41.8254%" y="149" width="0.0130%" height="15" fill="rgb(254,215,14)" fg:x="51595" fg:w="16"/><text x="42.0754%" y="159.50"></text></g><g><title>[[ext4]] (51 samples, 0.04%)</title><rect x="41.8011%" y="261" width="0.0413%" height="15" fill="rgb(211,115,16)" fg:x="51565" fg:w="51"/><text x="42.0511%" y="271.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="41.8011%" y="245" width="0.0413%" height="15" fill="rgb(236,210,16)" fg:x="51565" fg:w="51"/><text x="42.0511%" y="255.50"></text></g><g><title>_IO_fwrite (63 samples, 0.05%)</title><rect x="41.7962%" y="421" width="0.0511%" height="15" fill="rgb(221,94,12)" fg:x="51559" fg:w="63"/><text x="42.0462%" y="431.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (63 samples, 0.05%)</title><rect x="41.7962%" y="405" width="0.0511%" height="15" fill="rgb(235,218,49)" fg:x="51559" fg:w="63"/><text x="42.0462%" y="415.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (63 samples, 0.05%)</title><rect x="41.7962%" y="389" width="0.0511%" height="15" fill="rgb(217,114,14)" fg:x="51559" fg:w="63"/><text x="42.0462%" y="399.50"></text></g><g><title>new_do_write (63 samples, 0.05%)</title><rect x="41.7962%" y="373" width="0.0511%" height="15" fill="rgb(216,145,22)" fg:x="51559" fg:w="63"/><text x="42.0462%" y="383.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (62 samples, 0.05%)</title><rect x="41.7970%" y="357" width="0.0503%" height="15" fill="rgb(217,112,39)" fg:x="51560" fg:w="62"/><text x="42.0470%" y="367.50"></text></g><g><title>__GI___libc_write (62 samples, 0.05%)</title><rect x="41.7970%" y="341" width="0.0503%" height="15" fill="rgb(225,85,32)" fg:x="51560" fg:w="62"/><text x="42.0470%" y="351.50"></text></g><g><title>[unknown] (62 samples, 0.05%)</title><rect x="41.7970%" y="325" width="0.0503%" height="15" fill="rgb(245,209,47)" fg:x="51560" fg:w="62"/><text x="42.0470%" y="335.50"></text></g><g><title>[unknown] (62 samples, 0.05%)</title><rect x="41.7970%" y="309" width="0.0503%" height="15" fill="rgb(218,220,15)" fg:x="51560" fg:w="62"/><text x="42.0470%" y="319.50"></text></g><g><title>[unknown] (62 samples, 0.05%)</title><rect x="41.7970%" y="293" width="0.0503%" height="15" fill="rgb(222,202,31)" fg:x="51560" fg:w="62"/><text x="42.0470%" y="303.50"></text></g><g><title>[unknown] (62 samples, 0.05%)</title><rect x="41.7970%" y="277" width="0.0503%" height="15" fill="rgb(243,203,4)" fg:x="51560" fg:w="62"/><text x="42.0470%" y="287.50"></text></g><g><title>AutoFile::write (141 samples, 0.11%)</title><rect x="41.7930%" y="437" width="0.1143%" height="15" fill="rgb(237,92,17)" fg:x="51555" fg:w="141"/><text x="42.0430%" y="447.50"></text></g><g><title>util::Xor (68 samples, 0.06%)</title><rect x="41.8522%" y="421" width="0.0551%" height="15" fill="rgb(231,119,7)" fg:x="51628" fg:w="68"/><text x="42.1022%" y="431.50"></text></g><g><title>std::operator^= (29 samples, 0.02%)</title><rect x="41.8838%" y="405" width="0.0235%" height="15" fill="rgb(237,82,41)" fg:x="51667" fg:w="29"/><text x="42.1338%" y="415.50"></text></g><g><title>std::operator^ (29 samples, 0.02%)</title><rect x="41.8838%" y="389" width="0.0235%" height="15" fill="rgb(226,81,48)" fg:x="51667" fg:w="29"/><text x="42.1338%" y="399.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (146 samples, 0.12%)</title><rect x="41.7930%" y="453" width="0.1184%" height="15" fill="rgb(234,70,51)" fg:x="51555" fg:w="146"/><text x="42.0430%" y="463.50"></text></g><g><title>_IO_fwrite (47 samples, 0.04%)</title><rect x="41.9113%" y="389" width="0.0381%" height="15" fill="rgb(251,86,4)" fg:x="51701" fg:w="47"/><text x="42.1613%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (604 samples, 0.49%)</title><rect x="41.4606%" y="677" width="0.4896%" height="15" fill="rgb(244,144,28)" fg:x="51145" fg:w="604"/><text x="41.7106%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (604 samples, 0.49%)</title><rect x="41.4606%" y="661" width="0.4896%" height="15" fill="rgb(232,161,39)" fg:x="51145" fg:w="604"/><text x="41.7106%" y="671.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (604 samples, 0.49%)</title><rect x="41.4606%" y="645" width="0.4896%" height="15" fill="rgb(247,34,51)" fg:x="51145" fg:w="604"/><text x="41.7106%" y="655.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (604 samples, 0.49%)</title><rect x="41.4606%" y="629" width="0.4896%" height="15" fill="rgb(225,132,2)" fg:x="51145" fg:w="604"/><text x="41.7106%" y="639.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (604 samples, 0.49%)</title><rect x="41.4606%" y="613" width="0.4896%" height="15" fill="rgb(209,159,44)" fg:x="51145" fg:w="604"/><text x="41.7106%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (604 samples, 0.49%)</title><rect x="41.4606%" y="597" width="0.4896%" height="15" fill="rgb(251,214,1)" fg:x="51145" fg:w="604"/><text x="41.7106%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (604 samples, 0.49%)</title><rect x="41.4606%" y="581" width="0.4896%" height="15" fill="rgb(247,84,47)" fg:x="51145" fg:w="604"/><text x="41.7106%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (194 samples, 0.16%)</title><rect x="41.7930%" y="565" width="0.1573%" height="15" fill="rgb(240,111,43)" fg:x="51555" fg:w="194"/><text x="42.0430%" y="575.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (194 samples, 0.16%)</title><rect x="41.7930%" y="549" width="0.1573%" height="15" fill="rgb(215,214,35)" fg:x="51555" fg:w="194"/><text x="42.0430%" y="559.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (194 samples, 0.16%)</title><rect x="41.7930%" y="533" width="0.1573%" height="15" fill="rgb(248,207,23)" fg:x="51555" fg:w="194"/><text x="42.0430%" y="543.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (194 samples, 0.16%)</title><rect x="41.7930%" y="517" width="0.1573%" height="15" fill="rgb(214,186,4)" fg:x="51555" fg:w="194"/><text x="42.0430%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (194 samples, 0.16%)</title><rect x="41.7930%" y="501" width="0.1573%" height="15" fill="rgb(220,133,22)" fg:x="51555" fg:w="194"/><text x="42.0430%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (194 samples, 0.16%)</title><rect x="41.7930%" y="485" width="0.1573%" height="15" fill="rgb(239,134,19)" fg:x="51555" fg:w="194"/><text x="42.0430%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (194 samples, 0.16%)</title><rect x="41.7930%" y="469" width="0.1573%" height="15" fill="rgb(250,140,9)" fg:x="51555" fg:w="194"/><text x="42.0430%" y="479.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="41.9113%" y="453" width="0.0389%" height="15" fill="rgb(225,59,14)" fg:x="51701" fg:w="48"/><text x="42.1613%" y="463.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="41.9113%" y="437" width="0.0389%" height="15" fill="rgb(214,152,51)" fg:x="51701" fg:w="48"/><text x="42.1613%" y="447.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (48 samples, 0.04%)</title><rect x="41.9113%" y="421" width="0.0389%" height="15" fill="rgb(251,227,43)" fg:x="51701" fg:w="48"/><text x="42.1613%" y="431.50"></text></g><g><title>AutoFile::write (48 samples, 0.04%)</title><rect x="41.9113%" y="405" width="0.0389%" height="15" fill="rgb(241,96,17)" fg:x="51701" fg:w="48"/><text x="42.1613%" y="415.50"></text></g><g><title>AutoFile::write (43 samples, 0.03%)</title><rect x="41.9511%" y="629" width="0.0349%" height="15" fill="rgb(234,198,43)" fg:x="51750" fg:w="43"/><text x="42.2011%" y="639.50"></text></g><g><title>_IO_fwrite (41 samples, 0.03%)</title><rect x="41.9527%" y="613" width="0.0332%" height="15" fill="rgb(220,108,29)" fg:x="51752" fg:w="41"/><text x="42.2027%" y="623.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (655 samples, 0.53%)</title><rect x="41.4566%" y="757" width="0.5310%" height="15" fill="rgb(226,163,33)" fg:x="51140" fg:w="655"/><text x="41.7066%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (655 samples, 0.53%)</title><rect x="41.4566%" y="741" width="0.5310%" height="15" fill="rgb(205,194,45)" fg:x="51140" fg:w="655"/><text x="41.7066%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (655 samples, 0.53%)</title><rect x="41.4566%" y="725" width="0.5310%" height="15" fill="rgb(206,143,44)" fg:x="51140" fg:w="655"/><text x="41.7066%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (655 samples, 0.53%)</title><rect x="41.4566%" y="709" width="0.5310%" height="15" fill="rgb(236,136,36)" fg:x="51140" fg:w="655"/><text x="41.7066%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (655 samples, 0.53%)</title><rect x="41.4566%" y="693" width="0.5310%" height="15" fill="rgb(249,172,42)" fg:x="51140" fg:w="655"/><text x="41.7066%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (46 samples, 0.04%)</title><rect x="41.9503%" y="677" width="0.0373%" height="15" fill="rgb(216,139,23)" fg:x="51749" fg:w="46"/><text x="42.2003%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (45 samples, 0.04%)</title><rect x="41.9511%" y="661" width="0.0365%" height="15" fill="rgb(207,166,20)" fg:x="51750" fg:w="45"/><text x="42.2011%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (45 samples, 0.04%)</title><rect x="41.9511%" y="645" width="0.0365%" height="15" fill="rgb(210,209,22)" fg:x="51750" fg:w="45"/><text x="42.2011%" y="655.50"></text></g><g><title>[[ext4]] (42 samples, 0.03%)</title><rect x="42.0086%" y="309" width="0.0340%" height="15" fill="rgb(232,118,20)" fg:x="51821" fg:w="42"/><text x="42.2586%" y="319.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="42.0175%" y="293" width="0.0251%" height="15" fill="rgb(238,113,42)" fg:x="51832" fg:w="31"/><text x="42.2675%" y="303.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="42.0184%" y="277" width="0.0243%" height="15" fill="rgb(231,42,5)" fg:x="51833" fg:w="30"/><text x="42.2684%" y="287.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="42.0224%" y="261" width="0.0203%" height="15" fill="rgb(243,166,24)" fg:x="51838" fg:w="25"/><text x="42.2724%" y="271.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="42.0248%" y="245" width="0.0178%" height="15" fill="rgb(237,226,12)" fg:x="51841" fg:w="22"/><text x="42.2748%" y="255.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="42.0313%" y="229" width="0.0113%" height="15" fill="rgb(229,133,24)" fg:x="51849" fg:w="14"/><text x="42.2813%" y="239.50"></text></g><g><title>[[ext4]] (51 samples, 0.04%)</title><rect x="42.0062%" y="341" width="0.0413%" height="15" fill="rgb(238,33,43)" fg:x="51818" fg:w="51"/><text x="42.2562%" y="351.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="42.0062%" y="325" width="0.0413%" height="15" fill="rgb(227,59,38)" fg:x="51818" fg:w="51"/><text x="42.2562%" y="335.50"></text></g><g><title>[unknown] (57 samples, 0.05%)</title><rect x="42.0038%" y="405" width="0.0462%" height="15" fill="rgb(230,97,0)" fg:x="51815" fg:w="57"/><text x="42.2538%" y="415.50"></text></g><g><title>[unknown] (57 samples, 0.05%)</title><rect x="42.0038%" y="389" width="0.0462%" height="15" fill="rgb(250,173,50)" fg:x="51815" fg:w="57"/><text x="42.2538%" y="399.50"></text></g><g><title>[unknown] (57 samples, 0.05%)</title><rect x="42.0038%" y="373" width="0.0462%" height="15" fill="rgb(240,15,50)" fg:x="51815" fg:w="57"/><text x="42.2538%" y="383.50"></text></g><g><title>[unknown] (57 samples, 0.05%)</title><rect x="42.0038%" y="357" width="0.0462%" height="15" fill="rgb(221,93,22)" fg:x="51815" fg:w="57"/><text x="42.2538%" y="367.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (58 samples, 0.05%)</title><rect x="42.0038%" y="469" width="0.0470%" height="15" fill="rgb(245,180,53)" fg:x="51815" fg:w="58"/><text x="42.2538%" y="479.50"></text></g><g><title>new_do_write (58 samples, 0.05%)</title><rect x="42.0038%" y="453" width="0.0470%" height="15" fill="rgb(231,88,51)" fg:x="51815" fg:w="58"/><text x="42.2538%" y="463.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (58 samples, 0.05%)</title><rect x="42.0038%" y="437" width="0.0470%" height="15" fill="rgb(240,58,21)" fg:x="51815" fg:w="58"/><text x="42.2538%" y="447.50"></text></g><g><title>__GI___libc_write (58 samples, 0.05%)</title><rect x="42.0038%" y="421" width="0.0470%" height="15" fill="rgb(237,21,10)" fg:x="51815" fg:w="58"/><text x="42.2538%" y="431.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (75 samples, 0.06%)</title><rect x="41.9965%" y="485" width="0.0608%" height="15" fill="rgb(218,43,11)" fg:x="51806" fg:w="75"/><text x="42.2465%" y="495.50"></text></g><g><title>_IO_fwrite (80 samples, 0.06%)</title><rect x="41.9940%" y="501" width="0.0649%" height="15" fill="rgb(218,221,29)" fg:x="51803" fg:w="80"/><text x="42.2440%" y="511.50"></text></g><g><title>AutoFile::write (98 samples, 0.08%)</title><rect x="41.9884%" y="517" width="0.0794%" height="15" fill="rgb(214,118,42)" fg:x="51796" fg:w="98"/><text x="42.2384%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (101 samples, 0.08%)</title><rect x="41.9875%" y="565" width="0.0819%" height="15" fill="rgb(251,200,26)" fg:x="51795" fg:w="101"/><text x="42.2375%" y="575.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (101 samples, 0.08%)</title><rect x="41.9875%" y="549" width="0.0819%" height="15" fill="rgb(237,101,39)" fg:x="51795" fg:w="101"/><text x="42.2375%" y="559.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (101 samples, 0.08%)</title><rect x="41.9875%" y="533" width="0.0819%" height="15" fill="rgb(251,117,11)" fg:x="51795" fg:w="101"/><text x="42.2375%" y="543.50"></text></g><g><title>[[ext4]] (20 samples, 0.02%)</title><rect x="42.1116%" y="213" width="0.0162%" height="15" fill="rgb(216,223,23)" fg:x="51948" fg:w="20"/><text x="42.3616%" y="223.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="42.1156%" y="197" width="0.0122%" height="15" fill="rgb(251,54,12)" fg:x="51953" fg:w="15"/><text x="42.3656%" y="207.50"></text></g><g><title>[[ext4]] (92 samples, 0.07%)</title><rect x="42.1108%" y="229" width="0.0746%" height="15" fill="rgb(254,176,54)" fg:x="51947" fg:w="92"/><text x="42.3608%" y="239.50"></text></g><g><title>[unknown] (71 samples, 0.06%)</title><rect x="42.1278%" y="213" width="0.0576%" height="15" fill="rgb(210,32,8)" fg:x="51968" fg:w="71"/><text x="42.3778%" y="223.50"></text></g><g><title>[unknown] (66 samples, 0.05%)</title><rect x="42.1318%" y="197" width="0.0535%" height="15" fill="rgb(235,52,38)" fg:x="51973" fg:w="66"/><text x="42.3818%" y="207.50"></text></g><g><title>[unknown] (54 samples, 0.04%)</title><rect x="42.1416%" y="181" width="0.0438%" height="15" fill="rgb(231,4,44)" fg:x="51985" fg:w="54"/><text x="42.3916%" y="191.50"></text></g><g><title>[unknown] (40 samples, 0.03%)</title><rect x="42.1529%" y="165" width="0.0324%" height="15" fill="rgb(249,2,32)" fg:x="51999" fg:w="40"/><text x="42.4029%" y="175.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="42.1610%" y="149" width="0.0243%" height="15" fill="rgb(224,65,26)" fg:x="52009" fg:w="30"/><text x="42.4110%" y="159.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="42.1732%" y="133" width="0.0122%" height="15" fill="rgb(250,73,40)" fg:x="52024" fg:w="15"/><text x="42.4232%" y="143.50"></text></g><g><title>[[ext4]] (113 samples, 0.09%)</title><rect x="42.1059%" y="261" width="0.0916%" height="15" fill="rgb(253,177,16)" fg:x="51941" fg:w="113"/><text x="42.3559%" y="271.50"></text></g><g><title>[unknown] (109 samples, 0.09%)</title><rect x="42.1091%" y="245" width="0.0884%" height="15" fill="rgb(217,32,34)" fg:x="51945" fg:w="109"/><text x="42.3591%" y="255.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="42.1853%" y="229" width="0.0122%" height="15" fill="rgb(212,7,10)" fg:x="52039" fg:w="15"/><text x="42.4353%" y="239.50"></text></g><g><title>_IO_fwrite (147 samples, 0.12%)</title><rect x="42.0832%" y="421" width="0.1192%" height="15" fill="rgb(245,89,8)" fg:x="51913" fg:w="147"/><text x="42.3332%" y="431.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (131 samples, 0.11%)</title><rect x="42.0962%" y="405" width="0.1062%" height="15" fill="rgb(237,16,53)" fg:x="51929" fg:w="131"/><text x="42.3462%" y="415.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (129 samples, 0.10%)</title><rect x="42.0978%" y="389" width="0.1046%" height="15" fill="rgb(250,204,30)" fg:x="51931" fg:w="129"/><text x="42.3478%" y="399.50"></text></g><g><title>new_do_write (129 samples, 0.10%)</title><rect x="42.0978%" y="373" width="0.1046%" height="15" fill="rgb(208,77,27)" fg:x="51931" fg:w="129"/><text x="42.3478%" y="383.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (128 samples, 0.10%)</title><rect x="42.0986%" y="357" width="0.1038%" height="15" fill="rgb(250,204,28)" fg:x="51932" fg:w="128"/><text x="42.3486%" y="367.50"></text></g><g><title>__GI___libc_write (127 samples, 0.10%)</title><rect x="42.0994%" y="341" width="0.1030%" height="15" fill="rgb(244,63,21)" fg:x="51933" fg:w="127"/><text x="42.3494%" y="351.50"></text></g><g><title>[unknown] (127 samples, 0.10%)</title><rect x="42.0994%" y="325" width="0.1030%" height="15" fill="rgb(236,85,44)" fg:x="51933" fg:w="127"/><text x="42.3494%" y="335.50"></text></g><g><title>[unknown] (126 samples, 0.10%)</title><rect x="42.1002%" y="309" width="0.1021%" height="15" fill="rgb(215,98,4)" fg:x="51934" fg:w="126"/><text x="42.3502%" y="319.50"></text></g><g><title>[unknown] (126 samples, 0.10%)</title><rect x="42.1002%" y="293" width="0.1021%" height="15" fill="rgb(235,38,11)" fg:x="51934" fg:w="126"/><text x="42.3502%" y="303.50"></text></g><g><title>[unknown] (123 samples, 0.10%)</title><rect x="42.1027%" y="277" width="0.0997%" height="15" fill="rgb(254,186,25)" fg:x="51937" fg:w="123"/><text x="42.3527%" y="287.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (21 samples, 0.02%)</title><rect x="42.2024%" y="421" width="0.0170%" height="15" fill="rgb(225,55,31)" fg:x="52060" fg:w="21"/><text x="42.4524%" y="431.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (21 samples, 0.02%)</title><rect x="42.2024%" y="405" width="0.0170%" height="15" fill="rgb(211,15,21)" fg:x="52060" fg:w="21"/><text x="42.4524%" y="415.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (21 samples, 0.02%)</title><rect x="42.2024%" y="389" width="0.0170%" height="15" fill="rgb(215,187,41)" fg:x="52060" fg:w="21"/><text x="42.4524%" y="399.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (21 samples, 0.02%)</title><rect x="42.2024%" y="373" width="0.0170%" height="15" fill="rgb(248,69,32)" fg:x="52060" fg:w="21"/><text x="42.4524%" y="383.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (21 samples, 0.02%)</title><rect x="42.2024%" y="357" width="0.0170%" height="15" fill="rgb(252,102,52)" fg:x="52060" fg:w="21"/><text x="42.4524%" y="367.50"></text></g><g><title>AutoFile::write (226 samples, 0.18%)</title><rect x="42.0719%" y="437" width="0.1832%" height="15" fill="rgb(253,140,32)" fg:x="51899" fg:w="226"/><text x="42.3219%" y="447.50"></text></g><g><title>util::Xor (44 samples, 0.04%)</title><rect x="42.2194%" y="421" width="0.0357%" height="15" fill="rgb(216,56,42)" fg:x="52081" fg:w="44"/><text x="42.4694%" y="431.50"></text></g><g><title>std::operator^= (13 samples, 0.01%)</title><rect x="42.2445%" y="405" width="0.0105%" height="15" fill="rgb(216,184,14)" fg:x="52112" fg:w="13"/><text x="42.4945%" y="415.50"></text></g><g><title>std::operator^ (13 samples, 0.01%)</title><rect x="42.2445%" y="389" width="0.0105%" height="15" fill="rgb(237,187,27)" fg:x="52112" fg:w="13"/><text x="42.4945%" y="399.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (234 samples, 0.19%)</title><rect x="42.0710%" y="453" width="0.1897%" height="15" fill="rgb(219,65,3)" fg:x="51898" fg:w="234"/><text x="42.3210%" y="463.50"></text></g><g><title>AutoFile::write (61 samples, 0.05%)</title><rect x="42.2640%" y="405" width="0.0494%" height="15" fill="rgb(245,83,25)" fg:x="52136" fg:w="61"/><text x="42.5140%" y="415.50"></text></g><g><title>_IO_fwrite (59 samples, 0.05%)</title><rect x="42.2656%" y="389" width="0.0478%" height="15" fill="rgb(214,205,45)" fg:x="52138" fg:w="59"/><text x="42.5156%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (403 samples, 0.33%)</title><rect x="41.9875%" y="677" width="0.3267%" height="15" fill="rgb(241,20,18)" fg:x="51795" fg:w="403"/><text x="42.2375%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (403 samples, 0.33%)</title><rect x="41.9875%" y="661" width="0.3267%" height="15" fill="rgb(232,163,23)" fg:x="51795" fg:w="403"/><text x="42.2375%" y="671.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (403 samples, 0.33%)</title><rect x="41.9875%" y="645" width="0.3267%" height="15" fill="rgb(214,5,46)" fg:x="51795" fg:w="403"/><text x="42.2375%" y="655.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (403 samples, 0.33%)</title><rect x="41.9875%" y="629" width="0.3267%" height="15" fill="rgb(229,78,17)" fg:x="51795" fg:w="403"/><text x="42.2375%" y="639.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (403 samples, 0.33%)</title><rect x="41.9875%" y="613" width="0.3267%" height="15" fill="rgb(248,89,10)" fg:x="51795" fg:w="403"/><text x="42.2375%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (403 samples, 0.33%)</title><rect x="41.9875%" y="597" width="0.3267%" height="15" fill="rgb(248,54,15)" fg:x="51795" fg:w="403"/><text x="42.2375%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (403 samples, 0.33%)</title><rect x="41.9875%" y="581" width="0.3267%" height="15" fill="rgb(223,116,6)" fg:x="51795" fg:w="403"/><text x="42.2375%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (302 samples, 0.24%)</title><rect x="42.0694%" y="565" width="0.2448%" height="15" fill="rgb(205,125,38)" fg:x="51896" fg:w="302"/><text x="42.3194%" y="575.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (302 samples, 0.24%)</title><rect x="42.0694%" y="549" width="0.2448%" height="15" fill="rgb(251,78,38)" fg:x="51896" fg:w="302"/><text x="42.3194%" y="559.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (302 samples, 0.24%)</title><rect x="42.0694%" y="533" width="0.2448%" height="15" fill="rgb(253,78,28)" fg:x="51896" fg:w="302"/><text x="42.3194%" y="543.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (302 samples, 0.24%)</title><rect x="42.0694%" y="517" width="0.2448%" height="15" fill="rgb(209,120,3)" fg:x="51896" fg:w="302"/><text x="42.3194%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (302 samples, 0.24%)</title><rect x="42.0694%" y="501" width="0.2448%" height="15" fill="rgb(238,229,9)" fg:x="51896" fg:w="302"/><text x="42.3194%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (302 samples, 0.24%)</title><rect x="42.0694%" y="485" width="0.2448%" height="15" fill="rgb(253,159,18)" fg:x="51896" fg:w="302"/><text x="42.3194%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (302 samples, 0.24%)</title><rect x="42.0694%" y="469" width="0.2448%" height="15" fill="rgb(244,42,34)" fg:x="51896" fg:w="302"/><text x="42.3194%" y="479.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (62 samples, 0.05%)</title><rect x="42.2640%" y="453" width="0.0503%" height="15" fill="rgb(224,8,7)" fg:x="52136" fg:w="62"/><text x="42.5140%" y="463.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (62 samples, 0.05%)</title><rect x="42.2640%" y="437" width="0.0503%" height="15" fill="rgb(210,201,45)" fg:x="52136" fg:w="62"/><text x="42.5140%" y="447.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (62 samples, 0.05%)</title><rect x="42.2640%" y="421" width="0.0503%" height="15" fill="rgb(252,185,21)" fg:x="52136" fg:w="62"/><text x="42.5140%" y="431.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (426 samples, 0.35%)</title><rect x="41.9875%" y="757" width="0.3453%" height="15" fill="rgb(223,131,1)" fg:x="51795" fg:w="426"/><text x="42.2375%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (426 samples, 0.35%)</title><rect x="41.9875%" y="741" width="0.3453%" height="15" fill="rgb(245,141,16)" fg:x="51795" fg:w="426"/><text x="42.2375%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (426 samples, 0.35%)</title><rect x="41.9875%" y="725" width="0.3453%" height="15" fill="rgb(229,55,45)" fg:x="51795" fg:w="426"/><text x="42.2375%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (426 samples, 0.35%)</title><rect x="41.9875%" y="709" width="0.3453%" height="15" fill="rgb(208,92,15)" fg:x="51795" fg:w="426"/><text x="42.2375%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (426 samples, 0.35%)</title><rect x="41.9875%" y="693" width="0.3453%" height="15" fill="rgb(234,185,47)" fg:x="51795" fg:w="426"/><text x="42.2375%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="42.3142%" y="677" width="0.0186%" height="15" fill="rgb(253,104,50)" fg:x="52198" fg:w="23"/><text x="42.5642%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="42.3142%" y="661" width="0.0186%" height="15" fill="rgb(205,70,7)" fg:x="52198" fg:w="23"/><text x="42.5642%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (23 samples, 0.02%)</title><rect x="42.3142%" y="645" width="0.0186%" height="15" fill="rgb(240,178,43)" fg:x="52198" fg:w="23"/><text x="42.5642%" y="655.50"></text></g><g><title>AutoFile::write (23 samples, 0.02%)</title><rect x="42.3142%" y="629" width="0.0186%" height="15" fill="rgb(214,112,2)" fg:x="52198" fg:w="23"/><text x="42.5642%" y="639.50"></text></g><g><title>_IO_fwrite (22 samples, 0.02%)</title><rect x="42.3151%" y="613" width="0.0178%" height="15" fill="rgb(206,46,17)" fg:x="52199" fg:w="22"/><text x="42.5651%" y="623.50"></text></g><g><title>[[ext4]] (17 samples, 0.01%)</title><rect x="42.4391%" y="389" width="0.0138%" height="15" fill="rgb(225,220,16)" fg:x="52352" fg:w="17"/><text x="42.6891%" y="399.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="42.4423%" y="373" width="0.0105%" height="15" fill="rgb(238,65,40)" fg:x="52356" fg:w="13"/><text x="42.6923%" y="383.50"></text></g><g><title>[[ext4]] (79 samples, 0.06%)</title><rect x="42.4375%" y="405" width="0.0640%" height="15" fill="rgb(230,151,21)" fg:x="52350" fg:w="79"/><text x="42.6875%" y="415.50"></text></g><g><title>[unknown] (60 samples, 0.05%)</title><rect x="42.4529%" y="389" width="0.0486%" height="15" fill="rgb(218,58,49)" fg:x="52369" fg:w="60"/><text x="42.7029%" y="399.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="42.4602%" y="373" width="0.0413%" height="15" fill="rgb(219,179,14)" fg:x="52378" fg:w="51"/><text x="42.7102%" y="383.50"></text></g><g><title>[unknown] (47 samples, 0.04%)</title><rect x="42.4634%" y="357" width="0.0381%" height="15" fill="rgb(223,72,1)" fg:x="52382" fg:w="47"/><text x="42.7134%" y="367.50"></text></g><g><title>[unknown] (44 samples, 0.04%)</title><rect x="42.4658%" y="341" width="0.0357%" height="15" fill="rgb(238,126,10)" fg:x="52385" fg:w="44"/><text x="42.7158%" y="351.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="42.4796%" y="325" width="0.0219%" height="15" fill="rgb(224,206,38)" fg:x="52402" fg:w="27"/><text x="42.7296%" y="335.50"></text></g><g><title>[[ext4]] (380 samples, 0.31%)</title><rect x="42.4310%" y="421" width="0.3080%" height="15" fill="rgb(212,201,54)" fg:x="52342" fg:w="380"/><text x="42.6810%" y="431.50"></text></g><g><title>[unknown] (293 samples, 0.24%)</title><rect x="42.5015%" y="405" width="0.2375%" height="15" fill="rgb(218,154,48)" fg:x="52429" fg:w="293"/><text x="42.7515%" y="415.50"></text></g><g><title>[unknown] (280 samples, 0.23%)</title><rect x="42.5120%" y="389" width="0.2270%" height="15" fill="rgb(232,93,24)" fg:x="52442" fg:w="280"/><text x="42.7620%" y="399.50"></text></g><g><title>[unknown] (240 samples, 0.19%)</title><rect x="42.5445%" y="373" width="0.1946%" height="15" fill="rgb(245,30,21)" fg:x="52482" fg:w="240"/><text x="42.7945%" y="383.50"></text></g><g><title>[unknown] (203 samples, 0.16%)</title><rect x="42.5745%" y="357" width="0.1646%" height="15" fill="rgb(242,148,29)" fg:x="52519" fg:w="203"/><text x="42.8245%" y="367.50"></text></g><g><title>[unknown] (146 samples, 0.12%)</title><rect x="42.6207%" y="341" width="0.1184%" height="15" fill="rgb(244,153,54)" fg:x="52576" fg:w="146"/><text x="42.8707%" y="351.50"></text></g><g><title>[unknown] (45 samples, 0.04%)</title><rect x="42.7025%" y="325" width="0.0365%" height="15" fill="rgb(252,87,22)" fg:x="52677" fg:w="45"/><text x="42.9525%" y="335.50"></text></g><g><title>[[ext4]] (468 samples, 0.38%)</title><rect x="42.4083%" y="453" width="0.3794%" height="15" fill="rgb(210,51,29)" fg:x="52314" fg:w="468"/><text x="42.6583%" y="463.50"></text></g><g><title>[unknown] (455 samples, 0.37%)</title><rect x="42.4188%" y="437" width="0.3688%" height="15" fill="rgb(242,136,47)" fg:x="52327" fg:w="455"/><text x="42.6688%" y="447.50"></text></g><g><title>[unknown] (60 samples, 0.05%)</title><rect x="42.7390%" y="421" width="0.0486%" height="15" fill="rgb(238,68,4)" fg:x="52722" fg:w="60"/><text x="42.9890%" y="431.50"></text></g><g><title>[unknown] (42 samples, 0.03%)</title><rect x="42.7536%" y="405" width="0.0340%" height="15" fill="rgb(242,161,30)" fg:x="52740" fg:w="42"/><text x="43.0036%" y="415.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (540 samples, 0.44%)</title><rect x="42.3694%" y="581" width="0.4378%" height="15" fill="rgb(218,58,44)" fg:x="52266" fg:w="540"/><text x="42.6194%" y="591.50"></text></g><g><title>new_do_write (539 samples, 0.44%)</title><rect x="42.3702%" y="565" width="0.4369%" height="15" fill="rgb(252,125,32)" fg:x="52267" fg:w="539"/><text x="42.6202%" y="575.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (537 samples, 0.44%)</title><rect x="42.3718%" y="549" width="0.4353%" height="15" fill="rgb(219,178,0)" fg:x="52269" fg:w="537"/><text x="42.6218%" y="559.50"></text></g><g><title>__GI___libc_write (531 samples, 0.43%)</title><rect x="42.3767%" y="533" width="0.4305%" height="15" fill="rgb(213,152,7)" fg:x="52275" fg:w="531"/><text x="42.6267%" y="543.50"></text></g><g><title>[unknown] (530 samples, 0.43%)</title><rect x="42.3775%" y="517" width="0.4296%" height="15" fill="rgb(249,109,34)" fg:x="52276" fg:w="530"/><text x="42.6275%" y="527.50"></text></g><g><title>[unknown] (528 samples, 0.43%)</title><rect x="42.3791%" y="501" width="0.4280%" height="15" fill="rgb(232,96,21)" fg:x="52278" fg:w="528"/><text x="42.6291%" y="511.50"></text></g><g><title>[unknown] (525 samples, 0.43%)</title><rect x="42.3815%" y="485" width="0.4256%" height="15" fill="rgb(228,27,39)" fg:x="52281" fg:w="525"/><text x="42.6315%" y="495.50"></text></g><g><title>[unknown] (516 samples, 0.42%)</title><rect x="42.3888%" y="469" width="0.4183%" height="15" fill="rgb(211,182,52)" fg:x="52290" fg:w="516"/><text x="42.6388%" y="479.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="42.7877%" y="453" width="0.0195%" height="15" fill="rgb(234,178,38)" fg:x="52782" fg:w="24"/><text x="43.0377%" y="463.50"></text></g><g><title>_IO_fwrite (551 samples, 0.45%)</title><rect x="42.3653%" y="613" width="0.4467%" height="15" fill="rgb(221,111,3)" fg:x="52261" fg:w="551"/><text x="42.6153%" y="623.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (548 samples, 0.44%)</title><rect x="42.3677%" y="597" width="0.4442%" height="15" fill="rgb(228,175,21)" fg:x="52264" fg:w="548"/><text x="42.6177%" y="607.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (75 samples, 0.06%)</title><rect x="42.8120%" y="613" width="0.0608%" height="15" fill="rgb(228,174,43)" fg:x="52812" fg:w="75"/><text x="43.0620%" y="623.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (75 samples, 0.06%)</title><rect x="42.8120%" y="597" width="0.0608%" height="15" fill="rgb(211,191,0)" fg:x="52812" fg:w="75"/><text x="43.0620%" y="607.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (75 samples, 0.06%)</title><rect x="42.8120%" y="581" width="0.0608%" height="15" fill="rgb(253,117,3)" fg:x="52812" fg:w="75"/><text x="43.0620%" y="591.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (75 samples, 0.06%)</title><rect x="42.8120%" y="565" width="0.0608%" height="15" fill="rgb(241,127,19)" fg:x="52812" fg:w="75"/><text x="43.0620%" y="575.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (75 samples, 0.06%)</title><rect x="42.8120%" y="549" width="0.0608%" height="15" fill="rgb(218,103,12)" fg:x="52812" fg:w="75"/><text x="43.0620%" y="559.50"></text></g><g><title>AutoFile::write (894 samples, 0.72%)</title><rect x="42.3369%" y="629" width="0.7247%" height="15" fill="rgb(236,214,43)" fg:x="52226" fg:w="894"/><text x="42.5869%" y="639.50"></text></g><g><title>util::Xor (232 samples, 0.19%)</title><rect x="42.8736%" y="613" width="0.1881%" height="15" fill="rgb(244,144,19)" fg:x="52888" fg:w="232"/><text x="43.1236%" y="623.50"></text></g><g><title>std::operator^= (77 samples, 0.06%)</title><rect x="42.9992%" y="597" width="0.0624%" height="15" fill="rgb(246,188,10)" fg:x="53043" fg:w="77"/><text x="43.2492%" y="607.50"></text></g><g><title>std::operator^ (77 samples, 0.06%)</title><rect x="42.9992%" y="581" width="0.0624%" height="15" fill="rgb(212,193,33)" fg:x="53043" fg:w="77"/><text x="43.2492%" y="591.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (907 samples, 0.74%)</title><rect x="42.3369%" y="645" width="0.7353%" height="15" fill="rgb(241,51,29)" fg:x="52226" fg:w="907"/><text x="42.5869%" y="655.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (971 samples, 0.79%)</title><rect x="42.3329%" y="677" width="0.7871%" height="15" fill="rgb(211,58,19)" fg:x="52221" fg:w="971"/><text x="42.5829%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (971 samples, 0.79%)</title><rect x="42.3329%" y="661" width="0.7871%" height="15" fill="rgb(229,111,26)" fg:x="52221" fg:w="971"/><text x="42.5829%" y="671.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (56 samples, 0.05%)</title><rect x="43.0746%" y="645" width="0.0454%" height="15" fill="rgb(213,115,40)" fg:x="53136" fg:w="56"/><text x="43.3246%" y="655.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="43.0811%" y="629" width="0.0389%" height="15" fill="rgb(209,56,44)" fg:x="53144" fg:w="48"/><text x="43.3311%" y="639.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (48 samples, 0.04%)</title><rect x="43.0811%" y="613" width="0.0389%" height="15" fill="rgb(230,108,32)" fg:x="53144" fg:w="48"/><text x="43.3311%" y="623.50"></text></g><g><title>AutoFile::write (48 samples, 0.04%)</title><rect x="43.0811%" y="597" width="0.0389%" height="15" fill="rgb(216,165,31)" fg:x="53144" fg:w="48"/><text x="43.3311%" y="607.50"></text></g><g><title>_IO_fwrite (48 samples, 0.04%)</title><rect x="43.0811%" y="581" width="0.0389%" height="15" fill="rgb(218,122,21)" fg:x="53144" fg:w="48"/><text x="43.3311%" y="591.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1,018 samples, 0.83%)</title><rect x="42.3329%" y="757" width="0.8252%" height="15" fill="rgb(223,224,47)" fg:x="52221" fg:w="1018"/><text x="42.5829%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1,018 samples, 0.83%)</title><rect x="42.3329%" y="741" width="0.8252%" height="15" fill="rgb(238,102,44)" fg:x="52221" fg:w="1018"/><text x="42.5829%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1,018 samples, 0.83%)</title><rect x="42.3329%" y="725" width="0.8252%" height="15" fill="rgb(236,46,40)" fg:x="52221" fg:w="1018"/><text x="42.5829%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1,018 samples, 0.83%)</title><rect x="42.3329%" y="709" width="0.8252%" height="15" fill="rgb(247,202,50)" fg:x="52221" fg:w="1018"/><text x="42.5829%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1,018 samples, 0.83%)</title><rect x="42.3329%" y="693" width="0.8252%" height="15" fill="rgb(209,99,20)" fg:x="52221" fg:w="1018"/><text x="42.5829%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.04%)</title><rect x="43.1200%" y="677" width="0.0381%" height="15" fill="rgb(252,27,34)" fg:x="53192" fg:w="47"/><text x="43.3700%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.04%)</title><rect x="43.1200%" y="661" width="0.0381%" height="15" fill="rgb(215,206,23)" fg:x="53192" fg:w="47"/><text x="43.3700%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (47 samples, 0.04%)</title><rect x="43.1200%" y="645" width="0.0381%" height="15" fill="rgb(212,135,36)" fg:x="53192" fg:w="47"/><text x="43.3700%" y="655.50"></text></g><g><title>AutoFile::write (47 samples, 0.04%)</title><rect x="43.1200%" y="629" width="0.0381%" height="15" fill="rgb(240,189,1)" fg:x="53192" fg:w="47"/><text x="43.3700%" y="639.50"></text></g><g><title>_IO_fwrite (45 samples, 0.04%)</title><rect x="43.1216%" y="613" width="0.0365%" height="15" fill="rgb(242,56,20)" fg:x="53194" fg:w="45"/><text x="43.3716%" y="623.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (32 samples, 0.03%)</title><rect x="43.1581%" y="757" width="0.0259%" height="15" fill="rgb(247,132,33)" fg:x="53239" fg:w="32"/><text x="43.4081%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.03%)</title><rect x="43.1581%" y="741" width="0.0259%" height="15" fill="rgb(208,149,11)" fg:x="53239" fg:w="32"/><text x="43.4081%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.03%)</title><rect x="43.1581%" y="725" width="0.0259%" height="15" fill="rgb(211,33,11)" fg:x="53239" fg:w="32"/><text x="43.4081%" y="735.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (32 samples, 0.03%)</title><rect x="43.1581%" y="709" width="0.0259%" height="15" fill="rgb(221,29,38)" fg:x="53239" fg:w="32"/><text x="43.4081%" y="719.50"></text></g><g><title>AutoFile::write (32 samples, 0.03%)</title><rect x="43.1581%" y="693" width="0.0259%" height="15" fill="rgb(206,182,49)" fg:x="53239" fg:w="32"/><text x="43.4081%" y="703.50"></text></g><g><title>_IO_fwrite (30 samples, 0.02%)</title><rect x="43.1597%" y="677" width="0.0243%" height="15" fill="rgb(216,140,1)" fg:x="53241" fg:w="30"/><text x="43.4097%" y="687.50"></text></g><g><title>[[ext4]] (25 samples, 0.02%)</title><rect x="43.2100%" y="485" width="0.0203%" height="15" fill="rgb(232,57,40)" fg:x="53303" fg:w="25"/><text x="43.4600%" y="495.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="43.2141%" y="469" width="0.0162%" height="15" fill="rgb(224,186,18)" fg:x="53308" fg:w="20"/><text x="43.4641%" y="479.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="43.2141%" y="453" width="0.0162%" height="15" fill="rgb(215,121,11)" fg:x="53308" fg:w="20"/><text x="43.4641%" y="463.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="43.2173%" y="437" width="0.0130%" height="15" fill="rgb(245,147,10)" fg:x="53312" fg:w="16"/><text x="43.4673%" y="447.50"></text></g><g><title>[[ext4]] (27 samples, 0.02%)</title><rect x="43.2100%" y="517" width="0.0219%" height="15" fill="rgb(238,153,13)" fg:x="53303" fg:w="27"/><text x="43.4600%" y="527.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="43.2100%" y="501" width="0.0219%" height="15" fill="rgb(233,108,0)" fg:x="53303" fg:w="27"/><text x="43.4600%" y="511.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (28 samples, 0.02%)</title><rect x="43.2100%" y="645" width="0.0227%" height="15" fill="rgb(212,157,17)" fg:x="53303" fg:w="28"/><text x="43.4600%" y="655.50"></text></g><g><title>new_do_write (28 samples, 0.02%)</title><rect x="43.2100%" y="629" width="0.0227%" height="15" fill="rgb(225,213,38)" fg:x="53303" fg:w="28"/><text x="43.4600%" y="639.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (28 samples, 0.02%)</title><rect x="43.2100%" y="613" width="0.0227%" height="15" fill="rgb(248,16,11)" fg:x="53303" fg:w="28"/><text x="43.4600%" y="623.50"></text></g><g><title>__GI___libc_write (28 samples, 0.02%)</title><rect x="43.2100%" y="597" width="0.0227%" height="15" fill="rgb(241,33,4)" fg:x="53303" fg:w="28"/><text x="43.4600%" y="607.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="43.2100%" y="581" width="0.0227%" height="15" fill="rgb(222,26,43)" fg:x="53303" fg:w="28"/><text x="43.4600%" y="591.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="43.2100%" y="565" width="0.0227%" height="15" fill="rgb(243,29,36)" fg:x="53303" fg:w="28"/><text x="43.4600%" y="575.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="43.2100%" y="549" width="0.0227%" height="15" fill="rgb(241,9,27)" fg:x="53303" fg:w="28"/><text x="43.4600%" y="559.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="43.2100%" y="533" width="0.0227%" height="15" fill="rgb(205,117,26)" fg:x="53303" fg:w="28"/><text x="43.4600%" y="543.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (37 samples, 0.03%)</title><rect x="43.2092%" y="661" width="0.0300%" height="15" fill="rgb(209,80,39)" fg:x="53302" fg:w="37"/><text x="43.4592%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="917" width="1.7834%" height="15" fill="rgb(239,155,6)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="927.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="901" width="1.7834%" height="15" fill="rgb(212,104,12)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="911.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="885" width="1.7834%" height="15" fill="rgb(234,204,3)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="895.50">v..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="869" width="1.7834%" height="15" fill="rgb(251,218,7)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="879.50">v..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="853" width="1.7834%" height="15" fill="rgb(221,81,32)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="863.50">v..</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="837" width="1.7834%" height="15" fill="rgb(214,152,26)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="847.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="821" width="1.7834%" height="15" fill="rgb(223,22,3)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="831.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="805" width="1.7834%" height="15" fill="rgb(207,174,7)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="815.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="789" width="1.7834%" height="15" fill="rgb(224,19,52)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="799.50">v..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,200 samples, 1.78%)</title><rect x="41.4566%" y="773" width="1.7834%" height="15" fill="rgb(228,24,14)" fg:x="51140" fg:w="2200"/><text x="41.7066%" y="783.50">v..</text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (69 samples, 0.06%)</title><rect x="43.1841%" y="757" width="0.0559%" height="15" fill="rgb(230,153,43)" fg:x="53271" fg:w="69"/><text x="43.4341%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (69 samples, 0.06%)</title><rect x="43.1841%" y="741" width="0.0559%" height="15" fill="rgb(231,106,12)" fg:x="53271" fg:w="69"/><text x="43.4341%" y="751.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (68 samples, 0.06%)</title><rect x="43.1849%" y="725" width="0.0551%" height="15" fill="rgb(215,92,2)" fg:x="53272" fg:w="68"/><text x="43.4349%" y="735.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (68 samples, 0.06%)</title><rect x="43.1849%" y="709" width="0.0551%" height="15" fill="rgb(249,143,25)" fg:x="53272" fg:w="68"/><text x="43.4349%" y="719.50"></text></g><g><title>AutoFile::write (68 samples, 0.06%)</title><rect x="43.1849%" y="693" width="0.0551%" height="15" fill="rgb(252,7,35)" fg:x="53272" fg:w="68"/><text x="43.4349%" y="703.50"></text></g><g><title>_IO_fwrite (68 samples, 0.06%)</title><rect x="43.1849%" y="677" width="0.0551%" height="15" fill="rgb(216,69,40)" fg:x="53272" fg:w="68"/><text x="43.4349%" y="687.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (2,343 samples, 1.90%)</title><rect x="41.3415%" y="1045" width="1.8993%" height="15" fill="rgb(240,36,33)" fg:x="50998" fg:w="2343"/><text x="41.5915%" y="1055.50">A..</text></g><g><title>void Serialize&lt;AutoFile, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (2,343 samples, 1.90%)</title><rect x="41.3415%" y="1029" width="1.8993%" height="15" fill="rgb(231,128,14)" fg:x="50998" fg:w="2343"/><text x="41.5915%" y="1039.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;AutoFile&gt; (2,343 samples, 1.90%)</title><rect x="41.3415%" y="1013" width="1.8993%" height="15" fill="rgb(245,143,14)" fg:x="50998" fg:w="2343"/><text x="41.5915%" y="1023.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock&gt; (2,343 samples, 1.90%)</title><rect x="41.3415%" y="997" width="1.8993%" height="15" fill="rgb(222,130,28)" fg:x="50998" fg:w="2343"/><text x="41.5915%" y="1007.50">v..</text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,343 samples, 1.90%)</title><rect x="41.3415%" y="981" width="1.8993%" height="15" fill="rgb(212,10,48)" fg:x="50998" fg:w="2343"/><text x="41.5915%" y="991.50">v..</text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,343 samples, 1.90%)</title><rect x="41.3415%" y="965" width="1.8993%" height="15" fill="rgb(254,118,45)" fg:x="50998" fg:w="2343"/><text x="41.5915%" y="975.50">v..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (2,343 samples, 1.90%)</title><rect x="41.3415%" y="949" width="1.8993%" height="15" fill="rgb(228,6,45)" fg:x="50998" fg:w="2343"/><text x="41.5915%" y="959.50">v..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,343 samples, 1.90%)</title><rect x="41.3415%" y="933" width="1.8993%" height="15" fill="rgb(241,18,35)" fg:x="50998" fg:w="2343"/><text x="41.5915%" y="943.50">v..</text></g><g><title>__fopen_internal (14 samples, 0.01%)</title><rect x="43.2522%" y="1013" width="0.0113%" height="15" fill="rgb(227,214,53)" fg:x="53355" fg:w="14"/><text x="43.5022%" y="1023.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (14 samples, 0.01%)</title><rect x="43.2522%" y="997" width="0.0113%" height="15" fill="rgb(224,107,51)" fg:x="53355" fg:w="14"/><text x="43.5022%" y="1007.50"></text></g><g><title>_IO_file_open (14 samples, 0.01%)</title><rect x="43.2522%" y="981" width="0.0113%" height="15" fill="rgb(248,60,28)" fg:x="53355" fg:w="14"/><text x="43.5022%" y="991.50"></text></g><g><title>__GI___libc_open (14 samples, 0.01%)</title><rect x="43.2522%" y="965" width="0.0113%" height="15" fill="rgb(249,101,23)" fg:x="53355" fg:w="14"/><text x="43.5022%" y="975.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="43.2522%" y="949" width="0.0113%" height="15" fill="rgb(228,51,19)" fg:x="53355" fg:w="14"/><text x="43.5022%" y="959.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="43.2522%" y="933" width="0.0113%" height="15" fill="rgb(213,20,6)" fg:x="53355" fg:w="14"/><text x="43.5022%" y="943.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="43.2522%" y="917" width="0.0113%" height="15" fill="rgb(212,124,10)" fg:x="53355" fg:w="14"/><text x="43.5022%" y="927.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="43.2522%" y="901" width="0.0113%" height="15" fill="rgb(248,3,40)" fg:x="53355" fg:w="14"/><text x="43.5022%" y="911.50"></text></g><g><title>_IO_doallocbuf (16 samples, 0.01%)</title><rect x="43.2692%" y="981" width="0.0130%" height="15" fill="rgb(223,178,23)" fg:x="53376" fg:w="16"/><text x="43.5192%" y="991.50"></text></g><g><title>_IO_file_doallocate (16 samples, 0.01%)</title><rect x="43.2692%" y="965" width="0.0130%" height="15" fill="rgb(240,132,45)" fg:x="53376" fg:w="16"/><text x="43.5192%" y="975.50"></text></g><g><title>malloc (16 samples, 0.01%)</title><rect x="43.2692%" y="949" width="0.0130%" height="15" fill="rgb(245,164,36)" fg:x="53376" fg:w="16"/><text x="43.5192%" y="959.50"></text></g><g><title>_int_malloc (16 samples, 0.01%)</title><rect x="43.2692%" y="933" width="0.0130%" height="15" fill="rgb(231,188,53)" fg:x="53376" fg:w="16"/><text x="43.5192%" y="943.50"></text></g><g><title>node::BlockManager::OpenBlockFile (51 samples, 0.04%)</title><rect x="43.2449%" y="1045" width="0.0413%" height="15" fill="rgb(237,198,39)" fg:x="53346" fg:w="51"/><text x="43.4949%" y="1055.50"></text></g><g><title>FlatFileSeq::Open (51 samples, 0.04%)</title><rect x="43.2449%" y="1029" width="0.0413%" height="15" fill="rgb(223,120,35)" fg:x="53346" fg:w="51"/><text x="43.4949%" y="1039.50"></text></g><g><title>fseek (21 samples, 0.02%)</title><rect x="43.2692%" y="1013" width="0.0170%" height="15" fill="rgb(253,107,49)" fg:x="53376" fg:w="21"/><text x="43.5192%" y="1023.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (21 samples, 0.02%)</title><rect x="43.2692%" y="997" width="0.0170%" height="15" fill="rgb(216,44,31)" fg:x="53376" fg:w="21"/><text x="43.5192%" y="1007.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (18 samples, 0.01%)</title><rect x="43.3138%" y="661" width="0.0146%" height="15" fill="rgb(253,87,21)" fg:x="53431" fg:w="18"/><text x="43.5638%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (18 samples, 0.01%)</title><rect x="43.3138%" y="645" width="0.0146%" height="15" fill="rgb(226,18,2)" fg:x="53431" fg:w="18"/><text x="43.5638%" y="655.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.01%)</title><rect x="43.3138%" y="629" width="0.0146%" height="15" fill="rgb(216,8,46)" fg:x="53431" fg:w="18"/><text x="43.5638%" y="639.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.01%)</title><rect x="43.3138%" y="613" width="0.0146%" height="15" fill="rgb(226,140,39)" fg:x="53431" fg:w="18"/><text x="43.5638%" y="623.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (18 samples, 0.01%)</title><rect x="43.3138%" y="597" width="0.0146%" height="15" fill="rgb(221,194,54)" fg:x="53431" fg:w="18"/><text x="43.5638%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (18 samples, 0.01%)</title><rect x="43.3138%" y="581" width="0.0146%" height="15" fill="rgb(213,92,11)" fg:x="53431" fg:w="18"/><text x="43.5638%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (18 samples, 0.01%)</title><rect x="43.3138%" y="565" width="0.0146%" height="15" fill="rgb(229,162,46)" fg:x="53431" fg:w="18"/><text x="43.5638%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (16 samples, 0.01%)</title><rect x="43.3154%" y="549" width="0.0130%" height="15" fill="rgb(214,111,36)" fg:x="53433" fg:w="16"/><text x="43.5654%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="43.3154%" y="533" width="0.0130%" height="15" fill="rgb(207,6,21)" fg:x="53433" fg:w="16"/><text x="43.5654%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="43.3154%" y="517" width="0.0130%" height="15" fill="rgb(213,127,38)" fg:x="53433" fg:w="16"/><text x="43.5654%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (16 samples, 0.01%)</title><rect x="43.3154%" y="501" width="0.0130%" height="15" fill="rgb(238,118,32)" fg:x="53433" fg:w="16"/><text x="43.5654%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (16 samples, 0.01%)</title><rect x="43.3154%" y="485" width="0.0130%" height="15" fill="rgb(240,139,39)" fg:x="53433" fg:w="16"/><text x="43.5654%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (16 samples, 0.01%)</title><rect x="43.3154%" y="469" width="0.0130%" height="15" fill="rgb(235,10,37)" fg:x="53433" fg:w="16"/><text x="43.5654%" y="479.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (54 samples, 0.04%)</title><rect x="43.2911%" y="741" width="0.0438%" height="15" fill="rgb(249,171,38)" fg:x="53403" fg:w="54"/><text x="43.5411%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (54 samples, 0.04%)</title><rect x="43.2911%" y="725" width="0.0438%" height="15" fill="rgb(242,144,32)" fg:x="53403" fg:w="54"/><text x="43.5411%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (54 samples, 0.04%)</title><rect x="43.2911%" y="709" width="0.0438%" height="15" fill="rgb(217,117,21)" fg:x="53403" fg:w="54"/><text x="43.5411%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.04%)</title><rect x="43.2911%" y="693" width="0.0438%" height="15" fill="rgb(249,87,1)" fg:x="53403" fg:w="54"/><text x="43.5411%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (53 samples, 0.04%)</title><rect x="43.2919%" y="677" width="0.0430%" height="15" fill="rgb(248,196,48)" fg:x="53404" fg:w="53"/><text x="43.5419%" y="687.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (22 samples, 0.02%)</title><rect x="43.3430%" y="661" width="0.0178%" height="15" fill="rgb(251,206,33)" fg:x="53467" fg:w="22"/><text x="43.5930%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (22 samples, 0.02%)</title><rect x="43.3430%" y="645" width="0.0178%" height="15" fill="rgb(232,141,28)" fg:x="53467" fg:w="22"/><text x="43.5930%" y="655.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="43.3430%" y="629" width="0.0178%" height="15" fill="rgb(209,167,14)" fg:x="53467" fg:w="22"/><text x="43.5930%" y="639.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="43.3430%" y="613" width="0.0178%" height="15" fill="rgb(225,11,50)" fg:x="53467" fg:w="22"/><text x="43.5930%" y="623.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (22 samples, 0.02%)</title><rect x="43.3430%" y="597" width="0.0178%" height="15" fill="rgb(209,50,20)" fg:x="53467" fg:w="22"/><text x="43.5930%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (22 samples, 0.02%)</title><rect x="43.3430%" y="581" width="0.0178%" height="15" fill="rgb(212,17,46)" fg:x="53467" fg:w="22"/><text x="43.5930%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (22 samples, 0.02%)</title><rect x="43.3430%" y="565" width="0.0178%" height="15" fill="rgb(216,101,39)" fg:x="53467" fg:w="22"/><text x="43.5930%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (14 samples, 0.01%)</title><rect x="43.3494%" y="549" width="0.0113%" height="15" fill="rgb(212,228,48)" fg:x="53475" fg:w="14"/><text x="43.5994%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="43.3494%" y="533" width="0.0113%" height="15" fill="rgb(250,6,50)" fg:x="53475" fg:w="14"/><text x="43.5994%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="43.3494%" y="517" width="0.0113%" height="15" fill="rgb(250,160,48)" fg:x="53475" fg:w="14"/><text x="43.5994%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (14 samples, 0.01%)</title><rect x="43.3494%" y="501" width="0.0113%" height="15" fill="rgb(244,216,33)" fg:x="53475" fg:w="14"/><text x="43.5994%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (14 samples, 0.01%)</title><rect x="43.3494%" y="485" width="0.0113%" height="15" fill="rgb(207,157,5)" fg:x="53475" fg:w="14"/><text x="43.5994%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (14 samples, 0.01%)</title><rect x="43.3494%" y="469" width="0.0113%" height="15" fill="rgb(228,199,8)" fg:x="53475" fg:w="14"/><text x="43.5994%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (14 samples, 0.01%)</title><rect x="43.3494%" y="453" width="0.0113%" height="15" fill="rgb(227,80,20)" fg:x="53475" fg:w="14"/><text x="43.5994%" y="463.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (37 samples, 0.03%)</title><rect x="43.3348%" y="741" width="0.0300%" height="15" fill="rgb(222,9,33)" fg:x="53457" fg:w="37"/><text x="43.5848%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (37 samples, 0.03%)</title><rect x="43.3348%" y="725" width="0.0300%" height="15" fill="rgb(239,44,28)" fg:x="53457" fg:w="37"/><text x="43.5848%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (37 samples, 0.03%)</title><rect x="43.3348%" y="709" width="0.0300%" height="15" fill="rgb(249,187,43)" fg:x="53457" fg:w="37"/><text x="43.5848%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (37 samples, 0.03%)</title><rect x="43.3348%" y="693" width="0.0300%" height="15" fill="rgb(216,141,28)" fg:x="53457" fg:w="37"/><text x="43.5848%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (37 samples, 0.03%)</title><rect x="43.3348%" y="677" width="0.0300%" height="15" fill="rgb(230,154,53)" fg:x="53457" fg:w="37"/><text x="43.5848%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="629" width="0.0178%" height="15" fill="rgb(227,82,4)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="613" width="0.0178%" height="15" fill="rgb(220,107,16)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="597" width="0.0178%" height="15" fill="rgb(207,187,2)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="581" width="0.0178%" height="15" fill="rgb(210,162,52)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="591.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="565" width="0.0178%" height="15" fill="rgb(217,216,49)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="575.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="549" width="0.0178%" height="15" fill="rgb(218,146,49)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="533" width="0.0178%" height="15" fill="rgb(216,55,40)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="517" width="0.0178%" height="15" fill="rgb(208,196,21)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="527.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="501" width="0.0178%" height="15" fill="rgb(242,117,42)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="511.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (22 samples, 0.02%)</title><rect x="43.3956%" y="485" width="0.0178%" height="15" fill="rgb(210,11,23)" fg:x="53532" fg:w="22"/><text x="43.6456%" y="495.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (16 samples, 0.01%)</title><rect x="43.4005%" y="469" width="0.0130%" height="15" fill="rgb(217,110,2)" fg:x="53538" fg:w="16"/><text x="43.6505%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (16 samples, 0.01%)</title><rect x="43.4005%" y="453" width="0.0130%" height="15" fill="rgb(229,77,54)" fg:x="53538" fg:w="16"/><text x="43.6505%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (16 samples, 0.01%)</title><rect x="43.4005%" y="437" width="0.0130%" height="15" fill="rgb(218,53,16)" fg:x="53538" fg:w="16"/><text x="43.6505%" y="447.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="43.4005%" y="421" width="0.0130%" height="15" fill="rgb(215,38,13)" fg:x="53538" fg:w="16"/><text x="43.6505%" y="431.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (16 samples, 0.01%)</title><rect x="43.4005%" y="405" width="0.0130%" height="15" fill="rgb(235,42,18)" fg:x="53538" fg:w="16"/><text x="43.6505%" y="415.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (69 samples, 0.06%)</title><rect x="43.3738%" y="661" width="0.0559%" height="15" fill="rgb(219,66,54)" fg:x="53505" fg:w="69"/><text x="43.6238%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (69 samples, 0.06%)</title><rect x="43.3738%" y="645" width="0.0559%" height="15" fill="rgb(222,205,4)" fg:x="53505" fg:w="69"/><text x="43.6238%" y="655.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.02%)</title><rect x="43.4135%" y="629" width="0.0162%" height="15" fill="rgb(227,213,46)" fg:x="53554" fg:w="20"/><text x="43.6635%" y="639.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (90 samples, 0.07%)</title><rect x="43.3648%" y="741" width="0.0730%" height="15" fill="rgb(250,145,42)" fg:x="53494" fg:w="90"/><text x="43.6148%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (90 samples, 0.07%)</title><rect x="43.3648%" y="725" width="0.0730%" height="15" fill="rgb(219,15,2)" fg:x="53494" fg:w="90"/><text x="43.6148%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (90 samples, 0.07%)</title><rect x="43.3648%" y="709" width="0.0730%" height="15" fill="rgb(231,181,52)" fg:x="53494" fg:w="90"/><text x="43.6148%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (90 samples, 0.07%)</title><rect x="43.3648%" y="693" width="0.0730%" height="15" fill="rgb(235,1,42)" fg:x="53494" fg:w="90"/><text x="43.6148%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (90 samples, 0.07%)</title><rect x="43.3648%" y="677" width="0.0730%" height="15" fill="rgb(249,88,27)" fg:x="53494" fg:w="90"/><text x="43.6148%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (196 samples, 0.16%)</title><rect x="43.2862%" y="901" width="0.1589%" height="15" fill="rgb(235,145,16)" fg:x="53397" fg:w="196"/><text x="43.5362%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (196 samples, 0.16%)</title><rect x="43.2862%" y="885" width="0.1589%" height="15" fill="rgb(237,114,19)" fg:x="53397" fg:w="196"/><text x="43.5362%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (196 samples, 0.16%)</title><rect x="43.2862%" y="869" width="0.1589%" height="15" fill="rgb(238,51,50)" fg:x="53397" fg:w="196"/><text x="43.5362%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (196 samples, 0.16%)</title><rect x="43.2862%" y="853" width="0.1589%" height="15" fill="rgb(205,194,25)" fg:x="53397" fg:w="196"/><text x="43.5362%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (196 samples, 0.16%)</title><rect x="43.2862%" y="837" width="0.1589%" height="15" fill="rgb(215,203,17)" fg:x="53397" fg:w="196"/><text x="43.5362%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (196 samples, 0.16%)</title><rect x="43.2862%" y="821" width="0.1589%" height="15" fill="rgb(233,112,49)" fg:x="53397" fg:w="196"/><text x="43.5362%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (196 samples, 0.16%)</title><rect x="43.2862%" y="805" width="0.1589%" height="15" fill="rgb(241,130,26)" fg:x="53397" fg:w="196"/><text x="43.5362%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (195 samples, 0.16%)</title><rect x="43.2870%" y="789" width="0.1581%" height="15" fill="rgb(252,223,19)" fg:x="53398" fg:w="195"/><text x="43.5370%" y="799.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (195 samples, 0.16%)</title><rect x="43.2870%" y="773" width="0.1581%" height="15" fill="rgb(211,95,25)" fg:x="53398" fg:w="195"/><text x="43.5370%" y="783.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (195 samples, 0.16%)</title><rect x="43.2870%" y="757" width="0.1581%" height="15" fill="rgb(251,182,27)" fg:x="53398" fg:w="195"/><text x="43.5370%" y="767.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (2,659 samples, 2.16%)</title><rect x="41.3415%" y="1061" width="2.1555%" height="15" fill="rgb(238,24,4)" fg:x="50998" fg:w="2659"/><text x="41.5915%" y="1071.50">n..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (260 samples, 0.21%)</title><rect x="43.2862%" y="1045" width="0.2108%" height="15" fill="rgb(224,220,25)" fg:x="53397" fg:w="260"/><text x="43.5362%" y="1055.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (260 samples, 0.21%)</title><rect x="43.2862%" y="1029" width="0.2108%" height="15" fill="rgb(239,133,26)" fg:x="53397" fg:w="260"/><text x="43.5362%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (260 samples, 0.21%)</title><rect x="43.2862%" y="1013" width="0.2108%" height="15" fill="rgb(211,94,48)" fg:x="53397" fg:w="260"/><text x="43.5362%" y="1023.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (260 samples, 0.21%)</title><rect x="43.2862%" y="997" width="0.2108%" height="15" fill="rgb(239,87,6)" fg:x="53397" fg:w="260"/><text x="43.5362%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (260 samples, 0.21%)</title><rect x="43.2862%" y="981" width="0.2108%" height="15" fill="rgb(227,62,0)" fg:x="53397" fg:w="260"/><text x="43.5362%" y="991.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (260 samples, 0.21%)</title><rect x="43.2862%" y="965" width="0.2108%" height="15" fill="rgb(211,226,4)" fg:x="53397" fg:w="260"/><text x="43.5362%" y="975.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (260 samples, 0.21%)</title><rect x="43.2862%" y="949" width="0.2108%" height="15" fill="rgb(253,38,52)" fg:x="53397" fg:w="260"/><text x="43.5362%" y="959.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (260 samples, 0.21%)</title><rect x="43.2862%" y="933" width="0.2108%" height="15" fill="rgb(229,126,40)" fg:x="53397" fg:w="260"/><text x="43.5362%" y="943.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (260 samples, 0.21%)</title><rect x="43.2862%" y="917" width="0.2108%" height="15" fill="rgb(229,165,44)" fg:x="53397" fg:w="260"/><text x="43.5362%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (64 samples, 0.05%)</title><rect x="43.4451%" y="901" width="0.0519%" height="15" fill="rgb(247,95,47)" fg:x="53593" fg:w="64"/><text x="43.6951%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.02%)</title><rect x="43.4759%" y="885" width="0.0211%" height="15" fill="rgb(216,140,30)" fg:x="53631" fg:w="26"/><text x="43.7259%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (26 samples, 0.02%)</title><rect x="43.4759%" y="869" width="0.0211%" height="15" fill="rgb(246,214,8)" fg:x="53631" fg:w="26"/><text x="43.7259%" y="879.50"></text></g><g><title>SizeComputer::write (26 samples, 0.02%)</title><rect x="43.4759%" y="853" width="0.0211%" height="15" fill="rgb(227,224,15)" fg:x="53631" fg:w="26"/><text x="43.7259%" y="863.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.01%)</title><rect x="43.5343%" y="677" width="0.0105%" height="15" fill="rgb(233,175,4)" fg:x="53703" fg:w="13"/><text x="43.7843%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.01%)</title><rect x="43.5343%" y="661" width="0.0105%" height="15" fill="rgb(221,66,45)" fg:x="53703" fg:w="13"/><text x="43.7843%" y="671.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="43.5343%" y="645" width="0.0105%" height="15" fill="rgb(221,178,18)" fg:x="53703" fg:w="13"/><text x="43.7843%" y="655.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.01%)</title><rect x="43.5343%" y="629" width="0.0105%" height="15" fill="rgb(213,81,29)" fg:x="53703" fg:w="13"/><text x="43.7843%" y="639.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (13 samples, 0.01%)</title><rect x="43.5343%" y="613" width="0.0105%" height="15" fill="rgb(220,89,49)" fg:x="53703" fg:w="13"/><text x="43.7843%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.01%)</title><rect x="43.5343%" y="597" width="0.0105%" height="15" fill="rgb(227,60,33)" fg:x="53703" fg:w="13"/><text x="43.7843%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.01%)</title><rect x="43.5343%" y="581" width="0.0105%" height="15" fill="rgb(205,113,12)" fg:x="53703" fg:w="13"/><text x="43.7843%" y="591.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (45 samples, 0.04%)</title><rect x="43.5124%" y="757" width="0.0365%" height="15" fill="rgb(211,32,1)" fg:x="53676" fg:w="45"/><text x="43.7624%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (45 samples, 0.04%)</title><rect x="43.5124%" y="741" width="0.0365%" height="15" fill="rgb(246,2,12)" fg:x="53676" fg:w="45"/><text x="43.7624%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (45 samples, 0.04%)</title><rect x="43.5124%" y="725" width="0.0365%" height="15" fill="rgb(243,37,27)" fg:x="53676" fg:w="45"/><text x="43.7624%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (45 samples, 0.04%)</title><rect x="43.5124%" y="709" width="0.0365%" height="15" fill="rgb(248,211,31)" fg:x="53676" fg:w="45"/><text x="43.7624%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (44 samples, 0.04%)</title><rect x="43.5132%" y="693" width="0.0357%" height="15" fill="rgb(242,146,47)" fg:x="53677" fg:w="44"/><text x="43.7632%" y="703.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (22 samples, 0.02%)</title><rect x="43.5602%" y="677" width="0.0178%" height="15" fill="rgb(206,70,20)" fg:x="53735" fg:w="22"/><text x="43.8102%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (22 samples, 0.02%)</title><rect x="43.5602%" y="661" width="0.0178%" height="15" fill="rgb(215,10,51)" fg:x="53735" fg:w="22"/><text x="43.8102%" y="671.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="43.5602%" y="645" width="0.0178%" height="15" fill="rgb(243,178,53)" fg:x="53735" fg:w="22"/><text x="43.8102%" y="655.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="43.5602%" y="629" width="0.0178%" height="15" fill="rgb(233,221,20)" fg:x="53735" fg:w="22"/><text x="43.8102%" y="639.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (22 samples, 0.02%)</title><rect x="43.5602%" y="613" width="0.0178%" height="15" fill="rgb(218,95,35)" fg:x="53735" fg:w="22"/><text x="43.8102%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (22 samples, 0.02%)</title><rect x="43.5602%" y="597" width="0.0178%" height="15" fill="rgb(229,13,5)" fg:x="53735" fg:w="22"/><text x="43.8102%" y="607.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (22 samples, 0.02%)</title><rect x="43.5602%" y="581" width="0.0178%" height="15" fill="rgb(252,164,30)" fg:x="53735" fg:w="22"/><text x="43.8102%" y="591.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (44 samples, 0.04%)</title><rect x="43.5489%" y="757" width="0.0357%" height="15" fill="rgb(232,68,36)" fg:x="53721" fg:w="44"/><text x="43.7989%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (44 samples, 0.04%)</title><rect x="43.5489%" y="741" width="0.0357%" height="15" fill="rgb(219,59,54)" fg:x="53721" fg:w="44"/><text x="43.7989%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (44 samples, 0.04%)</title><rect x="43.5489%" y="725" width="0.0357%" height="15" fill="rgb(250,92,33)" fg:x="53721" fg:w="44"/><text x="43.7989%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.04%)</title><rect x="43.5489%" y="709" width="0.0357%" height="15" fill="rgb(229,162,54)" fg:x="53721" fg:w="44"/><text x="43.7989%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (43 samples, 0.03%)</title><rect x="43.5497%" y="693" width="0.0349%" height="15" fill="rgb(244,114,52)" fg:x="53722" fg:w="43"/><text x="43.7997%" y="703.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (24 samples, 0.02%)</title><rect x="43.6234%" y="645" width="0.0195%" height="15" fill="rgb(212,211,43)" fg:x="53813" fg:w="24"/><text x="43.8734%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (24 samples, 0.02%)</title><rect x="43.6234%" y="629" width="0.0195%" height="15" fill="rgb(226,147,8)" fg:x="53813" fg:w="24"/><text x="43.8734%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (24 samples, 0.02%)</title><rect x="43.6234%" y="613" width="0.0195%" height="15" fill="rgb(226,23,13)" fg:x="53813" fg:w="24"/><text x="43.8734%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.02%)</title><rect x="43.6234%" y="597" width="0.0195%" height="15" fill="rgb(240,63,4)" fg:x="53813" fg:w="24"/><text x="43.8734%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (24 samples, 0.02%)</title><rect x="43.6234%" y="581" width="0.0195%" height="15" fill="rgb(221,1,32)" fg:x="53813" fg:w="24"/><text x="43.8734%" y="591.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (23 samples, 0.02%)</title><rect x="43.6242%" y="565" width="0.0186%" height="15" fill="rgb(242,117,10)" fg:x="53814" fg:w="23"/><text x="43.8742%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (23 samples, 0.02%)</title><rect x="43.6242%" y="549" width="0.0186%" height="15" fill="rgb(249,172,44)" fg:x="53814" fg:w="23"/><text x="43.8742%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (23 samples, 0.02%)</title><rect x="43.6242%" y="533" width="0.0186%" height="15" fill="rgb(244,46,45)" fg:x="53814" fg:w="23"/><text x="43.8742%" y="543.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="43.6242%" y="517" width="0.0186%" height="15" fill="rgb(206,43,17)" fg:x="53814" fg:w="23"/><text x="43.8742%" y="527.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (23 samples, 0.02%)</title><rect x="43.6242%" y="501" width="0.0186%" height="15" fill="rgb(239,218,39)" fg:x="53814" fg:w="23"/><text x="43.8742%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (74 samples, 0.06%)</title><rect x="43.5975%" y="677" width="0.0600%" height="15" fill="rgb(208,169,54)" fg:x="53781" fg:w="74"/><text x="43.8475%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (74 samples, 0.06%)</title><rect x="43.5975%" y="661" width="0.0600%" height="15" fill="rgb(247,25,42)" fg:x="53781" fg:w="74"/><text x="43.8475%" y="671.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.01%)</title><rect x="43.6429%" y="645" width="0.0146%" height="15" fill="rgb(226,23,31)" fg:x="53837" fg:w="18"/><text x="43.8929%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="677" width="0.0154%" height="15" fill="rgb(247,16,28)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="661" width="0.0154%" height="15" fill="rgb(231,147,38)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="645" width="0.0154%" height="15" fill="rgb(253,81,48)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="655.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="629" width="0.0154%" height="15" fill="rgb(249,222,43)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="613" width="0.0154%" height="15" fill="rgb(221,3,27)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="597" width="0.0154%" height="15" fill="rgb(228,180,5)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="581" width="0.0154%" height="15" fill="rgb(227,131,42)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="565" width="0.0154%" height="15" fill="rgb(212,3,39)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="575.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="549" width="0.0154%" height="15" fill="rgb(226,45,5)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="559.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.02%)</title><rect x="43.6575%" y="533" width="0.0154%" height="15" fill="rgb(215,167,45)" fg:x="53855" fg:w="19"/><text x="43.9075%" y="543.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (111 samples, 0.09%)</title><rect x="43.5845%" y="757" width="0.0900%" height="15" fill="rgb(250,218,53)" fg:x="53765" fg:w="111"/><text x="43.8345%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (111 samples, 0.09%)</title><rect x="43.5845%" y="741" width="0.0900%" height="15" fill="rgb(207,140,0)" fg:x="53765" fg:w="111"/><text x="43.8345%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (111 samples, 0.09%)</title><rect x="43.5845%" y="725" width="0.0900%" height="15" fill="rgb(238,133,51)" fg:x="53765" fg:w="111"/><text x="43.8345%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (111 samples, 0.09%)</title><rect x="43.5845%" y="709" width="0.0900%" height="15" fill="rgb(218,203,53)" fg:x="53765" fg:w="111"/><text x="43.8345%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (110 samples, 0.09%)</title><rect x="43.5853%" y="693" width="0.0892%" height="15" fill="rgb(226,184,25)" fg:x="53766" fg:w="110"/><text x="43.8353%" y="703.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (223 samples, 0.18%)</title><rect x="43.4970%" y="917" width="0.1808%" height="15" fill="rgb(231,121,21)" fg:x="53657" fg:w="223"/><text x="43.7470%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (223 samples, 0.18%)</title><rect x="43.4970%" y="901" width="0.1808%" height="15" fill="rgb(251,14,34)" fg:x="53657" fg:w="223"/><text x="43.7470%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (223 samples, 0.18%)</title><rect x="43.4970%" y="885" width="0.1808%" height="15" fill="rgb(249,193,11)" fg:x="53657" fg:w="223"/><text x="43.7470%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (223 samples, 0.18%)</title><rect x="43.4970%" y="869" width="0.1808%" height="15" fill="rgb(220,172,37)" fg:x="53657" fg:w="223"/><text x="43.7470%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (223 samples, 0.18%)</title><rect x="43.4970%" y="853" width="0.1808%" height="15" fill="rgb(231,229,43)" fg:x="53657" fg:w="223"/><text x="43.7470%" y="863.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (221 samples, 0.18%)</title><rect x="43.4986%" y="837" width="0.1792%" height="15" fill="rgb(250,161,5)" fg:x="53659" fg:w="221"/><text x="43.7486%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (221 samples, 0.18%)</title><rect x="43.4986%" y="821" width="0.1792%" height="15" fill="rgb(218,225,18)" fg:x="53659" fg:w="221"/><text x="43.7486%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (220 samples, 0.18%)</title><rect x="43.4994%" y="805" width="0.1783%" height="15" fill="rgb(245,45,42)" fg:x="53660" fg:w="220"/><text x="43.7494%" y="815.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (220 samples, 0.18%)</title><rect x="43.4994%" y="789" width="0.1783%" height="15" fill="rgb(211,115,1)" fg:x="53660" fg:w="220"/><text x="43.7494%" y="799.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (220 samples, 0.18%)</title><rect x="43.4994%" y="773" width="0.1783%" height="15" fill="rgb(248,133,52)" fg:x="53660" fg:w="220"/><text x="43.7494%" y="783.50"></text></g><g><title>node::BlockManager::SaveBlockToDisk (3,309 samples, 2.68%)</title><rect x="41.0456%" y="1077" width="2.6824%" height="15" fill="rgb(238,100,21)" fg:x="50633" fg:w="3309"/><text x="41.2956%" y="1087.50">no..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (285 samples, 0.23%)</title><rect x="43.4970%" y="1061" width="0.2310%" height="15" fill="rgb(247,144,11)" fg:x="53657" fg:w="285"/><text x="43.7470%" y="1071.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (285 samples, 0.23%)</title><rect x="43.4970%" y="1045" width="0.2310%" height="15" fill="rgb(206,164,16)" fg:x="53657" fg:w="285"/><text x="43.7470%" y="1055.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (285 samples, 0.23%)</title><rect x="43.4970%" y="1029" width="0.2310%" height="15" fill="rgb(222,34,3)" fg:x="53657" fg:w="285"/><text x="43.7470%" y="1039.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (285 samples, 0.23%)</title><rect x="43.4970%" y="1013" width="0.2310%" height="15" fill="rgb(248,82,4)" fg:x="53657" fg:w="285"/><text x="43.7470%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (285 samples, 0.23%)</title><rect x="43.4970%" y="997" width="0.2310%" height="15" fill="rgb(228,81,46)" fg:x="53657" fg:w="285"/><text x="43.7470%" y="1007.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (285 samples, 0.23%)</title><rect x="43.4970%" y="981" width="0.2310%" height="15" fill="rgb(227,67,47)" fg:x="53657" fg:w="285"/><text x="43.7470%" y="991.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (285 samples, 0.23%)</title><rect x="43.4970%" y="965" width="0.2310%" height="15" fill="rgb(215,93,53)" fg:x="53657" fg:w="285"/><text x="43.7470%" y="975.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (285 samples, 0.23%)</title><rect x="43.4970%" y="949" width="0.2310%" height="15" fill="rgb(248,194,39)" fg:x="53657" fg:w="285"/><text x="43.7470%" y="959.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (285 samples, 0.23%)</title><rect x="43.4970%" y="933" width="0.2310%" height="15" fill="rgb(215,5,19)" fg:x="53657" fg:w="285"/><text x="43.7470%" y="943.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (62 samples, 0.05%)</title><rect x="43.6778%" y="917" width="0.0503%" height="15" fill="rgb(226,215,51)" fg:x="53880" fg:w="62"/><text x="43.9278%" y="927.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.03%)</title><rect x="43.7021%" y="901" width="0.0259%" height="15" fill="rgb(225,56,26)" fg:x="53910" fg:w="32"/><text x="43.9521%" y="911.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (32 samples, 0.03%)</title><rect x="43.7021%" y="885" width="0.0259%" height="15" fill="rgb(222,75,29)" fg:x="53910" fg:w="32"/><text x="43.9521%" y="895.50"></text></g><g><title>SizeComputer::write (32 samples, 0.03%)</title><rect x="43.7021%" y="869" width="0.0259%" height="15" fill="rgb(236,139,6)" fg:x="53910" fg:w="32"/><text x="43.9521%" y="879.50"></text></g><g><title>ChainstateManager::AcceptBlock (3,724 samples, 3.02%)</title><rect x="40.7124%" y="1093" width="3.0189%" height="15" fill="rgb(223,137,36)" fg:x="50222" fg:w="3724"/><text x="40.9624%" y="1103.50">Cha..</text></g><g><title>CheckTransaction (20 samples, 0.02%)</title><rect x="43.7694%" y="1045" width="0.0162%" height="15" fill="rgb(226,99,2)" fg:x="53993" fg:w="20"/><text x="44.0194%" y="1055.50"></text></g><g><title>__memcmp_evex_movbe (27 samples, 0.02%)</title><rect x="43.8439%" y="885" width="0.0219%" height="15" fill="rgb(206,133,23)" fg:x="54085" fg:w="27"/><text x="44.0939%" y="895.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (21 samples, 0.02%)</title><rect x="43.8739%" y="885" width="0.0170%" height="15" fill="rgb(243,173,15)" fg:x="54122" fg:w="21"/><text x="44.1239%" y="895.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (121 samples, 0.10%)</title><rect x="43.7937%" y="1029" width="0.0981%" height="15" fill="rgb(228,69,28)" fg:x="54023" fg:w="121"/><text x="44.0437%" y="1039.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (88 samples, 0.07%)</title><rect x="43.8204%" y="1013" width="0.0713%" height="15" fill="rgb(212,51,22)" fg:x="54056" fg:w="88"/><text x="44.0704%" y="1023.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (88 samples, 0.07%)</title><rect x="43.8204%" y="997" width="0.0713%" height="15" fill="rgb(227,113,0)" fg:x="54056" fg:w="88"/><text x="44.0704%" y="1007.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (84 samples, 0.07%)</title><rect x="43.8237%" y="981" width="0.0681%" height="15" fill="rgb(252,84,27)" fg:x="54060" fg:w="84"/><text x="44.0737%" y="991.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (84 samples, 0.07%)</title><rect x="43.8237%" y="965" width="0.0681%" height="15" fill="rgb(223,145,39)" fg:x="54060" fg:w="84"/><text x="44.0737%" y="975.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (84 samples, 0.07%)</title><rect x="43.8237%" y="949" width="0.0681%" height="15" fill="rgb(239,219,30)" fg:x="54060" fg:w="84"/><text x="44.0737%" y="959.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (75 samples, 0.06%)</title><rect x="43.8310%" y="933" width="0.0608%" height="15" fill="rgb(224,196,39)" fg:x="54069" fg:w="75"/><text x="44.0810%" y="943.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (75 samples, 0.06%)</title><rect x="43.8310%" y="917" width="0.0608%" height="15" fill="rgb(205,35,43)" fg:x="54069" fg:w="75"/><text x="44.0810%" y="927.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (75 samples, 0.06%)</title><rect x="43.8310%" y="901" width="0.0608%" height="15" fill="rgb(228,201,21)" fg:x="54069" fg:w="75"/><text x="44.0810%" y="911.50"></text></g><g><title>malloc (16 samples, 0.01%)</title><rect x="43.9153%" y="901" width="0.0130%" height="15" fill="rgb(237,118,16)" fg:x="54173" fg:w="16"/><text x="44.1653%" y="911.50"></text></g><g><title>_int_malloc (16 samples, 0.01%)</title><rect x="43.9153%" y="885" width="0.0130%" height="15" fill="rgb(241,17,19)" fg:x="54173" fg:w="16"/><text x="44.1653%" y="895.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_node (19 samples, 0.02%)</title><rect x="43.9136%" y="981" width="0.0154%" height="15" fill="rgb(214,10,25)" fg:x="54171" fg:w="19"/><text x="44.1636%" y="991.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::allocate (19 samples, 0.02%)</title><rect x="43.9136%" y="965" width="0.0154%" height="15" fill="rgb(238,37,29)" fg:x="54171" fg:w="19"/><text x="44.1636%" y="975.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (19 samples, 0.02%)</title><rect x="43.9136%" y="949" width="0.0154%" height="15" fill="rgb(253,83,25)" fg:x="54171" fg:w="19"/><text x="44.1636%" y="959.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (19 samples, 0.02%)</title><rect x="43.9136%" y="933" width="0.0154%" height="15" fill="rgb(234,192,12)" fg:x="54171" fg:w="19"/><text x="44.1636%" y="943.50"></text></g><g><title>operator new (18 samples, 0.01%)</title><rect x="43.9145%" y="917" width="0.0146%" height="15" fill="rgb(241,216,45)" fg:x="54172" fg:w="18"/><text x="44.1645%" y="927.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (20 samples, 0.02%)</title><rect x="43.9136%" y="1013" width="0.0162%" height="15" fill="rgb(242,22,33)" fg:x="54171" fg:w="20"/><text x="44.1636%" y="1023.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (20 samples, 0.02%)</title><rect x="43.9136%" y="997" width="0.0162%" height="15" fill="rgb(231,105,49)" fg:x="54171" fg:w="20"/><text x="44.1636%" y="1007.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (213 samples, 0.17%)</title><rect x="43.7612%" y="1061" width="0.1727%" height="15" fill="rgb(218,204,15)" fg:x="53983" fg:w="213"/><text x="44.0112%" y="1071.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (182 samples, 0.15%)</title><rect x="43.7864%" y="1045" width="0.1475%" height="15" fill="rgb(235,138,41)" fg:x="54014" fg:w="182"/><text x="44.0364%" y="1055.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (52 samples, 0.04%)</title><rect x="43.8918%" y="1029" width="0.0422%" height="15" fill="rgb(246,0,9)" fg:x="54144" fg:w="52"/><text x="44.1418%" y="1039.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (16 samples, 0.01%)</title><rect x="43.9501%" y="1029" width="0.0130%" height="15" fill="rgb(210,74,4)" fg:x="54216" fg:w="16"/><text x="44.2001%" y="1039.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (13 samples, 0.01%)</title><rect x="43.9526%" y="1013" width="0.0105%" height="15" fill="rgb(250,60,41)" fg:x="54219" fg:w="13"/><text x="44.2026%" y="1023.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (38 samples, 0.03%)</title><rect x="43.9339%" y="1061" width="0.0308%" height="15" fill="rgb(220,115,12)" fg:x="54196" fg:w="38"/><text x="44.1839%" y="1071.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (38 samples, 0.03%)</title><rect x="43.9339%" y="1045" width="0.0308%" height="15" fill="rgb(237,100,13)" fg:x="54196" fg:w="38"/><text x="44.1839%" y="1055.50"></text></g><g><title>CheckTransaction (274 samples, 0.22%)</title><rect x="43.7548%" y="1077" width="0.2221%" height="15" fill="rgb(213,55,26)" fg:x="53975" fg:w="274"/><text x="44.0048%" y="1087.50"></text></g><g><title>CScript::GetOp (13 samples, 0.01%)</title><rect x="44.0490%" y="1013" width="0.0105%" height="15" fill="rgb(216,17,4)" fg:x="54338" fg:w="13"/><text x="44.2990%" y="1023.50"></text></g><g><title>CScript::GetSigOpCount (66 samples, 0.05%)</title><rect x="44.0182%" y="1029" width="0.0535%" height="15" fill="rgb(220,153,47)" fg:x="54300" fg:w="66"/><text x="44.2682%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (13 samples, 0.01%)</title><rect x="44.0612%" y="1013" width="0.0105%" height="15" fill="rgb(215,131,9)" fg:x="54353" fg:w="13"/><text x="44.3112%" y="1023.50"></text></g><g><title>GetLegacySigOpCount (17 samples, 0.01%)</title><rect x="44.0725%" y="1029" width="0.0138%" height="15" fill="rgb(233,46,42)" fg:x="54367" fg:w="17"/><text x="44.3225%" y="1039.50"></text></g><g><title>CScript::GetOp (159 samples, 0.13%)</title><rect x="44.0117%" y="1045" width="0.1289%" height="15" fill="rgb(226,86,7)" fg:x="54292" fg:w="159"/><text x="44.2617%" y="1055.50"></text></g><g><title>GetScriptOp (67 samples, 0.05%)</title><rect x="44.0863%" y="1029" width="0.0543%" height="15" fill="rgb(239,226,21)" fg:x="54384" fg:w="67"/><text x="44.3363%" y="1039.50"></text></g><g><title>CScript::GetSigOpCount (212 samples, 0.17%)</title><rect x="43.9801%" y="1061" width="0.1719%" height="15" fill="rgb(244,137,22)" fg:x="54253" fg:w="212"/><text x="44.2301%" y="1071.50"></text></g><g><title>GetLegacySigOpCount (21 samples, 0.02%)</title><rect x="44.1536%" y="1061" width="0.0170%" height="15" fill="rgb(211,139,35)" fg:x="54467" fg:w="21"/><text x="44.4036%" y="1071.50"></text></g><g><title>GetScriptOp (128 samples, 0.10%)</title><rect x="44.1706%" y="1061" width="0.1038%" height="15" fill="rgb(214,62,50)" fg:x="54488" fg:w="128"/><text x="44.4206%" y="1071.50"></text></g><g><title>GetLegacySigOpCount (368 samples, 0.30%)</title><rect x="43.9769%" y="1077" width="0.2983%" height="15" fill="rgb(212,113,44)" fg:x="54249" fg:w="368"/><text x="44.2269%" y="1087.50"></text></g><g><title>GetScriptOp (31 samples, 0.03%)</title><rect x="44.2752%" y="1077" width="0.0251%" height="15" fill="rgb(226,150,43)" fg:x="54617" fg:w="31"/><text x="44.5252%" y="1087.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (18 samples, 0.01%)</title><rect x="44.3214%" y="1077" width="0.0146%" height="15" fill="rgb(250,71,37)" fg:x="54674" fg:w="18"/><text x="44.5714%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (17 samples, 0.01%)</title><rect x="44.3644%" y="693" width="0.0138%" height="15" fill="rgb(219,76,19)" fg:x="54727" fg:w="17"/><text x="44.6144%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (17 samples, 0.01%)</title><rect x="44.3644%" y="677" width="0.0138%" height="15" fill="rgb(250,39,11)" fg:x="54727" fg:w="17"/><text x="44.6144%" y="687.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="44.3644%" y="661" width="0.0138%" height="15" fill="rgb(230,64,31)" fg:x="54727" fg:w="17"/><text x="44.6144%" y="671.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="44.3644%" y="645" width="0.0138%" height="15" fill="rgb(208,222,23)" fg:x="54727" fg:w="17"/><text x="44.6144%" y="655.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (17 samples, 0.01%)</title><rect x="44.3644%" y="629" width="0.0138%" height="15" fill="rgb(227,125,18)" fg:x="54727" fg:w="17"/><text x="44.6144%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (17 samples, 0.01%)</title><rect x="44.3644%" y="613" width="0.0138%" height="15" fill="rgb(234,210,9)" fg:x="54727" fg:w="17"/><text x="44.6144%" y="623.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (17 samples, 0.01%)</title><rect x="44.3644%" y="597" width="0.0138%" height="15" fill="rgb(217,127,24)" fg:x="54727" fg:w="17"/><text x="44.6144%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (16 samples, 0.01%)</title><rect x="44.3652%" y="581" width="0.0130%" height="15" fill="rgb(239,141,48)" fg:x="54728" fg:w="16"/><text x="44.6152%" y="591.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="44.3652%" y="565" width="0.0130%" height="15" fill="rgb(227,109,8)" fg:x="54728" fg:w="16"/><text x="44.6152%" y="575.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="44.3652%" y="549" width="0.0130%" height="15" fill="rgb(235,184,23)" fg:x="54728" fg:w="16"/><text x="44.6152%" y="559.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (16 samples, 0.01%)</title><rect x="44.3652%" y="533" width="0.0130%" height="15" fill="rgb(227,226,48)" fg:x="54728" fg:w="16"/><text x="44.6152%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (16 samples, 0.01%)</title><rect x="44.3652%" y="517" width="0.0130%" height="15" fill="rgb(206,150,11)" fg:x="54728" fg:w="16"/><text x="44.6152%" y="527.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (16 samples, 0.01%)</title><rect x="44.3652%" y="501" width="0.0130%" height="15" fill="rgb(254,2,33)" fg:x="54728" fg:w="16"/><text x="44.6152%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (15 samples, 0.01%)</title><rect x="44.3660%" y="485" width="0.0122%" height="15" fill="rgb(243,160,20)" fg:x="54729" fg:w="15"/><text x="44.6160%" y="495.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (59 samples, 0.05%)</title><rect x="44.3498%" y="773" width="0.0478%" height="15" fill="rgb(218,208,30)" fg:x="54709" fg:w="59"/><text x="44.5998%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (59 samples, 0.05%)</title><rect x="44.3498%" y="757" width="0.0478%" height="15" fill="rgb(224,120,49)" fg:x="54709" fg:w="59"/><text x="44.5998%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (59 samples, 0.05%)</title><rect x="44.3498%" y="741" width="0.0478%" height="15" fill="rgb(246,12,2)" fg:x="54709" fg:w="59"/><text x="44.5998%" y="751.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (59 samples, 0.05%)</title><rect x="44.3498%" y="725" width="0.0478%" height="15" fill="rgb(236,117,3)" fg:x="54709" fg:w="59"/><text x="44.5998%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (59 samples, 0.05%)</title><rect x="44.3498%" y="709" width="0.0478%" height="15" fill="rgb(216,128,52)" fg:x="54709" fg:w="59"/><text x="44.5998%" y="719.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (14 samples, 0.01%)</title><rect x="44.4057%" y="693" width="0.0113%" height="15" fill="rgb(246,145,19)" fg:x="54778" fg:w="14"/><text x="44.6557%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (14 samples, 0.01%)</title><rect x="44.4057%" y="677" width="0.0113%" height="15" fill="rgb(222,11,46)" fg:x="54778" fg:w="14"/><text x="44.6557%" y="687.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="44.4057%" y="661" width="0.0113%" height="15" fill="rgb(245,82,36)" fg:x="54778" fg:w="14"/><text x="44.6557%" y="671.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.01%)</title><rect x="44.4057%" y="645" width="0.0113%" height="15" fill="rgb(250,73,51)" fg:x="54778" fg:w="14"/><text x="44.6557%" y="655.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (14 samples, 0.01%)</title><rect x="44.4057%" y="629" width="0.0113%" height="15" fill="rgb(221,189,23)" fg:x="54778" fg:w="14"/><text x="44.6557%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (14 samples, 0.01%)</title><rect x="44.4057%" y="613" width="0.0113%" height="15" fill="rgb(210,33,7)" fg:x="54778" fg:w="14"/><text x="44.6557%" y="623.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (14 samples, 0.01%)</title><rect x="44.4057%" y="597" width="0.0113%" height="15" fill="rgb(210,107,22)" fg:x="54778" fg:w="14"/><text x="44.6557%" y="607.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (27 samples, 0.02%)</title><rect x="44.3976%" y="773" width="0.0219%" height="15" fill="rgb(222,116,37)" fg:x="54768" fg:w="27"/><text x="44.6476%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (27 samples, 0.02%)</title><rect x="44.3976%" y="757" width="0.0219%" height="15" fill="rgb(254,17,48)" fg:x="54768" fg:w="27"/><text x="44.6476%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (27 samples, 0.02%)</title><rect x="44.3976%" y="741" width="0.0219%" height="15" fill="rgb(224,36,32)" fg:x="54768" fg:w="27"/><text x="44.6476%" y="751.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.02%)</title><rect x="44.3976%" y="725" width="0.0219%" height="15" fill="rgb(232,90,46)" fg:x="54768" fg:w="27"/><text x="44.6476%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (27 samples, 0.02%)</title><rect x="44.3976%" y="709" width="0.0219%" height="15" fill="rgb(241,66,40)" fg:x="54768" fg:w="27"/><text x="44.6476%" y="719.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (106 samples, 0.09%)</title><rect x="44.3384%" y="789" width="0.0859%" height="15" fill="rgb(249,184,29)" fg:x="54695" fg:w="106"/><text x="44.5884%" y="799.50"></text></g><g><title>CheckBlock (890 samples, 0.72%)</title><rect x="43.7313%" y="1093" width="0.7215%" height="15" fill="rgb(231,181,1)" fg:x="53946" fg:w="890"/><text x="43.9813%" y="1103.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="1077" width="0.1167%" height="15" fill="rgb(224,94,2)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="1087.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (144 samples, 0.12%)</title><rect x="44.3360%" y="1061" width="0.1167%" height="15" fill="rgb(229,170,15)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="1071.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="1045" width="0.1167%" height="15" fill="rgb(240,127,35)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="1055.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="1029" width="0.1167%" height="15" fill="rgb(248,196,34)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="1013" width="0.1167%" height="15" fill="rgb(236,137,7)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="1023.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="997" width="0.1167%" height="15" fill="rgb(235,127,16)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="1007.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="981" width="0.1167%" height="15" fill="rgb(250,192,54)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="991.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="965" width="0.1167%" height="15" fill="rgb(218,98,20)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="975.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="949" width="0.1167%" height="15" fill="rgb(230,176,47)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="959.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="933" width="0.1167%" height="15" fill="rgb(244,2,33)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="943.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="917" width="0.1167%" height="15" fill="rgb(231,100,17)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="901" width="0.1167%" height="15" fill="rgb(245,23,12)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="911.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="885" width="0.1167%" height="15" fill="rgb(249,55,22)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="895.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="869" width="0.1167%" height="15" fill="rgb(207,134,9)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="879.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="853" width="0.1167%" height="15" fill="rgb(218,134,0)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="837" width="0.1167%" height="15" fill="rgb(213,212,33)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="821" width="0.1167%" height="15" fill="rgb(252,106,18)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="831.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (144 samples, 0.12%)</title><rect x="44.3360%" y="805" width="0.1167%" height="15" fill="rgb(208,126,42)" fg:x="54692" fg:w="144"/><text x="44.5860%" y="815.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (35 samples, 0.03%)</title><rect x="44.4244%" y="789" width="0.0284%" height="15" fill="rgb(246,175,29)" fg:x="54801" fg:w="35"/><text x="44.6744%" y="799.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.02%)</title><rect x="44.4373%" y="773" width="0.0154%" height="15" fill="rgb(215,13,50)" fg:x="54817" fg:w="19"/><text x="44.6873%" y="783.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (19 samples, 0.02%)</title><rect x="44.4373%" y="757" width="0.0154%" height="15" fill="rgb(216,172,15)" fg:x="54817" fg:w="19"/><text x="44.6873%" y="767.50"></text></g><g><title>SizeComputer::write (19 samples, 0.02%)</title><rect x="44.4373%" y="741" width="0.0154%" height="15" fill="rgb(212,103,13)" fg:x="54817" fg:w="19"/><text x="44.6873%" y="751.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (42,572 samples, 34.51%)</title><rect x="9.9475%" y="1109" width="34.5109%" height="15" fill="rgb(231,171,36)" fg:x="12271" fg:w="42572"/><text x="10.1975%" y="1119.50">ChainstateManager::ProcessNewBlock</text></g><g><title>_mm_add_epi32 (32 samples, 0.03%)</title><rect x="44.4714%" y="997" width="0.0259%" height="15" fill="rgb(250,123,20)" fg:x="54859" fg:w="32"/><text x="44.7214%" y="1007.50"></text></g><g><title>_mm_sha256rnds2_epu32 (53 samples, 0.04%)</title><rect x="44.4973%" y="997" width="0.0430%" height="15" fill="rgb(212,53,50)" fg:x="54891" fg:w="53"/><text x="44.7473%" y="1007.50"></text></g><g><title>QuadRound (100 samples, 0.08%)</title><rect x="44.4714%" y="1013" width="0.0811%" height="15" fill="rgb(243,54,12)" fg:x="54859" fg:w="100"/><text x="44.7214%" y="1023.50"></text></g><g><title>_mm_shuffle_epi32 (15 samples, 0.01%)</title><rect x="44.5403%" y="997" width="0.0122%" height="15" fill="rgb(234,101,34)" fg:x="54944" fg:w="15"/><text x="44.7903%" y="1007.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.01%)</title><rect x="44.5662%" y="981" width="0.0130%" height="15" fill="rgb(254,67,22)" fg:x="54976" fg:w="16"/><text x="44.8162%" y="991.50"></text></g><g><title>_mm_alignr_epi8 (21 samples, 0.02%)</title><rect x="44.5792%" y="981" width="0.0170%" height="15" fill="rgb(250,35,47)" fg:x="54992" fg:w="21"/><text x="44.8292%" y="991.50"></text></g><g><title>ShiftMessageB (93 samples, 0.08%)</title><rect x="44.5597%" y="1013" width="0.0754%" height="15" fill="rgb(226,126,38)" fg:x="54968" fg:w="93"/><text x="44.8097%" y="1023.50"></text></g><g><title>ShiftMessageC (85 samples, 0.07%)</title><rect x="44.5662%" y="997" width="0.0689%" height="15" fill="rgb(216,138,53)" fg:x="54976" fg:w="85"/><text x="44.8162%" y="1007.50"></text></g><g><title>_mm_sha256msg2_epu32 (48 samples, 0.04%)</title><rect x="44.5962%" y="981" width="0.0389%" height="15" fill="rgb(246,199,43)" fg:x="55013" fg:w="48"/><text x="44.8462%" y="991.50"></text></g><g><title>ShiftMessageC (19 samples, 0.02%)</title><rect x="44.6351%" y="1013" width="0.0154%" height="15" fill="rgb(232,125,11)" fg:x="55061" fg:w="19"/><text x="44.8851%" y="1023.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (236 samples, 0.19%)</title><rect x="44.4706%" y="1029" width="0.1913%" height="15" fill="rgb(218,219,45)" fg:x="54858" fg:w="236"/><text x="44.7206%" y="1039.50"></text></g><g><title>SHA256D64 (238 samples, 0.19%)</title><rect x="44.4706%" y="1045" width="0.1929%" height="15" fill="rgb(216,102,54)" fg:x="54858" fg:w="238"/><text x="44.7206%" y="1055.50"></text></g><g><title>ComputeMerkleRoot (248 samples, 0.20%)</title><rect x="44.4681%" y="1061" width="0.2010%" height="15" fill="rgb(250,228,7)" fg:x="54855" fg:w="248"/><text x="44.7181%" y="1071.50"></text></g><g><title>CheckMerkleRoot (271 samples, 0.22%)</title><rect x="44.4616%" y="1093" width="0.2197%" height="15" fill="rgb(226,125,25)" fg:x="54847" fg:w="271"/><text x="44.7116%" y="1103.50"></text></g><g><title>BlockMerkleRoot (271 samples, 0.22%)</title><rect x="44.4616%" y="1077" width="0.2197%" height="15" fill="rgb(224,165,27)" fg:x="54847" fg:w="271"/><text x="44.7116%" y="1087.50"></text></g><g><title>_mm_add_epi32 (42 samples, 0.03%)</title><rect x="44.6903%" y="997" width="0.0340%" height="15" fill="rgb(233,86,3)" fg:x="55129" fg:w="42"/><text x="44.9403%" y="1007.50"></text></g><g><title>_mm_sha256rnds2_epu32 (53 samples, 0.04%)</title><rect x="44.7243%" y="997" width="0.0430%" height="15" fill="rgb(228,116,20)" fg:x="55171" fg:w="53"/><text x="44.9743%" y="1007.50"></text></g><g><title>QuadRound (111 samples, 0.09%)</title><rect x="44.6903%" y="1013" width="0.0900%" height="15" fill="rgb(209,192,17)" fg:x="55129" fg:w="111"/><text x="44.9403%" y="1023.50"></text></g><g><title>_mm_shuffle_epi32 (16 samples, 0.01%)</title><rect x="44.7673%" y="997" width="0.0130%" height="15" fill="rgb(224,88,34)" fg:x="55224" fg:w="16"/><text x="45.0173%" y="1007.50"></text></g><g><title>ShiftMessageA (16 samples, 0.01%)</title><rect x="44.7892%" y="997" width="0.0130%" height="15" fill="rgb(233,38,6)" fg:x="55251" fg:w="16"/><text x="45.0392%" y="1007.50"></text></g><g><title>_mm_sha256msg1_epu32 (16 samples, 0.01%)</title><rect x="44.7892%" y="981" width="0.0130%" height="15" fill="rgb(212,59,30)" fg:x="55251" fg:w="16"/><text x="45.0392%" y="991.50"></text></g><g><title>_mm_add_epi32 (18 samples, 0.01%)</title><rect x="44.8021%" y="981" width="0.0146%" height="15" fill="rgb(213,80,3)" fg:x="55267" fg:w="18"/><text x="45.0521%" y="991.50"></text></g><g><title>_mm_alignr_epi8 (25 samples, 0.02%)</title><rect x="44.8167%" y="981" width="0.0203%" height="15" fill="rgb(251,178,7)" fg:x="55285" fg:w="25"/><text x="45.0667%" y="991.50"></text></g><g><title>ShiftMessageB (115 samples, 0.09%)</title><rect x="44.7892%" y="1013" width="0.0932%" height="15" fill="rgb(213,154,26)" fg:x="55251" fg:w="115"/><text x="45.0392%" y="1023.50"></text></g><g><title>ShiftMessageC (99 samples, 0.08%)</title><rect x="44.8021%" y="997" width="0.0803%" height="15" fill="rgb(238,165,49)" fg:x="55267" fg:w="99"/><text x="45.0521%" y="1007.50"></text></g><g><title>_mm_sha256msg2_epu32 (56 samples, 0.05%)</title><rect x="44.8370%" y="981" width="0.0454%" height="15" fill="rgb(248,91,46)" fg:x="55310" fg:w="56"/><text x="45.0870%" y="991.50"></text></g><g><title>SHA256D64 (261 samples, 0.21%)</title><rect x="44.6878%" y="1045" width="0.2116%" height="15" fill="rgb(244,21,52)" fg:x="55126" fg:w="261"/><text x="44.9378%" y="1055.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (261 samples, 0.21%)</title><rect x="44.6878%" y="1029" width="0.2116%" height="15" fill="rgb(247,122,20)" fg:x="55126" fg:w="261"/><text x="44.9378%" y="1039.50"></text></g><g><title>ComputeMerkleRoot (264 samples, 0.21%)</title><rect x="44.6878%" y="1061" width="0.2140%" height="15" fill="rgb(218,27,9)" fg:x="55126" fg:w="264"/><text x="44.9378%" y="1071.50"></text></g><g><title>BlockWitnessMerkleRoot (280 samples, 0.23%)</title><rect x="44.6813%" y="1077" width="0.2270%" height="15" fill="rgb(246,7,6)" fg:x="55118" fg:w="280"/><text x="44.9313%" y="1087.50"></text></g><g><title>IsBlockMutated (552 samples, 0.45%)</title><rect x="44.4616%" y="1109" width="0.4475%" height="15" fill="rgb(227,135,54)" fg:x="54847" fg:w="552"/><text x="44.7116%" y="1119.50"></text></g><g><title>CheckWitnessMalleation (281 samples, 0.23%)</title><rect x="44.6813%" y="1093" width="0.2278%" height="15" fill="rgb(247,14,11)" fg:x="55118" fg:w="281"/><text x="44.9313%" y="1103.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::reserve (28 samples, 0.02%)</title><rect x="44.9205%" y="885" width="0.0227%" height="15" fill="rgb(206,149,34)" fg:x="55413" fg:w="28"/><text x="45.1705%" y="895.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (28 samples, 0.02%)</title><rect x="44.9205%" y="869" width="0.0227%" height="15" fill="rgb(227,228,4)" fg:x="55413" fg:w="28"/><text x="45.1705%" y="879.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (28 samples, 0.02%)</title><rect x="44.9205%" y="853" width="0.0227%" height="15" fill="rgb(238,218,28)" fg:x="55413" fg:w="28"/><text x="45.1705%" y="863.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::allocate (28 samples, 0.02%)</title><rect x="44.9205%" y="837" width="0.0227%" height="15" fill="rgb(252,86,40)" fg:x="55413" fg:w="28"/><text x="45.1705%" y="847.50"></text></g><g><title>std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (28 samples, 0.02%)</title><rect x="44.9205%" y="821" width="0.0227%" height="15" fill="rgb(251,225,11)" fg:x="55413" fg:w="28"/><text x="45.1705%" y="831.50"></text></g><g><title>std::__new_allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (28 samples, 0.02%)</title><rect x="44.9205%" y="805" width="0.0227%" height="15" fill="rgb(206,46,49)" fg:x="55413" fg:w="28"/><text x="45.1705%" y="815.50"></text></g><g><title>operator new (28 samples, 0.02%)</title><rect x="44.9205%" y="789" width="0.0227%" height="15" fill="rgb(245,128,24)" fg:x="55413" fg:w="28"/><text x="45.1705%" y="799.50"></text></g><g><title>malloc (28 samples, 0.02%)</title><rect x="44.9205%" y="773" width="0.0227%" height="15" fill="rgb(219,177,34)" fg:x="55413" fg:w="28"/><text x="45.1705%" y="783.50"></text></g><g><title>_int_malloc (28 samples, 0.02%)</title><rect x="44.9205%" y="757" width="0.0227%" height="15" fill="rgb(218,60,48)" fg:x="55413" fg:w="28"/><text x="45.1705%" y="767.50"></text></g><g><title>malloc_consolidate (17 samples, 0.01%)</title><rect x="44.9294%" y="741" width="0.0138%" height="15" fill="rgb(221,11,5)" fg:x="55424" fg:w="17"/><text x="45.1794%" y="751.50"></text></g><g><title>QuadRound (14 samples, 0.01%)</title><rect x="44.9448%" y="853" width="0.0113%" height="15" fill="rgb(220,148,13)" fg:x="55443" fg:w="14"/><text x="45.1948%" y="863.50"></text></g><g><title>ShiftMessageB (18 samples, 0.01%)</title><rect x="44.9570%" y="853" width="0.0146%" height="15" fill="rgb(210,16,3)" fg:x="55458" fg:w="18"/><text x="45.2070%" y="863.50"></text></g><g><title>ShiftMessageC (14 samples, 0.01%)</title><rect x="44.9602%" y="837" width="0.0113%" height="15" fill="rgb(236,80,2)" fg:x="55462" fg:w="14"/><text x="45.2102%" y="847.50"></text></g><g><title>sha256_x86_shani::Transform (38 samples, 0.03%)</title><rect x="44.9432%" y="869" width="0.0308%" height="15" fill="rgb(239,129,19)" fg:x="55441" fg:w="38"/><text x="45.1932%" y="879.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (18 samples, 0.01%)</title><rect x="44.9740%" y="869" width="0.0146%" height="15" fill="rgb(220,106,35)" fg:x="55479" fg:w="18"/><text x="45.2240%" y="879.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="44.9886%" y="869" width="0.0122%" height="15" fill="rgb(252,139,45)" fg:x="55497" fg:w="15"/><text x="45.2386%" y="879.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (28 samples, 0.02%)</title><rect x="45.0007%" y="869" width="0.0227%" height="15" fill="rgb(229,8,36)" fg:x="55512" fg:w="28"/><text x="45.2507%" y="879.50"></text></g><g><title>CSHA256::Finalize (14 samples, 0.01%)</title><rect x="45.0315%" y="613" width="0.0113%" height="15" fill="rgb(230,126,33)" fg:x="55550" fg:w="14"/><text x="45.2815%" y="623.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.02%)</title><rect x="45.0640%" y="613" width="0.0162%" height="15" fill="rgb(239,140,21)" fg:x="55590" fg:w="20"/><text x="45.3140%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (13 samples, 0.01%)</title><rect x="45.0802%" y="613" width="0.0105%" height="15" fill="rgb(254,104,9)" fg:x="55610" fg:w="13"/><text x="45.3302%" y="623.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="45.0923%" y="469" width="0.0138%" height="15" fill="rgb(239,52,14)" fg:x="55625" fg:w="17"/><text x="45.3423%" y="479.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="45.0931%" y="453" width="0.0130%" height="15" fill="rgb(208,227,44)" fg:x="55626" fg:w="16"/><text x="45.3431%" y="463.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (15 samples, 0.01%)</title><rect x="45.0940%" y="437" width="0.0122%" height="15" fill="rgb(246,18,19)" fg:x="55627" fg:w="15"/><text x="45.3440%" y="447.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (19 samples, 0.02%)</title><rect x="45.0923%" y="533" width="0.0154%" height="15" fill="rgb(235,228,25)" fg:x="55625" fg:w="19"/><text x="45.3423%" y="543.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (19 samples, 0.02%)</title><rect x="45.0923%" y="517" width="0.0154%" height="15" fill="rgb(240,156,20)" fg:x="55625" fg:w="19"/><text x="45.3423%" y="527.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (19 samples, 0.02%)</title><rect x="45.0923%" y="501" width="0.0154%" height="15" fill="rgb(224,8,20)" fg:x="55625" fg:w="19"/><text x="45.3423%" y="511.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.02%)</title><rect x="45.0923%" y="485" width="0.0154%" height="15" fill="rgb(214,12,52)" fg:x="55625" fg:w="19"/><text x="45.3423%" y="495.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (20 samples, 0.02%)</title><rect x="45.0923%" y="597" width="0.0162%" height="15" fill="rgb(211,220,47)" fg:x="55625" fg:w="20"/><text x="45.3423%" y="607.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (20 samples, 0.02%)</title><rect x="45.0923%" y="581" width="0.0162%" height="15" fill="rgb(250,173,5)" fg:x="55625" fg:w="20"/><text x="45.3423%" y="591.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (20 samples, 0.02%)</title><rect x="45.0923%" y="565" width="0.0162%" height="15" fill="rgb(250,125,52)" fg:x="55625" fg:w="20"/><text x="45.3423%" y="575.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (20 samples, 0.02%)</title><rect x="45.0923%" y="549" width="0.0162%" height="15" fill="rgb(209,133,18)" fg:x="55625" fg:w="20"/><text x="45.3423%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (26 samples, 0.02%)</title><rect x="45.0907%" y="613" width="0.0211%" height="15" fill="rgb(216,173,22)" fg:x="55623" fg:w="26"/><text x="45.3407%" y="623.50"></text></g><g><title>__lll_lock_wake_private (120 samples, 0.10%)</title><rect x="45.1466%" y="469" width="0.0973%" height="15" fill="rgb(205,3,22)" fg:x="55692" fg:w="120"/><text x="45.3966%" y="479.50"></text></g><g><title>[unknown] (118 samples, 0.10%)</title><rect x="45.1483%" y="453" width="0.0957%" height="15" fill="rgb(248,22,20)" fg:x="55694" fg:w="118"/><text x="45.3983%" y="463.50"></text></g><g><title>[unknown] (118 samples, 0.10%)</title><rect x="45.1483%" y="437" width="0.0957%" height="15" fill="rgb(233,6,29)" fg:x="55694" fg:w="118"/><text x="45.3983%" y="447.50"></text></g><g><title>[unknown] (117 samples, 0.09%)</title><rect x="45.1491%" y="421" width="0.0948%" height="15" fill="rgb(240,22,54)" fg:x="55695" fg:w="117"/><text x="45.3991%" y="431.50"></text></g><g><title>[unknown] (106 samples, 0.09%)</title><rect x="45.1580%" y="405" width="0.0859%" height="15" fill="rgb(231,133,32)" fg:x="55706" fg:w="106"/><text x="45.4080%" y="415.50"></text></g><g><title>[unknown] (98 samples, 0.08%)</title><rect x="45.1645%" y="389" width="0.0794%" height="15" fill="rgb(248,193,4)" fg:x="55714" fg:w="98"/><text x="45.4145%" y="399.50"></text></g><g><title>[unknown] (87 samples, 0.07%)</title><rect x="45.1734%" y="373" width="0.0705%" height="15" fill="rgb(211,178,46)" fg:x="55725" fg:w="87"/><text x="45.4234%" y="383.50"></text></g><g><title>[unknown] (83 samples, 0.07%)</title><rect x="45.1766%" y="357" width="0.0673%" height="15" fill="rgb(224,5,42)" fg:x="55729" fg:w="83"/><text x="45.4266%" y="367.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="45.2212%" y="341" width="0.0227%" height="15" fill="rgb(239,176,25)" fg:x="55784" fg:w="28"/><text x="45.4712%" y="351.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (779 samples, 0.63%)</title><rect x="45.1329%" y="581" width="0.6315%" height="15" fill="rgb(245,187,50)" fg:x="55675" fg:w="779"/><text x="45.3829%" y="591.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (779 samples, 0.63%)</title><rect x="45.1329%" y="565" width="0.6315%" height="15" fill="rgb(248,24,15)" fg:x="55675" fg:w="779"/><text x="45.3829%" y="575.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (779 samples, 0.63%)</title><rect x="45.1329%" y="549" width="0.6315%" height="15" fill="rgb(205,166,13)" fg:x="55675" fg:w="779"/><text x="45.3829%" y="559.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (779 samples, 0.63%)</title><rect x="45.1329%" y="533" width="0.6315%" height="15" fill="rgb(208,114,23)" fg:x="55675" fg:w="779"/><text x="45.3829%" y="543.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (779 samples, 0.63%)</title><rect x="45.1329%" y="517" width="0.6315%" height="15" fill="rgb(239,127,18)" fg:x="55675" fg:w="779"/><text x="45.3829%" y="527.50"></text></g><g><title>operator new (778 samples, 0.63%)</title><rect x="45.1337%" y="501" width="0.6307%" height="15" fill="rgb(219,154,28)" fg:x="55676" fg:w="778"/><text x="45.3837%" y="511.50"></text></g><g><title>malloc (777 samples, 0.63%)</title><rect x="45.1345%" y="485" width="0.6299%" height="15" fill="rgb(225,157,23)" fg:x="55677" fg:w="777"/><text x="45.3845%" y="495.50"></text></g><g><title>_int_malloc (642 samples, 0.52%)</title><rect x="45.2439%" y="469" width="0.5204%" height="15" fill="rgb(219,8,6)" fg:x="55812" fg:w="642"/><text x="45.4939%" y="479.50"></text></g><g><title>malloc_consolidate (371 samples, 0.30%)</title><rect x="45.4636%" y="453" width="0.3008%" height="15" fill="rgb(212,47,6)" fg:x="56083" fg:w="371"/><text x="45.7136%" y="463.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (781 samples, 0.63%)</title><rect x="45.1329%" y="597" width="0.6331%" height="15" fill="rgb(224,190,4)" fg:x="55675" fg:w="781"/><text x="45.3829%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (22 samples, 0.02%)</title><rect x="45.7903%" y="373" width="0.0178%" height="15" fill="rgb(239,183,29)" fg:x="56486" fg:w="22"/><text x="46.0403%" y="383.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (22 samples, 0.02%)</title><rect x="45.7903%" y="357" width="0.0178%" height="15" fill="rgb(213,57,7)" fg:x="56486" fg:w="22"/><text x="46.0403%" y="367.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (21 samples, 0.02%)</title><rect x="45.7911%" y="341" width="0.0170%" height="15" fill="rgb(216,148,1)" fg:x="56487" fg:w="21"/><text x="46.0411%" y="351.50"></text></g><g><title>malloc (20 samples, 0.02%)</title><rect x="45.7919%" y="325" width="0.0162%" height="15" fill="rgb(236,182,29)" fg:x="56488" fg:w="20"/><text x="46.0419%" y="335.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (52 samples, 0.04%)</title><rect x="45.7814%" y="389" width="0.0422%" height="15" fill="rgb(244,120,48)" fg:x="56475" fg:w="52"/><text x="46.0314%" y="399.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="45.8130%" y="373" width="0.0105%" height="15" fill="rgb(206,71,34)" fg:x="56514" fg:w="13"/><text x="46.0630%" y="383.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (85 samples, 0.07%)</title><rect x="45.7700%" y="597" width="0.0689%" height="15" fill="rgb(242,32,6)" fg:x="56461" fg:w="85"/><text x="46.0200%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (85 samples, 0.07%)</title><rect x="45.7700%" y="581" width="0.0689%" height="15" fill="rgb(241,35,3)" fg:x="56461" fg:w="85"/><text x="46.0200%" y="591.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (85 samples, 0.07%)</title><rect x="45.7700%" y="565" width="0.0689%" height="15" fill="rgb(222,62,19)" fg:x="56461" fg:w="85"/><text x="46.0200%" y="575.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (85 samples, 0.07%)</title><rect x="45.7700%" y="549" width="0.0689%" height="15" fill="rgb(223,110,41)" fg:x="56461" fg:w="85"/><text x="46.0200%" y="559.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (85 samples, 0.07%)</title><rect x="45.7700%" y="533" width="0.0689%" height="15" fill="rgb(208,224,4)" fg:x="56461" fg:w="85"/><text x="46.0200%" y="543.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (85 samples, 0.07%)</title><rect x="45.7700%" y="517" width="0.0689%" height="15" fill="rgb(241,137,19)" fg:x="56461" fg:w="85"/><text x="46.0200%" y="527.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (85 samples, 0.07%)</title><rect x="45.7700%" y="501" width="0.0689%" height="15" fill="rgb(244,24,17)" fg:x="56461" fg:w="85"/><text x="46.0200%" y="511.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (76 samples, 0.06%)</title><rect x="45.7773%" y="485" width="0.0616%" height="15" fill="rgb(245,178,49)" fg:x="56470" fg:w="76"/><text x="46.0273%" y="495.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (76 samples, 0.06%)</title><rect x="45.7773%" y="469" width="0.0616%" height="15" fill="rgb(219,160,38)" fg:x="56470" fg:w="76"/><text x="46.0273%" y="479.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (76 samples, 0.06%)</title><rect x="45.7773%" y="453" width="0.0616%" height="15" fill="rgb(228,137,14)" fg:x="56470" fg:w="76"/><text x="46.0273%" y="463.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (76 samples, 0.06%)</title><rect x="45.7773%" y="437" width="0.0616%" height="15" fill="rgb(237,134,11)" fg:x="56470" fg:w="76"/><text x="46.0273%" y="447.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (75 samples, 0.06%)</title><rect x="45.7781%" y="421" width="0.0608%" height="15" fill="rgb(211,126,44)" fg:x="56471" fg:w="75"/><text x="46.0281%" y="431.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (75 samples, 0.06%)</title><rect x="45.7781%" y="405" width="0.0608%" height="15" fill="rgb(226,171,33)" fg:x="56471" fg:w="75"/><text x="46.0281%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (18 samples, 0.01%)</title><rect x="45.8243%" y="389" width="0.0146%" height="15" fill="rgb(253,99,13)" fg:x="56528" fg:w="18"/><text x="46.0743%" y="399.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (20 samples, 0.02%)</title><rect x="45.8389%" y="597" width="0.0162%" height="15" fill="rgb(244,48,7)" fg:x="56546" fg:w="20"/><text x="46.0889%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (923 samples, 0.75%)</title><rect x="45.1118%" y="613" width="0.7482%" height="15" fill="rgb(244,217,54)" fg:x="55649" fg:w="923"/><text x="45.3618%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (1,029 samples, 0.83%)</title><rect x="45.0315%" y="677" width="0.8342%" height="15" fill="rgb(224,15,18)" fg:x="55550" fg:w="1029"/><text x="45.2815%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1,029 samples, 0.83%)</title><rect x="45.0315%" y="661" width="0.8342%" height="15" fill="rgb(244,99,12)" fg:x="55550" fg:w="1029"/><text x="45.2815%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (1,029 samples, 0.83%)</title><rect x="45.0315%" y="645" width="0.8342%" height="15" fill="rgb(233,226,8)" fg:x="55550" fg:w="1029"/><text x="45.2815%" y="655.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1,029 samples, 0.83%)</title><rect x="45.0315%" y="629" width="0.8342%" height="15" fill="rgb(229,211,3)" fg:x="55550" fg:w="1029"/><text x="45.2815%" y="639.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="45.8657%" y="613" width="0.0122%" height="15" fill="rgb(216,140,21)" fg:x="56579" fg:w="15"/><text x="46.1157%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (14 samples, 0.01%)</title><rect x="45.8779%" y="613" width="0.0113%" height="15" fill="rgb(234,122,30)" fg:x="56594" fg:w="14"/><text x="46.1279%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (17 samples, 0.01%)</title><rect x="45.8892%" y="613" width="0.0138%" height="15" fill="rgb(236,25,46)" fg:x="56608" fg:w="17"/><text x="46.1392%" y="623.50"></text></g><g><title>__lll_lock_wake_private (94 samples, 0.08%)</title><rect x="45.9249%" y="469" width="0.0762%" height="15" fill="rgb(217,52,54)" fg:x="56652" fg:w="94"/><text x="46.1749%" y="479.50"></text></g><g><title>[unknown] (93 samples, 0.08%)</title><rect x="45.9257%" y="453" width="0.0754%" height="15" fill="rgb(222,29,26)" fg:x="56653" fg:w="93"/><text x="46.1757%" y="463.50"></text></g><g><title>[unknown] (92 samples, 0.07%)</title><rect x="45.9265%" y="437" width="0.0746%" height="15" fill="rgb(216,177,29)" fg:x="56654" fg:w="92"/><text x="46.1765%" y="447.50"></text></g><g><title>[unknown] (90 samples, 0.07%)</title><rect x="45.9281%" y="421" width="0.0730%" height="15" fill="rgb(247,136,51)" fg:x="56656" fg:w="90"/><text x="46.1781%" y="431.50"></text></g><g><title>[unknown] (81 samples, 0.07%)</title><rect x="45.9354%" y="405" width="0.0657%" height="15" fill="rgb(231,47,47)" fg:x="56665" fg:w="81"/><text x="46.1854%" y="415.50"></text></g><g><title>[unknown] (79 samples, 0.06%)</title><rect x="45.9370%" y="389" width="0.0640%" height="15" fill="rgb(211,192,36)" fg:x="56667" fg:w="79"/><text x="46.1870%" y="399.50"></text></g><g><title>[unknown] (64 samples, 0.05%)</title><rect x="45.9492%" y="373" width="0.0519%" height="15" fill="rgb(229,156,32)" fg:x="56682" fg:w="64"/><text x="46.1992%" y="383.50"></text></g><g><title>[unknown] (63 samples, 0.05%)</title><rect x="45.9500%" y="357" width="0.0511%" height="15" fill="rgb(248,213,20)" fg:x="56683" fg:w="63"/><text x="46.2000%" y="367.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="45.9905%" y="341" width="0.0105%" height="15" fill="rgb(217,64,7)" fg:x="56733" fg:w="13"/><text x="46.2405%" y="351.50"></text></g><g><title>_int_malloc (212 samples, 0.17%)</title><rect x="46.0011%" y="469" width="0.1719%" height="15" fill="rgb(232,142,8)" fg:x="56746" fg:w="212"/><text x="46.2511%" y="479.50"></text></g><g><title>malloc_consolidate (85 samples, 0.07%)</title><rect x="46.1040%" y="453" width="0.0689%" height="15" fill="rgb(224,92,44)" fg:x="56873" fg:w="85"/><text x="46.3540%" y="463.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (318 samples, 0.26%)</title><rect x="45.9160%" y="581" width="0.2578%" height="15" fill="rgb(214,169,17)" fg:x="56641" fg:w="318"/><text x="46.1660%" y="591.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (318 samples, 0.26%)</title><rect x="45.9160%" y="565" width="0.2578%" height="15" fill="rgb(210,59,37)" fg:x="56641" fg:w="318"/><text x="46.1660%" y="575.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (318 samples, 0.26%)</title><rect x="45.9160%" y="549" width="0.2578%" height="15" fill="rgb(214,116,48)" fg:x="56641" fg:w="318"/><text x="46.1660%" y="559.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::allocate (318 samples, 0.26%)</title><rect x="45.9160%" y="533" width="0.2578%" height="15" fill="rgb(244,191,6)" fg:x="56641" fg:w="318"/><text x="46.1660%" y="543.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::allocate (318 samples, 0.26%)</title><rect x="45.9160%" y="517" width="0.2578%" height="15" fill="rgb(241,50,52)" fg:x="56641" fg:w="318"/><text x="46.1660%" y="527.50"></text></g><g><title>operator new (317 samples, 0.26%)</title><rect x="45.9168%" y="501" width="0.2570%" height="15" fill="rgb(236,75,39)" fg:x="56642" fg:w="317"/><text x="46.1668%" y="511.50"></text></g><g><title>malloc (317 samples, 0.26%)</title><rect x="45.9168%" y="485" width="0.2570%" height="15" fill="rgb(236,99,0)" fg:x="56642" fg:w="317"/><text x="46.1668%" y="495.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (321 samples, 0.26%)</title><rect x="45.9160%" y="597" width="0.2602%" height="15" fill="rgb(207,202,15)" fg:x="56641" fg:w="321"/><text x="46.1660%" y="607.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.02%)</title><rect x="46.1818%" y="389" width="0.0203%" height="15" fill="rgb(233,207,14)" fg:x="56969" fg:w="25"/><text x="46.4318%" y="399.50"></text></g><g><title>__lll_lock_wake_private (73 samples, 0.06%)</title><rect x="46.2272%" y="309" width="0.0592%" height="15" fill="rgb(226,27,51)" fg:x="57025" fg:w="73"/><text x="46.4772%" y="319.50"></text></g><g><title>[unknown] (73 samples, 0.06%)</title><rect x="46.2272%" y="293" width="0.0592%" height="15" fill="rgb(206,104,42)" fg:x="57025" fg:w="73"/><text x="46.4772%" y="303.50"></text></g><g><title>[unknown] (73 samples, 0.06%)</title><rect x="46.2272%" y="277" width="0.0592%" height="15" fill="rgb(212,225,4)" fg:x="57025" fg:w="73"/><text x="46.4772%" y="287.50"></text></g><g><title>[unknown] (72 samples, 0.06%)</title><rect x="46.2281%" y="261" width="0.0584%" height="15" fill="rgb(233,96,42)" fg:x="57026" fg:w="72"/><text x="46.4781%" y="271.50"></text></g><g><title>[unknown] (68 samples, 0.06%)</title><rect x="46.2313%" y="245" width="0.0551%" height="15" fill="rgb(229,21,32)" fg:x="57030" fg:w="68"/><text x="46.4813%" y="255.50"></text></g><g><title>[unknown] (67 samples, 0.05%)</title><rect x="46.2321%" y="229" width="0.0543%" height="15" fill="rgb(226,216,24)" fg:x="57031" fg:w="67"/><text x="46.4821%" y="239.50"></text></g><g><title>[unknown] (62 samples, 0.05%)</title><rect x="46.2362%" y="213" width="0.0503%" height="15" fill="rgb(221,163,17)" fg:x="57036" fg:w="62"/><text x="46.4862%" y="223.50"></text></g><g><title>[unknown] (58 samples, 0.05%)</title><rect x="46.2394%" y="197" width="0.0470%" height="15" fill="rgb(216,216,42)" fg:x="57040" fg:w="58"/><text x="46.4894%" y="207.50"></text></g><g><title>malloc (118 samples, 0.10%)</title><rect x="46.2232%" y="325" width="0.0957%" height="15" fill="rgb(240,118,7)" fg:x="57020" fg:w="118"/><text x="46.4732%" y="335.50"></text></g><g><title>_int_malloc (40 samples, 0.03%)</title><rect x="46.2864%" y="309" width="0.0324%" height="15" fill="rgb(221,67,37)" fg:x="57098" fg:w="40"/><text x="46.5364%" y="319.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (119 samples, 0.10%)</title><rect x="46.2232%" y="373" width="0.0965%" height="15" fill="rgb(241,32,44)" fg:x="57020" fg:w="119"/><text x="46.4732%" y="383.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (119 samples, 0.10%)</title><rect x="46.2232%" y="357" width="0.0965%" height="15" fill="rgb(235,204,43)" fg:x="57020" fg:w="119"/><text x="46.4732%" y="367.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (119 samples, 0.10%)</title><rect x="46.2232%" y="341" width="0.0965%" height="15" fill="rgb(213,116,10)" fg:x="57020" fg:w="119"/><text x="46.4732%" y="351.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (164 samples, 0.13%)</title><rect x="46.2021%" y="389" width="0.1329%" height="15" fill="rgb(239,15,48)" fg:x="56994" fg:w="164"/><text x="46.4521%" y="399.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (229 samples, 0.19%)</title><rect x="46.1770%" y="597" width="0.1856%" height="15" fill="rgb(207,123,36)" fg:x="56963" fg:w="229"/><text x="46.4270%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (229 samples, 0.19%)</title><rect x="46.1770%" y="581" width="0.1856%" height="15" fill="rgb(209,103,30)" fg:x="56963" fg:w="229"/><text x="46.4270%" y="591.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (229 samples, 0.19%)</title><rect x="46.1770%" y="565" width="0.1856%" height="15" fill="rgb(238,100,19)" fg:x="56963" fg:w="229"/><text x="46.4270%" y="575.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (229 samples, 0.19%)</title><rect x="46.1770%" y="549" width="0.1856%" height="15" fill="rgb(244,30,14)" fg:x="56963" fg:w="229"/><text x="46.4270%" y="559.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (229 samples, 0.19%)</title><rect x="46.1770%" y="533" width="0.1856%" height="15" fill="rgb(249,174,6)" fg:x="56963" fg:w="229"/><text x="46.4270%" y="543.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (229 samples, 0.19%)</title><rect x="46.1770%" y="517" width="0.1856%" height="15" fill="rgb(235,213,41)" fg:x="56963" fg:w="229"/><text x="46.4270%" y="527.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (229 samples, 0.19%)</title><rect x="46.1770%" y="501" width="0.1856%" height="15" fill="rgb(213,118,6)" fg:x="56963" fg:w="229"/><text x="46.4270%" y="511.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (224 samples, 0.18%)</title><rect x="46.1810%" y="485" width="0.1816%" height="15" fill="rgb(235,44,51)" fg:x="56968" fg:w="224"/><text x="46.4310%" y="495.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (224 samples, 0.18%)</title><rect x="46.1810%" y="469" width="0.1816%" height="15" fill="rgb(217,9,53)" fg:x="56968" fg:w="224"/><text x="46.4310%" y="479.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (224 samples, 0.18%)</title><rect x="46.1810%" y="453" width="0.1816%" height="15" fill="rgb(237,172,34)" fg:x="56968" fg:w="224"/><text x="46.4310%" y="463.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (224 samples, 0.18%)</title><rect x="46.1810%" y="437" width="0.1816%" height="15" fill="rgb(206,206,11)" fg:x="56968" fg:w="224"/><text x="46.4310%" y="447.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (224 samples, 0.18%)</title><rect x="46.1810%" y="421" width="0.1816%" height="15" fill="rgb(214,149,29)" fg:x="56968" fg:w="224"/><text x="46.4310%" y="431.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (224 samples, 0.18%)</title><rect x="46.1810%" y="405" width="0.1816%" height="15" fill="rgb(208,123,3)" fg:x="56968" fg:w="224"/><text x="46.4310%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (22 samples, 0.02%)</title><rect x="46.3448%" y="389" width="0.0178%" height="15" fill="rgb(229,126,4)" fg:x="57170" fg:w="22"/><text x="46.5948%" y="399.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (621 samples, 0.50%)</title><rect x="45.8657%" y="677" width="0.5034%" height="15" fill="rgb(222,92,36)" fg:x="56579" fg:w="621"/><text x="46.1157%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (621 samples, 0.50%)</title><rect x="45.8657%" y="661" width="0.5034%" height="15" fill="rgb(216,39,41)" fg:x="56579" fg:w="621"/><text x="46.1157%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (621 samples, 0.50%)</title><rect x="45.8657%" y="645" width="0.5034%" height="15" fill="rgb(253,127,28)" fg:x="56579" fg:w="621"/><text x="46.1157%" y="655.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (621 samples, 0.50%)</title><rect x="45.8657%" y="629" width="0.5034%" height="15" fill="rgb(249,152,51)" fg:x="56579" fg:w="621"/><text x="46.1157%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (575 samples, 0.47%)</title><rect x="45.9030%" y="613" width="0.4661%" height="15" fill="rgb(209,123,42)" fg:x="56625" fg:w="575"/><text x="46.1530%" y="623.50"></text></g><g><title>__lll_lock_wake_private (133 samples, 0.11%)</title><rect x="46.3910%" y="469" width="0.1078%" height="15" fill="rgb(241,118,22)" fg:x="57227" fg:w="133"/><text x="46.6410%" y="479.50"></text></g><g><title>[unknown] (131 samples, 0.11%)</title><rect x="46.3926%" y="453" width="0.1062%" height="15" fill="rgb(208,25,7)" fg:x="57229" fg:w="131"/><text x="46.6426%" y="463.50"></text></g><g><title>[unknown] (130 samples, 0.11%)</title><rect x="46.3934%" y="437" width="0.1054%" height="15" fill="rgb(243,144,39)" fg:x="57230" fg:w="130"/><text x="46.6434%" y="447.50"></text></g><g><title>[unknown] (129 samples, 0.10%)</title><rect x="46.3942%" y="421" width="0.1046%" height="15" fill="rgb(250,50,5)" fg:x="57231" fg:w="129"/><text x="46.6442%" y="431.50"></text></g><g><title>[unknown] (116 samples, 0.09%)</title><rect x="46.4048%" y="405" width="0.0940%" height="15" fill="rgb(207,67,11)" fg:x="57244" fg:w="116"/><text x="46.6548%" y="415.50"></text></g><g><title>[unknown] (106 samples, 0.09%)</title><rect x="46.4129%" y="389" width="0.0859%" height="15" fill="rgb(245,204,40)" fg:x="57254" fg:w="106"/><text x="46.6629%" y="399.50"></text></g><g><title>[unknown] (83 samples, 0.07%)</title><rect x="46.4315%" y="373" width="0.0673%" height="15" fill="rgb(238,228,24)" fg:x="57277" fg:w="83"/><text x="46.6815%" y="383.50"></text></g><g><title>[unknown] (79 samples, 0.06%)</title><rect x="46.4348%" y="357" width="0.0640%" height="15" fill="rgb(217,116,22)" fg:x="57281" fg:w="79"/><text x="46.6848%" y="367.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="46.4850%" y="341" width="0.0138%" height="15" fill="rgb(234,98,12)" fg:x="57343" fg:w="17"/><text x="46.7350%" y="351.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (234 samples, 0.19%)</title><rect x="46.3821%" y="581" width="0.1897%" height="15" fill="rgb(242,170,50)" fg:x="57216" fg:w="234"/><text x="46.6321%" y="591.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (234 samples, 0.19%)</title><rect x="46.3821%" y="565" width="0.1897%" height="15" fill="rgb(235,7,5)" fg:x="57216" fg:w="234"/><text x="46.6321%" y="575.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (234 samples, 0.19%)</title><rect x="46.3821%" y="549" width="0.1897%" height="15" fill="rgb(241,114,28)" fg:x="57216" fg:w="234"/><text x="46.6321%" y="559.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (234 samples, 0.19%)</title><rect x="46.3821%" y="533" width="0.1897%" height="15" fill="rgb(246,112,42)" fg:x="57216" fg:w="234"/><text x="46.6321%" y="543.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (234 samples, 0.19%)</title><rect x="46.3821%" y="517" width="0.1897%" height="15" fill="rgb(248,228,14)" fg:x="57216" fg:w="234"/><text x="46.6321%" y="527.50"></text></g><g><title>operator new (234 samples, 0.19%)</title><rect x="46.3821%" y="501" width="0.1897%" height="15" fill="rgb(208,133,18)" fg:x="57216" fg:w="234"/><text x="46.6321%" y="511.50"></text></g><g><title>malloc (232 samples, 0.19%)</title><rect x="46.3837%" y="485" width="0.1881%" height="15" fill="rgb(207,35,49)" fg:x="57218" fg:w="232"/><text x="46.6337%" y="495.50"></text></g><g><title>_int_malloc (90 samples, 0.07%)</title><rect x="46.4988%" y="469" width="0.0730%" height="15" fill="rgb(205,68,36)" fg:x="57360" fg:w="90"/><text x="46.7488%" y="479.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (251 samples, 0.20%)</title><rect x="46.3715%" y="597" width="0.2035%" height="15" fill="rgb(245,62,40)" fg:x="57203" fg:w="251"/><text x="46.6215%" y="607.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (13 samples, 0.01%)</title><rect x="46.5815%" y="597" width="0.0105%" height="15" fill="rgb(228,27,24)" fg:x="57462" fg:w="13"/><text x="46.8315%" y="607.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (20 samples, 0.02%)</title><rect x="46.6034%" y="565" width="0.0162%" height="15" fill="rgb(253,19,12)" fg:x="57489" fg:w="20"/><text x="46.8534%" y="575.50"></text></g><g><title>DataStream::read (20 samples, 0.02%)</title><rect x="46.6034%" y="549" width="0.0162%" height="15" fill="rgb(232,28,20)" fg:x="57489" fg:w="20"/><text x="46.8534%" y="559.50"></text></g><g><title>__lll_lock_wake_private (201 samples, 0.16%)</title><rect x="46.6836%" y="421" width="0.1629%" height="15" fill="rgb(218,35,51)" fg:x="57588" fg:w="201"/><text x="46.9336%" y="431.50"></text></g><g><title>[unknown] (201 samples, 0.16%)</title><rect x="46.6836%" y="405" width="0.1629%" height="15" fill="rgb(212,90,40)" fg:x="57588" fg:w="201"/><text x="46.9336%" y="415.50"></text></g><g><title>[unknown] (198 samples, 0.16%)</title><rect x="46.6861%" y="389" width="0.1605%" height="15" fill="rgb(220,172,12)" fg:x="57591" fg:w="198"/><text x="46.9361%" y="399.50"></text></g><g><title>[unknown] (192 samples, 0.16%)</title><rect x="46.6909%" y="373" width="0.1556%" height="15" fill="rgb(226,159,20)" fg:x="57597" fg:w="192"/><text x="46.9409%" y="383.50"></text></g><g><title>[unknown] (171 samples, 0.14%)</title><rect x="46.7080%" y="357" width="0.1386%" height="15" fill="rgb(234,205,16)" fg:x="57618" fg:w="171"/><text x="46.9580%" y="367.50"></text></g><g><title>[unknown] (166 samples, 0.13%)</title><rect x="46.7120%" y="341" width="0.1346%" height="15" fill="rgb(207,9,39)" fg:x="57623" fg:w="166"/><text x="46.9620%" y="351.50"></text></g><g><title>[unknown] (137 samples, 0.11%)</title><rect x="46.7355%" y="325" width="0.1111%" height="15" fill="rgb(249,143,15)" fg:x="57652" fg:w="137"/><text x="46.9855%" y="335.50"></text></g><g><title>[unknown] (133 samples, 0.11%)</title><rect x="46.7388%" y="309" width="0.1078%" height="15" fill="rgb(253,133,29)" fg:x="57656" fg:w="133"/><text x="46.9888%" y="319.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="46.8263%" y="293" width="0.0203%" height="15" fill="rgb(221,187,0)" fg:x="57764" fg:w="25"/><text x="47.0763%" y="303.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="46.8344%" y="277" width="0.0122%" height="15" fill="rgb(205,204,26)" fg:x="57774" fg:w="15"/><text x="47.0844%" y="287.50"></text></g><g><title>malloc_consolidate (20 samples, 0.02%)</title><rect x="46.9747%" y="405" width="0.0162%" height="15" fill="rgb(224,68,54)" fg:x="57947" fg:w="20"/><text x="47.2247%" y="415.50"></text></g><g><title>_int_malloc (178 samples, 0.14%)</title><rect x="46.8474%" y="421" width="0.1443%" height="15" fill="rgb(209,67,4)" fg:x="57790" fg:w="178"/><text x="47.0974%" y="431.50"></text></g><g><title>malloc (408 samples, 0.33%)</title><rect x="46.6617%" y="437" width="0.3307%" height="15" fill="rgb(228,229,18)" fg:x="57561" fg:w="408"/><text x="46.9117%" y="447.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (417 samples, 0.34%)</title><rect x="46.6585%" y="533" width="0.3380%" height="15" fill="rgb(231,89,13)" fg:x="57557" fg:w="417"/><text x="46.9085%" y="543.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (417 samples, 0.34%)</title><rect x="46.6585%" y="517" width="0.3380%" height="15" fill="rgb(210,182,18)" fg:x="57557" fg:w="417"/><text x="46.9085%" y="527.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (417 samples, 0.34%)</title><rect x="46.6585%" y="501" width="0.3380%" height="15" fill="rgb(240,105,2)" fg:x="57557" fg:w="417"/><text x="46.9085%" y="511.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (417 samples, 0.34%)</title><rect x="46.6585%" y="485" width="0.3380%" height="15" fill="rgb(207,170,50)" fg:x="57557" fg:w="417"/><text x="46.9085%" y="495.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (417 samples, 0.34%)</title><rect x="46.6585%" y="469" width="0.3380%" height="15" fill="rgb(232,133,24)" fg:x="57557" fg:w="417"/><text x="46.9085%" y="479.50"></text></g><g><title>operator new (415 samples, 0.34%)</title><rect x="46.6601%" y="453" width="0.3364%" height="15" fill="rgb(235,166,27)" fg:x="57559" fg:w="415"/><text x="46.9101%" y="463.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (484 samples, 0.39%)</title><rect x="46.6245%" y="549" width="0.3924%" height="15" fill="rgb(209,19,13)" fg:x="57515" fg:w="484"/><text x="46.8745%" y="559.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (18 samples, 0.01%)</title><rect x="47.0022%" y="533" width="0.0146%" height="15" fill="rgb(226,79,39)" fg:x="57981" fg:w="18"/><text x="47.2522%" y="543.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (18 samples, 0.01%)</title><rect x="47.0022%" y="517" width="0.0146%" height="15" fill="rgb(222,163,10)" fg:x="57981" fg:w="18"/><text x="47.2522%" y="527.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (18 samples, 0.01%)</title><rect x="47.0022%" y="501" width="0.0146%" height="15" fill="rgb(214,44,19)" fg:x="57981" fg:w="18"/><text x="47.2522%" y="511.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (18 samples, 0.01%)</title><rect x="47.0022%" y="485" width="0.0146%" height="15" fill="rgb(210,217,13)" fg:x="57981" fg:w="18"/><text x="47.2522%" y="495.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (18 samples, 0.01%)</title><rect x="47.0022%" y="469" width="0.0146%" height="15" fill="rgb(237,61,54)" fg:x="57981" fg:w="18"/><text x="47.2522%" y="479.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (18 samples, 0.01%)</title><rect x="47.0022%" y="453" width="0.0146%" height="15" fill="rgb(226,184,24)" fg:x="57981" fg:w="18"/><text x="47.2522%" y="463.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (17 samples, 0.01%)</title><rect x="47.0030%" y="437" width="0.0138%" height="15" fill="rgb(223,226,4)" fg:x="57982" fg:w="17"/><text x="47.2530%" y="447.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (17 samples, 0.01%)</title><rect x="47.0030%" y="421" width="0.0138%" height="15" fill="rgb(210,26,41)" fg:x="57982" fg:w="17"/><text x="47.2530%" y="431.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (21 samples, 0.02%)</title><rect x="47.0168%" y="549" width="0.0170%" height="15" fill="rgb(220,221,6)" fg:x="57999" fg:w="21"/><text x="47.2668%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (14 samples, 0.01%)</title><rect x="47.0338%" y="549" width="0.0113%" height="15" fill="rgb(225,89,49)" fg:x="58020" fg:w="14"/><text x="47.2838%" y="559.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (54 samples, 0.04%)</title><rect x="47.0500%" y="357" width="0.0438%" height="15" fill="rgb(218,70,45)" fg:x="58040" fg:w="54"/><text x="47.3000%" y="367.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (54 samples, 0.04%)</title><rect x="47.0500%" y="341" width="0.0438%" height="15" fill="rgb(238,166,21)" fg:x="58040" fg:w="54"/><text x="47.3000%" y="351.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (54 samples, 0.04%)</title><rect x="47.0500%" y="325" width="0.0438%" height="15" fill="rgb(224,141,44)" fg:x="58040" fg:w="54"/><text x="47.3000%" y="335.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.04%)</title><rect x="47.0500%" y="309" width="0.0438%" height="15" fill="rgb(230,12,49)" fg:x="58040" fg:w="54"/><text x="47.3000%" y="319.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (54 samples, 0.04%)</title><rect x="47.0500%" y="293" width="0.0438%" height="15" fill="rgb(212,174,12)" fg:x="58040" fg:w="54"/><text x="47.3000%" y="303.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (28 samples, 0.02%)</title><rect x="47.0711%" y="277" width="0.0227%" height="15" fill="rgb(246,67,9)" fg:x="58066" fg:w="28"/><text x="47.3211%" y="287.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (28 samples, 0.02%)</title><rect x="47.0711%" y="261" width="0.0227%" height="15" fill="rgb(239,35,23)" fg:x="58066" fg:w="28"/><text x="47.3211%" y="271.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="549" width="0.0503%" height="15" fill="rgb(211,167,0)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="559.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="533" width="0.0503%" height="15" fill="rgb(225,119,45)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="543.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="517" width="0.0503%" height="15" fill="rgb(210,162,6)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="527.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="501" width="0.0503%" height="15" fill="rgb(208,118,35)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="511.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="485" width="0.0503%" height="15" fill="rgb(239,4,53)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="495.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="469" width="0.0503%" height="15" fill="rgb(213,130,21)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="479.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="453" width="0.0503%" height="15" fill="rgb(235,148,0)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="463.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="437" width="0.0503%" height="15" fill="rgb(244,224,18)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="447.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="421" width="0.0503%" height="15" fill="rgb(211,214,4)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="431.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="405" width="0.0503%" height="15" fill="rgb(206,119,25)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="415.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="389" width="0.0503%" height="15" fill="rgb(243,93,47)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="399.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (62 samples, 0.05%)</title><rect x="47.0452%" y="373" width="0.0503%" height="15" fill="rgb(224,194,6)" fg:x="58034" fg:w="62"/><text x="47.2952%" y="383.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (586 samples, 0.48%)</title><rect x="46.6245%" y="565" width="0.4750%" height="15" fill="rgb(243,229,6)" fg:x="57515" fg:w="586"/><text x="46.8745%" y="575.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (633 samples, 0.51%)</title><rect x="46.5937%" y="597" width="0.5131%" height="15" fill="rgb(207,23,50)" fg:x="57477" fg:w="633"/><text x="46.8437%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (633 samples, 0.51%)</title><rect x="46.5937%" y="581" width="0.5131%" height="15" fill="rgb(253,192,32)" fg:x="57477" fg:w="633"/><text x="46.8437%" y="591.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (917 samples, 0.74%)</title><rect x="46.3691%" y="677" width="0.7434%" height="15" fill="rgb(213,21,6)" fg:x="57200" fg:w="917"/><text x="46.6191%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (917 samples, 0.74%)</title><rect x="46.3691%" y="661" width="0.7434%" height="15" fill="rgb(243,151,13)" fg:x="57200" fg:w="917"/><text x="46.6191%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (917 samples, 0.74%)</title><rect x="46.3691%" y="645" width="0.7434%" height="15" fill="rgb(233,165,41)" fg:x="57200" fg:w="917"/><text x="46.6191%" y="655.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (917 samples, 0.74%)</title><rect x="46.3691%" y="629" width="0.7434%" height="15" fill="rgb(246,176,45)" fg:x="57200" fg:w="917"/><text x="46.6191%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (917 samples, 0.74%)</title><rect x="46.3691%" y="613" width="0.7434%" height="15" fill="rgb(217,170,52)" fg:x="57200" fg:w="917"/><text x="46.6191%" y="623.50"></text></g><g><title>ShiftMessageB (13 samples, 0.01%)</title><rect x="47.1368%" y="597" width="0.0105%" height="15" fill="rgb(214,203,54)" fg:x="58147" fg:w="13"/><text x="47.3868%" y="607.50"></text></g><g><title>sha256_x86_shani::Transform (32 samples, 0.03%)</title><rect x="47.1271%" y="613" width="0.0259%" height="15" fill="rgb(248,215,49)" fg:x="58135" fg:w="32"/><text x="47.3771%" y="623.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2,620 samples, 2.12%)</title><rect x="45.0307%" y="725" width="2.1239%" height="15" fill="rgb(208,46,10)" fg:x="55549" fg:w="2620"/><text x="45.2807%" y="735.50">C..</text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2,620 samples, 2.12%)</title><rect x="45.0307%" y="709" width="2.1239%" height="15" fill="rgb(254,5,31)" fg:x="55549" fg:w="2620"/><text x="45.2807%" y="719.50">v..</text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (2,620 samples, 2.12%)</title><rect x="45.0307%" y="693" width="2.1239%" height="15" fill="rgb(222,104,33)" fg:x="55549" fg:w="2620"/><text x="45.2807%" y="703.50">v..</text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (45 samples, 0.04%)</title><rect x="47.1181%" y="677" width="0.0365%" height="15" fill="rgb(248,49,16)" fg:x="58124" fg:w="45"/><text x="47.3681%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (45 samples, 0.04%)</title><rect x="47.1181%" y="661" width="0.0365%" height="15" fill="rgb(232,198,41)" fg:x="58124" fg:w="45"/><text x="47.3681%" y="671.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (45 samples, 0.04%)</title><rect x="47.1181%" y="645" width="0.0365%" height="15" fill="rgb(214,125,3)" fg:x="58124" fg:w="45"/><text x="47.3681%" y="655.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (45 samples, 0.04%)</title><rect x="47.1181%" y="629" width="0.0365%" height="15" fill="rgb(229,220,28)" fg:x="58124" fg:w="45"/><text x="47.3681%" y="639.50"></text></g><g><title>CSHA256::Write (35 samples, 0.03%)</title><rect x="47.1668%" y="613" width="0.0284%" height="15" fill="rgb(222,64,37)" fg:x="58184" fg:w="35"/><text x="47.4168%" y="623.50"></text></g><g><title>ShiftMessageB (15 samples, 0.01%)</title><rect x="47.2195%" y="597" width="0.0122%" height="15" fill="rgb(249,184,13)" fg:x="58249" fg:w="15"/><text x="47.4695%" y="607.50"></text></g><g><title>sha256_x86_shani::Transform (25 samples, 0.02%)</title><rect x="47.2130%" y="613" width="0.0203%" height="15" fill="rgb(252,176,6)" fg:x="58241" fg:w="25"/><text x="47.4630%" y="623.50"></text></g><g><title>CSHA256::Write (29 samples, 0.02%)</title><rect x="47.2511%" y="341" width="0.0235%" height="15" fill="rgb(228,153,7)" fg:x="58288" fg:w="29"/><text x="47.5011%" y="351.50"></text></g><g><title>sha256_x86_shani::Transform (26 samples, 0.02%)</title><rect x="47.2762%" y="341" width="0.0211%" height="15" fill="rgb(242,193,5)" fg:x="58319" fg:w="26"/><text x="47.5262%" y="351.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (64 samples, 0.05%)</title><rect x="47.2503%" y="405" width="0.0519%" height="15" fill="rgb(232,140,9)" fg:x="58287" fg:w="64"/><text x="47.5003%" y="415.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (64 samples, 0.05%)</title><rect x="47.2503%" y="389" width="0.0519%" height="15" fill="rgb(213,222,16)" fg:x="58287" fg:w="64"/><text x="47.5003%" y="399.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (64 samples, 0.05%)</title><rect x="47.2503%" y="373" width="0.0519%" height="15" fill="rgb(222,75,50)" fg:x="58287" fg:w="64"/><text x="47.5003%" y="383.50"></text></g><g><title>HashWriter::write (64 samples, 0.05%)</title><rect x="47.2503%" y="357" width="0.0519%" height="15" fill="rgb(205,180,2)" fg:x="58287" fg:w="64"/><text x="47.5003%" y="367.50"></text></g><g><title>CSHA256::Write (15 samples, 0.01%)</title><rect x="47.3046%" y="245" width="0.0122%" height="15" fill="rgb(216,34,7)" fg:x="58354" fg:w="15"/><text x="47.5546%" y="255.50"></text></g><g><title>sha256_x86_shani::Transform (18 samples, 0.01%)</title><rect x="47.3168%" y="245" width="0.0146%" height="15" fill="rgb(253,16,32)" fg:x="58369" fg:w="18"/><text x="47.5668%" y="255.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.04%)</title><rect x="47.3022%" y="309" width="0.0381%" height="15" fill="rgb(208,97,28)" fg:x="58351" fg:w="47"/><text x="47.5522%" y="319.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.04%)</title><rect x="47.3022%" y="293" width="0.0381%" height="15" fill="rgb(225,92,11)" fg:x="58351" fg:w="47"/><text x="47.5522%" y="303.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (47 samples, 0.04%)</title><rect x="47.3022%" y="277" width="0.0381%" height="15" fill="rgb(243,38,12)" fg:x="58351" fg:w="47"/><text x="47.5522%" y="287.50"></text></g><g><title>HashWriter::write (47 samples, 0.04%)</title><rect x="47.3022%" y="261" width="0.0381%" height="15" fill="rgb(208,139,16)" fg:x="58351" fg:w="47"/><text x="47.5522%" y="271.50"></text></g><g><title>CSHA256::Write (21 samples, 0.02%)</title><rect x="47.3500%" y="181" width="0.0170%" height="15" fill="rgb(227,24,9)" fg:x="58410" fg:w="21"/><text x="47.6000%" y="191.50"></text></g><g><title>CSHA256::Write (36 samples, 0.03%)</title><rect x="47.3484%" y="197" width="0.0292%" height="15" fill="rgb(206,62,11)" fg:x="58408" fg:w="36"/><text x="47.5984%" y="207.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (118 samples, 0.10%)</title><rect x="47.3022%" y="405" width="0.0957%" height="15" fill="rgb(228,134,27)" fg:x="58351" fg:w="118"/><text x="47.5522%" y="415.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (118 samples, 0.10%)</title><rect x="47.3022%" y="389" width="0.0957%" height="15" fill="rgb(205,55,33)" fg:x="58351" fg:w="118"/><text x="47.5522%" y="399.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (118 samples, 0.10%)</title><rect x="47.3022%" y="373" width="0.0957%" height="15" fill="rgb(243,75,43)" fg:x="58351" fg:w="118"/><text x="47.5522%" y="383.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (118 samples, 0.10%)</title><rect x="47.3022%" y="357" width="0.0957%" height="15" fill="rgb(223,27,42)" fg:x="58351" fg:w="118"/><text x="47.5522%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (118 samples, 0.10%)</title><rect x="47.3022%" y="341" width="0.0957%" height="15" fill="rgb(232,189,33)" fg:x="58351" fg:w="118"/><text x="47.5522%" y="351.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (118 samples, 0.10%)</title><rect x="47.3022%" y="325" width="0.0957%" height="15" fill="rgb(210,9,39)" fg:x="58351" fg:w="118"/><text x="47.5522%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (71 samples, 0.06%)</title><rect x="47.3403%" y="309" width="0.0576%" height="15" fill="rgb(242,85,26)" fg:x="58398" fg:w="71"/><text x="47.5903%" y="319.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (71 samples, 0.06%)</title><rect x="47.3403%" y="293" width="0.0576%" height="15" fill="rgb(248,44,4)" fg:x="58398" fg:w="71"/><text x="47.5903%" y="303.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (71 samples, 0.06%)</title><rect x="47.3403%" y="277" width="0.0576%" height="15" fill="rgb(250,96,46)" fg:x="58398" fg:w="71"/><text x="47.5903%" y="287.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (71 samples, 0.06%)</title><rect x="47.3403%" y="261" width="0.0576%" height="15" fill="rgb(229,116,26)" fg:x="58398" fg:w="71"/><text x="47.5903%" y="271.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (71 samples, 0.06%)</title><rect x="47.3403%" y="245" width="0.0576%" height="15" fill="rgb(246,94,34)" fg:x="58398" fg:w="71"/><text x="47.5903%" y="255.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (71 samples, 0.06%)</title><rect x="47.3403%" y="229" width="0.0576%" height="15" fill="rgb(251,73,21)" fg:x="58398" fg:w="71"/><text x="47.5903%" y="239.50"></text></g><g><title>HashWriter::write (71 samples, 0.06%)</title><rect x="47.3403%" y="213" width="0.0576%" height="15" fill="rgb(254,121,25)" fg:x="58398" fg:w="71"/><text x="47.5903%" y="223.50"></text></g><g><title>CSHA256::Write (21 samples, 0.02%)</title><rect x="47.4075%" y="245" width="0.0170%" height="15" fill="rgb(215,161,49)" fg:x="58481" fg:w="21"/><text x="47.6575%" y="255.50"></text></g><g><title>CSHA256::Write (45 samples, 0.04%)</title><rect x="47.4027%" y="261" width="0.0365%" height="15" fill="rgb(221,43,13)" fg:x="58475" fg:w="45"/><text x="47.6527%" y="271.50"></text></g><g><title>sha256_x86_shani::Transform (13 samples, 0.01%)</title><rect x="47.4392%" y="261" width="0.0105%" height="15" fill="rgb(249,5,37)" fg:x="58520" fg:w="13"/><text x="47.6892%" y="271.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (59 samples, 0.05%)</title><rect x="47.4027%" y="293" width="0.0478%" height="15" fill="rgb(226,25,44)" fg:x="58475" fg:w="59"/><text x="47.6527%" y="303.50"></text></g><g><title>HashWriter::write (59 samples, 0.05%)</title><rect x="47.4027%" y="277" width="0.0478%" height="15" fill="rgb(238,189,16)" fg:x="58475" fg:w="59"/><text x="47.6527%" y="287.50"></text></g><g><title>sha256_x86_shani::Transform (14 samples, 0.01%)</title><rect x="47.4529%" y="293" width="0.0113%" height="15" fill="rgb(251,186,8)" fg:x="58537" fg:w="14"/><text x="47.7029%" y="303.50"></text></g><g><title>CSHA256::Write (22 samples, 0.02%)</title><rect x="47.4700%" y="229" width="0.0178%" height="15" fill="rgb(254,34,31)" fg:x="58558" fg:w="22"/><text x="47.7200%" y="239.50"></text></g><g><title>HashWriter::write (49 samples, 0.04%)</title><rect x="47.4692%" y="245" width="0.0397%" height="15" fill="rgb(225,215,27)" fg:x="58557" fg:w="49"/><text x="47.7192%" y="255.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (320 samples, 0.26%)</title><rect x="47.2503%" y="517" width="0.2594%" height="15" fill="rgb(221,192,48)" fg:x="58287" fg:w="320"/><text x="47.5003%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (320 samples, 0.26%)</title><rect x="47.2503%" y="501" width="0.2594%" height="15" fill="rgb(219,137,20)" fg:x="58287" fg:w="320"/><text x="47.5003%" y="511.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (320 samples, 0.26%)</title><rect x="47.2503%" y="485" width="0.2594%" height="15" fill="rgb(219,84,11)" fg:x="58287" fg:w="320"/><text x="47.5003%" y="495.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (320 samples, 0.26%)</title><rect x="47.2503%" y="469" width="0.2594%" height="15" fill="rgb(224,10,23)" fg:x="58287" fg:w="320"/><text x="47.5003%" y="479.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (320 samples, 0.26%)</title><rect x="47.2503%" y="453" width="0.2594%" height="15" fill="rgb(248,22,39)" fg:x="58287" fg:w="320"/><text x="47.5003%" y="463.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (320 samples, 0.26%)</title><rect x="47.2503%" y="437" width="0.2594%" height="15" fill="rgb(212,154,20)" fg:x="58287" fg:w="320"/><text x="47.5003%" y="447.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (320 samples, 0.26%)</title><rect x="47.2503%" y="421" width="0.2594%" height="15" fill="rgb(236,199,50)" fg:x="58287" fg:w="320"/><text x="47.5003%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (138 samples, 0.11%)</title><rect x="47.3978%" y="405" width="0.1119%" height="15" fill="rgb(211,9,17)" fg:x="58469" fg:w="138"/><text x="47.6478%" y="415.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (138 samples, 0.11%)</title><rect x="47.3978%" y="389" width="0.1119%" height="15" fill="rgb(243,216,36)" fg:x="58469" fg:w="138"/><text x="47.6478%" y="399.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (138 samples, 0.11%)</title><rect x="47.3978%" y="373" width="0.1119%" height="15" fill="rgb(250,2,10)" fg:x="58469" fg:w="138"/><text x="47.6478%" y="383.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (138 samples, 0.11%)</title><rect x="47.3978%" y="357" width="0.1119%" height="15" fill="rgb(226,50,48)" fg:x="58469" fg:w="138"/><text x="47.6478%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (138 samples, 0.11%)</title><rect x="47.3978%" y="341" width="0.1119%" height="15" fill="rgb(243,81,16)" fg:x="58469" fg:w="138"/><text x="47.6478%" y="351.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (138 samples, 0.11%)</title><rect x="47.3978%" y="325" width="0.1119%" height="15" fill="rgb(250,14,2)" fg:x="58469" fg:w="138"/><text x="47.6478%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (138 samples, 0.11%)</title><rect x="47.3978%" y="309" width="0.1119%" height="15" fill="rgb(233,135,29)" fg:x="58469" fg:w="138"/><text x="47.6478%" y="319.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (53 samples, 0.04%)</title><rect x="47.4667%" y="293" width="0.0430%" height="15" fill="rgb(224,64,43)" fg:x="58554" fg:w="53"/><text x="47.7167%" y="303.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.04%)</title><rect x="47.4692%" y="277" width="0.0405%" height="15" fill="rgb(238,84,13)" fg:x="58557" fg:w="50"/><text x="47.7192%" y="287.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (50 samples, 0.04%)</title><rect x="47.4692%" y="261" width="0.0405%" height="15" fill="rgb(253,48,26)" fg:x="58557" fg:w="50"/><text x="47.7192%" y="271.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (345 samples, 0.28%)</title><rect x="47.2341%" y="597" width="0.2797%" height="15" fill="rgb(205,223,31)" fg:x="58267" fg:w="345"/><text x="47.4841%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (345 samples, 0.28%)</title><rect x="47.2341%" y="581" width="0.2797%" height="15" fill="rgb(221,41,32)" fg:x="58267" fg:w="345"/><text x="47.4841%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (345 samples, 0.28%)</title><rect x="47.2341%" y="565" width="0.2797%" height="15" fill="rgb(213,158,31)" fg:x="58267" fg:w="345"/><text x="47.4841%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (345 samples, 0.28%)</title><rect x="47.2341%" y="549" width="0.2797%" height="15" fill="rgb(245,126,43)" fg:x="58267" fg:w="345"/><text x="47.4841%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (345 samples, 0.28%)</title><rect x="47.2341%" y="533" width="0.2797%" height="15" fill="rgb(227,7,22)" fg:x="58267" fg:w="345"/><text x="47.4841%" y="543.50"></text></g><g><title>CSHA256::Write (14 samples, 0.01%)</title><rect x="47.5308%" y="325" width="0.0113%" height="15" fill="rgb(252,90,44)" fg:x="58633" fg:w="14"/><text x="47.7808%" y="335.50"></text></g><g><title>CSHA256::Write (37 samples, 0.03%)</title><rect x="47.5227%" y="341" width="0.0300%" height="15" fill="rgb(253,91,0)" fg:x="58623" fg:w="37"/><text x="47.7727%" y="351.50"></text></g><g><title>sha256_x86_shani::Transform (19 samples, 0.02%)</title><rect x="47.5543%" y="341" width="0.0154%" height="15" fill="rgb(252,175,49)" fg:x="58662" fg:w="19"/><text x="47.8043%" y="351.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (72 samples, 0.06%)</title><rect x="47.5218%" y="405" width="0.0584%" height="15" fill="rgb(246,150,1)" fg:x="58622" fg:w="72"/><text x="47.7718%" y="415.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (71 samples, 0.06%)</title><rect x="47.5227%" y="389" width="0.0576%" height="15" fill="rgb(241,192,25)" fg:x="58623" fg:w="71"/><text x="47.7727%" y="399.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (71 samples, 0.06%)</title><rect x="47.5227%" y="373" width="0.0576%" height="15" fill="rgb(239,187,11)" fg:x="58623" fg:w="71"/><text x="47.7727%" y="383.50"></text></g><g><title>HashWriter::write (71 samples, 0.06%)</title><rect x="47.5227%" y="357" width="0.0576%" height="15" fill="rgb(218,202,51)" fg:x="58623" fg:w="71"/><text x="47.7727%" y="367.50"></text></g><g><title>CSHA256::Write (13 samples, 0.01%)</title><rect x="47.5802%" y="293" width="0.0105%" height="15" fill="rgb(225,176,8)" fg:x="58694" fg:w="13"/><text x="47.8302%" y="303.50"></text></g><g><title>CSHA256::Write (49 samples, 0.04%)</title><rect x="47.6110%" y="245" width="0.0397%" height="15" fill="rgb(219,122,41)" fg:x="58732" fg:w="49"/><text x="47.8610%" y="255.50"></text></g><g><title>CSHA256::Write (107 samples, 0.09%)</title><rect x="47.5908%" y="261" width="0.0867%" height="15" fill="rgb(248,140,20)" fg:x="58707" fg:w="107"/><text x="47.8408%" y="271.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.01%)</title><rect x="47.6637%" y="245" width="0.0138%" height="15" fill="rgb(245,41,37)" fg:x="58797" fg:w="17"/><text x="47.9137%" y="255.50"></text></g><g><title>_mm_add_epi32 (17 samples, 0.01%)</title><rect x="47.6856%" y="229" width="0.0138%" height="15" fill="rgb(235,82,39)" fg:x="58824" fg:w="17"/><text x="47.9356%" y="239.50"></text></g><g><title>QuadRound (35 samples, 0.03%)</title><rect x="47.6856%" y="245" width="0.0284%" height="15" fill="rgb(230,108,42)" fg:x="58824" fg:w="35"/><text x="47.9356%" y="255.50"></text></g><g><title>ShiftMessageA (19 samples, 0.02%)</title><rect x="47.7140%" y="229" width="0.0154%" height="15" fill="rgb(215,150,50)" fg:x="58859" fg:w="19"/><text x="47.9640%" y="239.50"></text></g><g><title>_mm_sha256msg1_epu32 (19 samples, 0.02%)</title><rect x="47.7140%" y="213" width="0.0154%" height="15" fill="rgb(233,212,5)" fg:x="58859" fg:w="19"/><text x="47.9640%" y="223.50"></text></g><g><title>ShiftMessageB (58 samples, 0.05%)</title><rect x="47.7140%" y="245" width="0.0470%" height="15" fill="rgb(245,80,22)" fg:x="58859" fg:w="58"/><text x="47.9640%" y="255.50"></text></g><g><title>ShiftMessageC (39 samples, 0.03%)</title><rect x="47.7294%" y="229" width="0.0316%" height="15" fill="rgb(238,129,16)" fg:x="58878" fg:w="39"/><text x="47.9794%" y="239.50"></text></g><g><title>_mm_sha256msg2_epu32 (22 samples, 0.02%)</title><rect x="47.7432%" y="213" width="0.0178%" height="15" fill="rgb(240,19,0)" fg:x="58895" fg:w="22"/><text x="47.9932%" y="223.50"></text></g><g><title>sha256_x86_shani::Transform (112 samples, 0.09%)</title><rect x="47.6783%" y="261" width="0.0908%" height="15" fill="rgb(232,42,35)" fg:x="58815" fg:w="112"/><text x="47.9283%" y="271.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (234 samples, 0.19%)</title><rect x="47.5908%" y="293" width="0.1897%" height="15" fill="rgb(223,130,24)" fg:x="58707" fg:w="234"/><text x="47.8408%" y="303.50"></text></g><g><title>HashWriter::write (234 samples, 0.19%)</title><rect x="47.5908%" y="277" width="0.1897%" height="15" fill="rgb(237,16,22)" fg:x="58707" fg:w="234"/><text x="47.8408%" y="287.50"></text></g><g><title>CSHA256::Write (24 samples, 0.02%)</title><rect x="47.7886%" y="229" width="0.0195%" height="15" fill="rgb(248,192,20)" fg:x="58951" fg:w="24"/><text x="48.0386%" y="239.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (361 samples, 0.29%)</title><rect x="47.5218%" y="517" width="0.2926%" height="15" fill="rgb(233,167,2)" fg:x="58622" fg:w="361"/><text x="47.7718%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (361 samples, 0.29%)</title><rect x="47.5218%" y="501" width="0.2926%" height="15" fill="rgb(252,71,44)" fg:x="58622" fg:w="361"/><text x="47.7718%" y="511.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (361 samples, 0.29%)</title><rect x="47.5218%" y="485" width="0.2926%" height="15" fill="rgb(238,37,47)" fg:x="58622" fg:w="361"/><text x="47.7718%" y="495.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (361 samples, 0.29%)</title><rect x="47.5218%" y="469" width="0.2926%" height="15" fill="rgb(214,202,54)" fg:x="58622" fg:w="361"/><text x="47.7718%" y="479.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (361 samples, 0.29%)</title><rect x="47.5218%" y="453" width="0.2926%" height="15" fill="rgb(254,165,40)" fg:x="58622" fg:w="361"/><text x="47.7718%" y="463.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (361 samples, 0.29%)</title><rect x="47.5218%" y="437" width="0.2926%" height="15" fill="rgb(246,173,38)" fg:x="58622" fg:w="361"/><text x="47.7718%" y="447.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (361 samples, 0.29%)</title><rect x="47.5218%" y="421" width="0.2926%" height="15" fill="rgb(215,3,27)" fg:x="58622" fg:w="361"/><text x="47.7718%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (289 samples, 0.23%)</title><rect x="47.5802%" y="405" width="0.2343%" height="15" fill="rgb(239,169,51)" fg:x="58694" fg:w="289"/><text x="47.8302%" y="415.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (289 samples, 0.23%)</title><rect x="47.5802%" y="389" width="0.2343%" height="15" fill="rgb(212,5,25)" fg:x="58694" fg:w="289"/><text x="47.8302%" y="399.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (289 samples, 0.23%)</title><rect x="47.5802%" y="373" width="0.2343%" height="15" fill="rgb(243,45,17)" fg:x="58694" fg:w="289"/><text x="47.8302%" y="383.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (289 samples, 0.23%)</title><rect x="47.5802%" y="357" width="0.2343%" height="15" fill="rgb(242,97,9)" fg:x="58694" fg:w="289"/><text x="47.8302%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (289 samples, 0.23%)</title><rect x="47.5802%" y="341" width="0.2343%" height="15" fill="rgb(228,71,31)" fg:x="58694" fg:w="289"/><text x="47.8302%" y="351.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (289 samples, 0.23%)</title><rect x="47.5802%" y="325" width="0.2343%" height="15" fill="rgb(252,184,16)" fg:x="58694" fg:w="289"/><text x="47.8302%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (289 samples, 0.23%)</title><rect x="47.5802%" y="309" width="0.2343%" height="15" fill="rgb(236,169,46)" fg:x="58694" fg:w="289"/><text x="47.8302%" y="319.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (35 samples, 0.03%)</title><rect x="47.7861%" y="293" width="0.0284%" height="15" fill="rgb(207,17,47)" fg:x="58948" fg:w="35"/><text x="48.0361%" y="303.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.03%)</title><rect x="47.7877%" y="277" width="0.0268%" height="15" fill="rgb(206,201,28)" fg:x="58950" fg:w="33"/><text x="48.0377%" y="287.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (32 samples, 0.03%)</title><rect x="47.7886%" y="261" width="0.0259%" height="15" fill="rgb(224,184,23)" fg:x="58951" fg:w="32"/><text x="48.0386%" y="271.50"></text></g><g><title>HashWriter::write (32 samples, 0.03%)</title><rect x="47.7886%" y="245" width="0.0259%" height="15" fill="rgb(208,139,48)" fg:x="58951" fg:w="32"/><text x="48.0386%" y="255.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (376 samples, 0.30%)</title><rect x="47.5137%" y="597" width="0.3048%" height="15" fill="rgb(208,130,10)" fg:x="58612" fg:w="376"/><text x="47.7637%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (376 samples, 0.30%)</title><rect x="47.5137%" y="581" width="0.3048%" height="15" fill="rgb(211,213,45)" fg:x="58612" fg:w="376"/><text x="47.7637%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (376 samples, 0.30%)</title><rect x="47.5137%" y="565" width="0.3048%" height="15" fill="rgb(235,100,30)" fg:x="58612" fg:w="376"/><text x="47.7637%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (376 samples, 0.30%)</title><rect x="47.5137%" y="549" width="0.3048%" height="15" fill="rgb(206,144,31)" fg:x="58612" fg:w="376"/><text x="47.7637%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (376 samples, 0.30%)</title><rect x="47.5137%" y="533" width="0.3048%" height="15" fill="rgb(224,200,26)" fg:x="58612" fg:w="376"/><text x="47.7637%" y="543.50"></text></g><g><title>CTransaction::CTransaction (21 samples, 0.02%)</title><rect x="47.8283%" y="517" width="0.0170%" height="15" fill="rgb(247,104,53)" fg:x="59000" fg:w="21"/><text x="48.0783%" y="527.50"></text></g><g><title>sha256_x86_shani::Transform (26 samples, 0.02%)</title><rect x="47.8550%" y="517" width="0.0211%" height="15" fill="rgb(220,14,17)" fg:x="59033" fg:w="26"/><text x="48.1050%" y="527.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (795 samples, 0.64%)</title><rect x="47.2333%" y="613" width="0.6445%" height="15" fill="rgb(230,140,40)" fg:x="58266" fg:w="795"/><text x="47.4833%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (73 samples, 0.06%)</title><rect x="47.8185%" y="597" width="0.0592%" height="15" fill="rgb(229,2,41)" fg:x="58988" fg:w="73"/><text x="48.0685%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (73 samples, 0.06%)</title><rect x="47.8185%" y="581" width="0.0592%" height="15" fill="rgb(232,89,16)" fg:x="58988" fg:w="73"/><text x="48.0685%" y="591.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (73 samples, 0.06%)</title><rect x="47.8185%" y="565" width="0.0592%" height="15" fill="rgb(247,59,52)" fg:x="58988" fg:w="73"/><text x="48.0685%" y="575.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (73 samples, 0.06%)</title><rect x="47.8185%" y="549" width="0.0592%" height="15" fill="rgb(226,110,21)" fg:x="58988" fg:w="73"/><text x="48.0685%" y="559.50"></text></g><g><title>HashWriter::write (73 samples, 0.06%)</title><rect x="47.8185%" y="533" width="0.0592%" height="15" fill="rgb(224,176,43)" fg:x="58988" fg:w="73"/><text x="48.0685%" y="543.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (887 samples, 0.72%)</title><rect x="47.1668%" y="693" width="0.7190%" height="15" fill="rgb(221,73,6)" fg:x="58184" fg:w="887"/><text x="47.4168%" y="703.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (887 samples, 0.72%)</title><rect x="47.1668%" y="677" width="0.7190%" height="15" fill="rgb(232,78,19)" fg:x="58184" fg:w="887"/><text x="47.4168%" y="687.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (887 samples, 0.72%)</title><rect x="47.1668%" y="661" width="0.7190%" height="15" fill="rgb(233,112,48)" fg:x="58184" fg:w="887"/><text x="47.4168%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (887 samples, 0.72%)</title><rect x="47.1668%" y="645" width="0.7190%" height="15" fill="rgb(243,131,47)" fg:x="58184" fg:w="887"/><text x="47.4168%" y="655.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (887 samples, 0.72%)</title><rect x="47.1668%" y="629" width="0.7190%" height="15" fill="rgb(226,51,1)" fg:x="58184" fg:w="887"/><text x="47.4168%" y="639.50"></text></g><g><title>CSHA256::Finalize (29 samples, 0.02%)</title><rect x="47.9183%" y="645" width="0.0235%" height="15" fill="rgb(247,58,7)" fg:x="59111" fg:w="29"/><text x="48.1683%" y="655.50"></text></g><g><title>CSHA256::Write (89 samples, 0.07%)</title><rect x="47.9474%" y="645" width="0.0721%" height="15" fill="rgb(209,7,32)" fg:x="59147" fg:w="89"/><text x="48.1974%" y="655.50"></text></g><g><title>ShiftMessageB (26 samples, 0.02%)</title><rect x="48.0528%" y="629" width="0.0211%" height="15" fill="rgb(209,39,41)" fg:x="59277" fg:w="26"/><text x="48.3028%" y="639.50"></text></g><g><title>ShiftMessageC (15 samples, 0.01%)</title><rect x="48.0617%" y="613" width="0.0122%" height="15" fill="rgb(226,182,46)" fg:x="59288" fg:w="15"/><text x="48.3117%" y="623.50"></text></g><g><title>sha256_x86_shani::Transform (58 samples, 0.05%)</title><rect x="48.0350%" y="645" width="0.0470%" height="15" fill="rgb(230,219,10)" fg:x="59255" fg:w="58"/><text x="48.2850%" y="655.50"></text></g><g><title>CSHA256::Write (256 samples, 0.21%)</title><rect x="47.8907%" y="661" width="0.2075%" height="15" fill="rgb(227,175,30)" fg:x="59077" fg:w="256"/><text x="48.1407%" y="671.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (20 samples, 0.02%)</title><rect x="48.0820%" y="645" width="0.0162%" height="15" fill="rgb(217,2,50)" fg:x="59313" fg:w="20"/><text x="48.3320%" y="655.50"></text></g><g><title>_mm_add_epi32 (14 samples, 0.01%)</title><rect x="48.1055%" y="629" width="0.0113%" height="15" fill="rgb(229,160,0)" fg:x="59342" fg:w="14"/><text x="48.3555%" y="639.50"></text></g><g><title>QuadRound (25 samples, 0.02%)</title><rect x="48.1055%" y="645" width="0.0203%" height="15" fill="rgb(207,78,37)" fg:x="59342" fg:w="25"/><text x="48.3555%" y="655.50"></text></g><g><title>ShiftMessageA (21 samples, 0.02%)</title><rect x="48.1274%" y="629" width="0.0170%" height="15" fill="rgb(225,57,0)" fg:x="59369" fg:w="21"/><text x="48.3774%" y="639.50"></text></g><g><title>_mm_sha256msg1_epu32 (21 samples, 0.02%)</title><rect x="48.1274%" y="613" width="0.0170%" height="15" fill="rgb(232,154,2)" fg:x="59369" fg:w="21"/><text x="48.3774%" y="623.50"></text></g><g><title>ShiftMessageB (44 samples, 0.04%)</title><rect x="48.1274%" y="645" width="0.0357%" height="15" fill="rgb(241,212,25)" fg:x="59369" fg:w="44"/><text x="48.3774%" y="655.50"></text></g><g><title>ShiftMessageC (23 samples, 0.02%)</title><rect x="48.1444%" y="629" width="0.0186%" height="15" fill="rgb(226,69,20)" fg:x="59390" fg:w="23"/><text x="48.3944%" y="639.50"></text></g><g><title>sha256_x86_shani::Transform (87 samples, 0.07%)</title><rect x="48.0982%" y="661" width="0.0705%" height="15" fill="rgb(247,184,54)" fg:x="59333" fg:w="87"/><text x="48.3482%" y="671.50"></text></g><g><title>CSHA256::Finalize (361 samples, 0.29%)</title><rect x="47.8858%" y="677" width="0.2926%" height="15" fill="rgb(210,145,0)" fg:x="59071" fg:w="361"/><text x="48.1358%" y="687.50"></text></g><g><title>CSHA256::Write (13 samples, 0.01%)</title><rect x="48.1785%" y="677" width="0.0105%" height="15" fill="rgb(253,82,12)" fg:x="59432" fg:w="13"/><text x="48.4285%" y="687.50"></text></g><g><title>HashWriter::GetHash (383 samples, 0.31%)</title><rect x="47.8858%" y="693" width="0.3105%" height="15" fill="rgb(245,42,11)" fg:x="59071" fg:w="383"/><text x="48.1358%" y="703.50"></text></g><g><title>CTransaction::ComputeHash (1,271 samples, 1.03%)</title><rect x="47.1668%" y="709" width="1.0303%" height="15" fill="rgb(219,147,32)" fg:x="58184" fg:w="1271"/><text x="47.4168%" y="719.50"></text></g><g><title>CSHA256::Write (50 samples, 0.04%)</title><rect x="48.1987%" y="597" width="0.0405%" height="15" fill="rgb(246,12,7)" fg:x="59457" fg:w="50"/><text x="48.4487%" y="607.50"></text></g><g><title>QuadRound (14 samples, 0.01%)</title><rect x="48.2441%" y="581" width="0.0113%" height="15" fill="rgb(243,50,9)" fg:x="59513" fg:w="14"/><text x="48.4941%" y="591.50"></text></g><g><title>ShiftMessageB (31 samples, 0.03%)</title><rect x="48.2555%" y="581" width="0.0251%" height="15" fill="rgb(219,149,6)" fg:x="59527" fg:w="31"/><text x="48.5055%" y="591.50"></text></g><g><title>ShiftMessageC (25 samples, 0.02%)</title><rect x="48.2603%" y="565" width="0.0203%" height="15" fill="rgb(241,51,42)" fg:x="59533" fg:w="25"/><text x="48.5103%" y="575.50"></text></g><g><title>sha256_x86_shani::Transform (55 samples, 0.04%)</title><rect x="48.2417%" y="597" width="0.0446%" height="15" fill="rgb(226,128,27)" fg:x="59510" fg:w="55"/><text x="48.4917%" y="607.50"></text></g><g><title>CSHA256::Write (22 samples, 0.02%)</title><rect x="48.3009%" y="325" width="0.0178%" height="15" fill="rgb(244,144,4)" fg:x="59583" fg:w="22"/><text x="48.5509%" y="335.50"></text></g><g><title>ShiftMessageB (16 samples, 0.01%)</title><rect x="48.3252%" y="309" width="0.0130%" height="15" fill="rgb(221,4,13)" fg:x="59613" fg:w="16"/><text x="48.5752%" y="319.50"></text></g><g><title>sha256_x86_shani::Transform (31 samples, 0.03%)</title><rect x="48.3187%" y="325" width="0.0251%" height="15" fill="rgb(208,170,28)" fg:x="59605" fg:w="31"/><text x="48.5687%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (60 samples, 0.05%)</title><rect x="48.3009%" y="389" width="0.0486%" height="15" fill="rgb(226,131,13)" fg:x="59583" fg:w="60"/><text x="48.5509%" y="399.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (60 samples, 0.05%)</title><rect x="48.3009%" y="373" width="0.0486%" height="15" fill="rgb(215,72,41)" fg:x="59583" fg:w="60"/><text x="48.5509%" y="383.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (60 samples, 0.05%)</title><rect x="48.3009%" y="357" width="0.0486%" height="15" fill="rgb(243,108,20)" fg:x="59583" fg:w="60"/><text x="48.5509%" y="367.50"></text></g><g><title>HashWriter::write (60 samples, 0.05%)</title><rect x="48.3009%" y="341" width="0.0486%" height="15" fill="rgb(230,189,17)" fg:x="59583" fg:w="60"/><text x="48.5509%" y="351.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="48.3495%" y="293" width="0.0186%" height="15" fill="rgb(220,50,17)" fg:x="59643" fg:w="23"/><text x="48.5995%" y="303.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.02%)</title><rect x="48.3495%" y="277" width="0.0186%" height="15" fill="rgb(248,152,48)" fg:x="59643" fg:w="23"/><text x="48.5995%" y="287.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (23 samples, 0.02%)</title><rect x="48.3495%" y="261" width="0.0186%" height="15" fill="rgb(244,91,11)" fg:x="59643" fg:w="23"/><text x="48.5995%" y="271.50"></text></g><g><title>HashWriter::write (23 samples, 0.02%)</title><rect x="48.3495%" y="245" width="0.0186%" height="15" fill="rgb(220,157,5)" fg:x="59643" fg:w="23"/><text x="48.5995%" y="255.50"></text></g><g><title>CSHA256::Write (22 samples, 0.02%)</title><rect x="48.3755%" y="165" width="0.0178%" height="15" fill="rgb(253,137,8)" fg:x="59675" fg:w="22"/><text x="48.6255%" y="175.50"></text></g><g><title>CSHA256::Write (36 samples, 0.03%)</title><rect x="48.3698%" y="181" width="0.0292%" height="15" fill="rgb(217,137,51)" fg:x="59668" fg:w="36"/><text x="48.6198%" y="191.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (71 samples, 0.06%)</title><rect x="48.3495%" y="389" width="0.0576%" height="15" fill="rgb(218,209,53)" fg:x="59643" fg:w="71"/><text x="48.5995%" y="399.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (71 samples, 0.06%)</title><rect x="48.3495%" y="373" width="0.0576%" height="15" fill="rgb(249,137,25)" fg:x="59643" fg:w="71"/><text x="48.5995%" y="383.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (71 samples, 0.06%)</title><rect x="48.3495%" y="357" width="0.0576%" height="15" fill="rgb(239,155,26)" fg:x="59643" fg:w="71"/><text x="48.5995%" y="367.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (71 samples, 0.06%)</title><rect x="48.3495%" y="341" width="0.0576%" height="15" fill="rgb(227,85,46)" fg:x="59643" fg:w="71"/><text x="48.5995%" y="351.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (71 samples, 0.06%)</title><rect x="48.3495%" y="325" width="0.0576%" height="15" fill="rgb(251,107,43)" fg:x="59643" fg:w="71"/><text x="48.5995%" y="335.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (71 samples, 0.06%)</title><rect x="48.3495%" y="309" width="0.0576%" height="15" fill="rgb(234,170,33)" fg:x="59643" fg:w="71"/><text x="48.5995%" y="319.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (48 samples, 0.04%)</title><rect x="48.3682%" y="293" width="0.0389%" height="15" fill="rgb(206,29,35)" fg:x="59666" fg:w="48"/><text x="48.6182%" y="303.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="48.3682%" y="277" width="0.0389%" height="15" fill="rgb(227,138,25)" fg:x="59666" fg:w="48"/><text x="48.6182%" y="287.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="48.3682%" y="261" width="0.0389%" height="15" fill="rgb(249,131,35)" fg:x="59666" fg:w="48"/><text x="48.6182%" y="271.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (48 samples, 0.04%)</title><rect x="48.3682%" y="245" width="0.0389%" height="15" fill="rgb(239,6,40)" fg:x="59666" fg:w="48"/><text x="48.6182%" y="255.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (48 samples, 0.04%)</title><rect x="48.3682%" y="229" width="0.0389%" height="15" fill="rgb(246,136,47)" fg:x="59666" fg:w="48"/><text x="48.6182%" y="239.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (48 samples, 0.04%)</title><rect x="48.3682%" y="213" width="0.0389%" height="15" fill="rgb(253,58,26)" fg:x="59666" fg:w="48"/><text x="48.6182%" y="223.50"></text></g><g><title>HashWriter::write (48 samples, 0.04%)</title><rect x="48.3682%" y="197" width="0.0389%" height="15" fill="rgb(237,141,10)" fg:x="59666" fg:w="48"/><text x="48.6182%" y="207.50"></text></g><g><title>CSHA256::Write (16 samples, 0.01%)</title><rect x="48.4079%" y="277" width="0.0130%" height="15" fill="rgb(234,156,12)" fg:x="59715" fg:w="16"/><text x="48.6579%" y="287.50"></text></g><g><title>CSHA256::Write (19 samples, 0.02%)</title><rect x="48.4209%" y="245" width="0.0154%" height="15" fill="rgb(243,224,36)" fg:x="59731" fg:w="19"/><text x="48.6709%" y="255.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (23 samples, 0.02%)</title><rect x="48.4209%" y="277" width="0.0186%" height="15" fill="rgb(205,229,51)" fg:x="59731" fg:w="23"/><text x="48.6709%" y="287.50"></text></g><g><title>HashWriter::write (23 samples, 0.02%)</title><rect x="48.4209%" y="261" width="0.0186%" height="15" fill="rgb(223,189,4)" fg:x="59731" fg:w="23"/><text x="48.6709%" y="271.50"></text></g><g><title>CSHA256::Write (14 samples, 0.01%)</title><rect x="48.4476%" y="213" width="0.0113%" height="15" fill="rgb(249,167,54)" fg:x="59764" fg:w="14"/><text x="48.6976%" y="223.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (216 samples, 0.18%)</title><rect x="48.3009%" y="501" width="0.1751%" height="15" fill="rgb(218,34,28)" fg:x="59583" fg:w="216"/><text x="48.5509%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (216 samples, 0.18%)</title><rect x="48.3009%" y="485" width="0.1751%" height="15" fill="rgb(232,109,42)" fg:x="59583" fg:w="216"/><text x="48.5509%" y="495.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (216 samples, 0.18%)</title><rect x="48.3009%" y="469" width="0.1751%" height="15" fill="rgb(248,214,46)" fg:x="59583" fg:w="216"/><text x="48.5509%" y="479.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (216 samples, 0.18%)</title><rect x="48.3009%" y="453" width="0.1751%" height="15" fill="rgb(244,216,40)" fg:x="59583" fg:w="216"/><text x="48.5509%" y="463.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (216 samples, 0.18%)</title><rect x="48.3009%" y="437" width="0.1751%" height="15" fill="rgb(231,226,31)" fg:x="59583" fg:w="216"/><text x="48.5509%" y="447.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (216 samples, 0.18%)</title><rect x="48.3009%" y="421" width="0.1751%" height="15" fill="rgb(238,38,43)" fg:x="59583" fg:w="216"/><text x="48.5509%" y="431.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (216 samples, 0.18%)</title><rect x="48.3009%" y="405" width="0.1751%" height="15" fill="rgb(208,88,43)" fg:x="59583" fg:w="216"/><text x="48.5509%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (85 samples, 0.07%)</title><rect x="48.4071%" y="389" width="0.0689%" height="15" fill="rgb(205,136,37)" fg:x="59714" fg:w="85"/><text x="48.6571%" y="399.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (85 samples, 0.07%)</title><rect x="48.4071%" y="373" width="0.0689%" height="15" fill="rgb(237,34,14)" fg:x="59714" fg:w="85"/><text x="48.6571%" y="383.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (85 samples, 0.07%)</title><rect x="48.4071%" y="357" width="0.0689%" height="15" fill="rgb(236,193,44)" fg:x="59714" fg:w="85"/><text x="48.6571%" y="367.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (85 samples, 0.07%)</title><rect x="48.4071%" y="341" width="0.0689%" height="15" fill="rgb(231,48,10)" fg:x="59714" fg:w="85"/><text x="48.6571%" y="351.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (85 samples, 0.07%)</title><rect x="48.4071%" y="325" width="0.0689%" height="15" fill="rgb(213,141,34)" fg:x="59714" fg:w="85"/><text x="48.6571%" y="335.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (85 samples, 0.07%)</title><rect x="48.4071%" y="309" width="0.0689%" height="15" fill="rgb(249,130,34)" fg:x="59714" fg:w="85"/><text x="48.6571%" y="319.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (85 samples, 0.07%)</title><rect x="48.4071%" y="293" width="0.0689%" height="15" fill="rgb(219,42,41)" fg:x="59714" fg:w="85"/><text x="48.6571%" y="303.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (37 samples, 0.03%)</title><rect x="48.4460%" y="277" width="0.0300%" height="15" fill="rgb(224,100,54)" fg:x="59762" fg:w="37"/><text x="48.6960%" y="287.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (35 samples, 0.03%)</title><rect x="48.4476%" y="261" width="0.0284%" height="15" fill="rgb(229,200,27)" fg:x="59764" fg:w="35"/><text x="48.6976%" y="271.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (35 samples, 0.03%)</title><rect x="48.4476%" y="245" width="0.0284%" height="15" fill="rgb(217,118,10)" fg:x="59764" fg:w="35"/><text x="48.6976%" y="255.50"></text></g><g><title>HashWriter::write (35 samples, 0.03%)</title><rect x="48.4476%" y="229" width="0.0284%" height="15" fill="rgb(206,22,3)" fg:x="59764" fg:w="35"/><text x="48.6976%" y="239.50"></text></g><g><title>CTransaction::ComputeWitnessHash (21 samples, 0.02%)</title><rect x="48.4954%" y="437" width="0.0170%" height="15" fill="rgb(232,163,46)" fg:x="59823" fg:w="21"/><text x="48.7454%" y="447.50"></text></g><g><title>CTransaction::ComputeWitnessHash (16 samples, 0.01%)</title><rect x="48.4995%" y="421" width="0.0130%" height="15" fill="rgb(206,95,13)" fg:x="59828" fg:w="16"/><text x="48.7495%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (285 samples, 0.23%)</title><rect x="48.2879%" y="581" width="0.2310%" height="15" fill="rgb(253,154,18)" fg:x="59567" fg:w="285"/><text x="48.5379%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (285 samples, 0.23%)</title><rect x="48.2879%" y="565" width="0.2310%" height="15" fill="rgb(219,32,23)" fg:x="59567" fg:w="285"/><text x="48.5379%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (285 samples, 0.23%)</title><rect x="48.2879%" y="549" width="0.2310%" height="15" fill="rgb(230,191,45)" fg:x="59567" fg:w="285"/><text x="48.5379%" y="559.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (285 samples, 0.23%)</title><rect x="48.2879%" y="533" width="0.2310%" height="15" fill="rgb(229,64,36)" fg:x="59567" fg:w="285"/><text x="48.5379%" y="543.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (285 samples, 0.23%)</title><rect x="48.2879%" y="517" width="0.2310%" height="15" fill="rgb(205,129,25)" fg:x="59567" fg:w="285"/><text x="48.5379%" y="527.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.03%)</title><rect x="48.4857%" y="501" width="0.0332%" height="15" fill="rgb(254,112,7)" fg:x="59811" fg:w="41"/><text x="48.7357%" y="511.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.03%)</title><rect x="48.4857%" y="485" width="0.0332%" height="15" fill="rgb(226,53,48)" fg:x="59811" fg:w="41"/><text x="48.7357%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (41 samples, 0.03%)</title><rect x="48.4857%" y="469" width="0.0332%" height="15" fill="rgb(214,153,38)" fg:x="59811" fg:w="41"/><text x="48.7357%" y="479.50"></text></g><g><title>HashWriter::write (41 samples, 0.03%)</title><rect x="48.4857%" y="453" width="0.0332%" height="15" fill="rgb(243,101,7)" fg:x="59811" fg:w="41"/><text x="48.7357%" y="463.50"></text></g><g><title>CSHA256::Write (34 samples, 0.03%)</title><rect x="48.5230%" y="325" width="0.0276%" height="15" fill="rgb(240,140,22)" fg:x="59857" fg:w="34"/><text x="48.7730%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (55 samples, 0.04%)</title><rect x="48.5222%" y="389" width="0.0446%" height="15" fill="rgb(235,114,2)" fg:x="59856" fg:w="55"/><text x="48.7722%" y="399.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (55 samples, 0.04%)</title><rect x="48.5222%" y="373" width="0.0446%" height="15" fill="rgb(242,59,12)" fg:x="59856" fg:w="55"/><text x="48.7722%" y="383.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (55 samples, 0.04%)</title><rect x="48.5222%" y="357" width="0.0446%" height="15" fill="rgb(252,134,9)" fg:x="59856" fg:w="55"/><text x="48.7722%" y="367.50"></text></g><g><title>HashWriter::write (55 samples, 0.04%)</title><rect x="48.5222%" y="341" width="0.0446%" height="15" fill="rgb(236,4,44)" fg:x="59856" fg:w="55"/><text x="48.7722%" y="351.50"></text></g><g><title>CSHA256::Write (62 samples, 0.05%)</title><rect x="48.5927%" y="229" width="0.0503%" height="15" fill="rgb(254,172,41)" fg:x="59943" fg:w="62"/><text x="48.8427%" y="239.50"></text></g><g><title>memcpy (16 samples, 0.01%)</title><rect x="48.6300%" y="213" width="0.0130%" height="15" fill="rgb(244,63,20)" fg:x="59989" fg:w="16"/><text x="48.8800%" y="223.50"></text></g><g><title>CSHA256::Write (122 samples, 0.10%)</title><rect x="48.5724%" y="245" width="0.0989%" height="15" fill="rgb(250,73,31)" fg:x="59918" fg:w="122"/><text x="48.8224%" y="255.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.01%)</title><rect x="48.6568%" y="229" width="0.0146%" height="15" fill="rgb(241,38,36)" fg:x="60022" fg:w="18"/><text x="48.9068%" y="239.50"></text></g><g><title>_mm_add_epi32 (15 samples, 0.01%)</title><rect x="48.6819%" y="213" width="0.0122%" height="15" fill="rgb(245,211,2)" fg:x="60053" fg:w="15"/><text x="48.9319%" y="223.50"></text></g><g><title>QuadRound (30 samples, 0.02%)</title><rect x="48.6819%" y="229" width="0.0243%" height="15" fill="rgb(206,120,28)" fg:x="60053" fg:w="30"/><text x="48.9319%" y="239.50"></text></g><g><title>ShiftMessageB (45 samples, 0.04%)</title><rect x="48.7062%" y="229" width="0.0365%" height="15" fill="rgb(211,59,34)" fg:x="60083" fg:w="45"/><text x="48.9562%" y="239.50"></text></g><g><title>ShiftMessageC (35 samples, 0.03%)</title><rect x="48.7143%" y="213" width="0.0284%" height="15" fill="rgb(233,168,5)" fg:x="60093" fg:w="35"/><text x="48.9643%" y="223.50"></text></g><g><title>_mm_sha256msg2_epu32 (16 samples, 0.01%)</title><rect x="48.7297%" y="197" width="0.0130%" height="15" fill="rgb(234,33,13)" fg:x="60112" fg:w="16"/><text x="48.9797%" y="207.50"></text></g><g><title>sha256_x86_shani::Transform (100 samples, 0.08%)</title><rect x="48.6722%" y="245" width="0.0811%" height="15" fill="rgb(231,150,26)" fg:x="60041" fg:w="100"/><text x="48.9222%" y="255.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (234 samples, 0.19%)</title><rect x="48.5724%" y="277" width="0.1897%" height="15" fill="rgb(217,191,4)" fg:x="59918" fg:w="234"/><text x="48.8224%" y="287.50"></text></g><g><title>HashWriter::write (234 samples, 0.19%)</title><rect x="48.5724%" y="261" width="0.1897%" height="15" fill="rgb(246,198,38)" fg:x="59918" fg:w="234"/><text x="48.8224%" y="271.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (334 samples, 0.27%)</title><rect x="48.5222%" y="501" width="0.2708%" height="15" fill="rgb(245,64,37)" fg:x="59856" fg:w="334"/><text x="48.7722%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (334 samples, 0.27%)</title><rect x="48.5222%" y="485" width="0.2708%" height="15" fill="rgb(250,30,36)" fg:x="59856" fg:w="334"/><text x="48.7722%" y="495.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (334 samples, 0.27%)</title><rect x="48.5222%" y="469" width="0.2708%" height="15" fill="rgb(217,86,53)" fg:x="59856" fg:w="334"/><text x="48.7722%" y="479.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (334 samples, 0.27%)</title><rect x="48.5222%" y="453" width="0.2708%" height="15" fill="rgb(228,157,16)" fg:x="59856" fg:w="334"/><text x="48.7722%" y="463.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (334 samples, 0.27%)</title><rect x="48.5222%" y="437" width="0.2708%" height="15" fill="rgb(217,59,31)" fg:x="59856" fg:w="334"/><text x="48.7722%" y="447.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (334 samples, 0.27%)</title><rect x="48.5222%" y="421" width="0.2708%" height="15" fill="rgb(237,138,41)" fg:x="59856" fg:w="334"/><text x="48.7722%" y="431.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (334 samples, 0.27%)</title><rect x="48.5222%" y="405" width="0.2708%" height="15" fill="rgb(227,91,49)" fg:x="59856" fg:w="334"/><text x="48.7722%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (279 samples, 0.23%)</title><rect x="48.5668%" y="389" width="0.2262%" height="15" fill="rgb(247,21,44)" fg:x="59911" fg:w="279"/><text x="48.8168%" y="399.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (279 samples, 0.23%)</title><rect x="48.5668%" y="373" width="0.2262%" height="15" fill="rgb(219,210,51)" fg:x="59911" fg:w="279"/><text x="48.8168%" y="383.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (279 samples, 0.23%)</title><rect x="48.5668%" y="357" width="0.2262%" height="15" fill="rgb(209,140,6)" fg:x="59911" fg:w="279"/><text x="48.8168%" y="367.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (279 samples, 0.23%)</title><rect x="48.5668%" y="341" width="0.2262%" height="15" fill="rgb(221,188,24)" fg:x="59911" fg:w="279"/><text x="48.8168%" y="351.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (279 samples, 0.23%)</title><rect x="48.5668%" y="325" width="0.2262%" height="15" fill="rgb(232,154,20)" fg:x="59911" fg:w="279"/><text x="48.8168%" y="335.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (279 samples, 0.23%)</title><rect x="48.5668%" y="309" width="0.2262%" height="15" fill="rgb(244,137,50)" fg:x="59911" fg:w="279"/><text x="48.8168%" y="319.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (279 samples, 0.23%)</title><rect x="48.5668%" y="293" width="0.2262%" height="15" fill="rgb(225,185,43)" fg:x="59911" fg:w="279"/><text x="48.8168%" y="303.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.02%)</title><rect x="48.7719%" y="277" width="0.0211%" height="15" fill="rgb(213,205,38)" fg:x="60164" fg:w="26"/><text x="49.0219%" y="287.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.02%)</title><rect x="48.7751%" y="261" width="0.0178%" height="15" fill="rgb(236,73,12)" fg:x="60168" fg:w="22"/><text x="49.0251%" y="271.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (22 samples, 0.02%)</title><rect x="48.7751%" y="245" width="0.0178%" height="15" fill="rgb(235,219,13)" fg:x="60168" fg:w="22"/><text x="49.0251%" y="255.50"></text></g><g><title>HashWriter::write (22 samples, 0.02%)</title><rect x="48.7751%" y="229" width="0.0178%" height="15" fill="rgb(218,59,36)" fg:x="60168" fg:w="22"/><text x="49.0251%" y="239.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (348 samples, 0.28%)</title><rect x="48.5189%" y="581" width="0.2821%" height="15" fill="rgb(205,110,39)" fg:x="59852" fg:w="348"/><text x="48.7689%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (348 samples, 0.28%)</title><rect x="48.5189%" y="565" width="0.2821%" height="15" fill="rgb(218,206,42)" fg:x="59852" fg:w="348"/><text x="48.7689%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (348 samples, 0.28%)</title><rect x="48.5189%" y="549" width="0.2821%" height="15" fill="rgb(248,125,24)" fg:x="59852" fg:w="348"/><text x="48.7689%" y="559.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (348 samples, 0.28%)</title><rect x="48.5189%" y="533" width="0.2821%" height="15" fill="rgb(242,28,27)" fg:x="59852" fg:w="348"/><text x="48.7689%" y="543.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (348 samples, 0.28%)</title><rect x="48.5189%" y="517" width="0.2821%" height="15" fill="rgb(216,228,15)" fg:x="59852" fg:w="348"/><text x="48.7689%" y="527.50"></text></g><g><title>CSHA256::Write (134 samples, 0.11%)</title><rect x="48.8181%" y="421" width="0.1086%" height="15" fill="rgb(235,116,46)" fg:x="60221" fg:w="134"/><text x="49.0681%" y="431.50"></text></g><g><title>memcpy (21 samples, 0.02%)</title><rect x="48.9097%" y="405" width="0.0170%" height="15" fill="rgb(224,18,32)" fg:x="60334" fg:w="21"/><text x="49.1597%" y="415.50"></text></g><g><title>_mm_add_epi32 (33 samples, 0.03%)</title><rect x="48.9397%" y="389" width="0.0268%" height="15" fill="rgb(252,5,12)" fg:x="60371" fg:w="33"/><text x="49.1897%" y="399.50"></text></g><g><title>_mm_sha256rnds2_epu32 (16 samples, 0.01%)</title><rect x="48.9664%" y="389" width="0.0130%" height="15" fill="rgb(251,36,5)" fg:x="60404" fg:w="16"/><text x="49.2164%" y="399.50"></text></g><g><title>QuadRound (56 samples, 0.05%)</title><rect x="48.9397%" y="405" width="0.0454%" height="15" fill="rgb(217,53,14)" fg:x="60371" fg:w="56"/><text x="49.1897%" y="415.50"></text></g><g><title>ShiftMessageA (31 samples, 0.03%)</title><rect x="48.9859%" y="389" width="0.0251%" height="15" fill="rgb(215,86,45)" fg:x="60428" fg:w="31"/><text x="49.2359%" y="399.50"></text></g><g><title>_mm_sha256msg1_epu32 (31 samples, 0.03%)</title><rect x="48.9859%" y="373" width="0.0251%" height="15" fill="rgb(242,169,11)" fg:x="60428" fg:w="31"/><text x="49.2359%" y="383.50"></text></g><g><title>_mm_add_epi32 (14 samples, 0.01%)</title><rect x="49.0110%" y="373" width="0.0113%" height="15" fill="rgb(211,213,45)" fg:x="60459" fg:w="14"/><text x="49.2610%" y="383.50"></text></g><g><title>ShiftMessageB (79 samples, 0.06%)</title><rect x="48.9859%" y="405" width="0.0640%" height="15" fill="rgb(205,88,11)" fg:x="60428" fg:w="79"/><text x="49.2359%" y="415.50"></text></g><g><title>ShiftMessageC (48 samples, 0.04%)</title><rect x="49.0110%" y="389" width="0.0389%" height="15" fill="rgb(252,69,26)" fg:x="60459" fg:w="48"/><text x="49.2610%" y="399.50"></text></g><g><title>_mm_sha256msg2_epu32 (27 samples, 0.02%)</title><rect x="49.0280%" y="373" width="0.0219%" height="15" fill="rgb(246,123,37)" fg:x="60480" fg:w="27"/><text x="49.2780%" y="383.50"></text></g><g><title>sha256_x86_shani::Transform (163 samples, 0.13%)</title><rect x="48.9308%" y="421" width="0.1321%" height="15" fill="rgb(212,205,5)" fg:x="60360" fg:w="163"/><text x="49.1808%" y="431.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (24 samples, 0.02%)</title><rect x="49.0629%" y="421" width="0.0195%" height="15" fill="rgb(253,148,0)" fg:x="60523" fg:w="24"/><text x="49.3129%" y="431.50"></text></g><g><title>CSHA256::Write (364 samples, 0.30%)</title><rect x="48.8075%" y="437" width="0.2951%" height="15" fill="rgb(239,22,4)" fg:x="60208" fg:w="364"/><text x="49.0575%" y="447.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.02%)</title><rect x="49.0823%" y="421" width="0.0203%" height="15" fill="rgb(226,26,53)" fg:x="60547" fg:w="25"/><text x="49.3323%" y="431.50"></text></g><g><title>_mm_add_epi32 (13 samples, 0.01%)</title><rect x="49.1083%" y="405" width="0.0105%" height="15" fill="rgb(225,229,45)" fg:x="60579" fg:w="13"/><text x="49.3583%" y="415.50"></text></g><g><title>QuadRound (31 samples, 0.03%)</title><rect x="49.1083%" y="421" width="0.0251%" height="15" fill="rgb(220,60,37)" fg:x="60579" fg:w="31"/><text x="49.3583%" y="431.50"></text></g><g><title>ShiftMessageA (14 samples, 0.01%)</title><rect x="49.1334%" y="405" width="0.0113%" height="15" fill="rgb(217,180,35)" fg:x="60610" fg:w="14"/><text x="49.3834%" y="415.50"></text></g><g><title>_mm_sha256msg1_epu32 (14 samples, 0.01%)</title><rect x="49.1334%" y="389" width="0.0113%" height="15" fill="rgb(229,7,53)" fg:x="60610" fg:w="14"/><text x="49.3834%" y="399.50"></text></g><g><title>ShiftMessageB (47 samples, 0.04%)</title><rect x="49.1334%" y="421" width="0.0381%" height="15" fill="rgb(254,137,3)" fg:x="60610" fg:w="47"/><text x="49.3834%" y="431.50"></text></g><g><title>ShiftMessageC (33 samples, 0.03%)</title><rect x="49.1448%" y="405" width="0.0268%" height="15" fill="rgb(215,140,41)" fg:x="60624" fg:w="33"/><text x="49.3948%" y="415.50"></text></g><g><title>_mm_sha256msg2_epu32 (15 samples, 0.01%)</title><rect x="49.1594%" y="389" width="0.0122%" height="15" fill="rgb(250,80,15)" fg:x="60642" fg:w="15"/><text x="49.4094%" y="399.50"></text></g><g><title>sha256_x86_shani::Transform (95 samples, 0.08%)</title><rect x="49.1026%" y="437" width="0.0770%" height="15" fill="rgb(252,191,6)" fg:x="60572" fg:w="95"/><text x="49.3526%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (465 samples, 0.38%)</title><rect x="48.8075%" y="469" width="0.3770%" height="15" fill="rgb(246,217,18)" fg:x="60208" fg:w="465"/><text x="49.0575%" y="479.50"></text></g><g><title>HashWriter::write (465 samples, 0.38%)</title><rect x="48.8075%" y="453" width="0.3770%" height="15" fill="rgb(223,93,7)" fg:x="60208" fg:w="465"/><text x="49.0575%" y="463.50"></text></g><g><title>CSHA256::Write (35 samples, 0.03%)</title><rect x="49.1918%" y="405" width="0.0284%" height="15" fill="rgb(225,55,52)" fg:x="60682" fg:w="35"/><text x="49.4418%" y="415.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (541 samples, 0.44%)</title><rect x="48.8059%" y="501" width="0.4386%" height="15" fill="rgb(240,31,24)" fg:x="60206" fg:w="541"/><text x="49.0559%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (541 samples, 0.44%)</title><rect x="48.8059%" y="485" width="0.4386%" height="15" fill="rgb(205,56,52)" fg:x="60206" fg:w="541"/><text x="49.0559%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (67 samples, 0.05%)</title><rect x="49.1902%" y="469" width="0.0543%" height="15" fill="rgb(246,146,12)" fg:x="60680" fg:w="67"/><text x="49.4402%" y="479.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (65 samples, 0.05%)</title><rect x="49.1918%" y="453" width="0.0527%" height="15" fill="rgb(239,84,36)" fg:x="60682" fg:w="65"/><text x="49.4418%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (65 samples, 0.05%)</title><rect x="49.1918%" y="437" width="0.0527%" height="15" fill="rgb(207,41,40)" fg:x="60682" fg:w="65"/><text x="49.4418%" y="447.50"></text></g><g><title>HashWriter::write (65 samples, 0.05%)</title><rect x="49.1918%" y="421" width="0.0527%" height="15" fill="rgb(241,179,25)" fg:x="60682" fg:w="65"/><text x="49.4418%" y="431.50"></text></g><g><title>CSHA256::Write (17 samples, 0.01%)</title><rect x="49.2477%" y="437" width="0.0138%" height="15" fill="rgb(210,0,34)" fg:x="60751" fg:w="17"/><text x="49.4977%" y="447.50"></text></g><g><title>ShiftMessageB (16 samples, 0.01%)</title><rect x="49.2728%" y="421" width="0.0130%" height="15" fill="rgb(225,217,29)" fg:x="60782" fg:w="16"/><text x="49.5228%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (31 samples, 0.03%)</title><rect x="49.2615%" y="437" width="0.0251%" height="15" fill="rgb(216,191,38)" fg:x="60768" fg:w="31"/><text x="49.5115%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (601 samples, 0.49%)</title><rect x="48.8011%" y="581" width="0.4872%" height="15" fill="rgb(232,140,52)" fg:x="60200" fg:w="601"/><text x="49.0511%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (601 samples, 0.49%)</title><rect x="48.8011%" y="565" width="0.4872%" height="15" fill="rgb(223,158,51)" fg:x="60200" fg:w="601"/><text x="49.0511%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (601 samples, 0.49%)</title><rect x="48.8011%" y="549" width="0.4872%" height="15" fill="rgb(235,29,51)" fg:x="60200" fg:w="601"/><text x="49.0511%" y="559.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (601 samples, 0.49%)</title><rect x="48.8011%" y="533" width="0.4872%" height="15" fill="rgb(215,181,18)" fg:x="60200" fg:w="601"/><text x="49.0511%" y="543.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (601 samples, 0.49%)</title><rect x="48.8011%" y="517" width="0.4872%" height="15" fill="rgb(227,125,34)" fg:x="60200" fg:w="601"/><text x="49.0511%" y="527.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (51 samples, 0.04%)</title><rect x="49.2469%" y="501" width="0.0413%" height="15" fill="rgb(230,197,49)" fg:x="60750" fg:w="51"/><text x="49.4969%" y="511.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.04%)</title><rect x="49.2477%" y="485" width="0.0405%" height="15" fill="rgb(239,141,16)" fg:x="60751" fg:w="50"/><text x="49.4977%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (50 samples, 0.04%)</title><rect x="49.2477%" y="469" width="0.0405%" height="15" fill="rgb(225,105,43)" fg:x="60751" fg:w="50"/><text x="49.4977%" y="479.50"></text></g><g><title>HashWriter::write (50 samples, 0.04%)</title><rect x="49.2477%" y="453" width="0.0405%" height="15" fill="rgb(214,131,14)" fg:x="60751" fg:w="50"/><text x="49.4977%" y="463.50"></text></g><g><title>CTransaction::ComputeWitnessHash (22 samples, 0.02%)</title><rect x="49.2899%" y="501" width="0.0178%" height="15" fill="rgb(229,177,11)" fg:x="60803" fg:w="22"/><text x="49.5399%" y="511.50"></text></g><g><title>CTransaction::ComputeWitnessHash (22 samples, 0.02%)</title><rect x="49.2899%" y="485" width="0.0178%" height="15" fill="rgb(231,180,14)" fg:x="60803" fg:w="22"/><text x="49.5399%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (27 samples, 0.02%)</title><rect x="49.2883%" y="581" width="0.0219%" height="15" fill="rgb(232,88,2)" fg:x="60801" fg:w="27"/><text x="49.5383%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.02%)</title><rect x="49.2883%" y="565" width="0.0219%" height="15" fill="rgb(205,220,8)" fg:x="60801" fg:w="27"/><text x="49.5383%" y="575.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.02%)</title><rect x="49.2883%" y="549" width="0.0219%" height="15" fill="rgb(225,23,53)" fg:x="60801" fg:w="27"/><text x="49.5383%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (27 samples, 0.02%)</title><rect x="49.2883%" y="533" width="0.0219%" height="15" fill="rgb(213,62,29)" fg:x="60801" fg:w="27"/><text x="49.5383%" y="543.50"></text></g><g><title>HashWriter::write (27 samples, 0.02%)</title><rect x="49.2883%" y="517" width="0.0219%" height="15" fill="rgb(227,75,7)" fg:x="60801" fg:w="27"/><text x="49.5383%" y="527.50"></text></g><g><title>CSHA256::Write (14 samples, 0.01%)</title><rect x="49.3150%" y="501" width="0.0113%" height="15" fill="rgb(207,105,14)" fg:x="60834" fg:w="14"/><text x="49.5650%" y="511.50"></text></g><g><title>_mm_add_epi32 (29 samples, 0.02%)</title><rect x="49.3320%" y="469" width="0.0235%" height="15" fill="rgb(245,62,29)" fg:x="60855" fg:w="29"/><text x="49.5820%" y="479.50"></text></g><g><title>_mm_sha256rnds2_epu32 (17 samples, 0.01%)</title><rect x="49.3555%" y="469" width="0.0138%" height="15" fill="rgb(236,202,4)" fg:x="60884" fg:w="17"/><text x="49.6055%" y="479.50"></text></g><g><title>QuadRound (50 samples, 0.04%)</title><rect x="49.3320%" y="485" width="0.0405%" height="15" fill="rgb(250,67,1)" fg:x="60855" fg:w="50"/><text x="49.5820%" y="495.50"></text></g><g><title>ShiftMessageB (53 samples, 0.04%)</title><rect x="49.3726%" y="485" width="0.0430%" height="15" fill="rgb(253,115,44)" fg:x="60905" fg:w="53"/><text x="49.6226%" y="495.50"></text></g><g><title>ShiftMessageC (41 samples, 0.03%)</title><rect x="49.3823%" y="469" width="0.0332%" height="15" fill="rgb(251,139,18)" fg:x="60917" fg:w="41"/><text x="49.6323%" y="479.50"></text></g><g><title>_mm_sha256msg2_epu32 (23 samples, 0.02%)</title><rect x="49.3969%" y="453" width="0.0186%" height="15" fill="rgb(218,22,32)" fg:x="60935" fg:w="23"/><text x="49.6469%" y="463.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1,402 samples, 1.14%)</title><rect x="48.2863%" y="597" width="1.1365%" height="15" fill="rgb(243,53,5)" fg:x="59565" fg:w="1402"/><text x="48.5363%" y="607.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (139 samples, 0.11%)</title><rect x="49.3101%" y="581" width="0.1127%" height="15" fill="rgb(227,56,16)" fg:x="60828" fg:w="139"/><text x="49.5601%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (139 samples, 0.11%)</title><rect x="49.3101%" y="565" width="0.1127%" height="15" fill="rgb(245,53,0)" fg:x="60828" fg:w="139"/><text x="49.5601%" y="575.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (139 samples, 0.11%)</title><rect x="49.3101%" y="549" width="0.1127%" height="15" fill="rgb(216,170,35)" fg:x="60828" fg:w="139"/><text x="49.5601%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (139 samples, 0.11%)</title><rect x="49.3101%" y="533" width="0.1127%" height="15" fill="rgb(211,200,8)" fg:x="60828" fg:w="139"/><text x="49.5601%" y="543.50"></text></g><g><title>HashWriter::write (139 samples, 0.11%)</title><rect x="49.3101%" y="517" width="0.1127%" height="15" fill="rgb(228,204,44)" fg:x="60828" fg:w="139"/><text x="49.5601%" y="527.50"></text></g><g><title>sha256_x86_shani::Transform (117 samples, 0.09%)</title><rect x="49.3280%" y="501" width="0.0948%" height="15" fill="rgb(214,121,17)" fg:x="60850" fg:w="117"/><text x="49.5780%" y="511.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1,521 samples, 1.23%)</title><rect x="48.1971%" y="677" width="1.2330%" height="15" fill="rgb(233,64,38)" fg:x="59455" fg:w="1521"/><text x="48.4471%" y="687.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1,521 samples, 1.23%)</title><rect x="48.1971%" y="661" width="1.2330%" height="15" fill="rgb(253,54,19)" fg:x="59455" fg:w="1521"/><text x="48.4471%" y="671.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (1,521 samples, 1.23%)</title><rect x="48.1971%" y="645" width="1.2330%" height="15" fill="rgb(253,94,18)" fg:x="59455" fg:w="1521"/><text x="48.4471%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1,521 samples, 1.23%)</title><rect x="48.1971%" y="629" width="1.2330%" height="15" fill="rgb(227,57,52)" fg:x="59455" fg:w="1521"/><text x="48.4471%" y="639.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1,521 samples, 1.23%)</title><rect x="48.1971%" y="613" width="1.2330%" height="15" fill="rgb(230,228,50)" fg:x="59455" fg:w="1521"/><text x="48.4471%" y="623.50"></text></g><g><title>CSHA256::Finalize (24 samples, 0.02%)</title><rect x="49.4423%" y="629" width="0.0195%" height="15" fill="rgb(217,205,27)" fg:x="60991" fg:w="24"/><text x="49.6923%" y="639.50"></text></g><g><title>CSHA256::Write (99 samples, 0.08%)</title><rect x="49.4634%" y="629" width="0.0803%" height="15" fill="rgb(252,71,50)" fg:x="61017" fg:w="99"/><text x="49.7134%" y="639.50"></text></g><g><title>sha256_x86_shani::Transform (25 samples, 0.02%)</title><rect x="49.5566%" y="629" width="0.0203%" height="15" fill="rgb(209,86,4)" fg:x="61132" fg:w="25"/><text x="49.8066%" y="639.50"></text></g><g><title>CSHA256::Write (193 samples, 0.16%)</title><rect x="49.4325%" y="645" width="0.1565%" height="15" fill="rgb(229,94,0)" fg:x="60979" fg:w="193"/><text x="49.6825%" y="655.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.01%)</title><rect x="49.5768%" y="629" width="0.0122%" height="15" fill="rgb(252,223,21)" fg:x="61157" fg:w="15"/><text x="49.8268%" y="639.50"></text></g><g><title>_mm_add_epi32 (35 samples, 0.03%)</title><rect x="49.6052%" y="613" width="0.0284%" height="15" fill="rgb(230,210,4)" fg:x="61192" fg:w="35"/><text x="49.8552%" y="623.50"></text></g><g><title>_mm_sha256rnds2_epu32 (24 samples, 0.02%)</title><rect x="49.6336%" y="613" width="0.0195%" height="15" fill="rgb(240,149,38)" fg:x="61227" fg:w="24"/><text x="49.8836%" y="623.50"></text></g><g><title>QuadRound (73 samples, 0.06%)</title><rect x="49.6052%" y="629" width="0.0592%" height="15" fill="rgb(254,105,20)" fg:x="61192" fg:w="73"/><text x="49.8552%" y="639.50"></text></g><g><title>_mm_shuffle_epi32 (14 samples, 0.01%)</title><rect x="49.6530%" y="613" width="0.0113%" height="15" fill="rgb(253,87,46)" fg:x="61251" fg:w="14"/><text x="49.9030%" y="623.50"></text></g><g><title>ShiftMessageA (28 samples, 0.02%)</title><rect x="49.6660%" y="613" width="0.0227%" height="15" fill="rgb(253,116,33)" fg:x="61267" fg:w="28"/><text x="49.9160%" y="623.50"></text></g><g><title>_mm_sha256msg1_epu32 (28 samples, 0.02%)</title><rect x="49.6660%" y="597" width="0.0227%" height="15" fill="rgb(229,198,5)" fg:x="61267" fg:w="28"/><text x="49.9160%" y="607.50"></text></g><g><title>_mm_add_epi32 (19 samples, 0.02%)</title><rect x="49.6887%" y="597" width="0.0154%" height="15" fill="rgb(242,38,37)" fg:x="61295" fg:w="19"/><text x="49.9387%" y="607.50"></text></g><g><title>ShiftMessageB (87 samples, 0.07%)</title><rect x="49.6660%" y="629" width="0.0705%" height="15" fill="rgb(242,69,53)" fg:x="61267" fg:w="87"/><text x="49.9160%" y="639.50"></text></g><g><title>ShiftMessageC (59 samples, 0.05%)</title><rect x="49.6887%" y="613" width="0.0478%" height="15" fill="rgb(249,80,16)" fg:x="61295" fg:w="59"/><text x="49.9387%" y="623.50"></text></g><g><title>_mm_sha256msg2_epu32 (31 samples, 0.03%)</title><rect x="49.7114%" y="597" width="0.0251%" height="15" fill="rgb(206,128,11)" fg:x="61323" fg:w="31"/><text x="49.9614%" y="607.50"></text></g><g><title>ShiftMessageC (16 samples, 0.01%)</title><rect x="49.7365%" y="629" width="0.0130%" height="15" fill="rgb(212,35,20)" fg:x="61354" fg:w="16"/><text x="49.9865%" y="639.50"></text></g><g><title>sha256_x86_shani::Transform (204 samples, 0.17%)</title><rect x="49.5906%" y="645" width="0.1654%" height="15" fill="rgb(236,79,13)" fg:x="61174" fg:w="204"/><text x="49.8406%" y="655.50"></text></g><g><title>CSHA256::Finalize (403 samples, 0.33%)</title><rect x="49.4301%" y="661" width="0.3267%" height="15" fill="rgb(233,123,3)" fg:x="60976" fg:w="403"/><text x="49.6801%" y="671.50"></text></g><g><title>HashWriter::GetHash (425 samples, 0.34%)</title><rect x="49.4301%" y="677" width="0.3445%" height="15" fill="rgb(214,93,52)" fg:x="60976" fg:w="425"/><text x="49.6801%" y="687.50"></text></g><g><title>sha256_x86_shani::Transform (15 samples, 0.01%)</title><rect x="49.7625%" y="661" width="0.0122%" height="15" fill="rgb(251,37,40)" fg:x="61386" fg:w="15"/><text x="50.0125%" y="671.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1,947 samples, 1.58%)</title><rect x="48.1971%" y="709" width="1.5783%" height="15" fill="rgb(227,80,54)" fg:x="59455" fg:w="1947"/><text x="48.4471%" y="719.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1,947 samples, 1.58%)</title><rect x="48.1971%" y="693" width="1.5783%" height="15" fill="rgb(254,48,11)" fg:x="59455" fg:w="1947"/><text x="48.4471%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="709" width="0.0227%" height="15" fill="rgb(235,193,26)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="719.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="693" width="0.0227%" height="15" fill="rgb(229,99,21)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="703.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="677" width="0.0227%" height="15" fill="rgb(211,140,41)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="687.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="661" width="0.0227%" height="15" fill="rgb(240,227,30)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="671.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="645" width="0.0227%" height="15" fill="rgb(215,224,45)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="655.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="629" width="0.0227%" height="15" fill="rgb(206,123,31)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="639.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="613" width="0.0227%" height="15" fill="rgb(210,138,16)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="623.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="597" width="0.0227%" height="15" fill="rgb(228,57,28)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="607.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="581" width="0.0227%" height="15" fill="rgb(242,170,10)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="591.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="565" width="0.0227%" height="15" fill="rgb(228,214,39)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="575.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="549" width="0.0227%" height="15" fill="rgb(218,179,33)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="559.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (28 samples, 0.02%)</title><rect x="49.7949%" y="533" width="0.0227%" height="15" fill="rgb(235,193,39)" fg:x="61426" fg:w="28"/><text x="50.0449%" y="543.50"></text></g><g><title>CTransaction::CTransaction (3,285 samples, 2.66%)</title><rect x="47.1562%" y="725" width="2.6630%" height="15" fill="rgb(219,221,36)" fg:x="58171" fg:w="3285"/><text x="47.4062%" y="735.50">CT..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (27 samples, 0.02%)</title><rect x="49.8200%" y="725" width="0.0219%" height="15" fill="rgb(248,218,19)" fg:x="61457" fg:w="27"/><text x="50.0700%" y="735.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.01%)</title><rect x="49.8419%" y="725" width="0.0146%" height="15" fill="rgb(205,50,9)" fg:x="61484" fg:w="18"/><text x="50.0919%" y="735.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (30 samples, 0.02%)</title><rect x="49.8573%" y="533" width="0.0243%" height="15" fill="rgb(238,81,28)" fg:x="61503" fg:w="30"/><text x="50.1073%" y="543.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (30 samples, 0.02%)</title><rect x="49.8573%" y="517" width="0.0243%" height="15" fill="rgb(235,110,19)" fg:x="61503" fg:w="30"/><text x="50.1073%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (30 samples, 0.02%)</title><rect x="49.8573%" y="501" width="0.0243%" height="15" fill="rgb(214,7,14)" fg:x="61503" fg:w="30"/><text x="50.1073%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.02%)</title><rect x="49.8573%" y="485" width="0.0243%" height="15" fill="rgb(211,77,3)" fg:x="61503" fg:w="30"/><text x="50.1073%" y="495.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (30 samples, 0.02%)</title><rect x="49.8573%" y="469" width="0.0243%" height="15" fill="rgb(229,5,9)" fg:x="61503" fg:w="30"/><text x="50.1073%" y="479.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (14 samples, 0.01%)</title><rect x="49.8703%" y="453" width="0.0113%" height="15" fill="rgb(225,90,11)" fg:x="61519" fg:w="14"/><text x="50.1203%" y="463.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (14 samples, 0.01%)</title><rect x="49.8703%" y="437" width="0.0113%" height="15" fill="rgb(242,56,8)" fg:x="61519" fg:w="14"/><text x="50.1203%" y="447.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5,986 samples, 4.85%)</title><rect x="45.0307%" y="789" width="4.8525%" height="15" fill="rgb(249,212,39)" fg:x="55549" fg:w="5986"/><text x="45.2807%" y="799.50">std::_..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5,986 samples, 4.85%)</title><rect x="45.0307%" y="773" width="4.8525%" height="15" fill="rgb(236,90,9)" fg:x="55549" fg:w="5986"/><text x="45.2807%" y="783.50">void s..</text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (5,986 samples, 4.85%)</title><rect x="45.0307%" y="757" width="4.8525%" height="15" fill="rgb(206,88,35)" fg:x="55549" fg:w="5986"/><text x="45.2807%" y="767.50">void s..</text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (5,986 samples, 4.85%)</title><rect x="45.0307%" y="741" width="4.8525%" height="15" fill="rgb(205,126,30)" fg:x="55549" fg:w="5986"/><text x="45.2807%" y="751.50">CTrans..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="725" width="0.0268%" height="15" fill="rgb(230,176,12)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="735.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="709" width="0.0268%" height="15" fill="rgb(243,19,9)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="719.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="693" width="0.0268%" height="15" fill="rgb(245,171,17)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="703.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="677" width="0.0268%" height="15" fill="rgb(227,52,21)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="687.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="661" width="0.0268%" height="15" fill="rgb(238,69,14)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="671.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="645" width="0.0268%" height="15" fill="rgb(241,156,39)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="655.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="629" width="0.0268%" height="15" fill="rgb(212,227,28)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="639.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="613" width="0.0268%" height="15" fill="rgb(209,118,27)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="623.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="597" width="0.0268%" height="15" fill="rgb(226,102,5)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="607.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="581" width="0.0268%" height="15" fill="rgb(223,34,3)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="591.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="565" width="0.0268%" height="15" fill="rgb(221,81,38)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="575.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (33 samples, 0.03%)</title><rect x="49.8565%" y="549" width="0.0268%" height="15" fill="rgb(236,219,28)" fg:x="61502" fg:w="33"/><text x="50.1065%" y="559.50"></text></g><g><title>__lll_lock_wake_private (31 samples, 0.03%)</title><rect x="49.8938%" y="693" width="0.0251%" height="15" fill="rgb(213,200,14)" fg:x="61548" fg:w="31"/><text x="50.1438%" y="703.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="49.8938%" y="677" width="0.0251%" height="15" fill="rgb(240,33,19)" fg:x="61548" fg:w="31"/><text x="50.1438%" y="687.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="49.8938%" y="661" width="0.0251%" height="15" fill="rgb(233,113,27)" fg:x="61548" fg:w="31"/><text x="50.1438%" y="671.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="49.8938%" y="645" width="0.0251%" height="15" fill="rgb(220,221,18)" fg:x="61548" fg:w="31"/><text x="50.1438%" y="655.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="49.8970%" y="629" width="0.0219%" height="15" fill="rgb(238,92,8)" fg:x="61552" fg:w="27"/><text x="50.1470%" y="639.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="49.8970%" y="613" width="0.0219%" height="15" fill="rgb(222,164,16)" fg:x="61552" fg:w="27"/><text x="50.1470%" y="623.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="49.9043%" y="597" width="0.0146%" height="15" fill="rgb(241,119,3)" fg:x="61561" fg:w="18"/><text x="50.1543%" y="607.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="49.9052%" y="581" width="0.0138%" height="15" fill="rgb(241,44,8)" fg:x="61562" fg:w="17"/><text x="50.1552%" y="591.50"></text></g><g><title>_int_malloc (27 samples, 0.02%)</title><rect x="49.9189%" y="693" width="0.0219%" height="15" fill="rgb(230,36,40)" fg:x="61579" fg:w="27"/><text x="50.1689%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (6,067 samples, 4.92%)</title><rect x="45.0234%" y="869" width="4.9182%" height="15" fill="rgb(243,16,36)" fg:x="55540" fg:w="6067"/><text x="45.2734%" y="879.50">void U..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,058 samples, 4.91%)</title><rect x="45.0307%" y="853" width="4.9109%" height="15" fill="rgb(231,4,26)" fg:x="55549" fg:w="6058"/><text x="45.2807%" y="863.50">std::s..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,058 samples, 4.91%)</title><rect x="45.0307%" y="837" width="4.9109%" height="15" fill="rgb(240,9,31)" fg:x="55549" fg:w="6058"/><text x="45.2807%" y="847.50">std::s..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,058 samples, 4.91%)</title><rect x="45.0307%" y="821" width="4.9109%" height="15" fill="rgb(207,173,15)" fg:x="55549" fg:w="6058"/><text x="45.2807%" y="831.50">std::_..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,058 samples, 4.91%)</title><rect x="45.0307%" y="805" width="4.9109%" height="15" fill="rgb(224,192,53)" fg:x="55549" fg:w="6058"/><text x="45.2807%" y="815.50">std::_..</text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (72 samples, 0.06%)</title><rect x="49.8833%" y="789" width="0.0584%" height="15" fill="rgb(223,67,28)" fg:x="61535" fg:w="72"/><text x="50.1333%" y="799.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (72 samples, 0.06%)</title><rect x="49.8833%" y="773" width="0.0584%" height="15" fill="rgb(211,20,47)" fg:x="61535" fg:w="72"/><text x="50.1333%" y="783.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (72 samples, 0.06%)</title><rect x="49.8833%" y="757" width="0.0584%" height="15" fill="rgb(240,228,2)" fg:x="61535" fg:w="72"/><text x="50.1333%" y="767.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (72 samples, 0.06%)</title><rect x="49.8833%" y="741" width="0.0584%" height="15" fill="rgb(248,151,12)" fg:x="61535" fg:w="72"/><text x="50.1333%" y="751.50"></text></g><g><title>operator new (71 samples, 0.06%)</title><rect x="49.8841%" y="725" width="0.0576%" height="15" fill="rgb(244,8,39)" fg:x="61536" fg:w="71"/><text x="50.1341%" y="735.50"></text></g><g><title>malloc (71 samples, 0.06%)</title><rect x="49.8841%" y="709" width="0.0576%" height="15" fill="rgb(222,26,8)" fg:x="61536" fg:w="71"/><text x="50.1341%" y="719.50"></text></g><g><title>ProcessMessage (6,216 samples, 5.04%)</title><rect x="44.9156%" y="1109" width="5.0390%" height="15" fill="rgb(213,106,44)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="1119.50">Proces..</text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (6,216 samples, 5.04%)</title><rect x="44.9156%" y="1093" width="5.0390%" height="15" fill="rgb(214,129,20)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="1103.50">DataSt..</text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (6,216 samples, 5.04%)</title><rect x="44.9156%" y="1077" width="5.0390%" height="15" fill="rgb(212,32,13)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="1087.50">void U..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (6,216 samples, 5.04%)</title><rect x="44.9156%" y="1061" width="5.0390%" height="15" fill="rgb(208,168,33)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="1071.50">void P..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (6,216 samples, 5.04%)</title><rect x="44.9156%" y="1045" width="5.0390%" height="15" fill="rgb(231,207,8)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="1055.50">void U..</text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,216 samples, 5.04%)</title><rect x="44.9156%" y="1029" width="5.0390%" height="15" fill="rgb(235,219,23)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="1039.50">void C..</text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,216 samples, 5.04%)</title><rect x="44.9156%" y="1013" width="5.0390%" height="15" fill="rgb(226,216,26)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="1023.50">void C..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (6,216 samples, 5.04%)</title><rect x="44.9156%" y="997" width="5.0390%" height="15" fill="rgb(239,137,16)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="1007.50">void C..</text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (6,216 samples, 5.04%)</title><rect x="44.9156%" y="981" width="5.0390%" height="15" fill="rgb(207,12,36)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="991.50">void A..</text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (6,216 samples, 5.04%)</title><rect x="44.9156%" y="965" width="5.0390%" height="15" fill="rgb(210,214,24)" fg:x="55407" fg:w="6216"/><text x="45.1656%" y="975.50">void U..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (6,215 samples, 5.04%)</title><rect x="44.9164%" y="949" width="5.0382%" height="15" fill="rgb(206,56,30)" fg:x="55408" fg:w="6215"/><text x="45.1664%" y="959.50">void U..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (6,215 samples, 5.04%)</title><rect x="44.9164%" y="933" width="5.0382%" height="15" fill="rgb(228,143,26)" fg:x="55408" fg:w="6215"/><text x="45.1664%" y="943.50">void U..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,215 samples, 5.04%)</title><rect x="44.9164%" y="917" width="5.0382%" height="15" fill="rgb(216,218,46)" fg:x="55408" fg:w="6215"/><text x="45.1664%" y="927.50">void W..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6,210 samples, 5.03%)</title><rect x="44.9205%" y="901" width="5.0341%" height="15" fill="rgb(206,6,19)" fg:x="55413" fg:w="6210"/><text x="45.1705%" y="911.50">void V..</text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (6,182 samples, 5.01%)</title><rect x="44.9432%" y="885" width="5.0114%" height="15" fill="rgb(239,177,51)" fg:x="55441" fg:w="6182"/><text x="45.1932%" y="895.50">void D..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (15 samples, 0.01%)</title><rect x="49.9424%" y="869" width="0.0122%" height="15" fill="rgb(216,55,25)" fg:x="61608" fg:w="15"/><text x="50.1924%" y="879.50"></text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::~optional (81 samples, 0.07%)</title><rect x="49.9700%" y="1109" width="0.0657%" height="15" fill="rgb(231,163,29)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="1119.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::~_Optional_base (81 samples, 0.07%)</title><rect x="49.9700%" y="1093" width="0.0657%" height="15" fill="rgb(232,149,50)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::~_Optional_payload (81 samples, 0.07%)</title><rect x="49.9700%" y="1077" width="0.0657%" height="15" fill="rgb(223,142,48)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_reset (81 samples, 0.07%)</title><rect x="49.9700%" y="1061" width="0.0657%" height="15" fill="rgb(245,83,23)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_destroy (81 samples, 0.07%)</title><rect x="49.9700%" y="1045" width="0.0657%" height="15" fill="rgb(224,63,2)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="1055.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::~pair (81 samples, 0.07%)</title><rect x="49.9700%" y="1029" width="0.0657%" height="15" fill="rgb(218,65,53)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="1039.50"></text></g><g><title>CNetMessage::~CNetMessage (81 samples, 0.07%)</title><rect x="49.9700%" y="1013" width="0.0657%" height="15" fill="rgb(221,84,29)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="1023.50"></text></g><g><title>DataStream::~DataStream (81 samples, 0.07%)</title><rect x="49.9700%" y="997" width="0.0657%" height="15" fill="rgb(234,0,32)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="1007.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (81 samples, 0.07%)</title><rect x="49.9700%" y="981" width="0.0657%" height="15" fill="rgb(206,20,16)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="991.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (81 samples, 0.07%)</title><rect x="49.9700%" y="965" width="0.0657%" height="15" fill="rgb(244,172,18)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="975.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (81 samples, 0.07%)</title><rect x="49.9700%" y="949" width="0.0657%" height="15" fill="rgb(254,133,1)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="959.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (81 samples, 0.07%)</title><rect x="49.9700%" y="933" width="0.0657%" height="15" fill="rgb(222,206,41)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="943.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (81 samples, 0.07%)</title><rect x="49.9700%" y="917" width="0.0657%" height="15" fill="rgb(212,3,42)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="927.50"></text></g><g><title>memory_cleanse (81 samples, 0.07%)</title><rect x="49.9700%" y="901" width="0.0657%" height="15" fill="rgb(241,11,4)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="911.50"></text></g><g><title>memory_cleanse (81 samples, 0.07%)</title><rect x="49.9700%" y="885" width="0.0657%" height="15" fill="rgb(205,19,26)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="895.50"></text></g><g><title>__memset_avx512_unaligned_erms (81 samples, 0.07%)</title><rect x="49.9700%" y="869" width="0.0657%" height="15" fill="rgb(210,179,32)" fg:x="61642" fg:w="81"/><text x="50.2200%" y="879.50"></text></g><g><title>__clone (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1285" width="40.1539%" height="15" fill="rgb(227,116,49)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1295.50">__clone</text></g><g><title>start_thread (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1269" width="40.1539%" height="15" fill="rgb(211,146,6)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1279.50">start_thread</text></g><g><title>execute_native_thread_routine (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1253" width="40.1539%" height="15" fill="rgb(219,44,39)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1263.50">execute_native_thread_routine</text></g><g><title>_M_run (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1237" width="40.1539%" height="15" fill="rgb(234,128,11)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1247.50">_M_run</text></g><g><title>operator (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1221" width="40.1539%" height="15" fill="rgb(220,183,53)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1231.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1205" width="40.1539%" height="15" fill="rgb(213,219,32)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1215.50">_M_invoke&lt;0, 1, 2&gt;</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1189" width="40.1539%" height="15" fill="rgb(232,156,16)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1199.50">__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1173" width="40.1539%" height="15" fill="rgb(246,135,34)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1183.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)..</text></g><g><title>util::TraceThread (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1157" width="40.1539%" height="15" fill="rgb(241,99,0)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1167.50">util::TraceThread</text></g><g><title>std::function&lt;void ()&gt;::operator (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1141" width="40.1539%" height="15" fill="rgb(222,103,45)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1151.50">std::function&lt;void ()&gt;::operator</text></g><g><title>CConnman::ThreadMessageHandler (49,533 samples, 40.15%)</title><rect x="9.9037%" y="1125" width="40.1539%" height="15" fill="rgb(212,57,4)" fg:x="12217" fg:w="49533"/><text x="10.1537%" y="1135.50">CConnman::ThreadMessageHandler</text></g><g><title>void (anonymous namespace)::PeerManagerImpl::MakeAndPushMessage&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (24 samples, 0.02%)</title><rect x="50.0381%" y="1109" width="0.0195%" height="15" fill="rgb(215,68,47)" fg:x="61726" fg:w="24"/><text x="50.2881%" y="1119.50"></text></g><g><title>CConnman::PushMessage (24 samples, 0.02%)</title><rect x="50.0381%" y="1093" width="0.0195%" height="15" fill="rgb(230,84,2)" fg:x="61726" fg:w="24"/><text x="50.2881%" y="1103.50"></text></g><g><title>CConnman::SocketSendData (21 samples, 0.02%)</title><rect x="50.0405%" y="1077" width="0.0170%" height="15" fill="rgb(220,102,14)" fg:x="61729" fg:w="21"/><text x="50.2905%" y="1087.50"></text></g><g><title>__send (20 samples, 0.02%)</title><rect x="50.0413%" y="1061" width="0.0162%" height="15" fill="rgb(240,10,32)" fg:x="61730" fg:w="20"/><text x="50.2913%" y="1071.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="50.0413%" y="1045" width="0.0162%" height="15" fill="rgb(215,47,27)" fg:x="61730" fg:w="20"/><text x="50.2913%" y="1055.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="50.0413%" y="1029" width="0.0162%" height="15" fill="rgb(233,188,43)" fg:x="61730" fg:w="20"/><text x="50.2913%" y="1039.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="50.0413%" y="1013" width="0.0162%" height="15" fill="rgb(253,190,1)" fg:x="61730" fg:w="20"/><text x="50.2913%" y="1023.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="50.0413%" y="997" width="0.0162%" height="15" fill="rgb(206,114,52)" fg:x="61730" fg:w="20"/><text x="50.2913%" y="1007.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="50.0413%" y="981" width="0.0162%" height="15" fill="rgb(233,120,37)" fg:x="61730" fg:w="20"/><text x="50.2913%" y="991.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="50.0413%" y="965" width="0.0162%" height="15" fill="rgb(214,52,39)" fg:x="61730" fg:w="20"/><text x="50.2913%" y="975.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="50.0422%" y="949" width="0.0154%" height="15" fill="rgb(223,80,29)" fg:x="61731" fg:w="19"/><text x="50.2922%" y="959.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="50.0430%" y="933" width="0.0146%" height="15" fill="rgb(230,101,40)" fg:x="61732" fg:w="18"/><text x="50.2930%" y="943.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="50.0438%" y="917" width="0.0138%" height="15" fill="rgb(219,211,8)" fg:x="61733" fg:w="17"/><text x="50.2938%" y="927.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="50.0454%" y="901" width="0.0122%" height="15" fill="rgb(252,126,28)" fg:x="61735" fg:w="15"/><text x="50.2954%" y="911.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="50.0454%" y="885" width="0.0122%" height="15" fill="rgb(215,56,38)" fg:x="61735" fg:w="15"/><text x="50.2954%" y="895.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="50.0462%" y="869" width="0.0113%" height="15" fill="rgb(249,55,44)" fg:x="61736" fg:w="14"/><text x="50.2962%" y="879.50"></text></g><g><title>__io_vtables (17 samples, 0.01%)</title><rect x="50.0576%" y="1285" width="0.0138%" height="15" fill="rgb(220,221,32)" fg:x="61750" fg:w="17"/><text x="50.3076%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (80 samples, 0.06%)</title><rect x="50.0730%" y="1285" width="0.0649%" height="15" fill="rgb(212,216,41)" fg:x="61769" fg:w="80"/><text x="50.3230%" y="1295.50"></text></g><g><title>__memmove_avx512_unaligned_erms (21 samples, 0.02%)</title><rect x="50.1378%" y="1285" width="0.0170%" height="15" fill="rgb(228,213,43)" fg:x="61849" fg:w="21"/><text x="50.3878%" y="1295.50"></text></g><g><title>_int_free (37 samples, 0.03%)</title><rect x="50.1597%" y="1285" width="0.0300%" height="15" fill="rgb(211,31,26)" fg:x="61876" fg:w="37"/><text x="50.4097%" y="1295.50"></text></g><g><title>_int_malloc (152 samples, 0.12%)</title><rect x="50.1913%" y="1285" width="0.1232%" height="15" fill="rgb(229,202,19)" fg:x="61915" fg:w="152"/><text x="50.4413%" y="1295.50"></text></g><g><title>cfree@GLIBC_2.2.5 (15 samples, 0.01%)</title><rect x="50.3178%" y="1285" width="0.0122%" height="15" fill="rgb(229,105,46)" fg:x="62071" fg:w="15"/><text x="50.5678%" y="1295.50"></text></g><g><title>_mm_crc32_u64 (67 samples, 0.05%)</title><rect x="50.3996%" y="1269" width="0.0543%" height="15" fill="rgb(235,108,1)" fg:x="62172" fg:w="67"/><text x="50.6496%" y="1279.50"></text></g><g><title>crc32c::ExtendSse42 (155 samples, 0.13%)</title><rect x="50.3307%" y="1285" width="0.1257%" height="15" fill="rgb(245,111,35)" fg:x="62087" fg:w="155"/><text x="50.5807%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (232 samples, 0.19%)</title><rect x="50.4596%" y="1285" width="0.1881%" height="15" fill="rgb(219,185,31)" fg:x="62246" fg:w="232"/><text x="50.7096%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (45 samples, 0.04%)</title><rect x="50.7020%" y="1253" width="0.0365%" height="15" fill="rgb(214,4,43)" fg:x="62545" fg:w="45"/><text x="50.9520%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (32 samples, 0.03%)</title><rect x="50.7426%" y="1253" width="0.0259%" height="15" fill="rgb(235,227,40)" fg:x="62595" fg:w="32"/><text x="50.9926%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (163 samples, 0.13%)</title><rect x="50.6477%" y="1285" width="0.1321%" height="15" fill="rgb(230,88,30)" fg:x="62478" fg:w="163"/><text x="50.8977%" y="1295.50"></text></g><g><title>leveldb::Slice::compare (98 samples, 0.08%)</title><rect x="50.7004%" y="1269" width="0.0794%" height="15" fill="rgb(216,217,1)" fg:x="62543" fg:w="98"/><text x="50.9504%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::Seek (20 samples, 0.02%)</title><rect x="50.7912%" y="1285" width="0.0162%" height="15" fill="rgb(248,139,50)" fg:x="62655" fg:w="20"/><text x="51.0412%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (201 samples, 0.16%)</title><rect x="50.8390%" y="1285" width="0.1629%" height="15" fill="rgb(233,1,21)" fg:x="62714" fg:w="201"/><text x="51.0890%" y="1295.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (51 samples, 0.04%)</title><rect x="51.0174%" y="1285" width="0.0413%" height="15" fill="rgb(215,183,12)" fg:x="62934" fg:w="51"/><text x="51.2674%" y="1295.50"></text></g><g><title>leveldb::Table::InternalGet (18 samples, 0.01%)</title><rect x="51.0887%" y="1285" width="0.0146%" height="15" fill="rgb(229,104,42)" fg:x="63022" fg:w="18"/><text x="51.3387%" y="1295.50"></text></g><g><title>malloc (39 samples, 0.03%)</title><rect x="51.1106%" y="1285" width="0.0316%" height="15" fill="rgb(243,34,48)" fg:x="63049" fg:w="39"/><text x="51.3606%" y="1295.50"></text></g><g><title>malloc_consolidate (19 samples, 0.02%)</title><rect x="51.1430%" y="1285" width="0.0154%" height="15" fill="rgb(239,11,44)" fg:x="63089" fg:w="19"/><text x="51.3930%" y="1295.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (32 samples, 0.03%)</title><rect x="51.1884%" y="773" width="0.0259%" height="15" fill="rgb(231,98,35)" fg:x="63145" fg:w="32"/><text x="51.4384%" y="783.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (32 samples, 0.03%)</title><rect x="51.1884%" y="757" width="0.0259%" height="15" fill="rgb(233,28,25)" fg:x="63145" fg:w="32"/><text x="51.4384%" y="767.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (32 samples, 0.03%)</title><rect x="51.1884%" y="741" width="0.0259%" height="15" fill="rgb(234,123,11)" fg:x="63145" fg:w="32"/><text x="51.4384%" y="751.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (32 samples, 0.03%)</title><rect x="51.1884%" y="725" width="0.0259%" height="15" fill="rgb(220,69,3)" fg:x="63145" fg:w="32"/><text x="51.4384%" y="735.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (32 samples, 0.03%)</title><rect x="51.1884%" y="709" width="0.0259%" height="15" fill="rgb(214,64,36)" fg:x="63145" fg:w="32"/><text x="51.4384%" y="719.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (36 samples, 0.03%)</title><rect x="51.1860%" y="821" width="0.0292%" height="15" fill="rgb(211,138,32)" fg:x="63142" fg:w="36"/><text x="51.4360%" y="831.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (36 samples, 0.03%)</title><rect x="51.1860%" y="805" width="0.0292%" height="15" fill="rgb(213,118,47)" fg:x="63142" fg:w="36"/><text x="51.4360%" y="815.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (36 samples, 0.03%)</title><rect x="51.1860%" y="789" width="0.0292%" height="15" fill="rgb(243,124,49)" fg:x="63142" fg:w="36"/><text x="51.4360%" y="799.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (57 samples, 0.05%)</title><rect x="51.1852%" y="917" width="0.0462%" height="15" fill="rgb(221,30,28)" fg:x="63141" fg:w="57"/><text x="51.4352%" y="927.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (57 samples, 0.05%)</title><rect x="51.1852%" y="901" width="0.0462%" height="15" fill="rgb(246,37,13)" fg:x="63141" fg:w="57"/><text x="51.4352%" y="911.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (57 samples, 0.05%)</title><rect x="51.1852%" y="885" width="0.0462%" height="15" fill="rgb(249,66,14)" fg:x="63141" fg:w="57"/><text x="51.4352%" y="895.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (57 samples, 0.05%)</title><rect x="51.1852%" y="869" width="0.0462%" height="15" fill="rgb(213,166,5)" fg:x="63141" fg:w="57"/><text x="51.4352%" y="879.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (56 samples, 0.05%)</title><rect x="51.1860%" y="853" width="0.0454%" height="15" fill="rgb(221,66,24)" fg:x="63142" fg:w="56"/><text x="51.4360%" y="863.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (56 samples, 0.05%)</title><rect x="51.1860%" y="837" width="0.0454%" height="15" fill="rgb(210,132,17)" fg:x="63142" fg:w="56"/><text x="51.4360%" y="847.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (20 samples, 0.02%)</title><rect x="51.2152%" y="821" width="0.0162%" height="15" fill="rgb(243,202,5)" fg:x="63178" fg:w="20"/><text x="51.4652%" y="831.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (20 samples, 0.02%)</title><rect x="51.2152%" y="805" width="0.0162%" height="15" fill="rgb(233,70,48)" fg:x="63178" fg:w="20"/><text x="51.4652%" y="815.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (20 samples, 0.02%)</title><rect x="51.2152%" y="789" width="0.0162%" height="15" fill="rgb(238,41,26)" fg:x="63178" fg:w="20"/><text x="51.4652%" y="799.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (86 samples, 0.07%)</title><rect x="51.1730%" y="1269" width="0.0697%" height="15" fill="rgb(241,19,31)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1279.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1253" width="0.0697%" height="15" fill="rgb(214,76,10)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1263.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1237" width="0.0697%" height="15" fill="rgb(254,202,22)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1247.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1221" width="0.0697%" height="15" fill="rgb(214,72,24)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1231.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1205" width="0.0697%" height="15" fill="rgb(221,92,46)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1215.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1189" width="0.0697%" height="15" fill="rgb(246,13,50)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1199.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1173" width="0.0697%" height="15" fill="rgb(240,165,38)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1183.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1157" width="0.0697%" height="15" fill="rgb(241,24,51)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1167.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1141" width="0.0697%" height="15" fill="rgb(227,51,44)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1151.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1125" width="0.0697%" height="15" fill="rgb(231,121,3)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1135.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (86 samples, 0.07%)</title><rect x="51.1730%" y="1109" width="0.0697%" height="15" fill="rgb(245,3,41)" fg:x="63126" fg:w="86"/><text x="51.4230%" y="1119.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="1093" width="0.0673%" height="15" fill="rgb(214,13,26)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="1103.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="1077" width="0.0673%" height="15" fill="rgb(252,75,11)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="1087.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="1061" width="0.0673%" height="15" fill="rgb(218,226,17)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="1071.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="1045" width="0.0673%" height="15" fill="rgb(248,89,38)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="1055.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="1029" width="0.0673%" height="15" fill="rgb(237,73,46)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="1039.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="1013" width="0.0673%" height="15" fill="rgb(242,78,33)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="1023.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="997" width="0.0673%" height="15" fill="rgb(235,60,3)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="981" width="0.0673%" height="15" fill="rgb(216,172,19)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="991.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="965" width="0.0673%" height="15" fill="rgb(227,6,42)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="975.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (83 samples, 0.07%)</title><rect x="51.1754%" y="949" width="0.0673%" height="15" fill="rgb(223,207,42)" fg:x="63129" fg:w="83"/><text x="51.4254%" y="959.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (76 samples, 0.06%)</title><rect x="51.1811%" y="933" width="0.0616%" height="15" fill="rgb(246,138,30)" fg:x="63136" fg:w="76"/><text x="51.4311%" y="943.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (91 samples, 0.07%)</title><rect x="51.1730%" y="1285" width="0.0738%" height="15" fill="rgb(251,199,47)" fg:x="63126" fg:w="91"/><text x="51.4230%" y="1295.50"></text></g><g><title>operator new (15 samples, 0.01%)</title><rect x="51.2516%" y="1285" width="0.0122%" height="15" fill="rgb(228,218,44)" fg:x="63223" fg:w="15"/><text x="51.5016%" y="1295.50"></text></g><g><title>ShiftMessageB (21 samples, 0.02%)</title><rect x="51.2824%" y="1269" width="0.0170%" height="15" fill="rgb(220,68,6)" fg:x="63261" fg:w="21"/><text x="51.5324%" y="1279.50"></text></g><g><title>ShiftMessageC (17 samples, 0.01%)</title><rect x="51.2857%" y="1253" width="0.0138%" height="15" fill="rgb(240,60,26)" fg:x="63265" fg:w="17"/><text x="51.5357%" y="1263.50"></text></g><g><title>sha256_x86_shani::Transform (37 samples, 0.03%)</title><rect x="51.2703%" y="1285" width="0.0300%" height="15" fill="rgb(211,200,19)" fg:x="63246" fg:w="37"/><text x="51.5203%" y="1295.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (28 samples, 0.02%)</title><rect x="51.3116%" y="1285" width="0.0227%" height="15" fill="rgb(242,145,30)" fg:x="63297" fg:w="28"/><text x="51.5616%" y="1295.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (53 samples, 0.04%)</title><rect x="51.3400%" y="1285" width="0.0430%" height="15" fill="rgb(225,64,13)" fg:x="63332" fg:w="53"/><text x="51.5900%" y="1295.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (53 samples, 0.04%)</title><rect x="51.3400%" y="1269" width="0.0430%" height="15" fill="rgb(218,103,35)" fg:x="63332" fg:w="53"/><text x="51.5900%" y="1279.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (51 samples, 0.04%)</title><rect x="51.3416%" y="1253" width="0.0413%" height="15" fill="rgb(216,93,46)" fg:x="63334" fg:w="51"/><text x="51.5916%" y="1263.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (49 samples, 0.04%)</title><rect x="51.3432%" y="1237" width="0.0397%" height="15" fill="rgb(225,159,27)" fg:x="63336" fg:w="49"/><text x="51.5932%" y="1247.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (49 samples, 0.04%)</title><rect x="51.3432%" y="1221" width="0.0397%" height="15" fill="rgb(225,204,11)" fg:x="63336" fg:w="49"/><text x="51.5932%" y="1231.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (49 samples, 0.04%)</title><rect x="51.3432%" y="1205" width="0.0397%" height="15" fill="rgb(205,56,4)" fg:x="63336" fg:w="49"/><text x="51.5932%" y="1215.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (49 samples, 0.04%)</title><rect x="51.3432%" y="1189" width="0.0397%" height="15" fill="rgb(206,6,35)" fg:x="63336" fg:w="49"/><text x="51.5932%" y="1199.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (49 samples, 0.04%)</title><rect x="51.3432%" y="1173" width="0.0397%" height="15" fill="rgb(247,73,52)" fg:x="63336" fg:w="49"/><text x="51.5932%" y="1183.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (49 samples, 0.04%)</title><rect x="51.3432%" y="1157" width="0.0397%" height="15" fill="rgb(246,97,4)" fg:x="63336" fg:w="49"/><text x="51.5932%" y="1167.50"></text></g><g><title>Coin::~Coin (44 samples, 0.04%)</title><rect x="51.3473%" y="1141" width="0.0357%" height="15" fill="rgb(212,37,15)" fg:x="63341" fg:w="44"/><text x="51.5973%" y="1151.50"></text></g><g><title>CTxOut::~CTxOut (44 samples, 0.04%)</title><rect x="51.3473%" y="1125" width="0.0357%" height="15" fill="rgb(208,130,40)" fg:x="63341" fg:w="44"/><text x="51.5973%" y="1135.50"></text></g><g><title>CScript::~CScript (44 samples, 0.04%)</title><rect x="51.3473%" y="1109" width="0.0357%" height="15" fill="rgb(236,55,29)" fg:x="63341" fg:w="44"/><text x="51.5973%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (44 samples, 0.04%)</title><rect x="51.3473%" y="1093" width="0.0357%" height="15" fill="rgb(209,156,45)" fg:x="63341" fg:w="44"/><text x="51.5973%" y="1103.50"></text></g><g><title>_IO_fwrite (13 samples, 0.01%)</title><rect x="51.4243%" y="1269" width="0.0105%" height="15" fill="rgb(249,107,4)" fg:x="63436" fg:w="13"/><text x="51.6743%" y="1279.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (16 samples, 0.01%)</title><rect x="51.4235%" y="1285" width="0.0130%" height="15" fill="rgb(227,7,13)" fg:x="63435" fg:w="16"/><text x="51.6735%" y="1295.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (19 samples, 0.02%)</title><rect x="51.4365%" y="1285" width="0.0154%" height="15" fill="rgb(250,129,14)" fg:x="63451" fg:w="19"/><text x="51.6865%" y="1295.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (14 samples, 0.01%)</title><rect x="51.4405%" y="1269" width="0.0113%" height="15" fill="rgb(229,92,13)" fg:x="63456" fg:w="14"/><text x="51.6905%" y="1279.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (24 samples, 0.02%)</title><rect x="51.4527%" y="1285" width="0.0195%" height="15" fill="rgb(245,98,39)" fg:x="63471" fg:w="24"/><text x="51.7027%" y="1295.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.04%)</title><rect x="51.4867%" y="1285" width="0.0389%" height="15" fill="rgb(234,135,48)" fg:x="63513" fg:w="48"/><text x="51.7367%" y="1295.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt;&amp;&amp;) (19 samples, 0.02%)</title><rect x="51.5337%" y="1269" width="0.0154%" height="15" fill="rgb(230,98,28)" fg:x="63571" fg:w="19"/><text x="51.7837%" y="1279.50"></text></g><g><title>void Unserialize&lt;DataStream, unsigned char&gt; (19 samples, 0.02%)</title><rect x="51.5337%" y="1253" width="0.0154%" height="15" fill="rgb(223,121,0)" fg:x="63571" fg:w="19"/><text x="51.7837%" y="1263.50"></text></g><g><title>DataStream::read (19 samples, 0.02%)</title><rect x="51.5337%" y="1237" width="0.0154%" height="15" fill="rgb(234,173,33)" fg:x="63571" fg:w="19"/><text x="51.7837%" y="1247.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (43 samples, 0.03%)</title><rect x="51.5273%" y="1285" width="0.0349%" height="15" fill="rgb(245,47,8)" fg:x="63563" fg:w="43"/><text x="51.7773%" y="1295.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (45 samples, 0.04%)</title><rect x="51.5783%" y="1125" width="0.0365%" height="15" fill="rgb(205,17,20)" fg:x="63626" fg:w="45"/><text x="51.8283%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (45 samples, 0.04%)</title><rect x="51.5783%" y="1109" width="0.0365%" height="15" fill="rgb(232,151,16)" fg:x="63626" fg:w="45"/><text x="51.8283%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (45 samples, 0.04%)</title><rect x="51.5783%" y="1093" width="0.0365%" height="15" fill="rgb(208,30,32)" fg:x="63626" fg:w="45"/><text x="51.8283%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (45 samples, 0.04%)</title><rect x="51.5783%" y="1077" width="0.0365%" height="15" fill="rgb(254,26,3)" fg:x="63626" fg:w="45"/><text x="51.8283%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (45 samples, 0.04%)</title><rect x="51.5783%" y="1061" width="0.0365%" height="15" fill="rgb(240,177,30)" fg:x="63626" fg:w="45"/><text x="51.8283%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (28 samples, 0.02%)</title><rect x="51.5921%" y="1045" width="0.0227%" height="15" fill="rgb(248,76,44)" fg:x="63643" fg:w="28"/><text x="51.8421%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (28 samples, 0.02%)</title><rect x="51.5921%" y="1029" width="0.0227%" height="15" fill="rgb(241,186,54)" fg:x="63643" fg:w="28"/><text x="51.8421%" y="1039.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.02%)</title><rect x="51.5921%" y="1013" width="0.0227%" height="15" fill="rgb(249,171,29)" fg:x="63643" fg:w="28"/><text x="51.8421%" y="1023.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.02%)</title><rect x="51.5921%" y="997" width="0.0227%" height="15" fill="rgb(237,151,44)" fg:x="63643" fg:w="28"/><text x="51.8421%" y="1007.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (28 samples, 0.02%)</title><rect x="51.5921%" y="981" width="0.0227%" height="15" fill="rgb(228,174,30)" fg:x="63643" fg:w="28"/><text x="51.8421%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (28 samples, 0.02%)</title><rect x="51.5921%" y="965" width="0.0227%" height="15" fill="rgb(252,14,37)" fg:x="63643" fg:w="28"/><text x="51.8421%" y="975.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (28 samples, 0.02%)</title><rect x="51.5921%" y="949" width="0.0227%" height="15" fill="rgb(207,111,40)" fg:x="63643" fg:w="28"/><text x="51.8421%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (16 samples, 0.01%)</title><rect x="51.6018%" y="933" width="0.0130%" height="15" fill="rgb(248,171,54)" fg:x="63655" fg:w="16"/><text x="51.8518%" y="943.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="51.6018%" y="917" width="0.0130%" height="15" fill="rgb(211,127,2)" fg:x="63655" fg:w="16"/><text x="51.8518%" y="927.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.01%)</title><rect x="51.6018%" y="901" width="0.0130%" height="15" fill="rgb(236,87,47)" fg:x="63655" fg:w="16"/><text x="51.8518%" y="911.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (16 samples, 0.01%)</title><rect x="51.6018%" y="885" width="0.0130%" height="15" fill="rgb(223,190,45)" fg:x="63655" fg:w="16"/><text x="51.8518%" y="895.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (16 samples, 0.01%)</title><rect x="51.6018%" y="869" width="0.0130%" height="15" fill="rgb(215,5,16)" fg:x="63655" fg:w="16"/><text x="51.8518%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (16 samples, 0.01%)</title><rect x="51.6018%" y="853" width="0.0130%" height="15" fill="rgb(252,82,33)" fg:x="63655" fg:w="16"/><text x="51.8518%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (16 samples, 0.01%)</title><rect x="51.6018%" y="837" width="0.0130%" height="15" fill="rgb(247,213,44)" fg:x="63655" fg:w="16"/><text x="51.8518%" y="847.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (41 samples, 0.03%)</title><rect x="51.6148%" y="1125" width="0.0332%" height="15" fill="rgb(205,196,44)" fg:x="63671" fg:w="41"/><text x="51.8648%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (41 samples, 0.03%)</title><rect x="51.6148%" y="1109" width="0.0332%" height="15" fill="rgb(237,96,54)" fg:x="63671" fg:w="41"/><text x="51.8648%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.03%)</title><rect x="51.6148%" y="1093" width="0.0332%" height="15" fill="rgb(230,113,34)" fg:x="63671" fg:w="41"/><text x="51.8648%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.03%)</title><rect x="51.6148%" y="1077" width="0.0332%" height="15" fill="rgb(221,224,12)" fg:x="63671" fg:w="41"/><text x="51.8648%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (41 samples, 0.03%)</title><rect x="51.6148%" y="1061" width="0.0332%" height="15" fill="rgb(219,112,44)" fg:x="63671" fg:w="41"/><text x="51.8648%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (37 samples, 0.03%)</title><rect x="51.6181%" y="1045" width="0.0300%" height="15" fill="rgb(210,31,13)" fg:x="63675" fg:w="37"/><text x="51.8681%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (37 samples, 0.03%)</title><rect x="51.6181%" y="1029" width="0.0300%" height="15" fill="rgb(230,25,16)" fg:x="63675" fg:w="37"/><text x="51.8681%" y="1039.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (37 samples, 0.03%)</title><rect x="51.6181%" y="1013" width="0.0300%" height="15" fill="rgb(246,108,53)" fg:x="63675" fg:w="37"/><text x="51.8681%" y="1023.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (37 samples, 0.03%)</title><rect x="51.6181%" y="997" width="0.0300%" height="15" fill="rgb(241,172,50)" fg:x="63675" fg:w="37"/><text x="51.8681%" y="1007.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (37 samples, 0.03%)</title><rect x="51.6181%" y="981" width="0.0300%" height="15" fill="rgb(235,141,10)" fg:x="63675" fg:w="37"/><text x="51.8681%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (37 samples, 0.03%)</title><rect x="51.6181%" y="965" width="0.0300%" height="15" fill="rgb(220,174,43)" fg:x="63675" fg:w="37"/><text x="51.8681%" y="975.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (37 samples, 0.03%)</title><rect x="51.6181%" y="949" width="0.0300%" height="15" fill="rgb(215,181,40)" fg:x="63675" fg:w="37"/><text x="51.8681%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (33 samples, 0.03%)</title><rect x="51.6213%" y="933" width="0.0268%" height="15" fill="rgb(230,97,2)" fg:x="63679" fg:w="33"/><text x="51.8713%" y="943.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.03%)</title><rect x="51.6213%" y="917" width="0.0268%" height="15" fill="rgb(211,25,27)" fg:x="63679" fg:w="33"/><text x="51.8713%" y="927.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.03%)</title><rect x="51.6213%" y="901" width="0.0268%" height="15" fill="rgb(230,87,26)" fg:x="63679" fg:w="33"/><text x="51.8713%" y="911.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (33 samples, 0.03%)</title><rect x="51.6213%" y="885" width="0.0268%" height="15" fill="rgb(227,160,17)" fg:x="63679" fg:w="33"/><text x="51.8713%" y="895.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (33 samples, 0.03%)</title><rect x="51.6213%" y="869" width="0.0268%" height="15" fill="rgb(244,85,34)" fg:x="63679" fg:w="33"/><text x="51.8713%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (33 samples, 0.03%)</title><rect x="51.6213%" y="853" width="0.0268%" height="15" fill="rgb(207,70,0)" fg:x="63679" fg:w="33"/><text x="51.8713%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (33 samples, 0.03%)</title><rect x="51.6213%" y="837" width="0.0268%" height="15" fill="rgb(223,129,7)" fg:x="63679" fg:w="33"/><text x="51.8713%" y="847.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (40 samples, 0.03%)</title><rect x="51.6480%" y="1125" width="0.0324%" height="15" fill="rgb(246,105,7)" fg:x="63712" fg:w="40"/><text x="51.8980%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (40 samples, 0.03%)</title><rect x="51.6480%" y="1109" width="0.0324%" height="15" fill="rgb(215,154,42)" fg:x="63712" fg:w="40"/><text x="51.8980%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (40 samples, 0.03%)</title><rect x="51.6480%" y="1093" width="0.0324%" height="15" fill="rgb(220,215,30)" fg:x="63712" fg:w="40"/><text x="51.8980%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.03%)</title><rect x="51.6480%" y="1077" width="0.0324%" height="15" fill="rgb(228,81,51)" fg:x="63712" fg:w="40"/><text x="51.8980%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (40 samples, 0.03%)</title><rect x="51.6480%" y="1061" width="0.0324%" height="15" fill="rgb(247,71,54)" fg:x="63712" fg:w="40"/><text x="51.8980%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="51.6699%" y="1045" width="0.0105%" height="15" fill="rgb(234,176,34)" fg:x="63739" fg:w="13"/><text x="51.9199%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (13 samples, 0.01%)</title><rect x="51.6699%" y="1029" width="0.0105%" height="15" fill="rgb(241,103,54)" fg:x="63739" fg:w="13"/><text x="51.9199%" y="1039.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (157 samples, 0.13%)</title><rect x="51.5621%" y="1285" width="0.1273%" height="15" fill="rgb(228,22,34)" fg:x="63606" fg:w="157"/><text x="51.8121%" y="1295.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (157 samples, 0.13%)</title><rect x="51.5621%" y="1269" width="0.1273%" height="15" fill="rgb(241,179,48)" fg:x="63606" fg:w="157"/><text x="51.8121%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (157 samples, 0.13%)</title><rect x="51.5621%" y="1253" width="0.1273%" height="15" fill="rgb(235,167,37)" fg:x="63606" fg:w="157"/><text x="51.8121%" y="1263.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (157 samples, 0.13%)</title><rect x="51.5621%" y="1237" width="0.1273%" height="15" fill="rgb(213,109,30)" fg:x="63606" fg:w="157"/><text x="51.8121%" y="1247.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (157 samples, 0.13%)</title><rect x="51.5621%" y="1221" width="0.1273%" height="15" fill="rgb(222,172,16)" fg:x="63606" fg:w="157"/><text x="51.8121%" y="1231.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (154 samples, 0.12%)</title><rect x="51.5646%" y="1205" width="0.1248%" height="15" fill="rgb(233,192,5)" fg:x="63609" fg:w="154"/><text x="51.8146%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (154 samples, 0.12%)</title><rect x="51.5646%" y="1189" width="0.1248%" height="15" fill="rgb(247,189,41)" fg:x="63609" fg:w="154"/><text x="51.8146%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (152 samples, 0.12%)</title><rect x="51.5662%" y="1173" width="0.1232%" height="15" fill="rgb(218,134,47)" fg:x="63611" fg:w="152"/><text x="51.8162%" y="1183.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (152 samples, 0.12%)</title><rect x="51.5662%" y="1157" width="0.1232%" height="15" fill="rgb(216,29,3)" fg:x="63611" fg:w="152"/><text x="51.8162%" y="1167.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (152 samples, 0.12%)</title><rect x="51.5662%" y="1141" width="0.1232%" height="15" fill="rgb(246,140,12)" fg:x="63611" fg:w="152"/><text x="51.8162%" y="1151.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (25 samples, 0.02%)</title><rect x="51.7072%" y="1285" width="0.0203%" height="15" fill="rgb(230,136,11)" fg:x="63785" fg:w="25"/><text x="51.9572%" y="1295.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (17 samples, 0.01%)</title><rect x="51.7461%" y="1013" width="0.0138%" height="15" fill="rgb(247,22,47)" fg:x="63833" fg:w="17"/><text x="51.9961%" y="1023.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (16 samples, 0.01%)</title><rect x="51.7859%" y="981" width="0.0130%" height="15" fill="rgb(218,84,22)" fg:x="63882" fg:w="16"/><text x="52.0359%" y="991.50"></text></g><g><title>_int_malloc (16 samples, 0.01%)</title><rect x="51.7859%" y="965" width="0.0130%" height="15" fill="rgb(216,87,39)" fg:x="63882" fg:w="16"/><text x="52.0359%" y="975.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (80 samples, 0.06%)</title><rect x="51.7356%" y="1093" width="0.0649%" height="15" fill="rgb(221,178,8)" fg:x="63820" fg:w="80"/><text x="51.9856%" y="1103.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (80 samples, 0.06%)</title><rect x="51.7356%" y="1077" width="0.0649%" height="15" fill="rgb(230,42,11)" fg:x="63820" fg:w="80"/><text x="51.9856%" y="1087.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (80 samples, 0.06%)</title><rect x="51.7356%" y="1061" width="0.0649%" height="15" fill="rgb(237,229,4)" fg:x="63820" fg:w="80"/><text x="51.9856%" y="1071.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (80 samples, 0.06%)</title><rect x="51.7356%" y="1045" width="0.0649%" height="15" fill="rgb(222,31,33)" fg:x="63820" fg:w="80"/><text x="51.9856%" y="1055.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (80 samples, 0.06%)</title><rect x="51.7356%" y="1029" width="0.0649%" height="15" fill="rgb(210,17,39)" fg:x="63820" fg:w="80"/><text x="51.9856%" y="1039.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (35 samples, 0.03%)</title><rect x="51.7721%" y="1013" width="0.0284%" height="15" fill="rgb(244,93,20)" fg:x="63865" fg:w="35"/><text x="52.0221%" y="1023.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (35 samples, 0.03%)</title><rect x="51.7721%" y="997" width="0.0284%" height="15" fill="rgb(210,40,47)" fg:x="63865" fg:w="35"/><text x="52.0221%" y="1007.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (94 samples, 0.08%)</title><rect x="51.7315%" y="1141" width="0.0762%" height="15" fill="rgb(239,211,47)" fg:x="63815" fg:w="94"/><text x="51.9815%" y="1151.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (94 samples, 0.08%)</title><rect x="51.7315%" y="1125" width="0.0762%" height="15" fill="rgb(251,223,49)" fg:x="63815" fg:w="94"/><text x="51.9815%" y="1135.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (94 samples, 0.08%)</title><rect x="51.7315%" y="1109" width="0.0762%" height="15" fill="rgb(221,149,5)" fg:x="63815" fg:w="94"/><text x="51.9815%" y="1119.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.09%)</title><rect x="51.7315%" y="1205" width="0.0948%" height="15" fill="rgb(219,224,51)" fg:x="63815" fg:w="117"/><text x="51.9815%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.09%)</title><rect x="51.7315%" y="1189" width="0.0948%" height="15" fill="rgb(223,7,8)" fg:x="63815" fg:w="117"/><text x="51.9815%" y="1199.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.09%)</title><rect x="51.7315%" y="1173" width="0.0948%" height="15" fill="rgb(241,217,22)" fg:x="63815" fg:w="117"/><text x="51.9815%" y="1183.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (117 samples, 0.09%)</title><rect x="51.7315%" y="1157" width="0.0948%" height="15" fill="rgb(248,209,0)" fg:x="63815" fg:w="117"/><text x="51.9815%" y="1167.50"></text></g><g><title>malloc (21 samples, 0.02%)</title><rect x="51.8094%" y="1141" width="0.0170%" height="15" fill="rgb(217,205,4)" fg:x="63911" fg:w="21"/><text x="52.0594%" y="1151.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (118 samples, 0.10%)</title><rect x="51.7315%" y="1269" width="0.0957%" height="15" fill="rgb(228,124,39)" fg:x="63815" fg:w="118"/><text x="51.9815%" y="1279.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (118 samples, 0.10%)</title><rect x="51.7315%" y="1253" width="0.0957%" height="15" fill="rgb(250,116,42)" fg:x="63815" fg:w="118"/><text x="51.9815%" y="1263.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (118 samples, 0.10%)</title><rect x="51.7315%" y="1237" width="0.0957%" height="15" fill="rgb(223,202,9)" fg:x="63815" fg:w="118"/><text x="51.9815%" y="1247.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (118 samples, 0.10%)</title><rect x="51.7315%" y="1221" width="0.0957%" height="15" fill="rgb(242,222,40)" fg:x="63815" fg:w="118"/><text x="51.9815%" y="1231.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (125 samples, 0.10%)</title><rect x="51.7275%" y="1285" width="0.1013%" height="15" fill="rgb(229,99,46)" fg:x="63810" fg:w="125"/><text x="51.9775%" y="1295.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (15 samples, 0.01%)</title><rect x="51.8402%" y="1269" width="0.0122%" height="15" fill="rgb(225,56,46)" fg:x="63949" fg:w="15"/><text x="52.0902%" y="1279.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (15 samples, 0.01%)</title><rect x="51.8402%" y="1253" width="0.0122%" height="15" fill="rgb(227,94,5)" fg:x="63949" fg:w="15"/><text x="52.0902%" y="1263.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="51.8402%" y="1237" width="0.0122%" height="15" fill="rgb(205,112,38)" fg:x="63949" fg:w="15"/><text x="52.0902%" y="1247.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.01%)</title><rect x="51.8402%" y="1221" width="0.0122%" height="15" fill="rgb(231,133,46)" fg:x="63949" fg:w="15"/><text x="52.0902%" y="1231.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (15 samples, 0.01%)</title><rect x="51.8402%" y="1205" width="0.0122%" height="15" fill="rgb(217,16,9)" fg:x="63949" fg:w="15"/><text x="52.0902%" y="1215.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (15 samples, 0.01%)</title><rect x="51.8402%" y="1189" width="0.0122%" height="15" fill="rgb(249,173,9)" fg:x="63949" fg:w="15"/><text x="52.0902%" y="1199.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (15 samples, 0.01%)</title><rect x="51.8402%" y="1173" width="0.0122%" height="15" fill="rgb(205,163,53)" fg:x="63949" fg:w="15"/><text x="52.0902%" y="1183.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (29 samples, 0.02%)</title><rect x="51.8296%" y="1285" width="0.0235%" height="15" fill="rgb(217,54,41)" fg:x="63936" fg:w="29"/><text x="52.0796%" y="1295.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (21 samples, 0.02%)</title><rect x="51.8531%" y="1285" width="0.0170%" height="15" fill="rgb(228,216,12)" fg:x="63965" fg:w="21"/><text x="52.1031%" y="1295.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (75 samples, 0.06%)</title><rect x="51.8831%" y="1285" width="0.0608%" height="15" fill="rgb(244,228,15)" fg:x="64002" fg:w="75"/><text x="52.1331%" y="1295.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.02%)</title><rect x="51.9277%" y="1269" width="0.0162%" height="15" fill="rgb(221,176,53)" fg:x="64057" fg:w="20"/><text x="52.1777%" y="1279.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (17 samples, 0.01%)</title><rect x="51.9302%" y="1253" width="0.0138%" height="15" fill="rgb(205,94,34)" fg:x="64060" fg:w="17"/><text x="52.1802%" y="1263.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (52 samples, 0.04%)</title><rect x="51.9456%" y="1285" width="0.0422%" height="15" fill="rgb(213,110,48)" fg:x="64079" fg:w="52"/><text x="52.1956%" y="1295.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (54 samples, 0.04%)</title><rect x="51.9877%" y="1285" width="0.0438%" height="15" fill="rgb(236,142,28)" fg:x="64131" fg:w="54"/><text x="52.2377%" y="1295.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (13 samples, 0.01%)</title><rect x="52.0209%" y="1269" width="0.0105%" height="15" fill="rgb(225,135,29)" fg:x="64172" fg:w="13"/><text x="52.2709%" y="1279.50"></text></g><g><title>b-msghand (64,184 samples, 52.03%)</title><rect x="0.0113%" y="1301" width="52.0307%" height="15" fill="rgb(252,45,31)" fg:x="14" fg:w="64184"/><text x="0.2613%" y="1311.50">b-msghand</text></g><g><title>DataStream::resize (324 samples, 0.26%)</title><rect x="52.0428%" y="1237" width="0.2627%" height="15" fill="rgb(211,187,50)" fg:x="64199" fg:w="324"/><text x="52.2928%" y="1247.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::resize (324 samples, 0.26%)</title><rect x="52.0428%" y="1221" width="0.2627%" height="15" fill="rgb(229,109,7)" fg:x="64199" fg:w="324"/><text x="52.2928%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (324 samples, 0.26%)</title><rect x="52.0428%" y="1205" width="0.2627%" height="15" fill="rgb(251,131,51)" fg:x="64199" fg:w="324"/><text x="52.2928%" y="1215.50"></text></g><g><title>std::byte* std::__uninitialized_fill_n_a&lt;std::byte*, unsigned long, std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; (324 samples, 0.26%)</title><rect x="52.0428%" y="1189" width="0.2627%" height="15" fill="rgb(251,180,35)" fg:x="64199" fg:w="324"/><text x="52.2928%" y="1199.50"></text></g><g><title>decltype  (169 samples, 0.14%)</title><rect x="52.1685%" y="1173" width="0.1370%" height="15" fill="rgb(211,46,32)" fg:x="64354" fg:w="169"/><text x="52.4185%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (169 samples, 0.14%)</title><rect x="52.1685%" y="1157" width="0.1370%" height="15" fill="rgb(248,123,17)" fg:x="64354" fg:w="169"/><text x="52.4185%" y="1167.50"></text></g><g><title>decltype (169 samples, 0.14%)</title><rect x="52.1685%" y="1141" width="0.1370%" height="15" fill="rgb(227,141,18)" fg:x="64354" fg:w="169"/><text x="52.4185%" y="1151.50"></text></g><g><title>V2Transport::GetReceivedMessage (374 samples, 0.30%)</title><rect x="52.0420%" y="1253" width="0.3032%" height="15" fill="rgb(216,102,9)" fg:x="64198" fg:w="374"/><text x="52.2920%" y="1263.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (49 samples, 0.04%)</title><rect x="52.3055%" y="1237" width="0.0397%" height="15" fill="rgb(253,47,13)" fg:x="64523" fg:w="49"/><text x="52.5555%" y="1247.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (49 samples, 0.04%)</title><rect x="52.3055%" y="1221" width="0.0397%" height="15" fill="rgb(226,93,23)" fg:x="64523" fg:w="49"/><text x="52.5555%" y="1231.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (49 samples, 0.04%)</title><rect x="52.3055%" y="1205" width="0.0397%" height="15" fill="rgb(247,104,17)" fg:x="64523" fg:w="49"/><text x="52.5555%" y="1215.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (49 samples, 0.04%)</title><rect x="52.3055%" y="1189" width="0.0397%" height="15" fill="rgb(233,203,26)" fg:x="64523" fg:w="49"/><text x="52.5555%" y="1199.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (49 samples, 0.04%)</title><rect x="52.3055%" y="1173" width="0.0397%" height="15" fill="rgb(244,98,49)" fg:x="64523" fg:w="49"/><text x="52.5555%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (49 samples, 0.04%)</title><rect x="52.3055%" y="1157" width="0.0397%" height="15" fill="rgb(235,134,22)" fg:x="64523" fg:w="49"/><text x="52.5555%" y="1167.50"></text></g><g><title>ChaCha20Aligned::Crypt (23 samples, 0.02%)</title><rect x="53.8806%" y="1125" width="0.0186%" height="15" fill="rgb(221,70,32)" fg:x="66466" fg:w="23"/><text x="54.1306%" y="1135.50"></text></g><g><title>WriteLE32 (24 samples, 0.02%)</title><rect x="53.8806%" y="1141" width="0.0195%" height="15" fill="rgb(238,15,50)" fg:x="66466" fg:w="24"/><text x="54.1306%" y="1151.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="53.9000%" y="1141" width="0.0154%" height="15" fill="rgb(215,221,48)" fg:x="66490" fg:w="19"/><text x="54.1500%" y="1151.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="53.9008%" y="1125" width="0.0146%" height="15" fill="rgb(236,73,3)" fg:x="66491" fg:w="18"/><text x="54.1508%" y="1135.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="53.9008%" y="1109" width="0.0146%" height="15" fill="rgb(250,107,11)" fg:x="66491" fg:w="18"/><text x="54.1508%" y="1119.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="53.9008%" y="1093" width="0.0146%" height="15" fill="rgb(242,39,14)" fg:x="66491" fg:w="18"/><text x="54.1508%" y="1103.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="53.9008%" y="1077" width="0.0146%" height="15" fill="rgb(248,164,37)" fg:x="66491" fg:w="18"/><text x="54.1508%" y="1087.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="53.9025%" y="1061" width="0.0130%" height="15" fill="rgb(217,60,12)" fg:x="66493" fg:w="16"/><text x="54.1525%" y="1071.50"></text></g><g><title>ChaCha20::Crypt (2,801 samples, 2.27%)</title><rect x="52.3460%" y="1173" width="2.2706%" height="15" fill="rgb(240,125,29)" fg:x="64573" fg:w="2801"/><text x="52.5960%" y="1183.50">C..</text></g><g><title>ChaCha20Aligned::Crypt (2,801 samples, 2.27%)</title><rect x="52.3460%" y="1157" width="2.2706%" height="15" fill="rgb(208,207,28)" fg:x="64573" fg:w="2801"/><text x="52.5960%" y="1167.50">C..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (865 samples, 0.70%)</title><rect x="53.9154%" y="1141" width="0.7012%" height="15" fill="rgb(209,159,27)" fg:x="66509" fg:w="865"/><text x="54.1654%" y="1151.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (865 samples, 0.70%)</title><rect x="53.9154%" y="1125" width="0.7012%" height="15" fill="rgb(251,176,53)" fg:x="66509" fg:w="865"/><text x="54.1654%" y="1135.50"></text></g><g><title>BIP324Cipher::Decrypt (3,946 samples, 3.20%)</title><rect x="52.3460%" y="1221" width="3.1988%" height="15" fill="rgb(211,85,7)" fg:x="64573" fg:w="3946"/><text x="52.5960%" y="1231.50">BIP..</text></g><g><title>FSChaCha20Poly1305::Decrypt (3,946 samples, 3.20%)</title><rect x="52.3460%" y="1205" width="3.1988%" height="15" fill="rgb(216,64,54)" fg:x="64573" fg:w="3946"/><text x="52.5960%" y="1215.50">FSC..</text></g><g><title>AEADChaCha20Poly1305::Decrypt (3,946 samples, 3.20%)</title><rect x="52.3460%" y="1189" width="3.1988%" height="15" fill="rgb(217,54,24)" fg:x="64573" fg:w="3946"/><text x="52.5960%" y="1199.50">AEA..</text></g><g><title>ComputeTag (1,145 samples, 0.93%)</title><rect x="54.6166%" y="1173" width="0.9282%" height="15" fill="rgb(208,206,53)" fg:x="67374" fg:w="1145"/><text x="54.8666%" y="1183.50"></text></g><g><title>Poly1305::Update (1,145 samples, 0.93%)</title><rect x="54.6166%" y="1157" width="0.9282%" height="15" fill="rgb(251,74,39)" fg:x="67374" fg:w="1145"/><text x="54.8666%" y="1167.50"></text></g><g><title>poly1305_donna::poly1305_update (1,145 samples, 0.93%)</title><rect x="54.6166%" y="1141" width="0.9282%" height="15" fill="rgb(226,47,5)" fg:x="67374" fg:w="1145"/><text x="54.8666%" y="1151.50"></text></g><g><title>poly1305_donna::poly1305_blocks (1,145 samples, 0.93%)</title><rect x="54.6166%" y="1125" width="0.9282%" height="15" fill="rgb(234,111,33)" fg:x="67374" fg:w="1145"/><text x="54.8666%" y="1135.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (3,992 samples, 3.24%)</title><rect x="52.3460%" y="1237" width="3.2361%" height="15" fill="rgb(251,14,10)" fg:x="64573" fg:w="3992"/><text x="52.5960%" y="1247.50">V2T..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (46 samples, 0.04%)</title><rect x="55.5448%" y="1221" width="0.0373%" height="15" fill="rgb(232,43,0)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (46 samples, 0.04%)</title><rect x="55.5448%" y="1205" width="0.0373%" height="15" fill="rgb(222,68,43)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1215.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (46 samples, 0.04%)</title><rect x="55.5448%" y="1189" width="0.0373%" height="15" fill="rgb(217,24,23)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1199.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (46 samples, 0.04%)</title><rect x="55.5448%" y="1173" width="0.0373%" height="15" fill="rgb(229,209,14)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (46 samples, 0.04%)</title><rect x="55.5448%" y="1157" width="0.0373%" height="15" fill="rgb(250,149,48)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1167.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (46 samples, 0.04%)</title><rect x="55.5448%" y="1141" width="0.0373%" height="15" fill="rgb(210,120,37)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1151.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (46 samples, 0.04%)</title><rect x="55.5448%" y="1125" width="0.0373%" height="15" fill="rgb(210,21,8)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1135.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (46 samples, 0.04%)</title><rect x="55.5448%" y="1109" width="0.0373%" height="15" fill="rgb(243,145,7)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1119.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (46 samples, 0.04%)</title><rect x="55.5448%" y="1093" width="0.0373%" height="15" fill="rgb(238,178,32)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1103.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (46 samples, 0.04%)</title><rect x="55.5448%" y="1077" width="0.0373%" height="15" fill="rgb(222,4,10)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1087.50"></text></g><g><title>__memset_avx512_unaligned_erms (46 samples, 0.04%)</title><rect x="55.5448%" y="1061" width="0.0373%" height="15" fill="rgb(239,7,37)" fg:x="68519" fg:w="46"/><text x="55.7948%" y="1071.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1237" width="0.0754%" height="15" fill="rgb(215,31,37)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1247.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1221" width="0.0754%" height="15" fill="rgb(224,83,33)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1231.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1205" width="0.0754%" height="15" fill="rgb(239,55,3)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1215.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1189" width="0.0754%" height="15" fill="rgb(247,92,11)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1199.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1173" width="0.0754%" height="15" fill="rgb(239,200,7)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1183.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1157" width="0.0754%" height="15" fill="rgb(227,115,8)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1141" width="0.0754%" height="15" fill="rgb(215,189,27)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1125" width="0.0754%" height="15" fill="rgb(251,216,39)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1109" width="0.0754%" height="15" fill="rgb(207,29,47)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (93 samples, 0.08%)</title><rect x="55.5821%" y="1093" width="0.0754%" height="15" fill="rgb(210,71,34)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (93 samples, 0.08%)</title><rect x="55.5821%" y="1077" width="0.0754%" height="15" fill="rgb(253,217,51)" fg:x="68565" fg:w="93"/><text x="55.8321%" y="1087.50"></text></g><g><title>CNode::ReceiveMsgBytes (4,651 samples, 3.77%)</title><rect x="52.0420%" y="1269" width="3.7703%" height="15" fill="rgb(222,117,46)" fg:x="64198" fg:w="4651"/><text x="52.2920%" y="1279.50">CNod..</text></g><g><title>V2Transport::ReceivedBytes (4,277 samples, 3.47%)</title><rect x="52.3452%" y="1253" width="3.4671%" height="15" fill="rgb(226,132,6)" fg:x="64572" fg:w="4277"/><text x="52.5952%" y="1263.50">V2T..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (191 samples, 0.15%)</title><rect x="55.6575%" y="1237" width="0.1548%" height="15" fill="rgb(254,145,51)" fg:x="68658" fg:w="191"/><text x="55.9075%" y="1247.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (190 samples, 0.15%)</title><rect x="55.6583%" y="1221" width="0.1540%" height="15" fill="rgb(231,199,27)" fg:x="68659" fg:w="190"/><text x="55.9083%" y="1231.50"></text></g><g><title>unsigned char* std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (190 samples, 0.15%)</title><rect x="55.6583%" y="1205" width="0.1540%" height="15" fill="rgb(245,158,14)" fg:x="68659" fg:w="190"/><text x="55.9083%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;unsigned char, void&gt;::value, unsigned char*&gt;::type std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (190 samples, 0.15%)</title><rect x="55.6583%" y="1189" width="0.1540%" height="15" fill="rgb(240,113,14)" fg:x="68659" fg:w="190"/><text x="55.9083%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (190 samples, 0.15%)</title><rect x="55.6583%" y="1173" width="0.1540%" height="15" fill="rgb(210,20,13)" fg:x="68659" fg:w="190"/><text x="55.9083%" y="1183.50"></text></g><g><title>__libc_recv (539 samples, 0.44%)</title><rect x="55.8124%" y="1269" width="0.4369%" height="15" fill="rgb(241,144,13)" fg:x="68849" fg:w="539"/><text x="56.0624%" y="1279.50"></text></g><g><title>[unknown] (538 samples, 0.44%)</title><rect x="55.8132%" y="1253" width="0.4361%" height="15" fill="rgb(235,43,34)" fg:x="68850" fg:w="538"/><text x="56.0632%" y="1263.50"></text></g><g><title>[unknown] (537 samples, 0.44%)</title><rect x="55.8140%" y="1237" width="0.4353%" height="15" fill="rgb(208,36,20)" fg:x="68851" fg:w="537"/><text x="56.0640%" y="1247.50"></text></g><g><title>[unknown] (535 samples, 0.43%)</title><rect x="55.8156%" y="1221" width="0.4337%" height="15" fill="rgb(239,204,10)" fg:x="68853" fg:w="535"/><text x="56.0656%" y="1231.50"></text></g><g><title>[unknown] (532 samples, 0.43%)</title><rect x="55.8180%" y="1205" width="0.4313%" height="15" fill="rgb(217,84,43)" fg:x="68856" fg:w="532"/><text x="56.0680%" y="1215.50"></text></g><g><title>[unknown] (527 samples, 0.43%)</title><rect x="55.8221%" y="1189" width="0.4272%" height="15" fill="rgb(241,170,50)" fg:x="68861" fg:w="527"/><text x="56.0721%" y="1199.50"></text></g><g><title>[unknown] (523 samples, 0.42%)</title><rect x="55.8253%" y="1173" width="0.4240%" height="15" fill="rgb(226,205,29)" fg:x="68865" fg:w="523"/><text x="56.0753%" y="1183.50"></text></g><g><title>[unknown] (521 samples, 0.42%)</title><rect x="55.8269%" y="1157" width="0.4223%" height="15" fill="rgb(233,113,1)" fg:x="68867" fg:w="521"/><text x="56.0769%" y="1167.50"></text></g><g><title>[unknown] (518 samples, 0.42%)</title><rect x="55.8294%" y="1141" width="0.4199%" height="15" fill="rgb(253,98,13)" fg:x="68870" fg:w="518"/><text x="56.0794%" y="1151.50"></text></g><g><title>[unknown] (513 samples, 0.42%)</title><rect x="55.8334%" y="1125" width="0.4159%" height="15" fill="rgb(211,115,12)" fg:x="68875" fg:w="513"/><text x="56.0834%" y="1135.50"></text></g><g><title>[unknown] (495 samples, 0.40%)</title><rect x="55.8480%" y="1109" width="0.4013%" height="15" fill="rgb(208,12,16)" fg:x="68893" fg:w="495"/><text x="56.0980%" y="1119.50"></text></g><g><title>[unknown] (446 samples, 0.36%)</title><rect x="55.8877%" y="1093" width="0.3615%" height="15" fill="rgb(237,193,54)" fg:x="68942" fg:w="446"/><text x="56.1377%" y="1103.50"></text></g><g><title>[unknown] (418 samples, 0.34%)</title><rect x="55.9104%" y="1077" width="0.3389%" height="15" fill="rgb(243,22,42)" fg:x="68970" fg:w="418"/><text x="56.1604%" y="1087.50"></text></g><g><title>[unknown] (129 samples, 0.10%)</title><rect x="56.1447%" y="1061" width="0.1046%" height="15" fill="rgb(233,151,36)" fg:x="69259" fg:w="129"/><text x="56.3947%" y="1071.50"></text></g><g><title>[unknown] (33 samples, 0.03%)</title><rect x="56.2225%" y="1045" width="0.0268%" height="15" fill="rgb(237,57,45)" fg:x="69355" fg:w="33"/><text x="56.4725%" y="1055.50"></text></g><g><title>CConnman::SocketHandlerConnected (5,191 samples, 4.21%)</title><rect x="52.0420%" y="1285" width="4.2081%" height="15" fill="rgb(221,88,17)" fg:x="64198" fg:w="5191"/><text x="52.2920%" y="1295.50">CConn..</text></g><g><title>Sock::WaitMany (46 samples, 0.04%)</title><rect x="56.2777%" y="1077" width="0.0373%" height="15" fill="rgb(230,79,15)" fg:x="69423" fg:w="46"/><text x="56.5277%" y="1087.50"></text></g><g><title>__poll (46 samples, 0.04%)</title><rect x="56.2777%" y="1061" width="0.0373%" height="15" fill="rgb(213,57,13)" fg:x="69423" fg:w="46"/><text x="56.5277%" y="1071.50"></text></g><g><title>[unknown] (46 samples, 0.04%)</title><rect x="56.2777%" y="1045" width="0.0373%" height="15" fill="rgb(222,116,39)" fg:x="69423" fg:w="46"/><text x="56.5277%" y="1055.50"></text></g><g><title>[unknown] (43 samples, 0.03%)</title><rect x="56.2801%" y="1029" width="0.0349%" height="15" fill="rgb(245,107,2)" fg:x="69426" fg:w="43"/><text x="56.5301%" y="1039.50"></text></g><g><title>[unknown] (43 samples, 0.03%)</title><rect x="56.2801%" y="1013" width="0.0349%" height="15" fill="rgb(238,1,10)" fg:x="69426" fg:w="43"/><text x="56.5301%" y="1023.50"></text></g><g><title>[unknown] (40 samples, 0.03%)</title><rect x="56.2825%" y="997" width="0.0324%" height="15" fill="rgb(249,4,48)" fg:x="69429" fg:w="40"/><text x="56.5325%" y="1007.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="56.2874%" y="981" width="0.0276%" height="15" fill="rgb(223,151,18)" fg:x="69435" fg:w="34"/><text x="56.5374%" y="991.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="56.2931%" y="965" width="0.0219%" height="15" fill="rgb(227,65,43)" fg:x="69442" fg:w="27"/><text x="56.5431%" y="975.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="56.2963%" y="949" width="0.0186%" height="15" fill="rgb(218,40,45)" fg:x="69446" fg:w="23"/><text x="56.5463%" y="959.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="56.2996%" y="933" width="0.0154%" height="15" fill="rgb(252,121,31)" fg:x="69450" fg:w="19"/><text x="56.5496%" y="943.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="56.3028%" y="917" width="0.0122%" height="15" fill="rgb(219,158,43)" fg:x="69454" fg:w="15"/><text x="56.5528%" y="927.50"></text></g><g><title>Sock::WaitMany (49 samples, 0.04%)</title><rect x="56.2760%" y="1093" width="0.0397%" height="15" fill="rgb(231,162,42)" fg:x="69421" fg:w="49"/><text x="56.5260%" y="1103.50"></text></g><g><title>CConnman::SocketHandler (69 samples, 0.06%)</title><rect x="56.2615%" y="1109" width="0.0559%" height="15" fill="rgb(217,179,25)" fg:x="69403" fg:w="69"/><text x="56.5115%" y="1119.50"></text></g><g><title>__clone (72 samples, 0.06%)</title><rect x="56.2606%" y="1285" width="0.0584%" height="15" fill="rgb(206,212,31)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1295.50"></text></g><g><title>start_thread (72 samples, 0.06%)</title><rect x="56.2606%" y="1269" width="0.0584%" height="15" fill="rgb(235,144,12)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1279.50"></text></g><g><title>execute_native_thread_routine (72 samples, 0.06%)</title><rect x="56.2606%" y="1253" width="0.0584%" height="15" fill="rgb(213,51,10)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1263.50"></text></g><g><title>_M_run (72 samples, 0.06%)</title><rect x="56.2606%" y="1237" width="0.0584%" height="15" fill="rgb(231,145,14)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1247.50"></text></g><g><title>operator (72 samples, 0.06%)</title><rect x="56.2606%" y="1221" width="0.0584%" height="15" fill="rgb(235,15,28)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1231.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (72 samples, 0.06%)</title><rect x="56.2606%" y="1205" width="0.0584%" height="15" fill="rgb(237,206,10)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1215.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (72 samples, 0.06%)</title><rect x="56.2606%" y="1189" width="0.0584%" height="15" fill="rgb(236,227,27)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1199.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (72 samples, 0.06%)</title><rect x="56.2606%" y="1173" width="0.0584%" height="15" fill="rgb(246,83,35)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1183.50"></text></g><g><title>util::TraceThread (72 samples, 0.06%)</title><rect x="56.2606%" y="1157" width="0.0584%" height="15" fill="rgb(220,136,24)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1167.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (72 samples, 0.06%)</title><rect x="56.2606%" y="1141" width="0.0584%" height="15" fill="rgb(217,3,25)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1151.50"></text></g><g><title>CConnman::ThreadSocketHandler (72 samples, 0.06%)</title><rect x="56.2606%" y="1125" width="0.0584%" height="15" fill="rgb(239,24,14)" fg:x="69402" fg:w="72"/><text x="56.5106%" y="1135.50"></text></g><g><title>b-net (5,279 samples, 4.28%)</title><rect x="52.0420%" y="1301" width="4.2794%" height="15" fill="rgb(244,16,53)" fg:x="64198" fg:w="5279"/><text x="52.2920%" y="1311.50">b-net</text></g><g><title>MurmurHash3 (41 samples, 0.03%)</title><rect x="56.3239%" y="1285" width="0.0332%" height="15" fill="rgb(208,175,44)" fg:x="69480" fg:w="41"/><text x="56.5739%" y="1295.50"></text></g><g><title>MurmurHash3 (42 samples, 0.03%)</title><rect x="56.3603%" y="1269" width="0.0340%" height="15" fill="rgb(252,18,48)" fg:x="69525" fg:w="42"/><text x="56.6103%" y="1279.50"></text></g><g><title>[[heap]] (50 samples, 0.04%)</title><rect x="56.3595%" y="1285" width="0.0405%" height="15" fill="rgb(234,199,32)" fg:x="69524" fg:w="50"/><text x="56.6095%" y="1295.50"></text></g><g><title>_int_free (558 samples, 0.45%)</title><rect x="56.4074%" y="1269" width="0.4523%" height="15" fill="rgb(225,77,54)" fg:x="69583" fg:w="558"/><text x="56.6574%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (278 samples, 0.23%)</title><rect x="56.8727%" y="1269" width="0.2254%" height="15" fill="rgb(225,42,25)" fg:x="70157" fg:w="278"/><text x="57.1227%" y="1279.50"></text></g><g><title>free@plt (16 samples, 0.01%)</title><rect x="57.0980%" y="1269" width="0.0130%" height="15" fill="rgb(242,227,46)" fg:x="70435" fg:w="16"/><text x="57.3480%" y="1279.50"></text></g><g><title>operator delete (55 samples, 0.04%)</title><rect x="57.1134%" y="1269" width="0.0446%" height="15" fill="rgb(246,197,35)" fg:x="70454" fg:w="55"/><text x="57.3634%" y="1279.50"></text></g><g><title>[anon] (945 samples, 0.77%)</title><rect x="56.4001%" y="1285" width="0.7661%" height="15" fill="rgb(215,159,26)" fg:x="69574" fg:w="945"/><text x="56.6501%" y="1295.50"></text></g><g><title>MurmurHash3 (52 samples, 0.04%)</title><rect x="57.1734%" y="1269" width="0.0422%" height="15" fill="rgb(212,194,50)" fg:x="70528" fg:w="52"/><text x="57.4234%" y="1279.50"></text></g><g><title>[unknown] (35 samples, 0.03%)</title><rect x="57.2156%" y="1269" width="0.0284%" height="15" fill="rgb(246,132,1)" fg:x="70580" fg:w="35"/><text x="57.4656%" y="1279.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="57.2196%" y="1253" width="0.0243%" height="15" fill="rgb(217,71,7)" fg:x="70585" fg:w="30"/><text x="57.4696%" y="1263.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="57.2229%" y="1237" width="0.0211%" height="15" fill="rgb(252,59,32)" fg:x="70589" fg:w="26"/><text x="57.4729%" y="1247.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="57.2286%" y="1221" width="0.0154%" height="15" fill="rgb(253,204,25)" fg:x="70596" fg:w="19"/><text x="57.4786%" y="1231.50"></text></g><g><title>_int_free (85 samples, 0.07%)</title><rect x="57.2504%" y="1269" width="0.0689%" height="15" fill="rgb(232,21,16)" fg:x="70623" fg:w="85"/><text x="57.5004%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (76 samples, 0.06%)</title><rect x="57.3258%" y="1269" width="0.0616%" height="15" fill="rgb(248,90,29)" fg:x="70716" fg:w="76"/><text x="57.5758%" y="1279.50"></text></g><g><title>operator delete (19 samples, 0.02%)</title><rect x="57.3923%" y="1269" width="0.0154%" height="15" fill="rgb(249,223,7)" fg:x="70798" fg:w="19"/><text x="57.6423%" y="1279.50"></text></g><g><title>[unknown] (303 samples, 0.25%)</title><rect x="57.1669%" y="1285" width="0.2456%" height="15" fill="rgb(231,119,42)" fg:x="70520" fg:w="303"/><text x="57.4169%" y="1295.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (36 samples, 0.03%)</title><rect x="57.4150%" y="1109" width="0.0292%" height="15" fill="rgb(215,41,35)" fg:x="70826" fg:w="36"/><text x="57.6650%" y="1119.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (36 samples, 0.03%)</title><rect x="57.4150%" y="1093" width="0.0292%" height="15" fill="rgb(220,44,45)" fg:x="70826" fg:w="36"/><text x="57.6650%" y="1103.50"></text></g><g><title>std::__condvar::wait_until (35 samples, 0.03%)</title><rect x="57.4158%" y="1077" width="0.0284%" height="15" fill="rgb(253,197,36)" fg:x="70827" fg:w="35"/><text x="57.6658%" y="1087.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (35 samples, 0.03%)</title><rect x="57.4158%" y="1061" width="0.0284%" height="15" fill="rgb(245,225,54)" fg:x="70827" fg:w="35"/><text x="57.6658%" y="1071.50"></text></g><g><title>__futex_abstimed_wait_common (34 samples, 0.03%)</title><rect x="57.4166%" y="1045" width="0.0276%" height="15" fill="rgb(239,94,37)" fg:x="70828" fg:w="34"/><text x="57.6666%" y="1055.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="57.4166%" y="1029" width="0.0276%" height="15" fill="rgb(242,217,10)" fg:x="70828" fg:w="34"/><text x="57.6666%" y="1039.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="57.4166%" y="1013" width="0.0276%" height="15" fill="rgb(250,193,7)" fg:x="70828" fg:w="34"/><text x="57.6666%" y="1023.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="57.4166%" y="997" width="0.0276%" height="15" fill="rgb(230,104,19)" fg:x="70828" fg:w="34"/><text x="57.6666%" y="1007.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="57.4166%" y="981" width="0.0276%" height="15" fill="rgb(230,181,4)" fg:x="70828" fg:w="34"/><text x="57.6666%" y="991.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="57.4166%" y="965" width="0.0276%" height="15" fill="rgb(216,219,49)" fg:x="70828" fg:w="34"/><text x="57.6666%" y="975.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="57.4191%" y="949" width="0.0251%" height="15" fill="rgb(254,144,0)" fg:x="70831" fg:w="31"/><text x="57.6691%" y="959.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="57.4207%" y="933" width="0.0235%" height="15" fill="rgb(205,209,38)" fg:x="70833" fg:w="29"/><text x="57.6707%" y="943.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="57.4239%" y="917" width="0.0203%" height="15" fill="rgb(240,21,42)" fg:x="70837" fg:w="25"/><text x="57.6739%" y="927.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="57.4272%" y="901" width="0.0170%" height="15" fill="rgb(241,132,3)" fg:x="70841" fg:w="21"/><text x="57.6772%" y="911.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="57.4296%" y="885" width="0.0146%" height="15" fill="rgb(225,14,2)" fg:x="70844" fg:w="18"/><text x="57.6796%" y="895.50"></text></g><g><title>CRollingBloomFilter::insert (55 samples, 0.04%)</title><rect x="58.1527%" y="885" width="0.0446%" height="15" fill="rgb(210,141,35)" fg:x="71736" fg:w="55"/><text x="58.4027%" y="895.50"></text></g><g><title>FastRange32 (53 samples, 0.04%)</title><rect x="58.1973%" y="885" width="0.0430%" height="15" fill="rgb(251,14,44)" fg:x="71791" fg:w="53"/><text x="58.4473%" y="895.50"></text></g><g><title>RollingBloomHash (34 samples, 0.03%)</title><rect x="58.2402%" y="885" width="0.0276%" height="15" fill="rgb(247,48,18)" fg:x="71844" fg:w="34"/><text x="58.4902%" y="895.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (73 samples, 0.06%)</title><rect x="58.2678%" y="885" width="0.0592%" height="15" fill="rgb(225,0,40)" fg:x="71878" fg:w="73"/><text x="58.5178%" y="895.50"></text></g><g><title>CRollingBloomFilter::insert (545 samples, 0.44%)</title><rect x="57.9006%" y="901" width="0.4418%" height="15" fill="rgb(221,31,33)" fg:x="71425" fg:w="545"/><text x="58.1506%" y="911.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (19 samples, 0.02%)</title><rect x="58.3270%" y="885" width="0.0154%" height="15" fill="rgb(237,42,40)" fg:x="71951" fg:w="19"/><text x="58.5770%" y="895.50"></text></g><g><title>MurmurHash3 (869 samples, 0.70%)</title><rect x="58.3424%" y="901" width="0.7045%" height="15" fill="rgb(233,51,29)" fg:x="71970" fg:w="869"/><text x="58.5924%" y="911.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (113 samples, 0.09%)</title><rect x="58.9552%" y="885" width="0.0916%" height="15" fill="rgb(226,58,20)" fg:x="72726" fg:w="113"/><text x="59.2052%" y="895.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (113 samples, 0.09%)</title><rect x="58.9552%" y="869" width="0.0916%" height="15" fill="rgb(208,98,7)" fg:x="72726" fg:w="113"/><text x="59.2052%" y="879.50"></text></g><g><title>CRollingBloomFilter::insert (1,513 samples, 1.23%)</title><rect x="57.8260%" y="917" width="1.2265%" height="15" fill="rgb(228,143,44)" fg:x="71333" fg:w="1513"/><text x="58.0760%" y="927.50"></text></g><g><title>FastRange32 (97 samples, 0.08%)</title><rect x="59.0525%" y="917" width="0.0786%" height="15" fill="rgb(246,55,38)" fg:x="72846" fg:w="97"/><text x="59.3025%" y="927.50"></text></g><g><title>RollingBloomHash (34 samples, 0.03%)</title><rect x="59.1311%" y="917" width="0.0276%" height="15" fill="rgb(247,87,16)" fg:x="72943" fg:w="34"/><text x="59.3811%" y="927.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="59.1587%" y="917" width="0.0211%" height="15" fill="rgb(234,129,42)" fg:x="72977" fg:w="26"/><text x="59.4087%" y="927.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="59.1603%" y="901" width="0.0195%" height="15" fill="rgb(220,82,16)" fg:x="72979" fg:w="24"/><text x="59.4103%" y="911.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="59.1620%" y="885" width="0.0178%" height="15" fill="rgb(211,88,4)" fg:x="72981" fg:w="22"/><text x="59.4120%" y="895.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="59.1620%" y="869" width="0.0178%" height="15" fill="rgb(248,151,21)" fg:x="72981" fg:w="22"/><text x="59.4120%" y="879.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="59.1636%" y="853" width="0.0162%" height="15" fill="rgb(238,163,6)" fg:x="72983" fg:w="20"/><text x="59.4136%" y="863.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="59.1644%" y="837" width="0.0154%" height="15" fill="rgb(209,183,11)" fg:x="72984" fg:w="19"/><text x="59.4144%" y="847.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="59.1692%" y="821" width="0.0105%" height="15" fill="rgb(219,37,20)" fg:x="72990" fg:w="13"/><text x="59.4192%" y="831.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (105 samples, 0.09%)</title><rect x="59.1798%" y="917" width="0.0851%" height="15" fill="rgb(210,158,4)" fg:x="73003" fg:w="105"/><text x="59.4298%" y="927.50"></text></g><g><title>CRollingBloomFilter::insert (2,265 samples, 1.84%)</title><rect x="57.4563%" y="933" width="1.8361%" height="15" fill="rgb(221,167,53)" fg:x="70877" fg:w="2265"/><text x="57.7063%" y="943.50">C..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (34 samples, 0.03%)</title><rect x="59.2649%" y="917" width="0.0276%" height="15" fill="rgb(237,151,45)" fg:x="73108" fg:w="34"/><text x="59.5149%" y="927.50"></text></g><g><title>MurmurHash3 (1,012 samples, 0.82%)</title><rect x="59.2925%" y="933" width="0.8204%" height="15" fill="rgb(231,39,3)" fg:x="73142" fg:w="1012"/><text x="59.5425%" y="943.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (154 samples, 0.12%)</title><rect x="59.9880%" y="917" width="0.1248%" height="15" fill="rgb(212,167,28)" fg:x="74000" fg:w="154"/><text x="60.2380%" y="927.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (154 samples, 0.12%)</title><rect x="59.9880%" y="901" width="0.1248%" height="15" fill="rgb(232,178,8)" fg:x="74000" fg:w="154"/><text x="60.2380%" y="911.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (27 samples, 0.02%)</title><rect x="60.1550%" y="917" width="0.0219%" height="15" fill="rgb(225,151,20)" fg:x="74206" fg:w="27"/><text x="60.4050%" y="927.50"></text></g><g><title>TxOrphanage::EraseForBlock (80 samples, 0.06%)</title><rect x="60.1128%" y="933" width="0.0649%" height="15" fill="rgb(238,3,37)" fg:x="74154" fg:w="80"/><text x="60.3628%" y="943.50"></text></g><g><title>operator (3,395 samples, 2.75%)</title><rect x="57.4442%" y="1013" width="2.7522%" height="15" fill="rgb(251,147,42)" fg:x="70862" fg:w="3395"/><text x="57.6942%" y="1023.50">op..</text></g><g><title>operator (3,395 samples, 2.75%)</title><rect x="57.4442%" y="997" width="2.7522%" height="15" fill="rgb(208,173,10)" fg:x="70862" fg:w="3395"/><text x="57.6942%" y="1007.50">op..</text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (3,395 samples, 2.75%)</title><rect x="57.4442%" y="981" width="2.7522%" height="15" fill="rgb(246,225,4)" fg:x="70862" fg:w="3395"/><text x="57.6942%" y="991.50">It..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (3,395 samples, 2.75%)</title><rect x="57.4442%" y="965" width="2.7522%" height="15" fill="rgb(248,102,6)" fg:x="70862" fg:w="3395"/><text x="57.6942%" y="975.50">st..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (3,380 samples, 2.74%)</title><rect x="57.4563%" y="949" width="2.7400%" height="15" fill="rgb(232,6,21)" fg:x="70877" fg:w="3380"/><text x="57.7063%" y="959.50">no..</text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (3,402 samples, 2.76%)</title><rect x="57.4442%" y="1045" width="2.7578%" height="15" fill="rgb(221,179,22)" fg:x="70862" fg:w="3402"/><text x="57.6942%" y="1055.50">__..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (3,402 samples, 2.76%)</title><rect x="57.4442%" y="1029" width="2.7578%" height="15" fill="rgb(252,50,20)" fg:x="70862" fg:w="3402"/><text x="57.6942%" y="1039.50">__..</text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (20 samples, 0.02%)</title><rect x="60.2417%" y="917" width="0.0162%" height="15" fill="rgb(222,56,38)" fg:x="74313" fg:w="20"/><text x="60.4917%" y="927.50"></text></g><g><title>operator (74 samples, 0.06%)</title><rect x="60.2020%" y="997" width="0.0600%" height="15" fill="rgb(206,193,29)" fg:x="74264" fg:w="74"/><text x="60.4520%" y="1007.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (74 samples, 0.06%)</title><rect x="60.2020%" y="981" width="0.0600%" height="15" fill="rgb(239,192,45)" fg:x="74264" fg:w="74"/><text x="60.4520%" y="991.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (74 samples, 0.06%)</title><rect x="60.2020%" y="965" width="0.0600%" height="15" fill="rgb(254,18,36)" fg:x="74264" fg:w="74"/><text x="60.4520%" y="975.50"></text></g><g><title>CBlockPolicyEstimator::processBlock (74 samples, 0.06%)</title><rect x="60.2020%" y="949" width="0.0600%" height="15" fill="rgb(221,127,11)" fg:x="74264" fg:w="74"/><text x="60.4520%" y="959.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (73 samples, 0.06%)</title><rect x="60.2028%" y="933" width="0.0592%" height="15" fill="rgb(234,146,35)" fg:x="74265" fg:w="73"/><text x="60.4528%" y="943.50"></text></g><g><title>operator (76 samples, 0.06%)</title><rect x="60.2020%" y="1013" width="0.0616%" height="15" fill="rgb(254,201,37)" fg:x="74264" fg:w="76"/><text x="60.4520%" y="1023.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (81 samples, 0.07%)</title><rect x="60.2020%" y="1045" width="0.0657%" height="15" fill="rgb(211,202,23)" fg:x="74264" fg:w="81"/><text x="60.4520%" y="1055.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (81 samples, 0.07%)</title><rect x="60.2020%" y="1029" width="0.0657%" height="15" fill="rgb(237,91,2)" fg:x="74264" fg:w="81"/><text x="60.4520%" y="1039.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (3,487 samples, 2.83%)</title><rect x="57.4442%" y="1077" width="2.8267%" height="15" fill="rgb(226,228,36)" fg:x="70862" fg:w="3487"/><text x="57.6942%" y="1087.50">st..</text></g><g><title>_M_invoke (3,487 samples, 2.83%)</title><rect x="57.4442%" y="1061" width="2.8267%" height="15" fill="rgb(213,63,50)" fg:x="70862" fg:w="3487"/><text x="57.6942%" y="1071.50">_M..</text></g><g><title>cfree@GLIBC_2.2.5 (40 samples, 0.03%)</title><rect x="60.2709%" y="901" width="0.0324%" height="15" fill="rgb(235,194,19)" fg:x="74349" fg:w="40"/><text x="60.5209%" y="911.50"></text></g><g><title>_int_free (40 samples, 0.03%)</title><rect x="60.2709%" y="885" width="0.0324%" height="15" fill="rgb(207,204,18)" fg:x="74349" fg:w="40"/><text x="60.5209%" y="895.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (40 samples, 0.03%)</title><rect x="60.2709%" y="869" width="0.0324%" height="15" fill="rgb(248,8,7)" fg:x="74349" fg:w="40"/><text x="60.5209%" y="879.50"></text></g><g><title>malloc_consolidate (40 samples, 0.03%)</title><rect x="60.2709%" y="853" width="0.0324%" height="15" fill="rgb(223,145,47)" fg:x="74349" fg:w="40"/><text x="60.5209%" y="863.50"></text></g><g><title>__lll_lock_wake_private (147 samples, 0.12%)</title><rect x="60.3398%" y="629" width="0.1192%" height="15" fill="rgb(228,84,11)" fg:x="74434" fg:w="147"/><text x="60.5898%" y="639.50"></text></g><g><title>[unknown] (141 samples, 0.11%)</title><rect x="60.3447%" y="613" width="0.1143%" height="15" fill="rgb(218,76,45)" fg:x="74440" fg:w="141"/><text x="60.5947%" y="623.50"></text></g><g><title>[unknown] (133 samples, 0.11%)</title><rect x="60.3512%" y="597" width="0.1078%" height="15" fill="rgb(223,80,15)" fg:x="74448" fg:w="133"/><text x="60.6012%" y="607.50"></text></g><g><title>[unknown] (124 samples, 0.10%)</title><rect x="60.3585%" y="581" width="0.1005%" height="15" fill="rgb(219,218,33)" fg:x="74457" fg:w="124"/><text x="60.6085%" y="591.50"></text></g><g><title>[unknown] (89 samples, 0.07%)</title><rect x="60.3868%" y="565" width="0.0721%" height="15" fill="rgb(208,51,11)" fg:x="74492" fg:w="89"/><text x="60.6368%" y="575.50"></text></g><g><title>[unknown] (73 samples, 0.06%)</title><rect x="60.3998%" y="549" width="0.0592%" height="15" fill="rgb(229,165,39)" fg:x="74508" fg:w="73"/><text x="60.6498%" y="559.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="60.4387%" y="533" width="0.0203%" height="15" fill="rgb(241,100,24)" fg:x="74556" fg:w="25"/><text x="60.6887%" y="543.50"></text></g><g><title>__lll_lock_wait_private (719 samples, 0.58%)</title><rect x="60.6154%" y="613" width="0.5829%" height="15" fill="rgb(228,14,23)" fg:x="74774" fg:w="719"/><text x="60.8654%" y="623.50"></text></g><g><title>[unknown] (705 samples, 0.57%)</title><rect x="60.6268%" y="597" width="0.5715%" height="15" fill="rgb(247,116,52)" fg:x="74788" fg:w="705"/><text x="60.8768%" y="607.50"></text></g><g><title>[unknown] (693 samples, 0.56%)</title><rect x="60.6365%" y="581" width="0.5618%" height="15" fill="rgb(216,149,33)" fg:x="74800" fg:w="693"/><text x="60.8865%" y="591.50"></text></g><g><title>[unknown] (674 samples, 0.55%)</title><rect x="60.6519%" y="565" width="0.5464%" height="15" fill="rgb(238,142,29)" fg:x="74819" fg:w="674"/><text x="60.9019%" y="575.50"></text></g><g><title>[unknown] (618 samples, 0.50%)</title><rect x="60.6973%" y="549" width="0.5010%" height="15" fill="rgb(224,83,40)" fg:x="74875" fg:w="618"/><text x="60.9473%" y="559.50"></text></g><g><title>[unknown] (596 samples, 0.48%)</title><rect x="60.7152%" y="533" width="0.4831%" height="15" fill="rgb(234,165,11)" fg:x="74897" fg:w="596"/><text x="60.9652%" y="543.50"></text></g><g><title>[unknown] (519 samples, 0.42%)</title><rect x="60.7776%" y="517" width="0.4207%" height="15" fill="rgb(215,96,23)" fg:x="74974" fg:w="519"/><text x="61.0276%" y="527.50"></text></g><g><title>[unknown] (477 samples, 0.39%)</title><rect x="60.8116%" y="501" width="0.3867%" height="15" fill="rgb(233,179,26)" fg:x="75016" fg:w="477"/><text x="61.0616%" y="511.50"></text></g><g><title>[unknown] (429 samples, 0.35%)</title><rect x="60.8505%" y="485" width="0.3478%" height="15" fill="rgb(225,129,33)" fg:x="75064" fg:w="429"/><text x="61.1005%" y="495.50"></text></g><g><title>[unknown] (381 samples, 0.31%)</title><rect x="60.8894%" y="469" width="0.3089%" height="15" fill="rgb(237,49,13)" fg:x="75112" fg:w="381"/><text x="61.1394%" y="479.50"></text></g><g><title>[unknown] (297 samples, 0.24%)</title><rect x="60.9575%" y="453" width="0.2408%" height="15" fill="rgb(211,3,31)" fg:x="75196" fg:w="297"/><text x="61.2075%" y="463.50"></text></g><g><title>[unknown] (179 samples, 0.15%)</title><rect x="61.0532%" y="437" width="0.1451%" height="15" fill="rgb(216,152,19)" fg:x="75314" fg:w="179"/><text x="61.3032%" y="447.50"></text></g><g><title>[unknown] (102 samples, 0.08%)</title><rect x="61.1156%" y="421" width="0.0827%" height="15" fill="rgb(251,121,35)" fg:x="75391" fg:w="102"/><text x="61.3656%" y="431.50"></text></g><g><title>[unknown] (59 samples, 0.05%)</title><rect x="61.1505%" y="405" width="0.0478%" height="15" fill="rgb(210,217,47)" fg:x="75434" fg:w="59"/><text x="61.4005%" y="415.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="61.1707%" y="389" width="0.0276%" height="15" fill="rgb(244,116,22)" fg:x="75459" fg:w="34"/><text x="61.4207%" y="399.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="61.1756%" y="373" width="0.0227%" height="15" fill="rgb(228,17,21)" fg:x="75465" fg:w="28"/><text x="61.4256%" y="383.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (36 samples, 0.03%)</title><rect x="61.2032%" y="613" width="0.0292%" height="15" fill="rgb(240,149,34)" fg:x="75499" fg:w="36"/><text x="61.4532%" y="623.50"></text></g><g><title>malloc_consolidate (36 samples, 0.03%)</title><rect x="61.2032%" y="597" width="0.0292%" height="15" fill="rgb(208,125,47)" fg:x="75499" fg:w="36"/><text x="61.4532%" y="607.50"></text></g><g><title>_int_free_merge_chunk (14 samples, 0.01%)</title><rect x="61.2323%" y="613" width="0.0113%" height="15" fill="rgb(249,186,39)" fg:x="75535" fg:w="14"/><text x="61.4823%" y="623.50"></text></g><g><title>_int_free (969 samples, 0.79%)</title><rect x="60.4590%" y="629" width="0.7855%" height="15" fill="rgb(240,220,33)" fg:x="74581" fg:w="969"/><text x="60.7090%" y="639.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,144 samples, 0.93%)</title><rect x="60.3204%" y="645" width="0.9274%" height="15" fill="rgb(243,110,23)" fg:x="74410" fg:w="1144"/><text x="60.5704%" y="655.50"></text></g><g><title>__lll_lock_wait_private (18 samples, 0.01%)</title><rect x="61.2737%" y="389" width="0.0146%" height="15" fill="rgb(219,163,46)" fg:x="75586" fg:w="18"/><text x="61.5237%" y="399.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="61.2737%" y="373" width="0.0146%" height="15" fill="rgb(216,126,30)" fg:x="75586" fg:w="18"/><text x="61.5237%" y="383.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="61.2737%" y="357" width="0.0146%" height="15" fill="rgb(208,139,11)" fg:x="75586" fg:w="18"/><text x="61.5237%" y="367.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="61.2745%" y="341" width="0.0138%" height="15" fill="rgb(213,118,36)" fg:x="75587" fg:w="17"/><text x="61.5245%" y="351.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="61.2745%" y="325" width="0.0138%" height="15" fill="rgb(226,43,17)" fg:x="75587" fg:w="17"/><text x="61.5245%" y="335.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="61.2745%" y="309" width="0.0138%" height="15" fill="rgb(254,217,4)" fg:x="75587" fg:w="17"/><text x="61.5245%" y="319.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="61.2769%" y="293" width="0.0113%" height="15" fill="rgb(210,134,47)" fg:x="75590" fg:w="14"/><text x="61.5269%" y="303.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="61.2777%" y="277" width="0.0105%" height="15" fill="rgb(237,24,49)" fg:x="75591" fg:w="13"/><text x="61.5277%" y="287.50"></text></g><g><title>CScript::~CScript (39 samples, 0.03%)</title><rect x="61.2583%" y="453" width="0.0316%" height="15" fill="rgb(251,39,46)" fg:x="75567" fg:w="39"/><text x="61.5083%" y="463.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (39 samples, 0.03%)</title><rect x="61.2583%" y="437" width="0.0316%" height="15" fill="rgb(251,220,3)" fg:x="75567" fg:w="39"/><text x="61.5083%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (37 samples, 0.03%)</title><rect x="61.2599%" y="421" width="0.0300%" height="15" fill="rgb(228,105,12)" fg:x="75569" fg:w="37"/><text x="61.5099%" y="431.50"></text></g><g><title>_int_free (31 samples, 0.03%)</title><rect x="61.2648%" y="405" width="0.0251%" height="15" fill="rgb(215,196,1)" fg:x="75575" fg:w="31"/><text x="61.5148%" y="415.50"></text></g><g><title>_int_free (121 samples, 0.10%)</title><rect x="61.3126%" y="325" width="0.0981%" height="15" fill="rgb(214,33,39)" fg:x="75634" fg:w="121"/><text x="61.5626%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (145 samples, 0.12%)</title><rect x="61.3013%" y="341" width="0.1175%" height="15" fill="rgb(220,19,52)" fg:x="75620" fg:w="145"/><text x="61.5513%" y="351.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (161 samples, 0.13%)</title><rect x="61.2915%" y="421" width="0.1305%" height="15" fill="rgb(221,78,38)" fg:x="75608" fg:w="161"/><text x="61.5415%" y="431.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (159 samples, 0.13%)</title><rect x="61.2931%" y="405" width="0.1289%" height="15" fill="rgb(253,30,16)" fg:x="75610" fg:w="159"/><text x="61.5431%" y="415.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (154 samples, 0.12%)</title><rect x="61.2972%" y="389" width="0.1248%" height="15" fill="rgb(242,65,0)" fg:x="75615" fg:w="154"/><text x="61.5472%" y="399.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (154 samples, 0.12%)</title><rect x="61.2972%" y="373" width="0.1248%" height="15" fill="rgb(235,201,12)" fg:x="75615" fg:w="154"/><text x="61.5472%" y="383.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (154 samples, 0.12%)</title><rect x="61.2972%" y="357" width="0.1248%" height="15" fill="rgb(233,161,9)" fg:x="75615" fg:w="154"/><text x="61.5472%" y="367.50"></text></g><g><title>__lll_lock_wait_private (30 samples, 0.02%)</title><rect x="61.5671%" y="213" width="0.0243%" height="15" fill="rgb(241,207,41)" fg:x="75948" fg:w="30"/><text x="61.8171%" y="223.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="61.5688%" y="197" width="0.0227%" height="15" fill="rgb(212,69,46)" fg:x="75950" fg:w="28"/><text x="61.8188%" y="207.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="61.5688%" y="181" width="0.0227%" height="15" fill="rgb(239,69,45)" fg:x="75950" fg:w="28"/><text x="61.8188%" y="191.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="61.5688%" y="165" width="0.0227%" height="15" fill="rgb(242,117,48)" fg:x="75950" fg:w="28"/><text x="61.8188%" y="175.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="61.5712%" y="149" width="0.0203%" height="15" fill="rgb(228,41,36)" fg:x="75953" fg:w="25"/><text x="61.8212%" y="159.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="61.5728%" y="133" width="0.0186%" height="15" fill="rgb(212,3,32)" fg:x="75955" fg:w="23"/><text x="61.8228%" y="143.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="61.5753%" y="117" width="0.0162%" height="15" fill="rgb(233,41,49)" fg:x="75958" fg:w="20"/><text x="61.8253%" y="127.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="61.5761%" y="101" width="0.0154%" height="15" fill="rgb(252,170,49)" fg:x="75959" fg:w="19"/><text x="61.8261%" y="111.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="61.5777%" y="85" width="0.0138%" height="15" fill="rgb(229,53,26)" fg:x="75961" fg:w="17"/><text x="61.8277%" y="95.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="61.5785%" y="69" width="0.0130%" height="15" fill="rgb(217,157,12)" fg:x="75962" fg:w="16"/><text x="61.8285%" y="79.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (13 samples, 0.01%)</title><rect x="61.5923%" y="213" width="0.0105%" height="15" fill="rgb(227,17,9)" fg:x="75979" fg:w="13"/><text x="61.8423%" y="223.50"></text></g><g><title>malloc_consolidate (13 samples, 0.01%)</title><rect x="61.5923%" y="197" width="0.0105%" height="15" fill="rgb(218,84,12)" fg:x="75979" fg:w="13"/><text x="61.8423%" y="207.50"></text></g><g><title>_int_free (170 samples, 0.14%)</title><rect x="61.4674%" y="229" width="0.1378%" height="15" fill="rgb(212,79,24)" fg:x="75825" fg:w="170"/><text x="61.7174%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (15 samples, 0.01%)</title><rect x="61.6077%" y="229" width="0.0122%" height="15" fill="rgb(217,222,37)" fg:x="75998" fg:w="15"/><text x="61.8577%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (236 samples, 0.19%)</title><rect x="61.4358%" y="245" width="0.1913%" height="15" fill="rgb(246,208,8)" fg:x="75786" fg:w="236"/><text x="61.6858%" y="255.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (473 samples, 0.38%)</title><rect x="61.2542%" y="565" width="0.3834%" height="15" fill="rgb(244,133,10)" fg:x="75562" fg:w="473"/><text x="61.5042%" y="575.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (470 samples, 0.38%)</title><rect x="61.2567%" y="549" width="0.3810%" height="15" fill="rgb(209,219,41)" fg:x="75565" fg:w="470"/><text x="61.5067%" y="559.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (470 samples, 0.38%)</title><rect x="61.2567%" y="533" width="0.3810%" height="15" fill="rgb(253,175,45)" fg:x="75565" fg:w="470"/><text x="61.5067%" y="543.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (470 samples, 0.38%)</title><rect x="61.2567%" y="517" width="0.3810%" height="15" fill="rgb(235,100,37)" fg:x="75565" fg:w="470"/><text x="61.5067%" y="527.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (468 samples, 0.38%)</title><rect x="61.2583%" y="501" width="0.3794%" height="15" fill="rgb(225,87,19)" fg:x="75567" fg:w="468"/><text x="61.5083%" y="511.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (468 samples, 0.38%)</title><rect x="61.2583%" y="485" width="0.3794%" height="15" fill="rgb(217,152,17)" fg:x="75567" fg:w="468"/><text x="61.5083%" y="495.50"></text></g><g><title>CTxIn::~CTxIn (468 samples, 0.38%)</title><rect x="61.2583%" y="469" width="0.3794%" height="15" fill="rgb(235,72,13)" fg:x="75567" fg:w="468"/><text x="61.5083%" y="479.50"></text></g><g><title>CScriptWitness::~CScriptWitness (429 samples, 0.35%)</title><rect x="61.2899%" y="453" width="0.3478%" height="15" fill="rgb(233,140,18)" fg:x="75606" fg:w="429"/><text x="61.5399%" y="463.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (429 samples, 0.35%)</title><rect x="61.2899%" y="437" width="0.3478%" height="15" fill="rgb(207,212,28)" fg:x="75606" fg:w="429"/><text x="61.5399%" y="447.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (266 samples, 0.22%)</title><rect x="61.4220%" y="421" width="0.2156%" height="15" fill="rgb(220,130,25)" fg:x="75769" fg:w="266"/><text x="61.6720%" y="431.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (266 samples, 0.22%)</title><rect x="61.4220%" y="405" width="0.2156%" height="15" fill="rgb(205,55,34)" fg:x="75769" fg:w="266"/><text x="61.6720%" y="415.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (266 samples, 0.22%)</title><rect x="61.4220%" y="389" width="0.2156%" height="15" fill="rgb(237,54,35)" fg:x="75769" fg:w="266"/><text x="61.6720%" y="399.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (259 samples, 0.21%)</title><rect x="61.4277%" y="373" width="0.2100%" height="15" fill="rgb(208,67,23)" fg:x="75776" fg:w="259"/><text x="61.6777%" y="383.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (259 samples, 0.21%)</title><rect x="61.4277%" y="357" width="0.2100%" height="15" fill="rgb(206,207,50)" fg:x="75776" fg:w="259"/><text x="61.6777%" y="367.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (259 samples, 0.21%)</title><rect x="61.4277%" y="341" width="0.2100%" height="15" fill="rgb(213,211,42)" fg:x="75776" fg:w="259"/><text x="61.6777%" y="351.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (259 samples, 0.21%)</title><rect x="61.4277%" y="325" width="0.2100%" height="15" fill="rgb(252,197,50)" fg:x="75776" fg:w="259"/><text x="61.6777%" y="335.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (254 samples, 0.21%)</title><rect x="61.4318%" y="309" width="0.2059%" height="15" fill="rgb(251,211,41)" fg:x="75781" fg:w="254"/><text x="61.6818%" y="319.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (249 samples, 0.20%)</title><rect x="61.4358%" y="293" width="0.2019%" height="15" fill="rgb(229,211,5)" fg:x="75786" fg:w="249"/><text x="61.6858%" y="303.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (249 samples, 0.20%)</title><rect x="61.4358%" y="277" width="0.2019%" height="15" fill="rgb(239,36,31)" fg:x="75786" fg:w="249"/><text x="61.6858%" y="287.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (249 samples, 0.20%)</title><rect x="61.4358%" y="261" width="0.2019%" height="15" fill="rgb(248,67,31)" fg:x="75786" fg:w="249"/><text x="61.6858%" y="271.50"></text></g><g><title>__lll_lock_wait_private (47 samples, 0.04%)</title><rect x="61.6733%" y="437" width="0.0381%" height="15" fill="rgb(249,55,44)" fg:x="76079" fg:w="47"/><text x="61.9233%" y="447.50"></text></g><g><title>[unknown] (47 samples, 0.04%)</title><rect x="61.6733%" y="421" width="0.0381%" height="15" fill="rgb(216,82,12)" fg:x="76079" fg:w="47"/><text x="61.9233%" y="431.50"></text></g><g><title>[unknown] (47 samples, 0.04%)</title><rect x="61.6733%" y="405" width="0.0381%" height="15" fill="rgb(242,174,1)" fg:x="76079" fg:w="47"/><text x="61.9233%" y="415.50"></text></g><g><title>[unknown] (47 samples, 0.04%)</title><rect x="61.6733%" y="389" width="0.0381%" height="15" fill="rgb(208,120,29)" fg:x="76079" fg:w="47"/><text x="61.9233%" y="399.50"></text></g><g><title>[unknown] (44 samples, 0.04%)</title><rect x="61.6758%" y="373" width="0.0357%" height="15" fill="rgb(221,105,43)" fg:x="76082" fg:w="44"/><text x="61.9258%" y="383.50"></text></g><g><title>[unknown] (44 samples, 0.04%)</title><rect x="61.6758%" y="357" width="0.0357%" height="15" fill="rgb(234,124,22)" fg:x="76082" fg:w="44"/><text x="61.9258%" y="367.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="61.6798%" y="341" width="0.0316%" height="15" fill="rgb(212,23,30)" fg:x="76087" fg:w="39"/><text x="61.9298%" y="351.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="61.6814%" y="325" width="0.0300%" height="15" fill="rgb(219,122,53)" fg:x="76089" fg:w="37"/><text x="61.9314%" y="335.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="61.6823%" y="309" width="0.0292%" height="15" fill="rgb(248,84,24)" fg:x="76090" fg:w="36"/><text x="61.9323%" y="319.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="61.6855%" y="293" width="0.0259%" height="15" fill="rgb(245,115,18)" fg:x="76094" fg:w="32"/><text x="61.9355%" y="303.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="61.6936%" y="277" width="0.0178%" height="15" fill="rgb(227,176,51)" fg:x="76104" fg:w="22"/><text x="61.9436%" y="287.50"></text></g><g><title>_int_free (72 samples, 0.06%)</title><rect x="61.6596%" y="453" width="0.0584%" height="15" fill="rgb(229,63,42)" fg:x="76062" fg:w="72"/><text x="61.9096%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (94 samples, 0.08%)</title><rect x="61.6474%" y="469" width="0.0762%" height="15" fill="rgb(247,202,24)" fg:x="76047" fg:w="94"/><text x="61.8974%" y="479.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (109 samples, 0.09%)</title><rect x="61.6377%" y="549" width="0.0884%" height="15" fill="rgb(244,173,20)" fg:x="76035" fg:w="109"/><text x="61.8877%" y="559.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (104 samples, 0.08%)</title><rect x="61.6417%" y="533" width="0.0843%" height="15" fill="rgb(242,81,47)" fg:x="76040" fg:w="104"/><text x="61.8917%" y="543.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::deallocate (102 samples, 0.08%)</title><rect x="61.6433%" y="517" width="0.0827%" height="15" fill="rgb(231,185,54)" fg:x="76042" fg:w="102"/><text x="61.8933%" y="527.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::deallocate (102 samples, 0.08%)</title><rect x="61.6433%" y="501" width="0.0827%" height="15" fill="rgb(243,55,32)" fg:x="76042" fg:w="102"/><text x="61.8933%" y="511.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::deallocate (102 samples, 0.08%)</title><rect x="61.6433%" y="485" width="0.0827%" height="15" fill="rgb(208,167,19)" fg:x="76042" fg:w="102"/><text x="61.8933%" y="495.50"></text></g><g><title>_int_free (22 samples, 0.02%)</title><rect x="61.7495%" y="405" width="0.0178%" height="15" fill="rgb(231,72,35)" fg:x="76173" fg:w="22"/><text x="61.9995%" y="415.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (1,808 samples, 1.47%)</title><rect x="60.3033%" y="901" width="1.4657%" height="15" fill="rgb(250,173,51)" fg:x="74389" fg:w="1808"/><text x="60.5533%" y="911.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (1,808 samples, 1.47%)</title><rect x="60.3033%" y="885" width="1.4657%" height="15" fill="rgb(209,5,22)" fg:x="74389" fg:w="1808"/><text x="60.5533%" y="895.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (1,808 samples, 1.47%)</title><rect x="60.3033%" y="869" width="1.4657%" height="15" fill="rgb(250,174,19)" fg:x="74389" fg:w="1808"/><text x="60.5533%" y="879.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (1,808 samples, 1.47%)</title><rect x="60.3033%" y="853" width="1.4657%" height="15" fill="rgb(217,3,49)" fg:x="74389" fg:w="1808"/><text x="60.5533%" y="863.50"></text></g><g><title>CBlock::~CBlock (1,808 samples, 1.47%)</title><rect x="60.3033%" y="837" width="1.4657%" height="15" fill="rgb(218,225,5)" fg:x="74389" fg:w="1808"/><text x="60.5533%" y="847.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (1,808 samples, 1.47%)</title><rect x="60.3033%" y="821" width="1.4657%" height="15" fill="rgb(236,89,11)" fg:x="74389" fg:w="1808"/><text x="60.5533%" y="831.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (1,808 samples, 1.47%)</title><rect x="60.3033%" y="805" width="1.4657%" height="15" fill="rgb(206,33,28)" fg:x="74389" fg:w="1808"/><text x="60.5533%" y="815.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (1,808 samples, 1.47%)</title><rect x="60.3033%" y="789" width="1.4657%" height="15" fill="rgb(241,56,42)" fg:x="74389" fg:w="1808"/><text x="60.5533%" y="799.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (1,808 samples, 1.47%)</title><rect x="60.3033%" y="773" width="1.4657%" height="15" fill="rgb(222,44,11)" fg:x="74389" fg:w="1808"/><text x="60.5533%" y="783.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (1,805 samples, 1.46%)</title><rect x="60.3058%" y="757" width="1.4632%" height="15" fill="rgb(234,111,20)" fg:x="74392" fg:w="1805"/><text x="60.5558%" y="767.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (1,805 samples, 1.46%)</title><rect x="60.3058%" y="741" width="1.4632%" height="15" fill="rgb(237,77,6)" fg:x="74392" fg:w="1805"/><text x="60.5558%" y="751.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (1,805 samples, 1.46%)</title><rect x="60.3058%" y="725" width="1.4632%" height="15" fill="rgb(235,111,23)" fg:x="74392" fg:w="1805"/><text x="60.5558%" y="735.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1,805 samples, 1.46%)</title><rect x="60.3058%" y="709" width="1.4632%" height="15" fill="rgb(251,135,29)" fg:x="74392" fg:w="1805"/><text x="60.5558%" y="719.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1,805 samples, 1.46%)</title><rect x="60.3058%" y="693" width="1.4632%" height="15" fill="rgb(217,57,1)" fg:x="74392" fg:w="1805"/><text x="60.5558%" y="703.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,804 samples, 1.46%)</title><rect x="60.3066%" y="677" width="1.4624%" height="15" fill="rgb(249,119,31)" fg:x="74393" fg:w="1804"/><text x="60.5566%" y="687.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,789 samples, 1.45%)</title><rect x="60.3187%" y="661" width="1.4503%" height="15" fill="rgb(233,164,33)" fg:x="74408" fg:w="1789"/><text x="60.5687%" y="671.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (636 samples, 0.52%)</title><rect x="61.2534%" y="645" width="0.5156%" height="15" fill="rgb(250,217,43)" fg:x="75561" fg:w="636"/><text x="61.5034%" y="655.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (635 samples, 0.51%)</title><rect x="61.2542%" y="629" width="0.5148%" height="15" fill="rgb(232,154,50)" fg:x="75562" fg:w="635"/><text x="61.5042%" y="639.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (635 samples, 0.51%)</title><rect x="61.2542%" y="613" width="0.5148%" height="15" fill="rgb(227,190,8)" fg:x="75562" fg:w="635"/><text x="61.5042%" y="623.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (635 samples, 0.51%)</title><rect x="61.2542%" y="597" width="0.5148%" height="15" fill="rgb(209,217,32)" fg:x="75562" fg:w="635"/><text x="61.5042%" y="607.50"></text></g><g><title>CTransaction::~CTransaction (635 samples, 0.51%)</title><rect x="61.2542%" y="581" width="0.5148%" height="15" fill="rgb(243,203,50)" fg:x="75562" fg:w="635"/><text x="61.5042%" y="591.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (162 samples, 0.13%)</title><rect x="61.6377%" y="565" width="0.1313%" height="15" fill="rgb(232,152,27)" fg:x="76035" fg:w="162"/><text x="61.8877%" y="575.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (53 samples, 0.04%)</title><rect x="61.7260%" y="549" width="0.0430%" height="15" fill="rgb(240,34,29)" fg:x="76144" fg:w="53"/><text x="61.9760%" y="559.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (53 samples, 0.04%)</title><rect x="61.7260%" y="533" width="0.0430%" height="15" fill="rgb(215,185,52)" fg:x="76144" fg:w="53"/><text x="61.9760%" y="543.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (53 samples, 0.04%)</title><rect x="61.7260%" y="517" width="0.0430%" height="15" fill="rgb(240,89,49)" fg:x="76144" fg:w="53"/><text x="61.9760%" y="527.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (45 samples, 0.04%)</title><rect x="61.7325%" y="501" width="0.0365%" height="15" fill="rgb(225,12,52)" fg:x="76152" fg:w="45"/><text x="61.9825%" y="511.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (45 samples, 0.04%)</title><rect x="61.7325%" y="485" width="0.0365%" height="15" fill="rgb(239,128,45)" fg:x="76152" fg:w="45"/><text x="61.9825%" y="495.50"></text></g><g><title>CTxOut::~CTxOut (45 samples, 0.04%)</title><rect x="61.7325%" y="469" width="0.0365%" height="15" fill="rgb(211,78,47)" fg:x="76152" fg:w="45"/><text x="61.9825%" y="479.50"></text></g><g><title>CScript::~CScript (45 samples, 0.04%)</title><rect x="61.7325%" y="453" width="0.0365%" height="15" fill="rgb(232,31,21)" fg:x="76152" fg:w="45"/><text x="61.9825%" y="463.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (45 samples, 0.04%)</title><rect x="61.7325%" y="437" width="0.0365%" height="15" fill="rgb(222,168,14)" fg:x="76152" fg:w="45"/><text x="61.9825%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (26 samples, 0.02%)</title><rect x="61.7479%" y="421" width="0.0211%" height="15" fill="rgb(209,128,24)" fg:x="76171" fg:w="26"/><text x="61.9979%" y="431.50"></text></g><g><title>_M_destroy (1,851 samples, 1.50%)</title><rect x="60.2709%" y="1013" width="1.5005%" height="15" fill="rgb(249,35,13)" fg:x="74349" fg:w="1851"/><text x="60.5209%" y="1023.50"></text></g><g><title>~&lt;lambda&gt; (1,851 samples, 1.50%)</title><rect x="60.2709%" y="997" width="1.5005%" height="15" fill="rgb(218,7,2)" fg:x="74349" fg:w="1851"/><text x="60.5209%" y="1007.50"></text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (1,851 samples, 1.50%)</title><rect x="60.2709%" y="981" width="1.5005%" height="15" fill="rgb(238,107,27)" fg:x="74349" fg:w="1851"/><text x="60.5209%" y="991.50"></text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1,851 samples, 1.50%)</title><rect x="60.2709%" y="965" width="1.5005%" height="15" fill="rgb(217,88,38)" fg:x="74349" fg:w="1851"/><text x="60.5209%" y="975.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1,851 samples, 1.50%)</title><rect x="60.2709%" y="949" width="1.5005%" height="15" fill="rgb(230,207,0)" fg:x="74349" fg:w="1851"/><text x="60.5209%" y="959.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,851 samples, 1.50%)</title><rect x="60.2709%" y="933" width="1.5005%" height="15" fill="rgb(249,64,54)" fg:x="74349" fg:w="1851"/><text x="60.5209%" y="943.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,851 samples, 1.50%)</title><rect x="60.2709%" y="917" width="1.5005%" height="15" fill="rgb(231,7,11)" fg:x="74349" fg:w="1851"/><text x="60.5209%" y="927.50"></text></g><g><title>SerialTaskRunner::ProcessQueue (5,339 samples, 4.33%)</title><rect x="57.4442%" y="1093" width="4.3281%" height="15" fill="rgb(205,149,21)" fg:x="70862" fg:w="5339"/><text x="57.6942%" y="1103.50">Seria..</text></g><g><title>std::function&lt;void ()&gt;::~function (1,852 samples, 1.50%)</title><rect x="60.2709%" y="1077" width="1.5013%" height="15" fill="rgb(215,126,34)" fg:x="74349" fg:w="1852"/><text x="60.5209%" y="1087.50"></text></g><g><title>std::_Function_base::~_Function_base (1,852 samples, 1.50%)</title><rect x="60.2709%" y="1061" width="1.5013%" height="15" fill="rgb(241,132,45)" fg:x="74349" fg:w="1852"/><text x="60.5209%" y="1071.50"></text></g><g><title>_M_manager (1,852 samples, 1.50%)</title><rect x="60.2709%" y="1045" width="1.5013%" height="15" fill="rgb(252,69,32)" fg:x="74349" fg:w="1852"/><text x="60.5209%" y="1055.50"></text></g><g><title>_M_manager (1,852 samples, 1.50%)</title><rect x="60.2709%" y="1029" width="1.5013%" height="15" fill="rgb(232,204,19)" fg:x="74349" fg:w="1852"/><text x="60.5209%" y="1039.50"></text></g><g><title>CScheduler::serviceQueue (5,390 samples, 4.37%)</title><rect x="57.4126%" y="1125" width="4.3694%" height="15" fill="rgb(249,15,47)" fg:x="70823" fg:w="5390"/><text x="57.6626%" y="1135.50">CSche..</text></g><g><title>std::function&lt;void ()&gt;::operator (5,351 samples, 4.34%)</title><rect x="57.4442%" y="1109" width="4.3378%" height="15" fill="rgb(209,227,23)" fg:x="70862" fg:w="5351"/><text x="57.6942%" y="1119.50">std::..</text></g><g><title>__clone (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1285" width="4.3702%" height="15" fill="rgb(248,92,24)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1295.50">__clo..</text></g><g><title>start_thread (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1269" width="4.3702%" height="15" fill="rgb(247,59,2)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1279.50">start..</text></g><g><title>execute_native_thread_routine (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1253" width="4.3702%" height="15" fill="rgb(221,30,5)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1263.50">execu..</text></g><g><title>_M_run (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1237" width="4.3702%" height="15" fill="rgb(208,108,53)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1247.50">_M_run</text></g><g><title>operator (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1221" width="4.3702%" height="15" fill="rgb(211,183,26)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1231.50">opera..</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1205" width="4.3702%" height="15" fill="rgb(232,132,4)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1215.50">_M_in..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1189" width="4.3702%" height="15" fill="rgb(253,128,37)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1199.50">__inv..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1173" width="4.3702%" height="15" fill="rgb(221,58,24)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1183.50">std::..</text></g><g><title>util::TraceThread (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1157" width="4.3702%" height="15" fill="rgb(230,54,45)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1167.50">util:..</text></g><g><title>std::function&lt;void ()&gt;::operator (5,391 samples, 4.37%)</title><rect x="57.4126%" y="1141" width="4.3702%" height="15" fill="rgb(254,21,18)" fg:x="70823" fg:w="5391"/><text x="57.6626%" y="1151.50">std::..</text></g><g><title>_int_free (45 samples, 0.04%)</title><rect x="61.7828%" y="1285" width="0.0365%" height="15" fill="rgb(221,108,0)" fg:x="76214" fg:w="45"/><text x="62.0328%" y="1295.50"></text></g><g><title>cfree@GLIBC_2.2.5 (295 samples, 0.24%)</title><rect x="61.8314%" y="1285" width="0.2391%" height="15" fill="rgb(206,95,1)" fg:x="76274" fg:w="295"/><text x="62.0814%" y="1295.50"></text></g><g><title>_int_free (131 samples, 0.11%)</title><rect x="62.0933%" y="1029" width="0.1062%" height="15" fill="rgb(237,52,5)" fg:x="76597" fg:w="131"/><text x="62.3433%" y="1039.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (147 samples, 0.12%)</title><rect x="62.0811%" y="1285" width="0.1192%" height="15" fill="rgb(218,150,34)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1295.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (147 samples, 0.12%)</title><rect x="62.0811%" y="1269" width="0.1192%" height="15" fill="rgb(235,194,28)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1279.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (147 samples, 0.12%)</title><rect x="62.0811%" y="1253" width="0.1192%" height="15" fill="rgb(245,92,18)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1263.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (147 samples, 0.12%)</title><rect x="62.0811%" y="1237" width="0.1192%" height="15" fill="rgb(253,203,53)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1247.50"></text></g><g><title>CBlock::~CBlock (147 samples, 0.12%)</title><rect x="62.0811%" y="1221" width="0.1192%" height="15" fill="rgb(249,185,47)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1231.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (147 samples, 0.12%)</title><rect x="62.0811%" y="1205" width="0.1192%" height="15" fill="rgb(252,194,52)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (147 samples, 0.12%)</title><rect x="62.0811%" y="1189" width="0.1192%" height="15" fill="rgb(210,53,36)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (147 samples, 0.12%)</title><rect x="62.0811%" y="1173" width="0.1192%" height="15" fill="rgb(237,37,25)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1183.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (147 samples, 0.12%)</title><rect x="62.0811%" y="1157" width="0.1192%" height="15" fill="rgb(242,116,27)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (147 samples, 0.12%)</title><rect x="62.0811%" y="1141" width="0.1192%" height="15" fill="rgb(213,185,26)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1151.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (147 samples, 0.12%)</title><rect x="62.0811%" y="1125" width="0.1192%" height="15" fill="rgb(225,204,8)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1135.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (147 samples, 0.12%)</title><rect x="62.0811%" y="1109" width="0.1192%" height="15" fill="rgb(254,111,37)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1119.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (147 samples, 0.12%)</title><rect x="62.0811%" y="1093" width="0.1192%" height="15" fill="rgb(242,35,9)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1103.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (147 samples, 0.12%)</title><rect x="62.0811%" y="1077" width="0.1192%" height="15" fill="rgb(232,138,49)" fg:x="76582" fg:w="147"/><text x="62.3311%" y="1087.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (146 samples, 0.12%)</title><rect x="62.0819%" y="1061" width="0.1184%" height="15" fill="rgb(247,56,4)" fg:x="76583" fg:w="146"/><text x="62.3319%" y="1071.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (139 samples, 0.11%)</title><rect x="62.0876%" y="1045" width="0.1127%" height="15" fill="rgb(226,179,17)" fg:x="76590" fg:w="139"/><text x="62.3376%" y="1055.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (19 samples, 0.02%)</title><rect x="62.2140%" y="1061" width="0.0154%" height="15" fill="rgb(216,163,45)" fg:x="76746" fg:w="19"/><text x="62.4640%" y="1071.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (16 samples, 0.01%)</title><rect x="62.2165%" y="1045" width="0.0130%" height="15" fill="rgb(211,157,3)" fg:x="76749" fg:w="16"/><text x="62.4665%" y="1055.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (14 samples, 0.01%)</title><rect x="62.2181%" y="1029" width="0.0113%" height="15" fill="rgb(234,44,20)" fg:x="76751" fg:w="14"/><text x="62.4681%" y="1039.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (14 samples, 0.01%)</title><rect x="62.2181%" y="1013" width="0.0113%" height="15" fill="rgb(254,138,23)" fg:x="76751" fg:w="14"/><text x="62.4681%" y="1023.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (14 samples, 0.01%)</title><rect x="62.2181%" y="997" width="0.0113%" height="15" fill="rgb(206,119,39)" fg:x="76751" fg:w="14"/><text x="62.4681%" y="1007.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (82 samples, 0.07%)</title><rect x="62.2059%" y="1205" width="0.0665%" height="15" fill="rgb(231,105,52)" fg:x="76736" fg:w="82"/><text x="62.4559%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (80 samples, 0.06%)</title><rect x="62.2076%" y="1189" width="0.0649%" height="15" fill="rgb(250,20,5)" fg:x="76738" fg:w="80"/><text x="62.4576%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (80 samples, 0.06%)</title><rect x="62.2076%" y="1173" width="0.0649%" height="15" fill="rgb(215,198,30)" fg:x="76738" fg:w="80"/><text x="62.4576%" y="1183.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (80 samples, 0.06%)</title><rect x="62.2076%" y="1157" width="0.0649%" height="15" fill="rgb(246,142,8)" fg:x="76738" fg:w="80"/><text x="62.4576%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (75 samples, 0.06%)</title><rect x="62.2116%" y="1141" width="0.0608%" height="15" fill="rgb(243,26,38)" fg:x="76743" fg:w="75"/><text x="62.4616%" y="1151.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (75 samples, 0.06%)</title><rect x="62.2116%" y="1125" width="0.0608%" height="15" fill="rgb(205,133,28)" fg:x="76743" fg:w="75"/><text x="62.4616%" y="1135.50"></text></g><g><title>CTxIn::~CTxIn (75 samples, 0.06%)</title><rect x="62.2116%" y="1109" width="0.0608%" height="15" fill="rgb(212,34,0)" fg:x="76743" fg:w="75"/><text x="62.4616%" y="1119.50"></text></g><g><title>CScriptWitness::~CScriptWitness (72 samples, 0.06%)</title><rect x="62.2140%" y="1093" width="0.0584%" height="15" fill="rgb(251,226,22)" fg:x="76746" fg:w="72"/><text x="62.4640%" y="1103.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (72 samples, 0.06%)</title><rect x="62.2140%" y="1077" width="0.0584%" height="15" fill="rgb(252,119,9)" fg:x="76746" fg:w="72"/><text x="62.4640%" y="1087.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (53 samples, 0.04%)</title><rect x="62.2294%" y="1061" width="0.0430%" height="15" fill="rgb(213,150,50)" fg:x="76765" fg:w="53"/><text x="62.4794%" y="1071.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (53 samples, 0.04%)</title><rect x="62.2294%" y="1045" width="0.0430%" height="15" fill="rgb(212,24,39)" fg:x="76765" fg:w="53"/><text x="62.4794%" y="1055.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (53 samples, 0.04%)</title><rect x="62.2294%" y="1029" width="0.0430%" height="15" fill="rgb(213,46,39)" fg:x="76765" fg:w="53"/><text x="62.4794%" y="1039.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (46 samples, 0.04%)</title><rect x="62.2351%" y="1013" width="0.0373%" height="15" fill="rgb(239,106,12)" fg:x="76772" fg:w="46"/><text x="62.4851%" y="1023.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (46 samples, 0.04%)</title><rect x="62.2351%" y="997" width="0.0373%" height="15" fill="rgb(249,229,21)" fg:x="76772" fg:w="46"/><text x="62.4851%" y="1007.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (46 samples, 0.04%)</title><rect x="62.2351%" y="981" width="0.0373%" height="15" fill="rgb(212,158,3)" fg:x="76772" fg:w="46"/><text x="62.4851%" y="991.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (46 samples, 0.04%)</title><rect x="62.2351%" y="965" width="0.0373%" height="15" fill="rgb(253,26,48)" fg:x="76772" fg:w="46"/><text x="62.4851%" y="975.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (25 samples, 0.02%)</title><rect x="62.2521%" y="949" width="0.0203%" height="15" fill="rgb(238,178,20)" fg:x="76793" fg:w="25"/><text x="62.5021%" y="959.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (24 samples, 0.02%)</title><rect x="62.2530%" y="933" width="0.0195%" height="15" fill="rgb(208,86,15)" fg:x="76794" fg:w="24"/><text x="62.5030%" y="943.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (24 samples, 0.02%)</title><rect x="62.2530%" y="917" width="0.0195%" height="15" fill="rgb(239,42,53)" fg:x="76794" fg:w="24"/><text x="62.5030%" y="927.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (24 samples, 0.02%)</title><rect x="62.2530%" y="901" width="0.0195%" height="15" fill="rgb(245,226,8)" fg:x="76794" fg:w="24"/><text x="62.5030%" y="911.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (125 samples, 0.10%)</title><rect x="62.2035%" y="1285" width="0.1013%" height="15" fill="rgb(216,176,32)" fg:x="76733" fg:w="125"/><text x="62.4535%" y="1295.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (122 samples, 0.10%)</title><rect x="62.2059%" y="1269" width="0.0989%" height="15" fill="rgb(231,186,21)" fg:x="76736" fg:w="122"/><text x="62.4559%" y="1279.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (122 samples, 0.10%)</title><rect x="62.2059%" y="1253" width="0.0989%" height="15" fill="rgb(205,95,49)" fg:x="76736" fg:w="122"/><text x="62.4559%" y="1263.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (122 samples, 0.10%)</title><rect x="62.2059%" y="1237" width="0.0989%" height="15" fill="rgb(217,145,8)" fg:x="76736" fg:w="122"/><text x="62.4559%" y="1247.50"></text></g><g><title>CTransaction::~CTransaction (122 samples, 0.10%)</title><rect x="62.2059%" y="1221" width="0.0989%" height="15" fill="rgb(239,144,48)" fg:x="76736" fg:w="122"/><text x="62.4559%" y="1231.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (40 samples, 0.03%)</title><rect x="62.2724%" y="1205" width="0.0324%" height="15" fill="rgb(214,189,23)" fg:x="76818" fg:w="40"/><text x="62.5224%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (31 samples, 0.03%)</title><rect x="62.2797%" y="1189" width="0.0251%" height="15" fill="rgb(229,157,17)" fg:x="76827" fg:w="31"/><text x="62.5297%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (31 samples, 0.03%)</title><rect x="62.2797%" y="1173" width="0.0251%" height="15" fill="rgb(230,5,48)" fg:x="76827" fg:w="31"/><text x="62.5297%" y="1183.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (31 samples, 0.03%)</title><rect x="62.2797%" y="1157" width="0.0251%" height="15" fill="rgb(224,156,48)" fg:x="76827" fg:w="31"/><text x="62.5297%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (24 samples, 0.02%)</title><rect x="62.2854%" y="1141" width="0.0195%" height="15" fill="rgb(223,14,29)" fg:x="76834" fg:w="24"/><text x="62.5354%" y="1151.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (24 samples, 0.02%)</title><rect x="62.2854%" y="1125" width="0.0195%" height="15" fill="rgb(229,96,36)" fg:x="76834" fg:w="24"/><text x="62.5354%" y="1135.50"></text></g><g><title>CTxOut::~CTxOut (24 samples, 0.02%)</title><rect x="62.2854%" y="1109" width="0.0195%" height="15" fill="rgb(231,102,53)" fg:x="76834" fg:w="24"/><text x="62.5354%" y="1119.50"></text></g><g><title>CScript::~CScript (24 samples, 0.02%)</title><rect x="62.2854%" y="1093" width="0.0195%" height="15" fill="rgb(210,77,38)" fg:x="76834" fg:w="24"/><text x="62.5354%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (24 samples, 0.02%)</title><rect x="62.2854%" y="1077" width="0.0195%" height="15" fill="rgb(235,131,6)" fg:x="76834" fg:w="24"/><text x="62.5354%" y="1087.50"></text></g><g><title>b-scheduler (7,381 samples, 5.98%)</title><rect x="56.3222%" y="1301" width="5.9834%" height="15" fill="rgb(252,55,38)" fg:x="69478" fg:w="7381"/><text x="56.5722%" y="1311.50">b-schedu..</text></g><g><title>CCoinsViewDB::BatchWrite (13 samples, 0.01%)</title><rect x="62.3413%" y="1157" width="0.0105%" height="15" fill="rgb(246,38,14)" fg:x="76903" fg:w="13"/><text x="62.5913%" y="1167.50"></text></g><g><title>Chainstate::ForceFlushStateToDisk (14 samples, 0.01%)</title><rect x="62.3413%" y="1205" width="0.0113%" height="15" fill="rgb(242,27,5)" fg:x="76903" fg:w="14"/><text x="62.5913%" y="1215.50"></text></g><g><title>Chainstate::FlushStateToDisk (14 samples, 0.01%)</title><rect x="62.3413%" y="1189" width="0.0113%" height="15" fill="rgb(228,65,35)" fg:x="76903" fg:w="14"/><text x="62.5913%" y="1199.50"></text></g><g><title>CCoinsViewCache::Flush (14 samples, 0.01%)</title><rect x="62.3413%" y="1173" width="0.0113%" height="15" fill="rgb(245,93,11)" fg:x="76903" fg:w="14"/><text x="62.5913%" y="1183.50"></text></g><g><title>Chainstate::ResetCoinsViews (23 samples, 0.02%)</title><rect x="62.3527%" y="1205" width="0.0186%" height="15" fill="rgb(213,1,31)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1215.50"></text></g><g><title>std::unique_ptr&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (23 samples, 0.02%)</title><rect x="62.3527%" y="1189" width="0.0186%" height="15" fill="rgb(237,205,14)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1199.50"></text></g><g><title>std::__uniq_ptr_impl&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (23 samples, 0.02%)</title><rect x="62.3527%" y="1173" width="0.0186%" height="15" fill="rgb(232,118,45)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1183.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (23 samples, 0.02%)</title><rect x="62.3527%" y="1157" width="0.0186%" height="15" fill="rgb(218,5,6)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1167.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (23 samples, 0.02%)</title><rect x="62.3527%" y="1141" width="0.0186%" height="15" fill="rgb(251,87,51)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1151.50"></text></g><g><title>CoinsViews::~CoinsViews (23 samples, 0.02%)</title><rect x="62.3527%" y="1125" width="0.0186%" height="15" fill="rgb(207,225,20)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1135.50"></text></g><g><title>CCoinsViewDB::~CCoinsViewDB (23 samples, 0.02%)</title><rect x="62.3527%" y="1109" width="0.0186%" height="15" fill="rgb(222,78,54)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1119.50"></text></g><g><title>std::unique_ptr&lt;CDBWrapper, std::default_delete&lt;CDBWrapper&gt; &gt;::~unique_ptr (23 samples, 0.02%)</title><rect x="62.3527%" y="1093" width="0.0186%" height="15" fill="rgb(232,85,16)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1103.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (23 samples, 0.02%)</title><rect x="62.3527%" y="1077" width="0.0186%" height="15" fill="rgb(244,25,33)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1087.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (23 samples, 0.02%)</title><rect x="62.3527%" y="1061" width="0.0186%" height="15" fill="rgb(233,24,36)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1071.50"></text></g><g><title>CDBWrapper::~CDBWrapper (23 samples, 0.02%)</title><rect x="62.3527%" y="1045" width="0.0186%" height="15" fill="rgb(253,49,54)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1055.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (23 samples, 0.02%)</title><rect x="62.3527%" y="1029" width="0.0186%" height="15" fill="rgb(245,12,22)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1039.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (23 samples, 0.02%)</title><rect x="62.3527%" y="1013" width="0.0186%" height="15" fill="rgb(253,141,28)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1023.50"></text></g><g><title>leveldb::TableCache::~TableCache (23 samples, 0.02%)</title><rect x="62.3527%" y="997" width="0.0186%" height="15" fill="rgb(225,207,27)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="1007.50"></text></g><g><title>~ShardedLRUCache (23 samples, 0.02%)</title><rect x="62.3527%" y="981" width="0.0186%" height="15" fill="rgb(220,84,2)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="991.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::~ShardedLRUCache (23 samples, 0.02%)</title><rect x="62.3527%" y="965" width="0.0186%" height="15" fill="rgb(224,37,37)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="975.50"></text></g><g><title>~LRUCache (23 samples, 0.02%)</title><rect x="62.3527%" y="949" width="0.0186%" height="15" fill="rgb(220,143,18)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::~LRUCache (23 samples, 0.02%)</title><rect x="62.3527%" y="933" width="0.0186%" height="15" fill="rgb(210,88,33)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="943.50"></text></g><g><title>leveldb::DeleteEntry (23 samples, 0.02%)</title><rect x="62.3527%" y="917" width="0.0186%" height="15" fill="rgb(219,87,51)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="927.50"></text></g><g><title>~PosixMmapReadableFile (23 samples, 0.02%)</title><rect x="62.3527%" y="901" width="0.0186%" height="15" fill="rgb(211,7,35)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (23 samples, 0.02%)</title><rect x="62.3527%" y="885" width="0.0186%" height="15" fill="rgb(232,77,2)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="895.50"></text></g><g><title>__munmap (23 samples, 0.02%)</title><rect x="62.3527%" y="869" width="0.0186%" height="15" fill="rgb(249,94,25)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="879.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="62.3527%" y="853" width="0.0186%" height="15" fill="rgb(215,112,2)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="863.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="62.3527%" y="837" width="0.0186%" height="15" fill="rgb(226,115,48)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="847.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="62.3527%" y="821" width="0.0186%" height="15" fill="rgb(249,196,10)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="831.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="62.3527%" y="805" width="0.0186%" height="15" fill="rgb(237,109,14)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="815.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="62.3527%" y="789" width="0.0186%" height="15" fill="rgb(217,103,53)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="799.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="62.3527%" y="773" width="0.0186%" height="15" fill="rgb(244,137,9)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="783.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="62.3527%" y="757" width="0.0186%" height="15" fill="rgb(227,201,3)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="767.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="62.3527%" y="741" width="0.0186%" height="15" fill="rgb(243,94,6)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="751.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="62.3527%" y="725" width="0.0186%" height="15" fill="rgb(235,118,5)" fg:x="76917" fg:w="23"/><text x="62.6027%" y="735.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="62.3583%" y="709" width="0.0130%" height="15" fill="rgb(247,10,30)" fg:x="76924" fg:w="16"/><text x="62.6083%" y="719.50"></text></g><g><title>b-shutoff (68 samples, 0.06%)</title><rect x="62.3219%" y="1301" width="0.0551%" height="15" fill="rgb(205,26,28)" fg:x="76879" fg:w="68"/><text x="62.5719%" y="1311.50"></text></g><g><title>_start (49 samples, 0.04%)</title><rect x="62.3373%" y="1285" width="0.0397%" height="15" fill="rgb(206,99,35)" fg:x="76898" fg:w="49"/><text x="62.5873%" y="1295.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (49 samples, 0.04%)</title><rect x="62.3373%" y="1269" width="0.0397%" height="15" fill="rgb(238,130,40)" fg:x="76898" fg:w="49"/><text x="62.5873%" y="1279.50"></text></g><g><title>__libc_start_call_main (49 samples, 0.04%)</title><rect x="62.3373%" y="1253" width="0.0397%" height="15" fill="rgb(224,126,31)" fg:x="76898" fg:w="49"/><text x="62.5873%" y="1263.50"></text></g><g><title>main (49 samples, 0.04%)</title><rect x="62.3373%" y="1237" width="0.0397%" height="15" fill="rgb(254,105,17)" fg:x="76898" fg:w="49"/><text x="62.5873%" y="1247.50"></text></g><g><title>Shutdown (49 samples, 0.04%)</title><rect x="62.3373%" y="1221" width="0.0397%" height="15" fill="rgb(216,87,36)" fg:x="76898" fg:w="49"/><text x="62.5873%" y="1231.50"></text></g><g><title>__clone (93 samples, 0.08%)</title><rect x="62.5602%" y="1269" width="0.0754%" height="15" fill="rgb(240,21,12)" fg:x="77173" fg:w="93"/><text x="62.8102%" y="1279.50"></text></g><g><title>[unknown] (92 samples, 0.07%)</title><rect x="62.5610%" y="1253" width="0.0746%" height="15" fill="rgb(245,192,34)" fg:x="77174" fg:w="92"/><text x="62.8110%" y="1263.50"></text></g><g><title>[unknown] (87 samples, 0.07%)</title><rect x="62.5651%" y="1237" width="0.0705%" height="15" fill="rgb(226,100,49)" fg:x="77179" fg:w="87"/><text x="62.8151%" y="1247.50"></text></g><g><title>[unknown] (87 samples, 0.07%)</title><rect x="62.5651%" y="1221" width="0.0705%" height="15" fill="rgb(245,188,27)" fg:x="77179" fg:w="87"/><text x="62.8151%" y="1231.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="62.5667%" y="1205" width="0.0689%" height="15" fill="rgb(212,170,8)" fg:x="77181" fg:w="85"/><text x="62.8167%" y="1215.50"></text></g><g><title>[unknown] (84 samples, 0.07%)</title><rect x="62.5675%" y="1189" width="0.0681%" height="15" fill="rgb(217,113,29)" fg:x="77182" fg:w="84"/><text x="62.8175%" y="1199.50"></text></g><g><title>[unknown] (82 samples, 0.07%)</title><rect x="62.5691%" y="1173" width="0.0665%" height="15" fill="rgb(237,30,3)" fg:x="77184" fg:w="82"/><text x="62.8191%" y="1183.50"></text></g><g><title>[unknown] (82 samples, 0.07%)</title><rect x="62.5691%" y="1157" width="0.0665%" height="15" fill="rgb(227,19,28)" fg:x="77184" fg:w="82"/><text x="62.8191%" y="1167.50"></text></g><g><title>[unknown] (82 samples, 0.07%)</title><rect x="62.5691%" y="1141" width="0.0665%" height="15" fill="rgb(239,172,45)" fg:x="77184" fg:w="82"/><text x="62.8191%" y="1151.50"></text></g><g><title>[unknown] (70 samples, 0.06%)</title><rect x="62.5788%" y="1125" width="0.0567%" height="15" fill="rgb(254,55,39)" fg:x="77196" fg:w="70"/><text x="62.8288%" y="1135.50"></text></g><g><title>[unknown] (31 samples, 0.03%)</title><rect x="62.6105%" y="1109" width="0.0251%" height="15" fill="rgb(249,208,12)" fg:x="77235" fg:w="31"/><text x="62.8605%" y="1119.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="62.6161%" y="1093" width="0.0195%" height="15" fill="rgb(240,52,13)" fg:x="77242" fg:w="24"/><text x="62.8661%" y="1103.50"></text></g><g><title>[[heap]] (134 samples, 0.11%)</title><rect x="62.5594%" y="1285" width="0.1086%" height="15" fill="rgb(252,149,13)" fg:x="77172" fg:w="134"/><text x="62.8094%" y="1295.50"></text></g><g><title>[[stack]] (17 samples, 0.01%)</title><rect x="62.6680%" y="1285" width="0.0138%" height="15" fill="rgb(232,81,48)" fg:x="77306" fg:w="17"/><text x="62.9180%" y="1295.50"></text></g><g><title>__GI___libc_write (38 samples, 0.03%)</title><rect x="62.6818%" y="1269" width="0.0308%" height="15" fill="rgb(222,144,2)" fg:x="77323" fg:w="38"/><text x="62.9318%" y="1279.50"></text></g><g><title>__memcmp_evex_movbe (609 samples, 0.49%)</title><rect x="62.7191%" y="1269" width="0.4937%" height="15" fill="rgb(216,81,32)" fg:x="77369" fg:w="609"/><text x="62.9691%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1,070 samples, 0.87%)</title><rect x="63.2128%" y="1269" width="0.8674%" height="15" fill="rgb(244,78,51)" fg:x="77978" fg:w="1070"/><text x="63.4628%" y="1279.50"></text></g><g><title>_int_free (30 samples, 0.02%)</title><rect x="64.0850%" y="1269" width="0.0243%" height="15" fill="rgb(217,66,21)" fg:x="79054" fg:w="30"/><text x="64.3350%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (264 samples, 0.21%)</title><rect x="64.1483%" y="1269" width="0.2140%" height="15" fill="rgb(247,101,42)" fg:x="79132" fg:w="264"/><text x="64.3983%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (64 samples, 0.05%)</title><rect x="64.3679%" y="1269" width="0.0519%" height="15" fill="rgb(227,81,39)" fg:x="79403" fg:w="64"/><text x="64.6179%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (20 samples, 0.02%)</title><rect x="64.4198%" y="1269" width="0.0162%" height="15" fill="rgb(220,223,44)" fg:x="79467" fg:w="20"/><text x="64.6698%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (46 samples, 0.04%)</title><rect x="64.4360%" y="1269" width="0.0373%" height="15" fill="rgb(205,218,2)" fg:x="79487" fg:w="46"/><text x="64.6860%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::value (15 samples, 0.01%)</title><rect x="64.4733%" y="1269" width="0.0122%" height="15" fill="rgb(212,207,28)" fg:x="79533" fg:w="15"/><text x="64.7233%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (40 samples, 0.03%)</title><rect x="64.4960%" y="1269" width="0.0324%" height="15" fill="rgb(224,12,41)" fg:x="79561" fg:w="40"/><text x="64.7460%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (58 samples, 0.05%)</title><rect x="64.5284%" y="1269" width="0.0470%" height="15" fill="rgb(216,118,12)" fg:x="79601" fg:w="58"/><text x="64.7784%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (29 samples, 0.02%)</title><rect x="64.5755%" y="1269" width="0.0235%" height="15" fill="rgb(252,97,46)" fg:x="79659" fg:w="29"/><text x="64.8255%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (17 samples, 0.01%)</title><rect x="64.5990%" y="1269" width="0.0138%" height="15" fill="rgb(244,206,19)" fg:x="79688" fg:w="17"/><text x="64.8490%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (50 samples, 0.04%)</title><rect x="64.6128%" y="1269" width="0.0405%" height="15" fill="rgb(231,84,31)" fg:x="79705" fg:w="50"/><text x="64.8628%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::Next (31 samples, 0.03%)</title><rect x="64.6541%" y="1269" width="0.0251%" height="15" fill="rgb(244,133,0)" fg:x="79756" fg:w="31"/><text x="64.9041%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (72 samples, 0.06%)</title><rect x="64.6792%" y="1269" width="0.0584%" height="15" fill="rgb(223,15,50)" fg:x="79787" fg:w="72"/><text x="64.9292%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::Valid (44 samples, 0.04%)</title><rect x="64.7392%" y="1269" width="0.0357%" height="15" fill="rgb(250,118,49)" fg:x="79861" fg:w="44"/><text x="64.9892%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::key (29 samples, 0.02%)</title><rect x="64.7749%" y="1269" width="0.0235%" height="15" fill="rgb(248,25,38)" fg:x="79905" fg:w="29"/><text x="65.0249%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::value (53 samples, 0.04%)</title><rect x="64.7984%" y="1269" width="0.0430%" height="15" fill="rgb(215,70,14)" fg:x="79934" fg:w="53"/><text x="65.0484%" y="1279.50"></text></g><g><title>leveldb::BlockBuilder::Add (100 samples, 0.08%)</title><rect x="64.8414%" y="1269" width="0.0811%" height="15" fill="rgb(215,28,15)" fg:x="79987" fg:w="100"/><text x="65.0914%" y="1279.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (37 samples, 0.03%)</title><rect x="64.9224%" y="1269" width="0.0300%" height="15" fill="rgb(243,6,28)" fg:x="80087" fg:w="37"/><text x="65.1724%" y="1279.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (77 samples, 0.06%)</title><rect x="64.9573%" y="1269" width="0.0624%" height="15" fill="rgb(222,130,1)" fg:x="80130" fg:w="77"/><text x="65.2073%" y="1279.50"></text></g><g><title>leveldb::EncodeVarint32 (84 samples, 0.07%)</title><rect x="65.0205%" y="1269" width="0.0681%" height="15" fill="rgb(236,166,44)" fg:x="80208" fg:w="84"/><text x="65.2705%" y="1279.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (58 samples, 0.05%)</title><rect x="65.0886%" y="1269" width="0.0470%" height="15" fill="rgb(221,108,14)" fg:x="80292" fg:w="58"/><text x="65.3386%" y="1279.50"></text></g><g><title>leveldb::Hash (206 samples, 0.17%)</title><rect x="65.1453%" y="1269" width="0.1670%" height="15" fill="rgb(252,3,45)" fg:x="80362" fg:w="206"/><text x="65.3953%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (224 samples, 0.18%)</title><rect x="65.3164%" y="1269" width="0.1816%" height="15" fill="rgb(237,68,30)" fg:x="80573" fg:w="224"/><text x="65.5664%" y="1279.50"></text></g><g><title>leveldb::PutVarint32 (47 samples, 0.04%)</title><rect x="65.5110%" y="1269" width="0.0381%" height="15" fill="rgb(211,79,22)" fg:x="80813" fg:w="47"/><text x="65.7610%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (70 samples, 0.06%)</title><rect x="65.5507%" y="1269" width="0.0567%" height="15" fill="rgb(252,185,21)" fg:x="80862" fg:w="70"/><text x="65.8007%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::FileSize (36 samples, 0.03%)</title><rect x="65.6074%" y="1269" width="0.0292%" height="15" fill="rgb(225,189,26)" fg:x="80932" fg:w="36"/><text x="65.8574%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (39 samples, 0.03%)</title><rect x="65.6374%" y="1269" width="0.0316%" height="15" fill="rgb(241,30,40)" fg:x="80969" fg:w="39"/><text x="65.8874%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::status (52 samples, 0.04%)</title><rect x="65.6698%" y="1269" width="0.0422%" height="15" fill="rgb(235,215,44)" fg:x="81009" fg:w="52"/><text x="65.9198%" y="1279.50"></text></g><g><title>malloc (19 samples, 0.02%)</title><rect x="65.7136%" y="1269" width="0.0154%" height="15" fill="rgb(205,8,29)" fg:x="81063" fg:w="19"/><text x="65.9636%" y="1279.50"></text></g><g><title>memcmp@plt (98 samples, 0.08%)</title><rect x="65.7331%" y="1269" width="0.0794%" height="15" fill="rgb(241,137,42)" fg:x="81087" fg:w="98"/><text x="65.9831%" y="1279.50"></text></g><g><title>memcpy@plt (165 samples, 0.13%)</title><rect x="65.8125%" y="1269" width="0.1338%" height="15" fill="rgb(237,155,2)" fg:x="81185" fg:w="165"/><text x="66.0625%" y="1279.50"></text></g><g><title>unlink_chunk.isra.0 (19 samples, 0.02%)</title><rect x="65.9852%" y="1269" width="0.0154%" height="15" fill="rgb(245,29,42)" fg:x="81398" fg:w="19"/><text x="66.2352%" y="1279.50"></text></g><g><title>[anon] (4,096 samples, 3.32%)</title><rect x="62.6818%" y="1285" width="3.3204%" height="15" fill="rgb(234,101,35)" fg:x="77323" fg:w="4096"/><text x="62.9318%" y="1295.50">[an..</text></g><g><title>[bitcoind-head] (13 samples, 0.01%)</title><rect x="66.0022%" y="1285" width="0.0105%" height="15" fill="rgb(228,64,37)" fg:x="81419" fg:w="13"/><text x="66.2522%" y="1295.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="66.0225%" y="1269" width="0.0170%" height="15" fill="rgb(217,214,36)" fg:x="81444" fg:w="21"/><text x="66.2725%" y="1279.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="66.0233%" y="1253" width="0.0162%" height="15" fill="rgb(243,70,3)" fg:x="81445" fg:w="20"/><text x="66.2733%" y="1263.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="66.0265%" y="1237" width="0.0130%" height="15" fill="rgb(253,158,52)" fg:x="81449" fg:w="16"/><text x="66.2765%" y="1247.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.0273%" y="1221" width="0.0122%" height="15" fill="rgb(234,111,54)" fg:x="81450" fg:w="15"/><text x="66.2773%" y="1231.50"></text></g><g><title>__memcmp_evex_movbe (91 samples, 0.07%)</title><rect x="66.0395%" y="1269" width="0.0738%" height="15" fill="rgb(217,70,32)" fg:x="81465" fg:w="91"/><text x="66.2895%" y="1279.50"></text></g><g><title>__memmove_avx512_unaligned_erms (24 samples, 0.02%)</title><rect x="66.1133%" y="1269" width="0.0195%" height="15" fill="rgb(234,18,33)" fg:x="81556" fg:w="24"/><text x="66.3633%" y="1279.50"></text></g><g><title>_int_free (31 samples, 0.03%)</title><rect x="66.1368%" y="1269" width="0.0251%" height="15" fill="rgb(234,12,49)" fg:x="81585" fg:w="31"/><text x="66.3868%" y="1279.50"></text></g><g><title>_int_malloc (49 samples, 0.04%)</title><rect x="66.1660%" y="1269" width="0.0397%" height="15" fill="rgb(236,10,21)" fg:x="81621" fg:w="49"/><text x="66.4160%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (19 samples, 0.02%)</title><rect x="66.2081%" y="1269" width="0.0154%" height="15" fill="rgb(248,182,45)" fg:x="81673" fg:w="19"/><text x="66.4581%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (176 samples, 0.14%)</title><rect x="66.2259%" y="1269" width="0.1427%" height="15" fill="rgb(217,95,36)" fg:x="81695" fg:w="176"/><text x="66.4759%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (62 samples, 0.05%)</title><rect x="66.3686%" y="1269" width="0.0503%" height="15" fill="rgb(212,110,31)" fg:x="81871" fg:w="62"/><text x="66.6186%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (15 samples, 0.01%)</title><rect x="66.4189%" y="1269" width="0.0122%" height="15" fill="rgb(206,32,53)" fg:x="81933" fg:w="15"/><text x="66.6689%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (13 samples, 0.01%)</title><rect x="66.4310%" y="1269" width="0.0105%" height="15" fill="rgb(246,141,37)" fg:x="81948" fg:w="13"/><text x="66.6810%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (33 samples, 0.03%)</title><rect x="66.4481%" y="1269" width="0.0268%" height="15" fill="rgb(219,16,7)" fg:x="81969" fg:w="33"/><text x="66.6981%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (35 samples, 0.03%)</title><rect x="66.4748%" y="1269" width="0.0284%" height="15" fill="rgb(230,205,45)" fg:x="82002" fg:w="35"/><text x="66.7248%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (20 samples, 0.02%)</title><rect x="66.5032%" y="1269" width="0.0162%" height="15" fill="rgb(231,43,49)" fg:x="82037" fg:w="20"/><text x="66.7532%" y="1279.50"></text></g><g><title>leveldb::Hash (66 samples, 0.05%)</title><rect x="66.5648%" y="1269" width="0.0535%" height="15" fill="rgb(212,106,34)" fg:x="82113" fg:w="66"/><text x="66.8148%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (85 samples, 0.07%)</title><rect x="66.6199%" y="1269" width="0.0689%" height="15" fill="rgb(206,83,17)" fg:x="82181" fg:w="85"/><text x="66.8699%" y="1279.50"></text></g><g><title>malloc (38 samples, 0.03%)</title><rect x="66.7285%" y="1269" width="0.0308%" height="15" fill="rgb(244,154,49)" fg:x="82315" fg:w="38"/><text x="66.9785%" y="1279.50"></text></g><g><title>[unknown] (943 samples, 0.76%)</title><rect x="66.0127%" y="1285" width="0.7644%" height="15" fill="rgb(244,149,49)" fg:x="81432" fg:w="943"/><text x="66.2627%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (17 samples, 0.01%)</title><rect x="66.7934%" y="1173" width="0.0138%" height="15" fill="rgb(227,134,18)" fg:x="82395" fg:w="17"/><text x="67.0434%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (244 samples, 0.20%)</title><rect x="66.8072%" y="1173" width="0.1978%" height="15" fill="rgb(237,116,36)" fg:x="82412" fg:w="244"/><text x="67.0572%" y="1183.50"></text></g><g><title>leveldb::Slice::compare (86 samples, 0.07%)</title><rect x="66.9353%" y="1157" width="0.0697%" height="15" fill="rgb(205,129,40)" fg:x="82570" fg:w="86"/><text x="67.1853%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (496 samples, 0.40%)</title><rect x="67.0050%" y="1173" width="0.4021%" height="15" fill="rgb(236,178,4)" fg:x="82656" fg:w="496"/><text x="67.2550%" y="1183.50"></text></g><g><title>leveldb::IteratorWrapper::key (17 samples, 0.01%)</title><rect x="67.3933%" y="1157" width="0.0138%" height="15" fill="rgb(251,76,53)" fg:x="83135" fg:w="17"/><text x="67.6433%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (247 samples, 0.20%)</title><rect x="67.4071%" y="1173" width="0.2002%" height="15" fill="rgb(242,92,40)" fg:x="83152" fg:w="247"/><text x="67.6571%" y="1183.50"></text></g><g><title>leveldb::IteratorWrapper::Next (157 samples, 0.13%)</title><rect x="67.4800%" y="1157" width="0.1273%" height="15" fill="rgb(209,45,30)" fg:x="83242" fg:w="157"/><text x="67.7300%" y="1167.50"></text></g><g><title>leveldb::IteratorWrapper::Update (157 samples, 0.13%)</title><rect x="67.4800%" y="1141" width="0.1273%" height="15" fill="rgb(218,157,36)" fg:x="83242" fg:w="157"/><text x="67.7300%" y="1151.50"></text></g><g><title>leveldb::IteratorWrapper::Update (93 samples, 0.08%)</title><rect x="67.5319%" y="1125" width="0.0754%" height="15" fill="rgb(222,186,16)" fg:x="83306" fg:w="93"/><text x="67.7819%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (29 samples, 0.02%)</title><rect x="67.6073%" y="1173" width="0.0235%" height="15" fill="rgb(254,72,35)" fg:x="83399" fg:w="29"/><text x="67.8573%" y="1183.50"></text></g><g><title>key (21 samples, 0.02%)</title><rect x="67.7338%" y="1109" width="0.0170%" height="15" fill="rgb(224,25,35)" fg:x="83555" fg:w="21"/><text x="67.9838%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (149 samples, 0.12%)</title><rect x="67.6373%" y="1173" width="0.1208%" height="15" fill="rgb(206,135,52)" fg:x="83436" fg:w="149"/><text x="67.8873%" y="1183.50"></text></g><g><title>leveldb::IteratorWrapper::Next (112 samples, 0.09%)</title><rect x="67.6673%" y="1157" width="0.0908%" height="15" fill="rgb(229,174,47)" fg:x="83473" fg:w="112"/><text x="67.9173%" y="1167.50"></text></g><g><title>leveldb::IteratorWrapper::Update (112 samples, 0.09%)</title><rect x="67.6673%" y="1141" width="0.0908%" height="15" fill="rgb(242,184,21)" fg:x="83473" fg:w="112"/><text x="67.9173%" y="1151.50"></text></g><g><title>leveldb::IteratorWrapper::Update (65 samples, 0.05%)</title><rect x="67.7054%" y="1125" width="0.0527%" height="15" fill="rgb(213,22,45)" fg:x="83520" fg:w="65"/><text x="67.9554%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (183 samples, 0.15%)</title><rect x="67.7581%" y="1173" width="0.1483%" height="15" fill="rgb(237,81,54)" fg:x="83585" fg:w="183"/><text x="68.0081%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (58 samples, 0.05%)</title><rect x="67.9064%" y="1173" width="0.0470%" height="15" fill="rgb(248,177,18)" fg:x="83768" fg:w="58"/><text x="68.1564%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (103 samples, 0.08%)</title><rect x="67.9534%" y="1173" width="0.0835%" height="15" fill="rgb(254,31,16)" fg:x="83826" fg:w="103"/><text x="68.2034%" y="1183.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (19 samples, 0.02%)</title><rect x="68.0580%" y="1173" width="0.0154%" height="15" fill="rgb(235,20,31)" fg:x="83955" fg:w="19"/><text x="68.3080%" y="1183.50"></text></g><g><title>[[ext4]] (29 samples, 0.02%)</title><rect x="68.1447%" y="997" width="0.0235%" height="15" fill="rgb(240,56,43)" fg:x="84062" fg:w="29"/><text x="68.3947%" y="1007.50"></text></g><g><title>[[jbd2]] (55 samples, 0.04%)</title><rect x="68.1983%" y="981" width="0.0446%" height="15" fill="rgb(237,197,51)" fg:x="84128" fg:w="55"/><text x="68.4483%" y="991.50"></text></g><g><title>[[jbd2]] (104 samples, 0.08%)</title><rect x="68.1683%" y="997" width="0.0843%" height="15" fill="rgb(241,162,44)" fg:x="84091" fg:w="104"/><text x="68.4183%" y="1007.50"></text></g><g><title>[[ext4]] (1,457 samples, 1.18%)</title><rect x="68.0742%" y="1045" width="1.1811%" height="15" fill="rgb(224,23,20)" fg:x="83975" fg:w="1457"/><text x="68.3242%" y="1055.50"></text></g><g><title>[unknown] (1,445 samples, 1.17%)</title><rect x="68.0840%" y="1029" width="1.1714%" height="15" fill="rgb(250,109,34)" fg:x="83987" fg:w="1445"/><text x="68.3340%" y="1039.50"></text></g><g><title>[unknown] (1,442 samples, 1.17%)</title><rect x="68.0864%" y="1013" width="1.1690%" height="15" fill="rgb(214,175,50)" fg:x="83990" fg:w="1442"/><text x="68.3364%" y="1023.50"></text></g><g><title>[unknown] (1,237 samples, 1.00%)</title><rect x="68.2526%" y="997" width="1.0028%" height="15" fill="rgb(213,182,5)" fg:x="84195" fg:w="1237"/><text x="68.5026%" y="1007.50"></text></g><g><title>[unknown] (898 samples, 0.73%)</title><rect x="68.5274%" y="981" width="0.7280%" height="15" fill="rgb(209,199,19)" fg:x="84534" fg:w="898"/><text x="68.7774%" y="991.50"></text></g><g><title>[unknown] (509 samples, 0.41%)</title><rect x="68.8427%" y="965" width="0.4126%" height="15" fill="rgb(236,224,42)" fg:x="84923" fg:w="509"/><text x="69.0927%" y="975.50"></text></g><g><title>[unknown] (224 samples, 0.18%)</title><rect x="69.0738%" y="949" width="0.1816%" height="15" fill="rgb(246,226,29)" fg:x="85208" fg:w="224"/><text x="69.3238%" y="959.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="69.2132%" y="933" width="0.0422%" height="15" fill="rgb(227,223,11)" fg:x="85380" fg:w="52"/><text x="69.4632%" y="943.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="69.2326%" y="917" width="0.0227%" height="15" fill="rgb(219,7,51)" fg:x="85404" fg:w="28"/><text x="69.4826%" y="927.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="69.2367%" y="901" width="0.0186%" height="15" fill="rgb(245,167,10)" fg:x="85409" fg:w="23"/><text x="69.4867%" y="911.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="69.2416%" y="885" width="0.0138%" height="15" fill="rgb(237,224,16)" fg:x="85415" fg:w="17"/><text x="69.4916%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (1,459 samples, 1.18%)</title><rect x="68.0734%" y="1157" width="1.1827%" height="15" fill="rgb(226,132,13)" fg:x="83974" fg:w="1459"/><text x="68.3234%" y="1167.50"></text></g><g><title>__unlink (1,459 samples, 1.18%)</title><rect x="68.0734%" y="1141" width="1.1827%" height="15" fill="rgb(214,140,3)" fg:x="83974" fg:w="1459"/><text x="68.3234%" y="1151.50"></text></g><g><title>[unknown] (1,459 samples, 1.18%)</title><rect x="68.0734%" y="1125" width="1.1827%" height="15" fill="rgb(221,177,4)" fg:x="83974" fg:w="1459"/><text x="68.3234%" y="1135.50"></text></g><g><title>[unknown] (1,459 samples, 1.18%)</title><rect x="68.0734%" y="1109" width="1.1827%" height="15" fill="rgb(238,139,3)" fg:x="83974" fg:w="1459"/><text x="68.3234%" y="1119.50"></text></g><g><title>[unknown] (1,459 samples, 1.18%)</title><rect x="68.0734%" y="1093" width="1.1827%" height="15" fill="rgb(216,17,39)" fg:x="83974" fg:w="1459"/><text x="68.3234%" y="1103.50"></text></g><g><title>[unknown] (1,459 samples, 1.18%)</title><rect x="68.0734%" y="1077" width="1.1827%" height="15" fill="rgb(238,120,9)" fg:x="83974" fg:w="1459"/><text x="68.3234%" y="1087.50"></text></g><g><title>[unknown] (1,459 samples, 1.18%)</title><rect x="68.0734%" y="1061" width="1.1827%" height="15" fill="rgb(244,92,53)" fg:x="83974" fg:w="1459"/><text x="68.3234%" y="1071.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (1,764 samples, 1.43%)</title><rect x="68.0734%" y="1173" width="1.4300%" height="15" fill="rgb(224,148,33)" fg:x="83974" fg:w="1764"/><text x="68.3234%" y="1183.50"></text></g><g><title>leveldb::TableCache::Evict (299 samples, 0.24%)</title><rect x="69.2610%" y="1157" width="0.2424%" height="15" fill="rgb(243,6,36)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1167.50"></text></g><g><title>Erase (299 samples, 0.24%)</title><rect x="69.2610%" y="1141" width="0.2424%" height="15" fill="rgb(230,102,11)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (299 samples, 0.24%)</title><rect x="69.2610%" y="1125" width="0.2424%" height="15" fill="rgb(234,148,36)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (299 samples, 0.24%)</title><rect x="69.2610%" y="1109" width="0.2424%" height="15" fill="rgb(251,153,25)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (299 samples, 0.24%)</title><rect x="69.2610%" y="1093" width="0.2424%" height="15" fill="rgb(215,129,8)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1103.50"></text></g><g><title>leveldb::DeleteEntry (299 samples, 0.24%)</title><rect x="69.2610%" y="1077" width="0.2424%" height="15" fill="rgb(224,128,35)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1087.50"></text></g><g><title>~PosixMmapReadableFile (299 samples, 0.24%)</title><rect x="69.2610%" y="1061" width="0.2424%" height="15" fill="rgb(237,56,52)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1071.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (299 samples, 0.24%)</title><rect x="69.2610%" y="1045" width="0.2424%" height="15" fill="rgb(234,213,19)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1055.50"></text></g><g><title>__munmap (299 samples, 0.24%)</title><rect x="69.2610%" y="1029" width="0.2424%" height="15" fill="rgb(252,82,23)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1039.50"></text></g><g><title>[unknown] (299 samples, 0.24%)</title><rect x="69.2610%" y="1013" width="0.2424%" height="15" fill="rgb(254,201,21)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1023.50"></text></g><g><title>[unknown] (299 samples, 0.24%)</title><rect x="69.2610%" y="997" width="0.2424%" height="15" fill="rgb(250,186,11)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="1007.50"></text></g><g><title>[unknown] (299 samples, 0.24%)</title><rect x="69.2610%" y="981" width="0.2424%" height="15" fill="rgb(211,174,5)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="991.50"></text></g><g><title>[unknown] (299 samples, 0.24%)</title><rect x="69.2610%" y="965" width="0.2424%" height="15" fill="rgb(214,121,10)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="975.50"></text></g><g><title>[unknown] (299 samples, 0.24%)</title><rect x="69.2610%" y="949" width="0.2424%" height="15" fill="rgb(241,66,2)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="959.50"></text></g><g><title>[unknown] (299 samples, 0.24%)</title><rect x="69.2610%" y="933" width="0.2424%" height="15" fill="rgb(220,167,19)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="943.50"></text></g><g><title>[unknown] (299 samples, 0.24%)</title><rect x="69.2610%" y="917" width="0.2424%" height="15" fill="rgb(231,54,50)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="927.50"></text></g><g><title>[unknown] (299 samples, 0.24%)</title><rect x="69.2610%" y="901" width="0.2424%" height="15" fill="rgb(239,217,53)" fg:x="85439" fg:w="299"/><text x="69.5110%" y="911.50"></text></g><g><title>[unknown] (297 samples, 0.24%)</title><rect x="69.2626%" y="885" width="0.2408%" height="15" fill="rgb(248,8,0)" fg:x="85441" fg:w="297"/><text x="69.5126%" y="895.50"></text></g><g><title>[unknown] (168 samples, 0.14%)</title><rect x="69.3672%" y="869" width="0.1362%" height="15" fill="rgb(229,118,37)" fg:x="85570" fg:w="168"/><text x="69.6172%" y="879.50"></text></g><g><title>[unknown] (55 samples, 0.04%)</title><rect x="69.4588%" y="853" width="0.0446%" height="15" fill="rgb(253,223,43)" fg:x="85683" fg:w="55"/><text x="69.7088%" y="863.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="69.4880%" y="837" width="0.0154%" height="15" fill="rgb(211,77,36)" fg:x="85719" fg:w="19"/><text x="69.7380%" y="847.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (190 samples, 0.15%)</title><rect x="69.5739%" y="1125" width="0.1540%" height="15" fill="rgb(219,3,53)" fg:x="85825" fg:w="190"/><text x="69.8239%" y="1135.50"></text></g><g><title>leveldb::IteratorWrapper::Next (65 samples, 0.05%)</title><rect x="69.6753%" y="1109" width="0.0527%" height="15" fill="rgb(244,45,42)" fg:x="85950" fg:w="65"/><text x="69.9253%" y="1119.50"></text></g><g><title>__memcmp_evex_movbe (15 samples, 0.01%)</title><rect x="69.8836%" y="1045" width="0.0122%" height="15" fill="rgb(225,95,27)" fg:x="86207" fg:w="15"/><text x="70.1336%" y="1055.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (46 samples, 0.04%)</title><rect x="69.9112%" y="1029" width="0.0373%" height="15" fill="rgb(207,74,8)" fg:x="86241" fg:w="46"/><text x="70.1612%" y="1039.50"></text></g><g><title>leveldb::IteratorWrapper::Next (29 samples, 0.02%)</title><rect x="69.9249%" y="1013" width="0.0235%" height="15" fill="rgb(243,63,36)" fg:x="86258" fg:w="29"/><text x="70.1749%" y="1023.50"></text></g><g><title>leveldb::BlockBuilder::Add (97 samples, 0.08%)</title><rect x="69.9493%" y="1029" width="0.0786%" height="15" fill="rgb(211,180,12)" fg:x="86288" fg:w="97"/><text x="70.1993%" y="1039.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (58 samples, 0.05%)</title><rect x="70.0279%" y="1029" width="0.0470%" height="15" fill="rgb(254,166,49)" fg:x="86385" fg:w="58"/><text x="70.2779%" y="1039.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (19 samples, 0.02%)</title><rect x="70.0595%" y="1013" width="0.0154%" height="15" fill="rgb(205,19,0)" fg:x="86424" fg:w="19"/><text x="70.3095%" y="1023.50"></text></g><g><title>leveldb::TableBuilder::Add (30 samples, 0.02%)</title><rect x="70.0838%" y="1029" width="0.0243%" height="15" fill="rgb(224,172,32)" fg:x="86454" fg:w="30"/><text x="70.3338%" y="1039.50"></text></g><g><title>Next (279 samples, 0.23%)</title><rect x="69.8836%" y="1093" width="0.2262%" height="15" fill="rgb(254,136,30)" fg:x="86207" fg:w="279"/><text x="70.1336%" y="1103.50"></text></g><g><title>leveldb::IteratorWrapper::Next (279 samples, 0.23%)</title><rect x="69.8836%" y="1077" width="0.2262%" height="15" fill="rgb(246,19,35)" fg:x="86207" fg:w="279"/><text x="70.1336%" y="1087.50"></text></g><g><title>leveldb::IteratorWrapper::Update (279 samples, 0.23%)</title><rect x="69.8836%" y="1061" width="0.2262%" height="15" fill="rgb(219,24,36)" fg:x="86207" fg:w="279"/><text x="70.1336%" y="1071.50"></text></g><g><title>leveldb::IteratorWrapper::Update (255 samples, 0.21%)</title><rect x="69.9030%" y="1045" width="0.2067%" height="15" fill="rgb(251,55,1)" fg:x="86231" fg:w="255"/><text x="70.1530%" y="1055.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (13 samples, 0.01%)</title><rect x="70.1130%" y="1013" width="0.0105%" height="15" fill="rgb(218,117,39)" fg:x="86490" fg:w="13"/><text x="70.3630%" y="1023.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (13 samples, 0.01%)</title><rect x="70.1130%" y="997" width="0.0105%" height="15" fill="rgb(248,169,11)" fg:x="86490" fg:w="13"/><text x="70.3630%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (13 samples, 0.01%)</title><rect x="70.1130%" y="981" width="0.0105%" height="15" fill="rgb(244,40,44)" fg:x="86490" fg:w="13"/><text x="70.3630%" y="991.50"></text></g><g><title>leveldb::Block::Iter::~Iter (27 samples, 0.02%)</title><rect x="70.1252%" y="1013" width="0.0219%" height="15" fill="rgb(234,62,37)" fg:x="86505" fg:w="27"/><text x="70.3752%" y="1023.50"></text></g><g><title>leveldb::Block::Iter::~Iter (27 samples, 0.02%)</title><rect x="70.1252%" y="997" width="0.0219%" height="15" fill="rgb(207,117,42)" fg:x="86505" fg:w="27"/><text x="70.3752%" y="1007.50"></text></g><g><title>SetDataIterator (63 samples, 0.05%)</title><rect x="70.1106%" y="1045" width="0.0511%" height="15" fill="rgb(213,43,2)" fg:x="86487" fg:w="63"/><text x="70.3606%" y="1055.50"></text></g><g><title>leveldb::IteratorWrapper::Set (62 samples, 0.05%)</title><rect x="70.1114%" y="1029" width="0.0503%" height="15" fill="rgb(244,202,51)" fg:x="86488" fg:w="62"/><text x="70.3614%" y="1039.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (20 samples, 0.02%)</title><rect x="70.1730%" y="1045" width="0.0162%" height="15" fill="rgb(253,174,46)" fg:x="86564" fg:w="20"/><text x="70.4230%" y="1055.50"></text></g><g><title>crc32c::ExtendSse42 (46 samples, 0.04%)</title><rect x="70.2135%" y="1029" width="0.0373%" height="15" fill="rgb(251,23,1)" fg:x="86614" fg:w="46"/><text x="70.4635%" y="1039.50"></text></g><g><title>_mm_crc32_u64 (20 samples, 0.02%)</title><rect x="70.2346%" y="1013" width="0.0162%" height="15" fill="rgb(253,26,1)" fg:x="86640" fg:w="20"/><text x="70.4846%" y="1023.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (14 samples, 0.01%)</title><rect x="70.2508%" y="1029" width="0.0113%" height="15" fill="rgb(216,89,31)" fg:x="86660" fg:w="14"/><text x="70.5008%" y="1039.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (22 samples, 0.02%)</title><rect x="70.2727%" y="1029" width="0.0178%" height="15" fill="rgb(209,109,5)" fg:x="86687" fg:w="22"/><text x="70.5227%" y="1039.50"></text></g><g><title>leveldb::GetVarint64 (26 samples, 0.02%)</title><rect x="70.2905%" y="1029" width="0.0211%" height="15" fill="rgb(229,63,13)" fg:x="86709" fg:w="26"/><text x="70.5405%" y="1039.50"></text></g><g><title>leveldb::GetVarint64Ptr (15 samples, 0.01%)</title><rect x="70.3116%" y="1029" width="0.0122%" height="15" fill="rgb(238,137,54)" fg:x="86735" fg:w="15"/><text x="70.5616%" y="1039.50"></text></g><g><title>leveldb::crc32c::Unmask (16 samples, 0.01%)</title><rect x="70.3586%" y="1013" width="0.0130%" height="15" fill="rgb(228,1,9)" fg:x="86793" fg:w="16"/><text x="70.6086%" y="1023.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="70.3586%" y="997" width="0.0130%" height="15" fill="rgb(249,120,48)" fg:x="86793" fg:w="16"/><text x="70.6086%" y="1007.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="70.3586%" y="981" width="0.0130%" height="15" fill="rgb(209,72,36)" fg:x="86793" fg:w="16"/><text x="70.6086%" y="991.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="70.3586%" y="965" width="0.0130%" height="15" fill="rgb(247,98,49)" fg:x="86793" fg:w="16"/><text x="70.6086%" y="975.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="70.3586%" y="949" width="0.0130%" height="15" fill="rgb(233,75,36)" fg:x="86793" fg:w="16"/><text x="70.6086%" y="959.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="70.3594%" y="933" width="0.0122%" height="15" fill="rgb(225,14,24)" fg:x="86794" fg:w="15"/><text x="70.6094%" y="943.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="70.3603%" y="917" width="0.0113%" height="15" fill="rgb(237,193,20)" fg:x="86795" fg:w="14"/><text x="70.6103%" y="927.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="70.3603%" y="901" width="0.0113%" height="15" fill="rgb(239,122,19)" fg:x="86795" fg:w="14"/><text x="70.6103%" y="911.50"></text></g><g><title>_mm_crc32_u64 (779 samples, 0.63%)</title><rect x="70.8369%" y="981" width="0.6315%" height="15" fill="rgb(231,220,10)" fg:x="87383" fg:w="779"/><text x="71.0869%" y="991.50"></text></g><g><title>crc32c::ExtendSse42 (1,348 samples, 1.09%)</title><rect x="70.3765%" y="997" width="1.0928%" height="15" fill="rgb(220,66,15)" fg:x="86815" fg:w="1348"/><text x="70.6265%" y="1007.50"></text></g><g><title>leveldb::crc32c::Value (1,383 samples, 1.12%)</title><rect x="70.3716%" y="1013" width="1.1211%" height="15" fill="rgb(215,171,52)" fg:x="86809" fg:w="1383"/><text x="70.6216%" y="1023.50"></text></g><g><title>leveldb::crc32c::Extend (20 samples, 0.02%)</title><rect x="71.4765%" y="997" width="0.0162%" height="15" fill="rgb(241,169,50)" fg:x="88172" fg:w="20"/><text x="71.7265%" y="1007.50"></text></g><g><title>leveldb::ReadBlock (1,444 samples, 1.17%)</title><rect x="70.3311%" y="1029" width="1.1706%" height="15" fill="rgb(236,189,0)" fg:x="86759" fg:w="1444"/><text x="70.5811%" y="1039.50"></text></g><g><title>leveldb::Table::BlockReader (22 samples, 0.02%)</title><rect x="71.5016%" y="1029" width="0.0178%" height="15" fill="rgb(217,147,20)" fg:x="88203" fg:w="22"/><text x="71.7516%" y="1039.50"></text></g><g><title>leveldb::Table::BlockReader (1,621 samples, 1.31%)</title><rect x="70.2062%" y="1045" width="1.3141%" height="15" fill="rgb(206,188,39)" fg:x="86605" fg:w="1621"/><text x="70.4562%" y="1055.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1,743 samples, 1.41%)</title><rect x="70.1098%" y="1061" width="1.4130%" height="15" fill="rgb(227,118,25)" fg:x="86486" fg:w="1743"/><text x="70.3598%" y="1071.50"></text></g><g><title>SkipEmptyDataBlocksForward (1,775 samples, 1.44%)</title><rect x="70.1098%" y="1093" width="1.4389%" height="15" fill="rgb(248,171,40)" fg:x="86486" fg:w="1775"/><text x="70.3598%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1,775 samples, 1.44%)</title><rect x="70.1098%" y="1077" width="1.4389%" height="15" fill="rgb(251,90,54)" fg:x="86486" fg:w="1775"/><text x="70.3598%" y="1087.50"></text></g><g><title>__memmove_avx512_unaligned_erms (36 samples, 0.03%)</title><rect x="71.6662%" y="965" width="0.0292%" height="15" fill="rgb(234,11,46)" fg:x="88406" fg:w="36"/><text x="71.9162%" y="975.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (63 samples, 0.05%)</title><rect x="71.6500%" y="1029" width="0.0511%" height="15" fill="rgb(229,134,13)" fg:x="88386" fg:w="63"/><text x="71.9000%" y="1039.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (49 samples, 0.04%)</title><rect x="71.6613%" y="1013" width="0.0397%" height="15" fill="rgb(223,129,3)" fg:x="88400" fg:w="49"/><text x="71.9113%" y="1023.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (49 samples, 0.04%)</title><rect x="71.6613%" y="997" width="0.0397%" height="15" fill="rgb(221,124,13)" fg:x="88400" fg:w="49"/><text x="71.9113%" y="1007.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (49 samples, 0.04%)</title><rect x="71.6613%" y="981" width="0.0397%" height="15" fill="rgb(234,3,18)" fg:x="88400" fg:w="49"/><text x="71.9113%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (66 samples, 0.05%)</title><rect x="71.6500%" y="1045" width="0.0535%" height="15" fill="rgb(249,199,20)" fg:x="88386" fg:w="66"/><text x="71.9000%" y="1055.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (81 samples, 0.07%)</title><rect x="71.6386%" y="1061" width="0.0657%" height="15" fill="rgb(224,134,6)" fg:x="88372" fg:w="81"/><text x="71.8886%" y="1071.50"></text></g><g><title>leveldb::Slice::Slice (15 samples, 0.01%)</title><rect x="71.7100%" y="1045" width="0.0122%" height="15" fill="rgb(254,83,26)" fg:x="88460" fg:w="15"/><text x="71.9600%" y="1055.50"></text></g><g><title>leveldb::operator== (97 samples, 0.08%)</title><rect x="71.7221%" y="1045" width="0.0786%" height="15" fill="rgb(217,88,9)" fg:x="88475" fg:w="97"/><text x="71.9721%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (13 samples, 0.01%)</title><rect x="71.8219%" y="997" width="0.0105%" height="15" fill="rgb(225,73,2)" fg:x="88598" fg:w="13"/><text x="72.0719%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (45 samples, 0.04%)</title><rect x="71.8146%" y="1013" width="0.0365%" height="15" fill="rgb(226,44,39)" fg:x="88589" fg:w="45"/><text x="72.0646%" y="1023.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (23 samples, 0.02%)</title><rect x="71.8324%" y="997" width="0.0186%" height="15" fill="rgb(228,53,17)" fg:x="88611" fg:w="23"/><text x="72.0824%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (21 samples, 0.02%)</title><rect x="71.8510%" y="1013" width="0.0170%" height="15" fill="rgb(212,27,27)" fg:x="88634" fg:w="21"/><text x="72.1010%" y="1023.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (18 samples, 0.01%)</title><rect x="71.8535%" y="997" width="0.0146%" height="15" fill="rgb(241,50,6)" fg:x="88637" fg:w="18"/><text x="72.1035%" y="1007.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (17 samples, 0.01%)</title><rect x="71.8543%" y="981" width="0.0138%" height="15" fill="rgb(225,28,51)" fg:x="88638" fg:w="17"/><text x="72.1043%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (88 samples, 0.07%)</title><rect x="71.8008%" y="1029" width="0.0713%" height="15" fill="rgb(215,33,16)" fg:x="88572" fg:w="88"/><text x="72.0508%" y="1039.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (95 samples, 0.08%)</title><rect x="71.8008%" y="1045" width="0.0770%" height="15" fill="rgb(243,40,39)" fg:x="88572" fg:w="95"/><text x="72.0508%" y="1055.50"></text></g><g><title>leveldb::BlockBuilder::Add (224 samples, 0.18%)</title><rect x="71.7043%" y="1061" width="0.1816%" height="15" fill="rgb(225,11,42)" fg:x="88453" fg:w="224"/><text x="71.9543%" y="1071.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (19 samples, 0.02%)</title><rect x="71.8924%" y="1061" width="0.0154%" height="15" fill="rgb(241,220,38)" fg:x="88685" fg:w="19"/><text x="72.1424%" y="1071.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (454 samples, 0.37%)</title><rect x="71.5616%" y="1093" width="0.3680%" height="15" fill="rgb(244,52,35)" fg:x="88277" fg:w="454"/><text x="71.8116%" y="1103.50"></text></g><g><title>leveldb::IteratorWrapper::Next (432 samples, 0.35%)</title><rect x="71.5795%" y="1077" width="0.3502%" height="15" fill="rgb(246,42,46)" fg:x="88299" fg:w="432"/><text x="71.8295%" y="1087.50"></text></g><g><title>leveldb::TableBuilder::Add (17 samples, 0.01%)</title><rect x="71.9159%" y="1061" width="0.0138%" height="15" fill="rgb(205,184,13)" fg:x="88714" fg:w="17"/><text x="72.1659%" y="1071.50"></text></g><g><title>leveldb::IteratorWrapper::Next (28 samples, 0.02%)</title><rect x="71.9362%" y="1077" width="0.0227%" height="15" fill="rgb(209,48,36)" fg:x="88739" fg:w="28"/><text x="72.1862%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SetDataIterator (13 samples, 0.01%)</title><rect x="71.9670%" y="1013" width="0.0105%" height="15" fill="rgb(244,34,51)" fg:x="88777" fg:w="13"/><text x="72.2170%" y="1023.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (33 samples, 0.03%)</title><rect x="71.9621%" y="1061" width="0.0268%" height="15" fill="rgb(221,107,33)" fg:x="88771" fg:w="33"/><text x="72.2121%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (32 samples, 0.03%)</title><rect x="71.9629%" y="1045" width="0.0259%" height="15" fill="rgb(224,203,12)" fg:x="88772" fg:w="32"/><text x="72.2129%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (32 samples, 0.03%)</title><rect x="71.9629%" y="1029" width="0.0259%" height="15" fill="rgb(230,215,18)" fg:x="88772" fg:w="32"/><text x="72.2129%" y="1039.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (90 samples, 0.07%)</title><rect x="71.9297%" y="1093" width="0.0730%" height="15" fill="rgb(206,185,35)" fg:x="88731" fg:w="90"/><text x="72.1797%" y="1103.50"></text></g><g><title>leveldb::IteratorWrapper::SeekToFirst (54 samples, 0.04%)</title><rect x="71.9589%" y="1077" width="0.0438%" height="15" fill="rgb(228,140,34)" fg:x="88767" fg:w="54"/><text x="72.2089%" y="1087.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (24 samples, 0.02%)</title><rect x="72.0091%" y="1093" width="0.0195%" height="15" fill="rgb(208,93,13)" fg:x="88829" fg:w="24"/><text x="72.2591%" y="1103.50"></text></g><g><title>leveldb::BlockBuilder::Add (27 samples, 0.02%)</title><rect x="72.0302%" y="1093" width="0.0219%" height="15" fill="rgb(221,193,39)" fg:x="88855" fg:w="27"/><text x="72.2802%" y="1103.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (45 samples, 0.04%)</title><rect x="72.0521%" y="1093" width="0.0365%" height="15" fill="rgb(241,132,34)" fg:x="88882" fg:w="45"/><text x="72.3021%" y="1103.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (49 samples, 0.04%)</title><rect x="72.0942%" y="1093" width="0.0397%" height="15" fill="rgb(221,141,10)" fg:x="88934" fg:w="49"/><text x="72.3442%" y="1103.50"></text></g><g><title>leveldb::TableBuilder::Add (109 samples, 0.09%)</title><rect x="72.1404%" y="1093" width="0.0884%" height="15" fill="rgb(226,90,31)" fg:x="88991" fg:w="109"/><text x="72.3904%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (3,095 samples, 2.51%)</title><rect x="69.7296%" y="1125" width="2.5090%" height="15" fill="rgb(243,75,5)" fg:x="86017" fg:w="3095"/><text x="69.9796%" y="1135.50">le..</text></g><g><title>leveldb::IteratorWrapper::Next (3,016 samples, 2.44%)</title><rect x="69.7936%" y="1109" width="2.4449%" height="15" fill="rgb(227,156,21)" fg:x="86096" fg:w="3016"/><text x="70.0436%" y="1119.50">le..</text></g><g><title>leveldb::Block::Iter::Next (48 samples, 0.04%)</title><rect x="72.2426%" y="1125" width="0.0389%" height="15" fill="rgb(250,195,8)" fg:x="89117" fg:w="48"/><text x="72.4926%" y="1135.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (58 samples, 0.05%)</title><rect x="72.2815%" y="1125" width="0.0470%" height="15" fill="rgb(220,134,5)" fg:x="89165" fg:w="58"/><text x="72.5315%" y="1135.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (189 samples, 0.15%)</title><rect x="72.3399%" y="1125" width="0.1532%" height="15" fill="rgb(246,106,34)" fg:x="89237" fg:w="189"/><text x="72.5899%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::Add (19 samples, 0.02%)</title><rect x="72.4996%" y="1125" width="0.0154%" height="15" fill="rgb(205,1,4)" fg:x="89434" fg:w="19"/><text x="72.7496%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::FileSize (67 samples, 0.05%)</title><rect x="72.5150%" y="1125" width="0.0543%" height="15" fill="rgb(224,151,29)" fg:x="89453" fg:w="67"/><text x="72.7650%" y="1135.50"></text></g><g><title>Next (3,731 samples, 3.02%)</title><rect x="69.5488%" y="1157" width="3.0245%" height="15" fill="rgb(251,196,0)" fg:x="85794" fg:w="3731"/><text x="69.7988%" y="1167.50">Next</text></g><g><title>leveldb::IteratorWrapper::Next (3,731 samples, 3.02%)</title><rect x="69.5488%" y="1141" width="3.0245%" height="15" fill="rgb(212,127,0)" fg:x="85794" fg:w="3731"/><text x="69.7988%" y="1151.50">lev..</text></g><g><title>__memcmp_evex_movbe (31 samples, 0.03%)</title><rect x="72.5782%" y="1157" width="0.0251%" height="15" fill="rgb(236,71,53)" fg:x="89531" fg:w="31"/><text x="72.8282%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (23 samples, 0.02%)</title><rect x="72.6082%" y="1157" width="0.0186%" height="15" fill="rgb(227,99,0)" fg:x="89568" fg:w="23"/><text x="72.8582%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (237 samples, 0.19%)</title><rect x="72.6268%" y="1157" width="0.1921%" height="15" fill="rgb(239,89,21)" fg:x="89591" fg:w="237"/><text x="72.8768%" y="1167.50"></text></g><g><title>leveldb::Slice::compare (84 samples, 0.07%)</title><rect x="72.7509%" y="1141" width="0.0681%" height="15" fill="rgb(243,122,19)" fg:x="89744" fg:w="84"/><text x="73.0009%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (151 samples, 0.12%)</title><rect x="72.8189%" y="1157" width="0.1224%" height="15" fill="rgb(229,192,45)" fg:x="89828" fg:w="151"/><text x="73.0689%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (168 samples, 0.14%)</title><rect x="73.0013%" y="1125" width="0.1362%" height="15" fill="rgb(235,165,35)" fg:x="90053" fg:w="168"/><text x="73.2513%" y="1135.50"></text></g><g><title>leveldb::IteratorWrapper::Next (154 samples, 0.12%)</title><rect x="73.0127%" y="1109" width="0.1248%" height="15" fill="rgb(253,202,0)" fg:x="90067" fg:w="154"/><text x="73.2627%" y="1119.50"></text></g><g><title>leveldb::IteratorWrapper::Update (154 samples, 0.12%)</title><rect x="73.0127%" y="1093" width="0.1248%" height="15" fill="rgb(235,51,20)" fg:x="90067" fg:w="154"/><text x="73.2627%" y="1103.50"></text></g><g><title>leveldb::IteratorWrapper::Update (19 samples, 0.02%)</title><rect x="73.1221%" y="1077" width="0.0154%" height="15" fill="rgb(218,95,46)" fg:x="90202" fg:w="19"/><text x="73.3721%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (48 samples, 0.04%)</title><rect x="73.1375%" y="1125" width="0.0389%" height="15" fill="rgb(212,81,10)" fg:x="90221" fg:w="48"/><text x="73.3875%" y="1135.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (101 samples, 0.08%)</title><rect x="73.3402%" y="1109" width="0.0819%" height="15" fill="rgb(240,59,0)" fg:x="90471" fg:w="101"/><text x="73.5902%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (25 samples, 0.02%)</title><rect x="73.4269%" y="1061" width="0.0203%" height="15" fill="rgb(212,191,42)" fg:x="90578" fg:w="25"/><text x="73.6769%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (47 samples, 0.04%)</title><rect x="73.4269%" y="1077" width="0.0381%" height="15" fill="rgb(233,140,3)" fg:x="90578" fg:w="47"/><text x="73.6769%" y="1087.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (16 samples, 0.01%)</title><rect x="73.4521%" y="1061" width="0.0130%" height="15" fill="rgb(215,69,23)" fg:x="90609" fg:w="16"/><text x="73.7021%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (47 samples, 0.04%)</title><rect x="73.4650%" y="1077" width="0.0381%" height="15" fill="rgb(240,202,20)" fg:x="90625" fg:w="47"/><text x="73.7150%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (47 samples, 0.04%)</title><rect x="73.4650%" y="1061" width="0.0381%" height="15" fill="rgb(209,146,50)" fg:x="90625" fg:w="47"/><text x="73.7150%" y="1071.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (23 samples, 0.02%)</title><rect x="73.4845%" y="1045" width="0.0186%" height="15" fill="rgb(253,102,54)" fg:x="90649" fg:w="23"/><text x="73.7345%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (109 samples, 0.09%)</title><rect x="73.4221%" y="1093" width="0.0884%" height="15" fill="rgb(250,173,47)" fg:x="90572" fg:w="109"/><text x="73.6721%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (114 samples, 0.09%)</title><rect x="73.4221%" y="1109" width="0.0924%" height="15" fill="rgb(232,142,7)" fg:x="90572" fg:w="114"/><text x="73.6721%" y="1119.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (420 samples, 0.34%)</title><rect x="73.1764%" y="1125" width="0.3405%" height="15" fill="rgb(230,157,47)" fg:x="90269" fg:w="420"/><text x="73.4264%" y="1135.50"></text></g><g><title>leveldb::Block::Iter::Valid (109 samples, 0.09%)</title><rect x="73.5169%" y="1125" width="0.0884%" height="15" fill="rgb(214,177,35)" fg:x="90689" fg:w="109"/><text x="73.7669%" y="1135.50"></text></g><g><title>leveldb::Block::Iter::key (21 samples, 0.02%)</title><rect x="73.6053%" y="1125" width="0.0170%" height="15" fill="rgb(234,119,46)" fg:x="90798" fg:w="21"/><text x="73.8553%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (23 samples, 0.02%)</title><rect x="73.6304%" y="1109" width="0.0186%" height="15" fill="rgb(241,180,50)" fg:x="90829" fg:w="23"/><text x="73.8804%" y="1119.50"></text></g><g><title>leveldb::Slice::compare (21 samples, 0.02%)</title><rect x="73.6320%" y="1093" width="0.0170%" height="15" fill="rgb(221,54,25)" fg:x="90831" fg:w="21"/><text x="73.8820%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (157 samples, 0.13%)</title><rect x="73.6507%" y="1109" width="0.1273%" height="15" fill="rgb(209,157,44)" fg:x="90854" fg:w="157"/><text x="73.9007%" y="1119.50"></text></g><g><title>leveldb::IteratorWrapper::Next (131 samples, 0.11%)</title><rect x="73.6718%" y="1093" width="0.1062%" height="15" fill="rgb(246,115,41)" fg:x="90880" fg:w="131"/><text x="73.9218%" y="1103.50"></text></g><g><title>leveldb::IteratorWrapper::Update (131 samples, 0.11%)</title><rect x="73.6718%" y="1077" width="0.1062%" height="15" fill="rgb(229,86,1)" fg:x="90880" fg:w="131"/><text x="73.9218%" y="1087.50"></text></g><g><title>leveldb::IteratorWrapper::Update (89 samples, 0.07%)</title><rect x="73.7058%" y="1061" width="0.0721%" height="15" fill="rgb(240,108,53)" fg:x="90922" fg:w="89"/><text x="73.9558%" y="1071.50"></text></g><g><title>leveldb::IteratorWrapper::SeekToFirst (14 samples, 0.01%)</title><rect x="73.8282%" y="1093" width="0.0113%" height="15" fill="rgb(227,134,2)" fg:x="91073" fg:w="14"/><text x="74.0782%" y="1103.50"></text></g><g><title>leveldb::IteratorWrapper::Update (14 samples, 0.01%)</title><rect x="73.8282%" y="1077" width="0.0113%" height="15" fill="rgb(213,129,25)" fg:x="91073" fg:w="14"/><text x="74.0782%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (78 samples, 0.06%)</title><rect x="73.7779%" y="1109" width="0.0632%" height="15" fill="rgb(226,35,21)" fg:x="91011" fg:w="78"/><text x="74.0279%" y="1119.50"></text></g><g><title>leveldb::Block::Iter::Valid (32 samples, 0.03%)</title><rect x="73.8452%" y="1109" width="0.0259%" height="15" fill="rgb(208,129,26)" fg:x="91094" fg:w="32"/><text x="74.0952%" y="1119.50"></text></g><g><title>leveldb::Block::Iter::key (142 samples, 0.12%)</title><rect x="73.8712%" y="1109" width="0.1151%" height="15" fill="rgb(224,83,6)" fg:x="91126" fg:w="142"/><text x="74.1212%" y="1119.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (450 samples, 0.36%)</title><rect x="73.6223%" y="1125" width="0.3648%" height="15" fill="rgb(227,52,39)" fg:x="90819" fg:w="450"/><text x="73.8723%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1,244 samples, 1.01%)</title><rect x="72.9819%" y="1141" width="1.0084%" height="15" fill="rgb(241,30,17)" fg:x="90029" fg:w="1244"/><text x="73.2319%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (56 samples, 0.05%)</title><rect x="73.9911%" y="1141" width="0.0454%" height="15" fill="rgb(246,186,42)" fg:x="91274" fg:w="56"/><text x="74.2411%" y="1151.50"></text></g><g><title>leveldb::IteratorWrapper::Next (37 samples, 0.03%)</title><rect x="74.0066%" y="1125" width="0.0300%" height="15" fill="rgb(221,169,15)" fg:x="91293" fg:w="37"/><text x="74.2566%" y="1135.50"></text></g><g><title>leveldb::IteratorWrapper::Update (37 samples, 0.03%)</title><rect x="74.0066%" y="1109" width="0.0300%" height="15" fill="rgb(235,108,21)" fg:x="91293" fg:w="37"/><text x="74.2566%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (84 samples, 0.07%)</title><rect x="74.0365%" y="1141" width="0.0681%" height="15" fill="rgb(219,148,30)" fg:x="91330" fg:w="84"/><text x="74.2865%" y="1151.50"></text></g><g><title>DecodeEntry (25 samples, 0.02%)</title><rect x="74.1687%" y="1125" width="0.0203%" height="15" fill="rgb(220,109,5)" fg:x="91493" fg:w="25"/><text x="74.4187%" y="1135.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (23 samples, 0.02%)</title><rect x="74.1898%" y="1125" width="0.0186%" height="15" fill="rgb(213,203,48)" fg:x="91519" fg:w="23"/><text x="74.4398%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (20 samples, 0.02%)</title><rect x="74.2368%" y="1093" width="0.0162%" height="15" fill="rgb(244,71,33)" fg:x="91577" fg:w="20"/><text x="74.4868%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (66 samples, 0.05%)</title><rect x="74.2530%" y="1093" width="0.0535%" height="15" fill="rgb(209,23,2)" fg:x="91597" fg:w="66"/><text x="74.5030%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (61 samples, 0.05%)</title><rect x="74.2570%" y="1077" width="0.0494%" height="15" fill="rgb(219,97,7)" fg:x="91602" fg:w="61"/><text x="74.5070%" y="1087.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (52 samples, 0.04%)</title><rect x="74.2643%" y="1061" width="0.0422%" height="15" fill="rgb(216,161,23)" fg:x="91611" fg:w="52"/><text x="74.5143%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (148 samples, 0.12%)</title><rect x="74.2084%" y="1109" width="0.1200%" height="15" fill="rgb(207,45,42)" fg:x="91542" fg:w="148"/><text x="74.4584%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (27 samples, 0.02%)</title><rect x="74.3065%" y="1093" width="0.0219%" height="15" fill="rgb(241,61,4)" fg:x="91663" fg:w="27"/><text x="74.5565%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (17 samples, 0.01%)</title><rect x="74.3146%" y="1077" width="0.0138%" height="15" fill="rgb(236,170,1)" fg:x="91673" fg:w="17"/><text x="74.5646%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (167 samples, 0.14%)</title><rect x="74.2084%" y="1125" width="0.1354%" height="15" fill="rgb(239,72,5)" fg:x="91542" fg:w="167"/><text x="74.4584%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (19 samples, 0.02%)</title><rect x="74.3284%" y="1109" width="0.0154%" height="15" fill="rgb(214,13,50)" fg:x="91690" fg:w="19"/><text x="74.5784%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (24 samples, 0.02%)</title><rect x="74.3438%" y="1125" width="0.0195%" height="15" fill="rgb(224,88,9)" fg:x="91709" fg:w="24"/><text x="74.5938%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (24 samples, 0.02%)</title><rect x="74.3438%" y="1109" width="0.0195%" height="15" fill="rgb(238,192,34)" fg:x="91709" fg:w="24"/><text x="74.5938%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (15 samples, 0.01%)</title><rect x="74.3511%" y="1093" width="0.0122%" height="15" fill="rgb(217,203,50)" fg:x="91718" fg:w="15"/><text x="74.6011%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (15 samples, 0.01%)</title><rect x="74.3511%" y="1077" width="0.0122%" height="15" fill="rgb(241,123,32)" fg:x="91718" fg:w="15"/><text x="74.6011%" y="1087.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (322 samples, 0.26%)</title><rect x="74.1054%" y="1141" width="0.2610%" height="15" fill="rgb(248,151,39)" fg:x="91415" fg:w="322"/><text x="74.3554%" y="1151.50"></text></g><g><title>leveldb::Block::Iter::key (21 samples, 0.02%)</title><rect x="74.3673%" y="1141" width="0.0170%" height="15" fill="rgb(208,89,6)" fg:x="91738" fg:w="21"/><text x="74.6173%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (33 samples, 0.03%)</title><rect x="74.4281%" y="1109" width="0.0268%" height="15" fill="rgb(254,43,26)" fg:x="91813" fg:w="33"/><text x="74.6781%" y="1119.50"></text></g><g><title>leveldb::IteratorWrapper::Next (27 samples, 0.02%)</title><rect x="74.4330%" y="1093" width="0.0219%" height="15" fill="rgb(216,158,13)" fg:x="91819" fg:w="27"/><text x="74.6830%" y="1103.50"></text></g><g><title>leveldb::Block::Iter::Next (66 samples, 0.05%)</title><rect x="74.4556%" y="1109" width="0.0535%" height="15" fill="rgb(212,47,37)" fg:x="91847" fg:w="66"/><text x="74.7056%" y="1119.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (33 samples, 0.03%)</title><rect x="74.5092%" y="1109" width="0.0268%" height="15" fill="rgb(254,16,10)" fg:x="91913" fg:w="33"/><text x="74.7592%" y="1119.50"></text></g><g><title>DecodeEntry (38 samples, 0.03%)</title><rect x="74.6081%" y="1077" width="0.0308%" height="15" fill="rgb(223,228,16)" fg:x="92035" fg:w="38"/><text x="74.8581%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (24 samples, 0.02%)</title><rect x="74.6437%" y="1061" width="0.0195%" height="15" fill="rgb(249,108,50)" fg:x="92079" fg:w="24"/><text x="74.8937%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (35 samples, 0.03%)</title><rect x="74.6437%" y="1077" width="0.0284%" height="15" fill="rgb(208,220,5)" fg:x="92079" fg:w="35"/><text x="74.8937%" y="1087.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (101 samples, 0.08%)</title><rect x="74.5943%" y="1093" width="0.0819%" height="15" fill="rgb(217,89,48)" fg:x="92018" fg:w="101"/><text x="74.8443%" y="1103.50"></text></g><g><title>leveldb::IteratorWrapper::Update (179 samples, 0.15%)</title><rect x="74.5359%" y="1109" width="0.1451%" height="15" fill="rgb(212,113,41)" fg:x="91946" fg:w="179"/><text x="74.7859%" y="1119.50"></text></g><g><title>leveldb::IteratorWrapper::Next (370 samples, 0.30%)</title><rect x="74.3843%" y="1141" width="0.2999%" height="15" fill="rgb(231,127,5)" fg:x="91759" fg:w="370"/><text x="74.6343%" y="1151.50"></text></g><g><title>leveldb::IteratorWrapper::Update (370 samples, 0.30%)</title><rect x="74.3843%" y="1125" width="0.2999%" height="15" fill="rgb(217,141,17)" fg:x="91759" fg:w="370"/><text x="74.6343%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (2,167 samples, 1.76%)</title><rect x="72.9414%" y="1157" width="1.7567%" height="15" fill="rgb(245,125,54)" fg:x="89979" fg:w="2167"/><text x="73.1914%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (17 samples, 0.01%)</title><rect x="74.6843%" y="1141" width="0.0138%" height="15" fill="rgb(248,125,3)" fg:x="92129" fg:w="17"/><text x="74.9343%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (62 samples, 0.05%)</title><rect x="74.6980%" y="1157" width="0.0503%" height="15" fill="rgb(236,119,51)" fg:x="92146" fg:w="62"/><text x="74.9480%" y="1167.50"></text></g><g><title>Valid (14 samples, 0.01%)</title><rect x="74.8018%" y="1141" width="0.0113%" height="15" fill="rgb(239,99,8)" fg:x="92274" fg:w="14"/><text x="75.0518%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (115 samples, 0.09%)</title><rect x="74.7483%" y="1157" width="0.0932%" height="15" fill="rgb(224,228,4)" fg:x="92208" fg:w="115"/><text x="74.9983%" y="1167.50"></text></g><g><title>leveldb::IteratorWrapper::key (34 samples, 0.03%)</title><rect x="74.8140%" y="1141" width="0.0276%" height="15" fill="rgb(220,131,45)" fg:x="92289" fg:w="34"/><text x="75.0640%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (13 samples, 0.01%)</title><rect x="74.9185%" y="1093" width="0.0105%" height="15" fill="rgb(215,62,5)" fg:x="92418" fg:w="13"/><text x="75.1685%" y="1103.50"></text></g><g><title>leveldb::Table::BlockReader (13 samples, 0.01%)</title><rect x="74.9185%" y="1077" width="0.0105%" height="15" fill="rgb(253,12,24)" fg:x="92418" fg:w="13"/><text x="75.1685%" y="1087.50"></text></g><g><title>leveldb::ReadBlock (13 samples, 0.01%)</title><rect x="74.9185%" y="1061" width="0.0105%" height="15" fill="rgb(248,120,50)" fg:x="92418" fg:w="13"/><text x="75.1685%" y="1071.50"></text></g><g><title>SkipEmptyDataBlocksForward (14 samples, 0.01%)</title><rect x="74.9185%" y="1125" width="0.0113%" height="15" fill="rgb(245,194,10)" fg:x="92418" fg:w="14"/><text x="75.1685%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (14 samples, 0.01%)</title><rect x="74.9185%" y="1109" width="0.0113%" height="15" fill="rgb(241,149,38)" fg:x="92418" fg:w="14"/><text x="75.1685%" y="1119.50"></text></g><g><title>leveldb::IteratorWrapper::Update (76 samples, 0.06%)</title><rect x="74.9412%" y="1125" width="0.0616%" height="15" fill="rgb(219,215,7)" fg:x="92446" fg:w="76"/><text x="75.1912%" y="1135.50"></text></g><g><title>leveldb::IteratorWrapper::Update (31 samples, 0.03%)</title><rect x="74.9777%" y="1109" width="0.0251%" height="15" fill="rgb(208,120,31)" fg:x="92491" fg:w="31"/><text x="75.2277%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (193 samples, 0.16%)</title><rect x="74.8504%" y="1157" width="0.1565%" height="15" fill="rgb(244,30,8)" fg:x="92334" fg:w="193"/><text x="75.1004%" y="1167.50"></text></g><g><title>leveldb::IteratorWrapper::Next (157 samples, 0.13%)</title><rect x="74.8796%" y="1141" width="0.1273%" height="15" fill="rgb(238,35,44)" fg:x="92370" fg:w="157"/><text x="75.1296%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (106 samples, 0.09%)</title><rect x="75.0069%" y="1157" width="0.0859%" height="15" fill="rgb(243,218,37)" fg:x="92527" fg:w="106"/><text x="75.2569%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (44 samples, 0.04%)</title><rect x="75.0928%" y="1157" width="0.0357%" height="15" fill="rgb(218,169,10)" fg:x="92633" fg:w="44"/><text x="75.3428%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (36 samples, 0.03%)</title><rect x="75.1285%" y="1157" width="0.0292%" height="15" fill="rgb(221,144,10)" fg:x="92677" fg:w="36"/><text x="75.3785%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (145 samples, 0.12%)</title><rect x="75.1577%" y="1157" width="0.1175%" height="15" fill="rgb(226,41,38)" fg:x="92713" fg:w="145"/><text x="75.4077%" y="1167.50"></text></g><g><title>leveldb::IteratorWrapper::value (127 samples, 0.10%)</title><rect x="75.1723%" y="1141" width="0.1030%" height="15" fill="rgb(228,3,1)" fg:x="92731" fg:w="127"/><text x="75.4223%" y="1151.50"></text></g><g><title>value (114 samples, 0.09%)</title><rect x="75.1828%" y="1125" width="0.0924%" height="15" fill="rgb(209,129,12)" fg:x="92744" fg:w="114"/><text x="75.4328%" y="1135.50"></text></g><g><title>leveldb::IteratorWrapper::value (109 samples, 0.09%)</title><rect x="75.1869%" y="1109" width="0.0884%" height="15" fill="rgb(213,136,33)" fg:x="92749" fg:w="109"/><text x="75.4369%" y="1119.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (31 samples, 0.03%)</title><rect x="75.2501%" y="1093" width="0.0251%" height="15" fill="rgb(209,181,29)" fg:x="92827" fg:w="31"/><text x="75.5001%" y="1103.50"></text></g><g><title>leveldb::Block::Iter::Next (21 samples, 0.02%)</title><rect x="75.2752%" y="1157" width="0.0170%" height="15" fill="rgb(234,173,18)" fg:x="92858" fg:w="21"/><text x="75.5252%" y="1167.50"></text></g><g><title>DecodeEntry (60 samples, 0.05%)</title><rect x="75.3255%" y="1141" width="0.0486%" height="15" fill="rgb(227,73,47)" fg:x="92920" fg:w="60"/><text x="75.5755%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (28 samples, 0.02%)</title><rect x="75.3838%" y="1125" width="0.0227%" height="15" fill="rgb(234,9,34)" fg:x="92992" fg:w="28"/><text x="75.6338%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (35 samples, 0.03%)</title><rect x="75.3838%" y="1141" width="0.0284%" height="15" fill="rgb(235,172,15)" fg:x="92992" fg:w="35"/><text x="75.6338%" y="1151.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (164 samples, 0.13%)</title><rect x="75.2922%" y="1157" width="0.1329%" height="15" fill="rgb(245,61,2)" fg:x="92879" fg:w="164"/><text x="75.5422%" y="1167.50"></text></g><g><title>leveldb::Block::Iter::value (61 samples, 0.05%)</title><rect x="75.4317%" y="1157" width="0.0494%" height="15" fill="rgb(238,39,47)" fg:x="93051" fg:w="61"/><text x="75.6817%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (15 samples, 0.01%)</title><rect x="75.4876%" y="1125" width="0.0122%" height="15" fill="rgb(234,37,24)" fg:x="93120" fg:w="15"/><text x="75.7376%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (20 samples, 0.02%)</title><rect x="75.4876%" y="1141" width="0.0162%" height="15" fill="rgb(248,223,24)" fg:x="93120" fg:w="20"/><text x="75.7376%" y="1151.50"></text></g><g><title>leveldb::BlockBuilder::Add (36 samples, 0.03%)</title><rect x="75.4811%" y="1157" width="0.0292%" height="15" fill="rgb(223,12,15)" fg:x="93112" fg:w="36"/><text x="75.7311%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (22 samples, 0.02%)</title><rect x="75.5314%" y="1141" width="0.0178%" height="15" fill="rgb(249,6,3)" fg:x="93174" fg:w="22"/><text x="75.7814%" y="1151.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (15 samples, 0.01%)</title><rect x="75.5508%" y="1141" width="0.0122%" height="15" fill="rgb(237,105,33)" fg:x="93198" fg:w="15"/><text x="75.8008%" y="1151.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (15 samples, 0.01%)</title><rect x="75.5630%" y="1141" width="0.0122%" height="15" fill="rgb(252,208,35)" fg:x="93213" fg:w="15"/><text x="75.8130%" y="1151.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (93 samples, 0.08%)</title><rect x="75.5103%" y="1157" width="0.0754%" height="15" fill="rgb(215,181,35)" fg:x="93148" fg:w="93"/><text x="75.7603%" y="1167.50"></text></g><g><title>MaxGrandParentOverlapBytes (42 samples, 0.03%)</title><rect x="75.7584%" y="1141" width="0.0340%" height="15" fill="rgb(246,212,3)" fg:x="93454" fg:w="42"/><text x="76.0084%" y="1151.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (17 samples, 0.01%)</title><rect x="75.8143%" y="1141" width="0.0138%" height="15" fill="rgb(247,156,24)" fg:x="93523" fg:w="17"/><text x="76.0643%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (19 samples, 0.02%)</title><rect x="75.8354%" y="1125" width="0.0154%" height="15" fill="rgb(248,9,31)" fg:x="93549" fg:w="19"/><text x="76.0854%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (51 samples, 0.04%)</title><rect x="75.8305%" y="1141" width="0.0413%" height="15" fill="rgb(234,26,45)" fg:x="93543" fg:w="51"/><text x="76.0805%" y="1151.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (384 samples, 0.31%)</title><rect x="75.5857%" y="1157" width="0.3113%" height="15" fill="rgb(249,11,32)" fg:x="93241" fg:w="384"/><text x="75.8357%" y="1167.50"></text></g><g><title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (31 samples, 0.03%)</title><rect x="75.8719%" y="1141" width="0.0251%" height="15" fill="rgb(249,162,33)" fg:x="93594" fg:w="31"/><text x="76.1219%" y="1151.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (25 samples, 0.02%)</title><rect x="75.8970%" y="1141" width="0.0203%" height="15" fill="rgb(232,4,32)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (25 samples, 0.02%)</title><rect x="75.8970%" y="1125" width="0.0203%" height="15" fill="rgb(212,5,45)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1135.50"></text></g><g><title>__unlink (25 samples, 0.02%)</title><rect x="75.8970%" y="1109" width="0.0203%" height="15" fill="rgb(227,95,13)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1119.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="75.8970%" y="1093" width="0.0203%" height="15" fill="rgb(223,205,10)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1103.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="75.8970%" y="1077" width="0.0203%" height="15" fill="rgb(222,178,8)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1087.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="75.8970%" y="1061" width="0.0203%" height="15" fill="rgb(216,13,22)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1071.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="75.8970%" y="1045" width="0.0203%" height="15" fill="rgb(240,167,12)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1055.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="75.8970%" y="1029" width="0.0203%" height="15" fill="rgb(235,68,35)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1039.50"></text></g><g><title>[[ext4]] (25 samples, 0.02%)</title><rect x="75.8970%" y="1013" width="0.0203%" height="15" fill="rgb(253,40,27)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1023.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="75.8970%" y="997" width="0.0203%" height="15" fill="rgb(214,19,28)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="1007.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="75.8970%" y="981" width="0.0203%" height="15" fill="rgb(210,167,45)" fg:x="93625" fg:w="25"/><text x="76.1470%" y="991.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="75.9002%" y="965" width="0.0170%" height="15" fill="rgb(232,97,40)" fg:x="93629" fg:w="21"/><text x="76.1502%" y="975.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="75.9051%" y="949" width="0.0122%" height="15" fill="rgb(250,35,23)" fg:x="93635" fg:w="15"/><text x="76.1551%" y="959.50"></text></g><g><title>[[ext4]] (13 samples, 0.01%)</title><rect x="75.9197%" y="885" width="0.0105%" height="15" fill="rgb(248,47,53)" fg:x="93653" fg:w="13"/><text x="76.1697%" y="895.50"></text></g><g><title>[[ext4]] (17 samples, 0.01%)</title><rect x="75.9172%" y="901" width="0.0138%" height="15" fill="rgb(226,58,50)" fg:x="93650" fg:w="17"/><text x="76.1672%" y="911.50"></text></g><g><title>[[ext4]] (18 samples, 0.01%)</title><rect x="75.9172%" y="933" width="0.0146%" height="15" fill="rgb(217,105,26)" fg:x="93650" fg:w="18"/><text x="76.1672%" y="943.50"></text></g><g><title>[[ext4]] (18 samples, 0.01%)</title><rect x="75.9172%" y="917" width="0.0146%" height="15" fill="rgb(208,64,1)" fg:x="93650" fg:w="18"/><text x="76.1672%" y="927.50"></text></g><g><title>Sync (20 samples, 0.02%)</title><rect x="75.9172%" y="1109" width="0.0162%" height="15" fill="rgb(214,80,1)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (20 samples, 0.02%)</title><rect x="75.9172%" y="1093" width="0.0162%" height="15" fill="rgb(206,175,26)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="1103.50"></text></g><g><title>fdatasync (20 samples, 0.02%)</title><rect x="75.9172%" y="1077" width="0.0162%" height="15" fill="rgb(235,156,37)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="1087.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="75.9172%" y="1061" width="0.0162%" height="15" fill="rgb(213,100,9)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="1071.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="75.9172%" y="1045" width="0.0162%" height="15" fill="rgb(241,15,13)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="1055.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="75.9172%" y="1029" width="0.0162%" height="15" fill="rgb(205,97,43)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="1039.50"></text></g><g><title>[[ext4]] (20 samples, 0.02%)</title><rect x="75.9172%" y="1013" width="0.0162%" height="15" fill="rgb(216,106,32)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="1023.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="75.9172%" y="997" width="0.0162%" height="15" fill="rgb(226,200,8)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="1007.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="75.9172%" y="981" width="0.0162%" height="15" fill="rgb(244,54,29)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="991.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="75.9172%" y="965" width="0.0162%" height="15" fill="rgb(252,169,12)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="975.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="75.9172%" y="949" width="0.0162%" height="15" fill="rgb(231,199,11)" fg:x="93650" fg:w="20"/><text x="76.1672%" y="959.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (82 samples, 0.07%)</title><rect x="76.0534%" y="1061" width="0.0665%" height="15" fill="rgb(233,191,18)" fg:x="93818" fg:w="82"/><text x="76.3034%" y="1071.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (184 samples, 0.15%)</title><rect x="75.9724%" y="1077" width="0.1492%" height="15" fill="rgb(215,83,47)" fg:x="93718" fg:w="184"/><text x="76.2224%" y="1087.50"></text></g><g><title>leveldb::TableBuilder::Add (13 samples, 0.01%)</title><rect x="76.1321%" y="1077" width="0.0105%" height="15" fill="rgb(251,67,19)" fg:x="93915" fg:w="13"/><text x="76.3821%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (18 samples, 0.01%)</title><rect x="76.1531%" y="1061" width="0.0146%" height="15" fill="rgb(240,7,20)" fg:x="93941" fg:w="18"/><text x="76.4031%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (19 samples, 0.02%)</title><rect x="76.1531%" y="1077" width="0.0154%" height="15" fill="rgb(210,150,26)" fg:x="93941" fg:w="19"/><text x="76.4031%" y="1087.50"></text></g><g><title>leveldb::BlockBuilder::Add (269 samples, 0.22%)</title><rect x="75.9537%" y="1093" width="0.2181%" height="15" fill="rgb(228,75,42)" fg:x="93695" fg:w="269"/><text x="76.2037%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (31 samples, 0.03%)</title><rect x="76.1783%" y="1061" width="0.0251%" height="15" fill="rgb(237,134,48)" fg:x="93972" fg:w="31"/><text x="76.4283%" y="1071.50"></text></g><g><title>leveldb::Hash (21 samples, 0.02%)</title><rect x="76.2034%" y="1061" width="0.0170%" height="15" fill="rgb(205,80,50)" fg:x="94003" fg:w="21"/><text x="76.4534%" y="1071.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (59 samples, 0.05%)</title><rect x="76.1775%" y="1077" width="0.0478%" height="15" fill="rgb(217,74,48)" fg:x="93971" fg:w="59"/><text x="76.4275%" y="1087.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (60 samples, 0.05%)</title><rect x="76.1775%" y="1093" width="0.0486%" height="15" fill="rgb(205,82,50)" fg:x="93971" fg:w="60"/><text x="76.4275%" y="1103.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (17 samples, 0.01%)</title><rect x="76.2261%" y="1093" width="0.0138%" height="15" fill="rgb(228,1,33)" fg:x="94031" fg:w="17"/><text x="76.4761%" y="1103.50"></text></g><g><title>leveldb::PutVarint32 (19 samples, 0.02%)</title><rect x="76.2480%" y="1093" width="0.0154%" height="15" fill="rgb(214,50,23)" fg:x="94058" fg:w="19"/><text x="76.4980%" y="1103.50"></text></g><g><title>[[ext4]] (14 samples, 0.01%)</title><rect x="76.2756%" y="885" width="0.0113%" height="15" fill="rgb(210,62,9)" fg:x="94092" fg:w="14"/><text x="76.5256%" y="895.50"></text></g><g><title>[[ext4]] (22 samples, 0.02%)</title><rect x="76.2747%" y="901" width="0.0178%" height="15" fill="rgb(210,104,37)" fg:x="94091" fg:w="22"/><text x="76.5247%" y="911.50"></text></g><g><title>[[ext4]] (61 samples, 0.05%)</title><rect x="76.2723%" y="917" width="0.0494%" height="15" fill="rgb(232,104,43)" fg:x="94088" fg:w="61"/><text x="76.5223%" y="927.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="76.2926%" y="901" width="0.0292%" height="15" fill="rgb(244,52,6)" fg:x="94113" fg:w="36"/><text x="76.5426%" y="911.50"></text></g><g><title>[unknown] (35 samples, 0.03%)</title><rect x="76.2934%" y="885" width="0.0284%" height="15" fill="rgb(211,174,52)" fg:x="94114" fg:w="35"/><text x="76.5434%" y="895.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="76.2958%" y="869" width="0.0259%" height="15" fill="rgb(229,48,4)" fg:x="94117" fg:w="32"/><text x="76.5458%" y="879.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="76.3007%" y="853" width="0.0211%" height="15" fill="rgb(205,155,16)" fg:x="94123" fg:w="26"/><text x="76.5507%" y="863.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="76.3072%" y="837" width="0.0146%" height="15" fill="rgb(211,141,53)" fg:x="94131" fg:w="18"/><text x="76.5572%" y="847.50"></text></g><g><title>[[ext4]] (75 samples, 0.06%)</title><rect x="76.2691%" y="949" width="0.0608%" height="15" fill="rgb(240,148,11)" fg:x="94084" fg:w="75"/><text x="76.5191%" y="959.50"></text></g><g><title>[unknown] (73 samples, 0.06%)</title><rect x="76.2707%" y="933" width="0.0592%" height="15" fill="rgb(214,45,23)" fg:x="94086" fg:w="73"/><text x="76.5207%" y="943.50"></text></g><g><title>Flush (86 samples, 0.07%)</title><rect x="76.2650%" y="1077" width="0.0697%" height="15" fill="rgb(248,74,26)" fg:x="94079" fg:w="86"/><text x="76.5150%" y="1087.50"></text></g><g><title>FlushBuffer (86 samples, 0.07%)</title><rect x="76.2650%" y="1061" width="0.0697%" height="15" fill="rgb(218,121,16)" fg:x="94079" fg:w="86"/><text x="76.5150%" y="1071.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (86 samples, 0.07%)</title><rect x="76.2650%" y="1045" width="0.0697%" height="15" fill="rgb(218,10,47)" fg:x="94079" fg:w="86"/><text x="76.5150%" y="1055.50"></text></g><g><title>__GI___libc_write (86 samples, 0.07%)</title><rect x="76.2650%" y="1029" width="0.0697%" height="15" fill="rgb(227,99,14)" fg:x="94079" fg:w="86"/><text x="76.5150%" y="1039.50"></text></g><g><title>[unknown] (86 samples, 0.07%)</title><rect x="76.2650%" y="1013" width="0.0697%" height="15" fill="rgb(229,83,46)" fg:x="94079" fg:w="86"/><text x="76.5150%" y="1023.50"></text></g><g><title>[unknown] (84 samples, 0.07%)</title><rect x="76.2666%" y="997" width="0.0681%" height="15" fill="rgb(228,25,1)" fg:x="94081" fg:w="84"/><text x="76.5166%" y="1007.50"></text></g><g><title>[unknown] (83 samples, 0.07%)</title><rect x="76.2674%" y="981" width="0.0673%" height="15" fill="rgb(252,190,15)" fg:x="94082" fg:w="83"/><text x="76.5174%" y="991.50"></text></g><g><title>[unknown] (82 samples, 0.07%)</title><rect x="76.2683%" y="965" width="0.0665%" height="15" fill="rgb(213,103,51)" fg:x="94083" fg:w="82"/><text x="76.5183%" y="975.50"></text></g><g><title>leveldb::TableBuilder::Flush (98 samples, 0.08%)</title><rect x="76.2650%" y="1093" width="0.0794%" height="15" fill="rgb(220,38,44)" fg:x="94079" fg:w="98"/><text x="76.5150%" y="1103.50"></text></g><g><title>leveldb::TableBuilder::Add (494 samples, 0.40%)</title><rect x="75.9472%" y="1109" width="0.4005%" height="15" fill="rgb(210,45,26)" fg:x="93687" fg:w="494"/><text x="76.1972%" y="1119.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (539 samples, 0.44%)</title><rect x="75.9172%" y="1141" width="0.4369%" height="15" fill="rgb(205,95,48)" fg:x="93650" fg:w="539"/><text x="76.1672%" y="1151.50"></text></g><g><title>leveldb::BuildTable (539 samples, 0.44%)</title><rect x="75.9172%" y="1125" width="0.4369%" height="15" fill="rgb(225,179,37)" fg:x="93650" fg:w="539"/><text x="76.1672%" y="1135.50"></text></g><g><title>leveldb::DBImpl::CompactMemTable (573 samples, 0.46%)</title><rect x="75.8970%" y="1157" width="0.4645%" height="15" fill="rgb(230,209,3)" fg:x="93625" fg:w="573"/><text x="76.1470%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (52 samples, 0.04%)</title><rect x="76.6784%" y="1109" width="0.0422%" height="15" fill="rgb(248,12,46)" fg:x="94589" fg:w="52"/><text x="76.9284%" y="1119.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (53 samples, 0.04%)</title><rect x="76.6784%" y="1141" width="0.0430%" height="15" fill="rgb(234,18,0)" fg:x="94589" fg:w="53"/><text x="76.9284%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (53 samples, 0.04%)</title><rect x="76.6784%" y="1125" width="0.0430%" height="15" fill="rgb(238,197,14)" fg:x="94589" fg:w="53"/><text x="76.9284%" y="1135.50"></text></g><g><title>leveldb::ParseInternalKey (17 samples, 0.01%)</title><rect x="76.7214%" y="1141" width="0.0138%" height="15" fill="rgb(251,162,48)" fg:x="94642" fg:w="17"/><text x="76.9714%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (16 samples, 0.01%)</title><rect x="76.7838%" y="1109" width="0.0130%" height="15" fill="rgb(237,73,42)" fg:x="94719" fg:w="16"/><text x="77.0338%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (31 samples, 0.03%)</title><rect x="76.7968%" y="1109" width="0.0251%" height="15" fill="rgb(211,108,8)" fg:x="94735" fg:w="31"/><text x="77.0468%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (18 samples, 0.01%)</title><rect x="76.8219%" y="1109" width="0.0146%" height="15" fill="rgb(213,45,22)" fg:x="94766" fg:w="18"/><text x="77.0719%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (14 samples, 0.01%)</title><rect x="76.8252%" y="1093" width="0.0113%" height="15" fill="rgb(252,154,5)" fg:x="94770" fg:w="14"/><text x="77.0752%" y="1103.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (14 samples, 0.01%)</title><rect x="76.8252%" y="1077" width="0.0113%" height="15" fill="rgb(221,79,52)" fg:x="94770" fg:w="14"/><text x="77.0752%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (134 samples, 0.11%)</title><rect x="76.7603%" y="1125" width="0.1086%" height="15" fill="rgb(229,220,36)" fg:x="94690" fg:w="134"/><text x="77.0103%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (40 samples, 0.03%)</title><rect x="76.8365%" y="1109" width="0.0324%" height="15" fill="rgb(211,17,16)" fg:x="94784" fg:w="40"/><text x="77.0865%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (29 samples, 0.02%)</title><rect x="76.8454%" y="1093" width="0.0235%" height="15" fill="rgb(222,55,31)" fg:x="94795" fg:w="29"/><text x="77.0954%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (17 samples, 0.01%)</title><rect x="76.8552%" y="1077" width="0.0138%" height="15" fill="rgb(221,221,31)" fg:x="94807" fg:w="17"/><text x="77.1052%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (144 samples, 0.12%)</title><rect x="76.7603%" y="1141" width="0.1167%" height="15" fill="rgb(227,168,26)" fg:x="94690" fg:w="144"/><text x="77.0103%" y="1151.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (646 samples, 0.52%)</title><rect x="76.3615%" y="1157" width="0.5237%" height="15" fill="rgb(224,139,9)" fg:x="94198" fg:w="646"/><text x="76.6115%" y="1167.50"></text></g><g><title>[[ext4]] (14 samples, 0.01%)</title><rect x="77.2889%" y="869" width="0.0113%" height="15" fill="rgb(254,172,0)" fg:x="95342" fg:w="14"/><text x="77.5389%" y="879.50"></text></g><g><title>[[ext4]] (16 samples, 0.01%)</title><rect x="77.2881%" y="885" width="0.0130%" height="15" fill="rgb(235,203,1)" fg:x="95341" fg:w="16"/><text x="77.5381%" y="895.50"></text></g><g><title>[[nvme]] (34 samples, 0.03%)</title><rect x="77.6885%" y="789" width="0.0276%" height="15" fill="rgb(216,205,24)" fg:x="95835" fg:w="34"/><text x="77.9385%" y="799.50"></text></g><g><title>[unknown] (33 samples, 0.03%)</title><rect x="77.6893%" y="773" width="0.0268%" height="15" fill="rgb(233,24,6)" fg:x="95836" fg:w="33"/><text x="77.9393%" y="783.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="77.6934%" y="757" width="0.0227%" height="15" fill="rgb(244,110,9)" fg:x="95841" fg:w="28"/><text x="77.9434%" y="767.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="77.6942%" y="741" width="0.0219%" height="15" fill="rgb(239,222,42)" fg:x="95842" fg:w="27"/><text x="77.9442%" y="751.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="77.6974%" y="725" width="0.0186%" height="15" fill="rgb(218,145,13)" fg:x="95846" fg:w="23"/><text x="77.9474%" y="735.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="77.7007%" y="709" width="0.0154%" height="15" fill="rgb(207,69,11)" fg:x="95850" fg:w="19"/><text x="77.9507%" y="719.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="77.7031%" y="693" width="0.0130%" height="15" fill="rgb(220,223,22)" fg:x="95853" fg:w="16"/><text x="77.9531%" y="703.50"></text></g><g><title>[[nvme]] (37 samples, 0.03%)</title><rect x="77.6869%" y="805" width="0.0300%" height="15" fill="rgb(245,102,5)" fg:x="95833" fg:w="37"/><text x="77.9369%" y="815.50"></text></g><g><title>[[ext4]] (654 samples, 0.53%)</title><rect x="77.2013%" y="901" width="0.5302%" height="15" fill="rgb(211,148,2)" fg:x="95234" fg:w="654"/><text x="77.4513%" y="911.50"></text></g><g><title>[unknown] (531 samples, 0.43%)</title><rect x="77.3010%" y="885" width="0.4305%" height="15" fill="rgb(241,13,44)" fg:x="95357" fg:w="531"/><text x="77.5510%" y="895.50"></text></g><g><title>[unknown] (302 samples, 0.24%)</title><rect x="77.4867%" y="869" width="0.2448%" height="15" fill="rgb(219,137,21)" fg:x="95586" fg:w="302"/><text x="77.7367%" y="879.50"></text></g><g><title>[unknown] (122 samples, 0.10%)</title><rect x="77.6326%" y="853" width="0.0989%" height="15" fill="rgb(242,206,5)" fg:x="95766" fg:w="122"/><text x="77.8826%" y="863.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="77.6626%" y="837" width="0.0689%" height="15" fill="rgb(217,114,22)" fg:x="95803" fg:w="85"/><text x="77.9126%" y="847.50"></text></g><g><title>[unknown] (71 samples, 0.06%)</title><rect x="77.6739%" y="821" width="0.0576%" height="15" fill="rgb(253,206,42)" fg:x="95817" fg:w="71"/><text x="77.9239%" y="831.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="77.7169%" y="805" width="0.0146%" height="15" fill="rgb(236,102,18)" fg:x="95870" fg:w="18"/><text x="77.9669%" y="815.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="77.7209%" y="789" width="0.0105%" height="15" fill="rgb(208,59,49)" fg:x="95875" fg:w="13"/><text x="77.9709%" y="799.50"></text></g><g><title>[[ext4]] (954 samples, 0.77%)</title><rect x="77.1397%" y="917" width="0.7734%" height="15" fill="rgb(215,194,28)" fg:x="95158" fg:w="954"/><text x="77.3897%" y="927.50"></text></g><g><title>[unknown] (224 samples, 0.18%)</title><rect x="77.7315%" y="901" width="0.1816%" height="15" fill="rgb(243,207,11)" fg:x="95888" fg:w="224"/><text x="77.9815%" y="911.50"></text></g><g><title>[unknown] (130 samples, 0.11%)</title><rect x="77.8077%" y="885" width="0.1054%" height="15" fill="rgb(254,179,35)" fg:x="95982" fg:w="130"/><text x="78.0577%" y="895.50"></text></g><g><title>[unknown] (62 samples, 0.05%)</title><rect x="77.8628%" y="869" width="0.0503%" height="15" fill="rgb(235,97,3)" fg:x="96050" fg:w="62"/><text x="78.1128%" y="879.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="77.8709%" y="853" width="0.0422%" height="15" fill="rgb(215,155,33)" fg:x="96060" fg:w="52"/><text x="78.1209%" y="863.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="77.8960%" y="837" width="0.0170%" height="15" fill="rgb(223,128,12)" fg:x="96091" fg:w="21"/><text x="78.1460%" y="847.50"></text></g><g><title>[[nvme]] (86 samples, 0.07%)</title><rect x="78.0671%" y="821" width="0.0697%" height="15" fill="rgb(208,157,18)" fg:x="96302" fg:w="86"/><text x="78.3171%" y="831.50"></text></g><g><title>[unknown] (86 samples, 0.07%)</title><rect x="78.0671%" y="805" width="0.0697%" height="15" fill="rgb(249,70,54)" fg:x="96302" fg:w="86"/><text x="78.3171%" y="815.50"></text></g><g><title>[unknown] (78 samples, 0.06%)</title><rect x="78.0736%" y="789" width="0.0632%" height="15" fill="rgb(244,118,24)" fg:x="96310" fg:w="78"/><text x="78.3236%" y="799.50"></text></g><g><title>[unknown] (76 samples, 0.06%)</title><rect x="78.0752%" y="773" width="0.0616%" height="15" fill="rgb(211,54,0)" fg:x="96312" fg:w="76"/><text x="78.3252%" y="783.50"></text></g><g><title>[unknown] (69 samples, 0.06%)</title><rect x="78.0809%" y="757" width="0.0559%" height="15" fill="rgb(245,137,45)" fg:x="96319" fg:w="69"/><text x="78.3309%" y="767.50"></text></g><g><title>[unknown] (60 samples, 0.05%)</title><rect x="78.0882%" y="741" width="0.0486%" height="15" fill="rgb(232,154,31)" fg:x="96328" fg:w="60"/><text x="78.3382%" y="751.50"></text></g><g><title>[unknown] (55 samples, 0.04%)</title><rect x="78.0922%" y="725" width="0.0446%" height="15" fill="rgb(253,6,39)" fg:x="96333" fg:w="55"/><text x="78.3422%" y="735.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="78.1238%" y="709" width="0.0130%" height="15" fill="rgb(234,183,24)" fg:x="96372" fg:w="16"/><text x="78.3738%" y="719.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="78.1255%" y="693" width="0.0113%" height="15" fill="rgb(252,84,40)" fg:x="96374" fg:w="14"/><text x="78.3755%" y="703.50"></text></g><g><title>[[nvme]] (90 samples, 0.07%)</title><rect x="78.0647%" y="837" width="0.0730%" height="15" fill="rgb(224,65,2)" fg:x="96299" fg:w="90"/><text x="78.3147%" y="847.50"></text></g><g><title>[[ext4]] (1,461 samples, 1.18%)</title><rect x="76.9857%" y="933" width="1.1844%" height="15" fill="rgb(229,38,24)" fg:x="94968" fg:w="1461"/><text x="77.2357%" y="943.50"></text></g><g><title>[unknown] (317 samples, 0.26%)</title><rect x="77.9131%" y="917" width="0.2570%" height="15" fill="rgb(218,131,50)" fg:x="96112" fg:w="317"/><text x="78.1631%" y="927.50"></text></g><g><title>[unknown] (234 samples, 0.19%)</title><rect x="77.9803%" y="901" width="0.1897%" height="15" fill="rgb(233,106,18)" fg:x="96195" fg:w="234"/><text x="78.2303%" y="911.50"></text></g><g><title>[unknown] (186 samples, 0.15%)</title><rect x="78.0193%" y="885" width="0.1508%" height="15" fill="rgb(220,216,11)" fg:x="96243" fg:w="186"/><text x="78.2693%" y="895.50"></text></g><g><title>[unknown] (177 samples, 0.14%)</title><rect x="78.0266%" y="869" width="0.1435%" height="15" fill="rgb(251,100,45)" fg:x="96252" fg:w="177"/><text x="78.2766%" y="879.50"></text></g><g><title>[unknown] (171 samples, 0.14%)</title><rect x="78.0314%" y="853" width="0.1386%" height="15" fill="rgb(235,143,32)" fg:x="96258" fg:w="171"/><text x="78.2814%" y="863.50"></text></g><g><title>[unknown] (40 samples, 0.03%)</title><rect x="78.1376%" y="837" width="0.0324%" height="15" fill="rgb(248,124,34)" fg:x="96389" fg:w="40"/><text x="78.3876%" y="847.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="78.1546%" y="821" width="0.0154%" height="15" fill="rgb(225,221,4)" fg:x="96410" fg:w="19"/><text x="78.4046%" y="831.50"></text></g><g><title>[[ext4]] (1,480 samples, 1.20%)</title><rect x="76.9857%" y="965" width="1.1998%" height="15" fill="rgb(242,27,43)" fg:x="94968" fg:w="1480"/><text x="77.2357%" y="975.50"></text></g><g><title>[[ext4]] (1,480 samples, 1.20%)</title><rect x="76.9857%" y="949" width="1.1998%" height="15" fill="rgb(227,54,8)" fg:x="94968" fg:w="1480"/><text x="77.2357%" y="959.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="78.1700%" y="933" width="0.0154%" height="15" fill="rgb(253,139,49)" fg:x="96429" fg:w="19"/><text x="78.4200%" y="943.50"></text></g><g><title>Sync (1,996 samples, 1.62%)</title><rect x="76.8852%" y="1141" width="1.6181%" height="15" fill="rgb(231,26,43)" fg:x="94844" fg:w="1996"/><text x="77.1352%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1,994 samples, 1.62%)</title><rect x="76.8868%" y="1125" width="1.6164%" height="15" fill="rgb(207,121,39)" fg:x="94846" fg:w="1994"/><text x="77.1368%" y="1135.50"></text></g><g><title>fdatasync (1,994 samples, 1.62%)</title><rect x="76.8868%" y="1109" width="1.6164%" height="15" fill="rgb(223,101,35)" fg:x="94846" fg:w="1994"/><text x="77.1368%" y="1119.50"></text></g><g><title>[unknown] (1,994 samples, 1.62%)</title><rect x="76.8868%" y="1093" width="1.6164%" height="15" fill="rgb(232,87,23)" fg:x="94846" fg:w="1994"/><text x="77.1368%" y="1103.50"></text></g><g><title>[unknown] (1,994 samples, 1.62%)</title><rect x="76.8868%" y="1077" width="1.6164%" height="15" fill="rgb(225,180,29)" fg:x="94846" fg:w="1994"/><text x="77.1368%" y="1087.50"></text></g><g><title>[unknown] (1,994 samples, 1.62%)</title><rect x="76.8868%" y="1061" width="1.6164%" height="15" fill="rgb(225,25,17)" fg:x="94846" fg:w="1994"/><text x="77.1368%" y="1071.50"></text></g><g><title>[[ext4]] (1,994 samples, 1.62%)</title><rect x="76.8868%" y="1045" width="1.6164%" height="15" fill="rgb(223,8,52)" fg:x="94846" fg:w="1994"/><text x="77.1368%" y="1055.50"></text></g><g><title>[unknown] (1,989 samples, 1.61%)</title><rect x="76.8908%" y="1029" width="1.6124%" height="15" fill="rgb(246,42,21)" fg:x="94851" fg:w="1989"/><text x="77.1408%" y="1039.50"></text></g><g><title>[unknown] (1,989 samples, 1.61%)</title><rect x="76.8908%" y="1013" width="1.6124%" height="15" fill="rgb(205,64,43)" fg:x="94851" fg:w="1989"/><text x="77.1408%" y="1023.50"></text></g><g><title>[unknown] (1,976 samples, 1.60%)</title><rect x="76.9014%" y="997" width="1.6018%" height="15" fill="rgb(221,160,13)" fg:x="94864" fg:w="1976"/><text x="77.1514%" y="1007.50"></text></g><g><title>[unknown] (1,928 samples, 1.56%)</title><rect x="76.9403%" y="981" width="1.5629%" height="15" fill="rgb(239,58,35)" fg:x="94912" fg:w="1928"/><text x="77.1903%" y="991.50"></text></g><g><title>[unknown] (392 samples, 0.32%)</title><rect x="78.1854%" y="965" width="0.3178%" height="15" fill="rgb(251,26,40)" fg:x="96448" fg:w="392"/><text x="78.4354%" y="975.50"></text></g><g><title>[unknown] (387 samples, 0.31%)</title><rect x="78.1895%" y="949" width="0.3137%" height="15" fill="rgb(247,0,4)" fg:x="96453" fg:w="387"/><text x="78.4395%" y="959.50"></text></g><g><title>[unknown] (386 samples, 0.31%)</title><rect x="78.1903%" y="933" width="0.3129%" height="15" fill="rgb(218,130,10)" fg:x="96454" fg:w="386"/><text x="78.4403%" y="943.50"></text></g><g><title>[unknown] (348 samples, 0.28%)</title><rect x="78.2211%" y="917" width="0.2821%" height="15" fill="rgb(239,32,7)" fg:x="96492" fg:w="348"/><text x="78.4711%" y="927.50"></text></g><g><title>[unknown] (279 samples, 0.23%)</title><rect x="78.2770%" y="901" width="0.2262%" height="15" fill="rgb(210,192,24)" fg:x="96561" fg:w="279"/><text x="78.5270%" y="911.50"></text></g><g><title>[unknown] (166 samples, 0.13%)</title><rect x="78.3687%" y="885" width="0.1346%" height="15" fill="rgb(226,212,17)" fg:x="96674" fg:w="166"/><text x="78.6187%" y="895.50"></text></g><g><title>[unknown] (96 samples, 0.08%)</title><rect x="78.4254%" y="869" width="0.0778%" height="15" fill="rgb(219,201,28)" fg:x="96744" fg:w="96"/><text x="78.6754%" y="879.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="78.4619%" y="853" width="0.0413%" height="15" fill="rgb(235,207,41)" fg:x="96789" fg:w="51"/><text x="78.7119%" y="863.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="78.4813%" y="837" width="0.0219%" height="15" fill="rgb(241,95,54)" fg:x="96813" fg:w="27"/><text x="78.7313%" y="847.50"></text></g><g><title>[[ext4]] (17 samples, 0.01%)</title><rect x="78.5170%" y="933" width="0.0138%" height="15" fill="rgb(248,12,23)" fg:x="96857" fg:w="17"/><text x="78.7670%" y="943.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="78.5194%" y="917" width="0.0113%" height="15" fill="rgb(228,173,4)" fg:x="96860" fg:w="14"/><text x="78.7694%" y="927.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="78.5194%" y="901" width="0.0113%" height="15" fill="rgb(254,99,5)" fg:x="96860" fg:w="14"/><text x="78.7694%" y="911.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="78.5194%" y="885" width="0.0113%" height="15" fill="rgb(212,184,17)" fg:x="96860" fg:w="14"/><text x="78.7694%" y="895.50"></text></g><g><title>FlushBuffer (19 samples, 0.02%)</title><rect x="78.5170%" y="1077" width="0.0154%" height="15" fill="rgb(252,174,1)" fg:x="96857" fg:w="19"/><text x="78.7670%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (19 samples, 0.02%)</title><rect x="78.5170%" y="1061" width="0.0154%" height="15" fill="rgb(241,118,51)" fg:x="96857" fg:w="19"/><text x="78.7670%" y="1071.50"></text></g><g><title>__GI___libc_write (19 samples, 0.02%)</title><rect x="78.5170%" y="1045" width="0.0154%" height="15" fill="rgb(227,94,47)" fg:x="96857" fg:w="19"/><text x="78.7670%" y="1055.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="78.5170%" y="1029" width="0.0154%" height="15" fill="rgb(229,104,2)" fg:x="96857" fg:w="19"/><text x="78.7670%" y="1039.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="78.5170%" y="1013" width="0.0154%" height="15" fill="rgb(219,28,31)" fg:x="96857" fg:w="19"/><text x="78.7670%" y="1023.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="78.5170%" y="997" width="0.0154%" height="15" fill="rgb(233,109,36)" fg:x="96857" fg:w="19"/><text x="78.7670%" y="1007.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="78.5170%" y="981" width="0.0154%" height="15" fill="rgb(246,88,11)" fg:x="96857" fg:w="19"/><text x="78.7670%" y="991.50"></text></g><g><title>[[ext4]] (19 samples, 0.02%)</title><rect x="78.5170%" y="965" width="0.0154%" height="15" fill="rgb(209,212,17)" fg:x="96857" fg:w="19"/><text x="78.7670%" y="975.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="78.5170%" y="949" width="0.0154%" height="15" fill="rgb(243,59,29)" fg:x="96857" fg:w="19"/><text x="78.7670%" y="959.50"></text></g><g><title>[[ext4]] (32 samples, 0.03%)</title><rect x="78.5332%" y="949" width="0.0259%" height="15" fill="rgb(244,205,48)" fg:x="96877" fg:w="32"/><text x="78.7832%" y="959.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="78.5413%" y="933" width="0.0178%" height="15" fill="rgb(227,30,6)" fg:x="96887" fg:w="22"/><text x="78.7913%" y="943.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="78.5421%" y="917" width="0.0170%" height="15" fill="rgb(220,205,48)" fg:x="96888" fg:w="21"/><text x="78.7921%" y="927.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="78.5421%" y="901" width="0.0170%" height="15" fill="rgb(250,94,14)" fg:x="96888" fg:w="21"/><text x="78.7921%" y="911.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="78.5486%" y="885" width="0.0105%" height="15" fill="rgb(216,119,42)" fg:x="96896" fg:w="13"/><text x="78.7986%" y="895.50"></text></g><g><title>__GI___libc_write (36 samples, 0.03%)</title><rect x="78.5324%" y="1061" width="0.0292%" height="15" fill="rgb(232,155,0)" fg:x="96876" fg:w="36"/><text x="78.7824%" y="1071.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="78.5324%" y="1045" width="0.0292%" height="15" fill="rgb(212,24,32)" fg:x="96876" fg:w="36"/><text x="78.7824%" y="1055.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="78.5324%" y="1029" width="0.0292%" height="15" fill="rgb(216,69,20)" fg:x="96876" fg:w="36"/><text x="78.7824%" y="1039.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="78.5324%" y="1013" width="0.0292%" height="15" fill="rgb(229,73,31)" fg:x="96876" fg:w="36"/><text x="78.7824%" y="1023.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="78.5324%" y="997" width="0.0292%" height="15" fill="rgb(224,219,20)" fg:x="96876" fg:w="36"/><text x="78.7824%" y="1007.50"></text></g><g><title>[[ext4]] (36 samples, 0.03%)</title><rect x="78.5324%" y="981" width="0.0292%" height="15" fill="rgb(215,146,41)" fg:x="96876" fg:w="36"/><text x="78.7824%" y="991.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="78.5324%" y="965" width="0.0292%" height="15" fill="rgb(244,71,31)" fg:x="96876" fg:w="36"/><text x="78.7824%" y="975.50"></text></g><g><title>Append (57 samples, 0.05%)</title><rect x="78.5170%" y="1093" width="0.0462%" height="15" fill="rgb(224,24,11)" fg:x="96857" fg:w="57"/><text x="78.7670%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (38 samples, 0.03%)</title><rect x="78.5324%" y="1077" width="0.0308%" height="15" fill="rgb(229,76,15)" fg:x="96876" fg:w="38"/><text x="78.7824%" y="1087.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (64 samples, 0.05%)</title><rect x="78.5129%" y="1125" width="0.0519%" height="15" fill="rgb(209,93,2)" fg:x="96852" fg:w="64"/><text x="78.7629%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (59 samples, 0.05%)</title><rect x="78.5170%" y="1109" width="0.0478%" height="15" fill="rgb(216,200,50)" fg:x="96857" fg:w="59"/><text x="78.7670%" y="1119.50"></text></g><g><title>[[ext4]] (16 samples, 0.01%)</title><rect x="78.5754%" y="933" width="0.0130%" height="15" fill="rgb(211,67,34)" fg:x="96929" fg:w="16"/><text x="78.8254%" y="943.50"></text></g><g><title>[[ext4]] (25 samples, 0.02%)</title><rect x="78.5754%" y="949" width="0.0203%" height="15" fill="rgb(225,87,47)" fg:x="96929" fg:w="25"/><text x="78.8254%" y="959.50"></text></g><g><title>[[ext4]] (80 samples, 0.06%)</title><rect x="78.5746%" y="965" width="0.0649%" height="15" fill="rgb(217,185,16)" fg:x="96928" fg:w="80"/><text x="78.8246%" y="975.50"></text></g><g><title>[unknown] (54 samples, 0.04%)</title><rect x="78.5956%" y="949" width="0.0438%" height="15" fill="rgb(205,0,0)" fg:x="96954" fg:w="54"/><text x="78.8456%" y="959.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="78.5973%" y="933" width="0.0422%" height="15" fill="rgb(207,116,45)" fg:x="96956" fg:w="52"/><text x="78.8473%" y="943.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="78.5981%" y="917" width="0.0413%" height="15" fill="rgb(221,156,26)" fg:x="96957" fg:w="51"/><text x="78.8481%" y="927.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="78.6086%" y="901" width="0.0308%" height="15" fill="rgb(213,140,4)" fg:x="96970" fg:w="38"/><text x="78.8586%" y="911.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="78.6183%" y="885" width="0.0211%" height="15" fill="rgb(231,224,15)" fg:x="96982" fg:w="26"/><text x="78.8683%" y="895.50"></text></g><g><title>__GI___libc_write (96 samples, 0.08%)</title><rect x="78.5746%" y="1077" width="0.0778%" height="15" fill="rgb(244,76,20)" fg:x="96928" fg:w="96"/><text x="78.8246%" y="1087.50"></text></g><g><title>[unknown] (96 samples, 0.08%)</title><rect x="78.5746%" y="1061" width="0.0778%" height="15" fill="rgb(238,117,7)" fg:x="96928" fg:w="96"/><text x="78.8246%" y="1071.50"></text></g><g><title>[unknown] (96 samples, 0.08%)</title><rect x="78.5746%" y="1045" width="0.0778%" height="15" fill="rgb(235,1,10)" fg:x="96928" fg:w="96"/><text x="78.8246%" y="1055.50"></text></g><g><title>[unknown] (96 samples, 0.08%)</title><rect x="78.5746%" y="1029" width="0.0778%" height="15" fill="rgb(216,165,6)" fg:x="96928" fg:w="96"/><text x="78.8246%" y="1039.50"></text></g><g><title>[unknown] (96 samples, 0.08%)</title><rect x="78.5746%" y="1013" width="0.0778%" height="15" fill="rgb(246,91,35)" fg:x="96928" fg:w="96"/><text x="78.8246%" y="1023.50"></text></g><g><title>[[ext4]] (96 samples, 0.08%)</title><rect x="78.5746%" y="997" width="0.0778%" height="15" fill="rgb(228,96,24)" fg:x="96928" fg:w="96"/><text x="78.8246%" y="1007.50"></text></g><g><title>[unknown] (96 samples, 0.08%)</title><rect x="78.5746%" y="981" width="0.0778%" height="15" fill="rgb(254,217,53)" fg:x="96928" fg:w="96"/><text x="78.8246%" y="991.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="78.6394%" y="965" width="0.0130%" height="15" fill="rgb(209,60,0)" fg:x="97008" fg:w="16"/><text x="78.8894%" y="975.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="78.6410%" y="949" width="0.0113%" height="15" fill="rgb(250,93,26)" fg:x="97010" fg:w="14"/><text x="78.8910%" y="959.50"></text></g><g><title>Append (109 samples, 0.09%)</title><rect x="78.5648%" y="1109" width="0.0884%" height="15" fill="rgb(211,9,40)" fg:x="96916" fg:w="109"/><text x="78.8148%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (97 samples, 0.08%)</title><rect x="78.5746%" y="1093" width="0.0786%" height="15" fill="rgb(242,57,20)" fg:x="96928" fg:w="97"/><text x="78.8246%" y="1103.50"></text></g><g><title>leveldb::TableBuilder::Finish (193 samples, 0.16%)</title><rect x="78.5081%" y="1141" width="0.1565%" height="15" fill="rgb(248,85,48)" fg:x="96846" fg:w="193"/><text x="78.7581%" y="1151.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (123 samples, 0.10%)</title><rect x="78.5648%" y="1125" width="0.0997%" height="15" fill="rgb(212,117,2)" fg:x="96916" fg:w="123"/><text x="78.8148%" y="1135.50"></text></g><g><title>leveldb::crc32c::Value (14 samples, 0.01%)</title><rect x="78.6532%" y="1109" width="0.0113%" height="15" fill="rgb(243,19,3)" fg:x="97025" fg:w="14"/><text x="78.9032%" y="1119.50"></text></g><g><title>crc32c::ExtendSse42 (14 samples, 0.01%)</title><rect x="78.6532%" y="1093" width="0.0113%" height="15" fill="rgb(232,217,24)" fg:x="97025" fg:w="14"/><text x="78.9032%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewRandomAccessFile (19 samples, 0.02%)</title><rect x="78.6645%" y="1109" width="0.0154%" height="15" fill="rgb(224,175,40)" fg:x="97039" fg:w="19"/><text x="78.9145%" y="1119.50"></text></g><g><title>_mm_crc32_u64 (17 samples, 0.01%)</title><rect x="78.6913%" y="1013" width="0.0138%" height="15" fill="rgb(212,162,32)" fg:x="97072" fg:w="17"/><text x="78.9413%" y="1023.50"></text></g><g><title>leveldb::Table::Open (33 samples, 0.03%)</title><rect x="78.6799%" y="1109" width="0.0268%" height="15" fill="rgb(215,9,4)" fg:x="97058" fg:w="33"/><text x="78.9299%" y="1119.50"></text></g><g><title>leveldb::Table::ReadMeta (20 samples, 0.02%)</title><rect x="78.6905%" y="1093" width="0.0162%" height="15" fill="rgb(242,42,7)" fg:x="97071" fg:w="20"/><text x="78.9405%" y="1103.50"></text></g><g><title>leveldb::Table::ReadFilter (20 samples, 0.02%)</title><rect x="78.6905%" y="1077" width="0.0162%" height="15" fill="rgb(242,184,45)" fg:x="97071" fg:w="20"/><text x="78.9405%" y="1087.50"></text></g><g><title>leveldb::ReadBlock (20 samples, 0.02%)</title><rect x="78.6905%" y="1061" width="0.0162%" height="15" fill="rgb(228,111,51)" fg:x="97071" fg:w="20"/><text x="78.9405%" y="1071.50"></text></g><g><title>leveldb::crc32c::Value (20 samples, 0.02%)</title><rect x="78.6905%" y="1045" width="0.0162%" height="15" fill="rgb(236,147,17)" fg:x="97071" fg:w="20"/><text x="78.9405%" y="1055.50"></text></g><g><title>crc32c::ExtendSse42 (20 samples, 0.02%)</title><rect x="78.6905%" y="1029" width="0.0162%" height="15" fill="rgb(210,75,22)" fg:x="97071" fg:w="20"/><text x="78.9405%" y="1039.50"></text></g><g><title>leveldb::TableCache::FindTable (53 samples, 0.04%)</title><rect x="78.6645%" y="1125" width="0.0430%" height="15" fill="rgb(217,159,45)" fg:x="97039" fg:w="53"/><text x="78.9145%" y="1135.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (2,249 samples, 1.82%)</title><rect x="76.8852%" y="1157" width="1.8231%" height="15" fill="rgb(245,165,53)" fg:x="94844" fg:w="2249"/><text x="77.1352%" y="1167.50">l..</text></g><g><title>leveldb::TableCache::NewIterator (54 samples, 0.04%)</title><rect x="78.6645%" y="1141" width="0.0438%" height="15" fill="rgb(251,190,50)" fg:x="97039" fg:w="54"/><text x="78.9145%" y="1151.50"></text></g><g><title>leveldb::DBImpl::OpenCompactionOutputFile (13 samples, 0.01%)</title><rect x="78.7124%" y="1157" width="0.0105%" height="15" fill="rgb(208,203,29)" fg:x="97098" fg:w="13"/><text x="78.9624%" y="1167.50"></text></g><g><title>NewWritableFile (13 samples, 0.01%)</title><rect x="78.7124%" y="1141" width="0.0105%" height="15" fill="rgb(207,209,35)" fg:x="97098" fg:w="13"/><text x="78.9624%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (13 samples, 0.01%)</title><rect x="78.7124%" y="1125" width="0.0105%" height="15" fill="rgb(230,144,49)" fg:x="97098" fg:w="13"/><text x="78.9624%" y="1135.50"></text></g><g><title>__GI___libc_open (13 samples, 0.01%)</title><rect x="78.7124%" y="1109" width="0.0105%" height="15" fill="rgb(229,31,6)" fg:x="97098" fg:w="13"/><text x="78.9624%" y="1119.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="78.7124%" y="1093" width="0.0105%" height="15" fill="rgb(251,129,24)" fg:x="97098" fg:w="13"/><text x="78.9624%" y="1103.50"></text></g><g><title>leveldb::Hash (22 samples, 0.02%)</title><rect x="78.7310%" y="1157" width="0.0178%" height="15" fill="rgb(235,105,15)" fg:x="97121" fg:w="22"/><text x="78.9810%" y="1167.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (97 samples, 0.08%)</title><rect x="78.7537%" y="1157" width="0.0786%" height="15" fill="rgb(216,52,43)" fg:x="97149" fg:w="97"/><text x="79.0037%" y="1167.50"></text></g><g><title>__memmove_avx512_unaligned_erms (65 samples, 0.05%)</title><rect x="78.8559%" y="1141" width="0.0527%" height="15" fill="rgb(238,144,41)" fg:x="97275" fg:w="65"/><text x="79.1059%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (265 samples, 0.21%)</title><rect x="78.9085%" y="1141" width="0.2148%" height="15" fill="rgb(243,63,9)" fg:x="97340" fg:w="265"/><text x="79.1585%" y="1151.50"></text></g><g><title>leveldb::Slice::compare (95 samples, 0.08%)</title><rect x="79.0464%" y="1125" width="0.0770%" height="15" fill="rgb(246,208,1)" fg:x="97510" fg:w="95"/><text x="79.2964%" y="1135.50"></text></g><g><title>Valid (15 samples, 0.01%)</title><rect x="79.1615%" y="1125" width="0.0122%" height="15" fill="rgb(233,182,18)" fg:x="97652" fg:w="15"/><text x="79.4115%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::value (154 samples, 0.12%)</title><rect x="79.1250%" y="1141" width="0.1248%" height="15" fill="rgb(242,224,8)" fg:x="97607" fg:w="154"/><text x="79.3750%" y="1151.50"></text></g><g><title>leveldb::IteratorWrapper::value (89 samples, 0.07%)</title><rect x="79.1777%" y="1125" width="0.0721%" height="15" fill="rgb(243,54,37)" fg:x="97672" fg:w="89"/><text x="79.4277%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (190 samples, 0.15%)</title><rect x="79.2498%" y="1141" width="0.1540%" height="15" fill="rgb(233,192,12)" fg:x="97761" fg:w="190"/><text x="79.4998%" y="1151.50"></text></g><g><title>leveldb::IteratorWrapper::value (61 samples, 0.05%)</title><rect x="79.3544%" y="1125" width="0.0494%" height="15" fill="rgb(251,192,53)" fg:x="97890" fg:w="61"/><text x="79.6044%" y="1135.50"></text></g><g><title>value (28 samples, 0.02%)</title><rect x="79.3812%" y="1109" width="0.0227%" height="15" fill="rgb(246,141,26)" fg:x="97923" fg:w="28"/><text x="79.6312%" y="1119.50"></text></g><g><title>leveldb::IteratorWrapper::value (21 samples, 0.02%)</title><rect x="79.3868%" y="1093" width="0.0170%" height="15" fill="rgb(239,195,19)" fg:x="97930" fg:w="21"/><text x="79.6368%" y="1103.50"></text></g><g><title>leveldb::Block::Iter::value (104 samples, 0.08%)</title><rect x="79.4038%" y="1141" width="0.0843%" height="15" fill="rgb(241,16,39)" fg:x="97951" fg:w="104"/><text x="79.6538%" y="1151.50"></text></g><g><title>[[igc]] (13 samples, 0.01%)</title><rect x="80.4107%" y="1029" width="0.0105%" height="15" fill="rgb(223,13,53)" fg:x="99193" fg:w="13"/><text x="80.6607%" y="1039.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="80.4099%" y="1125" width="0.0138%" height="15" fill="rgb(214,227,0)" fg:x="99192" fg:w="17"/><text x="80.6599%" y="1135.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="80.4099%" y="1109" width="0.0138%" height="15" fill="rgb(228,103,26)" fg:x="99192" fg:w="17"/><text x="80.6599%" y="1119.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="80.4099%" y="1093" width="0.0138%" height="15" fill="rgb(254,177,53)" fg:x="99192" fg:w="17"/><text x="80.6599%" y="1103.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="80.4099%" y="1077" width="0.0138%" height="15" fill="rgb(208,201,34)" fg:x="99192" fg:w="17"/><text x="80.6599%" y="1087.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="80.4107%" y="1061" width="0.0130%" height="15" fill="rgb(212,39,5)" fg:x="99193" fg:w="16"/><text x="80.6607%" y="1071.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="80.4107%" y="1045" width="0.0130%" height="15" fill="rgb(246,117,3)" fg:x="99193" fg:w="16"/><text x="80.6607%" y="1055.50"></text></g><g><title>__memmove_avx512_unaligned_erms (19 samples, 0.02%)</title><rect x="80.4253%" y="1125" width="0.0154%" height="15" fill="rgb(244,118,39)" fg:x="99211" fg:w="19"/><text x="80.6753%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (66 samples, 0.05%)</title><rect x="80.4407%" y="1125" width="0.0535%" height="15" fill="rgb(241,64,10)" fg:x="99230" fg:w="66"/><text x="80.6907%" y="1135.50"></text></g><g><title>leveldb::Slice::compare (24 samples, 0.02%)</title><rect x="80.4747%" y="1109" width="0.0195%" height="15" fill="rgb(229,39,44)" fg:x="99272" fg:w="24"/><text x="80.7247%" y="1119.50"></text></g><g><title>leveldb::Slice::Slice (20 samples, 0.02%)</title><rect x="80.6806%" y="1109" width="0.0162%" height="15" fill="rgb(230,226,3)" fg:x="99526" fg:w="20"/><text x="80.9306%" y="1119.50"></text></g><g><title>leveldb::BlockBuilder::Add (253 samples, 0.21%)</title><rect x="80.4942%" y="1125" width="0.2051%" height="15" fill="rgb(222,13,42)" fg:x="99296" fg:w="253"/><text x="80.7442%" y="1135.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (15 samples, 0.01%)</title><rect x="80.7017%" y="1125" width="0.0122%" height="15" fill="rgb(247,180,54)" fg:x="99552" fg:w="15"/><text x="80.9517%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (14 samples, 0.01%)</title><rect x="80.7892%" y="1077" width="0.0113%" height="15" fill="rgb(205,96,16)" fg:x="99660" fg:w="14"/><text x="81.0392%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (28 samples, 0.02%)</title><rect x="80.7852%" y="1093" width="0.0227%" height="15" fill="rgb(205,100,21)" fg:x="99655" fg:w="28"/><text x="81.0352%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (32 samples, 0.03%)</title><rect x="80.7852%" y="1109" width="0.0259%" height="15" fill="rgb(248,51,4)" fg:x="99655" fg:w="32"/><text x="81.0352%" y="1119.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (121 samples, 0.10%)</title><rect x="80.7155%" y="1125" width="0.0981%" height="15" fill="rgb(217,197,30)" fg:x="99569" fg:w="121"/><text x="80.9655%" y="1135.50"></text></g><g><title>__memcmp_evex_movbe (21 samples, 0.02%)</title><rect x="80.8963%" y="1093" width="0.0170%" height="15" fill="rgb(240,179,40)" fg:x="99792" fg:w="21"/><text x="81.1463%" y="1103.50"></text></g><g><title>[bitcoind-head] (39 samples, 0.03%)</title><rect x="80.8963%" y="1109" width="0.0316%" height="15" fill="rgb(212,185,35)" fg:x="99792" fg:w="39"/><text x="81.1463%" y="1119.50"></text></g><g><title>__memcmp_evex_movbe (16 samples, 0.01%)</title><rect x="81.1930%" y="1077" width="0.0130%" height="15" fill="rgb(251,222,31)" fg:x="100158" fg:w="16"/><text x="81.4430%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (344 samples, 0.28%)</title><rect x="80.9392%" y="1109" width="0.2789%" height="15" fill="rgb(208,140,36)" fg:x="99845" fg:w="344"/><text x="81.1892%" y="1119.50"></text></g><g><title>leveldb::Slice::compare (117 samples, 0.09%)</title><rect x="81.1232%" y="1093" width="0.0948%" height="15" fill="rgb(220,148,1)" fg:x="100072" fg:w="117"/><text x="81.3732%" y="1103.50"></text></g><g><title>leveldb::ExtractUserKey (21 samples, 0.02%)</title><rect x="81.2229%" y="1109" width="0.0170%" height="15" fill="rgb(254,4,28)" fg:x="100195" fg:w="21"/><text x="81.4729%" y="1119.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (49 samples, 0.04%)</title><rect x="81.2400%" y="1109" width="0.0397%" height="15" fill="rgb(222,185,44)" fg:x="100216" fg:w="49"/><text x="81.4900%" y="1119.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (299 samples, 0.24%)</title><rect x="81.2797%" y="1109" width="0.2424%" height="15" fill="rgb(215,74,39)" fg:x="100265" fg:w="299"/><text x="81.5297%" y="1119.50"></text></g><g><title>leveldb::ExtractUserKey (46 samples, 0.04%)</title><rect x="81.4848%" y="1093" width="0.0373%" height="15" fill="rgb(247,86,4)" fg:x="100518" fg:w="46"/><text x="81.7348%" y="1103.50"></text></g><g><title>leveldb::TableBuilder::Add (78 samples, 0.06%)</title><rect x="81.5253%" y="1109" width="0.0632%" height="15" fill="rgb(231,105,32)" fg:x="100568" fg:w="78"/><text x="81.7753%" y="1119.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (958 samples, 0.78%)</title><rect x="80.8136%" y="1125" width="0.7766%" height="15" fill="rgb(222,65,35)" fg:x="99690" fg:w="958"/><text x="81.0636%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (33 samples, 0.03%)</title><rect x="81.5975%" y="1109" width="0.0268%" height="15" fill="rgb(218,145,35)" fg:x="100657" fg:w="33"/><text x="81.8475%" y="1119.50"></text></g><g><title>leveldb::BlockBuilder::Add (97 samples, 0.08%)</title><rect x="81.6275%" y="1109" width="0.0786%" height="15" fill="rgb(208,7,15)" fg:x="100694" fg:w="97"/><text x="81.8775%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (21 samples, 0.02%)</title><rect x="81.7839%" y="1061" width="0.0170%" height="15" fill="rgb(209,83,13)" fg:x="100887" fg:w="21"/><text x="82.0339%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (62 samples, 0.05%)</title><rect x="81.7669%" y="1077" width="0.0503%" height="15" fill="rgb(218,3,10)" fg:x="100866" fg:w="62"/><text x="82.0169%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (76 samples, 0.06%)</title><rect x="81.7669%" y="1093" width="0.0616%" height="15" fill="rgb(211,219,4)" fg:x="100866" fg:w="76"/><text x="82.0169%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (14 samples, 0.01%)</title><rect x="81.8172%" y="1077" width="0.0113%" height="15" fill="rgb(228,194,12)" fg:x="100928" fg:w="14"/><text x="82.0672%" y="1087.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (165 samples, 0.13%)</title><rect x="81.7093%" y="1109" width="0.1338%" height="15" fill="rgb(210,175,7)" fg:x="100795" fg:w="165"/><text x="81.9593%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (16 samples, 0.01%)</title><rect x="81.8301%" y="1093" width="0.0130%" height="15" fill="rgb(243,132,6)" fg:x="100944" fg:w="16"/><text x="82.0801%" y="1103.50"></text></g><g><title>unsigned long&amp; std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::emplace_back&lt;unsigned long&gt; (16 samples, 0.01%)</title><rect x="81.8301%" y="1077" width="0.0130%" height="15" fill="rgb(207,72,18)" fg:x="100944" fg:w="16"/><text x="82.0801%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (14 samples, 0.01%)</title><rect x="81.9071%" y="1061" width="0.0113%" height="15" fill="rgb(236,1,18)" fg:x="101039" fg:w="14"/><text x="82.1571%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (53 samples, 0.04%)</title><rect x="81.9185%" y="1061" width="0.0430%" height="15" fill="rgb(227,0,18)" fg:x="101053" fg:w="53"/><text x="82.1685%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (50 samples, 0.04%)</title><rect x="81.9209%" y="1045" width="0.0405%" height="15" fill="rgb(247,37,5)" fg:x="101056" fg:w="50"/><text x="82.1709%" y="1055.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (46 samples, 0.04%)</title><rect x="81.9242%" y="1029" width="0.0373%" height="15" fill="rgb(237,179,24)" fg:x="101060" fg:w="46"/><text x="82.1742%" y="1039.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (107 samples, 0.09%)</title><rect x="81.8869%" y="1077" width="0.0867%" height="15" fill="rgb(226,53,20)" fg:x="101014" fg:w="107"/><text x="82.1369%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (15 samples, 0.01%)</title><rect x="81.9614%" y="1061" width="0.0122%" height="15" fill="rgb(247,75,7)" fg:x="101106" fg:w="15"/><text x="82.2114%" y="1071.50"></text></g><g><title>leveldb::TableBuilder::Add (156 samples, 0.13%)</title><rect x="81.8496%" y="1109" width="0.1265%" height="15" fill="rgb(233,96,12)" fg:x="100968" fg:w="156"/><text x="82.0996%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (110 samples, 0.09%)</title><rect x="81.8869%" y="1093" width="0.0892%" height="15" fill="rgb(224,125,0)" fg:x="101014" fg:w="110"/><text x="82.1369%" y="1103.50"></text></g><g><title>leveldb::PutVarint32 (484 samples, 0.39%)</title><rect x="81.5902%" y="1125" width="0.3924%" height="15" fill="rgb(224,92,25)" fg:x="100648" fg:w="484"/><text x="81.8402%" y="1135.50"></text></g><g><title>leveldb::Slice::data (21 samples, 0.02%)</title><rect x="81.9971%" y="1125" width="0.0170%" height="15" fill="rgb(224,42,24)" fg:x="101150" fg:w="21"/><text x="82.2471%" y="1135.50"></text></g><g><title>leveldb::Slice::operator[] (616 samples, 0.50%)</title><rect x="82.0141%" y="1125" width="0.4994%" height="15" fill="rgb(234,132,49)" fg:x="101171" fg:w="616"/><text x="82.2641%" y="1135.50"></text></g><g><title>leveldb::Slice::size (60 samples, 0.05%)</title><rect x="82.5135%" y="1125" width="0.0486%" height="15" fill="rgb(248,100,35)" fg:x="101787" fg:w="60"/><text x="82.7635%" y="1135.50"></text></g><g><title>leveldb::Slice::Slice (27 samples, 0.02%)</title><rect x="82.7389%" y="1109" width="0.0219%" height="15" fill="rgb(239,94,40)" fg:x="102065" fg:w="27"/><text x="82.9889%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::ok (68 samples, 0.06%)</title><rect x="82.7656%" y="1109" width="0.0551%" height="15" fill="rgb(235,139,28)" fg:x="102098" fg:w="68"/><text x="83.0156%" y="1119.50"></text></g><g><title>leveldb::Status::~Status (14 samples, 0.01%)</title><rect x="82.8094%" y="1093" width="0.0113%" height="15" fill="rgb(217,144,7)" fg:x="102152" fg:w="14"/><text x="83.0594%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (13 samples, 0.01%)</title><rect x="82.8297%" y="1077" width="0.0105%" height="15" fill="rgb(227,55,4)" fg:x="102177" fg:w="13"/><text x="83.0797%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (21 samples, 0.02%)</title><rect x="82.8426%" y="1077" width="0.0170%" height="15" fill="rgb(252,82,54)" fg:x="102193" fg:w="21"/><text x="83.0926%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (23 samples, 0.02%)</title><rect x="82.8596%" y="1077" width="0.0186%" height="15" fill="rgb(245,172,4)" fg:x="102214" fg:w="23"/><text x="83.1096%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (22 samples, 0.02%)</title><rect x="82.8605%" y="1061" width="0.0178%" height="15" fill="rgb(207,26,27)" fg:x="102215" fg:w="22"/><text x="83.1105%" y="1071.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (21 samples, 0.02%)</title><rect x="82.8613%" y="1045" width="0.0170%" height="15" fill="rgb(252,98,18)" fg:x="102216" fg:w="21"/><text x="83.1113%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (86 samples, 0.07%)</title><rect x="82.8207%" y="1093" width="0.0697%" height="15" fill="rgb(244,8,26)" fg:x="102166" fg:w="86"/><text x="83.0707%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (15 samples, 0.01%)</title><rect x="82.8783%" y="1077" width="0.0122%" height="15" fill="rgb(237,173,45)" fg:x="102237" fg:w="15"/><text x="83.1283%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (88 samples, 0.07%)</title><rect x="82.8207%" y="1109" width="0.0713%" height="15" fill="rgb(208,213,49)" fg:x="102166" fg:w="88"/><text x="83.0707%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::Add (408 samples, 0.33%)</title><rect x="82.5621%" y="1125" width="0.3307%" height="15" fill="rgb(212,122,37)" fg:x="101847" fg:w="408"/><text x="82.8121%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::status (59 samples, 0.05%)</title><rect x="82.8929%" y="1125" width="0.0478%" height="15" fill="rgb(213,80,17)" fg:x="102255" fg:w="59"/><text x="83.1429%" y="1135.50"></text></g><g><title>leveldb::Status::Status (19 samples, 0.02%)</title><rect x="82.9253%" y="1109" width="0.0154%" height="15" fill="rgb(206,210,43)" fg:x="102295" fg:w="19"/><text x="83.1753%" y="1119.50"></text></g><g><title>__memcmp_evex_movbe (18 samples, 0.01%)</title><rect x="82.9407%" y="1109" width="0.0146%" height="15" fill="rgb(229,214,3)" fg:x="102314" fg:w="18"/><text x="83.1907%" y="1119.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="82.9407%" y="1093" width="0.0146%" height="15" fill="rgb(235,213,29)" fg:x="102314" fg:w="18"/><text x="83.1907%" y="1103.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="82.9415%" y="1077" width="0.0138%" height="15" fill="rgb(248,135,26)" fg:x="102315" fg:w="17"/><text x="83.1915%" y="1087.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="82.9415%" y="1061" width="0.0138%" height="15" fill="rgb(242,188,12)" fg:x="102315" fg:w="17"/><text x="83.1915%" y="1071.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="82.9423%" y="1045" width="0.0130%" height="15" fill="rgb(245,38,12)" fg:x="102316" fg:w="16"/><text x="83.1923%" y="1055.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="82.9423%" y="1029" width="0.0130%" height="15" fill="rgb(218,42,13)" fg:x="102316" fg:w="16"/><text x="83.1923%" y="1039.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="82.9423%" y="1013" width="0.0130%" height="15" fill="rgb(238,132,49)" fg:x="102316" fg:w="16"/><text x="83.1923%" y="1023.50"></text></g><g><title>__memmove_avx512_unaligned_erms (576 samples, 0.47%)</title><rect x="82.9553%" y="1109" width="0.4669%" height="15" fill="rgb(209,196,19)" fg:x="102332" fg:w="576"/><text x="83.2053%" y="1119.50"></text></g><g><title>leveldb::EncodeVarint32 (30 samples, 0.02%)</title><rect x="83.4222%" y="1109" width="0.0243%" height="15" fill="rgb(244,131,22)" fg:x="102908" fg:w="30"/><text x="83.6722%" y="1119.50"></text></g><g><title>leveldb::PutVarint32 (27 samples, 0.02%)</title><rect x="83.4466%" y="1109" width="0.0219%" height="15" fill="rgb(223,18,34)" fg:x="102938" fg:w="27"/><text x="83.6966%" y="1119.50"></text></g><g><title>leveldb::operator== (729 samples, 0.59%)</title><rect x="82.9407%" y="1125" width="0.5910%" height="15" fill="rgb(252,124,54)" fg:x="102314" fg:w="729"/><text x="83.1907%" y="1135.50"></text></g><g><title>memcpy@plt (78 samples, 0.06%)</title><rect x="83.4684%" y="1109" width="0.0632%" height="15" fill="rgb(229,106,42)" fg:x="102965" fg:w="78"/><text x="83.7184%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (28 samples, 0.02%)</title><rect x="83.6638%" y="1077" width="0.0227%" height="15" fill="rgb(221,129,1)" fg:x="103206" fg:w="28"/><text x="83.9138%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (34 samples, 0.03%)</title><rect x="83.6865%" y="1077" width="0.0276%" height="15" fill="rgb(229,74,15)" fg:x="103234" fg:w="34"/><text x="83.9365%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (105 samples, 0.09%)</title><rect x="83.6638%" y="1093" width="0.0851%" height="15" fill="rgb(210,206,50)" fg:x="103206" fg:w="105"/><text x="83.9138%" y="1103.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (43 samples, 0.03%)</title><rect x="83.7141%" y="1077" width="0.0349%" height="15" fill="rgb(251,114,31)" fg:x="103268" fg:w="43"/><text x="83.9641%" y="1087.50"></text></g><g><title>__memcmp_evex_movbe (69 samples, 0.06%)</title><rect x="83.9483%" y="1045" width="0.0559%" height="15" fill="rgb(215,225,28)" fg:x="103557" fg:w="69"/><text x="84.1983%" y="1055.50"></text></g><g><title>__memmove_avx512_unaligned_erms (19 samples, 0.02%)</title><rect x="84.0043%" y="1045" width="0.0154%" height="15" fill="rgb(237,109,14)" fg:x="103626" fg:w="19"/><text x="84.2543%" y="1055.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (13 samples, 0.01%)</title><rect x="84.0197%" y="1045" width="0.0105%" height="15" fill="rgb(230,13,37)" fg:x="103645" fg:w="13"/><text x="84.2697%" y="1055.50"></text></g><g><title>leveldb::PutVarint32 (14 samples, 0.01%)</title><rect x="84.0383%" y="1045" width="0.0113%" height="15" fill="rgb(231,40,28)" fg:x="103668" fg:w="14"/><text x="84.2883%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (377 samples, 0.31%)</title><rect x="83.7489%" y="1093" width="0.3056%" height="15" fill="rgb(231,202,18)" fg:x="103311" fg:w="377"/><text x="83.9989%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (351 samples, 0.28%)</title><rect x="83.7700%" y="1077" width="0.2845%" height="15" fill="rgb(225,33,18)" fg:x="103337" fg:w="351"/><text x="84.0200%" y="1087.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (289 samples, 0.23%)</title><rect x="83.8203%" y="1061" width="0.2343%" height="15" fill="rgb(223,64,47)" fg:x="103399" fg:w="289"/><text x="84.0703%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (33 samples, 0.03%)</title><rect x="84.1113%" y="1061" width="0.0268%" height="15" fill="rgb(234,114,13)" fg:x="103758" fg:w="33"/><text x="84.3613%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (772 samples, 0.63%)</title><rect x="83.5333%" y="1109" width="0.6258%" height="15" fill="rgb(248,56,40)" fg:x="103045" fg:w="772"/><text x="83.7833%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (129 samples, 0.10%)</title><rect x="84.0545%" y="1093" width="0.1046%" height="15" fill="rgb(221,194,21)" fg:x="103688" fg:w="129"/><text x="84.3045%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (99 samples, 0.08%)</title><rect x="84.0789%" y="1077" width="0.0803%" height="15" fill="rgb(242,108,46)" fg:x="103718" fg:w="99"/><text x="84.3289%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (26 samples, 0.02%)</title><rect x="84.1380%" y="1061" width="0.0211%" height="15" fill="rgb(220,106,10)" fg:x="103791" fg:w="26"/><text x="84.3880%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (879 samples, 0.71%)</title><rect x="83.5333%" y="1125" width="0.7126%" height="15" fill="rgb(211,88,4)" fg:x="103045" fg:w="879"/><text x="83.7833%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (107 samples, 0.09%)</title><rect x="84.1591%" y="1109" width="0.0867%" height="15" fill="rgb(214,95,34)" fg:x="103817" fg:w="107"/><text x="84.4091%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (20 samples, 0.02%)</title><rect x="84.2296%" y="1093" width="0.0162%" height="15" fill="rgb(250,160,33)" fg:x="103904" fg:w="20"/><text x="84.4796%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (76 samples, 0.06%)</title><rect x="84.2694%" y="1093" width="0.0616%" height="15" fill="rgb(225,29,10)" fg:x="103953" fg:w="76"/><text x="84.5194%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (58 samples, 0.05%)</title><rect x="84.2840%" y="1077" width="0.0470%" height="15" fill="rgb(224,28,30)" fg:x="103971" fg:w="58"/><text x="84.5340%" y="1087.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (46 samples, 0.04%)</title><rect x="84.2937%" y="1061" width="0.0373%" height="15" fill="rgb(231,77,4)" fg:x="103983" fg:w="46"/><text x="84.5437%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (120 samples, 0.10%)</title><rect x="84.2459%" y="1125" width="0.0973%" height="15" fill="rgb(209,63,21)" fg:x="103924" fg:w="120"/><text x="84.4959%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (120 samples, 0.10%)</title><rect x="84.2459%" y="1109" width="0.0973%" height="15" fill="rgb(226,22,11)" fg:x="103924" fg:w="120"/><text x="84.4959%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (15 samples, 0.01%)</title><rect x="84.3310%" y="1093" width="0.0122%" height="15" fill="rgb(216,82,30)" fg:x="104029" fg:w="15"/><text x="84.5810%" y="1103.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::push_back (25 samples, 0.02%)</title><rect x="84.3431%" y="1125" width="0.0203%" height="15" fill="rgb(246,227,38)" fg:x="104044" fg:w="25"/><text x="84.5931%" y="1135.50"></text></g><g><title>unsigned int&amp; std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::emplace_back&lt;unsigned int&gt; (25 samples, 0.02%)</title><rect x="84.3431%" y="1109" width="0.0203%" height="15" fill="rgb(251,203,53)" fg:x="104044" fg:w="25"/><text x="84.5931%" y="1119.50"></text></g><g><title>leveldb::BlockBuilder::Add (6,049 samples, 4.90%)</title><rect x="79.4882%" y="1141" width="4.9036%" height="15" fill="rgb(254,101,1)" fg:x="98055" fg:w="6049"/><text x="79.7382%" y="1151.50">leveld..</text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (35 samples, 0.03%)</title><rect x="84.3634%" y="1125" width="0.0284%" height="15" fill="rgb(241,180,5)" fg:x="104069" fg:w="35"/><text x="84.6134%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (15 samples, 0.01%)</title><rect x="84.4023%" y="1125" width="0.0122%" height="15" fill="rgb(218,168,4)" fg:x="104117" fg:w="15"/><text x="84.6523%" y="1135.50"></text></g><g><title>leveldb::PutVarint64 (17 samples, 0.01%)</title><rect x="84.4218%" y="1125" width="0.0138%" height="15" fill="rgb(224,223,32)" fg:x="104141" fg:w="17"/><text x="84.6718%" y="1135.50"></text></g><g><title>leveldb::BlockHandle::EncodeTo (54 samples, 0.04%)</title><rect x="84.3942%" y="1141" width="0.0438%" height="15" fill="rgb(236,106,22)" fg:x="104107" fg:w="54"/><text x="84.6442%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (25 samples, 0.02%)</title><rect x="84.6577%" y="1077" width="0.0203%" height="15" fill="rgb(206,121,5)" fg:x="104432" fg:w="25"/><text x="84.9077%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (47 samples, 0.04%)</title><rect x="84.6779%" y="1061" width="0.0381%" height="15" fill="rgb(233,87,28)" fg:x="104457" fg:w="47"/><text x="84.9279%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (14 samples, 0.01%)</title><rect x="84.7160%" y="1061" width="0.0113%" height="15" fill="rgb(236,137,17)" fg:x="104504" fg:w="14"/><text x="84.9660%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (93 samples, 0.08%)</title><rect x="84.6779%" y="1077" width="0.0754%" height="15" fill="rgb(209,183,38)" fg:x="104457" fg:w="93"/><text x="84.9279%" y="1087.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (32 samples, 0.03%)</title><rect x="84.7274%" y="1061" width="0.0259%" height="15" fill="rgb(206,162,44)" fg:x="104518" fg:w="32"/><text x="84.9774%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (42 samples, 0.03%)</title><rect x="84.7533%" y="1077" width="0.0340%" height="15" fill="rgb(237,70,39)" fg:x="104550" fg:w="42"/><text x="85.0033%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (33 samples, 0.03%)</title><rect x="84.7606%" y="1061" width="0.0268%" height="15" fill="rgb(212,176,5)" fg:x="104559" fg:w="33"/><text x="85.0106%" y="1071.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (33 samples, 0.03%)</title><rect x="84.7606%" y="1045" width="0.0268%" height="15" fill="rgb(232,95,16)" fg:x="104559" fg:w="33"/><text x="85.0106%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (183 samples, 0.15%)</title><rect x="84.6471%" y="1093" width="0.1483%" height="15" fill="rgb(219,115,35)" fg:x="104419" fg:w="183"/><text x="84.8971%" y="1103.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (188 samples, 0.15%)</title><rect x="84.6471%" y="1125" width="0.1524%" height="15" fill="rgb(251,67,27)" fg:x="104419" fg:w="188"/><text x="84.8971%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (188 samples, 0.15%)</title><rect x="84.6471%" y="1109" width="0.1524%" height="15" fill="rgb(222,95,40)" fg:x="104419" fg:w="188"/><text x="84.8971%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (17 samples, 0.01%)</title><rect x="84.8157%" y="1093" width="0.0138%" height="15" fill="rgb(250,35,16)" fg:x="104627" fg:w="17"/><text x="85.0657%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (21 samples, 0.02%)</title><rect x="84.8295%" y="1093" width="0.0170%" height="15" fill="rgb(224,86,44)" fg:x="104644" fg:w="21"/><text x="85.0795%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (17 samples, 0.01%)</title><rect x="84.8328%" y="1077" width="0.0138%" height="15" fill="rgb(237,53,53)" fg:x="104648" fg:w="17"/><text x="85.0828%" y="1087.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (17 samples, 0.01%)</title><rect x="84.8328%" y="1061" width="0.0138%" height="15" fill="rgb(208,171,33)" fg:x="104648" fg:w="17"/><text x="85.0828%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (65 samples, 0.05%)</title><rect x="84.8044%" y="1109" width="0.0527%" height="15" fill="rgb(222,64,27)" fg:x="104613" fg:w="65"/><text x="85.0544%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (13 samples, 0.01%)</title><rect x="84.8465%" y="1093" width="0.0105%" height="15" fill="rgb(221,121,35)" fg:x="104665" fg:w="13"/><text x="85.0965%" y="1103.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (515 samples, 0.42%)</title><rect x="84.4412%" y="1141" width="0.4175%" height="15" fill="rgb(228,137,42)" fg:x="104165" fg:w="515"/><text x="84.6912%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (67 samples, 0.05%)</title><rect x="84.8044%" y="1125" width="0.0543%" height="15" fill="rgb(227,54,21)" fg:x="104613" fg:w="67"/><text x="85.0544%" y="1135.50"></text></g><g><title>leveldb::EncodeVarint32 (391 samples, 0.32%)</title><rect x="84.8587%" y="1141" width="0.3170%" height="15" fill="rgb(240,168,33)" fg:x="104680" fg:w="391"/><text x="85.1087%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (14 samples, 0.01%)</title><rect x="85.2584%" y="1093" width="0.0113%" height="15" fill="rgb(243,159,6)" fg:x="105173" fg:w="14"/><text x="85.5084%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (29 samples, 0.02%)</title><rect x="85.2908%" y="1045" width="0.0235%" height="15" fill="rgb(205,211,41)" fg:x="105213" fg:w="29"/><text x="85.5408%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (76 samples, 0.06%)</title><rect x="85.2697%" y="1093" width="0.0616%" height="15" fill="rgb(253,30,1)" fg:x="105187" fg:w="76"/><text x="85.5197%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (70 samples, 0.06%)</title><rect x="85.2746%" y="1077" width="0.0567%" height="15" fill="rgb(226,80,18)" fg:x="105193" fg:w="70"/><text x="85.5246%" y="1087.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (70 samples, 0.06%)</title><rect x="85.2746%" y="1061" width="0.0567%" height="15" fill="rgb(253,156,46)" fg:x="105193" fg:w="70"/><text x="85.5246%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (130 samples, 0.11%)</title><rect x="85.2397%" y="1109" width="0.1054%" height="15" fill="rgb(248,87,27)" fg:x="105150" fg:w="130"/><text x="85.4897%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (17 samples, 0.01%)</title><rect x="85.3313%" y="1093" width="0.0138%" height="15" fill="rgb(227,122,2)" fg:x="105263" fg:w="17"/><text x="85.5813%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (13 samples, 0.01%)</title><rect x="85.3346%" y="1077" width="0.0105%" height="15" fill="rgb(229,94,39)" fg:x="105267" fg:w="13"/><text x="85.5846%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (142 samples, 0.12%)</title><rect x="85.2397%" y="1125" width="0.1151%" height="15" fill="rgb(225,173,31)" fg:x="105150" fg:w="142"/><text x="85.4897%" y="1135.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (244 samples, 0.20%)</title><rect x="85.1789%" y="1141" width="0.1978%" height="15" fill="rgb(239,176,30)" fg:x="105075" fg:w="244"/><text x="85.4289%" y="1151.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (23 samples, 0.02%)</title><rect x="85.3581%" y="1125" width="0.0186%" height="15" fill="rgb(212,104,21)" fg:x="105296" fg:w="23"/><text x="85.6081%" y="1135.50"></text></g><g><title>unsigned long&amp; std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::emplace_back&lt;unsigned long&gt; (23 samples, 0.02%)</title><rect x="85.3581%" y="1109" width="0.0186%" height="15" fill="rgb(240,209,40)" fg:x="105296" fg:w="23"/><text x="85.6081%" y="1119.50"></text></g><g><title>BloomHash (171 samples, 0.14%)</title><rect x="86.2092%" y="1093" width="0.1386%" height="15" fill="rgb(234,195,5)" fg:x="106346" fg:w="171"/><text x="86.4592%" y="1103.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="86.3479%" y="1093" width="0.0122%" height="15" fill="rgb(238,213,1)" fg:x="106517" fg:w="15"/><text x="86.5979%" y="1103.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="86.3479%" y="1077" width="0.0122%" height="15" fill="rgb(235,182,54)" fg:x="106517" fg:w="15"/><text x="86.5979%" y="1087.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="86.3479%" y="1061" width="0.0122%" height="15" fill="rgb(229,50,46)" fg:x="106517" fg:w="15"/><text x="86.5979%" y="1071.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="86.3487%" y="1045" width="0.0113%" height="15" fill="rgb(219,145,13)" fg:x="106518" fg:w="14"/><text x="86.5987%" y="1055.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="86.3487%" y="1029" width="0.0113%" height="15" fill="rgb(220,226,10)" fg:x="106518" fg:w="14"/><text x="86.5987%" y="1039.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="86.3487%" y="1013" width="0.0113%" height="15" fill="rgb(248,47,30)" fg:x="106518" fg:w="14"/><text x="86.5987%" y="1023.50"></text></g><g><title>BloomHash (63 samples, 0.05%)</title><rect x="86.7094%" y="1061" width="0.0511%" height="15" fill="rgb(231,209,44)" fg:x="106963" fg:w="63"/><text x="86.9594%" y="1071.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (499 samples, 0.40%)</title><rect x="86.3600%" y="1077" width="0.4045%" height="15" fill="rgb(209,80,30)" fg:x="106532" fg:w="499"/><text x="86.6100%" y="1087.50"></text></g><g><title>leveldb::Hash (345 samples, 0.28%)</title><rect x="86.7645%" y="1077" width="0.2797%" height="15" fill="rgb(232,9,14)" fg:x="107031" fg:w="345"/><text x="87.0145%" y="1087.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="87.0329%" y="1061" width="0.0113%" height="15" fill="rgb(243,91,43)" fg:x="107362" fg:w="14"/><text x="87.2829%" y="1071.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="87.0329%" y="1045" width="0.0113%" height="15" fill="rgb(231,90,52)" fg:x="107362" fg:w="14"/><text x="87.2829%" y="1055.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="87.0329%" y="1029" width="0.0113%" height="15" fill="rgb(253,192,44)" fg:x="107362" fg:w="14"/><text x="87.2829%" y="1039.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="87.0329%" y="1013" width="0.0113%" height="15" fill="rgb(241,66,31)" fg:x="107362" fg:w="14"/><text x="87.2829%" y="1023.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="87.0329%" y="997" width="0.0113%" height="15" fill="rgb(235,81,37)" fg:x="107362" fg:w="14"/><text x="87.2829%" y="1007.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="87.0337%" y="981" width="0.0105%" height="15" fill="rgb(223,221,9)" fg:x="107363" fg:w="13"/><text x="87.2837%" y="991.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (864 samples, 0.70%)</title><rect x="86.3600%" y="1093" width="0.7004%" height="15" fill="rgb(242,180,7)" fg:x="106532" fg:w="864"/><text x="86.6100%" y="1103.50"></text></g><g><title>leveldb::InternalFilterPolicy::CreateFilter (20 samples, 0.02%)</title><rect x="87.0442%" y="1077" width="0.0162%" height="15" fill="rgb(243,78,19)" fg:x="107376" fg:w="20"/><text x="87.2942%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (20 samples, 0.02%)</title><rect x="87.0637%" y="1045" width="0.0162%" height="15" fill="rgb(233,23,17)" fg:x="107400" fg:w="20"/><text x="87.3137%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (20 samples, 0.02%)</title><rect x="87.0637%" y="1029" width="0.0162%" height="15" fill="rgb(252,122,45)" fg:x="107400" fg:w="20"/><text x="87.3137%" y="1039.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (20 samples, 0.02%)</title><rect x="87.0637%" y="1013" width="0.0162%" height="15" fill="rgb(247,108,20)" fg:x="107400" fg:w="20"/><text x="87.3137%" y="1023.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (20 samples, 0.02%)</title><rect x="87.0637%" y="997" width="0.0162%" height="15" fill="rgb(235,84,21)" fg:x="107400" fg:w="20"/><text x="87.3137%" y="1007.50"></text></g><g><title>__memmove_avx512_unaligned_erms (20 samples, 0.02%)</title><rect x="87.0637%" y="981" width="0.0162%" height="15" fill="rgb(247,129,10)" fg:x="107400" fg:w="20"/><text x="87.3137%" y="991.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (2,030 samples, 1.65%)</title><rect x="85.4351%" y="1109" width="1.6456%" height="15" fill="rgb(208,173,14)" fg:x="105391" fg:w="2030"/><text x="85.6851%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (22 samples, 0.02%)</title><rect x="87.0629%" y="1093" width="0.0178%" height="15" fill="rgb(236,31,38)" fg:x="107399" fg:w="22"/><text x="87.3129%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (22 samples, 0.02%)</title><rect x="87.0629%" y="1077" width="0.0178%" height="15" fill="rgb(232,65,17)" fg:x="107399" fg:w="22"/><text x="87.3129%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (22 samples, 0.02%)</title><rect x="87.0629%" y="1061" width="0.0178%" height="15" fill="rgb(224,45,49)" fg:x="107399" fg:w="22"/><text x="87.3129%" y="1071.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (41 samples, 0.03%)</title><rect x="87.0807%" y="1109" width="0.0332%" height="15" fill="rgb(225,2,53)" fg:x="107421" fg:w="41"/><text x="87.3307%" y="1119.50"></text></g><g><title>leveldb::Hash (949 samples, 0.77%)</title><rect x="87.1139%" y="1109" width="0.7693%" height="15" fill="rgb(248,210,53)" fg:x="107462" fg:w="949"/><text x="87.3639%" y="1119.50"></text></g><g><title>leveldb::InternalFilterPolicy::CreateFilter (139 samples, 0.11%)</title><rect x="87.8832%" y="1109" width="0.1127%" height="15" fill="rgb(211,1,30)" fg:x="108411" fg:w="139"/><text x="88.1332%" y="1119.50"></text></g><g><title>leveldb::ExtractUserKey (70 samples, 0.06%)</title><rect x="87.9392%" y="1093" width="0.0567%" height="15" fill="rgb(224,96,15)" fg:x="108480" fg:w="70"/><text x="88.1892%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (39 samples, 0.03%)</title><rect x="87.9959%" y="1093" width="0.0316%" height="15" fill="rgb(252,45,11)" fg:x="108550" fg:w="39"/><text x="88.2459%" y="1103.50"></text></g><g><title>FlushBuffer (38 samples, 0.03%)</title><rect x="87.9967%" y="1077" width="0.0308%" height="15" fill="rgb(220,125,38)" fg:x="108551" fg:w="38"/><text x="88.2467%" y="1087.50"></text></g><g><title>WriteUnbuffered (38 samples, 0.03%)</title><rect x="87.9967%" y="1061" width="0.0308%" height="15" fill="rgb(243,161,33)" fg:x="108551" fg:w="38"/><text x="88.2467%" y="1071.50"></text></g><g><title>leveldb::Status::operator= (26 samples, 0.02%)</title><rect x="88.0389%" y="1077" width="0.0211%" height="15" fill="rgb(248,197,34)" fg:x="108603" fg:w="26"/><text x="88.2889%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (26 samples, 0.02%)</title><rect x="88.0389%" y="1061" width="0.0211%" height="15" fill="rgb(228,165,23)" fg:x="108603" fg:w="26"/><text x="88.2889%" y="1071.50"></text></g><g><title>leveldb::TableBuilder::Flush (34 samples, 0.03%)</title><rect x="88.0373%" y="1093" width="0.0276%" height="15" fill="rgb(236,94,38)" fg:x="108601" fg:w="34"/><text x="88.2873%" y="1103.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (87 samples, 0.07%)</title><rect x="88.0737%" y="1077" width="0.0705%" height="15" fill="rgb(220,13,23)" fg:x="108646" fg:w="87"/><text x="88.3237%" y="1087.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (87 samples, 0.07%)</title><rect x="88.0737%" y="1061" width="0.0705%" height="15" fill="rgb(234,26,39)" fg:x="108646" fg:w="87"/><text x="88.3237%" y="1071.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (87 samples, 0.07%)</title><rect x="88.0737%" y="1045" width="0.0705%" height="15" fill="rgb(205,117,44)" fg:x="108646" fg:w="87"/><text x="88.3237%" y="1055.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (41 samples, 0.03%)</title><rect x="88.1110%" y="1029" width="0.0332%" height="15" fill="rgb(250,42,2)" fg:x="108692" fg:w="41"/><text x="88.3610%" y="1039.50"></text></g><g><title>leveldb::Slice::Slice (41 samples, 0.03%)</title><rect x="88.1110%" y="1013" width="0.0332%" height="15" fill="rgb(223,83,14)" fg:x="108692" fg:w="41"/><text x="88.3610%" y="1023.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (184 samples, 0.15%)</title><rect x="87.9959%" y="1109" width="0.1492%" height="15" fill="rgb(241,147,50)" fg:x="108550" fg:w="184"/><text x="88.2459%" y="1119.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (99 samples, 0.08%)</title><rect x="88.0648%" y="1093" width="0.0803%" height="15" fill="rgb(218,90,6)" fg:x="108635" fg:w="99"/><text x="88.3148%" y="1103.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (3,414 samples, 2.77%)</title><rect x="85.3897%" y="1125" width="2.7676%" height="15" fill="rgb(210,191,5)" fg:x="105335" fg:w="3414"/><text x="85.6397%" y="1135.50">le..</text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (71 samples, 0.06%)</title><rect x="88.1605%" y="1125" width="0.0576%" height="15" fill="rgb(225,139,19)" fg:x="108753" fg:w="71"/><text x="88.4105%" y="1135.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (60 samples, 0.05%)</title><rect x="88.1694%" y="1109" width="0.0486%" height="15" fill="rgb(210,1,33)" fg:x="108764" fg:w="60"/><text x="88.4194%" y="1119.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (60 samples, 0.05%)</title><rect x="88.1694%" y="1093" width="0.0486%" height="15" fill="rgb(213,50,3)" fg:x="108764" fg:w="60"/><text x="88.4194%" y="1103.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (60 samples, 0.05%)</title><rect x="88.1694%" y="1077" width="0.0486%" height="15" fill="rgb(234,227,4)" fg:x="108764" fg:w="60"/><text x="88.4194%" y="1087.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (32 samples, 0.03%)</title><rect x="88.1921%" y="1061" width="0.0259%" height="15" fill="rgb(246,63,5)" fg:x="108792" fg:w="32"/><text x="88.4421%" y="1071.50"></text></g><g><title>leveldb::Slice::Slice (32 samples, 0.03%)</title><rect x="88.1921%" y="1045" width="0.0259%" height="15" fill="rgb(245,136,27)" fg:x="108792" fg:w="32"/><text x="88.4421%" y="1055.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (3,526 samples, 2.86%)</title><rect x="85.3767%" y="1141" width="2.8583%" height="15" fill="rgb(247,199,27)" fg:x="105319" fg:w="3526"/><text x="85.6267%" y="1151.50">le..</text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (21 samples, 0.02%)</title><rect x="88.2180%" y="1125" width="0.0170%" height="15" fill="rgb(252,158,49)" fg:x="108824" fg:w="21"/><text x="88.4680%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (28 samples, 0.02%)</title><rect x="88.4604%" y="1125" width="0.0227%" height="15" fill="rgb(254,73,1)" fg:x="109123" fg:w="28"/><text x="88.7104%" y="1135.50"></text></g><g><title>leveldb::Slice::compare (24 samples, 0.02%)</title><rect x="88.4637%" y="1109" width="0.0195%" height="15" fill="rgb(248,93,19)" fg:x="109127" fg:w="24"/><text x="88.7137%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (16 samples, 0.01%)</title><rect x="88.5504%" y="1061" width="0.0130%" height="15" fill="rgb(206,67,5)" fg:x="109234" fg:w="16"/><text x="88.8004%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (20 samples, 0.02%)</title><rect x="88.5634%" y="1061" width="0.0162%" height="15" fill="rgb(209,210,4)" fg:x="109250" fg:w="20"/><text x="88.8134%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (15 samples, 0.01%)</title><rect x="88.5674%" y="1045" width="0.0122%" height="15" fill="rgb(214,185,36)" fg:x="109255" fg:w="15"/><text x="88.8174%" y="1055.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (15 samples, 0.01%)</title><rect x="88.5674%" y="1029" width="0.0122%" height="15" fill="rgb(233,191,26)" fg:x="109255" fg:w="15"/><text x="88.8174%" y="1039.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (63 samples, 0.05%)</title><rect x="88.5431%" y="1077" width="0.0511%" height="15" fill="rgb(248,94,17)" fg:x="109225" fg:w="63"/><text x="88.7931%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (18 samples, 0.01%)</title><rect x="88.5796%" y="1061" width="0.0146%" height="15" fill="rgb(250,64,4)" fg:x="109270" fg:w="18"/><text x="88.8296%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (15 samples, 0.01%)</title><rect x="88.5820%" y="1045" width="0.0122%" height="15" fill="rgb(218,41,53)" fg:x="109273" fg:w="15"/><text x="88.8320%" y="1055.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (67 samples, 0.05%)</title><rect x="88.5431%" y="1109" width="0.0543%" height="15" fill="rgb(251,176,28)" fg:x="109225" fg:w="67"/><text x="88.7931%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (67 samples, 0.05%)</title><rect x="88.5431%" y="1093" width="0.0543%" height="15" fill="rgb(247,22,9)" fg:x="109225" fg:w="67"/><text x="88.7931%" y="1103.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (149 samples, 0.12%)</title><rect x="88.4912%" y="1125" width="0.1208%" height="15" fill="rgb(218,201,14)" fg:x="109161" fg:w="149"/><text x="88.7412%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (18 samples, 0.01%)</title><rect x="88.5974%" y="1109" width="0.0146%" height="15" fill="rgb(218,94,10)" fg:x="109292" fg:w="18"/><text x="88.8474%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (18 samples, 0.01%)</title><rect x="88.5974%" y="1093" width="0.0146%" height="15" fill="rgb(222,183,52)" fg:x="109292" fg:w="18"/><text x="88.8474%" y="1103.50"></text></g><g><title>leveldb::ExtractUserKey (56 samples, 0.05%)</title><rect x="88.6120%" y="1125" width="0.0454%" height="15" fill="rgb(242,140,25)" fg:x="109310" fg:w="56"/><text x="88.8620%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (48 samples, 0.04%)</title><rect x="88.6598%" y="1125" width="0.0389%" height="15" fill="rgb(235,197,38)" fg:x="109369" fg:w="48"/><text x="88.9098%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (573 samples, 0.46%)</title><rect x="88.2351%" y="1141" width="0.4645%" height="15" fill="rgb(237,136,15)" fg:x="108845" fg:w="573"/><text x="88.4851%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (13 samples, 0.01%)</title><rect x="88.7109%" y="1125" width="0.0105%" height="15" fill="rgb(223,44,49)" fg:x="109432" fg:w="13"/><text x="88.9609%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (37 samples, 0.03%)</title><rect x="88.7214%" y="1125" width="0.0300%" height="15" fill="rgb(227,71,15)" fg:x="109445" fg:w="37"/><text x="88.9714%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (18 samples, 0.01%)</title><rect x="88.7514%" y="1125" width="0.0146%" height="15" fill="rgb(225,153,20)" fg:x="109482" fg:w="18"/><text x="89.0014%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (96 samples, 0.08%)</title><rect x="88.6996%" y="1141" width="0.0778%" height="15" fill="rgb(210,190,26)" fg:x="109418" fg:w="96"/><text x="88.9496%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (31 samples, 0.03%)</title><rect x="89.4381%" y="1077" width="0.0251%" height="15" fill="rgb(223,147,5)" fg:x="110329" fg:w="31"/><text x="89.6881%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (41 samples, 0.03%)</title><rect x="89.4632%" y="1077" width="0.0332%" height="15" fill="rgb(207,14,23)" fg:x="110360" fg:w="41"/><text x="89.7132%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (126 samples, 0.10%)</title><rect x="89.4381%" y="1093" width="0.1021%" height="15" fill="rgb(211,195,53)" fg:x="110329" fg:w="126"/><text x="89.6881%" y="1103.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (54 samples, 0.04%)</title><rect x="89.4964%" y="1077" width="0.0438%" height="15" fill="rgb(237,75,46)" fg:x="110401" fg:w="54"/><text x="89.7464%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (107 samples, 0.09%)</title><rect x="89.5402%" y="1093" width="0.0867%" height="15" fill="rgb(254,55,14)" fg:x="110455" fg:w="107"/><text x="89.7902%" y="1103.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (81 samples, 0.07%)</title><rect x="89.5613%" y="1077" width="0.0657%" height="15" fill="rgb(230,185,30)" fg:x="110481" fg:w="81"/><text x="89.8113%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (26 samples, 0.02%)</title><rect x="89.6561%" y="1061" width="0.0211%" height="15" fill="rgb(220,14,11)" fg:x="110598" fg:w="26"/><text x="89.9061%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (437 samples, 0.35%)</title><rect x="89.3456%" y="1109" width="0.3543%" height="15" fill="rgb(215,169,44)" fg:x="110215" fg:w="437"/><text x="89.5956%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (90 samples, 0.07%)</title><rect x="89.6269%" y="1093" width="0.0730%" height="15" fill="rgb(253,203,20)" fg:x="110562" fg:w="90"/><text x="89.8769%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (73 samples, 0.06%)</title><rect x="89.6407%" y="1077" width="0.0592%" height="15" fill="rgb(229,225,17)" fg:x="110579" fg:w="73"/><text x="89.8907%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (28 samples, 0.02%)</title><rect x="89.6772%" y="1061" width="0.0227%" height="15" fill="rgb(236,76,26)" fg:x="110624" fg:w="28"/><text x="89.9272%" y="1071.50"></text></g><g><title>leveldb::PutVarint32 (1,229 samples, 1.00%)</title><rect x="88.7782%" y="1141" width="0.9963%" height="15" fill="rgb(234,15,30)" fg:x="109515" fg:w="1229"/><text x="89.0282%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (529 samples, 0.43%)</title><rect x="89.3456%" y="1125" width="0.4288%" height="15" fill="rgb(211,113,48)" fg:x="110215" fg:w="529"/><text x="89.5956%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (92 samples, 0.07%)</title><rect x="89.6999%" y="1109" width="0.0746%" height="15" fill="rgb(221,31,36)" fg:x="110652" fg:w="92"/><text x="89.9499%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (25 samples, 0.02%)</title><rect x="89.7542%" y="1093" width="0.0203%" height="15" fill="rgb(215,118,52)" fg:x="110719" fg:w="25"/><text x="90.0042%" y="1103.50"></text></g><g><title>leveldb::PutVarint64 (15 samples, 0.01%)</title><rect x="89.7745%" y="1141" width="0.0122%" height="15" fill="rgb(241,151,27)" fg:x="110744" fg:w="15"/><text x="90.0245%" y="1151.50"></text></g><g><title>leveldb::TableBuilder::ok (17 samples, 0.01%)</title><rect x="89.8474%" y="1125" width="0.0138%" height="15" fill="rgb(253,51,3)" fg:x="110834" fg:w="17"/><text x="90.0974%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (39 samples, 0.03%)</title><rect x="89.8612%" y="1109" width="0.0316%" height="15" fill="rgb(216,201,24)" fg:x="110851" fg:w="39"/><text x="90.1112%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (40 samples, 0.03%)</title><rect x="89.8612%" y="1125" width="0.0324%" height="15" fill="rgb(231,107,4)" fg:x="110851" fg:w="40"/><text x="90.1112%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::Add (125 samples, 0.10%)</title><rect x="89.7939%" y="1141" width="0.1013%" height="15" fill="rgb(243,97,54)" fg:x="110768" fg:w="125"/><text x="90.0439%" y="1151.50"></text></g><g><title>[[ext4]] (64 samples, 0.05%)</title><rect x="90.4376%" y="981" width="0.0519%" height="15" fill="rgb(221,32,51)" fg:x="111562" fg:w="64"/><text x="90.6876%" y="991.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="90.4676%" y="965" width="0.0219%" height="15" fill="rgb(218,171,35)" fg:x="111599" fg:w="27"/><text x="90.7176%" y="975.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="90.4733%" y="949" width="0.0162%" height="15" fill="rgb(214,20,53)" fg:x="111606" fg:w="20"/><text x="90.7233%" y="959.50"></text></g><g><title>[[ext4]] (30 samples, 0.02%)</title><rect x="91.3439%" y="885" width="0.0243%" height="15" fill="rgb(239,9,52)" fg:x="112680" fg:w="30"/><text x="91.5939%" y="895.50"></text></g><g><title>[[ext4]] (261 samples, 0.21%)</title><rect x="91.2109%" y="901" width="0.2116%" height="15" fill="rgb(215,114,45)" fg:x="112516" fg:w="261"/><text x="91.4609%" y="911.50"></text></g><g><title>[unknown] (67 samples, 0.05%)</title><rect x="91.3682%" y="885" width="0.0543%" height="15" fill="rgb(208,118,9)" fg:x="112710" fg:w="67"/><text x="91.6182%" y="895.50"></text></g><g><title>[[ext4]] (22 samples, 0.02%)</title><rect x="91.6284%" y="885" width="0.0178%" height="15" fill="rgb(235,7,39)" fg:x="113031" fg:w="22"/><text x="91.8784%" y="895.50"></text></g><g><title>[[ext4]] (775 samples, 0.63%)</title><rect x="91.0577%" y="917" width="0.6283%" height="15" fill="rgb(243,225,15)" fg:x="112327" fg:w="775"/><text x="91.3077%" y="927.50"></text></g><g><title>[unknown] (325 samples, 0.26%)</title><rect x="91.4225%" y="901" width="0.2635%" height="15" fill="rgb(225,216,18)" fg:x="112777" fg:w="325"/><text x="91.6725%" y="911.50"></text></g><g><title>[unknown] (49 samples, 0.04%)</title><rect x="91.6463%" y="885" width="0.0397%" height="15" fill="rgb(233,36,38)" fg:x="113053" fg:w="49"/><text x="91.8963%" y="895.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="91.6754%" y="869" width="0.0105%" height="15" fill="rgb(239,88,23)" fg:x="113089" fg:w="13"/><text x="91.9254%" y="879.50"></text></g><g><title>[[ext4]] (1,099 samples, 0.89%)</title><rect x="90.9045%" y="933" width="0.8909%" height="15" fill="rgb(219,181,35)" fg:x="112138" fg:w="1099"/><text x="91.1545%" y="943.50"></text></g><g><title>[unknown] (135 samples, 0.11%)</title><rect x="91.6860%" y="917" width="0.1094%" height="15" fill="rgb(215,18,46)" fg:x="113102" fg:w="135"/><text x="91.9360%" y="927.50"></text></g><g><title>[[ext4]] (1,909 samples, 1.55%)</title><rect x="90.8299%" y="949" width="1.5475%" height="15" fill="rgb(241,38,11)" fg:x="112046" fg:w="1909"/><text x="91.0799%" y="959.50"></text></g><g><title>[unknown] (718 samples, 0.58%)</title><rect x="91.7954%" y="933" width="0.5820%" height="15" fill="rgb(248,169,45)" fg:x="113237" fg:w="718"/><text x="92.0454%" y="943.50"></text></g><g><title>[unknown] (614 samples, 0.50%)</title><rect x="91.8797%" y="917" width="0.4977%" height="15" fill="rgb(239,50,49)" fg:x="113341" fg:w="614"/><text x="92.1297%" y="927.50"></text></g><g><title>[unknown] (530 samples, 0.43%)</title><rect x="91.9478%" y="901" width="0.4296%" height="15" fill="rgb(231,96,31)" fg:x="113425" fg:w="530"/><text x="92.1978%" y="911.50"></text></g><g><title>[unknown] (486 samples, 0.39%)</title><rect x="91.9835%" y="885" width="0.3940%" height="15" fill="rgb(224,193,37)" fg:x="113469" fg:w="486"/><text x="92.2335%" y="895.50"></text></g><g><title>[unknown] (335 samples, 0.27%)</title><rect x="92.1059%" y="869" width="0.2716%" height="15" fill="rgb(227,153,50)" fg:x="113620" fg:w="335"/><text x="92.3559%" y="879.50"></text></g><g><title>[unknown] (132 samples, 0.11%)</title><rect x="92.2705%" y="853" width="0.1070%" height="15" fill="rgb(249,228,3)" fg:x="113823" fg:w="132"/><text x="92.5205%" y="863.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="92.3353%" y="837" width="0.0422%" height="15" fill="rgb(219,164,43)" fg:x="113903" fg:w="52"/><text x="92.5853%" y="847.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="92.3515%" y="821" width="0.0259%" height="15" fill="rgb(216,45,41)" fg:x="113923" fg:w="32"/><text x="92.6015%" y="831.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="92.3588%" y="805" width="0.0186%" height="15" fill="rgb(210,226,51)" fg:x="113932" fg:w="23"/><text x="92.6088%" y="815.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="92.3669%" y="789" width="0.0105%" height="15" fill="rgb(209,117,49)" fg:x="113942" fg:w="13"/><text x="92.6169%" y="799.50"></text></g><g><title>[[ext4]] (5,984 samples, 4.85%)</title><rect x="90.6694%" y="965" width="4.8509%" height="15" fill="rgb(206,196,24)" fg:x="111848" fg:w="5984"/><text x="90.9194%" y="975.50">[[ext4..</text></g><g><title>[unknown] (3,877 samples, 3.14%)</title><rect x="92.3775%" y="949" width="3.1429%" height="15" fill="rgb(253,218,3)" fg:x="113955" fg:w="3877"/><text x="92.6275%" y="959.50">[un..</text></g><g><title>[unknown] (3,649 samples, 2.96%)</title><rect x="92.5623%" y="933" width="2.9581%" height="15" fill="rgb(252,166,2)" fg:x="114183" fg:w="3649"/><text x="92.8123%" y="943.50">[un..</text></g><g><title>[unknown] (3,024 samples, 2.45%)</title><rect x="93.0690%" y="917" width="2.4514%" height="15" fill="rgb(236,218,26)" fg:x="114808" fg:w="3024"/><text x="93.3190%" y="927.50">[u..</text></g><g><title>[unknown] (2,323 samples, 1.88%)</title><rect x="93.6372%" y="901" width="1.8831%" height="15" fill="rgb(254,84,19)" fg:x="115509" fg:w="2323"/><text x="93.8872%" y="911.50">[..</text></g><g><title>[unknown] (1,566 samples, 1.27%)</title><rect x="94.2509%" y="885" width="1.2695%" height="15" fill="rgb(219,137,29)" fg:x="116266" fg:w="1566"/><text x="94.5009%" y="895.50"></text></g><g><title>[unknown] (550 samples, 0.45%)</title><rect x="95.0745%" y="869" width="0.4459%" height="15" fill="rgb(227,47,52)" fg:x="117282" fg:w="550"/><text x="95.3245%" y="879.50"></text></g><g><title>[unknown] (123 samples, 0.10%)</title><rect x="95.4206%" y="853" width="0.0997%" height="15" fill="rgb(229,167,24)" fg:x="117709" fg:w="123"/><text x="95.6706%" y="863.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="95.4790%" y="837" width="0.0413%" height="15" fill="rgb(233,164,1)" fg:x="117781" fg:w="51"/><text x="95.7290%" y="847.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="95.4928%" y="821" width="0.0276%" height="15" fill="rgb(218,88,48)" fg:x="117798" fg:w="34"/><text x="95.7428%" y="831.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="95.5017%" y="805" width="0.0186%" height="15" fill="rgb(226,214,24)" fg:x="117809" fg:w="23"/><text x="95.7517%" y="815.50"></text></g><g><title>[[ext4]] (16 samples, 0.01%)</title><rect x="96.3180%" y="869" width="0.0130%" height="15" fill="rgb(233,29,12)" fg:x="118816" fg:w="16"/><text x="96.5680%" y="879.50"></text></g><g><title>[[ext4]] (25 samples, 0.02%)</title><rect x="96.3132%" y="885" width="0.0203%" height="15" fill="rgb(219,120,34)" fg:x="118810" fg:w="25"/><text x="96.5632%" y="895.50"></text></g><g><title>[[ext4]] (29 samples, 0.02%)</title><rect x="96.3107%" y="901" width="0.0235%" height="15" fill="rgb(226,78,44)" fg:x="118807" fg:w="29"/><text x="96.5607%" y="911.50"></text></g><g><title>[[ext4]] (32 samples, 0.03%)</title><rect x="96.3091%" y="917" width="0.0259%" height="15" fill="rgb(240,15,48)" fg:x="118805" fg:w="32"/><text x="96.5591%" y="927.50"></text></g><g><title>[[ext4]] (41 samples, 0.03%)</title><rect x="96.3091%" y="933" width="0.0332%" height="15" fill="rgb(253,176,7)" fg:x="118805" fg:w="41"/><text x="96.5591%" y="943.50"></text></g><g><title>[[ext4]] (7,465 samples, 6.05%)</title><rect x="90.3306%" y="997" width="6.0515%" height="15" fill="rgb(206,166,28)" fg:x="111430" fg:w="7465"/><text x="90.5806%" y="1007.50">[[ext4]]</text></g><g><title>[unknown] (7,269 samples, 5.89%)</title><rect x="90.4895%" y="981" width="5.8926%" height="15" fill="rgb(241,53,51)" fg:x="111626" fg:w="7269"/><text x="90.7395%" y="991.50">[unknow..</text></g><g><title>[unknown] (1,063 samples, 0.86%)</title><rect x="95.5204%" y="965" width="0.8617%" height="15" fill="rgb(249,112,30)" fg:x="117832" fg:w="1063"/><text x="95.7704%" y="975.50"></text></g><g><title>[unknown] (699 samples, 0.57%)</title><rect x="95.8154%" y="949" width="0.5666%" height="15" fill="rgb(217,85,30)" fg:x="118196" fg:w="699"/><text x="96.0654%" y="959.50"></text></g><g><title>[unknown] (49 samples, 0.04%)</title><rect x="96.3424%" y="933" width="0.0397%" height="15" fill="rgb(233,49,7)" fg:x="118846" fg:w="49"/><text x="96.5924%" y="943.50"></text></g><g><title>[unknown] (41 samples, 0.03%)</title><rect x="96.3488%" y="917" width="0.0332%" height="15" fill="rgb(234,109,9)" fg:x="118854" fg:w="41"/><text x="96.5988%" y="927.50"></text></g><g><title>[unknown] (41 samples, 0.03%)</title><rect x="96.3488%" y="901" width="0.0332%" height="15" fill="rgb(253,95,22)" fg:x="118854" fg:w="41"/><text x="96.5988%" y="911.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="96.3505%" y="885" width="0.0316%" height="15" fill="rgb(233,176,25)" fg:x="118856" fg:w="39"/><text x="96.6005%" y="895.50"></text></g><g><title>[unknown] (35 samples, 0.03%)</title><rect x="96.3537%" y="869" width="0.0284%" height="15" fill="rgb(236,33,39)" fg:x="118860" fg:w="35"/><text x="96.6037%" y="879.50"></text></g><g><title>[unknown] (8,357 samples, 6.77%)</title><rect x="89.9123%" y="1061" width="6.7746%" height="15" fill="rgb(223,226,42)" fg:x="110914" fg:w="8357"/><text x="90.1623%" y="1071.50">[unknown]</text></g><g><title>[unknown] (8,311 samples, 6.74%)</title><rect x="89.9496%" y="1045" width="6.7373%" height="15" fill="rgb(216,99,33)" fg:x="110960" fg:w="8311"/><text x="90.1996%" y="1055.50">[unknown]</text></g><g><title>[unknown] (8,297 samples, 6.73%)</title><rect x="89.9609%" y="1029" width="6.7260%" height="15" fill="rgb(235,84,23)" fg:x="110974" fg:w="8297"/><text x="90.2109%" y="1039.50">[unknown]</text></g><g><title>[unknown] (8,143 samples, 6.60%)</title><rect x="90.0858%" y="1013" width="6.6011%" height="15" fill="rgb(232,2,27)" fg:x="111128" fg:w="8143"/><text x="90.3358%" y="1023.50">[unknown]</text></g><g><title>[unknown] (376 samples, 0.30%)</title><rect x="96.3821%" y="997" width="0.3048%" height="15" fill="rgb(241,23,22)" fg:x="118895" fg:w="376"/><text x="96.6321%" y="1007.50"></text></g><g><title>[unknown] (111 samples, 0.09%)</title><rect x="96.5969%" y="981" width="0.0900%" height="15" fill="rgb(211,73,27)" fg:x="119160" fg:w="111"/><text x="96.8469%" y="991.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="96.6707%" y="965" width="0.0162%" height="15" fill="rgb(235,109,49)" fg:x="119251" fg:w="20"/><text x="96.9207%" y="975.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="96.6763%" y="949" width="0.0105%" height="15" fill="rgb(230,99,29)" fg:x="119258" fg:w="13"/><text x="96.9263%" y="959.50"></text></g><g><title>Flush (8,386 samples, 6.80%)</title><rect x="89.8993%" y="1125" width="6.7981%" height="15" fill="rgb(245,199,7)" fg:x="110898" fg:w="8386"/><text x="90.1493%" y="1135.50">Flush</text></g><g><title>FlushBuffer (8,386 samples, 6.80%)</title><rect x="89.8993%" y="1109" width="6.7981%" height="15" fill="rgb(217,179,10)" fg:x="110898" fg:w="8386"/><text x="90.1493%" y="1119.50">FlushBuff..</text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (8,382 samples, 6.79%)</title><rect x="89.9026%" y="1093" width="6.7949%" height="15" fill="rgb(254,99,47)" fg:x="110902" fg:w="8382"/><text x="90.1526%" y="1103.50">leveldb::..</text></g><g><title>__GI___libc_write (8,382 samples, 6.79%)</title><rect x="89.9026%" y="1077" width="6.7949%" height="15" fill="rgb(251,121,7)" fg:x="110902" fg:w="8382"/><text x="90.1526%" y="1087.50">__GI___li..</text></g><g><title>FlushBuffer (32 samples, 0.03%)</title><rect x="96.7039%" y="1109" width="0.0259%" height="15" fill="rgb(250,177,26)" fg:x="119292" fg:w="32"/><text x="96.9539%" y="1119.50"></text></g><g><title>WriteUnbuffered (32 samples, 0.03%)</title><rect x="96.7039%" y="1093" width="0.0259%" height="15" fill="rgb(232,88,15)" fg:x="119292" fg:w="32"/><text x="96.9539%" y="1103.50"></text></g><g><title>leveldb::Status::OK (13 samples, 0.01%)</title><rect x="96.7193%" y="1077" width="0.0105%" height="15" fill="rgb(251,54,54)" fg:x="119311" fg:w="13"/><text x="96.9693%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (33 samples, 0.03%)</title><rect x="96.7039%" y="1125" width="0.0268%" height="15" fill="rgb(208,177,15)" fg:x="119292" fg:w="33"/><text x="96.9539%" y="1135.50"></text></g><g><title>_mm_crc32_u64 (16 samples, 0.01%)</title><rect x="96.7696%" y="1093" width="0.0130%" height="15" fill="rgb(205,97,32)" fg:x="119373" fg:w="16"/><text x="97.0196%" y="1103.50"></text></g><g><title>crc32c::ExtendSse42 (40 samples, 0.03%)</title><rect x="96.7509%" y="1109" width="0.0324%" height="15" fill="rgb(217,192,13)" fg:x="119350" fg:w="40"/><text x="97.0009%" y="1119.50"></text></g><g><title>leveldb::BlockBuilder::Finish (36 samples, 0.03%)</title><rect x="96.7842%" y="1109" width="0.0292%" height="15" fill="rgb(215,163,41)" fg:x="119391" fg:w="36"/><text x="97.0342%" y="1119.50"></text></g><g><title>__memmove_avx512_unaligned_erms (102 samples, 0.08%)</title><rect x="96.8190%" y="1061" width="0.0827%" height="15" fill="rgb(246,83,29)" fg:x="119434" fg:w="102"/><text x="97.0690%" y="1071.50"></text></g><g><title>Append (106 samples, 0.09%)</title><rect x="96.8190%" y="1093" width="0.0859%" height="15" fill="rgb(219,2,45)" fg:x="119434" fg:w="106"/><text x="97.0690%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (106 samples, 0.09%)</title><rect x="96.8190%" y="1077" width="0.0859%" height="15" fill="rgb(242,215,33)" fg:x="119434" fg:w="106"/><text x="97.0690%" y="1087.50"></text></g><g><title>_mm_crc32_u64 (35 samples, 0.03%)</title><rect x="96.9479%" y="1077" width="0.0284%" height="15" fill="rgb(217,1,6)" fg:x="119593" fg:w="35"/><text x="97.1979%" y="1087.50"></text></g><g><title>crc32c::ExtendSse42 (90 samples, 0.07%)</title><rect x="96.9058%" y="1093" width="0.0730%" height="15" fill="rgb(207,85,52)" fg:x="119541" fg:w="90"/><text x="97.1558%" y="1103.50"></text></g><g><title>leveldb::BlockBuilder::Finish (18 samples, 0.01%)</title><rect x="96.9852%" y="1093" width="0.0146%" height="15" fill="rgb(231,171,19)" fg:x="119639" fg:w="18"/><text x="97.2352%" y="1103.50"></text></g><g><title>leveldb::PutFixed32 (17 samples, 0.01%)</title><rect x="96.9998%" y="1093" width="0.0138%" height="15" fill="rgb(207,128,4)" fg:x="119657" fg:w="17"/><text x="97.2498%" y="1103.50"></text></g><g><title>crc32c::ExtendSse42 (286 samples, 0.23%)</title><rect x="97.0330%" y="1077" width="0.2318%" height="15" fill="rgb(219,208,4)" fg:x="119698" fg:w="286"/><text x="97.2830%" y="1087.50"></text></g><g><title>_mm_crc32_u64 (170 samples, 0.14%)</title><rect x="97.1271%" y="1061" width="0.1378%" height="15" fill="rgb(235,161,42)" fg:x="119814" fg:w="170"/><text x="97.3771%" y="1071.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (569 samples, 0.46%)</title><rect x="96.8190%" y="1109" width="0.4613%" height="15" fill="rgb(247,218,18)" fg:x="119434" fg:w="569"/><text x="97.0690%" y="1119.50"></text></g><g><title>leveldb::crc32c::Value (313 samples, 0.25%)</title><rect x="97.0265%" y="1093" width="0.2537%" height="15" fill="rgb(232,114,51)" fg:x="119690" fg:w="313"/><text x="97.2765%" y="1103.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (658 samples, 0.53%)</title><rect x="96.7477%" y="1125" width="0.5334%" height="15" fill="rgb(222,95,3)" fg:x="119346" fg:w="658"/><text x="96.9977%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (16 samples, 0.01%)</title><rect x="97.2811%" y="1125" width="0.0130%" height="15" fill="rgb(240,65,29)" fg:x="120004" fg:w="16"/><text x="97.5311%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::Flush (9,131 samples, 7.40%)</title><rect x="89.8953%" y="1141" width="7.4020%" height="15" fill="rgb(249,209,20)" fg:x="110893" fg:w="9131"/><text x="90.1453%" y="1151.50">leveldb::T..</text></g><g><title>leveldb::TableBuilder::NumEntries (18 samples, 0.01%)</title><rect x="97.2973%" y="1141" width="0.0146%" height="15" fill="rgb(241,48,37)" fg:x="120024" fg:w="18"/><text x="97.5473%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (168 samples, 0.14%)</title><rect x="97.3305%" y="1125" width="0.1362%" height="15" fill="rgb(230,140,42)" fg:x="120065" fg:w="168"/><text x="97.5805%" y="1135.50"></text></g><g><title>leveldb::Slice::compare (68 samples, 0.06%)</title><rect x="97.4116%" y="1109" width="0.0551%" height="15" fill="rgb(230,176,45)" fg:x="120165" fg:w="68"/><text x="97.6616%" y="1119.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (16 samples, 0.01%)</title><rect x="97.4667%" y="1125" width="0.0130%" height="15" fill="rgb(245,112,21)" fg:x="120233" fg:w="16"/><text x="97.7167%" y="1135.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (68 samples, 0.06%)</title><rect x="97.4797%" y="1125" width="0.0551%" height="15" fill="rgb(207,183,35)" fg:x="120249" fg:w="68"/><text x="97.7297%" y="1135.50"></text></g><g><title>leveldb::ParseInternalKey (89 samples, 0.07%)</title><rect x="97.6386%" y="1109" width="0.0721%" height="15" fill="rgb(227,44,33)" fg:x="120445" fg:w="89"/><text x="97.8886%" y="1119.50"></text></g><g><title>leveldb::Slice::size (13 samples, 0.01%)</title><rect x="97.7002%" y="1093" width="0.0105%" height="15" fill="rgb(246,120,21)" fg:x="120521" fg:w="13"/><text x="97.9502%" y="1103.50"></text></g><g><title>leveldb::Slice::Slice (23 samples, 0.02%)</title><rect x="97.7107%" y="1109" width="0.0186%" height="15" fill="rgb(235,57,52)" fg:x="120534" fg:w="23"/><text x="97.9607%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (13 samples, 0.01%)</title><rect x="97.7310%" y="1093" width="0.0105%" height="15" fill="rgb(238,84,10)" fg:x="120559" fg:w="13"/><text x="97.9810%" y="1103.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (256 samples, 0.21%)</title><rect x="97.5348%" y="1125" width="0.2075%" height="15" fill="rgb(251,200,32)" fg:x="120317" fg:w="256"/><text x="97.7848%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (14 samples, 0.01%)</title><rect x="97.7310%" y="1109" width="0.0113%" height="15" fill="rgb(247,159,13)" fg:x="120559" fg:w="14"/><text x="97.9810%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::ok (558 samples, 0.45%)</title><rect x="97.3159%" y="1141" width="0.4523%" height="15" fill="rgb(238,64,4)" fg:x="120047" fg:w="558"/><text x="97.5659%" y="1151.50"></text></g><g><title>leveldb::TableBuilder::status (40 samples, 0.03%)</title><rect x="97.7683%" y="1141" width="0.0324%" height="15" fill="rgb(221,131,51)" fg:x="120605" fg:w="40"/><text x="98.0183%" y="1151.50"></text></g><g><title>leveldb::Status::Status (15 samples, 0.01%)</title><rect x="97.7886%" y="1125" width="0.0122%" height="15" fill="rgb(242,5,29)" fg:x="120630" fg:w="15"/><text x="98.0386%" y="1135.50"></text></g><g><title>memcpy@plt (22 samples, 0.02%)</title><rect x="97.8015%" y="1141" width="0.0178%" height="15" fill="rgb(214,130,32)" fg:x="120646" fg:w="22"/><text x="98.0515%" y="1151.50"></text></g><g><title>leveldb::Block::Iter::value (20 samples, 0.02%)</title><rect x="97.8242%" y="1061" width="0.0162%" height="15" fill="rgb(244,210,16)" fg:x="120674" fg:w="20"/><text x="98.0742%" y="1071.50"></text></g><g><title>leveldb::TableBuilder::Add (23,440 samples, 19.00%)</title><rect x="78.8396%" y="1157" width="19.0016%" height="15" fill="rgb(234,48,26)" fg:x="97255" fg:w="23440"/><text x="79.0896%" y="1167.50">leveldb::TableBuilder::Add</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (26 samples, 0.02%)</title><rect x="97.8202%" y="1141" width="0.0211%" height="15" fill="rgb(231,82,38)" fg:x="120669" fg:w="26"/><text x="98.0702%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (26 samples, 0.02%)</title><rect x="97.8202%" y="1125" width="0.0211%" height="15" fill="rgb(254,128,41)" fg:x="120669" fg:w="26"/><text x="98.0702%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (25 samples, 0.02%)</title><rect x="97.8210%" y="1109" width="0.0203%" height="15" fill="rgb(212,73,49)" fg:x="120670" fg:w="25"/><text x="98.0710%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (25 samples, 0.02%)</title><rect x="97.8210%" y="1093" width="0.0203%" height="15" fill="rgb(205,62,54)" fg:x="120670" fg:w="25"/><text x="98.0710%" y="1103.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (25 samples, 0.02%)</title><rect x="97.8210%" y="1077" width="0.0203%" height="15" fill="rgb(228,0,8)" fg:x="120670" fg:w="25"/><text x="98.0710%" y="1087.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (26 samples, 0.02%)</title><rect x="97.8453%" y="1157" width="0.0211%" height="15" fill="rgb(251,28,17)" fg:x="120700" fg:w="26"/><text x="98.0953%" y="1167.50"></text></g><g><title>leveldb::TableBuilder::status (27 samples, 0.02%)</title><rect x="97.8664%" y="1157" width="0.0219%" height="15" fill="rgb(238,105,27)" fg:x="120726" fg:w="27"/><text x="98.1164%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (17 samples, 0.01%)</title><rect x="97.9012%" y="1157" width="0.0138%" height="15" fill="rgb(237,216,33)" fg:x="120769" fg:w="17"/><text x="98.1512%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (17 samples, 0.01%)</title><rect x="97.9012%" y="1141" width="0.0138%" height="15" fill="rgb(229,228,25)" fg:x="120769" fg:w="17"/><text x="98.1512%" y="1151.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (35,050 samples, 28.41%)</title><rect x="69.5034%" y="1173" width="28.4132%" height="15" fill="rgb(233,75,23)" fg:x="85738" fg:w="35050"/><text x="69.7534%" y="1183.50">leveldb::DBImpl::DoCompactionWork</text></g><g><title>leveldb::InternalKeyComparator::Compare (340 samples, 0.28%)</title><rect x="97.9256%" y="1173" width="0.2756%" height="15" fill="rgb(231,207,16)" fg:x="120799" fg:w="340"/><text x="98.1756%" y="1183.50"></text></g><g><title>leveldb::ExtractUserKey (43 samples, 0.03%)</title><rect x="98.1663%" y="1157" width="0.0349%" height="15" fill="rgb(231,191,45)" fg:x="121096" fg:w="43"/><text x="98.4163%" y="1167.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (38,748 samples, 31.41%)</title><rect x="66.7918%" y="1189" width="31.4110%" height="15" fill="rgb(224,133,17)" fg:x="82393" fg:w="38748"/><text x="67.0418%" y="1199.50">leveldb::DBImpl::BackgroundCompaction</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (26 samples, 0.02%)</title><rect x="98.2028%" y="1157" width="0.0211%" height="15" fill="rgb(209,178,27)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1167.50"></text></g><g><title>__unlink (26 samples, 0.02%)</title><rect x="98.2028%" y="1141" width="0.0211%" height="15" fill="rgb(218,37,11)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1151.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="98.2028%" y="1125" width="0.0211%" height="15" fill="rgb(251,226,25)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1135.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="98.2028%" y="1109" width="0.0211%" height="15" fill="rgb(209,222,27)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1119.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="98.2028%" y="1093" width="0.0211%" height="15" fill="rgb(238,22,21)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1103.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="98.2028%" y="1077" width="0.0211%" height="15" fill="rgb(233,161,25)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1087.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="98.2028%" y="1061" width="0.0211%" height="15" fill="rgb(226,122,53)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1071.50"></text></g><g><title>[[ext4]] (26 samples, 0.02%)</title><rect x="98.2028%" y="1045" width="0.0211%" height="15" fill="rgb(220,123,17)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1055.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="98.2028%" y="1029" width="0.0211%" height="15" fill="rgb(230,224,35)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1039.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="98.2028%" y="1013" width="0.0211%" height="15" fill="rgb(246,83,8)" fg:x="121141" fg:w="26"/><text x="98.4528%" y="1023.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="98.2052%" y="997" width="0.0186%" height="15" fill="rgb(230,214,17)" fg:x="121144" fg:w="23"/><text x="98.4552%" y="1007.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="98.2093%" y="981" width="0.0146%" height="15" fill="rgb(222,97,18)" fg:x="121149" fg:w="18"/><text x="98.4593%" y="991.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (28 samples, 0.02%)</title><rect x="98.2028%" y="1173" width="0.0227%" height="15" fill="rgb(206,79,1)" fg:x="121141" fg:w="28"/><text x="98.4528%" y="1183.50"></text></g><g><title>[[ext4]] (21 samples, 0.02%)</title><rect x="98.2271%" y="933" width="0.0170%" height="15" fill="rgb(214,121,34)" fg:x="121171" fg:w="21"/><text x="98.4771%" y="943.50"></text></g><g><title>[[ext4]] (23 samples, 0.02%)</title><rect x="98.2271%" y="965" width="0.0186%" height="15" fill="rgb(249,199,46)" fg:x="121171" fg:w="23"/><text x="98.4771%" y="975.50"></text></g><g><title>[[ext4]] (23 samples, 0.02%)</title><rect x="98.2271%" y="949" width="0.0186%" height="15" fill="rgb(214,222,46)" fg:x="121171" fg:w="23"/><text x="98.4771%" y="959.50"></text></g><g><title>Sync (27 samples, 0.02%)</title><rect x="98.2263%" y="1141" width="0.0219%" height="15" fill="rgb(248,168,30)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (27 samples, 0.02%)</title><rect x="98.2263%" y="1125" width="0.0219%" height="15" fill="rgb(226,14,28)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1135.50"></text></g><g><title>fdatasync (27 samples, 0.02%)</title><rect x="98.2263%" y="1109" width="0.0219%" height="15" fill="rgb(253,123,1)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1119.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="98.2263%" y="1093" width="0.0219%" height="15" fill="rgb(225,24,42)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1103.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="98.2263%" y="1077" width="0.0219%" height="15" fill="rgb(216,161,37)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1087.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="98.2263%" y="1061" width="0.0219%" height="15" fill="rgb(251,164,26)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1071.50"></text></g><g><title>[[ext4]] (27 samples, 0.02%)</title><rect x="98.2263%" y="1045" width="0.0219%" height="15" fill="rgb(219,177,3)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1055.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="98.2263%" y="1029" width="0.0219%" height="15" fill="rgb(222,65,0)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1039.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="98.2263%" y="1013" width="0.0219%" height="15" fill="rgb(223,69,54)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1023.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="98.2263%" y="997" width="0.0219%" height="15" fill="rgb(235,30,27)" fg:x="121170" fg:w="27"/><text x="98.4763%" y="1007.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="98.2271%" y="981" width="0.0211%" height="15" fill="rgb(220,183,50)" fg:x="121171" fg:w="26"/><text x="98.4771%" y="991.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (118 samples, 0.10%)</title><rect x="98.4192%" y="1093" width="0.0957%" height="15" fill="rgb(248,198,15)" fg:x="121408" fg:w="118"/><text x="98.6692%" y="1103.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (256 samples, 0.21%)</title><rect x="98.3090%" y="1109" width="0.2075%" height="15" fill="rgb(222,211,4)" fg:x="121272" fg:w="256"/><text x="98.5590%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::Add (16 samples, 0.01%)</title><rect x="98.5335%" y="1109" width="0.0130%" height="15" fill="rgb(214,102,34)" fg:x="121549" fg:w="16"/><text x="98.7835%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (18 samples, 0.01%)</title><rect x="98.5579%" y="1109" width="0.0146%" height="15" fill="rgb(245,92,5)" fg:x="121579" fg:w="18"/><text x="98.8079%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (18 samples, 0.01%)</title><rect x="98.5579%" y="1093" width="0.0146%" height="15" fill="rgb(252,72,51)" fg:x="121579" fg:w="18"/><text x="98.8079%" y="1103.50"></text></g><g><title>leveldb::BlockBuilder::Add (371 samples, 0.30%)</title><rect x="98.2782%" y="1125" width="0.3008%" height="15" fill="rgb(252,208,19)" fg:x="121234" fg:w="371"/><text x="98.5282%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (18 samples, 0.01%)</title><rect x="98.6146%" y="1077" width="0.0146%" height="15" fill="rgb(211,69,7)" fg:x="121649" fg:w="18"/><text x="98.8646%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (42 samples, 0.03%)</title><rect x="98.5960%" y="1093" width="0.0340%" height="15" fill="rgb(211,27,16)" fg:x="121626" fg:w="42"/><text x="98.8460%" y="1103.50"></text></g><g><title>leveldb::Hash (21 samples, 0.02%)</title><rect x="98.6300%" y="1093" width="0.0170%" height="15" fill="rgb(219,216,14)" fg:x="121668" fg:w="21"/><text x="98.8800%" y="1103.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (72 samples, 0.06%)</title><rect x="98.5927%" y="1109" width="0.0584%" height="15" fill="rgb(219,71,8)" fg:x="121622" fg:w="72"/><text x="98.8427%" y="1119.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (76 samples, 0.06%)</title><rect x="98.5927%" y="1125" width="0.0616%" height="15" fill="rgb(223,170,53)" fg:x="121622" fg:w="76"/><text x="98.8427%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (17 samples, 0.01%)</title><rect x="98.6543%" y="1125" width="0.0138%" height="15" fill="rgb(246,21,26)" fg:x="121698" fg:w="17"/><text x="98.9043%" y="1135.50"></text></g><g><title>leveldb::PutVarint32 (19 samples, 0.02%)</title><rect x="98.6770%" y="1125" width="0.0154%" height="15" fill="rgb(248,20,46)" fg:x="121726" fg:w="19"/><text x="98.9270%" y="1135.50"></text></g><g><title>[[ext4]] (22 samples, 0.02%)</title><rect x="98.7046%" y="933" width="0.0178%" height="15" fill="rgb(252,94,11)" fg:x="121760" fg:w="22"/><text x="98.9546%" y="943.50"></text></g><g><title>[[ext4]] (83 samples, 0.07%)</title><rect x="98.7013%" y="949" width="0.0673%" height="15" fill="rgb(236,163,8)" fg:x="121756" fg:w="83"/><text x="98.9513%" y="959.50"></text></g><g><title>[unknown] (57 samples, 0.05%)</title><rect x="98.7224%" y="933" width="0.0462%" height="15" fill="rgb(217,221,45)" fg:x="121782" fg:w="57"/><text x="98.9724%" y="943.50"></text></g><g><title>[unknown] (56 samples, 0.05%)</title><rect x="98.7232%" y="917" width="0.0454%" height="15" fill="rgb(238,38,17)" fg:x="121783" fg:w="56"/><text x="98.9732%" y="927.50"></text></g><g><title>[unknown] (42 samples, 0.03%)</title><rect x="98.7346%" y="901" width="0.0340%" height="15" fill="rgb(242,210,23)" fg:x="121797" fg:w="42"/><text x="98.9846%" y="911.50"></text></g><g><title>[unknown] (36 samples, 0.03%)</title><rect x="98.7394%" y="885" width="0.0292%" height="15" fill="rgb(250,86,53)" fg:x="121803" fg:w="36"/><text x="98.9894%" y="895.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="98.7516%" y="869" width="0.0170%" height="15" fill="rgb(223,168,25)" fg:x="121818" fg:w="21"/><text x="99.0016%" y="879.50"></text></g><g><title>[[ext4]] (105 samples, 0.09%)</title><rect x="98.6965%" y="981" width="0.0851%" height="15" fill="rgb(251,189,4)" fg:x="121750" fg:w="105"/><text x="98.9465%" y="991.50"></text></g><g><title>[unknown] (100 samples, 0.08%)</title><rect x="98.7005%" y="965" width="0.0811%" height="15" fill="rgb(245,19,28)" fg:x="121755" fg:w="100"/><text x="98.9505%" y="975.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="98.7686%" y="949" width="0.0130%" height="15" fill="rgb(207,10,34)" fg:x="121839" fg:w="16"/><text x="99.0186%" y="959.50"></text></g><g><title>Flush (112 samples, 0.09%)</title><rect x="98.6940%" y="1109" width="0.0908%" height="15" fill="rgb(235,153,31)" fg:x="121747" fg:w="112"/><text x="98.9440%" y="1119.50"></text></g><g><title>FlushBuffer (112 samples, 0.09%)</title><rect x="98.6940%" y="1093" width="0.0908%" height="15" fill="rgb(228,72,37)" fg:x="121747" fg:w="112"/><text x="98.9440%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (112 samples, 0.09%)</title><rect x="98.6940%" y="1077" width="0.0908%" height="15" fill="rgb(215,15,16)" fg:x="121747" fg:w="112"/><text x="98.9440%" y="1087.50"></text></g><g><title>__GI___libc_write (112 samples, 0.09%)</title><rect x="98.6940%" y="1061" width="0.0908%" height="15" fill="rgb(250,119,29)" fg:x="121747" fg:w="112"/><text x="98.9440%" y="1071.50"></text></g><g><title>[unknown] (112 samples, 0.09%)</title><rect x="98.6940%" y="1045" width="0.0908%" height="15" fill="rgb(214,59,1)" fg:x="121747" fg:w="112"/><text x="98.9440%" y="1055.50"></text></g><g><title>[unknown] (112 samples, 0.09%)</title><rect x="98.6940%" y="1029" width="0.0908%" height="15" fill="rgb(223,109,25)" fg:x="121747" fg:w="112"/><text x="98.9440%" y="1039.50"></text></g><g><title>[unknown] (112 samples, 0.09%)</title><rect x="98.6940%" y="1013" width="0.0908%" height="15" fill="rgb(230,198,22)" fg:x="121747" fg:w="112"/><text x="98.9440%" y="1023.50"></text></g><g><title>[unknown] (112 samples, 0.09%)</title><rect x="98.6940%" y="997" width="0.0908%" height="15" fill="rgb(245,184,46)" fg:x="121747" fg:w="112"/><text x="98.9440%" y="1007.50"></text></g><g><title>leveldb::TableBuilder::Flush (117 samples, 0.09%)</title><rect x="98.6940%" y="1125" width="0.0948%" height="15" fill="rgb(253,73,16)" fg:x="121747" fg:w="117"/><text x="98.9440%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::Add (641 samples, 0.52%)</title><rect x="98.2717%" y="1141" width="0.5196%" height="15" fill="rgb(206,94,45)" fg:x="121226" fg:w="641"/><text x="98.5217%" y="1151.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (701 samples, 0.57%)</title><rect x="98.2255%" y="1173" width="0.5683%" height="15" fill="rgb(236,83,27)" fg:x="121169" fg:w="701"/><text x="98.4755%" y="1183.50"></text></g><g><title>leveldb::BuildTable (700 samples, 0.57%)</title><rect x="98.2263%" y="1157" width="0.5675%" height="15" fill="rgb(220,196,8)" fg:x="121170" fg:w="700"/><text x="98.4763%" y="1167.50"></text></g><g><title>BackgroundThreadEntryPoint (39,479 samples, 32.00%)</title><rect x="66.7918%" y="1237" width="32.0036%" height="15" fill="rgb(254,185,14)" fg:x="82393" fg:w="39479"/><text x="67.0418%" y="1247.50">BackgroundThreadEntryPoint</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (39,479 samples, 32.00%)</title><rect x="66.7918%" y="1221" width="32.0036%" height="15" fill="rgb(226,50,22)" fg:x="82393" fg:w="39479"/><text x="67.0418%" y="1231.50">leveldb::(anonymous namespace)::PosixEnv::Background..</text></g><g><title>leveldb::DBImpl::BackgroundCall (39,479 samples, 32.00%)</title><rect x="66.7918%" y="1205" width="32.0036%" height="15" fill="rgb(253,147,0)" fg:x="82393" fg:w="39479"/><text x="67.0418%" y="1215.50">leveldb::DBImpl::BackgroundCall</text></g><g><title>leveldb::DBImpl::CompactMemTable (731 samples, 0.59%)</title><rect x="98.2028%" y="1189" width="0.5926%" height="15" fill="rgb(252,46,33)" fg:x="121141" fg:w="731"/><text x="98.4528%" y="1199.50"></text></g><g><title>execute_native_thread_routine (39,480 samples, 32.00%)</title><rect x="66.7918%" y="1253" width="32.0044%" height="15" fill="rgb(242,22,54)" fg:x="82393" fg:w="39480"/><text x="67.0418%" y="1263.50">execute_native_thread_routine</text></g><g><title>__clone (39,493 samples, 32.01%)</title><rect x="66.7820%" y="1285" width="32.0149%" height="15" fill="rgb(223,178,32)" fg:x="82381" fg:w="39493"/><text x="67.0320%" y="1295.50">__clone</text></g><g><title>start_thread (39,493 samples, 32.01%)</title><rect x="66.7820%" y="1269" width="32.0149%" height="15" fill="rgb(214,106,53)" fg:x="82381" fg:w="39493"/><text x="67.0320%" y="1279.50">start_thread</text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (16 samples, 0.01%)</title><rect x="98.8675%" y="1013" width="0.0130%" height="15" fill="rgb(232,65,50)" fg:x="121961" fg:w="16"/><text x="99.1175%" y="1023.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (34 samples, 0.03%)</title><rect x="98.8537%" y="1029" width="0.0276%" height="15" fill="rgb(231,110,28)" fg:x="121944" fg:w="34"/><text x="99.1037%" y="1039.50"></text></g><g><title>GetBlockProof (70 samples, 0.06%)</title><rect x="98.8537%" y="1061" width="0.0567%" height="15" fill="rgb(216,71,40)" fg:x="121944" fg:w="70"/><text x="99.1037%" y="1071.50"></text></g><g><title>operator/ (70 samples, 0.06%)</title><rect x="98.8537%" y="1045" width="0.0567%" height="15" fill="rgb(229,89,53)" fg:x="121944" fg:w="70"/><text x="99.1037%" y="1055.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (34 samples, 0.03%)</title><rect x="98.8829%" y="1029" width="0.0276%" height="15" fill="rgb(210,124,14)" fg:x="121980" fg:w="34"/><text x="99.1329%" y="1039.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (14 samples, 0.01%)</title><rect x="98.9308%" y="1045" width="0.0113%" height="15" fill="rgb(236,213,6)" fg:x="122039" fg:w="14"/><text x="99.1808%" y="1055.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (50 samples, 0.04%)</title><rect x="98.9186%" y="1061" width="0.0405%" height="15" fill="rgb(228,41,5)" fg:x="122024" fg:w="50"/><text x="99.1686%" y="1071.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (15 samples, 0.01%)</title><rect x="98.9470%" y="1045" width="0.0122%" height="15" fill="rgb(221,167,25)" fg:x="122059" fg:w="15"/><text x="99.1970%" y="1055.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (15 samples, 0.01%)</title><rect x="98.9470%" y="1029" width="0.0122%" height="15" fill="rgb(228,144,37)" fg:x="122059" fg:w="15"/><text x="99.1970%" y="1039.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (15 samples, 0.01%)</title><rect x="98.9470%" y="1013" width="0.0122%" height="15" fill="rgb(227,189,38)" fg:x="122059" fg:w="15"/><text x="99.1970%" y="1023.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (15 samples, 0.01%)</title><rect x="98.9470%" y="997" width="0.0122%" height="15" fill="rgb(218,8,2)" fg:x="122059" fg:w="15"/><text x="99.1970%" y="1007.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (160 samples, 0.13%)</title><rect x="98.8537%" y="1077" width="0.1297%" height="15" fill="rgb(209,61,28)" fg:x="121944" fg:w="160"/><text x="99.1037%" y="1087.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (17 samples, 0.01%)</title><rect x="98.9697%" y="1061" width="0.0138%" height="15" fill="rgb(233,140,39)" fg:x="122087" fg:w="17"/><text x="99.2197%" y="1071.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (17 samples, 0.01%)</title><rect x="98.9697%" y="1045" width="0.0138%" height="15" fill="rgb(251,66,48)" fg:x="122087" fg:w="17"/><text x="99.2197%" y="1055.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (169 samples, 0.14%)</title><rect x="98.8481%" y="1093" width="0.1370%" height="15" fill="rgb(210,44,45)" fg:x="121937" fg:w="169"/><text x="99.0981%" y="1103.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (195 samples, 0.16%)</title><rect x="98.8408%" y="1109" width="0.1581%" height="15" fill="rgb(214,136,46)" fg:x="121928" fg:w="195"/><text x="99.0908%" y="1119.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (17 samples, 0.01%)</title><rect x="98.9851%" y="1093" width="0.0138%" height="15" fill="rgb(207,130,50)" fg:x="122106" fg:w="17"/><text x="99.2351%" y="1103.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (17 samples, 0.01%)</title><rect x="98.9851%" y="1077" width="0.0138%" height="15" fill="rgb(228,102,49)" fg:x="122106" fg:w="17"/><text x="99.2351%" y="1087.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (13 samples, 0.01%)</title><rect x="98.9883%" y="1061" width="0.0105%" height="15" fill="rgb(253,55,1)" fg:x="122110" fg:w="13"/><text x="99.2383%" y="1071.50"></text></g><g><title>operator (209 samples, 0.17%)</title><rect x="98.8343%" y="1173" width="0.1694%" height="15" fill="rgb(238,222,9)" fg:x="121920" fg:w="209"/><text x="99.0843%" y="1183.50"></text></g><g><title>InitAndLoadChainstate (209 samples, 0.17%)</title><rect x="98.8343%" y="1157" width="0.1694%" height="15" fill="rgb(246,99,6)" fg:x="121920" fg:w="209"/><text x="99.0843%" y="1167.50"></text></g><g><title>node::LoadChainstate (209 samples, 0.17%)</title><rect x="98.8343%" y="1141" width="0.1694%" height="15" fill="rgb(219,110,26)" fg:x="121920" fg:w="209"/><text x="99.0843%" y="1151.50"></text></g><g><title>node::CompleteChainstateInitialization (208 samples, 0.17%)</title><rect x="98.8351%" y="1125" width="0.1686%" height="15" fill="rgb(239,160,33)" fg:x="121921" fg:w="208"/><text x="99.0851%" y="1135.50"></text></g><g><title>InitAndLoadChainstate (210 samples, 0.17%)</title><rect x="98.8343%" y="1189" width="0.1702%" height="15" fill="rgb(220,202,23)" fg:x="121920" fg:w="210"/><text x="99.0843%" y="1199.50"></text></g><g><title>main (211 samples, 0.17%)</title><rect x="98.8343%" y="1221" width="0.1710%" height="15" fill="rgb(208,80,26)" fg:x="121920" fg:w="211"/><text x="99.0843%" y="1231.50"></text></g><g><title>AppInitMain (211 samples, 0.17%)</title><rect x="98.8343%" y="1205" width="0.1710%" height="15" fill="rgb(243,85,7)" fg:x="121920" fg:w="211"/><text x="99.0843%" y="1215.50"></text></g><g><title>_start (224 samples, 0.18%)</title><rect x="98.8270%" y="1285" width="0.1816%" height="15" fill="rgb(228,77,47)" fg:x="121911" fg:w="224"/><text x="99.0770%" y="1295.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (224 samples, 0.18%)</title><rect x="98.8270%" y="1269" width="0.1816%" height="15" fill="rgb(212,226,8)" fg:x="121911" fg:w="224"/><text x="99.0770%" y="1279.50"></text></g><g><title>__libc_start_call_main (224 samples, 0.18%)</title><rect x="98.8270%" y="1253" width="0.1816%" height="15" fill="rgb(241,120,54)" fg:x="121911" fg:w="224"/><text x="99.0770%" y="1263.50"></text></g><g><title>main (224 samples, 0.18%)</title><rect x="98.8270%" y="1237" width="0.1816%" height="15" fill="rgb(226,80,16)" fg:x="121911" fg:w="224"/><text x="99.0770%" y="1247.50"></text></g><g><title>_mm_crc32_u64 (72 samples, 0.06%)</title><rect x="99.1010%" y="1269" width="0.0584%" height="15" fill="rgb(240,76,13)" fg:x="122249" fg:w="72"/><text x="99.3510%" y="1279.50"></text></g><g><title>crc32c::ExtendSse42 (183 samples, 0.15%)</title><rect x="99.0143%" y="1285" width="0.1483%" height="15" fill="rgb(252,74,8)" fg:x="122142" fg:w="183"/><text x="99.2643%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (27 samples, 0.02%)</title><rect x="99.1642%" y="1253" width="0.0219%" height="15" fill="rgb(244,155,2)" fg:x="122327" fg:w="27"/><text x="99.4142%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::key (17 samples, 0.01%)</title><rect x="99.2048%" y="1253" width="0.0138%" height="15" fill="rgb(215,81,35)" fg:x="122377" fg:w="17"/><text x="99.4548%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (34 samples, 0.03%)</title><rect x="99.2202%" y="1253" width="0.0276%" height="15" fill="rgb(206,55,2)" fg:x="122396" fg:w="34"/><text x="99.4702%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (109 samples, 0.09%)</title><rect x="99.1634%" y="1285" width="0.0884%" height="15" fill="rgb(231,2,34)" fg:x="122326" fg:w="109"/><text x="99.4134%" y="1295.50"></text></g><g><title>leveldb::Slice::compare (109 samples, 0.09%)</title><rect x="99.1634%" y="1269" width="0.0884%" height="15" fill="rgb(242,176,48)" fg:x="122326" fg:w="109"/><text x="99.4134%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (14 samples, 0.01%)</title><rect x="99.2518%" y="1285" width="0.0113%" height="15" fill="rgb(249,31,36)" fg:x="122435" fg:w="14"/><text x="99.5018%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (16 samples, 0.01%)</title><rect x="99.2891%" y="1285" width="0.0130%" height="15" fill="rgb(205,18,17)" fg:x="122481" fg:w="16"/><text x="99.5391%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (13 samples, 0.01%)</title><rect x="99.2915%" y="1269" width="0.0105%" height="15" fill="rgb(254,130,5)" fg:x="122484" fg:w="13"/><text x="99.5415%" y="1279.50"></text></g><g><title>leveldb::EncodeVarint32 (180 samples, 0.15%)</title><rect x="99.3328%" y="1253" width="0.1459%" height="15" fill="rgb(229,42,45)" fg:x="122535" fg:w="180"/><text x="99.5828%" y="1263.50"></text></g><g><title>leveldb::operator== (379 samples, 0.31%)</title><rect x="99.3280%" y="1269" width="0.3072%" height="15" fill="rgb(245,95,25)" fg:x="122529" fg:w="379"/><text x="99.5780%" y="1279.50"></text></g><g><title>leveldb::PutVarint32 (193 samples, 0.16%)</title><rect x="99.4788%" y="1253" width="0.1565%" height="15" fill="rgb(249,193,38)" fg:x="122715" fg:w="193"/><text x="99.7288%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (47 samples, 0.04%)</title><rect x="99.6360%" y="1189" width="0.0381%" height="15" fill="rgb(241,140,43)" fg:x="122909" fg:w="47"/><text x="99.8860%" y="1199.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (40 samples, 0.03%)</title><rect x="99.6782%" y="1189" width="0.0324%" height="15" fill="rgb(245,78,48)" fg:x="122961" fg:w="40"/><text x="99.9282%" y="1199.50"></text></g><g><title>leveldb::BlockBuilder::Add (494 samples, 0.40%)</title><rect x="99.3150%" y="1285" width="0.4005%" height="15" fill="rgb(214,92,39)" fg:x="122513" fg:w="494"/><text x="99.5650%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (99 samples, 0.08%)</title><rect x="99.6352%" y="1269" width="0.0803%" height="15" fill="rgb(211,189,14)" fg:x="122908" fg:w="99"/><text x="99.8852%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (99 samples, 0.08%)</title><rect x="99.6352%" y="1253" width="0.0803%" height="15" fill="rgb(218,7,24)" fg:x="122908" fg:w="99"/><text x="99.8852%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (98 samples, 0.08%)</title><rect x="99.6360%" y="1237" width="0.0794%" height="15" fill="rgb(224,200,49)" fg:x="122909" fg:w="98"/><text x="99.8860%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (98 samples, 0.08%)</title><rect x="99.6360%" y="1221" width="0.0794%" height="15" fill="rgb(218,210,14)" fg:x="122909" fg:w="98"/><text x="99.8860%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (98 samples, 0.08%)</title><rect x="99.6360%" y="1205" width="0.0794%" height="15" fill="rgb(234,142,31)" fg:x="122909" fg:w="98"/><text x="99.8860%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (29 samples, 0.02%)</title><rect x="99.7414%" y="1269" width="0.0235%" height="15" fill="rgb(227,165,2)" fg:x="123039" fg:w="29"/><text x="99.9914%" y="1279.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (83 samples, 0.07%)</title><rect x="99.7195%" y="1285" width="0.0673%" height="15" fill="rgb(232,44,46)" fg:x="123012" fg:w="83"/><text x="99.9695%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (22 samples, 0.02%)</title><rect x="99.7900%" y="1189" width="0.0178%" height="15" fill="rgb(236,149,47)" fg:x="123099" fg:w="22"/><text x="100.0400%" y="1199.50"></text></g><g><title>leveldb::Block::Iter::value (16 samples, 0.01%)</title><rect x="99.8079%" y="1189" width="0.0130%" height="15" fill="rgb(227,45,31)" fg:x="123121" fg:w="16"/><text x="100.0579%" y="1199.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (44 samples, 0.04%)</title><rect x="99.7868%" y="1285" width="0.0357%" height="15" fill="rgb(240,176,51)" fg:x="123095" fg:w="44"/><text x="100.0368%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (41 samples, 0.03%)</title><rect x="99.7892%" y="1269" width="0.0332%" height="15" fill="rgb(249,146,41)" fg:x="123098" fg:w="41"/><text x="100.0392%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (41 samples, 0.03%)</title><rect x="99.7892%" y="1253" width="0.0332%" height="15" fill="rgb(213,208,4)" fg:x="123098" fg:w="41"/><text x="100.0392%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (41 samples, 0.03%)</title><rect x="99.7892%" y="1237" width="0.0332%" height="15" fill="rgb(245,84,36)" fg:x="123098" fg:w="41"/><text x="100.0392%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (41 samples, 0.03%)</title><rect x="99.7892%" y="1221" width="0.0332%" height="15" fill="rgb(254,84,18)" fg:x="123098" fg:w="41"/><text x="100.0392%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (41 samples, 0.03%)</title><rect x="99.7892%" y="1205" width="0.0332%" height="15" fill="rgb(225,38,54)" fg:x="123098" fg:w="41"/><text x="100.0392%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (20 samples, 0.02%)</title><rect x="99.8225%" y="1285" width="0.0162%" height="15" fill="rgb(246,50,30)" fg:x="123139" fg:w="20"/><text x="100.0725%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (15 samples, 0.01%)</title><rect x="99.8808%" y="1269" width="0.0122%" height="15" fill="rgb(246,148,9)" fg:x="123211" fg:w="15"/><text x="100.1308%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (38 samples, 0.03%)</title><rect x="99.8743%" y="1285" width="0.0308%" height="15" fill="rgb(223,75,4)" fg:x="123203" fg:w="38"/><text x="100.1243%" y="1295.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (21 samples, 0.02%)</title><rect x="99.9084%" y="1061" width="0.0170%" height="15" fill="rgb(239,148,41)" fg:x="123245" fg:w="21"/><text x="100.1584%" y="1071.50"></text></g><g><title>leveldb::BuildTable (21 samples, 0.02%)</title><rect x="99.9084%" y="1045" width="0.0170%" height="15" fill="rgb(205,195,3)" fg:x="123245" fg:w="21"/><text x="100.1584%" y="1055.50"></text></g><g><title>leveldb::TableBuilder::Add (18 samples, 0.01%)</title><rect x="99.9108%" y="1029" width="0.0146%" height="15" fill="rgb(254,161,1)" fg:x="123248" fg:w="18"/><text x="100.1608%" y="1039.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (24 samples, 0.02%)</title><rect x="99.9400%" y="949" width="0.0195%" height="15" fill="rgb(211,229,8)" fg:x="123284" fg:w="24"/><text x="100.1900%" y="959.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (42 samples, 0.03%)</title><rect x="99.9262%" y="1061" width="0.0340%" height="15" fill="rgb(220,97,9)" fg:x="123267" fg:w="42"/><text x="100.1762%" y="1071.50"></text></g><g><title>leveldb::WriteBatch::Iterate (42 samples, 0.03%)</title><rect x="99.9262%" y="1045" width="0.0340%" height="15" fill="rgb(240,218,8)" fg:x="123267" fg:w="42"/><text x="100.1762%" y="1055.50"></text></g><g><title>leveldb::WriteBatch::Iterate (40 samples, 0.03%)</title><rect x="99.9279%" y="1029" width="0.0324%" height="15" fill="rgb(250,44,0)" fg:x="123269" fg:w="40"/><text x="100.1779%" y="1039.50"></text></g><g><title>leveldb::MemTable::Add (39 samples, 0.03%)</title><rect x="99.9287%" y="1013" width="0.0316%" height="15" fill="rgb(236,41,53)" fg:x="123270" fg:w="39"/><text x="100.1787%" y="1023.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (34 samples, 0.03%)</title><rect x="99.9327%" y="997" width="0.0276%" height="15" fill="rgb(218,227,13)" fg:x="123275" fg:w="34"/><text x="100.1827%" y="1007.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (29 samples, 0.02%)</title><rect x="99.9368%" y="981" width="0.0235%" height="15" fill="rgb(217,94,32)" fg:x="123280" fg:w="29"/><text x="100.1868%" y="991.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (29 samples, 0.02%)</title><rect x="99.9368%" y="965" width="0.0235%" height="15" fill="rgb(213,217,12)" fg:x="123280" fg:w="29"/><text x="100.1868%" y="975.50"></text></g><g><title>CompleteChainstateInitialization (75 samples, 0.06%)</title><rect x="99.9084%" y="1173" width="0.0608%" height="15" fill="rgb(229,13,46)" fg:x="123245" fg:w="75"/><text x="100.1584%" y="1183.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (75 samples, 0.06%)</title><rect x="99.9084%" y="1157" width="0.0608%" height="15" fill="rgb(243,139,5)" fg:x="123245" fg:w="75"/><text x="100.1584%" y="1167.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (75 samples, 0.06%)</title><rect x="99.9084%" y="1141" width="0.0608%" height="15" fill="rgb(249,38,45)" fg:x="123245" fg:w="75"/><text x="100.1584%" y="1151.50"></text></g><g><title>CDBWrapper::CDBWrapper (75 samples, 0.06%)</title><rect x="99.9084%" y="1125" width="0.0608%" height="15" fill="rgb(216,70,11)" fg:x="123245" fg:w="75"/><text x="100.1584%" y="1135.50"></text></g><g><title>leveldb::DB::Open (75 samples, 0.06%)</title><rect x="99.9084%" y="1109" width="0.0608%" height="15" fill="rgb(253,101,25)" fg:x="123245" fg:w="75"/><text x="100.1584%" y="1119.50"></text></g><g><title>leveldb::DBImpl::Recover (75 samples, 0.06%)</title><rect x="99.9084%" y="1093" width="0.0608%" height="15" fill="rgb(207,197,30)" fg:x="123245" fg:w="75"/><text x="100.1584%" y="1103.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (75 samples, 0.06%)</title><rect x="99.9084%" y="1077" width="0.0608%" height="15" fill="rgb(238,87,13)" fg:x="123245" fg:w="75"/><text x="100.1584%" y="1087.50"></text></g><g><title>main (84 samples, 0.07%)</title><rect x="99.9084%" y="1285" width="0.0681%" height="15" fill="rgb(215,155,8)" fg:x="123245" fg:w="84"/><text x="100.1584%" y="1295.50"></text></g><g><title>main (84 samples, 0.07%)</title><rect x="99.9084%" y="1269" width="0.0681%" height="15" fill="rgb(239,166,38)" fg:x="123245" fg:w="84"/><text x="100.1584%" y="1279.50"></text></g><g><title>AppInitMain (84 samples, 0.07%)</title><rect x="99.9084%" y="1253" width="0.0681%" height="15" fill="rgb(240,194,35)" fg:x="123245" fg:w="84"/><text x="100.1584%" y="1263.50"></text></g><g><title>InitAndLoadChainstate (84 samples, 0.07%)</title><rect x="99.9084%" y="1237" width="0.0681%" height="15" fill="rgb(219,10,44)" fg:x="123245" fg:w="84"/><text x="100.1584%" y="1247.50"></text></g><g><title>operator (84 samples, 0.07%)</title><rect x="99.9084%" y="1221" width="0.0681%" height="15" fill="rgb(251,220,35)" fg:x="123245" fg:w="84"/><text x="100.1584%" y="1231.50"></text></g><g><title>InitAndLoadChainstate (84 samples, 0.07%)</title><rect x="99.9084%" y="1205" width="0.0681%" height="15" fill="rgb(218,117,13)" fg:x="123245" fg:w="84"/><text x="100.1584%" y="1215.50"></text></g><g><title>node::LoadChainstate (84 samples, 0.07%)</title><rect x="99.9084%" y="1189" width="0.0681%" height="15" fill="rgb(221,213,40)" fg:x="123245" fg:w="84"/><text x="100.1584%" y="1199.50"></text></g><g><title>bitcoind-head (46,402 samples, 37.62%)</title><rect x="62.3770%" y="1301" width="37.6157%" height="15" fill="rgb(251,224,35)" fg:x="76947" fg:w="46402"/><text x="62.6270%" y="1311.50">bitcoind-head</text></g><g><title>all (123,358 samples, 100%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(241,33,39)" fg:x="0" fg:w="123358"/><text x="0.2500%" y="1327.50"></text></g></svg></svg>