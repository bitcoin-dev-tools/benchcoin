<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1590" onload="init(evt)" viewBox="0 0 1200 1590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1590" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1573.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1573.00"> </text><svg id="frames" x="10" width="1180" total_samples="6242"><g><title>b-addcon (4 samples, 0.06%)</title><rect x="0.0000%" y="1525" width="0.0641%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.06%)</title><rect x="0.0000%" y="1509" width="0.0641%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.06%)</title><rect x="0.0000%" y="1493" width="0.0641%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.06%)</title><rect x="0.0000%" y="1477" width="0.0641%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1487.50"></text></g><g><title>_M_run (4 samples, 0.06%)</title><rect x="0.0000%" y="1461" width="0.0641%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1471.50"></text></g><g><title>operator (4 samples, 0.06%)</title><rect x="0.0000%" y="1445" width="0.0641%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1455.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (4 samples, 0.06%)</title><rect x="0.0000%" y="1429" width="0.0641%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1439.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (4 samples, 0.06%)</title><rect x="0.0000%" y="1413" width="0.0641%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1423.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#3}&gt; &gt; &gt;::_M_run (4 samples, 0.06%)</title><rect x="0.0000%" y="1397" width="0.0641%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1407.50"></text></g><g><title>util::TraceThread (4 samples, 0.06%)</title><rect x="0.0000%" y="1381" width="0.0641%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1391.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (4 samples, 0.06%)</title><rect x="0.0000%" y="1365" width="0.0641%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1375.50"></text></g><g><title>CConnman::ThreadOpenAddedConnections (4 samples, 0.06%)</title><rect x="0.0000%" y="1349" width="0.0641%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1359.50"></text></g><g><title>CThreadInterrupt::sleep_for (4 samples, 0.06%)</title><rect x="0.0000%" y="1333" width="0.0641%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1343.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.06%)</title><rect x="0.0000%" y="1317" width="0.0641%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1327.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.06%)</title><rect x="0.0000%" y="1301" width="0.0641%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1311.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="0.0000%" y="1285" width="0.0641%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1295.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="0.0000%" y="1269" width="0.0641%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1279.50"></text></g><g><title>std::__condvar::wait_until (4 samples, 0.06%)</title><rect x="0.0000%" y="1253" width="0.0641%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1263.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (4 samples, 0.06%)</title><rect x="0.0000%" y="1237" width="0.0641%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1247.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.06%)</title><rect x="0.0000%" y="1221" width="0.0641%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1205" width="0.0641%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1189" width="0.0641%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1173" width="0.0641%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1157" width="0.0641%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1141" width="0.0641%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1125" width="0.0641%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1109" width="0.0641%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1093" width="0.0641%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1077" width="0.0641%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1061" width="0.0641%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="0.0000%" y="1045" width="0.0641%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0160%" y="1029" width="0.0481%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="3"/><text x="0.2660%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0160%" y="1013" width="0.0481%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="3"/><text x="0.2660%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0160%" y="997" width="0.0481%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="3"/><text x="0.2660%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0160%" y="981" width="0.0481%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="3"/><text x="0.2660%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0160%" y="965" width="0.0481%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="3"/><text x="0.2660%" y="975.50"></text></g><g><title>?? (1 samples, 0.02%)</title><rect x="0.0641%" y="1509" width="0.0160%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="0.3141%" y="1519.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="0.0641%" y="1493" width="0.0160%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="0.3141%" y="1503.50"></text></g><g><title>AddCoins (2 samples, 0.03%)</title><rect x="0.0801%" y="1509" width="0.0320%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="2"/><text x="0.3301%" y="1519.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="0.0961%" y="1493" width="0.0160%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="1"/><text x="0.3461%" y="1503.50"></text></g><g><title>Span&lt;std::byte const&gt;::Span&lt;std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="0.7530%" y="1493" width="0.0160%" height="15" fill="rgb(231,60,39)" fg:x="47" fg:w="1"/><text x="1.0030%" y="1503.50"></text></g><g><title>std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt;::data (1 samples, 0.02%)</title><rect x="0.7530%" y="1477" width="0.0160%" height="15" fill="rgb(208,69,12)" fg:x="47" fg:w="1"/><text x="1.0030%" y="1487.50"></text></g><g><title>_IO_fwrite (3 samples, 0.05%)</title><rect x="0.7690%" y="1493" width="0.0481%" height="15" fill="rgb(235,93,37)" fg:x="48" fg:w="3"/><text x="1.0190%" y="1503.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (19 samples, 0.30%)</title><rect x="0.8170%" y="1493" width="0.3044%" height="15" fill="rgb(213,116,39)" fg:x="51" fg:w="19"/><text x="1.0670%" y="1503.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (19 samples, 0.30%)</title><rect x="0.8170%" y="1477" width="0.3044%" height="15" fill="rgb(222,207,29)" fg:x="51" fg:w="19"/><text x="1.0670%" y="1487.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (19 samples, 0.30%)</title><rect x="0.8170%" y="1461" width="0.3044%" height="15" fill="rgb(206,96,30)" fg:x="51" fg:w="19"/><text x="1.0670%" y="1471.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (19 samples, 0.30%)</title><rect x="0.8170%" y="1445" width="0.3044%" height="15" fill="rgb(218,138,4)" fg:x="51" fg:w="19"/><text x="1.0670%" y="1455.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (19 samples, 0.30%)</title><rect x="0.8170%" y="1429" width="0.3044%" height="15" fill="rgb(250,191,14)" fg:x="51" fg:w="19"/><text x="1.0670%" y="1439.50"></text></g><g><title>void std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;std::byte, std::byte const&gt; (5 samples, 0.08%)</title><rect x="1.0413%" y="1413" width="0.0801%" height="15" fill="rgb(239,60,40)" fg:x="65" fg:w="5"/><text x="1.2913%" y="1423.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="1.1214%" y="1493" width="0.0160%" height="15" fill="rgb(206,27,48)" fg:x="70" fg:w="1"/><text x="1.3714%" y="1503.50"></text></g><g><title>AutoFile::write (163 samples, 2.61%)</title><rect x="0.1121%" y="1509" width="2.6113%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="163"/><text x="0.3621%" y="1519.50">Au..</text></g><g><title>util::Xor (99 samples, 1.59%)</title><rect x="1.1375%" y="1493" width="1.5860%" height="15" fill="rgb(250,213,24)" fg:x="71" fg:w="99"/><text x="1.3875%" y="1503.50"></text></g><g><title>std::operator^= (40 samples, 0.64%)</title><rect x="2.0827%" y="1477" width="0.6408%" height="15" fill="rgb(247,123,22)" fg:x="130" fg:w="40"/><text x="2.3327%" y="1487.50"></text></g><g><title>std::operator^ (40 samples, 0.64%)</title><rect x="2.0827%" y="1461" width="0.6408%" height="15" fill="rgb(231,138,38)" fg:x="130" fg:w="40"/><text x="2.3327%" y="1471.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="2.7395%" y="1493" width="0.0160%" height="15" fill="rgb(231,145,46)" fg:x="171" fg:w="1"/><text x="2.9895%" y="1503.50"></text></g><g><title>CCoinsViewCache::AddCoin (3 samples, 0.05%)</title><rect x="2.7235%" y="1509" width="0.0481%" height="15" fill="rgb(251,118,11)" fg:x="170" fg:w="3"/><text x="2.9735%" y="1519.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.7555%" y="1493" width="0.0160%" height="15" fill="rgb(217,147,25)" fg:x="172" fg:w="1"/><text x="3.0055%" y="1503.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.7555%" y="1477" width="0.0160%" height="15" fill="rgb(247,81,37)" fg:x="172" fg:w="1"/><text x="3.0055%" y="1487.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.7555%" y="1461" width="0.0160%" height="15" fill="rgb(209,12,38)" fg:x="172" fg:w="1"/><text x="3.0055%" y="1471.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.7555%" y="1445" width="0.0160%" height="15" fill="rgb(227,1,9)" fg:x="172" fg:w="1"/><text x="3.0055%" y="1455.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="2.7555%" y="1429" width="0.0160%" height="15" fill="rgb(248,47,43)" fg:x="172" fg:w="1"/><text x="3.0055%" y="1439.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="2.7715%" y="1509" width="0.0160%" height="15" fill="rgb(221,10,30)" fg:x="173" fg:w="1"/><text x="3.0215%" y="1519.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (1 samples, 0.02%)</title><rect x="2.7715%" y="1493" width="0.0160%" height="15" fill="rgb(210,229,1)" fg:x="173" fg:w="1"/><text x="3.0215%" y="1503.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="2.7715%" y="1477" width="0.0160%" height="15" fill="rgb(222,148,37)" fg:x="173" fg:w="1"/><text x="3.0215%" y="1487.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="2.7876%" y="1509" width="0.0160%" height="15" fill="rgb(234,67,33)" fg:x="174" fg:w="1"/><text x="3.0376%" y="1519.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="2.7876%" y="1493" width="0.0160%" height="15" fill="rgb(247,98,35)" fg:x="174" fg:w="1"/><text x="3.0376%" y="1503.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="2.7876%" y="1477" width="0.0160%" height="15" fill="rgb(247,138,52)" fg:x="174" fg:w="1"/><text x="3.0376%" y="1487.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="2.7876%" y="1461" width="0.0160%" height="15" fill="rgb(213,79,30)" fg:x="174" fg:w="1"/><text x="3.0376%" y="1471.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="2.7876%" y="1445" width="0.0160%" height="15" fill="rgb(246,177,23)" fg:x="174" fg:w="1"/><text x="3.0376%" y="1455.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="2.7876%" y="1429" width="0.0160%" height="15" fill="rgb(230,62,27)" fg:x="174" fg:w="1"/><text x="3.0376%" y="1439.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.03%)</title><rect x="2.8036%" y="1509" width="0.0320%" height="15" fill="rgb(216,154,8)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1519.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.03%)</title><rect x="2.8036%" y="1493" width="0.0320%" height="15" fill="rgb(244,35,45)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1503.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.03%)</title><rect x="2.8036%" y="1477" width="0.0320%" height="15" fill="rgb(251,115,12)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1487.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="2.8036%" y="1461" width="0.0320%" height="15" fill="rgb(240,54,50)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1471.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="2.8036%" y="1445" width="0.0320%" height="15" fill="rgb(233,84,52)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1455.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="2.8036%" y="1429" width="0.0320%" height="15" fill="rgb(207,117,47)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1439.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="2.8036%" y="1413" width="0.0320%" height="15" fill="rgb(249,43,39)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1423.50"></text></g><g><title>Coin::Coin (2 samples, 0.03%)</title><rect x="2.8036%" y="1397" width="0.0320%" height="15" fill="rgb(209,38,44)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1407.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.03%)</title><rect x="2.8036%" y="1381" width="0.0320%" height="15" fill="rgb(236,212,23)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1391.50"></text></g><g><title>CScript::CScript (2 samples, 0.03%)</title><rect x="2.8036%" y="1365" width="0.0320%" height="15" fill="rgb(242,79,21)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1375.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.03%)</title><rect x="2.8036%" y="1349" width="0.0320%" height="15" fill="rgb(211,96,35)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1359.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (2 samples, 0.03%)</title><rect x="2.8036%" y="1333" width="0.0320%" height="15" fill="rgb(253,215,40)" fg:x="175" fg:w="2"/><text x="3.0536%" y="1343.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="2.8356%" y="1509" width="0.0160%" height="15" fill="rgb(211,81,21)" fg:x="177" fg:w="1"/><text x="3.0856%" y="1519.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="2.8356%" y="1493" width="0.0160%" height="15" fill="rgb(208,190,38)" fg:x="177" fg:w="1"/><text x="3.0856%" y="1503.50"></text></g><g><title>DataStream::~DataStream (1 samples, 0.02%)</title><rect x="2.8356%" y="1477" width="0.0160%" height="15" fill="rgb(235,213,38)" fg:x="177" fg:w="1"/><text x="3.0856%" y="1487.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="2.8356%" y="1461" width="0.0160%" height="15" fill="rgb(237,122,38)" fg:x="177" fg:w="1"/><text x="3.0856%" y="1471.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="2.8356%" y="1445" width="0.0160%" height="15" fill="rgb(244,218,35)" fg:x="177" fg:w="1"/><text x="3.0856%" y="1455.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="2.8356%" y="1429" width="0.0160%" height="15" fill="rgb(240,68,47)" fg:x="177" fg:w="1"/><text x="3.0856%" y="1439.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="2.8356%" y="1413" width="0.0160%" height="15" fill="rgb(210,16,53)" fg:x="177" fg:w="1"/><text x="3.0856%" y="1423.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (1 samples, 0.02%)</title><rect x="2.8356%" y="1397" width="0.0160%" height="15" fill="rgb(235,124,12)" fg:x="177" fg:w="1"/><text x="3.0856%" y="1407.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="2.8517%" y="1509" width="0.0320%" height="15" fill="rgb(224,169,11)" fg:x="178" fg:w="2"/><text x="3.1017%" y="1519.50"></text></g><g><title>CScript::GetSigOpCount (2 samples, 0.03%)</title><rect x="2.8837%" y="1509" width="0.0320%" height="15" fill="rgb(250,166,2)" fg:x="180" fg:w="2"/><text x="3.1337%" y="1519.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="2.8997%" y="1493" width="0.0160%" height="15" fill="rgb(242,216,29)" fg:x="181" fg:w="1"/><text x="3.1497%" y="1503.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="2.8997%" y="1477" width="0.0160%" height="15" fill="rgb(230,116,27)" fg:x="181" fg:w="1"/><text x="3.1497%" y="1487.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="2.8997%" y="1461" width="0.0160%" height="15" fill="rgb(228,99,48)" fg:x="181" fg:w="1"/><text x="3.1497%" y="1471.50"></text></g><g><title>CScript::IsPayToScriptHash (1 samples, 0.02%)</title><rect x="2.9157%" y="1509" width="0.0160%" height="15" fill="rgb(253,11,6)" fg:x="182" fg:w="1"/><text x="3.1657%" y="1519.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="2.9157%" y="1493" width="0.0160%" height="15" fill="rgb(247,143,39)" fg:x="182" fg:w="1"/><text x="3.1657%" y="1503.50"></text></g><g><title>CScript::IsWitnessProgram (2 samples, 0.03%)</title><rect x="2.9318%" y="1509" width="0.0320%" height="15" fill="rgb(236,97,10)" fg:x="183" fg:w="2"/><text x="3.1818%" y="1519.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1493" width="0.0160%" height="15" fill="rgb(233,208,19)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1503.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1477" width="0.0160%" height="15" fill="rgb(216,164,2)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1487.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1461" width="0.0160%" height="15" fill="rgb(220,129,5)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1471.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1445" width="0.0160%" height="15" fill="rgb(242,17,10)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1455.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1429" width="0.0160%" height="15" fill="rgb(242,107,0)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1439.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1413" width="0.0160%" height="15" fill="rgb(251,28,31)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1423.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1397" width="0.0160%" height="15" fill="rgb(233,223,10)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1407.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1381" width="0.0160%" height="15" fill="rgb(215,21,27)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1365" width="0.0160%" height="15" fill="rgb(232,23,21)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.9478%" y="1349" width="0.0160%" height="15" fill="rgb(244,5,23)" fg:x="184" fg:w="1"/><text x="3.1978%" y="1359.50"></text></g><g><title>CBlockUndo::~CBlockUndo (2 samples, 0.03%)</title><rect x="2.9798%" y="1493" width="0.0320%" height="15" fill="rgb(226,81,46)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1503.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (2 samples, 0.03%)</title><rect x="2.9798%" y="1477" width="0.0320%" height="15" fill="rgb(247,70,30)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1487.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="2.9798%" y="1461" width="0.0320%" height="15" fill="rgb(212,68,19)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1471.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (2 samples, 0.03%)</title><rect x="2.9798%" y="1445" width="0.0320%" height="15" fill="rgb(240,187,13)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1455.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (2 samples, 0.03%)</title><rect x="2.9798%" y="1429" width="0.0320%" height="15" fill="rgb(223,113,26)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (2 samples, 0.03%)</title><rect x="2.9798%" y="1413" width="0.0320%" height="15" fill="rgb(206,192,2)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1423.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (2 samples, 0.03%)</title><rect x="2.9798%" y="1397" width="0.0320%" height="15" fill="rgb(241,108,4)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1407.50"></text></g><g><title>CTxUndo::~CTxUndo (2 samples, 0.03%)</title><rect x="2.9798%" y="1381" width="0.0320%" height="15" fill="rgb(247,173,49)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1391.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (2 samples, 0.03%)</title><rect x="2.9798%" y="1365" width="0.0320%" height="15" fill="rgb(224,114,35)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1375.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (2 samples, 0.03%)</title><rect x="2.9798%" y="1349" width="0.0320%" height="15" fill="rgb(245,159,27)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1359.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (2 samples, 0.03%)</title><rect x="2.9798%" y="1333" width="0.0320%" height="15" fill="rgb(245,172,44)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1343.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (2 samples, 0.03%)</title><rect x="2.9798%" y="1317" width="0.0320%" height="15" fill="rgb(236,23,11)" fg:x="186" fg:w="2"/><text x="3.2298%" y="1327.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="2.9958%" y="1301" width="0.0160%" height="15" fill="rgb(205,117,38)" fg:x="187" fg:w="1"/><text x="3.2458%" y="1311.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="2.9958%" y="1285" width="0.0160%" height="15" fill="rgb(237,72,25)" fg:x="187" fg:w="1"/><text x="3.2458%" y="1295.50"></text></g><g><title>Coin::~Coin (1 samples, 0.02%)</title><rect x="2.9958%" y="1269" width="0.0160%" height="15" fill="rgb(244,70,9)" fg:x="187" fg:w="1"/><text x="3.2458%" y="1279.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.02%)</title><rect x="2.9958%" y="1253" width="0.0160%" height="15" fill="rgb(217,125,39)" fg:x="187" fg:w="1"/><text x="3.2458%" y="1263.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="2.9958%" y="1237" width="0.0160%" height="15" fill="rgb(235,36,10)" fg:x="187" fg:w="1"/><text x="3.2458%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="2.9958%" y="1221" width="0.0160%" height="15" fill="rgb(251,123,47)" fg:x="187" fg:w="1"/><text x="3.2458%" y="1231.50"></text></g><g><title>CCheckQueueControl&lt;CScriptCheck&gt;::Add (1 samples, 0.02%)</title><rect x="3.0119%" y="1493" width="0.0160%" height="15" fill="rgb(221,13,13)" fg:x="188" fg:w="1"/><text x="3.2619%" y="1503.50"></text></g><g><title>Chainstate::ConnectBlock (5 samples, 0.08%)</title><rect x="2.9638%" y="1509" width="0.0801%" height="15" fill="rgb(238,131,9)" fg:x="185" fg:w="5"/><text x="3.2138%" y="1519.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="3.0279%" y="1493" width="0.0160%" height="15" fill="rgb(211,50,8)" fg:x="189" fg:w="1"/><text x="3.2779%" y="1503.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (11 samples, 0.18%)</title><rect x="3.0439%" y="949" width="0.1762%" height="15" fill="rgb(245,182,24)" fg:x="190" fg:w="11"/><text x="3.2939%" y="959.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (11 samples, 0.18%)</title><rect x="3.0439%" y="933" width="0.1762%" height="15" fill="rgb(242,14,37)" fg:x="190" fg:w="11"/><text x="3.2939%" y="943.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (11 samples, 0.18%)</title><rect x="3.0439%" y="917" width="0.1762%" height="15" fill="rgb(246,228,12)" fg:x="190" fg:w="11"/><text x="3.2939%" y="927.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (11 samples, 0.18%)</title><rect x="3.0439%" y="901" width="0.1762%" height="15" fill="rgb(213,55,15)" fg:x="190" fg:w="11"/><text x="3.2939%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (11 samples, 0.18%)</title><rect x="3.0439%" y="885" width="0.1762%" height="15" fill="rgb(209,9,3)" fg:x="190" fg:w="11"/><text x="3.2939%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (11 samples, 0.18%)</title><rect x="3.0439%" y="869" width="0.1762%" height="15" fill="rgb(230,59,30)" fg:x="190" fg:w="11"/><text x="3.2939%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (11 samples, 0.18%)</title><rect x="3.0439%" y="853" width="0.1762%" height="15" fill="rgb(209,121,21)" fg:x="190" fg:w="11"/><text x="3.2939%" y="863.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (11 samples, 0.18%)</title><rect x="3.0439%" y="837" width="0.1762%" height="15" fill="rgb(220,109,13)" fg:x="190" fg:w="11"/><text x="3.2939%" y="847.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (11 samples, 0.18%)</title><rect x="3.0439%" y="821" width="0.1762%" height="15" fill="rgb(232,18,1)" fg:x="190" fg:w="11"/><text x="3.2939%" y="831.50"></text></g><g><title>AutoFile::write (11 samples, 0.18%)</title><rect x="3.0439%" y="805" width="0.1762%" height="15" fill="rgb(215,41,42)" fg:x="190" fg:w="11"/><text x="3.2939%" y="815.50"></text></g><g><title>_IO_fwrite (11 samples, 0.18%)</title><rect x="3.0439%" y="789" width="0.1762%" height="15" fill="rgb(224,123,36)" fg:x="190" fg:w="11"/><text x="3.2939%" y="799.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="3.1881%" y="773" width="0.0320%" height="15" fill="rgb(240,125,3)" fg:x="199" fg:w="2"/><text x="3.4381%" y="783.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="3.1881%" y="757" width="0.0320%" height="15" fill="rgb(205,98,50)" fg:x="199" fg:w="2"/><text x="3.4381%" y="767.50"></text></g><g><title>new_do_write (2 samples, 0.03%)</title><rect x="3.1881%" y="741" width="0.0320%" height="15" fill="rgb(205,185,37)" fg:x="199" fg:w="2"/><text x="3.4381%" y="751.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="3.1881%" y="725" width="0.0320%" height="15" fill="rgb(238,207,15)" fg:x="199" fg:w="2"/><text x="3.4381%" y="735.50"></text></g><g><title>__GI___libc_write (2 samples, 0.03%)</title><rect x="3.1881%" y="709" width="0.0320%" height="15" fill="rgb(213,199,42)" fg:x="199" fg:w="2"/><text x="3.4381%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.1881%" y="693" width="0.0320%" height="15" fill="rgb(235,201,11)" fg:x="199" fg:w="2"/><text x="3.4381%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.1881%" y="677" width="0.0320%" height="15" fill="rgb(207,46,11)" fg:x="199" fg:w="2"/><text x="3.4381%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.1881%" y="661" width="0.0320%" height="15" fill="rgb(241,35,35)" fg:x="199" fg:w="2"/><text x="3.4381%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.1881%" y="645" width="0.0320%" height="15" fill="rgb(243,32,47)" fg:x="199" fg:w="2"/><text x="3.4381%" y="655.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.2041%" y="629" width="0.0160%" height="15" fill="rgb(247,202,23)" fg:x="200" fg:w="1"/><text x="3.4541%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2041%" y="613" width="0.0160%" height="15" fill="rgb(219,102,11)" fg:x="200" fg:w="1"/><text x="3.4541%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2041%" y="597" width="0.0160%" height="15" fill="rgb(243,110,44)" fg:x="200" fg:w="1"/><text x="3.4541%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2041%" y="581" width="0.0160%" height="15" fill="rgb(222,74,54)" fg:x="200" fg:w="1"/><text x="3.4541%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2041%" y="565" width="0.0160%" height="15" fill="rgb(216,99,12)" fg:x="200" fg:w="1"/><text x="3.4541%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2041%" y="549" width="0.0160%" height="15" fill="rgb(226,22,26)" fg:x="200" fg:w="1"/><text x="3.4541%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2041%" y="533" width="0.0160%" height="15" fill="rgb(217,163,10)" fg:x="200" fg:w="1"/><text x="3.4541%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2041%" y="517" width="0.0160%" height="15" fill="rgb(213,25,53)" fg:x="200" fg:w="1"/><text x="3.4541%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2041%" y="501" width="0.0160%" height="15" fill="rgb(252,105,26)" fg:x="200" fg:w="1"/><text x="3.4541%" y="511.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="3.2682%" y="661" width="0.0801%" height="15" fill="rgb(220,39,43)" fg:x="204" fg:w="5"/><text x="3.5182%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="3.2682%" y="645" width="0.0801%" height="15" fill="rgb(229,68,48)" fg:x="204" fg:w="5"/><text x="3.5182%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="3.2682%" y="629" width="0.0801%" height="15" fill="rgb(252,8,32)" fg:x="204" fg:w="5"/><text x="3.5182%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="3.2842%" y="613" width="0.0641%" height="15" fill="rgb(223,20,43)" fg:x="205" fg:w="4"/><text x="3.5342%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="3.2842%" y="597" width="0.0641%" height="15" fill="rgb(229,81,49)" fg:x="205" fg:w="4"/><text x="3.5342%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.3002%" y="581" width="0.0481%" height="15" fill="rgb(236,28,36)" fg:x="206" fg:w="3"/><text x="3.5502%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.3162%" y="565" width="0.0320%" height="15" fill="rgb(249,185,26)" fg:x="207" fg:w="2"/><text x="3.5662%" y="575.50"></text></g><g><title>_IO_fwrite (10 samples, 0.16%)</title><rect x="3.2201%" y="853" width="0.1602%" height="15" fill="rgb(249,174,33)" fg:x="201" fg:w="10"/><text x="3.4701%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="3.2522%" y="837" width="0.1282%" height="15" fill="rgb(233,201,37)" fg:x="203" fg:w="8"/><text x="3.5022%" y="847.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="3.2522%" y="821" width="0.1282%" height="15" fill="rgb(221,78,26)" fg:x="203" fg:w="8"/><text x="3.5022%" y="831.50"></text></g><g><title>new_do_write (8 samples, 0.13%)</title><rect x="3.2522%" y="805" width="0.1282%" height="15" fill="rgb(250,127,30)" fg:x="203" fg:w="8"/><text x="3.5022%" y="815.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="3.2522%" y="789" width="0.1282%" height="15" fill="rgb(230,49,44)" fg:x="203" fg:w="8"/><text x="3.5022%" y="799.50"></text></g><g><title>__GI___libc_write (8 samples, 0.13%)</title><rect x="3.2522%" y="773" width="0.1282%" height="15" fill="rgb(229,67,23)" fg:x="203" fg:w="8"/><text x="3.5022%" y="783.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="3.2522%" y="757" width="0.1282%" height="15" fill="rgb(249,83,47)" fg:x="203" fg:w="8"/><text x="3.5022%" y="767.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="3.2522%" y="741" width="0.1282%" height="15" fill="rgb(215,43,3)" fg:x="203" fg:w="8"/><text x="3.5022%" y="751.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="3.2522%" y="725" width="0.1282%" height="15" fill="rgb(238,154,13)" fg:x="203" fg:w="8"/><text x="3.5022%" y="735.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="3.2682%" y="709" width="0.1121%" height="15" fill="rgb(219,56,2)" fg:x="204" fg:w="7"/><text x="3.5182%" y="719.50"></text></g><g><title>[[ext4]] (7 samples, 0.11%)</title><rect x="3.2682%" y="693" width="0.1121%" height="15" fill="rgb(233,0,4)" fg:x="204" fg:w="7"/><text x="3.5182%" y="703.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="3.2682%" y="677" width="0.1121%" height="15" fill="rgb(235,30,7)" fg:x="204" fg:w="7"/><text x="3.5182%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.3483%" y="661" width="0.0320%" height="15" fill="rgb(250,79,13)" fg:x="209" fg:w="2"/><text x="3.5983%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3643%" y="645" width="0.0160%" height="15" fill="rgb(211,146,34)" fg:x="210" fg:w="1"/><text x="3.6143%" y="655.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.3643%" y="629" width="0.0160%" height="15" fill="rgb(228,22,38)" fg:x="210" fg:w="1"/><text x="3.6143%" y="639.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.3643%" y="613" width="0.0160%" height="15" fill="rgb(235,168,5)" fg:x="210" fg:w="1"/><text x="3.6143%" y="623.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.3643%" y="597" width="0.0160%" height="15" fill="rgb(221,155,16)" fg:x="210" fg:w="1"/><text x="3.6143%" y="607.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.3643%" y="581" width="0.0160%" height="15" fill="rgb(215,215,53)" fg:x="210" fg:w="1"/><text x="3.6143%" y="591.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.3803%" y="853" width="0.0160%" height="15" fill="rgb(223,4,10)" fg:x="211" fg:w="1"/><text x="3.6303%" y="863.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.3803%" y="837" width="0.0160%" height="15" fill="rgb(234,103,6)" fg:x="211" fg:w="1"/><text x="3.6303%" y="847.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.3803%" y="821" width="0.0160%" height="15" fill="rgb(227,97,0)" fg:x="211" fg:w="1"/><text x="3.6303%" y="831.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.3803%" y="805" width="0.0160%" height="15" fill="rgb(234,150,53)" fg:x="211" fg:w="1"/><text x="3.6303%" y="815.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="3.3803%" y="789" width="0.0160%" height="15" fill="rgb(228,201,54)" fg:x="211" fg:w="1"/><text x="3.6303%" y="799.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (14 samples, 0.22%)</title><rect x="3.2201%" y="901" width="0.2243%" height="15" fill="rgb(222,22,37)" fg:x="201" fg:w="14"/><text x="3.4701%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (14 samples, 0.22%)</title><rect x="3.2201%" y="885" width="0.2243%" height="15" fill="rgb(237,53,32)" fg:x="201" fg:w="14"/><text x="3.4701%" y="895.50"></text></g><g><title>AutoFile::write (14 samples, 0.22%)</title><rect x="3.2201%" y="869" width="0.2243%" height="15" fill="rgb(233,25,53)" fg:x="201" fg:w="14"/><text x="3.4701%" y="879.50"></text></g><g><title>util::Xor (3 samples, 0.05%)</title><rect x="3.3963%" y="853" width="0.0481%" height="15" fill="rgb(210,40,34)" fg:x="212" fg:w="3"/><text x="3.6463%" y="863.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="3.4284%" y="837" width="0.0160%" height="15" fill="rgb(241,220,44)" fg:x="214" fg:w="1"/><text x="3.6784%" y="847.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="3.4284%" y="821" width="0.0160%" height="15" fill="rgb(235,28,35)" fg:x="214" fg:w="1"/><text x="3.6784%" y="831.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="3.4444%" y="853" width="0.0160%" height="15" fill="rgb(210,56,17)" fg:x="215" fg:w="1"/><text x="3.6944%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.4444%" y="837" width="0.0160%" height="15" fill="rgb(224,130,29)" fg:x="215" fg:w="1"/><text x="3.6944%" y="847.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.4444%" y="821" width="0.0160%" height="15" fill="rgb(235,212,8)" fg:x="215" fg:w="1"/><text x="3.6944%" y="831.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="3.4444%" y="805" width="0.0160%" height="15" fill="rgb(223,33,50)" fg:x="215" fg:w="1"/><text x="3.6944%" y="815.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.4444%" y="789" width="0.0160%" height="15" fill="rgb(219,149,13)" fg:x="215" fg:w="1"/><text x="3.6944%" y="799.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="3.4444%" y="773" width="0.0160%" height="15" fill="rgb(250,156,29)" fg:x="215" fg:w="1"/><text x="3.6944%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4444%" y="757" width="0.0160%" height="15" fill="rgb(216,193,19)" fg:x="215" fg:w="1"/><text x="3.6944%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4444%" y="741" width="0.0160%" height="15" fill="rgb(216,135,14)" fg:x="215" fg:w="1"/><text x="3.6944%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4444%" y="725" width="0.0160%" height="15" fill="rgb(241,47,5)" fg:x="215" fg:w="1"/><text x="3.6944%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4444%" y="709" width="0.0160%" height="15" fill="rgb(233,42,35)" fg:x="215" fg:w="1"/><text x="3.6944%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4444%" y="693" width="0.0160%" height="15" fill="rgb(231,13,6)" fg:x="215" fg:w="1"/><text x="3.6944%" y="703.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (2 samples, 0.03%)</title><rect x="3.4444%" y="901" width="0.0320%" height="15" fill="rgb(207,181,40)" fg:x="215" fg:w="2"/><text x="3.6944%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char&gt; (2 samples, 0.03%)</title><rect x="3.4444%" y="885" width="0.0320%" height="15" fill="rgb(254,173,49)" fg:x="215" fg:w="2"/><text x="3.6944%" y="895.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="3.4444%" y="869" width="0.0320%" height="15" fill="rgb(221,1,38)" fg:x="215" fg:w="2"/><text x="3.6944%" y="879.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.4604%" y="853" width="0.0160%" height="15" fill="rgb(206,124,46)" fg:x="216" fg:w="1"/><text x="3.7104%" y="863.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.4604%" y="837" width="0.0160%" height="15" fill="rgb(249,21,11)" fg:x="216" fg:w="1"/><text x="3.7104%" y="847.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.4604%" y="821" width="0.0160%" height="15" fill="rgb(222,201,40)" fg:x="216" fg:w="1"/><text x="3.7104%" y="831.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.4604%" y="805" width="0.0160%" height="15" fill="rgb(235,61,29)" fg:x="216" fg:w="1"/><text x="3.7104%" y="815.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="3.4604%" y="789" width="0.0160%" height="15" fill="rgb(219,207,3)" fg:x="216" fg:w="1"/><text x="3.7104%" y="799.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (28 samples, 0.45%)</title><rect x="3.0439%" y="1045" width="0.4486%" height="15" fill="rgb(222,56,46)" fg:x="190" fg:w="28"/><text x="3.2939%" y="1055.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (28 samples, 0.45%)</title><rect x="3.0439%" y="1029" width="0.4486%" height="15" fill="rgb(239,76,54)" fg:x="190" fg:w="28"/><text x="3.2939%" y="1039.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (28 samples, 0.45%)</title><rect x="3.0439%" y="1013" width="0.4486%" height="15" fill="rgb(231,124,27)" fg:x="190" fg:w="28"/><text x="3.2939%" y="1023.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (28 samples, 0.45%)</title><rect x="3.0439%" y="997" width="0.4486%" height="15" fill="rgb(249,195,6)" fg:x="190" fg:w="28"/><text x="3.2939%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (28 samples, 0.45%)</title><rect x="3.0439%" y="981" width="0.4486%" height="15" fill="rgb(237,174,47)" fg:x="190" fg:w="28"/><text x="3.2939%" y="991.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (28 samples, 0.45%)</title><rect x="3.0439%" y="965" width="0.4486%" height="15" fill="rgb(206,201,31)" fg:x="190" fg:w="28"/><text x="3.2939%" y="975.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (17 samples, 0.27%)</title><rect x="3.2201%" y="949" width="0.2723%" height="15" fill="rgb(231,57,52)" fg:x="201" fg:w="17"/><text x="3.4701%" y="959.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (17 samples, 0.27%)</title><rect x="3.2201%" y="933" width="0.2723%" height="15" fill="rgb(248,177,22)" fg:x="201" fg:w="17"/><text x="3.4701%" y="943.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (17 samples, 0.27%)</title><rect x="3.2201%" y="917" width="0.2723%" height="15" fill="rgb(215,211,37)" fg:x="201" fg:w="17"/><text x="3.4701%" y="927.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="3.4764%" y="901" width="0.0160%" height="15" fill="rgb(241,128,51)" fg:x="217" fg:w="1"/><text x="3.7264%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="3.4764%" y="885" width="0.0160%" height="15" fill="rgb(227,165,31)" fg:x="217" fg:w="1"/><text x="3.7264%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="3.4764%" y="869" width="0.0160%" height="15" fill="rgb(228,167,24)" fg:x="217" fg:w="1"/><text x="3.7264%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (1 samples, 0.02%)</title><rect x="3.4764%" y="853" width="0.0160%" height="15" fill="rgb(228,143,12)" fg:x="217" fg:w="1"/><text x="3.7264%" y="863.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="3.4764%" y="837" width="0.0160%" height="15" fill="rgb(249,149,8)" fg:x="217" fg:w="1"/><text x="3.7264%" y="847.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="3.4764%" y="821" width="0.0160%" height="15" fill="rgb(243,35,44)" fg:x="217" fg:w="1"/><text x="3.7264%" y="831.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="3.4764%" y="805" width="0.0160%" height="15" fill="rgb(246,89,9)" fg:x="217" fg:w="1"/><text x="3.7264%" y="815.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="3.4764%" y="789" width="0.0160%" height="15" fill="rgb(233,213,13)" fg:x="217" fg:w="1"/><text x="3.7264%" y="799.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.4764%" y="773" width="0.0160%" height="15" fill="rgb(233,141,41)" fg:x="217" fg:w="1"/><text x="3.7264%" y="783.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.4764%" y="757" width="0.0160%" height="15" fill="rgb(239,167,4)" fg:x="217" fg:w="1"/><text x="3.7264%" y="767.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="3.4764%" y="741" width="0.0160%" height="15" fill="rgb(209,217,16)" fg:x="217" fg:w="1"/><text x="3.7264%" y="751.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.4764%" y="725" width="0.0160%" height="15" fill="rgb(219,88,35)" fg:x="217" fg:w="1"/><text x="3.7264%" y="735.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="3.4764%" y="709" width="0.0160%" height="15" fill="rgb(220,193,23)" fg:x="217" fg:w="1"/><text x="3.7264%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="693" width="0.0160%" height="15" fill="rgb(230,90,52)" fg:x="217" fg:w="1"/><text x="3.7264%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="677" width="0.0160%" height="15" fill="rgb(252,106,19)" fg:x="217" fg:w="1"/><text x="3.7264%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="661" width="0.0160%" height="15" fill="rgb(206,74,20)" fg:x="217" fg:w="1"/><text x="3.7264%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="645" width="0.0160%" height="15" fill="rgb(230,138,44)" fg:x="217" fg:w="1"/><text x="3.7264%" y="655.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.4764%" y="629" width="0.0160%" height="15" fill="rgb(235,182,43)" fg:x="217" fg:w="1"/><text x="3.7264%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="613" width="0.0160%" height="15" fill="rgb(242,16,51)" fg:x="217" fg:w="1"/><text x="3.7264%" y="623.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.4764%" y="597" width="0.0160%" height="15" fill="rgb(248,9,4)" fg:x="217" fg:w="1"/><text x="3.7264%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="581" width="0.0160%" height="15" fill="rgb(210,31,22)" fg:x="217" fg:w="1"/><text x="3.7264%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="565" width="0.0160%" height="15" fill="rgb(239,54,39)" fg:x="217" fg:w="1"/><text x="3.7264%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="549" width="0.0160%" height="15" fill="rgb(230,99,41)" fg:x="217" fg:w="1"/><text x="3.7264%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="533" width="0.0160%" height="15" fill="rgb(253,106,12)" fg:x="217" fg:w="1"/><text x="3.7264%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4764%" y="517" width="0.0160%" height="15" fill="rgb(213,46,41)" fg:x="217" fg:w="1"/><text x="3.7264%" y="527.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="3.4925%" y="1045" width="0.0961%" height="15" fill="rgb(215,133,35)" fg:x="218" fg:w="6"/><text x="3.7425%" y="1055.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (6 samples, 0.10%)</title><rect x="3.4925%" y="1029" width="0.0961%" height="15" fill="rgb(213,28,5)" fg:x="218" fg:w="6"/><text x="3.7425%" y="1039.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (6 samples, 0.10%)</title><rect x="3.4925%" y="1013" width="0.0961%" height="15" fill="rgb(215,77,49)" fg:x="218" fg:w="6"/><text x="3.7425%" y="1023.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (6 samples, 0.10%)</title><rect x="3.4925%" y="997" width="0.0961%" height="15" fill="rgb(248,100,22)" fg:x="218" fg:w="6"/><text x="3.7425%" y="1007.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (6 samples, 0.10%)</title><rect x="3.4925%" y="981" width="0.0961%" height="15" fill="rgb(208,67,9)" fg:x="218" fg:w="6"/><text x="3.7425%" y="991.50"></text></g><g><title>AutoFile::write (6 samples, 0.10%)</title><rect x="3.4925%" y="965" width="0.0961%" height="15" fill="rgb(219,133,21)" fg:x="218" fg:w="6"/><text x="3.7425%" y="975.50"></text></g><g><title>_IO_fwrite (6 samples, 0.10%)</title><rect x="3.4925%" y="949" width="0.0961%" height="15" fill="rgb(246,46,29)" fg:x="218" fg:w="6"/><text x="3.7425%" y="959.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (37 samples, 0.59%)</title><rect x="3.0439%" y="1061" width="0.5928%" height="15" fill="rgb(246,185,52)" fg:x="190" fg:w="37"/><text x="3.2939%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="3.5886%" y="1045" width="0.0481%" height="15" fill="rgb(252,136,11)" fg:x="224" fg:w="3"/><text x="3.8386%" y="1055.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="3.5886%" y="1029" width="0.0481%" height="15" fill="rgb(219,138,53)" fg:x="224" fg:w="3"/><text x="3.8386%" y="1039.50"></text></g><g><title>AutoFile::write (3 samples, 0.05%)</title><rect x="3.5886%" y="1013" width="0.0481%" height="15" fill="rgb(211,51,23)" fg:x="224" fg:w="3"/><text x="3.8386%" y="1023.50"></text></g><g><title>_IO_fwrite (3 samples, 0.05%)</title><rect x="3.5886%" y="997" width="0.0481%" height="15" fill="rgb(247,221,28)" fg:x="224" fg:w="3"/><text x="3.8386%" y="1007.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (39 samples, 0.62%)</title><rect x="3.0439%" y="1509" width="0.6248%" height="15" fill="rgb(251,222,45)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1519.50"></text></g><g><title>Chainstate::ActivateBestChain (39 samples, 0.62%)</title><rect x="3.0439%" y="1493" width="0.6248%" height="15" fill="rgb(217,162,53)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1503.50"></text></g><g><title>Chainstate::ActivateBestChainStep (39 samples, 0.62%)</title><rect x="3.0439%" y="1477" width="0.6248%" height="15" fill="rgb(229,93,14)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1487.50"></text></g><g><title>Chainstate::ConnectTip (39 samples, 0.62%)</title><rect x="3.0439%" y="1461" width="0.6248%" height="15" fill="rgb(209,67,49)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1471.50"></text></g><g><title>Chainstate::ConnectBlock (39 samples, 0.62%)</title><rect x="3.0439%" y="1445" width="0.6248%" height="15" fill="rgb(213,87,29)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1455.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (39 samples, 0.62%)</title><rect x="3.0439%" y="1429" width="0.6248%" height="15" fill="rgb(205,151,52)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1439.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (39 samples, 0.62%)</title><rect x="3.0439%" y="1413" width="0.6248%" height="15" fill="rgb(253,215,39)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1423.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (39 samples, 0.62%)</title><rect x="3.0439%" y="1397" width="0.6248%" height="15" fill="rgb(221,220,41)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1407.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1381" width="0.6248%" height="15" fill="rgb(218,133,21)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1391.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1365" width="0.6248%" height="15" fill="rgb(221,193,43)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1375.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1349" width="0.6248%" height="15" fill="rgb(240,128,52)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1359.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1333" width="0.6248%" height="15" fill="rgb(253,114,12)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1343.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1317" width="0.6248%" height="15" fill="rgb(215,223,47)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1327.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1301" width="0.6248%" height="15" fill="rgb(248,225,23)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1311.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1285" width="0.6248%" height="15" fill="rgb(250,108,0)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1295.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1269" width="0.6248%" height="15" fill="rgb(228,208,7)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1279.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1253" width="0.6248%" height="15" fill="rgb(244,45,10)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1263.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1237" width="0.6248%" height="15" fill="rgb(207,125,25)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1247.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1221" width="0.6248%" height="15" fill="rgb(210,195,18)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1205" width="0.6248%" height="15" fill="rgb(249,80,12)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1215.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1189" width="0.6248%" height="15" fill="rgb(221,65,9)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1199.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1173" width="0.6248%" height="15" fill="rgb(235,49,36)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1183.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1157" width="0.6248%" height="15" fill="rgb(225,32,20)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1141" width="0.6248%" height="15" fill="rgb(215,141,46)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1151.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1125" width="0.6248%" height="15" fill="rgb(250,160,47)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1109" width="0.6248%" height="15" fill="rgb(216,222,40)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1093" width="0.6248%" height="15" fill="rgb(234,217,39)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (39 samples, 0.62%)</title><rect x="3.0439%" y="1077" width="0.6248%" height="15" fill="rgb(207,178,40)" fg:x="190" fg:w="39"/><text x="3.2939%" y="1087.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (2 samples, 0.03%)</title><rect x="3.6367%" y="1061" width="0.0320%" height="15" fill="rgb(221,136,13)" fg:x="227" fg:w="2"/><text x="3.8867%" y="1071.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (2 samples, 0.03%)</title><rect x="3.6367%" y="1045" width="0.0320%" height="15" fill="rgb(249,199,10)" fg:x="227" fg:w="2"/><text x="3.8867%" y="1055.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="3.6367%" y="1029" width="0.0320%" height="15" fill="rgb(249,222,13)" fg:x="227" fg:w="2"/><text x="3.8867%" y="1039.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="3.6367%" y="1013" width="0.0320%" height="15" fill="rgb(244,185,38)" fg:x="227" fg:w="2"/><text x="3.8867%" y="1023.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.6527%" y="997" width="0.0160%" height="15" fill="rgb(236,202,9)" fg:x="228" fg:w="1"/><text x="3.9027%" y="1007.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.6527%" y="981" width="0.0160%" height="15" fill="rgb(250,229,37)" fg:x="228" fg:w="1"/><text x="3.9027%" y="991.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="3.6527%" y="965" width="0.0160%" height="15" fill="rgb(206,174,23)" fg:x="228" fg:w="1"/><text x="3.9027%" y="975.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.6527%" y="949" width="0.0160%" height="15" fill="rgb(211,33,43)" fg:x="228" fg:w="1"/><text x="3.9027%" y="959.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="3.6527%" y="933" width="0.0160%" height="15" fill="rgb(245,58,50)" fg:x="228" fg:w="1"/><text x="3.9027%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="917" width="0.0160%" height="15" fill="rgb(244,68,36)" fg:x="228" fg:w="1"/><text x="3.9027%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="901" width="0.0160%" height="15" fill="rgb(232,229,15)" fg:x="228" fg:w="1"/><text x="3.9027%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="885" width="0.0160%" height="15" fill="rgb(254,30,23)" fg:x="228" fg:w="1"/><text x="3.9027%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="869" width="0.0160%" height="15" fill="rgb(235,160,14)" fg:x="228" fg:w="1"/><text x="3.9027%" y="879.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.6527%" y="853" width="0.0160%" height="15" fill="rgb(212,155,44)" fg:x="228" fg:w="1"/><text x="3.9027%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="837" width="0.0160%" height="15" fill="rgb(226,2,50)" fg:x="228" fg:w="1"/><text x="3.9027%" y="847.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.6527%" y="821" width="0.0160%" height="15" fill="rgb(234,177,6)" fg:x="228" fg:w="1"/><text x="3.9027%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="805" width="0.0160%" height="15" fill="rgb(217,24,9)" fg:x="228" fg:w="1"/><text x="3.9027%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="789" width="0.0160%" height="15" fill="rgb(220,13,46)" fg:x="228" fg:w="1"/><text x="3.9027%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="773" width="0.0160%" height="15" fill="rgb(239,221,27)" fg:x="228" fg:w="1"/><text x="3.9027%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="757" width="0.0160%" height="15" fill="rgb(222,198,25)" fg:x="228" fg:w="1"/><text x="3.9027%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6527%" y="741" width="0.0160%" height="15" fill="rgb(211,99,13)" fg:x="228" fg:w="1"/><text x="3.9027%" y="751.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::set (2 samples, 0.03%)</title><rect x="3.6847%" y="1493" width="0.0320%" height="15" fill="rgb(232,111,31)" fg:x="230" fg:w="2"/><text x="3.9347%" y="1503.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Rb_tree (2 samples, 0.03%)</title><rect x="3.6847%" y="1477" width="0.0320%" height="15" fill="rgb(245,82,37)" fg:x="230" fg:w="2"/><text x="3.9347%" y="1487.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Rb_tree_impl&lt;std::less&lt;COutPoint&gt;, true&gt;::_Rb_tree_impl (2 samples, 0.03%)</title><rect x="3.6847%" y="1461" width="0.0320%" height="15" fill="rgb(227,149,46)" fg:x="230" fg:w="2"/><text x="3.9347%" y="1471.50"></text></g><g><title>std::_Rb_tree_header::_Rb_tree_header (2 samples, 0.03%)</title><rect x="3.6847%" y="1445" width="0.0320%" height="15" fill="rgb(218,36,50)" fg:x="230" fg:w="2"/><text x="3.9347%" y="1455.50"></text></g><g><title>std::_Rb_tree_header::_M_reset (2 samples, 0.03%)</title><rect x="3.6847%" y="1429" width="0.0320%" height="15" fill="rgb(226,80,48)" fg:x="230" fg:w="2"/><text x="3.9347%" y="1439.50"></text></g><g><title>CheckTransaction (4 samples, 0.06%)</title><rect x="3.6687%" y="1509" width="0.0641%" height="15" fill="rgb(238,224,15)" fg:x="229" fg:w="4"/><text x="3.9187%" y="1519.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1493" width="0.0160%" height="15" fill="rgb(241,136,10)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1503.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="3.7168%" y="1477" width="0.0160%" height="15" fill="rgb(208,32,45)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1487.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1461" width="0.0160%" height="15" fill="rgb(207,135,9)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1471.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1445" width="0.0160%" height="15" fill="rgb(206,86,44)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1455.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1429" width="0.0160%" height="15" fill="rgb(245,177,15)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1439.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1413" width="0.0160%" height="15" fill="rgb(206,64,50)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1423.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1397" width="0.0160%" height="15" fill="rgb(234,36,40)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1407.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="3.7168%" y="1381" width="0.0160%" height="15" fill="rgb(213,64,8)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1391.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1365" width="0.0160%" height="15" fill="rgb(210,75,36)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1375.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1349" width="0.0160%" height="15" fill="rgb(229,88,21)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1359.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1333" width="0.0160%" height="15" fill="rgb(252,204,47)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1343.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1317" width="0.0160%" height="15" fill="rgb(208,77,27)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1327.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1301" width="0.0160%" height="15" fill="rgb(221,76,26)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1311.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1285" width="0.0160%" height="15" fill="rgb(225,139,18)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1295.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1269" width="0.0160%" height="15" fill="rgb(230,137,11)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1279.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1253" width="0.0160%" height="15" fill="rgb(212,28,1)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1263.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1237" width="0.0160%" height="15" fill="rgb(248,164,17)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1247.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1221" width="0.0160%" height="15" fill="rgb(222,171,42)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1231.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1205" width="0.0160%" height="15" fill="rgb(243,84,45)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1189" width="0.0160%" height="15" fill="rgb(252,49,23)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1199.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1173" width="0.0160%" height="15" fill="rgb(215,19,7)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1183.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1157" width="0.0160%" height="15" fill="rgb(238,81,41)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1167.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1141" width="0.0160%" height="15" fill="rgb(210,199,37)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1125" width="0.0160%" height="15" fill="rgb(244,192,49)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1135.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="3.7168%" y="1109" width="0.0160%" height="15" fill="rgb(226,211,11)" fg:x="232" fg:w="1"/><text x="3.9668%" y="1119.50"></text></g><g><title>CompressAmount (3 samples, 0.05%)</title><rect x="3.7328%" y="1509" width="0.0481%" height="15" fill="rgb(236,162,54)" fg:x="233" fg:w="3"/><text x="3.9828%" y="1519.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="3.7808%" y="1509" width="0.0160%" height="15" fill="rgb(220,229,9)" fg:x="236" fg:w="1"/><text x="4.0308%" y="1519.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="3.7969%" y="1509" width="0.0160%" height="15" fill="rgb(250,87,22)" fg:x="237" fg:w="1"/><text x="4.0469%" y="1519.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="3.7969%" y="1493" width="0.0160%" height="15" fill="rgb(239,43,17)" fg:x="237" fg:w="1"/><text x="4.0469%" y="1503.50"></text></g><g><title>DeleteBlock (1 samples, 0.02%)</title><rect x="3.8129%" y="1509" width="0.0160%" height="15" fill="rgb(231,177,25)" fg:x="238" fg:w="1"/><text x="4.0629%" y="1519.50"></text></g><g><title>leveldb::DeleteBlock (1 samples, 0.02%)</title><rect x="3.8129%" y="1493" width="0.0160%" height="15" fill="rgb(219,179,1)" fg:x="238" fg:w="1"/><text x="4.0629%" y="1503.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.02%)</title><rect x="3.8289%" y="1509" width="0.0160%" height="15" fill="rgb(238,219,53)" fg:x="239" fg:w="1"/><text x="4.0789%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.02%)</title><rect x="3.8289%" y="1493" width="0.0160%" height="15" fill="rgb(232,167,36)" fg:x="239" fg:w="1"/><text x="4.0789%" y="1503.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (1 samples, 0.02%)</title><rect x="3.8289%" y="1477" width="0.0160%" height="15" fill="rgb(244,19,51)" fg:x="239" fg:w="1"/><text x="4.0789%" y="1487.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ios (1 samples, 0.02%)</title><rect x="3.8289%" y="1461" width="0.0160%" height="15" fill="rgb(224,6,22)" fg:x="239" fg:w="1"/><text x="4.0789%" y="1471.50"></text></g><g><title>std::ios_base::~ios_base (1 samples, 0.02%)</title><rect x="3.8289%" y="1445" width="0.0160%" height="15" fill="rgb(224,145,5)" fg:x="239" fg:w="1"/><text x="4.0789%" y="1455.50"></text></g><g><title>__printf_buffer (1 samples, 0.02%)</title><rect x="3.8289%" y="1429" width="0.0160%" height="15" fill="rgb(234,130,49)" fg:x="239" fg:w="1"/><text x="4.0789%" y="1439.50"></text></g><g><title>GetScriptOp (2 samples, 0.03%)</title><rect x="3.8449%" y="1509" width="0.0320%" height="15" fill="rgb(254,6,2)" fg:x="240" fg:w="2"/><text x="4.0949%" y="1519.50"></text></g><g><title>GetTransactionSigOpCost (3 samples, 0.05%)</title><rect x="3.8770%" y="1509" width="0.0481%" height="15" fill="rgb(208,96,46)" fg:x="242" fg:w="3"/><text x="4.1270%" y="1519.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::operator[] (2 samples, 0.03%)</title><rect x="3.8930%" y="1493" width="0.0320%" height="15" fill="rgb(239,3,39)" fg:x="243" fg:w="2"/><text x="4.1430%" y="1503.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="3.9250%" y="1509" width="0.0481%" height="15" fill="rgb(233,210,1)" fg:x="245" fg:w="3"/><text x="4.1750%" y="1519.50"></text></g><g><title>UpdateCoins (2 samples, 0.03%)</title><rect x="3.9731%" y="1509" width="0.0320%" height="15" fill="rgb(244,137,37)" fg:x="248" fg:w="2"/><text x="4.2231%" y="1519.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="3.9891%" y="1493" width="0.0160%" height="15" fill="rgb(240,136,2)" fg:x="249" fg:w="1"/><text x="4.2391%" y="1503.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="3.9891%" y="1477" width="0.0160%" height="15" fill="rgb(239,18,37)" fg:x="249" fg:w="1"/><text x="4.2391%" y="1487.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="3.9891%" y="1461" width="0.0160%" height="15" fill="rgb(218,185,22)" fg:x="249" fg:w="1"/><text x="4.2391%" y="1471.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="3.9891%" y="1445" width="0.0160%" height="15" fill="rgb(225,218,4)" fg:x="249" fg:w="1"/><text x="4.2391%" y="1455.50"></text></g><g><title>std::array&lt;unsigned char, 32ul&gt;::end (1 samples, 0.02%)</title><rect x="3.9891%" y="1429" width="0.0160%" height="15" fill="rgb(230,182,32)" fg:x="249" fg:w="1"/><text x="4.2391%" y="1439.50"></text></g><g><title>[000271.ldb] (1 samples, 0.02%)</title><rect x="4.0051%" y="1509" width="0.0160%" height="15" fill="rgb(242,56,43)" fg:x="250" fg:w="1"/><text x="4.2551%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="4.0051%" y="1493" width="0.0160%" height="15" fill="rgb(233,99,24)" fg:x="250" fg:w="1"/><text x="4.2551%" y="1503.50"></text></g><g><title>[000582.ldb] (1 samples, 0.02%)</title><rect x="4.0211%" y="1509" width="0.0160%" height="15" fill="rgb(234,209,42)" fg:x="251" fg:w="1"/><text x="4.2711%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="4.0211%" y="1493" width="0.0160%" height="15" fill="rgb(227,7,12)" fg:x="251" fg:w="1"/><text x="4.2711%" y="1503.50"></text></g><g><title>_int_free (7 samples, 0.11%)</title><rect x="4.0372%" y="1493" width="0.1121%" height="15" fill="rgb(245,203,43)" fg:x="252" fg:w="7"/><text x="4.2872%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="4.1493%" y="1493" width="0.0320%" height="15" fill="rgb(238,205,33)" fg:x="259" fg:w="2"/><text x="4.3993%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="4.1814%" y="1493" width="0.0160%" height="15" fill="rgb(231,56,7)" fg:x="261" fg:w="1"/><text x="4.4314%" y="1503.50"></text></g><g><title>leveldb::TableCache::Get (1 samples, 0.02%)</title><rect x="4.1974%" y="1493" width="0.0160%" height="15" fill="rgb(244,186,29)" fg:x="262" fg:w="1"/><text x="4.4474%" y="1503.50"></text></g><g><title>malloc_consolidate (11 samples, 0.18%)</title><rect x="4.2134%" y="1493" width="0.1762%" height="15" fill="rgb(234,111,31)" fg:x="263" fg:w="11"/><text x="4.4634%" y="1503.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="4.3896%" y="1493" width="0.0160%" height="15" fill="rgb(241,149,10)" fg:x="274" fg:w="1"/><text x="4.6396%" y="1503.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="4.4056%" y="1493" width="0.0160%" height="15" fill="rgb(249,206,44)" fg:x="275" fg:w="1"/><text x="4.6556%" y="1503.50"></text></g><g><title>[[heap]] (25 samples, 0.40%)</title><rect x="4.0372%" y="1509" width="0.4005%" height="15" fill="rgb(251,153,30)" fg:x="252" fg:w="25"/><text x="4.2872%" y="1519.50"></text></g><g><title>pthread_mutex_unlock@plt (1 samples, 0.02%)</title><rect x="4.4217%" y="1493" width="0.0160%" height="15" fill="rgb(239,152,38)" fg:x="276" fg:w="1"/><text x="4.6717%" y="1503.50"></text></g><g><title>AutoFile::write (7 samples, 0.11%)</title><rect x="4.4377%" y="1493" width="0.1121%" height="15" fill="rgb(249,139,47)" fg:x="277" fg:w="7"/><text x="4.6877%" y="1503.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="4.5338%" y="1477" width="0.0160%" height="15" fill="rgb(244,64,35)" fg:x="283" fg:w="1"/><text x="4.7838%" y="1487.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.02%)</title><rect x="4.5498%" y="1493" width="0.0160%" height="15" fill="rgb(216,46,15)" fg:x="284" fg:w="1"/><text x="4.7998%" y="1503.50"></text></g><g><title>CCoinsViewCache::AddCoin (2 samples, 0.03%)</title><rect x="4.5658%" y="1493" width="0.0320%" height="15" fill="rgb(250,74,19)" fg:x="285" fg:w="2"/><text x="4.8158%" y="1503.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="4.5819%" y="1477" width="0.0160%" height="15" fill="rgb(249,42,33)" fg:x="286" fg:w="1"/><text x="4.8319%" y="1487.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="4.5819%" y="1461" width="0.0160%" height="15" fill="rgb(242,149,17)" fg:x="286" fg:w="1"/><text x="4.8319%" y="1471.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="4.5819%" y="1445" width="0.0160%" height="15" fill="rgb(244,29,21)" fg:x="286" fg:w="1"/><text x="4.8319%" y="1455.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="4.5819%" y="1429" width="0.0160%" height="15" fill="rgb(220,130,37)" fg:x="286" fg:w="1"/><text x="4.8319%" y="1439.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="4.5819%" y="1413" width="0.0160%" height="15" fill="rgb(211,67,2)" fg:x="286" fg:w="1"/><text x="4.8319%" y="1423.50"></text></g><g><title>CCoinsViewCache::FetchCoin (5 samples, 0.08%)</title><rect x="4.5979%" y="1493" width="0.0801%" height="15" fill="rgb(235,68,52)" fg:x="287" fg:w="5"/><text x="4.8479%" y="1503.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="4.6780%" y="1493" width="0.0160%" height="15" fill="rgb(246,142,3)" fg:x="292" fg:w="1"/><text x="4.9280%" y="1503.50"></text></g><g><title>CSHA256::Write (10 samples, 0.16%)</title><rect x="4.6940%" y="1493" width="0.1602%" height="15" fill="rgb(241,25,7)" fg:x="293" fg:w="10"/><text x="4.9440%" y="1503.50"></text></g><g><title>CScript::GetSigOpCount (5 samples, 0.08%)</title><rect x="4.8542%" y="1493" width="0.0801%" height="15" fill="rgb(242,119,39)" fg:x="303" fg:w="5"/><text x="5.1042%" y="1503.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::begin (1 samples, 0.02%)</title><rect x="4.9183%" y="1477" width="0.0160%" height="15" fill="rgb(241,98,45)" fg:x="307" fg:w="1"/><text x="5.1683%" y="1487.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="4.9183%" y="1461" width="0.0160%" height="15" fill="rgb(254,28,30)" fg:x="307" fg:w="1"/><text x="5.1683%" y="1471.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="4.9183%" y="1445" width="0.0160%" height="15" fill="rgb(241,142,54)" fg:x="307" fg:w="1"/><text x="5.1683%" y="1455.50"></text></g><g><title>CScript::IsPayToScriptHash (1 samples, 0.02%)</title><rect x="4.9343%" y="1493" width="0.0160%" height="15" fill="rgb(222,85,15)" fg:x="308" fg:w="1"/><text x="5.1843%" y="1503.50"></text></g><g><title>CalculateSequenceLocks (1 samples, 0.02%)</title><rect x="4.9503%" y="1493" width="0.0160%" height="15" fill="rgb(210,85,47)" fg:x="309" fg:w="1"/><text x="5.2003%" y="1503.50"></text></g><g><title>CheckTransaction (1 samples, 0.02%)</title><rect x="4.9664%" y="1493" width="0.0160%" height="15" fill="rgb(224,206,25)" fg:x="310" fg:w="1"/><text x="5.2164%" y="1503.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="4.9824%" y="1493" width="0.0160%" height="15" fill="rgb(243,201,19)" fg:x="311" fg:w="1"/><text x="5.2324%" y="1503.50"></text></g><g><title>Consensus::CheckTxInputs (2 samples, 0.03%)</title><rect x="4.9984%" y="1493" width="0.0320%" height="15" fill="rgb(236,59,4)" fg:x="312" fg:w="2"/><text x="5.2484%" y="1503.50"></text></g><g><title>GetScriptOp (7 samples, 0.11%)</title><rect x="5.0304%" y="1493" width="0.1121%" height="15" fill="rgb(254,179,45)" fg:x="314" fg:w="7"/><text x="5.2804%" y="1503.50"></text></g><g><title>SipHashUint256 (1 samples, 0.02%)</title><rect x="5.1426%" y="1493" width="0.0160%" height="15" fill="rgb(226,14,10)" fg:x="321" fg:w="1"/><text x="5.3926%" y="1503.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.06%)</title><rect x="5.1586%" y="1493" width="0.0641%" height="15" fill="rgb(244,27,41)" fg:x="322" fg:w="4"/><text x="5.4086%" y="1503.50"></text></g><g><title>[bitcoind-head] (1 samples, 0.02%)</title><rect x="5.2227%" y="1493" width="0.0160%" height="15" fill="rgb(235,35,32)" fg:x="326" fg:w="1"/><text x="5.4727%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="5.2227%" y="1477" width="0.0160%" height="15" fill="rgb(218,68,31)" fg:x="326" fg:w="1"/><text x="5.4727%" y="1487.50"></text></g><g><title>_IO_default_xsputn (1 samples, 0.02%)</title><rect x="5.2387%" y="1493" width="0.0160%" height="15" fill="rgb(207,120,37)" fg:x="327" fg:w="1"/><text x="5.4887%" y="1503.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="5.2547%" y="1493" width="0.0320%" height="15" fill="rgb(227,98,0)" fg:x="328" fg:w="2"/><text x="5.5047%" y="1503.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="5.2868%" y="1493" width="0.0160%" height="15" fill="rgb(207,7,3)" fg:x="330" fg:w="1"/><text x="5.5368%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (14 samples, 0.22%)</title><rect x="5.3028%" y="1493" width="0.2243%" height="15" fill="rgb(206,98,19)" fg:x="331" fg:w="14"/><text x="5.5528%" y="1503.50"></text></g><g><title>_IO_fwrite (27 samples, 0.43%)</title><rect x="5.5271%" y="1493" width="0.4326%" height="15" fill="rgb(217,5,26)" fg:x="345" fg:w="27"/><text x="5.7771%" y="1503.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="5.9596%" y="1493" width="0.0160%" height="15" fill="rgb(235,190,38)" fg:x="372" fg:w="1"/><text x="6.2096%" y="1503.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.02%)</title><rect x="5.9756%" y="1493" width="0.0160%" height="15" fill="rgb(247,86,24)" fg:x="373" fg:w="1"/><text x="6.2256%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (24 samples, 0.38%)</title><rect x="5.9917%" y="1493" width="0.3845%" height="15" fill="rgb(205,101,16)" fg:x="374" fg:w="24"/><text x="6.2417%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (45 samples, 0.72%)</title><rect x="6.3762%" y="1493" width="0.7209%" height="15" fill="rgb(246,168,33)" fg:x="398" fg:w="45"/><text x="6.6262%" y="1503.50"></text></g><g><title>__mempcpy@plt (2 samples, 0.03%)</title><rect x="7.0971%" y="1493" width="0.0320%" height="15" fill="rgb(231,114,1)" fg:x="443" fg:w="2"/><text x="7.3471%" y="1503.50"></text></g><g><title>__mpn_extract_double (1 samples, 0.02%)</title><rect x="7.1291%" y="1493" width="0.0160%" height="15" fill="rgb(207,184,53)" fg:x="445" fg:w="1"/><text x="7.3791%" y="1503.50"></text></g><g><title>_int_free (11 samples, 0.18%)</title><rect x="7.1451%" y="1493" width="0.1762%" height="15" fill="rgb(224,95,51)" fg:x="446" fg:w="11"/><text x="7.3951%" y="1503.50"></text></g><g><title>_int_malloc (27 samples, 0.43%)</title><rect x="7.3214%" y="1493" width="0.4326%" height="15" fill="rgb(212,188,45)" fg:x="457" fg:w="27"/><text x="7.5714%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="7.7539%" y="1493" width="0.0481%" height="15" fill="rgb(223,154,38)" fg:x="484" fg:w="3"/><text x="8.0039%" y="1503.50"></text></g><g><title>fwrite@plt (1 samples, 0.02%)</title><rect x="7.8020%" y="1493" width="0.0160%" height="15" fill="rgb(251,22,52)" fg:x="487" fg:w="1"/><text x="8.0520%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (1 samples, 0.02%)</title><rect x="7.8180%" y="1493" width="0.0160%" height="15" fill="rgb(229,209,22)" fg:x="488" fg:w="1"/><text x="8.0680%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (17 samples, 0.27%)</title><rect x="7.8340%" y="1493" width="0.2723%" height="15" fill="rgb(234,138,34)" fg:x="489" fg:w="17"/><text x="8.0840%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="8.1064%" y="1493" width="0.0160%" height="15" fill="rgb(212,95,11)" fg:x="506" fg:w="1"/><text x="8.3564%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="8.1224%" y="1493" width="0.0160%" height="15" fill="rgb(240,179,47)" fg:x="507" fg:w="1"/><text x="8.3724%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::status (1 samples, 0.02%)</title><rect x="8.1384%" y="1493" width="0.0160%" height="15" fill="rgb(240,163,11)" fg:x="508" fg:w="1"/><text x="8.3884%" y="1503.50"></text></g><g><title>leveldb::DeleteBlock (1 samples, 0.02%)</title><rect x="8.1544%" y="1493" width="0.0160%" height="15" fill="rgb(236,37,12)" fg:x="509" fg:w="1"/><text x="8.4044%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (2 samples, 0.03%)</title><rect x="8.1705%" y="1493" width="0.0320%" height="15" fill="rgb(232,164,16)" fg:x="510" fg:w="2"/><text x="8.4205%" y="1503.50"></text></g><g><title>leveldb::FindFile (1 samples, 0.02%)</title><rect x="8.2025%" y="1493" width="0.0160%" height="15" fill="rgb(244,205,15)" fg:x="512" fg:w="1"/><text x="8.4525%" y="1503.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="8.2185%" y="1493" width="0.0160%" height="15" fill="rgb(223,117,47)" fg:x="513" fg:w="1"/><text x="8.4685%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (20 samples, 0.32%)</title><rect x="8.2345%" y="1493" width="0.3204%" height="15" fill="rgb(244,107,35)" fg:x="514" fg:w="20"/><text x="8.4845%" y="1503.50"></text></g><g><title>leveldb::Iterator::RegisterCleanup (1 samples, 0.02%)</title><rect x="8.5550%" y="1493" width="0.0160%" height="15" fill="rgb(205,140,8)" fg:x="534" fg:w="1"/><text x="8.8050%" y="1503.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="8.5710%" y="1493" width="0.0160%" height="15" fill="rgb(228,84,46)" fg:x="535" fg:w="1"/><text x="8.8210%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (12 samples, 0.19%)</title><rect x="8.5870%" y="1493" width="0.1922%" height="15" fill="rgb(254,188,9)" fg:x="536" fg:w="12"/><text x="8.8370%" y="1503.50"></text></g><g><title>leveldb::Version::Unref (1 samples, 0.02%)</title><rect x="8.7792%" y="1493" width="0.0160%" height="15" fill="rgb(206,112,54)" fg:x="548" fg:w="1"/><text x="9.0292%" y="1503.50"></text></g><g><title>malloc (19 samples, 0.30%)</title><rect x="8.7953%" y="1493" width="0.3044%" height="15" fill="rgb(216,84,49)" fg:x="549" fg:w="19"/><text x="9.0453%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="9.0836%" y="1477" width="0.0160%" height="15" fill="rgb(214,194,35)" fg:x="567" fg:w="1"/><text x="9.3336%" y="1487.50"></text></g><g><title>memcmp@plt (3 samples, 0.05%)</title><rect x="9.0996%" y="1493" width="0.0481%" height="15" fill="rgb(249,28,3)" fg:x="568" fg:w="3"/><text x="9.3496%" y="1503.50"></text></g><g><title>memcpy@plt (2 samples, 0.03%)</title><rect x="9.1477%" y="1493" width="0.0320%" height="15" fill="rgb(222,56,52)" fg:x="571" fg:w="2"/><text x="9.3977%" y="1503.50"></text></g><g><title>memory_cleanse (1 samples, 0.02%)</title><rect x="9.1798%" y="1493" width="0.0160%" height="15" fill="rgb(245,217,50)" fg:x="573" fg:w="1"/><text x="9.4298%" y="1503.50"></text></g><g><title>memory_cleanse (1 samples, 0.02%)</title><rect x="9.1798%" y="1477" width="0.0160%" height="15" fill="rgb(213,201,24)" fg:x="573" fg:w="1"/><text x="9.4298%" y="1487.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="9.1798%" y="1461" width="0.0160%" height="15" fill="rgb(248,116,28)" fg:x="573" fg:w="1"/><text x="9.4298%" y="1471.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="9.1958%" y="1493" width="0.0160%" height="15" fill="rgb(219,72,43)" fg:x="574" fg:w="1"/><text x="9.4458%" y="1503.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="9.2118%" y="1493" width="0.0160%" height="15" fill="rgb(209,138,14)" fg:x="575" fg:w="1"/><text x="9.4618%" y="1503.50"></text></g><g><title>operator new (3 samples, 0.05%)</title><rect x="9.2278%" y="1493" width="0.0481%" height="15" fill="rgb(222,18,33)" fg:x="576" fg:w="3"/><text x="9.4778%" y="1503.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="9.2759%" y="1493" width="0.0320%" height="15" fill="rgb(213,199,7)" fg:x="579" fg:w="2"/><text x="9.5259%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="9.3079%" y="1493" width="0.0320%" height="15" fill="rgb(250,110,10)" fg:x="581" fg:w="2"/><text x="9.5579%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="9.3400%" y="1493" width="0.0160%" height="15" fill="rgb(248,123,6)" fg:x="583" fg:w="1"/><text x="9.5900%" y="1503.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (3 samples, 0.05%)</title><rect x="9.3560%" y="1493" width="0.0481%" height="15" fill="rgb(206,91,31)" fg:x="584" fg:w="3"/><text x="9.6060%" y="1503.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1 samples, 0.02%)</title><rect x="9.4040%" y="1493" width="0.0160%" height="15" fill="rgb(211,154,13)" fg:x="587" fg:w="1"/><text x="9.6540%" y="1503.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="9.4201%" y="1493" width="0.0160%" height="15" fill="rgb(225,148,7)" fg:x="588" fg:w="1"/><text x="9.6701%" y="1503.50"></text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.05%)</title><rect x="9.4361%" y="1493" width="0.0481%" height="15" fill="rgb(220,160,43)" fg:x="589" fg:w="3"/><text x="9.6861%" y="1503.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="9.4841%" y="1493" width="0.0160%" height="15" fill="rgb(213,52,39)" fg:x="592" fg:w="1"/><text x="9.7341%" y="1503.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="9.5002%" y="1493" width="0.0160%" height="15" fill="rgb(243,137,7)" fg:x="593" fg:w="1"/><text x="9.7502%" y="1503.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="9.5162%" y="1493" width="0.0160%" height="15" fill="rgb(230,79,13)" fg:x="594" fg:w="1"/><text x="9.7662%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="9.5322%" y="1493" width="0.0641%" height="15" fill="rgb(247,105,23)" fg:x="595" fg:w="4"/><text x="9.7822%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="9.5963%" y="1493" width="0.0801%" height="15" fill="rgb(223,179,41)" fg:x="599" fg:w="5"/><text x="9.8463%" y="1503.50"></text></g><g><title>[anon] (328 samples, 5.25%)</title><rect x="4.4377%" y="1509" width="5.2547%" height="15" fill="rgb(218,9,34)" fg:x="277" fg:w="328"/><text x="4.6877%" y="1519.50">[anon]</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="9.6764%" y="1493" width="0.0160%" height="15" fill="rgb(222,106,8)" fg:x="604" fg:w="1"/><text x="9.9264%" y="1503.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="9.6924%" y="1493" width="0.0160%" height="15" fill="rgb(211,220,0)" fg:x="605" fg:w="1"/><text x="9.9424%" y="1503.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="9.7084%" y="1493" width="0.0160%" height="15" fill="rgb(229,52,16)" fg:x="606" fg:w="1"/><text x="9.9584%" y="1503.50"></text></g><g><title>[bitcoind-head] (3 samples, 0.05%)</title><rect x="9.6924%" y="1509" width="0.0481%" height="15" fill="rgb(212,155,18)" fg:x="605" fg:w="3"/><text x="9.9424%" y="1519.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="9.7244%" y="1493" width="0.0160%" height="15" fill="rgb(242,21,14)" fg:x="607" fg:w="1"/><text x="9.9744%" y="1503.50"></text></g><g><title>AddCoins (1 samples, 0.02%)</title><rect x="9.8847%" y="1493" width="0.0160%" height="15" fill="rgb(222,19,48)" fg:x="617" fg:w="1"/><text x="10.1347%" y="1503.50"></text></g><g><title>AutoFile::write (9 samples, 0.14%)</title><rect x="9.9007%" y="1493" width="0.1442%" height="15" fill="rgb(232,45,27)" fg:x="618" fg:w="9"/><text x="10.1507%" y="1503.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.02%)</title><rect x="10.0449%" y="1493" width="0.0160%" height="15" fill="rgb(249,103,42)" fg:x="627" fg:w="1"/><text x="10.2949%" y="1503.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.02%)</title><rect x="10.0449%" y="1477" width="0.0160%" height="15" fill="rgb(246,81,33)" fg:x="627" fg:w="1"/><text x="10.2949%" y="1487.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="10.0449%" y="1461" width="0.0160%" height="15" fill="rgb(252,33,42)" fg:x="627" fg:w="1"/><text x="10.2949%" y="1471.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="10.0449%" y="1445" width="0.0160%" height="15" fill="rgb(209,212,41)" fg:x="627" fg:w="1"/><text x="10.2949%" y="1455.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.02%)</title><rect x="10.0609%" y="1493" width="0.0160%" height="15" fill="rgb(207,154,6)" fg:x="628" fg:w="1"/><text x="10.3109%" y="1503.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="10.0769%" y="1493" width="0.0160%" height="15" fill="rgb(223,64,47)" fg:x="629" fg:w="1"/><text x="10.3269%" y="1503.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="10.0929%" y="1493" width="0.0320%" height="15" fill="rgb(211,161,38)" fg:x="630" fg:w="2"/><text x="10.3429%" y="1503.50"></text></g><g><title>CTransaction::CTransaction (2 samples, 0.03%)</title><rect x="10.1250%" y="1493" width="0.0320%" height="15" fill="rgb(219,138,40)" fg:x="632" fg:w="2"/><text x="10.3750%" y="1503.50"></text></g><g><title>CalculateSequenceLocks (1 samples, 0.02%)</title><rect x="10.1570%" y="1493" width="0.0160%" height="15" fill="rgb(241,228,46)" fg:x="634" fg:w="1"/><text x="10.4070%" y="1503.50"></text></g><g><title>GetScriptOp (3 samples, 0.05%)</title><rect x="10.1730%" y="1493" width="0.0481%" height="15" fill="rgb(223,209,38)" fg:x="635" fg:w="3"/><text x="10.4230%" y="1503.50"></text></g><g><title>IsFinalTx (1 samples, 0.02%)</title><rect x="10.2211%" y="1493" width="0.0160%" height="15" fill="rgb(236,164,45)" fg:x="638" fg:w="1"/><text x="10.4711%" y="1503.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.10%)</title><rect x="10.2371%" y="1493" width="0.0961%" height="15" fill="rgb(231,15,5)" fg:x="639" fg:w="6"/><text x="10.4871%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="10.3332%" y="1493" width="0.0641%" height="15" fill="rgb(252,35,15)" fg:x="645" fg:w="4"/><text x="10.5832%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="10.3813%" y="1477" width="0.0160%" height="15" fill="rgb(248,181,18)" fg:x="648" fg:w="1"/><text x="10.6313%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="10.3813%" y="1461" width="0.0160%" height="15" fill="rgb(233,39,42)" fg:x="648" fg:w="1"/><text x="10.6313%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="10.3813%" y="1445" width="0.0160%" height="15" fill="rgb(238,110,33)" fg:x="648" fg:w="1"/><text x="10.6313%" y="1455.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="10.3973%" y="1493" width="0.0160%" height="15" fill="rgb(233,195,10)" fg:x="649" fg:w="1"/><text x="10.6473%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (24 samples, 0.38%)</title><rect x="10.4133%" y="1493" width="0.3845%" height="15" fill="rgb(254,105,3)" fg:x="650" fg:w="24"/><text x="10.6633%" y="1503.50"></text></g><g><title>_IO_fwrite (22 samples, 0.35%)</title><rect x="10.7978%" y="1493" width="0.3525%" height="15" fill="rgb(221,225,9)" fg:x="674" fg:w="22"/><text x="11.0478%" y="1503.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="11.1503%" y="1493" width="0.0160%" height="15" fill="rgb(224,227,45)" fg:x="696" fg:w="1"/><text x="11.4003%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="11.1663%" y="1493" width="0.0160%" height="15" fill="rgb(229,198,43)" fg:x="697" fg:w="1"/><text x="11.4163%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (12 samples, 0.19%)</title><rect x="11.1823%" y="1493" width="0.1922%" height="15" fill="rgb(206,209,35)" fg:x="698" fg:w="12"/><text x="11.4323%" y="1503.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="11.3746%" y="1493" width="0.0320%" height="15" fill="rgb(245,195,53)" fg:x="710" fg:w="2"/><text x="11.6246%" y="1503.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="11.4066%" y="1493" width="0.0160%" height="15" fill="rgb(240,92,26)" fg:x="712" fg:w="1"/><text x="11.6566%" y="1503.50"></text></g><g><title>_int_free (10 samples, 0.16%)</title><rect x="11.4226%" y="1493" width="0.1602%" height="15" fill="rgb(207,40,23)" fg:x="713" fg:w="10"/><text x="11.6726%" y="1503.50"></text></g><g><title>_int_malloc (22 samples, 0.35%)</title><rect x="11.5828%" y="1493" width="0.3525%" height="15" fill="rgb(223,111,35)" fg:x="723" fg:w="22"/><text x="11.8328%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="11.9193%" y="1477" width="0.0160%" height="15" fill="rgb(229,147,28)" fg:x="744" fg:w="1"/><text x="12.1693%" y="1487.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="11.9353%" y="1493" width="0.0160%" height="15" fill="rgb(211,29,28)" fg:x="745" fg:w="1"/><text x="12.1853%" y="1503.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="11.9513%" y="1493" width="0.0160%" height="15" fill="rgb(228,72,33)" fg:x="746" fg:w="1"/><text x="12.2013%" y="1503.50"></text></g><g><title>fwrite@plt (1 samples, 0.02%)</title><rect x="11.9673%" y="1493" width="0.0160%" height="15" fill="rgb(205,214,31)" fg:x="747" fg:w="1"/><text x="12.2173%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="11.9833%" y="1493" width="0.0160%" height="15" fill="rgb(224,111,15)" fg:x="748" fg:w="1"/><text x="12.2333%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="11.9994%" y="1493" width="0.0160%" height="15" fill="rgb(253,21,26)" fg:x="749" fg:w="1"/><text x="12.2494%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="12.0154%" y="1493" width="0.0160%" height="15" fill="rgb(245,139,43)" fg:x="750" fg:w="1"/><text x="12.2654%" y="1503.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.02%)</title><rect x="12.0314%" y="1493" width="0.0160%" height="15" fill="rgb(252,170,7)" fg:x="751" fg:w="1"/><text x="12.2814%" y="1503.50"></text></g><g><title>leveldb::crc32c::Unmask (1 samples, 0.02%)</title><rect x="12.0314%" y="1477" width="0.0160%" height="15" fill="rgb(231,118,14)" fg:x="751" fg:w="1"/><text x="12.2814%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.0314%" y="1461" width="0.0160%" height="15" fill="rgb(238,83,0)" fg:x="751" fg:w="1"/><text x="12.2814%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.0314%" y="1445" width="0.0160%" height="15" fill="rgb(221,39,39)" fg:x="751" fg:w="1"/><text x="12.2814%" y="1455.50"></text></g><g><title>malloc (14 samples, 0.22%)</title><rect x="12.0474%" y="1493" width="0.2243%" height="15" fill="rgb(222,119,46)" fg:x="752" fg:w="14"/><text x="12.2974%" y="1503.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="12.2717%" y="1493" width="0.0160%" height="15" fill="rgb(222,165,49)" fg:x="766" fg:w="1"/><text x="12.5217%" y="1503.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="12.2877%" y="1493" width="0.0160%" height="15" fill="rgb(219,113,52)" fg:x="767" fg:w="1"/><text x="12.5377%" y="1503.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="12.3037%" y="1493" width="0.0160%" height="15" fill="rgb(214,7,15)" fg:x="768" fg:w="1"/><text x="12.5537%" y="1503.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (1 samples, 0.02%)</title><rect x="12.3198%" y="1493" width="0.0160%" height="15" fill="rgb(235,32,4)" fg:x="769" fg:w="1"/><text x="12.5698%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="12.3358%" y="1493" width="0.0160%" height="15" fill="rgb(238,90,54)" fg:x="770" fg:w="1"/><text x="12.5858%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.05%)</title><rect x="12.3518%" y="1493" width="0.0481%" height="15" fill="rgb(213,208,19)" fg:x="771" fg:w="3"/><text x="12.6018%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="12.3999%" y="1493" width="0.0160%" height="15" fill="rgb(233,156,4)" fg:x="774" fg:w="1"/><text x="12.6499%" y="1503.50"></text></g><g><title>std::ios_base::~ios_base (1 samples, 0.02%)</title><rect x="12.4159%" y="1493" width="0.0160%" height="15" fill="rgb(207,194,5)" fg:x="775" fg:w="1"/><text x="12.6659%" y="1503.50"></text></g><g><title>std::ostream::write (1 samples, 0.02%)</title><rect x="12.4319%" y="1493" width="0.0160%" height="15" fill="rgb(206,111,30)" fg:x="776" fg:w="1"/><text x="12.6819%" y="1503.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (1 samples, 0.02%)</title><rect x="12.4479%" y="1493" width="0.0160%" height="15" fill="rgb(243,70,54)" fg:x="777" fg:w="1"/><text x="12.6979%" y="1503.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.02%)</title><rect x="12.4640%" y="1493" width="0.0160%" height="15" fill="rgb(242,28,8)" fg:x="778" fg:w="1"/><text x="12.7140%" y="1503.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.02%)</title><rect x="12.4640%" y="1477" width="0.0160%" height="15" fill="rgb(219,106,18)" fg:x="778" fg:w="1"/><text x="12.7140%" y="1487.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.02%)</title><rect x="12.4640%" y="1461" width="0.0160%" height="15" fill="rgb(244,222,10)" fg:x="778" fg:w="1"/><text x="12.7140%" y="1471.50"></text></g><g><title>tinyformat::detail::streamStateFromFormat (1 samples, 0.02%)</title><rect x="12.4800%" y="1493" width="0.0160%" height="15" fill="rgb(236,179,52)" fg:x="779" fg:w="1"/><text x="12.7300%" y="1503.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="12.4960%" y="1493" width="0.0160%" height="15" fill="rgb(213,23,39)" fg:x="780" fg:w="1"/><text x="12.7460%" y="1503.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="12.5120%" y="1493" width="0.0320%" height="15" fill="rgb(238,48,10)" fg:x="781" fg:w="2"/><text x="12.7620%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="12.5441%" y="1493" width="0.0160%" height="15" fill="rgb(251,196,23)" fg:x="783" fg:w="1"/><text x="12.7941%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="12.5601%" y="1493" width="0.0320%" height="15" fill="rgb(250,152,24)" fg:x="784" fg:w="2"/><text x="12.8101%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="12.5921%" y="1493" width="0.0641%" height="15" fill="rgb(209,150,17)" fg:x="786" fg:w="4"/><text x="12.8421%" y="1503.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="12.6562%" y="1493" width="0.0160%" height="15" fill="rgb(234,202,34)" fg:x="790" fg:w="1"/><text x="12.9062%" y="1503.50"></text></g><g><title>[unknown] (184 samples, 2.95%)</title><rect x="9.7405%" y="1509" width="2.9478%" height="15" fill="rgb(253,148,53)" fg:x="608" fg:w="184"/><text x="9.9905%" y="1519.50">[u..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="12.6722%" y="1493" width="0.0160%" height="15" fill="rgb(218,129,16)" fg:x="791" fg:w="1"/><text x="12.9222%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (6 samples, 0.10%)</title><rect x="12.6882%" y="1509" width="0.0961%" height="15" fill="rgb(216,85,19)" fg:x="792" fg:w="6"/><text x="12.9382%" y="1519.50"></text></g><g><title>_IO_fwrite (4 samples, 0.06%)</title><rect x="12.7844%" y="1509" width="0.0641%" height="15" fill="rgb(235,228,7)" fg:x="798" fg:w="4"/><text x="13.0344%" y="1519.50"></text></g><g><title>_M_run (2 samples, 0.03%)</title><rect x="12.8484%" y="1509" width="0.0320%" height="15" fill="rgb(245,175,0)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1519.50"></text></g><g><title>operator (2 samples, 0.03%)</title><rect x="12.8484%" y="1493" width="0.0320%" height="15" fill="rgb(208,168,36)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1503.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (2 samples, 0.03%)</title><rect x="12.8484%" y="1477" width="0.0320%" height="15" fill="rgb(246,171,24)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1487.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (2 samples, 0.03%)</title><rect x="12.8484%" y="1461" width="0.0320%" height="15" fill="rgb(215,142,24)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1471.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (2 samples, 0.03%)</title><rect x="12.8484%" y="1445" width="0.0320%" height="15" fill="rgb(250,187,7)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1455.50"></text></g><g><title>util::TraceThread (2 samples, 0.03%)</title><rect x="12.8484%" y="1429" width="0.0320%" height="15" fill="rgb(228,66,33)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1439.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (2 samples, 0.03%)</title><rect x="12.8484%" y="1413" width="0.0320%" height="15" fill="rgb(234,215,21)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1423.50"></text></g><g><title>CConnman::ThreadMessageHandler (2 samples, 0.03%)</title><rect x="12.8484%" y="1397" width="0.0320%" height="15" fill="rgb(222,191,20)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1407.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (2 samples, 0.03%)</title><rect x="12.8484%" y="1381" width="0.0320%" height="15" fill="rgb(245,79,54)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1391.50"></text></g><g><title>Chainstate::ActivateBestChain (2 samples, 0.03%)</title><rect x="12.8484%" y="1365" width="0.0320%" height="15" fill="rgb(240,10,37)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1375.50"></text></g><g><title>Chainstate::ActivateBestChainStep (2 samples, 0.03%)</title><rect x="12.8484%" y="1349" width="0.0320%" height="15" fill="rgb(214,192,32)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1359.50"></text></g><g><title>Chainstate::ConnectTip (2 samples, 0.03%)</title><rect x="12.8484%" y="1333" width="0.0320%" height="15" fill="rgb(209,36,54)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1343.50"></text></g><g><title>Chainstate::ConnectBlock (2 samples, 0.03%)</title><rect x="12.8484%" y="1317" width="0.0320%" height="15" fill="rgb(220,10,11)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1327.50"></text></g><g><title>Consensus::CheckTxInputs (2 samples, 0.03%)</title><rect x="12.8484%" y="1301" width="0.0320%" height="15" fill="rgb(221,106,17)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1311.50"></text></g><g><title>CCoinsViewCache::HaveInputs (2 samples, 0.03%)</title><rect x="12.8484%" y="1285" width="0.0320%" height="15" fill="rgb(251,142,44)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1295.50"></text></g><g><title>CCoinsViewCache::HaveCoin (2 samples, 0.03%)</title><rect x="12.8484%" y="1269" width="0.0320%" height="15" fill="rgb(238,13,15)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1279.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="12.8484%" y="1253" width="0.0320%" height="15" fill="rgb(208,107,27)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1263.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.03%)</title><rect x="12.8484%" y="1237" width="0.0320%" height="15" fill="rgb(205,136,37)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="12.8484%" y="1221" width="0.0320%" height="15" fill="rgb(250,205,27)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1231.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (2 samples, 0.03%)</title><rect x="12.8484%" y="1205" width="0.0320%" height="15" fill="rgb(210,80,43)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1215.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (2 samples, 0.03%)</title><rect x="12.8484%" y="1189" width="0.0320%" height="15" fill="rgb(247,160,36)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1199.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (2 samples, 0.03%)</title><rect x="12.8484%" y="1173" width="0.0320%" height="15" fill="rgb(234,13,49)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1183.50"></text></g><g><title>CCoinsViewBacked::GetCoin (2 samples, 0.03%)</title><rect x="12.8484%" y="1157" width="0.0320%" height="15" fill="rgb(234,122,0)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1167.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.03%)</title><rect x="12.8484%" y="1141" width="0.0320%" height="15" fill="rgb(207,146,38)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1151.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.03%)</title><rect x="12.8484%" y="1125" width="0.0320%" height="15" fill="rgb(207,177,25)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1135.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (2 samples, 0.03%)</title><rect x="12.8484%" y="1109" width="0.0320%" height="15" fill="rgb(211,178,42)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1119.50"></text></g><g><title>leveldb::DBImpl::Get (2 samples, 0.03%)</title><rect x="12.8484%" y="1093" width="0.0320%" height="15" fill="rgb(230,69,54)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1103.50"></text></g><g><title>leveldb::Version::Get (2 samples, 0.03%)</title><rect x="12.8484%" y="1077" width="0.0320%" height="15" fill="rgb(214,135,41)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1087.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (2 samples, 0.03%)</title><rect x="12.8484%" y="1061" width="0.0320%" height="15" fill="rgb(237,67,25)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1071.50"></text></g><g><title>leveldb::Version::Get (2 samples, 0.03%)</title><rect x="12.8484%" y="1045" width="0.0320%" height="15" fill="rgb(222,189,50)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1055.50"></text></g><g><title>leveldb::TableCache::Get (2 samples, 0.03%)</title><rect x="12.8484%" y="1029" width="0.0320%" height="15" fill="rgb(245,148,34)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1039.50"></text></g><g><title>leveldb::TableCache::FindTable (2 samples, 0.03%)</title><rect x="12.8484%" y="1013" width="0.0320%" height="15" fill="rgb(222,29,6)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1023.50"></text></g><g><title>leveldb::Table::Open (2 samples, 0.03%)</title><rect x="12.8484%" y="997" width="0.0320%" height="15" fill="rgb(221,189,43)" fg:x="802" fg:w="2"/><text x="13.0984%" y="1007.50"></text></g><g><title>leveldb::Table::ReadMeta (2 samples, 0.03%)</title><rect x="12.8484%" y="981" width="0.0320%" height="15" fill="rgb(207,36,27)" fg:x="802" fg:w="2"/><text x="13.0984%" y="991.50"></text></g><g><title>leveldb::Table::ReadFilter (2 samples, 0.03%)</title><rect x="12.8484%" y="965" width="0.0320%" height="15" fill="rgb(217,90,24)" fg:x="802" fg:w="2"/><text x="13.0984%" y="975.50"></text></g><g><title>leveldb::ReadBlock (2 samples, 0.03%)</title><rect x="12.8484%" y="949" width="0.0320%" height="15" fill="rgb(224,66,35)" fg:x="802" fg:w="2"/><text x="13.0984%" y="959.50"></text></g><g><title>leveldb::crc32c::Value (2 samples, 0.03%)</title><rect x="12.8484%" y="933" width="0.0320%" height="15" fill="rgb(221,13,50)" fg:x="802" fg:w="2"/><text x="13.0984%" y="943.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.03%)</title><rect x="12.8484%" y="917" width="0.0320%" height="15" fill="rgb(236,68,49)" fg:x="802" fg:w="2"/><text x="13.0984%" y="927.50"></text></g><g><title>_mm_crc32_u64 (2 samples, 0.03%)</title><rect x="12.8484%" y="901" width="0.0320%" height="15" fill="rgb(229,146,28)" fg:x="802" fg:w="2"/><text x="13.0984%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.8645%" y="885" width="0.0160%" height="15" fill="rgb(225,31,38)" fg:x="803" fg:w="1"/><text x="13.1145%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.8645%" y="869" width="0.0160%" height="15" fill="rgb(250,208,3)" fg:x="803" fg:w="1"/><text x="13.1145%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.8645%" y="853" width="0.0160%" height="15" fill="rgb(246,54,23)" fg:x="803" fg:w="1"/><text x="13.1145%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.8645%" y="837" width="0.0160%" height="15" fill="rgb(243,76,11)" fg:x="803" fg:w="1"/><text x="13.1145%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.8645%" y="821" width="0.0160%" height="15" fill="rgb(245,21,50)" fg:x="803" fg:w="1"/><text x="13.1145%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.8645%" y="805" width="0.0160%" height="15" fill="rgb(228,9,43)" fg:x="803" fg:w="1"/><text x="13.1145%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.8645%" y="789" width="0.0160%" height="15" fill="rgb(208,100,47)" fg:x="803" fg:w="1"/><text x="13.1145%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.8645%" y="773" width="0.0160%" height="15" fill="rgb(232,26,8)" fg:x="803" fg:w="1"/><text x="13.1145%" y="783.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="12.8805%" y="1509" width="0.0160%" height="15" fill="rgb(216,166,38)" fg:x="804" fg:w="1"/><text x="13.1305%" y="1519.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="12.8965%" y="1269" width="0.0160%" height="15" fill="rgb(251,202,51)" fg:x="805" fg:w="1"/><text x="13.1465%" y="1279.50"></text></g><g><title>CCoinsViewCache::CCoinsViewCache (1 samples, 0.02%)</title><rect x="12.9125%" y="1269" width="0.0160%" height="15" fill="rgb(254,216,34)" fg:x="806" fg:w="1"/><text x="13.1625%" y="1279.50"></text></g><g><title>SaltedOutpointHasher::SaltedOutpointHasher (1 samples, 0.02%)</title><rect x="12.9125%" y="1253" width="0.0160%" height="15" fill="rgb(251,32,27)" fg:x="806" fg:w="1"/><text x="13.1625%" y="1263.50"></text></g><g><title>FastRandomContext::rand64 (1 samples, 0.02%)</title><rect x="12.9125%" y="1237" width="0.0160%" height="15" fill="rgb(208,127,28)" fg:x="806" fg:w="1"/><text x="13.1625%" y="1247.50"></text></g><g><title>FastRandomContext::RandomSeed (1 samples, 0.02%)</title><rect x="12.9125%" y="1221" width="0.0160%" height="15" fill="rgb(224,137,22)" fg:x="806" fg:w="1"/><text x="13.1625%" y="1231.50"></text></g><g><title>GetRandHash (1 samples, 0.02%)</title><rect x="12.9125%" y="1205" width="0.0160%" height="15" fill="rgb(254,70,32)" fg:x="806" fg:w="1"/><text x="13.1625%" y="1215.50"></text></g><g><title>SeedFast (1 samples, 0.02%)</title><rect x="12.9125%" y="1189" width="0.0160%" height="15" fill="rgb(229,75,37)" fg:x="806" fg:w="1"/><text x="13.1625%" y="1199.50"></text></g><g><title>SeedTimestamp (1 samples, 0.02%)</title><rect x="12.9125%" y="1173" width="0.0160%" height="15" fill="rgb(252,64,23)" fg:x="806" fg:w="1"/><text x="13.1625%" y="1183.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="12.9285%" y="1269" width="0.0160%" height="15" fill="rgb(232,162,48)" fg:x="807" fg:w="1"/><text x="13.1785%" y="1279.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="12.9285%" y="1253" width="0.0160%" height="15" fill="rgb(246,160,12)" fg:x="807" fg:w="1"/><text x="13.1785%" y="1263.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="12.9285%" y="1237" width="0.0160%" height="15" fill="rgb(247,166,0)" fg:x="807" fg:w="1"/><text x="13.1785%" y="1247.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="12.9285%" y="1221" width="0.0160%" height="15" fill="rgb(249,219,21)" fg:x="807" fg:w="1"/><text x="13.1785%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="12.9285%" y="1205" width="0.0160%" height="15" fill="rgb(205,209,3)" fg:x="807" fg:w="1"/><text x="13.1785%" y="1215.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="12.9446%" y="1205" width="0.0160%" height="15" fill="rgb(243,44,1)" fg:x="808" fg:w="1"/><text x="13.1946%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="12.9446%" y="1189" width="0.0160%" height="15" fill="rgb(206,159,16)" fg:x="808" fg:w="1"/><text x="13.1946%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="12.9446%" y="1173" width="0.0160%" height="15" fill="rgb(244,77,30)" fg:x="808" fg:w="1"/><text x="13.1946%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="12.9606%" y="1205" width="0.0320%" height="15" fill="rgb(218,69,12)" fg:x="809" fg:w="2"/><text x="13.2106%" y="1215.50"></text></g><g><title>SipHashUint256Extra (28 samples, 0.45%)</title><rect x="12.9926%" y="1189" width="0.4486%" height="15" fill="rgb(212,87,7)" fg:x="811" fg:w="28"/><text x="13.2426%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="13.3451%" y="1173" width="0.0961%" height="15" fill="rgb(245,114,25)" fg:x="833" fg:w="6"/><text x="13.5951%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="13.3451%" y="1157" width="0.0961%" height="15" fill="rgb(210,61,42)" fg:x="833" fg:w="6"/><text x="13.5951%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="14.4345%" y="1093" width="0.0160%" height="15" fill="rgb(211,52,33)" fg:x="901" fg:w="1"/><text x="14.6845%" y="1103.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="14.4345%" y="1077" width="0.0160%" height="15" fill="rgb(234,58,33)" fg:x="901" fg:w="1"/><text x="14.6845%" y="1087.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="14.4345%" y="1061" width="0.0160%" height="15" fill="rgb(220,115,36)" fg:x="901" fg:w="1"/><text x="14.6845%" y="1071.50"></text></g><g><title>SipHashUint256Extra (103 samples, 1.65%)</title><rect x="13.4572%" y="1109" width="1.6501%" height="15" fill="rgb(243,153,54)" fg:x="840" fg:w="103"/><text x="13.7072%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (41 samples, 0.66%)</title><rect x="14.4505%" y="1093" width="0.6568%" height="15" fill="rgb(251,47,18)" fg:x="902" fg:w="41"/><text x="14.7005%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (41 samples, 0.66%)</title><rect x="14.4505%" y="1077" width="0.6568%" height="15" fill="rgb(242,102,42)" fg:x="902" fg:w="41"/><text x="14.7005%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.11%)</title><rect x="15.1073%" y="1109" width="0.1121%" height="15" fill="rgb(234,31,38)" fg:x="943" fg:w="7"/><text x="15.3573%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.08%)</title><rect x="15.1394%" y="1093" width="0.0801%" height="15" fill="rgb(221,117,51)" fg:x="945" fg:w="5"/><text x="15.3894%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (5 samples, 0.08%)</title><rect x="15.1394%" y="1077" width="0.0801%" height="15" fill="rgb(212,20,18)" fg:x="945" fg:w="5"/><text x="15.3894%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.08%)</title><rect x="15.1394%" y="1061" width="0.0801%" height="15" fill="rgb(245,133,36)" fg:x="945" fg:w="5"/><text x="15.3894%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (5 samples, 0.08%)</title><rect x="15.1394%" y="1045" width="0.0801%" height="15" fill="rgb(212,6,19)" fg:x="945" fg:w="5"/><text x="15.3894%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (2 samples, 0.03%)</title><rect x="15.1874%" y="1029" width="0.0320%" height="15" fill="rgb(218,1,36)" fg:x="948" fg:w="2"/><text x="15.4374%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (140 samples, 2.24%)</title><rect x="12.9926%" y="1205" width="2.2429%" height="15" fill="rgb(246,84,54)" fg:x="811" fg:w="140"/><text x="13.2426%" y="1215.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (112 samples, 1.79%)</title><rect x="13.4412%" y="1189" width="1.7943%" height="15" fill="rgb(242,110,6)" fg:x="839" fg:w="112"/><text x="13.6912%" y="1199.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (111 samples, 1.78%)</title><rect x="13.4572%" y="1173" width="1.7783%" height="15" fill="rgb(214,47,5)" fg:x="840" fg:w="111"/><text x="13.7072%" y="1183.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (111 samples, 1.78%)</title><rect x="13.4572%" y="1157" width="1.7783%" height="15" fill="rgb(218,159,25)" fg:x="840" fg:w="111"/><text x="13.7072%" y="1167.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (111 samples, 1.78%)</title><rect x="13.4572%" y="1141" width="1.7783%" height="15" fill="rgb(215,211,28)" fg:x="840" fg:w="111"/><text x="13.7072%" y="1151.50">s..</text></g><g><title>SaltedOutpointHasher::operator (111 samples, 1.78%)</title><rect x="13.4572%" y="1125" width="1.7783%" height="15" fill="rgb(238,59,32)" fg:x="840" fg:w="111"/><text x="13.7072%" y="1135.50">S..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="15.2195%" y="1109" width="0.0160%" height="15" fill="rgb(226,82,3)" fg:x="950" fg:w="1"/><text x="15.4695%" y="1119.50"></text></g><g><title>SipHashUint256Extra (71 samples, 1.14%)</title><rect x="15.2355%" y="1189" width="1.1375%" height="15" fill="rgb(240,164,32)" fg:x="951" fg:w="71"/><text x="15.4855%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (39 samples, 0.62%)</title><rect x="15.7482%" y="1173" width="0.6248%" height="15" fill="rgb(232,46,7)" fg:x="983" fg:w="39"/><text x="15.9982%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (39 samples, 0.62%)</title><rect x="15.7482%" y="1157" width="0.6248%" height="15" fill="rgb(229,129,53)" fg:x="983" fg:w="39"/><text x="15.9982%" y="1167.50"></text></g><g><title>CCoinsViewCache::BatchWrite (2 samples, 0.03%)</title><rect x="16.3730%" y="1109" width="0.0320%" height="15" fill="rgb(234,188,29)" fg:x="1022" fg:w="2"/><text x="16.6230%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="16.3890%" y="1093" width="0.0160%" height="15" fill="rgb(246,141,4)" fg:x="1023" fg:w="1"/><text x="16.6390%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="16.3890%" y="1077" width="0.0160%" height="15" fill="rgb(229,23,39)" fg:x="1023" fg:w="1"/><text x="16.6390%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="16.3890%" y="1061" width="0.0160%" height="15" fill="rgb(206,12,3)" fg:x="1023" fg:w="1"/><text x="16.6390%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="16.3890%" y="1045" width="0.0160%" height="15" fill="rgb(252,226,20)" fg:x="1023" fg:w="1"/><text x="16.6390%" y="1055.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="16.3890%" y="1029" width="0.0160%" height="15" fill="rgb(216,123,35)" fg:x="1023" fg:w="1"/><text x="16.6390%" y="1039.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="16.5972%" y="1093" width="0.0160%" height="15" fill="rgb(212,68,40)" fg:x="1036" fg:w="1"/><text x="16.8472%" y="1103.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="16.5972%" y="1077" width="0.0160%" height="15" fill="rgb(254,125,32)" fg:x="1036" fg:w="1"/><text x="16.8472%" y="1087.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="16.5972%" y="1061" width="0.0160%" height="15" fill="rgb(253,97,22)" fg:x="1036" fg:w="1"/><text x="16.8472%" y="1071.50"></text></g><g><title>SipHashUint256Extra (22 samples, 0.35%)</title><rect x="16.4050%" y="1109" width="0.3525%" height="15" fill="rgb(241,101,14)" fg:x="1024" fg:w="22"/><text x="16.6550%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.14%)</title><rect x="16.6133%" y="1093" width="0.1442%" height="15" fill="rgb(238,103,29)" fg:x="1037" fg:w="9"/><text x="16.8633%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.14%)</title><rect x="16.6133%" y="1077" width="0.1442%" height="15" fill="rgb(233,195,47)" fg:x="1037" fg:w="9"/><text x="16.8633%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (47 samples, 0.75%)</title><rect x="16.3730%" y="1189" width="0.7530%" height="15" fill="rgb(246,218,30)" fg:x="1022" fg:w="47"/><text x="16.6230%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (47 samples, 0.75%)</title><rect x="16.3730%" y="1173" width="0.7530%" height="15" fill="rgb(219,145,47)" fg:x="1022" fg:w="47"/><text x="16.6230%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (47 samples, 0.75%)</title><rect x="16.3730%" y="1157" width="0.7530%" height="15" fill="rgb(243,12,26)" fg:x="1022" fg:w="47"/><text x="16.6230%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (47 samples, 0.75%)</title><rect x="16.3730%" y="1141" width="0.7530%" height="15" fill="rgb(214,87,16)" fg:x="1022" fg:w="47"/><text x="16.6230%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (47 samples, 0.75%)</title><rect x="16.3730%" y="1125" width="0.7530%" height="15" fill="rgb(208,99,42)" fg:x="1022" fg:w="47"/><text x="16.6230%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (23 samples, 0.37%)</title><rect x="16.7574%" y="1109" width="0.3685%" height="15" fill="rgb(253,99,2)" fg:x="1046" fg:w="23"/><text x="17.0074%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (3 samples, 0.05%)</title><rect x="17.1740%" y="1157" width="0.0481%" height="15" fill="rgb(220,168,23)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (3 samples, 0.05%)</title><rect x="17.1740%" y="1141" width="0.0481%" height="15" fill="rgb(242,38,24)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1151.50"></text></g><g><title>__memset_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="17.1740%" y="1125" width="0.0481%" height="15" fill="rgb(225,182,9)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="17.1740%" y="1109" width="0.0481%" height="15" fill="rgb(243,178,37)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="17.1740%" y="1093" width="0.0481%" height="15" fill="rgb(232,139,19)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="17.1740%" y="1077" width="0.0481%" height="15" fill="rgb(225,201,24)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="17.1740%" y="1061" width="0.0481%" height="15" fill="rgb(221,47,46)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="17.1740%" y="1045" width="0.0481%" height="15" fill="rgb(249,23,13)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="17.1740%" y="1029" width="0.0481%" height="15" fill="rgb(219,9,5)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="17.1740%" y="1013" width="0.0481%" height="15" fill="rgb(254,171,16)" fg:x="1072" fg:w="3"/><text x="17.4240%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="17.1900%" y="997" width="0.0320%" height="15" fill="rgb(230,171,20)" fg:x="1073" fg:w="2"/><text x="17.4400%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2060%" y="981" width="0.0160%" height="15" fill="rgb(210,71,41)" fg:x="1074" fg:w="1"/><text x="17.4560%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (125 samples, 2.00%)</title><rect x="15.2355%" y="1205" width="2.0026%" height="15" fill="rgb(206,173,20)" fg:x="951" fg:w="125"/><text x="15.4855%" y="1215.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (7 samples, 0.11%)</title><rect x="17.1259%" y="1189" width="0.1121%" height="15" fill="rgb(233,88,34)" fg:x="1069" fg:w="7"/><text x="17.3759%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (7 samples, 0.11%)</title><rect x="17.1259%" y="1173" width="0.1121%" height="15" fill="rgb(223,209,46)" fg:x="1069" fg:w="7"/><text x="17.3759%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="17.2220%" y="1157" width="0.0160%" height="15" fill="rgb(250,43,18)" fg:x="1075" fg:w="1"/><text x="17.4720%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="17.2220%" y="1141" width="0.0160%" height="15" fill="rgb(208,13,10)" fg:x="1075" fg:w="1"/><text x="17.4720%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="17.2220%" y="1125" width="0.0160%" height="15" fill="rgb(212,200,36)" fg:x="1075" fg:w="1"/><text x="17.4720%" y="1135.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="17.2220%" y="1109" width="0.0160%" height="15" fill="rgb(225,90,30)" fg:x="1075" fg:w="1"/><text x="17.4720%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="17.2220%" y="1093" width="0.0160%" height="15" fill="rgb(236,182,39)" fg:x="1075" fg:w="1"/><text x="17.4720%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="17.2220%" y="1077" width="0.0160%" height="15" fill="rgb(212,144,35)" fg:x="1075" fg:w="1"/><text x="17.4720%" y="1087.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="17.2381%" y="1189" width="0.0160%" height="15" fill="rgb(228,63,44)" fg:x="1076" fg:w="1"/><text x="17.4881%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="17.2541%" y="1189" width="0.0160%" height="15" fill="rgb(228,109,6)" fg:x="1077" fg:w="1"/><text x="17.5041%" y="1199.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="17.2701%" y="1173" width="0.0160%" height="15" fill="rgb(238,117,24)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="17.2701%" y="1157" width="0.0160%" height="15" fill="rgb(242,26,26)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1167.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="17.2701%" y="1141" width="0.0160%" height="15" fill="rgb(221,92,48)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="17.2701%" y="1125" width="0.0160%" height="15" fill="rgb(209,209,32)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1135.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="17.2701%" y="1109" width="0.0160%" height="15" fill="rgb(221,70,22)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="1093" width="0.0160%" height="15" fill="rgb(248,145,5)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="1077" width="0.0160%" height="15" fill="rgb(226,116,26)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="1061" width="0.0160%" height="15" fill="rgb(244,5,17)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="1045" width="0.0160%" height="15" fill="rgb(252,159,33)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="1029" width="0.0160%" height="15" fill="rgb(206,71,0)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="1013" width="0.0160%" height="15" fill="rgb(233,118,54)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="997" width="0.0160%" height="15" fill="rgb(234,83,48)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="981" width="0.0160%" height="15" fill="rgb(228,3,54)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="965" width="0.0160%" height="15" fill="rgb(226,155,13)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="949" width="0.0160%" height="15" fill="rgb(241,28,37)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.2701%" y="933" width="0.0160%" height="15" fill="rgb(233,93,10)" fg:x="1078" fg:w="1"/><text x="17.5201%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (12 samples, 0.19%)</title><rect x="17.2381%" y="1205" width="0.1922%" height="15" fill="rgb(225,113,19)" fg:x="1076" fg:w="12"/><text x="17.4881%" y="1215.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (10 samples, 0.16%)</title><rect x="17.2701%" y="1189" width="0.1602%" height="15" fill="rgb(241,2,18)" fg:x="1078" fg:w="10"/><text x="17.5201%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (9 samples, 0.14%)</title><rect x="17.2861%" y="1173" width="0.1442%" height="15" fill="rgb(228,207,21)" fg:x="1079" fg:w="9"/><text x="17.5361%" y="1183.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (9 samples, 0.14%)</title><rect x="17.2861%" y="1157" width="0.1442%" height="15" fill="rgb(213,211,35)" fg:x="1079" fg:w="9"/><text x="17.5361%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (9 samples, 0.14%)</title><rect x="17.2861%" y="1141" width="0.1442%" height="15" fill="rgb(209,83,10)" fg:x="1079" fg:w="9"/><text x="17.5361%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (9 samples, 0.14%)</title><rect x="17.2861%" y="1125" width="0.1442%" height="15" fill="rgb(209,164,1)" fg:x="1079" fg:w="9"/><text x="17.5361%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (9 samples, 0.14%)</title><rect x="17.2861%" y="1109" width="0.1442%" height="15" fill="rgb(213,184,43)" fg:x="1079" fg:w="9"/><text x="17.5361%" y="1119.50"></text></g><g><title>operator new (9 samples, 0.14%)</title><rect x="17.2861%" y="1093" width="0.1442%" height="15" fill="rgb(231,61,34)" fg:x="1079" fg:w="9"/><text x="17.5361%" y="1103.50"></text></g><g><title>__posix_memalign (9 samples, 0.14%)</title><rect x="17.2861%" y="1077" width="0.1442%" height="15" fill="rgb(235,75,3)" fg:x="1079" fg:w="9"/><text x="17.5361%" y="1087.50"></text></g><g><title>malloc (9 samples, 0.14%)</title><rect x="17.2861%" y="1061" width="0.1442%" height="15" fill="rgb(220,106,47)" fg:x="1079" fg:w="9"/><text x="17.5361%" y="1071.50"></text></g><g><title>_int_malloc (9 samples, 0.14%)</title><rect x="17.2861%" y="1045" width="0.1442%" height="15" fill="rgb(210,196,33)" fg:x="1079" fg:w="9"/><text x="17.5361%" y="1055.50"></text></g><g><title>malloc_consolidate (2 samples, 0.03%)</title><rect x="17.3983%" y="1029" width="0.0320%" height="15" fill="rgb(229,154,42)" fg:x="1086" fg:w="2"/><text x="17.6483%" y="1039.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (281 samples, 4.50%)</title><rect x="12.9446%" y="1237" width="4.5018%" height="15" fill="rgb(228,114,26)" fg:x="808" fg:w="281"/><text x="13.1946%" y="1247.50">std::..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (281 samples, 4.50%)</title><rect x="12.9446%" y="1221" width="4.5018%" height="15" fill="rgb(208,144,1)" fg:x="808" fg:w="281"/><text x="13.1946%" y="1231.50">std::..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="17.4303%" y="1205" width="0.0160%" height="15" fill="rgb(239,112,37)" fg:x="1088" fg:w="1"/><text x="17.6803%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="17.4303%" y="1189" width="0.0160%" height="15" fill="rgb(210,96,50)" fg:x="1088" fg:w="1"/><text x="17.6803%" y="1199.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="17.4303%" y="1173" width="0.0160%" height="15" fill="rgb(222,178,2)" fg:x="1088" fg:w="1"/><text x="17.6803%" y="1183.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="17.4303%" y="1157" width="0.0160%" height="15" fill="rgb(226,74,18)" fg:x="1088" fg:w="1"/><text x="17.6803%" y="1167.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="17.4303%" y="1141" width="0.0160%" height="15" fill="rgb(225,67,54)" fg:x="1088" fg:w="1"/><text x="17.6803%" y="1151.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="17.4303%" y="1125" width="0.0160%" height="15" fill="rgb(251,92,32)" fg:x="1088" fg:w="1"/><text x="17.6803%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="17.4303%" y="1109" width="0.0160%" height="15" fill="rgb(228,149,22)" fg:x="1088" fg:w="1"/><text x="17.6803%" y="1119.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="17.5264%" y="1189" width="0.0160%" height="15" fill="rgb(243,54,13)" fg:x="1094" fg:w="1"/><text x="17.7764%" y="1199.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="17.5264%" y="1173" width="0.0160%" height="15" fill="rgb(243,180,28)" fg:x="1094" fg:w="1"/><text x="17.7764%" y="1183.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.02%)</title><rect x="17.5264%" y="1157" width="0.0160%" height="15" fill="rgb(208,167,24)" fg:x="1094" fg:w="1"/><text x="17.7764%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::allocated_memory (1 samples, 0.02%)</title><rect x="17.5264%" y="1141" width="0.0160%" height="15" fill="rgb(245,73,45)" fg:x="1094" fg:w="1"/><text x="17.7764%" y="1151.50"></text></g><g><title>CCoinsViewCache::BatchWrite (7 samples, 0.11%)</title><rect x="17.4463%" y="1205" width="0.1121%" height="15" fill="rgb(237,203,48)" fg:x="1089" fg:w="7"/><text x="17.6963%" y="1215.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="17.5425%" y="1189" width="0.0160%" height="15" fill="rgb(211,197,16)" fg:x="1095" fg:w="1"/><text x="17.7925%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="17.5425%" y="1173" width="0.0160%" height="15" fill="rgb(243,99,51)" fg:x="1095" fg:w="1"/><text x="17.7925%" y="1183.50"></text></g><g><title>SipHashUint256Extra (37 samples, 0.59%)</title><rect x="17.5585%" y="1205" width="0.5928%" height="15" fill="rgb(215,123,29)" fg:x="1096" fg:w="37"/><text x="17.8085%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (16 samples, 0.26%)</title><rect x="17.8949%" y="1189" width="0.2563%" height="15" fill="rgb(239,186,37)" fg:x="1117" fg:w="16"/><text x="18.1449%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (16 samples, 0.26%)</title><rect x="17.8949%" y="1173" width="0.2563%" height="15" fill="rgb(252,136,39)" fg:x="1117" fg:w="16"/><text x="18.1449%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="18.1512%" y="1125" width="0.0320%" height="15" fill="rgb(223,213,32)" fg:x="1133" fg:w="2"/><text x="18.4012%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (2 samples, 0.03%)</title><rect x="18.1512%" y="1109" width="0.0320%" height="15" fill="rgb(233,115,5)" fg:x="1133" fg:w="2"/><text x="18.4012%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (2 samples, 0.03%)</title><rect x="18.1512%" y="1093" width="0.0320%" height="15" fill="rgb(207,226,44)" fg:x="1133" fg:w="2"/><text x="18.4012%" y="1103.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (2 samples, 0.03%)</title><rect x="18.1512%" y="1077" width="0.0320%" height="15" fill="rgb(208,126,0)" fg:x="1133" fg:w="2"/><text x="18.4012%" y="1087.50"></text></g><g><title>operator== (2 samples, 0.03%)</title><rect x="18.1512%" y="1061" width="0.0320%" height="15" fill="rgb(244,66,21)" fg:x="1133" fg:w="2"/><text x="18.4012%" y="1071.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (2 samples, 0.03%)</title><rect x="18.1512%" y="1045" width="0.0320%" height="15" fill="rgb(222,97,12)" fg:x="1133" fg:w="2"/><text x="18.4012%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (2 samples, 0.03%)</title><rect x="18.1512%" y="1029" width="0.0320%" height="15" fill="rgb(219,213,19)" fg:x="1133" fg:w="2"/><text x="18.4012%" y="1039.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (2 samples, 0.03%)</title><rect x="18.1512%" y="1013" width="0.0320%" height="15" fill="rgb(252,169,30)" fg:x="1133" fg:w="2"/><text x="18.4012%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="18.1512%" y="1189" width="0.0481%" height="15" fill="rgb(206,32,51)" fg:x="1133" fg:w="3"/><text x="18.4012%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="18.1512%" y="1173" width="0.0481%" height="15" fill="rgb(250,172,42)" fg:x="1133" fg:w="3"/><text x="18.4012%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="18.1512%" y="1157" width="0.0481%" height="15" fill="rgb(209,34,43)" fg:x="1133" fg:w="3"/><text x="18.4012%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="18.1512%" y="1141" width="0.0481%" height="15" fill="rgb(223,11,35)" fg:x="1133" fg:w="3"/><text x="18.4012%" y="1151.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="18.1833%" y="1125" width="0.0160%" height="15" fill="rgb(251,219,26)" fg:x="1135" fg:w="1"/><text x="18.4333%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1833%" y="1109" width="0.0160%" height="15" fill="rgb(231,119,3)" fg:x="1135" fg:w="1"/><text x="18.4333%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (4 samples, 0.06%)</title><rect x="18.1512%" y="1205" width="0.0641%" height="15" fill="rgb(216,97,11)" fg:x="1133" fg:w="4"/><text x="18.4012%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="18.1993%" y="1189" width="0.0160%" height="15" fill="rgb(223,59,9)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1199.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="18.1993%" y="1173" width="0.0160%" height="15" fill="rgb(233,93,31)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1183.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="18.1993%" y="1157" width="0.0160%" height="15" fill="rgb(239,81,33)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="18.1993%" y="1141" width="0.0160%" height="15" fill="rgb(213,120,34)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1151.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="18.1993%" y="1125" width="0.0160%" height="15" fill="rgb(243,49,53)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1135.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.02%)</title><rect x="18.1993%" y="1109" width="0.0160%" height="15" fill="rgb(247,216,33)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.02%)</title><rect x="18.1993%" y="1093" width="0.0160%" height="15" fill="rgb(226,26,14)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1103.50"></text></g><g><title>Coin::~Coin (1 samples, 0.02%)</title><rect x="18.1993%" y="1077" width="0.0160%" height="15" fill="rgb(215,49,53)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1087.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.02%)</title><rect x="18.1993%" y="1061" width="0.0160%" height="15" fill="rgb(245,162,40)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1071.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="18.1993%" y="1045" width="0.0160%" height="15" fill="rgb(229,68,17)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="18.1993%" y="1029" width="0.0160%" height="15" fill="rgb(213,182,10)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1039.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="18.1993%" y="1013" width="0.0160%" height="15" fill="rgb(245,125,30)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1023.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="18.1993%" y="997" width="0.0160%" height="15" fill="rgb(232,202,2)" fg:x="1136" fg:w="1"/><text x="18.4493%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="18.2153%" y="1205" width="0.0320%" height="15" fill="rgb(237,140,51)" fg:x="1137" fg:w="2"/><text x="18.4653%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="18.2954%" y="1109" width="0.0160%" height="15" fill="rgb(236,157,25)" fg:x="1142" fg:w="1"/><text x="18.5454%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="18.2954%" y="1093" width="0.0160%" height="15" fill="rgb(219,209,0)" fg:x="1142" fg:w="1"/><text x="18.5454%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="18.2954%" y="1077" width="0.0160%" height="15" fill="rgb(240,116,54)" fg:x="1142" fg:w="1"/><text x="18.5454%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="18.2954%" y="1061" width="0.0160%" height="15" fill="rgb(216,10,36)" fg:x="1142" fg:w="1"/><text x="18.5454%" y="1071.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="18.2954%" y="1045" width="0.0160%" height="15" fill="rgb(222,72,44)" fg:x="1142" fg:w="1"/><text x="18.5454%" y="1055.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (55 samples, 0.88%)</title><rect x="17.4463%" y="1237" width="0.8811%" height="15" fill="rgb(232,159,9)" fg:x="1089" fg:w="55"/><text x="17.6963%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (55 samples, 0.88%)</title><rect x="17.4463%" y="1221" width="0.8811%" height="15" fill="rgb(210,39,32)" fg:x="1089" fg:w="55"/><text x="17.6963%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (5 samples, 0.08%)</title><rect x="18.2474%" y="1205" width="0.0801%" height="15" fill="rgb(216,194,45)" fg:x="1139" fg:w="5"/><text x="18.4974%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (4 samples, 0.06%)</title><rect x="18.2634%" y="1189" width="0.0641%" height="15" fill="rgb(218,18,35)" fg:x="1140" fg:w="4"/><text x="18.5134%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="18.2794%" y="1173" width="0.0481%" height="15" fill="rgb(207,83,51)" fg:x="1141" fg:w="3"/><text x="18.5294%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="18.2794%" y="1157" width="0.0481%" height="15" fill="rgb(225,63,43)" fg:x="1141" fg:w="3"/><text x="18.5294%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="18.2794%" y="1141" width="0.0481%" height="15" fill="rgb(207,57,36)" fg:x="1141" fg:w="3"/><text x="18.5294%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.05%)</title><rect x="18.2794%" y="1125" width="0.0481%" height="15" fill="rgb(216,99,33)" fg:x="1141" fg:w="3"/><text x="18.5294%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="18.3114%" y="1109" width="0.0160%" height="15" fill="rgb(225,42,16)" fg:x="1143" fg:w="1"/><text x="18.5614%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="18.3114%" y="1093" width="0.0160%" height="15" fill="rgb(220,201,45)" fg:x="1143" fg:w="1"/><text x="18.5614%" y="1103.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="18.3114%" y="1077" width="0.0160%" height="15" fill="rgb(225,33,4)" fg:x="1143" fg:w="1"/><text x="18.5614%" y="1087.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="18.3114%" y="1061" width="0.0160%" height="15" fill="rgb(224,33,50)" fg:x="1143" fg:w="1"/><text x="18.5614%" y="1071.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="18.3114%" y="1045" width="0.0160%" height="15" fill="rgb(246,198,51)" fg:x="1143" fg:w="1"/><text x="18.5614%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="18.3114%" y="1029" width="0.0160%" height="15" fill="rgb(205,22,4)" fg:x="1143" fg:w="1"/><text x="18.5614%" y="1039.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="18.3114%" y="1013" width="0.0160%" height="15" fill="rgb(206,3,8)" fg:x="1143" fg:w="1"/><text x="18.5614%" y="1023.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="18.3275%" y="1221" width="0.0320%" height="15" fill="rgb(251,23,15)" fg:x="1144" fg:w="2"/><text x="18.5775%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.3435%" y="1205" width="0.0160%" height="15" fill="rgb(252,88,28)" fg:x="1145" fg:w="1"/><text x="18.5935%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.3435%" y="1189" width="0.0160%" height="15" fill="rgb(212,127,14)" fg:x="1145" fg:w="1"/><text x="18.5935%" y="1199.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (2 samples, 0.03%)</title><rect x="18.3755%" y="1157" width="0.0320%" height="15" fill="rgb(247,145,37)" fg:x="1147" fg:w="2"/><text x="18.6255%" y="1167.50"></text></g><g><title>CoinsViewCacheCursor::NextAndMaybeErase (1 samples, 0.02%)</title><rect x="18.4076%" y="1157" width="0.0160%" height="15" fill="rgb(209,117,53)" fg:x="1149" fg:w="1"/><text x="18.6576%" y="1167.50"></text></g><g><title>CoinsViewCacheCursor::WillErase (1 samples, 0.02%)</title><rect x="18.4236%" y="1157" width="0.0160%" height="15" fill="rgb(212,90,42)" fg:x="1150" fg:w="1"/><text x="18.6736%" y="1167.50"></text></g><g><title>Coin::IsSpent (1 samples, 0.02%)</title><rect x="18.4236%" y="1141" width="0.0160%" height="15" fill="rgb(218,164,37)" fg:x="1150" fg:w="1"/><text x="18.6736%" y="1151.50"></text></g><g><title>CTxOut::IsNull (1 samples, 0.02%)</title><rect x="18.4236%" y="1125" width="0.0160%" height="15" fill="rgb(246,65,34)" fg:x="1150" fg:w="1"/><text x="18.6736%" y="1135.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="18.4396%" y="1157" width="0.0160%" height="15" fill="rgb(231,100,33)" fg:x="1151" fg:w="1"/><text x="18.6896%" y="1167.50"></text></g><g><title>CCoinsViewCache::BatchWrite (8 samples, 0.13%)</title><rect x="18.3595%" y="1173" width="0.1282%" height="15" fill="rgb(228,126,14)" fg:x="1146" fg:w="8"/><text x="18.6095%" y="1183.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (2 samples, 0.03%)</title><rect x="18.4556%" y="1157" width="0.0320%" height="15" fill="rgb(215,173,21)" fg:x="1152" fg:w="2"/><text x="18.7056%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (2 samples, 0.03%)</title><rect x="19.4169%" y="1157" width="0.0320%" height="15" fill="rgb(210,6,40)" fg:x="1212" fg:w="2"/><text x="19.6669%" y="1167.50"></text></g><g><title>ReadLE64 (2 samples, 0.03%)</title><rect x="19.4169%" y="1141" width="0.0320%" height="15" fill="rgb(212,48,18)" fg:x="1212" fg:w="2"/><text x="19.6669%" y="1151.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="19.4169%" y="1125" width="0.0320%" height="15" fill="rgb(230,214,11)" fg:x="1212" fg:w="2"/><text x="19.6669%" y="1135.50"></text></g><g><title>SipHashUint256Extra (90 samples, 1.44%)</title><rect x="18.4877%" y="1173" width="1.4418%" height="15" fill="rgb(254,105,39)" fg:x="1154" fg:w="90"/><text x="18.7377%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (30 samples, 0.48%)</title><rect x="19.4489%" y="1157" width="0.4806%" height="15" fill="rgb(245,158,5)" fg:x="1214" fg:w="30"/><text x="19.6989%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (30 samples, 0.48%)</title><rect x="19.4489%" y="1141" width="0.4806%" height="15" fill="rgb(249,208,11)" fg:x="1214" fg:w="30"/><text x="19.6989%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="19.9295%" y="1173" width="0.0160%" height="15" fill="rgb(210,39,28)" fg:x="1244" fg:w="1"/><text x="20.1795%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="19.9295%" y="1157" width="0.0160%" height="15" fill="rgb(211,56,53)" fg:x="1244" fg:w="1"/><text x="20.1795%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="19.9295%" y="1141" width="0.0160%" height="15" fill="rgb(226,201,30)" fg:x="1244" fg:w="1"/><text x="20.1795%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="19.9295%" y="1125" width="0.0160%" height="15" fill="rgb(239,101,34)" fg:x="1244" fg:w="1"/><text x="20.1795%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="19.9295%" y="1109" width="0.0160%" height="15" fill="rgb(226,209,5)" fg:x="1244" fg:w="1"/><text x="20.1795%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.11%)</title><rect x="20.1698%" y="1157" width="0.1121%" height="15" fill="rgb(250,105,47)" fg:x="1259" fg:w="7"/><text x="20.4198%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.11%)</title><rect x="20.1698%" y="1141" width="0.1121%" height="15" fill="rgb(230,72,3)" fg:x="1259" fg:w="7"/><text x="20.4198%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (7 samples, 0.11%)</title><rect x="20.1698%" y="1125" width="0.1121%" height="15" fill="rgb(232,218,39)" fg:x="1259" fg:w="7"/><text x="20.4198%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (7 samples, 0.11%)</title><rect x="20.1698%" y="1109" width="0.1121%" height="15" fill="rgb(248,166,6)" fg:x="1259" fg:w="7"/><text x="20.4198%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.10%)</title><rect x="20.1858%" y="1093" width="0.0961%" height="15" fill="rgb(247,89,20)" fg:x="1260" fg:w="6"/><text x="20.4358%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.35%)</title><rect x="19.9455%" y="1173" width="0.3525%" height="15" fill="rgb(248,130,54)" fg:x="1245" fg:w="22"/><text x="20.1955%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="20.2820%" y="1157" width="0.0160%" height="15" fill="rgb(234,196,4)" fg:x="1266" fg:w="1"/><text x="20.5320%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="20.2820%" y="1141" width="0.0160%" height="15" fill="rgb(250,143,31)" fg:x="1266" fg:w="1"/><text x="20.5320%" y="1151.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="20.2820%" y="1125" width="0.0160%" height="15" fill="rgb(211,110,34)" fg:x="1266" fg:w="1"/><text x="20.5320%" y="1135.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="20.2820%" y="1109" width="0.0160%" height="15" fill="rgb(215,124,48)" fg:x="1266" fg:w="1"/><text x="20.5320%" y="1119.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="20.2820%" y="1093" width="0.0160%" height="15" fill="rgb(216,46,13)" fg:x="1266" fg:w="1"/><text x="20.5320%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="20.2820%" y="1077" width="0.0160%" height="15" fill="rgb(205,184,25)" fg:x="1266" fg:w="1"/><text x="20.5320%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="20.2820%" y="1061" width="0.0160%" height="15" fill="rgb(228,1,10)" fg:x="1266" fg:w="1"/><text x="20.5320%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="20.3140%" y="1141" width="0.0160%" height="15" fill="rgb(213,116,27)" fg:x="1268" fg:w="1"/><text x="20.5640%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="20.3140%" y="1125" width="0.0160%" height="15" fill="rgb(241,95,50)" fg:x="1268" fg:w="1"/><text x="20.5640%" y="1135.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="20.3140%" y="1109" width="0.0160%" height="15" fill="rgb(238,48,32)" fg:x="1268" fg:w="1"/><text x="20.5640%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="20.3300%" y="1141" width="0.0160%" height="15" fill="rgb(235,113,49)" fg:x="1269" fg:w="1"/><text x="20.5800%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (128 samples, 2.05%)</title><rect x="18.3595%" y="1189" width="2.0506%" height="15" fill="rgb(205,127,43)" fg:x="1146" fg:w="128"/><text x="18.6095%" y="1199.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (7 samples, 0.11%)</title><rect x="20.2980%" y="1173" width="0.1121%" height="15" fill="rgb(250,162,2)" fg:x="1267" fg:w="7"/><text x="20.5480%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (6 samples, 0.10%)</title><rect x="20.3140%" y="1157" width="0.0961%" height="15" fill="rgb(220,13,41)" fg:x="1268" fg:w="6"/><text x="20.5640%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.06%)</title><rect x="20.3460%" y="1141" width="0.0641%" height="15" fill="rgb(249,221,25)" fg:x="1270" fg:w="4"/><text x="20.5960%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.06%)</title><rect x="20.3460%" y="1125" width="0.0641%" height="15" fill="rgb(215,208,19)" fg:x="1270" fg:w="4"/><text x="20.5960%" y="1135.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.06%)</title><rect x="20.4261%" y="1157" width="0.0641%" height="15" fill="rgb(236,175,2)" fg:x="1275" fg:w="4"/><text x="20.6761%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="20.4582%" y="1141" width="0.0320%" height="15" fill="rgb(241,52,2)" fg:x="1277" fg:w="2"/><text x="20.7082%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="20.4582%" y="1125" width="0.0320%" height="15" fill="rgb(248,140,14)" fg:x="1277" fg:w="2"/><text x="20.7082%" y="1135.50"></text></g><g><title>CCoinsViewCache::BatchWrite (472 samples, 7.56%)</title><rect x="12.9446%" y="1253" width="7.5617%" height="15" fill="rgb(253,22,42)" fg:x="808" fg:w="472"/><text x="13.1946%" y="1263.50">CCoinsView..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (136 samples, 2.18%)</title><rect x="18.3275%" y="1237" width="2.1788%" height="15" fill="rgb(234,61,47)" fg:x="1144" fg:w="136"/><text x="18.5775%" y="1247.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (134 samples, 2.15%)</title><rect x="18.3595%" y="1221" width="2.1467%" height="15" fill="rgb(208,226,15)" fg:x="1146" fg:w="134"/><text x="18.6095%" y="1231.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (134 samples, 2.15%)</title><rect x="18.3595%" y="1205" width="2.1467%" height="15" fill="rgb(217,221,4)" fg:x="1146" fg:w="134"/><text x="18.6095%" y="1215.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.10%)</title><rect x="20.4101%" y="1189" width="0.0961%" height="15" fill="rgb(212,174,34)" fg:x="1274" fg:w="6"/><text x="20.6601%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.10%)</title><rect x="20.4101%" y="1173" width="0.0961%" height="15" fill="rgb(253,83,4)" fg:x="1274" fg:w="6"/><text x="20.6601%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="20.4902%" y="1157" width="0.0160%" height="15" fill="rgb(250,195,49)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="20.4902%" y="1141" width="0.0160%" height="15" fill="rgb(241,192,25)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1151.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="20.4902%" y="1125" width="0.0160%" height="15" fill="rgb(208,124,10)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1135.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="20.4902%" y="1109" width="0.0160%" height="15" fill="rgb(222,33,0)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1119.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="20.4902%" y="1093" width="0.0160%" height="15" fill="rgb(234,209,28)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1103.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="20.4902%" y="1077" width="0.0160%" height="15" fill="rgb(224,11,23)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.02%)</title><rect x="20.4902%" y="1061" width="0.0160%" height="15" fill="rgb(232,99,1)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1071.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.02%)</title><rect x="20.4902%" y="1045" width="0.0160%" height="15" fill="rgb(237,95,45)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1055.50"></text></g><g><title>Coin::~Coin (1 samples, 0.02%)</title><rect x="20.4902%" y="1029" width="0.0160%" height="15" fill="rgb(208,109,11)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1039.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.02%)</title><rect x="20.4902%" y="1013" width="0.0160%" height="15" fill="rgb(216,190,48)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1023.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="20.4902%" y="997" width="0.0160%" height="15" fill="rgb(251,171,36)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="20.4902%" y="981" width="0.0160%" height="15" fill="rgb(230,62,22)" fg:x="1279" fg:w="1"/><text x="20.7402%" y="991.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (2 samples, 0.03%)</title><rect x="20.5062%" y="1253" width="0.0320%" height="15" fill="rgb(225,114,35)" fg:x="1280" fg:w="2"/><text x="20.7562%" y="1263.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (2 samples, 0.03%)</title><rect x="20.5062%" y="1237" width="0.0320%" height="15" fill="rgb(215,118,42)" fg:x="1280" fg:w="2"/><text x="20.7562%" y="1247.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (2 samples, 0.03%)</title><rect x="20.5062%" y="1221" width="0.0320%" height="15" fill="rgb(243,119,21)" fg:x="1280" fg:w="2"/><text x="20.7562%" y="1231.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (2 samples, 0.03%)</title><rect x="20.5062%" y="1205" width="0.0320%" height="15" fill="rgb(252,177,53)" fg:x="1280" fg:w="2"/><text x="20.7562%" y="1215.50"></text></g><g><title>operator new (2 samples, 0.03%)</title><rect x="20.5062%" y="1189" width="0.0320%" height="15" fill="rgb(237,209,29)" fg:x="1280" fg:w="2"/><text x="20.7562%" y="1199.50"></text></g><g><title>__posix_memalign (2 samples, 0.03%)</title><rect x="20.5062%" y="1173" width="0.0320%" height="15" fill="rgb(212,65,23)" fg:x="1280" fg:w="2"/><text x="20.7562%" y="1183.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="20.5062%" y="1157" width="0.0320%" height="15" fill="rgb(230,222,46)" fg:x="1280" fg:w="2"/><text x="20.7562%" y="1167.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="20.5062%" y="1141" width="0.0320%" height="15" fill="rgb(215,135,32)" fg:x="1280" fg:w="2"/><text x="20.7562%" y="1151.50"></text></g><g><title>SipHashUint256Extra (13 samples, 0.21%)</title><rect x="20.5383%" y="1253" width="0.2083%" height="15" fill="rgb(246,101,22)" fg:x="1282" fg:w="13"/><text x="20.7883%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.08%)</title><rect x="20.6665%" y="1237" width="0.0801%" height="15" fill="rgb(206,107,13)" fg:x="1290" fg:w="5"/><text x="20.9165%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.08%)</title><rect x="20.6665%" y="1221" width="0.0801%" height="15" fill="rgb(250,100,44)" fg:x="1290" fg:w="5"/><text x="20.9165%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="20.7466%" y="1253" width="0.0320%" height="15" fill="rgb(231,147,38)" fg:x="1295" fg:w="2"/><text x="20.9966%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (5 samples, 0.08%)</title><rect x="20.7786%" y="1253" width="0.0801%" height="15" fill="rgb(229,8,40)" fg:x="1297" fg:w="5"/><text x="21.0286%" y="1263.50"></text></g><g><title>__memset_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="20.8587%" y="1221" width="0.0320%" height="15" fill="rgb(221,135,30)" fg:x="1302" fg:w="2"/><text x="21.1087%" y="1231.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (1 samples, 0.02%)</title><rect x="20.9228%" y="1205" width="0.0160%" height="15" fill="rgb(249,193,18)" fg:x="1306" fg:w="1"/><text x="21.1728%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (3 samples, 0.05%)</title><rect x="20.9388%" y="1189" width="0.0481%" height="15" fill="rgb(209,133,39)" fg:x="1307" fg:w="3"/><text x="21.1888%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (3 samples, 0.05%)</title><rect x="20.9388%" y="1173" width="0.0481%" height="15" fill="rgb(232,100,14)" fg:x="1307" fg:w="3"/><text x="21.1888%" y="1183.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (3 samples, 0.05%)</title><rect x="20.9388%" y="1157" width="0.0481%" height="15" fill="rgb(224,185,1)" fg:x="1307" fg:w="3"/><text x="21.1888%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (3 samples, 0.05%)</title><rect x="20.9388%" y="1141" width="0.0481%" height="15" fill="rgb(223,139,8)" fg:x="1307" fg:w="3"/><text x="21.1888%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (3 samples, 0.05%)</title><rect x="20.9388%" y="1125" width="0.0481%" height="15" fill="rgb(232,213,38)" fg:x="1307" fg:w="3"/><text x="21.1888%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (3 samples, 0.05%)</title><rect x="20.9388%" y="1109" width="0.0481%" height="15" fill="rgb(207,94,22)" fg:x="1307" fg:w="3"/><text x="21.1888%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (1 samples, 0.02%)</title><rect x="20.9708%" y="1093" width="0.0160%" height="15" fill="rgb(219,183,54)" fg:x="1309" fg:w="1"/><text x="21.2208%" y="1103.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (2 samples, 0.03%)</title><rect x="20.9869%" y="1093" width="0.0320%" height="15" fill="rgb(216,185,54)" fg:x="1310" fg:w="2"/><text x="21.2369%" y="1103.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (2 samples, 0.03%)</title><rect x="20.9869%" y="1077" width="0.0320%" height="15" fill="rgb(254,217,39)" fg:x="1310" fg:w="2"/><text x="21.2369%" y="1087.50"></text></g><g><title>CCoinsViewCache::Flush (506 samples, 8.11%)</title><rect x="12.9446%" y="1269" width="8.1064%" height="15" fill="rgb(240,178,23)" fg:x="808" fg:w="506"/><text x="13.1946%" y="1279.50">CCoinsViewC..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (12 samples, 0.19%)</title><rect x="20.8587%" y="1253" width="0.1922%" height="15" fill="rgb(218,11,47)" fg:x="1302" fg:w="12"/><text x="21.1087%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (12 samples, 0.19%)</title><rect x="20.8587%" y="1237" width="0.1922%" height="15" fill="rgb(218,51,51)" fg:x="1302" fg:w="12"/><text x="21.1087%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (10 samples, 0.16%)</title><rect x="20.8907%" y="1221" width="0.1602%" height="15" fill="rgb(238,126,27)" fg:x="1304" fg:w="10"/><text x="21.1407%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (7 samples, 0.11%)</title><rect x="20.9388%" y="1205" width="0.1121%" height="15" fill="rgb(249,202,22)" fg:x="1307" fg:w="7"/><text x="21.1888%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.06%)</title><rect x="20.9869%" y="1189" width="0.0641%" height="15" fill="rgb(254,195,49)" fg:x="1310" fg:w="4"/><text x="21.2369%" y="1199.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.06%)</title><rect x="20.9869%" y="1173" width="0.0641%" height="15" fill="rgb(208,123,14)" fg:x="1310" fg:w="4"/><text x="21.2369%" y="1183.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.06%)</title><rect x="20.9869%" y="1157" width="0.0641%" height="15" fill="rgb(224,200,8)" fg:x="1310" fg:w="4"/><text x="21.2369%" y="1167.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.06%)</title><rect x="20.9869%" y="1141" width="0.0641%" height="15" fill="rgb(217,61,36)" fg:x="1310" fg:w="4"/><text x="21.2369%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (4 samples, 0.06%)</title><rect x="20.9869%" y="1125" width="0.0641%" height="15" fill="rgb(206,35,45)" fg:x="1310" fg:w="4"/><text x="21.2369%" y="1135.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (4 samples, 0.06%)</title><rect x="20.9869%" y="1109" width="0.0641%" height="15" fill="rgb(217,65,33)" fg:x="1310" fg:w="4"/><text x="21.2369%" y="1119.50"></text></g><g><title>Coin::~Coin (2 samples, 0.03%)</title><rect x="21.0189%" y="1093" width="0.0320%" height="15" fill="rgb(222,158,48)" fg:x="1312" fg:w="2"/><text x="21.2689%" y="1103.50"></text></g><g><title>CTxOut::~CTxOut (2 samples, 0.03%)</title><rect x="21.0189%" y="1077" width="0.0320%" height="15" fill="rgb(254,2,54)" fg:x="1312" fg:w="2"/><text x="21.2689%" y="1087.50"></text></g><g><title>CScript::~CScript (2 samples, 0.03%)</title><rect x="21.0189%" y="1061" width="0.0320%" height="15" fill="rgb(250,143,38)" fg:x="1312" fg:w="2"/><text x="21.2689%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (2 samples, 0.03%)</title><rect x="21.0189%" y="1045" width="0.0320%" height="15" fill="rgb(248,25,0)" fg:x="1312" fg:w="2"/><text x="21.2689%" y="1055.50"></text></g><g><title>CScript::IsWitnessProgram (2 samples, 0.03%)</title><rect x="21.0509%" y="1269" width="0.0320%" height="15" fill="rgb(206,152,27)" fg:x="1314" fg:w="2"/><text x="21.3009%" y="1279.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1253" width="0.0160%" height="15" fill="rgb(240,77,30)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1263.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1237" width="0.0160%" height="15" fill="rgb(231,5,3)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1247.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1221" width="0.0160%" height="15" fill="rgb(207,226,32)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1231.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1205" width="0.0160%" height="15" fill="rgb(222,207,47)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1215.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1189" width="0.0160%" height="15" fill="rgb(229,115,45)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1199.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1173" width="0.0160%" height="15" fill="rgb(224,191,6)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1183.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1157" width="0.0160%" height="15" fill="rgb(230,227,24)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1141" width="0.0160%" height="15" fill="rgb(228,80,19)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1125" width="0.0160%" height="15" fill="rgb(247,229,0)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="21.0670%" y="1109" width="0.0160%" height="15" fill="rgb(237,194,15)" fg:x="1315" fg:w="1"/><text x="21.3170%" y="1119.50"></text></g><g><title>CTransaction::GetValueOut (1 samples, 0.02%)</title><rect x="21.0830%" y="1269" width="0.0160%" height="15" fill="rgb(219,203,20)" fg:x="1316" fg:w="1"/><text x="21.3330%" y="1279.50"></text></g><g><title>MoneyRange (1 samples, 0.02%)</title><rect x="21.0830%" y="1253" width="0.0160%" height="15" fill="rgb(234,128,8)" fg:x="1316" fg:w="1"/><text x="21.3330%" y="1263.50"></text></g><g><title>CTxMemPool::removeConflicts (1 samples, 0.02%)</title><rect x="21.0990%" y="1269" width="0.0160%" height="15" fill="rgb(248,202,8)" fg:x="1317" fg:w="1"/><text x="21.3490%" y="1279.50"></text></g><g><title>indirectmap&lt;COutPoint, CTransaction const*&gt;::find (1 samples, 0.02%)</title><rect x="21.0990%" y="1253" width="0.0160%" height="15" fill="rgb(206,104,37)" fg:x="1317" fg:w="1"/><text x="21.3490%" y="1263.50"></text></g><g><title>std::map&lt;COutPoint const*, CTransaction const*, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="21.0990%" y="1237" width="0.0160%" height="15" fill="rgb(223,8,27)" fg:x="1317" fg:w="1"/><text x="21.3490%" y="1247.50"></text></g><g><title>CTxMemPool::removeConflicts (1 samples, 0.02%)</title><rect x="21.1150%" y="1253" width="0.0160%" height="15" fill="rgb(216,217,28)" fg:x="1318" fg:w="1"/><text x="21.3650%" y="1263.50"></text></g><g><title>SipHashUint256 (8 samples, 0.13%)</title><rect x="21.1310%" y="1253" width="0.1282%" height="15" fill="rgb(249,199,1)" fg:x="1319" fg:w="8"/><text x="21.3810%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="21.2432%" y="1237" width="0.0160%" height="15" fill="rgb(240,85,17)" fg:x="1326" fg:w="1"/><text x="21.4932%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="21.2432%" y="1221" width="0.0160%" height="15" fill="rgb(206,108,45)" fg:x="1326" fg:w="1"/><text x="21.4932%" y="1231.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::equal_range (1 samples, 0.02%)</title><rect x="21.2592%" y="1253" width="0.0160%" height="15" fill="rgb(245,210,41)" fg:x="1327" fg:w="1"/><text x="21.5092%" y="1263.50"></text></g><g><title>SipHashUint256 (2 samples, 0.03%)</title><rect x="21.2752%" y="1237" width="0.0320%" height="15" fill="rgb(206,13,37)" fg:x="1328" fg:w="2"/><text x="21.5252%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="21.2913%" y="1221" width="0.0160%" height="15" fill="rgb(250,61,18)" fg:x="1329" fg:w="1"/><text x="21.5413%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="21.2913%" y="1205" width="0.0160%" height="15" fill="rgb(235,172,48)" fg:x="1329" fg:w="1"/><text x="21.5413%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (4 samples, 0.06%)</title><rect x="21.3073%" y="1237" width="0.0641%" height="15" fill="rgb(249,201,17)" fg:x="1330" fg:w="4"/><text x="21.5573%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (4 samples, 0.06%)</title><rect x="21.3073%" y="1221" width="0.0641%" height="15" fill="rgb(219,208,6)" fg:x="1330" fg:w="4"/><text x="21.5573%" y="1231.50"></text></g><g><title>SipHashUint256 (4 samples, 0.06%)</title><rect x="21.3073%" y="1205" width="0.0641%" height="15" fill="rgb(248,31,23)" fg:x="1330" fg:w="4"/><text x="21.5573%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="21.3553%" y="1189" width="0.0160%" height="15" fill="rgb(245,15,42)" fg:x="1333" fg:w="1"/><text x="21.6053%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="21.3553%" y="1173" width="0.0160%" height="15" fill="rgb(222,217,39)" fg:x="1333" fg:w="1"/><text x="21.6053%" y="1183.50"></text></g><g><title>CTxMemPool::removeForBlock (17 samples, 0.27%)</title><rect x="21.1150%" y="1269" width="0.2723%" height="15" fill="rgb(210,219,27)" fg:x="1318" fg:w="17"/><text x="21.3650%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (7 samples, 0.11%)</title><rect x="21.2752%" y="1253" width="0.1121%" height="15" fill="rgb(252,166,36)" fg:x="1328" fg:w="7"/><text x="21.5252%" y="1263.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (1 samples, 0.02%)</title><rect x="21.3714%" y="1237" width="0.0160%" height="15" fill="rgb(245,132,34)" fg:x="1334" fg:w="1"/><text x="21.6214%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (1 samples, 0.02%)</title><rect x="21.3714%" y="1221" width="0.0160%" height="15" fill="rgb(236,54,3)" fg:x="1334" fg:w="1"/><text x="21.6214%" y="1231.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="21.3714%" y="1205" width="0.0160%" height="15" fill="rgb(241,173,43)" fg:x="1334" fg:w="1"/><text x="21.6214%" y="1215.50"></text></g><g><title>CalculateSequenceLocks (2 samples, 0.03%)</title><rect x="21.3874%" y="1269" width="0.0320%" height="15" fill="rgb(215,190,9)" fg:x="1335" fg:w="2"/><text x="21.6374%" y="1279.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.02%)</title><rect x="21.4194%" y="1157" width="0.0160%" height="15" fill="rgb(242,101,16)" fg:x="1337" fg:w="1"/><text x="21.6694%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="21.4354%" y="1157" width="0.0160%" height="15" fill="rgb(223,190,21)" fg:x="1338" fg:w="1"/><text x="21.6854%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="21.4354%" y="1141" width="0.0160%" height="15" fill="rgb(215,228,25)" fg:x="1338" fg:w="1"/><text x="21.6854%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="21.4354%" y="1125" width="0.0160%" height="15" fill="rgb(225,36,22)" fg:x="1338" fg:w="1"/><text x="21.6854%" y="1135.50"></text></g><g><title>AddCoins (10 samples, 0.16%)</title><rect x="21.4194%" y="1237" width="0.1602%" height="15" fill="rgb(251,106,46)" fg:x="1337" fg:w="10"/><text x="21.6694%" y="1247.50"></text></g><g><title>Coin::Coin (10 samples, 0.16%)</title><rect x="21.4194%" y="1221" width="0.1602%" height="15" fill="rgb(208,90,1)" fg:x="1337" fg:w="10"/><text x="21.6694%" y="1231.50"></text></g><g><title>CTxOut::CTxOut (10 samples, 0.16%)</title><rect x="21.4194%" y="1205" width="0.1602%" height="15" fill="rgb(243,10,4)" fg:x="1337" fg:w="10"/><text x="21.6694%" y="1215.50"></text></g><g><title>CScript::CScript (10 samples, 0.16%)</title><rect x="21.4194%" y="1189" width="0.1602%" height="15" fill="rgb(212,137,27)" fg:x="1337" fg:w="10"/><text x="21.6694%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (10 samples, 0.16%)</title><rect x="21.4194%" y="1173" width="0.1602%" height="15" fill="rgb(231,220,49)" fg:x="1337" fg:w="10"/><text x="21.6694%" y="1183.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (8 samples, 0.13%)</title><rect x="21.4515%" y="1157" width="0.1282%" height="15" fill="rgb(237,96,20)" fg:x="1339" fg:w="8"/><text x="21.7015%" y="1167.50"></text></g><g><title>AddCoins (3 samples, 0.05%)</title><rect x="21.6277%" y="1173" width="0.0481%" height="15" fill="rgb(239,229,30)" fg:x="1350" fg:w="3"/><text x="21.8777%" y="1183.50"></text></g><g><title>Coin::Coin (3 samples, 0.05%)</title><rect x="21.6277%" y="1157" width="0.0481%" height="15" fill="rgb(219,65,33)" fg:x="1350" fg:w="3"/><text x="21.8777%" y="1167.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.03%)</title><rect x="21.6437%" y="1141" width="0.0320%" height="15" fill="rgb(243,134,7)" fg:x="1351" fg:w="2"/><text x="21.8937%" y="1151.50"></text></g><g><title>CScript::CScript (2 samples, 0.03%)</title><rect x="21.6437%" y="1125" width="0.0320%" height="15" fill="rgb(216,177,54)" fg:x="1351" fg:w="2"/><text x="21.8937%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.03%)</title><rect x="21.6437%" y="1109" width="0.0320%" height="15" fill="rgb(211,160,20)" fg:x="1351" fg:w="2"/><text x="21.8937%" y="1119.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.03%)</title><rect x="21.6437%" y="1093" width="0.0320%" height="15" fill="rgb(239,85,39)" fg:x="1351" fg:w="2"/><text x="21.8937%" y="1103.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="21.6757%" y="1173" width="0.0481%" height="15" fill="rgb(232,125,22)" fg:x="1353" fg:w="3"/><text x="21.9257%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="21.6918%" y="1157" width="0.0320%" height="15" fill="rgb(244,57,34)" fg:x="1354" fg:w="2"/><text x="21.9418%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="21.6918%" y="1141" width="0.0320%" height="15" fill="rgb(214,203,32)" fg:x="1354" fg:w="2"/><text x="21.9418%" y="1151.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="21.7238%" y="1157" width="0.0160%" height="15" fill="rgb(207,58,43)" fg:x="1356" fg:w="1"/><text x="21.9738%" y="1167.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.14%)</title><rect x="21.7398%" y="1157" width="0.1442%" height="15" fill="rgb(215,193,15)" fg:x="1357" fg:w="9"/><text x="21.9898%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="21.8520%" y="1141" width="0.0320%" height="15" fill="rgb(232,15,44)" fg:x="1364" fg:w="2"/><text x="22.1020%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="21.8520%" y="1125" width="0.0320%" height="15" fill="rgb(212,3,48)" fg:x="1364" fg:w="2"/><text x="22.1020%" y="1135.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="21.8840%" y="1141" width="0.0160%" height="15" fill="rgb(218,128,7)" fg:x="1366" fg:w="1"/><text x="22.1340%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="21.8840%" y="1125" width="0.0160%" height="15" fill="rgb(226,216,39)" fg:x="1366" fg:w="1"/><text x="22.1340%" y="1135.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="21.8840%" y="1109" width="0.0160%" height="15" fill="rgb(243,47,51)" fg:x="1366" fg:w="1"/><text x="22.1340%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="21.8840%" y="1093" width="0.0160%" height="15" fill="rgb(241,183,40)" fg:x="1366" fg:w="1"/><text x="22.1340%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="21.8840%" y="1077" width="0.0160%" height="15" fill="rgb(231,217,32)" fg:x="1366" fg:w="1"/><text x="22.1340%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (12 samples, 0.19%)</title><rect x="21.7238%" y="1173" width="0.1922%" height="15" fill="rgb(229,61,38)" fg:x="1356" fg:w="12"/><text x="21.9738%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.03%)</title><rect x="21.8840%" y="1157" width="0.0320%" height="15" fill="rgb(225,210,5)" fg:x="1366" fg:w="2"/><text x="22.1340%" y="1167.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="21.9000%" y="1141" width="0.0160%" height="15" fill="rgb(231,79,45)" fg:x="1367" fg:w="1"/><text x="22.1500%" y="1151.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (1 samples, 0.02%)</title><rect x="21.9000%" y="1125" width="0.0160%" height="15" fill="rgb(224,100,7)" fg:x="1367" fg:w="1"/><text x="22.1500%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.02%)</title><rect x="21.9000%" y="1109" width="0.0160%" height="15" fill="rgb(241,198,18)" fg:x="1367" fg:w="1"/><text x="22.1500%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.02%)</title><rect x="21.9000%" y="1093" width="0.0160%" height="15" fill="rgb(252,97,53)" fg:x="1367" fg:w="1"/><text x="22.1500%" y="1103.50"></text></g><g><title>SipHashUint256Extra (10 samples, 0.16%)</title><rect x="21.9161%" y="1157" width="0.1602%" height="15" fill="rgb(220,88,7)" fg:x="1368" fg:w="10"/><text x="22.1661%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="21.9801%" y="1141" width="0.0961%" height="15" fill="rgb(213,176,14)" fg:x="1372" fg:w="6"/><text x="22.2301%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="21.9801%" y="1125" width="0.0961%" height="15" fill="rgb(246,73,7)" fg:x="1372" fg:w="6"/><text x="22.2301%" y="1135.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="22.0763%" y="1077" width="0.0160%" height="15" fill="rgb(245,64,36)" fg:x="1378" fg:w="1"/><text x="22.3263%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (2 samples, 0.03%)</title><rect x="22.0763%" y="1157" width="0.0320%" height="15" fill="rgb(245,80,10)" fg:x="1378" fg:w="2"/><text x="22.3263%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="22.0763%" y="1141" width="0.0320%" height="15" fill="rgb(232,107,50)" fg:x="1378" fg:w="2"/><text x="22.3263%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="22.0763%" y="1125" width="0.0320%" height="15" fill="rgb(253,3,0)" fg:x="1378" fg:w="2"/><text x="22.3263%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="22.0763%" y="1109" width="0.0320%" height="15" fill="rgb(212,99,53)" fg:x="1378" fg:w="2"/><text x="22.3263%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="22.0763%" y="1093" width="0.0320%" height="15" fill="rgb(249,111,54)" fg:x="1378" fg:w="2"/><text x="22.3263%" y="1103.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="22.0923%" y="1077" width="0.0160%" height="15" fill="rgb(249,55,30)" fg:x="1379" fg:w="1"/><text x="22.3423%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="22.1083%" y="1125" width="0.0160%" height="15" fill="rgb(237,47,42)" fg:x="1380" fg:w="1"/><text x="22.3583%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="22.1083%" y="1109" width="0.0160%" height="15" fill="rgb(211,20,18)" fg:x="1380" fg:w="1"/><text x="22.3583%" y="1119.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="22.1083%" y="1093" width="0.0160%" height="15" fill="rgb(231,203,46)" fg:x="1380" fg:w="1"/><text x="22.3583%" y="1103.50"></text></g><g><title>SipHashUint256Extra (11 samples, 0.18%)</title><rect x="22.1243%" y="1077" width="0.1762%" height="15" fill="rgb(237,142,3)" fg:x="1381" fg:w="11"/><text x="22.3743%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="22.2525%" y="1061" width="0.0481%" height="15" fill="rgb(241,107,1)" fg:x="1389" fg:w="3"/><text x="22.5025%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="22.2525%" y="1045" width="0.0481%" height="15" fill="rgb(229,83,13)" fg:x="1389" fg:w="3"/><text x="22.5025%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (27 samples, 0.43%)</title><rect x="21.9161%" y="1173" width="0.4326%" height="15" fill="rgb(241,91,40)" fg:x="1368" fg:w="27"/><text x="22.1661%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (15 samples, 0.24%)</title><rect x="22.1083%" y="1157" width="0.2403%" height="15" fill="rgb(225,3,45)" fg:x="1380" fg:w="15"/><text x="22.3583%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (15 samples, 0.24%)</title><rect x="22.1083%" y="1141" width="0.2403%" height="15" fill="rgb(244,223,14)" fg:x="1380" fg:w="15"/><text x="22.3583%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (14 samples, 0.22%)</title><rect x="22.1243%" y="1125" width="0.2243%" height="15" fill="rgb(224,124,37)" fg:x="1381" fg:w="14"/><text x="22.3743%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (14 samples, 0.22%)</title><rect x="22.1243%" y="1109" width="0.2243%" height="15" fill="rgb(251,171,30)" fg:x="1381" fg:w="14"/><text x="22.3743%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (14 samples, 0.22%)</title><rect x="22.1243%" y="1093" width="0.2243%" height="15" fill="rgb(236,46,54)" fg:x="1381" fg:w="14"/><text x="22.3743%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (3 samples, 0.05%)</title><rect x="22.3005%" y="1077" width="0.0481%" height="15" fill="rgb(245,213,5)" fg:x="1392" fg:w="3"/><text x="22.5505%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (3 samples, 0.05%)</title><rect x="22.3005%" y="1061" width="0.0481%" height="15" fill="rgb(230,144,27)" fg:x="1392" fg:w="3"/><text x="22.5505%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="22.3326%" y="1045" width="0.0160%" height="15" fill="rgb(220,86,6)" fg:x="1394" fg:w="1"/><text x="22.5826%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="22.3326%" y="1029" width="0.0160%" height="15" fill="rgb(240,20,13)" fg:x="1394" fg:w="1"/><text x="22.5826%" y="1039.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="22.3326%" y="1013" width="0.0160%" height="15" fill="rgb(217,89,34)" fg:x="1394" fg:w="1"/><text x="22.5826%" y="1023.50"></text></g><g><title>AddCoins (10 samples, 0.16%)</title><rect x="22.3486%" y="1157" width="0.1602%" height="15" fill="rgb(229,13,5)" fg:x="1395" fg:w="10"/><text x="22.5986%" y="1167.50"></text></g><g><title>Coin::Coin (10 samples, 0.16%)</title><rect x="22.3486%" y="1141" width="0.1602%" height="15" fill="rgb(244,67,35)" fg:x="1395" fg:w="10"/><text x="22.5986%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (10 samples, 0.16%)</title><rect x="22.3486%" y="1125" width="0.1602%" height="15" fill="rgb(221,40,2)" fg:x="1395" fg:w="10"/><text x="22.5986%" y="1135.50"></text></g><g><title>CScript::CScript (10 samples, 0.16%)</title><rect x="22.3486%" y="1109" width="0.1602%" height="15" fill="rgb(237,157,21)" fg:x="1395" fg:w="10"/><text x="22.5986%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (10 samples, 0.16%)</title><rect x="22.3486%" y="1093" width="0.1602%" height="15" fill="rgb(222,94,11)" fg:x="1395" fg:w="10"/><text x="22.5986%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (10 samples, 0.16%)</title><rect x="22.3486%" y="1077" width="0.1602%" height="15" fill="rgb(249,113,6)" fg:x="1395" fg:w="10"/><text x="22.5986%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (16 samples, 0.26%)</title><rect x="22.3486%" y="1173" width="0.2563%" height="15" fill="rgb(238,137,36)" fg:x="1395" fg:w="16"/><text x="22.5986%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (6 samples, 0.10%)</title><rect x="22.5088%" y="1157" width="0.0961%" height="15" fill="rgb(210,102,26)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1167.50"></text></g><g><title>decltype  (6 samples, 0.10%)</title><rect x="22.5088%" y="1141" width="0.0961%" height="15" fill="rgb(218,30,30)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (6 samples, 0.10%)</title><rect x="22.5088%" y="1125" width="0.0961%" height="15" fill="rgb(214,67,26)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1135.50"></text></g><g><title>decltype  (6 samples, 0.10%)</title><rect x="22.5088%" y="1109" width="0.0961%" height="15" fill="rgb(251,9,53)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (6 samples, 0.10%)</title><rect x="22.5088%" y="1093" width="0.0961%" height="15" fill="rgb(228,204,25)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (6 samples, 0.10%)</title><rect x="22.5088%" y="1077" width="0.0961%" height="15" fill="rgb(207,153,8)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="22.5088%" y="1061" width="0.0961%" height="15" fill="rgb(242,9,16)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1071.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="22.5088%" y="1045" width="0.0961%" height="15" fill="rgb(217,211,10)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="22.5088%" y="1029" width="0.0961%" height="15" fill="rgb(219,228,52)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="22.5088%" y="1013" width="0.0961%" height="15" fill="rgb(231,92,29)" fg:x="1405" fg:w="6"/><text x="22.7588%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="22.5248%" y="997" width="0.0801%" height="15" fill="rgb(232,8,23)" fg:x="1406" fg:w="5"/><text x="22.7748%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="22.5409%" y="981" width="0.0641%" height="15" fill="rgb(216,211,34)" fg:x="1407" fg:w="4"/><text x="22.7909%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="22.5409%" y="965" width="0.0641%" height="15" fill="rgb(236,151,0)" fg:x="1407" fg:w="4"/><text x="22.7909%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="22.5569%" y="949" width="0.0481%" height="15" fill="rgb(209,168,3)" fg:x="1408" fg:w="3"/><text x="22.8069%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="22.5729%" y="933" width="0.0320%" height="15" fill="rgb(208,129,28)" fg:x="1409" fg:w="2"/><text x="22.8229%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="22.5729%" y="917" width="0.0320%" height="15" fill="rgb(229,78,22)" fg:x="1409" fg:w="2"/><text x="22.8229%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.5889%" y="901" width="0.0160%" height="15" fill="rgb(228,187,13)" fg:x="1410" fg:w="1"/><text x="22.8389%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.5889%" y="885" width="0.0160%" height="15" fill="rgb(240,119,24)" fg:x="1410" fg:w="1"/><text x="22.8389%" y="895.50"></text></g><g><title>CCoinsViewCache::AddCoin (65 samples, 1.04%)</title><rect x="21.5796%" y="1237" width="1.0413%" height="15" fill="rgb(209,194,42)" fg:x="1347" fg:w="65"/><text x="21.8296%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (64 samples, 1.03%)</title><rect x="21.5956%" y="1221" width="1.0253%" height="15" fill="rgb(247,200,46)" fg:x="1348" fg:w="64"/><text x="21.8456%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (64 samples, 1.03%)</title><rect x="21.5956%" y="1205" width="1.0253%" height="15" fill="rgb(218,76,16)" fg:x="1348" fg:w="64"/><text x="21.8456%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (64 samples, 1.03%)</title><rect x="21.5956%" y="1189" width="1.0253%" height="15" fill="rgb(225,21,48)" fg:x="1348" fg:w="64"/><text x="21.8456%" y="1199.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="22.6049%" y="1173" width="0.0160%" height="15" fill="rgb(239,223,50)" fg:x="1411" fg:w="1"/><text x="22.8549%" y="1183.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="22.6049%" y="1157" width="0.0160%" height="15" fill="rgb(244,45,21)" fg:x="1411" fg:w="1"/><text x="22.8549%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="22.6049%" y="1141" width="0.0160%" height="15" fill="rgb(232,33,43)" fg:x="1411" fg:w="1"/><text x="22.8549%" y="1151.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="22.6049%" y="1125" width="0.0160%" height="15" fill="rgb(209,8,3)" fg:x="1411" fg:w="1"/><text x="22.8549%" y="1135.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="22.6049%" y="1109" width="0.0160%" height="15" fill="rgb(214,25,53)" fg:x="1411" fg:w="1"/><text x="22.8549%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="22.6049%" y="1093" width="0.0160%" height="15" fill="rgb(254,186,54)" fg:x="1411" fg:w="1"/><text x="22.8549%" y="1103.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="22.6210%" y="1237" width="0.0160%" height="15" fill="rgb(208,174,49)" fg:x="1412" fg:w="1"/><text x="22.8710%" y="1247.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="22.6210%" y="1221" width="0.0160%" height="15" fill="rgb(233,191,51)" fg:x="1412" fg:w="1"/><text x="22.8710%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.02%)</title><rect x="22.6370%" y="1173" width="0.0160%" height="15" fill="rgb(222,134,10)" fg:x="1413" fg:w="1"/><text x="22.8870%" y="1183.50"></text></g><g><title>Coin::Coin (2 samples, 0.03%)</title><rect x="22.6370%" y="1237" width="0.0320%" height="15" fill="rgb(230,226,20)" fg:x="1413" fg:w="2"/><text x="22.8870%" y="1247.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.03%)</title><rect x="22.6370%" y="1221" width="0.0320%" height="15" fill="rgb(251,111,25)" fg:x="1413" fg:w="2"/><text x="22.8870%" y="1231.50"></text></g><g><title>CScript::CScript (2 samples, 0.03%)</title><rect x="22.6370%" y="1205" width="0.0320%" height="15" fill="rgb(224,40,46)" fg:x="1413" fg:w="2"/><text x="22.8870%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.03%)</title><rect x="22.6370%" y="1189" width="0.0320%" height="15" fill="rgb(236,108,47)" fg:x="1413" fg:w="2"/><text x="22.8870%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="22.6530%" y="1173" width="0.0160%" height="15" fill="rgb(234,93,0)" fg:x="1414" fg:w="1"/><text x="22.9030%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="22.6530%" y="1157" width="0.0160%" height="15" fill="rgb(224,213,32)" fg:x="1414" fg:w="1"/><text x="22.9030%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="22.6530%" y="1141" width="0.0160%" height="15" fill="rgb(251,11,48)" fg:x="1414" fg:w="1"/><text x="22.9030%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="22.9414%" y="1221" width="0.0160%" height="15" fill="rgb(236,173,5)" fg:x="1432" fg:w="1"/><text x="23.1914%" y="1231.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="22.9414%" y="1205" width="0.0160%" height="15" fill="rgb(230,95,12)" fg:x="1432" fg:w="1"/><text x="23.1914%" y="1215.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="22.9414%" y="1189" width="0.0160%" height="15" fill="rgb(232,209,1)" fg:x="1432" fg:w="1"/><text x="23.1914%" y="1199.50"></text></g><g><title>SipHashUint256Extra (29 samples, 0.46%)</title><rect x="22.6690%" y="1237" width="0.4646%" height="15" fill="rgb(232,6,1)" fg:x="1415" fg:w="29"/><text x="22.9190%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (11 samples, 0.18%)</title><rect x="22.9574%" y="1221" width="0.1762%" height="15" fill="rgb(210,224,50)" fg:x="1433" fg:w="11"/><text x="23.2074%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (11 samples, 0.18%)</title><rect x="22.9574%" y="1205" width="0.1762%" height="15" fill="rgb(228,127,35)" fg:x="1433" fg:w="11"/><text x="23.2074%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.08%)</title><rect x="23.1336%" y="1237" width="0.0801%" height="15" fill="rgb(245,102,45)" fg:x="1444" fg:w="5"/><text x="23.3836%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (3 samples, 0.05%)</title><rect x="23.2137%" y="1237" width="0.0481%" height="15" fill="rgb(214,1,49)" fg:x="1449" fg:w="3"/><text x="23.4637%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (2 samples, 0.03%)</title><rect x="23.2297%" y="1221" width="0.0320%" height="15" fill="rgb(226,163,40)" fg:x="1450" fg:w="2"/><text x="23.4797%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="23.2297%" y="1205" width="0.0320%" height="15" fill="rgb(239,212,28)" fg:x="1450" fg:w="2"/><text x="23.4797%" y="1215.50"></text></g><g><title>AddCoins (116 samples, 1.86%)</title><rect x="21.4194%" y="1253" width="1.8584%" height="15" fill="rgb(220,20,13)" fg:x="1337" fg:w="116"/><text x="21.6694%" y="1263.50">A..</text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="23.2618%" y="1237" width="0.0160%" height="15" fill="rgb(210,164,35)" fg:x="1452" fg:w="1"/><text x="23.5118%" y="1247.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.02%)</title><rect x="23.2778%" y="1253" width="0.0160%" height="15" fill="rgb(248,109,41)" fg:x="1453" fg:w="1"/><text x="23.5278%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.2938%" y="1077" width="0.0160%" height="15" fill="rgb(238,23,50)" fg:x="1454" fg:w="1"/><text x="23.5438%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.2938%" y="1061" width="0.0160%" height="15" fill="rgb(211,48,49)" fg:x="1454" fg:w="1"/><text x="23.5438%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.2938%" y="1045" width="0.0160%" height="15" fill="rgb(223,36,21)" fg:x="1454" fg:w="1"/><text x="23.5438%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.2938%" y="1029" width="0.0160%" height="15" fill="rgb(207,123,46)" fg:x="1454" fg:w="1"/><text x="23.5438%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.2938%" y="1013" width="0.0160%" height="15" fill="rgb(240,218,32)" fg:x="1454" fg:w="1"/><text x="23.5438%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.2938%" y="997" width="0.0160%" height="15" fill="rgb(252,5,43)" fg:x="1454" fg:w="1"/><text x="23.5438%" y="1007.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~_Vector_base (2 samples, 0.03%)</title><rect x="23.2938%" y="1221" width="0.0320%" height="15" fill="rgb(252,84,19)" fg:x="1454" fg:w="2"/><text x="23.5438%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::_M_deallocate (2 samples, 0.03%)</title><rect x="23.2938%" y="1205" width="0.0320%" height="15" fill="rgb(243,152,39)" fg:x="1454" fg:w="2"/><text x="23.5438%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxUndo&gt; &gt;::deallocate (2 samples, 0.03%)</title><rect x="23.2938%" y="1189" width="0.0320%" height="15" fill="rgb(234,160,15)" fg:x="1454" fg:w="2"/><text x="23.5438%" y="1199.50"></text></g><g><title>std::allocator&lt;CTxUndo&gt;::deallocate (2 samples, 0.03%)</title><rect x="23.2938%" y="1173" width="0.0320%" height="15" fill="rgb(237,34,20)" fg:x="1454" fg:w="2"/><text x="23.5438%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;CTxUndo&gt;::deallocate (2 samples, 0.03%)</title><rect x="23.2938%" y="1157" width="0.0320%" height="15" fill="rgb(229,97,13)" fg:x="1454" fg:w="2"/><text x="23.5438%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="23.2938%" y="1141" width="0.0320%" height="15" fill="rgb(234,71,50)" fg:x="1454" fg:w="2"/><text x="23.5438%" y="1151.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="23.2938%" y="1125" width="0.0320%" height="15" fill="rgb(253,155,4)" fg:x="1454" fg:w="2"/><text x="23.5438%" y="1135.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (2 samples, 0.03%)</title><rect x="23.2938%" y="1109" width="0.0320%" height="15" fill="rgb(222,185,37)" fg:x="1454" fg:w="2"/><text x="23.5438%" y="1119.50"></text></g><g><title>malloc_consolidate (2 samples, 0.03%)</title><rect x="23.2938%" y="1093" width="0.0320%" height="15" fill="rgb(251,177,13)" fg:x="1454" fg:w="2"/><text x="23.5438%" y="1103.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="23.3098%" y="1077" width="0.0160%" height="15" fill="rgb(250,179,40)" fg:x="1455" fg:w="1"/><text x="23.5598%" y="1087.50"></text></g><g><title>CBlockUndo::~CBlockUndo (4 samples, 0.06%)</title><rect x="23.2938%" y="1253" width="0.0641%" height="15" fill="rgb(242,44,2)" fg:x="1454" fg:w="4"/><text x="23.5438%" y="1263.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (4 samples, 0.06%)</title><rect x="23.2938%" y="1237" width="0.0641%" height="15" fill="rgb(216,177,13)" fg:x="1454" fg:w="4"/><text x="23.5438%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1221" width="0.0320%" height="15" fill="rgb(216,106,43)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1231.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1205" width="0.0320%" height="15" fill="rgb(216,183,2)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1215.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1189" width="0.0320%" height="15" fill="rgb(249,75,3)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1173" width="0.0320%" height="15" fill="rgb(219,67,39)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1183.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1157" width="0.0320%" height="15" fill="rgb(253,228,2)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1167.50"></text></g><g><title>CTxUndo::~CTxUndo (2 samples, 0.03%)</title><rect x="23.3259%" y="1141" width="0.0320%" height="15" fill="rgb(235,138,27)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1151.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (2 samples, 0.03%)</title><rect x="23.3259%" y="1125" width="0.0320%" height="15" fill="rgb(236,97,51)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1135.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1109" width="0.0320%" height="15" fill="rgb(240,80,30)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1119.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1093" width="0.0320%" height="15" fill="rgb(230,178,19)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1103.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1077" width="0.0320%" height="15" fill="rgb(210,190,27)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1087.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1061" width="0.0320%" height="15" fill="rgb(222,107,31)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1071.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (2 samples, 0.03%)</title><rect x="23.3259%" y="1045" width="0.0320%" height="15" fill="rgb(216,127,34)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1055.50"></text></g><g><title>Coin::~Coin (2 samples, 0.03%)</title><rect x="23.3259%" y="1029" width="0.0320%" height="15" fill="rgb(234,116,52)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1039.50"></text></g><g><title>CTxOut::~CTxOut (2 samples, 0.03%)</title><rect x="23.3259%" y="1013" width="0.0320%" height="15" fill="rgb(222,124,15)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1023.50"></text></g><g><title>CScript::~CScript (2 samples, 0.03%)</title><rect x="23.3259%" y="997" width="0.0320%" height="15" fill="rgb(231,179,28)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (2 samples, 0.03%)</title><rect x="23.3259%" y="981" width="0.0320%" height="15" fill="rgb(226,93,45)" fg:x="1456" fg:w="2"/><text x="23.5759%" y="991.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="23.3419%" y="965" width="0.0160%" height="15" fill="rgb(215,8,51)" fg:x="1457" fg:w="1"/><text x="23.5919%" y="975.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="23.3419%" y="949" width="0.0160%" height="15" fill="rgb(223,106,5)" fg:x="1457" fg:w="1"/><text x="23.5919%" y="959.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.02%)</title><rect x="23.3579%" y="1157" width="0.0160%" height="15" fill="rgb(250,191,5)" fg:x="1458" fg:w="1"/><text x="23.6079%" y="1167.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="23.3739%" y="1157" width="0.0160%" height="15" fill="rgb(242,132,44)" fg:x="1459" fg:w="1"/><text x="23.6239%" y="1167.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.13%)</title><rect x="23.3899%" y="1157" width="0.1282%" height="15" fill="rgb(251,152,29)" fg:x="1460" fg:w="8"/><text x="23.6399%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.08%)</title><rect x="23.4380%" y="1141" width="0.0801%" height="15" fill="rgb(218,179,5)" fg:x="1463" fg:w="5"/><text x="23.6880%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.08%)</title><rect x="23.4380%" y="1125" width="0.0801%" height="15" fill="rgb(227,67,19)" fg:x="1463" fg:w="5"/><text x="23.6880%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (11 samples, 0.18%)</title><rect x="23.3579%" y="1237" width="0.1762%" height="15" fill="rgb(233,119,31)" fg:x="1458" fg:w="11"/><text x="23.6079%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (11 samples, 0.18%)</title><rect x="23.3579%" y="1221" width="0.1762%" height="15" fill="rgb(241,120,22)" fg:x="1458" fg:w="11"/><text x="23.6079%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (11 samples, 0.18%)</title><rect x="23.3579%" y="1205" width="0.1762%" height="15" fill="rgb(224,102,30)" fg:x="1458" fg:w="11"/><text x="23.6079%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (11 samples, 0.18%)</title><rect x="23.3579%" y="1189" width="0.1762%" height="15" fill="rgb(210,164,37)" fg:x="1458" fg:w="11"/><text x="23.6079%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (11 samples, 0.18%)</title><rect x="23.3579%" y="1173" width="0.1762%" height="15" fill="rgb(226,191,16)" fg:x="1458" fg:w="11"/><text x="23.6079%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="23.5181%" y="1157" width="0.0160%" height="15" fill="rgb(214,40,45)" fg:x="1468" fg:w="1"/><text x="23.7681%" y="1167.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="23.5341%" y="1237" width="0.0160%" height="15" fill="rgb(244,29,26)" fg:x="1469" fg:w="1"/><text x="23.7841%" y="1247.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.08%)</title><rect x="23.5501%" y="1237" width="0.0801%" height="15" fill="rgb(216,16,5)" fg:x="1470" fg:w="5"/><text x="23.8001%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="23.5822%" y="1221" width="0.0481%" height="15" fill="rgb(249,76,35)" fg:x="1472" fg:w="3"/><text x="23.8322%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="23.5822%" y="1205" width="0.0481%" height="15" fill="rgb(207,11,44)" fg:x="1472" fg:w="3"/><text x="23.8322%" y="1215.50"></text></g><g><title>CCoinsViewCache::AccessCoin (18 samples, 0.29%)</title><rect x="23.3579%" y="1253" width="0.2884%" height="15" fill="rgb(228,190,49)" fg:x="1458" fg:w="18"/><text x="23.6079%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="23.6302%" y="1237" width="0.0160%" height="15" fill="rgb(214,173,12)" fg:x="1475" fg:w="1"/><text x="23.8802%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="23.6302%" y="1221" width="0.0160%" height="15" fill="rgb(218,26,35)" fg:x="1475" fg:w="1"/><text x="23.8802%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="23.6302%" y="1205" width="0.0160%" height="15" fill="rgb(220,200,19)" fg:x="1475" fg:w="1"/><text x="23.8802%" y="1215.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="23.6302%" y="1189" width="0.0160%" height="15" fill="rgb(239,95,49)" fg:x="1475" fg:w="1"/><text x="23.8802%" y="1199.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="23.6302%" y="1173" width="0.0160%" height="15" fill="rgb(235,85,53)" fg:x="1475" fg:w="1"/><text x="23.8802%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="23.6302%" y="1157" width="0.0160%" height="15" fill="rgb(233,133,31)" fg:x="1475" fg:w="1"/><text x="23.8802%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="23.6302%" y="1141" width="0.0160%" height="15" fill="rgb(218,25,20)" fg:x="1475" fg:w="1"/><text x="23.8802%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="23.6302%" y="1125" width="0.0160%" height="15" fill="rgb(252,210,38)" fg:x="1475" fg:w="1"/><text x="23.8802%" y="1135.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="23.6463%" y="1253" width="0.0160%" height="15" fill="rgb(242,134,21)" fg:x="1476" fg:w="1"/><text x="23.8963%" y="1263.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="23.6463%" y="1237" width="0.0160%" height="15" fill="rgb(213,28,48)" fg:x="1476" fg:w="1"/><text x="23.8963%" y="1247.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="23.6463%" y="1221" width="0.0160%" height="15" fill="rgb(250,196,2)" fg:x="1476" fg:w="1"/><text x="23.8963%" y="1231.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="23.6623%" y="1253" width="0.0320%" height="15" fill="rgb(227,5,17)" fg:x="1477" fg:w="2"/><text x="23.9123%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="23.6943%" y="1077" width="0.0160%" height="15" fill="rgb(221,226,24)" fg:x="1479" fg:w="1"/><text x="23.9443%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="23.6943%" y="1061" width="0.0160%" height="15" fill="rgb(211,5,48)" fg:x="1479" fg:w="1"/><text x="23.9443%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="23.6943%" y="1045" width="0.0160%" height="15" fill="rgb(219,150,6)" fg:x="1479" fg:w="1"/><text x="23.9443%" y="1055.50"></text></g><g><title>CCoinsViewCache::GetCoin (5 samples, 0.08%)</title><rect x="23.6943%" y="1253" width="0.0801%" height="15" fill="rgb(251,46,16)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1263.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (5 samples, 0.08%)</title><rect x="23.6943%" y="1237" width="0.0801%" height="15" fill="rgb(220,204,40)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1247.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (5 samples, 0.08%)</title><rect x="23.6943%" y="1221" width="0.0801%" height="15" fill="rgb(211,85,2)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1231.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="23.6943%" y="1205" width="0.0801%" height="15" fill="rgb(229,17,7)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="23.6943%" y="1189" width="0.0801%" height="15" fill="rgb(239,72,28)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1199.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="23.6943%" y="1173" width="0.0801%" height="15" fill="rgb(230,47,54)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="23.6943%" y="1157" width="0.0801%" height="15" fill="rgb(214,50,8)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1167.50"></text></g><g><title>Coin::Coin (5 samples, 0.08%)</title><rect x="23.6943%" y="1141" width="0.0801%" height="15" fill="rgb(216,198,43)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (5 samples, 0.08%)</title><rect x="23.6943%" y="1125" width="0.0801%" height="15" fill="rgb(234,20,35)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1135.50"></text></g><g><title>CScript::CScript (5 samples, 0.08%)</title><rect x="23.6943%" y="1109" width="0.0801%" height="15" fill="rgb(254,45,19)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (5 samples, 0.08%)</title><rect x="23.6943%" y="1093" width="0.0801%" height="15" fill="rgb(219,14,44)" fg:x="1479" fg:w="5"/><text x="23.9443%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.06%)</title><rect x="23.7103%" y="1077" width="0.0641%" height="15" fill="rgb(217,220,26)" fg:x="1480" fg:w="4"/><text x="23.9603%" y="1087.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="23.7744%" y="1253" width="0.0160%" height="15" fill="rgb(213,158,28)" fg:x="1484" fg:w="1"/><text x="24.0244%" y="1263.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="23.7744%" y="1237" width="0.0160%" height="15" fill="rgb(252,51,52)" fg:x="1484" fg:w="1"/><text x="24.0244%" y="1247.50"></text></g><g><title>CScript::IsWitnessProgram (2 samples, 0.03%)</title><rect x="23.7905%" y="1253" width="0.0320%" height="15" fill="rgb(246,89,16)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1263.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1237" width="0.0320%" height="15" fill="rgb(216,158,49)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1247.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1221" width="0.0320%" height="15" fill="rgb(236,107,19)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1231.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1205" width="0.0320%" height="15" fill="rgb(228,185,30)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1215.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1189" width="0.0320%" height="15" fill="rgb(246,134,8)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1199.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1173" width="0.0320%" height="15" fill="rgb(214,143,50)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1183.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1157" width="0.0320%" height="15" fill="rgb(228,75,8)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1141" width="0.0320%" height="15" fill="rgb(207,175,4)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1125" width="0.0320%" height="15" fill="rgb(205,108,24)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1109" width="0.0320%" height="15" fill="rgb(244,120,49)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.03%)</title><rect x="23.7905%" y="1093" width="0.0320%" height="15" fill="rgb(223,47,38)" fg:x="1485" fg:w="2"/><text x="24.0405%" y="1103.50"></text></g><g><title>CTransaction::GetValueOut (2 samples, 0.03%)</title><rect x="23.8225%" y="1253" width="0.0320%" height="15" fill="rgb(229,179,11)" fg:x="1487" fg:w="2"/><text x="24.0725%" y="1263.50"></text></g><g><title>CalculateSequenceLocks (2 samples, 0.03%)</title><rect x="23.8545%" y="1253" width="0.0320%" height="15" fill="rgb(231,122,1)" fg:x="1489" fg:w="2"/><text x="24.1045%" y="1263.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (1 samples, 0.02%)</title><rect x="23.8706%" y="1237" width="0.0160%" height="15" fill="rgb(245,119,9)" fg:x="1490" fg:w="1"/><text x="24.1206%" y="1247.50"></text></g><g><title>Chainstate::ConnectBlock (2 samples, 0.03%)</title><rect x="23.8866%" y="1253" width="0.0320%" height="15" fill="rgb(241,163,25)" fg:x="1491" fg:w="2"/><text x="24.1366%" y="1263.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="23.9026%" y="1237" width="0.0160%" height="15" fill="rgb(217,214,3)" fg:x="1492" fg:w="1"/><text x="24.1526%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="23.9346%" y="1157" width="0.0320%" height="15" fill="rgb(240,86,28)" fg:x="1494" fg:w="2"/><text x="24.1846%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="23.9507%" y="1141" width="0.0160%" height="15" fill="rgb(215,47,9)" fg:x="1495" fg:w="1"/><text x="24.2007%" y="1151.50"></text></g><g><title>CCoinsViewCache::HaveInputs (2 samples, 0.03%)</title><rect x="23.9667%" y="1157" width="0.0320%" height="15" fill="rgb(252,25,45)" fg:x="1496" fg:w="2"/><text x="24.2167%" y="1167.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="23.9827%" y="1141" width="0.0160%" height="15" fill="rgb(251,164,9)" fg:x="1497" fg:w="1"/><text x="24.2327%" y="1151.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="23.9987%" y="1157" width="0.0160%" height="15" fill="rgb(233,194,0)" fg:x="1498" fg:w="1"/><text x="24.2487%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (10 samples, 0.16%)</title><rect x="23.9346%" y="1173" width="0.1602%" height="15" fill="rgb(249,111,24)" fg:x="1494" fg:w="10"/><text x="24.1846%" y="1183.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.08%)</title><rect x="24.0147%" y="1157" width="0.0801%" height="15" fill="rgb(250,223,3)" fg:x="1499" fg:w="5"/><text x="24.2647%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.0788%" y="1141" width="0.0160%" height="15" fill="rgb(236,178,37)" fg:x="1503" fg:w="1"/><text x="24.3288%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.0788%" y="1125" width="0.0160%" height="15" fill="rgb(241,158,50)" fg:x="1503" fg:w="1"/><text x="24.3288%" y="1135.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.02%)</title><rect x="24.0948%" y="1141" width="0.0160%" height="15" fill="rgb(213,121,41)" fg:x="1504" fg:w="1"/><text x="24.3448%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="24.1109%" y="1141" width="0.0320%" height="15" fill="rgb(240,92,3)" fg:x="1505" fg:w="2"/><text x="24.3609%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.03%)</title><rect x="24.1429%" y="1141" width="0.0320%" height="15" fill="rgb(205,123,3)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.03%)</title><rect x="24.1429%" y="1125" width="0.0320%" height="15" fill="rgb(205,97,47)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.03%)</title><rect x="24.1429%" y="1109" width="0.0320%" height="15" fill="rgb(247,152,14)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="24.1429%" y="1093" width="0.0320%" height="15" fill="rgb(248,195,53)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="24.1429%" y="1077" width="0.0320%" height="15" fill="rgb(226,201,16)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="24.1429%" y="1061" width="0.0320%" height="15" fill="rgb(205,98,0)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="24.1429%" y="1045" width="0.0320%" height="15" fill="rgb(214,191,48)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1055.50"></text></g><g><title>Coin::Coin (2 samples, 0.03%)</title><rect x="24.1429%" y="1029" width="0.0320%" height="15" fill="rgb(237,112,39)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.03%)</title><rect x="24.1429%" y="1013" width="0.0320%" height="15" fill="rgb(247,203,27)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1023.50"></text></g><g><title>CScript::CScript (2 samples, 0.03%)</title><rect x="24.1429%" y="997" width="0.0320%" height="15" fill="rgb(235,124,28)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.03%)</title><rect x="24.1429%" y="981" width="0.0320%" height="15" fill="rgb(208,207,46)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.03%)</title><rect x="24.1429%" y="965" width="0.0320%" height="15" fill="rgb(234,176,4)" fg:x="1507" fg:w="2"/><text x="24.3929%" y="975.50"></text></g><g><title>CCoinsViewCache::FetchCoin (16 samples, 0.26%)</title><rect x="23.9346%" y="1221" width="0.2563%" height="15" fill="rgb(230,133,28)" fg:x="1494" fg:w="16"/><text x="24.1846%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (16 samples, 0.26%)</title><rect x="23.9346%" y="1205" width="0.2563%" height="15" fill="rgb(211,137,40)" fg:x="1494" fg:w="16"/><text x="24.1846%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (16 samples, 0.26%)</title><rect x="23.9346%" y="1189" width="0.2563%" height="15" fill="rgb(254,35,13)" fg:x="1494" fg:w="16"/><text x="24.1846%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.10%)</title><rect x="24.0948%" y="1173" width="0.0961%" height="15" fill="rgb(225,49,51)" fg:x="1504" fg:w="6"/><text x="24.3448%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.10%)</title><rect x="24.0948%" y="1157" width="0.0961%" height="15" fill="rgb(251,10,15)" fg:x="1504" fg:w="6"/><text x="24.3448%" y="1167.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="24.1749%" y="1141" width="0.0160%" height="15" fill="rgb(228,207,15)" fg:x="1509" fg:w="1"/><text x="24.4249%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.03%)</title><rect x="24.1910%" y="1221" width="0.0320%" height="15" fill="rgb(241,99,19)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1231.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.03%)</title><rect x="24.1910%" y="1205" width="0.0320%" height="15" fill="rgb(207,104,49)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1215.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.03%)</title><rect x="24.1910%" y="1189" width="0.0320%" height="15" fill="rgb(234,99,18)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="24.1910%" y="1173" width="0.0320%" height="15" fill="rgb(213,191,49)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="24.1910%" y="1157" width="0.0320%" height="15" fill="rgb(210,226,19)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="24.1910%" y="1141" width="0.0320%" height="15" fill="rgb(229,97,18)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="24.1910%" y="1125" width="0.0320%" height="15" fill="rgb(211,167,15)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1135.50"></text></g><g><title>Coin::Coin (2 samples, 0.03%)</title><rect x="24.1910%" y="1109" width="0.0320%" height="15" fill="rgb(210,169,34)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1119.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.03%)</title><rect x="24.1910%" y="1093" width="0.0320%" height="15" fill="rgb(241,121,31)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1103.50"></text></g><g><title>CScript::CScript (2 samples, 0.03%)</title><rect x="24.1910%" y="1077" width="0.0320%" height="15" fill="rgb(232,40,11)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.03%)</title><rect x="24.1910%" y="1061" width="0.0320%" height="15" fill="rgb(205,86,26)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1071.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.03%)</title><rect x="24.1910%" y="1045" width="0.0320%" height="15" fill="rgb(231,126,28)" fg:x="1510" fg:w="2"/><text x="24.4410%" y="1055.50"></text></g><g><title>CCoinsViewCache::AccessCoin (19 samples, 0.30%)</title><rect x="23.9346%" y="1237" width="0.3044%" height="15" fill="rgb(219,221,18)" fg:x="1494" fg:w="19"/><text x="24.1846%" y="1247.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="24.2230%" y="1221" width="0.0160%" height="15" fill="rgb(211,40,0)" fg:x="1512" fg:w="1"/><text x="24.4730%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.2230%" y="1205" width="0.0160%" height="15" fill="rgb(239,85,43)" fg:x="1512" fg:w="1"/><text x="24.4730%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.2230%" y="1189" width="0.0160%" height="15" fill="rgb(231,55,21)" fg:x="1512" fg:w="1"/><text x="24.4730%" y="1199.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="24.2390%" y="1237" width="0.0160%" height="15" fill="rgb(225,184,43)" fg:x="1513" fg:w="1"/><text x="24.4890%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (2 samples, 0.03%)</title><rect x="24.2550%" y="1061" width="0.0320%" height="15" fill="rgb(251,158,41)" fg:x="1514" fg:w="2"/><text x="24.5050%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (2 samples, 0.03%)</title><rect x="24.2550%" y="1045" width="0.0320%" height="15" fill="rgb(234,159,37)" fg:x="1514" fg:w="2"/><text x="24.5050%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (2 samples, 0.03%)</title><rect x="24.2550%" y="1029" width="0.0320%" height="15" fill="rgb(216,204,22)" fg:x="1514" fg:w="2"/><text x="24.5050%" y="1039.50"></text></g><g><title>CCoinsViewCache::GetCoin (18 samples, 0.29%)</title><rect x="24.2550%" y="1237" width="0.2884%" height="15" fill="rgb(214,17,3)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1247.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (18 samples, 0.29%)</title><rect x="24.2550%" y="1221" width="0.2884%" height="15" fill="rgb(212,111,17)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1231.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (18 samples, 0.29%)</title><rect x="24.2550%" y="1205" width="0.2884%" height="15" fill="rgb(221,157,24)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (18 samples, 0.29%)</title><rect x="24.2550%" y="1189" width="0.2884%" height="15" fill="rgb(252,16,13)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (18 samples, 0.29%)</title><rect x="24.2550%" y="1173" width="0.2884%" height="15" fill="rgb(221,62,2)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (18 samples, 0.29%)</title><rect x="24.2550%" y="1157" width="0.2884%" height="15" fill="rgb(247,87,22)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (18 samples, 0.29%)</title><rect x="24.2550%" y="1141" width="0.2884%" height="15" fill="rgb(215,73,9)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1151.50"></text></g><g><title>Coin::Coin (18 samples, 0.29%)</title><rect x="24.2550%" y="1125" width="0.2884%" height="15" fill="rgb(207,175,33)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1135.50"></text></g><g><title>CTxOut::CTxOut (18 samples, 0.29%)</title><rect x="24.2550%" y="1109" width="0.2884%" height="15" fill="rgb(243,129,54)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1119.50"></text></g><g><title>CScript::CScript (18 samples, 0.29%)</title><rect x="24.2550%" y="1093" width="0.2884%" height="15" fill="rgb(227,119,45)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (18 samples, 0.29%)</title><rect x="24.2550%" y="1077" width="0.2884%" height="15" fill="rgb(205,109,36)" fg:x="1514" fg:w="18"/><text x="24.5050%" y="1087.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (16 samples, 0.26%)</title><rect x="24.2871%" y="1061" width="0.2563%" height="15" fill="rgb(205,6,39)" fg:x="1516" fg:w="16"/><text x="24.5371%" y="1071.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="24.5594%" y="1205" width="0.0160%" height="15" fill="rgb(221,32,16)" fg:x="1533" fg:w="1"/><text x="24.8094%" y="1215.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="24.5755%" y="1045" width="0.0160%" height="15" fill="rgb(228,144,50)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="1055.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="1029" width="0.0160%" height="15" fill="rgb(229,201,53)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="1039.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="1013" width="0.0160%" height="15" fill="rgb(249,153,27)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="1023.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="997" width="0.0160%" height="15" fill="rgb(227,106,25)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="1007.50"></text></g><g><title>Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="981" width="0.0160%" height="15" fill="rgb(230,65,29)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="991.50"></text></g><g><title>Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="965" width="0.0160%" height="15" fill="rgb(221,57,46)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="975.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="949" width="0.0160%" height="15" fill="rgb(229,161,17)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="959.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="933" width="0.0160%" height="15" fill="rgb(222,213,11)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="943.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="917" width="0.0160%" height="15" fill="rgb(235,35,13)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="927.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="901" width="0.0160%" height="15" fill="rgb(233,158,34)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="911.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="885" width="0.0160%" height="15" fill="rgb(215,151,48)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="895.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="24.5755%" y="869" width="0.0160%" height="15" fill="rgb(229,84,14)" fg:x="1534" fg:w="1"/><text x="24.8255%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="24.5915%" y="1029" width="0.0160%" height="15" fill="rgb(229,68,14)" fg:x="1535" fg:w="1"/><text x="24.8415%" y="1039.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="24.5915%" y="1013" width="0.0160%" height="15" fill="rgb(243,106,26)" fg:x="1535" fg:w="1"/><text x="24.8415%" y="1023.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="24.6075%" y="1029" width="0.0160%" height="15" fill="rgb(206,45,38)" fg:x="1536" fg:w="1"/><text x="24.8575%" y="1039.50"></text></g><g><title>leveldb::MemTable::Ref (1 samples, 0.02%)</title><rect x="24.6075%" y="1013" width="0.0160%" height="15" fill="rgb(226,6,15)" fg:x="1536" fg:w="1"/><text x="24.8575%" y="1023.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="24.6235%" y="1013" width="0.0160%" height="15" fill="rgb(232,22,54)" fg:x="1537" fg:w="1"/><text x="24.8735%" y="1023.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="24.6395%" y="997" width="0.0320%" height="15" fill="rgb(229,222,32)" fg:x="1538" fg:w="2"/><text x="24.8895%" y="1007.50"></text></g><g><title>leveldb::LookupKey::LookupKey (1 samples, 0.02%)</title><rect x="24.6716%" y="997" width="0.0160%" height="15" fill="rgb(228,62,29)" fg:x="1540" fg:w="1"/><text x="24.9216%" y="1007.50"></text></g><g><title>leveldb::LookupKey::LookupKey (1 samples, 0.02%)</title><rect x="24.6716%" y="981" width="0.0160%" height="15" fill="rgb(251,103,34)" fg:x="1540" fg:w="1"/><text x="24.9216%" y="991.50"></text></g><g><title>leveldb::MemTable::Get (1 samples, 0.02%)</title><rect x="24.6876%" y="997" width="0.0160%" height="15" fill="rgb(233,12,30)" fg:x="1541" fg:w="1"/><text x="24.9376%" y="1007.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (44 samples, 0.70%)</title><rect x="24.7036%" y="997" width="0.7049%" height="15" fill="rgb(238,52,0)" fg:x="1542" fg:w="44"/><text x="24.9536%" y="1007.50"></text></g><g><title>GetLengthPrefixedSlice (14 samples, 0.22%)</title><rect x="25.1842%" y="981" width="0.2243%" height="15" fill="rgb(223,98,5)" fg:x="1572" fg:w="14"/><text x="25.4342%" y="991.50"></text></g><g><title>leveldb::GetVarint32Ptr (12 samples, 0.19%)</title><rect x="25.2163%" y="965" width="0.1922%" height="15" fill="rgb(228,75,37)" fg:x="1574" fg:w="12"/><text x="25.4663%" y="975.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="25.4245%" y="965" width="0.0160%" height="15" fill="rgb(205,115,49)" fg:x="1587" fg:w="1"/><text x="25.6745%" y="975.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="25.4245%" y="949" width="0.0160%" height="15" fill="rgb(250,154,43)" fg:x="1587" fg:w="1"/><text x="25.6745%" y="959.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.03%)</title><rect x="25.4726%" y="949" width="0.0320%" height="15" fill="rgb(226,43,29)" fg:x="1590" fg:w="2"/><text x="25.7226%" y="959.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.03%)</title><rect x="25.4726%" y="933" width="0.0320%" height="15" fill="rgb(249,228,39)" fg:x="1590" fg:w="2"/><text x="25.7226%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="25.5046%" y="949" width="0.0160%" height="15" fill="rgb(216,79,43)" fg:x="1592" fg:w="1"/><text x="25.7546%" y="959.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="25.5046%" y="933" width="0.0160%" height="15" fill="rgb(228,95,12)" fg:x="1592" fg:w="1"/><text x="25.7546%" y="943.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="25.5207%" y="949" width="0.0160%" height="15" fill="rgb(249,221,15)" fg:x="1593" fg:w="1"/><text x="25.7707%" y="959.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="25.5207%" y="933" width="0.0160%" height="15" fill="rgb(233,34,13)" fg:x="1593" fg:w="1"/><text x="25.7707%" y="943.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="25.5367%" y="949" width="0.0160%" height="15" fill="rgb(214,103,39)" fg:x="1594" fg:w="1"/><text x="25.7867%" y="959.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (8 samples, 0.13%)</title><rect x="25.4406%" y="965" width="0.1282%" height="15" fill="rgb(251,126,39)" fg:x="1588" fg:w="8"/><text x="25.6906%" y="975.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="25.5527%" y="949" width="0.0160%" height="15" fill="rgb(214,216,36)" fg:x="1595" fg:w="1"/><text x="25.8027%" y="959.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="25.5527%" y="933" width="0.0160%" height="15" fill="rgb(220,221,8)" fg:x="1595" fg:w="1"/><text x="25.8027%" y="943.50"></text></g><g><title>leveldb::MemTable::Get (60 samples, 0.96%)</title><rect x="24.6235%" y="1029" width="0.9612%" height="15" fill="rgb(240,216,3)" fg:x="1537" fg:w="60"/><text x="24.8735%" y="1039.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Seek (59 samples, 0.95%)</title><rect x="24.6395%" y="1013" width="0.9452%" height="15" fill="rgb(232,218,17)" fg:x="1538" fg:w="59"/><text x="24.8895%" y="1023.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (11 samples, 0.18%)</title><rect x="25.4085%" y="997" width="0.1762%" height="15" fill="rgb(229,163,45)" fg:x="1586" fg:w="11"/><text x="25.6585%" y="1007.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (11 samples, 0.18%)</title><rect x="25.4085%" y="981" width="0.1762%" height="15" fill="rgb(231,110,42)" fg:x="1586" fg:w="11"/><text x="25.6585%" y="991.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="25.5687%" y="965" width="0.0160%" height="15" fill="rgb(208,170,48)" fg:x="1596" fg:w="1"/><text x="25.8187%" y="975.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (1 samples, 0.02%)</title><rect x="25.5847%" y="1029" width="0.0160%" height="15" fill="rgb(239,116,25)" fg:x="1597" fg:w="1"/><text x="25.8347%" y="1039.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (1 samples, 0.02%)</title><rect x="25.6008%" y="1013" width="0.0160%" height="15" fill="rgb(219,200,50)" fg:x="1598" fg:w="1"/><text x="25.8508%" y="1023.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="25.6168%" y="1013" width="0.0160%" height="15" fill="rgb(245,200,0)" fg:x="1599" fg:w="1"/><text x="25.8668%" y="1023.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="25.6328%" y="1013" width="0.0160%" height="15" fill="rgb(245,119,33)" fg:x="1600" fg:w="1"/><text x="25.8828%" y="1023.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="25.6488%" y="997" width="0.0481%" height="15" fill="rgb(231,125,12)" fg:x="1601" fg:w="3"/><text x="25.8988%" y="1007.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="25.6809%" y="981" width="0.0160%" height="15" fill="rgb(216,96,41)" fg:x="1603" fg:w="1"/><text x="25.9309%" y="991.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="25.6969%" y="981" width="0.0160%" height="15" fill="rgb(248,43,45)" fg:x="1604" fg:w="1"/><text x="25.9469%" y="991.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="25.6969%" y="965" width="0.0160%" height="15" fill="rgb(217,222,7)" fg:x="1604" fg:w="1"/><text x="25.9469%" y="975.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="25.7450%" y="965" width="0.0481%" height="15" fill="rgb(233,28,6)" fg:x="1607" fg:w="3"/><text x="25.9950%" y="975.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.03%)</title><rect x="25.7610%" y="949" width="0.0320%" height="15" fill="rgb(231,218,15)" fg:x="1608" fg:w="2"/><text x="26.0110%" y="959.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="25.7770%" y="933" width="0.0160%" height="15" fill="rgb(226,171,48)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="917" width="0.0160%" height="15" fill="rgb(235,201,9)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="901" width="0.0160%" height="15" fill="rgb(217,80,15)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="885" width="0.0160%" height="15" fill="rgb(219,152,8)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="869" width="0.0160%" height="15" fill="rgb(243,107,38)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="853" width="0.0160%" height="15" fill="rgb(231,17,5)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="837" width="0.0160%" height="15" fill="rgb(209,25,54)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="821" width="0.0160%" height="15" fill="rgb(219,0,2)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="805" width="0.0160%" height="15" fill="rgb(246,9,5)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="789" width="0.0160%" height="15" fill="rgb(226,159,4)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="773" width="0.0160%" height="15" fill="rgb(219,175,34)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="757" width="0.0160%" height="15" fill="rgb(236,10,46)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="25.7770%" y="741" width="0.0160%" height="15" fill="rgb(240,211,16)" fg:x="1609" fg:w="1"/><text x="26.0270%" y="751.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="25.7930%" y="965" width="0.0160%" height="15" fill="rgb(205,3,43)" fg:x="1610" fg:w="1"/><text x="26.0430%" y="975.50"></text></g><g><title>leveldb::FindFile (2 samples, 0.03%)</title><rect x="25.8090%" y="965" width="0.0320%" height="15" fill="rgb(245,7,22)" fg:x="1611" fg:w="2"/><text x="26.0590%" y="975.50"></text></g><g><title>leveldb::FindFile (12 samples, 0.19%)</title><rect x="25.6969%" y="997" width="0.1922%" height="15" fill="rgb(239,132,32)" fg:x="1604" fg:w="12"/><text x="25.9469%" y="1007.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.18%)</title><rect x="25.7129%" y="981" width="0.1762%" height="15" fill="rgb(228,202,34)" fg:x="1605" fg:w="11"/><text x="25.9629%" y="991.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="25.8411%" y="965" width="0.0481%" height="15" fill="rgb(254,200,22)" fg:x="1613" fg:w="3"/><text x="26.0911%" y="975.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="25.8891%" y="997" width="0.0320%" height="15" fill="rgb(219,10,39)" fg:x="1616" fg:w="2"/><text x="26.1391%" y="1007.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.03%)</title><rect x="25.8891%" y="981" width="0.0320%" height="15" fill="rgb(226,210,39)" fg:x="1616" fg:w="2"/><text x="26.1391%" y="991.50"></text></g><g><title>leveldb::MemTable::Get (2 samples, 0.03%)</title><rect x="25.9212%" y="997" width="0.0320%" height="15" fill="rgb(208,219,16)" fg:x="1618" fg:w="2"/><text x="26.1712%" y="1007.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Release (1 samples, 0.02%)</title><rect x="25.9532%" y="981" width="0.0160%" height="15" fill="rgb(216,158,51)" fg:x="1620" fg:w="1"/><text x="26.2032%" y="991.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="25.9692%" y="981" width="0.0160%" height="15" fill="rgb(233,14,44)" fg:x="1621" fg:w="1"/><text x="26.2192%" y="991.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="25.9853%" y="981" width="0.0160%" height="15" fill="rgb(237,97,39)" fg:x="1622" fg:w="1"/><text x="26.2353%" y="991.50"></text></g><g><title>leveldb::Table::InternalGet (2 samples, 0.03%)</title><rect x="26.0013%" y="981" width="0.0320%" height="15" fill="rgb(218,198,43)" fg:x="1623" fg:w="2"/><text x="26.2513%" y="991.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="26.0333%" y="933" width="0.0160%" height="15" fill="rgb(231,104,20)" fg:x="1625" fg:w="1"/><text x="26.2833%" y="943.50"></text></g><g><title>FindPointer (1 samples, 0.02%)</title><rect x="26.0333%" y="917" width="0.0160%" height="15" fill="rgb(254,36,13)" fg:x="1625" fg:w="1"/><text x="26.2833%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="26.0333%" y="901" width="0.0160%" height="15" fill="rgb(248,14,50)" fg:x="1625" fg:w="1"/><text x="26.2833%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (2 samples, 0.03%)</title><rect x="26.0333%" y="965" width="0.0320%" height="15" fill="rgb(217,107,29)" fg:x="1625" fg:w="2"/><text x="26.2833%" y="975.50"></text></g><g><title>Lookup (2 samples, 0.03%)</title><rect x="26.0333%" y="949" width="0.0320%" height="15" fill="rgb(251,169,33)" fg:x="1625" fg:w="2"/><text x="26.2833%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="26.0493%" y="933" width="0.0160%" height="15" fill="rgb(217,108,32)" fg:x="1626" fg:w="1"/><text x="26.2993%" y="943.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="26.0654%" y="965" width="0.0160%" height="15" fill="rgb(219,66,42)" fg:x="1627" fg:w="1"/><text x="26.3154%" y="975.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="26.0654%" y="949" width="0.0160%" height="15" fill="rgb(206,180,7)" fg:x="1627" fg:w="1"/><text x="26.3154%" y="959.50"></text></g><g><title>leveldb::Status::~Status (1 samples, 0.02%)</title><rect x="26.0654%" y="933" width="0.0160%" height="15" fill="rgb(208,226,31)" fg:x="1627" fg:w="1"/><text x="26.3154%" y="943.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="26.0814%" y="949" width="0.0160%" height="15" fill="rgb(218,26,49)" fg:x="1628" fg:w="1"/><text x="26.3314%" y="959.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="26.0814%" y="933" width="0.0160%" height="15" fill="rgb(233,197,48)" fg:x="1628" fg:w="1"/><text x="26.3314%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (31 samples, 0.50%)</title><rect x="26.0974%" y="949" width="0.4966%" height="15" fill="rgb(252,181,51)" fg:x="1629" fg:w="31"/><text x="26.3474%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="26.5940%" y="949" width="0.0160%" height="15" fill="rgb(253,90,19)" fg:x="1660" fg:w="1"/><text x="26.8440%" y="959.50"></text></g><g><title>leveldb::Block::Block (1 samples, 0.02%)</title><rect x="26.6101%" y="949" width="0.0160%" height="15" fill="rgb(215,171,30)" fg:x="1661" fg:w="1"/><text x="26.8601%" y="959.50"></text></g><g><title>leveldb::Slice::size (1 samples, 0.02%)</title><rect x="26.6101%" y="933" width="0.0160%" height="15" fill="rgb(214,222,9)" fg:x="1661" fg:w="1"/><text x="26.8601%" y="943.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="26.6261%" y="949" width="0.0320%" height="15" fill="rgb(223,3,22)" fg:x="1662" fg:w="2"/><text x="26.8761%" y="959.50"></text></g><g><title>DecodeEntry (2 samples, 0.03%)</title><rect x="26.8343%" y="933" width="0.0320%" height="15" fill="rgb(225,196,46)" fg:x="1675" fg:w="2"/><text x="27.0843%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.13%)</title><rect x="27.1067%" y="901" width="0.1282%" height="15" fill="rgb(209,110,37)" fg:x="1692" fg:w="8"/><text x="27.3567%" y="911.50"></text></g><g><title>leveldb::Slice::compare (8 samples, 0.13%)</title><rect x="27.1067%" y="885" width="0.1282%" height="15" fill="rgb(249,89,12)" fg:x="1692" fg:w="8"/><text x="27.3567%" y="895.50"></text></g><g><title>__memcmp_evex_movbe (7 samples, 0.11%)</title><rect x="27.1227%" y="869" width="0.1121%" height="15" fill="rgb(226,27,33)" fg:x="1693" fg:w="7"/><text x="27.3727%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Seek (5 samples, 0.08%)</title><rect x="27.2349%" y="901" width="0.0801%" height="15" fill="rgb(213,82,22)" fg:x="1700" fg:w="5"/><text x="27.4849%" y="911.50"></text></g><g><title>leveldb::Block::Iter::Compare (3 samples, 0.05%)</title><rect x="27.2669%" y="885" width="0.0481%" height="15" fill="rgb(248,140,0)" fg:x="1702" fg:w="3"/><text x="27.5169%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Compare (29 samples, 0.46%)</title><rect x="26.8664%" y="933" width="0.4646%" height="15" fill="rgb(228,106,3)" fg:x="1677" fg:w="29"/><text x="27.1164%" y="943.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (14 samples, 0.22%)</title><rect x="27.1067%" y="917" width="0.2243%" height="15" fill="rgb(209,23,37)" fg:x="1692" fg:w="14"/><text x="27.3567%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="27.3150%" y="901" width="0.0160%" height="15" fill="rgb(241,93,50)" fg:x="1705" fg:w="1"/><text x="27.5650%" y="911.50"></text></g><g><title>leveldb::Block::Iter::GetRestartPoint (1 samples, 0.02%)</title><rect x="27.3310%" y="933" width="0.0160%" height="15" fill="rgb(253,46,43)" fg:x="1706" fg:w="1"/><text x="27.5810%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.3470%" y="917" width="0.0160%" height="15" fill="rgb(226,206,43)" fg:x="1707" fg:w="1"/><text x="27.5970%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.3470%" y="901" width="0.0160%" height="15" fill="rgb(217,54,7)" fg:x="1707" fg:w="1"/><text x="27.5970%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.3470%" y="885" width="0.0160%" height="15" fill="rgb(223,5,52)" fg:x="1707" fg:w="1"/><text x="27.5970%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="27.3630%" y="917" width="0.0160%" height="15" fill="rgb(206,52,46)" fg:x="1708" fg:w="1"/><text x="27.6130%" y="927.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="27.3951%" y="901" width="0.0160%" height="15" fill="rgb(253,136,11)" fg:x="1710" fg:w="1"/><text x="27.6451%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="27.4111%" y="901" width="0.0160%" height="15" fill="rgb(208,106,33)" fg:x="1711" fg:w="1"/><text x="27.6611%" y="911.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (3 samples, 0.05%)</title><rect x="27.4271%" y="901" width="0.0481%" height="15" fill="rgb(206,54,4)" fg:x="1712" fg:w="3"/><text x="27.6771%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.03%)</title><rect x="27.4431%" y="885" width="0.0320%" height="15" fill="rgb(213,3,15)" fg:x="1713" fg:w="2"/><text x="27.6931%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="27.4431%" y="869" width="0.0320%" height="15" fill="rgb(252,211,39)" fg:x="1713" fg:w="2"/><text x="27.6931%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="27.4591%" y="853" width="0.0160%" height="15" fill="rgb(223,6,36)" fg:x="1714" fg:w="1"/><text x="27.7091%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="27.4591%" y="837" width="0.0160%" height="15" fill="rgb(252,169,45)" fg:x="1714" fg:w="1"/><text x="27.7091%" y="847.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.03%)</title><rect x="27.4912%" y="853" width="0.0320%" height="15" fill="rgb(212,48,26)" fg:x="1716" fg:w="2"/><text x="27.7412%" y="863.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="27.5232%" y="853" width="0.0160%" height="15" fill="rgb(251,102,48)" fg:x="1718" fg:w="1"/><text x="27.7732%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="27.5393%" y="853" width="0.0160%" height="15" fill="rgb(243,208,16)" fg:x="1719" fg:w="1"/><text x="27.7893%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (6 samples, 0.10%)</title><rect x="27.4752%" y="885" width="0.0961%" height="15" fill="rgb(219,96,24)" fg:x="1715" fg:w="6"/><text x="27.7252%" y="895.50"></text></g><g><title>leveldb::Slice::compare (5 samples, 0.08%)</title><rect x="27.4912%" y="869" width="0.0801%" height="15" fill="rgb(219,33,29)" fg:x="1716" fg:w="5"/><text x="27.7412%" y="879.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="27.5553%" y="853" width="0.0160%" height="15" fill="rgb(223,176,5)" fg:x="1720" fg:w="1"/><text x="27.8053%" y="863.50"></text></g><g><title>DecodeEntry (2 samples, 0.03%)</title><rect x="27.6033%" y="869" width="0.0320%" height="15" fill="rgb(228,140,14)" fg:x="1723" fg:w="2"/><text x="27.8533%" y="879.50"></text></g><g><title>leveldb::Block::Iter::NextEntryOffset (1 samples, 0.02%)</title><rect x="27.6354%" y="869" width="0.0160%" height="15" fill="rgb(217,179,31)" fg:x="1725" fg:w="1"/><text x="27.8854%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="27.6514%" y="869" width="0.0160%" height="15" fill="rgb(230,9,30)" fg:x="1726" fg:w="1"/><text x="27.9014%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (7 samples, 0.11%)</title><rect x="27.5713%" y="885" width="0.1121%" height="15" fill="rgb(230,136,20)" fg:x="1721" fg:w="7"/><text x="27.8213%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="27.6674%" y="869" width="0.0160%" height="15" fill="rgb(215,210,22)" fg:x="1727" fg:w="1"/><text x="27.9174%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="27.6674%" y="853" width="0.0160%" height="15" fill="rgb(218,43,5)" fg:x="1727" fg:w="1"/><text x="27.9174%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (4 samples, 0.06%)</title><rect x="27.6834%" y="885" width="0.0641%" height="15" fill="rgb(216,11,5)" fg:x="1728" fg:w="4"/><text x="27.9334%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Seek (4 samples, 0.06%)</title><rect x="27.6834%" y="869" width="0.0641%" height="15" fill="rgb(209,82,29)" fg:x="1728" fg:w="4"/><text x="27.9334%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Compare (2 samples, 0.03%)</title><rect x="27.7155%" y="853" width="0.0320%" height="15" fill="rgb(244,115,12)" fg:x="1730" fg:w="2"/><text x="27.9655%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (7 samples, 0.11%)</title><rect x="27.7475%" y="885" width="0.1121%" height="15" fill="rgb(222,82,18)" fg:x="1732" fg:w="7"/><text x="27.9975%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Compare (31 samples, 0.50%)</title><rect x="27.3790%" y="917" width="0.4966%" height="15" fill="rgb(249,227,8)" fg:x="1709" fg:w="31"/><text x="27.6290%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (25 samples, 0.40%)</title><rect x="27.4752%" y="901" width="0.4005%" height="15" fill="rgb(253,141,45)" fg:x="1715" fg:w="25"/><text x="27.7252%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="27.8597%" y="885" width="0.0160%" height="15" fill="rgb(234,184,4)" fg:x="1739" fg:w="1"/><text x="28.1097%" y="895.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="27.8757%" y="917" width="0.0160%" height="15" fill="rgb(218,194,23)" fg:x="1740" fg:w="1"/><text x="28.1257%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="27.8757%" y="901" width="0.0160%" height="15" fill="rgb(235,66,41)" fg:x="1740" fg:w="1"/><text x="28.1257%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="27.8757%" y="885" width="0.0160%" height="15" fill="rgb(245,217,1)" fg:x="1740" fg:w="1"/><text x="28.1257%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="27.8757%" y="869" width="0.0160%" height="15" fill="rgb(229,91,1)" fg:x="1740" fg:w="1"/><text x="28.1257%" y="879.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="27.8757%" y="853" width="0.0160%" height="15" fill="rgb(207,101,30)" fg:x="1740" fg:w="1"/><text x="28.1257%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (2 samples, 0.03%)</title><rect x="27.8917%" y="917" width="0.0320%" height="15" fill="rgb(223,82,49)" fg:x="1741" fg:w="2"/><text x="28.1417%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Compare (1 samples, 0.02%)</title><rect x="27.9077%" y="901" width="0.0160%" height="15" fill="rgb(218,167,17)" fg:x="1742" fg:w="1"/><text x="28.1577%" y="911.50"></text></g><g><title>leveldb::Block::Iter::Seek (80 samples, 1.28%)</title><rect x="26.6581%" y="949" width="1.2816%" height="15" fill="rgb(208,103,14)" fg:x="1664" fg:w="80"/><text x="26.9081%" y="959.50"></text></g><g><title>leveldb::Block::Iter::Seek (37 samples, 0.59%)</title><rect x="27.3470%" y="933" width="0.5928%" height="15" fill="rgb(238,20,8)" fg:x="1707" fg:w="37"/><text x="27.5970%" y="943.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="27.9237%" y="917" width="0.0160%" height="15" fill="rgb(218,80,54)" fg:x="1743" fg:w="1"/><text x="28.1737%" y="927.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.02%)</title><rect x="27.9398%" y="949" width="0.0160%" height="15" fill="rgb(240,144,17)" fg:x="1744" fg:w="1"/><text x="28.1898%" y="959.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="27.9558%" y="949" width="0.0160%" height="15" fill="rgb(245,27,50)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="959.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="27.9558%" y="933" width="0.0160%" height="15" fill="rgb(251,51,7)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="943.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="27.9558%" y="917" width="0.0160%" height="15" fill="rgb(245,217,29)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="927.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="27.9558%" y="901" width="0.0160%" height="15" fill="rgb(221,176,29)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="911.50"></text></g><g><title>leveldb::Iterator::CleanupNode::Run (1 samples, 0.02%)</title><rect x="27.9558%" y="885" width="0.0160%" height="15" fill="rgb(212,180,24)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="895.50"></text></g><g><title>leveldb::SaveValue (1 samples, 0.02%)</title><rect x="27.9558%" y="869" width="0.0160%" height="15" fill="rgb(254,24,2)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="27.9558%" y="853" width="0.0160%" height="15" fill="rgb(230,100,2)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="27.9558%" y="837" width="0.0160%" height="15" fill="rgb(219,142,25)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="847.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="27.9558%" y="821" width="0.0160%" height="15" fill="rgb(240,73,43)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="831.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="27.9558%" y="805" width="0.0160%" height="15" fill="rgb(214,114,15)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="27.9558%" y="789" width="0.0160%" height="15" fill="rgb(207,130,4)" fg:x="1745" fg:w="1"/><text x="28.2058%" y="799.50"></text></g><g><title>leveldb::Block::NewIterator (4 samples, 0.06%)</title><rect x="27.9718%" y="949" width="0.0641%" height="15" fill="rgb(221,25,40)" fg:x="1746" fg:w="4"/><text x="28.2218%" y="959.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (1 samples, 0.02%)</title><rect x="28.0359%" y="949" width="0.0160%" height="15" fill="rgb(241,184,7)" fg:x="1750" fg:w="1"/><text x="28.2859%" y="959.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="28.0359%" y="933" width="0.0160%" height="15" fill="rgb(235,159,4)" fg:x="1750" fg:w="1"/><text x="28.2859%" y="943.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="28.0359%" y="917" width="0.0160%" height="15" fill="rgb(214,87,48)" fg:x="1750" fg:w="1"/><text x="28.2859%" y="927.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="28.0359%" y="901" width="0.0160%" height="15" fill="rgb(246,198,24)" fg:x="1750" fg:w="1"/><text x="28.2859%" y="911.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.02%)</title><rect x="28.0519%" y="949" width="0.0160%" height="15" fill="rgb(209,66,40)" fg:x="1751" fg:w="1"/><text x="28.3019%" y="959.50"></text></g><g><title>leveldb::GetVarint64Ptr (1 samples, 0.02%)</title><rect x="28.0679%" y="949" width="0.0160%" height="15" fill="rgb(233,147,39)" fg:x="1752" fg:w="1"/><text x="28.3179%" y="959.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="28.0839%" y="949" width="0.0160%" height="15" fill="rgb(231,145,52)" fg:x="1753" fg:w="1"/><text x="28.3339%" y="959.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.24%)</title><rect x="28.1000%" y="949" width="0.2403%" height="15" fill="rgb(206,20,26)" fg:x="1754" fg:w="15"/><text x="28.3500%" y="959.50"></text></g><g><title>leveldb::SaveValue (1 samples, 0.02%)</title><rect x="28.3403%" y="949" width="0.0160%" height="15" fill="rgb(238,220,4)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="959.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="28.3403%" y="933" width="0.0160%" height="15" fill="rgb(252,195,42)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="943.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="28.3403%" y="917" width="0.0160%" height="15" fill="rgb(209,10,6)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="28.3403%" y="901" width="0.0160%" height="15" fill="rgb(229,3,52)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="28.3403%" y="885" width="0.0160%" height="15" fill="rgb(253,49,37)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (1 samples, 0.02%)</title><rect x="28.3403%" y="869" width="0.0160%" height="15" fill="rgb(240,103,49)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="879.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="28.3403%" y="853" width="0.0160%" height="15" fill="rgb(250,182,30)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="863.50"></text></g><g><title>std::allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="28.3403%" y="837" width="0.0160%" height="15" fill="rgb(248,8,30)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="847.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="28.3403%" y="821" width="0.0160%" height="15" fill="rgb(237,120,30)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="831.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="28.3403%" y="805" width="0.0160%" height="15" fill="rgb(221,146,34)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="815.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="28.3403%" y="789" width="0.0160%" height="15" fill="rgb(242,55,13)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="799.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="28.3403%" y="773" width="0.0160%" height="15" fill="rgb(242,112,31)" fg:x="1769" fg:w="1"/><text x="28.5903%" y="783.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.03%)</title><rect x="28.3883%" y="933" width="0.0320%" height="15" fill="rgb(249,192,27)" fg:x="1772" fg:w="2"/><text x="28.6383%" y="943.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="28.4044%" y="917" width="0.0160%" height="15" fill="rgb(208,204,44)" fg:x="1773" fg:w="1"/><text x="28.6544%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (1 samples, 0.02%)</title><rect x="28.4204%" y="933" width="0.0160%" height="15" fill="rgb(208,93,54)" fg:x="1774" fg:w="1"/><text x="28.6704%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="28.4364%" y="933" width="0.0160%" height="15" fill="rgb(242,1,31)" fg:x="1775" fg:w="1"/><text x="28.6864%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="28.4364%" y="917" width="0.0160%" height="15" fill="rgb(241,83,25)" fg:x="1775" fg:w="1"/><text x="28.6864%" y="927.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="28.4364%" y="901" width="0.0160%" height="15" fill="rgb(205,169,50)" fg:x="1775" fg:w="1"/><text x="28.6864%" y="911.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="28.4524%" y="917" width="0.0160%" height="15" fill="rgb(239,186,37)" fg:x="1776" fg:w="1"/><text x="28.7024%" y="927.50"></text></g><g><title>leveldb::Block::NewIterator (2 samples, 0.03%)</title><rect x="28.4524%" y="933" width="0.0320%" height="15" fill="rgb(205,221,10)" fg:x="1776" fg:w="2"/><text x="28.7024%" y="943.50"></text></g><g><title>leveldb::Block::NumRestarts (1 samples, 0.02%)</title><rect x="28.4684%" y="917" width="0.0160%" height="15" fill="rgb(218,196,15)" fg:x="1777" fg:w="1"/><text x="28.7184%" y="927.50"></text></g><g><title>leveldb::DecodeFixed32 (1 samples, 0.02%)</title><rect x="28.4684%" y="901" width="0.0160%" height="15" fill="rgb(218,196,35)" fg:x="1777" fg:w="1"/><text x="28.7184%" y="911.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="28.4684%" y="885" width="0.0160%" height="15" fill="rgb(233,63,24)" fg:x="1777" fg:w="1"/><text x="28.7184%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (1 samples, 0.02%)</title><rect x="28.4845%" y="917" width="0.0160%" height="15" fill="rgb(225,8,4)" fg:x="1778" fg:w="1"/><text x="28.7345%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (2 samples, 0.03%)</title><rect x="28.5005%" y="901" width="0.0320%" height="15" fill="rgb(234,105,35)" fg:x="1779" fg:w="2"/><text x="28.7505%" y="911.50"></text></g><g><title>leveldb::GetVarint64Ptr (4 samples, 0.06%)</title><rect x="28.5325%" y="901" width="0.0641%" height="15" fill="rgb(236,21,32)" fg:x="1781" fg:w="4"/><text x="28.7825%" y="911.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="28.5325%" y="885" width="0.0641%" height="15" fill="rgb(228,109,6)" fg:x="1781" fg:w="4"/><text x="28.7825%" y="895.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="28.5325%" y="869" width="0.0641%" height="15" fill="rgb(229,215,31)" fg:x="1781" fg:w="4"/><text x="28.7825%" y="879.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="28.5325%" y="853" width="0.0641%" height="15" fill="rgb(221,52,54)" fg:x="1781" fg:w="4"/><text x="28.7825%" y="863.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="28.5325%" y="837" width="0.0641%" height="15" fill="rgb(252,129,43)" fg:x="1781" fg:w="4"/><text x="28.7825%" y="847.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="28.5485%" y="821" width="0.0481%" height="15" fill="rgb(248,183,27)" fg:x="1782" fg:w="3"/><text x="28.7985%" y="831.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="28.5485%" y="805" width="0.0481%" height="15" fill="rgb(250,0,22)" fg:x="1782" fg:w="3"/><text x="28.7985%" y="815.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="28.5485%" y="789" width="0.0481%" height="15" fill="rgb(213,166,10)" fg:x="1782" fg:w="3"/><text x="28.7985%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="28.5485%" y="773" width="0.0481%" height="15" fill="rgb(207,163,36)" fg:x="1782" fg:w="3"/><text x="28.7985%" y="783.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="28.5485%" y="757" width="0.0481%" height="15" fill="rgb(208,122,22)" fg:x="1782" fg:w="3"/><text x="28.7985%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="28.5485%" y="741" width="0.0481%" height="15" fill="rgb(207,104,49)" fg:x="1782" fg:w="3"/><text x="28.7985%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="28.5485%" y="725" width="0.0481%" height="15" fill="rgb(248,211,50)" fg:x="1782" fg:w="3"/><text x="28.7985%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="28.5485%" y="709" width="0.0481%" height="15" fill="rgb(217,13,45)" fg:x="1782" fg:w="3"/><text x="28.7985%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="28.5485%" y="693" width="0.0481%" height="15" fill="rgb(211,216,49)" fg:x="1782" fg:w="3"/><text x="28.7985%" y="703.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (8 samples, 0.13%)</title><rect x="28.4845%" y="933" width="0.1282%" height="15" fill="rgb(221,58,53)" fg:x="1778" fg:w="8"/><text x="28.7345%" y="943.50"></text></g><g><title>leveldb::GetVarint64 (7 samples, 0.11%)</title><rect x="28.5005%" y="917" width="0.1121%" height="15" fill="rgb(220,112,41)" fg:x="1779" fg:w="7"/><text x="28.7505%" y="927.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="28.5966%" y="901" width="0.0160%" height="15" fill="rgb(236,38,28)" fg:x="1785" fg:w="1"/><text x="28.8466%" y="911.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (1 samples, 0.02%)</title><rect x="28.6126%" y="933" width="0.0160%" height="15" fill="rgb(227,195,22)" fg:x="1786" fg:w="1"/><text x="28.8626%" y="943.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.02%)</title><rect x="28.6286%" y="933" width="0.0160%" height="15" fill="rgb(214,55,33)" fg:x="1787" fg:w="1"/><text x="28.8786%" y="943.50"></text></g><g><title>leveldb::GetVarint64Ptr (1 samples, 0.02%)</title><rect x="28.6447%" y="933" width="0.0160%" height="15" fill="rgb(248,80,13)" fg:x="1788" fg:w="1"/><text x="28.8947%" y="943.50"></text></g><g><title>leveldb::crc32c::Unmask (65 samples, 1.04%)</title><rect x="28.6767%" y="917" width="1.0413%" height="15" fill="rgb(238,52,6)" fg:x="1790" fg:w="65"/><text x="28.9267%" y="927.50"></text></g><g><title>[unknown] (64 samples, 1.03%)</title><rect x="28.6927%" y="901" width="1.0253%" height="15" fill="rgb(224,198,47)" fg:x="1791" fg:w="64"/><text x="28.9427%" y="911.50"></text></g><g><title>[unknown] (63 samples, 1.01%)</title><rect x="28.7087%" y="885" width="1.0093%" height="15" fill="rgb(233,171,20)" fg:x="1792" fg:w="63"/><text x="28.9587%" y="895.50"></text></g><g><title>[unknown] (63 samples, 1.01%)</title><rect x="28.7087%" y="869" width="1.0093%" height="15" fill="rgb(241,30,25)" fg:x="1792" fg:w="63"/><text x="28.9587%" y="879.50"></text></g><g><title>[unknown] (62 samples, 0.99%)</title><rect x="28.7248%" y="853" width="0.9933%" height="15" fill="rgb(207,171,38)" fg:x="1793" fg:w="62"/><text x="28.9748%" y="863.50"></text></g><g><title>[unknown] (61 samples, 0.98%)</title><rect x="28.7408%" y="837" width="0.9773%" height="15" fill="rgb(234,70,1)" fg:x="1794" fg:w="61"/><text x="28.9908%" y="847.50"></text></g><g><title>[unknown] (54 samples, 0.87%)</title><rect x="28.8529%" y="821" width="0.8651%" height="15" fill="rgb(232,178,18)" fg:x="1801" fg:w="54"/><text x="29.1029%" y="831.50"></text></g><g><title>[unknown] (51 samples, 0.82%)</title><rect x="28.9010%" y="805" width="0.8170%" height="15" fill="rgb(241,78,40)" fg:x="1804" fg:w="51"/><text x="29.1510%" y="815.50"></text></g><g><title>[unknown] (39 samples, 0.62%)</title><rect x="29.0932%" y="789" width="0.6248%" height="15" fill="rgb(222,35,25)" fg:x="1816" fg:w="39"/><text x="29.3432%" y="799.50"></text></g><g><title>[unknown] (21 samples, 0.34%)</title><rect x="29.3816%" y="773" width="0.3364%" height="15" fill="rgb(207,92,16)" fg:x="1834" fg:w="21"/><text x="29.6316%" y="783.50"></text></g><g><title>[unknown] (17 samples, 0.27%)</title><rect x="29.4457%" y="757" width="0.2723%" height="15" fill="rgb(216,59,51)" fg:x="1838" fg:w="17"/><text x="29.6957%" y="767.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="29.5578%" y="741" width="0.1602%" height="15" fill="rgb(213,80,28)" fg:x="1845" fg:w="10"/><text x="29.8078%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.6700%" y="725" width="0.0481%" height="15" fill="rgb(220,93,7)" fg:x="1852" fg:w="3"/><text x="29.9200%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="885" width="0.0160%" height="15" fill="rgb(225,24,44)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="869" width="0.0160%" height="15" fill="rgb(243,74,40)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="853" width="0.0160%" height="15" fill="rgb(228,39,7)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="837" width="0.0160%" height="15" fill="rgb(227,79,8)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="821" width="0.0160%" height="15" fill="rgb(236,58,11)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="805" width="0.0160%" height="15" fill="rgb(249,63,35)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="789" width="0.0160%" height="15" fill="rgb(252,114,16)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="773" width="0.0160%" height="15" fill="rgb(254,151,24)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="757" width="0.0160%" height="15" fill="rgb(253,54,39)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="741" width="0.0160%" height="15" fill="rgb(243,25,45)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="725" width="0.0160%" height="15" fill="rgb(234,134,9)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="709" width="0.0160%" height="15" fill="rgb(227,166,31)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.2948%" y="693" width="0.0160%" height="15" fill="rgb(245,143,41)" fg:x="1891" fg:w="1"/><text x="30.5448%" y="703.50"></text></g><g><title>crc32c::ExtendSse42 (82 samples, 1.31%)</title><rect x="29.7180%" y="901" width="1.3137%" height="15" fill="rgb(238,181,32)" fg:x="1855" fg:w="82"/><text x="29.9680%" y="911.50"></text></g><g><title>_mm_crc32_u64 (45 samples, 0.72%)</title><rect x="30.3108%" y="885" width="0.7209%" height="15" fill="rgb(224,113,18)" fg:x="1892" fg:w="45"/><text x="30.5608%" y="895.50"></text></g><g><title>leveldb::Table::BlockReader (168 samples, 2.69%)</title><rect x="28.3563%" y="949" width="2.6914%" height="15" fill="rgb(240,229,28)" fg:x="1770" fg:w="168"/><text x="28.6063%" y="959.50">le..</text></g><g><title>leveldb::ReadBlock (149 samples, 2.39%)</title><rect x="28.6607%" y="933" width="2.3871%" height="15" fill="rgb(250,185,3)" fg:x="1789" fg:w="149"/><text x="28.9107%" y="943.50">le..</text></g><g><title>leveldb::crc32c::Value (83 samples, 1.33%)</title><rect x="29.7180%" y="917" width="1.3297%" height="15" fill="rgb(212,59,25)" fg:x="1855" fg:w="83"/><text x="29.9680%" y="927.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.02%)</title><rect x="31.0317%" y="901" width="0.0160%" height="15" fill="rgb(221,87,20)" fg:x="1937" fg:w="1"/><text x="31.2817%" y="911.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="31.0317%" y="885" width="0.0160%" height="15" fill="rgb(213,74,28)" fg:x="1937" fg:w="1"/><text x="31.2817%" y="895.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="31.0477%" y="949" width="0.0160%" height="15" fill="rgb(224,132,34)" fg:x="1938" fg:w="1"/><text x="31.2977%" y="959.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.02%)</title><rect x="31.0638%" y="949" width="0.0160%" height="15" fill="rgb(222,101,24)" fg:x="1939" fg:w="1"/><text x="31.3138%" y="959.50"></text></g><g><title>leveldb::Table::InternalGet (313 samples, 5.01%)</title><rect x="26.0814%" y="965" width="5.0144%" height="15" fill="rgb(254,142,4)" fg:x="1628" fg:w="313"/><text x="26.3314%" y="975.50">leveld..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="31.0798%" y="949" width="0.0160%" height="15" fill="rgb(230,229,49)" fg:x="1940" fg:w="1"/><text x="31.3298%" y="959.50"></text></g><g><title>Lookup (2 samples, 0.03%)</title><rect x="31.0958%" y="917" width="0.0320%" height="15" fill="rgb(238,70,47)" fg:x="1941" fg:w="2"/><text x="31.3458%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (2 samples, 0.03%)</title><rect x="31.0958%" y="901" width="0.0320%" height="15" fill="rgb(231,160,17)" fg:x="1941" fg:w="2"/><text x="31.3458%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (3 samples, 0.05%)</title><rect x="31.0958%" y="949" width="0.0481%" height="15" fill="rgb(218,68,53)" fg:x="1941" fg:w="3"/><text x="31.3458%" y="959.50"></text></g><g><title>Lookup (3 samples, 0.05%)</title><rect x="31.0958%" y="933" width="0.0481%" height="15" fill="rgb(236,111,10)" fg:x="1941" fg:w="3"/><text x="31.3458%" y="943.50"></text></g><g><title>Ref (1 samples, 0.02%)</title><rect x="31.1278%" y="917" width="0.0160%" height="15" fill="rgb(224,34,41)" fg:x="1943" fg:w="1"/><text x="31.3778%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="31.1278%" y="901" width="0.0160%" height="15" fill="rgb(241,118,19)" fg:x="1943" fg:w="1"/><text x="31.3778%" y="911.50"></text></g><g><title>leveldb::FindFile (1 samples, 0.02%)</title><rect x="31.1439%" y="949" width="0.0160%" height="15" fill="rgb(238,129,25)" fg:x="1944" fg:w="1"/><text x="31.3939%" y="959.50"></text></g><g><title>leveldb::Table::Open (2 samples, 0.03%)</title><rect x="31.1599%" y="949" width="0.0320%" height="15" fill="rgb(238,22,31)" fg:x="1945" fg:w="2"/><text x="31.4099%" y="959.50"></text></g><g><title>leveldb::ReadBlock (2 samples, 0.03%)</title><rect x="31.1599%" y="933" width="0.0320%" height="15" fill="rgb(222,174,48)" fg:x="1945" fg:w="2"/><text x="31.4099%" y="943.50"></text></g><g><title>leveldb::crc32c::Value (2 samples, 0.03%)</title><rect x="31.1599%" y="917" width="0.0320%" height="15" fill="rgb(206,152,40)" fg:x="1945" fg:w="2"/><text x="31.4099%" y="927.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.03%)</title><rect x="31.1599%" y="901" width="0.0320%" height="15" fill="rgb(218,99,54)" fg:x="1945" fg:w="2"/><text x="31.4099%" y="911.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="31.1759%" y="885" width="0.0160%" height="15" fill="rgb(220,174,26)" fg:x="1946" fg:w="1"/><text x="31.4259%" y="895.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.02%)</title><rect x="31.1919%" y="949" width="0.0160%" height="15" fill="rgb(245,116,9)" fg:x="1947" fg:w="1"/><text x="31.4419%" y="959.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (1 samples, 0.02%)</title><rect x="31.2079%" y="949" width="0.0160%" height="15" fill="rgb(209,72,35)" fg:x="1948" fg:w="1"/><text x="31.4579%" y="959.50"></text></g><g><title>leveldb::InternalKey::user_key (1 samples, 0.02%)</title><rect x="31.2079%" y="933" width="0.0160%" height="15" fill="rgb(226,126,21)" fg:x="1948" fg:w="1"/><text x="31.4579%" y="943.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="31.2079%" y="917" width="0.0160%" height="15" fill="rgb(227,192,1)" fg:x="1948" fg:w="1"/><text x="31.4579%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1 samples, 0.02%)</title><rect x="31.2079%" y="901" width="0.0160%" height="15" fill="rgb(237,180,29)" fg:x="1948" fg:w="1"/><text x="31.4579%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="31.2079%" y="885" width="0.0160%" height="15" fill="rgb(230,197,35)" fg:x="1948" fg:w="1"/><text x="31.4579%" y="895.50"></text></g><g><title>leveldb::DBImpl::Get (415 samples, 6.65%)</title><rect x="24.5915%" y="1045" width="6.6485%" height="15" fill="rgb(246,193,31)" fg:x="1535" fg:w="415"/><text x="24.8415%" y="1055.50">leveldb::..</text></g><g><title>leveldb::Version::Get (352 samples, 5.64%)</title><rect x="25.6008%" y="1029" width="5.6392%" height="15" fill="rgb(241,36,4)" fg:x="1598" fg:w="352"/><text x="25.8508%" y="1039.50">leveldb..</text></g><g><title>leveldb::Version::ForEachOverlapping (349 samples, 5.59%)</title><rect x="25.6488%" y="1013" width="5.5912%" height="15" fill="rgb(241,130,17)" fg:x="1601" fg:w="349"/><text x="25.8988%" y="1023.50">leveldb..</text></g><g><title>leveldb::Version::Get (330 samples, 5.29%)</title><rect x="25.9532%" y="997" width="5.2868%" height="15" fill="rgb(206,137,32)" fg:x="1620" fg:w="330"/><text x="26.2032%" y="1007.50">leveld..</text></g><g><title>leveldb::TableCache::Get (325 samples, 5.21%)</title><rect x="26.0333%" y="981" width="5.2067%" height="15" fill="rgb(237,228,51)" fg:x="1625" fg:w="325"/><text x="26.2833%" y="991.50">leveld..</text></g><g><title>leveldb::TableCache::FindTable (9 samples, 0.14%)</title><rect x="31.0958%" y="965" width="0.1442%" height="15" fill="rgb(243,6,42)" fg:x="1941" fg:w="9"/><text x="31.3458%" y="975.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.02%)</title><rect x="31.2240%" y="949" width="0.0160%" height="15" fill="rgb(251,74,28)" fg:x="1949" fg:w="1"/><text x="31.4740%" y="959.50"></text></g><g><title>leveldb::Version::Get (2 samples, 0.03%)</title><rect x="31.2400%" y="1045" width="0.0320%" height="15" fill="rgb(218,20,49)" fg:x="1950" fg:w="2"/><text x="31.4900%" y="1055.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="31.2560%" y="1029" width="0.0160%" height="15" fill="rgb(238,28,14)" fg:x="1951" fg:w="1"/><text x="31.5060%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="31.2560%" y="1013" width="0.0160%" height="15" fill="rgb(229,40,46)" fg:x="1951" fg:w="1"/><text x="31.5060%" y="1023.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (2 samples, 0.03%)</title><rect x="31.2720%" y="1045" width="0.0320%" height="15" fill="rgb(244,195,20)" fg:x="1952" fg:w="2"/><text x="31.5220%" y="1055.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (423 samples, 6.78%)</title><rect x="24.5755%" y="1061" width="6.7767%" height="15" fill="rgb(253,56,35)" fg:x="1534" fg:w="423"/><text x="24.8255%" y="1071.50">CDBWrappe..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (3 samples, 0.05%)</title><rect x="31.3041%" y="1045" width="0.0481%" height="15" fill="rgb(210,149,44)" fg:x="1954" fg:w="3"/><text x="31.5541%" y="1055.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="31.3201%" y="1029" width="0.0320%" height="15" fill="rgb(240,135,12)" fg:x="1955" fg:w="2"/><text x="31.5701%" y="1039.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="31.3361%" y="1013" width="0.0160%" height="15" fill="rgb(251,24,50)" fg:x="1956" fg:w="1"/><text x="31.5861%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="31.3361%" y="997" width="0.0160%" height="15" fill="rgb(243,200,47)" fg:x="1956" fg:w="1"/><text x="31.5861%" y="1007.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="31.3361%" y="981" width="0.0160%" height="15" fill="rgb(224,166,26)" fg:x="1956" fg:w="1"/><text x="31.5861%" y="991.50"></text></g><g><title>CCoinsViewDB::GetCoin (425 samples, 6.81%)</title><rect x="24.5755%" y="1077" width="6.8087%" height="15" fill="rgb(233,0,47)" fg:x="1534" fg:w="425"/><text x="24.8255%" y="1087.50">CCoinsVie..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="31.3521%" y="1061" width="0.0320%" height="15" fill="rgb(253,80,5)" fg:x="1957" fg:w="2"/><text x="31.6021%" y="1071.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="31.3521%" y="1045" width="0.0320%" height="15" fill="rgb(214,133,25)" fg:x="1957" fg:w="2"/><text x="31.6021%" y="1055.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.03%)</title><rect x="31.3842%" y="869" width="0.0320%" height="15" fill="rgb(209,27,14)" fg:x="1959" fg:w="2"/><text x="31.6342%" y="879.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.03%)</title><rect x="31.3842%" y="853" width="0.0320%" height="15" fill="rgb(219,102,51)" fg:x="1959" fg:w="2"/><text x="31.6342%" y="863.50"></text></g><g><title>DataStream::Xor (2 samples, 0.03%)</title><rect x="31.3842%" y="837" width="0.0320%" height="15" fill="rgb(237,18,16)" fg:x="1959" fg:w="2"/><text x="31.6342%" y="847.50"></text></g><g><title>util::Xor (2 samples, 0.03%)</title><rect x="31.3842%" y="821" width="0.0320%" height="15" fill="rgb(241,85,17)" fg:x="1959" fg:w="2"/><text x="31.6342%" y="831.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="31.4002%" y="805" width="0.0160%" height="15" fill="rgb(236,90,42)" fg:x="1960" fg:w="1"/><text x="31.6502%" y="815.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="31.4002%" y="789" width="0.0160%" height="15" fill="rgb(249,57,21)" fg:x="1960" fg:w="1"/><text x="31.6502%" y="799.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="31.3842%" y="917" width="0.0481%" height="15" fill="rgb(243,12,36)" fg:x="1959" fg:w="3"/><text x="31.6342%" y="927.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long&amp;&gt;::Unserialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="31.3842%" y="901" width="0.0481%" height="15" fill="rgb(253,128,47)" fg:x="1959" fg:w="3"/><text x="31.6342%" y="911.50"></text></g><g><title>void AmountCompression::Unser&lt;DataStream, long&gt; (3 samples, 0.05%)</title><rect x="31.3842%" y="885" width="0.0481%" height="15" fill="rgb(207,33,20)" fg:x="1959" fg:w="3"/><text x="31.6342%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&amp;) (1 samples, 0.02%)</title><rect x="31.4162%" y="869" width="0.0160%" height="15" fill="rgb(233,215,35)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="879.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="31.4162%" y="853" width="0.0160%" height="15" fill="rgb(249,188,52)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="863.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="31.4162%" y="837" width="0.0160%" height="15" fill="rgb(225,12,32)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="847.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="31.4162%" y="821" width="0.0160%" height="15" fill="rgb(247,98,14)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="831.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="31.4162%" y="805" width="0.0160%" height="15" fill="rgb(247,219,48)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="815.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="31.4162%" y="789" width="0.0160%" height="15" fill="rgb(253,60,48)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="799.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="31.4162%" y="773" width="0.0160%" height="15" fill="rgb(245,15,52)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="783.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="31.4162%" y="757" width="0.0160%" height="15" fill="rgb(220,133,28)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="767.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="31.4162%" y="741" width="0.0160%" height="15" fill="rgb(217,180,4)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="751.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="31.4162%" y="725" width="0.0160%" height="15" fill="rgb(251,24,1)" fg:x="1961" fg:w="1"/><text x="31.6662%" y="735.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="31.4322%" y="853" width="0.0160%" height="15" fill="rgb(212,185,49)" fg:x="1962" fg:w="1"/><text x="31.6822%" y="863.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="31.4322%" y="837" width="0.0160%" height="15" fill="rgb(215,175,22)" fg:x="1962" fg:w="1"/><text x="31.6822%" y="847.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="31.4322%" y="821" width="0.0160%" height="15" fill="rgb(250,205,14)" fg:x="1962" fg:w="1"/><text x="31.6822%" y="831.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="31.4322%" y="805" width="0.0160%" height="15" fill="rgb(225,211,22)" fg:x="1962" fg:w="1"/><text x="31.6822%" y="815.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.03%)</title><rect x="31.4322%" y="885" width="0.0320%" height="15" fill="rgb(251,179,42)" fg:x="1962" fg:w="2"/><text x="31.6822%" y="895.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.03%)</title><rect x="31.4322%" y="869" width="0.0320%" height="15" fill="rgb(208,216,51)" fg:x="1962" fg:w="2"/><text x="31.6822%" y="879.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="31.4483%" y="853" width="0.0160%" height="15" fill="rgb(235,36,11)" fg:x="1963" fg:w="1"/><text x="31.6983%" y="863.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="31.4483%" y="837" width="0.0160%" height="15" fill="rgb(213,189,28)" fg:x="1963" fg:w="1"/><text x="31.6983%" y="847.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Coin&amp;&gt;(Coin&amp;) (6 samples, 0.10%)</title><rect x="31.3842%" y="1061" width="0.0961%" height="15" fill="rgb(227,203,42)" fg:x="1959" fg:w="6"/><text x="31.6342%" y="1071.50"></text></g><g><title>void Unserialize&lt;DataStream, Coin&amp;&gt; (6 samples, 0.10%)</title><rect x="31.3842%" y="1045" width="0.0961%" height="15" fill="rgb(244,72,36)" fg:x="1959" fg:w="6"/><text x="31.6342%" y="1055.50"></text></g><g><title>void Coin::Unserialize&lt;DataStream&gt; (6 samples, 0.10%)</title><rect x="31.3842%" y="1029" width="0.0961%" height="15" fill="rgb(213,53,17)" fg:x="1959" fg:w="6"/><text x="31.6342%" y="1039.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="31.3842%" y="1013" width="0.0961%" height="15" fill="rgb(207,167,3)" fg:x="1959" fg:w="6"/><text x="31.6342%" y="1023.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut&amp;&gt;::Unserialize&lt;DataStream&gt; (6 samples, 0.10%)</title><rect x="31.3842%" y="997" width="0.0961%" height="15" fill="rgb(216,98,30)" fg:x="1959" fg:w="6"/><text x="31.6342%" y="1007.50"></text></g><g><title>void TxOutCompression::Unser&lt;DataStream&gt; (6 samples, 0.10%)</title><rect x="31.3842%" y="981" width="0.0961%" height="15" fill="rgb(236,123,15)" fg:x="1959" fg:w="6"/><text x="31.6342%" y="991.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut, ActionUnserialize&gt; (6 samples, 0.10%)</title><rect x="31.3842%" y="965" width="0.0961%" height="15" fill="rgb(248,81,50)" fg:x="1959" fg:w="6"/><text x="31.6342%" y="975.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;, Wrapper&lt;ScriptCompression, CScript&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="31.3842%" y="949" width="0.0961%" height="15" fill="rgb(214,120,4)" fg:x="1959" fg:w="6"/><text x="31.6342%" y="959.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="31.3842%" y="933" width="0.0961%" height="15" fill="rgb(208,179,34)" fg:x="1959" fg:w="6"/><text x="31.6342%" y="943.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="31.4322%" y="917" width="0.0481%" height="15" fill="rgb(227,140,7)" fg:x="1962" fg:w="3"/><text x="31.6822%" y="927.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript&amp;&gt;::Unserialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="31.4322%" y="901" width="0.0481%" height="15" fill="rgb(214,22,6)" fg:x="1962" fg:w="3"/><text x="31.6822%" y="911.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="31.4643%" y="885" width="0.0160%" height="15" fill="rgb(207,137,27)" fg:x="1964" fg:w="1"/><text x="31.7143%" y="895.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="31.4803%" y="1061" width="0.0160%" height="15" fill="rgb(210,8,46)" fg:x="1965" fg:w="1"/><text x="31.7303%" y="1071.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="31.4803%" y="1045" width="0.0160%" height="15" fill="rgb(240,16,54)" fg:x="1965" fg:w="1"/><text x="31.7303%" y="1055.50"></text></g><g><title>DataStream::~DataStream (1 samples, 0.02%)</title><rect x="31.4963%" y="1061" width="0.0160%" height="15" fill="rgb(211,209,29)" fg:x="1966" fg:w="1"/><text x="31.7463%" y="1071.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="31.4963%" y="1045" width="0.0160%" height="15" fill="rgb(226,228,24)" fg:x="1966" fg:w="1"/><text x="31.7463%" y="1055.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="31.4963%" y="1029" width="0.0160%" height="15" fill="rgb(222,84,9)" fg:x="1966" fg:w="1"/><text x="31.7463%" y="1039.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="31.4963%" y="1013" width="0.0160%" height="15" fill="rgb(234,203,30)" fg:x="1966" fg:w="1"/><text x="31.7463%" y="1023.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="31.4963%" y="997" width="0.0160%" height="15" fill="rgb(238,109,14)" fg:x="1966" fg:w="1"/><text x="31.7463%" y="1007.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (1 samples, 0.02%)</title><rect x="31.4963%" y="981" width="0.0160%" height="15" fill="rgb(233,206,34)" fg:x="1966" fg:w="1"/><text x="31.7463%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="31.4963%" y="965" width="0.0160%" height="15" fill="rgb(220,167,47)" fg:x="1966" fg:w="1"/><text x="31.7463%" y="975.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="31.5123%" y="821" width="0.0160%" height="15" fill="rgb(238,105,10)" fg:x="1967" fg:w="1"/><text x="31.7623%" y="831.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (3 samples, 0.05%)</title><rect x="31.5123%" y="949" width="0.0481%" height="15" fill="rgb(213,227,17)" fg:x="1967" fg:w="3"/><text x="31.7623%" y="959.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="31.5123%" y="933" width="0.0481%" height="15" fill="rgb(217,132,38)" fg:x="1967" fg:w="3"/><text x="31.7623%" y="943.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="31.5123%" y="917" width="0.0481%" height="15" fill="rgb(242,146,4)" fg:x="1967" fg:w="3"/><text x="31.7623%" y="927.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (3 samples, 0.05%)</title><rect x="31.5123%" y="901" width="0.0481%" height="15" fill="rgb(212,61,9)" fg:x="1967" fg:w="3"/><text x="31.7623%" y="911.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (3 samples, 0.05%)</title><rect x="31.5123%" y="885" width="0.0481%" height="15" fill="rgb(247,126,22)" fg:x="1967" fg:w="3"/><text x="31.7623%" y="895.50"></text></g><g><title>DataStream::write (3 samples, 0.05%)</title><rect x="31.5123%" y="869" width="0.0481%" height="15" fill="rgb(220,196,2)" fg:x="1967" fg:w="3"/><text x="31.7623%" y="879.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (3 samples, 0.05%)</title><rect x="31.5123%" y="853" width="0.0481%" height="15" fill="rgb(208,46,4)" fg:x="1967" fg:w="3"/><text x="31.7623%" y="863.50"></text></g><g><title>CCoinsViewDB::GetCoin (3 samples, 0.05%)</title><rect x="31.5123%" y="837" width="0.0481%" height="15" fill="rgb(252,104,46)" fg:x="1967" fg:w="3"/><text x="31.7623%" y="847.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.03%)</title><rect x="31.5284%" y="821" width="0.0320%" height="15" fill="rgb(237,152,48)" fg:x="1968" fg:w="2"/><text x="31.7784%" y="831.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="31.5604%" y="885" width="0.0320%" height="15" fill="rgb(221,59,37)" fg:x="1970" fg:w="2"/><text x="31.8104%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="31.5764%" y="869" width="0.0160%" height="15" fill="rgb(209,202,51)" fg:x="1971" fg:w="1"/><text x="31.8264%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="31.5764%" y="853" width="0.0160%" height="15" fill="rgb(228,81,30)" fg:x="1971" fg:w="1"/><text x="31.8264%" y="863.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (6 samples, 0.10%)</title><rect x="31.5123%" y="1061" width="0.0961%" height="15" fill="rgb(227,42,39)" fg:x="1967" fg:w="6"/><text x="31.7623%" y="1071.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (6 samples, 0.10%)</title><rect x="31.5123%" y="1045" width="0.0961%" height="15" fill="rgb(221,26,2)" fg:x="1967" fg:w="6"/><text x="31.7623%" y="1055.50"></text></g><g><title>Serialize&lt;DataStream&gt; (6 samples, 0.10%)</title><rect x="31.5123%" y="1029" width="0.0961%" height="15" fill="rgb(254,61,31)" fg:x="1967" fg:w="6"/><text x="31.7623%" y="1039.50"></text></g><g><title>Ser&lt;DataStream&gt; (6 samples, 0.10%)</title><rect x="31.5123%" y="1013" width="0.0961%" height="15" fill="rgb(222,173,38)" fg:x="1967" fg:w="6"/><text x="31.7623%" y="1023.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (6 samples, 0.10%)</title><rect x="31.5123%" y="997" width="0.0961%" height="15" fill="rgb(218,50,12)" fg:x="1967" fg:w="6"/><text x="31.7623%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="31.5123%" y="981" width="0.0961%" height="15" fill="rgb(223,88,40)" fg:x="1967" fg:w="6"/><text x="31.7623%" y="991.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="31.5123%" y="965" width="0.0961%" height="15" fill="rgb(237,54,19)" fg:x="1967" fg:w="6"/><text x="31.7623%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="31.5604%" y="949" width="0.0481%" height="15" fill="rgb(251,129,25)" fg:x="1970" fg:w="3"/><text x="31.8104%" y="959.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="31.5604%" y="933" width="0.0481%" height="15" fill="rgb(238,97,19)" fg:x="1970" fg:w="3"/><text x="31.8104%" y="943.50"></text></g><g><title>DataStream::write (3 samples, 0.05%)</title><rect x="31.5604%" y="917" width="0.0481%" height="15" fill="rgb(240,169,18)" fg:x="1970" fg:w="3"/><text x="31.8104%" y="927.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (3 samples, 0.05%)</title><rect x="31.5604%" y="901" width="0.0481%" height="15" fill="rgb(230,187,49)" fg:x="1970" fg:w="3"/><text x="31.8104%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="31.5924%" y="885" width="0.0160%" height="15" fill="rgb(209,44,26)" fg:x="1972" fg:w="1"/><text x="31.8424%" y="895.50"></text></g><g><title>CCoinsViewDB::GetCoin (440 samples, 7.05%)</title><rect x="24.5755%" y="1093" width="7.0490%" height="15" fill="rgb(244,0,6)" fg:x="1534" fg:w="440"/><text x="24.8255%" y="1103.50">CCoinsVie..</text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (15 samples, 0.24%)</title><rect x="31.3842%" y="1077" width="0.2403%" height="15" fill="rgb(248,18,21)" fg:x="1959" fg:w="15"/><text x="31.6342%" y="1087.50"></text></g><g><title>std::optional&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~optional (1 samples, 0.02%)</title><rect x="31.6085%" y="1061" width="0.0160%" height="15" fill="rgb(245,180,19)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="1071.50"></text></g><g><title>std::_Optional_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false, false&gt;::~_Optional_base (1 samples, 0.02%)</title><rect x="31.6085%" y="1045" width="0.0160%" height="15" fill="rgb(252,118,36)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="1055.50"></text></g><g><title>std::_Optional_payload&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false, false, false&gt;::~_Optional_payload (1 samples, 0.02%)</title><rect x="31.6085%" y="1029" width="0.0160%" height="15" fill="rgb(210,224,19)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="1039.50"></text></g><g><title>std::_Optional_payload_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="31.6085%" y="1013" width="0.0160%" height="15" fill="rgb(218,30,24)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="1023.50"></text></g><g><title>std::_Optional_payload_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_destroy (1 samples, 0.02%)</title><rect x="31.6085%" y="997" width="0.0160%" height="15" fill="rgb(219,75,50)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="31.6085%" y="981" width="0.0160%" height="15" fill="rgb(234,72,50)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="31.6085%" y="965" width="0.0160%" height="15" fill="rgb(219,100,48)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="975.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1 samples, 0.02%)</title><rect x="31.6085%" y="949" width="0.0160%" height="15" fill="rgb(253,5,41)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="959.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="31.6085%" y="933" width="0.0160%" height="15" fill="rgb(247,181,11)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="943.50"></text></g><g><title>std::allocator&lt;char&gt;::deallocate (1 samples, 0.02%)</title><rect x="31.6085%" y="917" width="0.0160%" height="15" fill="rgb(222,223,25)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="927.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::deallocate (1 samples, 0.02%)</title><rect x="31.6085%" y="901" width="0.0160%" height="15" fill="rgb(214,198,28)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="911.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="31.6085%" y="885" width="0.0160%" height="15" fill="rgb(230,46,43)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="895.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="31.6085%" y="869" width="0.0160%" height="15" fill="rgb(233,65,53)" fg:x="1973" fg:w="1"/><text x="31.8585%" y="879.50"></text></g><g><title>SipHashUint256Extra (14 samples, 0.22%)</title><rect x="31.6245%" y="1093" width="0.2243%" height="15" fill="rgb(221,121,27)" fg:x="1974" fg:w="14"/><text x="31.8745%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (8 samples, 0.13%)</title><rect x="31.7206%" y="1077" width="0.1282%" height="15" fill="rgb(247,70,47)" fg:x="1980" fg:w="8"/><text x="31.9706%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (8 samples, 0.13%)</title><rect x="31.7206%" y="1061" width="0.1282%" height="15" fill="rgb(228,85,35)" fg:x="1980" fg:w="8"/><text x="31.9706%" y="1071.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="31.8488%" y="1093" width="0.0160%" height="15" fill="rgb(209,50,18)" fg:x="1988" fg:w="1"/><text x="32.0988%" y="1103.50"></text></g><g><title>leveldb::port::Mutex::Lock (1 samples, 0.02%)</title><rect x="31.8488%" y="1077" width="0.0160%" height="15" fill="rgb(250,19,35)" fg:x="1988" fg:w="1"/><text x="32.0988%" y="1087.50"></text></g><g><title>std::mutex::lock (1 samples, 0.02%)</title><rect x="31.8488%" y="1061" width="0.0160%" height="15" fill="rgb(253,107,29)" fg:x="1988" fg:w="1"/><text x="32.0988%" y="1071.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="31.8488%" y="1045" width="0.0160%" height="15" fill="rgb(252,179,29)" fg:x="1988" fg:w="1"/><text x="32.0988%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="31.8648%" y="1093" width="0.0320%" height="15" fill="rgb(238,194,6)" fg:x="1989" fg:w="2"/><text x="32.1148%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="31.8648%" y="1077" width="0.0320%" height="15" fill="rgb(238,164,29)" fg:x="1989" fg:w="2"/><text x="32.1148%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="31.8648%" y="1061" width="0.0320%" height="15" fill="rgb(224,25,9)" fg:x="1989" fg:w="2"/><text x="32.1148%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="31.8648%" y="1045" width="0.0320%" height="15" fill="rgb(244,153,23)" fg:x="1989" fg:w="2"/><text x="32.1148%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="31.8648%" y="1029" width="0.0320%" height="15" fill="rgb(212,203,14)" fg:x="1989" fg:w="2"/><text x="32.1148%" y="1039.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="31.8808%" y="1013" width="0.0160%" height="15" fill="rgb(220,164,20)" fg:x="1990" fg:w="1"/><text x="32.1308%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="31.8968%" y="1093" width="0.0160%" height="15" fill="rgb(222,203,48)" fg:x="1991" fg:w="1"/><text x="32.1468%" y="1103.50"></text></g><g><title>CCoinsViewBacked::GetCoin (459 samples, 7.35%)</title><rect x="24.5755%" y="1109" width="7.3534%" height="15" fill="rgb(215,159,22)" fg:x="1534" fg:w="459"/><text x="24.8255%" y="1119.50">CCoinsView..</text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="31.9128%" y="1093" width="0.0160%" height="15" fill="rgb(216,183,47)" fg:x="1992" fg:w="1"/><text x="32.1628%" y="1103.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.13%)</title><rect x="31.9289%" y="1109" width="0.1282%" height="15" fill="rgb(229,195,25)" fg:x="1993" fg:w="8"/><text x="32.1789%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.06%)</title><rect x="31.9930%" y="1093" width="0.0641%" height="15" fill="rgb(224,132,51)" fg:x="1997" fg:w="4"/><text x="32.2430%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.06%)</title><rect x="31.9930%" y="1077" width="0.0641%" height="15" fill="rgb(240,63,7)" fg:x="1997" fg:w="4"/><text x="32.2430%" y="1087.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (472 samples, 7.56%)</title><rect x="24.5755%" y="1157" width="7.5617%" height="15" fill="rgb(249,182,41)" fg:x="1534" fg:w="472"/><text x="24.8255%" y="1167.50">CCoinsView..</text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (472 samples, 7.56%)</title><rect x="24.5755%" y="1141" width="7.5617%" height="15" fill="rgb(243,47,26)" fg:x="1534" fg:w="472"/><text x="24.8255%" y="1151.50">ExecuteBac..</text></g><g><title>CCoinsViewErrorCatcher::GetCoin (472 samples, 7.56%)</title><rect x="24.5755%" y="1125" width="7.5617%" height="15" fill="rgb(233,48,2)" fg:x="1534" fg:w="472"/><text x="24.8255%" y="1135.50">CCoinsView..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.08%)</title><rect x="32.0570%" y="1109" width="0.0801%" height="15" fill="rgb(244,165,34)" fg:x="2001" fg:w="5"/><text x="32.3070%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="32.1051%" y="1093" width="0.0320%" height="15" fill="rgb(207,89,7)" fg:x="2004" fg:w="2"/><text x="32.3551%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="32.1051%" y="1077" width="0.0320%" height="15" fill="rgb(244,117,36)" fg:x="2004" fg:w="2"/><text x="32.3551%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="32.1051%" y="1061" width="0.0320%" height="15" fill="rgb(226,144,34)" fg:x="2004" fg:w="2"/><text x="32.3551%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="32.1051%" y="1045" width="0.0320%" height="15" fill="rgb(213,23,19)" fg:x="2004" fg:w="2"/><text x="32.3551%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.05%)</title><rect x="32.1371%" y="1157" width="0.0481%" height="15" fill="rgb(217,75,12)" fg:x="2006" fg:w="3"/><text x="32.3871%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="32.2012%" y="1109" width="0.0320%" height="15" fill="rgb(224,159,17)" fg:x="2010" fg:w="2"/><text x="32.4512%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="32.2172%" y="1093" width="0.0160%" height="15" fill="rgb(217,118,1)" fg:x="2011" fg:w="1"/><text x="32.4672%" y="1103.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="32.2333%" y="1109" width="0.0160%" height="15" fill="rgb(232,180,48)" fg:x="2012" fg:w="1"/><text x="32.4833%" y="1119.50"></text></g><g><title>SipHashUint256Extra (13 samples, 0.21%)</title><rect x="32.2493%" y="1109" width="0.2083%" height="15" fill="rgb(230,27,33)" fg:x="2013" fg:w="13"/><text x="32.4993%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.08%)</title><rect x="32.3774%" y="1093" width="0.0801%" height="15" fill="rgb(205,31,21)" fg:x="2021" fg:w="5"/><text x="32.6274%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.08%)</title><rect x="32.3774%" y="1077" width="0.0801%" height="15" fill="rgb(253,59,4)" fg:x="2021" fg:w="5"/><text x="32.6274%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (21 samples, 0.34%)</title><rect x="32.2012%" y="1125" width="0.3364%" height="15" fill="rgb(224,201,9)" fg:x="2010" fg:w="21"/><text x="32.4512%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.08%)</title><rect x="32.4575%" y="1109" width="0.0801%" height="15" fill="rgb(229,206,30)" fg:x="2026" fg:w="5"/><text x="32.7075%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="32.5056%" y="1093" width="0.0320%" height="15" fill="rgb(212,67,47)" fg:x="2029" fg:w="2"/><text x="32.7556%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="32.5056%" y="1077" width="0.0320%" height="15" fill="rgb(211,96,50)" fg:x="2029" fg:w="2"/><text x="32.7556%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="32.5056%" y="1061" width="0.0320%" height="15" fill="rgb(252,114,18)" fg:x="2029" fg:w="2"/><text x="32.7556%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="32.5056%" y="1045" width="0.0320%" height="15" fill="rgb(223,58,37)" fg:x="2029" fg:w="2"/><text x="32.7556%" y="1055.50"></text></g><g><title>SipHashUint256Extra (10 samples, 0.16%)</title><rect x="32.5376%" y="1109" width="0.1602%" height="15" fill="rgb(237,70,4)" fg:x="2031" fg:w="10"/><text x="32.7876%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.11%)</title><rect x="32.5857%" y="1093" width="0.1121%" height="15" fill="rgb(244,85,46)" fg:x="2034" fg:w="7"/><text x="32.8357%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.11%)</title><rect x="32.5857%" y="1077" width="0.1121%" height="15" fill="rgb(223,39,52)" fg:x="2034" fg:w="7"/><text x="32.8357%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (11 samples, 0.18%)</title><rect x="32.5376%" y="1125" width="0.1762%" height="15" fill="rgb(218,200,14)" fg:x="2031" fg:w="11"/><text x="32.7876%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="32.6979%" y="1109" width="0.0160%" height="15" fill="rgb(208,171,16)" fg:x="2041" fg:w="1"/><text x="32.9479%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="32.6979%" y="1093" width="0.0160%" height="15" fill="rgb(234,200,18)" fg:x="2041" fg:w="1"/><text x="32.9479%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="32.6979%" y="1077" width="0.0160%" height="15" fill="rgb(228,45,11)" fg:x="2041" fg:w="1"/><text x="32.9479%" y="1087.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="32.6979%" y="1061" width="0.0160%" height="15" fill="rgb(237,182,11)" fg:x="2041" fg:w="1"/><text x="32.9479%" y="1071.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="32.6979%" y="1045" width="0.0160%" height="15" fill="rgb(241,175,49)" fg:x="2041" fg:w="1"/><text x="32.9479%" y="1055.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="32.7139%" y="1109" width="0.0320%" height="15" fill="rgb(247,38,35)" fg:x="2042" fg:w="2"/><text x="32.9639%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="32.7299%" y="1093" width="0.0160%" height="15" fill="rgb(228,39,49)" fg:x="2043" fg:w="1"/><text x="32.9799%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="32.7299%" y="1077" width="0.0160%" height="15" fill="rgb(226,101,26)" fg:x="2043" fg:w="1"/><text x="32.9799%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="32.7459%" y="1109" width="0.0160%" height="15" fill="rgb(206,141,19)" fg:x="2044" fg:w="1"/><text x="32.9959%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (4 samples, 0.06%)</title><rect x="32.7139%" y="1125" width="0.0641%" height="15" fill="rgb(211,200,13)" fg:x="2042" fg:w="4"/><text x="32.9639%" y="1135.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="32.7619%" y="1109" width="0.0160%" height="15" fill="rgb(241,121,6)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="1119.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="32.7619%" y="1093" width="0.0160%" height="15" fill="rgb(234,221,29)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="32.7619%" y="1077" width="0.0160%" height="15" fill="rgb(229,136,5)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="1087.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="32.7619%" y="1061" width="0.0160%" height="15" fill="rgb(238,36,11)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="1071.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="32.7619%" y="1045" width="0.0160%" height="15" fill="rgb(251,55,41)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="1055.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="32.7619%" y="1029" width="0.0160%" height="15" fill="rgb(242,34,40)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.7619%" y="1013" width="0.0160%" height="15" fill="rgb(215,42,17)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.7619%" y="997" width="0.0160%" height="15" fill="rgb(207,44,46)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.7619%" y="981" width="0.0160%" height="15" fill="rgb(211,206,28)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.7619%" y="965" width="0.0160%" height="15" fill="rgb(237,167,16)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.7619%" y="949" width="0.0160%" height="15" fill="rgb(233,66,6)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.7619%" y="933" width="0.0160%" height="15" fill="rgb(246,123,29)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.7619%" y="917" width="0.0160%" height="15" fill="rgb(209,62,40)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.7619%" y="901" width="0.0160%" height="15" fill="rgb(218,4,25)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.7619%" y="885" width="0.0160%" height="15" fill="rgb(253,91,49)" fg:x="2045" fg:w="1"/><text x="33.0119%" y="895.50"></text></g><g><title>CCoinsViewCache::FetchCoin (513 samples, 8.22%)</title><rect x="24.5755%" y="1173" width="8.2185%" height="15" fill="rgb(228,155,29)" fg:x="1534" fg:w="513"/><text x="24.8255%" y="1183.50">CCoinsViewC..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (38 samples, 0.61%)</title><rect x="32.1852%" y="1157" width="0.6088%" height="15" fill="rgb(243,57,37)" fg:x="2009" fg:w="38"/><text x="32.4352%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (38 samples, 0.61%)</title><rect x="32.1852%" y="1141" width="0.6088%" height="15" fill="rgb(244,167,17)" fg:x="2009" fg:w="38"/><text x="32.4352%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="32.7780%" y="1125" width="0.0160%" height="15" fill="rgb(207,181,38)" fg:x="2046" fg:w="1"/><text x="33.0280%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="32.7780%" y="1109" width="0.0160%" height="15" fill="rgb(211,8,23)" fg:x="2046" fg:w="1"/><text x="33.0280%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="32.7780%" y="1093" width="0.0160%" height="15" fill="rgb(235,11,44)" fg:x="2046" fg:w="1"/><text x="33.0280%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="32.7780%" y="1077" width="0.0160%" height="15" fill="rgb(248,18,52)" fg:x="2046" fg:w="1"/><text x="33.0280%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="32.7780%" y="1061" width="0.0160%" height="15" fill="rgb(208,4,7)" fg:x="2046" fg:w="1"/><text x="33.0280%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="32.7780%" y="1045" width="0.0160%" height="15" fill="rgb(240,17,39)" fg:x="2046" fg:w="1"/><text x="33.0280%" y="1055.50"></text></g><g><title>SipHashUint256Extra (10 samples, 0.16%)</title><rect x="32.7940%" y="1173" width="0.1602%" height="15" fill="rgb(207,170,3)" fg:x="2047" fg:w="10"/><text x="33.0440%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="32.9061%" y="1157" width="0.0481%" height="15" fill="rgb(236,100,52)" fg:x="2054" fg:w="3"/><text x="33.1561%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="32.9061%" y="1141" width="0.0481%" height="15" fill="rgb(246,78,51)" fg:x="2054" fg:w="3"/><text x="33.1561%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.05%)</title><rect x="32.9542%" y="1173" width="0.0481%" height="15" fill="rgb(211,17,15)" fg:x="2057" fg:w="3"/><text x="33.2042%" y="1183.50"></text></g><g><title>CCoinsViewCache::GetCoin (527 samples, 8.44%)</title><rect x="24.5755%" y="1189" width="8.4428%" height="15" fill="rgb(209,59,46)" fg:x="1534" fg:w="527"/><text x="24.8255%" y="1199.50">CCoinsViewCa..</text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="33.0022%" y="1173" width="0.0160%" height="15" fill="rgb(210,92,25)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1183.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="33.0022%" y="1157" width="0.0160%" height="15" fill="rgb(238,174,52)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.0022%" y="1141" width="0.0160%" height="15" fill="rgb(230,73,7)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1151.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.0022%" y="1125" width="0.0160%" height="15" fill="rgb(243,124,40)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.0022%" y="1109" width="0.0160%" height="15" fill="rgb(244,170,11)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1119.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.0022%" y="1093" width="0.0160%" height="15" fill="rgb(207,114,54)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1103.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="33.0022%" y="1077" width="0.0160%" height="15" fill="rgb(205,42,20)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1087.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="33.0022%" y="1061" width="0.0160%" height="15" fill="rgb(230,30,28)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1071.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="33.0022%" y="1045" width="0.0160%" height="15" fill="rgb(205,73,54)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="33.0022%" y="1029" width="0.0160%" height="15" fill="rgb(254,227,23)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="33.0022%" y="1013" width="0.0160%" height="15" fill="rgb(228,202,34)" fg:x="2060" fg:w="1"/><text x="33.2522%" y="1023.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="33.0183%" y="1189" width="0.0160%" height="15" fill="rgb(222,225,37)" fg:x="2061" fg:w="1"/><text x="33.2683%" y="1199.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="33.0183%" y="1173" width="0.0160%" height="15" fill="rgb(221,14,54)" fg:x="2061" fg:w="1"/><text x="33.2683%" y="1183.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.14%)</title><rect x="33.0343%" y="1189" width="0.1442%" height="15" fill="rgb(254,102,2)" fg:x="2062" fg:w="9"/><text x="33.2843%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.06%)</title><rect x="33.1144%" y="1173" width="0.0641%" height="15" fill="rgb(232,104,17)" fg:x="2067" fg:w="4"/><text x="33.3644%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.06%)</title><rect x="33.1144%" y="1157" width="0.0641%" height="15" fill="rgb(250,220,14)" fg:x="2067" fg:w="4"/><text x="33.3644%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.08%)</title><rect x="33.1785%" y="1189" width="0.0801%" height="15" fill="rgb(241,158,9)" fg:x="2071" fg:w="5"/><text x="33.4285%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="33.2265%" y="1173" width="0.0320%" height="15" fill="rgb(246,9,43)" fg:x="2074" fg:w="2"/><text x="33.4765%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="33.2265%" y="1157" width="0.0320%" height="15" fill="rgb(206,73,33)" fg:x="2074" fg:w="2"/><text x="33.4765%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="33.2265%" y="1141" width="0.0320%" height="15" fill="rgb(222,79,8)" fg:x="2074" fg:w="2"/><text x="33.4765%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="33.2265%" y="1125" width="0.0320%" height="15" fill="rgb(234,8,54)" fg:x="2074" fg:w="2"/><text x="33.4765%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="33.2426%" y="1109" width="0.0160%" height="15" fill="rgb(209,134,38)" fg:x="2075" fg:w="1"/><text x="33.4926%" y="1119.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="33.2586%" y="1157" width="0.0160%" height="15" fill="rgb(230,127,29)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="33.2586%" y="1141" width="0.0160%" height="15" fill="rgb(242,44,41)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="33.2586%" y="1125" width="0.0160%" height="15" fill="rgb(222,56,43)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.2586%" y="1109" width="0.0160%" height="15" fill="rgb(238,39,47)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.2586%" y="1093" width="0.0160%" height="15" fill="rgb(226,79,43)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.2586%" y="1077" width="0.0160%" height="15" fill="rgb(242,105,53)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.2586%" y="1061" width="0.0160%" height="15" fill="rgb(251,132,46)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1071.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="33.2586%" y="1045" width="0.0160%" height="15" fill="rgb(231,77,14)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="33.2586%" y="1029" width="0.0160%" height="15" fill="rgb(240,135,9)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1039.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="33.2586%" y="1013" width="0.0160%" height="15" fill="rgb(248,109,14)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="33.2586%" y="997" width="0.0160%" height="15" fill="rgb(227,146,52)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="33.2586%" y="981" width="0.0160%" height="15" fill="rgb(232,54,3)" fg:x="2076" fg:w="1"/><text x="33.5086%" y="991.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="33.2746%" y="1157" width="0.0160%" height="15" fill="rgb(229,201,43)" fg:x="2077" fg:w="1"/><text x="33.5246%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="33.2906%" y="1141" width="0.0481%" height="15" fill="rgb(252,161,33)" fg:x="2078" fg:w="3"/><text x="33.5406%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (5 samples, 0.08%)</title><rect x="33.3387%" y="1141" width="0.0801%" height="15" fill="rgb(226,146,40)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (5 samples, 0.08%)</title><rect x="33.3387%" y="1125" width="0.0801%" height="15" fill="rgb(219,47,25)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (5 samples, 0.08%)</title><rect x="33.3387%" y="1109" width="0.0801%" height="15" fill="rgb(250,135,13)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="33.3387%" y="1093" width="0.0801%" height="15" fill="rgb(219,229,18)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="33.3387%" y="1077" width="0.0801%" height="15" fill="rgb(217,152,27)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="33.3387%" y="1061" width="0.0801%" height="15" fill="rgb(225,71,47)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="33.3387%" y="1045" width="0.0801%" height="15" fill="rgb(220,139,14)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1055.50"></text></g><g><title>Coin::Coin (5 samples, 0.08%)</title><rect x="33.3387%" y="1029" width="0.0801%" height="15" fill="rgb(247,54,32)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (5 samples, 0.08%)</title><rect x="33.3387%" y="1013" width="0.0801%" height="15" fill="rgb(252,131,39)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1023.50"></text></g><g><title>CScript::CScript (5 samples, 0.08%)</title><rect x="33.3387%" y="997" width="0.0801%" height="15" fill="rgb(210,108,39)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (5 samples, 0.08%)</title><rect x="33.3387%" y="981" width="0.0801%" height="15" fill="rgb(205,23,29)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (5 samples, 0.08%)</title><rect x="33.3387%" y="965" width="0.0801%" height="15" fill="rgb(246,139,46)" fg:x="2081" fg:w="5"/><text x="33.5887%" y="975.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="33.4188%" y="1141" width="0.0160%" height="15" fill="rgb(250,81,26)" fg:x="2086" fg:w="1"/><text x="33.6688%" y="1151.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.08%)</title><rect x="33.4348%" y="1141" width="0.0801%" height="15" fill="rgb(214,104,7)" fg:x="2087" fg:w="5"/><text x="33.6848%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="33.4829%" y="1125" width="0.0320%" height="15" fill="rgb(233,189,8)" fg:x="2090" fg:w="2"/><text x="33.7329%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="33.4829%" y="1109" width="0.0320%" height="15" fill="rgb(228,141,17)" fg:x="2090" fg:w="2"/><text x="33.7329%" y="1119.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="33.5309%" y="1061" width="0.0160%" height="15" fill="rgb(247,157,1)" fg:x="2093" fg:w="1"/><text x="33.7809%" y="1071.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="33.5630%" y="1045" width="0.0160%" height="15" fill="rgb(249,225,5)" fg:x="2095" fg:w="1"/><text x="33.8130%" y="1055.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="33.5630%" y="1029" width="0.0160%" height="15" fill="rgb(242,55,13)" fg:x="2095" fg:w="1"/><text x="33.8130%" y="1039.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="33.5630%" y="1013" width="0.0160%" height="15" fill="rgb(230,49,50)" fg:x="2095" fg:w="1"/><text x="33.8130%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (19 samples, 0.30%)</title><rect x="33.2906%" y="1157" width="0.3044%" height="15" fill="rgb(241,111,38)" fg:x="2078" fg:w="19"/><text x="33.5406%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.08%)</title><rect x="33.5149%" y="1141" width="0.0801%" height="15" fill="rgb(252,155,4)" fg:x="2092" fg:w="5"/><text x="33.7649%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (4 samples, 0.06%)</title><rect x="33.5309%" y="1125" width="0.0641%" height="15" fill="rgb(212,69,32)" fg:x="2093" fg:w="4"/><text x="33.7809%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.06%)</title><rect x="33.5309%" y="1109" width="0.0641%" height="15" fill="rgb(243,107,47)" fg:x="2093" fg:w="4"/><text x="33.7809%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.06%)</title><rect x="33.5309%" y="1093" width="0.0641%" height="15" fill="rgb(247,130,12)" fg:x="2093" fg:w="4"/><text x="33.7809%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.06%)</title><rect x="33.5309%" y="1077" width="0.0641%" height="15" fill="rgb(233,74,16)" fg:x="2093" fg:w="4"/><text x="33.7809%" y="1087.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="33.5469%" y="1061" width="0.0481%" height="15" fill="rgb(208,58,18)" fg:x="2094" fg:w="3"/><text x="33.7969%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.5790%" y="1045" width="0.0160%" height="15" fill="rgb(242,225,1)" fg:x="2096" fg:w="1"/><text x="33.8290%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.5790%" y="1029" width="0.0160%" height="15" fill="rgb(249,39,40)" fg:x="2096" fg:w="1"/><text x="33.8290%" y="1039.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.13%)</title><rect x="33.5950%" y="1141" width="0.1282%" height="15" fill="rgb(207,72,44)" fg:x="2097" fg:w="8"/><text x="33.8450%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.7071%" y="1125" width="0.0160%" height="15" fill="rgb(215,193,12)" fg:x="2104" fg:w="1"/><text x="33.9571%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.7071%" y="1109" width="0.0160%" height="15" fill="rgb(248,41,39)" fg:x="2104" fg:w="1"/><text x="33.9571%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="33.7232%" y="1061" width="0.0320%" height="15" fill="rgb(253,85,4)" fg:x="2105" fg:w="2"/><text x="33.9732%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (6 samples, 0.10%)</title><rect x="33.7232%" y="1141" width="0.0961%" height="15" fill="rgb(243,70,31)" fg:x="2105" fg:w="6"/><text x="33.9732%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (6 samples, 0.10%)</title><rect x="33.7232%" y="1125" width="0.0961%" height="15" fill="rgb(253,195,26)" fg:x="2105" fg:w="6"/><text x="33.9732%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.10%)</title><rect x="33.7232%" y="1109" width="0.0961%" height="15" fill="rgb(243,42,11)" fg:x="2105" fg:w="6"/><text x="33.9732%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.10%)</title><rect x="33.7232%" y="1093" width="0.0961%" height="15" fill="rgb(239,66,17)" fg:x="2105" fg:w="6"/><text x="33.9732%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.10%)</title><rect x="33.7232%" y="1077" width="0.0961%" height="15" fill="rgb(217,132,21)" fg:x="2105" fg:w="6"/><text x="33.9732%" y="1087.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.06%)</title><rect x="33.7552%" y="1061" width="0.0641%" height="15" fill="rgb(252,202,21)" fg:x="2107" fg:w="4"/><text x="34.0052%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="33.7872%" y="1045" width="0.0320%" height="15" fill="rgb(233,98,36)" fg:x="2109" fg:w="2"/><text x="34.0372%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="33.7872%" y="1029" width="0.0320%" height="15" fill="rgb(216,153,54)" fg:x="2109" fg:w="2"/><text x="34.0372%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="33.8353%" y="1109" width="0.0160%" height="15" fill="rgb(250,99,7)" fg:x="2112" fg:w="1"/><text x="34.0853%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="33.8353%" y="1093" width="0.0160%" height="15" fill="rgb(207,56,50)" fg:x="2112" fg:w="1"/><text x="34.0853%" y="1103.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="33.8353%" y="1077" width="0.0160%" height="15" fill="rgb(244,61,34)" fg:x="2112" fg:w="1"/><text x="34.0853%" y="1087.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="33.8513%" y="1061" width="0.0160%" height="15" fill="rgb(241,50,38)" fg:x="2113" fg:w="1"/><text x="34.1013%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.8513%" y="1045" width="0.0160%" height="15" fill="rgb(212,166,30)" fg:x="2113" fg:w="1"/><text x="34.1013%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.8513%" y="1029" width="0.0160%" height="15" fill="rgb(249,127,32)" fg:x="2113" fg:w="1"/><text x="34.1013%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (18 samples, 0.29%)</title><rect x="33.5950%" y="1157" width="0.2884%" height="15" fill="rgb(209,103,0)" fg:x="2097" fg:w="18"/><text x="33.8450%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (4 samples, 0.06%)</title><rect x="33.8193%" y="1141" width="0.0641%" height="15" fill="rgb(238,209,51)" fg:x="2111" fg:w="4"/><text x="34.0693%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (4 samples, 0.06%)</title><rect x="33.8193%" y="1125" width="0.0641%" height="15" fill="rgb(237,56,23)" fg:x="2111" fg:w="4"/><text x="34.0693%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="33.8513%" y="1109" width="0.0320%" height="15" fill="rgb(215,153,46)" fg:x="2113" fg:w="2"/><text x="34.1013%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="33.8513%" y="1093" width="0.0320%" height="15" fill="rgb(224,49,31)" fg:x="2113" fg:w="2"/><text x="34.1013%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="33.8513%" y="1077" width="0.0320%" height="15" fill="rgb(250,18,42)" fg:x="2113" fg:w="2"/><text x="34.1013%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="33.8674%" y="1061" width="0.0160%" height="15" fill="rgb(215,176,39)" fg:x="2114" fg:w="1"/><text x="34.1174%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="33.8674%" y="1045" width="0.0160%" height="15" fill="rgb(223,77,29)" fg:x="2114" fg:w="1"/><text x="34.1174%" y="1055.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="33.8834%" y="1141" width="0.0160%" height="15" fill="rgb(234,94,52)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="33.8834%" y="1125" width="0.0160%" height="15" fill="rgb(220,154,50)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="33.8834%" y="1109" width="0.0160%" height="15" fill="rgb(212,11,10)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.8834%" y="1093" width="0.0160%" height="15" fill="rgb(205,166,19)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.8834%" y="1077" width="0.0160%" height="15" fill="rgb(244,198,16)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.8834%" y="1061" width="0.0160%" height="15" fill="rgb(219,69,12)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.8834%" y="1045" width="0.0160%" height="15" fill="rgb(245,30,7)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1055.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="33.8834%" y="1029" width="0.0160%" height="15" fill="rgb(218,221,48)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="33.8834%" y="1013" width="0.0160%" height="15" fill="rgb(216,66,15)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1023.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="33.8834%" y="997" width="0.0160%" height="15" fill="rgb(226,122,50)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="33.8834%" y="981" width="0.0160%" height="15" fill="rgb(239,156,16)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="33.8834%" y="965" width="0.0160%" height="15" fill="rgb(224,27,38)" fg:x="2115" fg:w="1"/><text x="34.1334%" y="975.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="33.8994%" y="1141" width="0.0160%" height="15" fill="rgb(224,39,27)" fg:x="2116" fg:w="1"/><text x="34.1494%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.08%)</title><rect x="33.8834%" y="1157" width="0.0801%" height="15" fill="rgb(215,92,29)" fg:x="2115" fg:w="5"/><text x="34.1334%" y="1167.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.05%)</title><rect x="33.9154%" y="1141" width="0.0481%" height="15" fill="rgb(207,159,16)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1151.50"></text></g><g><title>decltype  (3 samples, 0.05%)</title><rect x="33.9154%" y="1125" width="0.0481%" height="15" fill="rgb(238,163,47)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.05%)</title><rect x="33.9154%" y="1109" width="0.0481%" height="15" fill="rgb(219,91,49)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1119.50"></text></g><g><title>decltype  (3 samples, 0.05%)</title><rect x="33.9154%" y="1093" width="0.0481%" height="15" fill="rgb(227,167,31)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (3 samples, 0.05%)</title><rect x="33.9154%" y="1077" width="0.0481%" height="15" fill="rgb(234,80,54)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (3 samples, 0.05%)</title><rect x="33.9154%" y="1061" width="0.0481%" height="15" fill="rgb(212,114,2)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="33.9154%" y="1045" width="0.0481%" height="15" fill="rgb(234,50,24)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="33.9154%" y="1029" width="0.0481%" height="15" fill="rgb(221,68,8)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="33.9154%" y="1013" width="0.0481%" height="15" fill="rgb(254,180,31)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="33.9154%" y="997" width="0.0481%" height="15" fill="rgb(247,130,50)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="33.9154%" y="981" width="0.0481%" height="15" fill="rgb(211,109,4)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="33.9154%" y="965" width="0.0481%" height="15" fill="rgb(238,50,21)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="33.9154%" y="949" width="0.0481%" height="15" fill="rgb(225,57,45)" fg:x="2117" fg:w="3"/><text x="34.1654%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="33.9314%" y="933" width="0.0320%" height="15" fill="rgb(209,196,50)" fg:x="2118" fg:w="2"/><text x="34.1814%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.9475%" y="917" width="0.0160%" height="15" fill="rgb(242,140,13)" fg:x="2119" fg:w="1"/><text x="34.1975%" y="927.50"></text></g><g><title>CCoinsViewCache::GetCoin (4 samples, 0.06%)</title><rect x="33.9635%" y="1125" width="0.0641%" height="15" fill="rgb(217,111,7)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="1135.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (4 samples, 0.06%)</title><rect x="33.9635%" y="1109" width="0.0641%" height="15" fill="rgb(253,193,51)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="1119.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (4 samples, 0.06%)</title><rect x="33.9635%" y="1093" width="0.0641%" height="15" fill="rgb(252,70,29)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.06%)</title><rect x="33.9635%" y="1077" width="0.0641%" height="15" fill="rgb(232,127,12)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="1087.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.06%)</title><rect x="33.9635%" y="1061" width="0.0641%" height="15" fill="rgb(211,180,21)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.06%)</title><rect x="33.9635%" y="1045" width="0.0641%" height="15" fill="rgb(229,72,13)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="1055.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (4 samples, 0.06%)</title><rect x="33.9635%" y="1029" width="0.0641%" height="15" fill="rgb(240,211,49)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="1039.50"></text></g><g><title>Coin::Coin (4 samples, 0.06%)</title><rect x="33.9635%" y="1013" width="0.0641%" height="15" fill="rgb(219,149,40)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="1023.50"></text></g><g><title>CTxOut::CTxOut (4 samples, 0.06%)</title><rect x="33.9635%" y="997" width="0.0641%" height="15" fill="rgb(210,127,46)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="1007.50"></text></g><g><title>CScript::CScript (4 samples, 0.06%)</title><rect x="33.9635%" y="981" width="0.0641%" height="15" fill="rgb(220,106,7)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (4 samples, 0.06%)</title><rect x="33.9635%" y="965" width="0.0641%" height="15" fill="rgb(249,31,22)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="975.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.06%)</title><rect x="33.9635%" y="949" width="0.0641%" height="15" fill="rgb(253,1,49)" fg:x="2120" fg:w="4"/><text x="34.2135%" y="959.50"></text></g><g><title>bool std::all_of&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="34.0276%" y="1045" width="0.0160%" height="15" fill="rgb(227,144,33)" fg:x="2124" fg:w="1"/><text x="34.2776%" y="1055.50"></text></g><g><title>unsigned char const* std::find_if_not&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="34.0276%" y="1029" width="0.0160%" height="15" fill="rgb(249,163,44)" fg:x="2124" fg:w="1"/><text x="34.2776%" y="1039.50"></text></g><g><title>unsigned char const* std::__find_if_not&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_pred&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="34.0276%" y="1013" width="0.0160%" height="15" fill="rgb(234,15,39)" fg:x="2124" fg:w="1"/><text x="34.2776%" y="1023.50"></text></g><g><title>unsigned char const* std::__find_if&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_negate&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="34.0276%" y="997" width="0.0160%" height="15" fill="rgb(207,66,16)" fg:x="2124" fg:w="1"/><text x="34.2776%" y="1007.50"></text></g><g><title>CCoinsViewCache::FetchCoin (592 samples, 9.48%)</title><rect x="24.5755%" y="1205" width="9.4841%" height="15" fill="rgb(233,112,24)" fg:x="1534" fg:w="592"/><text x="24.8255%" y="1215.50">CCoinsViewCach..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (50 samples, 0.80%)</title><rect x="33.2586%" y="1189" width="0.8010%" height="15" fill="rgb(230,90,22)" fg:x="2076" fg:w="50"/><text x="33.5086%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (50 samples, 0.80%)</title><rect x="33.2586%" y="1173" width="0.8010%" height="15" fill="rgb(229,61,13)" fg:x="2076" fg:w="50"/><text x="33.5086%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.10%)</title><rect x="33.9635%" y="1157" width="0.0961%" height="15" fill="rgb(225,57,24)" fg:x="2120" fg:w="6"/><text x="34.2135%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.10%)</title><rect x="33.9635%" y="1141" width="0.0961%" height="15" fill="rgb(208,169,48)" fg:x="2120" fg:w="6"/><text x="34.2135%" y="1151.50"></text></g><g><title>Chainstate::ConnectBlock (2 samples, 0.03%)</title><rect x="34.0276%" y="1125" width="0.0320%" height="15" fill="rgb(244,218,51)" fg:x="2124" fg:w="2"/><text x="34.2776%" y="1135.50"></text></g><g><title>CTransaction::IsCoinBase (2 samples, 0.03%)</title><rect x="34.0276%" y="1109" width="0.0320%" height="15" fill="rgb(214,148,10)" fg:x="2124" fg:w="2"/><text x="34.2776%" y="1119.50"></text></g><g><title>COutPoint::IsNull (2 samples, 0.03%)</title><rect x="34.0276%" y="1093" width="0.0320%" height="15" fill="rgb(225,174,27)" fg:x="2124" fg:w="2"/><text x="34.2776%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (2 samples, 0.03%)</title><rect x="34.0276%" y="1077" width="0.0320%" height="15" fill="rgb(230,96,26)" fg:x="2124" fg:w="2"/><text x="34.2776%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (2 samples, 0.03%)</title><rect x="34.0276%" y="1061" width="0.0320%" height="15" fill="rgb(232,10,30)" fg:x="2124" fg:w="2"/><text x="34.2776%" y="1071.50"></text></g><g><title>std::array&lt;unsigned char, 32ul&gt;::end (1 samples, 0.02%)</title><rect x="34.0436%" y="1045" width="0.0160%" height="15" fill="rgb(222,8,50)" fg:x="2125" fg:w="1"/><text x="34.2936%" y="1055.50"></text></g><g><title>CCoinsViewCache::GetCoin (8 samples, 0.13%)</title><rect x="34.0596%" y="1205" width="0.1282%" height="15" fill="rgb(213,81,27)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1215.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (8 samples, 0.13%)</title><rect x="34.0596%" y="1189" width="0.1282%" height="15" fill="rgb(245,50,10)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1199.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (8 samples, 0.13%)</title><rect x="34.0596%" y="1173" width="0.1282%" height="15" fill="rgb(216,100,18)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (8 samples, 0.13%)</title><rect x="34.0596%" y="1157" width="0.1282%" height="15" fill="rgb(236,147,54)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (8 samples, 0.13%)</title><rect x="34.0596%" y="1141" width="0.1282%" height="15" fill="rgb(205,143,26)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (8 samples, 0.13%)</title><rect x="34.0596%" y="1125" width="0.1282%" height="15" fill="rgb(236,26,9)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (8 samples, 0.13%)</title><rect x="34.0596%" y="1109" width="0.1282%" height="15" fill="rgb(221,165,53)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1119.50"></text></g><g><title>Coin::Coin (8 samples, 0.13%)</title><rect x="34.0596%" y="1093" width="0.1282%" height="15" fill="rgb(214,110,17)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1103.50"></text></g><g><title>CTxOut::CTxOut (8 samples, 0.13%)</title><rect x="34.0596%" y="1077" width="0.1282%" height="15" fill="rgb(237,197,12)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1087.50"></text></g><g><title>CScript::CScript (8 samples, 0.13%)</title><rect x="34.0596%" y="1061" width="0.1282%" height="15" fill="rgb(205,84,17)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (8 samples, 0.13%)</title><rect x="34.0596%" y="1045" width="0.1282%" height="15" fill="rgb(237,18,45)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1055.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (8 samples, 0.13%)</title><rect x="34.0596%" y="1029" width="0.1282%" height="15" fill="rgb(221,87,14)" fg:x="2126" fg:w="8"/><text x="34.3096%" y="1039.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="34.1878%" y="1205" width="0.0160%" height="15" fill="rgb(238,186,15)" fg:x="2134" fg:w="1"/><text x="34.4378%" y="1215.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin, true&gt; (1 samples, 0.02%)</title><rect x="34.1878%" y="1189" width="0.0160%" height="15" fill="rgb(208,115,11)" fg:x="2134" fg:w="1"/><text x="34.4378%" y="1199.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin, false&gt; (1 samples, 0.02%)</title><rect x="34.1878%" y="1173" width="0.0160%" height="15" fill="rgb(254,175,0)" fg:x="2134" fg:w="1"/><text x="34.4378%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="34.1878%" y="1157" width="0.0160%" height="15" fill="rgb(227,24,42)" fg:x="2134" fg:w="1"/><text x="34.4378%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="34.1878%" y="1141" width="0.0160%" height="15" fill="rgb(223,211,37)" fg:x="2134" fg:w="1"/><text x="34.4378%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="34.1878%" y="1125" width="0.0160%" height="15" fill="rgb(235,49,27)" fg:x="2134" fg:w="1"/><text x="34.4378%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="34.1878%" y="1109" width="0.0160%" height="15" fill="rgb(254,97,51)" fg:x="2134" fg:w="1"/><text x="34.4378%" y="1119.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="34.1878%" y="1093" width="0.0160%" height="15" fill="rgb(249,51,40)" fg:x="2134" fg:w="1"/><text x="34.4378%" y="1103.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="34.1878%" y="1077" width="0.0160%" height="15" fill="rgb(210,128,45)" fg:x="2134" fg:w="1"/><text x="34.4378%" y="1087.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="34.2038%" y="1205" width="0.0320%" height="15" fill="rgb(224,137,50)" fg:x="2135" fg:w="2"/><text x="34.4538%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.2198%" y="1189" width="0.0160%" height="15" fill="rgb(242,15,9)" fg:x="2136" fg:w="1"/><text x="34.4698%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.2198%" y="1173" width="0.0160%" height="15" fill="rgb(233,187,41)" fg:x="2136" fg:w="1"/><text x="34.4698%" y="1183.50"></text></g><g><title>CCoinsViewCache::HaveCoin (606 samples, 9.71%)</title><rect x="24.5594%" y="1221" width="9.7084%" height="15" fill="rgb(227,2,29)" fg:x="1533" fg:w="606"/><text x="24.8094%" y="1231.50">CCoinsViewCach..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="34.2358%" y="1205" width="0.0320%" height="15" fill="rgb(222,70,3)" fg:x="2137" fg:w="2"/><text x="34.4858%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="34.2518%" y="1189" width="0.0160%" height="15" fill="rgb(213,11,42)" fg:x="2138" fg:w="1"/><text x="34.5018%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="34.2518%" y="1173" width="0.0160%" height="15" fill="rgb(225,150,9)" fg:x="2138" fg:w="1"/><text x="34.5018%" y="1183.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="34.2518%" y="1157" width="0.0160%" height="15" fill="rgb(230,162,45)" fg:x="2138" fg:w="1"/><text x="34.5018%" y="1167.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="34.2518%" y="1141" width="0.0160%" height="15" fill="rgb(222,14,52)" fg:x="2138" fg:w="1"/><text x="34.5018%" y="1151.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="34.2518%" y="1125" width="0.0160%" height="15" fill="rgb(254,198,14)" fg:x="2138" fg:w="1"/><text x="34.5018%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="34.2518%" y="1109" width="0.0160%" height="15" fill="rgb(220,217,30)" fg:x="2138" fg:w="1"/><text x="34.5018%" y="1119.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="34.2518%" y="1093" width="0.0160%" height="15" fill="rgb(215,146,41)" fg:x="2138" fg:w="1"/><text x="34.5018%" y="1103.50"></text></g><g><title>CCoinsViewCache::HaveInputs (611 samples, 9.79%)</title><rect x="24.5434%" y="1237" width="9.7885%" height="15" fill="rgb(217,27,36)" fg:x="1532" fg:w="611"/><text x="24.7934%" y="1247.50">CCoinsViewCach..</text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::operator[] (4 samples, 0.06%)</title><rect x="34.2679%" y="1221" width="0.0641%" height="15" fill="rgb(219,218,39)" fg:x="2139" fg:w="4"/><text x="34.5179%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="34.2679%" y="1205" width="0.0641%" height="15" fill="rgb(219,4,42)" fg:x="2139" fg:w="4"/><text x="34.5179%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="34.2679%" y="1189" width="0.0641%" height="15" fill="rgb(249,119,36)" fg:x="2139" fg:w="4"/><text x="34.5179%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="34.2679%" y="1173" width="0.0641%" height="15" fill="rgb(209,23,33)" fg:x="2139" fg:w="4"/><text x="34.5179%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="34.2679%" y="1157" width="0.0641%" height="15" fill="rgb(211,10,0)" fg:x="2139" fg:w="4"/><text x="34.5179%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.2839%" y="1141" width="0.0481%" height="15" fill="rgb(208,99,37)" fg:x="2140" fg:w="3"/><text x="34.5339%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.2839%" y="1125" width="0.0481%" height="15" fill="rgb(213,132,31)" fg:x="2140" fg:w="3"/><text x="34.5339%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.2839%" y="1109" width="0.0481%" height="15" fill="rgb(243,129,40)" fg:x="2140" fg:w="3"/><text x="34.5339%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.2839%" y="1093" width="0.0481%" height="15" fill="rgb(210,66,33)" fg:x="2140" fg:w="3"/><text x="34.5339%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.2839%" y="1077" width="0.0481%" height="15" fill="rgb(209,189,4)" fg:x="2140" fg:w="3"/><text x="34.5339%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.2839%" y="1061" width="0.0481%" height="15" fill="rgb(214,107,37)" fg:x="2140" fg:w="3"/><text x="34.5339%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.2839%" y="1045" width="0.0481%" height="15" fill="rgb(245,88,54)" fg:x="2140" fg:w="3"/><text x="34.5339%" y="1055.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="34.3319%" y="1237" width="0.0160%" height="15" fill="rgb(205,146,20)" fg:x="2143" fg:w="1"/><text x="34.5819%" y="1247.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="34.3319%" y="1221" width="0.0160%" height="15" fill="rgb(220,161,25)" fg:x="2143" fg:w="1"/><text x="34.5819%" y="1231.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.08%)</title><rect x="34.3480%" y="1237" width="0.0801%" height="15" fill="rgb(215,152,15)" fg:x="2144" fg:w="5"/><text x="34.5980%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.4120%" y="1221" width="0.0160%" height="15" fill="rgb(233,192,44)" fg:x="2148" fg:w="1"/><text x="34.6620%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.4120%" y="1205" width="0.0160%" height="15" fill="rgb(240,170,46)" fg:x="2148" fg:w="1"/><text x="34.6620%" y="1215.50"></text></g><g><title>Consensus::CheckTxInputs (660 samples, 10.57%)</title><rect x="23.9186%" y="1253" width="10.5735%" height="15" fill="rgb(207,104,33)" fg:x="1493" fg:w="660"/><text x="24.1686%" y="1263.50">Consensus::Chec..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.06%)</title><rect x="34.4281%" y="1237" width="0.0641%" height="15" fill="rgb(219,21,39)" fg:x="2149" fg:w="4"/><text x="34.6781%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (2 samples, 0.03%)</title><rect x="34.4601%" y="1221" width="0.0320%" height="15" fill="rgb(214,133,29)" fg:x="2151" fg:w="2"/><text x="34.7101%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (2 samples, 0.03%)</title><rect x="34.4601%" y="1205" width="0.0320%" height="15" fill="rgb(226,93,6)" fg:x="2151" fg:w="2"/><text x="34.7101%" y="1215.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (2 samples, 0.03%)</title><rect x="34.4601%" y="1189" width="0.0320%" height="15" fill="rgb(252,222,34)" fg:x="2151" fg:w="2"/><text x="34.7101%" y="1199.50"></text></g><g><title>operator== (2 samples, 0.03%)</title><rect x="34.4601%" y="1173" width="0.0320%" height="15" fill="rgb(252,92,48)" fg:x="2151" fg:w="2"/><text x="34.7101%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (2 samples, 0.03%)</title><rect x="34.4601%" y="1157" width="0.0320%" height="15" fill="rgb(245,223,24)" fg:x="2151" fg:w="2"/><text x="34.7101%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (2 samples, 0.03%)</title><rect x="34.4601%" y="1141" width="0.0320%" height="15" fill="rgb(205,176,3)" fg:x="2151" fg:w="2"/><text x="34.7101%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (2 samples, 0.03%)</title><rect x="34.4601%" y="1125" width="0.0320%" height="15" fill="rgb(235,151,15)" fg:x="2151" fg:w="2"/><text x="34.7101%" y="1135.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.02%)</title><rect x="34.4921%" y="1237" width="0.0160%" height="15" fill="rgb(237,209,11)" fg:x="2153" fg:w="1"/><text x="34.7421%" y="1247.50"></text></g><g><title>CBlockIndex::GetBlockTime (1 samples, 0.02%)</title><rect x="34.4921%" y="1221" width="0.0160%" height="15" fill="rgb(243,227,24)" fg:x="2153" fg:w="1"/><text x="34.7421%" y="1231.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.02%)</title><rect x="34.5082%" y="1237" width="0.0160%" height="15" fill="rgb(239,193,16)" fg:x="2154" fg:w="1"/><text x="34.7582%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="34.5242%" y="1237" width="0.0160%" height="15" fill="rgb(231,27,9)" fg:x="2155" fg:w="1"/><text x="34.7742%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="34.5242%" y="1221" width="0.0160%" height="15" fill="rgb(219,169,10)" fg:x="2155" fg:w="1"/><text x="34.7742%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="34.5242%" y="1205" width="0.0160%" height="15" fill="rgb(244,229,43)" fg:x="2155" fg:w="1"/><text x="34.7742%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="34.5242%" y="1189" width="0.0160%" height="15" fill="rgb(254,38,20)" fg:x="2155" fg:w="1"/><text x="34.7742%" y="1199.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="34.5883%" y="1221" width="0.0160%" height="15" fill="rgb(250,47,30)" fg:x="2159" fg:w="1"/><text x="34.8383%" y="1231.50"></text></g><g><title>Chainstate::ConnectBlock (5 samples, 0.08%)</title><rect x="34.5402%" y="1237" width="0.0801%" height="15" fill="rgb(224,124,36)" fg:x="2156" fg:w="5"/><text x="34.7902%" y="1247.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="34.6043%" y="1221" width="0.0160%" height="15" fill="rgb(246,68,51)" fg:x="2160" fg:w="1"/><text x="34.8543%" y="1231.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.11%)</title><rect x="34.6203%" y="1237" width="0.1121%" height="15" fill="rgb(253,43,49)" fg:x="2161" fg:w="7"/><text x="34.8703%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="34.6363%" y="1221" width="0.0961%" height="15" fill="rgb(219,54,36)" fg:x="2162" fg:w="6"/><text x="34.8863%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="34.6363%" y="1205" width="0.0961%" height="15" fill="rgb(227,133,34)" fg:x="2162" fg:w="6"/><text x="34.8863%" y="1215.50"></text></g><g><title>EvaluateSequenceLocks (16 samples, 0.26%)</title><rect x="34.4921%" y="1253" width="0.2563%" height="15" fill="rgb(247,227,15)" fg:x="2153" fg:w="16"/><text x="34.7421%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="34.7325%" y="1237" width="0.0160%" height="15" fill="rgb(229,96,14)" fg:x="2168" fg:w="1"/><text x="34.9825%" y="1247.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.02%)</title><rect x="34.7805%" y="1237" width="0.0160%" height="15" fill="rgb(220,79,17)" fg:x="2171" fg:w="1"/><text x="35.0305%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="34.7965%" y="1173" width="0.0160%" height="15" fill="rgb(205,131,53)" fg:x="2172" fg:w="1"/><text x="35.0465%" y="1183.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="34.7965%" y="1157" width="0.0160%" height="15" fill="rgb(209,50,29)" fg:x="2172" fg:w="1"/><text x="35.0465%" y="1167.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="34.7965%" y="1141" width="0.0160%" height="15" fill="rgb(245,86,46)" fg:x="2172" fg:w="1"/><text x="35.0465%" y="1151.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.02%)</title><rect x="34.8126%" y="1141" width="0.0160%" height="15" fill="rgb(235,66,46)" fg:x="2173" fg:w="1"/><text x="35.0626%" y="1151.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="34.8286%" y="1141" width="0.0160%" height="15" fill="rgb(232,148,31)" fg:x="2174" fg:w="1"/><text x="35.0786%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="34.8286%" y="1125" width="0.0160%" height="15" fill="rgb(217,149,8)" fg:x="2174" fg:w="1"/><text x="35.0786%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="34.8286%" y="1109" width="0.0160%" height="15" fill="rgb(209,183,11)" fg:x="2174" fg:w="1"/><text x="35.0786%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::indirect_ptr (1 samples, 0.02%)</title><rect x="34.8286%" y="1093" width="0.0160%" height="15" fill="rgb(208,55,20)" fg:x="2174" fg:w="1"/><text x="35.0786%" y="1103.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="34.8446%" y="1141" width="0.0160%" height="15" fill="rgb(218,39,14)" fg:x="2175" fg:w="1"/><text x="35.0946%" y="1151.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="34.8606%" y="1141" width="0.0160%" height="15" fill="rgb(216,169,33)" fg:x="2176" fg:w="1"/><text x="35.1106%" y="1151.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="34.8766%" y="1141" width="0.0160%" height="15" fill="rgb(233,80,24)" fg:x="2177" fg:w="1"/><text x="35.1266%" y="1151.50"></text></g><g><title>GetTransactionSigOpCost (2 samples, 0.03%)</title><rect x="34.8927%" y="1141" width="0.0320%" height="15" fill="rgb(213,179,31)" fg:x="2178" fg:w="2"/><text x="35.1427%" y="1151.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="34.9087%" y="1125" width="0.0160%" height="15" fill="rgb(209,19,5)" fg:x="2179" fg:w="1"/><text x="35.1587%" y="1135.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="34.9087%" y="1109" width="0.0160%" height="15" fill="rgb(219,18,35)" fg:x="2179" fg:w="1"/><text x="35.1587%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (9 samples, 0.14%)</title><rect x="34.7965%" y="1221" width="0.1442%" height="15" fill="rgb(209,169,16)" fg:x="2172" fg:w="9"/><text x="35.0465%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (9 samples, 0.14%)</title><rect x="34.7965%" y="1205" width="0.1442%" height="15" fill="rgb(245,90,51)" fg:x="2172" fg:w="9"/><text x="35.0465%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (9 samples, 0.14%)</title><rect x="34.7965%" y="1189" width="0.1442%" height="15" fill="rgb(220,99,45)" fg:x="2172" fg:w="9"/><text x="35.0465%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.13%)</title><rect x="34.8126%" y="1173" width="0.1282%" height="15" fill="rgb(249,89,25)" fg:x="2173" fg:w="8"/><text x="35.0626%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (8 samples, 0.13%)</title><rect x="34.8126%" y="1157" width="0.1282%" height="15" fill="rgb(239,193,0)" fg:x="2173" fg:w="8"/><text x="35.0626%" y="1167.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="34.9247%" y="1141" width="0.0160%" height="15" fill="rgb(231,126,1)" fg:x="2180" fg:w="1"/><text x="35.1747%" y="1151.50"></text></g><g><title>CCoinsViewCache::AccessCoin (10 samples, 0.16%)</title><rect x="34.7965%" y="1237" width="0.1602%" height="15" fill="rgb(243,166,3)" fg:x="2172" fg:w="10"/><text x="35.0465%" y="1247.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="34.9407%" y="1221" width="0.0160%" height="15" fill="rgb(223,22,34)" fg:x="2181" fg:w="1"/><text x="35.1907%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.9407%" y="1205" width="0.0160%" height="15" fill="rgb(251,52,51)" fg:x="2181" fg:w="1"/><text x="35.1907%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.9407%" y="1189" width="0.0160%" height="15" fill="rgb(221,165,28)" fg:x="2181" fg:w="1"/><text x="35.1907%" y="1199.50"></text></g><g><title>CScript::IsWitnessProgram (3 samples, 0.05%)</title><rect x="34.9567%" y="1237" width="0.0481%" height="15" fill="rgb(218,121,47)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1247.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1221" width="0.0481%" height="15" fill="rgb(209,120,9)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1205" width="0.0481%" height="15" fill="rgb(236,68,12)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1215.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1189" width="0.0481%" height="15" fill="rgb(225,194,26)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1199.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1173" width="0.0481%" height="15" fill="rgb(231,84,39)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1157" width="0.0481%" height="15" fill="rgb(210,11,45)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1167.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1141" width="0.0481%" height="15" fill="rgb(224,54,52)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1125" width="0.0481%" height="15" fill="rgb(238,102,14)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1109" width="0.0481%" height="15" fill="rgb(243,160,52)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1093" width="0.0481%" height="15" fill="rgb(216,114,19)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="34.9567%" y="1077" width="0.0481%" height="15" fill="rgb(244,166,37)" fg:x="2182" fg:w="3"/><text x="35.2067%" y="1087.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.02%)</title><rect x="35.0048%" y="1221" width="0.0160%" height="15" fill="rgb(246,29,44)" fg:x="2185" fg:w="1"/><text x="35.2548%" y="1231.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="35.0208%" y="1221" width="0.0160%" height="15" fill="rgb(215,56,53)" fg:x="2186" fg:w="1"/><text x="35.2708%" y="1231.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="35.0368%" y="1205" width="0.0160%" height="15" fill="rgb(217,60,2)" fg:x="2187" fg:w="1"/><text x="35.2868%" y="1215.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="35.0529%" y="1205" width="0.0160%" height="15" fill="rgb(207,26,24)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1189" width="0.0160%" height="15" fill="rgb(252,210,15)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1199.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1173" width="0.0160%" height="15" fill="rgb(253,209,26)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1183.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1157" width="0.0160%" height="15" fill="rgb(238,170,14)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1167.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1141" width="0.0160%" height="15" fill="rgb(216,178,15)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1151.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1125" width="0.0160%" height="15" fill="rgb(250,197,2)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1135.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1109" width="0.0160%" height="15" fill="rgb(212,70,42)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1119.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1093" width="0.0160%" height="15" fill="rgb(227,213,9)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1077" width="0.0160%" height="15" fill="rgb(245,99,25)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1061" width="0.0160%" height="15" fill="rgb(250,82,29)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1045" width="0.0160%" height="15" fill="rgb(241,226,54)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.0529%" y="1029" width="0.0160%" height="15" fill="rgb(221,99,41)" fg:x="2188" fg:w="1"/><text x="35.3029%" y="1039.50"></text></g><g><title>CScript::GetOp (3 samples, 0.05%)</title><rect x="35.0368%" y="1221" width="0.0481%" height="15" fill="rgb(213,90,21)" fg:x="2187" fg:w="3"/><text x="35.2868%" y="1231.50"></text></g><g><title>GetTransactionSigOpCost (1 samples, 0.02%)</title><rect x="35.0689%" y="1205" width="0.0160%" height="15" fill="rgb(205,208,24)" fg:x="2189" fg:w="1"/><text x="35.3189%" y="1215.50"></text></g><g><title>CScript::IsPushOnly (1 samples, 0.02%)</title><rect x="35.0849%" y="1221" width="0.0160%" height="15" fill="rgb(246,31,12)" fg:x="2190" fg:w="1"/><text x="35.3349%" y="1231.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="35.0849%" y="1205" width="0.0160%" height="15" fill="rgb(213,154,6)" fg:x="2190" fg:w="1"/><text x="35.3349%" y="1215.50"></text></g><g><title>GetTransactionSigOpCost (1 samples, 0.02%)</title><rect x="35.0849%" y="1189" width="0.0160%" height="15" fill="rgb(222,163,29)" fg:x="2190" fg:w="1"/><text x="35.3349%" y="1199.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="35.0849%" y="1173" width="0.0160%" height="15" fill="rgb(227,201,8)" fg:x="2190" fg:w="1"/><text x="35.3349%" y="1183.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="35.1009%" y="1221" width="0.0160%" height="15" fill="rgb(233,9,32)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1205" width="0.0160%" height="15" fill="rgb(217,54,24)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1189" width="0.0160%" height="15" fill="rgb(235,192,0)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1199.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1173" width="0.0160%" height="15" fill="rgb(235,45,9)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1183.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1157" width="0.0160%" height="15" fill="rgb(246,42,40)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1167.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1141" width="0.0160%" height="15" fill="rgb(248,111,24)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1151.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1125" width="0.0160%" height="15" fill="rgb(249,65,22)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1109" width="0.0160%" height="15" fill="rgb(238,111,51)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1093" width="0.0160%" height="15" fill="rgb(250,118,22)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1077" width="0.0160%" height="15" fill="rgb(234,84,26)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1009%" y="1061" width="0.0160%" height="15" fill="rgb(243,172,12)" fg:x="2191" fg:w="1"/><text x="35.3509%" y="1071.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="35.1169%" y="1221" width="0.0160%" height="15" fill="rgb(236,150,49)" fg:x="2192" fg:w="1"/><text x="35.3669%" y="1231.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="35.1169%" y="1205" width="0.0160%" height="15" fill="rgb(225,197,26)" fg:x="2192" fg:w="1"/><text x="35.3669%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="35.1169%" y="1189" width="0.0160%" height="15" fill="rgb(214,17,42)" fg:x="2192" fg:w="1"/><text x="35.3669%" y="1199.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="35.1169%" y="1173" width="0.0160%" height="15" fill="rgb(224,165,40)" fg:x="2192" fg:w="1"/><text x="35.3669%" y="1183.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="35.1330%" y="1221" width="0.0160%" height="15" fill="rgb(246,100,4)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1205" width="0.0160%" height="15" fill="rgb(222,103,0)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1189" width="0.0160%" height="15" fill="rgb(227,189,26)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1199.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1173" width="0.0160%" height="15" fill="rgb(214,202,17)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1157" width="0.0160%" height="15" fill="rgb(229,111,3)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1167.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1141" width="0.0160%" height="15" fill="rgb(229,172,15)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1125" width="0.0160%" height="15" fill="rgb(230,224,35)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1135.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1109" width="0.0160%" height="15" fill="rgb(251,141,6)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1093" width="0.0160%" height="15" fill="rgb(225,208,6)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1077" width="0.0160%" height="15" fill="rgb(246,181,16)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1061" width="0.0160%" height="15" fill="rgb(227,129,36)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.1330%" y="1045" width="0.0160%" height="15" fill="rgb(248,117,24)" fg:x="2193" fg:w="1"/><text x="35.3830%" y="1055.50"></text></g><g><title>CountWitnessSigOps (16 samples, 0.26%)</title><rect x="35.0048%" y="1237" width="0.2563%" height="15" fill="rgb(214,185,35)" fg:x="2185" fg:w="16"/><text x="35.2548%" y="1247.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.11%)</title><rect x="35.1490%" y="1221" width="0.1121%" height="15" fill="rgb(236,150,34)" fg:x="2194" fg:w="7"/><text x="35.3990%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="35.2451%" y="1205" width="0.0160%" height="15" fill="rgb(243,228,27)" fg:x="2200" fg:w="1"/><text x="35.4951%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="35.2451%" y="1189" width="0.0160%" height="15" fill="rgb(245,77,44)" fg:x="2200" fg:w="1"/><text x="35.4951%" y="1199.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (6 samples, 0.10%)</title><rect x="35.2611%" y="1221" width="0.0961%" height="15" fill="rgb(235,214,42)" fg:x="2201" fg:w="6"/><text x="35.5111%" y="1231.50"></text></g><g><title>void std::sort&lt;long*&gt; (4 samples, 0.06%)</title><rect x="35.2932%" y="1205" width="0.0641%" height="15" fill="rgb(221,74,3)" fg:x="2203" fg:w="4"/><text x="35.5432%" y="1215.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (4 samples, 0.06%)</title><rect x="35.2932%" y="1189" width="0.0641%" height="15" fill="rgb(206,121,29)" fg:x="2203" fg:w="4"/><text x="35.5432%" y="1199.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (4 samples, 0.06%)</title><rect x="35.2932%" y="1173" width="0.0641%" height="15" fill="rgb(249,131,53)" fg:x="2203" fg:w="4"/><text x="35.5432%" y="1183.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (4 samples, 0.06%)</title><rect x="35.2932%" y="1157" width="0.0641%" height="15" fill="rgb(236,170,29)" fg:x="2203" fg:w="4"/><text x="35.5432%" y="1167.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;long*, __gnu_cxx::__ops::_Val_less_iter&gt; (1 samples, 0.02%)</title><rect x="35.3412%" y="1141" width="0.0160%" height="15" fill="rgb(247,96,15)" fg:x="2206" fg:w="1"/><text x="35.5912%" y="1151.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.02%)</title><rect x="35.3893%" y="1189" width="0.0160%" height="15" fill="rgb(211,210,7)" fg:x="2209" fg:w="1"/><text x="35.6393%" y="1199.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.02%)</title><rect x="35.3893%" y="1173" width="0.0160%" height="15" fill="rgb(240,88,50)" fg:x="2209" fg:w="1"/><text x="35.6393%" y="1183.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="35.3893%" y="1157" width="0.0160%" height="15" fill="rgb(209,229,26)" fg:x="2209" fg:w="1"/><text x="35.6393%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="35.3893%" y="1141" width="0.0160%" height="15" fill="rgb(210,68,23)" fg:x="2209" fg:w="1"/><text x="35.6393%" y="1151.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="35.3893%" y="1125" width="0.0160%" height="15" fill="rgb(229,180,13)" fg:x="2209" fg:w="1"/><text x="35.6393%" y="1135.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_less_iter::operator (1 samples, 0.02%)</title><rect x="35.3893%" y="1109" width="0.0160%" height="15" fill="rgb(236,53,44)" fg:x="2209" fg:w="1"/><text x="35.6393%" y="1119.50"></text></g><g><title>CScript::GetSigOpCount (3 samples, 0.05%)</title><rect x="35.4053%" y="1189" width="0.0481%" height="15" fill="rgb(244,214,29)" fg:x="2210" fg:w="3"/><text x="35.6553%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator&lt;(prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator) const (1 samples, 0.02%)</title><rect x="35.4374%" y="1173" width="0.0160%" height="15" fill="rgb(220,75,29)" fg:x="2212" fg:w="1"/><text x="35.6874%" y="1183.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="35.4534%" y="1189" width="0.0160%" height="15" fill="rgb(214,183,37)" fg:x="2213" fg:w="1"/><text x="35.7034%" y="1199.50"></text></g><g><title>EvaluateSequenceLocks (1 samples, 0.02%)</title><rect x="35.4694%" y="1189" width="0.0160%" height="15" fill="rgb(239,117,29)" fg:x="2214" fg:w="1"/><text x="35.7194%" y="1199.50"></text></g><g><title>GetScriptOp (8 samples, 0.13%)</title><rect x="35.4854%" y="1189" width="0.1282%" height="15" fill="rgb(237,171,35)" fg:x="2215" fg:w="8"/><text x="35.7354%" y="1199.50"></text></g><g><title>CScript::GetSigOpCount (18 samples, 0.29%)</title><rect x="35.3573%" y="1221" width="0.2884%" height="15" fill="rgb(229,178,53)" fg:x="2207" fg:w="18"/><text x="35.6073%" y="1231.50"></text></g><g><title>CScript::GetOp (16 samples, 0.26%)</title><rect x="35.3893%" y="1205" width="0.2563%" height="15" fill="rgb(210,102,19)" fg:x="2209" fg:w="16"/><text x="35.6393%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.03%)</title><rect x="35.6136%" y="1189" width="0.0320%" height="15" fill="rgb(235,127,22)" fg:x="2223" fg:w="2"/><text x="35.8636%" y="1199.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="35.6456%" y="1221" width="0.0160%" height="15" fill="rgb(244,31,31)" fg:x="2225" fg:w="1"/><text x="35.8956%" y="1231.50"></text></g><g><title>TxValidationState::~TxValidationState (1 samples, 0.02%)</title><rect x="35.6456%" y="1205" width="0.0160%" height="15" fill="rgb(231,43,21)" fg:x="2225" fg:w="1"/><text x="35.8956%" y="1215.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::~ValidationState (1 samples, 0.02%)</title><rect x="35.6456%" y="1189" width="0.0160%" height="15" fill="rgb(217,131,35)" fg:x="2225" fg:w="1"/><text x="35.8956%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="35.6456%" y="1173" width="0.0160%" height="15" fill="rgb(221,149,4)" fg:x="2225" fg:w="1"/><text x="35.8956%" y="1183.50"></text></g><g><title>operator- (1 samples, 0.02%)</title><rect x="35.8219%" y="1205" width="0.0160%" height="15" fill="rgb(232,170,28)" fg:x="2236" fg:w="1"/><text x="36.0719%" y="1215.50"></text></g><g><title>GetScriptOp (12 samples, 0.19%)</title><rect x="35.6616%" y="1221" width="0.1922%" height="15" fill="rgb(238,56,10)" fg:x="2226" fg:w="12"/><text x="35.9116%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="35.8379%" y="1205" width="0.0160%" height="15" fill="rgb(235,196,14)" fg:x="2237" fg:w="1"/><text x="36.0879%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="35.8379%" y="1189" width="0.0160%" height="15" fill="rgb(216,45,48)" fg:x="2237" fg:w="1"/><text x="36.0879%" y="1199.50"></text></g><g><title>GetLegacySigOpCount (39 samples, 0.62%)</title><rect x="35.2611%" y="1237" width="0.6248%" height="15" fill="rgb(238,213,17)" fg:x="2201" fg:w="39"/><text x="35.5111%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.03%)</title><rect x="35.8539%" y="1221" width="0.0320%" height="15" fill="rgb(212,13,2)" fg:x="2238" fg:w="2"/><text x="36.1039%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="35.8859%" y="1141" width="0.0160%" height="15" fill="rgb(240,114,20)" fg:x="2240" fg:w="1"/><text x="36.1359%" y="1151.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="35.8859%" y="1125" width="0.0160%" height="15" fill="rgb(228,41,40)" fg:x="2240" fg:w="1"/><text x="36.1359%" y="1135.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="35.8859%" y="1109" width="0.0160%" height="15" fill="rgb(244,132,35)" fg:x="2240" fg:w="1"/><text x="36.1359%" y="1119.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="35.8859%" y="1093" width="0.0160%" height="15" fill="rgb(253,189,4)" fg:x="2240" fg:w="1"/><text x="36.1359%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="35.8859%" y="1189" width="0.0320%" height="15" fill="rgb(224,37,19)" fg:x="2240" fg:w="2"/><text x="36.1359%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (2 samples, 0.03%)</title><rect x="35.8859%" y="1173" width="0.0320%" height="15" fill="rgb(235,223,18)" fg:x="2240" fg:w="2"/><text x="36.1359%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (2 samples, 0.03%)</title><rect x="35.8859%" y="1157" width="0.0320%" height="15" fill="rgb(235,163,25)" fg:x="2240" fg:w="2"/><text x="36.1359%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="35.9020%" y="1141" width="0.0160%" height="15" fill="rgb(217,145,28)" fg:x="2241" fg:w="1"/><text x="36.1520%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="35.9020%" y="1125" width="0.0160%" height="15" fill="rgb(223,223,32)" fg:x="2241" fg:w="1"/><text x="36.1520%" y="1135.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="35.9020%" y="1109" width="0.0160%" height="15" fill="rgb(227,189,39)" fg:x="2241" fg:w="1"/><text x="36.1520%" y="1119.50"></text></g><g><title>GetLegacySigOpCount (1 samples, 0.02%)</title><rect x="35.9180%" y="1189" width="0.0160%" height="15" fill="rgb(248,10,22)" fg:x="2242" fg:w="1"/><text x="36.1680%" y="1199.50"></text></g><g><title>CCoinsViewCache::AccessCoin (4 samples, 0.06%)</title><rect x="35.8859%" y="1205" width="0.0641%" height="15" fill="rgb(248,46,39)" fg:x="2240" fg:w="4"/><text x="36.1359%" y="1215.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="35.9340%" y="1189" width="0.0160%" height="15" fill="rgb(248,113,48)" fg:x="2243" fg:w="1"/><text x="36.1840%" y="1199.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="35.9500%" y="1205" width="0.0160%" height="15" fill="rgb(245,16,25)" fg:x="2244" fg:w="1"/><text x="36.2000%" y="1215.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="35.9500%" y="1189" width="0.0160%" height="15" fill="rgb(249,152,16)" fg:x="2244" fg:w="1"/><text x="36.2000%" y="1199.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="35.9500%" y="1173" width="0.0160%" height="15" fill="rgb(250,16,1)" fg:x="2244" fg:w="1"/><text x="36.2000%" y="1183.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="35.9660%" y="1205" width="0.0160%" height="15" fill="rgb(249,138,3)" fg:x="2245" fg:w="1"/><text x="36.2160%" y="1215.50"></text></g><g><title>GetP2SHSigOpCount (7 samples, 0.11%)</title><rect x="35.8859%" y="1237" width="0.1121%" height="15" fill="rgb(227,71,41)" fg:x="2240" fg:w="7"/><text x="36.1359%" y="1247.50"></text></g><g><title>GetP2SHSigOpCount (7 samples, 0.11%)</title><rect x="35.8859%" y="1221" width="0.1121%" height="15" fill="rgb(209,184,23)" fg:x="2240" fg:w="7"/><text x="36.1359%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="35.9821%" y="1205" width="0.0160%" height="15" fill="rgb(223,215,31)" fg:x="2246" fg:w="1"/><text x="36.2321%" y="1215.50"></text></g><g><title>GetTransactionSigOpCost (79 samples, 1.27%)</title><rect x="34.7485%" y="1253" width="1.2656%" height="15" fill="rgb(210,146,28)" fg:x="2169" fg:w="79"/><text x="34.9985%" y="1263.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="35.9981%" y="1237" width="0.0160%" height="15" fill="rgb(209,183,41)" fg:x="2247" fg:w="1"/><text x="36.2481%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator&gt;=(prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator) const (1 samples, 0.02%)</title><rect x="35.9981%" y="1221" width="0.0160%" height="15" fill="rgb(209,224,45)" fg:x="2247" fg:w="1"/><text x="36.2481%" y="1231.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="36.0141%" y="1237" width="0.0160%" height="15" fill="rgb(224,209,51)" fg:x="2248" fg:w="1"/><text x="36.2641%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="36.0141%" y="1221" width="0.0160%" height="15" fill="rgb(223,17,39)" fg:x="2248" fg:w="1"/><text x="36.2641%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="36.0141%" y="1205" width="0.0160%" height="15" fill="rgb(234,204,37)" fg:x="2248" fg:w="1"/><text x="36.2641%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="36.0141%" y="1189" width="0.0160%" height="15" fill="rgb(236,120,5)" fg:x="2248" fg:w="1"/><text x="36.2641%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="36.0141%" y="1173" width="0.0160%" height="15" fill="rgb(248,97,27)" fg:x="2248" fg:w="1"/><text x="36.2641%" y="1183.50"></text></g><g><title>CTransaction::GetValueOut (1 samples, 0.02%)</title><rect x="36.0301%" y="1237" width="0.0160%" height="15" fill="rgb(240,66,17)" fg:x="2249" fg:w="1"/><text x="36.2801%" y="1247.50"></text></g><g><title>MoneyRange (1 samples, 0.02%)</title><rect x="36.0301%" y="1221" width="0.0160%" height="15" fill="rgb(210,79,3)" fg:x="2249" fg:w="1"/><text x="36.2801%" y="1231.50"></text></g><g><title>SequenceLocks (3 samples, 0.05%)</title><rect x="36.0141%" y="1253" width="0.0481%" height="15" fill="rgb(214,176,27)" fg:x="2248" fg:w="3"/><text x="36.2641%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="36.0461%" y="1237" width="0.0160%" height="15" fill="rgb(235,185,3)" fg:x="2250" fg:w="1"/><text x="36.2961%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="36.0461%" y="1221" width="0.0160%" height="15" fill="rgb(227,24,12)" fg:x="2250" fg:w="1"/><text x="36.2961%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="36.0461%" y="1205" width="0.0160%" height="15" fill="rgb(252,169,48)" fg:x="2250" fg:w="1"/><text x="36.2961%" y="1215.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="36.0461%" y="1189" width="0.0160%" height="15" fill="rgb(212,65,1)" fg:x="2250" fg:w="1"/><text x="36.2961%" y="1199.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="36.0461%" y="1173" width="0.0160%" height="15" fill="rgb(242,39,24)" fg:x="2250" fg:w="1"/><text x="36.2961%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="36.0461%" y="1157" width="0.0160%" height="15" fill="rgb(249,32,23)" fg:x="2250" fg:w="1"/><text x="36.2961%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="36.0461%" y="1141" width="0.0160%" height="15" fill="rgb(251,195,23)" fg:x="2250" fg:w="1"/><text x="36.2961%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="36.0461%" y="1125" width="0.0160%" height="15" fill="rgb(236,174,8)" fg:x="2250" fg:w="1"/><text x="36.2961%" y="1135.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="36.1903%" y="1237" width="0.0160%" height="15" fill="rgb(220,197,8)" fg:x="2259" fg:w="1"/><text x="36.4403%" y="1247.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="36.1903%" y="1221" width="0.0160%" height="15" fill="rgb(240,108,37)" fg:x="2259" fg:w="1"/><text x="36.4403%" y="1231.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="36.1903%" y="1205" width="0.0160%" height="15" fill="rgb(232,176,24)" fg:x="2259" fg:w="1"/><text x="36.4403%" y="1215.50"></text></g><g><title>SipHashUint256Extra (13 samples, 0.21%)</title><rect x="36.0622%" y="1253" width="0.2083%" height="15" fill="rgb(243,35,29)" fg:x="2251" fg:w="13"/><text x="36.3122%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.06%)</title><rect x="36.2063%" y="1237" width="0.0641%" height="15" fill="rgb(210,37,18)" fg:x="2260" fg:w="4"/><text x="36.4563%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.06%)</title><rect x="36.2063%" y="1221" width="0.0641%" height="15" fill="rgb(224,184,40)" fg:x="2260" fg:w="4"/><text x="36.4563%" y="1231.50"></text></g><g><title>TxValidationState::~TxValidationState (2 samples, 0.03%)</title><rect x="36.2704%" y="1253" width="0.0320%" height="15" fill="rgb(236,39,29)" fg:x="2264" fg:w="2"/><text x="36.5204%" y="1263.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::~ValidationState (2 samples, 0.03%)</title><rect x="36.2704%" y="1237" width="0.0320%" height="15" fill="rgb(232,48,39)" fg:x="2264" fg:w="2"/><text x="36.5204%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (2 samples, 0.03%)</title><rect x="36.2704%" y="1221" width="0.0320%" height="15" fill="rgb(236,34,42)" fg:x="2264" fg:w="2"/><text x="36.5204%" y="1231.50"></text></g><g><title>CScript::IsWitnessProgram (2 samples, 0.03%)</title><rect x="36.2704%" y="1205" width="0.0320%" height="15" fill="rgb(243,106,37)" fg:x="2264" fg:w="2"/><text x="36.5204%" y="1215.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1189" width="0.0160%" height="15" fill="rgb(218,96,6)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1199.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1173" width="0.0160%" height="15" fill="rgb(235,130,12)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1157" width="0.0160%" height="15" fill="rgb(231,95,0)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1167.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1141" width="0.0160%" height="15" fill="rgb(228,12,23)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1125" width="0.0160%" height="15" fill="rgb(216,12,1)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1135.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1109" width="0.0160%" height="15" fill="rgb(219,59,3)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1093" width="0.0160%" height="15" fill="rgb(215,208,46)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1077" width="0.0160%" height="15" fill="rgb(254,224,29)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1061" width="0.0160%" height="15" fill="rgb(232,14,29)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.2864%" y="1045" width="0.0160%" height="15" fill="rgb(208,45,52)" fg:x="2265" fg:w="1"/><text x="36.5364%" y="1055.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="36.3185%" y="1237" width="0.0160%" height="15" fill="rgb(234,191,28)" fg:x="2267" fg:w="1"/><text x="36.5685%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="36.3185%" y="1221" width="0.0160%" height="15" fill="rgb(244,67,43)" fg:x="2267" fg:w="1"/><text x="36.5685%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="36.3185%" y="1205" width="0.0160%" height="15" fill="rgb(236,189,24)" fg:x="2267" fg:w="1"/><text x="36.5685%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="36.3185%" y="1189" width="0.0160%" height="15" fill="rgb(239,214,33)" fg:x="2267" fg:w="1"/><text x="36.5685%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="36.3185%" y="1173" width="0.0160%" height="15" fill="rgb(226,176,41)" fg:x="2267" fg:w="1"/><text x="36.5685%" y="1183.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="36.3505%" y="1221" width="0.0160%" height="15" fill="rgb(248,47,8)" fg:x="2269" fg:w="1"/><text x="36.6005%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="36.3505%" y="1205" width="0.0160%" height="15" fill="rgb(218,81,44)" fg:x="2269" fg:w="1"/><text x="36.6005%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="36.3505%" y="1189" width="0.0160%" height="15" fill="rgb(213,98,6)" fg:x="2269" fg:w="1"/><text x="36.6005%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="36.3505%" y="1173" width="0.0160%" height="15" fill="rgb(222,85,22)" fg:x="2269" fg:w="1"/><text x="36.6005%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="36.3505%" y="1157" width="0.0160%" height="15" fill="rgb(239,46,39)" fg:x="2269" fg:w="1"/><text x="36.6005%" y="1167.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="36.3505%" y="1141" width="0.0160%" height="15" fill="rgb(237,12,29)" fg:x="2269" fg:w="1"/><text x="36.6005%" y="1151.50"></text></g><g><title>CCheckQueueControl&lt;CScriptCheck&gt;::Add (2 samples, 0.03%)</title><rect x="36.3665%" y="1205" width="0.0320%" height="15" fill="rgb(214,77,8)" fg:x="2270" fg:w="2"/><text x="36.6165%" y="1215.50"></text></g><g><title>Chainstate::ConnectBlock (3 samples, 0.05%)</title><rect x="36.3665%" y="1221" width="0.0481%" height="15" fill="rgb(217,168,37)" fg:x="2270" fg:w="3"/><text x="36.6165%" y="1231.50"></text></g><g><title>CTxUndo&amp; std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="36.3986%" y="1205" width="0.0160%" height="15" fill="rgb(221,217,23)" fg:x="2272" fg:w="1"/><text x="36.6486%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CTxUndo&gt; &gt;::construct&lt;CTxUndo&gt; (1 samples, 0.02%)</title><rect x="36.3986%" y="1189" width="0.0160%" height="15" fill="rgb(243,229,36)" fg:x="2272" fg:w="1"/><text x="36.6486%" y="1199.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="36.3986%" y="1173" width="0.0160%" height="15" fill="rgb(251,163,40)" fg:x="2272" fg:w="1"/><text x="36.6486%" y="1183.50"></text></g><g><title>CTxUndo::CTxUndo (1 samples, 0.02%)</title><rect x="36.3986%" y="1157" width="0.0160%" height="15" fill="rgb(237,222,12)" fg:x="2272" fg:w="1"/><text x="36.6486%" y="1167.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="36.3986%" y="1141" width="0.0160%" height="15" fill="rgb(248,132,6)" fg:x="2272" fg:w="1"/><text x="36.6486%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="36.3986%" y="1125" width="0.0160%" height="15" fill="rgb(227,167,50)" fg:x="2272" fg:w="1"/><text x="36.6486%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="36.3986%" y="1109" width="0.0160%" height="15" fill="rgb(242,84,37)" fg:x="2272" fg:w="1"/><text x="36.6486%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="36.3986%" y="1093" width="0.0160%" height="15" fill="rgb(212,4,50)" fg:x="2272" fg:w="1"/><text x="36.6486%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="36.4146%" y="1221" width="0.0160%" height="15" fill="rgb(230,228,32)" fg:x="2273" fg:w="1"/><text x="36.6646%" y="1231.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="36.4306%" y="1189" width="0.0160%" height="15" fill="rgb(248,217,23)" fg:x="2274" fg:w="1"/><text x="36.6806%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="36.4306%" y="1173" width="0.0160%" height="15" fill="rgb(238,197,32)" fg:x="2274" fg:w="1"/><text x="36.6806%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="36.4306%" y="1157" width="0.0160%" height="15" fill="rgb(236,106,1)" fg:x="2274" fg:w="1"/><text x="36.6806%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="36.4306%" y="1141" width="0.0160%" height="15" fill="rgb(219,228,13)" fg:x="2274" fg:w="1"/><text x="36.6806%" y="1151.50"></text></g><g><title>CCoinsViewCache::SpendCoin (8 samples, 0.13%)</title><rect x="36.3345%" y="1237" width="0.1282%" height="15" fill="rgb(238,30,35)" fg:x="2268" fg:w="8"/><text x="36.5845%" y="1247.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (2 samples, 0.03%)</title><rect x="36.4306%" y="1221" width="0.0320%" height="15" fill="rgb(236,70,23)" fg:x="2274" fg:w="2"/><text x="36.6806%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (2 samples, 0.03%)</title><rect x="36.4306%" y="1205" width="0.0320%" height="15" fill="rgb(249,104,48)" fg:x="2274" fg:w="2"/><text x="36.6806%" y="1215.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="36.4467%" y="1189" width="0.0160%" height="15" fill="rgb(254,117,50)" fg:x="2275" fg:w="1"/><text x="36.6967%" y="1199.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.11%)</title><rect x="36.4627%" y="1237" width="0.1121%" height="15" fill="rgb(223,152,4)" fg:x="2276" fg:w="7"/><text x="36.7127%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.5588%" y="1221" width="0.0160%" height="15" fill="rgb(245,6,2)" fg:x="2282" fg:w="1"/><text x="36.8088%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.5588%" y="1205" width="0.0160%" height="15" fill="rgb(249,150,24)" fg:x="2282" fg:w="1"/><text x="36.8088%" y="1215.50"></text></g><g><title>UpdateCoins (1 samples, 0.02%)</title><rect x="36.5748%" y="1237" width="0.0160%" height="15" fill="rgb(228,185,42)" fg:x="2283" fg:w="1"/><text x="36.8248%" y="1247.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="36.5748%" y="1221" width="0.0160%" height="15" fill="rgb(226,39,33)" fg:x="2283" fg:w="1"/><text x="36.8248%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="36.5908%" y="1237" width="0.0160%" height="15" fill="rgb(221,166,19)" fg:x="2284" fg:w="1"/><text x="36.8408%" y="1247.50"></text></g><g><title>UpdateCoins (20 samples, 0.32%)</title><rect x="36.3025%" y="1253" width="0.3204%" height="15" fill="rgb(209,109,2)" fg:x="2266" fg:w="20"/><text x="36.5525%" y="1263.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="36.6069%" y="1237" width="0.0160%" height="15" fill="rgb(252,216,26)" fg:x="2285" fg:w="1"/><text x="36.8569%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="36.6069%" y="1221" width="0.0160%" height="15" fill="rgb(227,173,36)" fg:x="2285" fg:w="1"/><text x="36.8569%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="36.6069%" y="1205" width="0.0160%" height="15" fill="rgb(209,90,7)" fg:x="2285" fg:w="1"/><text x="36.8569%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="36.6069%" y="1189" width="0.0160%" height="15" fill="rgb(250,194,11)" fg:x="2285" fg:w="1"/><text x="36.8569%" y="1199.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (1 samples, 0.02%)</title><rect x="36.6069%" y="1173" width="0.0160%" height="15" fill="rgb(220,72,50)" fg:x="2285" fg:w="1"/><text x="36.8569%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (1 samples, 0.02%)</title><rect x="36.6069%" y="1157" width="0.0160%" height="15" fill="rgb(222,106,48)" fg:x="2285" fg:w="1"/><text x="36.8569%" y="1167.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="36.6069%" y="1141" width="0.0160%" height="15" fill="rgb(216,220,45)" fg:x="2285" fg:w="1"/><text x="36.8569%" y="1151.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="36.6069%" y="1125" width="0.0160%" height="15" fill="rgb(234,112,18)" fg:x="2285" fg:w="1"/><text x="36.8569%" y="1135.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="36.6069%" y="1109" width="0.0160%" height="15" fill="rgb(206,179,9)" fg:x="2285" fg:w="1"/><text x="36.8569%" y="1119.50"></text></g><g><title>WitnessSigOps (1 samples, 0.02%)</title><rect x="36.6229%" y="1253" width="0.0160%" height="15" fill="rgb(215,115,40)" fg:x="2286" fg:w="1"/><text x="36.8729%" y="1263.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="36.6549%" y="1221" width="0.0160%" height="15" fill="rgb(222,69,34)" fg:x="2288" fg:w="1"/><text x="36.9049%" y="1231.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="36.6549%" y="1205" width="0.0160%" height="15" fill="rgb(209,161,10)" fg:x="2288" fg:w="1"/><text x="36.9049%" y="1215.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="36.6549%" y="1189" width="0.0160%" height="15" fill="rgb(217,6,38)" fg:x="2288" fg:w="1"/><text x="36.9049%" y="1199.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="36.6549%" y="1173" width="0.0160%" height="15" fill="rgb(229,229,48)" fg:x="2288" fg:w="1"/><text x="36.9049%" y="1183.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="36.6549%" y="1157" width="0.0160%" height="15" fill="rgb(225,21,28)" fg:x="2288" fg:w="1"/><text x="36.9049%" y="1167.50"></text></g><g><title>AutoFile::write (4 samples, 0.06%)</title><rect x="36.6389%" y="1237" width="0.0641%" height="15" fill="rgb(206,33,13)" fg:x="2287" fg:w="4"/><text x="36.8889%" y="1247.50"></text></g><g><title>util::Xor (2 samples, 0.03%)</title><rect x="36.6709%" y="1221" width="0.0320%" height="15" fill="rgb(242,178,17)" fg:x="2289" fg:w="2"/><text x="36.9209%" y="1231.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="36.6870%" y="1205" width="0.0160%" height="15" fill="rgb(220,162,5)" fg:x="2290" fg:w="1"/><text x="36.9370%" y="1215.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="36.6870%" y="1189" width="0.0160%" height="15" fill="rgb(210,33,43)" fg:x="2290" fg:w="1"/><text x="36.9370%" y="1199.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="36.7030%" y="1237" width="0.0320%" height="15" fill="rgb(216,116,54)" fg:x="2291" fg:w="2"/><text x="36.9530%" y="1247.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="36.7190%" y="1221" width="0.0160%" height="15" fill="rgb(249,92,24)" fg:x="2292" fg:w="1"/><text x="36.9690%" y="1231.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="36.7350%" y="1237" width="0.0160%" height="15" fill="rgb(231,189,14)" fg:x="2293" fg:w="1"/><text x="36.9850%" y="1247.50"></text></g><g><title>AllocateFileRange (1 samples, 0.02%)</title><rect x="36.7510%" y="1205" width="0.0160%" height="15" fill="rgb(230,8,41)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1215.50"></text></g><g><title>posix_fallocate (1 samples, 0.02%)</title><rect x="36.7510%" y="1189" width="0.0160%" height="15" fill="rgb(249,7,27)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7510%" y="1173" width="0.0160%" height="15" fill="rgb(232,86,5)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7510%" y="1157" width="0.0160%" height="15" fill="rgb(224,175,18)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7510%" y="1141" width="0.0160%" height="15" fill="rgb(220,129,12)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7510%" y="1125" width="0.0160%" height="15" fill="rgb(210,19,36)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.7510%" y="1109" width="0.0160%" height="15" fill="rgb(219,96,14)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.7510%" y="1093" width="0.0160%" height="15" fill="rgb(249,106,1)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.7510%" y="1077" width="0.0160%" height="15" fill="rgb(249,155,20)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.7510%" y="1061" width="0.0160%" height="15" fill="rgb(244,168,9)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.7510%" y="1045" width="0.0160%" height="15" fill="rgb(216,23,50)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.7510%" y="1029" width="0.0160%" height="15" fill="rgb(224,219,20)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.7510%" y="1013" width="0.0160%" height="15" fill="rgb(222,156,15)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1023.50"></text></g><g><title>[[crc32c_intel]] (1 samples, 0.02%)</title><rect x="36.7510%" y="997" width="0.0160%" height="15" fill="rgb(231,97,17)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="1007.50"></text></g><g><title>[[crc32c_intel]] (1 samples, 0.02%)</title><rect x="36.7510%" y="981" width="0.0160%" height="15" fill="rgb(218,70,48)" fg:x="2294" fg:w="1"/><text x="37.0010%" y="991.50"></text></g><g><title>FlatFileSeq::Open (1 samples, 0.02%)</title><rect x="36.7671%" y="1189" width="0.0160%" height="15" fill="rgb(212,196,52)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1199.50"></text></g><g><title>std::filesystem::create_directories (1 samples, 0.02%)</title><rect x="36.7671%" y="1173" width="0.0160%" height="15" fill="rgb(243,203,18)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1183.50"></text></g><g><title>std::filesystem::create_directories (1 samples, 0.02%)</title><rect x="36.7671%" y="1157" width="0.0160%" height="15" fill="rgb(252,125,41)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1167.50"></text></g><g><title>std::filesystem::status (1 samples, 0.02%)</title><rect x="36.7671%" y="1141" width="0.0160%" height="15" fill="rgb(223,180,33)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1151.50"></text></g><g><title>__GI___fstatat64 (1 samples, 0.02%)</title><rect x="36.7671%" y="1125" width="0.0160%" height="15" fill="rgb(254,159,46)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7671%" y="1109" width="0.0160%" height="15" fill="rgb(254,38,10)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7671%" y="1093" width="0.0160%" height="15" fill="rgb(208,217,32)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7671%" y="1077" width="0.0160%" height="15" fill="rgb(221,120,13)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7671%" y="1061" width="0.0160%" height="15" fill="rgb(246,54,52)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7671%" y="1045" width="0.0160%" height="15" fill="rgb(242,34,25)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7671%" y="1029" width="0.0160%" height="15" fill="rgb(247,209,9)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7671%" y="1013" width="0.0160%" height="15" fill="rgb(228,71,26)" fg:x="2295" fg:w="1"/><text x="37.0171%" y="1023.50"></text></g><g><title>node::BlockManager::FindUndoPos (3 samples, 0.05%)</title><rect x="36.7510%" y="1237" width="0.0481%" height="15" fill="rgb(222,145,49)" fg:x="2294" fg:w="3"/><text x="37.0010%" y="1247.50"></text></g><g><title>FlatFileSeq::Allocate (3 samples, 0.05%)</title><rect x="36.7510%" y="1221" width="0.0481%" height="15" fill="rgb(218,121,17)" fg:x="2294" fg:w="3"/><text x="37.0010%" y="1231.50"></text></g><g><title>FlatFileSeq::Open (2 samples, 0.03%)</title><rect x="36.7671%" y="1205" width="0.0320%" height="15" fill="rgb(244,50,7)" fg:x="2295" fg:w="2"/><text x="37.0171%" y="1215.50"></text></g><g><title>__fopen_internal (1 samples, 0.02%)</title><rect x="36.7831%" y="1189" width="0.0160%" height="15" fill="rgb(246,229,37)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1199.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="36.7831%" y="1173" width="0.0160%" height="15" fill="rgb(225,18,5)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1183.50"></text></g><g><title>_IO_file_open (1 samples, 0.02%)</title><rect x="36.7831%" y="1157" width="0.0160%" height="15" fill="rgb(213,204,8)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1167.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="36.7831%" y="1141" width="0.0160%" height="15" fill="rgb(238,103,6)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7831%" y="1125" width="0.0160%" height="15" fill="rgb(222,25,35)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7831%" y="1109" width="0.0160%" height="15" fill="rgb(213,203,35)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7831%" y="1093" width="0.0160%" height="15" fill="rgb(221,79,53)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7831%" y="1077" width="0.0160%" height="15" fill="rgb(243,200,35)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7831%" y="1061" width="0.0160%" height="15" fill="rgb(248,60,25)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7831%" y="1045" width="0.0160%" height="15" fill="rgb(227,53,46)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7831%" y="1029" width="0.0160%" height="15" fill="rgb(216,120,32)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7831%" y="1013" width="0.0160%" height="15" fill="rgb(220,134,1)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.7831%" y="997" width="0.0160%" height="15" fill="rgb(237,168,5)" fg:x="2296" fg:w="1"/><text x="37.0331%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.7991%" y="773" width="0.0160%" height="15" fill="rgb(231,100,33)" fg:x="2297" fg:w="1"/><text x="37.0491%" y="783.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.7991%" y="757" width="0.0160%" height="15" fill="rgb(236,177,47)" fg:x="2297" fg:w="1"/><text x="37.0491%" y="767.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (1 samples, 0.02%)</title><rect x="36.7991%" y="741" width="0.0160%" height="15" fill="rgb(235,7,49)" fg:x="2297" fg:w="1"/><text x="37.0491%" y="751.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="36.7991%" y="725" width="0.0160%" height="15" fill="rgb(232,119,22)" fg:x="2297" fg:w="1"/><text x="37.0491%" y="735.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="36.8151%" y="725" width="0.0160%" height="15" fill="rgb(254,73,53)" fg:x="2298" fg:w="1"/><text x="37.0651%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="36.8151%" y="709" width="0.0160%" height="15" fill="rgb(251,35,20)" fg:x="2298" fg:w="1"/><text x="37.0651%" y="719.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="36.8151%" y="693" width="0.0160%" height="15" fill="rgb(241,119,20)" fg:x="2298" fg:w="1"/><text x="37.0651%" y="703.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="36.8151%" y="677" width="0.0160%" height="15" fill="rgb(207,102,14)" fg:x="2298" fg:w="1"/><text x="37.0651%" y="687.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (3 samples, 0.05%)</title><rect x="36.7991%" y="1221" width="0.0481%" height="15" fill="rgb(248,201,50)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1205" width="0.0481%" height="15" fill="rgb(222,185,44)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1189" width="0.0481%" height="15" fill="rgb(218,107,18)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1173" width="0.0481%" height="15" fill="rgb(237,177,39)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1157" width="0.0481%" height="15" fill="rgb(246,69,6)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1141" width="0.0481%" height="15" fill="rgb(234,208,37)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1151.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1125" width="0.0481%" height="15" fill="rgb(225,4,6)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1109" width="0.0481%" height="15" fill="rgb(233,45,0)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1119.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1093" width="0.0481%" height="15" fill="rgb(226,136,5)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1077" width="0.0481%" height="15" fill="rgb(211,91,47)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1061" width="0.0481%" height="15" fill="rgb(242,88,51)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1045" width="0.0481%" height="15" fill="rgb(230,91,28)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1055.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1029" width="0.0481%" height="15" fill="rgb(254,186,29)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="1013" width="0.0481%" height="15" fill="rgb(238,6,4)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="997" width="0.0481%" height="15" fill="rgb(221,151,16)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="981" width="0.0481%" height="15" fill="rgb(251,143,52)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="965" width="0.0481%" height="15" fill="rgb(206,90,15)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="975.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="949" width="0.0481%" height="15" fill="rgb(218,35,8)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="959.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="933" width="0.0481%" height="15" fill="rgb(239,215,6)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="917" width="0.0481%" height="15" fill="rgb(245,116,39)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="901" width="0.0481%" height="15" fill="rgb(242,65,28)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="885" width="0.0481%" height="15" fill="rgb(252,132,53)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="895.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="869" width="0.0481%" height="15" fill="rgb(224,159,50)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="853" width="0.0481%" height="15" fill="rgb(224,93,4)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="837" width="0.0481%" height="15" fill="rgb(208,81,34)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="821" width="0.0481%" height="15" fill="rgb(233,92,54)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="805" width="0.0481%" height="15" fill="rgb(237,21,14)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="815.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="36.7991%" y="789" width="0.0481%" height="15" fill="rgb(249,128,51)" fg:x="2297" fg:w="3"/><text x="37.0491%" y="799.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="36.8151%" y="773" width="0.0320%" height="15" fill="rgb(223,129,24)" fg:x="2298" fg:w="2"/><text x="37.0651%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (2 samples, 0.03%)</title><rect x="36.8151%" y="757" width="0.0320%" height="15" fill="rgb(231,168,25)" fg:x="2298" fg:w="2"/><text x="37.0651%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (2 samples, 0.03%)</title><rect x="36.8151%" y="741" width="0.0320%" height="15" fill="rgb(224,39,20)" fg:x="2298" fg:w="2"/><text x="37.0651%" y="751.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (1 samples, 0.02%)</title><rect x="36.8311%" y="725" width="0.0160%" height="15" fill="rgb(225,152,53)" fg:x="2299" fg:w="1"/><text x="37.0811%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char&gt; (1 samples, 0.02%)</title><rect x="36.8311%" y="709" width="0.0160%" height="15" fill="rgb(252,17,24)" fg:x="2299" fg:w="1"/><text x="37.0811%" y="719.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="36.8311%" y="693" width="0.0160%" height="15" fill="rgb(250,114,30)" fg:x="2299" fg:w="1"/><text x="37.0811%" y="703.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="36.8311%" y="677" width="0.0160%" height="15" fill="rgb(229,5,4)" fg:x="2299" fg:w="1"/><text x="37.0811%" y="687.50"></text></g><g><title>AutoFile::~AutoFile (1 samples, 0.02%)</title><rect x="36.8472%" y="1221" width="0.0160%" height="15" fill="rgb(225,176,49)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1231.50"></text></g><g><title>AutoFile::fclose (1 samples, 0.02%)</title><rect x="36.8472%" y="1205" width="0.0160%" height="15" fill="rgb(224,221,49)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1215.50"></text></g><g><title>fclose@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="36.8472%" y="1189" width="0.0160%" height="15" fill="rgb(253,169,27)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1199.50"></text></g><g><title>_IO_file_close_it@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="36.8472%" y="1173" width="0.0160%" height="15" fill="rgb(211,206,16)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1183.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="36.8472%" y="1157" width="0.0160%" height="15" fill="rgb(244,87,35)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1167.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="36.8472%" y="1141" width="0.0160%" height="15" fill="rgb(246,28,10)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1151.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="36.8472%" y="1125" width="0.0160%" height="15" fill="rgb(229,12,44)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1135.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="36.8472%" y="1109" width="0.0160%" height="15" fill="rgb(210,145,37)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.8472%" y="1093" width="0.0160%" height="15" fill="rgb(227,112,52)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.8472%" y="1077" width="0.0160%" height="15" fill="rgb(238,155,34)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.8472%" y="1061" width="0.0160%" height="15" fill="rgb(239,226,36)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.8472%" y="1045" width="0.0160%" height="15" fill="rgb(230,16,23)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.8472%" y="1029" width="0.0160%" height="15" fill="rgb(236,171,36)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.8472%" y="1013" width="0.0160%" height="15" fill="rgb(221,22,14)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.8472%" y="997" width="0.0160%" height="15" fill="rgb(242,43,11)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.8472%" y="981" width="0.0160%" height="15" fill="rgb(232,69,23)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.8472%" y="965" width="0.0160%" height="15" fill="rgb(216,180,54)" fg:x="2300" fg:w="1"/><text x="37.0972%" y="975.50"></text></g><g><title>CSHA256::Write (4 samples, 0.06%)</title><rect x="36.8632%" y="613" width="0.0641%" height="15" fill="rgb(216,5,24)" fg:x="2301" fg:w="4"/><text x="37.1132%" y="623.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="36.9112%" y="597" width="0.0160%" height="15" fill="rgb(225,89,9)" fg:x="2304" fg:w="1"/><text x="37.1612%" y="607.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="36.9112%" y="581" width="0.0160%" height="15" fill="rgb(243,75,33)" fg:x="2304" fg:w="1"/><text x="37.1612%" y="591.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="36.9273%" y="613" width="0.0160%" height="15" fill="rgb(247,141,45)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="623.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="36.9273%" y="597" width="0.0160%" height="15" fill="rgb(232,177,36)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="581" width="0.0160%" height="15" fill="rgb(219,125,36)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="591.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="565" width="0.0160%" height="15" fill="rgb(227,94,9)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="575.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="549" width="0.0160%" height="15" fill="rgb(240,34,52)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="559.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="533" width="0.0160%" height="15" fill="rgb(216,45,12)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="517" width="0.0160%" height="15" fill="rgb(246,21,19)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="527.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="501" width="0.0160%" height="15" fill="rgb(213,98,42)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="485" width="0.0160%" height="15" fill="rgb(250,136,47)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="469" width="0.0160%" height="15" fill="rgb(251,124,27)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="453" width="0.0160%" height="15" fill="rgb(229,180,14)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="437" width="0.0160%" height="15" fill="rgb(245,216,25)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="421" width="0.0160%" height="15" fill="rgb(251,43,5)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="405" width="0.0160%" height="15" fill="rgb(250,128,24)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="415.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="389" width="0.0160%" height="15" fill="rgb(217,117,27)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="399.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="373" width="0.0160%" height="15" fill="rgb(245,147,4)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="383.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="357" width="0.0160%" height="15" fill="rgb(242,201,35)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="341" width="0.0160%" height="15" fill="rgb(218,181,1)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="351.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="325" width="0.0160%" height="15" fill="rgb(222,6,29)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="309" width="0.0160%" height="15" fill="rgb(208,186,3)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="319.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="293" width="0.0160%" height="15" fill="rgb(216,36,26)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="303.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="277" width="0.0160%" height="15" fill="rgb(248,201,23)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="287.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="261" width="0.0160%" height="15" fill="rgb(251,170,31)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="271.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="245" width="0.0160%" height="15" fill="rgb(207,110,25)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="255.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="229" width="0.0160%" height="15" fill="rgb(250,54,15)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="239.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="213" width="0.0160%" height="15" fill="rgb(227,68,33)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="223.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="197" width="0.0160%" height="15" fill="rgb(238,34,41)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="207.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="181" width="0.0160%" height="15" fill="rgb(220,11,15)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="191.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="165" width="0.0160%" height="15" fill="rgb(246,111,35)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="175.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="149" width="0.0160%" height="15" fill="rgb(209,88,53)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="159.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="133" width="0.0160%" height="15" fill="rgb(231,185,47)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="143.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="117" width="0.0160%" height="15" fill="rgb(233,154,1)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="127.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="36.9273%" y="101" width="0.0160%" height="15" fill="rgb(225,15,46)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="111.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="85" width="0.0160%" height="15" fill="rgb(211,135,41)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="95.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="69" width="0.0160%" height="15" fill="rgb(208,54,0)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="79.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="53" width="0.0160%" height="15" fill="rgb(244,136,14)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="63.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.9273%" y="37" width="0.0160%" height="15" fill="rgb(241,56,14)" fg:x="2305" fg:w="1"/><text x="37.1773%" y="47.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (6 samples, 0.10%)</title><rect x="36.8632%" y="725" width="0.0961%" height="15" fill="rgb(205,80,24)" fg:x="2301" fg:w="6"/><text x="37.1132%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="36.8632%" y="709" width="0.0961%" height="15" fill="rgb(220,57,4)" fg:x="2301" fg:w="6"/><text x="37.1132%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (6 samples, 0.10%)</title><rect x="36.8632%" y="693" width="0.0961%" height="15" fill="rgb(226,193,50)" fg:x="2301" fg:w="6"/><text x="37.1132%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (6 samples, 0.10%)</title><rect x="36.8632%" y="677" width="0.0961%" height="15" fill="rgb(231,168,22)" fg:x="2301" fg:w="6"/><text x="37.1132%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (6 samples, 0.10%)</title><rect x="36.8632%" y="661" width="0.0961%" height="15" fill="rgb(254,215,14)" fg:x="2301" fg:w="6"/><text x="37.1132%" y="671.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (6 samples, 0.10%)</title><rect x="36.8632%" y="645" width="0.0961%" height="15" fill="rgb(211,115,16)" fg:x="2301" fg:w="6"/><text x="37.1132%" y="655.50"></text></g><g><title>HashWriter::write (6 samples, 0.10%)</title><rect x="36.8632%" y="629" width="0.0961%" height="15" fill="rgb(236,210,16)" fg:x="2301" fg:w="6"/><text x="37.1132%" y="639.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="36.9433%" y="613" width="0.0160%" height="15" fill="rgb(221,94,12)" fg:x="2306" fg:w="1"/><text x="37.1933%" y="623.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="36.9433%" y="597" width="0.0160%" height="15" fill="rgb(235,218,49)" fg:x="2306" fg:w="1"/><text x="37.1933%" y="607.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="36.9433%" y="581" width="0.0160%" height="15" fill="rgb(217,114,14)" fg:x="2306" fg:w="1"/><text x="37.1933%" y="591.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (7 samples, 0.11%)</title><rect x="36.8632%" y="773" width="0.1121%" height="15" fill="rgb(216,145,22)" fg:x="2301" fg:w="7"/><text x="37.1132%" y="783.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (7 samples, 0.11%)</title><rect x="36.8632%" y="757" width="0.1121%" height="15" fill="rgb(217,112,39)" fg:x="2301" fg:w="7"/><text x="37.1132%" y="767.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (7 samples, 0.11%)</title><rect x="36.8632%" y="741" width="0.1121%" height="15" fill="rgb(225,85,32)" fg:x="2301" fg:w="7"/><text x="37.1132%" y="751.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="36.9593%" y="725" width="0.0160%" height="15" fill="rgb(245,209,47)" fg:x="2307" fg:w="1"/><text x="37.2093%" y="735.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="36.9753%" y="725" width="0.0160%" height="15" fill="rgb(218,220,15)" fg:x="2308" fg:w="1"/><text x="37.2253%" y="735.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="37.0394%" y="661" width="0.0320%" height="15" fill="rgb(222,202,31)" fg:x="2312" fg:w="2"/><text x="37.2894%" y="671.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (2 samples, 0.03%)</title><rect x="37.0715%" y="661" width="0.0320%" height="15" fill="rgb(243,203,4)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="671.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (2 samples, 0.03%)</title><rect x="37.0715%" y="645" width="0.0320%" height="15" fill="rgb(237,92,17)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="629" width="0.0320%" height="15" fill="rgb(231,119,7)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="639.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="613" width="0.0320%" height="15" fill="rgb(237,82,41)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="623.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="597" width="0.0320%" height="15" fill="rgb(226,81,48)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="607.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="581" width="0.0320%" height="15" fill="rgb(234,70,51)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="565" width="0.0320%" height="15" fill="rgb(251,86,4)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="575.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="549" width="0.0320%" height="15" fill="rgb(244,144,28)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="533" width="0.0320%" height="15" fill="rgb(232,161,39)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="517" width="0.0320%" height="15" fill="rgb(247,34,51)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="501" width="0.0320%" height="15" fill="rgb(225,132,2)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="485" width="0.0320%" height="15" fill="rgb(209,159,44)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="469" width="0.0320%" height="15" fill="rgb(251,214,1)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="479.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="453" width="0.0320%" height="15" fill="rgb(247,84,47)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="463.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="437" width="0.0320%" height="15" fill="rgb(240,111,43)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="447.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="421" width="0.0320%" height="15" fill="rgb(215,214,35)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="431.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="405" width="0.0320%" height="15" fill="rgb(248,207,23)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="389" width="0.0320%" height="15" fill="rgb(214,186,4)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="399.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="373" width="0.0320%" height="15" fill="rgb(220,133,22)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="383.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="357" width="0.0320%" height="15" fill="rgb(239,134,19)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="367.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="341" width="0.0320%" height="15" fill="rgb(250,140,9)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="351.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="325" width="0.0320%" height="15" fill="rgb(225,59,14)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="335.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="309" width="0.0320%" height="15" fill="rgb(214,152,51)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="319.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="293" width="0.0320%" height="15" fill="rgb(251,227,43)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="303.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="277" width="0.0320%" height="15" fill="rgb(241,96,17)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="287.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="261" width="0.0320%" height="15" fill="rgb(234,198,43)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="271.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="245" width="0.0320%" height="15" fill="rgb(220,108,29)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="255.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="229" width="0.0320%" height="15" fill="rgb(226,163,33)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="239.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="213" width="0.0320%" height="15" fill="rgb(205,194,45)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="223.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="197" width="0.0320%" height="15" fill="rgb(206,143,44)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="207.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="181" width="0.0320%" height="15" fill="rgb(236,136,36)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="191.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.0715%" y="165" width="0.0320%" height="15" fill="rgb(249,172,42)" fg:x="2314" fg:w="2"/><text x="37.3215%" y="175.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="37.0875%" y="149" width="0.0160%" height="15" fill="rgb(216,139,23)" fg:x="2315" fg:w="1"/><text x="37.3375%" y="159.50"></text></g><g><title>CSHA256::Write (8 samples, 0.13%)</title><rect x="36.9913%" y="677" width="0.1282%" height="15" fill="rgb(207,166,20)" fg:x="2309" fg:w="8"/><text x="37.2413%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.1035%" y="661" width="0.0160%" height="15" fill="rgb(210,209,22)" fg:x="2316" fg:w="1"/><text x="37.3535%" y="671.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (2 samples, 0.03%)</title><rect x="37.1195%" y="677" width="0.0320%" height="15" fill="rgb(232,118,20)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="687.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (2 samples, 0.03%)</title><rect x="37.1195%" y="661" width="0.0320%" height="15" fill="rgb(238,113,42)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="645" width="0.0320%" height="15" fill="rgb(231,42,5)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="655.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="629" width="0.0320%" height="15" fill="rgb(243,166,24)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="639.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="613" width="0.0320%" height="15" fill="rgb(237,226,12)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="623.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="597" width="0.0320%" height="15" fill="rgb(229,133,24)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="581" width="0.0320%" height="15" fill="rgb(238,33,43)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="591.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="565" width="0.0320%" height="15" fill="rgb(227,59,38)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="575.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="549" width="0.0320%" height="15" fill="rgb(230,97,0)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="533" width="0.0320%" height="15" fill="rgb(250,173,50)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="517" width="0.0320%" height="15" fill="rgb(240,15,50)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="501" width="0.0320%" height="15" fill="rgb(221,93,22)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="485" width="0.0320%" height="15" fill="rgb(245,180,53)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="469" width="0.0320%" height="15" fill="rgb(231,88,51)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="479.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="453" width="0.0320%" height="15" fill="rgb(240,58,21)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="463.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="437" width="0.0320%" height="15" fill="rgb(237,21,10)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="447.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="421" width="0.0320%" height="15" fill="rgb(218,43,11)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="405" width="0.0320%" height="15" fill="rgb(218,221,29)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="415.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="389" width="0.0320%" height="15" fill="rgb(214,118,42)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="399.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="373" width="0.0320%" height="15" fill="rgb(251,200,26)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="383.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="357" width="0.0320%" height="15" fill="rgb(237,101,39)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="367.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="341" width="0.0320%" height="15" fill="rgb(251,117,11)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="351.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="325" width="0.0320%" height="15" fill="rgb(216,223,23)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="309" width="0.0320%" height="15" fill="rgb(251,54,12)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="319.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="293" width="0.0320%" height="15" fill="rgb(254,176,54)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="303.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="277" width="0.0320%" height="15" fill="rgb(210,32,8)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="287.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="261" width="0.0320%" height="15" fill="rgb(235,52,38)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="271.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="245" width="0.0320%" height="15" fill="rgb(231,4,44)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="255.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="229" width="0.0320%" height="15" fill="rgb(249,2,32)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="239.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="213" width="0.0320%" height="15" fill="rgb(224,65,26)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="223.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="197" width="0.0320%" height="15" fill="rgb(250,73,40)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="207.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="181" width="0.0320%" height="15" fill="rgb(253,177,16)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="191.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (2 samples, 0.03%)</title><rect x="37.1195%" y="165" width="0.0320%" height="15" fill="rgb(217,32,34)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="175.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="149" width="0.0320%" height="15" fill="rgb(212,7,10)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="159.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="133" width="0.0320%" height="15" fill="rgb(245,89,8)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="143.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="117" width="0.0320%" height="15" fill="rgb(237,16,53)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="127.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (2 samples, 0.03%)</title><rect x="37.1195%" y="101" width="0.0320%" height="15" fill="rgb(250,204,30)" fg:x="2317" fg:w="2"/><text x="37.3695%" y="111.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.1355%" y="85" width="0.0160%" height="15" fill="rgb(208,77,27)" fg:x="2318" fg:w="1"/><text x="37.3855%" y="95.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="37.1355%" y="69" width="0.0160%" height="15" fill="rgb(250,204,28)" fg:x="2318" fg:w="1"/><text x="37.3855%" y="79.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (11 samples, 0.18%)</title><rect x="36.9913%" y="725" width="0.1762%" height="15" fill="rgb(244,63,21)" fg:x="2309" fg:w="11"/><text x="37.2413%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (11 samples, 0.18%)</title><rect x="36.9913%" y="709" width="0.1762%" height="15" fill="rgb(236,85,44)" fg:x="2309" fg:w="11"/><text x="37.2413%" y="719.50"></text></g><g><title>HashWriter::write (11 samples, 0.18%)</title><rect x="36.9913%" y="693" width="0.1762%" height="15" fill="rgb(215,98,4)" fg:x="2309" fg:w="11"/><text x="37.2413%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="37.1516%" y="677" width="0.0160%" height="15" fill="rgb(235,38,11)" fg:x="2319" fg:w="1"/><text x="37.4016%" y="687.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="37.1516%" y="661" width="0.0160%" height="15" fill="rgb(254,186,25)" fg:x="2319" fg:w="1"/><text x="37.4016%" y="671.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="37.1516%" y="645" width="0.0160%" height="15" fill="rgb(225,55,31)" fg:x="2319" fg:w="1"/><text x="37.4016%" y="655.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="37.1516%" y="629" width="0.0160%" height="15" fill="rgb(211,15,21)" fg:x="2319" fg:w="1"/><text x="37.4016%" y="639.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (1 samples, 0.02%)</title><rect x="37.1676%" y="725" width="0.0160%" height="15" fill="rgb(215,187,41)" fg:x="2320" fg:w="1"/><text x="37.4176%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char&gt; (1 samples, 0.02%)</title><rect x="37.1676%" y="709" width="0.0160%" height="15" fill="rgb(248,69,32)" fg:x="2320" fg:w="1"/><text x="37.4176%" y="719.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="37.1676%" y="693" width="0.0160%" height="15" fill="rgb(252,102,52)" fg:x="2320" fg:w="1"/><text x="37.4176%" y="703.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.1676%" y="677" width="0.0160%" height="15" fill="rgb(253,140,32)" fg:x="2320" fg:w="1"/><text x="37.4176%" y="687.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="37.1676%" y="661" width="0.0160%" height="15" fill="rgb(216,56,42)" fg:x="2320" fg:w="1"/><text x="37.4176%" y="671.50"></text></g><g><title>memset@plt (1 samples, 0.02%)</title><rect x="37.1676%" y="645" width="0.0160%" height="15" fill="rgb(216,184,14)" fg:x="2320" fg:w="1"/><text x="37.4176%" y="655.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.1836%" y="661" width="0.0160%" height="15" fill="rgb(237,187,27)" fg:x="2321" fg:w="1"/><text x="37.4336%" y="671.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.1836%" y="645" width="0.0160%" height="15" fill="rgb(219,65,3)" fg:x="2321" fg:w="1"/><text x="37.4336%" y="655.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="37.1996%" y="661" width="0.0160%" height="15" fill="rgb(245,83,25)" fg:x="2322" fg:w="1"/><text x="37.4496%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (25 samples, 0.40%)</title><rect x="36.8632%" y="869" width="0.4005%" height="15" fill="rgb(214,205,45)" fg:x="2301" fg:w="25"/><text x="37.1132%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (25 samples, 0.40%)</title><rect x="36.8632%" y="853" width="0.4005%" height="15" fill="rgb(241,20,18)" fg:x="2301" fg:w="25"/><text x="37.1132%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (25 samples, 0.40%)</title><rect x="36.8632%" y="837" width="0.4005%" height="15" fill="rgb(232,163,23)" fg:x="2301" fg:w="25"/><text x="37.1132%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (25 samples, 0.40%)</title><rect x="36.8632%" y="821" width="0.4005%" height="15" fill="rgb(214,5,46)" fg:x="2301" fg:w="25"/><text x="37.1132%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (25 samples, 0.40%)</title><rect x="36.8632%" y="805" width="0.4005%" height="15" fill="rgb(229,78,17)" fg:x="2301" fg:w="25"/><text x="37.1132%" y="815.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (25 samples, 0.40%)</title><rect x="36.8632%" y="789" width="0.4005%" height="15" fill="rgb(248,89,10)" fg:x="2301" fg:w="25"/><text x="37.1132%" y="799.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (18 samples, 0.29%)</title><rect x="36.9753%" y="773" width="0.2884%" height="15" fill="rgb(248,54,15)" fg:x="2308" fg:w="18"/><text x="37.2253%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (18 samples, 0.29%)</title><rect x="36.9753%" y="757" width="0.2884%" height="15" fill="rgb(223,116,6)" fg:x="2308" fg:w="18"/><text x="37.2253%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (18 samples, 0.29%)</title><rect x="36.9753%" y="741" width="0.2884%" height="15" fill="rgb(205,125,38)" fg:x="2308" fg:w="18"/><text x="37.2253%" y="751.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (5 samples, 0.08%)</title><rect x="37.1836%" y="725" width="0.0801%" height="15" fill="rgb(251,78,38)" fg:x="2321" fg:w="5"/><text x="37.4336%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.1836%" y="709" width="0.0801%" height="15" fill="rgb(253,78,28)" fg:x="2321" fg:w="5"/><text x="37.4336%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (5 samples, 0.08%)</title><rect x="37.1836%" y="693" width="0.0801%" height="15" fill="rgb(209,120,3)" fg:x="2321" fg:w="5"/><text x="37.4336%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (5 samples, 0.08%)</title><rect x="37.1836%" y="677" width="0.0801%" height="15" fill="rgb(238,229,9)" fg:x="2321" fg:w="5"/><text x="37.4336%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (3 samples, 0.05%)</title><rect x="37.2156%" y="661" width="0.0481%" height="15" fill="rgb(253,159,18)" fg:x="2323" fg:w="3"/><text x="37.4656%" y="671.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.2156%" y="645" width="0.0481%" height="15" fill="rgb(244,42,34)" fg:x="2323" fg:w="3"/><text x="37.4656%" y="655.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="37.2156%" y="629" width="0.0481%" height="15" fill="rgb(224,8,7)" fg:x="2323" fg:w="3"/><text x="37.4656%" y="639.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="37.2156%" y="613" width="0.0481%" height="15" fill="rgb(210,201,45)" fg:x="2323" fg:w="3"/><text x="37.4656%" y="623.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.2477%" y="597" width="0.0160%" height="15" fill="rgb(252,185,21)" fg:x="2325" fg:w="1"/><text x="37.4977%" y="607.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.3118%" y="757" width="0.0160%" height="15" fill="rgb(223,131,1)" fg:x="2329" fg:w="1"/><text x="37.5618%" y="767.50"></text></g><g><title>CSHA256::Write (4 samples, 0.06%)</title><rect x="37.2797%" y="773" width="0.0641%" height="15" fill="rgb(245,141,16)" fg:x="2327" fg:w="4"/><text x="37.5297%" y="783.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="37.3278%" y="757" width="0.0160%" height="15" fill="rgb(229,55,45)" fg:x="2330" fg:w="1"/><text x="37.5778%" y="767.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="37.3438%" y="773" width="0.0160%" height="15" fill="rgb(208,92,15)" fg:x="2331" fg:w="1"/><text x="37.5938%" y="783.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="37.3598%" y="757" width="0.0160%" height="15" fill="rgb(234,185,47)" fg:x="2332" fg:w="1"/><text x="37.6098%" y="767.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="37.3598%" y="741" width="0.0160%" height="15" fill="rgb(253,104,50)" fg:x="2332" fg:w="1"/><text x="37.6098%" y="751.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="37.3758%" y="741" width="0.0160%" height="15" fill="rgb(205,70,7)" fg:x="2333" fg:w="1"/><text x="37.6258%" y="751.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="37.3758%" y="725" width="0.0160%" height="15" fill="rgb(240,178,43)" fg:x="2333" fg:w="1"/><text x="37.6258%" y="735.50"></text></g><g><title>ShiftMessageB (2 samples, 0.03%)</title><rect x="37.3758%" y="757" width="0.0320%" height="15" fill="rgb(214,112,2)" fg:x="2333" fg:w="2"/><text x="37.6258%" y="767.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="37.3919%" y="741" width="0.0160%" height="15" fill="rgb(206,46,17)" fg:x="2334" fg:w="1"/><text x="37.6419%" y="751.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="37.3919%" y="725" width="0.0160%" height="15" fill="rgb(225,220,16)" fg:x="2334" fg:w="1"/><text x="37.6419%" y="735.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="37.4079%" y="757" width="0.0160%" height="15" fill="rgb(238,65,40)" fg:x="2335" fg:w="1"/><text x="37.6579%" y="767.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="37.4079%" y="741" width="0.0160%" height="15" fill="rgb(230,151,21)" fg:x="2335" fg:w="1"/><text x="37.6579%" y="751.50"></text></g><g><title>sha256_x86_shani::Transform (5 samples, 0.08%)</title><rect x="37.3598%" y="773" width="0.0801%" height="15" fill="rgb(218,58,49)" fg:x="2332" fg:w="5"/><text x="37.6098%" y="783.50"></text></g><g><title>Unshuffle (1 samples, 0.02%)</title><rect x="37.4239%" y="757" width="0.0160%" height="15" fill="rgb(219,179,14)" fg:x="2336" fg:w="1"/><text x="37.6739%" y="767.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="37.4239%" y="741" width="0.0160%" height="15" fill="rgb(223,72,1)" fg:x="2336" fg:w="1"/><text x="37.6739%" y="751.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (12 samples, 0.19%)</title><rect x="37.2637%" y="869" width="0.1922%" height="15" fill="rgb(238,126,10)" fg:x="2326" fg:w="12"/><text x="37.5137%" y="879.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (12 samples, 0.19%)</title><rect x="37.2637%" y="853" width="0.1922%" height="15" fill="rgb(224,206,38)" fg:x="2326" fg:w="12"/><text x="37.5137%" y="863.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (12 samples, 0.19%)</title><rect x="37.2637%" y="837" width="0.1922%" height="15" fill="rgb(212,201,54)" fg:x="2326" fg:w="12"/><text x="37.5137%" y="847.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (12 samples, 0.19%)</title><rect x="37.2637%" y="821" width="0.1922%" height="15" fill="rgb(218,154,48)" fg:x="2326" fg:w="12"/><text x="37.5137%" y="831.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (11 samples, 0.18%)</title><rect x="37.2797%" y="805" width="0.1762%" height="15" fill="rgb(232,93,24)" fg:x="2327" fg:w="11"/><text x="37.5297%" y="815.50"></text></g><g><title>HashWriter::write (11 samples, 0.18%)</title><rect x="37.2797%" y="789" width="0.1762%" height="15" fill="rgb(245,30,21)" fg:x="2327" fg:w="11"/><text x="37.5297%" y="799.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.4399%" y="773" width="0.0160%" height="15" fill="rgb(242,148,29)" fg:x="2337" fg:w="1"/><text x="37.6899%" y="783.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.4399%" y="757" width="0.0160%" height="15" fill="rgb(244,153,54)" fg:x="2337" fg:w="1"/><text x="37.6899%" y="767.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="37.4399%" y="741" width="0.0160%" height="15" fill="rgb(252,87,22)" fg:x="2337" fg:w="1"/><text x="37.6899%" y="751.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.4559%" y="821" width="0.0160%" height="15" fill="rgb(210,51,29)" fg:x="2338" fg:w="1"/><text x="37.7059%" y="831.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="37.4720%" y="805" width="0.0160%" height="15" fill="rgb(242,136,47)" fg:x="2339" fg:w="1"/><text x="37.7220%" y="815.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="37.4720%" y="789" width="0.0160%" height="15" fill="rgb(238,68,4)" fg:x="2339" fg:w="1"/><text x="37.7220%" y="799.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="37.4720%" y="821" width="0.0320%" height="15" fill="rgb(242,161,30)" fg:x="2339" fg:w="2"/><text x="37.7220%" y="831.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="37.4880%" y="805" width="0.0160%" height="15" fill="rgb(218,58,44)" fg:x="2340" fg:w="1"/><text x="37.7380%" y="815.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="37.4880%" y="789" width="0.0160%" height="15" fill="rgb(252,125,32)" fg:x="2340" fg:w="1"/><text x="37.7380%" y="799.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="37.4880%" y="773" width="0.0160%" height="15" fill="rgb(219,178,0)" fg:x="2340" fg:w="1"/><text x="37.7380%" y="783.50"></text></g><g><title>void WriteCompactSize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.5040%" y="821" width="0.0160%" height="15" fill="rgb(213,152,7)" fg:x="2341" fg:w="1"/><text x="37.7540%" y="831.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (42 samples, 0.67%)</title><rect x="36.8632%" y="885" width="0.6729%" height="15" fill="rgb(249,109,34)" fg:x="2301" fg:w="42"/><text x="37.1132%" y="895.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (5 samples, 0.08%)</title><rect x="37.4559%" y="869" width="0.0801%" height="15" fill="rgb(232,96,21)" fg:x="2338" fg:w="5"/><text x="37.7059%" y="879.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (5 samples, 0.08%)</title><rect x="37.4559%" y="853" width="0.0801%" height="15" fill="rgb(228,27,39)" fg:x="2338" fg:w="5"/><text x="37.7059%" y="863.50"></text></g><g><title>HashWriter::write (5 samples, 0.08%)</title><rect x="37.4559%" y="837" width="0.0801%" height="15" fill="rgb(211,182,52)" fg:x="2338" fg:w="5"/><text x="37.7059%" y="847.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.5200%" y="821" width="0.0160%" height="15" fill="rgb(234,178,38)" fg:x="2342" fg:w="1"/><text x="37.7700%" y="831.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (43 samples, 0.69%)</title><rect x="36.8632%" y="1221" width="0.6889%" height="15" fill="rgb(221,111,3)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1231.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1205" width="0.6889%" height="15" fill="rgb(228,175,21)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1189" width="0.6889%" height="15" fill="rgb(228,174,43)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1173" width="0.6889%" height="15" fill="rgb(211,191,0)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1157" width="0.6889%" height="15" fill="rgb(253,117,3)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1141" width="0.6889%" height="15" fill="rgb(241,127,19)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1151.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1125" width="0.6889%" height="15" fill="rgb(218,103,12)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1135.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1109" width="0.6889%" height="15" fill="rgb(236,214,43)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1119.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1093" width="0.6889%" height="15" fill="rgb(244,144,19)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1077" width="0.6889%" height="15" fill="rgb(246,188,10)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1061" width="0.6889%" height="15" fill="rgb(212,193,33)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1045" width="0.6889%" height="15" fill="rgb(241,51,29)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1055.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1029" width="0.6889%" height="15" fill="rgb(211,58,19)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="1013" width="0.6889%" height="15" fill="rgb(229,111,26)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="997" width="0.6889%" height="15" fill="rgb(213,115,40)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="981" width="0.6889%" height="15" fill="rgb(209,56,44)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="965" width="0.6889%" height="15" fill="rgb(230,108,32)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="975.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="949" width="0.6889%" height="15" fill="rgb(216,165,31)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="959.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="933" width="0.6889%" height="15" fill="rgb(218,122,21)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="917" width="0.6889%" height="15" fill="rgb(223,224,47)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (43 samples, 0.69%)</title><rect x="36.8632%" y="901" width="0.6889%" height="15" fill="rgb(238,102,44)" fg:x="2301" fg:w="43"/><text x="37.1132%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.5360%" y="885" width="0.0160%" height="15" fill="rgb(236,46,40)" fg:x="2343" fg:w="1"/><text x="37.7860%" y="895.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.5360%" y="869" width="0.0160%" height="15" fill="rgb(247,202,50)" fg:x="2343" fg:w="1"/><text x="37.7860%" y="879.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="37.5360%" y="853" width="0.0160%" height="15" fill="rgb(209,99,20)" fg:x="2343" fg:w="1"/><text x="37.7860%" y="863.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.5360%" y="837" width="0.0160%" height="15" fill="rgb(252,27,34)" fg:x="2343" fg:w="1"/><text x="37.7860%" y="847.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.5360%" y="821" width="0.0160%" height="15" fill="rgb(215,206,23)" fg:x="2343" fg:w="1"/><text x="37.7860%" y="831.50"></text></g><g><title>node::BlockManager::OpenUndoFile (1 samples, 0.02%)</title><rect x="37.5521%" y="1221" width="0.0160%" height="15" fill="rgb(212,135,36)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1231.50"></text></g><g><title>FlatFileSeq::Open (1 samples, 0.02%)</title><rect x="37.5521%" y="1205" width="0.0160%" height="15" fill="rgb(240,189,1)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1215.50"></text></g><g><title>__fopen_internal (1 samples, 0.02%)</title><rect x="37.5521%" y="1189" width="0.0160%" height="15" fill="rgb(242,56,20)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1199.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="37.5521%" y="1173" width="0.0160%" height="15" fill="rgb(247,132,33)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1183.50"></text></g><g><title>_IO_file_open (1 samples, 0.02%)</title><rect x="37.5521%" y="1157" width="0.0160%" height="15" fill="rgb(208,149,11)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1167.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="37.5521%" y="1141" width="0.0160%" height="15" fill="rgb(211,33,11)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.5521%" y="1125" width="0.0160%" height="15" fill="rgb(221,29,38)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.5521%" y="1109" width="0.0160%" height="15" fill="rgb(206,182,49)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.5521%" y="1093" width="0.0160%" height="15" fill="rgb(216,140,1)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.5521%" y="1077" width="0.0160%" height="15" fill="rgb(232,57,40)" fg:x="2344" fg:w="1"/><text x="37.8021%" y="1087.50"></text></g><g><title>WriteCompactSize (1 samples, 0.02%)</title><rect x="37.5841%" y="869" width="0.0160%" height="15" fill="rgb(224,186,18)" fg:x="2346" fg:w="1"/><text x="37.8341%" y="879.50"></text></g><g><title>GetSizeOfCompactSize (1 samples, 0.02%)</title><rect x="37.5841%" y="853" width="0.0160%" height="15" fill="rgb(215,121,11)" fg:x="2346" fg:w="1"/><text x="37.8341%" y="863.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="37.6001%" y="709" width="0.0160%" height="15" fill="rgb(245,147,10)" fg:x="2347" fg:w="1"/><text x="37.8501%" y="719.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="37.6001%" y="693" width="0.0160%" height="15" fill="rgb(238,153,13)" fg:x="2347" fg:w="1"/><text x="37.8501%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.6001%" y="853" width="0.0320%" height="15" fill="rgb(233,108,0)" fg:x="2347" fg:w="2"/><text x="37.8501%" y="863.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.6001%" y="837" width="0.0320%" height="15" fill="rgb(212,157,17)" fg:x="2347" fg:w="2"/><text x="37.8501%" y="847.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.6001%" y="821" width="0.0320%" height="15" fill="rgb(225,213,38)" fg:x="2347" fg:w="2"/><text x="37.8501%" y="831.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.6001%" y="805" width="0.0320%" height="15" fill="rgb(248,16,11)" fg:x="2347" fg:w="2"/><text x="37.8501%" y="815.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.6001%" y="789" width="0.0320%" height="15" fill="rgb(241,33,4)" fg:x="2347" fg:w="2"/><text x="37.8501%" y="799.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.6001%" y="773" width="0.0320%" height="15" fill="rgb(222,26,43)" fg:x="2347" fg:w="2"/><text x="37.8501%" y="783.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.6001%" y="757" width="0.0320%" height="15" fill="rgb(243,29,36)" fg:x="2347" fg:w="2"/><text x="37.8501%" y="767.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.6001%" y="741" width="0.0320%" height="15" fill="rgb(241,9,27)" fg:x="2347" fg:w="2"/><text x="37.8501%" y="751.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.6001%" y="725" width="0.0320%" height="15" fill="rgb(205,117,26)" fg:x="2347" fg:w="2"/><text x="37.8501%" y="735.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="37.6161%" y="709" width="0.0160%" height="15" fill="rgb(209,80,39)" fg:x="2348" fg:w="1"/><text x="37.8661%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.6161%" y="693" width="0.0160%" height="15" fill="rgb(239,155,6)" fg:x="2348" fg:w="1"/><text x="37.8661%" y="703.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.6161%" y="677" width="0.0160%" height="15" fill="rgb(212,104,12)" fg:x="2348" fg:w="1"/><text x="37.8661%" y="687.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.6161%" y="661" width="0.0160%" height="15" fill="rgb(234,204,3)" fg:x="2348" fg:w="1"/><text x="37.8661%" y="671.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.6161%" y="645" width="0.0160%" height="15" fill="rgb(251,218,7)" fg:x="2348" fg:w="1"/><text x="37.8661%" y="655.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (53 samples, 0.85%)</title><rect x="36.7991%" y="1237" width="0.8491%" height="15" fill="rgb(221,81,32)" fg:x="2297" fg:w="53"/><text x="37.0491%" y="1247.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1221" width="0.0801%" height="15" fill="rgb(214,152,26)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1231.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (5 samples, 0.08%)</title><rect x="37.5681%" y="1205" width="0.0801%" height="15" fill="rgb(223,22,3)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1215.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1189" width="0.0801%" height="15" fill="rgb(207,174,7)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1199.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1173" width="0.0801%" height="15" fill="rgb(224,19,52)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1183.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1157" width="0.0801%" height="15" fill="rgb(228,24,14)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1167.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1141" width="0.0801%" height="15" fill="rgb(230,153,43)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1125" width="0.0801%" height="15" fill="rgb(231,106,12)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1135.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1109" width="0.0801%" height="15" fill="rgb(215,92,2)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1093" width="0.0801%" height="15" fill="rgb(249,143,25)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1103.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1077" width="0.0801%" height="15" fill="rgb(252,7,35)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1087.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1061" width="0.0801%" height="15" fill="rgb(216,69,40)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1071.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="37.5681%" y="1045" width="0.0801%" height="15" fill="rgb(240,36,33)" fg:x="2345" fg:w="5"/><text x="37.8181%" y="1055.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="1029" width="0.0641%" height="15" fill="rgb(231,128,14)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="1013" width="0.0641%" height="15" fill="rgb(245,143,14)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="1023.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="997" width="0.0641%" height="15" fill="rgb(222,130,28)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="1007.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="981" width="0.0641%" height="15" fill="rgb(212,10,48)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="991.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="965" width="0.0641%" height="15" fill="rgb(254,118,45)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="975.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="949" width="0.0641%" height="15" fill="rgb(228,6,45)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="959.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="933" width="0.0641%" height="15" fill="rgb(241,18,35)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="943.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="917" width="0.0641%" height="15" fill="rgb(227,214,53)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="927.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="901" width="0.0641%" height="15" fill="rgb(224,107,51)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="911.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="37.5841%" y="885" width="0.0641%" height="15" fill="rgb(248,60,28)" fg:x="2346" fg:w="4"/><text x="37.8341%" y="895.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (3 samples, 0.05%)</title><rect x="37.6001%" y="869" width="0.0481%" height="15" fill="rgb(249,101,23)" fg:x="2347" fg:w="3"/><text x="37.8501%" y="879.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.6322%" y="853" width="0.0160%" height="15" fill="rgb(228,51,19)" fg:x="2349" fg:w="1"/><text x="37.8822%" y="863.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.6322%" y="837" width="0.0160%" height="15" fill="rgb(213,20,6)" fg:x="2349" fg:w="1"/><text x="37.8822%" y="847.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.6322%" y="821" width="0.0160%" height="15" fill="rgb(212,124,10)" fg:x="2349" fg:w="1"/><text x="37.8822%" y="831.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.6322%" y="805" width="0.0160%" height="15" fill="rgb(248,3,40)" fg:x="2349" fg:w="1"/><text x="37.8822%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="37.6482%" y="1237" width="0.0320%" height="15" fill="rgb(223,178,23)" fg:x="2350" fg:w="2"/><text x="37.8982%" y="1247.50"></text></g><g><title>ShiftMessageB (2 samples, 0.03%)</title><rect x="37.6482%" y="1221" width="0.0320%" height="15" fill="rgb(240,132,45)" fg:x="2350" fg:w="2"/><text x="37.8982%" y="1231.50"></text></g><g><title>ShiftMessageC (2 samples, 0.03%)</title><rect x="37.6482%" y="1205" width="0.0320%" height="15" fill="rgb(245,164,36)" fg:x="2350" fg:w="2"/><text x="37.8982%" y="1215.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="37.6482%" y="1189" width="0.0320%" height="15" fill="rgb(231,188,53)" fg:x="2350" fg:w="2"/><text x="37.8982%" y="1199.50"></text></g><g><title>CompressAmount (2 samples, 0.03%)</title><rect x="37.6802%" y="1061" width="0.0320%" height="15" fill="rgb(237,198,39)" fg:x="2352" fg:w="2"/><text x="37.9302%" y="1071.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.7443%" y="533" width="0.0160%" height="15" fill="rgb(223,120,35)" fg:x="2356" fg:w="1"/><text x="37.9943%" y="543.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.7443%" y="517" width="0.0160%" height="15" fill="rgb(253,107,49)" fg:x="2356" fg:w="1"/><text x="37.9943%" y="527.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.7443%" y="501" width="0.0160%" height="15" fill="rgb(216,44,31)" fg:x="2356" fg:w="1"/><text x="37.9943%" y="511.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="37.7443%" y="485" width="0.0160%" height="15" fill="rgb(253,87,21)" fg:x="2356" fg:w="1"/><text x="37.9943%" y="495.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.7443%" y="469" width="0.0160%" height="15" fill="rgb(226,18,2)" fg:x="2356" fg:w="1"/><text x="37.9943%" y="479.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.7443%" y="453" width="0.0160%" height="15" fill="rgb(216,8,46)" fg:x="2356" fg:w="1"/><text x="37.9943%" y="463.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.7443%" y="437" width="0.0160%" height="15" fill="rgb(226,140,39)" fg:x="2356" fg:w="1"/><text x="37.9943%" y="447.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.7443%" y="421" width="0.0160%" height="15" fill="rgb(221,194,54)" fg:x="2356" fg:w="1"/><text x="37.9943%" y="431.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.7443%" y="405" width="0.0160%" height="15" fill="rgb(213,92,11)" fg:x="2356" fg:w="1"/><text x="37.9943%" y="415.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="773" width="0.0320%" height="15" fill="rgb(229,162,46)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="783.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="757" width="0.0320%" height="15" fill="rgb(214,111,36)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="767.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="741" width="0.0320%" height="15" fill="rgb(207,6,21)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="725" width="0.0320%" height="15" fill="rgb(213,127,38)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="709" width="0.0320%" height="15" fill="rgb(238,118,32)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="693" width="0.0320%" height="15" fill="rgb(240,139,39)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="703.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="677" width="0.0320%" height="15" fill="rgb(235,10,37)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="687.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="661" width="0.0320%" height="15" fill="rgb(249,171,38)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="671.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="645" width="0.0320%" height="15" fill="rgb(242,144,32)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="629" width="0.0320%" height="15" fill="rgb(217,117,21)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="639.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="613" width="0.0320%" height="15" fill="rgb(249,87,1)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="623.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="597" width="0.0320%" height="15" fill="rgb(248,196,48)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="581" width="0.0320%" height="15" fill="rgb(251,206,33)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="591.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="565" width="0.0320%" height="15" fill="rgb(232,141,28)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="575.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.7443%" y="549" width="0.0320%" height="15" fill="rgb(209,167,14)" fg:x="2356" fg:w="2"/><text x="37.9943%" y="559.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.7603%" y="533" width="0.0160%" height="15" fill="rgb(225,11,50)" fg:x="2357" fg:w="1"/><text x="38.0103%" y="543.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.7603%" y="517" width="0.0160%" height="15" fill="rgb(209,50,20)" fg:x="2357" fg:w="1"/><text x="38.0103%" y="527.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.7603%" y="501" width="0.0160%" height="15" fill="rgb(212,17,46)" fg:x="2357" fg:w="1"/><text x="38.0103%" y="511.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.7603%" y="485" width="0.0160%" height="15" fill="rgb(216,101,39)" fg:x="2357" fg:w="1"/><text x="38.0103%" y="495.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.7443%" y="869" width="0.0481%" height="15" fill="rgb(212,228,48)" fg:x="2356" fg:w="3"/><text x="37.9943%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (3 samples, 0.05%)</title><rect x="37.7443%" y="853" width="0.0481%" height="15" fill="rgb(250,6,50)" fg:x="2356" fg:w="3"/><text x="37.9943%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (3 samples, 0.05%)</title><rect x="37.7443%" y="837" width="0.0481%" height="15" fill="rgb(250,160,48)" fg:x="2356" fg:w="3"/><text x="37.9943%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="37.7443%" y="821" width="0.0481%" height="15" fill="rgb(244,216,33)" fg:x="2356" fg:w="3"/><text x="37.9943%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.7443%" y="805" width="0.0481%" height="15" fill="rgb(207,157,5)" fg:x="2356" fg:w="3"/><text x="37.9943%" y="815.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.7443%" y="789" width="0.0481%" height="15" fill="rgb(228,199,8)" fg:x="2356" fg:w="3"/><text x="37.9943%" y="799.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.7764%" y="773" width="0.0160%" height="15" fill="rgb(227,80,20)" fg:x="2358" fg:w="1"/><text x="38.0264%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.7764%" y="757" width="0.0160%" height="15" fill="rgb(222,9,33)" fg:x="2358" fg:w="1"/><text x="38.0264%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.7764%" y="741" width="0.0160%" height="15" fill="rgb(239,44,28)" fg:x="2358" fg:w="1"/><text x="38.0264%" y="751.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="37.7764%" y="725" width="0.0160%" height="15" fill="rgb(249,187,43)" fg:x="2358" fg:w="1"/><text x="38.0264%" y="735.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1237" width="0.1282%" height="15" fill="rgb(216,141,28)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1247.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (8 samples, 0.13%)</title><rect x="37.6802%" y="1221" width="0.1282%" height="15" fill="rgb(230,154,53)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1231.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1205" width="0.1282%" height="15" fill="rgb(227,82,4)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1189" width="0.1282%" height="15" fill="rgb(220,107,16)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1173" width="0.1282%" height="15" fill="rgb(207,187,2)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1157" width="0.1282%" height="15" fill="rgb(210,162,52)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1141" width="0.1282%" height="15" fill="rgb(217,216,49)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1151.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1125" width="0.1282%" height="15" fill="rgb(218,146,49)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1135.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1109" width="0.1282%" height="15" fill="rgb(216,55,40)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1093" width="0.1282%" height="15" fill="rgb(208,196,21)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.13%)</title><rect x="37.6802%" y="1077" width="0.1282%" height="15" fill="rgb(242,117,42)" fg:x="2352" fg:w="8"/><text x="37.9302%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="37.7123%" y="1061" width="0.0961%" height="15" fill="rgb(210,11,23)" fg:x="2354" fg:w="6"/><text x="37.9623%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="1045" width="0.0801%" height="15" fill="rgb(217,110,2)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="1055.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="1029" width="0.0801%" height="15" fill="rgb(229,77,54)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="1013" width="0.0801%" height="15" fill="rgb(218,53,16)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="997" width="0.0801%" height="15" fill="rgb(215,38,13)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="981" width="0.0801%" height="15" fill="rgb(235,42,18)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="965" width="0.0801%" height="15" fill="rgb(219,66,54)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="975.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="949" width="0.0801%" height="15" fill="rgb(222,205,4)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="959.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="933" width="0.0801%" height="15" fill="rgb(227,213,46)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="917" width="0.0801%" height="15" fill="rgb(250,145,42)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="901" width="0.0801%" height="15" fill="rgb(219,15,2)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7283%" y="885" width="0.0801%" height="15" fill="rgb(231,181,52)" fg:x="2355" fg:w="5"/><text x="37.9783%" y="895.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.7924%" y="869" width="0.0160%" height="15" fill="rgb(235,1,42)" fg:x="2359" fg:w="1"/><text x="38.0424%" y="879.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.7924%" y="853" width="0.0160%" height="15" fill="rgb(249,88,27)" fg:x="2359" fg:w="1"/><text x="38.0424%" y="863.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.7924%" y="837" width="0.0160%" height="15" fill="rgb(235,145,16)" fg:x="2359" fg:w="1"/><text x="38.0424%" y="847.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.7924%" y="821" width="0.0160%" height="15" fill="rgb(237,114,19)" fg:x="2359" fg:w="1"/><text x="38.0424%" y="831.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (74 samples, 1.19%)</title><rect x="36.6389%" y="1253" width="1.1855%" height="15" fill="rgb(238,51,50)" fg:x="2287" fg:w="74"/><text x="36.8889%" y="1263.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.8084%" y="1237" width="0.0160%" height="15" fill="rgb(205,194,25)" fg:x="2360" fg:w="1"/><text x="38.0584%" y="1247.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::vector (8 samples, 0.13%)</title><rect x="37.8244%" y="1253" width="0.1282%" height="15" fill="rgb(215,203,17)" fg:x="2361" fg:w="8"/><text x="38.0744%" y="1263.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_default_initialize (8 samples, 0.13%)</title><rect x="37.8244%" y="1237" width="0.1282%" height="15" fill="rgb(233,112,49)" fg:x="2361" fg:w="8"/><text x="38.0744%" y="1247.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_a&lt;PrecomputedTransactionData*, unsigned long, PrecomputedTransactionData&gt; (8 samples, 0.13%)</title><rect x="37.8244%" y="1221" width="0.1282%" height="15" fill="rgb(241,130,26)" fg:x="2361" fg:w="8"/><text x="38.0744%" y="1231.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (8 samples, 0.13%)</title><rect x="37.8244%" y="1205" width="0.1282%" height="15" fill="rgb(252,223,19)" fg:x="2361" fg:w="8"/><text x="38.0744%" y="1215.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (8 samples, 0.13%)</title><rect x="37.8244%" y="1189" width="0.1282%" height="15" fill="rgb(211,95,25)" fg:x="2361" fg:w="8"/><text x="38.0744%" y="1199.50"></text></g><g><title>void std::_Construct&lt;PrecomputedTransactionData&gt; (7 samples, 0.11%)</title><rect x="37.8404%" y="1173" width="0.1121%" height="15" fill="rgb(251,182,27)" fg:x="2362" fg:w="7"/><text x="38.0904%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="37.8885%" y="1157" width="0.0641%" height="15" fill="rgb(238,24,4)" fg:x="2365" fg:w="4"/><text x="38.1385%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="37.8885%" y="1141" width="0.0641%" height="15" fill="rgb(224,220,25)" fg:x="2365" fg:w="4"/><text x="38.1385%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="37.8885%" y="1125" width="0.0641%" height="15" fill="rgb(239,133,26)" fg:x="2365" fg:w="4"/><text x="38.1385%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="37.8885%" y="1109" width="0.0641%" height="15" fill="rgb(211,94,48)" fg:x="2365" fg:w="4"/><text x="38.1385%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="37.9045%" y="1093" width="0.0481%" height="15" fill="rgb(239,87,6)" fg:x="2366" fg:w="3"/><text x="38.1545%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="37.9205%" y="1077" width="0.0320%" height="15" fill="rgb(227,62,0)" fg:x="2367" fg:w="2"/><text x="38.1705%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="37.9205%" y="1061" width="0.0320%" height="15" fill="rgb(211,226,4)" fg:x="2367" fg:w="2"/><text x="38.1705%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9366%" y="1045" width="0.0160%" height="15" fill="rgb(253,38,52)" fg:x="2368" fg:w="1"/><text x="38.1866%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9366%" y="1029" width="0.0160%" height="15" fill="rgb(229,126,40)" fg:x="2368" fg:w="1"/><text x="38.1866%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9366%" y="1013" width="0.0160%" height="15" fill="rgb(229,165,44)" fg:x="2368" fg:w="1"/><text x="38.1866%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9366%" y="997" width="0.0160%" height="15" fill="rgb(247,95,47)" fg:x="2368" fg:w="1"/><text x="38.1866%" y="1007.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="37.9846%" y="1125" width="0.0160%" height="15" fill="rgb(216,140,30)" fg:x="2371" fg:w="1"/><text x="38.2346%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="37.9846%" y="1109" width="0.0160%" height="15" fill="rgb(246,214,8)" fg:x="2371" fg:w="1"/><text x="38.2346%" y="1119.50"></text></g><g><title>Chainstate::ConnectBlock (1,036 samples, 16.60%)</title><rect x="21.4194%" y="1269" width="16.5972%" height="15" fill="rgb(227,224,15)" fg:x="1337" fg:w="1036"/><text x="21.6694%" y="1279.50">Chainstate::ConnectBlock</text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::~vector (4 samples, 0.06%)</title><rect x="37.9526%" y="1253" width="0.0641%" height="15" fill="rgb(233,175,4)" fg:x="2369" fg:w="4"/><text x="38.2026%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*, PrecomputedTransactionData&gt; (4 samples, 0.06%)</title><rect x="37.9526%" y="1237" width="0.0641%" height="15" fill="rgb(221,66,45)" fg:x="2369" fg:w="4"/><text x="38.2026%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*&gt; (4 samples, 0.06%)</title><rect x="37.9526%" y="1221" width="0.0641%" height="15" fill="rgb(221,178,18)" fg:x="2369" fg:w="4"/><text x="38.2026%" y="1231.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;PrecomputedTransactionData*&gt; (4 samples, 0.06%)</title><rect x="37.9526%" y="1205" width="0.0641%" height="15" fill="rgb(213,81,29)" fg:x="2369" fg:w="4"/><text x="38.2026%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData&gt; (3 samples, 0.05%)</title><rect x="37.9686%" y="1189" width="0.0481%" height="15" fill="rgb(220,89,49)" fg:x="2370" fg:w="3"/><text x="38.2186%" y="1199.50"></text></g><g><title>void std::destroy_at&lt;PrecomputedTransactionData&gt; (3 samples, 0.05%)</title><rect x="37.9686%" y="1173" width="0.0481%" height="15" fill="rgb(227,60,33)" fg:x="2370" fg:w="3"/><text x="38.2186%" y="1183.50"></text></g><g><title>PrecomputedTransactionData::~PrecomputedTransactionData (3 samples, 0.05%)</title><rect x="37.9686%" y="1157" width="0.0481%" height="15" fill="rgb(205,113,12)" fg:x="2370" fg:w="3"/><text x="38.2186%" y="1167.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (3 samples, 0.05%)</title><rect x="37.9686%" y="1141" width="0.0481%" height="15" fill="rgb(211,32,1)" fg:x="2370" fg:w="3"/><text x="38.2186%" y="1151.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (1 samples, 0.02%)</title><rect x="38.0006%" y="1125" width="0.0160%" height="15" fill="rgb(246,2,12)" fg:x="2372" fg:w="1"/><text x="38.2506%" y="1135.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (1 samples, 0.02%)</title><rect x="38.0006%" y="1109" width="0.0160%" height="15" fill="rgb(243,37,27)" fg:x="2372" fg:w="1"/><text x="38.2506%" y="1119.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (1 samples, 0.02%)</title><rect x="38.0006%" y="1093" width="0.0160%" height="15" fill="rgb(248,211,31)" fg:x="2372" fg:w="1"/><text x="38.2506%" y="1103.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint const*, std::pair&lt;COutPoint const* const, CTransaction const*&gt;, std::_Select1st&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt;, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (4 samples, 0.06%)</title><rect x="38.0167%" y="1269" width="0.0641%" height="15" fill="rgb(242,146,47)" fg:x="2373" fg:w="4"/><text x="38.2667%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint const*, std::pair&lt;COutPoint const* const, CTransaction const*&gt;, std::_Select1st&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt;, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="38.0647%" y="1253" width="0.0160%" height="15" fill="rgb(206,70,20)" fg:x="2376" fg:w="1"/><text x="38.3147%" y="1263.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (1 samples, 0.02%)</title><rect x="38.0807%" y="1269" width="0.0160%" height="15" fill="rgb(215,10,51)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1279.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="38.0807%" y="1253" width="0.0160%" height="15" fill="rgb(243,178,53)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1263.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="38.0807%" y="1237" width="0.0160%" height="15" fill="rgb(233,221,20)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1247.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="38.0807%" y="1221" width="0.0160%" height="15" fill="rgb(218,95,35)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1231.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="38.0807%" y="1205" width="0.0160%" height="15" fill="rgb(229,13,5)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1215.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="38.0807%" y="1189" width="0.0160%" height="15" fill="rgb(252,164,30)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1199.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="38.0807%" y="1173" width="0.0160%" height="15" fill="rgb(232,68,36)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1183.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="38.0807%" y="1157" width="0.0160%" height="15" fill="rgb(219,59,54)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1167.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="38.0807%" y="1141" width="0.0160%" height="15" fill="rgb(250,92,33)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0807%" y="1125" width="0.0160%" height="15" fill="rgb(229,162,54)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0807%" y="1109" width="0.0160%" height="15" fill="rgb(244,114,52)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0807%" y="1093" width="0.0160%" height="15" fill="rgb(212,211,43)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0807%" y="1077" width="0.0160%" height="15" fill="rgb(226,147,8)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="38.0807%" y="1061" width="0.0160%" height="15" fill="rgb(226,23,13)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0807%" y="1045" width="0.0160%" height="15" fill="rgb(240,63,4)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0807%" y="1029" width="0.0160%" height="15" fill="rgb(221,1,32)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0807%" y="1013" width="0.0160%" height="15" fill="rgb(242,117,10)" fg:x="2377" fg:w="1"/><text x="38.3307%" y="1023.50"></text></g><g><title>Chainstate::ActivateBestChainStep (1,574 samples, 25.22%)</title><rect x="12.8965%" y="1301" width="25.2163%" height="15" fill="rgb(249,172,44)" fg:x="805" fg:w="1574"/><text x="13.1465%" y="1311.50">Chainstate::ActivateBestChainStep</text></g><g><title>Chainstate::ConnectTip (1,574 samples, 25.22%)</title><rect x="12.8965%" y="1285" width="25.2163%" height="15" fill="rgb(244,46,45)" fg:x="805" fg:w="1574"/><text x="13.1465%" y="1295.50">Chainstate::ConnectTip</text></g><g><title>void LogPrintFormatInternal&lt;double&gt; (1 samples, 0.02%)</title><rect x="38.0968%" y="1269" width="0.0160%" height="15" fill="rgb(206,43,17)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1279.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="38.0968%" y="1253" width="0.0160%" height="15" fill="rgb(239,218,39)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1263.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="38.0968%" y="1237" width="0.0160%" height="15" fill="rgb(208,169,54)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1247.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="38.0968%" y="1221" width="0.0160%" height="15" fill="rgb(247,25,42)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1231.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="38.0968%" y="1205" width="0.0160%" height="15" fill="rgb(226,23,31)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1215.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="38.0968%" y="1189" width="0.0160%" height="15" fill="rgb(247,16,28)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1199.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="38.0968%" y="1173" width="0.0160%" height="15" fill="rgb(231,147,38)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1183.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="38.0968%" y="1157" width="0.0160%" height="15" fill="rgb(253,81,48)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1167.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="38.0968%" y="1141" width="0.0160%" height="15" fill="rgb(249,222,43)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0968%" y="1125" width="0.0160%" height="15" fill="rgb(221,3,27)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0968%" y="1109" width="0.0160%" height="15" fill="rgb(228,180,5)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0968%" y="1093" width="0.0160%" height="15" fill="rgb(227,131,42)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.0968%" y="1077" width="0.0160%" height="15" fill="rgb(212,3,39)" fg:x="2378" fg:w="1"/><text x="38.3468%" y="1087.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (6 samples, 0.10%)</title><rect x="38.1128%" y="1253" width="0.0961%" height="15" fill="rgb(226,45,5)" fg:x="2379" fg:w="6"/><text x="38.3628%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.10%)</title><rect x="38.1128%" y="1237" width="0.0961%" height="15" fill="rgb(215,167,45)" fg:x="2379" fg:w="6"/><text x="38.3628%" y="1247.50"></text></g><g><title>_int_free (6 samples, 0.10%)</title><rect x="38.1128%" y="1221" width="0.0961%" height="15" fill="rgb(250,218,53)" fg:x="2379" fg:w="6"/><text x="38.3628%" y="1231.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (6 samples, 0.10%)</title><rect x="38.1128%" y="1205" width="0.0961%" height="15" fill="rgb(207,140,0)" fg:x="2379" fg:w="6"/><text x="38.3628%" y="1215.50"></text></g><g><title>malloc_consolidate (6 samples, 0.10%)</title><rect x="38.1128%" y="1189" width="0.0961%" height="15" fill="rgb(238,133,51)" fg:x="2379" fg:w="6"/><text x="38.3628%" y="1199.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (7 samples, 0.11%)</title><rect x="38.1128%" y="1269" width="0.1121%" height="15" fill="rgb(218,203,53)" fg:x="2379" fg:w="7"/><text x="38.3628%" y="1279.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (1 samples, 0.02%)</title><rect x="38.2089%" y="1253" width="0.0160%" height="15" fill="rgb(226,184,25)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="38.2089%" y="1237" width="0.0160%" height="15" fill="rgb(231,121,21)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1247.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="38.2089%" y="1221" width="0.0160%" height="15" fill="rgb(251,14,34)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1205" width="0.0160%" height="15" fill="rgb(249,193,11)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1189" width="0.0160%" height="15" fill="rgb(220,172,37)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1173" width="0.0160%" height="15" fill="rgb(231,229,43)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1157" width="0.0160%" height="15" fill="rgb(250,161,5)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1141" width="0.0160%" height="15" fill="rgb(218,225,18)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1125" width="0.0160%" height="15" fill="rgb(245,45,42)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1109" width="0.0160%" height="15" fill="rgb(211,115,1)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1093" width="0.0160%" height="15" fill="rgb(248,133,52)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1077" width="0.0160%" height="15" fill="rgb(238,100,21)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1061" width="0.0160%" height="15" fill="rgb(247,144,11)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1045" width="0.0160%" height="15" fill="rgb(206,164,16)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2089%" y="1029" width="0.0160%" height="15" fill="rgb(222,34,3)" fg:x="2385" fg:w="1"/><text x="38.4589%" y="1039.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (2 samples, 0.03%)</title><rect x="38.2249%" y="1221" width="0.0320%" height="15" fill="rgb(248,82,4)" fg:x="2386" fg:w="2"/><text x="38.4749%" y="1231.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="38.2249%" y="1205" width="0.0320%" height="15" fill="rgb(228,81,46)" fg:x="2386" fg:w="2"/><text x="38.4749%" y="1215.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="38.2249%" y="1189" width="0.0320%" height="15" fill="rgb(227,67,47)" fg:x="2386" fg:w="2"/><text x="38.4749%" y="1199.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="38.2409%" y="1173" width="0.0160%" height="15" fill="rgb(215,93,53)" fg:x="2387" fg:w="1"/><text x="38.4909%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="38.2409%" y="1157" width="0.0160%" height="15" fill="rgb(248,194,39)" fg:x="2387" fg:w="1"/><text x="38.4909%" y="1167.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="38.2409%" y="1141" width="0.0160%" height="15" fill="rgb(215,5,19)" fg:x="2387" fg:w="1"/><text x="38.4909%" y="1151.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="38.2570%" y="1205" width="0.0160%" height="15" fill="rgb(226,215,51)" fg:x="2388" fg:w="1"/><text x="38.5070%" y="1215.50"></text></g><g><title>leveldb::WriteBatch::Delete (2 samples, 0.03%)</title><rect x="38.2570%" y="1221" width="0.0320%" height="15" fill="rgb(225,56,26)" fg:x="2388" fg:w="2"/><text x="38.5070%" y="1231.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="38.2730%" y="1205" width="0.0160%" height="15" fill="rgb(222,75,29)" fg:x="2389" fg:w="1"/><text x="38.5230%" y="1215.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="38.2730%" y="1189" width="0.0160%" height="15" fill="rgb(236,139,6)" fg:x="2389" fg:w="1"/><text x="38.5230%" y="1199.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="38.2730%" y="1173" width="0.0160%" height="15" fill="rgb(223,137,36)" fg:x="2389" fg:w="1"/><text x="38.5230%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="38.2730%" y="1157" width="0.0160%" height="15" fill="rgb(226,99,2)" fg:x="2389" fg:w="1"/><text x="38.5230%" y="1167.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="38.2730%" y="1141" width="0.0160%" height="15" fill="rgb(206,133,23)" fg:x="2389" fg:w="1"/><text x="38.5230%" y="1151.50"></text></g><g><title>CDBBatch::EraseImpl (5 samples, 0.08%)</title><rect x="38.2249%" y="1237" width="0.0801%" height="15" fill="rgb(243,173,15)" fg:x="2386" fg:w="5"/><text x="38.4749%" y="1247.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="38.2890%" y="1221" width="0.0160%" height="15" fill="rgb(228,69,28)" fg:x="2390" fg:w="1"/><text x="38.5390%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="38.2890%" y="1205" width="0.0160%" height="15" fill="rgb(212,51,22)" fg:x="2390" fg:w="1"/><text x="38.5390%" y="1215.50"></text></g><g><title>CDBBatch::WriteImpl (8 samples, 0.13%)</title><rect x="38.3050%" y="1205" width="0.1282%" height="15" fill="rgb(227,113,0)" fg:x="2391" fg:w="8"/><text x="38.5550%" y="1215.50"></text></g><g><title>DataStream::Xor (8 samples, 0.13%)</title><rect x="38.3050%" y="1189" width="0.1282%" height="15" fill="rgb(252,84,27)" fg:x="2391" fg:w="8"/><text x="38.5550%" y="1199.50"></text></g><g><title>util::Xor (8 samples, 0.13%)</title><rect x="38.3050%" y="1173" width="0.1282%" height="15" fill="rgb(223,145,39)" fg:x="2391" fg:w="8"/><text x="38.5550%" y="1183.50"></text></g><g><title>std::operator^= (4 samples, 0.06%)</title><rect x="38.3691%" y="1157" width="0.0641%" height="15" fill="rgb(239,219,30)" fg:x="2395" fg:w="4"/><text x="38.6191%" y="1167.50"></text></g><g><title>std::operator^ (4 samples, 0.06%)</title><rect x="38.3691%" y="1141" width="0.0641%" height="15" fill="rgb(224,196,39)" fg:x="2395" fg:w="4"/><text x="38.6191%" y="1151.50"></text></g><g><title>leveldb::PutVarint32 (5 samples, 0.08%)</title><rect x="38.4332%" y="1205" width="0.0801%" height="15" fill="rgb(205,35,43)" fg:x="2399" fg:w="5"/><text x="38.6832%" y="1215.50"></text></g><g><title>CDBBatch::WriteImpl (5 samples, 0.08%)</title><rect x="38.4332%" y="1189" width="0.0801%" height="15" fill="rgb(228,201,21)" fg:x="2399" fg:w="5"/><text x="38.6832%" y="1199.50"></text></g><g><title>DataStream::Xor (5 samples, 0.08%)</title><rect x="38.4332%" y="1173" width="0.0801%" height="15" fill="rgb(237,118,16)" fg:x="2399" fg:w="5"/><text x="38.6832%" y="1183.50"></text></g><g><title>util::Xor (5 samples, 0.08%)</title><rect x="38.4332%" y="1157" width="0.0801%" height="15" fill="rgb(241,17,19)" fg:x="2399" fg:w="5"/><text x="38.6832%" y="1167.50"></text></g><g><title>std::operator^= (3 samples, 0.05%)</title><rect x="38.4652%" y="1141" width="0.0481%" height="15" fill="rgb(214,10,25)" fg:x="2401" fg:w="3"/><text x="38.7152%" y="1151.50"></text></g><g><title>std::operator^ (3 samples, 0.05%)</title><rect x="38.4652%" y="1125" width="0.0481%" height="15" fill="rgb(238,37,29)" fg:x="2401" fg:w="3"/><text x="38.7152%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="38.5133%" y="1173" width="0.0160%" height="15" fill="rgb(253,83,25)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="38.5133%" y="1157" width="0.0160%" height="15" fill="rgb(234,192,12)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="38.5133%" y="1141" width="0.0160%" height="15" fill="rgb(241,216,45)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1151.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="38.5133%" y="1125" width="0.0160%" height="15" fill="rgb(242,22,33)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="38.5133%" y="1109" width="0.0160%" height="15" fill="rgb(231,105,49)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="1093" width="0.0160%" height="15" fill="rgb(218,204,15)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="1077" width="0.0160%" height="15" fill="rgb(235,138,41)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="1061" width="0.0160%" height="15" fill="rgb(246,0,9)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="1045" width="0.0160%" height="15" fill="rgb(210,74,4)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="1029" width="0.0160%" height="15" fill="rgb(250,60,41)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="1013" width="0.0160%" height="15" fill="rgb(220,115,12)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="997" width="0.0160%" height="15" fill="rgb(237,100,13)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="981" width="0.0160%" height="15" fill="rgb(213,55,26)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="965" width="0.0160%" height="15" fill="rgb(216,17,4)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="949" width="0.0160%" height="15" fill="rgb(220,153,47)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5133%" y="933" width="0.0160%" height="15" fill="rgb(215,131,9)" fg:x="2404" fg:w="1"/><text x="38.7633%" y="943.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (16 samples, 0.26%)</title><rect x="38.3050%" y="1221" width="0.2563%" height="15" fill="rgb(233,46,42)" fg:x="2391" fg:w="16"/><text x="38.5550%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (3 samples, 0.05%)</title><rect x="38.5133%" y="1205" width="0.0481%" height="15" fill="rgb(226,86,7)" fg:x="2404" fg:w="3"/><text x="38.7633%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3 samples, 0.05%)</title><rect x="38.5133%" y="1189" width="0.0481%" height="15" fill="rgb(239,226,21)" fg:x="2404" fg:w="3"/><text x="38.7633%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="38.5293%" y="1173" width="0.0320%" height="15" fill="rgb(244,137,22)" fg:x="2405" fg:w="2"/><text x="38.7793%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="38.5293%" y="1157" width="0.0320%" height="15" fill="rgb(211,139,35)" fg:x="2405" fg:w="2"/><text x="38.7793%" y="1167.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.03%)</title><rect x="38.5293%" y="1141" width="0.0320%" height="15" fill="rgb(214,62,50)" fg:x="2405" fg:w="2"/><text x="38.7793%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="38.5293%" y="1125" width="0.0320%" height="15" fill="rgb(212,113,44)" fg:x="2405" fg:w="2"/><text x="38.7793%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.5293%" y="1109" width="0.0320%" height="15" fill="rgb(226,150,43)" fg:x="2405" fg:w="2"/><text x="38.7793%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.5293%" y="1093" width="0.0320%" height="15" fill="rgb(250,71,37)" fg:x="2405" fg:w="2"/><text x="38.7793%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.5293%" y="1077" width="0.0320%" height="15" fill="rgb(219,76,19)" fg:x="2405" fg:w="2"/><text x="38.7793%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.5293%" y="1061" width="0.0320%" height="15" fill="rgb(250,39,11)" fg:x="2405" fg:w="2"/><text x="38.7793%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.5293%" y="1045" width="0.0320%" height="15" fill="rgb(230,64,31)" fg:x="2405" fg:w="2"/><text x="38.7793%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5453%" y="1029" width="0.0160%" height="15" fill="rgb(208,222,23)" fg:x="2406" fg:w="1"/><text x="38.7953%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5453%" y="1013" width="0.0160%" height="15" fill="rgb(227,125,18)" fg:x="2406" fg:w="1"/><text x="38.7953%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5453%" y="997" width="0.0160%" height="15" fill="rgb(234,210,9)" fg:x="2406" fg:w="1"/><text x="38.7953%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5453%" y="981" width="0.0160%" height="15" fill="rgb(217,127,24)" fg:x="2406" fg:w="1"/><text x="38.7953%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5453%" y="965" width="0.0160%" height="15" fill="rgb(239,141,48)" fg:x="2406" fg:w="1"/><text x="38.7953%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.5453%" y="949" width="0.0160%" height="15" fill="rgb(227,109,8)" fg:x="2406" fg:w="1"/><text x="38.7953%" y="959.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.02%)</title><rect x="38.5774%" y="1205" width="0.0160%" height="15" fill="rgb(235,184,23)" fg:x="2408" fg:w="1"/><text x="38.8274%" y="1215.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="38.5774%" y="1189" width="0.0160%" height="15" fill="rgb(227,226,48)" fg:x="2408" fg:w="1"/><text x="38.8274%" y="1199.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="38.5774%" y="1173" width="0.0160%" height="15" fill="rgb(206,150,11)" fg:x="2408" fg:w="1"/><text x="38.8274%" y="1183.50"></text></g><g><title>leveldb::PutVarint32 (4 samples, 0.06%)</title><rect x="38.5934%" y="1189" width="0.0641%" height="15" fill="rgb(254,2,33)" fg:x="2409" fg:w="4"/><text x="38.8434%" y="1199.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (4 samples, 0.06%)</title><rect x="38.5934%" y="1173" width="0.0641%" height="15" fill="rgb(243,160,20)" fg:x="2409" fg:w="4"/><text x="38.8434%" y="1183.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (4 samples, 0.06%)</title><rect x="38.5934%" y="1157" width="0.0641%" height="15" fill="rgb(218,208,30)" fg:x="2409" fg:w="4"/><text x="38.8434%" y="1167.50"></text></g><g><title>decltype  (4 samples, 0.06%)</title><rect x="38.5934%" y="1141" width="0.0641%" height="15" fill="rgb(224,120,49)" fg:x="2409" fg:w="4"/><text x="38.8434%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (4 samples, 0.06%)</title><rect x="38.5934%" y="1125" width="0.0641%" height="15" fill="rgb(246,12,2)" fg:x="2409" fg:w="4"/><text x="38.8434%" y="1135.50"></text></g><g><title>decltype (4 samples, 0.06%)</title><rect x="38.5934%" y="1109" width="0.0641%" height="15" fill="rgb(236,117,3)" fg:x="2409" fg:w="4"/><text x="38.8434%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.03%)</title><rect x="38.6575%" y="1157" width="0.0320%" height="15" fill="rgb(216,128,52)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="38.6575%" y="1141" width="0.0320%" height="15" fill="rgb(246,145,19)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="38.6575%" y="1125" width="0.0320%" height="15" fill="rgb(222,11,46)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1135.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.03%)</title><rect x="38.6575%" y="1109" width="0.0320%" height="15" fill="rgb(245,82,36)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1119.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="38.6575%" y="1093" width="0.0320%" height="15" fill="rgb(250,73,51)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6575%" y="1077" width="0.0320%" height="15" fill="rgb(221,189,23)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6575%" y="1061" width="0.0320%" height="15" fill="rgb(210,33,7)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6575%" y="1045" width="0.0320%" height="15" fill="rgb(210,107,22)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6575%" y="1029" width="0.0320%" height="15" fill="rgb(222,116,37)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6575%" y="1013" width="0.0320%" height="15" fill="rgb(254,17,48)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6575%" y="997" width="0.0320%" height="15" fill="rgb(224,36,32)" fg:x="2413" fg:w="2"/><text x="38.9075%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.6735%" y="981" width="0.0160%" height="15" fill="rgb(232,90,46)" fg:x="2414" fg:w="1"/><text x="38.9235%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.6735%" y="965" width="0.0160%" height="15" fill="rgb(241,66,40)" fg:x="2414" fg:w="1"/><text x="38.9235%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.6735%" y="949" width="0.0160%" height="15" fill="rgb(249,184,29)" fg:x="2414" fg:w="1"/><text x="38.9235%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.6735%" y="933" width="0.0160%" height="15" fill="rgb(231,181,1)" fg:x="2414" fg:w="1"/><text x="38.9235%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.6735%" y="917" width="0.0160%" height="15" fill="rgb(224,94,2)" fg:x="2414" fg:w="1"/><text x="38.9235%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (4 samples, 0.06%)</title><rect x="38.6575%" y="1189" width="0.0641%" height="15" fill="rgb(229,170,15)" fg:x="2413" fg:w="4"/><text x="38.9075%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4 samples, 0.06%)</title><rect x="38.6575%" y="1173" width="0.0641%" height="15" fill="rgb(240,127,35)" fg:x="2413" fg:w="4"/><text x="38.9075%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="38.6895%" y="1157" width="0.0320%" height="15" fill="rgb(248,196,34)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="38.6895%" y="1141" width="0.0320%" height="15" fill="rgb(236,137,7)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1151.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.03%)</title><rect x="38.6895%" y="1125" width="0.0320%" height="15" fill="rgb(235,127,16)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="38.6895%" y="1109" width="0.0320%" height="15" fill="rgb(250,192,54)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6895%" y="1093" width="0.0320%" height="15" fill="rgb(218,98,20)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6895%" y="1077" width="0.0320%" height="15" fill="rgb(230,176,47)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6895%" y="1061" width="0.0320%" height="15" fill="rgb(244,2,33)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6895%" y="1045" width="0.0320%" height="15" fill="rgb(231,100,17)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6895%" y="1029" width="0.0320%" height="15" fill="rgb(245,23,12)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6895%" y="1013" width="0.0320%" height="15" fill="rgb(249,55,22)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.6895%" y="997" width="0.0320%" height="15" fill="rgb(207,134,9)" fg:x="2415" fg:w="2"/><text x="38.9395%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.7055%" y="981" width="0.0160%" height="15" fill="rgb(218,134,0)" fg:x="2416" fg:w="1"/><text x="38.9555%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.7055%" y="965" width="0.0160%" height="15" fill="rgb(213,212,33)" fg:x="2416" fg:w="1"/><text x="38.9555%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.7055%" y="949" width="0.0160%" height="15" fill="rgb(252,106,18)" fg:x="2416" fg:w="1"/><text x="38.9555%" y="959.50"></text></g><g><title>leveldb::WriteBatch::Put (12 samples, 0.19%)</title><rect x="38.5614%" y="1221" width="0.1922%" height="15" fill="rgb(208,126,42)" fg:x="2407" fg:w="12"/><text x="38.8114%" y="1231.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (10 samples, 0.16%)</title><rect x="38.5934%" y="1205" width="0.1602%" height="15" fill="rgb(246,175,29)" fg:x="2409" fg:w="10"/><text x="38.8434%" y="1215.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="38.7216%" y="1189" width="0.0320%" height="15" fill="rgb(215,13,50)" fg:x="2417" fg:w="2"/><text x="38.9716%" y="1199.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="38.7216%" y="1173" width="0.0320%" height="15" fill="rgb(216,172,15)" fg:x="2417" fg:w="2"/><text x="38.9716%" y="1183.50"></text></g><g><title>CDBBatch::WriteImpl (29 samples, 0.46%)</title><rect x="38.3050%" y="1237" width="0.4646%" height="15" fill="rgb(212,103,13)" fg:x="2391" fg:w="29"/><text x="38.5550%" y="1247.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="38.7536%" y="1221" width="0.0160%" height="15" fill="rgb(231,171,36)" fg:x="2419" fg:w="1"/><text x="39.0036%" y="1231.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="38.7536%" y="1205" width="0.0160%" height="15" fill="rgb(250,123,20)" fg:x="2419" fg:w="1"/><text x="39.0036%" y="1215.50"></text></g><g><title>CCoinsViewDB::BatchWrite (50 samples, 0.80%)</title><rect x="38.2249%" y="1253" width="0.8010%" height="15" fill="rgb(212,53,50)" fg:x="2386" fg:w="50"/><text x="38.4749%" y="1263.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (16 samples, 0.26%)</title><rect x="38.7696%" y="1237" width="0.2563%" height="15" fill="rgb(243,54,12)" fg:x="2420" fg:w="16"/><text x="39.0196%" y="1247.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (15 samples, 0.24%)</title><rect x="38.7856%" y="1221" width="0.2403%" height="15" fill="rgb(234,101,34)" fg:x="2421" fg:w="15"/><text x="39.0356%" y="1231.50"></text></g><g><title>decltype  (3 samples, 0.05%)</title><rect x="38.9779%" y="1205" width="0.0481%" height="15" fill="rgb(254,67,22)" fg:x="2433" fg:w="3"/><text x="39.2279%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (3 samples, 0.05%)</title><rect x="38.9779%" y="1189" width="0.0481%" height="15" fill="rgb(250,35,47)" fg:x="2433" fg:w="3"/><text x="39.2279%" y="1199.50"></text></g><g><title>decltype (3 samples, 0.05%)</title><rect x="38.9779%" y="1173" width="0.0481%" height="15" fill="rgb(226,126,38)" fg:x="2433" fg:w="3"/><text x="39.2279%" y="1183.50"></text></g><g><title>CDBBatch::~CDBBatch (1 samples, 0.02%)</title><rect x="39.0260%" y="1253" width="0.0160%" height="15" fill="rgb(216,138,53)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1263.50"></text></g><g><title>std::unique_ptr&lt;CDBBatch::WriteBatchImpl, std::default_delete&lt;CDBBatch::WriteBatchImpl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="39.0260%" y="1237" width="0.0160%" height="15" fill="rgb(246,199,43)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1247.50"></text></g><g><title>std::default_delete&lt;CDBBatch::WriteBatchImpl&gt;::operator (1 samples, 0.02%)</title><rect x="39.0260%" y="1221" width="0.0160%" height="15" fill="rgb(232,125,11)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1231.50"></text></g><g><title>std::default_delete&lt;CDBBatch::WriteBatchImpl&gt;::operator (1 samples, 0.02%)</title><rect x="39.0260%" y="1205" width="0.0160%" height="15" fill="rgb(218,219,45)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1215.50"></text></g><g><title>CDBBatch::WriteBatchImpl::~WriteBatchImpl (1 samples, 0.02%)</title><rect x="39.0260%" y="1189" width="0.0160%" height="15" fill="rgb(216,102,54)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="39.0260%" y="1173" width="0.0160%" height="15" fill="rgb(250,228,7)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1183.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="39.0260%" y="1157" width="0.0160%" height="15" fill="rgb(226,125,25)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="1141" width="0.0160%" height="15" fill="rgb(224,165,27)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="1125" width="0.0160%" height="15" fill="rgb(233,86,3)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="1109" width="0.0160%" height="15" fill="rgb(228,116,20)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="1093" width="0.0160%" height="15" fill="rgb(209,192,17)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="1077" width="0.0160%" height="15" fill="rgb(224,88,34)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="1061" width="0.0160%" height="15" fill="rgb(233,38,6)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="1045" width="0.0160%" height="15" fill="rgb(212,59,30)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="1029" width="0.0160%" height="15" fill="rgb(213,80,3)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="1013" width="0.0160%" height="15" fill="rgb(251,178,7)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="997" width="0.0160%" height="15" fill="rgb(213,154,26)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0260%" y="981" width="0.0160%" height="15" fill="rgb(238,165,49)" fg:x="2436" fg:w="1"/><text x="39.2760%" y="991.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="39.0420%" y="1205" width="0.0160%" height="15" fill="rgb(248,91,46)" fg:x="2437" fg:w="1"/><text x="39.2920%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="39.0580%" y="1189" width="0.0160%" height="15" fill="rgb(244,21,52)" fg:x="2438" fg:w="1"/><text x="39.3080%" y="1199.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="39.0580%" y="1173" width="0.0160%" height="15" fill="rgb(247,122,20)" fg:x="2438" fg:w="1"/><text x="39.3080%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="39.0740%" y="1173" width="0.0160%" height="15" fill="rgb(218,27,9)" fg:x="2439" fg:w="1"/><text x="39.3240%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (3 samples, 0.05%)</title><rect x="39.0900%" y="1173" width="0.0481%" height="15" fill="rgb(246,7,6)" fg:x="2440" fg:w="3"/><text x="39.3400%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="39.1221%" y="1157" width="0.0160%" height="15" fill="rgb(227,135,54)" fg:x="2442" fg:w="1"/><text x="39.3721%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (1 samples, 0.02%)</title><rect x="39.1381%" y="1157" width="0.0160%" height="15" fill="rgb(247,14,11)" fg:x="2443" fg:w="1"/><text x="39.3881%" y="1167.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (6 samples, 0.10%)</title><rect x="39.0740%" y="1189" width="0.0961%" height="15" fill="rgb(206,149,34)" fg:x="2439" fg:w="6"/><text x="39.3240%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (2 samples, 0.03%)</title><rect x="39.1381%" y="1173" width="0.0320%" height="15" fill="rgb(227,228,4)" fg:x="2443" fg:w="2"/><text x="39.3881%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (1 samples, 0.02%)</title><rect x="39.1541%" y="1157" width="0.0160%" height="15" fill="rgb(238,218,28)" fg:x="2444" fg:w="1"/><text x="39.4041%" y="1167.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="39.1701%" y="1189" width="0.0160%" height="15" fill="rgb(252,86,40)" fg:x="2445" fg:w="1"/><text x="39.4201%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (7 samples, 0.11%)</title><rect x="39.1862%" y="1189" width="0.1121%" height="15" fill="rgb(251,225,11)" fg:x="2446" fg:w="7"/><text x="39.4362%" y="1199.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="39.2823%" y="1173" width="0.0160%" height="15" fill="rgb(206,46,49)" fg:x="2452" fg:w="1"/><text x="39.5323%" y="1183.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="39.2823%" y="1157" width="0.0160%" height="15" fill="rgb(245,128,24)" fg:x="2452" fg:w="1"/><text x="39.5323%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (2 samples, 0.03%)</title><rect x="39.2983%" y="1189" width="0.0320%" height="15" fill="rgb(219,177,34)" fg:x="2453" fg:w="2"/><text x="39.5483%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (2 samples, 0.03%)</title><rect x="39.2983%" y="1173" width="0.0320%" height="15" fill="rgb(218,60,48)" fg:x="2453" fg:w="2"/><text x="39.5483%" y="1183.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="39.3303%" y="1029" width="0.0961%" height="15" fill="rgb(221,11,5)" fg:x="2455" fg:w="6"/><text x="39.5803%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="39.3303%" y="1013" width="0.0961%" height="15" fill="rgb(220,148,13)" fg:x="2455" fg:w="6"/><text x="39.5803%" y="1023.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="39.3303%" y="997" width="0.0961%" height="15" fill="rgb(210,16,3)" fg:x="2455" fg:w="6"/><text x="39.5803%" y="1007.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="39.3303%" y="981" width="0.0961%" height="15" fill="rgb(236,80,2)" fg:x="2455" fg:w="6"/><text x="39.5803%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="39.3464%" y="965" width="0.0801%" height="15" fill="rgb(239,129,19)" fg:x="2456" fg:w="5"/><text x="39.5964%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="39.3624%" y="949" width="0.0641%" height="15" fill="rgb(220,106,35)" fg:x="2457" fg:w="4"/><text x="39.6124%" y="959.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="39.3624%" y="933" width="0.0641%" height="15" fill="rgb(252,139,45)" fg:x="2457" fg:w="4"/><text x="39.6124%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="39.3944%" y="917" width="0.0320%" height="15" fill="rgb(229,8,36)" fg:x="2459" fg:w="2"/><text x="39.6444%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="39.3944%" y="901" width="0.0320%" height="15" fill="rgb(230,126,33)" fg:x="2459" fg:w="2"/><text x="39.6444%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.4104%" y="885" width="0.0160%" height="15" fill="rgb(239,140,21)" fg:x="2460" fg:w="1"/><text x="39.6604%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.4104%" y="869" width="0.0160%" height="15" fill="rgb(254,104,9)" fg:x="2460" fg:w="1"/><text x="39.6604%" y="879.50"></text></g><g><title>operator new (22 samples, 0.35%)</title><rect x="39.3303%" y="1093" width="0.3525%" height="15" fill="rgb(239,52,14)" fg:x="2455" fg:w="22"/><text x="39.5803%" y="1103.50"></text></g><g><title>malloc (22 samples, 0.35%)</title><rect x="39.3303%" y="1077" width="0.3525%" height="15" fill="rgb(208,227,44)" fg:x="2455" fg:w="22"/><text x="39.5803%" y="1087.50"></text></g><g><title>_int_malloc (22 samples, 0.35%)</title><rect x="39.3303%" y="1061" width="0.3525%" height="15" fill="rgb(246,18,19)" fg:x="2455" fg:w="22"/><text x="39.5803%" y="1071.50"></text></g><g><title>sysmalloc (22 samples, 0.35%)</title><rect x="39.3303%" y="1045" width="0.3525%" height="15" fill="rgb(235,228,25)" fg:x="2455" fg:w="22"/><text x="39.5803%" y="1055.50"></text></g><g><title>__mprotect (16 samples, 0.26%)</title><rect x="39.4265%" y="1029" width="0.2563%" height="15" fill="rgb(240,156,20)" fg:x="2461" fg:w="16"/><text x="39.6765%" y="1039.50"></text></g><g><title>[unknown] (16 samples, 0.26%)</title><rect x="39.4265%" y="1013" width="0.2563%" height="15" fill="rgb(224,8,20)" fg:x="2461" fg:w="16"/><text x="39.6765%" y="1023.50"></text></g><g><title>[unknown] (16 samples, 0.26%)</title><rect x="39.4265%" y="997" width="0.2563%" height="15" fill="rgb(214,12,52)" fg:x="2461" fg:w="16"/><text x="39.6765%" y="1007.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="39.4425%" y="981" width="0.2403%" height="15" fill="rgb(211,220,47)" fg:x="2462" fg:w="15"/><text x="39.6925%" y="991.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="39.4425%" y="965" width="0.2403%" height="15" fill="rgb(250,173,5)" fg:x="2462" fg:w="15"/><text x="39.6925%" y="975.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="39.4425%" y="949" width="0.2403%" height="15" fill="rgb(250,125,52)" fg:x="2462" fg:w="15"/><text x="39.6925%" y="959.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="39.4905%" y="933" width="0.1922%" height="15" fill="rgb(209,133,18)" fg:x="2465" fg:w="12"/><text x="39.7405%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="39.6027%" y="917" width="0.0801%" height="15" fill="rgb(216,173,22)" fg:x="2472" fg:w="5"/><text x="39.8527%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="39.6347%" y="901" width="0.0481%" height="15" fill="rgb(205,3,22)" fg:x="2474" fg:w="3"/><text x="39.8847%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="39.6347%" y="885" width="0.0481%" height="15" fill="rgb(248,22,20)" fg:x="2474" fg:w="3"/><text x="39.8847%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="39.6347%" y="869" width="0.0481%" height="15" fill="rgb(233,6,29)" fg:x="2474" fg:w="3"/><text x="39.8847%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="39.6347%" y="853" width="0.0481%" height="15" fill="rgb(240,22,54)" fg:x="2474" fg:w="3"/><text x="39.8847%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="39.6347%" y="837" width="0.0481%" height="15" fill="rgb(231,133,32)" fg:x="2474" fg:w="3"/><text x="39.8847%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.6668%" y="821" width="0.0160%" height="15" fill="rgb(248,193,4)" fg:x="2476" fg:w="1"/><text x="39.9168%" y="831.50"></text></g><g><title>leveldb::Arena::Allocate (23 samples, 0.37%)</title><rect x="39.3303%" y="1157" width="0.3685%" height="15" fill="rgb(211,178,46)" fg:x="2455" fg:w="23"/><text x="39.5803%" y="1167.50"></text></g><g><title>leveldb::Arena::AllocateFallback (23 samples, 0.37%)</title><rect x="39.3303%" y="1141" width="0.3685%" height="15" fill="rgb(224,5,42)" fg:x="2455" fg:w="23"/><text x="39.5803%" y="1151.50"></text></g><g><title>leveldb::Arena::AllocateFallback (23 samples, 0.37%)</title><rect x="39.3303%" y="1125" width="0.3685%" height="15" fill="rgb(239,176,25)" fg:x="2455" fg:w="23"/><text x="39.5803%" y="1135.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (23 samples, 0.37%)</title><rect x="39.3303%" y="1109" width="0.3685%" height="15" fill="rgb(245,187,50)" fg:x="2455" fg:w="23"/><text x="39.5803%" y="1119.50"></text></g><g><title>std::vector&lt;char*, std::allocator&lt;char*&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="39.6828%" y="1093" width="0.0160%" height="15" fill="rgb(248,24,15)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="1103.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;char*&gt; &gt;::construct&lt;char*, char* const&amp;&gt; (1 samples, 0.02%)</title><rect x="39.6828%" y="1077" width="0.0160%" height="15" fill="rgb(205,166,13)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="1087.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="39.6828%" y="1061" width="0.0160%" height="15" fill="rgb(208,114,23)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.6828%" y="1045" width="0.0160%" height="15" fill="rgb(239,127,18)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.6828%" y="1029" width="0.0160%" height="15" fill="rgb(219,154,28)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.6828%" y="1013" width="0.0160%" height="15" fill="rgb(225,157,23)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.6828%" y="997" width="0.0160%" height="15" fill="rgb(219,8,6)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.6828%" y="981" width="0.0160%" height="15" fill="rgb(212,47,6)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.6828%" y="965" width="0.0160%" height="15" fill="rgb(224,190,4)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.6828%" y="949" width="0.0160%" height="15" fill="rgb(239,183,29)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.6828%" y="933" width="0.0160%" height="15" fill="rgb(213,57,7)" fg:x="2477" fg:w="1"/><text x="39.9328%" y="943.50"></text></g><g><title>leveldb::GetVarint32 (1 samples, 0.02%)</title><rect x="39.6988%" y="1157" width="0.0160%" height="15" fill="rgb(216,148,1)" fg:x="2478" fg:w="1"/><text x="39.9488%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.05%)</title><rect x="39.7148%" y="1157" width="0.0481%" height="15" fill="rgb(236,182,29)" fg:x="2479" fg:w="3"/><text x="39.9648%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="39.7469%" y="1141" width="0.0160%" height="15" fill="rgb(244,120,48)" fg:x="2481" fg:w="1"/><text x="39.9969%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (11 samples, 0.18%)</title><rect x="39.7629%" y="1141" width="0.1762%" height="15" fill="rgb(206,71,34)" fg:x="2482" fg:w="11"/><text x="40.0129%" y="1151.50"></text></g><g><title>leveldb::Slice::compare (8 samples, 0.13%)</title><rect x="39.8110%" y="1125" width="0.1282%" height="15" fill="rgb(242,32,6)" fg:x="2485" fg:w="8"/><text x="40.0610%" y="1135.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="39.9391%" y="1141" width="0.0160%" height="15" fill="rgb(241,35,3)" fg:x="2493" fg:w="1"/><text x="40.1891%" y="1151.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (9 samples, 0.14%)</title><rect x="39.9551%" y="1141" width="0.1442%" height="15" fill="rgb(222,62,19)" fg:x="2494" fg:w="9"/><text x="40.2051%" y="1151.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.03%)</title><rect x="40.0673%" y="1125" width="0.0320%" height="15" fill="rgb(223,110,41)" fg:x="2501" fg:w="2"/><text x="40.3173%" y="1135.50"></text></g><g><title>GetLengthPrefixedSlice (22 samples, 0.35%)</title><rect x="41.2047%" y="1125" width="0.3525%" height="15" fill="rgb(208,224,4)" fg:x="2572" fg:w="22"/><text x="41.4547%" y="1135.50"></text></g><g><title>leveldb::GetVarint32Ptr (20 samples, 0.32%)</title><rect x="41.2368%" y="1109" width="0.3204%" height="15" fill="rgb(241,137,19)" fg:x="2574" fg:w="20"/><text x="41.4868%" y="1119.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (92 samples, 1.47%)</title><rect x="40.0993%" y="1141" width="1.4739%" height="15" fill="rgb(244,24,17)" fg:x="2503" fg:w="92"/><text x="40.3493%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="41.5572%" y="1125" width="0.0160%" height="15" fill="rgb(245,178,49)" fg:x="2594" fg:w="1"/><text x="41.8072%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="41.5892%" y="1093" width="0.0160%" height="15" fill="rgb(219,160,38)" fg:x="2596" fg:w="1"/><text x="41.8392%" y="1103.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="41.5892%" y="1109" width="0.0320%" height="15" fill="rgb(228,137,14)" fg:x="2596" fg:w="2"/><text x="41.8392%" y="1119.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="41.6053%" y="1093" width="0.0160%" height="15" fill="rgb(237,134,11)" fg:x="2597" fg:w="1"/><text x="41.8553%" y="1103.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="41.6053%" y="1077" width="0.0160%" height="15" fill="rgb(211,126,44)" fg:x="2597" fg:w="1"/><text x="41.8553%" y="1087.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (5 samples, 0.08%)</title><rect x="41.5732%" y="1141" width="0.0801%" height="15" fill="rgb(226,171,33)" fg:x="2595" fg:w="5"/><text x="41.8232%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (5 samples, 0.08%)</title><rect x="41.5732%" y="1125" width="0.0801%" height="15" fill="rgb(253,99,13)" fg:x="2595" fg:w="5"/><text x="41.8232%" y="1135.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.03%)</title><rect x="41.6213%" y="1109" width="0.0320%" height="15" fill="rgb(244,48,7)" fg:x="2598" fg:w="2"/><text x="41.8713%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (11 samples, 0.18%)</title><rect x="41.7494%" y="1109" width="0.1762%" height="15" fill="rgb(244,217,54)" fg:x="2606" fg:w="11"/><text x="41.9994%" y="1119.50"></text></g><g><title>leveldb::Slice::compare (3 samples, 0.05%)</title><rect x="41.8776%" y="1093" width="0.0481%" height="15" fill="rgb(224,15,18)" fg:x="2614" fg:w="3"/><text x="42.1276%" y="1103.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.08%)</title><rect x="41.9257%" y="1109" width="0.0801%" height="15" fill="rgb(244,99,12)" fg:x="2617" fg:w="5"/><text x="42.1757%" y="1119.50"></text></g><g><title>leveldb::MemTable::Add (4 samples, 0.06%)</title><rect x="42.0058%" y="1109" width="0.0641%" height="15" fill="rgb(233,226,8)" fg:x="2622" fg:w="4"/><text x="42.2558%" y="1119.50"></text></g><g><title>GetLengthPrefixedSlice (7 samples, 0.11%)</title><rect x="42.3102%" y="1093" width="0.1121%" height="15" fill="rgb(229,211,3)" fg:x="2641" fg:w="7"/><text x="42.5602%" y="1103.50"></text></g><g><title>leveldb::GetVarint32Ptr (5 samples, 0.08%)</title><rect x="42.3422%" y="1077" width="0.0801%" height="15" fill="rgb(216,140,21)" fg:x="2643" fg:w="5"/><text x="42.5922%" y="1087.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.03%)</title><rect x="42.4223%" y="1093" width="0.0320%" height="15" fill="rgb(234,122,30)" fg:x="2648" fg:w="2"/><text x="42.6723%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="42.4543%" y="1093" width="0.0320%" height="15" fill="rgb(236,25,46)" fg:x="2650" fg:w="2"/><text x="42.7043%" y="1103.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="42.6145%" y="1077" width="0.0160%" height="15" fill="rgb(217,52,54)" fg:x="2660" fg:w="1"/><text x="42.8645%" y="1087.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="42.7748%" y="1045" width="0.0160%" height="15" fill="rgb(222,29,26)" fg:x="2670" fg:w="1"/><text x="43.0248%" y="1055.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (11 samples, 0.18%)</title><rect x="42.6306%" y="1077" width="0.1762%" height="15" fill="rgb(216,177,29)" fg:x="2661" fg:w="11"/><text x="42.8806%" y="1087.50"></text></g><g><title>leveldb::Slice::compare (6 samples, 0.10%)</title><rect x="42.7107%" y="1061" width="0.0961%" height="15" fill="rgb(247,136,51)" fg:x="2666" fg:w="6"/><text x="42.9607%" y="1071.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="42.7908%" y="1045" width="0.0160%" height="15" fill="rgb(231,47,47)" fg:x="2671" fg:w="1"/><text x="43.0408%" y="1055.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="42.8068%" y="1077" width="0.0160%" height="15" fill="rgb(211,192,36)" fg:x="2672" fg:w="1"/><text x="43.0568%" y="1087.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.03%)</title><rect x="42.8228%" y="1077" width="0.0320%" height="15" fill="rgb(229,156,32)" fg:x="2673" fg:w="2"/><text x="43.0728%" y="1087.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (16 samples, 0.26%)</title><rect x="42.8549%" y="1077" width="0.2563%" height="15" fill="rgb(248,213,20)" fg:x="2675" fg:w="16"/><text x="43.1049%" y="1087.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="43.0952%" y="1061" width="0.0160%" height="15" fill="rgb(217,64,7)" fg:x="2690" fg:w="1"/><text x="43.3452%" y="1071.50"></text></g><g><title>GetLengthPrefixedSlice (6 samples, 0.10%)</title><rect x="43.4476%" y="1061" width="0.0961%" height="15" fill="rgb(232,142,8)" fg:x="2712" fg:w="6"/><text x="43.6976%" y="1071.50"></text></g><g><title>leveldb::GetVarint32Ptr (5 samples, 0.08%)</title><rect x="43.4636%" y="1045" width="0.0801%" height="15" fill="rgb(224,92,44)" fg:x="2713" fg:w="5"/><text x="43.7136%" y="1055.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (28 samples, 0.45%)</title><rect x="43.1112%" y="1077" width="0.4486%" height="15" fill="rgb(214,169,17)" fg:x="2691" fg:w="28"/><text x="43.3612%" y="1087.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="43.5437%" y="1061" width="0.0160%" height="15" fill="rgb(210,59,37)" fg:x="2718" fg:w="1"/><text x="43.7937%" y="1071.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (71 samples, 1.14%)</title><rect x="42.4864%" y="1093" width="1.1375%" height="15" fill="rgb(214,116,48)" fg:x="2652" fg:w="71"/><text x="42.7364%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (4 samples, 0.06%)</title><rect x="43.5598%" y="1077" width="0.0641%" height="15" fill="rgb(244,191,6)" fg:x="2719" fg:w="4"/><text x="43.8098%" y="1087.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="43.6078%" y="1061" width="0.0160%" height="15" fill="rgb(241,50,52)" fg:x="2722" fg:w="1"/><text x="43.8578%" y="1071.50"></text></g><g><title>GetLengthPrefixedSlice (21 samples, 0.34%)</title><rect x="43.9282%" y="1077" width="0.3364%" height="15" fill="rgb(236,75,39)" fg:x="2742" fg:w="21"/><text x="44.1782%" y="1087.50"></text></g><g><title>leveldb::GetVarint32Ptr (21 samples, 0.34%)</title><rect x="43.9282%" y="1061" width="0.3364%" height="15" fill="rgb(236,99,0)" fg:x="2742" fg:w="21"/><text x="44.1782%" y="1071.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (44 samples, 0.70%)</title><rect x="43.6238%" y="1093" width="0.7049%" height="15" fill="rgb(207,202,15)" fg:x="2723" fg:w="44"/><text x="43.8738%" y="1103.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (4 samples, 0.06%)</title><rect x="44.2647%" y="1077" width="0.0641%" height="15" fill="rgb(233,207,14)" fg:x="2763" fg:w="4"/><text x="44.5147%" y="1087.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (4 samples, 0.06%)</title><rect x="44.3768%" y="1077" width="0.0641%" height="15" fill="rgb(226,27,51)" fg:x="2770" fg:w="4"/><text x="44.6268%" y="1087.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (150 samples, 2.40%)</title><rect x="42.0698%" y="1109" width="2.4031%" height="15" fill="rgb(206,104,42)" fg:x="2626" fg:w="150"/><text x="42.3198%" y="1119.50">le..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (9 samples, 0.14%)</title><rect x="44.3287%" y="1093" width="0.1442%" height="15" fill="rgb(212,225,4)" fg:x="2767" fg:w="9"/><text x="44.5787%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (2 samples, 0.03%)</title><rect x="44.4409%" y="1077" width="0.0320%" height="15" fill="rgb(233,96,42)" fg:x="2774" fg:w="2"/><text x="44.6909%" y="1087.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (2 samples, 0.03%)</title><rect x="44.4409%" y="1061" width="0.0320%" height="15" fill="rgb(229,21,32)" fg:x="2774" fg:w="2"/><text x="44.6909%" y="1071.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (2 samples, 0.03%)</title><rect x="44.4409%" y="1045" width="0.0320%" height="15" fill="rgb(226,216,24)" fg:x="2774" fg:w="2"/><text x="44.6909%" y="1055.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (3 samples, 0.05%)</title><rect x="44.6171%" y="1093" width="0.0481%" height="15" fill="rgb(221,163,17)" fg:x="2785" fg:w="3"/><text x="44.8671%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (13 samples, 0.21%)</title><rect x="44.4729%" y="1109" width="0.2083%" height="15" fill="rgb(216,216,42)" fg:x="2776" fg:w="13"/><text x="44.7229%" y="1119.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="44.6652%" y="1093" width="0.0160%" height="15" fill="rgb(240,118,7)" fg:x="2788" fg:w="1"/><text x="44.9152%" y="1103.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="44.6652%" y="1077" width="0.0160%" height="15" fill="rgb(221,67,37)" fg:x="2788" fg:w="1"/><text x="44.9152%" y="1087.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="44.6652%" y="1061" width="0.0160%" height="15" fill="rgb(241,32,44)" fg:x="2788" fg:w="1"/><text x="44.9152%" y="1071.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (188 samples, 3.01%)</title><rect x="41.6854%" y="1125" width="3.0119%" height="15" fill="rgb(235,204,43)" fg:x="2602" fg:w="188"/><text x="41.9354%" y="1135.50">lev..</text></g><g><title>leveldb::VarintLength (1 samples, 0.02%)</title><rect x="44.6812%" y="1109" width="0.0160%" height="15" fill="rgb(213,116,10)" fg:x="2789" fg:w="1"/><text x="44.9312%" y="1119.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (192 samples, 3.08%)</title><rect x="41.6533%" y="1141" width="3.0759%" height="15" fill="rgb(239,15,48)" fg:x="2600" fg:w="192"/><text x="41.9033%" y="1151.50">lev..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (2 samples, 0.03%)</title><rect x="44.6972%" y="1125" width="0.0320%" height="15" fill="rgb(207,123,36)" fg:x="2790" fg:w="2"/><text x="44.9472%" y="1135.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="44.7132%" y="1109" width="0.0160%" height="15" fill="rgb(209,103,30)" fg:x="2791" fg:w="1"/><text x="44.9632%" y="1119.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="44.7132%" y="1093" width="0.0160%" height="15" fill="rgb(238,100,19)" fg:x="2791" fg:w="1"/><text x="44.9632%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7132%" y="1077" width="0.0160%" height="15" fill="rgb(244,30,14)" fg:x="2791" fg:w="1"/><text x="44.9632%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7132%" y="1061" width="0.0160%" height="15" fill="rgb(249,174,6)" fg:x="2791" fg:w="1"/><text x="44.9632%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7132%" y="1045" width="0.0160%" height="15" fill="rgb(235,213,41)" fg:x="2791" fg:w="1"/><text x="44.9632%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7132%" y="1029" width="0.0160%" height="15" fill="rgb(213,118,6)" fg:x="2791" fg:w="1"/><text x="44.9632%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7132%" y="1013" width="0.0160%" height="15" fill="rgb(235,44,51)" fg:x="2791" fg:w="1"/><text x="44.9632%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7132%" y="997" width="0.0160%" height="15" fill="rgb(217,9,53)" fg:x="2791" fg:w="1"/><text x="44.9632%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7132%" y="981" width="0.0160%" height="15" fill="rgb(237,172,34)" fg:x="2791" fg:w="1"/><text x="44.9632%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7293%" y="997" width="0.0320%" height="15" fill="rgb(206,206,11)" fg:x="2792" fg:w="2"/><text x="44.9793%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7293%" y="981" width="0.0320%" height="15" fill="rgb(214,149,29)" fg:x="2792" fg:w="2"/><text x="44.9793%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7293%" y="965" width="0.0320%" height="15" fill="rgb(208,123,3)" fg:x="2792" fg:w="2"/><text x="44.9793%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7293%" y="949" width="0.0320%" height="15" fill="rgb(229,126,4)" fg:x="2792" fg:w="2"/><text x="44.9793%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7453%" y="933" width="0.0160%" height="15" fill="rgb(222,92,36)" fg:x="2793" fg:w="1"/><text x="44.9953%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7453%" y="917" width="0.0160%" height="15" fill="rgb(216,39,41)" fg:x="2793" fg:w="1"/><text x="44.9953%" y="927.50"></text></g><g><title>leveldb::Arena::AllocateAligned (5 samples, 0.08%)</title><rect x="44.7293%" y="1125" width="0.0801%" height="15" fill="rgb(253,127,28)" fg:x="2792" fg:w="5"/><text x="44.9793%" y="1135.50"></text></g><g><title>leveldb::Arena::AllocateFallback (5 samples, 0.08%)</title><rect x="44.7293%" y="1109" width="0.0801%" height="15" fill="rgb(249,152,51)" fg:x="2792" fg:w="5"/><text x="44.9793%" y="1119.50"></text></g><g><title>leveldb::Arena::AllocateFallback (5 samples, 0.08%)</title><rect x="44.7293%" y="1093" width="0.0801%" height="15" fill="rgb(209,123,42)" fg:x="2792" fg:w="5"/><text x="44.9793%" y="1103.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (5 samples, 0.08%)</title><rect x="44.7293%" y="1077" width="0.0801%" height="15" fill="rgb(241,118,22)" fg:x="2792" fg:w="5"/><text x="44.9793%" y="1087.50"></text></g><g><title>operator new (5 samples, 0.08%)</title><rect x="44.7293%" y="1061" width="0.0801%" height="15" fill="rgb(208,25,7)" fg:x="2792" fg:w="5"/><text x="44.9793%" y="1071.50"></text></g><g><title>malloc (5 samples, 0.08%)</title><rect x="44.7293%" y="1045" width="0.0801%" height="15" fill="rgb(243,144,39)" fg:x="2792" fg:w="5"/><text x="44.9793%" y="1055.50"></text></g><g><title>_int_malloc (5 samples, 0.08%)</title><rect x="44.7293%" y="1029" width="0.0801%" height="15" fill="rgb(250,50,5)" fg:x="2792" fg:w="5"/><text x="44.9793%" y="1039.50"></text></g><g><title>sysmalloc (5 samples, 0.08%)</title><rect x="44.7293%" y="1013" width="0.0801%" height="15" fill="rgb(207,67,11)" fg:x="2792" fg:w="5"/><text x="44.9793%" y="1023.50"></text></g><g><title>__mprotect (3 samples, 0.05%)</title><rect x="44.7613%" y="997" width="0.0481%" height="15" fill="rgb(245,204,40)" fg:x="2794" fg:w="3"/><text x="45.0113%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.7613%" y="981" width="0.0481%" height="15" fill="rgb(238,228,24)" fg:x="2794" fg:w="3"/><text x="45.0113%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.7613%" y="965" width="0.0481%" height="15" fill="rgb(217,116,22)" fg:x="2794" fg:w="3"/><text x="45.0113%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.7613%" y="949" width="0.0481%" height="15" fill="rgb(234,98,12)" fg:x="2794" fg:w="3"/><text x="45.0113%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.7613%" y="933" width="0.0481%" height="15" fill="rgb(242,170,50)" fg:x="2794" fg:w="3"/><text x="45.0113%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7773%" y="917" width="0.0320%" height="15" fill="rgb(235,7,5)" fg:x="2795" fg:w="2"/><text x="45.0273%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7773%" y="901" width="0.0320%" height="15" fill="rgb(241,114,28)" fg:x="2795" fg:w="2"/><text x="45.0273%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7773%" y="885" width="0.0320%" height="15" fill="rgb(246,112,42)" fg:x="2795" fg:w="2"/><text x="45.0273%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7933%" y="869" width="0.0160%" height="15" fill="rgb(248,228,14)" fg:x="2796" fg:w="1"/><text x="45.0433%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7933%" y="853" width="0.0160%" height="15" fill="rgb(208,133,18)" fg:x="2796" fg:w="1"/><text x="45.0433%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7933%" y="837" width="0.0160%" height="15" fill="rgb(207,35,49)" fg:x="2796" fg:w="1"/><text x="45.0433%" y="847.50"></text></g><g><title>leveldb::MemTable::Add (343 samples, 5.50%)</title><rect x="39.3303%" y="1173" width="5.4950%" height="15" fill="rgb(205,68,36)" fg:x="2455" fg:w="343"/><text x="39.5803%" y="1183.50">leveldb..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (316 samples, 5.06%)</title><rect x="39.7629%" y="1157" width="5.0625%" height="15" fill="rgb(245,62,40)" fg:x="2482" fg:w="316"/><text x="40.0129%" y="1167.50">leveld..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (6 samples, 0.10%)</title><rect x="44.7293%" y="1141" width="0.0961%" height="15" fill="rgb(228,27,24)" fg:x="2792" fg:w="6"/><text x="44.9793%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="44.8094%" y="1125" width="0.0160%" height="15" fill="rgb(253,19,12)" fg:x="2797" fg:w="1"/><text x="45.0594%" y="1135.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="44.8094%" y="1109" width="0.0160%" height="15" fill="rgb(232,28,20)" fg:x="2797" fg:w="1"/><text x="45.0594%" y="1119.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="44.8094%" y="1093" width="0.0160%" height="15" fill="rgb(218,35,51)" fg:x="2797" fg:w="1"/><text x="45.0594%" y="1103.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="44.8254%" y="1173" width="0.0160%" height="15" fill="rgb(212,90,40)" fg:x="2798" fg:w="1"/><text x="45.0754%" y="1183.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (363 samples, 5.82%)</title><rect x="39.0420%" y="1221" width="5.8154%" height="15" fill="rgb(220,172,12)" fg:x="2437" fg:w="363"/><text x="39.2920%" y="1231.50">leveldb..</text></g><g><title>leveldb::WriteBatch::Iterate (362 samples, 5.80%)</title><rect x="39.0580%" y="1205" width="5.7994%" height="15" fill="rgb(226,159,20)" fg:x="2438" fg:w="362"/><text x="39.3080%" y="1215.50">leveldb..</text></g><g><title>leveldb::WriteBatch::Iterate (345 samples, 5.53%)</title><rect x="39.3303%" y="1189" width="5.5271%" height="15" fill="rgb(234,205,16)" fg:x="2455" fg:w="345"/><text x="39.5803%" y="1199.50">leveldb..</text></g><g><title>leveldb::WriteBatch::Iterate (1 samples, 0.02%)</title><rect x="44.8414%" y="1173" width="0.0160%" height="15" fill="rgb(207,9,39)" fg:x="2799" fg:w="1"/><text x="45.0914%" y="1183.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="44.9215%" y="965" width="0.0320%" height="15" fill="rgb(249,143,15)" fg:x="2804" fg:w="2"/><text x="45.1715%" y="975.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="44.8895%" y="1013" width="0.0801%" height="15" fill="rgb(253,133,29)" fg:x="2802" fg:w="5"/><text x="45.1395%" y="1023.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="44.8895%" y="997" width="0.0801%" height="15" fill="rgb(221,187,0)" fg:x="2802" fg:w="5"/><text x="45.1395%" y="1007.50"></text></g><g><title>[[ext4]] (4 samples, 0.06%)</title><rect x="44.9055%" y="981" width="0.0641%" height="15" fill="rgb(205,204,26)" fg:x="2803" fg:w="4"/><text x="45.1555%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.9535%" y="965" width="0.0160%" height="15" fill="rgb(224,68,54)" fg:x="2806" fg:w="1"/><text x="45.2035%" y="975.50"></text></g><g><title>Flush (14 samples, 0.22%)</title><rect x="44.8574%" y="1189" width="0.2243%" height="15" fill="rgb(209,67,4)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1199.50"></text></g><g><title>FlushBuffer (14 samples, 0.22%)</title><rect x="44.8574%" y="1173" width="0.2243%" height="15" fill="rgb(228,229,18)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (14 samples, 0.22%)</title><rect x="44.8574%" y="1157" width="0.2243%" height="15" fill="rgb(231,89,13)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1167.50"></text></g><g><title>__GI___libc_write (14 samples, 0.22%)</title><rect x="44.8574%" y="1141" width="0.2243%" height="15" fill="rgb(210,182,18)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1151.50"></text></g><g><title>[unknown] (14 samples, 0.22%)</title><rect x="44.8574%" y="1125" width="0.2243%" height="15" fill="rgb(240,105,2)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1135.50"></text></g><g><title>[unknown] (14 samples, 0.22%)</title><rect x="44.8574%" y="1109" width="0.2243%" height="15" fill="rgb(207,170,50)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1119.50"></text></g><g><title>[unknown] (14 samples, 0.22%)</title><rect x="44.8574%" y="1093" width="0.2243%" height="15" fill="rgb(232,133,24)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1103.50"></text></g><g><title>[unknown] (14 samples, 0.22%)</title><rect x="44.8574%" y="1077" width="0.2243%" height="15" fill="rgb(235,166,27)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1087.50"></text></g><g><title>[[ext4]] (14 samples, 0.22%)</title><rect x="44.8574%" y="1061" width="0.2243%" height="15" fill="rgb(209,19,13)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1071.50"></text></g><g><title>[unknown] (14 samples, 0.22%)</title><rect x="44.8574%" y="1045" width="0.2243%" height="15" fill="rgb(226,79,39)" fg:x="2800" fg:w="14"/><text x="45.1074%" y="1055.50"></text></g><g><title>[[ext4]] (13 samples, 0.21%)</title><rect x="44.8734%" y="1029" width="0.2083%" height="15" fill="rgb(222,163,10)" fg:x="2801" fg:w="13"/><text x="45.1234%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="44.9696%" y="1013" width="0.1121%" height="15" fill="rgb(214,44,19)" fg:x="2807" fg:w="7"/><text x="45.2196%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="44.9696%" y="997" width="0.1121%" height="15" fill="rgb(210,217,13)" fg:x="2807" fg:w="7"/><text x="45.2196%" y="1007.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="44.9856%" y="981" width="0.0961%" height="15" fill="rgb(237,61,54)" fg:x="2808" fg:w="6"/><text x="45.2356%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="44.9856%" y="965" width="0.0961%" height="15" fill="rgb(226,184,24)" fg:x="2808" fg:w="6"/><text x="45.2356%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="45.0016%" y="949" width="0.0801%" height="15" fill="rgb(223,226,4)" fg:x="2809" fg:w="5"/><text x="45.2516%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="45.0497%" y="933" width="0.0320%" height="15" fill="rgb(210,26,41)" fg:x="2812" fg:w="2"/><text x="45.2997%" y="943.50"></text></g><g><title>CDBWrapper::WriteBatch (378 samples, 6.06%)</title><rect x="39.0420%" y="1253" width="6.0558%" height="15" fill="rgb(220,221,6)" fg:x="2437" fg:w="378"/><text x="39.2920%" y="1263.50">CDBWrapp..</text></g><g><title>leveldb::DBImpl::Write (378 samples, 6.06%)</title><rect x="39.0420%" y="1237" width="6.0558%" height="15" fill="rgb(225,89,49)" fg:x="2437" fg:w="378"/><text x="39.2920%" y="1247.50">leveldb:..</text></g><g><title>leveldb::log::Writer::AddRecord (15 samples, 0.24%)</title><rect x="44.8574%" y="1221" width="0.2403%" height="15" fill="rgb(218,70,45)" fg:x="2800" fg:w="15"/><text x="45.1074%" y="1231.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (15 samples, 0.24%)</title><rect x="44.8574%" y="1205" width="0.2403%" height="15" fill="rgb(238,166,21)" fg:x="2800" fg:w="15"/><text x="45.1074%" y="1215.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="45.0817%" y="1189" width="0.0160%" height="15" fill="rgb(224,141,44)" fg:x="2814" fg:w="1"/><text x="45.3317%" y="1199.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="45.0817%" y="1173" width="0.0160%" height="15" fill="rgb(230,12,49)" fg:x="2814" fg:w="1"/><text x="45.3317%" y="1183.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="1093" width="0.0160%" height="15" fill="rgb(212,174,12)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="1103.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="1077" width="0.0160%" height="15" fill="rgb(246,67,9)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="1087.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="1061" width="0.0160%" height="15" fill="rgb(239,35,23)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="1071.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="45.0977%" y="1045" width="0.0160%" height="15" fill="rgb(211,167,0)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="1055.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="1029" width="0.0160%" height="15" fill="rgb(225,119,45)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="1039.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="1013" width="0.0160%" height="15" fill="rgb(210,162,6)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="1023.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="997" width="0.0160%" height="15" fill="rgb(208,118,35)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="1007.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="981" width="0.0160%" height="15" fill="rgb(239,4,53)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="991.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="965" width="0.0160%" height="15" fill="rgb(213,130,21)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="975.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="45.0977%" y="949" width="0.0160%" height="15" fill="rgb(235,148,0)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="959.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="933" width="0.0160%" height="15" fill="rgb(244,224,18)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="943.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="45.0977%" y="917" width="0.0160%" height="15" fill="rgb(211,214,4)" fg:x="2815" fg:w="1"/><text x="45.3477%" y="927.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="45.1137%" y="1045" width="0.0160%" height="15" fill="rgb(206,119,25)" fg:x="2816" fg:w="1"/><text x="45.3637%" y="1055.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="45.1137%" y="1029" width="0.0160%" height="15" fill="rgb(243,93,47)" fg:x="2816" fg:w="1"/><text x="45.3637%" y="1039.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="45.1137%" y="1013" width="0.0160%" height="15" fill="rgb(224,194,6)" fg:x="2816" fg:w="1"/><text x="45.3637%" y="1023.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.03%)</title><rect x="45.1298%" y="1045" width="0.0320%" height="15" fill="rgb(243,229,6)" fg:x="2817" fg:w="2"/><text x="45.3798%" y="1055.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (2 samples, 0.03%)</title><rect x="45.1298%" y="1029" width="0.0320%" height="15" fill="rgb(207,23,50)" fg:x="2817" fg:w="2"/><text x="45.3798%" y="1039.50"></text></g><g><title>DataStream::write (2 samples, 0.03%)</title><rect x="45.1298%" y="1013" width="0.0320%" height="15" fill="rgb(253,192,32)" fg:x="2817" fg:w="2"/><text x="45.3798%" y="1023.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.03%)</title><rect x="45.1298%" y="997" width="0.0320%" height="15" fill="rgb(213,21,6)" fg:x="2817" fg:w="2"/><text x="45.3798%" y="1007.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="45.1298%" y="981" width="0.0320%" height="15" fill="rgb(243,151,13)" fg:x="2817" fg:w="2"/><text x="45.3798%" y="991.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1458%" y="965" width="0.0160%" height="15" fill="rgb(233,165,41)" fg:x="2818" fg:w="1"/><text x="45.3958%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="45.0977%" y="1189" width="0.0801%" height="15" fill="rgb(246,176,45)" fg:x="2815" fg:w="5"/><text x="45.3477%" y="1199.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (5 samples, 0.08%)</title><rect x="45.0977%" y="1173" width="0.0801%" height="15" fill="rgb(217,170,52)" fg:x="2815" fg:w="5"/><text x="45.3477%" y="1183.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (5 samples, 0.08%)</title><rect x="45.0977%" y="1157" width="0.0801%" height="15" fill="rgb(214,203,54)" fg:x="2815" fg:w="5"/><text x="45.3477%" y="1167.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (5 samples, 0.08%)</title><rect x="45.0977%" y="1141" width="0.0801%" height="15" fill="rgb(248,215,49)" fg:x="2815" fg:w="5"/><text x="45.3477%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="45.0977%" y="1125" width="0.0801%" height="15" fill="rgb(208,46,10)" fg:x="2815" fg:w="5"/><text x="45.3477%" y="1135.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="45.0977%" y="1109" width="0.0801%" height="15" fill="rgb(254,5,31)" fg:x="2815" fg:w="5"/><text x="45.3477%" y="1119.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="45.1137%" y="1093" width="0.0641%" height="15" fill="rgb(222,104,33)" fg:x="2816" fg:w="4"/><text x="45.3637%" y="1103.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (4 samples, 0.06%)</title><rect x="45.1137%" y="1077" width="0.0641%" height="15" fill="rgb(248,49,16)" fg:x="2816" fg:w="4"/><text x="45.3637%" y="1087.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (4 samples, 0.06%)</title><rect x="45.1137%" y="1061" width="0.0641%" height="15" fill="rgb(232,198,41)" fg:x="2816" fg:w="4"/><text x="45.3637%" y="1071.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="45.1618%" y="1045" width="0.0160%" height="15" fill="rgb(214,125,3)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="1055.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1618%" y="1029" width="0.0160%" height="15" fill="rgb(229,220,28)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="1039.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="45.1618%" y="1013" width="0.0160%" height="15" fill="rgb(222,64,37)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="1023.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="45.1618%" y="997" width="0.0160%" height="15" fill="rgb(249,184,13)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="1007.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="45.1618%" y="981" width="0.0160%" height="15" fill="rgb(252,176,6)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="991.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="45.1618%" y="965" width="0.0160%" height="15" fill="rgb(228,153,7)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="975.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="45.1618%" y="949" width="0.0160%" height="15" fill="rgb(242,193,5)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="959.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="45.1618%" y="933" width="0.0160%" height="15" fill="rgb(232,140,9)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="943.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="45.1618%" y="917" width="0.0160%" height="15" fill="rgb(213,222,16)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="927.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1618%" y="901" width="0.0160%" height="15" fill="rgb(222,75,50)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="911.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="45.1618%" y="885" width="0.0160%" height="15" fill="rgb(205,180,2)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="45.1618%" y="869" width="0.0160%" height="15" fill="rgb(216,34,7)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="879.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="45.1618%" y="853" width="0.0160%" height="15" fill="rgb(253,16,32)" fg:x="2819" fg:w="1"/><text x="45.4118%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.1938%" y="1061" width="0.0160%" height="15" fill="rgb(208,97,28)" fg:x="2821" fg:w="1"/><text x="45.4438%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.1938%" y="1045" width="0.0160%" height="15" fill="rgb(225,92,11)" fg:x="2821" fg:w="1"/><text x="45.4438%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.1938%" y="1029" width="0.0160%" height="15" fill="rgb(243,38,12)" fg:x="2821" fg:w="1"/><text x="45.4438%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.1938%" y="1013" width="0.0160%" height="15" fill="rgb(208,139,16)" fg:x="2821" fg:w="1"/><text x="45.4438%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.1938%" y="997" width="0.0160%" height="15" fill="rgb(227,24,9)" fg:x="2821" fg:w="1"/><text x="45.4438%" y="1007.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (19 samples, 0.30%)</title><rect x="45.1778%" y="1141" width="0.3044%" height="15" fill="rgb(206,62,11)" fg:x="2820" fg:w="19"/><text x="45.4278%" y="1151.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (19 samples, 0.30%)</title><rect x="45.1778%" y="1125" width="0.3044%" height="15" fill="rgb(228,134,27)" fg:x="2820" fg:w="19"/><text x="45.4278%" y="1135.50"></text></g><g><title>DataStream::write (19 samples, 0.30%)</title><rect x="45.1778%" y="1109" width="0.3044%" height="15" fill="rgb(205,55,33)" fg:x="2820" fg:w="19"/><text x="45.4278%" y="1119.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (19 samples, 0.30%)</title><rect x="45.1778%" y="1093" width="0.3044%" height="15" fill="rgb(243,75,43)" fg:x="2820" fg:w="19"/><text x="45.4278%" y="1103.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (19 samples, 0.30%)</title><rect x="45.1778%" y="1077" width="0.3044%" height="15" fill="rgb(223,27,42)" fg:x="2820" fg:w="19"/><text x="45.4278%" y="1087.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (17 samples, 0.27%)</title><rect x="45.2099%" y="1061" width="0.2723%" height="15" fill="rgb(232,189,33)" fg:x="2822" fg:w="17"/><text x="45.4599%" y="1071.50"></text></g><g><title>decltype  (13 samples, 0.21%)</title><rect x="45.2740%" y="1045" width="0.2083%" height="15" fill="rgb(210,9,39)" fg:x="2826" fg:w="13"/><text x="45.5240%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (13 samples, 0.21%)</title><rect x="45.2740%" y="1029" width="0.2083%" height="15" fill="rgb(242,85,26)" fg:x="2826" fg:w="13"/><text x="45.5240%" y="1039.50"></text></g><g><title>decltype (13 samples, 0.21%)</title><rect x="45.2740%" y="1013" width="0.2083%" height="15" fill="rgb(248,44,4)" fg:x="2826" fg:w="13"/><text x="45.5240%" y="1023.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (26 samples, 0.42%)</title><rect x="45.0977%" y="1237" width="0.4165%" height="15" fill="rgb(250,96,46)" fg:x="2815" fg:w="26"/><text x="45.3477%" y="1247.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (26 samples, 0.42%)</title><rect x="45.0977%" y="1221" width="0.4165%" height="15" fill="rgb(229,116,26)" fg:x="2815" fg:w="26"/><text x="45.3477%" y="1231.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (26 samples, 0.42%)</title><rect x="45.0977%" y="1205" width="0.4165%" height="15" fill="rgb(246,94,34)" fg:x="2815" fg:w="26"/><text x="45.3477%" y="1215.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (21 samples, 0.34%)</title><rect x="45.1778%" y="1189" width="0.3364%" height="15" fill="rgb(251,73,21)" fg:x="2820" fg:w="21"/><text x="45.4278%" y="1199.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (21 samples, 0.34%)</title><rect x="45.1778%" y="1173" width="0.3364%" height="15" fill="rgb(254,121,25)" fg:x="2820" fg:w="21"/><text x="45.4278%" y="1183.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (21 samples, 0.34%)</title><rect x="45.1778%" y="1157" width="0.3364%" height="15" fill="rgb(215,161,49)" fg:x="2820" fg:w="21"/><text x="45.4278%" y="1167.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="45.4822%" y="1141" width="0.0320%" height="15" fill="rgb(221,43,13)" fg:x="2839" fg:w="2"/><text x="45.7322%" y="1151.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="45.4822%" y="1125" width="0.0320%" height="15" fill="rgb(249,5,37)" fg:x="2839" fg:w="2"/><text x="45.7322%" y="1135.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="45.4982%" y="1109" width="0.0160%" height="15" fill="rgb(226,25,44)" fg:x="2840" fg:w="1"/><text x="45.7482%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="45.4982%" y="1093" width="0.0160%" height="15" fill="rgb(238,189,16)" fg:x="2840" fg:w="1"/><text x="45.7482%" y="1103.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="45.4982%" y="1077" width="0.0160%" height="15" fill="rgb(251,186,8)" fg:x="2840" fg:w="1"/><text x="45.7482%" y="1087.50"></text></g><g><title>CCoinsViewDB::BatchWrite (5 samples, 0.08%)</title><rect x="45.5143%" y="1013" width="0.0801%" height="15" fill="rgb(254,34,31)" fg:x="2841" fg:w="5"/><text x="45.7643%" y="1023.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (5 samples, 0.08%)</title><rect x="45.5143%" y="997" width="0.0801%" height="15" fill="rgb(225,215,27)" fg:x="2841" fg:w="5"/><text x="45.7643%" y="1007.50"></text></g><g><title>DataStream::reserve (5 samples, 0.08%)</title><rect x="45.5143%" y="981" width="0.0801%" height="15" fill="rgb(221,192,48)" fg:x="2841" fg:w="5"/><text x="45.7643%" y="991.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (5 samples, 0.08%)</title><rect x="45.5143%" y="965" width="0.0801%" height="15" fill="rgb(219,137,20)" fg:x="2841" fg:w="5"/><text x="45.7643%" y="975.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="45.5944%" y="1013" width="0.0160%" height="15" fill="rgb(219,84,11)" fg:x="2846" fg:w="1"/><text x="45.8444%" y="1023.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="45.5944%" y="997" width="0.0160%" height="15" fill="rgb(224,10,23)" fg:x="2846" fg:w="1"/><text x="45.8444%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="45.5944%" y="981" width="0.0160%" height="15" fill="rgb(248,22,39)" fg:x="2846" fg:w="1"/><text x="45.8444%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="45.5944%" y="965" width="0.0160%" height="15" fill="rgb(212,154,20)" fg:x="2846" fg:w="1"/><text x="45.8444%" y="975.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="45.5944%" y="949" width="0.0160%" height="15" fill="rgb(236,199,50)" fg:x="2846" fg:w="1"/><text x="45.8444%" y="959.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="45.5944%" y="933" width="0.0160%" height="15" fill="rgb(211,9,17)" fg:x="2846" fg:w="1"/><text x="45.8444%" y="943.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (8 samples, 0.13%)</title><rect x="45.5143%" y="1125" width="0.1282%" height="15" fill="rgb(243,216,36)" fg:x="2841" fg:w="8"/><text x="45.7643%" y="1135.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (8 samples, 0.13%)</title><rect x="45.5143%" y="1109" width="0.1282%" height="15" fill="rgb(250,2,10)" fg:x="2841" fg:w="8"/><text x="45.7643%" y="1119.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (8 samples, 0.13%)</title><rect x="45.5143%" y="1093" width="0.1282%" height="15" fill="rgb(226,50,48)" fg:x="2841" fg:w="8"/><text x="45.7643%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (8 samples, 0.13%)</title><rect x="45.5143%" y="1077" width="0.1282%" height="15" fill="rgb(243,81,16)" fg:x="2841" fg:w="8"/><text x="45.7643%" y="1087.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (8 samples, 0.13%)</title><rect x="45.5143%" y="1061" width="0.1282%" height="15" fill="rgb(250,14,2)" fg:x="2841" fg:w="8"/><text x="45.7643%" y="1071.50"></text></g><g><title>DataStream::write (8 samples, 0.13%)</title><rect x="45.5143%" y="1045" width="0.1282%" height="15" fill="rgb(233,135,29)" fg:x="2841" fg:w="8"/><text x="45.7643%" y="1055.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (8 samples, 0.13%)</title><rect x="45.5143%" y="1029" width="0.1282%" height="15" fill="rgb(224,64,43)" fg:x="2841" fg:w="8"/><text x="45.7643%" y="1039.50"></text></g><g><title>leveldb::PutVarint32 (2 samples, 0.03%)</title><rect x="45.6104%" y="1013" width="0.0320%" height="15" fill="rgb(238,84,13)" fg:x="2847" fg:w="2"/><text x="45.8604%" y="1023.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.03%)</title><rect x="45.6104%" y="997" width="0.0320%" height="15" fill="rgb(253,48,26)" fg:x="2847" fg:w="2"/><text x="45.8604%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="45.6104%" y="981" width="0.0320%" height="15" fill="rgb(205,223,31)" fg:x="2847" fg:w="2"/><text x="45.8604%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="45.6264%" y="965" width="0.0160%" height="15" fill="rgb(221,41,32)" fg:x="2848" fg:w="1"/><text x="45.8764%" y="975.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="45.6264%" y="949" width="0.0160%" height="15" fill="rgb(213,158,31)" fg:x="2848" fg:w="1"/><text x="45.8764%" y="959.50"></text></g><g><title>CCoinsViewDB::BatchWrite (464 samples, 7.43%)</title><rect x="38.2249%" y="1269" width="7.4335%" height="15" fill="rgb(245,126,43)" fg:x="2386" fg:w="464"/><text x="38.4749%" y="1279.50">CCoinsView..</text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (35 samples, 0.56%)</title><rect x="45.0977%" y="1253" width="0.5607%" height="15" fill="rgb(227,7,22)" fg:x="2815" fg:w="35"/><text x="45.3477%" y="1263.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (9 samples, 0.14%)</title><rect x="45.5143%" y="1237" width="0.1442%" height="15" fill="rgb(252,90,44)" fg:x="2841" fg:w="9"/><text x="45.7643%" y="1247.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (9 samples, 0.14%)</title><rect x="45.5143%" y="1221" width="0.1442%" height="15" fill="rgb(253,91,0)" fg:x="2841" fg:w="9"/><text x="45.7643%" y="1231.50"></text></g><g><title>Serialize&lt;DataStream&gt; (9 samples, 0.14%)</title><rect x="45.5143%" y="1205" width="0.1442%" height="15" fill="rgb(252,175,49)" fg:x="2841" fg:w="9"/><text x="45.7643%" y="1215.50"></text></g><g><title>Ser&lt;DataStream&gt; (9 samples, 0.14%)</title><rect x="45.5143%" y="1189" width="0.1442%" height="15" fill="rgb(246,150,1)" fg:x="2841" fg:w="9"/><text x="45.7643%" y="1199.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (9 samples, 0.14%)</title><rect x="45.5143%" y="1173" width="0.1442%" height="15" fill="rgb(241,192,25)" fg:x="2841" fg:w="9"/><text x="45.7643%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (9 samples, 0.14%)</title><rect x="45.5143%" y="1157" width="0.1442%" height="15" fill="rgb(239,187,11)" fg:x="2841" fg:w="9"/><text x="45.7643%" y="1167.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (9 samples, 0.14%)</title><rect x="45.5143%" y="1141" width="0.1442%" height="15" fill="rgb(218,202,51)" fg:x="2841" fg:w="9"/><text x="45.7643%" y="1151.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="45.6424%" y="1125" width="0.0160%" height="15" fill="rgb(225,176,8)" fg:x="2849" fg:w="1"/><text x="45.8924%" y="1135.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="45.6424%" y="1109" width="0.0160%" height="15" fill="rgb(219,122,41)" fg:x="2849" fg:w="1"/><text x="45.8924%" y="1119.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="45.6424%" y="1093" width="0.0160%" height="15" fill="rgb(248,140,20)" fg:x="2849" fg:w="1"/><text x="45.8924%" y="1103.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="45.6424%" y="1077" width="0.0160%" height="15" fill="rgb(245,41,37)" fg:x="2849" fg:w="1"/><text x="45.8924%" y="1087.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="45.6424%" y="1061" width="0.0160%" height="15" fill="rgb(235,82,39)" fg:x="2849" fg:w="1"/><text x="45.8924%" y="1071.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="45.6584%" y="1269" width="0.0160%" height="15" fill="rgb(230,108,42)" fg:x="2850" fg:w="1"/><text x="45.9084%" y="1279.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="45.6745%" y="1269" width="0.0160%" height="15" fill="rgb(215,150,50)" fg:x="2851" fg:w="1"/><text x="45.9245%" y="1279.50"></text></g><g><title>leveldb::WriteBatchInternal::Count (1 samples, 0.02%)</title><rect x="45.6905%" y="1269" width="0.0160%" height="15" fill="rgb(233,212,5)" fg:x="2852" fg:w="1"/><text x="45.9405%" y="1279.50"></text></g><g><title>leveldb::WriteBatchInternal::SetCount (1 samples, 0.02%)</title><rect x="45.7065%" y="1269" width="0.0160%" height="15" fill="rgb(245,80,22)" fg:x="2853" fg:w="1"/><text x="45.9565%" y="1279.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (2 samples, 0.03%)</title><rect x="45.7706%" y="1221" width="0.0320%" height="15" fill="rgb(238,129,16)" fg:x="2857" fg:w="2"/><text x="46.0206%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (15 samples, 0.24%)</title><rect x="45.8026%" y="1205" width="0.2403%" height="15" fill="rgb(240,19,0)" fg:x="2859" fg:w="15"/><text x="46.0526%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (15 samples, 0.24%)</title><rect x="45.8026%" y="1189" width="0.2403%" height="15" fill="rgb(232,42,35)" fg:x="2859" fg:w="15"/><text x="46.0526%" y="1199.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (15 samples, 0.24%)</title><rect x="45.8026%" y="1173" width="0.2403%" height="15" fill="rgb(223,130,24)" fg:x="2859" fg:w="15"/><text x="46.0526%" y="1183.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (9 samples, 0.14%)</title><rect x="45.8988%" y="1157" width="0.1442%" height="15" fill="rgb(237,16,22)" fg:x="2865" fg:w="9"/><text x="46.1488%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (9 samples, 0.14%)</title><rect x="45.8988%" y="1141" width="0.1442%" height="15" fill="rgb(248,192,20)" fg:x="2865" fg:w="9"/><text x="46.1488%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (9 samples, 0.14%)</title><rect x="45.8988%" y="1125" width="0.1442%" height="15" fill="rgb(233,167,2)" fg:x="2865" fg:w="9"/><text x="46.1488%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (3 samples, 0.05%)</title><rect x="45.9949%" y="1109" width="0.0481%" height="15" fill="rgb(252,71,44)" fg:x="2871" fg:w="3"/><text x="46.2449%" y="1119.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (37 samples, 0.59%)</title><rect x="45.7225%" y="1269" width="0.5928%" height="15" fill="rgb(238,37,47)" fg:x="2854" fg:w="37"/><text x="45.9725%" y="1279.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (37 samples, 0.59%)</title><rect x="45.7225%" y="1253" width="0.5928%" height="15" fill="rgb(214,202,54)" fg:x="2854" fg:w="37"/><text x="45.9725%" y="1263.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (37 samples, 0.59%)</title><rect x="45.7225%" y="1237" width="0.5928%" height="15" fill="rgb(254,165,40)" fg:x="2854" fg:w="37"/><text x="45.9725%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (32 samples, 0.51%)</title><rect x="45.8026%" y="1221" width="0.5127%" height="15" fill="rgb(246,173,38)" fg:x="2859" fg:w="32"/><text x="46.0526%" y="1231.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (17 samples, 0.27%)</title><rect x="46.0429%" y="1205" width="0.2723%" height="15" fill="rgb(215,3,27)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (17 samples, 0.27%)</title><rect x="46.0429%" y="1189" width="0.2723%" height="15" fill="rgb(239,169,51)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (17 samples, 0.27%)</title><rect x="46.0429%" y="1173" width="0.2723%" height="15" fill="rgb(212,5,25)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1183.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (17 samples, 0.27%)</title><rect x="46.0429%" y="1157" width="0.2723%" height="15" fill="rgb(243,45,17)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1167.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (17 samples, 0.27%)</title><rect x="46.0429%" y="1141" width="0.2723%" height="15" fill="rgb(242,97,9)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1151.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (17 samples, 0.27%)</title><rect x="46.0429%" y="1125" width="0.2723%" height="15" fill="rgb(228,71,31)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1135.50"></text></g><g><title>Coin::~Coin (17 samples, 0.27%)</title><rect x="46.0429%" y="1109" width="0.2723%" height="15" fill="rgb(252,184,16)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1119.50"></text></g><g><title>CTxOut::~CTxOut (17 samples, 0.27%)</title><rect x="46.0429%" y="1093" width="0.2723%" height="15" fill="rgb(236,169,46)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1103.50"></text></g><g><title>CScript::~CScript (17 samples, 0.27%)</title><rect x="46.0429%" y="1077" width="0.2723%" height="15" fill="rgb(207,17,47)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (17 samples, 0.27%)</title><rect x="46.0429%" y="1061" width="0.2723%" height="15" fill="rgb(206,201,28)" fg:x="2874" fg:w="17"/><text x="46.2929%" y="1071.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="46.2993%" y="1045" width="0.0160%" height="15" fill="rgb(224,184,23)" fg:x="2890" fg:w="1"/><text x="46.5493%" y="1055.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="46.2993%" y="1029" width="0.0160%" height="15" fill="rgb(208,139,48)" fg:x="2890" fg:w="1"/><text x="46.5493%" y="1039.50"></text></g><g><title>CCoinsViewCache::Flush (513 samples, 8.22%)</title><rect x="38.1128%" y="1285" width="8.2185%" height="15" fill="rgb(208,130,10)" fg:x="2379" fg:w="513"/><text x="38.3628%" y="1295.50">CCoinsViewC..</text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="46.3153%" y="1269" width="0.0160%" height="15" fill="rgb(211,213,45)" fg:x="2891" fg:w="1"/><text x="46.5653%" y="1279.50"></text></g><g><title>node::BlockManager::FlushChainstateBlockFile (2 samples, 0.03%)</title><rect x="46.3313%" y="1285" width="0.0320%" height="15" fill="rgb(235,100,30)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1295.50"></text></g><g><title>node::BlockManager::FlushBlockFile (2 samples, 0.03%)</title><rect x="46.3313%" y="1269" width="0.0320%" height="15" fill="rgb(206,144,31)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1279.50"></text></g><g><title>FlatFileSeq::Flush (2 samples, 0.03%)</title><rect x="46.3313%" y="1253" width="0.0320%" height="15" fill="rgb(224,200,26)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1263.50"></text></g><g><title>FileCommit (2 samples, 0.03%)</title><rect x="46.3313%" y="1237" width="0.0320%" height="15" fill="rgb(247,104,53)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1247.50"></text></g><g><title>fdatasync (2 samples, 0.03%)</title><rect x="46.3313%" y="1221" width="0.0320%" height="15" fill="rgb(220,14,17)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.3313%" y="1205" width="0.0320%" height="15" fill="rgb(230,140,40)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.3313%" y="1189" width="0.0320%" height="15" fill="rgb(229,2,41)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.3313%" y="1173" width="0.0320%" height="15" fill="rgb(232,89,16)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1183.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="46.3313%" y="1157" width="0.0320%" height="15" fill="rgb(247,59,52)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.3313%" y="1141" width="0.0320%" height="15" fill="rgb(226,110,21)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.3313%" y="1125" width="0.0320%" height="15" fill="rgb(224,176,43)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.3313%" y="1109" width="0.0320%" height="15" fill="rgb(221,73,6)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.3313%" y="1093" width="0.0320%" height="15" fill="rgb(232,78,19)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1103.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="46.3313%" y="1077" width="0.0320%" height="15" fill="rgb(233,112,48)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1087.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="46.3313%" y="1061" width="0.0320%" height="15" fill="rgb(243,131,47)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1071.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="46.3313%" y="1045" width="0.0320%" height="15" fill="rgb(226,51,1)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1055.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="46.3313%" y="1029" width="0.0320%" height="15" fill="rgb(247,58,7)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1039.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="46.3313%" y="1013" width="0.0320%" height="15" fill="rgb(209,7,32)" fg:x="2892" fg:w="2"/><text x="46.5813%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.3473%" y="997" width="0.0160%" height="15" fill="rgb(209,39,41)" fg:x="2893" fg:w="1"/><text x="46.5973%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.3473%" y="981" width="0.0160%" height="15" fill="rgb(226,182,46)" fg:x="2893" fg:w="1"/><text x="46.5973%" y="991.50"></text></g><g><title>Chainstate::FlushStateToDisk (516 samples, 8.27%)</title><rect x="38.1128%" y="1301" width="8.2666%" height="15" fill="rgb(230,219,10)" fg:x="2379" fg:w="516"/><text x="38.3628%" y="1311.50">Chainstate::..</text></g><g><title>node::BlockManager::WriteBlockIndexDB (1 samples, 0.02%)</title><rect x="46.3633%" y="1285" width="0.0160%" height="15" fill="rgb(227,175,30)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1295.50"></text></g><g><title>kernel::BlockTreeDB::WriteBatchSync (1 samples, 0.02%)</title><rect x="46.3633%" y="1269" width="0.0160%" height="15" fill="rgb(217,2,50)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1279.50"></text></g><g><title>CDBWrapper::WriteBatch (1 samples, 0.02%)</title><rect x="46.3633%" y="1253" width="0.0160%" height="15" fill="rgb(229,160,0)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1263.50"></text></g><g><title>leveldb::DBImpl::Write (1 samples, 0.02%)</title><rect x="46.3633%" y="1237" width="0.0160%" height="15" fill="rgb(207,78,37)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1247.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (1 samples, 0.02%)</title><rect x="46.3633%" y="1221" width="0.0160%" height="15" fill="rgb(225,57,0)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1231.50"></text></g><g><title>leveldb::WriteBatch::Iterate (1 samples, 0.02%)</title><rect x="46.3633%" y="1205" width="0.0160%" height="15" fill="rgb(232,154,2)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1215.50"></text></g><g><title>leveldb::WriteBatch::Iterate (1 samples, 0.02%)</title><rect x="46.3633%" y="1189" width="0.0160%" height="15" fill="rgb(241,212,25)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1199.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="46.3633%" y="1173" width="0.0160%" height="15" fill="rgb(226,69,20)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="46.3633%" y="1157" width="0.0160%" height="15" fill="rgb(247,184,54)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="46.3633%" y="1141" width="0.0160%" height="15" fill="rgb(210,145,0)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="46.3633%" y="1125" width="0.0160%" height="15" fill="rgb(253,82,12)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1135.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="46.3633%" y="1109" width="0.0160%" height="15" fill="rgb(245,42,11)" fg:x="2894" fg:w="1"/><text x="46.6133%" y="1119.50"></text></g><g><title>SerialTaskRunner::MaybeScheduleProcessQueue (1 samples, 0.02%)</title><rect x="46.3794%" y="1285" width="0.0160%" height="15" fill="rgb(219,147,32)" fg:x="2895" fg:w="1"/><text x="46.6294%" y="1295.50"></text></g><g><title>SerialTaskRunner::MaybeScheduleProcessQueue (1 samples, 0.02%)</title><rect x="46.3794%" y="1269" width="0.0160%" height="15" fill="rgb(246,12,7)" fg:x="2895" fg:w="1"/><text x="46.6294%" y="1279.50"></text></g><g><title>SerialTaskRunner::MaybeScheduleProcessQueue (1 samples, 0.02%)</title><rect x="46.3794%" y="1253" width="0.0160%" height="15" fill="rgb(243,50,9)" fg:x="2895" fg:w="1"/><text x="46.6294%" y="1263.50"></text></g><g><title>Chainstate::ActivateBestChain (2,092 samples, 33.51%)</title><rect x="12.8965%" y="1317" width="33.5149%" height="15" fill="rgb(219,149,6)" fg:x="805" fg:w="2092"/><text x="13.1465%" y="1327.50">Chainstate::ActivateBestChain</text></g><g><title>ValidationSignals::BlockConnected (2 samples, 0.03%)</title><rect x="46.3794%" y="1301" width="0.0320%" height="15" fill="rgb(241,51,42)" fg:x="2895" fg:w="2"/><text x="46.6294%" y="1311.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; (1 samples, 0.02%)</title><rect x="46.3954%" y="1285" width="0.0160%" height="15" fill="rgb(226,128,27)" fg:x="2896" fg:w="1"/><text x="46.6454%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; (1 samples, 0.02%)</title><rect x="46.3954%" y="1269" width="0.0160%" height="15" fill="rgb(244,144,4)" fg:x="2896" fg:w="1"/><text x="46.6454%" y="1279.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.02%)</title><rect x="46.3954%" y="1253" width="0.0160%" height="15" fill="rgb(221,4,13)" fg:x="2896" fg:w="1"/><text x="46.6454%" y="1263.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.02%)</title><rect x="46.3954%" y="1237" width="0.0160%" height="15" fill="rgb(208,170,28)" fg:x="2896" fg:w="1"/><text x="46.6454%" y="1247.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.02%)</title><rect x="46.3954%" y="1221" width="0.0160%" height="15" fill="rgb(226,131,13)" fg:x="2896" fg:w="1"/><text x="46.6454%" y="1231.50"></text></g><g><title>ContextualCheckBlock (2 samples, 0.03%)</title><rect x="46.4114%" y="1285" width="0.0320%" height="15" fill="rgb(215,72,41)" fg:x="2897" fg:w="2"/><text x="46.6614%" y="1295.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="46.4755%" y="885" width="0.0320%" height="15" fill="rgb(243,108,20)" fg:x="2901" fg:w="2"/><text x="46.7255%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.4915%" y="869" width="0.0160%" height="15" fill="rgb(230,189,17)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="853" width="0.0160%" height="15" fill="rgb(220,50,17)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="837" width="0.0160%" height="15" fill="rgb(248,152,48)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="821" width="0.0160%" height="15" fill="rgb(244,91,11)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="805" width="0.0160%" height="15" fill="rgb(220,157,5)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="789" width="0.0160%" height="15" fill="rgb(253,137,8)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="773" width="0.0160%" height="15" fill="rgb(217,137,51)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="783.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="757" width="0.0160%" height="15" fill="rgb(218,209,53)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="767.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="741" width="0.0160%" height="15" fill="rgb(249,137,25)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="751.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="725" width="0.0160%" height="15" fill="rgb(239,155,26)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="709" width="0.0160%" height="15" fill="rgb(227,85,46)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="693" width="0.0160%" height="15" fill="rgb(251,107,43)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="677" width="0.0160%" height="15" fill="rgb(234,170,33)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="687.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4915%" y="661" width="0.0160%" height="15" fill="rgb(206,29,35)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="46.4915%" y="645" width="0.0160%" height="15" fill="rgb(227,138,25)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="655.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="46.4915%" y="629" width="0.0160%" height="15" fill="rgb(249,131,35)" fg:x="2902" fg:w="1"/><text x="46.7415%" y="639.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (5 samples, 0.08%)</title><rect x="46.4595%" y="965" width="0.0801%" height="15" fill="rgb(239,6,40)" fg:x="2900" fg:w="5"/><text x="46.7095%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (5 samples, 0.08%)</title><rect x="46.4595%" y="949" width="0.0801%" height="15" fill="rgb(246,136,47)" fg:x="2900" fg:w="5"/><text x="46.7095%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="46.4595%" y="933" width="0.0801%" height="15" fill="rgb(253,58,26)" fg:x="2900" fg:w="5"/><text x="46.7095%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="46.4595%" y="917" width="0.0801%" height="15" fill="rgb(237,141,10)" fg:x="2900" fg:w="5"/><text x="46.7095%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="46.4595%" y="901" width="0.0801%" height="15" fill="rgb(234,156,12)" fg:x="2900" fg:w="5"/><text x="46.7095%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5075%" y="885" width="0.0320%" height="15" fill="rgb(243,224,36)" fg:x="2903" fg:w="2"/><text x="46.7575%" y="895.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5236%" y="869" width="0.0160%" height="15" fill="rgb(205,229,51)" fg:x="2904" fg:w="1"/><text x="46.7736%" y="879.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="46.5236%" y="853" width="0.0160%" height="15" fill="rgb(223,189,4)" fg:x="2904" fg:w="1"/><text x="46.7736%" y="863.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="46.5236%" y="837" width="0.0160%" height="15" fill="rgb(249,167,54)" fg:x="2904" fg:w="1"/><text x="46.7736%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5556%" y="773" width="0.0160%" height="15" fill="rgb(218,34,28)" fg:x="2906" fg:w="1"/><text x="46.8056%" y="783.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5556%" y="757" width="0.0160%" height="15" fill="rgb(232,109,42)" fg:x="2906" fg:w="1"/><text x="46.8056%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="46.5556%" y="741" width="0.0160%" height="15" fill="rgb(248,214,46)" fg:x="2906" fg:w="1"/><text x="46.8056%" y="751.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="46.5556%" y="725" width="0.0160%" height="15" fill="rgb(244,216,40)" fg:x="2906" fg:w="1"/><text x="46.8056%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.03%)</title><rect x="46.5556%" y="885" width="0.0320%" height="15" fill="rgb(231,226,31)" fg:x="2906" fg:w="2"/><text x="46.8056%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.03%)</title><rect x="46.5556%" y="869" width="0.0320%" height="15" fill="rgb(238,38,43)" fg:x="2906" fg:w="2"/><text x="46.8056%" y="879.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5556%" y="853" width="0.0320%" height="15" fill="rgb(208,88,43)" fg:x="2906" fg:w="2"/><text x="46.8056%" y="863.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5556%" y="837" width="0.0320%" height="15" fill="rgb(205,136,37)" fg:x="2906" fg:w="2"/><text x="46.8056%" y="847.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="46.5556%" y="821" width="0.0320%" height="15" fill="rgb(237,34,14)" fg:x="2906" fg:w="2"/><text x="46.8056%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.03%)</title><rect x="46.5556%" y="805" width="0.0320%" height="15" fill="rgb(236,193,44)" fg:x="2906" fg:w="2"/><text x="46.8056%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.03%)</title><rect x="46.5556%" y="789" width="0.0320%" height="15" fill="rgb(231,48,10)" fg:x="2906" fg:w="2"/><text x="46.8056%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="46.5716%" y="773" width="0.0160%" height="15" fill="rgb(213,141,34)" fg:x="2907" fg:w="1"/><text x="46.8216%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5716%" y="757" width="0.0160%" height="15" fill="rgb(249,130,34)" fg:x="2907" fg:w="1"/><text x="46.8216%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5716%" y="741" width="0.0160%" height="15" fill="rgb(219,42,41)" fg:x="2907" fg:w="1"/><text x="46.8216%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.5716%" y="725" width="0.0160%" height="15" fill="rgb(224,100,54)" fg:x="2907" fg:w="1"/><text x="46.8216%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5716%" y="709" width="0.0160%" height="15" fill="rgb(229,200,27)" fg:x="2907" fg:w="1"/><text x="46.8216%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5716%" y="693" width="0.0160%" height="15" fill="rgb(217,118,10)" fg:x="2907" fg:w="1"/><text x="46.8216%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="46.5716%" y="677" width="0.0160%" height="15" fill="rgb(206,22,3)" fg:x="2907" fg:w="1"/><text x="46.8216%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="46.5716%" y="661" width="0.0160%" height="15" fill="rgb(232,163,46)" fg:x="2907" fg:w="1"/><text x="46.8216%" y="671.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="46.5716%" y="645" width="0.0160%" height="15" fill="rgb(206,95,13)" fg:x="2907" fg:w="1"/><text x="46.8216%" y="655.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (4 samples, 0.06%)</title><rect x="46.5396%" y="965" width="0.0641%" height="15" fill="rgb(253,154,18)" fg:x="2905" fg:w="4"/><text x="46.7896%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (4 samples, 0.06%)</title><rect x="46.5396%" y="949" width="0.0641%" height="15" fill="rgb(219,32,23)" fg:x="2905" fg:w="4"/><text x="46.7896%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="46.5396%" y="933" width="0.0641%" height="15" fill="rgb(230,191,45)" fg:x="2905" fg:w="4"/><text x="46.7896%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="46.5396%" y="917" width="0.0641%" height="15" fill="rgb(229,64,36)" fg:x="2905" fg:w="4"/><text x="46.7896%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="46.5556%" y="901" width="0.0481%" height="15" fill="rgb(205,129,25)" fg:x="2906" fg:w="3"/><text x="46.8056%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.5876%" y="885" width="0.0160%" height="15" fill="rgb(254,112,7)" fg:x="2908" fg:w="1"/><text x="46.8376%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.5876%" y="869" width="0.0160%" height="15" fill="rgb(226,53,48)" fg:x="2908" fg:w="1"/><text x="46.8376%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5876%" y="853" width="0.0160%" height="15" fill="rgb(214,153,38)" fg:x="2908" fg:w="1"/><text x="46.8376%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5876%" y="837" width="0.0160%" height="15" fill="rgb(243,101,7)" fg:x="2908" fg:w="1"/><text x="46.8376%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.5876%" y="821" width="0.0160%" height="15" fill="rgb(240,140,22)" fg:x="2908" fg:w="1"/><text x="46.8376%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.5876%" y="805" width="0.0160%" height="15" fill="rgb(235,114,2)" fg:x="2908" fg:w="1"/><text x="46.8376%" y="815.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.5876%" y="789" width="0.0160%" height="15" fill="rgb(242,59,12)" fg:x="2908" fg:w="1"/><text x="46.8376%" y="799.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="46.6037%" y="853" width="0.0320%" height="15" fill="rgb(252,134,9)" fg:x="2909" fg:w="2"/><text x="46.8537%" y="863.50"></text></g><g><title>SizeComputer::write (2 samples, 0.03%)</title><rect x="46.6037%" y="837" width="0.0320%" height="15" fill="rgb(236,4,44)" fg:x="2909" fg:w="2"/><text x="46.8537%" y="847.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.6357%" y="853" width="0.0160%" height="15" fill="rgb(254,172,41)" fg:x="2911" fg:w="1"/><text x="46.8857%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.6517%" y="837" width="0.0160%" height="15" fill="rgb(244,63,20)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="821" width="0.0160%" height="15" fill="rgb(250,73,31)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="805" width="0.0160%" height="15" fill="rgb(241,38,36)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="789" width="0.0160%" height="15" fill="rgb(245,211,2)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="773" width="0.0160%" height="15" fill="rgb(206,120,28)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="757" width="0.0160%" height="15" fill="rgb(211,59,34)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="741" width="0.0160%" height="15" fill="rgb(233,168,5)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="751.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="725" width="0.0160%" height="15" fill="rgb(234,33,13)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="735.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="709" width="0.0160%" height="15" fill="rgb(231,150,26)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="719.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="693" width="0.0160%" height="15" fill="rgb(217,191,4)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="677" width="0.0160%" height="15" fill="rgb(246,198,38)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="661" width="0.0160%" height="15" fill="rgb(245,64,37)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="645" width="0.0160%" height="15" fill="rgb(250,30,36)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="629" width="0.0160%" height="15" fill="rgb(217,86,53)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="613" width="0.0160%" height="15" fill="rgb(228,157,16)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="597" width="0.0160%" height="15" fill="rgb(217,59,31)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="581" width="0.0160%" height="15" fill="rgb(237,138,41)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="565" width="0.0160%" height="15" fill="rgb(227,91,49)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="46.6517%" y="549" width="0.0160%" height="15" fill="rgb(247,21,44)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="559.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="46.6517%" y="533" width="0.0160%" height="15" fill="rgb(219,210,51)" fg:x="2912" fg:w="1"/><text x="46.9017%" y="543.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="46.6037%" y="885" width="0.0801%" height="15" fill="rgb(209,140,6)" fg:x="2909" fg:w="5"/><text x="46.8537%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (5 samples, 0.08%)</title><rect x="46.6037%" y="869" width="0.0801%" height="15" fill="rgb(221,188,24)" fg:x="2909" fg:w="5"/><text x="46.8537%" y="879.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="46.6517%" y="853" width="0.0320%" height="15" fill="rgb(232,154,20)" fg:x="2912" fg:w="2"/><text x="46.9017%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.6677%" y="837" width="0.0160%" height="15" fill="rgb(244,137,50)" fg:x="2913" fg:w="1"/><text x="46.9177%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.6677%" y="821" width="0.0160%" height="15" fill="rgb(225,185,43)" fg:x="2913" fg:w="1"/><text x="46.9177%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6677%" y="805" width="0.0160%" height="15" fill="rgb(213,205,38)" fg:x="2913" fg:w="1"/><text x="46.9177%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6677%" y="789" width="0.0160%" height="15" fill="rgb(236,73,12)" fg:x="2913" fg:w="1"/><text x="46.9177%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.6677%" y="773" width="0.0160%" height="15" fill="rgb(235,219,13)" fg:x="2913" fg:w="1"/><text x="46.9177%" y="783.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (16 samples, 0.26%)</title><rect x="46.4434%" y="981" width="0.2563%" height="15" fill="rgb(218,59,36)" fg:x="2899" fg:w="16"/><text x="46.6934%" y="991.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (6 samples, 0.10%)</title><rect x="46.6037%" y="965" width="0.0961%" height="15" fill="rgb(205,110,39)" fg:x="2909" fg:w="6"/><text x="46.8537%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="46.6037%" y="949" width="0.0961%" height="15" fill="rgb(218,206,42)" fg:x="2909" fg:w="6"/><text x="46.8537%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="46.6037%" y="933" width="0.0961%" height="15" fill="rgb(248,125,24)" fg:x="2909" fg:w="6"/><text x="46.8537%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="46.6037%" y="917" width="0.0961%" height="15" fill="rgb(242,28,27)" fg:x="2909" fg:w="6"/><text x="46.8537%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="46.6037%" y="901" width="0.0961%" height="15" fill="rgb(216,228,15)" fg:x="2909" fg:w="6"/><text x="46.8537%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.6838%" y="885" width="0.0160%" height="15" fill="rgb(235,116,46)" fg:x="2914" fg:w="1"/><text x="46.9338%" y="895.50"></text></g><g><title>ContextualCheckBlock (22 samples, 0.35%)</title><rect x="46.4114%" y="1301" width="0.3525%" height="15" fill="rgb(224,18,32)" fg:x="2897" fg:w="22"/><text x="46.6614%" y="1311.50"></text></g><g><title>GetBlockWeight (20 samples, 0.32%)</title><rect x="46.4434%" y="1285" width="0.3204%" height="15" fill="rgb(252,5,12)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1295.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1269" width="0.3204%" height="15" fill="rgb(251,36,5)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (20 samples, 0.32%)</title><rect x="46.4434%" y="1253" width="0.3204%" height="15" fill="rgb(217,53,14)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1237" width="0.3204%" height="15" fill="rgb(215,86,45)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1221" width="0.3204%" height="15" fill="rgb(242,169,11)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1205" width="0.3204%" height="15" fill="rgb(211,213,45)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1215.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1189" width="0.3204%" height="15" fill="rgb(205,88,11)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1199.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1173" width="0.3204%" height="15" fill="rgb(252,69,26)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1183.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1157" width="0.3204%" height="15" fill="rgb(246,123,37)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1141" width="0.3204%" height="15" fill="rgb(212,205,5)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1151.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1125" width="0.3204%" height="15" fill="rgb(253,148,0)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1109" width="0.3204%" height="15" fill="rgb(239,22,4)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1093" width="0.3204%" height="15" fill="rgb(226,26,53)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1077" width="0.3204%" height="15" fill="rgb(225,229,45)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1061" width="0.3204%" height="15" fill="rgb(220,60,37)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1045" width="0.3204%" height="15" fill="rgb(217,180,35)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1029" width="0.3204%" height="15" fill="rgb(229,7,53)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="1013" width="0.3204%" height="15" fill="rgb(254,137,3)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1023.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.32%)</title><rect x="46.4434%" y="997" width="0.3204%" height="15" fill="rgb(215,140,41)" fg:x="2899" fg:w="20"/><text x="46.6934%" y="1007.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="46.6998%" y="981" width="0.0641%" height="15" fill="rgb(250,80,15)" fg:x="2915" fg:w="4"/><text x="46.9498%" y="991.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="46.7158%" y="965" width="0.0481%" height="15" fill="rgb(252,191,6)" fg:x="2916" fg:w="3"/><text x="46.9658%" y="975.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="46.7158%" y="949" width="0.0481%" height="15" fill="rgb(246,217,18)" fg:x="2916" fg:w="3"/><text x="46.9658%" y="959.50"></text></g><g><title>SizeComputer::write (3 samples, 0.05%)</title><rect x="46.7158%" y="933" width="0.0481%" height="15" fill="rgb(223,93,7)" fg:x="2916" fg:w="3"/><text x="46.9658%" y="943.50"></text></g><g><title>FlatFileSeq::Allocate (1 samples, 0.02%)</title><rect x="46.7639%" y="1269" width="0.0160%" height="15" fill="rgb(225,55,52)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1279.50"></text></g><g><title>AllocateFileRange (1 samples, 0.02%)</title><rect x="46.7639%" y="1253" width="0.0160%" height="15" fill="rgb(240,31,24)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1263.50"></text></g><g><title>posix_fallocate (1 samples, 0.02%)</title><rect x="46.7639%" y="1237" width="0.0160%" height="15" fill="rgb(205,56,52)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7639%" y="1221" width="0.0160%" height="15" fill="rgb(246,146,12)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7639%" y="1205" width="0.0160%" height="15" fill="rgb(239,84,36)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7639%" y="1189" width="0.0160%" height="15" fill="rgb(207,41,40)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7639%" y="1173" width="0.0160%" height="15" fill="rgb(241,179,25)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="46.7639%" y="1157" width="0.0160%" height="15" fill="rgb(210,0,34)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="46.7639%" y="1141" width="0.0160%" height="15" fill="rgb(225,217,29)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1151.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="46.7639%" y="1125" width="0.0160%" height="15" fill="rgb(216,191,38)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="46.7639%" y="1109" width="0.0160%" height="15" fill="rgb(232,140,52)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="46.7639%" y="1093" width="0.0160%" height="15" fill="rgb(223,158,51)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7639%" y="1077" width="0.0160%" height="15" fill="rgb(235,29,51)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7639%" y="1061" width="0.0160%" height="15" fill="rgb(215,181,18)" fg:x="2919" fg:w="1"/><text x="47.0139%" y="1071.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="46.8119%" y="1013" width="0.0320%" height="15" fill="rgb(227,125,34)" fg:x="2922" fg:w="2"/><text x="47.0619%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.8119%" y="997" width="0.0320%" height="15" fill="rgb(230,197,49)" fg:x="2922" fg:w="2"/><text x="47.0619%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.8119%" y="981" width="0.0320%" height="15" fill="rgb(239,141,16)" fg:x="2922" fg:w="2"/><text x="47.0619%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8279%" y="965" width="0.0160%" height="15" fill="rgb(225,105,43)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8279%" y="949" width="0.0160%" height="15" fill="rgb(214,131,14)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8279%" y="933" width="0.0160%" height="15" fill="rgb(229,177,11)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="943.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="46.8279%" y="917" width="0.0160%" height="15" fill="rgb(231,180,14)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="927.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="46.8279%" y="901" width="0.0160%" height="15" fill="rgb(232,88,2)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8279%" y="885" width="0.0160%" height="15" fill="rgb(205,220,8)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8279%" y="869" width="0.0160%" height="15" fill="rgb(225,23,53)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8279%" y="853" width="0.0160%" height="15" fill="rgb(213,62,29)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8279%" y="837" width="0.0160%" height="15" fill="rgb(227,75,7)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8279%" y="821" width="0.0160%" height="15" fill="rgb(207,105,14)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8279%" y="805" width="0.0160%" height="15" fill="rgb(245,62,29)" fg:x="2923" fg:w="1"/><text x="47.0779%" y="815.50"></text></g><g><title>[[ext4]] (8 samples, 0.13%)</title><rect x="46.8119%" y="1029" width="0.1282%" height="15" fill="rgb(236,202,4)" fg:x="2922" fg:w="8"/><text x="47.0619%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="46.8440%" y="1013" width="0.0961%" height="15" fill="rgb(250,67,1)" fg:x="2924" fg:w="6"/><text x="47.0940%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="46.8920%" y="997" width="0.0481%" height="15" fill="rgb(253,115,44)" fg:x="2927" fg:w="3"/><text x="47.1420%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.9080%" y="981" width="0.0320%" height="15" fill="rgb(251,139,18)" fg:x="2928" fg:w="2"/><text x="47.1580%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9241%" y="965" width="0.0160%" height="15" fill="rgb(218,22,32)" fg:x="2929" fg:w="1"/><text x="47.1741%" y="975.50"></text></g><g><title>[[nvme]] (2 samples, 0.03%)</title><rect x="46.9561%" y="949" width="0.0320%" height="15" fill="rgb(243,53,5)" fg:x="2931" fg:w="2"/><text x="47.2061%" y="959.50"></text></g><g><title>[[nvme]] (2 samples, 0.03%)</title><rect x="46.9561%" y="933" width="0.0320%" height="15" fill="rgb(227,56,16)" fg:x="2931" fg:w="2"/><text x="47.2061%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.9561%" y="917" width="0.0320%" height="15" fill="rgb(245,53,0)" fg:x="2931" fg:w="2"/><text x="47.2061%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9721%" y="901" width="0.0160%" height="15" fill="rgb(216,170,35)" fg:x="2932" fg:w="1"/><text x="47.2221%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9721%" y="885" width="0.0160%" height="15" fill="rgb(211,200,8)" fg:x="2932" fg:w="1"/><text x="47.2221%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9721%" y="869" width="0.0160%" height="15" fill="rgb(228,204,44)" fg:x="2932" fg:w="1"/><text x="47.2221%" y="879.50"></text></g><g><title>[[ext4]] (14 samples, 0.22%)</title><rect x="46.7799%" y="1077" width="0.2243%" height="15" fill="rgb(214,121,17)" fg:x="2920" fg:w="14"/><text x="47.0299%" y="1087.50"></text></g><g><title>[[ext4]] (14 samples, 0.22%)</title><rect x="46.7799%" y="1061" width="0.2243%" height="15" fill="rgb(233,64,38)" fg:x="2920" fg:w="14"/><text x="47.0299%" y="1071.50"></text></g><g><title>[[ext4]] (14 samples, 0.22%)</title><rect x="46.7799%" y="1045" width="0.2243%" height="15" fill="rgb(253,54,19)" fg:x="2920" fg:w="14"/><text x="47.0299%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="46.9401%" y="1029" width="0.0641%" height="15" fill="rgb(253,94,18)" fg:x="2930" fg:w="4"/><text x="47.1901%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="46.9561%" y="1013" width="0.0481%" height="15" fill="rgb(227,57,52)" fg:x="2931" fg:w="3"/><text x="47.2061%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="46.9561%" y="997" width="0.0481%" height="15" fill="rgb(230,228,50)" fg:x="2931" fg:w="3"/><text x="47.2061%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="46.9561%" y="981" width="0.0481%" height="15" fill="rgb(217,205,27)" fg:x="2931" fg:w="3"/><text x="47.2061%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="46.9561%" y="965" width="0.0481%" height="15" fill="rgb(252,71,50)" fg:x="2931" fg:w="3"/><text x="47.2061%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="949" width="0.0160%" height="15" fill="rgb(209,86,4)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="933" width="0.0160%" height="15" fill="rgb(229,94,0)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="917" width="0.0160%" height="15" fill="rgb(252,223,21)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="901" width="0.0160%" height="15" fill="rgb(230,210,4)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="885" width="0.0160%" height="15" fill="rgb(240,149,38)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="869" width="0.0160%" height="15" fill="rgb(254,105,20)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="853" width="0.0160%" height="15" fill="rgb(253,87,46)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="837" width="0.0160%" height="15" fill="rgb(253,116,33)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="821" width="0.0160%" height="15" fill="rgb(229,198,5)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="805" width="0.0160%" height="15" fill="rgb(242,38,37)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="789" width="0.0160%" height="15" fill="rgb(242,69,53)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="773" width="0.0160%" height="15" fill="rgb(249,80,16)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="757" width="0.0160%" height="15" fill="rgb(206,128,11)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9881%" y="741" width="0.0160%" height="15" fill="rgb(212,35,20)" fg:x="2933" fg:w="1"/><text x="47.2381%" y="751.50"></text></g><g><title>FlatFileSeq::Flush (20 samples, 0.32%)</title><rect x="46.7799%" y="1253" width="0.3204%" height="15" fill="rgb(236,79,13)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1263.50"></text></g><g><title>FileCommit (20 samples, 0.32%)</title><rect x="46.7799%" y="1237" width="0.3204%" height="15" fill="rgb(233,123,3)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1247.50"></text></g><g><title>fdatasync (20 samples, 0.32%)</title><rect x="46.7799%" y="1221" width="0.3204%" height="15" fill="rgb(214,93,52)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1231.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="46.7799%" y="1205" width="0.3204%" height="15" fill="rgb(251,37,40)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1215.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="46.7799%" y="1189" width="0.3204%" height="15" fill="rgb(227,80,54)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1199.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="46.7799%" y="1173" width="0.3204%" height="15" fill="rgb(254,48,11)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1183.50"></text></g><g><title>[[ext4]] (20 samples, 0.32%)</title><rect x="46.7799%" y="1157" width="0.3204%" height="15" fill="rgb(235,193,26)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1167.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="46.7799%" y="1141" width="0.3204%" height="15" fill="rgb(229,99,21)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1151.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="46.7799%" y="1125" width="0.3204%" height="15" fill="rgb(211,140,41)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1135.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="46.7799%" y="1109" width="0.3204%" height="15" fill="rgb(240,227,30)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1119.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="46.7799%" y="1093" width="0.3204%" height="15" fill="rgb(215,224,45)" fg:x="2920" fg:w="20"/><text x="47.0299%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="47.0042%" y="1077" width="0.0961%" height="15" fill="rgb(206,123,31)" fg:x="2934" fg:w="6"/><text x="47.2542%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="47.0202%" y="1061" width="0.0801%" height="15" fill="rgb(210,138,16)" fg:x="2935" fg:w="5"/><text x="47.2702%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="47.0202%" y="1045" width="0.0801%" height="15" fill="rgb(228,57,28)" fg:x="2935" fg:w="5"/><text x="47.2702%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="47.0202%" y="1029" width="0.0801%" height="15" fill="rgb(242,170,10)" fg:x="2935" fg:w="5"/><text x="47.2702%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="47.0202%" y="1013" width="0.0801%" height="15" fill="rgb(228,214,39)" fg:x="2935" fg:w="5"/><text x="47.2702%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="47.0362%" y="997" width="0.0641%" height="15" fill="rgb(218,179,33)" fg:x="2936" fg:w="4"/><text x="47.2862%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="47.0362%" y="981" width="0.0641%" height="15" fill="rgb(235,193,39)" fg:x="2936" fg:w="4"/><text x="47.2862%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="47.0362%" y="965" width="0.0641%" height="15" fill="rgb(219,221,36)" fg:x="2936" fg:w="4"/><text x="47.2862%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="47.0362%" y="949" width="0.0641%" height="15" fill="rgb(248,218,19)" fg:x="2936" fg:w="4"/><text x="47.2862%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.0843%" y="933" width="0.0160%" height="15" fill="rgb(205,50,9)" fg:x="2939" fg:w="1"/><text x="47.3343%" y="943.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.1003%" y="1061" width="0.0160%" height="15" fill="rgb(238,81,28)" fg:x="2940" fg:w="1"/><text x="47.3503%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.1003%" y="1045" width="0.0160%" height="15" fill="rgb(235,110,19)" fg:x="2940" fg:w="1"/><text x="47.3503%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.1003%" y="1029" width="0.0160%" height="15" fill="rgb(214,7,14)" fg:x="2940" fg:w="1"/><text x="47.3503%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.1003%" y="1013" width="0.0160%" height="15" fill="rgb(211,77,3)" fg:x="2940" fg:w="1"/><text x="47.3503%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.1003%" y="997" width="0.0160%" height="15" fill="rgb(229,5,9)" fg:x="2940" fg:w="1"/><text x="47.3503%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.1003%" y="981" width="0.0160%" height="15" fill="rgb(225,90,11)" fg:x="2940" fg:w="1"/><text x="47.3503%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.1003%" y="965" width="0.0160%" height="15" fill="rgb(242,56,8)" fg:x="2940" fg:w="1"/><text x="47.3503%" y="975.50"></text></g><g><title>node::BlockManager::FindNextBlockPos (23 samples, 0.37%)</title><rect x="46.7639%" y="1285" width="0.3685%" height="15" fill="rgb(249,212,39)" fg:x="2919" fg:w="23"/><text x="47.0139%" y="1295.50"></text></g><g><title>node::BlockManager::FlushBlockFile (22 samples, 0.35%)</title><rect x="46.7799%" y="1269" width="0.3525%" height="15" fill="rgb(236,90,9)" fg:x="2920" fg:w="22"/><text x="47.0299%" y="1279.50"></text></g><g><title>node::BlockManager::FlushUndoFile (2 samples, 0.03%)</title><rect x="47.1003%" y="1253" width="0.0320%" height="15" fill="rgb(206,88,35)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1263.50"></text></g><g><title>FlatFileSeq::Flush (2 samples, 0.03%)</title><rect x="47.1003%" y="1237" width="0.0320%" height="15" fill="rgb(205,126,30)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1247.50"></text></g><g><title>FileCommit (2 samples, 0.03%)</title><rect x="47.1003%" y="1221" width="0.0320%" height="15" fill="rgb(230,176,12)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1231.50"></text></g><g><title>fdatasync (2 samples, 0.03%)</title><rect x="47.1003%" y="1205" width="0.0320%" height="15" fill="rgb(243,19,9)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.1003%" y="1189" width="0.0320%" height="15" fill="rgb(245,171,17)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.1003%" y="1173" width="0.0320%" height="15" fill="rgb(227,52,21)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.1003%" y="1157" width="0.0320%" height="15" fill="rgb(238,69,14)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1167.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="47.1003%" y="1141" width="0.0320%" height="15" fill="rgb(241,156,39)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.1003%" y="1125" width="0.0320%" height="15" fill="rgb(212,227,28)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.1003%" y="1109" width="0.0320%" height="15" fill="rgb(209,118,27)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.1003%" y="1093" width="0.0320%" height="15" fill="rgb(226,102,5)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.1003%" y="1077" width="0.0320%" height="15" fill="rgb(223,34,3)" fg:x="2940" fg:w="2"/><text x="47.3503%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.1163%" y="1061" width="0.0160%" height="15" fill="rgb(221,81,38)" fg:x="2941" fg:w="1"/><text x="47.3663%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.1163%" y="1045" width="0.0160%" height="15" fill="rgb(236,219,28)" fg:x="2941" fg:w="1"/><text x="47.3663%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.1163%" y="1029" width="0.0160%" height="15" fill="rgb(213,200,14)" fg:x="2941" fg:w="1"/><text x="47.3663%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.1163%" y="1013" width="0.0160%" height="15" fill="rgb(240,33,19)" fg:x="2941" fg:w="1"/><text x="47.3663%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.1163%" y="997" width="0.0160%" height="15" fill="rgb(233,113,27)" fg:x="2941" fg:w="1"/><text x="47.3663%" y="1007.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (5 samples, 0.08%)</title><rect x="47.1483%" y="1125" width="0.0801%" height="15" fill="rgb(220,221,18)" fg:x="2943" fg:w="5"/><text x="47.3983%" y="1135.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (5 samples, 0.08%)</title><rect x="47.1483%" y="1109" width="0.0801%" height="15" fill="rgb(238,92,8)" fg:x="2943" fg:w="5"/><text x="47.3983%" y="1119.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (5 samples, 0.08%)</title><rect x="47.1483%" y="1093" width="0.0801%" height="15" fill="rgb(222,164,16)" fg:x="2943" fg:w="5"/><text x="47.3983%" y="1103.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (5 samples, 0.08%)</title><rect x="47.1483%" y="1077" width="0.0801%" height="15" fill="rgb(241,119,3)" fg:x="2943" fg:w="5"/><text x="47.3983%" y="1087.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (5 samples, 0.08%)</title><rect x="47.1483%" y="1061" width="0.0801%" height="15" fill="rgb(241,44,8)" fg:x="2943" fg:w="5"/><text x="47.3983%" y="1071.50"></text></g><g><title>AutoFile::write (10 samples, 0.16%)</title><rect x="47.1323%" y="1141" width="0.1602%" height="15" fill="rgb(230,36,40)" fg:x="2942" fg:w="10"/><text x="47.3823%" y="1151.50"></text></g><g><title>util::Xor (4 samples, 0.06%)</title><rect x="47.2285%" y="1125" width="0.0641%" height="15" fill="rgb(243,16,36)" fg:x="2948" fg:w="4"/><text x="47.4785%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.3086%" y="517" width="0.0160%" height="15" fill="rgb(231,4,26)" fg:x="2953" fg:w="1"/><text x="47.5586%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.3086%" y="501" width="0.0160%" height="15" fill="rgb(240,9,31)" fg:x="2953" fg:w="1"/><text x="47.5586%" y="511.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="47.3086%" y="533" width="0.0320%" height="15" fill="rgb(207,173,15)" fg:x="2953" fg:w="2"/><text x="47.5586%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.3246%" y="517" width="0.0160%" height="15" fill="rgb(224,192,53)" fg:x="2954" fg:w="1"/><text x="47.5746%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="47.2925%" y="789" width="0.0641%" height="15" fill="rgb(223,67,28)" fg:x="2952" fg:w="4"/><text x="47.5425%" y="799.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="47.2925%" y="773" width="0.0641%" height="15" fill="rgb(211,20,47)" fg:x="2952" fg:w="4"/><text x="47.5425%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.06%)</title><rect x="47.2925%" y="757" width="0.0641%" height="15" fill="rgb(240,228,2)" fg:x="2952" fg:w="4"/><text x="47.5425%" y="767.50"></text></g><g><title>AutoFile::write (4 samples, 0.06%)</title><rect x="47.2925%" y="741" width="0.0641%" height="15" fill="rgb(248,151,12)" fg:x="2952" fg:w="4"/><text x="47.5425%" y="751.50"></text></g><g><title>_IO_fwrite (4 samples, 0.06%)</title><rect x="47.2925%" y="725" width="0.0641%" height="15" fill="rgb(244,8,39)" fg:x="2952" fg:w="4"/><text x="47.5425%" y="735.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="47.3086%" y="709" width="0.0481%" height="15" fill="rgb(222,26,8)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="719.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="47.3086%" y="693" width="0.0481%" height="15" fill="rgb(213,106,44)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="703.50"></text></g><g><title>new_do_write (3 samples, 0.05%)</title><rect x="47.3086%" y="677" width="0.0481%" height="15" fill="rgb(214,129,20)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="47.3086%" y="661" width="0.0481%" height="15" fill="rgb(212,32,13)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="671.50"></text></g><g><title>__GI___libc_write (3 samples, 0.05%)</title><rect x="47.3086%" y="645" width="0.0481%" height="15" fill="rgb(208,168,33)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="47.3086%" y="629" width="0.0481%" height="15" fill="rgb(231,207,8)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="47.3086%" y="613" width="0.0481%" height="15" fill="rgb(235,219,23)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="47.3086%" y="597" width="0.0481%" height="15" fill="rgb(226,216,26)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="47.3086%" y="581" width="0.0481%" height="15" fill="rgb(239,137,16)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="591.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="47.3086%" y="565" width="0.0481%" height="15" fill="rgb(207,12,36)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="47.3086%" y="549" width="0.0481%" height="15" fill="rgb(210,214,24)" fg:x="2953" fg:w="3"/><text x="47.5586%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.3406%" y="533" width="0.0160%" height="15" fill="rgb(206,56,30)" fg:x="2955" fg:w="1"/><text x="47.5906%" y="543.50"></text></g><g><title>_IO_fwrite (3 samples, 0.05%)</title><rect x="47.3566%" y="629" width="0.0481%" height="15" fill="rgb(228,143,26)" fg:x="2956" fg:w="3"/><text x="47.6066%" y="639.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.3887%" y="613" width="0.0160%" height="15" fill="rgb(216,218,46)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="623.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.3887%" y="597" width="0.0160%" height="15" fill="rgb(206,6,19)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="607.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="47.3887%" y="581" width="0.0160%" height="15" fill="rgb(239,177,51)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="591.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.3887%" y="565" width="0.0160%" height="15" fill="rgb(216,55,25)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="575.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="47.3887%" y="549" width="0.0160%" height="15" fill="rgb(231,163,29)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.3887%" y="533" width="0.0160%" height="15" fill="rgb(232,149,50)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.3887%" y="517" width="0.0160%" height="15" fill="rgb(223,142,48)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.3887%" y="501" width="0.0160%" height="15" fill="rgb(245,83,23)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.3887%" y="485" width="0.0160%" height="15" fill="rgb(224,63,2)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="495.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.3887%" y="469" width="0.0160%" height="15" fill="rgb(218,65,53)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.3887%" y="453" width="0.0160%" height="15" fill="rgb(221,84,29)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.3887%" y="437" width="0.0160%" height="15" fill="rgb(234,0,32)" fg:x="2958" fg:w="1"/><text x="47.6387%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="47.3566%" y="693" width="0.0641%" height="15" fill="rgb(206,20,16)" fg:x="2956" fg:w="4"/><text x="47.6066%" y="703.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="47.3566%" y="677" width="0.0641%" height="15" fill="rgb(244,172,18)" fg:x="2956" fg:w="4"/><text x="47.6066%" y="687.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.06%)</title><rect x="47.3566%" y="661" width="0.0641%" height="15" fill="rgb(254,133,1)" fg:x="2956" fg:w="4"/><text x="47.6066%" y="671.50"></text></g><g><title>AutoFile::write (4 samples, 0.06%)</title><rect x="47.3566%" y="645" width="0.0641%" height="15" fill="rgb(222,206,41)" fg:x="2956" fg:w="4"/><text x="47.6066%" y="655.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="47.4047%" y="629" width="0.0160%" height="15" fill="rgb(212,3,42)" fg:x="2959" fg:w="1"/><text x="47.6547%" y="639.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.4688%" y="373" width="0.0160%" height="15" fill="rgb(241,11,4)" fg:x="2963" fg:w="1"/><text x="47.7188%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4688%" y="357" width="0.0160%" height="15" fill="rgb(205,19,26)" fg:x="2963" fg:w="1"/><text x="47.7188%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4688%" y="341" width="0.0160%" height="15" fill="rgb(210,179,32)" fg:x="2963" fg:w="1"/><text x="47.7188%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4688%" y="325" width="0.0160%" height="15" fill="rgb(227,116,49)" fg:x="2963" fg:w="1"/><text x="47.7188%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4688%" y="309" width="0.0160%" height="15" fill="rgb(211,146,6)" fg:x="2963" fg:w="1"/><text x="47.7188%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4688%" y="293" width="0.0160%" height="15" fill="rgb(219,44,39)" fg:x="2963" fg:w="1"/><text x="47.7188%" y="303.50"></text></g><g><title>[[ext4]] (7 samples, 0.11%)</title><rect x="47.4688%" y="389" width="0.1121%" height="15" fill="rgb(234,128,11)" fg:x="2963" fg:w="7"/><text x="47.7188%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="47.4848%" y="373" width="0.0961%" height="15" fill="rgb(220,183,53)" fg:x="2964" fg:w="6"/><text x="47.7348%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="47.4848%" y="357" width="0.0961%" height="15" fill="rgb(213,219,32)" fg:x="2964" fg:w="6"/><text x="47.7348%" y="367.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="47.5168%" y="341" width="0.0641%" height="15" fill="rgb(232,156,16)" fg:x="2966" fg:w="4"/><text x="47.7668%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="47.5328%" y="325" width="0.0481%" height="15" fill="rgb(246,135,34)" fg:x="2967" fg:w="3"/><text x="47.7828%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.5489%" y="309" width="0.0320%" height="15" fill="rgb(241,99,0)" fg:x="2968" fg:w="2"/><text x="47.7989%" y="319.50"></text></g><g><title>_IO_fwrite (11 samples, 0.18%)</title><rect x="47.4527%" y="581" width="0.1762%" height="15" fill="rgb(222,103,45)" fg:x="2962" fg:w="11"/><text x="47.7027%" y="591.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (11 samples, 0.18%)</title><rect x="47.4527%" y="565" width="0.1762%" height="15" fill="rgb(212,57,4)" fg:x="2962" fg:w="11"/><text x="47.7027%" y="575.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (11 samples, 0.18%)</title><rect x="47.4527%" y="549" width="0.1762%" height="15" fill="rgb(215,68,47)" fg:x="2962" fg:w="11"/><text x="47.7027%" y="559.50"></text></g><g><title>new_do_write (11 samples, 0.18%)</title><rect x="47.4527%" y="533" width="0.1762%" height="15" fill="rgb(230,84,2)" fg:x="2962" fg:w="11"/><text x="47.7027%" y="543.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (11 samples, 0.18%)</title><rect x="47.4527%" y="517" width="0.1762%" height="15" fill="rgb(220,102,14)" fg:x="2962" fg:w="11"/><text x="47.7027%" y="527.50"></text></g><g><title>__GI___libc_write (11 samples, 0.18%)</title><rect x="47.4527%" y="501" width="0.1762%" height="15" fill="rgb(240,10,32)" fg:x="2962" fg:w="11"/><text x="47.7027%" y="511.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="47.4688%" y="485" width="0.1602%" height="15" fill="rgb(215,47,27)" fg:x="2963" fg:w="10"/><text x="47.7188%" y="495.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="47.4688%" y="469" width="0.1602%" height="15" fill="rgb(233,188,43)" fg:x="2963" fg:w="10"/><text x="47.7188%" y="479.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="47.4688%" y="453" width="0.1602%" height="15" fill="rgb(253,190,1)" fg:x="2963" fg:w="10"/><text x="47.7188%" y="463.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="47.4688%" y="437" width="0.1602%" height="15" fill="rgb(206,114,52)" fg:x="2963" fg:w="10"/><text x="47.7188%" y="447.50"></text></g><g><title>[[ext4]] (10 samples, 0.16%)</title><rect x="47.4688%" y="421" width="0.1602%" height="15" fill="rgb(233,120,37)" fg:x="2963" fg:w="10"/><text x="47.7188%" y="431.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="47.4688%" y="405" width="0.1602%" height="15" fill="rgb(214,52,39)" fg:x="2963" fg:w="10"/><text x="47.7188%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="47.5809%" y="389" width="0.0481%" height="15" fill="rgb(223,80,29)" fg:x="2970" fg:w="3"/><text x="47.8309%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.6129%" y="373" width="0.0160%" height="15" fill="rgb(230,101,40)" fg:x="2972" fg:w="1"/><text x="47.8629%" y="383.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="47.6290%" y="581" width="0.0160%" height="15" fill="rgb(219,211,8)" fg:x="2973" fg:w="1"/><text x="47.8790%" y="591.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="47.6290%" y="565" width="0.0160%" height="15" fill="rgb(252,126,28)" fg:x="2973" fg:w="1"/><text x="47.8790%" y="575.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="47.6290%" y="549" width="0.0160%" height="15" fill="rgb(215,56,38)" fg:x="2973" fg:w="1"/><text x="47.8790%" y="559.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="47.6290%" y="533" width="0.0160%" height="15" fill="rgb(249,55,44)" fg:x="2973" fg:w="1"/><text x="47.8790%" y="543.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="47.6290%" y="517" width="0.0160%" height="15" fill="rgb(220,221,32)" fg:x="2973" fg:w="1"/><text x="47.8790%" y="527.50"></text></g><g><title>AutoFile::write (18 samples, 0.29%)</title><rect x="47.4207%" y="597" width="0.2884%" height="15" fill="rgb(212,216,41)" fg:x="2960" fg:w="18"/><text x="47.6707%" y="607.50"></text></g><g><title>util::Xor (4 samples, 0.06%)</title><rect x="47.6450%" y="581" width="0.0641%" height="15" fill="rgb(228,213,43)" fg:x="2974" fg:w="4"/><text x="47.8950%" y="591.50"></text></g><g><title>std::operator^= (2 samples, 0.03%)</title><rect x="47.6770%" y="565" width="0.0320%" height="15" fill="rgb(211,31,26)" fg:x="2976" fg:w="2"/><text x="47.9270%" y="575.50"></text></g><g><title>std::operator^ (2 samples, 0.03%)</title><rect x="47.6770%" y="549" width="0.0320%" height="15" fill="rgb(229,202,19)" fg:x="2976" fg:w="2"/><text x="47.9270%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (23 samples, 0.37%)</title><rect x="47.3566%" y="789" width="0.3685%" height="15" fill="rgb(229,105,46)" fg:x="2956" fg:w="23"/><text x="47.6066%" y="799.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.37%)</title><rect x="47.3566%" y="773" width="0.3685%" height="15" fill="rgb(235,108,1)" fg:x="2956" fg:w="23"/><text x="47.6066%" y="783.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.37%)</title><rect x="47.3566%" y="757" width="0.3685%" height="15" fill="rgb(245,111,35)" fg:x="2956" fg:w="23"/><text x="47.6066%" y="767.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (23 samples, 0.37%)</title><rect x="47.3566%" y="741" width="0.3685%" height="15" fill="rgb(219,185,31)" fg:x="2956" fg:w="23"/><text x="47.6066%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (23 samples, 0.37%)</title><rect x="47.3566%" y="725" width="0.3685%" height="15" fill="rgb(214,4,43)" fg:x="2956" fg:w="23"/><text x="47.6066%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (23 samples, 0.37%)</title><rect x="47.3566%" y="709" width="0.3685%" height="15" fill="rgb(235,227,40)" fg:x="2956" fg:w="23"/><text x="47.6066%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (19 samples, 0.30%)</title><rect x="47.4207%" y="693" width="0.3044%" height="15" fill="rgb(230,88,30)" fg:x="2960" fg:w="19"/><text x="47.6707%" y="703.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.30%)</title><rect x="47.4207%" y="677" width="0.3044%" height="15" fill="rgb(216,217,1)" fg:x="2960" fg:w="19"/><text x="47.6707%" y="687.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.30%)</title><rect x="47.4207%" y="661" width="0.3044%" height="15" fill="rgb(248,139,50)" fg:x="2960" fg:w="19"/><text x="47.6707%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (19 samples, 0.30%)</title><rect x="47.4207%" y="645" width="0.3044%" height="15" fill="rgb(233,1,21)" fg:x="2960" fg:w="19"/><text x="47.6707%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (19 samples, 0.30%)</title><rect x="47.4207%" y="629" width="0.3044%" height="15" fill="rgb(215,183,12)" fg:x="2960" fg:w="19"/><text x="47.6707%" y="639.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (19 samples, 0.30%)</title><rect x="47.4207%" y="613" width="0.3044%" height="15" fill="rgb(229,104,42)" fg:x="2960" fg:w="19"/><text x="47.6707%" y="623.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7091%" y="597" width="0.0160%" height="15" fill="rgb(243,34,48)" fg:x="2978" fg:w="1"/><text x="47.9591%" y="607.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="47.7251%" y="661" width="0.0320%" height="15" fill="rgb(239,11,44)" fg:x="2979" fg:w="2"/><text x="47.9751%" y="671.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="47.7251%" y="645" width="0.0320%" height="15" fill="rgb(231,98,35)" fg:x="2979" fg:w="2"/><text x="47.9751%" y="655.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.7411%" y="629" width="0.0160%" height="15" fill="rgb(233,28,25)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="639.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.7411%" y="613" width="0.0160%" height="15" fill="rgb(234,123,11)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="623.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="47.7411%" y="597" width="0.0160%" height="15" fill="rgb(220,69,3)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.7411%" y="581" width="0.0160%" height="15" fill="rgb(214,64,36)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="591.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="47.7411%" y="565" width="0.0160%" height="15" fill="rgb(211,138,32)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="549" width="0.0160%" height="15" fill="rgb(213,118,47)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="533" width="0.0160%" height="15" fill="rgb(243,124,49)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="517" width="0.0160%" height="15" fill="rgb(221,30,28)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="501" width="0.0160%" height="15" fill="rgb(246,37,13)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="511.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.7411%" y="485" width="0.0160%" height="15" fill="rgb(249,66,14)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="469" width="0.0160%" height="15" fill="rgb(213,166,5)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="479.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.7411%" y="453" width="0.0160%" height="15" fill="rgb(221,66,24)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="437" width="0.0160%" height="15" fill="rgb(210,132,17)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="421" width="0.0160%" height="15" fill="rgb(243,202,5)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="405" width="0.0160%" height="15" fill="rgb(233,70,48)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="389" width="0.0160%" height="15" fill="rgb(238,41,26)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7411%" y="373" width="0.0160%" height="15" fill="rgb(241,19,31)" fg:x="2980" fg:w="1"/><text x="47.9911%" y="383.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="47.7251%" y="677" width="0.0481%" height="15" fill="rgb(214,76,10)" fg:x="2979" fg:w="3"/><text x="47.9751%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="661" width="0.0160%" height="15" fill="rgb(254,202,22)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="645" width="0.0160%" height="15" fill="rgb(214,72,24)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="629" width="0.0160%" height="15" fill="rgb(221,92,46)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="613" width="0.0160%" height="15" fill="rgb(246,13,50)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="597" width="0.0160%" height="15" fill="rgb(240,165,38)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="581" width="0.0160%" height="15" fill="rgb(241,24,51)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="565" width="0.0160%" height="15" fill="rgb(227,51,44)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="549" width="0.0160%" height="15" fill="rgb(231,121,3)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="559.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="533" width="0.0160%" height="15" fill="rgb(245,3,41)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="543.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="517" width="0.0160%" height="15" fill="rgb(214,13,26)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="527.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="47.7571%" y="501" width="0.0160%" height="15" fill="rgb(252,75,11)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="485" width="0.0160%" height="15" fill="rgb(218,226,17)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="469" width="0.0160%" height="15" fill="rgb(248,89,38)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="453" width="0.0160%" height="15" fill="rgb(237,73,46)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="437" width="0.0160%" height="15" fill="rgb(242,78,33)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="421" width="0.0160%" height="15" fill="rgb(235,60,3)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="405" width="0.0160%" height="15" fill="rgb(216,172,19)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="415.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="389" width="0.0160%" height="15" fill="rgb(227,6,42)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="399.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="373" width="0.0160%" height="15" fill="rgb(223,207,42)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="383.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="357" width="0.0160%" height="15" fill="rgb(246,138,30)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="341" width="0.0160%" height="15" fill="rgb(251,199,47)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="351.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="325" width="0.0160%" height="15" fill="rgb(228,218,44)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="309" width="0.0160%" height="15" fill="rgb(220,68,6)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="319.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="293" width="0.0160%" height="15" fill="rgb(240,60,26)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="303.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="277" width="0.0160%" height="15" fill="rgb(211,200,19)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="287.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="261" width="0.0160%" height="15" fill="rgb(242,145,30)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="271.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="245" width="0.0160%" height="15" fill="rgb(225,64,13)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="255.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="229" width="0.0160%" height="15" fill="rgb(218,103,35)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="239.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="47.7571%" y="213" width="0.0160%" height="15" fill="rgb(216,93,46)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="223.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="47.7571%" y="197" width="0.0160%" height="15" fill="rgb(225,159,27)" fg:x="2981" fg:w="1"/><text x="48.0071%" y="207.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (34 samples, 0.54%)</title><rect x="47.2925%" y="981" width="0.5447%" height="15" fill="rgb(225,204,11)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="965" width="0.5447%" height="15" fill="rgb(205,56,4)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="949" width="0.5447%" height="15" fill="rgb(206,6,35)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="933" width="0.5447%" height="15" fill="rgb(247,73,52)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="917" width="0.5447%" height="15" fill="rgb(246,97,4)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="901" width="0.5447%" height="15" fill="rgb(212,37,15)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="885" width="0.5447%" height="15" fill="rgb(208,130,40)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="895.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="869" width="0.5447%" height="15" fill="rgb(236,55,29)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="879.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="853" width="0.5447%" height="15" fill="rgb(209,156,45)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="863.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="837" width="0.5447%" height="15" fill="rgb(249,107,4)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="821" width="0.5447%" height="15" fill="rgb(227,7,13)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (34 samples, 0.54%)</title><rect x="47.2925%" y="805" width="0.5447%" height="15" fill="rgb(250,129,14)" fg:x="2952" fg:w="34"/><text x="47.5425%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (7 samples, 0.11%)</title><rect x="47.7251%" y="789" width="0.1121%" height="15" fill="rgb(229,92,13)" fg:x="2979" fg:w="7"/><text x="47.9751%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.11%)</title><rect x="47.7251%" y="773" width="0.1121%" height="15" fill="rgb(245,98,39)" fg:x="2979" fg:w="7"/><text x="47.9751%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.11%)</title><rect x="47.7251%" y="757" width="0.1121%" height="15" fill="rgb(234,135,48)" fg:x="2979" fg:w="7"/><text x="47.9751%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (7 samples, 0.11%)</title><rect x="47.7251%" y="741" width="0.1121%" height="15" fill="rgb(230,98,28)" fg:x="2979" fg:w="7"/><text x="47.9751%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.11%)</title><rect x="47.7251%" y="725" width="0.1121%" height="15" fill="rgb(223,121,0)" fg:x="2979" fg:w="7"/><text x="47.9751%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.11%)</title><rect x="47.7251%" y="709" width="0.1121%" height="15" fill="rgb(234,173,33)" fg:x="2979" fg:w="7"/><text x="47.9751%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (7 samples, 0.11%)</title><rect x="47.7251%" y="693" width="0.1121%" height="15" fill="rgb(245,47,8)" fg:x="2979" fg:w="7"/><text x="47.9751%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="47.7731%" y="677" width="0.0641%" height="15" fill="rgb(205,17,20)" fg:x="2982" fg:w="4"/><text x="48.0231%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="47.7731%" y="661" width="0.0641%" height="15" fill="rgb(232,151,16)" fg:x="2982" fg:w="4"/><text x="48.0231%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.06%)</title><rect x="47.7731%" y="645" width="0.0641%" height="15" fill="rgb(208,30,32)" fg:x="2982" fg:w="4"/><text x="48.0231%" y="655.50"></text></g><g><title>AutoFile::write (4 samples, 0.06%)</title><rect x="47.7731%" y="629" width="0.0641%" height="15" fill="rgb(254,26,3)" fg:x="2982" fg:w="4"/><text x="48.0231%" y="639.50"></text></g><g><title>_IO_fwrite (4 samples, 0.06%)</title><rect x="47.7731%" y="613" width="0.0641%" height="15" fill="rgb(240,177,30)" fg:x="2982" fg:w="4"/><text x="48.0231%" y="623.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.8212%" y="597" width="0.0160%" height="15" fill="rgb(248,76,44)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="607.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.8212%" y="581" width="0.0160%" height="15" fill="rgb(241,186,54)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="591.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="47.8212%" y="565" width="0.0160%" height="15" fill="rgb(249,171,29)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="575.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="47.8212%" y="549" width="0.0160%" height="15" fill="rgb(237,151,44)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="559.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="47.8212%" y="533" width="0.0160%" height="15" fill="rgb(228,174,30)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="517" width="0.0160%" height="15" fill="rgb(252,14,37)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="501" width="0.0160%" height="15" fill="rgb(207,111,40)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="485" width="0.0160%" height="15" fill="rgb(248,171,54)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="469" width="0.0160%" height="15" fill="rgb(211,127,2)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="479.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.8212%" y="453" width="0.0160%" height="15" fill="rgb(236,87,47)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="437" width="0.0160%" height="15" fill="rgb(223,190,45)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="447.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.8212%" y="421" width="0.0160%" height="15" fill="rgb(215,5,16)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="405" width="0.0160%" height="15" fill="rgb(252,82,33)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="389" width="0.0160%" height="15" fill="rgb(247,213,44)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="373" width="0.0160%" height="15" fill="rgb(205,196,44)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="357" width="0.0160%" height="15" fill="rgb(237,96,54)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8212%" y="341" width="0.0160%" height="15" fill="rgb(230,113,34)" fg:x="2985" fg:w="1"/><text x="48.0712%" y="351.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.8533%" y="517" width="0.0160%" height="15" fill="rgb(221,224,12)" fg:x="2987" fg:w="1"/><text x="48.1033%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8533%" y="501" width="0.0160%" height="15" fill="rgb(219,112,44)" fg:x="2987" fg:w="1"/><text x="48.1033%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8533%" y="485" width="0.0160%" height="15" fill="rgb(210,31,13)" fg:x="2987" fg:w="1"/><text x="48.1033%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8533%" y="469" width="0.0160%" height="15" fill="rgb(230,25,16)" fg:x="2987" fg:w="1"/><text x="48.1033%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8533%" y="453" width="0.0160%" height="15" fill="rgb(246,108,53)" fg:x="2987" fg:w="1"/><text x="48.1033%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8533%" y="437" width="0.0160%" height="15" fill="rgb(241,172,50)" fg:x="2987" fg:w="1"/><text x="48.1033%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8533%" y="421" width="0.0160%" height="15" fill="rgb(235,141,10)" fg:x="2987" fg:w="1"/><text x="48.1033%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8533%" y="405" width="0.0160%" height="15" fill="rgb(220,174,43)" fg:x="2987" fg:w="1"/><text x="48.1033%" y="415.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="47.8533%" y="741" width="0.0320%" height="15" fill="rgb(215,181,40)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="751.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="47.8533%" y="725" width="0.0320%" height="15" fill="rgb(230,97,2)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="735.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="47.8533%" y="709" width="0.0320%" height="15" fill="rgb(211,25,27)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="719.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="47.8533%" y="693" width="0.0320%" height="15" fill="rgb(230,87,26)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="703.50"></text></g><g><title>new_do_write (2 samples, 0.03%)</title><rect x="47.8533%" y="677" width="0.0320%" height="15" fill="rgb(227,160,17)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="47.8533%" y="661" width="0.0320%" height="15" fill="rgb(244,85,34)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="671.50"></text></g><g><title>__GI___libc_write (2 samples, 0.03%)</title><rect x="47.8533%" y="645" width="0.0320%" height="15" fill="rgb(207,70,0)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.8533%" y="629" width="0.0320%" height="15" fill="rgb(223,129,7)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.8533%" y="613" width="0.0320%" height="15" fill="rgb(246,105,7)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.8533%" y="597" width="0.0320%" height="15" fill="rgb(215,154,42)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.8533%" y="581" width="0.0320%" height="15" fill="rgb(220,215,30)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="591.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="47.8533%" y="565" width="0.0320%" height="15" fill="rgb(228,81,51)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.8533%" y="549" width="0.0320%" height="15" fill="rgb(247,71,54)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="559.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="47.8533%" y="533" width="0.0320%" height="15" fill="rgb(234,176,34)" fg:x="2987" fg:w="2"/><text x="48.1033%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8693%" y="517" width="0.0160%" height="15" fill="rgb(241,103,54)" fg:x="2988" fg:w="1"/><text x="48.1193%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8693%" y="501" width="0.0160%" height="15" fill="rgb(228,22,34)" fg:x="2988" fg:w="1"/><text x="48.1193%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8693%" y="485" width="0.0160%" height="15" fill="rgb(241,179,48)" fg:x="2988" fg:w="1"/><text x="48.1193%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8693%" y="469" width="0.0160%" height="15" fill="rgb(235,167,37)" fg:x="2988" fg:w="1"/><text x="48.1193%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8693%" y="453" width="0.0160%" height="15" fill="rgb(213,109,30)" fg:x="2988" fg:w="1"/><text x="48.1193%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="47.8372%" y="789" width="0.0641%" height="15" fill="rgb(222,172,16)" fg:x="2986" fg:w="4"/><text x="48.0872%" y="799.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="47.8372%" y="773" width="0.0641%" height="15" fill="rgb(233,192,5)" fg:x="2986" fg:w="4"/><text x="48.0872%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.06%)</title><rect x="47.8372%" y="757" width="0.0641%" height="15" fill="rgb(247,189,41)" fg:x="2986" fg:w="4"/><text x="48.0872%" y="767.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="741" width="0.0160%" height="15" fill="rgb(218,134,47)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="725" width="0.0160%" height="15" fill="rgb(216,29,3)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="709" width="0.0160%" height="15" fill="rgb(246,140,12)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="693" width="0.0160%" height="15" fill="rgb(230,136,11)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="677" width="0.0160%" height="15" fill="rgb(247,22,47)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="687.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="661" width="0.0160%" height="15" fill="rgb(218,84,22)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="645" width="0.0160%" height="15" fill="rgb(216,87,39)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="629" width="0.0160%" height="15" fill="rgb(221,178,8)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="639.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="613" width="0.0160%" height="15" fill="rgb(230,42,11)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="623.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="597" width="0.0160%" height="15" fill="rgb(237,229,4)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="607.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="47.8853%" y="581" width="0.0160%" height="15" fill="rgb(222,31,33)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="565" width="0.0160%" height="15" fill="rgb(210,17,39)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="549" width="0.0160%" height="15" fill="rgb(244,93,20)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="559.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="533" width="0.0160%" height="15" fill="rgb(210,40,47)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="543.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="517" width="0.0160%" height="15" fill="rgb(239,211,47)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="527.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="501" width="0.0160%" height="15" fill="rgb(251,223,49)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="485" width="0.0160%" height="15" fill="rgb(221,149,5)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="495.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="469" width="0.0160%" height="15" fill="rgb(219,224,51)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="479.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="453" width="0.0160%" height="15" fill="rgb(223,7,8)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="463.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="437" width="0.0160%" height="15" fill="rgb(241,217,22)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="447.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="421" width="0.0160%" height="15" fill="rgb(248,209,0)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="431.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="405" width="0.0160%" height="15" fill="rgb(217,205,4)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="389" width="0.0160%" height="15" fill="rgb(228,124,39)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="399.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.8853%" y="373" width="0.0160%" height="15" fill="rgb(250,116,42)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="383.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="47.8853%" y="357" width="0.0160%" height="15" fill="rgb(223,202,9)" fg:x="2989" fg:w="1"/><text x="48.1353%" y="367.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.9334%" y="421" width="0.0160%" height="15" fill="rgb(242,222,40)" fg:x="2992" fg:w="1"/><text x="48.1834%" y="431.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="47.9334%" y="405" width="0.0160%" height="15" fill="rgb(229,99,46)" fg:x="2992" fg:w="1"/><text x="48.1834%" y="415.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="47.9334%" y="437" width="0.0481%" height="15" fill="rgb(225,56,46)" fg:x="2992" fg:w="3"/><text x="48.1834%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.9494%" y="421" width="0.0320%" height="15" fill="rgb(227,94,5)" fg:x="2993" fg:w="2"/><text x="48.1994%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.9494%" y="405" width="0.0320%" height="15" fill="rgb(205,112,38)" fg:x="2993" fg:w="2"/><text x="48.1994%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.9494%" y="389" width="0.0320%" height="15" fill="rgb(231,133,46)" fg:x="2993" fg:w="2"/><text x="48.1994%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.9494%" y="373" width="0.0320%" height="15" fill="rgb(217,16,9)" fg:x="2993" fg:w="2"/><text x="48.1994%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="47.9494%" y="357" width="0.0320%" height="15" fill="rgb(249,173,9)" fg:x="2993" fg:w="2"/><text x="48.1994%" y="367.50"></text></g><g><title>[[ext4]] (18 samples, 0.29%)</title><rect x="47.9334%" y="485" width="0.2884%" height="15" fill="rgb(205,163,53)" fg:x="2992" fg:w="18"/><text x="48.1834%" y="495.50"></text></g><g><title>[unknown] (18 samples, 0.29%)</title><rect x="47.9334%" y="469" width="0.2884%" height="15" fill="rgb(217,54,41)" fg:x="2992" fg:w="18"/><text x="48.1834%" y="479.50"></text></g><g><title>[[ext4]] (18 samples, 0.29%)</title><rect x="47.9334%" y="453" width="0.2884%" height="15" fill="rgb(228,216,12)" fg:x="2992" fg:w="18"/><text x="48.1834%" y="463.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="47.9814%" y="437" width="0.2403%" height="15" fill="rgb(244,228,15)" fg:x="2995" fg:w="15"/><text x="48.2314%" y="447.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="47.9814%" y="421" width="0.2403%" height="15" fill="rgb(221,176,53)" fg:x="2995" fg:w="15"/><text x="48.2314%" y="431.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="48.0295%" y="405" width="0.1922%" height="15" fill="rgb(205,94,34)" fg:x="2998" fg:w="12"/><text x="48.2795%" y="415.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="48.0775%" y="389" width="0.1442%" height="15" fill="rgb(213,110,48)" fg:x="3001" fg:w="9"/><text x="48.3275%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="48.1256%" y="373" width="0.0961%" height="15" fill="rgb(236,142,28)" fg:x="3004" fg:w="6"/><text x="48.3756%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.1737%" y="357" width="0.0481%" height="15" fill="rgb(225,135,29)" fg:x="3007" fg:w="3"/><text x="48.4237%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.2057%" y="341" width="0.0160%" height="15" fill="rgb(252,45,31)" fg:x="3009" fg:w="1"/><text x="48.4557%" y="351.50"></text></g><g><title>_IO_fwrite (21 samples, 0.34%)</title><rect x="47.9013%" y="645" width="0.3364%" height="15" fill="rgb(211,187,50)" fg:x="2990" fg:w="21"/><text x="48.1513%" y="655.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (21 samples, 0.34%)</title><rect x="47.9013%" y="629" width="0.3364%" height="15" fill="rgb(229,109,7)" fg:x="2990" fg:w="21"/><text x="48.1513%" y="639.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (21 samples, 0.34%)</title><rect x="47.9013%" y="613" width="0.3364%" height="15" fill="rgb(251,131,51)" fg:x="2990" fg:w="21"/><text x="48.1513%" y="623.50"></text></g><g><title>new_do_write (21 samples, 0.34%)</title><rect x="47.9013%" y="597" width="0.3364%" height="15" fill="rgb(251,180,35)" fg:x="2990" fg:w="21"/><text x="48.1513%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (21 samples, 0.34%)</title><rect x="47.9013%" y="581" width="0.3364%" height="15" fill="rgb(211,46,32)" fg:x="2990" fg:w="21"/><text x="48.1513%" y="591.50"></text></g><g><title>__GI___libc_write (20 samples, 0.32%)</title><rect x="47.9173%" y="565" width="0.3204%" height="15" fill="rgb(248,123,17)" fg:x="2991" fg:w="20"/><text x="48.1673%" y="575.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="47.9173%" y="549" width="0.3204%" height="15" fill="rgb(227,141,18)" fg:x="2991" fg:w="20"/><text x="48.1673%" y="559.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="47.9173%" y="533" width="0.3204%" height="15" fill="rgb(216,102,9)" fg:x="2991" fg:w="20"/><text x="48.1673%" y="543.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="47.9173%" y="517" width="0.3204%" height="15" fill="rgb(253,47,13)" fg:x="2991" fg:w="20"/><text x="48.1673%" y="527.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="47.9173%" y="501" width="0.3204%" height="15" fill="rgb(226,93,23)" fg:x="2991" fg:w="20"/><text x="48.1673%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.2217%" y="485" width="0.0160%" height="15" fill="rgb(247,104,17)" fg:x="3010" fg:w="1"/><text x="48.4717%" y="495.50"></text></g><g><title>AutoFile::write (22 samples, 0.35%)</title><rect x="47.9013%" y="661" width="0.3525%" height="15" fill="rgb(233,203,26)" fg:x="2990" fg:w="22"/><text x="48.1513%" y="671.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="48.2377%" y="645" width="0.0160%" height="15" fill="rgb(244,98,49)" fg:x="3011" fg:w="1"/><text x="48.4877%" y="655.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (23 samples, 0.37%)</title><rect x="47.9013%" y="677" width="0.3685%" height="15" fill="rgb(235,134,22)" fg:x="2990" fg:w="23"/><text x="48.1513%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="661" width="0.0160%" height="15" fill="rgb(221,70,32)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="645" width="0.0160%" height="15" fill="rgb(238,15,50)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="629" width="0.0160%" height="15" fill="rgb(215,221,48)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="613" width="0.0160%" height="15" fill="rgb(236,73,3)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="597" width="0.0160%" height="15" fill="rgb(250,107,11)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="581" width="0.0160%" height="15" fill="rgb(242,39,14)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="565" width="0.0160%" height="15" fill="rgb(248,164,37)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="549" width="0.0160%" height="15" fill="rgb(217,60,12)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="559.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="533" width="0.0160%" height="15" fill="rgb(240,125,29)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="543.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="517" width="0.0160%" height="15" fill="rgb(208,207,28)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="527.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="48.2538%" y="501" width="0.0160%" height="15" fill="rgb(209,159,27)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="485" width="0.0160%" height="15" fill="rgb(251,176,53)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="469" width="0.0160%" height="15" fill="rgb(211,85,7)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="453" width="0.0160%" height="15" fill="rgb(216,64,54)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="437" width="0.0160%" height="15" fill="rgb(217,54,24)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="421" width="0.0160%" height="15" fill="rgb(208,206,53)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="405" width="0.0160%" height="15" fill="rgb(251,74,39)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="415.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="389" width="0.0160%" height="15" fill="rgb(226,47,5)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="399.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="373" width="0.0160%" height="15" fill="rgb(234,111,33)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="383.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="357" width="0.0160%" height="15" fill="rgb(251,14,10)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="341" width="0.0160%" height="15" fill="rgb(232,43,0)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="351.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="325" width="0.0160%" height="15" fill="rgb(222,68,43)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="309" width="0.0160%" height="15" fill="rgb(217,24,23)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="319.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="293" width="0.0160%" height="15" fill="rgb(229,209,14)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="303.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="277" width="0.0160%" height="15" fill="rgb(250,149,48)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="287.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="261" width="0.0160%" height="15" fill="rgb(210,120,37)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="271.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="245" width="0.0160%" height="15" fill="rgb(210,21,8)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="255.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="229" width="0.0160%" height="15" fill="rgb(243,145,7)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="239.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="48.2538%" y="213" width="0.0160%" height="15" fill="rgb(238,178,32)" fg:x="3012" fg:w="1"/><text x="48.5038%" y="223.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (31 samples, 0.50%)</title><rect x="47.8372%" y="901" width="0.4966%" height="15" fill="rgb(222,4,10)" fg:x="2986" fg:w="31"/><text x="48.0872%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (31 samples, 0.50%)</title><rect x="47.8372%" y="885" width="0.4966%" height="15" fill="rgb(239,7,37)" fg:x="2986" fg:w="31"/><text x="48.0872%" y="895.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.50%)</title><rect x="47.8372%" y="869" width="0.4966%" height="15" fill="rgb(215,31,37)" fg:x="2986" fg:w="31"/><text x="48.0872%" y="879.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.50%)</title><rect x="47.8372%" y="853" width="0.4966%" height="15" fill="rgb(224,83,33)" fg:x="2986" fg:w="31"/><text x="48.0872%" y="863.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (31 samples, 0.50%)</title><rect x="47.8372%" y="837" width="0.4966%" height="15" fill="rgb(239,55,3)" fg:x="2986" fg:w="31"/><text x="48.0872%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (31 samples, 0.50%)</title><rect x="47.8372%" y="821" width="0.4966%" height="15" fill="rgb(247,92,11)" fg:x="2986" fg:w="31"/><text x="48.0872%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (31 samples, 0.50%)</title><rect x="47.8372%" y="805" width="0.4966%" height="15" fill="rgb(239,200,7)" fg:x="2986" fg:w="31"/><text x="48.0872%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (27 samples, 0.43%)</title><rect x="47.9013%" y="789" width="0.4326%" height="15" fill="rgb(227,115,8)" fg:x="2990" fg:w="27"/><text x="48.1513%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.43%)</title><rect x="47.9013%" y="773" width="0.4326%" height="15" fill="rgb(215,189,27)" fg:x="2990" fg:w="27"/><text x="48.1513%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.43%)</title><rect x="47.9013%" y="757" width="0.4326%" height="15" fill="rgb(251,216,39)" fg:x="2990" fg:w="27"/><text x="48.1513%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (27 samples, 0.43%)</title><rect x="47.9013%" y="741" width="0.4326%" height="15" fill="rgb(207,29,47)" fg:x="2990" fg:w="27"/><text x="48.1513%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (27 samples, 0.43%)</title><rect x="47.9013%" y="725" width="0.4326%" height="15" fill="rgb(210,71,34)" fg:x="2990" fg:w="27"/><text x="48.1513%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (27 samples, 0.43%)</title><rect x="47.9013%" y="709" width="0.4326%" height="15" fill="rgb(253,217,51)" fg:x="2990" fg:w="27"/><text x="48.1513%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (27 samples, 0.43%)</title><rect x="47.9013%" y="693" width="0.4326%" height="15" fill="rgb(222,117,46)" fg:x="2990" fg:w="27"/><text x="48.1513%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="48.2698%" y="677" width="0.0641%" height="15" fill="rgb(226,132,6)" fg:x="3013" fg:w="4"/><text x="48.5198%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="48.2698%" y="661" width="0.0641%" height="15" fill="rgb(254,145,51)" fg:x="3013" fg:w="4"/><text x="48.5198%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.06%)</title><rect x="48.2698%" y="645" width="0.0641%" height="15" fill="rgb(231,199,27)" fg:x="3013" fg:w="4"/><text x="48.5198%" y="655.50"></text></g><g><title>AutoFile::write (4 samples, 0.06%)</title><rect x="48.2698%" y="629" width="0.0641%" height="15" fill="rgb(245,158,14)" fg:x="3013" fg:w="4"/><text x="48.5198%" y="639.50"></text></g><g><title>_IO_fwrite (4 samples, 0.06%)</title><rect x="48.2698%" y="613" width="0.0641%" height="15" fill="rgb(240,113,14)" fg:x="3013" fg:w="4"/><text x="48.5198%" y="623.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="48.3018%" y="597" width="0.0320%" height="15" fill="rgb(210,20,13)" fg:x="3015" fg:w="2"/><text x="48.5518%" y="607.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="48.3018%" y="581" width="0.0320%" height="15" fill="rgb(241,144,13)" fg:x="3015" fg:w="2"/><text x="48.5518%" y="591.50"></text></g><g><title>new_do_write (2 samples, 0.03%)</title><rect x="48.3018%" y="565" width="0.0320%" height="15" fill="rgb(235,43,34)" fg:x="3015" fg:w="2"/><text x="48.5518%" y="575.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="48.3018%" y="549" width="0.0320%" height="15" fill="rgb(208,36,20)" fg:x="3015" fg:w="2"/><text x="48.5518%" y="559.50"></text></g><g><title>__GI___libc_write (2 samples, 0.03%)</title><rect x="48.3018%" y="533" width="0.0320%" height="15" fill="rgb(239,204,10)" fg:x="3015" fg:w="2"/><text x="48.5518%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="48.3018%" y="517" width="0.0320%" height="15" fill="rgb(217,84,43)" fg:x="3015" fg:w="2"/><text x="48.5518%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="48.3018%" y="501" width="0.0320%" height="15" fill="rgb(241,170,50)" fg:x="3015" fg:w="2"/><text x="48.5518%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="48.3018%" y="485" width="0.0320%" height="15" fill="rgb(226,205,29)" fg:x="3015" fg:w="2"/><text x="48.5518%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="48.3018%" y="469" width="0.0320%" height="15" fill="rgb(233,113,1)" fg:x="3015" fg:w="2"/><text x="48.5518%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3178%" y="453" width="0.0160%" height="15" fill="rgb(253,98,13)" fg:x="3016" fg:w="1"/><text x="48.5678%" y="463.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (34 samples, 0.54%)</title><rect x="47.8372%" y="981" width="0.5447%" height="15" fill="rgb(211,115,12)" fg:x="2986" fg:w="34"/><text x="48.0872%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (34 samples, 0.54%)</title><rect x="47.8372%" y="965" width="0.5447%" height="15" fill="rgb(208,12,16)" fg:x="2986" fg:w="34"/><text x="48.0872%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.54%)</title><rect x="47.8372%" y="949" width="0.5447%" height="15" fill="rgb(237,193,54)" fg:x="2986" fg:w="34"/><text x="48.0872%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.54%)</title><rect x="47.8372%" y="933" width="0.5447%" height="15" fill="rgb(243,22,42)" fg:x="2986" fg:w="34"/><text x="48.0872%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (34 samples, 0.54%)</title><rect x="47.8372%" y="917" width="0.5447%" height="15" fill="rgb(233,151,36)" fg:x="2986" fg:w="34"/><text x="48.0872%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="48.3339%" y="901" width="0.0481%" height="15" fill="rgb(237,57,45)" fg:x="3017" fg:w="3"/><text x="48.5839%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="48.3339%" y="885" width="0.0481%" height="15" fill="rgb(221,88,17)" fg:x="3017" fg:w="3"/><text x="48.5839%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="48.3339%" y="869" width="0.0481%" height="15" fill="rgb(230,79,15)" fg:x="3017" fg:w="3"/><text x="48.5839%" y="879.50"></text></g><g><title>AutoFile::write (3 samples, 0.05%)</title><rect x="48.3339%" y="853" width="0.0481%" height="15" fill="rgb(213,57,13)" fg:x="3017" fg:w="3"/><text x="48.5839%" y="863.50"></text></g><g><title>_IO_fwrite (3 samples, 0.05%)</title><rect x="48.3339%" y="837" width="0.0481%" height="15" fill="rgb(222,116,39)" fg:x="3017" fg:w="3"/><text x="48.5839%" y="847.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="48.3659%" y="821" width="0.0160%" height="15" fill="rgb(245,107,2)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="831.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="48.3659%" y="805" width="0.0160%" height="15" fill="rgb(238,1,10)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="815.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="48.3659%" y="789" width="0.0160%" height="15" fill="rgb(249,4,48)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="799.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="48.3659%" y="773" width="0.0160%" height="15" fill="rgb(223,151,18)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="783.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="48.3659%" y="757" width="0.0160%" height="15" fill="rgb(227,65,43)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3659%" y="741" width="0.0160%" height="15" fill="rgb(218,40,45)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3659%" y="725" width="0.0160%" height="15" fill="rgb(252,121,31)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3659%" y="709" width="0.0160%" height="15" fill="rgb(219,158,43)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3659%" y="693" width="0.0160%" height="15" fill="rgb(231,162,42)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="703.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="48.3659%" y="677" width="0.0160%" height="15" fill="rgb(217,179,25)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3659%" y="661" width="0.0160%" height="15" fill="rgb(206,212,31)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="671.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="48.3659%" y="645" width="0.0160%" height="15" fill="rgb(235,144,12)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="655.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="48.3659%" y="629" width="0.0160%" height="15" fill="rgb(213,51,10)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="639.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="48.3659%" y="613" width="0.0160%" height="15" fill="rgb(231,145,14)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="623.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="48.3659%" y="597" width="0.0160%" height="15" fill="rgb(235,15,28)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3659%" y="581" width="0.0160%" height="15" fill="rgb(237,206,10)" fg:x="3019" fg:w="1"/><text x="48.6159%" y="591.50"></text></g><g><title>_IO_default_xsputn (1 samples, 0.02%)</title><rect x="48.4140%" y="805" width="0.0160%" height="15" fill="rgb(236,227,27)" fg:x="3022" fg:w="1"/><text x="48.6640%" y="815.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="48.4460%" y="613" width="0.0320%" height="15" fill="rgb(246,83,35)" fg:x="3024" fg:w="2"/><text x="48.6960%" y="623.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="48.4460%" y="629" width="0.0801%" height="15" fill="rgb(220,136,24)" fg:x="3024" fg:w="5"/><text x="48.6960%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.4781%" y="613" width="0.0481%" height="15" fill="rgb(217,3,25)" fg:x="3026" fg:w="3"/><text x="48.7281%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.4781%" y="597" width="0.0481%" height="15" fill="rgb(239,24,14)" fg:x="3026" fg:w="3"/><text x="48.7281%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.4781%" y="581" width="0.0481%" height="15" fill="rgb(244,16,53)" fg:x="3026" fg:w="3"/><text x="48.7281%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="48.4941%" y="565" width="0.0320%" height="15" fill="rgb(208,175,44)" fg:x="3027" fg:w="2"/><text x="48.7441%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="48.4941%" y="549" width="0.0320%" height="15" fill="rgb(252,18,48)" fg:x="3027" fg:w="2"/><text x="48.7441%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="48.4941%" y="533" width="0.0320%" height="15" fill="rgb(234,199,32)" fg:x="3027" fg:w="2"/><text x="48.7441%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="48.4941%" y="517" width="0.0320%" height="15" fill="rgb(225,77,54)" fg:x="3027" fg:w="2"/><text x="48.7441%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.5101%" y="501" width="0.0160%" height="15" fill="rgb(225,42,25)" fg:x="3028" fg:w="1"/><text x="48.7601%" y="511.50"></text></g><g><title>[[ext4]] (23 samples, 0.37%)</title><rect x="48.4460%" y="645" width="0.3685%" height="15" fill="rgb(242,227,46)" fg:x="3024" fg:w="23"/><text x="48.6960%" y="655.50"></text></g><g><title>[unknown] (18 samples, 0.29%)</title><rect x="48.5261%" y="629" width="0.2884%" height="15" fill="rgb(246,197,35)" fg:x="3029" fg:w="18"/><text x="48.7761%" y="639.50"></text></g><g><title>[unknown] (18 samples, 0.29%)</title><rect x="48.5261%" y="613" width="0.2884%" height="15" fill="rgb(215,159,26)" fg:x="3029" fg:w="18"/><text x="48.7761%" y="623.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="48.5742%" y="597" width="0.2403%" height="15" fill="rgb(212,194,50)" fg:x="3032" fg:w="15"/><text x="48.8242%" y="607.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="48.6383%" y="581" width="0.1762%" height="15" fill="rgb(246,132,1)" fg:x="3036" fg:w="11"/><text x="48.8883%" y="591.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="48.6863%" y="565" width="0.1282%" height="15" fill="rgb(217,71,7)" fg:x="3039" fg:w="8"/><text x="48.9363%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="48.7824%" y="549" width="0.0320%" height="15" fill="rgb(252,59,32)" fg:x="3045" fg:w="2"/><text x="49.0324%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.7985%" y="533" width="0.0160%" height="15" fill="rgb(253,204,25)" fg:x="3046" fg:w="1"/><text x="49.0485%" y="543.50"></text></g><g><title>[[ext4]] (28 samples, 0.45%)</title><rect x="48.4460%" y="677" width="0.4486%" height="15" fill="rgb(232,21,16)" fg:x="3024" fg:w="28"/><text x="48.6960%" y="687.50"></text></g><g><title>[unknown] (28 samples, 0.45%)</title><rect x="48.4460%" y="661" width="0.4486%" height="15" fill="rgb(248,90,29)" fg:x="3024" fg:w="28"/><text x="48.6960%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="48.8145%" y="645" width="0.0801%" height="15" fill="rgb(249,223,7)" fg:x="3047" fg:w="5"/><text x="49.0645%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.8786%" y="629" width="0.0160%" height="15" fill="rgb(231,119,42)" fg:x="3051" fg:w="1"/><text x="49.1286%" y="639.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (33 samples, 0.53%)</title><rect x="48.4300%" y="805" width="0.5287%" height="15" fill="rgb(215,41,35)" fg:x="3023" fg:w="33"/><text x="48.6800%" y="815.50"></text></g><g><title>new_do_write (33 samples, 0.53%)</title><rect x="48.4300%" y="789" width="0.5287%" height="15" fill="rgb(220,44,45)" fg:x="3023" fg:w="33"/><text x="48.6800%" y="799.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (33 samples, 0.53%)</title><rect x="48.4300%" y="773" width="0.5287%" height="15" fill="rgb(253,197,36)" fg:x="3023" fg:w="33"/><text x="48.6800%" y="783.50"></text></g><g><title>__GI___libc_write (33 samples, 0.53%)</title><rect x="48.4300%" y="757" width="0.5287%" height="15" fill="rgb(245,225,54)" fg:x="3023" fg:w="33"/><text x="48.6800%" y="767.50"></text></g><g><title>[unknown] (33 samples, 0.53%)</title><rect x="48.4300%" y="741" width="0.5287%" height="15" fill="rgb(239,94,37)" fg:x="3023" fg:w="33"/><text x="48.6800%" y="751.50"></text></g><g><title>[unknown] (33 samples, 0.53%)</title><rect x="48.4300%" y="725" width="0.5287%" height="15" fill="rgb(242,217,10)" fg:x="3023" fg:w="33"/><text x="48.6800%" y="735.50"></text></g><g><title>[unknown] (33 samples, 0.53%)</title><rect x="48.4300%" y="709" width="0.5287%" height="15" fill="rgb(250,193,7)" fg:x="3023" fg:w="33"/><text x="48.6800%" y="719.50"></text></g><g><title>[unknown] (33 samples, 0.53%)</title><rect x="48.4300%" y="693" width="0.5287%" height="15" fill="rgb(230,104,19)" fg:x="3023" fg:w="33"/><text x="48.6800%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="48.8946%" y="677" width="0.0641%" height="15" fill="rgb(230,181,4)" fg:x="3052" fg:w="4"/><text x="49.1446%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.9426%" y="661" width="0.0160%" height="15" fill="rgb(216,219,49)" fg:x="3055" fg:w="1"/><text x="49.1926%" y="671.50"></text></g><g><title>_IO_fwrite (35 samples, 0.56%)</title><rect x="48.4140%" y="837" width="0.5607%" height="15" fill="rgb(254,144,0)" fg:x="3022" fg:w="35"/><text x="48.6640%" y="847.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (35 samples, 0.56%)</title><rect x="48.4140%" y="821" width="0.5607%" height="15" fill="rgb(205,209,38)" fg:x="3022" fg:w="35"/><text x="48.6640%" y="831.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9587%" y="805" width="0.0160%" height="15" fill="rgb(240,21,42)" fg:x="3056" fg:w="1"/><text x="49.2087%" y="815.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (7 samples, 0.11%)</title><rect x="48.9747%" y="837" width="0.1121%" height="15" fill="rgb(241,132,3)" fg:x="3057" fg:w="7"/><text x="49.2247%" y="847.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (7 samples, 0.11%)</title><rect x="48.9747%" y="821" width="0.1121%" height="15" fill="rgb(225,14,2)" fg:x="3057" fg:w="7"/><text x="49.2247%" y="831.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (7 samples, 0.11%)</title><rect x="48.9747%" y="805" width="0.1121%" height="15" fill="rgb(210,141,35)" fg:x="3057" fg:w="7"/><text x="49.2247%" y="815.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (7 samples, 0.11%)</title><rect x="48.9747%" y="789" width="0.1121%" height="15" fill="rgb(251,14,44)" fg:x="3057" fg:w="7"/><text x="49.2247%" y="799.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (7 samples, 0.11%)</title><rect x="48.9747%" y="773" width="0.1121%" height="15" fill="rgb(247,48,18)" fg:x="3057" fg:w="7"/><text x="49.2247%" y="783.50"></text></g><g><title>AutoFile::write (54 samples, 0.87%)</title><rect x="48.3819%" y="853" width="0.8651%" height="15" fill="rgb(225,0,40)" fg:x="3020" fg:w="54"/><text x="48.6319%" y="863.50"></text></g><g><title>util::Xor (10 samples, 0.16%)</title><rect x="49.0868%" y="837" width="0.1602%" height="15" fill="rgb(221,31,33)" fg:x="3064" fg:w="10"/><text x="49.3368%" y="847.50"></text></g><g><title>std::operator^= (4 samples, 0.06%)</title><rect x="49.1830%" y="821" width="0.0641%" height="15" fill="rgb(237,42,40)" fg:x="3070" fg:w="4"/><text x="49.4330%" y="831.50"></text></g><g><title>std::operator^ (4 samples, 0.06%)</title><rect x="49.1830%" y="805" width="0.0641%" height="15" fill="rgb(233,51,29)" fg:x="3070" fg:w="4"/><text x="49.4330%" y="815.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (55 samples, 0.88%)</title><rect x="48.3819%" y="869" width="0.8811%" height="15" fill="rgb(226,58,20)" fg:x="3020" fg:w="55"/><text x="48.6319%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="853" width="0.0160%" height="15" fill="rgb(208,98,7)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="837" width="0.0160%" height="15" fill="rgb(228,143,44)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="821" width="0.0160%" height="15" fill="rgb(246,55,38)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="805" width="0.0160%" height="15" fill="rgb(247,87,16)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="789" width="0.0160%" height="15" fill="rgb(234,129,42)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="773" width="0.0160%" height="15" fill="rgb(220,82,16)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="757" width="0.0160%" height="15" fill="rgb(211,88,4)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="741" width="0.0160%" height="15" fill="rgb(248,151,21)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="725" width="0.0160%" height="15" fill="rgb(238,163,6)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="709" width="0.0160%" height="15" fill="rgb(209,183,11)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="719.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="49.2470%" y="693" width="0.0160%" height="15" fill="rgb(219,37,20)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="677" width="0.0160%" height="15" fill="rgb(210,158,4)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="661" width="0.0160%" height="15" fill="rgb(221,167,53)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="645" width="0.0160%" height="15" fill="rgb(237,151,45)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="629" width="0.0160%" height="15" fill="rgb(231,39,3)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="613" width="0.0160%" height="15" fill="rgb(212,167,28)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2470%" y="597" width="0.0160%" height="15" fill="rgb(232,178,8)" fg:x="3074" fg:w="1"/><text x="49.4970%" y="607.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="49.2951%" y="789" width="0.0160%" height="15" fill="rgb(225,151,20)" fg:x="3077" fg:w="1"/><text x="49.5451%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (59 samples, 0.95%)</title><rect x="48.3819%" y="901" width="0.9452%" height="15" fill="rgb(238,3,37)" fg:x="3020" fg:w="59"/><text x="48.6319%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (59 samples, 0.95%)</title><rect x="48.3819%" y="885" width="0.9452%" height="15" fill="rgb(251,147,42)" fg:x="3020" fg:w="59"/><text x="48.6319%" y="895.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="49.2631%" y="869" width="0.0641%" height="15" fill="rgb(208,173,10)" fg:x="3075" fg:w="4"/><text x="49.5131%" y="879.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="49.2631%" y="853" width="0.0641%" height="15" fill="rgb(246,225,4)" fg:x="3075" fg:w="4"/><text x="49.5131%" y="863.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.06%)</title><rect x="49.2631%" y="837" width="0.0641%" height="15" fill="rgb(248,102,6)" fg:x="3075" fg:w="4"/><text x="49.5131%" y="847.50"></text></g><g><title>AutoFile::write (4 samples, 0.06%)</title><rect x="49.2631%" y="821" width="0.0641%" height="15" fill="rgb(232,6,21)" fg:x="3075" fg:w="4"/><text x="49.5131%" y="831.50"></text></g><g><title>_IO_fwrite (4 samples, 0.06%)</title><rect x="49.2631%" y="805" width="0.0641%" height="15" fill="rgb(221,179,22)" fg:x="3075" fg:w="4"/><text x="49.5131%" y="815.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="49.3111%" y="789" width="0.0160%" height="15" fill="rgb(252,50,20)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="799.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="49.3111%" y="773" width="0.0160%" height="15" fill="rgb(222,56,38)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="783.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="49.3111%" y="757" width="0.0160%" height="15" fill="rgb(206,193,29)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="767.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="49.3111%" y="741" width="0.0160%" height="15" fill="rgb(239,192,45)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="751.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="49.3111%" y="725" width="0.0160%" height="15" fill="rgb(254,18,36)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3111%" y="709" width="0.0160%" height="15" fill="rgb(221,127,11)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3111%" y="693" width="0.0160%" height="15" fill="rgb(234,146,35)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3111%" y="677" width="0.0160%" height="15" fill="rgb(254,201,37)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3111%" y="661" width="0.0160%" height="15" fill="rgb(211,202,23)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="671.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="49.3111%" y="645" width="0.0160%" height="15" fill="rgb(237,91,2)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3111%" y="629" width="0.0160%" height="15" fill="rgb(226,228,36)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="639.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="49.3111%" y="613" width="0.0160%" height="15" fill="rgb(213,63,50)" fg:x="3078" fg:w="1"/><text x="49.5611%" y="623.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (61 samples, 0.98%)</title><rect x="48.3819%" y="981" width="0.9773%" height="15" fill="rgb(235,194,19)" fg:x="3020" fg:w="61"/><text x="48.6319%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (61 samples, 0.98%)</title><rect x="48.3819%" y="965" width="0.9773%" height="15" fill="rgb(207,204,18)" fg:x="3020" fg:w="61"/><text x="48.6319%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (61 samples, 0.98%)</title><rect x="48.3819%" y="949" width="0.9773%" height="15" fill="rgb(248,8,7)" fg:x="3020" fg:w="61"/><text x="48.6319%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (61 samples, 0.98%)</title><rect x="48.3819%" y="933" width="0.9773%" height="15" fill="rgb(223,145,47)" fg:x="3020" fg:w="61"/><text x="48.6319%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (61 samples, 0.98%)</title><rect x="48.3819%" y="917" width="0.9773%" height="15" fill="rgb(228,84,11)" fg:x="3020" fg:w="61"/><text x="48.6319%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.3271%" y="901" width="0.0320%" height="15" fill="rgb(218,76,45)" fg:x="3079" fg:w="2"/><text x="49.5771%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.3271%" y="885" width="0.0320%" height="15" fill="rgb(223,80,15)" fg:x="3079" fg:w="2"/><text x="49.5771%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="49.3271%" y="869" width="0.0320%" height="15" fill="rgb(219,218,33)" fg:x="3079" fg:w="2"/><text x="49.5771%" y="879.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="49.3271%" y="853" width="0.0320%" height="15" fill="rgb(208,51,11)" fg:x="3079" fg:w="2"/><text x="49.5771%" y="863.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="49.3271%" y="837" width="0.0320%" height="15" fill="rgb(229,165,39)" fg:x="3079" fg:w="2"/><text x="49.5771%" y="847.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (2 samples, 0.03%)</title><rect x="49.3592%" y="981" width="0.0320%" height="15" fill="rgb(241,100,24)" fg:x="3081" fg:w="2"/><text x="49.6092%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.3592%" y="965" width="0.0320%" height="15" fill="rgb(228,14,23)" fg:x="3081" fg:w="2"/><text x="49.6092%" y="975.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.3592%" y="949" width="0.0320%" height="15" fill="rgb(247,116,52)" fg:x="3081" fg:w="2"/><text x="49.6092%" y="959.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="49.3592%" y="933" width="0.0320%" height="15" fill="rgb(216,149,33)" fg:x="3081" fg:w="2"/><text x="49.6092%" y="943.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="49.3592%" y="917" width="0.0320%" height="15" fill="rgb(238,142,29)" fg:x="3081" fg:w="2"/><text x="49.6092%" y="927.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="49.3592%" y="901" width="0.0320%" height="15" fill="rgb(224,83,40)" fg:x="3081" fg:w="2"/><text x="49.6092%" y="911.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (142 samples, 2.27%)</title><rect x="47.1323%" y="1269" width="2.2749%" height="15" fill="rgb(234,165,11)" fg:x="2942" fg:w="142"/><text x="47.3823%" y="1279.50">A..</text></g><g><title>void Serialize&lt;AutoFile, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (142 samples, 2.27%)</title><rect x="47.1323%" y="1253" width="2.2749%" height="15" fill="rgb(215,96,23)" fg:x="2942" fg:w="142"/><text x="47.3823%" y="1263.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;AutoFile&gt; (142 samples, 2.27%)</title><rect x="47.1323%" y="1237" width="2.2749%" height="15" fill="rgb(233,179,26)" fg:x="2942" fg:w="142"/><text x="47.3823%" y="1247.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock&gt; (142 samples, 2.27%)</title><rect x="47.1323%" y="1221" width="2.2749%" height="15" fill="rgb(225,129,33)" fg:x="2942" fg:w="142"/><text x="47.3823%" y="1231.50">v..</text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (142 samples, 2.27%)</title><rect x="47.1323%" y="1205" width="2.2749%" height="15" fill="rgb(237,49,13)" fg:x="2942" fg:w="142"/><text x="47.3823%" y="1215.50">v..</text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (142 samples, 2.27%)</title><rect x="47.1323%" y="1189" width="2.2749%" height="15" fill="rgb(211,3,31)" fg:x="2942" fg:w="142"/><text x="47.3823%" y="1199.50">v..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (142 samples, 2.27%)</title><rect x="47.1323%" y="1173" width="2.2749%" height="15" fill="rgb(216,152,19)" fg:x="2942" fg:w="142"/><text x="47.3823%" y="1183.50">v..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (142 samples, 2.27%)</title><rect x="47.1323%" y="1157" width="2.2749%" height="15" fill="rgb(251,121,35)" fg:x="2942" fg:w="142"/><text x="47.3823%" y="1167.50">v..</text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="1141" width="2.1147%" height="15" fill="rgb(210,217,47)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1151.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="1125" width="2.1147%" height="15" fill="rgb(244,116,22)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1135.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="1109" width="2.1147%" height="15" fill="rgb(228,17,21)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1119.50">v..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="1093" width="2.1147%" height="15" fill="rgb(240,149,34)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1103.50">v..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="1077" width="2.1147%" height="15" fill="rgb(208,125,47)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1087.50">v..</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="1061" width="2.1147%" height="15" fill="rgb(249,186,39)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1071.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="1045" width="2.1147%" height="15" fill="rgb(240,220,33)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1055.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="1029" width="2.1147%" height="15" fill="rgb(243,110,23)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1039.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="1013" width="2.1147%" height="15" fill="rgb(219,163,46)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1023.50">v..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (132 samples, 2.11%)</title><rect x="47.2925%" y="997" width="2.1147%" height="15" fill="rgb(216,126,30)" fg:x="2952" fg:w="132"/><text x="47.5425%" y="1007.50">v..</text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="49.3912%" y="981" width="0.0160%" height="15" fill="rgb(208,139,11)" fg:x="3083" fg:w="1"/><text x="49.6412%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.3912%" y="965" width="0.0160%" height="15" fill="rgb(213,118,36)" fg:x="3083" fg:w="1"/><text x="49.6412%" y="975.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.3912%" y="949" width="0.0160%" height="15" fill="rgb(226,43,17)" fg:x="3083" fg:w="1"/><text x="49.6412%" y="959.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="49.3912%" y="933" width="0.0160%" height="15" fill="rgb(254,217,4)" fg:x="3083" fg:w="1"/><text x="49.6412%" y="943.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="49.3912%" y="917" width="0.0160%" height="15" fill="rgb(210,134,47)" fg:x="3083" fg:w="1"/><text x="49.6412%" y="927.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="49.3912%" y="901" width="0.0160%" height="15" fill="rgb(237,24,49)" fg:x="3083" fg:w="1"/><text x="49.6412%" y="911.50"></text></g><g><title>FlatFileSeq::FileName (1 samples, 0.02%)</title><rect x="49.4072%" y="1237" width="0.0160%" height="15" fill="rgb(251,39,46)" fg:x="3084" fg:w="1"/><text x="49.6572%" y="1247.50"></text></g><g><title>operator/ (1 samples, 0.02%)</title><rect x="49.4072%" y="1221" width="0.0160%" height="15" fill="rgb(251,220,3)" fg:x="3084" fg:w="1"/><text x="49.6572%" y="1231.50"></text></g><g><title>fs::path::operator/= (1 samples, 0.02%)</title><rect x="49.4072%" y="1205" width="0.0160%" height="15" fill="rgb(228,105,12)" fg:x="3084" fg:w="1"/><text x="49.6572%" y="1215.50"></text></g><g><title>std::filesystem::__cxx11::path::operator/= (1 samples, 0.02%)</title><rect x="49.4072%" y="1189" width="0.0160%" height="15" fill="rgb(215,196,1)" fg:x="3084" fg:w="1"/><text x="49.6572%" y="1199.50"></text></g><g><title>std::filesystem::__cxx11::path::_List::reserve (1 samples, 0.02%)</title><rect x="49.4072%" y="1173" width="0.0160%" height="15" fill="rgb(214,33,39)" fg:x="3084" fg:w="1"/><text x="49.6572%" y="1183.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="49.4072%" y="1157" width="0.0160%" height="15" fill="rgb(220,19,52)" fg:x="3084" fg:w="1"/><text x="49.6572%" y="1167.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="49.4072%" y="1141" width="0.0160%" height="15" fill="rgb(221,78,38)" fg:x="3084" fg:w="1"/><text x="49.6572%" y="1151.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="49.4072%" y="1125" width="0.0160%" height="15" fill="rgb(253,30,16)" fg:x="3084" fg:w="1"/><text x="49.6572%" y="1135.50"></text></g><g><title>__fopen_internal (1 samples, 0.02%)</title><rect x="49.4233%" y="1237" width="0.0160%" height="15" fill="rgb(242,65,0)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1247.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="49.4233%" y="1221" width="0.0160%" height="15" fill="rgb(235,201,12)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1231.50"></text></g><g><title>_IO_file_open (1 samples, 0.02%)</title><rect x="49.4233%" y="1205" width="0.0160%" height="15" fill="rgb(233,161,9)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1215.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="49.4233%" y="1189" width="0.0160%" height="15" fill="rgb(241,207,41)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.4233%" y="1173" width="0.0160%" height="15" fill="rgb(212,69,46)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.4233%" y="1157" width="0.0160%" height="15" fill="rgb(239,69,45)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.4233%" y="1141" width="0.0160%" height="15" fill="rgb(242,117,48)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.4233%" y="1125" width="0.0160%" height="15" fill="rgb(228,41,36)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.4233%" y="1109" width="0.0160%" height="15" fill="rgb(212,3,32)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.4233%" y="1093" width="0.0160%" height="15" fill="rgb(233,41,49)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.4233%" y="1077" width="0.0160%" height="15" fill="rgb(252,170,49)" fg:x="3085" fg:w="1"/><text x="49.6733%" y="1087.50"></text></g><g><title>create_directories (2 samples, 0.03%)</title><rect x="49.4393%" y="1237" width="0.0320%" height="15" fill="rgb(229,53,26)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1247.50"></text></g><g><title>std::filesystem::is_symlink (2 samples, 0.03%)</title><rect x="49.4393%" y="1221" width="0.0320%" height="15" fill="rgb(217,157,12)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1231.50"></text></g><g><title>std::filesystem::symlink_status (2 samples, 0.03%)</title><rect x="49.4393%" y="1205" width="0.0320%" height="15" fill="rgb(227,17,9)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1215.50"></text></g><g><title>std::filesystem::symlink_status (2 samples, 0.03%)</title><rect x="49.4393%" y="1189" width="0.0320%" height="15" fill="rgb(218,84,12)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1199.50"></text></g><g><title>__GI___fstatat64 (2 samples, 0.03%)</title><rect x="49.4393%" y="1173" width="0.0320%" height="15" fill="rgb(212,79,24)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1157" width="0.0320%" height="15" fill="rgb(217,222,37)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1141" width="0.0320%" height="15" fill="rgb(246,208,8)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1125" width="0.0320%" height="15" fill="rgb(244,133,10)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1109" width="0.0320%" height="15" fill="rgb(209,219,41)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1093" width="0.0320%" height="15" fill="rgb(253,175,45)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1077" width="0.0320%" height="15" fill="rgb(235,100,37)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1061" width="0.0320%" height="15" fill="rgb(225,87,19)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1045" width="0.0320%" height="15" fill="rgb(217,152,17)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1029" width="0.0320%" height="15" fill="rgb(235,72,13)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="49.4393%" y="1013" width="0.0320%" height="15" fill="rgb(233,140,18)" fg:x="3086" fg:w="2"/><text x="49.6893%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.4553%" y="997" width="0.0160%" height="15" fill="rgb(207,212,28)" fg:x="3087" fg:w="1"/><text x="49.7053%" y="1007.50"></text></g><g><title>node::BlockManager::OpenBlockFile (6 samples, 0.10%)</title><rect x="49.4072%" y="1269" width="0.0961%" height="15" fill="rgb(220,130,25)" fg:x="3084" fg:w="6"/><text x="49.6572%" y="1279.50"></text></g><g><title>FlatFileSeq::Open (6 samples, 0.10%)</title><rect x="49.4072%" y="1253" width="0.0961%" height="15" fill="rgb(205,55,34)" fg:x="3084" fg:w="6"/><text x="49.6572%" y="1263.50"></text></g><g><title>fseek (2 samples, 0.03%)</title><rect x="49.4713%" y="1237" width="0.0320%" height="15" fill="rgb(237,54,35)" fg:x="3088" fg:w="2"/><text x="49.7213%" y="1247.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="49.4713%" y="1221" width="0.0320%" height="15" fill="rgb(208,67,23)" fg:x="3088" fg:w="2"/><text x="49.7213%" y="1231.50"></text></g><g><title>_IO_doallocbuf (2 samples, 0.03%)</title><rect x="49.4713%" y="1205" width="0.0320%" height="15" fill="rgb(206,207,50)" fg:x="3088" fg:w="2"/><text x="49.7213%" y="1215.50"></text></g><g><title>_IO_file_doallocate (2 samples, 0.03%)</title><rect x="49.4713%" y="1189" width="0.0320%" height="15" fill="rgb(213,211,42)" fg:x="3088" fg:w="2"/><text x="49.7213%" y="1199.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="49.4713%" y="1173" width="0.0320%" height="15" fill="rgb(252,197,50)" fg:x="3088" fg:w="2"/><text x="49.7213%" y="1183.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="49.4713%" y="1157" width="0.0320%" height="15" fill="rgb(251,211,41)" fg:x="3088" fg:w="2"/><text x="49.7213%" y="1167.50"></text></g><g><title>malloc_consolidate (2 samples, 0.03%)</title><rect x="49.4713%" y="1141" width="0.0320%" height="15" fill="rgb(229,211,5)" fg:x="3088" fg:w="2"/><text x="49.7213%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5514%" y="773" width="0.0160%" height="15" fill="rgb(239,36,31)" fg:x="3093" fg:w="1"/><text x="49.8014%" y="783.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5514%" y="757" width="0.0160%" height="15" fill="rgb(248,67,31)" fg:x="3093" fg:w="1"/><text x="49.8014%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="49.5514%" y="741" width="0.0160%" height="15" fill="rgb(249,55,44)" fg:x="3093" fg:w="1"/><text x="49.8014%" y="751.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="49.5514%" y="725" width="0.0160%" height="15" fill="rgb(216,82,12)" fg:x="3093" fg:w="1"/><text x="49.8014%" y="735.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (3 samples, 0.05%)</title><rect x="49.5354%" y="965" width="0.0481%" height="15" fill="rgb(242,174,1)" fg:x="3092" fg:w="3"/><text x="49.7854%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (3 samples, 0.05%)</title><rect x="49.5354%" y="949" width="0.0481%" height="15" fill="rgb(208,120,29)" fg:x="3092" fg:w="3"/><text x="49.7854%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="49.5354%" y="933" width="0.0481%" height="15" fill="rgb(221,105,43)" fg:x="3092" fg:w="3"/><text x="49.7854%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="49.5354%" y="917" width="0.0481%" height="15" fill="rgb(234,124,22)" fg:x="3092" fg:w="3"/><text x="49.7854%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="49.5354%" y="901" width="0.0481%" height="15" fill="rgb(212,23,30)" fg:x="3092" fg:w="3"/><text x="49.7854%" y="911.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.03%)</title><rect x="49.5514%" y="885" width="0.0320%" height="15" fill="rgb(219,122,53)" fg:x="3093" fg:w="2"/><text x="49.8014%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.03%)</title><rect x="49.5514%" y="869" width="0.0320%" height="15" fill="rgb(248,84,24)" fg:x="3093" fg:w="2"/><text x="49.8014%" y="879.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.5514%" y="853" width="0.0320%" height="15" fill="rgb(245,115,18)" fg:x="3093" fg:w="2"/><text x="49.8014%" y="863.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.5514%" y="837" width="0.0320%" height="15" fill="rgb(227,176,51)" fg:x="3093" fg:w="2"/><text x="49.8014%" y="847.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="49.5514%" y="821" width="0.0320%" height="15" fill="rgb(229,63,42)" fg:x="3093" fg:w="2"/><text x="49.8014%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.03%)</title><rect x="49.5514%" y="805" width="0.0320%" height="15" fill="rgb(247,202,24)" fg:x="3093" fg:w="2"/><text x="49.8014%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.03%)</title><rect x="49.5514%" y="789" width="0.0320%" height="15" fill="rgb(244,173,20)" fg:x="3093" fg:w="2"/><text x="49.8014%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="49.5674%" y="773" width="0.0160%" height="15" fill="rgb(242,81,47)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5674%" y="757" width="0.0160%" height="15" fill="rgb(231,185,54)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5674%" y="741" width="0.0160%" height="15" fill="rgb(243,55,32)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="49.5674%" y="725" width="0.0160%" height="15" fill="rgb(208,167,19)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5674%" y="709" width="0.0160%" height="15" fill="rgb(231,72,35)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5674%" y="693" width="0.0160%" height="15" fill="rgb(250,173,51)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="49.5674%" y="677" width="0.0160%" height="15" fill="rgb(209,5,22)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="687.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5674%" y="661" width="0.0160%" height="15" fill="rgb(250,174,19)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.5674%" y="645" width="0.0160%" height="15" fill="rgb(217,3,49)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.5674%" y="629" width="0.0160%" height="15" fill="rgb(218,225,5)" fg:x="3094" fg:w="1"/><text x="49.8174%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="853" width="0.0160%" height="15" fill="rgb(236,89,11)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="837" width="0.0160%" height="15" fill="rgb(206,33,28)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="821" width="0.0160%" height="15" fill="rgb(241,56,42)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="805" width="0.0160%" height="15" fill="rgb(222,44,11)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="789" width="0.0160%" height="15" fill="rgb(234,111,20)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="773" width="0.0160%" height="15" fill="rgb(237,77,6)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="757" width="0.0160%" height="15" fill="rgb(235,111,23)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="741" width="0.0160%" height="15" fill="rgb(251,135,29)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="725" width="0.0160%" height="15" fill="rgb(217,57,1)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="709" width="0.0160%" height="15" fill="rgb(249,119,31)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="719.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="49.5835%" y="693" width="0.0160%" height="15" fill="rgb(233,164,33)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="677" width="0.0160%" height="15" fill="rgb(250,217,43)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="661" width="0.0160%" height="15" fill="rgb(232,154,50)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="645" width="0.0160%" height="15" fill="rgb(227,190,8)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.5835%" y="629" width="0.0160%" height="15" fill="rgb(209,217,32)" fg:x="3095" fg:w="1"/><text x="49.8335%" y="639.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.03%)</title><rect x="49.5835%" y="965" width="0.0320%" height="15" fill="rgb(243,203,50)" fg:x="3095" fg:w="2"/><text x="49.8335%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="49.5835%" y="949" width="0.0320%" height="15" fill="rgb(232,152,27)" fg:x="3095" fg:w="2"/><text x="49.8335%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="49.5835%" y="933" width="0.0320%" height="15" fill="rgb(240,34,29)" fg:x="3095" fg:w="2"/><text x="49.8335%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.5835%" y="917" width="0.0320%" height="15" fill="rgb(215,185,52)" fg:x="3095" fg:w="2"/><text x="49.8335%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="49.5835%" y="901" width="0.0320%" height="15" fill="rgb(240,89,49)" fg:x="3095" fg:w="2"/><text x="49.8335%" y="911.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="49.5835%" y="885" width="0.0320%" height="15" fill="rgb(225,12,52)" fg:x="3095" fg:w="2"/><text x="49.8335%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.03%)</title><rect x="49.5835%" y="869" width="0.0320%" height="15" fill="rgb(239,128,45)" fg:x="3095" fg:w="2"/><text x="49.8335%" y="879.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5995%" y="853" width="0.0160%" height="15" fill="rgb(211,78,47)" fg:x="3096" fg:w="1"/><text x="49.8495%" y="863.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.5995%" y="837" width="0.0160%" height="15" fill="rgb(232,31,21)" fg:x="3096" fg:w="1"/><text x="49.8495%" y="847.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="49.5995%" y="821" width="0.0160%" height="15" fill="rgb(222,168,14)" fg:x="3096" fg:w="1"/><text x="49.8495%" y="831.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="49.5995%" y="805" width="0.0160%" height="15" fill="rgb(209,128,24)" fg:x="3096" fg:w="1"/><text x="49.8495%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="1125" width="0.1282%" height="15" fill="rgb(249,35,13)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="1109" width="0.1282%" height="15" fill="rgb(218,7,2)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="1093" width="0.1282%" height="15" fill="rgb(238,107,27)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="1077" width="0.1282%" height="15" fill="rgb(217,88,38)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="1061" width="0.1282%" height="15" fill="rgb(230,207,0)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="1045" width="0.1282%" height="15" fill="rgb(249,64,54)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="1029" width="0.1282%" height="15" fill="rgb(231,7,11)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="1013" width="0.1282%" height="15" fill="rgb(205,149,21)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="1023.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="997" width="0.1282%" height="15" fill="rgb(215,126,34)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="1007.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.13%)</title><rect x="49.5034%" y="981" width="0.1282%" height="15" fill="rgb(241,132,45)" fg:x="3090" fg:w="8"/><text x="49.7534%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="965" width="0.0160%" height="15" fill="rgb(252,69,32)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="949" width="0.0160%" height="15" fill="rgb(232,204,19)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="933" width="0.0160%" height="15" fill="rgb(249,15,47)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="917" width="0.0160%" height="15" fill="rgb(209,227,23)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="901" width="0.0160%" height="15" fill="rgb(248,92,24)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="885" width="0.0160%" height="15" fill="rgb(247,59,2)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="895.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="49.6155%" y="869" width="0.0160%" height="15" fill="rgb(221,30,5)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="853" width="0.0160%" height="15" fill="rgb(208,108,53)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="837" width="0.0160%" height="15" fill="rgb(211,183,26)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="821" width="0.0160%" height="15" fill="rgb(232,132,4)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="805" width="0.0160%" height="15" fill="rgb(253,128,37)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="789" width="0.0160%" height="15" fill="rgb(221,58,24)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="773" width="0.0160%" height="15" fill="rgb(230,54,45)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="757" width="0.0160%" height="15" fill="rgb(254,21,18)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="741" width="0.0160%" height="15" fill="rgb(221,108,0)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="725" width="0.0160%" height="15" fill="rgb(206,95,1)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="709" width="0.0160%" height="15" fill="rgb(237,52,5)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="693" width="0.0160%" height="15" fill="rgb(218,150,34)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="677" width="0.0160%" height="15" fill="rgb(235,194,28)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="661" width="0.0160%" height="15" fill="rgb(245,92,18)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.6155%" y="645" width="0.0160%" height="15" fill="rgb(253,203,53)" fg:x="3097" fg:w="1"/><text x="49.8655%" y="655.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (162 samples, 2.60%)</title><rect x="47.1323%" y="1285" width="2.5953%" height="15" fill="rgb(249,185,47)" fg:x="2942" fg:w="162"/><text x="47.3823%" y="1295.50">no..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (14 samples, 0.22%)</title><rect x="49.5034%" y="1269" width="0.2243%" height="15" fill="rgb(252,194,52)" fg:x="3090" fg:w="14"/><text x="49.7534%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (14 samples, 0.22%)</title><rect x="49.5034%" y="1253" width="0.2243%" height="15" fill="rgb(210,53,36)" fg:x="3090" fg:w="14"/><text x="49.7534%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (14 samples, 0.22%)</title><rect x="49.5034%" y="1237" width="0.2243%" height="15" fill="rgb(237,37,25)" fg:x="3090" fg:w="14"/><text x="49.7534%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (14 samples, 0.22%)</title><rect x="49.5034%" y="1221" width="0.2243%" height="15" fill="rgb(242,116,27)" fg:x="3090" fg:w="14"/><text x="49.7534%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (14 samples, 0.22%)</title><rect x="49.5034%" y="1205" width="0.2243%" height="15" fill="rgb(213,185,26)" fg:x="3090" fg:w="14"/><text x="49.7534%" y="1215.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.22%)</title><rect x="49.5034%" y="1189" width="0.2243%" height="15" fill="rgb(225,204,8)" fg:x="3090" fg:w="14"/><text x="49.7534%" y="1199.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.22%)</title><rect x="49.5034%" y="1173" width="0.2243%" height="15" fill="rgb(254,111,37)" fg:x="3090" fg:w="14"/><text x="49.7534%" y="1183.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (14 samples, 0.22%)</title><rect x="49.5034%" y="1157" width="0.2243%" height="15" fill="rgb(242,35,9)" fg:x="3090" fg:w="14"/><text x="49.7534%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (14 samples, 0.22%)</title><rect x="49.5034%" y="1141" width="0.2243%" height="15" fill="rgb(232,138,49)" fg:x="3090" fg:w="14"/><text x="49.7534%" y="1151.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="49.6315%" y="1125" width="0.0961%" height="15" fill="rgb(247,56,4)" fg:x="3098" fg:w="6"/><text x="49.8815%" y="1135.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.6956%" y="1109" width="0.0320%" height="15" fill="rgb(226,179,17)" fg:x="3102" fg:w="2"/><text x="49.9456%" y="1119.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="49.6956%" y="1093" width="0.0320%" height="15" fill="rgb(216,163,45)" fg:x="3102" fg:w="2"/><text x="49.9456%" y="1103.50"></text></g><g><title>SizeComputer::write (2 samples, 0.03%)</title><rect x="49.6956%" y="1077" width="0.0320%" height="15" fill="rgb(211,157,3)" fg:x="3102" fg:w="2"/><text x="49.9456%" y="1087.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (4 samples, 0.06%)</title><rect x="49.7277%" y="981" width="0.0641%" height="15" fill="rgb(234,44,20)" fg:x="3104" fg:w="4"/><text x="49.9777%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (4 samples, 0.06%)</title><rect x="49.7277%" y="965" width="0.0641%" height="15" fill="rgb(254,138,23)" fg:x="3104" fg:w="4"/><text x="49.9777%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="49.7277%" y="949" width="0.0641%" height="15" fill="rgb(206,119,39)" fg:x="3104" fg:w="4"/><text x="49.9777%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="49.7277%" y="933" width="0.0641%" height="15" fill="rgb(231,105,52)" fg:x="3104" fg:w="4"/><text x="49.9777%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="49.7277%" y="917" width="0.0641%" height="15" fill="rgb(250,20,5)" fg:x="3104" fg:w="4"/><text x="49.9777%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="901" width="0.0320%" height="15" fill="rgb(215,198,30)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="885" width="0.0320%" height="15" fill="rgb(246,142,8)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="895.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="869" width="0.0320%" height="15" fill="rgb(243,26,38)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="879.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="853" width="0.0320%" height="15" fill="rgb(205,133,28)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="863.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="837" width="0.0320%" height="15" fill="rgb(212,34,0)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="821" width="0.0320%" height="15" fill="rgb(251,226,22)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="805" width="0.0320%" height="15" fill="rgb(252,119,9)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="789" width="0.0320%" height="15" fill="rgb(213,150,50)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="773" width="0.0320%" height="15" fill="rgb(212,24,39)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="757" width="0.0320%" height="15" fill="rgb(213,46,39)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="741" width="0.0320%" height="15" fill="rgb(239,106,12)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="725" width="0.0320%" height="15" fill="rgb(249,229,21)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.03%)</title><rect x="49.7597%" y="709" width="0.0320%" height="15" fill="rgb(212,158,3)" fg:x="3106" fg:w="2"/><text x="50.0097%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="49.7757%" y="693" width="0.0160%" height="15" fill="rgb(253,26,48)" fg:x="3107" fg:w="1"/><text x="50.0257%" y="703.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="49.7757%" y="677" width="0.0160%" height="15" fill="rgb(238,178,20)" fg:x="3107" fg:w="1"/><text x="50.0257%" y="687.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="49.8238%" y="901" width="0.0160%" height="15" fill="rgb(208,86,15)" fg:x="3110" fg:w="1"/><text x="50.0738%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.8398%" y="789" width="0.0160%" height="15" fill="rgb(239,42,53)" fg:x="3111" fg:w="1"/><text x="50.0898%" y="799.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.8398%" y="773" width="0.0160%" height="15" fill="rgb(245,226,8)" fg:x="3111" fg:w="1"/><text x="50.0898%" y="783.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="49.8398%" y="757" width="0.0160%" height="15" fill="rgb(216,176,32)" fg:x="3111" fg:w="1"/><text x="50.0898%" y="767.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="49.8398%" y="741" width="0.0160%" height="15" fill="rgb(231,186,21)" fg:x="3111" fg:w="1"/><text x="50.0898%" y="751.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (7 samples, 0.11%)</title><rect x="49.7917%" y="981" width="0.1121%" height="15" fill="rgb(205,95,49)" fg:x="3108" fg:w="7"/><text x="50.0417%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (7 samples, 0.11%)</title><rect x="49.7917%" y="965" width="0.1121%" height="15" fill="rgb(217,145,8)" fg:x="3108" fg:w="7"/><text x="50.0417%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.11%)</title><rect x="49.7917%" y="949" width="0.1121%" height="15" fill="rgb(239,144,48)" fg:x="3108" fg:w="7"/><text x="50.0417%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.11%)</title><rect x="49.7917%" y="933" width="0.1121%" height="15" fill="rgb(214,189,23)" fg:x="3108" fg:w="7"/><text x="50.0417%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (7 samples, 0.11%)</title><rect x="49.7917%" y="917" width="0.1121%" height="15" fill="rgb(229,157,17)" fg:x="3108" fg:w="7"/><text x="50.0417%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (4 samples, 0.06%)</title><rect x="49.8398%" y="901" width="0.0641%" height="15" fill="rgb(230,5,48)" fg:x="3111" fg:w="4"/><text x="50.0898%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (4 samples, 0.06%)</title><rect x="49.8398%" y="885" width="0.0641%" height="15" fill="rgb(224,156,48)" fg:x="3111" fg:w="4"/><text x="50.0898%" y="895.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="49.8398%" y="869" width="0.0641%" height="15" fill="rgb(223,14,29)" fg:x="3111" fg:w="4"/><text x="50.0898%" y="879.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="49.8398%" y="853" width="0.0641%" height="15" fill="rgb(229,96,36)" fg:x="3111" fg:w="4"/><text x="50.0898%" y="863.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (4 samples, 0.06%)</title><rect x="49.8398%" y="837" width="0.0641%" height="15" fill="rgb(231,102,53)" fg:x="3111" fg:w="4"/><text x="50.0898%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (4 samples, 0.06%)</title><rect x="49.8398%" y="821" width="0.0641%" height="15" fill="rgb(210,77,38)" fg:x="3111" fg:w="4"/><text x="50.0898%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (4 samples, 0.06%)</title><rect x="49.8398%" y="805" width="0.0641%" height="15" fill="rgb(235,131,6)" fg:x="3111" fg:w="4"/><text x="50.0898%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.05%)</title><rect x="49.8558%" y="789" width="0.0481%" height="15" fill="rgb(252,55,38)" fg:x="3112" fg:w="3"/><text x="50.1058%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="49.8558%" y="773" width="0.0481%" height="15" fill="rgb(246,38,14)" fg:x="3112" fg:w="3"/><text x="50.1058%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="49.8558%" y="757" width="0.0481%" height="15" fill="rgb(242,27,5)" fg:x="3112" fg:w="3"/><text x="50.1058%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="49.8558%" y="741" width="0.0481%" height="15" fill="rgb(228,65,35)" fg:x="3112" fg:w="3"/><text x="50.1058%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="49.8558%" y="725" width="0.0481%" height="15" fill="rgb(245,93,11)" fg:x="3112" fg:w="3"/><text x="50.1058%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="49.8558%" y="709" width="0.0481%" height="15" fill="rgb(213,1,31)" fg:x="3112" fg:w="3"/><text x="50.1058%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.05%)</title><rect x="49.8558%" y="693" width="0.0481%" height="15" fill="rgb(237,205,14)" fg:x="3112" fg:w="3"/><text x="50.1058%" y="703.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="49.8879%" y="677" width="0.0160%" height="15" fill="rgb(232,118,45)" fg:x="3114" fg:w="1"/><text x="50.1379%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="1141" width="0.2243%" height="15" fill="rgb(218,5,6)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="1125" width="0.2243%" height="15" fill="rgb(251,87,51)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="1109" width="0.2243%" height="15" fill="rgb(207,225,20)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="1093" width="0.2243%" height="15" fill="rgb(222,78,54)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="1077" width="0.2243%" height="15" fill="rgb(232,85,16)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="1061" width="0.2243%" height="15" fill="rgb(244,25,33)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="1045" width="0.2243%" height="15" fill="rgb(233,24,36)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="1029" width="0.2243%" height="15" fill="rgb(253,49,54)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1039.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="1013" width="0.2243%" height="15" fill="rgb(245,12,22)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1023.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.22%)</title><rect x="49.7277%" y="997" width="0.2243%" height="15" fill="rgb(253,141,28)" fg:x="3104" fg:w="14"/><text x="49.9777%" y="1007.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (3 samples, 0.05%)</title><rect x="49.9039%" y="981" width="0.0481%" height="15" fill="rgb(225,207,27)" fg:x="3115" fg:w="3"/><text x="50.1539%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="49.9039%" y="965" width="0.0481%" height="15" fill="rgb(220,84,2)" fg:x="3115" fg:w="3"/><text x="50.1539%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="49.9039%" y="949" width="0.0481%" height="15" fill="rgb(224,37,37)" fg:x="3115" fg:w="3"/><text x="50.1539%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="49.9039%" y="933" width="0.0481%" height="15" fill="rgb(220,143,18)" fg:x="3115" fg:w="3"/><text x="50.1539%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="49.9039%" y="917" width="0.0481%" height="15" fill="rgb(210,88,33)" fg:x="3115" fg:w="3"/><text x="50.1539%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.9359%" y="901" width="0.0160%" height="15" fill="rgb(219,87,51)" fg:x="3117" fg:w="1"/><text x="50.1859%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="49.9359%" y="885" width="0.0160%" height="15" fill="rgb(211,7,35)" fg:x="3117" fg:w="1"/><text x="50.1859%" y="895.50"></text></g><g><title>ChainstateManager::AcceptBlock (224 samples, 3.59%)</title><rect x="46.4114%" y="1317" width="3.5886%" height="15" fill="rgb(232,77,2)" fg:x="2897" fg:w="224"/><text x="46.6614%" y="1327.50">Chai..</text></g><g><title>node::BlockManager::SaveBlockToDisk (202 samples, 3.24%)</title><rect x="46.7639%" y="1301" width="3.2361%" height="15" fill="rgb(249,94,25)" fg:x="2919" fg:w="202"/><text x="47.0139%" y="1311.50">nod..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (17 samples, 0.27%)</title><rect x="49.7277%" y="1285" width="0.2723%" height="15" fill="rgb(215,112,2)" fg:x="3104" fg:w="17"/><text x="49.9777%" y="1295.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (17 samples, 0.27%)</title><rect x="49.7277%" y="1269" width="0.2723%" height="15" fill="rgb(226,115,48)" fg:x="3104" fg:w="17"/><text x="49.9777%" y="1279.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (17 samples, 0.27%)</title><rect x="49.7277%" y="1253" width="0.2723%" height="15" fill="rgb(249,196,10)" fg:x="3104" fg:w="17"/><text x="49.9777%" y="1263.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (17 samples, 0.27%)</title><rect x="49.7277%" y="1237" width="0.2723%" height="15" fill="rgb(237,109,14)" fg:x="3104" fg:w="17"/><text x="49.9777%" y="1247.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (17 samples, 0.27%)</title><rect x="49.7277%" y="1221" width="0.2723%" height="15" fill="rgb(217,103,53)" fg:x="3104" fg:w="17"/><text x="49.9777%" y="1231.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.27%)</title><rect x="49.7277%" y="1205" width="0.2723%" height="15" fill="rgb(244,137,9)" fg:x="3104" fg:w="17"/><text x="49.9777%" y="1215.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.27%)</title><rect x="49.7277%" y="1189" width="0.2723%" height="15" fill="rgb(227,201,3)" fg:x="3104" fg:w="17"/><text x="49.9777%" y="1199.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (17 samples, 0.27%)</title><rect x="49.7277%" y="1173" width="0.2723%" height="15" fill="rgb(243,94,6)" fg:x="3104" fg:w="17"/><text x="49.9777%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (17 samples, 0.27%)</title><rect x="49.7277%" y="1157" width="0.2723%" height="15" fill="rgb(235,118,5)" fg:x="3104" fg:w="17"/><text x="49.9777%" y="1167.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="49.9519%" y="1141" width="0.0481%" height="15" fill="rgb(247,10,30)" fg:x="3118" fg:w="3"/><text x="50.2019%" y="1151.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="49.9680%" y="1125" width="0.0320%" height="15" fill="rgb(205,26,28)" fg:x="3119" fg:w="2"/><text x="50.2180%" y="1135.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="49.9680%" y="1109" width="0.0320%" height="15" fill="rgb(206,99,35)" fg:x="3119" fg:w="2"/><text x="50.2180%" y="1119.50"></text></g><g><title>SizeComputer::write (2 samples, 0.03%)</title><rect x="49.9680%" y="1093" width="0.0320%" height="15" fill="rgb(238,130,40)" fg:x="3119" fg:w="2"/><text x="50.2180%" y="1103.50"></text></g><g><title>CheckBlock (2 samples, 0.03%)</title><rect x="50.0160%" y="1269" width="0.0320%" height="15" fill="rgb(224,126,31)" fg:x="3122" fg:w="2"/><text x="50.2660%" y="1279.50"></text></g><g><title>TxValidationState::TxValidationState (1 samples, 0.02%)</title><rect x="50.0320%" y="1253" width="0.0160%" height="15" fill="rgb(254,105,17)" fg:x="3123" fg:w="1"/><text x="50.2820%" y="1263.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::ValidationState (1 samples, 0.02%)</title><rect x="50.0320%" y="1237" width="0.0160%" height="15" fill="rgb(216,87,36)" fg:x="3123" fg:w="1"/><text x="50.2820%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="50.0320%" y="1221" width="0.0160%" height="15" fill="rgb(240,21,12)" fg:x="3123" fg:w="1"/><text x="50.2820%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="50.0320%" y="1205" width="0.0160%" height="15" fill="rgb(245,192,34)" fg:x="3123" fg:w="1"/><text x="50.2820%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="50.0320%" y="1189" width="0.0160%" height="15" fill="rgb(226,100,49)" fg:x="3123" fg:w="1"/><text x="50.2820%" y="1199.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (1 samples, 0.02%)</title><rect x="50.0481%" y="1253" width="0.0160%" height="15" fill="rgb(245,188,27)" fg:x="3124" fg:w="1"/><text x="50.2981%" y="1263.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_const_iterator&lt;COutPoint&gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;&amp;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="50.0481%" y="1237" width="0.0160%" height="15" fill="rgb(212,170,8)" fg:x="3124" fg:w="1"/><text x="50.2981%" y="1247.50"></text></g><g><title>CheckTransaction (2 samples, 0.03%)</title><rect x="50.0481%" y="1269" width="0.0320%" height="15" fill="rgb(217,113,29)" fg:x="3124" fg:w="2"/><text x="50.2981%" y="1279.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1253" width="0.0160%" height="15" fill="rgb(237,30,3)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1263.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="50.0641%" y="1237" width="0.0160%" height="15" fill="rgb(227,19,28)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1247.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1221" width="0.0160%" height="15" fill="rgb(239,172,45)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1231.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1205" width="0.0160%" height="15" fill="rgb(254,55,39)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1189" width="0.0160%" height="15" fill="rgb(249,208,12)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1199.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1173" width="0.0160%" height="15" fill="rgb(240,52,13)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1183.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1157" width="0.0160%" height="15" fill="rgb(252,149,13)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1167.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="50.0641%" y="1141" width="0.0160%" height="15" fill="rgb(232,81,48)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1125" width="0.0160%" height="15" fill="rgb(222,144,2)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1109" width="0.0160%" height="15" fill="rgb(216,81,32)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1093" width="0.0160%" height="15" fill="rgb(244,78,51)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1077" width="0.0160%" height="15" fill="rgb(217,66,21)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1061" width="0.0160%" height="15" fill="rgb(247,101,42)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1045" width="0.0160%" height="15" fill="rgb(227,81,39)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1055.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1029" width="0.0160%" height="15" fill="rgb(220,223,44)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1039.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="1013" width="0.0160%" height="15" fill="rgb(205,218,2)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1023.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="997" width="0.0160%" height="15" fill="rgb(212,207,28)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="981" width="0.0160%" height="15" fill="rgb(224,12,41)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="991.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="965" width="0.0160%" height="15" fill="rgb(216,118,12)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="949" width="0.0160%" height="15" fill="rgb(252,97,46)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="959.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="933" width="0.0160%" height="15" fill="rgb(244,206,19)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="943.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="917" width="0.0160%" height="15" fill="rgb(231,84,31)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="927.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="901" width="0.0160%" height="15" fill="rgb(244,133,0)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="911.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="885" width="0.0160%" height="15" fill="rgb(223,15,50)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="895.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0641%" y="869" width="0.0160%" height="15" fill="rgb(250,118,49)" fg:x="3125" fg:w="1"/><text x="50.3141%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (2 samples, 0.03%)</title><rect x="50.0801%" y="1269" width="0.0320%" height="15" fill="rgb(248,25,38)" fg:x="3126" fg:w="2"/><text x="50.3301%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_S_left (1 samples, 0.02%)</title><rect x="50.1121%" y="1237" width="0.0160%" height="15" fill="rgb(215,70,14)" fg:x="3128" fg:w="1"/><text x="50.3621%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (2 samples, 0.03%)</title><rect x="50.1121%" y="1253" width="0.0320%" height="15" fill="rgb(215,28,15)" fg:x="3128" fg:w="2"/><text x="50.3621%" y="1263.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="50.1282%" y="1237" width="0.0160%" height="15" fill="rgb(243,6,28)" fg:x="3129" fg:w="1"/><text x="50.3782%" y="1247.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (1 samples, 0.02%)</title><rect x="50.1282%" y="1221" width="0.0160%" height="15" fill="rgb(222,130,1)" fg:x="3129" fg:w="1"/><text x="50.3782%" y="1231.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.1282%" y="1205" width="0.0160%" height="15" fill="rgb(236,166,44)" fg:x="3129" fg:w="1"/><text x="50.3782%" y="1215.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (1 samples, 0.02%)</title><rect x="50.1282%" y="1189" width="0.0160%" height="15" fill="rgb(221,108,14)" fg:x="3129" fg:w="1"/><text x="50.3782%" y="1199.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (1 samples, 0.02%)</title><rect x="50.1282%" y="1173" width="0.0160%" height="15" fill="rgb(252,3,45)" fg:x="3129" fg:w="1"/><text x="50.3782%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (1 samples, 0.02%)</title><rect x="50.1282%" y="1157" width="0.0160%" height="15" fill="rgb(237,68,30)" fg:x="3129" fg:w="1"/><text x="50.3782%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="50.1282%" y="1141" width="0.0160%" height="15" fill="rgb(211,79,22)" fg:x="3129" fg:w="1"/><text x="50.3782%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="50.1282%" y="1125" width="0.0160%" height="15" fill="rgb(252,185,21)" fg:x="3129" fg:w="1"/><text x="50.3782%" y="1135.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (1 samples, 0.02%)</title><rect x="50.1442%" y="1237" width="0.0160%" height="15" fill="rgb(225,189,26)" fg:x="3130" fg:w="1"/><text x="50.3942%" y="1247.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.1442%" y="1221" width="0.0160%" height="15" fill="rgb(241,30,40)" fg:x="3130" fg:w="1"/><text x="50.3942%" y="1231.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_node (1 samples, 0.02%)</title><rect x="50.1442%" y="1205" width="0.0160%" height="15" fill="rgb(235,215,44)" fg:x="3130" fg:w="1"/><text x="50.3942%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="50.1442%" y="1189" width="0.0160%" height="15" fill="rgb(205,8,29)" fg:x="3130" fg:w="1"/><text x="50.3942%" y="1199.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="50.1442%" y="1173" width="0.0160%" height="15" fill="rgb(241,137,42)" fg:x="3130" fg:w="1"/><text x="50.3942%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="50.1442%" y="1157" width="0.0160%" height="15" fill="rgb(237,155,2)" fg:x="3130" fg:w="1"/><text x="50.3942%" y="1167.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="50.1442%" y="1141" width="0.0160%" height="15" fill="rgb(245,29,42)" fg:x="3130" fg:w="1"/><text x="50.3942%" y="1151.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="50.1442%" y="1125" width="0.0160%" height="15" fill="rgb(234,101,35)" fg:x="3130" fg:w="1"/><text x="50.3942%" y="1135.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="50.1442%" y="1109" width="0.0160%" height="15" fill="rgb(228,64,37)" fg:x="3130" fg:w="1"/><text x="50.3942%" y="1119.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (10 samples, 0.16%)</title><rect x="50.0160%" y="1285" width="0.1602%" height="15" fill="rgb(217,214,36)" fg:x="3122" fg:w="10"/><text x="50.2660%" y="1295.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (4 samples, 0.06%)</title><rect x="50.1121%" y="1269" width="0.0641%" height="15" fill="rgb(243,70,3)" fg:x="3128" fg:w="4"/><text x="50.3621%" y="1279.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (2 samples, 0.03%)</title><rect x="50.1442%" y="1253" width="0.0320%" height="15" fill="rgb(253,158,52)" fg:x="3130" fg:w="2"/><text x="50.3942%" y="1263.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="50.1602%" y="1237" width="0.0160%" height="15" fill="rgb(234,111,54)" fg:x="3131" fg:w="1"/><text x="50.4102%" y="1247.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (1 samples, 0.02%)</title><rect x="50.1602%" y="1221" width="0.0160%" height="15" fill="rgb(217,70,32)" fg:x="3131" fg:w="1"/><text x="50.4102%" y="1231.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.1602%" y="1205" width="0.0160%" height="15" fill="rgb(234,18,33)" fg:x="3131" fg:w="1"/><text x="50.4102%" y="1215.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (1 samples, 0.02%)</title><rect x="50.1602%" y="1189" width="0.0160%" height="15" fill="rgb(234,12,49)" fg:x="3131" fg:w="1"/><text x="50.4102%" y="1199.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (1 samples, 0.02%)</title><rect x="50.1602%" y="1173" width="0.0160%" height="15" fill="rgb(236,10,21)" fg:x="3131" fg:w="1"/><text x="50.4102%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (1 samples, 0.02%)</title><rect x="50.1602%" y="1157" width="0.0160%" height="15" fill="rgb(248,182,45)" fg:x="3131" fg:w="1"/><text x="50.4102%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="50.1602%" y="1141" width="0.0160%" height="15" fill="rgb(217,95,36)" fg:x="3131" fg:w="1"/><text x="50.4102%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="50.1602%" y="1125" width="0.0160%" height="15" fill="rgb(212,110,31)" fg:x="3131" fg:w="1"/><text x="50.4102%" y="1135.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="50.1602%" y="1109" width="0.0160%" height="15" fill="rgb(206,32,53)" fg:x="3131" fg:w="1"/><text x="50.4102%" y="1119.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="50.1922%" y="1237" width="0.0160%" height="15" fill="rgb(246,141,37)" fg:x="3133" fg:w="1"/><text x="50.4422%" y="1247.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.1922%" y="1221" width="0.0160%" height="15" fill="rgb(219,16,7)" fg:x="3133" fg:w="1"/><text x="50.4422%" y="1231.50"></text></g><g><title>CheckTransaction (3 samples, 0.05%)</title><rect x="50.1762%" y="1253" width="0.0481%" height="15" fill="rgb(230,205,45)" fg:x="3132" fg:w="3"/><text x="50.4262%" y="1263.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1237" width="0.0160%" height="15" fill="rgb(231,43,49)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1247.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="50.2083%" y="1221" width="0.0160%" height="15" fill="rgb(212,106,34)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1231.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1205" width="0.0160%" height="15" fill="rgb(206,83,17)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1215.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1189" width="0.0160%" height="15" fill="rgb(244,154,49)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1173" width="0.0160%" height="15" fill="rgb(244,149,49)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1183.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1157" width="0.0160%" height="15" fill="rgb(227,134,18)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1167.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1141" width="0.0160%" height="15" fill="rgb(237,116,36)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1151.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="50.2083%" y="1125" width="0.0160%" height="15" fill="rgb(205,129,40)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1109" width="0.0160%" height="15" fill="rgb(236,178,4)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1093" width="0.0160%" height="15" fill="rgb(251,76,53)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1077" width="0.0160%" height="15" fill="rgb(242,92,40)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1061" width="0.0160%" height="15" fill="rgb(209,45,30)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1045" width="0.0160%" height="15" fill="rgb(218,157,36)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1029" width="0.0160%" height="15" fill="rgb(222,186,16)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1039.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="1013" width="0.0160%" height="15" fill="rgb(254,72,35)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1023.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="997" width="0.0160%" height="15" fill="rgb(224,25,35)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="1007.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="981" width="0.0160%" height="15" fill="rgb(206,135,52)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="965" width="0.0160%" height="15" fill="rgb(229,174,47)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="975.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="949" width="0.0160%" height="15" fill="rgb(242,184,21)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="933" width="0.0160%" height="15" fill="rgb(213,22,45)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="943.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="917" width="0.0160%" height="15" fill="rgb(237,81,54)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="927.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="901" width="0.0160%" height="15" fill="rgb(248,177,18)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="911.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="885" width="0.0160%" height="15" fill="rgb(254,31,16)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="895.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="869" width="0.0160%" height="15" fill="rgb(235,20,31)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="853" width="0.0160%" height="15" fill="rgb(240,56,43)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="50.2083%" y="837" width="0.0160%" height="15" fill="rgb(237,197,51)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="847.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="50.2083%" y="821" width="0.0160%" height="15" fill="rgb(241,162,44)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="831.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="50.2083%" y="805" width="0.0160%" height="15" fill="rgb(224,23,20)" fg:x="3134" fg:w="1"/><text x="50.4583%" y="815.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="50.2243%" y="1253" width="0.0160%" height="15" fill="rgb(250,109,34)" fg:x="3135" fg:w="1"/><text x="50.4743%" y="1263.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_drop_node (1 samples, 0.02%)</title><rect x="50.2243%" y="1237" width="0.0160%" height="15" fill="rgb(214,175,50)" fg:x="3135" fg:w="1"/><text x="50.4743%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_put_node (1 samples, 0.02%)</title><rect x="50.2243%" y="1221" width="0.0160%" height="15" fill="rgb(213,182,5)" fg:x="3135" fg:w="1"/><text x="50.4743%" y="1231.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="50.2243%" y="1205" width="0.0160%" height="15" fill="rgb(209,199,19)" fg:x="3135" fg:w="1"/><text x="50.4743%" y="1215.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="50.2243%" y="1189" width="0.0160%" height="15" fill="rgb(236,224,42)" fg:x="3135" fg:w="1"/><text x="50.4743%" y="1199.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="50.2243%" y="1173" width="0.0160%" height="15" fill="rgb(246,226,29)" fg:x="3135" fg:w="1"/><text x="50.4743%" y="1183.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2243%" y="1157" width="0.0160%" height="15" fill="rgb(227,223,11)" fg:x="3135" fg:w="1"/><text x="50.4743%" y="1167.50"></text></g><g><title>CheckTransaction (15 samples, 0.24%)</title><rect x="50.0160%" y="1301" width="0.2403%" height="15" fill="rgb(219,7,51)" fg:x="3122" fg:w="15"/><text x="50.2660%" y="1311.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (5 samples, 0.08%)</title><rect x="50.1762%" y="1285" width="0.0801%" height="15" fill="rgb(245,167,10)" fg:x="3132" fg:w="5"/><text x="50.4262%" y="1295.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (5 samples, 0.08%)</title><rect x="50.1762%" y="1269" width="0.0801%" height="15" fill="rgb(237,224,16)" fg:x="3132" fg:w="5"/><text x="50.4262%" y="1279.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2403%" y="1253" width="0.0160%" height="15" fill="rgb(226,132,13)" fg:x="3136" fg:w="1"/><text x="50.4903%" y="1263.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2403%" y="1237" width="0.0160%" height="15" fill="rgb(214,140,3)" fg:x="3136" fg:w="1"/><text x="50.4903%" y="1247.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="50.2403%" y="1221" width="0.0160%" height="15" fill="rgb(221,177,4)" fg:x="3136" fg:w="1"/><text x="50.4903%" y="1231.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="50.2403%" y="1205" width="0.0160%" height="15" fill="rgb(238,139,3)" fg:x="3136" fg:w="1"/><text x="50.4903%" y="1215.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="50.2884%" y="1253" width="0.0160%" height="15" fill="rgb(216,17,39)" fg:x="3139" fg:w="1"/><text x="50.5384%" y="1263.50"></text></g><g><title>CScript::GetOp (6 samples, 0.10%)</title><rect x="50.2884%" y="1269" width="0.0961%" height="15" fill="rgb(238,120,9)" fg:x="3139" fg:w="6"/><text x="50.5384%" y="1279.50"></text></g><g><title>GetScriptOp (5 samples, 0.08%)</title><rect x="50.3044%" y="1253" width="0.0801%" height="15" fill="rgb(244,92,53)" fg:x="3140" fg:w="5"/><text x="50.5544%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator&gt;=(prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator) const (1 samples, 0.02%)</title><rect x="50.3685%" y="1237" width="0.0160%" height="15" fill="rgb(224,148,33)" fg:x="3144" fg:w="1"/><text x="50.6185%" y="1247.50"></text></g><g><title>CScript::GetSigOpCount (9 samples, 0.14%)</title><rect x="50.2563%" y="1285" width="0.1442%" height="15" fill="rgb(243,6,36)" fg:x="3137" fg:w="9"/><text x="50.5063%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="50.3845%" y="1269" width="0.0160%" height="15" fill="rgb(230,102,11)" fg:x="3145" fg:w="1"/><text x="50.6345%" y="1279.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="50.3845%" y="1253" width="0.0160%" height="15" fill="rgb(234,148,36)" fg:x="3145" fg:w="1"/><text x="50.6345%" y="1263.50"></text></g><g><title>GetLegacySigOpCount (14 samples, 0.22%)</title><rect x="50.2563%" y="1301" width="0.2243%" height="15" fill="rgb(251,153,25)" fg:x="3137" fg:w="14"/><text x="50.5063%" y="1311.50"></text></g><g><title>GetScriptOp (5 samples, 0.08%)</title><rect x="50.4005%" y="1285" width="0.0801%" height="15" fill="rgb(215,129,8)" fg:x="3146" fg:w="5"/><text x="50.6505%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator+ (1 samples, 0.02%)</title><rect x="50.4646%" y="1269" width="0.0160%" height="15" fill="rgb(224,128,35)" fg:x="3150" fg:w="1"/><text x="50.7146%" y="1279.50"></text></g><g><title>GetScriptOp (5 samples, 0.08%)</title><rect x="50.4806%" y="1301" width="0.0801%" height="15" fill="rgb(237,56,52)" fg:x="3151" fg:w="5"/><text x="50.7306%" y="1311.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator&gt;=(prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator) const (1 samples, 0.02%)</title><rect x="50.5447%" y="1285" width="0.0160%" height="15" fill="rgb(234,213,19)" fg:x="3155" fg:w="1"/><text x="50.7947%" y="1295.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.5607%" y="1301" width="0.0160%" height="15" fill="rgb(252,82,23)" fg:x="3156" fg:w="1"/><text x="50.8107%" y="1311.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="50.5607%" y="1285" width="0.0160%" height="15" fill="rgb(254,201,21)" fg:x="3156" fg:w="1"/><text x="50.8107%" y="1295.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (1 samples, 0.02%)</title><rect x="50.5607%" y="1269" width="0.0160%" height="15" fill="rgb(250,186,11)" fg:x="3156" fg:w="1"/><text x="50.8107%" y="1279.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.5607%" y="1253" width="0.0160%" height="15" fill="rgb(211,174,5)" fg:x="3156" fg:w="1"/><text x="50.8107%" y="1263.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_node (1 samples, 0.02%)</title><rect x="50.5607%" y="1237" width="0.0160%" height="15" fill="rgb(214,121,10)" fg:x="3156" fg:w="1"/><text x="50.8107%" y="1247.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="50.5607%" y="1221" width="0.0160%" height="15" fill="rgb(241,66,2)" fg:x="3156" fg:w="1"/><text x="50.8107%" y="1231.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="50.5607%" y="1205" width="0.0160%" height="15" fill="rgb(220,167,19)" fg:x="3156" fg:w="1"/><text x="50.8107%" y="1215.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="50.5607%" y="1189" width="0.0160%" height="15" fill="rgb(231,54,50)" fg:x="3156" fg:w="1"/><text x="50.8107%" y="1199.50"></text></g><g><title>CheckBlock (1 samples, 0.02%)</title><rect x="50.5928%" y="1013" width="0.0160%" height="15" fill="rgb(239,217,53)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="1023.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="997" width="0.0160%" height="15" fill="rgb(248,8,0)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="1007.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="50.5928%" y="981" width="0.0160%" height="15" fill="rgb(229,118,37)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="991.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="965" width="0.0160%" height="15" fill="rgb(253,223,43)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="975.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="949" width="0.0160%" height="15" fill="rgb(211,77,36)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="933" width="0.0160%" height="15" fill="rgb(219,3,53)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="943.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="917" width="0.0160%" height="15" fill="rgb(244,45,42)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="927.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="901" width="0.0160%" height="15" fill="rgb(225,95,27)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="911.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="885" width="0.0160%" height="15" fill="rgb(207,74,8)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="895.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="869" width="0.0160%" height="15" fill="rgb(243,63,36)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="853" width="0.0160%" height="15" fill="rgb(211,180,12)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="837" width="0.0160%" height="15" fill="rgb(254,166,49)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="821" width="0.0160%" height="15" fill="rgb(205,19,0)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="805" width="0.0160%" height="15" fill="rgb(224,172,32)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="789" width="0.0160%" height="15" fill="rgb(254,136,30)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="773" width="0.0160%" height="15" fill="rgb(246,19,35)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="757" width="0.0160%" height="15" fill="rgb(219,24,36)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="741" width="0.0160%" height="15" fill="rgb(251,55,1)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.5928%" y="725" width="0.0160%" height="15" fill="rgb(218,117,39)" fg:x="3158" fg:w="1"/><text x="50.8428%" y="735.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.6088%" y="917" width="0.0160%" height="15" fill="rgb(248,169,11)" fg:x="3159" fg:w="1"/><text x="50.8588%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="917" width="0.0481%" height="15" fill="rgb(244,40,44)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="901" width="0.0481%" height="15" fill="rgb(234,62,37)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="911.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="885" width="0.0481%" height="15" fill="rgb(207,117,42)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="895.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="869" width="0.0481%" height="15" fill="rgb(213,43,2)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="879.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="853" width="0.0481%" height="15" fill="rgb(244,202,51)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="837" width="0.0481%" height="15" fill="rgb(253,174,46)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="821" width="0.0481%" height="15" fill="rgb(251,23,1)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="805" width="0.0481%" height="15" fill="rgb(253,26,1)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="815.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="789" width="0.0481%" height="15" fill="rgb(216,89,31)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="799.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="773" width="0.0481%" height="15" fill="rgb(209,109,5)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="783.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="757" width="0.0481%" height="15" fill="rgb(229,63,13)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="741" width="0.0481%" height="15" fill="rgb(238,137,54)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6248%" y="725" width="0.0481%" height="15" fill="rgb(228,1,9)" fg:x="3160" fg:w="3"/><text x="50.8748%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.03%)</title><rect x="50.6408%" y="709" width="0.0320%" height="15" fill="rgb(249,120,48)" fg:x="3161" fg:w="2"/><text x="50.8908%" y="719.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (2 samples, 0.03%)</title><rect x="50.6408%" y="693" width="0.0320%" height="15" fill="rgb(209,72,36)" fg:x="3161" fg:w="2"/><text x="50.8908%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.6568%" y="677" width="0.0160%" height="15" fill="rgb(247,98,49)" fg:x="3162" fg:w="1"/><text x="50.9068%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.6568%" y="661" width="0.0160%" height="15" fill="rgb(233,75,36)" fg:x="3162" fg:w="1"/><text x="50.9068%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.6568%" y="645" width="0.0160%" height="15" fill="rgb(225,14,24)" fg:x="3162" fg:w="1"/><text x="50.9068%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.6568%" y="629" width="0.0160%" height="15" fill="rgb(237,193,20)" fg:x="3162" fg:w="1"/><text x="50.9068%" y="639.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="50.6729%" y="597" width="0.0320%" height="15" fill="rgb(239,122,19)" fg:x="3163" fg:w="2"/><text x="50.9229%" y="607.50"></text></g><g><title>SizeComputer::write (2 samples, 0.03%)</title><rect x="50.6729%" y="581" width="0.0320%" height="15" fill="rgb(231,220,10)" fg:x="3163" fg:w="2"/><text x="50.9229%" y="591.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="917" width="0.0481%" height="15" fill="rgb(220,66,15)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="927.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (3 samples, 0.05%)</title><rect x="50.6729%" y="901" width="0.0481%" height="15" fill="rgb(215,171,52)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="885" width="0.0481%" height="15" fill="rgb(241,169,50)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="869" width="0.0481%" height="15" fill="rgb(236,189,0)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="853" width="0.0481%" height="15" fill="rgb(217,147,20)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="837" width="0.0481%" height="15" fill="rgb(206,188,39)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="821" width="0.0481%" height="15" fill="rgb(227,118,25)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="805" width="0.0481%" height="15" fill="rgb(248,171,40)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="815.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="789" width="0.0481%" height="15" fill="rgb(251,90,54)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="799.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="773" width="0.0481%" height="15" fill="rgb(234,11,46)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="783.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="757" width="0.0481%" height="15" fill="rgb(229,134,13)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="741" width="0.0481%" height="15" fill="rgb(223,129,3)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="725" width="0.0481%" height="15" fill="rgb(221,124,13)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="709" width="0.0481%" height="15" fill="rgb(234,3,18)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="693" width="0.0481%" height="15" fill="rgb(249,199,20)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="677" width="0.0481%" height="15" fill="rgb(224,134,6)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="661" width="0.0481%" height="15" fill="rgb(254,83,26)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="645" width="0.0481%" height="15" fill="rgb(217,88,9)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="629" width="0.0481%" height="15" fill="rgb(225,73,2)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.05%)</title><rect x="50.6729%" y="613" width="0.0481%" height="15" fill="rgb(226,44,39)" fg:x="3163" fg:w="3"/><text x="50.9229%" y="623.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7049%" y="597" width="0.0160%" height="15" fill="rgb(228,53,17)" fg:x="3165" fg:w="1"/><text x="50.9549%" y="607.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7049%" y="581" width="0.0160%" height="15" fill="rgb(212,27,27)" fg:x="3165" fg:w="1"/><text x="50.9549%" y="591.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="50.7049%" y="565" width="0.0160%" height="15" fill="rgb(241,50,6)" fg:x="3165" fg:w="1"/><text x="50.9549%" y="575.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="50.7049%" y="549" width="0.0160%" height="15" fill="rgb(225,28,51)" fg:x="3165" fg:w="1"/><text x="50.9549%" y="559.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (8 samples, 0.13%)</title><rect x="50.6088%" y="997" width="0.1282%" height="15" fill="rgb(215,33,16)" fg:x="3159" fg:w="8"/><text x="50.8588%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (8 samples, 0.13%)</title><rect x="50.6088%" y="981" width="0.1282%" height="15" fill="rgb(243,40,39)" fg:x="3159" fg:w="8"/><text x="50.8588%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.13%)</title><rect x="50.6088%" y="965" width="0.1282%" height="15" fill="rgb(225,11,42)" fg:x="3159" fg:w="8"/><text x="50.8588%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="50.6088%" y="949" width="0.1282%" height="15" fill="rgb(241,220,38)" fg:x="3159" fg:w="8"/><text x="50.8588%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="50.6088%" y="933" width="0.1282%" height="15" fill="rgb(244,52,35)" fg:x="3159" fg:w="8"/><text x="50.8588%" y="943.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7209%" y="917" width="0.0160%" height="15" fill="rgb(246,42,46)" fg:x="3166" fg:w="1"/><text x="50.9709%" y="927.50"></text></g><g><title>CheckBlock (47 samples, 0.75%)</title><rect x="50.0000%" y="1317" width="0.7530%" height="15" fill="rgb(205,184,13)" fg:x="3121" fg:w="47"/><text x="50.2500%" y="1327.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1301" width="0.1762%" height="15" fill="rgb(209,48,36)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1311.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (11 samples, 0.18%)</title><rect x="50.5767%" y="1285" width="0.1762%" height="15" fill="rgb(244,34,51)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1295.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1269" width="0.1762%" height="15" fill="rgb(221,107,33)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1279.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1253" width="0.1762%" height="15" fill="rgb(224,203,12)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1237" width="0.1762%" height="15" fill="rgb(230,215,18)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1247.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1221" width="0.1762%" height="15" fill="rgb(206,185,35)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1231.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1205" width="0.1762%" height="15" fill="rgb(228,140,34)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1215.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1189" width="0.1762%" height="15" fill="rgb(208,93,13)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1199.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1173" width="0.1762%" height="15" fill="rgb(221,193,39)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1183.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1157" width="0.1762%" height="15" fill="rgb(241,132,34)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1141" width="0.1762%" height="15" fill="rgb(221,141,10)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1125" width="0.1762%" height="15" fill="rgb(226,90,31)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1135.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1109" width="0.1762%" height="15" fill="rgb(243,75,5)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1119.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1093" width="0.1762%" height="15" fill="rgb(227,156,21)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1103.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1077" width="0.1762%" height="15" fill="rgb(250,195,8)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1061" width="0.1762%" height="15" fill="rgb(220,134,5)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1045" width="0.1762%" height="15" fill="rgb(246,106,34)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1055.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="50.5767%" y="1029" width="0.1762%" height="15" fill="rgb(205,1,4)" fg:x="3157" fg:w="11"/><text x="50.8267%" y="1039.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.14%)</title><rect x="50.6088%" y="1013" width="0.1442%" height="15" fill="rgb(224,151,29)" fg:x="3159" fg:w="9"/><text x="50.8588%" y="1023.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="50.7369%" y="997" width="0.0160%" height="15" fill="rgb(251,196,0)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="981" width="0.0160%" height="15" fill="rgb(212,127,0)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="965" width="0.0160%" height="15" fill="rgb(236,71,53)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="949" width="0.0160%" height="15" fill="rgb(227,99,0)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="933" width="0.0160%" height="15" fill="rgb(239,89,21)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="943.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="917" width="0.0160%" height="15" fill="rgb(243,122,19)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="901" width="0.0160%" height="15" fill="rgb(229,192,45)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="911.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="885" width="0.0160%" height="15" fill="rgb(235,165,35)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="895.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="869" width="0.0160%" height="15" fill="rgb(253,202,0)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="879.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="853" width="0.0160%" height="15" fill="rgb(235,51,20)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="837" width="0.0160%" height="15" fill="rgb(218,95,46)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="821" width="0.0160%" height="15" fill="rgb(212,81,10)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="805" width="0.0160%" height="15" fill="rgb(240,59,0)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="815.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7369%" y="789" width="0.0160%" height="15" fill="rgb(212,191,42)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="799.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="50.7369%" y="773" width="0.0160%" height="15" fill="rgb(233,140,3)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="783.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="50.7369%" y="757" width="0.0160%" height="15" fill="rgb(215,69,23)" fg:x="3167" fg:w="1"/><text x="50.9869%" y="767.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (2,364 samples, 37.87%)</title><rect x="12.8965%" y="1333" width="37.8725%" height="15" fill="rgb(240,202,20)" fg:x="805" fg:w="2364"/><text x="13.1465%" y="1343.50">ChainstateManager::ProcessNewBlock</text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="50.7530%" y="1317" width="0.0160%" height="15" fill="rgb(209,146,50)" fg:x="3168" fg:w="1"/><text x="51.0030%" y="1327.50"></text></g><g><title>base_blob&lt;256u&gt;::ToString[abi:cxx11] (1 samples, 0.02%)</title><rect x="50.7690%" y="1301" width="0.0160%" height="15" fill="rgb(253,102,54)" fg:x="3169" fg:w="1"/><text x="51.0190%" y="1311.50"></text></g><g><title>base_blob&lt;256u&gt;::GetHex[abi:cxx11] (1 samples, 0.02%)</title><rect x="50.7690%" y="1285" width="0.0160%" height="15" fill="rgb(250,173,47)" fg:x="3169" fg:w="1"/><text x="51.0190%" y="1295.50"></text></g><g><title>node::BlockManager::AddToBlockIndex (1 samples, 0.02%)</title><rect x="50.7690%" y="1269" width="0.0160%" height="15" fill="rgb(232,142,7)" fg:x="3169" fg:w="1"/><text x="51.0190%" y="1279.50"></text></g><g><title>std::set&lt;CBlockIndex*, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::insert (1 samples, 0.02%)</title><rect x="50.7690%" y="1253" width="0.0160%" height="15" fill="rgb(230,157,47)" fg:x="3169" fg:w="1"/><text x="51.0190%" y="1263.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;CBlockIndex*&gt;, bool&gt; std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_insert_unique&lt;CBlockIndex* const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.7690%" y="1237" width="0.0160%" height="15" fill="rgb(214,177,35)" fg:x="3169" fg:w="1"/><text x="51.0190%" y="1247.50"></text></g><g><title>std::_Rb_tree_iterator&lt;CBlockIndex*&gt; std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_insert_&lt;CBlockIndex* const&amp;, std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="50.7690%" y="1221" width="0.0160%" height="15" fill="rgb(234,119,46)" fg:x="3169" fg:w="1"/><text x="51.0190%" y="1231.50"></text></g><g><title>node::BlockManager::AddToBlockIndex (1 samples, 0.02%)</title><rect x="50.7850%" y="1301" width="0.0160%" height="15" fill="rgb(241,180,50)" fg:x="3170" fg:w="1"/><text x="51.0350%" y="1311.50"></text></g><g><title>GetBlockProof (1 samples, 0.02%)</title><rect x="50.7850%" y="1285" width="0.0160%" height="15" fill="rgb(221,54,25)" fg:x="3170" fg:w="1"/><text x="51.0350%" y="1295.50"></text></g><g><title>operator/ (1 samples, 0.02%)</title><rect x="50.7850%" y="1269" width="0.0160%" height="15" fill="rgb(209,157,44)" fg:x="3170" fg:w="1"/><text x="51.0350%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.02%)</title><rect x="50.7850%" y="1253" width="0.0160%" height="15" fill="rgb(246,115,41)" fg:x="3170" fg:w="1"/><text x="51.0350%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::bits (1 samples, 0.02%)</title><rect x="50.7850%" y="1237" width="0.0160%" height="15" fill="rgb(229,86,1)" fg:x="3170" fg:w="1"/><text x="51.0350%" y="1247.50"></text></g><g><title>ChainstateManager::ProcessNewBlockHeaders (3 samples, 0.05%)</title><rect x="50.7690%" y="1333" width="0.0481%" height="15" fill="rgb(240,108,53)" fg:x="3169" fg:w="3"/><text x="51.0190%" y="1343.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (3 samples, 0.05%)</title><rect x="50.7690%" y="1317" width="0.0481%" height="15" fill="rgb(227,134,2)" fg:x="3169" fg:w="3"/><text x="51.0190%" y="1327.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.8010%" y="1301" width="0.0160%" height="15" fill="rgb(213,129,25)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1311.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="50.8010%" y="1285" width="0.0160%" height="15" fill="rgb(226,35,21)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1295.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="50.8010%" y="1269" width="0.0160%" height="15" fill="rgb(208,129,26)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1279.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="50.8010%" y="1253" width="0.0160%" height="15" fill="rgb(224,83,6)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1263.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="50.8010%" y="1237" width="0.0160%" height="15" fill="rgb(227,52,39)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1247.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="50.8010%" y="1221" width="0.0160%" height="15" fill="rgb(241,30,17)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1231.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="50.8010%" y="1205" width="0.0160%" height="15" fill="rgb(246,186,42)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1215.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="50.8010%" y="1189" width="0.0160%" height="15" fill="rgb(221,169,15)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1199.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="50.8010%" y="1173" width="0.0160%" height="15" fill="rgb(235,108,21)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.8010%" y="1157" width="0.0160%" height="15" fill="rgb(219,148,30)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.8010%" y="1141" width="0.0160%" height="15" fill="rgb(220,109,5)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.8010%" y="1125" width="0.0160%" height="15" fill="rgb(213,203,48)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.8010%" y="1109" width="0.0160%" height="15" fill="rgb(244,71,33)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="50.8010%" y="1093" width="0.0160%" height="15" fill="rgb(209,23,2)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.8010%" y="1077" width="0.0160%" height="15" fill="rgb(219,97,7)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.8010%" y="1061" width="0.0160%" height="15" fill="rgb(216,161,23)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.8010%" y="1045" width="0.0160%" height="15" fill="rgb(207,45,42)" fg:x="3171" fg:w="1"/><text x="51.0510%" y="1055.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="50.8170%" y="1141" width="0.0160%" height="15" fill="rgb(241,61,4)" fg:x="3172" fg:w="1"/><text x="51.0670%" y="1151.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="50.8170%" y="1125" width="0.0160%" height="15" fill="rgb(236,170,1)" fg:x="3172" fg:w="1"/><text x="51.0670%" y="1135.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="50.8170%" y="1109" width="0.0160%" height="15" fill="rgb(239,72,5)" fg:x="3172" fg:w="1"/><text x="51.0670%" y="1119.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="50.8331%" y="1125" width="0.0160%" height="15" fill="rgb(214,13,50)" fg:x="3173" fg:w="1"/><text x="51.0831%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="50.8331%" y="1109" width="0.0160%" height="15" fill="rgb(224,88,9)" fg:x="3173" fg:w="1"/><text x="51.0831%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="50.8331%" y="1093" width="0.0160%" height="15" fill="rgb(238,192,34)" fg:x="3173" fg:w="1"/><text x="51.0831%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="50.8331%" y="1077" width="0.0160%" height="15" fill="rgb(217,203,50)" fg:x="3173" fg:w="1"/><text x="51.0831%" y="1087.50"></text></g><g><title>std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="50.8331%" y="1061" width="0.0160%" height="15" fill="rgb(241,123,32)" fg:x="3173" fg:w="1"/><text x="51.0831%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="50.8331%" y="1045" width="0.0160%" height="15" fill="rgb(248,151,39)" fg:x="3173" fg:w="1"/><text x="51.0831%" y="1055.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="50.8331%" y="1029" width="0.0160%" height="15" fill="rgb(208,89,6)" fg:x="3173" fg:w="1"/><text x="51.0831%" y="1039.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="50.8331%" y="1013" width="0.0160%" height="15" fill="rgb(254,43,26)" fg:x="3173" fg:w="1"/><text x="51.0831%" y="1023.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="50.8331%" y="997" width="0.0160%" height="15" fill="rgb(216,158,13)" fg:x="3173" fg:w="1"/><text x="51.0831%" y="1007.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="50.8491%" y="1109" width="0.0160%" height="15" fill="rgb(212,47,37)" fg:x="3174" fg:w="1"/><text x="51.0991%" y="1119.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="50.8491%" y="1093" width="0.0160%" height="15" fill="rgb(254,16,10)" fg:x="3174" fg:w="1"/><text x="51.0991%" y="1103.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="50.8491%" y="1077" width="0.0160%" height="15" fill="rgb(223,228,16)" fg:x="3174" fg:w="1"/><text x="51.0991%" y="1087.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="50.8491%" y="1061" width="0.0160%" height="15" fill="rgb(249,108,50)" fg:x="3174" fg:w="1"/><text x="51.0991%" y="1071.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.8651%" y="1109" width="0.0160%" height="15" fill="rgb(208,220,5)" fg:x="3175" fg:w="1"/><text x="51.1151%" y="1119.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.9132%" y="1061" width="0.0160%" height="15" fill="rgb(217,89,48)" fg:x="3178" fg:w="1"/><text x="51.1632%" y="1071.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.03%)</title><rect x="50.9132%" y="1093" width="0.0320%" height="15" fill="rgb(212,113,41)" fg:x="3178" fg:w="2"/><text x="51.1632%" y="1103.50"></text></g><g><title>DataStream::read (2 samples, 0.03%)</title><rect x="50.9132%" y="1077" width="0.0320%" height="15" fill="rgb(231,127,5)" fg:x="3178" fg:w="2"/><text x="51.1632%" y="1087.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="50.9292%" y="1061" width="0.0160%" height="15" fill="rgb(217,141,17)" fg:x="3179" fg:w="1"/><text x="51.1792%" y="1071.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (5 samples, 0.08%)</title><rect x="50.8811%" y="1109" width="0.0801%" height="15" fill="rgb(245,125,54)" fg:x="3176" fg:w="5"/><text x="51.1311%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (1 samples, 0.02%)</title><rect x="50.9452%" y="1093" width="0.0160%" height="15" fill="rgb(248,125,3)" fg:x="3180" fg:w="1"/><text x="51.1952%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="50.9452%" y="1077" width="0.0160%" height="15" fill="rgb(236,119,51)" fg:x="3180" fg:w="1"/><text x="51.1952%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="50.9452%" y="1061" width="0.0160%" height="15" fill="rgb(239,99,8)" fg:x="3180" fg:w="1"/><text x="51.1952%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="50.9452%" y="1045" width="0.0160%" height="15" fill="rgb(224,228,4)" fg:x="3180" fg:w="1"/><text x="51.1952%" y="1055.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="50.9612%" y="949" width="0.0160%" height="15" fill="rgb(220,131,45)" fg:x="3181" fg:w="1"/><text x="51.2112%" y="959.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="50.9612%" y="933" width="0.0160%" height="15" fill="rgb(215,62,5)" fg:x="3181" fg:w="1"/><text x="51.2112%" y="943.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="50.9612%" y="917" width="0.0160%" height="15" fill="rgb(253,12,24)" fg:x="3181" fg:w="1"/><text x="51.2112%" y="927.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="50.9612%" y="901" width="0.0160%" height="15" fill="rgb(248,120,50)" fg:x="3181" fg:w="1"/><text x="51.2112%" y="911.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.02%)</title><rect x="50.9773%" y="853" width="0.0160%" height="15" fill="rgb(245,194,10)" fg:x="3182" fg:w="1"/><text x="51.2273%" y="863.50"></text></g><g><title>DataStream::read (2 samples, 0.03%)</title><rect x="50.9933%" y="853" width="0.0320%" height="15" fill="rgb(241,149,38)" fg:x="3183" fg:w="2"/><text x="51.2433%" y="863.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="51.0093%" y="837" width="0.0160%" height="15" fill="rgb(219,215,7)" fg:x="3184" fg:w="1"/><text x="51.2593%" y="847.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="51.0253%" y="837" width="0.0160%" height="15" fill="rgb(208,120,31)" fg:x="3185" fg:w="1"/><text x="51.2753%" y="847.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="51.0253%" y="821" width="0.0160%" height="15" fill="rgb(244,30,8)" fg:x="3185" fg:w="1"/><text x="51.2753%" y="831.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="51.0253%" y="853" width="0.0320%" height="15" fill="rgb(238,35,44)" fg:x="3185" fg:w="2"/><text x="51.2753%" y="863.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="51.0413%" y="837" width="0.0160%" height="15" fill="rgb(243,218,37)" fg:x="3186" fg:w="1"/><text x="51.2913%" y="847.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="51.0413%" y="821" width="0.0160%" height="15" fill="rgb(218,169,10)" fg:x="3186" fg:w="1"/><text x="51.2913%" y="831.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="51.0413%" y="805" width="0.0160%" height="15" fill="rgb(221,144,10)" fg:x="3186" fg:w="1"/><text x="51.2913%" y="815.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0574%" y="853" width="0.0160%" height="15" fill="rgb(226,41,38)" fg:x="3187" fg:w="1"/><text x="51.3074%" y="863.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0574%" y="837" width="0.0160%" height="15" fill="rgb(228,3,1)" fg:x="3187" fg:w="1"/><text x="51.3074%" y="847.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="51.0574%" y="821" width="0.0160%" height="15" fill="rgb(209,129,12)" fg:x="3187" fg:w="1"/><text x="51.3074%" y="831.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="51.0574%" y="805" width="0.0160%" height="15" fill="rgb(213,136,33)" fg:x="3187" fg:w="1"/><text x="51.3074%" y="815.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="51.0574%" y="789" width="0.0160%" height="15" fill="rgb(209,181,29)" fg:x="3187" fg:w="1"/><text x="51.3074%" y="799.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="837" width="0.0160%" height="15" fill="rgb(234,173,18)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="847.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="821" width="0.0160%" height="15" fill="rgb(227,73,47)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="831.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="805" width="0.0160%" height="15" fill="rgb(234,9,34)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="815.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="789" width="0.0160%" height="15" fill="rgb(235,172,15)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="799.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="773" width="0.0160%" height="15" fill="rgb(245,61,2)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="783.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="757" width="0.0160%" height="15" fill="rgb(238,39,47)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="767.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="741" width="0.0160%" height="15" fill="rgb(234,37,24)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="751.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="725" width="0.0160%" height="15" fill="rgb(248,223,24)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="735.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="709" width="0.0160%" height="15" fill="rgb(223,12,15)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="719.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="693" width="0.0160%" height="15" fill="rgb(249,6,3)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="703.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="677" width="0.0160%" height="15" fill="rgb(237,105,33)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="687.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (1 samples, 0.02%)</title><rect x="51.0734%" y="661" width="0.0160%" height="15" fill="rgb(252,208,35)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="645" width="0.0160%" height="15" fill="rgb(215,181,35)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="655.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0734%" y="629" width="0.0160%" height="15" fill="rgb(246,212,3)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="639.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="51.0734%" y="613" width="0.0160%" height="15" fill="rgb(247,156,24)" fg:x="3188" fg:w="1"/><text x="51.3234%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="51.0734%" y="853" width="0.0320%" height="15" fill="rgb(248,9,31)" fg:x="3188" fg:w="2"/><text x="51.3234%" y="863.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::operator= (1 samples, 0.02%)</title><rect x="51.0894%" y="837" width="0.0160%" height="15" fill="rgb(234,26,45)" fg:x="3189" fg:w="1"/><text x="51.3394%" y="847.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.02%)</title><rect x="51.0894%" y="821" width="0.0160%" height="15" fill="rgb(249,11,32)" fg:x="3189" fg:w="1"/><text x="51.3394%" y="831.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::swap (1 samples, 0.02%)</title><rect x="51.0894%" y="805" width="0.0160%" height="15" fill="rgb(249,162,33)" fg:x="3189" fg:w="1"/><text x="51.3394%" y="815.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (1 samples, 0.02%)</title><rect x="51.0894%" y="789" width="0.0160%" height="15" fill="rgb(232,4,32)" fg:x="3189" fg:w="1"/><text x="51.3394%" y="799.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="51.1054%" y="837" width="0.0160%" height="15" fill="rgb(212,5,45)" fg:x="3190" fg:w="1"/><text x="51.3554%" y="847.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="51.1054%" y="821" width="0.0160%" height="15" fill="rgb(227,95,13)" fg:x="3190" fg:w="1"/><text x="51.3554%" y="831.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.11%)</title><rect x="51.1375%" y="709" width="0.1121%" height="15" fill="rgb(223,205,10)" fg:x="3192" fg:w="7"/><text x="51.3875%" y="719.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="51.1375%" y="693" width="0.1121%" height="15" fill="rgb(222,178,8)" fg:x="3192" fg:w="7"/><text x="51.3875%" y="703.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="51.1375%" y="677" width="0.1121%" height="15" fill="rgb(216,13,22)" fg:x="3192" fg:w="7"/><text x="51.3875%" y="687.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="51.1375%" y="661" width="0.1121%" height="15" fill="rgb(240,167,12)" fg:x="3192" fg:w="7"/><text x="51.3875%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="51.1535%" y="645" width="0.0961%" height="15" fill="rgb(235,68,35)" fg:x="3193" fg:w="6"/><text x="51.4035%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="51.1695%" y="629" width="0.0801%" height="15" fill="rgb(253,40,27)" fg:x="3194" fg:w="5"/><text x="51.4195%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="51.1695%" y="613" width="0.0801%" height="15" fill="rgb(214,19,28)" fg:x="3194" fg:w="5"/><text x="51.4195%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="51.1695%" y="597" width="0.0801%" height="15" fill="rgb(210,167,45)" fg:x="3194" fg:w="5"/><text x="51.4195%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="51.2336%" y="581" width="0.0160%" height="15" fill="rgb(232,97,40)" fg:x="3198" fg:w="1"/><text x="51.4836%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="51.2336%" y="565" width="0.0160%" height="15" fill="rgb(250,35,23)" fg:x="3198" fg:w="1"/><text x="51.4836%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="51.2336%" y="549" width="0.0160%" height="15" fill="rgb(248,47,53)" fg:x="3198" fg:w="1"/><text x="51.4836%" y="559.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (57 samples, 0.91%)</title><rect x="51.1214%" y="837" width="0.9132%" height="15" fill="rgb(226,58,50)" fg:x="3191" fg:w="57"/><text x="51.3714%" y="847.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (57 samples, 0.91%)</title><rect x="51.1214%" y="821" width="0.9132%" height="15" fill="rgb(217,105,26)" fg:x="3191" fg:w="57"/><text x="51.3714%" y="831.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (57 samples, 0.91%)</title><rect x="51.1214%" y="805" width="0.9132%" height="15" fill="rgb(208,64,1)" fg:x="3191" fg:w="57"/><text x="51.3714%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (57 samples, 0.91%)</title><rect x="51.1214%" y="789" width="0.9132%" height="15" fill="rgb(214,80,1)" fg:x="3191" fg:w="57"/><text x="51.3714%" y="799.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (57 samples, 0.91%)</title><rect x="51.1214%" y="773" width="0.9132%" height="15" fill="rgb(206,175,26)" fg:x="3191" fg:w="57"/><text x="51.3714%" y="783.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (57 samples, 0.91%)</title><rect x="51.1214%" y="757" width="0.9132%" height="15" fill="rgb(235,156,37)" fg:x="3191" fg:w="57"/><text x="51.3714%" y="767.50"></text></g><g><title>operator new (57 samples, 0.91%)</title><rect x="51.1214%" y="741" width="0.9132%" height="15" fill="rgb(213,100,9)" fg:x="3191" fg:w="57"/><text x="51.3714%" y="751.50"></text></g><g><title>malloc (57 samples, 0.91%)</title><rect x="51.1214%" y="725" width="0.9132%" height="15" fill="rgb(241,15,13)" fg:x="3191" fg:w="57"/><text x="51.3714%" y="735.50"></text></g><g><title>_int_malloc (49 samples, 0.79%)</title><rect x="51.2496%" y="709" width="0.7850%" height="15" fill="rgb(205,97,43)" fg:x="3199" fg:w="49"/><text x="51.4996%" y="719.50"></text></g><g><title>malloc_consolidate (26 samples, 0.42%)</title><rect x="51.6181%" y="693" width="0.4165%" height="15" fill="rgb(216,106,32)" fg:x="3222" fg:w="26"/><text x="51.8681%" y="703.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp; AsBase&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="52.0346%" y="661" width="0.0160%" height="15" fill="rgb(226,200,8)" fg:x="3248" fg:w="1"/><text x="52.2846%" y="671.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="837" width="0.0320%" height="15" fill="rgb(244,54,29)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="821" width="0.0320%" height="15" fill="rgb(252,169,12)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="831.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="805" width="0.0320%" height="15" fill="rgb(231,199,11)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="815.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="789" width="0.0320%" height="15" fill="rgb(233,191,18)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="773" width="0.0320%" height="15" fill="rgb(215,83,47)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="757" width="0.0320%" height="15" fill="rgb(251,67,19)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="741" width="0.0320%" height="15" fill="rgb(240,7,20)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="725" width="0.0320%" height="15" fill="rgb(210,150,26)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="735.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="709" width="0.0320%" height="15" fill="rgb(228,75,42)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="719.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="693" width="0.0320%" height="15" fill="rgb(237,134,48)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (2 samples, 0.03%)</title><rect x="52.0346%" y="677" width="0.0320%" height="15" fill="rgb(205,80,50)" fg:x="3248" fg:w="2"/><text x="52.2846%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.0506%" y="661" width="0.0160%" height="15" fill="rgb(217,74,48)" fg:x="3249" fg:w="1"/><text x="52.3006%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.0506%" y="645" width="0.0160%" height="15" fill="rgb(205,82,50)" fg:x="3249" fg:w="1"/><text x="52.3006%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="52.0506%" y="629" width="0.0160%" height="15" fill="rgb(228,1,33)" fg:x="3249" fg:w="1"/><text x="52.3006%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.0506%" y="613" width="0.0160%" height="15" fill="rgb(214,50,23)" fg:x="3249" fg:w="1"/><text x="52.3006%" y="623.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="52.0506%" y="597" width="0.0160%" height="15" fill="rgb(210,62,9)" fg:x="3249" fg:w="1"/><text x="52.3006%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="52.0666%" y="837" width="0.0160%" height="15" fill="rgb(210,104,37)" fg:x="3250" fg:w="1"/><text x="52.3166%" y="847.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (70 samples, 1.12%)</title><rect x="50.9773%" y="917" width="1.1214%" height="15" fill="rgb(232,104,43)" fg:x="3182" fg:w="70"/><text x="51.2273%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (70 samples, 1.12%)</title><rect x="50.9773%" y="901" width="1.1214%" height="15" fill="rgb(244,52,6)" fg:x="3182" fg:w="70"/><text x="51.2273%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (70 samples, 1.12%)</title><rect x="50.9773%" y="885" width="1.1214%" height="15" fill="rgb(211,174,52)" fg:x="3182" fg:w="70"/><text x="51.2273%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (70 samples, 1.12%)</title><rect x="50.9773%" y="869" width="1.1214%" height="15" fill="rgb(229,48,4)" fg:x="3182" fg:w="70"/><text x="51.2273%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (62 samples, 0.99%)</title><rect x="51.1054%" y="853" width="0.9933%" height="15" fill="rgb(205,155,16)" fg:x="3190" fg:w="62"/><text x="51.3554%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.0827%" y="837" width="0.0160%" height="15" fill="rgb(211,141,53)" fg:x="3251" fg:w="1"/><text x="52.3327%" y="847.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="52.0827%" y="821" width="0.0160%" height="15" fill="rgb(240,148,11)" fg:x="3251" fg:w="1"/><text x="52.3327%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="52.0987%" y="853" width="0.0160%" height="15" fill="rgb(214,45,23)" fg:x="3252" fg:w="1"/><text x="52.3487%" y="863.50"></text></g><g><title>CTxOut&amp; std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="52.1147%" y="837" width="0.0160%" height="15" fill="rgb(248,74,26)" fg:x="3253" fg:w="1"/><text x="52.3647%" y="847.50"></text></g><g><title>__lll_lock_wake_private (6 samples, 0.10%)</title><rect x="52.1307%" y="709" width="0.0961%" height="15" fill="rgb(218,121,16)" fg:x="3254" fg:w="6"/><text x="52.3807%" y="719.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="52.1307%" y="693" width="0.0961%" height="15" fill="rgb(218,10,47)" fg:x="3254" fg:w="6"/><text x="52.3807%" y="703.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="52.1307%" y="677" width="0.0961%" height="15" fill="rgb(227,99,14)" fg:x="3254" fg:w="6"/><text x="52.3807%" y="687.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="52.1307%" y="661" width="0.0961%" height="15" fill="rgb(229,83,46)" fg:x="3254" fg:w="6"/><text x="52.3807%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="52.1307%" y="645" width="0.0961%" height="15" fill="rgb(228,25,1)" fg:x="3254" fg:w="6"/><text x="52.3807%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="52.1307%" y="629" width="0.0961%" height="15" fill="rgb(252,190,15)" fg:x="3254" fg:w="6"/><text x="52.3807%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="52.1628%" y="613" width="0.0641%" height="15" fill="rgb(213,103,51)" fg:x="3256" fg:w="4"/><text x="52.4128%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="52.1788%" y="597" width="0.0481%" height="15" fill="rgb(220,38,44)" fg:x="3257" fg:w="3"/><text x="52.4288%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.2108%" y="581" width="0.0160%" height="15" fill="rgb(210,45,26)" fg:x="3259" fg:w="1"/><text x="52.4608%" y="591.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (22 samples, 0.35%)</title><rect x="52.1307%" y="837" width="0.3525%" height="15" fill="rgb(205,95,48)" fg:x="3254" fg:w="22"/><text x="52.3807%" y="847.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (22 samples, 0.35%)</title><rect x="52.1307%" y="821" width="0.3525%" height="15" fill="rgb(225,179,37)" fg:x="3254" fg:w="22"/><text x="52.3807%" y="831.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (22 samples, 0.35%)</title><rect x="52.1307%" y="805" width="0.3525%" height="15" fill="rgb(230,209,3)" fg:x="3254" fg:w="22"/><text x="52.3807%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (22 samples, 0.35%)</title><rect x="52.1307%" y="789" width="0.3525%" height="15" fill="rgb(248,12,46)" fg:x="3254" fg:w="22"/><text x="52.3807%" y="799.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::allocate (22 samples, 0.35%)</title><rect x="52.1307%" y="773" width="0.3525%" height="15" fill="rgb(234,18,0)" fg:x="3254" fg:w="22"/><text x="52.3807%" y="783.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::allocate (22 samples, 0.35%)</title><rect x="52.1307%" y="757" width="0.3525%" height="15" fill="rgb(238,197,14)" fg:x="3254" fg:w="22"/><text x="52.3807%" y="767.50"></text></g><g><title>operator new (22 samples, 0.35%)</title><rect x="52.1307%" y="741" width="0.3525%" height="15" fill="rgb(251,162,48)" fg:x="3254" fg:w="22"/><text x="52.3807%" y="751.50"></text></g><g><title>malloc (22 samples, 0.35%)</title><rect x="52.1307%" y="725" width="0.3525%" height="15" fill="rgb(237,73,42)" fg:x="3254" fg:w="22"/><text x="52.3807%" y="735.50"></text></g><g><title>_int_malloc (16 samples, 0.26%)</title><rect x="52.2269%" y="709" width="0.2563%" height="15" fill="rgb(211,108,8)" fg:x="3260" fg:w="16"/><text x="52.4769%" y="719.50"></text></g><g><title>malloc_consolidate (8 samples, 0.13%)</title><rect x="52.3550%" y="693" width="0.1282%" height="15" fill="rgb(213,45,22)" fg:x="3268" fg:w="8"/><text x="52.6050%" y="703.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="52.4832%" y="629" width="0.0481%" height="15" fill="rgb(252,154,5)" fg:x="3276" fg:w="3"/><text x="52.7332%" y="639.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.5152%" y="613" width="0.0160%" height="15" fill="rgb(221,79,52)" fg:x="3278" fg:w="1"/><text x="52.7652%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="52.5152%" y="597" width="0.0160%" height="15" fill="rgb(229,220,36)" fg:x="3278" fg:w="1"/><text x="52.7652%" y="607.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="52.5152%" y="581" width="0.0160%" height="15" fill="rgb(211,17,16)" fg:x="3278" fg:w="1"/><text x="52.7652%" y="591.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="52.5152%" y="565" width="0.0160%" height="15" fill="rgb(222,55,31)" fg:x="3278" fg:w="1"/><text x="52.7652%" y="575.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="52.5633%" y="581" width="0.0160%" height="15" fill="rgb(221,221,31)" fg:x="3281" fg:w="1"/><text x="52.8133%" y="591.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (3 samples, 0.05%)</title><rect x="52.5473%" y="613" width="0.0481%" height="15" fill="rgb(227,168,26)" fg:x="3280" fg:w="3"/><text x="52.7973%" y="623.50"></text></g><g><title>DataStream::read (3 samples, 0.05%)</title><rect x="52.5473%" y="597" width="0.0481%" height="15" fill="rgb(224,139,9)" fg:x="3280" fg:w="3"/><text x="52.7973%" y="607.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="52.5793%" y="581" width="0.0160%" height="15" fill="rgb(254,172,0)" fg:x="3282" fg:w="1"/><text x="52.8293%" y="591.50"></text></g><g><title>__lll_lock_wake_private (8 samples, 0.13%)</title><rect x="52.5953%" y="549" width="0.1282%" height="15" fill="rgb(235,203,1)" fg:x="3283" fg:w="8"/><text x="52.8453%" y="559.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="52.5953%" y="533" width="0.1282%" height="15" fill="rgb(216,205,24)" fg:x="3283" fg:w="8"/><text x="52.8453%" y="543.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="52.5953%" y="517" width="0.1282%" height="15" fill="rgb(233,24,6)" fg:x="3283" fg:w="8"/><text x="52.8453%" y="527.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="52.5953%" y="501" width="0.1282%" height="15" fill="rgb(244,110,9)" fg:x="3283" fg:w="8"/><text x="52.8453%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="52.5953%" y="485" width="0.1282%" height="15" fill="rgb(239,222,42)" fg:x="3283" fg:w="8"/><text x="52.8453%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="52.6113%" y="469" width="0.1121%" height="15" fill="rgb(218,145,13)" fg:x="3284" fg:w="7"/><text x="52.8613%" y="479.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="52.6113%" y="453" width="0.1121%" height="15" fill="rgb(207,69,11)" fg:x="3284" fg:w="7"/><text x="52.8613%" y="463.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="52.6113%" y="437" width="0.1121%" height="15" fill="rgb(220,223,22)" fg:x="3284" fg:w="7"/><text x="52.8613%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="52.6914%" y="421" width="0.0320%" height="15" fill="rgb(245,102,5)" fg:x="3289" fg:w="2"/><text x="52.9414%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.7075%" y="405" width="0.0160%" height="15" fill="rgb(211,148,2)" fg:x="3290" fg:w="1"/><text x="52.9575%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.7075%" y="389" width="0.0160%" height="15" fill="rgb(241,13,44)" fg:x="3290" fg:w="1"/><text x="52.9575%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.7075%" y="373" width="0.0160%" height="15" fill="rgb(219,137,21)" fg:x="3290" fg:w="1"/><text x="52.9575%" y="383.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (14 samples, 0.22%)</title><rect x="52.5953%" y="613" width="0.2243%" height="15" fill="rgb(242,206,5)" fg:x="3283" fg:w="14"/><text x="52.8453%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (14 samples, 0.22%)</title><rect x="52.5953%" y="597" width="0.2243%" height="15" fill="rgb(217,114,22)" fg:x="3283" fg:w="14"/><text x="52.8453%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (14 samples, 0.22%)</title><rect x="52.5953%" y="581" width="0.2243%" height="15" fill="rgb(253,206,42)" fg:x="3283" fg:w="14"/><text x="52.8453%" y="591.50"></text></g><g><title>malloc (14 samples, 0.22%)</title><rect x="52.5953%" y="565" width="0.2243%" height="15" fill="rgb(236,102,18)" fg:x="3283" fg:w="14"/><text x="52.8453%" y="575.50"></text></g><g><title>_int_malloc (6 samples, 0.10%)</title><rect x="52.7235%" y="549" width="0.0961%" height="15" fill="rgb(208,59,49)" fg:x="3291" fg:w="6"/><text x="52.9735%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (19 samples, 0.30%)</title><rect x="52.5312%" y="629" width="0.3044%" height="15" fill="rgb(215,194,28)" fg:x="3279" fg:w="19"/><text x="52.7812%" y="639.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="52.8196%" y="613" width="0.0160%" height="15" fill="rgb(243,207,11)" fg:x="3297" fg:w="1"/><text x="53.0696%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (1 samples, 0.02%)</title><rect x="52.8196%" y="597" width="0.0160%" height="15" fill="rgb(254,179,35)" fg:x="3297" fg:w="1"/><text x="53.0696%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="52.8196%" y="581" width="0.0160%" height="15" fill="rgb(235,97,3)" fg:x="3297" fg:w="1"/><text x="53.0696%" y="591.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="52.8196%" y="565" width="0.0160%" height="15" fill="rgb(215,155,33)" fg:x="3297" fg:w="1"/><text x="53.0696%" y="575.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="52.8196%" y="549" width="0.0160%" height="15" fill="rgb(223,128,12)" fg:x="3297" fg:w="1"/><text x="53.0696%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="629" width="0.0160%" height="15" fill="rgb(208,157,18)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="639.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="613" width="0.0160%" height="15" fill="rgb(249,70,54)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="597" width="0.0160%" height="15" fill="rgb(244,118,24)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="607.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="581" width="0.0160%" height="15" fill="rgb(211,54,0)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="591.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="565" width="0.0160%" height="15" fill="rgb(245,137,45)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="575.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="549" width="0.0160%" height="15" fill="rgb(232,154,31)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="559.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="533" width="0.0160%" height="15" fill="rgb(253,6,39)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="543.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="517" width="0.0160%" height="15" fill="rgb(234,183,24)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="501" width="0.0160%" height="15" fill="rgb(252,84,40)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="511.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="485" width="0.0160%" height="15" fill="rgb(224,65,2)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="495.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="469" width="0.0160%" height="15" fill="rgb(229,38,24)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="479.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="453" width="0.0160%" height="15" fill="rgb(218,131,50)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="463.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="437" width="0.0160%" height="15" fill="rgb(233,106,18)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="447.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="421" width="0.0160%" height="15" fill="rgb(220,216,11)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="431.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="405" width="0.0160%" height="15" fill="rgb(251,100,45)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="415.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="389" width="0.0160%" height="15" fill="rgb(235,143,32)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="399.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8356%" y="373" width="0.0160%" height="15" fill="rgb(248,124,34)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="383.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="52.8356%" y="357" width="0.0160%" height="15" fill="rgb(225,221,4)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="367.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="52.8356%" y="341" width="0.0160%" height="15" fill="rgb(242,27,43)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="351.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="52.8356%" y="325" width="0.0160%" height="15" fill="rgb(227,54,8)" fg:x="3298" fg:w="1"/><text x="53.0856%" y="335.50"></text></g><g><title>CTxOut&amp; std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::emplace_back&lt;&gt; (2 samples, 0.03%)</title><rect x="52.8517%" y="613" width="0.0320%" height="15" fill="rgb(253,139,49)" fg:x="3299" fg:w="2"/><text x="53.1017%" y="623.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::construct&lt;CTxOut&gt; (1 samples, 0.02%)</title><rect x="52.8677%" y="597" width="0.0160%" height="15" fill="rgb(231,26,43)" fg:x="3300" fg:w="1"/><text x="53.1177%" y="607.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="52.8677%" y="581" width="0.0160%" height="15" fill="rgb(207,121,39)" fg:x="3300" fg:w="1"/><text x="53.1177%" y="591.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="52.8677%" y="565" width="0.0160%" height="15" fill="rgb(223,101,35)" fg:x="3300" fg:w="1"/><text x="53.1177%" y="575.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="52.8677%" y="549" width="0.0160%" height="15" fill="rgb(232,87,23)" fg:x="3300" fg:w="1"/><text x="53.1177%" y="559.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="52.8677%" y="533" width="0.0160%" height="15" fill="rgb(225,180,29)" fg:x="3300" fg:w="1"/><text x="53.1177%" y="543.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (50 samples, 0.80%)</title><rect x="52.0987%" y="917" width="0.8010%" height="15" fill="rgb(225,25,17)" fg:x="3252" fg:w="50"/><text x="52.3487%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (50 samples, 0.80%)</title><rect x="52.0987%" y="901" width="0.8010%" height="15" fill="rgb(223,8,52)" fg:x="3252" fg:w="50"/><text x="52.3487%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (50 samples, 0.80%)</title><rect x="52.0987%" y="885" width="0.8010%" height="15" fill="rgb(246,42,21)" fg:x="3252" fg:w="50"/><text x="52.3487%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.80%)</title><rect x="52.0987%" y="869" width="0.8010%" height="15" fill="rgb(205,64,43)" fg:x="3252" fg:w="50"/><text x="52.3487%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (49 samples, 0.79%)</title><rect x="52.1147%" y="853" width="0.7850%" height="15" fill="rgb(221,160,13)" fg:x="3253" fg:w="49"/><text x="52.3647%" y="863.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="837" width="0.4165%" height="15" fill="rgb(239,58,35)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="821" width="0.4165%" height="15" fill="rgb(251,26,40)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="831.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="805" width="0.4165%" height="15" fill="rgb(247,0,4)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="815.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="789" width="0.4165%" height="15" fill="rgb(218,130,10)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="799.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="773" width="0.4165%" height="15" fill="rgb(239,32,7)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="757" width="0.4165%" height="15" fill="rgb(210,192,24)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="741" width="0.4165%" height="15" fill="rgb(226,212,17)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="725" width="0.4165%" height="15" fill="rgb(219,201,28)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="735.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="709" width="0.4165%" height="15" fill="rgb(235,207,41)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="719.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="693" width="0.4165%" height="15" fill="rgb(241,95,54)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="677" width="0.4165%" height="15" fill="rgb(248,12,23)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="661" width="0.4165%" height="15" fill="rgb(228,173,4)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (26 samples, 0.42%)</title><rect x="52.4832%" y="645" width="0.4165%" height="15" fill="rgb(254,99,5)" fg:x="3276" fg:w="26"/><text x="52.7332%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="52.8517%" y="629" width="0.0481%" height="15" fill="rgb(212,184,17)" fg:x="3299" fg:w="3"/><text x="53.1017%" y="639.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="613" width="0.0160%" height="15" fill="rgb(252,174,1)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="597" width="0.0160%" height="15" fill="rgb(241,118,51)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="607.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="581" width="0.0160%" height="15" fill="rgb(227,94,47)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="591.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="565" width="0.0160%" height="15" fill="rgb(229,104,2)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="575.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="549" width="0.0160%" height="15" fill="rgb(219,28,31)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="559.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="533" width="0.0160%" height="15" fill="rgb(233,109,36)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="543.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="517" width="0.0160%" height="15" fill="rgb(246,88,11)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="501" width="0.0160%" height="15" fill="rgb(209,212,17)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="511.50"></text></g><g><title>unsigned long ser_readdata64&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="485" width="0.0160%" height="15" fill="rgb(243,59,29)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="495.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="52.8837%" y="469" width="0.0160%" height="15" fill="rgb(244,205,48)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="479.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="52.8837%" y="453" width="0.0160%" height="15" fill="rgb(227,30,6)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.8837%" y="437" width="0.0160%" height="15" fill="rgb(220,205,48)" fg:x="3301" fg:w="1"/><text x="53.1337%" y="447.50"></text></g><g><title>__lll_lock_wake_private (8 samples, 0.13%)</title><rect x="52.9157%" y="709" width="0.1282%" height="15" fill="rgb(250,94,14)" fg:x="3303" fg:w="8"/><text x="53.1657%" y="719.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="52.9157%" y="693" width="0.1282%" height="15" fill="rgb(216,119,42)" fg:x="3303" fg:w="8"/><text x="53.1657%" y="703.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="52.9157%" y="677" width="0.1282%" height="15" fill="rgb(232,155,0)" fg:x="3303" fg:w="8"/><text x="53.1657%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="52.9157%" y="661" width="0.1282%" height="15" fill="rgb(212,24,32)" fg:x="3303" fg:w="8"/><text x="53.1657%" y="671.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="52.9318%" y="645" width="0.1121%" height="15" fill="rgb(216,69,20)" fg:x="3304" fg:w="7"/><text x="53.1818%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="52.9318%" y="629" width="0.1121%" height="15" fill="rgb(229,73,31)" fg:x="3304" fg:w="7"/><text x="53.1818%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="52.9478%" y="613" width="0.0961%" height="15" fill="rgb(224,219,20)" fg:x="3305" fg:w="6"/><text x="53.1978%" y="623.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="52.9478%" y="597" width="0.0961%" height="15" fill="rgb(215,146,41)" fg:x="3305" fg:w="6"/><text x="53.1978%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.0279%" y="581" width="0.0160%" height="15" fill="rgb(244,71,31)" fg:x="3310" fg:w="1"/><text x="53.2779%" y="591.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (11 samples, 0.18%)</title><rect x="52.8997%" y="821" width="0.1762%" height="15" fill="rgb(224,24,11)" fg:x="3302" fg:w="11"/><text x="53.1497%" y="831.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (11 samples, 0.18%)</title><rect x="52.8997%" y="805" width="0.1762%" height="15" fill="rgb(229,76,15)" fg:x="3302" fg:w="11"/><text x="53.1497%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (11 samples, 0.18%)</title><rect x="52.8997%" y="789" width="0.1762%" height="15" fill="rgb(209,93,2)" fg:x="3302" fg:w="11"/><text x="53.1497%" y="799.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (11 samples, 0.18%)</title><rect x="52.8997%" y="773" width="0.1762%" height="15" fill="rgb(216,200,50)" fg:x="3302" fg:w="11"/><text x="53.1497%" y="783.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (11 samples, 0.18%)</title><rect x="52.8997%" y="757" width="0.1762%" height="15" fill="rgb(211,67,34)" fg:x="3302" fg:w="11"/><text x="53.1497%" y="767.50"></text></g><g><title>operator new (11 samples, 0.18%)</title><rect x="52.8997%" y="741" width="0.1762%" height="15" fill="rgb(225,87,47)" fg:x="3302" fg:w="11"/><text x="53.1497%" y="751.50"></text></g><g><title>malloc (11 samples, 0.18%)</title><rect x="52.8997%" y="725" width="0.1762%" height="15" fill="rgb(217,185,16)" fg:x="3302" fg:w="11"/><text x="53.1497%" y="735.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="53.0439%" y="709" width="0.0320%" height="15" fill="rgb(205,0,0)" fg:x="3311" fg:w="2"/><text x="53.2939%" y="719.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (12 samples, 0.19%)</title><rect x="52.8997%" y="837" width="0.1922%" height="15" fill="rgb(207,116,45)" fg:x="3302" fg:w="12"/><text x="53.1497%" y="847.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_S_relocate (1 samples, 0.02%)</title><rect x="53.0759%" y="821" width="0.0160%" height="15" fill="rgb(221,156,26)" fg:x="3313" fg:w="1"/><text x="53.3259%" y="831.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;* std::__relocate_a&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.0759%" y="805" width="0.0160%" height="15" fill="rgb(213,140,4)" fg:x="3313" fg:w="1"/><text x="53.3259%" y="815.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;* std::__relocate_a_1&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.0759%" y="789" width="0.0160%" height="15" fill="rgb(231,224,15)" fg:x="3313" fg:w="1"/><text x="53.3259%" y="799.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="53.0920%" y="837" width="0.0160%" height="15" fill="rgb(244,76,20)" fg:x="3314" fg:w="1"/><text x="53.3420%" y="847.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (2 samples, 0.03%)</title><rect x="53.1080%" y="837" width="0.0320%" height="15" fill="rgb(238,117,7)" fg:x="3315" fg:w="2"/><text x="53.3580%" y="847.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="53.1721%" y="805" width="0.0160%" height="15" fill="rgb(235,1,10)" fg:x="3319" fg:w="1"/><text x="53.4221%" y="815.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="53.1721%" y="789" width="0.0160%" height="15" fill="rgb(216,165,6)" fg:x="3319" fg:w="1"/><text x="53.4221%" y="799.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="53.1721%" y="773" width="0.0160%" height="15" fill="rgb(246,91,35)" fg:x="3319" fg:w="1"/><text x="53.4221%" y="783.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="53.1721%" y="757" width="0.0160%" height="15" fill="rgb(228,96,24)" fg:x="3319" fg:w="1"/><text x="53.4221%" y="767.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="53.2201%" y="661" width="0.0160%" height="15" fill="rgb(254,217,53)" fg:x="3322" fg:w="1"/><text x="53.4701%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.2201%" y="645" width="0.0160%" height="15" fill="rgb(209,60,0)" fg:x="3322" fg:w="1"/><text x="53.4701%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.2201%" y="629" width="0.0160%" height="15" fill="rgb(250,93,26)" fg:x="3322" fg:w="1"/><text x="53.4701%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.2201%" y="613" width="0.0160%" height="15" fill="rgb(211,9,40)" fg:x="3322" fg:w="1"/><text x="53.4701%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.2201%" y="597" width="0.0160%" height="15" fill="rgb(242,57,20)" fg:x="3322" fg:w="1"/><text x="53.4701%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.2201%" y="581" width="0.0160%" height="15" fill="rgb(248,85,48)" fg:x="3322" fg:w="1"/><text x="53.4701%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.2201%" y="565" width="0.0160%" height="15" fill="rgb(212,117,2)" fg:x="3322" fg:w="1"/><text x="53.4701%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.2201%" y="549" width="0.0160%" height="15" fill="rgb(243,19,3)" fg:x="3322" fg:w="1"/><text x="53.4701%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.2201%" y="533" width="0.0160%" height="15" fill="rgb(232,217,24)" fg:x="3322" fg:w="1"/><text x="53.4701%" y="543.50"></text></g><g><title>__lll_lock_wake_private (13 samples, 0.21%)</title><rect x="53.2361%" y="661" width="0.2083%" height="15" fill="rgb(224,175,40)" fg:x="3323" fg:w="13"/><text x="53.4861%" y="671.50"></text></g><g><title>[unknown] (13 samples, 0.21%)</title><rect x="53.2361%" y="645" width="0.2083%" height="15" fill="rgb(212,162,32)" fg:x="3323" fg:w="13"/><text x="53.4861%" y="655.50"></text></g><g><title>[unknown] (13 samples, 0.21%)</title><rect x="53.2361%" y="629" width="0.2083%" height="15" fill="rgb(215,9,4)" fg:x="3323" fg:w="13"/><text x="53.4861%" y="639.50"></text></g><g><title>[unknown] (13 samples, 0.21%)</title><rect x="53.2361%" y="613" width="0.2083%" height="15" fill="rgb(242,42,7)" fg:x="3323" fg:w="13"/><text x="53.4861%" y="623.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="53.2522%" y="597" width="0.1922%" height="15" fill="rgb(242,184,45)" fg:x="3324" fg:w="12"/><text x="53.5022%" y="607.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="53.2522%" y="581" width="0.1922%" height="15" fill="rgb(228,111,51)" fg:x="3324" fg:w="12"/><text x="53.5022%" y="591.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="53.2522%" y="565" width="0.1922%" height="15" fill="rgb(236,147,17)" fg:x="3324" fg:w="12"/><text x="53.5022%" y="575.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="53.2522%" y="549" width="0.1922%" height="15" fill="rgb(210,75,22)" fg:x="3324" fg:w="12"/><text x="53.5022%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3963%" y="533" width="0.0481%" height="15" fill="rgb(217,159,45)" fg:x="3333" fg:w="3"/><text x="53.6463%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.4284%" y="517" width="0.0160%" height="15" fill="rgb(245,165,53)" fg:x="3335" fg:w="1"/><text x="53.6784%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.4284%" y="501" width="0.0160%" height="15" fill="rgb(251,190,50)" fg:x="3335" fg:w="1"/><text x="53.6784%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.4284%" y="485" width="0.0160%" height="15" fill="rgb(208,203,29)" fg:x="3335" fg:w="1"/><text x="53.6784%" y="495.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (27 samples, 0.43%)</title><rect x="53.1881%" y="789" width="0.4326%" height="15" fill="rgb(207,209,35)" fg:x="3320" fg:w="27"/><text x="53.4381%" y="799.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (25 samples, 0.40%)</title><rect x="53.2201%" y="773" width="0.4005%" height="15" fill="rgb(230,144,49)" fg:x="3322" fg:w="25"/><text x="53.4701%" y="783.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (25 samples, 0.40%)</title><rect x="53.2201%" y="757" width="0.4005%" height="15" fill="rgb(229,31,6)" fg:x="3322" fg:w="25"/><text x="53.4701%" y="767.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (25 samples, 0.40%)</title><rect x="53.2201%" y="741" width="0.4005%" height="15" fill="rgb(251,129,24)" fg:x="3322" fg:w="25"/><text x="53.4701%" y="751.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (25 samples, 0.40%)</title><rect x="53.2201%" y="725" width="0.4005%" height="15" fill="rgb(235,105,15)" fg:x="3322" fg:w="25"/><text x="53.4701%" y="735.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (25 samples, 0.40%)</title><rect x="53.2201%" y="709" width="0.4005%" height="15" fill="rgb(216,52,43)" fg:x="3322" fg:w="25"/><text x="53.4701%" y="719.50"></text></g><g><title>operator new (25 samples, 0.40%)</title><rect x="53.2201%" y="693" width="0.4005%" height="15" fill="rgb(238,144,41)" fg:x="3322" fg:w="25"/><text x="53.4701%" y="703.50"></text></g><g><title>malloc (25 samples, 0.40%)</title><rect x="53.2201%" y="677" width="0.4005%" height="15" fill="rgb(243,63,9)" fg:x="3322" fg:w="25"/><text x="53.4701%" y="687.50"></text></g><g><title>_int_malloc (11 samples, 0.18%)</title><rect x="53.4444%" y="661" width="0.1762%" height="15" fill="rgb(246,208,1)" fg:x="3336" fg:w="11"/><text x="53.6944%" y="671.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="53.6046%" y="645" width="0.0160%" height="15" fill="rgb(233,182,18)" fg:x="3346" fg:w="1"/><text x="53.8546%" y="655.50"></text></g><g><title>__mprotect (1 samples, 0.02%)</title><rect x="53.6046%" y="629" width="0.0160%" height="15" fill="rgb(242,224,8)" fg:x="3346" fg:w="1"/><text x="53.8546%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.6046%" y="613" width="0.0160%" height="15" fill="rgb(243,54,37)" fg:x="3346" fg:w="1"/><text x="53.8546%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.6046%" y="597" width="0.0160%" height="15" fill="rgb(233,192,12)" fg:x="3346" fg:w="1"/><text x="53.8546%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.6046%" y="581" width="0.0160%" height="15" fill="rgb(251,192,53)" fg:x="3346" fg:w="1"/><text x="53.8546%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.6046%" y="565" width="0.0160%" height="15" fill="rgb(246,141,26)" fg:x="3346" fg:w="1"/><text x="53.8546%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.6046%" y="549" width="0.0160%" height="15" fill="rgb(239,195,19)" fg:x="3346" fg:w="1"/><text x="53.8546%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.6046%" y="533" width="0.0160%" height="15" fill="rgb(241,16,39)" fg:x="3346" fg:w="1"/><text x="53.8546%" y="543.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.6206%" y="789" width="0.0160%" height="15" fill="rgb(223,13,53)" fg:x="3347" fg:w="1"/><text x="53.8706%" y="799.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="789" width="0.0481%" height="15" fill="rgb(214,227,0)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="799.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="773" width="0.0481%" height="15" fill="rgb(228,103,26)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="783.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="757" width="0.0481%" height="15" fill="rgb(254,177,53)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="767.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="741" width="0.0481%" height="15" fill="rgb(208,201,34)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="751.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="725" width="0.0481%" height="15" fill="rgb(212,39,5)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="735.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="709" width="0.0481%" height="15" fill="rgb(246,117,3)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="719.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="693" width="0.0481%" height="15" fill="rgb(244,118,39)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="703.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="677" width="0.0481%" height="15" fill="rgb(241,64,10)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="687.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="661" width="0.0481%" height="15" fill="rgb(229,39,44)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="671.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="645" width="0.0481%" height="15" fill="rgb(230,226,3)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="655.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="629" width="0.0481%" height="15" fill="rgb(222,13,42)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="639.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (3 samples, 0.05%)</title><rect x="53.6367%" y="613" width="0.0481%" height="15" fill="rgb(247,180,54)" fg:x="3348" fg:w="3"/><text x="53.8867%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (2 samples, 0.03%)</title><rect x="53.6527%" y="597" width="0.0320%" height="15" fill="rgb(205,96,16)" fg:x="3349" fg:w="2"/><text x="53.9027%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="53.6527%" y="581" width="0.0320%" height="15" fill="rgb(205,100,21)" fg:x="3349" fg:w="2"/><text x="53.9027%" y="591.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="53.6527%" y="565" width="0.0320%" height="15" fill="rgb(248,51,4)" fg:x="3349" fg:w="2"/><text x="53.9027%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="53.6527%" y="549" width="0.0320%" height="15" fill="rgb(217,197,30)" fg:x="3349" fg:w="2"/><text x="53.9027%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="53.6527%" y="533" width="0.0320%" height="15" fill="rgb(240,179,40)" fg:x="3349" fg:w="2"/><text x="53.9027%" y="543.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="53.6527%" y="517" width="0.0320%" height="15" fill="rgb(212,185,35)" fg:x="3349" fg:w="2"/><text x="53.9027%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.03%)</title><rect x="53.6527%" y="501" width="0.0320%" height="15" fill="rgb(251,222,31)" fg:x="3349" fg:w="2"/><text x="53.9027%" y="511.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (32 samples, 0.51%)</title><rect x="53.1881%" y="805" width="0.5127%" height="15" fill="rgb(208,140,36)" fg:x="3320" fg:w="32"/><text x="53.4381%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.6847%" y="789" width="0.0160%" height="15" fill="rgb(220,148,1)" fg:x="3351" fg:w="1"/><text x="53.9347%" y="799.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (36 samples, 0.58%)</title><rect x="53.1400%" y="837" width="0.5767%" height="15" fill="rgb(254,4,28)" fg:x="3317" fg:w="36"/><text x="53.3900%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (36 samples, 0.58%)</title><rect x="53.1400%" y="821" width="0.5767%" height="15" fill="rgb(222,185,44)" fg:x="3317" fg:w="36"/><text x="53.3900%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="53.7007%" y="805" width="0.0160%" height="15" fill="rgb(215,74,39)" fg:x="3352" fg:w="1"/><text x="53.9507%" y="815.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="53.7328%" y="821" width="0.0160%" height="15" fill="rgb(247,86,4)" fg:x="3354" fg:w="1"/><text x="53.9828%" y="831.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="53.7328%" y="805" width="0.0160%" height="15" fill="rgb(231,105,32)" fg:x="3354" fg:w="1"/><text x="53.9828%" y="815.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="53.7328%" y="789" width="0.0160%" height="15" fill="rgb(222,65,35)" fg:x="3354" fg:w="1"/><text x="53.9828%" y="799.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (54 samples, 0.87%)</title><rect x="52.8997%" y="917" width="0.8651%" height="15" fill="rgb(218,145,35)" fg:x="3302" fg:w="54"/><text x="53.1497%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (54 samples, 0.87%)</title><rect x="52.8997%" y="901" width="0.8651%" height="15" fill="rgb(208,7,15)" fg:x="3302" fg:w="54"/><text x="53.1497%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (54 samples, 0.87%)</title><rect x="52.8997%" y="885" width="0.8651%" height="15" fill="rgb(209,83,13)" fg:x="3302" fg:w="54"/><text x="53.1497%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.87%)</title><rect x="52.8997%" y="869" width="0.8651%" height="15" fill="rgb(218,3,10)" fg:x="3302" fg:w="54"/><text x="53.1497%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (54 samples, 0.87%)</title><rect x="52.8997%" y="853" width="0.8651%" height="15" fill="rgb(211,219,4)" fg:x="3302" fg:w="54"/><text x="53.1497%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.05%)</title><rect x="53.7168%" y="837" width="0.0481%" height="15" fill="rgb(228,194,12)" fg:x="3353" fg:w="3"/><text x="53.9668%" y="847.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (1 samples, 0.02%)</title><rect x="53.7488%" y="821" width="0.0160%" height="15" fill="rgb(210,175,7)" fg:x="3355" fg:w="1"/><text x="53.9988%" y="831.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (1 samples, 0.02%)</title><rect x="53.7488%" y="805" width="0.0160%" height="15" fill="rgb(243,132,6)" fg:x="3355" fg:w="1"/><text x="53.9988%" y="815.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned char&amp;&gt;(unsigned char&amp;) (1 samples, 0.02%)</title><rect x="53.7648%" y="917" width="0.0160%" height="15" fill="rgb(207,72,18)" fg:x="3356" fg:w="1"/><text x="54.0148%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.7648%" y="901" width="0.0160%" height="15" fill="rgb(236,1,18)" fg:x="3356" fg:w="1"/><text x="54.0148%" y="911.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.7648%" y="885" width="0.0160%" height="15" fill="rgb(227,0,18)" fg:x="3356" fg:w="1"/><text x="54.0148%" y="895.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="53.7648%" y="869" width="0.0160%" height="15" fill="rgb(247,37,5)" fg:x="3356" fg:w="1"/><text x="54.0148%" y="879.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="53.7648%" y="853" width="0.0160%" height="15" fill="rgb(237,179,24)" fg:x="3356" fg:w="1"/><text x="54.0148%" y="863.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="53.7808%" y="853" width="0.0320%" height="15" fill="rgb(226,53,20)" fg:x="3357" fg:w="2"/><text x="54.0308%" y="863.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="53.8129%" y="853" width="0.0160%" height="15" fill="rgb(247,75,7)" fg:x="3359" fg:w="1"/><text x="54.0629%" y="863.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="53.8129%" y="837" width="0.0160%" height="15" fill="rgb(233,96,12)" fg:x="3359" fg:w="1"/><text x="54.0629%" y="847.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="53.8129%" y="821" width="0.0160%" height="15" fill="rgb(224,125,0)" fg:x="3359" fg:w="1"/><text x="54.0629%" y="831.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="53.8289%" y="837" width="0.0160%" height="15" fill="rgb(224,92,25)" fg:x="3360" fg:w="1"/><text x="54.0789%" y="847.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="53.8289%" y="821" width="0.0160%" height="15" fill="rgb(224,42,24)" fg:x="3360" fg:w="1"/><text x="54.0789%" y="831.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="53.8449%" y="805" width="0.0160%" height="15" fill="rgb(234,132,49)" fg:x="3361" fg:w="1"/><text x="54.0949%" y="815.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (182 samples, 2.92%)</title><rect x="50.9612%" y="965" width="2.9157%" height="15" fill="rgb(248,100,35)" fg:x="3181" fg:w="182"/><text x="51.2112%" y="975.50">CM..</text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (181 samples, 2.90%)</title><rect x="50.9773%" y="949" width="2.8997%" height="15" fill="rgb(239,94,40)" fg:x="3182" fg:w="181"/><text x="51.2273%" y="959.50">vo..</text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (181 samples, 2.90%)</title><rect x="50.9773%" y="933" width="2.8997%" height="15" fill="rgb(235,139,28)" fg:x="3182" fg:w="181"/><text x="51.2273%" y="943.50">vo..</text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (6 samples, 0.10%)</title><rect x="53.7808%" y="917" width="0.0961%" height="15" fill="rgb(217,144,7)" fg:x="3357" fg:w="6"/><text x="54.0308%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="53.7808%" y="901" width="0.0961%" height="15" fill="rgb(227,55,4)" fg:x="3357" fg:w="6"/><text x="54.0308%" y="911.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="53.7808%" y="885" width="0.0961%" height="15" fill="rgb(252,82,54)" fg:x="3357" fg:w="6"/><text x="54.0308%" y="895.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (6 samples, 0.10%)</title><rect x="53.7808%" y="869" width="0.0961%" height="15" fill="rgb(245,172,4)" fg:x="3357" fg:w="6"/><text x="54.0308%" y="879.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.05%)</title><rect x="53.8289%" y="853" width="0.0481%" height="15" fill="rgb(207,26,27)" fg:x="3360" fg:w="3"/><text x="54.0789%" y="863.50"></text></g><g><title>ShiftMessageB (2 samples, 0.03%)</title><rect x="53.8449%" y="837" width="0.0320%" height="15" fill="rgb(252,98,18)" fg:x="3361" fg:w="2"/><text x="54.0949%" y="847.50"></text></g><g><title>ShiftMessageC (2 samples, 0.03%)</title><rect x="53.8449%" y="821" width="0.0320%" height="15" fill="rgb(244,8,26)" fg:x="3361" fg:w="2"/><text x="54.0949%" y="831.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="53.8609%" y="805" width="0.0160%" height="15" fill="rgb(237,173,45)" fg:x="3362" fg:w="1"/><text x="54.1109%" y="815.50"></text></g><g><title>CSHA256::Write (6 samples, 0.10%)</title><rect x="53.8770%" y="853" width="0.0961%" height="15" fill="rgb(208,213,49)" fg:x="3363" fg:w="6"/><text x="54.1270%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="53.9731%" y="853" width="0.0160%" height="15" fill="rgb(212,122,37)" fg:x="3369" fg:w="1"/><text x="54.2231%" y="863.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="53.9731%" y="837" width="0.0160%" height="15" fill="rgb(213,80,17)" fg:x="3369" fg:w="1"/><text x="54.2231%" y="847.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="53.9731%" y="821" width="0.0160%" height="15" fill="rgb(206,210,43)" fg:x="3369" fg:w="1"/><text x="54.2231%" y="831.50"></text></g><g><title>CTransaction::ComputeHash (1 samples, 0.02%)</title><rect x="53.9891%" y="757" width="0.0160%" height="15" fill="rgb(229,214,3)" fg:x="3370" fg:w="1"/><text x="54.2391%" y="767.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="54.0051%" y="581" width="0.0160%" height="15" fill="rgb(235,213,29)" fg:x="3371" fg:w="1"/><text x="54.2551%" y="591.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="54.0051%" y="565" width="0.0160%" height="15" fill="rgb(248,135,26)" fg:x="3371" fg:w="1"/><text x="54.2551%" y="575.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.0211%" y="565" width="0.0160%" height="15" fill="rgb(242,188,12)" fg:x="3372" fg:w="1"/><text x="54.2711%" y="575.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.0211%" y="549" width="0.0160%" height="15" fill="rgb(245,38,12)" fg:x="3372" fg:w="1"/><text x="54.2711%" y="559.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="54.0372%" y="565" width="0.0160%" height="15" fill="rgb(218,42,13)" fg:x="3373" fg:w="1"/><text x="54.2872%" y="575.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="54.0372%" y="549" width="0.0160%" height="15" fill="rgb(238,132,49)" fg:x="3373" fg:w="1"/><text x="54.2872%" y="559.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="54.0372%" y="533" width="0.0160%" height="15" fill="rgb(209,196,19)" fg:x="3373" fg:w="1"/><text x="54.2872%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="54.0051%" y="645" width="0.0801%" height="15" fill="rgb(244,131,22)" fg:x="3371" fg:w="5"/><text x="54.2551%" y="655.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="54.0051%" y="629" width="0.0801%" height="15" fill="rgb(223,18,34)" fg:x="3371" fg:w="5"/><text x="54.2551%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (5 samples, 0.08%)</title><rect x="54.0051%" y="613" width="0.0801%" height="15" fill="rgb(252,124,54)" fg:x="3371" fg:w="5"/><text x="54.2551%" y="623.50"></text></g><g><title>HashWriter::write (5 samples, 0.08%)</title><rect x="54.0051%" y="597" width="0.0801%" height="15" fill="rgb(229,106,42)" fg:x="3371" fg:w="5"/><text x="54.2551%" y="607.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.06%)</title><rect x="54.0211%" y="581" width="0.0641%" height="15" fill="rgb(221,129,1)" fg:x="3372" fg:w="4"/><text x="54.2711%" y="591.50"></text></g><g><title>ShiftMessageC (2 samples, 0.03%)</title><rect x="54.0532%" y="565" width="0.0320%" height="15" fill="rgb(229,74,15)" fg:x="3374" fg:w="2"/><text x="54.3032%" y="575.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="54.0532%" y="549" width="0.0320%" height="15" fill="rgb(210,206,50)" fg:x="3374" fg:w="2"/><text x="54.3032%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0852%" y="549" width="0.0160%" height="15" fill="rgb(251,114,31)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="559.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0852%" y="533" width="0.0160%" height="15" fill="rgb(215,225,28)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.0852%" y="517" width="0.0160%" height="15" fill="rgb(237,109,14)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="527.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="54.0852%" y="501" width="0.0160%" height="15" fill="rgb(230,13,37)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="511.50"></text></g><g><title>CTransaction::ComputeHash (1 samples, 0.02%)</title><rect x="54.0852%" y="485" width="0.0160%" height="15" fill="rgb(231,40,28)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="495.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="54.0852%" y="469" width="0.0160%" height="15" fill="rgb(231,202,18)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="479.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0852%" y="453" width="0.0160%" height="15" fill="rgb(225,33,18)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="463.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="54.0852%" y="437" width="0.0160%" height="15" fill="rgb(223,64,47)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="54.0852%" y="421" width="0.0160%" height="15" fill="rgb(234,114,13)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="431.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0852%" y="405" width="0.0160%" height="15" fill="rgb(248,56,40)" fg:x="3376" fg:w="1"/><text x="54.3352%" y="415.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="54.1173%" y="421" width="0.0481%" height="15" fill="rgb(221,194,21)" fg:x="3378" fg:w="3"/><text x="54.3673%" y="431.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="54.1493%" y="405" width="0.0160%" height="15" fill="rgb(242,108,46)" fg:x="3380" fg:w="1"/><text x="54.3993%" y="415.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="54.1653%" y="421" width="0.0160%" height="15" fill="rgb(220,106,10)" fg:x="3381" fg:w="1"/><text x="54.4153%" y="431.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="54.1653%" y="405" width="0.0160%" height="15" fill="rgb(211,88,4)" fg:x="3381" fg:w="1"/><text x="54.4153%" y="415.50"></text></g><g><title>CSHA256::Write (6 samples, 0.10%)</title><rect x="54.1012%" y="437" width="0.0961%" height="15" fill="rgb(214,95,34)" fg:x="3377" fg:w="6"/><text x="54.3512%" y="447.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.1814%" y="421" width="0.0160%" height="15" fill="rgb(250,160,33)" fg:x="3382" fg:w="1"/><text x="54.4314%" y="431.50"></text></g><g><title>CTransaction::ComputeHash (3 samples, 0.05%)</title><rect x="54.1974%" y="437" width="0.0481%" height="15" fill="rgb(225,29,10)" fg:x="3383" fg:w="3"/><text x="54.4474%" y="447.50"></text></g><g><title>HashWriter::HashWriter (1 samples, 0.02%)</title><rect x="54.2294%" y="421" width="0.0160%" height="15" fill="rgb(224,28,30)" fg:x="3385" fg:w="1"/><text x="54.4794%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (11 samples, 0.18%)</title><rect x="54.0852%" y="645" width="0.1762%" height="15" fill="rgb(231,77,4)" fg:x="3376" fg:w="11"/><text x="54.3352%" y="655.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="54.0852%" y="629" width="0.1762%" height="15" fill="rgb(209,63,21)" fg:x="3376" fg:w="11"/><text x="54.3352%" y="639.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="54.0852%" y="613" width="0.1762%" height="15" fill="rgb(226,22,11)" fg:x="3376" fg:w="11"/><text x="54.3352%" y="623.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (11 samples, 0.18%)</title><rect x="54.0852%" y="597" width="0.1762%" height="15" fill="rgb(216,82,30)" fg:x="3376" fg:w="11"/><text x="54.3352%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (11 samples, 0.18%)</title><rect x="54.0852%" y="581" width="0.1762%" height="15" fill="rgb(246,227,38)" fg:x="3376" fg:w="11"/><text x="54.3352%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (11 samples, 0.18%)</title><rect x="54.0852%" y="565" width="0.1762%" height="15" fill="rgb(251,203,53)" fg:x="3376" fg:w="11"/><text x="54.3352%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (10 samples, 0.16%)</title><rect x="54.1012%" y="549" width="0.1602%" height="15" fill="rgb(254,101,1)" fg:x="3377" fg:w="10"/><text x="54.3512%" y="559.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.16%)</title><rect x="54.1012%" y="533" width="0.1602%" height="15" fill="rgb(241,180,5)" fg:x="3377" fg:w="10"/><text x="54.3512%" y="543.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.16%)</title><rect x="54.1012%" y="517" width="0.1602%" height="15" fill="rgb(218,168,4)" fg:x="3377" fg:w="10"/><text x="54.3512%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (10 samples, 0.16%)</title><rect x="54.1012%" y="501" width="0.1602%" height="15" fill="rgb(224,223,32)" fg:x="3377" fg:w="10"/><text x="54.3512%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (10 samples, 0.16%)</title><rect x="54.1012%" y="485" width="0.1602%" height="15" fill="rgb(236,106,22)" fg:x="3377" fg:w="10"/><text x="54.3512%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (10 samples, 0.16%)</title><rect x="54.1012%" y="469" width="0.1602%" height="15" fill="rgb(206,121,5)" fg:x="3377" fg:w="10"/><text x="54.3512%" y="479.50"></text></g><g><title>HashWriter::write (10 samples, 0.16%)</title><rect x="54.1012%" y="453" width="0.1602%" height="15" fill="rgb(233,87,28)" fg:x="3377" fg:w="10"/><text x="54.3512%" y="463.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="54.2454%" y="437" width="0.0160%" height="15" fill="rgb(236,137,17)" fg:x="3386" fg:w="1"/><text x="54.4954%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="54.2454%" y="421" width="0.0160%" height="15" fill="rgb(209,183,38)" fg:x="3386" fg:w="1"/><text x="54.4954%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2454%" y="405" width="0.0160%" height="15" fill="rgb(206,162,44)" fg:x="3386" fg:w="1"/><text x="54.4954%" y="415.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2454%" y="389" width="0.0160%" height="15" fill="rgb(237,70,39)" fg:x="3386" fg:w="1"/><text x="54.4954%" y="399.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.2454%" y="373" width="0.0160%" height="15" fill="rgb(212,176,5)" fg:x="3386" fg:w="1"/><text x="54.4954%" y="383.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="54.2454%" y="357" width="0.0160%" height="15" fill="rgb(232,95,16)" fg:x="3386" fg:w="1"/><text x="54.4954%" y="367.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="54.2615%" y="485" width="0.0160%" height="15" fill="rgb(219,115,35)" fg:x="3387" fg:w="1"/><text x="54.5115%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="54.2615%" y="533" width="0.0320%" height="15" fill="rgb(251,67,27)" fg:x="3387" fg:w="2"/><text x="54.5115%" y="543.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="54.2615%" y="517" width="0.0320%" height="15" fill="rgb(222,95,40)" fg:x="3387" fg:w="2"/><text x="54.5115%" y="527.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="54.2615%" y="501" width="0.0320%" height="15" fill="rgb(250,35,16)" fg:x="3387" fg:w="2"/><text x="54.5115%" y="511.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2775%" y="485" width="0.0160%" height="15" fill="rgb(224,86,44)" fg:x="3388" fg:w="1"/><text x="54.5275%" y="495.50"></text></g><g><title>void ser_writedata16&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2775%" y="469" width="0.0160%" height="15" fill="rgb(237,53,53)" fg:x="3388" fg:w="1"/><text x="54.5275%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (20 samples, 0.32%)</title><rect x="53.9891%" y="837" width="0.3204%" height="15" fill="rgb(208,171,33)" fg:x="3370" fg:w="20"/><text x="54.2391%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (20 samples, 0.32%)</title><rect x="53.9891%" y="821" width="0.3204%" height="15" fill="rgb(222,64,27)" fg:x="3370" fg:w="20"/><text x="54.2391%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (20 samples, 0.32%)</title><rect x="53.9891%" y="805" width="0.3204%" height="15" fill="rgb(221,121,35)" fg:x="3370" fg:w="20"/><text x="54.2391%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.32%)</title><rect x="53.9891%" y="789" width="0.3204%" height="15" fill="rgb(228,137,42)" fg:x="3370" fg:w="20"/><text x="54.2391%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (20 samples, 0.32%)</title><rect x="53.9891%" y="773" width="0.3204%" height="15" fill="rgb(227,54,21)" fg:x="3370" fg:w="20"/><text x="54.2391%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (19 samples, 0.30%)</title><rect x="54.0051%" y="757" width="0.3044%" height="15" fill="rgb(240,168,33)" fg:x="3371" fg:w="19"/><text x="54.2551%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (19 samples, 0.30%)</title><rect x="54.0051%" y="741" width="0.3044%" height="15" fill="rgb(243,159,6)" fg:x="3371" fg:w="19"/><text x="54.2551%" y="751.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.30%)</title><rect x="54.0051%" y="725" width="0.3044%" height="15" fill="rgb(205,211,41)" fg:x="3371" fg:w="19"/><text x="54.2551%" y="735.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.30%)</title><rect x="54.0051%" y="709" width="0.3044%" height="15" fill="rgb(253,30,1)" fg:x="3371" fg:w="19"/><text x="54.2551%" y="719.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (19 samples, 0.30%)</title><rect x="54.0051%" y="693" width="0.3044%" height="15" fill="rgb(226,80,18)" fg:x="3371" fg:w="19"/><text x="54.2551%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (19 samples, 0.30%)</title><rect x="54.0051%" y="677" width="0.3044%" height="15" fill="rgb(253,156,46)" fg:x="3371" fg:w="19"/><text x="54.2551%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (19 samples, 0.30%)</title><rect x="54.0051%" y="661" width="0.3044%" height="15" fill="rgb(248,87,27)" fg:x="3371" fg:w="19"/><text x="54.2551%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.05%)</title><rect x="54.2615%" y="645" width="0.0481%" height="15" fill="rgb(227,122,2)" fg:x="3387" fg:w="3"/><text x="54.5115%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="54.2615%" y="629" width="0.0481%" height="15" fill="rgb(229,94,39)" fg:x="3387" fg:w="3"/><text x="54.5115%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="54.2615%" y="613" width="0.0481%" height="15" fill="rgb(225,173,31)" fg:x="3387" fg:w="3"/><text x="54.5115%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="54.2615%" y="597" width="0.0481%" height="15" fill="rgb(239,176,30)" fg:x="3387" fg:w="3"/><text x="54.5115%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="54.2615%" y="581" width="0.0481%" height="15" fill="rgb(212,104,21)" fg:x="3387" fg:w="3"/><text x="54.5115%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="54.2615%" y="565" width="0.0481%" height="15" fill="rgb(240,209,40)" fg:x="3387" fg:w="3"/><text x="54.5115%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.05%)</title><rect x="54.2615%" y="549" width="0.0481%" height="15" fill="rgb(234,195,5)" fg:x="3387" fg:w="3"/><text x="54.5115%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2935%" y="533" width="0.0160%" height="15" fill="rgb(238,213,1)" fg:x="3389" fg:w="1"/><text x="54.5435%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2935%" y="517" width="0.0160%" height="15" fill="rgb(235,182,54)" fg:x="3389" fg:w="1"/><text x="54.5435%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.2935%" y="501" width="0.0160%" height="15" fill="rgb(229,50,46)" fg:x="3389" fg:w="1"/><text x="54.5435%" y="511.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="54.2935%" y="485" width="0.0160%" height="15" fill="rgb(219,145,13)" fg:x="3389" fg:w="1"/><text x="54.5435%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2935%" y="469" width="0.0160%" height="15" fill="rgb(220,226,10)" fg:x="3389" fg:w="1"/><text x="54.5435%" y="479.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2935%" y="453" width="0.0160%" height="15" fill="rgb(248,47,30)" fg:x="3389" fg:w="1"/><text x="54.5435%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.2935%" y="437" width="0.0160%" height="15" fill="rgb(231,209,44)" fg:x="3389" fg:w="1"/><text x="54.5435%" y="447.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="54.2935%" y="421" width="0.0160%" height="15" fill="rgb(209,80,30)" fg:x="3389" fg:w="1"/><text x="54.5435%" y="431.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="54.3095%" y="757" width="0.0160%" height="15" fill="rgb(232,9,14)" fg:x="3390" fg:w="1"/><text x="54.5595%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.3255%" y="645" width="0.0160%" height="15" fill="rgb(243,91,43)" fg:x="3391" fg:w="1"/><text x="54.5755%" y="655.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.3255%" y="629" width="0.0160%" height="15" fill="rgb(231,90,52)" fg:x="3391" fg:w="1"/><text x="54.5755%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.3255%" y="613" width="0.0160%" height="15" fill="rgb(253,192,44)" fg:x="3391" fg:w="1"/><text x="54.5755%" y="623.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="54.3255%" y="597" width="0.0160%" height="15" fill="rgb(241,66,31)" fg:x="3391" fg:w="1"/><text x="54.5755%" y="607.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="54.3255%" y="581" width="0.0160%" height="15" fill="rgb(235,81,37)" fg:x="3391" fg:w="1"/><text x="54.5755%" y="591.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="54.3416%" y="533" width="0.0160%" height="15" fill="rgb(223,221,9)" fg:x="3392" fg:w="1"/><text x="54.5916%" y="543.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="54.3416%" y="517" width="0.0160%" height="15" fill="rgb(242,180,7)" fg:x="3392" fg:w="1"/><text x="54.5916%" y="527.50"></text></g><g><title>CSHA256::Write (4 samples, 0.06%)</title><rect x="54.3736%" y="485" width="0.0641%" height="15" fill="rgb(243,78,19)" fg:x="3394" fg:w="4"/><text x="54.6236%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="54.4377%" y="485" width="0.0641%" height="15" fill="rgb(233,23,17)" fg:x="3398" fg:w="4"/><text x="54.6877%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="54.4377%" y="469" width="0.0641%" height="15" fill="rgb(252,122,45)" fg:x="3398" fg:w="4"/><text x="54.6877%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="54.4537%" y="453" width="0.0481%" height="15" fill="rgb(247,108,20)" fg:x="3399" fg:w="3"/><text x="54.7037%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="54.4537%" y="437" width="0.0481%" height="15" fill="rgb(235,84,21)" fg:x="3399" fg:w="3"/><text x="54.7037%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="54.4537%" y="421" width="0.0481%" height="15" fill="rgb(247,129,10)" fg:x="3399" fg:w="3"/><text x="54.7037%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="54.4537%" y="405" width="0.0481%" height="15" fill="rgb(208,173,14)" fg:x="3399" fg:w="3"/><text x="54.7037%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="54.4537%" y="389" width="0.0481%" height="15" fill="rgb(236,31,38)" fg:x="3399" fg:w="3"/><text x="54.7037%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="54.4537%" y="373" width="0.0481%" height="15" fill="rgb(232,65,17)" fg:x="3399" fg:w="3"/><text x="54.7037%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="54.4537%" y="357" width="0.0481%" height="15" fill="rgb(224,45,49)" fg:x="3399" fg:w="3"/><text x="54.7037%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="54.4537%" y="341" width="0.0481%" height="15" fill="rgb(225,2,53)" fg:x="3399" fg:w="3"/><text x="54.7037%" y="351.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="54.5018%" y="485" width="0.0160%" height="15" fill="rgb(248,210,53)" fg:x="3402" fg:w="1"/><text x="54.7518%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="485" width="0.0160%" height="15" fill="rgb(211,1,30)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="54.5178%" y="469" width="0.0160%" height="15" fill="rgb(224,96,15)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="453" width="0.0160%" height="15" fill="rgb(252,45,11)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="437" width="0.0160%" height="15" fill="rgb(220,125,38)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="447.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="421" width="0.0160%" height="15" fill="rgb(243,161,33)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="431.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="405" width="0.0160%" height="15" fill="rgb(248,197,34)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="415.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="389" width="0.0160%" height="15" fill="rgb(228,165,23)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="373" width="0.0160%" height="15" fill="rgb(236,94,38)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="383.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="357" width="0.0160%" height="15" fill="rgb(220,13,23)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="367.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="341" width="0.0160%" height="15" fill="rgb(234,26,39)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="351.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="325" width="0.0160%" height="15" fill="rgb(205,117,44)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="335.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="309" width="0.0160%" height="15" fill="rgb(250,42,2)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="319.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="293" width="0.0160%" height="15" fill="rgb(223,83,14)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="303.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="277" width="0.0160%" height="15" fill="rgb(241,147,50)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="287.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="261" width="0.0160%" height="15" fill="rgb(218,90,6)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="271.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="245" width="0.0160%" height="15" fill="rgb(210,191,5)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="255.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="229" width="0.0160%" height="15" fill="rgb(225,139,19)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="239.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="213" width="0.0160%" height="15" fill="rgb(210,1,33)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="223.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="197" width="0.0160%" height="15" fill="rgb(213,50,3)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="207.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="54.5178%" y="181" width="0.0160%" height="15" fill="rgb(234,227,4)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="191.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.5178%" y="165" width="0.0160%" height="15" fill="rgb(246,63,5)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="175.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="54.5178%" y="149" width="0.0160%" height="15" fill="rgb(245,136,27)" fg:x="3403" fg:w="1"/><text x="54.7678%" y="159.50"></text></g><g><title>CSHA256::Write (13 samples, 0.21%)</title><rect x="54.3576%" y="501" width="0.2083%" height="15" fill="rgb(247,199,27)" fg:x="3393" fg:w="13"/><text x="54.6076%" y="511.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="54.5338%" y="485" width="0.0320%" height="15" fill="rgb(252,158,49)" fg:x="3404" fg:w="2"/><text x="54.7838%" y="495.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.5658%" y="485" width="0.0160%" height="15" fill="rgb(254,73,1)" fg:x="3406" fg:w="1"/><text x="54.8158%" y="495.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.5658%" y="469" width="0.0160%" height="15" fill="rgb(248,93,19)" fg:x="3406" fg:w="1"/><text x="54.8158%" y="479.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.5819%" y="453" width="0.0160%" height="15" fill="rgb(206,67,5)" fg:x="3407" fg:w="1"/><text x="54.8319%" y="463.50"></text></g><g><title>ShiftMessageB (4 samples, 0.06%)</title><rect x="54.5819%" y="485" width="0.0641%" height="15" fill="rgb(209,210,4)" fg:x="3407" fg:w="4"/><text x="54.8319%" y="495.50"></text></g><g><title>ShiftMessageC (4 samples, 0.06%)</title><rect x="54.5819%" y="469" width="0.0641%" height="15" fill="rgb(214,185,36)" fg:x="3407" fg:w="4"/><text x="54.8319%" y="479.50"></text></g><g><title>_mm_sha256msg2_epu32 (3 samples, 0.05%)</title><rect x="54.5979%" y="453" width="0.0481%" height="15" fill="rgb(233,191,26)" fg:x="3408" fg:w="3"/><text x="54.8479%" y="463.50"></text></g><g><title>sha256_x86_shani::Transform (6 samples, 0.10%)</title><rect x="54.5658%" y="501" width="0.0961%" height="15" fill="rgb(248,94,17)" fg:x="3406" fg:w="6"/><text x="54.8158%" y="511.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="54.6459%" y="485" width="0.0160%" height="15" fill="rgb(250,64,4)" fg:x="3411" fg:w="1"/><text x="54.8959%" y="495.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="54.6459%" y="469" width="0.0160%" height="15" fill="rgb(218,41,53)" fg:x="3411" fg:w="1"/><text x="54.8959%" y="479.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="501" width="0.0160%" height="15" fill="rgb(251,176,28)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="54.6620%" y="485" width="0.0160%" height="15" fill="rgb(247,22,9)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="469" width="0.0160%" height="15" fill="rgb(218,201,14)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="453" width="0.0160%" height="15" fill="rgb(218,94,10)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="463.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="437" width="0.0160%" height="15" fill="rgb(222,183,52)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="447.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="421" width="0.0160%" height="15" fill="rgb(242,140,25)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="431.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="405" width="0.0160%" height="15" fill="rgb(235,197,38)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="389" width="0.0160%" height="15" fill="rgb(237,136,15)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="399.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="373" width="0.0160%" height="15" fill="rgb(223,44,49)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="383.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="357" width="0.0160%" height="15" fill="rgb(227,71,15)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="367.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="341" width="0.0160%" height="15" fill="rgb(225,153,20)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="351.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="325" width="0.0160%" height="15" fill="rgb(210,190,26)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="335.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="309" width="0.0160%" height="15" fill="rgb(223,147,5)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="319.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="293" width="0.0160%" height="15" fill="rgb(207,14,23)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="303.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="277" width="0.0160%" height="15" fill="rgb(211,195,53)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="287.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="261" width="0.0160%" height="15" fill="rgb(237,75,46)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="271.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="245" width="0.0160%" height="15" fill="rgb(254,55,14)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="255.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="229" width="0.0160%" height="15" fill="rgb(230,185,30)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="239.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="213" width="0.0160%" height="15" fill="rgb(220,14,11)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="223.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="54.6620%" y="197" width="0.0160%" height="15" fill="rgb(215,169,44)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="207.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.6620%" y="181" width="0.0160%" height="15" fill="rgb(253,203,20)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="191.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="54.6620%" y="165" width="0.0160%" height="15" fill="rgb(229,225,17)" fg:x="3412" fg:w="1"/><text x="54.9120%" y="175.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (24 samples, 0.38%)</title><rect x="54.3095%" y="837" width="0.3845%" height="15" fill="rgb(236,76,26)" fg:x="3390" fg:w="24"/><text x="54.5595%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (24 samples, 0.38%)</title><rect x="54.3095%" y="821" width="0.3845%" height="15" fill="rgb(234,15,30)" fg:x="3390" fg:w="24"/><text x="54.5595%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (24 samples, 0.38%)</title><rect x="54.3095%" y="805" width="0.3845%" height="15" fill="rgb(211,113,48)" fg:x="3390" fg:w="24"/><text x="54.5595%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.38%)</title><rect x="54.3095%" y="789" width="0.3845%" height="15" fill="rgb(221,31,36)" fg:x="3390" fg:w="24"/><text x="54.5595%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (24 samples, 0.38%)</title><rect x="54.3095%" y="773" width="0.3845%" height="15" fill="rgb(215,118,52)" fg:x="3390" fg:w="24"/><text x="54.5595%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (23 samples, 0.37%)</title><rect x="54.3255%" y="757" width="0.3685%" height="15" fill="rgb(241,151,27)" fg:x="3391" fg:w="23"/><text x="54.5755%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (23 samples, 0.37%)</title><rect x="54.3255%" y="741" width="0.3685%" height="15" fill="rgb(253,51,3)" fg:x="3391" fg:w="23"/><text x="54.5755%" y="751.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.37%)</title><rect x="54.3255%" y="725" width="0.3685%" height="15" fill="rgb(216,201,24)" fg:x="3391" fg:w="23"/><text x="54.5755%" y="735.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.37%)</title><rect x="54.3255%" y="709" width="0.3685%" height="15" fill="rgb(231,107,4)" fg:x="3391" fg:w="23"/><text x="54.5755%" y="719.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (23 samples, 0.37%)</title><rect x="54.3255%" y="693" width="0.3685%" height="15" fill="rgb(243,97,54)" fg:x="3391" fg:w="23"/><text x="54.5755%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (23 samples, 0.37%)</title><rect x="54.3255%" y="677" width="0.3685%" height="15" fill="rgb(221,32,51)" fg:x="3391" fg:w="23"/><text x="54.5755%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (23 samples, 0.37%)</title><rect x="54.3255%" y="661" width="0.3685%" height="15" fill="rgb(218,171,35)" fg:x="3391" fg:w="23"/><text x="54.5755%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (22 samples, 0.35%)</title><rect x="54.3416%" y="645" width="0.3525%" height="15" fill="rgb(214,20,53)" fg:x="3392" fg:w="22"/><text x="54.5916%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.35%)</title><rect x="54.3416%" y="629" width="0.3525%" height="15" fill="rgb(239,9,52)" fg:x="3392" fg:w="22"/><text x="54.5916%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.35%)</title><rect x="54.3416%" y="613" width="0.3525%" height="15" fill="rgb(215,114,45)" fg:x="3392" fg:w="22"/><text x="54.5916%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (22 samples, 0.35%)</title><rect x="54.3416%" y="597" width="0.3525%" height="15" fill="rgb(208,118,9)" fg:x="3392" fg:w="22"/><text x="54.5916%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (22 samples, 0.35%)</title><rect x="54.3416%" y="581" width="0.3525%" height="15" fill="rgb(235,7,39)" fg:x="3392" fg:w="22"/><text x="54.5916%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (22 samples, 0.35%)</title><rect x="54.3416%" y="565" width="0.3525%" height="15" fill="rgb(243,225,15)" fg:x="3392" fg:w="22"/><text x="54.5916%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (22 samples, 0.35%)</title><rect x="54.3416%" y="549" width="0.3525%" height="15" fill="rgb(225,216,18)" fg:x="3392" fg:w="22"/><text x="54.5916%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (21 samples, 0.34%)</title><rect x="54.3576%" y="533" width="0.3364%" height="15" fill="rgb(233,36,38)" fg:x="3393" fg:w="21"/><text x="54.6076%" y="543.50"></text></g><g><title>HashWriter::write (21 samples, 0.34%)</title><rect x="54.3576%" y="517" width="0.3364%" height="15" fill="rgb(239,88,23)" fg:x="3393" fg:w="21"/><text x="54.6076%" y="527.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6780%" y="501" width="0.0160%" height="15" fill="rgb(219,181,35)" fg:x="3413" fg:w="1"/><text x="54.9280%" y="511.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.6780%" y="485" width="0.0160%" height="15" fill="rgb(215,18,46)" fg:x="3413" fg:w="1"/><text x="54.9280%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.6780%" y="469" width="0.0160%" height="15" fill="rgb(241,38,11)" fg:x="3413" fg:w="1"/><text x="54.9280%" y="479.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="54.6780%" y="453" width="0.0160%" height="15" fill="rgb(248,169,45)" fg:x="3413" fg:w="1"/><text x="54.9280%" y="463.50"></text></g><g><title>CTransaction::CTransaction (2 samples, 0.03%)</title><rect x="54.6940%" y="757" width="0.0320%" height="15" fill="rgb(239,50,49)" fg:x="3414" fg:w="2"/><text x="54.9440%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="54.7260%" y="757" width="0.0160%" height="15" fill="rgb(231,96,31)" fg:x="3416" fg:w="1"/><text x="54.9760%" y="767.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.7260%" y="741" width="0.0160%" height="15" fill="rgb(224,193,37)" fg:x="3416" fg:w="1"/><text x="54.9760%" y="751.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.7260%" y="725" width="0.0160%" height="15" fill="rgb(227,153,50)" fg:x="3416" fg:w="1"/><text x="54.9760%" y="735.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (55 samples, 0.88%)</title><rect x="53.8770%" y="933" width="0.8811%" height="15" fill="rgb(249,228,3)" fg:x="3363" fg:w="55"/><text x="54.1270%" y="943.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (55 samples, 0.88%)</title><rect x="53.8770%" y="917" width="0.8811%" height="15" fill="rgb(219,164,43)" fg:x="3363" fg:w="55"/><text x="54.1270%" y="927.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (55 samples, 0.88%)</title><rect x="53.8770%" y="901" width="0.8811%" height="15" fill="rgb(216,45,41)" fg:x="3363" fg:w="55"/><text x="54.1270%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (55 samples, 0.88%)</title><rect x="53.8770%" y="885" width="0.8811%" height="15" fill="rgb(210,226,51)" fg:x="3363" fg:w="55"/><text x="54.1270%" y="895.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (55 samples, 0.88%)</title><rect x="53.8770%" y="869" width="0.8811%" height="15" fill="rgb(209,117,49)" fg:x="3363" fg:w="55"/><text x="54.1270%" y="879.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (48 samples, 0.77%)</title><rect x="53.9891%" y="853" width="0.7690%" height="15" fill="rgb(206,196,24)" fg:x="3370" fg:w="48"/><text x="54.2391%" y="863.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (4 samples, 0.06%)</title><rect x="54.6940%" y="837" width="0.0641%" height="15" fill="rgb(253,218,3)" fg:x="3414" fg:w="4"/><text x="54.9440%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="54.6940%" y="821" width="0.0641%" height="15" fill="rgb(252,166,2)" fg:x="3414" fg:w="4"/><text x="54.9440%" y="831.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="54.6940%" y="805" width="0.0641%" height="15" fill="rgb(236,218,26)" fg:x="3414" fg:w="4"/><text x="54.9440%" y="815.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.06%)</title><rect x="54.6940%" y="789" width="0.0641%" height="15" fill="rgb(254,84,19)" fg:x="3414" fg:w="4"/><text x="54.9440%" y="799.50"></text></g><g><title>HashWriter::write (4 samples, 0.06%)</title><rect x="54.6940%" y="773" width="0.0641%" height="15" fill="rgb(219,137,29)" fg:x="3414" fg:w="4"/><text x="54.9440%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="757" width="0.0160%" height="15" fill="rgb(227,47,52)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="767.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="741" width="0.0160%" height="15" fill="rgb(229,167,24)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="751.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="725" width="0.0160%" height="15" fill="rgb(233,164,1)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="735.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="709" width="0.0160%" height="15" fill="rgb(218,88,48)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="719.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="693" width="0.0160%" height="15" fill="rgb(226,214,24)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="703.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="677" width="0.0160%" height="15" fill="rgb(233,29,12)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="687.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="661" width="0.0160%" height="15" fill="rgb(219,120,34)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="671.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="645" width="0.0160%" height="15" fill="rgb(226,78,44)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="655.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="629" width="0.0160%" height="15" fill="rgb(240,15,48)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="639.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="613" width="0.0160%" height="15" fill="rgb(253,176,7)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="623.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="597" width="0.0160%" height="15" fill="rgb(206,166,28)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="607.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="581" width="0.0160%" height="15" fill="rgb(241,53,51)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="591.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (1 samples, 0.02%)</title><rect x="54.7421%" y="565" width="0.0160%" height="15" fill="rgb(249,112,30)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="575.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7421%" y="549" width="0.0160%" height="15" fill="rgb(217,85,30)" fg:x="3417" fg:w="1"/><text x="54.9921%" y="559.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="54.7901%" y="885" width="0.0160%" height="15" fill="rgb(233,49,7)" fg:x="3420" fg:w="1"/><text x="55.0401%" y="895.50"></text></g><g><title>CSHA256::Write (6 samples, 0.10%)</title><rect x="54.8062%" y="885" width="0.0961%" height="15" fill="rgb(234,109,9)" fg:x="3421" fg:w="6"/><text x="55.0562%" y="895.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="54.8863%" y="869" width="0.0160%" height="15" fill="rgb(253,95,22)" fg:x="3426" fg:w="1"/><text x="55.1363%" y="879.50"></text></g><g><title>CTransaction::ComputeHash (2 samples, 0.03%)</title><rect x="54.9023%" y="885" width="0.0320%" height="15" fill="rgb(233,176,25)" fg:x="3427" fg:w="2"/><text x="55.1523%" y="895.50"></text></g><g><title>HashWriter::GetHash (2 samples, 0.03%)</title><rect x="54.9023%" y="869" width="0.0320%" height="15" fill="rgb(236,33,39)" fg:x="3427" fg:w="2"/><text x="55.1523%" y="879.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="54.9343%" y="885" width="0.0160%" height="15" fill="rgb(223,226,42)" fg:x="3429" fg:w="1"/><text x="55.1843%" y="895.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.9503%" y="869" width="0.0160%" height="15" fill="rgb(216,99,33)" fg:x="3430" fg:w="1"/><text x="55.2003%" y="879.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.9503%" y="853" width="0.0160%" height="15" fill="rgb(235,84,23)" fg:x="3430" fg:w="1"/><text x="55.2003%" y="863.50"></text></g><g><title>ShiftMessageA (2 samples, 0.03%)</title><rect x="54.9664%" y="853" width="0.0320%" height="15" fill="rgb(232,2,27)" fg:x="3431" fg:w="2"/><text x="55.2164%" y="863.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.03%)</title><rect x="54.9664%" y="837" width="0.0320%" height="15" fill="rgb(241,23,22)" fg:x="3431" fg:w="2"/><text x="55.2164%" y="847.50"></text></g><g><title>ShiftMessageB (3 samples, 0.05%)</title><rect x="54.9664%" y="869" width="0.0481%" height="15" fill="rgb(211,73,27)" fg:x="3431" fg:w="3"/><text x="55.2164%" y="879.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="54.9984%" y="853" width="0.0160%" height="15" fill="rgb(235,109,49)" fg:x="3433" fg:w="1"/><text x="55.2484%" y="863.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="54.9984%" y="837" width="0.0160%" height="15" fill="rgb(230,99,29)" fg:x="3433" fg:w="1"/><text x="55.2484%" y="847.50"></text></g><g><title>sha256_x86_shani::Transform (5 samples, 0.08%)</title><rect x="54.9503%" y="885" width="0.0801%" height="15" fill="rgb(245,199,7)" fg:x="3430" fg:w="5"/><text x="55.2003%" y="895.50"></text></g><g><title>Shuffle (1 samples, 0.02%)</title><rect x="55.0144%" y="869" width="0.0160%" height="15" fill="rgb(217,179,10)" fg:x="3434" fg:w="1"/><text x="55.2644%" y="879.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="55.0144%" y="853" width="0.0160%" height="15" fill="rgb(254,99,47)" fg:x="3434" fg:w="1"/><text x="55.2644%" y="863.50"></text></g><g><title>CSHA256::Write (18 samples, 0.29%)</title><rect x="54.7581%" y="901" width="0.2884%" height="15" fill="rgb(251,121,7)" fg:x="3418" fg:w="18"/><text x="55.0081%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="55.0304%" y="885" width="0.0160%" height="15" fill="rgb(250,177,26)" fg:x="3435" fg:w="1"/><text x="55.2804%" y="895.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="55.0465%" y="869" width="0.0320%" height="15" fill="rgb(232,88,15)" fg:x="3436" fg:w="2"/><text x="55.2965%" y="879.50"></text></g><g><title>QuadRound (3 samples, 0.05%)</title><rect x="55.0465%" y="885" width="0.0481%" height="15" fill="rgb(251,54,54)" fg:x="3436" fg:w="3"/><text x="55.2965%" y="895.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="55.0785%" y="869" width="0.0160%" height="15" fill="rgb(208,177,15)" fg:x="3438" fg:w="1"/><text x="55.3285%" y="879.50"></text></g><g><title>CSHA256::Finalize (22 samples, 0.35%)</title><rect x="54.7581%" y="917" width="0.3525%" height="15" fill="rgb(205,97,32)" fg:x="3418" fg:w="22"/><text x="55.0081%" y="927.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.06%)</title><rect x="55.0465%" y="901" width="0.0641%" height="15" fill="rgb(217,192,13)" fg:x="3436" fg:w="4"/><text x="55.2965%" y="911.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="55.0945%" y="885" width="0.0160%" height="15" fill="rgb(215,163,41)" fg:x="3439" fg:w="1"/><text x="55.3445%" y="895.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="55.0945%" y="869" width="0.0160%" height="15" fill="rgb(246,83,29)" fg:x="3439" fg:w="1"/><text x="55.3445%" y="879.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="55.0945%" y="853" width="0.0160%" height="15" fill="rgb(219,2,45)" fg:x="3439" fg:w="1"/><text x="55.3445%" y="863.50"></text></g><g><title>CTransaction::ComputeHash (79 samples, 1.27%)</title><rect x="53.8770%" y="949" width="1.2656%" height="15" fill="rgb(242,215,33)" fg:x="3363" fg:w="79"/><text x="54.1270%" y="959.50"></text></g><g><title>HashWriter::GetHash (24 samples, 0.38%)</title><rect x="54.7581%" y="933" width="0.3845%" height="15" fill="rgb(217,1,6)" fg:x="3418" fg:w="24"/><text x="55.0081%" y="943.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="55.1105%" y="917" width="0.0320%" height="15" fill="rgb(207,85,52)" fg:x="3440" fg:w="2"/><text x="55.3605%" y="927.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="55.1266%" y="901" width="0.0160%" height="15" fill="rgb(231,171,19)" fg:x="3441" fg:w="1"/><text x="55.3766%" y="911.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.02%)</title><rect x="55.1426%" y="837" width="0.0160%" height="15" fill="rgb(207,128,4)" fg:x="3442" fg:w="1"/><text x="55.3926%" y="847.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.02%)</title><rect x="55.1426%" y="821" width="0.0160%" height="15" fill="rgb(219,208,4)" fg:x="3442" fg:w="1"/><text x="55.3926%" y="831.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="55.1586%" y="837" width="0.0481%" height="15" fill="rgb(235,161,42)" fg:x="3443" fg:w="3"/><text x="55.4086%" y="847.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="55.1906%" y="821" width="0.0160%" height="15" fill="rgb(247,218,18)" fg:x="3445" fg:w="1"/><text x="55.4406%" y="831.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.02%)</title><rect x="55.2067%" y="837" width="0.0160%" height="15" fill="rgb(232,114,51)" fg:x="3446" fg:w="1"/><text x="55.4567%" y="847.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.02%)</title><rect x="55.2067%" y="821" width="0.0160%" height="15" fill="rgb(222,95,3)" fg:x="3446" fg:w="1"/><text x="55.4567%" y="831.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="55.2227%" y="821" width="0.0160%" height="15" fill="rgb(240,65,29)" fg:x="3447" fg:w="1"/><text x="55.4727%" y="831.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.2227%" y="805" width="0.0160%" height="15" fill="rgb(249,209,20)" fg:x="3447" fg:w="1"/><text x="55.4727%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="55.2227%" y="837" width="0.0320%" height="15" fill="rgb(241,48,37)" fg:x="3447" fg:w="2"/><text x="55.4727%" y="847.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="55.2387%" y="821" width="0.0160%" height="15" fill="rgb(230,140,42)" fg:x="3448" fg:w="1"/><text x="55.4887%" y="831.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.2387%" y="805" width="0.0160%" height="15" fill="rgb(230,176,45)" fg:x="3448" fg:w="1"/><text x="55.4887%" y="815.50"></text></g><g><title>CSHA256::CSHA256 (2 samples, 0.03%)</title><rect x="55.2868%" y="741" width="0.0320%" height="15" fill="rgb(245,112,21)" fg:x="3451" fg:w="2"/><text x="55.5368%" y="751.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.02%)</title><rect x="55.3028%" y="725" width="0.0160%" height="15" fill="rgb(207,183,35)" fg:x="3452" fg:w="1"/><text x="55.5528%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="55.3188%" y="629" width="0.0320%" height="15" fill="rgb(227,44,33)" fg:x="3453" fg:w="2"/><text x="55.5688%" y="639.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="55.3188%" y="613" width="0.0320%" height="15" fill="rgb(246,120,21)" fg:x="3453" fg:w="2"/><text x="55.5688%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="55.3188%" y="597" width="0.0320%" height="15" fill="rgb(235,57,52)" fg:x="3453" fg:w="2"/><text x="55.5688%" y="607.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="55.3188%" y="581" width="0.0320%" height="15" fill="rgb(238,84,10)" fg:x="3453" fg:w="2"/><text x="55.5688%" y="591.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="55.3188%" y="565" width="0.0320%" height="15" fill="rgb(251,200,32)" fg:x="3453" fg:w="2"/><text x="55.5688%" y="575.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="55.3348%" y="549" width="0.0160%" height="15" fill="rgb(247,159,13)" fg:x="3454" fg:w="1"/><text x="55.5848%" y="559.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="55.3348%" y="533" width="0.0160%" height="15" fill="rgb(238,64,4)" fg:x="3454" fg:w="1"/><text x="55.5848%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.3508%" y="533" width="0.0160%" height="15" fill="rgb(221,131,51)" fg:x="3455" fg:w="1"/><text x="55.6008%" y="543.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.3508%" y="517" width="0.0160%" height="15" fill="rgb(242,5,29)" fg:x="3455" fg:w="1"/><text x="55.6008%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="55.3508%" y="501" width="0.0160%" height="15" fill="rgb(214,130,32)" fg:x="3455" fg:w="1"/><text x="55.6008%" y="511.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="55.3508%" y="485" width="0.0160%" height="15" fill="rgb(244,210,16)" fg:x="3455" fg:w="1"/><text x="55.6008%" y="495.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="55.3508%" y="469" width="0.0160%" height="15" fill="rgb(234,48,26)" fg:x="3455" fg:w="1"/><text x="55.6008%" y="479.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="55.3669%" y="405" width="0.0481%" height="15" fill="rgb(231,82,38)" fg:x="3456" fg:w="3"/><text x="55.6169%" y="415.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="55.3989%" y="389" width="0.0160%" height="15" fill="rgb(254,128,41)" fg:x="3458" fg:w="1"/><text x="55.6489%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (8 samples, 0.13%)</title><rect x="55.3508%" y="629" width="0.1282%" height="15" fill="rgb(212,73,49)" fg:x="3455" fg:w="8"/><text x="55.6008%" y="639.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="55.3508%" y="613" width="0.1282%" height="15" fill="rgb(205,62,54)" fg:x="3455" fg:w="8"/><text x="55.6008%" y="623.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="55.3508%" y="597" width="0.1282%" height="15" fill="rgb(228,0,8)" fg:x="3455" fg:w="8"/><text x="55.6008%" y="607.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (8 samples, 0.13%)</title><rect x="55.3508%" y="581" width="0.1282%" height="15" fill="rgb(251,28,17)" fg:x="3455" fg:w="8"/><text x="55.6008%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (8 samples, 0.13%)</title><rect x="55.3508%" y="565" width="0.1282%" height="15" fill="rgb(238,105,27)" fg:x="3455" fg:w="8"/><text x="55.6008%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (8 samples, 0.13%)</title><rect x="55.3508%" y="549" width="0.1282%" height="15" fill="rgb(237,216,33)" fg:x="3455" fg:w="8"/><text x="55.6008%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (7 samples, 0.11%)</title><rect x="55.3669%" y="533" width="0.1121%" height="15" fill="rgb(229,228,25)" fg:x="3456" fg:w="7"/><text x="55.6169%" y="543.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.11%)</title><rect x="55.3669%" y="517" width="0.1121%" height="15" fill="rgb(233,75,23)" fg:x="3456" fg:w="7"/><text x="55.6169%" y="527.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.11%)</title><rect x="55.3669%" y="501" width="0.1121%" height="15" fill="rgb(231,207,16)" fg:x="3456" fg:w="7"/><text x="55.6169%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (7 samples, 0.11%)</title><rect x="55.3669%" y="485" width="0.1121%" height="15" fill="rgb(231,191,45)" fg:x="3456" fg:w="7"/><text x="55.6169%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (7 samples, 0.11%)</title><rect x="55.3669%" y="469" width="0.1121%" height="15" fill="rgb(224,133,17)" fg:x="3456" fg:w="7"/><text x="55.6169%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (7 samples, 0.11%)</title><rect x="55.3669%" y="453" width="0.1121%" height="15" fill="rgb(209,178,27)" fg:x="3456" fg:w="7"/><text x="55.6169%" y="463.50"></text></g><g><title>HashWriter::write (7 samples, 0.11%)</title><rect x="55.3669%" y="437" width="0.1121%" height="15" fill="rgb(218,37,11)" fg:x="3456" fg:w="7"/><text x="55.6169%" y="447.50"></text></g><g><title>CSHA256::Write (7 samples, 0.11%)</title><rect x="55.3669%" y="421" width="0.1121%" height="15" fill="rgb(251,226,25)" fg:x="3456" fg:w="7"/><text x="55.6169%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.06%)</title><rect x="55.4149%" y="405" width="0.0641%" height="15" fill="rgb(209,222,27)" fg:x="3459" fg:w="4"/><text x="55.6649%" y="415.50"></text></g><g><title>ShiftMessageB (4 samples, 0.06%)</title><rect x="55.4149%" y="389" width="0.0641%" height="15" fill="rgb(238,22,21)" fg:x="3459" fg:w="4"/><text x="55.6649%" y="399.50"></text></g><g><title>ShiftMessageC (4 samples, 0.06%)</title><rect x="55.4149%" y="373" width="0.0641%" height="15" fill="rgb(233,161,25)" fg:x="3459" fg:w="4"/><text x="55.6649%" y="383.50"></text></g><g><title>_mm_alignr_epi8 (4 samples, 0.06%)</title><rect x="55.4149%" y="357" width="0.0641%" height="15" fill="rgb(226,122,53)" fg:x="3459" fg:w="4"/><text x="55.6649%" y="367.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="55.4149%" y="341" width="0.0641%" height="15" fill="rgb(220,123,17)" fg:x="3459" fg:w="4"/><text x="55.6649%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="55.4149%" y="325" width="0.0641%" height="15" fill="rgb(230,224,35)" fg:x="3459" fg:w="4"/><text x="55.6649%" y="335.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="55.4149%" y="309" width="0.0641%" height="15" fill="rgb(246,83,8)" fg:x="3459" fg:w="4"/><text x="55.6649%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="55.4149%" y="293" width="0.0641%" height="15" fill="rgb(230,214,17)" fg:x="3459" fg:w="4"/><text x="55.6649%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="55.4149%" y="277" width="0.0641%" height="15" fill="rgb(222,97,18)" fg:x="3459" fg:w="4"/><text x="55.6649%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="55.4310%" y="261" width="0.0481%" height="15" fill="rgb(206,79,1)" fg:x="3460" fg:w="3"/><text x="55.6810%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="55.4310%" y="245" width="0.0481%" height="15" fill="rgb(214,121,34)" fg:x="3460" fg:w="3"/><text x="55.6810%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="55.4310%" y="229" width="0.0481%" height="15" fill="rgb(249,199,46)" fg:x="3460" fg:w="3"/><text x="55.6810%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="55.4310%" y="213" width="0.0481%" height="15" fill="rgb(214,222,46)" fg:x="3460" fg:w="3"/><text x="55.6810%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="55.4310%" y="197" width="0.0481%" height="15" fill="rgb(248,168,30)" fg:x="3460" fg:w="3"/><text x="55.6810%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="55.4310%" y="181" width="0.0481%" height="15" fill="rgb(226,14,28)" fg:x="3460" fg:w="3"/><text x="55.6810%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="55.4310%" y="165" width="0.0481%" height="15" fill="rgb(253,123,1)" fg:x="3460" fg:w="3"/><text x="55.6810%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="55.4310%" y="149" width="0.0481%" height="15" fill="rgb(225,24,42)" fg:x="3460" fg:w="3"/><text x="55.6810%" y="159.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="55.4790%" y="517" width="0.0160%" height="15" fill="rgb(216,161,37)" fg:x="3463" fg:w="1"/><text x="55.7290%" y="527.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="55.4790%" y="501" width="0.0160%" height="15" fill="rgb(251,164,26)" fg:x="3463" fg:w="1"/><text x="55.7290%" y="511.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="55.4790%" y="485" width="0.0160%" height="15" fill="rgb(219,177,3)" fg:x="3463" fg:w="1"/><text x="55.7290%" y="495.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="55.4790%" y="469" width="0.0160%" height="15" fill="rgb(222,65,0)" fg:x="3463" fg:w="1"/><text x="55.7290%" y="479.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="55.4950%" y="517" width="0.0160%" height="15" fill="rgb(223,69,54)" fg:x="3464" fg:w="1"/><text x="55.7450%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="55.4950%" y="501" width="0.0160%" height="15" fill="rgb(235,30,27)" fg:x="3464" fg:w="1"/><text x="55.7450%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="55.4950%" y="485" width="0.0160%" height="15" fill="rgb(220,183,50)" fg:x="3464" fg:w="1"/><text x="55.7450%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.4950%" y="469" width="0.0160%" height="15" fill="rgb(248,198,15)" fg:x="3464" fg:w="1"/><text x="55.7450%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.4950%" y="453" width="0.0160%" height="15" fill="rgb(222,211,4)" fg:x="3464" fg:w="1"/><text x="55.7450%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.4950%" y="437" width="0.0160%" height="15" fill="rgb(214,102,34)" fg:x="3464" fg:w="1"/><text x="55.7450%" y="447.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.4950%" y="421" width="0.0160%" height="15" fill="rgb(245,92,5)" fg:x="3464" fg:w="1"/><text x="55.7450%" y="431.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.21%)</title><rect x="55.3188%" y="741" width="0.2083%" height="15" fill="rgb(252,72,51)" fg:x="3453" fg:w="13"/><text x="55.5688%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.21%)</title><rect x="55.3188%" y="725" width="0.2083%" height="15" fill="rgb(252,208,19)" fg:x="3453" fg:w="13"/><text x="55.5688%" y="735.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.21%)</title><rect x="55.3188%" y="709" width="0.2083%" height="15" fill="rgb(211,69,7)" fg:x="3453" fg:w="13"/><text x="55.5688%" y="719.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.21%)</title><rect x="55.3188%" y="693" width="0.2083%" height="15" fill="rgb(211,27,16)" fg:x="3453" fg:w="13"/><text x="55.5688%" y="703.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (13 samples, 0.21%)</title><rect x="55.3188%" y="677" width="0.2083%" height="15" fill="rgb(219,216,14)" fg:x="3453" fg:w="13"/><text x="55.5688%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.21%)</title><rect x="55.3188%" y="661" width="0.2083%" height="15" fill="rgb(219,71,8)" fg:x="3453" fg:w="13"/><text x="55.5688%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.21%)</title><rect x="55.3188%" y="645" width="0.2083%" height="15" fill="rgb(223,170,53)" fg:x="3453" fg:w="13"/><text x="55.5688%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.05%)</title><rect x="55.4790%" y="629" width="0.0481%" height="15" fill="rgb(246,21,26)" fg:x="3463" fg:w="3"/><text x="55.7290%" y="639.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="55.4790%" y="613" width="0.0481%" height="15" fill="rgb(248,20,46)" fg:x="3463" fg:w="3"/><text x="55.7290%" y="623.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="55.4790%" y="597" width="0.0481%" height="15" fill="rgb(252,94,11)" fg:x="3463" fg:w="3"/><text x="55.7290%" y="607.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="55.4790%" y="581" width="0.0481%" height="15" fill="rgb(236,163,8)" fg:x="3463" fg:w="3"/><text x="55.7290%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="55.4790%" y="565" width="0.0481%" height="15" fill="rgb(217,221,45)" fg:x="3463" fg:w="3"/><text x="55.7290%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="55.4790%" y="549" width="0.0481%" height="15" fill="rgb(238,38,17)" fg:x="3463" fg:w="3"/><text x="55.7290%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.05%)</title><rect x="55.4790%" y="533" width="0.0481%" height="15" fill="rgb(242,210,23)" fg:x="3463" fg:w="3"/><text x="55.7290%" y="543.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.5111%" y="517" width="0.0160%" height="15" fill="rgb(250,86,53)" fg:x="3465" fg:w="1"/><text x="55.7611%" y="527.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.5111%" y="501" width="0.0160%" height="15" fill="rgb(223,168,25)" fg:x="3465" fg:w="1"/><text x="55.7611%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="55.5111%" y="485" width="0.0160%" height="15" fill="rgb(251,189,4)" fg:x="3465" fg:w="1"/><text x="55.7611%" y="495.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="55.5111%" y="469" width="0.0160%" height="15" fill="rgb(245,19,28)" fg:x="3465" fg:w="1"/><text x="55.7611%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="55.5111%" y="453" width="0.0160%" height="15" fill="rgb(207,10,34)" fg:x="3465" fg:w="1"/><text x="55.7611%" y="463.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="55.5111%" y="437" width="0.0160%" height="15" fill="rgb(235,153,31)" fg:x="3465" fg:w="1"/><text x="55.7611%" y="447.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.5111%" y="421" width="0.0160%" height="15" fill="rgb(228,72,37)" fg:x="3465" fg:w="1"/><text x="55.7611%" y="431.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="55.5271%" y="741" width="0.0160%" height="15" fill="rgb(215,15,16)" fg:x="3466" fg:w="1"/><text x="55.7771%" y="751.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="55.5271%" y="725" width="0.0160%" height="15" fill="rgb(250,119,29)" fg:x="3466" fg:w="1"/><text x="55.7771%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.5271%" y="709" width="0.0160%" height="15" fill="rgb(214,59,1)" fg:x="3466" fg:w="1"/><text x="55.7771%" y="719.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.5271%" y="693" width="0.0160%" height="15" fill="rgb(223,109,25)" fg:x="3466" fg:w="1"/><text x="55.7771%" y="703.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="55.5271%" y="677" width="0.0160%" height="15" fill="rgb(230,198,22)" fg:x="3466" fg:w="1"/><text x="55.7771%" y="687.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="55.5271%" y="661" width="0.0160%" height="15" fill="rgb(245,184,46)" fg:x="3466" fg:w="1"/><text x="55.7771%" y="671.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (17 samples, 0.27%)</title><rect x="55.2868%" y="821" width="0.2723%" height="15" fill="rgb(253,73,16)" fg:x="3451" fg:w="17"/><text x="55.5368%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (17 samples, 0.27%)</title><rect x="55.2868%" y="805" width="0.2723%" height="15" fill="rgb(206,94,45)" fg:x="3451" fg:w="17"/><text x="55.5368%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (17 samples, 0.27%)</title><rect x="55.2868%" y="789" width="0.2723%" height="15" fill="rgb(236,83,27)" fg:x="3451" fg:w="17"/><text x="55.5368%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.27%)</title><rect x="55.2868%" y="773" width="0.2723%" height="15" fill="rgb(220,196,8)" fg:x="3451" fg:w="17"/><text x="55.5368%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (17 samples, 0.27%)</title><rect x="55.2868%" y="757" width="0.2723%" height="15" fill="rgb(254,185,14)" fg:x="3451" fg:w="17"/><text x="55.5368%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.5431%" y="741" width="0.0160%" height="15" fill="rgb(226,50,22)" fg:x="3467" fg:w="1"/><text x="55.7931%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.5431%" y="725" width="0.0160%" height="15" fill="rgb(253,147,0)" fg:x="3467" fg:w="1"/><text x="55.7931%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="55.5431%" y="709" width="0.0160%" height="15" fill="rgb(252,46,33)" fg:x="3467" fg:w="1"/><text x="55.7931%" y="719.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="55.5431%" y="693" width="0.0160%" height="15" fill="rgb(242,22,54)" fg:x="3467" fg:w="1"/><text x="55.7931%" y="703.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.02%)</title><rect x="55.5431%" y="677" width="0.0160%" height="15" fill="rgb(223,178,32)" fg:x="3467" fg:w="1"/><text x="55.7931%" y="687.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="55.5591%" y="741" width="0.0160%" height="15" fill="rgb(214,106,53)" fg:x="3468" fg:w="1"/><text x="55.8091%" y="751.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="55.5591%" y="725" width="0.0160%" height="15" fill="rgb(232,65,50)" fg:x="3468" fg:w="1"/><text x="55.8091%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6232%" y="341" width="0.0160%" height="15" fill="rgb(231,110,28)" fg:x="3472" fg:w="1"/><text x="55.8732%" y="351.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6232%" y="325" width="0.0160%" height="15" fill="rgb(216,71,40)" fg:x="3472" fg:w="1"/><text x="55.8732%" y="335.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="55.6232%" y="309" width="0.0160%" height="15" fill="rgb(229,89,53)" fg:x="3472" fg:w="1"/><text x="55.8732%" y="319.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="55.6232%" y="293" width="0.0160%" height="15" fill="rgb(210,124,14)" fg:x="3472" fg:w="1"/><text x="55.8732%" y="303.50"></text></g><g><title>CSHA256::Write (4 samples, 0.06%)</title><rect x="55.5912%" y="565" width="0.0641%" height="15" fill="rgb(236,213,6)" fg:x="3470" fg:w="4"/><text x="55.8412%" y="575.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="549" width="0.0320%" height="15" fill="rgb(228,41,5)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.03%)</title><rect x="55.6232%" y="533" width="0.0320%" height="15" fill="rgb(221,167,25)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="517" width="0.0320%" height="15" fill="rgb(228,144,37)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="501" width="0.0320%" height="15" fill="rgb(227,189,38)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="485" width="0.0320%" height="15" fill="rgb(218,8,2)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="495.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="469" width="0.0320%" height="15" fill="rgb(209,61,28)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="479.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="453" width="0.0320%" height="15" fill="rgb(233,140,39)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="437" width="0.0320%" height="15" fill="rgb(251,66,48)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="447.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="421" width="0.0320%" height="15" fill="rgb(210,44,45)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="431.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="405" width="0.0320%" height="15" fill="rgb(214,136,46)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="415.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="389" width="0.0320%" height="15" fill="rgb(207,130,50)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="399.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="373" width="0.0320%" height="15" fill="rgb(228,102,49)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="383.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.03%)</title><rect x="55.6232%" y="357" width="0.0320%" height="15" fill="rgb(253,55,1)" fg:x="3472" fg:w="2"/><text x="55.8732%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="55.6392%" y="341" width="0.0160%" height="15" fill="rgb(238,222,9)" fg:x="3473" fg:w="1"/><text x="55.8892%" y="351.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6392%" y="325" width="0.0160%" height="15" fill="rgb(246,99,6)" fg:x="3473" fg:w="1"/><text x="55.8892%" y="335.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6392%" y="309" width="0.0160%" height="15" fill="rgb(219,110,26)" fg:x="3473" fg:w="1"/><text x="55.8892%" y="319.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="55.6392%" y="293" width="0.0160%" height="15" fill="rgb(239,160,33)" fg:x="3473" fg:w="1"/><text x="55.8892%" y="303.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6392%" y="277" width="0.0160%" height="15" fill="rgb(220,202,23)" fg:x="3473" fg:w="1"/><text x="55.8892%" y="287.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6392%" y="261" width="0.0160%" height="15" fill="rgb(208,80,26)" fg:x="3473" fg:w="1"/><text x="55.8892%" y="271.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="55.6392%" y="245" width="0.0160%" height="15" fill="rgb(243,85,7)" fg:x="3473" fg:w="1"/><text x="55.8892%" y="255.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="55.6392%" y="229" width="0.0160%" height="15" fill="rgb(228,77,47)" fg:x="3473" fg:w="1"/><text x="55.8892%" y="239.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="55.6552%" y="565" width="0.0160%" height="15" fill="rgb(212,226,8)" fg:x="3474" fg:w="1"/><text x="55.9052%" y="575.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="55.6552%" y="549" width="0.0160%" height="15" fill="rgb(241,120,54)" fg:x="3474" fg:w="1"/><text x="55.9052%" y="559.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="55.6552%" y="533" width="0.0160%" height="15" fill="rgb(226,80,16)" fg:x="3474" fg:w="1"/><text x="55.9052%" y="543.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="565" width="0.0160%" height="15" fill="rgb(240,76,13)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="575.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="55.6713%" y="549" width="0.0160%" height="15" fill="rgb(252,74,8)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="533" width="0.0160%" height="15" fill="rgb(244,155,2)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="517" width="0.0160%" height="15" fill="rgb(215,81,35)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="501" width="0.0160%" height="15" fill="rgb(206,55,2)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="485" width="0.0160%" height="15" fill="rgb(231,2,34)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="469" width="0.0160%" height="15" fill="rgb(242,176,48)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="453" width="0.0160%" height="15" fill="rgb(249,31,36)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="463.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="437" width="0.0160%" height="15" fill="rgb(205,18,17)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="447.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="421" width="0.0160%" height="15" fill="rgb(254,130,5)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="431.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="405" width="0.0160%" height="15" fill="rgb(229,42,45)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="389" width="0.0160%" height="15" fill="rgb(245,95,25)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="399.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="373" width="0.0160%" height="15" fill="rgb(249,193,38)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="357" width="0.0160%" height="15" fill="rgb(241,140,43)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="367.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="341" width="0.0160%" height="15" fill="rgb(245,78,48)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="351.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="325" width="0.0160%" height="15" fill="rgb(214,92,39)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="335.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="309" width="0.0160%" height="15" fill="rgb(211,189,14)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="293" width="0.0160%" height="15" fill="rgb(218,7,24)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="303.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="277" width="0.0160%" height="15" fill="rgb(224,200,49)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="55.6713%" y="261" width="0.0160%" height="15" fill="rgb(218,210,14)" fg:x="3475" fg:w="1"/><text x="55.9213%" y="271.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="55.5751%" y="629" width="0.1282%" height="15" fill="rgb(234,142,31)" fg:x="3469" fg:w="8"/><text x="55.8251%" y="639.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.11%)</title><rect x="55.5912%" y="613" width="0.1121%" height="15" fill="rgb(227,165,2)" fg:x="3470" fg:w="7"/><text x="55.8412%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (7 samples, 0.11%)</title><rect x="55.5912%" y="597" width="0.1121%" height="15" fill="rgb(232,44,46)" fg:x="3470" fg:w="7"/><text x="55.8412%" y="607.50"></text></g><g><title>HashWriter::write (7 samples, 0.11%)</title><rect x="55.5912%" y="581" width="0.1121%" height="15" fill="rgb(236,149,47)" fg:x="3470" fg:w="7"/><text x="55.8412%" y="591.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.6873%" y="565" width="0.0160%" height="15" fill="rgb(227,45,31)" fg:x="3476" fg:w="1"/><text x="55.9373%" y="575.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="55.7193%" y="469" width="0.0481%" height="15" fill="rgb(240,176,51)" fg:x="3478" fg:w="3"/><text x="55.9693%" y="479.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="55.7514%" y="453" width="0.0160%" height="15" fill="rgb(249,146,41)" fg:x="3480" fg:w="1"/><text x="56.0014%" y="463.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="469" width="0.0160%" height="15" fill="rgb(213,208,4)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="55.7674%" y="453" width="0.0160%" height="15" fill="rgb(245,84,36)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="437" width="0.0160%" height="15" fill="rgb(254,84,18)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="421" width="0.0160%" height="15" fill="rgb(225,38,54)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="431.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="405" width="0.0160%" height="15" fill="rgb(246,50,30)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="389" width="0.0160%" height="15" fill="rgb(246,148,9)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="373" width="0.0160%" height="15" fill="rgb(223,75,4)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="357" width="0.0160%" height="15" fill="rgb(239,148,41)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="367.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="341" width="0.0160%" height="15" fill="rgb(205,195,3)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="351.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="325" width="0.0160%" height="15" fill="rgb(254,161,1)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="335.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="309" width="0.0160%" height="15" fill="rgb(211,229,8)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="293" width="0.0160%" height="15" fill="rgb(220,97,9)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="303.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="277" width="0.0160%" height="15" fill="rgb(240,218,8)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="261" width="0.0160%" height="15" fill="rgb(250,44,0)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="271.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="245" width="0.0160%" height="15" fill="rgb(236,41,53)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="255.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="229" width="0.0160%" height="15" fill="rgb(218,227,13)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="239.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="213" width="0.0160%" height="15" fill="rgb(217,94,32)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="223.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="197" width="0.0160%" height="15" fill="rgb(213,217,12)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="207.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="181" width="0.0160%" height="15" fill="rgb(229,13,46)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="191.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="165" width="0.0160%" height="15" fill="rgb(243,139,5)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="175.50"></text></g><g><title>Span&lt;std::byte const&gt; MakeByteSpan&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="149" width="0.0160%" height="15" fill="rgb(249,38,45)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="159.50"></text></g><g><title>Span&lt;unsigned char const&gt;::Span&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="55.7674%" y="133" width="0.0160%" height="15" fill="rgb(216,70,11)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="143.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (1 samples, 0.02%)</title><rect x="55.7674%" y="117" width="0.0160%" height="15" fill="rgb(253,101,25)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="127.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="55.7674%" y="101" width="0.0160%" height="15" fill="rgb(207,197,30)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="111.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::indirect_ptr (1 samples, 0.02%)</title><rect x="55.7674%" y="85" width="0.0160%" height="15" fill="rgb(238,87,13)" fg:x="3481" fg:w="1"/><text x="56.0174%" y="95.50"></text></g><g><title>CSHA256::Write (7 samples, 0.11%)</title><rect x="55.7033%" y="485" width="0.1121%" height="15" fill="rgb(215,155,8)" fg:x="3477" fg:w="7"/><text x="55.9533%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="55.7834%" y="469" width="0.0320%" height="15" fill="rgb(239,166,38)" fg:x="3482" fg:w="2"/><text x="56.0334%" y="479.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.8154%" y="453" width="0.0160%" height="15" fill="rgb(240,194,35)" fg:x="3484" fg:w="1"/><text x="56.0654%" y="463.50"></text></g><g><title>QuadRound (3 samples, 0.05%)</title><rect x="55.8154%" y="469" width="0.0481%" height="15" fill="rgb(219,10,44)" fg:x="3484" fg:w="3"/><text x="56.0654%" y="479.50"></text></g><g><title>_mm_sha256rnds2_epu32 (2 samples, 0.03%)</title><rect x="55.8315%" y="453" width="0.0320%" height="15" fill="rgb(251,220,35)" fg:x="3485" fg:w="2"/><text x="56.0815%" y="463.50"></text></g><g><title>ShiftMessageA (2 samples, 0.03%)</title><rect x="55.8635%" y="453" width="0.0320%" height="15" fill="rgb(218,117,13)" fg:x="3487" fg:w="2"/><text x="56.1135%" y="463.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.03%)</title><rect x="55.8635%" y="437" width="0.0320%" height="15" fill="rgb(221,213,40)" fg:x="3487" fg:w="2"/><text x="56.1135%" y="447.50"></text></g><g><title>ShiftMessageB (5 samples, 0.08%)</title><rect x="55.8635%" y="469" width="0.0801%" height="15" fill="rgb(251,224,35)" fg:x="3487" fg:w="5"/><text x="56.1135%" y="479.50"></text></g><g><title>ShiftMessageC (3 samples, 0.05%)</title><rect x="55.8955%" y="453" width="0.0481%" height="15" fill="rgb(241,33,39)" fg:x="3489" fg:w="3"/><text x="56.1455%" y="463.50"></text></g><g><title>_mm_sha256msg2_epu32 (3 samples, 0.05%)</title><rect x="55.8955%" y="437" width="0.0481%" height="15" fill="rgb(222,74,17)" fg:x="3489" fg:w="3"/><text x="56.1455%" y="447.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="55.9436%" y="469" width="0.0160%" height="15" fill="rgb(225,103,0)" fg:x="3492" fg:w="1"/><text x="56.1936%" y="479.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.9436%" y="453" width="0.0160%" height="15" fill="rgb(240,0,12)" fg:x="3492" fg:w="1"/><text x="56.1936%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (17 samples, 0.27%)</title><rect x="55.7033%" y="517" width="0.2723%" height="15" fill="rgb(233,213,37)" fg:x="3477" fg:w="17"/><text x="55.9533%" y="527.50"></text></g><g><title>HashWriter::write (17 samples, 0.27%)</title><rect x="55.7033%" y="501" width="0.2723%" height="15" fill="rgb(225,84,52)" fg:x="3477" fg:w="17"/><text x="55.9533%" y="511.50"></text></g><g><title>sha256_x86_shani::Transform (10 samples, 0.16%)</title><rect x="55.8154%" y="485" width="0.1602%" height="15" fill="rgb(247,160,51)" fg:x="3484" fg:w="10"/><text x="56.0654%" y="495.50"></text></g><g><title>Shuffle (1 samples, 0.02%)</title><rect x="55.9596%" y="469" width="0.0160%" height="15" fill="rgb(244,60,51)" fg:x="3493" fg:w="1"/><text x="56.2096%" y="479.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="55.9596%" y="453" width="0.0160%" height="15" fill="rgb(233,114,7)" fg:x="3493" fg:w="1"/><text x="56.2096%" y="463.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="55.9756%" y="517" width="0.0160%" height="15" fill="rgb(246,136,16)" fg:x="3494" fg:w="1"/><text x="56.2256%" y="527.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (27 samples, 0.43%)</title><rect x="55.5751%" y="741" width="0.4326%" height="15" fill="rgb(243,114,45)" fg:x="3469" fg:w="27"/><text x="55.8251%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (27 samples, 0.43%)</title><rect x="55.5751%" y="725" width="0.4326%" height="15" fill="rgb(247,183,43)" fg:x="3469" fg:w="27"/><text x="55.8251%" y="735.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.43%)</title><rect x="55.5751%" y="709" width="0.4326%" height="15" fill="rgb(251,210,42)" fg:x="3469" fg:w="27"/><text x="55.8251%" y="719.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.43%)</title><rect x="55.5751%" y="693" width="0.4326%" height="15" fill="rgb(221,88,35)" fg:x="3469" fg:w="27"/><text x="55.8251%" y="703.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (27 samples, 0.43%)</title><rect x="55.5751%" y="677" width="0.4326%" height="15" fill="rgb(242,21,20)" fg:x="3469" fg:w="27"/><text x="55.8251%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (27 samples, 0.43%)</title><rect x="55.5751%" y="661" width="0.4326%" height="15" fill="rgb(233,226,36)" fg:x="3469" fg:w="27"/><text x="55.8251%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (27 samples, 0.43%)</title><rect x="55.5751%" y="645" width="0.4326%" height="15" fill="rgb(243,189,34)" fg:x="3469" fg:w="27"/><text x="55.8251%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (19 samples, 0.30%)</title><rect x="55.7033%" y="629" width="0.3044%" height="15" fill="rgb(207,145,50)" fg:x="3477" fg:w="19"/><text x="55.9533%" y="639.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.30%)</title><rect x="55.7033%" y="613" width="0.3044%" height="15" fill="rgb(242,1,50)" fg:x="3477" fg:w="19"/><text x="55.9533%" y="623.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.30%)</title><rect x="55.7033%" y="597" width="0.3044%" height="15" fill="rgb(231,65,32)" fg:x="3477" fg:w="19"/><text x="55.9533%" y="607.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (19 samples, 0.30%)</title><rect x="55.7033%" y="581" width="0.3044%" height="15" fill="rgb(208,68,49)" fg:x="3477" fg:w="19"/><text x="55.9533%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (19 samples, 0.30%)</title><rect x="55.7033%" y="565" width="0.3044%" height="15" fill="rgb(253,54,49)" fg:x="3477" fg:w="19"/><text x="55.9533%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (19 samples, 0.30%)</title><rect x="55.7033%" y="549" width="0.3044%" height="15" fill="rgb(245,186,24)" fg:x="3477" fg:w="19"/><text x="55.9533%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (19 samples, 0.30%)</title><rect x="55.7033%" y="533" width="0.3044%" height="15" fill="rgb(209,2,41)" fg:x="3477" fg:w="19"/><text x="55.9533%" y="543.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.9917%" y="517" width="0.0160%" height="15" fill="rgb(242,208,54)" fg:x="3495" fg:w="1"/><text x="56.2417%" y="527.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.9917%" y="501" width="0.0160%" height="15" fill="rgb(225,9,51)" fg:x="3495" fg:w="1"/><text x="56.2417%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="55.9917%" y="485" width="0.0160%" height="15" fill="rgb(207,207,25)" fg:x="3495" fg:w="1"/><text x="56.2417%" y="495.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="55.9917%" y="469" width="0.0160%" height="15" fill="rgb(253,96,18)" fg:x="3495" fg:w="1"/><text x="56.2417%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="55.9917%" y="453" width="0.0160%" height="15" fill="rgb(252,215,20)" fg:x="3495" fg:w="1"/><text x="56.2417%" y="463.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="55.9917%" y="437" width="0.0160%" height="15" fill="rgb(245,227,26)" fg:x="3495" fg:w="1"/><text x="56.2417%" y="447.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.9917%" y="421" width="0.0160%" height="15" fill="rgb(241,208,0)" fg:x="3495" fg:w="1"/><text x="56.2417%" y="431.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="741" width="0.0160%" height="15" fill="rgb(224,130,10)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="751.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="56.0077%" y="725" width="0.0160%" height="15" fill="rgb(237,29,0)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="709" width="0.0160%" height="15" fill="rgb(219,27,41)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="693" width="0.0160%" height="15" fill="rgb(245,101,19)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="677" width="0.0160%" height="15" fill="rgb(243,44,37)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="661" width="0.0160%" height="15" fill="rgb(228,213,43)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="645" width="0.0160%" height="15" fill="rgb(219,163,21)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="629" width="0.0160%" height="15" fill="rgb(234,86,24)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="639.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="613" width="0.0160%" height="15" fill="rgb(225,10,24)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="623.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="597" width="0.0160%" height="15" fill="rgb(218,109,7)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="607.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="581" width="0.0160%" height="15" fill="rgb(210,20,26)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="565" width="0.0160%" height="15" fill="rgb(216,18,1)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="549" width="0.0160%" height="15" fill="rgb(206,163,23)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="533" width="0.0160%" height="15" fill="rgb(229,150,31)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="543.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="517" width="0.0160%" height="15" fill="rgb(231,10,5)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="527.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="501" width="0.0160%" height="15" fill="rgb(250,40,50)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="511.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="485" width="0.0160%" height="15" fill="rgb(217,119,7)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="495.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="469" width="0.0160%" height="15" fill="rgb(245,214,40)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="479.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="453" width="0.0160%" height="15" fill="rgb(216,187,1)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="56.0077%" y="437" width="0.0160%" height="15" fill="rgb(237,146,21)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="56.0077%" y="421" width="0.0160%" height="15" fill="rgb(210,174,47)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="431.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="56.0077%" y="405" width="0.0160%" height="15" fill="rgb(218,111,39)" fg:x="3496" fg:w="1"/><text x="56.2577%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (30 samples, 0.48%)</title><rect x="55.5591%" y="821" width="0.4806%" height="15" fill="rgb(224,95,19)" fg:x="3468" fg:w="30"/><text x="55.8091%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (30 samples, 0.48%)</title><rect x="55.5591%" y="805" width="0.4806%" height="15" fill="rgb(234,15,38)" fg:x="3468" fg:w="30"/><text x="55.8091%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (30 samples, 0.48%)</title><rect x="55.5591%" y="789" width="0.4806%" height="15" fill="rgb(246,56,12)" fg:x="3468" fg:w="30"/><text x="55.8091%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.48%)</title><rect x="55.5591%" y="773" width="0.4806%" height="15" fill="rgb(247,16,17)" fg:x="3468" fg:w="30"/><text x="55.8091%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (30 samples, 0.48%)</title><rect x="55.5591%" y="757" width="0.4806%" height="15" fill="rgb(215,151,11)" fg:x="3468" fg:w="30"/><text x="55.8091%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0237%" y="741" width="0.0160%" height="15" fill="rgb(225,16,24)" fg:x="3497" fg:w="1"/><text x="56.2737%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.0237%" y="725" width="0.0160%" height="15" fill="rgb(217,117,5)" fg:x="3497" fg:w="1"/><text x="56.2737%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="56.0237%" y="709" width="0.0160%" height="15" fill="rgb(246,187,53)" fg:x="3497" fg:w="1"/><text x="56.2737%" y="719.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="56.0237%" y="693" width="0.0160%" height="15" fill="rgb(241,71,40)" fg:x="3497" fg:w="1"/><text x="56.2737%" y="703.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="56.0237%" y="677" width="0.0160%" height="15" fill="rgb(231,67,39)" fg:x="3497" fg:w="1"/><text x="56.2737%" y="687.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="56.0397%" y="741" width="0.0320%" height="15" fill="rgb(222,120,24)" fg:x="3498" fg:w="2"/><text x="56.2897%" y="751.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="56.0558%" y="725" width="0.0160%" height="15" fill="rgb(248,3,3)" fg:x="3499" fg:w="1"/><text x="56.3058%" y="735.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="56.0718%" y="709" width="0.0160%" height="15" fill="rgb(228,218,5)" fg:x="3500" fg:w="1"/><text x="56.3218%" y="719.50"></text></g><g><title>CSHA256::Write (10 samples, 0.16%)</title><rect x="56.0878%" y="661" width="0.1602%" height="15" fill="rgb(212,202,43)" fg:x="3501" fg:w="10"/><text x="56.3378%" y="671.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="56.2320%" y="645" width="0.0160%" height="15" fill="rgb(235,183,2)" fg:x="3510" fg:w="1"/><text x="56.4820%" y="655.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.05%)</title><rect x="56.2480%" y="629" width="0.0481%" height="15" fill="rgb(230,165,10)" fg:x="3511" fg:w="3"/><text x="56.4980%" y="639.50"></text></g><g><title>_mm_sha256rnds2_epu32 (2 samples, 0.03%)</title><rect x="56.2961%" y="629" width="0.0320%" height="15" fill="rgb(219,54,40)" fg:x="3514" fg:w="2"/><text x="56.5461%" y="639.50"></text></g><g><title>QuadRound (9 samples, 0.14%)</title><rect x="56.2480%" y="645" width="0.1442%" height="15" fill="rgb(244,73,9)" fg:x="3511" fg:w="9"/><text x="56.4980%" y="655.50"></text></g><g><title>_mm_shuffle_epi32 (4 samples, 0.06%)</title><rect x="56.3281%" y="629" width="0.0641%" height="15" fill="rgb(212,32,45)" fg:x="3516" fg:w="4"/><text x="56.5781%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="56.3281%" y="613" width="0.0641%" height="15" fill="rgb(205,58,31)" fg:x="3516" fg:w="4"/><text x="56.5781%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="56.3281%" y="597" width="0.0641%" height="15" fill="rgb(250,120,43)" fg:x="3516" fg:w="4"/><text x="56.5781%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="56.3281%" y="581" width="0.0641%" height="15" fill="rgb(235,13,10)" fg:x="3516" fg:w="4"/><text x="56.5781%" y="591.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="56.3281%" y="565" width="0.0641%" height="15" fill="rgb(232,219,31)" fg:x="3516" fg:w="4"/><text x="56.5781%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="56.3281%" y="549" width="0.0641%" height="15" fill="rgb(218,157,51)" fg:x="3516" fg:w="4"/><text x="56.5781%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="56.3281%" y="533" width="0.0641%" height="15" fill="rgb(211,91,52)" fg:x="3516" fg:w="4"/><text x="56.5781%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="56.3281%" y="517" width="0.0641%" height="15" fill="rgb(240,173,1)" fg:x="3516" fg:w="4"/><text x="56.5781%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.3441%" y="501" width="0.0481%" height="15" fill="rgb(248,20,47)" fg:x="3517" fg:w="3"/><text x="56.5941%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.3441%" y="485" width="0.0481%" height="15" fill="rgb(217,221,40)" fg:x="3517" fg:w="3"/><text x="56.5941%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.3441%" y="469" width="0.0481%" height="15" fill="rgb(226,149,51)" fg:x="3517" fg:w="3"/><text x="56.5941%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.3441%" y="453" width="0.0481%" height="15" fill="rgb(252,193,7)" fg:x="3517" fg:w="3"/><text x="56.5941%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.3441%" y="437" width="0.0481%" height="15" fill="rgb(205,123,0)" fg:x="3517" fg:w="3"/><text x="56.5941%" y="447.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="56.3922%" y="629" width="0.0160%" height="15" fill="rgb(233,173,25)" fg:x="3520" fg:w="1"/><text x="56.6422%" y="639.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="56.3922%" y="613" width="0.0160%" height="15" fill="rgb(216,63,32)" fg:x="3520" fg:w="1"/><text x="56.6422%" y="623.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="56.4082%" y="613" width="0.0320%" height="15" fill="rgb(209,56,45)" fg:x="3521" fg:w="2"/><text x="56.6582%" y="623.50"></text></g><g><title>sha256_x86_shani::Transform (13 samples, 0.21%)</title><rect x="56.2480%" y="661" width="0.2083%" height="15" fill="rgb(226,111,49)" fg:x="3511" fg:w="13"/><text x="56.4980%" y="671.50"></text></g><g><title>ShiftMessageB (4 samples, 0.06%)</title><rect x="56.3922%" y="645" width="0.0641%" height="15" fill="rgb(244,181,21)" fg:x="3520" fg:w="4"/><text x="56.6422%" y="655.50"></text></g><g><title>ShiftMessageC (3 samples, 0.05%)</title><rect x="56.4082%" y="629" width="0.0481%" height="15" fill="rgb(222,126,15)" fg:x="3521" fg:w="3"/><text x="56.6582%" y="639.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="56.4402%" y="613" width="0.0160%" height="15" fill="rgb(222,95,17)" fg:x="3523" fg:w="1"/><text x="56.6902%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="56.4563%" y="645" width="0.0160%" height="15" fill="rgb(254,46,5)" fg:x="3524" fg:w="1"/><text x="56.7063%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="56.4563%" y="629" width="0.0160%" height="15" fill="rgb(236,216,35)" fg:x="3524" fg:w="1"/><text x="56.7063%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="56.4563%" y="613" width="0.0160%" height="15" fill="rgb(217,187,26)" fg:x="3524" fg:w="1"/><text x="56.7063%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.4563%" y="597" width="0.0160%" height="15" fill="rgb(207,192,25)" fg:x="3524" fg:w="1"/><text x="56.7063%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="56.4563%" y="581" width="0.0160%" height="15" fill="rgb(253,135,27)" fg:x="3524" fg:w="1"/><text x="56.7063%" y="591.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="56.4723%" y="533" width="0.0320%" height="15" fill="rgb(211,122,29)" fg:x="3525" fg:w="2"/><text x="56.7223%" y="543.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="56.4723%" y="517" width="0.0320%" height="15" fill="rgb(233,162,40)" fg:x="3525" fg:w="2"/><text x="56.7223%" y="527.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::begin (1 samples, 0.02%)</title><rect x="56.5043%" y="517" width="0.0160%" height="15" fill="rgb(222,184,47)" fg:x="3527" fg:w="1"/><text x="56.7543%" y="527.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="56.5043%" y="501" width="0.0160%" height="15" fill="rgb(249,99,23)" fg:x="3527" fg:w="1"/><text x="56.7543%" y="511.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (5 samples, 0.08%)</title><rect x="56.4563%" y="661" width="0.0801%" height="15" fill="rgb(214,60,12)" fg:x="3524" fg:w="5"/><text x="56.7063%" y="671.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (4 samples, 0.06%)</title><rect x="56.4723%" y="645" width="0.0641%" height="15" fill="rgb(250,229,36)" fg:x="3525" fg:w="4"/><text x="56.7223%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="56.4723%" y="629" width="0.0641%" height="15" fill="rgb(232,195,10)" fg:x="3525" fg:w="4"/><text x="56.7223%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="56.4723%" y="613" width="0.0641%" height="15" fill="rgb(205,213,31)" fg:x="3525" fg:w="4"/><text x="56.7223%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="56.4723%" y="597" width="0.0641%" height="15" fill="rgb(237,43,8)" fg:x="3525" fg:w="4"/><text x="56.7223%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="56.4723%" y="581" width="0.0641%" height="15" fill="rgb(216,208,3)" fg:x="3525" fg:w="4"/><text x="56.7223%" y="591.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="56.4723%" y="565" width="0.0641%" height="15" fill="rgb(228,179,44)" fg:x="3525" fg:w="4"/><text x="56.7223%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (4 samples, 0.06%)</title><rect x="56.4723%" y="549" width="0.0641%" height="15" fill="rgb(230,192,27)" fg:x="3525" fg:w="4"/><text x="56.7223%" y="559.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::empty (2 samples, 0.03%)</title><rect x="56.5043%" y="533" width="0.0320%" height="15" fill="rgb(251,30,38)" fg:x="3527" fg:w="2"/><text x="56.7543%" y="543.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::end (1 samples, 0.02%)</title><rect x="56.5203%" y="517" width="0.0160%" height="15" fill="rgb(246,55,52)" fg:x="3528" fg:w="1"/><text x="56.7703%" y="527.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="56.5203%" y="501" width="0.0160%" height="15" fill="rgb(249,79,26)" fg:x="3528" fg:w="1"/><text x="56.7703%" y="511.50"></text></g><g><title>CSHA256::Write (31 samples, 0.50%)</title><rect x="56.0878%" y="677" width="0.4966%" height="15" fill="rgb(220,202,16)" fg:x="3501" fg:w="31"/><text x="56.3378%" y="687.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="56.5364%" y="661" width="0.0481%" height="15" fill="rgb(250,170,23)" fg:x="3529" fg:w="3"/><text x="56.7864%" y="671.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="56.5524%" y="645" width="0.0320%" height="15" fill="rgb(230,7,37)" fg:x="3530" fg:w="2"/><text x="56.8024%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="56.5684%" y="629" width="0.0160%" height="15" fill="rgb(213,71,1)" fg:x="3531" fg:w="1"/><text x="56.8184%" y="639.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="56.5684%" y="613" width="0.0160%" height="15" fill="rgb(227,87,39)" fg:x="3531" fg:w="1"/><text x="56.8184%" y="623.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="56.6165%" y="661" width="0.0160%" height="15" fill="rgb(210,41,29)" fg:x="3534" fg:w="1"/><text x="56.8665%" y="671.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="56.6165%" y="645" width="0.0160%" height="15" fill="rgb(206,191,31)" fg:x="3534" fg:w="1"/><text x="56.8665%" y="655.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="56.6325%" y="645" width="0.0160%" height="15" fill="rgb(247,75,54)" fg:x="3535" fg:w="1"/><text x="56.8825%" y="655.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="56.6325%" y="629" width="0.0160%" height="15" fill="rgb(208,54,50)" fg:x="3535" fg:w="1"/><text x="56.8825%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (36 samples, 0.58%)</title><rect x="56.0878%" y="709" width="0.5767%" height="15" fill="rgb(214,90,37)" fg:x="3501" fg:w="36"/><text x="56.3378%" y="719.50"></text></g><g><title>HashWriter::write (36 samples, 0.58%)</title><rect x="56.0878%" y="693" width="0.5767%" height="15" fill="rgb(220,132,6)" fg:x="3501" fg:w="36"/><text x="56.3378%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (5 samples, 0.08%)</title><rect x="56.5844%" y="677" width="0.0801%" height="15" fill="rgb(213,167,7)" fg:x="3532" fg:w="5"/><text x="56.8344%" y="687.50"></text></g><g><title>ShiftMessageB (2 samples, 0.03%)</title><rect x="56.6325%" y="661" width="0.0320%" height="15" fill="rgb(243,36,27)" fg:x="3535" fg:w="2"/><text x="56.8825%" y="671.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="56.6485%" y="645" width="0.0160%" height="15" fill="rgb(235,147,12)" fg:x="3536" fg:w="1"/><text x="56.8985%" y="655.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="56.6485%" y="629" width="0.0160%" height="15" fill="rgb(212,198,44)" fg:x="3536" fg:w="1"/><text x="56.8985%" y="639.50"></text></g><g><title>CSHA256::Write (4 samples, 0.06%)</title><rect x="56.6645%" y="645" width="0.0641%" height="15" fill="rgb(218,68,50)" fg:x="3537" fg:w="4"/><text x="56.9145%" y="655.50"></text></g><g><title>memcpy (2 samples, 0.03%)</title><rect x="56.6966%" y="629" width="0.0320%" height="15" fill="rgb(224,79,48)" fg:x="3539" fg:w="2"/><text x="56.9466%" y="639.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="56.7286%" y="613" width="0.0160%" height="15" fill="rgb(213,191,50)" fg:x="3541" fg:w="1"/><text x="56.9786%" y="623.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="56.7286%" y="629" width="0.0320%" height="15" fill="rgb(254,146,10)" fg:x="3541" fg:w="2"/><text x="56.9786%" y="639.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="56.7446%" y="613" width="0.0160%" height="15" fill="rgb(215,175,11)" fg:x="3542" fg:w="1"/><text x="56.9946%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (44 samples, 0.70%)</title><rect x="56.0718%" y="741" width="0.7049%" height="15" fill="rgb(207,49,7)" fg:x="3500" fg:w="44"/><text x="56.3218%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (44 samples, 0.70%)</title><rect x="56.0718%" y="725" width="0.7049%" height="15" fill="rgb(234,144,29)" fg:x="3500" fg:w="44"/><text x="56.3218%" y="735.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.11%)</title><rect x="56.6645%" y="709" width="0.1121%" height="15" fill="rgb(213,222,48)" fg:x="3537" fg:w="7"/><text x="56.9145%" y="719.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.11%)</title><rect x="56.6645%" y="693" width="0.1121%" height="15" fill="rgb(222,8,6)" fg:x="3537" fg:w="7"/><text x="56.9145%" y="703.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (7 samples, 0.11%)</title><rect x="56.6645%" y="677" width="0.1121%" height="15" fill="rgb(221,114,49)" fg:x="3537" fg:w="7"/><text x="56.9145%" y="687.50"></text></g><g><title>HashWriter::write (7 samples, 0.11%)</title><rect x="56.6645%" y="661" width="0.1121%" height="15" fill="rgb(250,140,42)" fg:x="3537" fg:w="7"/><text x="56.9145%" y="671.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.05%)</title><rect x="56.7286%" y="645" width="0.0481%" height="15" fill="rgb(250,150,27)" fg:x="3541" fg:w="3"/><text x="56.9786%" y="655.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="56.7607%" y="629" width="0.0160%" height="15" fill="rgb(252,159,3)" fg:x="3543" fg:w="1"/><text x="57.0107%" y="639.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="56.7607%" y="613" width="0.0160%" height="15" fill="rgb(241,182,3)" fg:x="3543" fg:w="1"/><text x="57.0107%" y="623.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="56.7607%" y="597" width="0.0160%" height="15" fill="rgb(236,3,9)" fg:x="3543" fg:w="1"/><text x="57.0107%" y="607.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (47 samples, 0.75%)</title><rect x="56.0397%" y="821" width="0.7530%" height="15" fill="rgb(223,227,51)" fg:x="3498" fg:w="47"/><text x="56.2897%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (47 samples, 0.75%)</title><rect x="56.0397%" y="805" width="0.7530%" height="15" fill="rgb(232,133,30)" fg:x="3498" fg:w="47"/><text x="56.2897%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (47 samples, 0.75%)</title><rect x="56.0397%" y="789" width="0.7530%" height="15" fill="rgb(209,93,27)" fg:x="3498" fg:w="47"/><text x="56.2897%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.75%)</title><rect x="56.0397%" y="773" width="0.7530%" height="15" fill="rgb(208,108,34)" fg:x="3498" fg:w="47"/><text x="56.2897%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (47 samples, 0.75%)</title><rect x="56.0397%" y="757" width="0.7530%" height="15" fill="rgb(215,189,13)" fg:x="3498" fg:w="47"/><text x="56.2897%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.7767%" y="741" width="0.0160%" height="15" fill="rgb(206,88,23)" fg:x="3544" fg:w="1"/><text x="57.0267%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="56.7767%" y="725" width="0.0160%" height="15" fill="rgb(240,173,0)" fg:x="3544" fg:w="1"/><text x="57.0267%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="56.7767%" y="709" width="0.0160%" height="15" fill="rgb(223,106,52)" fg:x="3544" fg:w="1"/><text x="57.0267%" y="719.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="56.7767%" y="693" width="0.0160%" height="15" fill="rgb(206,130,16)" fg:x="3544" fg:w="1"/><text x="57.0267%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="56.7767%" y="677" width="0.0160%" height="15" fill="rgb(220,54,25)" fg:x="3544" fg:w="1"/><text x="57.0267%" y="687.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="56.7767%" y="661" width="0.0160%" height="15" fill="rgb(210,4,38)" fg:x="3544" fg:w="1"/><text x="57.0267%" y="671.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="56.7767%" y="645" width="0.0160%" height="15" fill="rgb(238,94,39)" fg:x="3544" fg:w="1"/><text x="57.0267%" y="655.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.02%)</title><rect x="56.7927%" y="741" width="0.0160%" height="15" fill="rgb(234,124,34)" fg:x="3545" fg:w="1"/><text x="57.0427%" y="751.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (3 samples, 0.05%)</title><rect x="56.7927%" y="821" width="0.0481%" height="15" fill="rgb(221,91,40)" fg:x="3545" fg:w="3"/><text x="57.0427%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="56.7927%" y="805" width="0.0481%" height="15" fill="rgb(246,53,28)" fg:x="3545" fg:w="3"/><text x="57.0427%" y="815.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="56.7927%" y="789" width="0.0481%" height="15" fill="rgb(229,109,7)" fg:x="3545" fg:w="3"/><text x="57.0427%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="56.7927%" y="773" width="0.0481%" height="15" fill="rgb(249,117,8)" fg:x="3545" fg:w="3"/><text x="57.0427%" y="783.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="56.7927%" y="757" width="0.0481%" height="15" fill="rgb(210,181,1)" fg:x="3545" fg:w="3"/><text x="57.0427%" y="767.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.03%)</title><rect x="56.8087%" y="741" width="0.0320%" height="15" fill="rgb(211,66,1)" fg:x="3546" fg:w="2"/><text x="57.0587%" y="751.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.03%)</title><rect x="56.8087%" y="725" width="0.0320%" height="15" fill="rgb(221,90,14)" fg:x="3546" fg:w="2"/><text x="57.0587%" y="735.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="56.8408%" y="741" width="0.0320%" height="15" fill="rgb(219,222,44)" fg:x="3548" fg:w="2"/><text x="57.0908%" y="751.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="56.8568%" y="725" width="0.0160%" height="15" fill="rgb(246,34,33)" fg:x="3549" fg:w="1"/><text x="57.1068%" y="735.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="56.8728%" y="725" width="0.0320%" height="15" fill="rgb(227,135,41)" fg:x="3550" fg:w="2"/><text x="57.1228%" y="735.50"></text></g><g><title>_mm_sha256rnds2_epu32 (2 samples, 0.03%)</title><rect x="56.8728%" y="709" width="0.0320%" height="15" fill="rgb(226,15,14)" fg:x="3550" fg:w="2"/><text x="57.1228%" y="719.50"></text></g><g><title>_mm_add_epi32 (4 samples, 0.06%)</title><rect x="56.9048%" y="693" width="0.0641%" height="15" fill="rgb(236,148,47)" fg:x="3552" fg:w="4"/><text x="57.1548%" y="703.50"></text></g><g><title>ShiftMessageB (5 samples, 0.08%)</title><rect x="56.9048%" y="725" width="0.0801%" height="15" fill="rgb(233,162,52)" fg:x="3552" fg:w="5"/><text x="57.1548%" y="735.50"></text></g><g><title>ShiftMessageC (5 samples, 0.08%)</title><rect x="56.9048%" y="709" width="0.0801%" height="15" fill="rgb(244,35,28)" fg:x="3552" fg:w="5"/><text x="57.1548%" y="719.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="56.9689%" y="693" width="0.0160%" height="15" fill="rgb(205,121,10)" fg:x="3556" fg:w="1"/><text x="57.2189%" y="703.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (116 samples, 1.86%)</title><rect x="55.1426%" y="917" width="1.8584%" height="15" fill="rgb(250,58,18)" fg:x="3442" fg:w="116"/><text x="55.3926%" y="927.50">H..</text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (116 samples, 1.86%)</title><rect x="55.1426%" y="901" width="1.8584%" height="15" fill="rgb(216,37,13)" fg:x="3442" fg:w="116"/><text x="55.3926%" y="911.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (116 samples, 1.86%)</title><rect x="55.1426%" y="885" width="1.8584%" height="15" fill="rgb(221,215,42)" fg:x="3442" fg:w="116"/><text x="55.3926%" y="895.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (116 samples, 1.86%)</title><rect x="55.1426%" y="869" width="1.8584%" height="15" fill="rgb(217,214,19)" fg:x="3442" fg:w="116"/><text x="55.3926%" y="879.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (116 samples, 1.86%)</title><rect x="55.1426%" y="853" width="1.8584%" height="15" fill="rgb(233,139,13)" fg:x="3442" fg:w="116"/><text x="55.3926%" y="863.50">v..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (109 samples, 1.75%)</title><rect x="55.2547%" y="837" width="1.7462%" height="15" fill="rgb(247,168,23)" fg:x="3449" fg:w="109"/><text x="55.5047%" y="847.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (10 samples, 0.16%)</title><rect x="56.8408%" y="821" width="0.1602%" height="15" fill="rgb(207,202,1)" fg:x="3548" fg:w="10"/><text x="57.0908%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.16%)</title><rect x="56.8408%" y="805" width="0.1602%" height="15" fill="rgb(220,155,48)" fg:x="3548" fg:w="10"/><text x="57.0908%" y="815.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.16%)</title><rect x="56.8408%" y="789" width="0.1602%" height="15" fill="rgb(250,43,26)" fg:x="3548" fg:w="10"/><text x="57.0908%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (10 samples, 0.16%)</title><rect x="56.8408%" y="773" width="0.1602%" height="15" fill="rgb(212,190,23)" fg:x="3548" fg:w="10"/><text x="57.0908%" y="783.50"></text></g><g><title>HashWriter::write (10 samples, 0.16%)</title><rect x="56.8408%" y="757" width="0.1602%" height="15" fill="rgb(216,39,24)" fg:x="3548" fg:w="10"/><text x="57.0908%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.13%)</title><rect x="56.8728%" y="741" width="0.1282%" height="15" fill="rgb(252,113,16)" fg:x="3550" fg:w="8"/><text x="57.1228%" y="751.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="56.9849%" y="725" width="0.0160%" height="15" fill="rgb(208,113,19)" fg:x="3557" fg:w="1"/><text x="57.2349%" y="735.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="56.9849%" y="709" width="0.0160%" height="15" fill="rgb(234,107,25)" fg:x="3557" fg:w="1"/><text x="57.2349%" y="719.50"></text></g><g><title>CSHA256::Finalize (2 samples, 0.03%)</title><rect x="57.0010%" y="869" width="0.0320%" height="15" fill="rgb(234,217,51)" fg:x="3558" fg:w="2"/><text x="57.2510%" y="879.50"></text></g><g><title>WriteBE32 (1 samples, 0.02%)</title><rect x="57.0170%" y="853" width="0.0160%" height="15" fill="rgb(251,29,42)" fg:x="3559" fg:w="1"/><text x="57.2670%" y="863.50"></text></g><g><title>htobe32_internal (1 samples, 0.02%)</title><rect x="57.0170%" y="837" width="0.0160%" height="15" fill="rgb(221,62,51)" fg:x="3559" fg:w="1"/><text x="57.2670%" y="847.50"></text></g><g><title>internal_bswap_32 (1 samples, 0.02%)</title><rect x="57.0170%" y="821" width="0.0160%" height="15" fill="rgb(240,192,43)" fg:x="3559" fg:w="1"/><text x="57.2670%" y="831.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="57.0330%" y="869" width="0.0320%" height="15" fill="rgb(224,157,47)" fg:x="3560" fg:w="2"/><text x="57.2830%" y="879.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.03%)</title><rect x="57.0650%" y="869" width="0.0320%" height="15" fill="rgb(226,84,45)" fg:x="3562" fg:w="2"/><text x="57.3150%" y="879.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.03%)</title><rect x="57.0650%" y="853" width="0.0320%" height="15" fill="rgb(208,207,23)" fg:x="3562" fg:w="2"/><text x="57.3150%" y="863.50"></text></g><g><title>HashWriter::GetHash (2 samples, 0.03%)</title><rect x="57.0650%" y="837" width="0.0320%" height="15" fill="rgb(253,34,51)" fg:x="3562" fg:w="2"/><text x="57.3150%" y="847.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="57.0971%" y="853" width="0.0160%" height="15" fill="rgb(227,26,34)" fg:x="3564" fg:w="1"/><text x="57.3471%" y="863.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="57.0971%" y="837" width="0.0160%" height="15" fill="rgb(245,75,19)" fg:x="3564" fg:w="1"/><text x="57.3471%" y="847.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="57.0971%" y="869" width="0.0320%" height="15" fill="rgb(250,191,31)" fg:x="3564" fg:w="2"/><text x="57.3471%" y="879.50"></text></g><g><title>Unshuffle (1 samples, 0.02%)</title><rect x="57.1131%" y="853" width="0.0160%" height="15" fill="rgb(224,11,50)" fg:x="3565" fg:w="1"/><text x="57.3631%" y="863.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="57.1131%" y="837" width="0.0160%" height="15" fill="rgb(231,171,7)" fg:x="3565" fg:w="1"/><text x="57.3631%" y="847.50"></text></g><g><title>CSHA256::Write (11 samples, 0.18%)</title><rect x="57.0010%" y="885" width="0.1762%" height="15" fill="rgb(252,214,10)" fg:x="3558" fg:w="11"/><text x="57.2510%" y="895.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.05%)</title><rect x="57.1291%" y="869" width="0.0481%" height="15" fill="rgb(249,45,46)" fg:x="3566" fg:w="3"/><text x="57.3791%" y="879.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="57.1612%" y="853" width="0.0160%" height="15" fill="rgb(240,173,7)" fg:x="3568" fg:w="1"/><text x="57.4112%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.1612%" y="837" width="0.0160%" height="15" fill="rgb(235,214,13)" fg:x="3568" fg:w="1"/><text x="57.4112%" y="847.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="57.1772%" y="853" width="0.0320%" height="15" fill="rgb(245,156,8)" fg:x="3569" fg:w="2"/><text x="57.4272%" y="863.50"></text></g><g><title>QuadRound (4 samples, 0.06%)</title><rect x="57.1772%" y="869" width="0.0641%" height="15" fill="rgb(235,46,12)" fg:x="3569" fg:w="4"/><text x="57.4272%" y="879.50"></text></g><g><title>_mm_sha256rnds2_epu32 (2 samples, 0.03%)</title><rect x="57.2092%" y="853" width="0.0320%" height="15" fill="rgb(221,81,14)" fg:x="3571" fg:w="2"/><text x="57.4592%" y="863.50"></text></g><g><title>ShiftMessageA (2 samples, 0.03%)</title><rect x="57.2413%" y="853" width="0.0320%" height="15" fill="rgb(238,207,9)" fg:x="3573" fg:w="2"/><text x="57.4913%" y="863.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.03%)</title><rect x="57.2413%" y="837" width="0.0320%" height="15" fill="rgb(224,129,35)" fg:x="3573" fg:w="2"/><text x="57.4913%" y="847.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="57.2733%" y="837" width="0.0320%" height="15" fill="rgb(243,218,34)" fg:x="3575" fg:w="2"/><text x="57.5233%" y="847.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="57.3054%" y="837" width="0.0160%" height="15" fill="rgb(220,166,13)" fg:x="3577" fg:w="1"/><text x="57.5554%" y="847.50"></text></g><g><title>CSHA256::Finalize (22 samples, 0.35%)</title><rect x="57.0010%" y="901" width="0.3525%" height="15" fill="rgb(227,167,49)" fg:x="3558" fg:w="22"/><text x="57.2510%" y="911.50"></text></g><g><title>sha256_x86_shani::Transform (11 samples, 0.18%)</title><rect x="57.1772%" y="885" width="0.1762%" height="15" fill="rgb(234,142,12)" fg:x="3569" fg:w="11"/><text x="57.4272%" y="895.50"></text></g><g><title>ShiftMessageB (7 samples, 0.11%)</title><rect x="57.2413%" y="869" width="0.1121%" height="15" fill="rgb(207,100,48)" fg:x="3573" fg:w="7"/><text x="57.4913%" y="879.50"></text></g><g><title>ShiftMessageC (5 samples, 0.08%)</title><rect x="57.2733%" y="853" width="0.0801%" height="15" fill="rgb(210,25,14)" fg:x="3575" fg:w="5"/><text x="57.5233%" y="863.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.03%)</title><rect x="57.3214%" y="837" width="0.0320%" height="15" fill="rgb(246,116,27)" fg:x="3578" fg:w="2"/><text x="57.5714%" y="847.50"></text></g><g><title>CTransaction::ComputeWitnessHash (139 samples, 2.23%)</title><rect x="55.1426%" y="949" width="2.2269%" height="15" fill="rgb(214,193,42)" fg:x="3442" fg:w="139"/><text x="55.3926%" y="959.50">C..</text></g><g><title>CTransaction::ComputeWitnessHash (139 samples, 2.23%)</title><rect x="55.1426%" y="933" width="2.2269%" height="15" fill="rgb(214,122,8)" fg:x="3442" fg:w="139"/><text x="55.3926%" y="943.50">C..</text></g><g><title>HashWriter::GetHash (23 samples, 0.37%)</title><rect x="57.0010%" y="917" width="0.3685%" height="15" fill="rgb(244,173,18)" fg:x="3558" fg:w="23"/><text x="57.2510%" y="927.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="57.3534%" y="901" width="0.0160%" height="15" fill="rgb(232,68,19)" fg:x="3580" fg:w="1"/><text x="57.6034%" y="911.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="57.3534%" y="885" width="0.0160%" height="15" fill="rgb(236,224,1)" fg:x="3580" fg:w="1"/><text x="57.6034%" y="895.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="57.3534%" y="869" width="0.0160%" height="15" fill="rgb(240,11,8)" fg:x="3580" fg:w="1"/><text x="57.6034%" y="879.50"></text></g><g><title>DataStream::read (2 samples, 0.03%)</title><rect x="57.3694%" y="949" width="0.0320%" height="15" fill="rgb(244,159,20)" fg:x="3581" fg:w="2"/><text x="57.6194%" y="959.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="57.3855%" y="933" width="0.0160%" height="15" fill="rgb(240,223,54)" fg:x="3582" fg:w="1"/><text x="57.6355%" y="943.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="57.4015%" y="917" width="0.0160%" height="15" fill="rgb(237,146,5)" fg:x="3583" fg:w="1"/><text x="57.6515%" y="927.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="57.4015%" y="901" width="0.0160%" height="15" fill="rgb(218,221,32)" fg:x="3583" fg:w="1"/><text x="57.6515%" y="911.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="57.4015%" y="949" width="0.0320%" height="15" fill="rgb(244,96,26)" fg:x="3583" fg:w="2"/><text x="57.6515%" y="959.50"></text></g><g><title>ShiftMessageB (2 samples, 0.03%)</title><rect x="57.4015%" y="933" width="0.0320%" height="15" fill="rgb(245,184,37)" fg:x="3583" fg:w="2"/><text x="57.6515%" y="943.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="57.4175%" y="917" width="0.0160%" height="15" fill="rgb(248,91,47)" fg:x="3584" fg:w="1"/><text x="57.6675%" y="927.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="57.4175%" y="901" width="0.0160%" height="15" fill="rgb(243,199,8)" fg:x="3584" fg:w="1"/><text x="57.6675%" y="911.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (1 samples, 0.02%)</title><rect x="57.4335%" y="757" width="0.0160%" height="15" fill="rgb(249,12,15)" fg:x="3585" fg:w="1"/><text x="57.6835%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.4335%" y="741" width="0.0160%" height="15" fill="rgb(245,97,12)" fg:x="3585" fg:w="1"/><text x="57.6835%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4335%" y="725" width="0.0160%" height="15" fill="rgb(244,61,1)" fg:x="3585" fg:w="1"/><text x="57.6835%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4335%" y="709" width="0.0160%" height="15" fill="rgb(222,194,10)" fg:x="3585" fg:w="1"/><text x="57.6835%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.4335%" y="693" width="0.0160%" height="15" fill="rgb(226,178,8)" fg:x="3585" fg:w="1"/><text x="57.6835%" y="703.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="57.4335%" y="677" width="0.0160%" height="15" fill="rgb(241,32,34)" fg:x="3585" fg:w="1"/><text x="57.6835%" y="687.50"></text></g><g><title>CTransaction::CTransaction (225 samples, 3.60%)</title><rect x="53.8770%" y="965" width="3.6046%" height="15" fill="rgb(254,26,6)" fg:x="3363" fg:w="225"/><text x="54.1270%" y="975.50">CTra..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="949" width="0.0481%" height="15" fill="rgb(249,71,11)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="959.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="933" width="0.0481%" height="15" fill="rgb(232,170,27)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="943.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="917" width="0.0481%" height="15" fill="rgb(214,223,17)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="927.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="901" width="0.0481%" height="15" fill="rgb(250,18,15)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="911.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="885" width="0.0481%" height="15" fill="rgb(212,153,51)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="895.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="869" width="0.0481%" height="15" fill="rgb(219,194,12)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="879.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="853" width="0.0481%" height="15" fill="rgb(212,58,17)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="863.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="837" width="0.0481%" height="15" fill="rgb(254,5,10)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="847.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="821" width="0.0481%" height="15" fill="rgb(246,91,7)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="831.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="805" width="0.0481%" height="15" fill="rgb(218,108,49)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="815.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="789" width="0.0481%" height="15" fill="rgb(238,123,20)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="799.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (3 samples, 0.05%)</title><rect x="57.4335%" y="773" width="0.0481%" height="15" fill="rgb(231,69,23)" fg:x="3585" fg:w="3"/><text x="57.6835%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (2 samples, 0.03%)</title><rect x="57.4495%" y="757" width="0.0320%" height="15" fill="rgb(230,209,3)" fg:x="3586" fg:w="2"/><text x="57.6995%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="57.4495%" y="741" width="0.0320%" height="15" fill="rgb(231,19,0)" fg:x="3586" fg:w="2"/><text x="57.6995%" y="751.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="57.4495%" y="725" width="0.0320%" height="15" fill="rgb(226,192,25)" fg:x="3586" fg:w="2"/><text x="57.6995%" y="735.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.03%)</title><rect x="57.4495%" y="709" width="0.0320%" height="15" fill="rgb(223,175,53)" fg:x="3586" fg:w="2"/><text x="57.6995%" y="719.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="57.4816%" y="965" width="0.0320%" height="15" fill="rgb(248,35,51)" fg:x="3588" fg:w="2"/><text x="57.7316%" y="975.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (412 samples, 6.60%)</title><rect x="50.9612%" y="1029" width="6.6004%" height="15" fill="rgb(230,37,26)" fg:x="3181" fg:w="412"/><text x="51.2112%" y="1039.50">std::_Sp_..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (412 samples, 6.60%)</title><rect x="50.9612%" y="1013" width="6.6004%" height="15" fill="rgb(206,120,22)" fg:x="3181" fg:w="412"/><text x="51.2112%" y="1023.50">void std:..</text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (412 samples, 6.60%)</title><rect x="50.9612%" y="997" width="6.6004%" height="15" fill="rgb(207,165,28)" fg:x="3181" fg:w="412"/><text x="51.2112%" y="1007.50">void std:..</text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (412 samples, 6.60%)</title><rect x="50.9612%" y="981" width="6.6004%" height="15" fill="rgb(226,23,46)" fg:x="3181" fg:w="412"/><text x="51.2112%" y="991.50">CTransact..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="965" width="0.0481%" height="15" fill="rgb(208,130,44)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="975.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="949" width="0.0481%" height="15" fill="rgb(231,67,8)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="959.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="933" width="0.0481%" height="15" fill="rgb(205,183,22)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="943.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="917" width="0.0481%" height="15" fill="rgb(224,47,9)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="927.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="901" width="0.0481%" height="15" fill="rgb(250,183,49)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="911.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="885" width="0.0481%" height="15" fill="rgb(220,151,39)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="895.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="869" width="0.0481%" height="15" fill="rgb(220,118,20)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="879.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="853" width="0.0481%" height="15" fill="rgb(231,65,51)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="863.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="837" width="0.0481%" height="15" fill="rgb(253,125,37)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="847.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="821" width="0.0481%" height="15" fill="rgb(232,102,6)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="831.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="805" width="0.0481%" height="15" fill="rgb(251,105,13)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="815.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="789" width="0.0481%" height="15" fill="rgb(222,179,29)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="799.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (3 samples, 0.05%)</title><rect x="57.5136%" y="773" width="0.0481%" height="15" fill="rgb(229,180,53)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="757" width="0.0481%" height="15" fill="rgb(238,104,13)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="741" width="0.0481%" height="15" fill="rgb(210,130,5)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="751.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="725" width="0.0481%" height="15" fill="rgb(233,87,49)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="709" width="0.0481%" height="15" fill="rgb(243,34,9)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="719.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="693" width="0.0481%" height="15" fill="rgb(235,225,10)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (3 samples, 0.05%)</title><rect x="57.5136%" y="677" width="0.0481%" height="15" fill="rgb(212,0,30)" fg:x="3590" fg:w="3"/><text x="57.7636%" y="687.50"></text></g><g><title>unsigned int const&amp; std::min&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="57.5457%" y="661" width="0.0160%" height="15" fill="rgb(211,177,0)" fg:x="3592" fg:w="1"/><text x="57.7957%" y="671.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="57.5617%" y="933" width="0.0160%" height="15" fill="rgb(225,220,11)" fg:x="3593" fg:w="1"/><text x="57.8117%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5617%" y="917" width="0.0160%" height="15" fill="rgb(215,10,13)" fg:x="3593" fg:w="1"/><text x="57.8117%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5617%" y="901" width="0.0160%" height="15" fill="rgb(240,177,14)" fg:x="3593" fg:w="1"/><text x="57.8117%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5617%" y="885" width="0.0160%" height="15" fill="rgb(243,7,39)" fg:x="3593" fg:w="1"/><text x="57.8117%" y="895.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (414 samples, 6.63%)</title><rect x="50.9612%" y="1109" width="6.6325%" height="15" fill="rgb(212,99,0)" fg:x="3181" fg:w="414"/><text x="51.2112%" y="1119.50">void Unse..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (414 samples, 6.63%)</title><rect x="50.9612%" y="1093" width="6.6325%" height="15" fill="rgb(225,162,48)" fg:x="3181" fg:w="414"/><text x="51.2112%" y="1103.50">std::shar..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (414 samples, 6.63%)</title><rect x="50.9612%" y="1077" width="6.6325%" height="15" fill="rgb(246,16,25)" fg:x="3181" fg:w="414"/><text x="51.2112%" y="1087.50">std::shar..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (414 samples, 6.63%)</title><rect x="50.9612%" y="1061" width="6.6325%" height="15" fill="rgb(220,150,2)" fg:x="3181" fg:w="414"/><text x="51.2112%" y="1071.50">std::__sh..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (414 samples, 6.63%)</title><rect x="50.9612%" y="1045" width="6.6325%" height="15" fill="rgb(237,113,11)" fg:x="3181" fg:w="414"/><text x="51.2112%" y="1055.50">std::__sh..</text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="57.5617%" y="1029" width="0.0320%" height="15" fill="rgb(236,70,20)" fg:x="3593" fg:w="2"/><text x="57.8117%" y="1039.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (2 samples, 0.03%)</title><rect x="57.5617%" y="1013" width="0.0320%" height="15" fill="rgb(234,94,7)" fg:x="3593" fg:w="2"/><text x="57.8117%" y="1023.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (2 samples, 0.03%)</title><rect x="57.5617%" y="997" width="0.0320%" height="15" fill="rgb(250,221,0)" fg:x="3593" fg:w="2"/><text x="57.8117%" y="1007.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (2 samples, 0.03%)</title><rect x="57.5617%" y="981" width="0.0320%" height="15" fill="rgb(245,149,46)" fg:x="3593" fg:w="2"/><text x="57.8117%" y="991.50"></text></g><g><title>operator new (2 samples, 0.03%)</title><rect x="57.5617%" y="965" width="0.0320%" height="15" fill="rgb(215,37,27)" fg:x="3593" fg:w="2"/><text x="57.8117%" y="975.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="57.5617%" y="949" width="0.0320%" height="15" fill="rgb(232,65,3)" fg:x="3593" fg:w="2"/><text x="57.8117%" y="959.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="57.5777%" y="933" width="0.0160%" height="15" fill="rgb(214,2,16)" fg:x="3594" fg:w="1"/><text x="57.8277%" y="943.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (424 samples, 6.79%)</title><rect x="50.8170%" y="1333" width="6.7927%" height="15" fill="rgb(227,131,50)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1343.50">DataStrea..</text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1317" width="6.7927%" height="15" fill="rgb(247,131,45)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1327.50">void Unse..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1301" width="6.7927%" height="15" fill="rgb(215,97,47)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1311.50">void Para..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1285" width="6.7927%" height="15" fill="rgb(233,143,12)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1295.50">void Unse..</text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1269" width="6.7927%" height="15" fill="rgb(222,57,17)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1279.50">void CBlo..</text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1253" width="6.7927%" height="15" fill="rgb(214,119,38)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1263.50">void CBlo..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1237" width="6.7927%" height="15" fill="rgb(217,28,47)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1247.50">void CBlo..</text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1221" width="6.7927%" height="15" fill="rgb(231,14,52)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1231.50">void Acti..</text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1205" width="6.7927%" height="15" fill="rgb(220,158,18)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1215.50">void Unse..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1189" width="6.7927%" height="15" fill="rgb(222,143,46)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1199.50">void Unse..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1173" width="6.7927%" height="15" fill="rgb(227,165,5)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1183.50">void Unse..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (424 samples, 6.79%)</title><rect x="50.8170%" y="1157" width="6.7927%" height="15" fill="rgb(216,222,49)" fg:x="3172" fg:w="424"/><text x="51.0670%" y="1167.50">void Wrap..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (423 samples, 6.78%)</title><rect x="50.8331%" y="1141" width="6.7767%" height="15" fill="rgb(238,73,39)" fg:x="3173" fg:w="423"/><text x="51.0831%" y="1151.50">void Vect..</text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (422 samples, 6.76%)</title><rect x="50.8491%" y="1125" width="6.7607%" height="15" fill="rgb(252,115,9)" fg:x="3174" fg:w="422"/><text x="51.0991%" y="1135.50">void Defa..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="57.5937%" y="1109" width="0.0160%" height="15" fill="rgb(238,202,4)" fg:x="3595" fg:w="1"/><text x="57.8437%" y="1119.50"></text></g><g><title>CTxOut&amp; std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="57.5937%" y="1093" width="0.0160%" height="15" fill="rgb(252,153,44)" fg:x="3595" fg:w="1"/><text x="57.8437%" y="1103.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="57.6258%" y="1221" width="0.0160%" height="15" fill="rgb(235,128,27)" fg:x="3597" fg:w="1"/><text x="57.8758%" y="1231.50"></text></g><g><title>_mm_sha256rnds2_epu32 (7 samples, 0.11%)</title><rect x="57.6418%" y="1221" width="0.1121%" height="15" fill="rgb(221,121,47)" fg:x="3598" fg:w="7"/><text x="57.8918%" y="1231.50"></text></g><g><title>QuadRound (10 samples, 0.16%)</title><rect x="57.6258%" y="1237" width="0.1602%" height="15" fill="rgb(247,211,47)" fg:x="3597" fg:w="10"/><text x="57.8758%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (2 samples, 0.03%)</title><rect x="57.7539%" y="1221" width="0.0320%" height="15" fill="rgb(252,47,49)" fg:x="3605" fg:w="2"/><text x="58.0039%" y="1231.50"></text></g><g><title>ShiftMessageA (2 samples, 0.03%)</title><rect x="57.7860%" y="1221" width="0.0320%" height="15" fill="rgb(219,119,53)" fg:x="3607" fg:w="2"/><text x="58.0360%" y="1231.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.03%)</title><rect x="57.7860%" y="1205" width="0.0320%" height="15" fill="rgb(243,165,53)" fg:x="3607" fg:w="2"/><text x="58.0360%" y="1215.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="57.8180%" y="1205" width="0.0320%" height="15" fill="rgb(230,12,35)" fg:x="3609" fg:w="2"/><text x="58.0680%" y="1215.50"></text></g><g><title>_mm_alignr_epi8 (2 samples, 0.03%)</title><rect x="57.8500%" y="1205" width="0.0320%" height="15" fill="rgb(239,57,49)" fg:x="3611" fg:w="2"/><text x="58.1000%" y="1215.50"></text></g><g><title>ShiftMessageB (10 samples, 0.16%)</title><rect x="57.7860%" y="1237" width="0.1602%" height="15" fill="rgb(231,154,7)" fg:x="3607" fg:w="10"/><text x="58.0360%" y="1247.50"></text></g><g><title>ShiftMessageC (8 samples, 0.13%)</title><rect x="57.8180%" y="1221" width="0.1282%" height="15" fill="rgb(248,81,34)" fg:x="3609" fg:w="8"/><text x="58.0680%" y="1231.50"></text></g><g><title>_mm_sha256msg2_epu32 (4 samples, 0.06%)</title><rect x="57.8821%" y="1205" width="0.0641%" height="15" fill="rgb(247,9,5)" fg:x="3613" fg:w="4"/><text x="58.1321%" y="1215.50"></text></g><g><title>ShiftMessageC (3 samples, 0.05%)</title><rect x="57.9462%" y="1237" width="0.0481%" height="15" fill="rgb(228,172,27)" fg:x="3617" fg:w="3"/><text x="58.1962%" y="1247.50"></text></g><g><title>_mm_sha256msg2_epu32 (3 samples, 0.05%)</title><rect x="57.9462%" y="1221" width="0.0481%" height="15" fill="rgb(230,57,44)" fg:x="3617" fg:w="3"/><text x="58.1962%" y="1231.50"></text></g><g><title>CheckMerkleRoot (27 samples, 0.43%)</title><rect x="57.6097%" y="1317" width="0.4326%" height="15" fill="rgb(249,35,22)" fg:x="3596" fg:w="27"/><text x="57.8597%" y="1327.50"></text></g><g><title>BlockMerkleRoot (27 samples, 0.43%)</title><rect x="57.6097%" y="1301" width="0.4326%" height="15" fill="rgb(250,137,27)" fg:x="3596" fg:w="27"/><text x="57.8597%" y="1311.50"></text></g><g><title>ComputeMerkleRoot (26 samples, 0.42%)</title><rect x="57.6258%" y="1285" width="0.4165%" height="15" fill="rgb(251,57,31)" fg:x="3597" fg:w="26"/><text x="57.8758%" y="1295.50"></text></g><g><title>SHA256D64 (26 samples, 0.42%)</title><rect x="57.6258%" y="1269" width="0.4165%" height="15" fill="rgb(238,60,0)" fg:x="3597" fg:w="26"/><text x="57.8758%" y="1279.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (26 samples, 0.42%)</title><rect x="57.6258%" y="1253" width="0.4165%" height="15" fill="rgb(242,185,39)" fg:x="3597" fg:w="26"/><text x="57.8758%" y="1263.50"></text></g><g><title>Unshuffle (3 samples, 0.05%)</title><rect x="57.9942%" y="1237" width="0.0481%" height="15" fill="rgb(240,63,43)" fg:x="3620" fg:w="3"/><text x="58.2442%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (3 samples, 0.05%)</title><rect x="57.9942%" y="1221" width="0.0481%" height="15" fill="rgb(236,155,6)" fg:x="3620" fg:w="3"/><text x="58.2442%" y="1231.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.05%)</title><rect x="58.0583%" y="1221" width="0.0481%" height="15" fill="rgb(215,11,29)" fg:x="3624" fg:w="3"/><text x="58.3083%" y="1231.50"></text></g><g><title>_mm_sha256rnds2_epu32 (4 samples, 0.06%)</title><rect x="58.1064%" y="1221" width="0.0641%" height="15" fill="rgb(228,180,48)" fg:x="3627" fg:w="4"/><text x="58.3564%" y="1231.50"></text></g><g><title>QuadRound (8 samples, 0.13%)</title><rect x="58.0583%" y="1237" width="0.1282%" height="15" fill="rgb(241,102,12)" fg:x="3624" fg:w="8"/><text x="58.3083%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="58.1705%" y="1221" width="0.0160%" height="15" fill="rgb(246,213,4)" fg:x="3631" fg:w="1"/><text x="58.4205%" y="1231.50"></text></g><g><title>ShiftMessageA (3 samples, 0.05%)</title><rect x="58.1865%" y="1221" width="0.0481%" height="15" fill="rgb(218,134,35)" fg:x="3632" fg:w="3"/><text x="58.4365%" y="1231.50"></text></g><g><title>_mm_sha256msg1_epu32 (3 samples, 0.05%)</title><rect x="58.1865%" y="1205" width="0.0481%" height="15" fill="rgb(251,117,35)" fg:x="3632" fg:w="3"/><text x="58.4365%" y="1215.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="58.2345%" y="1205" width="0.0160%" height="15" fill="rgb(206,156,45)" fg:x="3635" fg:w="1"/><text x="58.4845%" y="1215.50"></text></g><g><title>ShiftMessageB (7 samples, 0.11%)</title><rect x="58.1865%" y="1237" width="0.1121%" height="15" fill="rgb(218,52,27)" fg:x="3632" fg:w="7"/><text x="58.4365%" y="1247.50"></text></g><g><title>ShiftMessageC (4 samples, 0.06%)</title><rect x="58.2345%" y="1221" width="0.0641%" height="15" fill="rgb(238,83,36)" fg:x="3635" fg:w="4"/><text x="58.4845%" y="1231.50"></text></g><g><title>_mm_alignr_epi8 (3 samples, 0.05%)</title><rect x="58.2506%" y="1205" width="0.0481%" height="15" fill="rgb(218,53,43)" fg:x="3636" fg:w="3"/><text x="58.5006%" y="1215.50"></text></g><g><title>IsBlockMutated (44 samples, 0.70%)</title><rect x="57.6097%" y="1333" width="0.7049%" height="15" fill="rgb(239,54,39)" fg:x="3596" fg:w="44"/><text x="57.8597%" y="1343.50"></text></g><g><title>CheckWitnessMalleation (17 samples, 0.27%)</title><rect x="58.0423%" y="1317" width="0.2723%" height="15" fill="rgb(212,198,13)" fg:x="3623" fg:w="17"/><text x="58.2923%" y="1327.50"></text></g><g><title>BlockWitnessMerkleRoot (17 samples, 0.27%)</title><rect x="58.0423%" y="1301" width="0.2723%" height="15" fill="rgb(234,54,46)" fg:x="3623" fg:w="17"/><text x="58.2923%" y="1311.50"></text></g><g><title>ComputeMerkleRoot (16 samples, 0.26%)</title><rect x="58.0583%" y="1285" width="0.2563%" height="15" fill="rgb(217,120,7)" fg:x="3624" fg:w="16"/><text x="58.3083%" y="1295.50"></text></g><g><title>SHA256D64 (16 samples, 0.26%)</title><rect x="58.0583%" y="1269" width="0.2563%" height="15" fill="rgb(246,39,15)" fg:x="3624" fg:w="16"/><text x="58.3083%" y="1279.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (16 samples, 0.26%)</title><rect x="58.0583%" y="1253" width="0.2563%" height="15" fill="rgb(242,143,31)" fg:x="3624" fg:w="16"/><text x="58.3083%" y="1263.50"></text></g><g><title>Unshuffle (1 samples, 0.02%)</title><rect x="58.2986%" y="1237" width="0.0160%" height="15" fill="rgb(252,60,24)" fg:x="3639" fg:w="1"/><text x="58.5486%" y="1247.50"></text></g><g><title>_mm_blend_epi16 (1 samples, 0.02%)</title><rect x="58.2986%" y="1221" width="0.0160%" height="15" fill="rgb(249,220,7)" fg:x="3639" fg:w="1"/><text x="58.5486%" y="1231.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (8 samples, 0.13%)</title><rect x="58.3146%" y="1333" width="0.1282%" height="15" fill="rgb(236,67,13)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1343.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::Enter (8 samples, 0.13%)</title><rect x="58.3146%" y="1317" width="0.1282%" height="15" fill="rgb(210,62,39)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1327.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (8 samples, 0.13%)</title><rect x="58.3146%" y="1301" width="0.1282%" height="15" fill="rgb(219,122,53)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1311.50"></text></g><g><title>std::mutex::lock (8 samples, 0.13%)</title><rect x="58.3146%" y="1285" width="0.1282%" height="15" fill="rgb(218,87,25)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1295.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (8 samples, 0.13%)</title><rect x="58.3146%" y="1269" width="0.1282%" height="15" fill="rgb(234,179,48)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1279.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="58.3146%" y="1253" width="0.1282%" height="15" fill="rgb(248,90,0)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1263.50"></text></g><g><title>__GI___lll_lock_wait (8 samples, 0.13%)</title><rect x="58.3146%" y="1237" width="0.1282%" height="15" fill="rgb(207,228,37)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1247.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="58.3146%" y="1221" width="0.1282%" height="15" fill="rgb(235,214,15)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1231.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="58.3146%" y="1205" width="0.1282%" height="15" fill="rgb(210,144,39)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1215.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="58.3146%" y="1189" width="0.1282%" height="15" fill="rgb(222,67,41)" fg:x="3640" fg:w="8"/><text x="58.5646%" y="1199.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="58.3307%" y="1173" width="0.1121%" height="15" fill="rgb(205,35,37)" fg:x="3641" fg:w="7"/><text x="58.5807%" y="1183.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="58.3307%" y="1157" width="0.1121%" height="15" fill="rgb(216,125,40)" fg:x="3641" fg:w="7"/><text x="58.5807%" y="1167.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="58.3307%" y="1141" width="0.1121%" height="15" fill="rgb(228,227,20)" fg:x="3641" fg:w="7"/><text x="58.5807%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="58.3467%" y="1125" width="0.0961%" height="15" fill="rgb(242,173,45)" fg:x="3642" fg:w="6"/><text x="58.5967%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="58.3467%" y="1109" width="0.0961%" height="15" fill="rgb(215,79,24)" fg:x="3642" fg:w="6"/><text x="58.5967%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="58.3467%" y="1093" width="0.0961%" height="15" fill="rgb(238,164,38)" fg:x="3642" fg:w="6"/><text x="58.5967%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="58.3467%" y="1077" width="0.0961%" height="15" fill="rgb(245,196,38)" fg:x="3642" fg:w="6"/><text x="58.5967%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="58.3467%" y="1061" width="0.0961%" height="15" fill="rgb(231,217,29)" fg:x="3642" fg:w="6"/><text x="58.5967%" y="1071.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="58.3467%" y="1045" width="0.0961%" height="15" fill="rgb(245,6,4)" fg:x="3642" fg:w="6"/><text x="58.5967%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="58.3467%" y="1029" width="0.0961%" height="15" fill="rgb(214,76,49)" fg:x="3642" fg:w="6"/><text x="58.5967%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="58.3467%" y="1013" width="0.0961%" height="15" fill="rgb(205,96,12)" fg:x="3642" fg:w="6"/><text x="58.5967%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.3947%" y="997" width="0.0481%" height="15" fill="rgb(243,131,4)" fg:x="3645" fg:w="3"/><text x="58.6447%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.3947%" y="981" width="0.0481%" height="15" fill="rgb(214,114,4)" fg:x="3645" fg:w="3"/><text x="58.6447%" y="991.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, std::pair&lt;long, bool&gt; &gt;, std::_Select1st&lt;std::pair&lt;uint256 const, std::pair&lt;long, bool&gt; &gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, std::pair&lt;long, bool&gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.02%)</title><rect x="58.4428%" y="1333" width="0.0160%" height="15" fill="rgb(234,215,15)" fg:x="3648" fg:w="1"/><text x="58.6928%" y="1343.50"></text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::~optional (6 samples, 0.10%)</title><rect x="58.4588%" y="1333" width="0.0961%" height="15" fill="rgb(250,216,45)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1343.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::~_Optional_base (6 samples, 0.10%)</title><rect x="58.4588%" y="1317" width="0.0961%" height="15" fill="rgb(236,128,4)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1327.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::~_Optional_payload (6 samples, 0.10%)</title><rect x="58.4588%" y="1301" width="0.0961%" height="15" fill="rgb(234,50,33)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1311.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_reset (6 samples, 0.10%)</title><rect x="58.4588%" y="1285" width="0.0961%" height="15" fill="rgb(253,131,37)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1295.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_destroy (6 samples, 0.10%)</title><rect x="58.4588%" y="1269" width="0.0961%" height="15" fill="rgb(218,55,27)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1279.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::~pair (6 samples, 0.10%)</title><rect x="58.4588%" y="1253" width="0.0961%" height="15" fill="rgb(241,220,28)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1263.50"></text></g><g><title>CNetMessage::~CNetMessage (6 samples, 0.10%)</title><rect x="58.4588%" y="1237" width="0.0961%" height="15" fill="rgb(241,90,48)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1247.50"></text></g><g><title>DataStream::~DataStream (6 samples, 0.10%)</title><rect x="58.4588%" y="1221" width="0.0961%" height="15" fill="rgb(216,43,37)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (6 samples, 0.10%)</title><rect x="58.4588%" y="1205" width="0.0961%" height="15" fill="rgb(207,173,9)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (6 samples, 0.10%)</title><rect x="58.4588%" y="1189" width="0.0961%" height="15" fill="rgb(240,126,30)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (6 samples, 0.10%)</title><rect x="58.4588%" y="1173" width="0.0961%" height="15" fill="rgb(228,178,53)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1183.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (6 samples, 0.10%)</title><rect x="58.4588%" y="1157" width="0.0961%" height="15" fill="rgb(217,33,4)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1167.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (6 samples, 0.10%)</title><rect x="58.4588%" y="1141" width="0.0961%" height="15" fill="rgb(206,124,34)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1151.50"></text></g><g><title>memory_cleanse (6 samples, 0.10%)</title><rect x="58.4588%" y="1125" width="0.0961%" height="15" fill="rgb(208,122,53)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1135.50"></text></g><g><title>memory_cleanse (6 samples, 0.10%)</title><rect x="58.4588%" y="1109" width="0.0961%" height="15" fill="rgb(215,202,26)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1119.50"></text></g><g><title>__memset_avx512_unaligned_erms (6 samples, 0.10%)</title><rect x="58.4588%" y="1093" width="0.0961%" height="15" fill="rgb(232,198,31)" fg:x="3649" fg:w="6"/><text x="58.7088%" y="1103.50"></text></g><g><title>V2Transport::SetMessageToSend (1 samples, 0.02%)</title><rect x="58.5550%" y="1285" width="0.0160%" height="15" fill="rgb(222,23,35)" fg:x="3655" fg:w="1"/><text x="58.8050%" y="1295.50"></text></g><g><title>__clone (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1509" width="45.6905%" height="15" fill="rgb(242,27,53)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1519.50">__clone</text></g><g><title>start_thread (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1493" width="45.6905%" height="15" fill="rgb(210,216,42)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1503.50">start_thread</text></g><g><title>execute_native_thread_routine (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1477" width="45.6905%" height="15" fill="rgb(234,39,38)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1487.50">execute_native_thread_routine</text></g><g><title>_M_run (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1461" width="45.6905%" height="15" fill="rgb(235,126,54)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1471.50">_M_run</text></g><g><title>operator (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1445" width="45.6905%" height="15" fill="rgb(235,150,33)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1455.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1429" width="45.6905%" height="15" fill="rgb(249,49,53)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1439.50">_M_invoke&lt;0, 1, 2&gt;</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1413" width="45.6905%" height="15" fill="rgb(238,60,50)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1423.50">__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), cha..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1397" width="45.6905%" height="15" fill="rgb(210,5,2)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1407.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::bas..</text></g><g><title>util::TraceThread (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1381" width="45.6905%" height="15" fill="rgb(214,207,24)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1391.50">util::TraceThread</text></g><g><title>std::function&lt;void ()&gt;::operator (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1365" width="45.6905%" height="15" fill="rgb(228,173,2)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1375.50">std::function&lt;void ()&gt;::operator</text></g><g><title>CConnman::ThreadMessageHandler (2,852 samples, 45.69%)</title><rect x="12.8965%" y="1349" width="45.6905%" height="15" fill="rgb(244,26,8)" fg:x="805" fg:w="2852"/><text x="13.1465%" y="1359.50">CConnman::ThreadMessageHandler</text></g><g><title>void (anonymous namespace)::PeerManagerImpl::MakeAndPushMessage&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="58.5550%" y="1333" width="0.0320%" height="15" fill="rgb(249,153,35)" fg:x="3655" fg:w="2"/><text x="58.8050%" y="1343.50"></text></g><g><title>CConnman::PushMessage (2 samples, 0.03%)</title><rect x="58.5550%" y="1317" width="0.0320%" height="15" fill="rgb(221,215,40)" fg:x="3655" fg:w="2"/><text x="58.8050%" y="1327.50"></text></g><g><title>CConnman::SocketSendData (2 samples, 0.03%)</title><rect x="58.5550%" y="1301" width="0.0320%" height="15" fill="rgb(238,106,35)" fg:x="3655" fg:w="2"/><text x="58.8050%" y="1311.50"></text></g><g><title>__send (1 samples, 0.02%)</title><rect x="58.5710%" y="1285" width="0.0160%" height="15" fill="rgb(207,195,21)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1269" width="0.0160%" height="15" fill="rgb(205,43,29)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1253" width="0.0160%" height="15" fill="rgb(236,35,21)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1237" width="0.0160%" height="15" fill="rgb(244,74,8)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1221" width="0.0160%" height="15" fill="rgb(241,229,7)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1205" width="0.0160%" height="15" fill="rgb(212,223,25)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1189" width="0.0160%" height="15" fill="rgb(234,58,53)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1173" width="0.0160%" height="15" fill="rgb(244,36,1)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1157" width="0.0160%" height="15" fill="rgb(222,40,54)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1141" width="0.0160%" height="15" fill="rgb(210,207,39)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.5710%" y="1125" width="0.0160%" height="15" fill="rgb(234,52,14)" fg:x="3656" fg:w="1"/><text x="58.8210%" y="1135.50"></text></g><g><title>__io_vtables (1 samples, 0.02%)</title><rect x="58.5870%" y="1509" width="0.0160%" height="15" fill="rgb(239,108,46)" fg:x="3657" fg:w="1"/><text x="58.8370%" y="1519.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="58.5870%" y="1493" width="0.0160%" height="15" fill="rgb(252,223,5)" fg:x="3657" fg:w="1"/><text x="58.8370%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.05%)</title><rect x="58.6030%" y="1509" width="0.0481%" height="15" fill="rgb(227,181,11)" fg:x="3658" fg:w="3"/><text x="58.8530%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="58.6511%" y="1509" width="0.0160%" height="15" fill="rgb(248,126,40)" fg:x="3661" fg:w="1"/><text x="58.9011%" y="1519.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="58.6671%" y="1509" width="0.0481%" height="15" fill="rgb(243,1,18)" fg:x="3662" fg:w="3"/><text x="58.9171%" y="1519.50"></text></g><g><title>_int_malloc (7 samples, 0.11%)</title><rect x="58.7152%" y="1509" width="0.1121%" height="15" fill="rgb(214,145,23)" fg:x="3665" fg:w="7"/><text x="58.9652%" y="1519.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="58.7953%" y="1493" width="0.0320%" height="15" fill="rgb(241,218,11)" fg:x="3670" fg:w="2"/><text x="59.0453%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="58.8273%" y="1509" width="0.0160%" height="15" fill="rgb(214,219,24)" fg:x="3672" fg:w="1"/><text x="59.0773%" y="1519.50"></text></g><g><title>_mm_crc32_u64 (3 samples, 0.05%)</title><rect x="58.9074%" y="1493" width="0.0481%" height="15" fill="rgb(235,32,7)" fg:x="3677" fg:w="3"/><text x="59.1574%" y="1503.50"></text></g><g><title>crc32c::ExtendSse42 (8 samples, 0.13%)</title><rect x="58.8433%" y="1509" width="0.1282%" height="15" fill="rgb(227,121,28)" fg:x="3673" fg:w="8"/><text x="59.0933%" y="1519.50"></text></g><g><title>_mm_crc32_u8 (1 samples, 0.02%)</title><rect x="58.9555%" y="1493" width="0.0160%" height="15" fill="rgb(216,129,49)" fg:x="3680" fg:w="1"/><text x="59.2055%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (3 samples, 0.05%)</title><rect x="58.9715%" y="1509" width="0.0481%" height="15" fill="rgb(207,194,50)" fg:x="3681" fg:w="3"/><text x="59.2215%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.08%)</title><rect x="59.0195%" y="1477" width="0.0801%" height="15" fill="rgb(207,4,18)" fg:x="3684" fg:w="5"/><text x="59.2695%" y="1487.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="59.0996%" y="1477" width="0.0481%" height="15" fill="rgb(213,50,30)" fg:x="3689" fg:w="3"/><text x="59.3496%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (9 samples, 0.14%)</title><rect x="59.0195%" y="1509" width="0.1442%" height="15" fill="rgb(208,77,22)" fg:x="3684" fg:w="9"/><text x="59.2695%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (9 samples, 0.14%)</title><rect x="59.0195%" y="1493" width="0.1442%" height="15" fill="rgb(244,204,34)" fg:x="3684" fg:w="9"/><text x="59.2695%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="59.1477%" y="1477" width="0.0160%" height="15" fill="rgb(230,20,17)" fg:x="3692" fg:w="1"/><text x="59.3977%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="59.1637%" y="1509" width="0.0160%" height="15" fill="rgb(237,83,15)" fg:x="3693" fg:w="1"/><text x="59.4137%" y="1519.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="59.1637%" y="1493" width="0.0160%" height="15" fill="rgb(221,109,25)" fg:x="3693" fg:w="1"/><text x="59.4137%" y="1503.50"></text></g><g><title>leveldb::MutexLock::~MutexLock (1 samples, 0.02%)</title><rect x="59.1637%" y="1477" width="0.0160%" height="15" fill="rgb(205,194,52)" fg:x="3693" fg:w="1"/><text x="59.4137%" y="1487.50"></text></g><g><title>leveldb::port::Mutex::Unlock (1 samples, 0.02%)</title><rect x="59.1637%" y="1461" width="0.0160%" height="15" fill="rgb(244,173,54)" fg:x="3693" fg:w="1"/><text x="59.4137%" y="1471.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.02%)</title><rect x="59.1637%" y="1445" width="0.0160%" height="15" fill="rgb(227,181,18)" fg:x="3693" fg:w="1"/><text x="59.4137%" y="1455.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="59.1637%" y="1429" width="0.0160%" height="15" fill="rgb(238,36,30)" fg:x="3693" fg:w="1"/><text x="59.4137%" y="1439.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="59.1637%" y="1413" width="0.0160%" height="15" fill="rgb(254,85,0)" fg:x="3693" fg:w="1"/><text x="59.4137%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="59.1798%" y="1509" width="0.0320%" height="15" fill="rgb(247,63,33)" fg:x="3694" fg:w="2"/><text x="59.4298%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="59.1958%" y="1493" width="0.0160%" height="15" fill="rgb(220,7,54)" fg:x="3695" fg:w="1"/><text x="59.4458%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="59.1958%" y="1477" width="0.0160%" height="15" fill="rgb(238,227,21)" fg:x="3695" fg:w="1"/><text x="59.4458%" y="1487.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="59.2118%" y="1509" width="0.0160%" height="15" fill="rgb(237,29,31)" fg:x="3696" fg:w="1"/><text x="59.4618%" y="1519.50"></text></g><g><title>leveldb::Block::NumRestarts (1 samples, 0.02%)</title><rect x="59.2118%" y="1493" width="0.0160%" height="15" fill="rgb(211,21,50)" fg:x="3696" fg:w="1"/><text x="59.4618%" y="1503.50"></text></g><g><title>leveldb::DecodeFixed32 (1 samples, 0.02%)</title><rect x="59.2118%" y="1477" width="0.0160%" height="15" fill="rgb(239,119,2)" fg:x="3696" fg:w="1"/><text x="59.4618%" y="1487.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="59.2118%" y="1461" width="0.0160%" height="15" fill="rgb(250,2,39)" fg:x="3696" fg:w="1"/><text x="59.4618%" y="1471.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.08%)</title><rect x="59.2278%" y="1509" width="0.0801%" height="15" fill="rgb(244,46,53)" fg:x="3697" fg:w="5"/><text x="59.4778%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="59.2919%" y="1493" width="0.0160%" height="15" fill="rgb(209,21,19)" fg:x="3701" fg:w="1"/><text x="59.5419%" y="1503.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="59.3079%" y="1509" width="0.0160%" height="15" fill="rgb(236,145,4)" fg:x="3702" fg:w="1"/><text x="59.5579%" y="1519.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="59.3079%" y="1493" width="0.0160%" height="15" fill="rgb(220,133,36)" fg:x="3702" fg:w="1"/><text x="59.5579%" y="1503.50"></text></g><g><title>leveldb::LookupKey::LookupKey (1 samples, 0.02%)</title><rect x="59.3239%" y="1509" width="0.0160%" height="15" fill="rgb(244,18,3)" fg:x="3703" fg:w="1"/><text x="59.5739%" y="1519.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="59.3239%" y="1493" width="0.0160%" height="15" fill="rgb(232,171,48)" fg:x="3703" fg:w="1"/><text x="59.5739%" y="1503.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="59.3560%" y="1493" width="0.0160%" height="15" fill="rgb(223,223,53)" fg:x="3705" fg:w="1"/><text x="59.6060%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="59.3720%" y="1493" width="0.0160%" height="15" fill="rgb(246,92,13)" fg:x="3706" fg:w="1"/><text x="59.6220%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (4 samples, 0.06%)</title><rect x="59.3400%" y="1509" width="0.0641%" height="15" fill="rgb(229,171,10)" fg:x="3704" fg:w="4"/><text x="59.5900%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="59.3880%" y="1493" width="0.0160%" height="15" fill="rgb(213,131,26)" fg:x="3707" fg:w="1"/><text x="59.6380%" y="1503.50"></text></g><g><title>leveldb::SaveValue (1 samples, 0.02%)</title><rect x="59.4040%" y="1509" width="0.0160%" height="15" fill="rgb(242,87,54)" fg:x="3708" fg:w="1"/><text x="59.6540%" y="1519.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="59.4201%" y="1509" width="0.0160%" height="15" fill="rgb(237,21,35)" fg:x="3709" fg:w="1"/><text x="59.6701%" y="1519.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="59.4201%" y="1493" width="0.0160%" height="15" fill="rgb(253,13,47)" fg:x="3709" fg:w="1"/><text x="59.6701%" y="1503.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="59.4201%" y="1477" width="0.0160%" height="15" fill="rgb(215,122,49)" fg:x="3709" fg:w="1"/><text x="59.6701%" y="1487.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="59.4361%" y="1509" width="0.0160%" height="15" fill="rgb(209,179,30)" fg:x="3710" fg:w="1"/><text x="59.6861%" y="1519.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="59.4521%" y="1509" width="0.0160%" height="15" fill="rgb(235,100,24)" fg:x="3711" fg:w="1"/><text x="59.7021%" y="1519.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="59.4681%" y="1509" width="0.0160%" height="15" fill="rgb(209,67,24)" fg:x="3712" fg:w="1"/><text x="59.7181%" y="1519.50"></text></g><g><title>memory_cleanse (1 samples, 0.02%)</title><rect x="59.4841%" y="1509" width="0.0160%" height="15" fill="rgb(206,74,32)" fg:x="3713" fg:w="1"/><text x="59.7341%" y="1519.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="59.5162%" y="1045" width="0.0320%" height="15" fill="rgb(212,45,25)" fg:x="3715" fg:w="2"/><text x="59.7662%" y="1055.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (2 samples, 0.03%)</title><rect x="59.5162%" y="1029" width="0.0320%" height="15" fill="rgb(239,26,3)" fg:x="3715" fg:w="2"/><text x="59.7662%" y="1039.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (2 samples, 0.03%)</title><rect x="59.5162%" y="1013" width="0.0320%" height="15" fill="rgb(218,36,15)" fg:x="3715" fg:w="2"/><text x="59.7662%" y="1023.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (2 samples, 0.03%)</title><rect x="59.5162%" y="997" width="0.0320%" height="15" fill="rgb(206,108,24)" fg:x="3715" fg:w="2"/><text x="59.7662%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="59.5162%" y="981" width="0.0320%" height="15" fill="rgb(234,204,42)" fg:x="3715" fg:w="2"/><text x="59.7662%" y="991.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (2 samples, 0.03%)</title><rect x="59.5162%" y="965" width="0.0320%" height="15" fill="rgb(229,2,11)" fg:x="3715" fg:w="2"/><text x="59.7662%" y="975.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (2 samples, 0.03%)</title><rect x="59.5162%" y="949" width="0.0320%" height="15" fill="rgb(221,20,48)" fg:x="3715" fg:w="2"/><text x="59.7662%" y="959.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (2 samples, 0.03%)</title><rect x="59.5162%" y="933" width="0.0320%" height="15" fill="rgb(244,164,10)" fg:x="3715" fg:w="2"/><text x="59.7662%" y="943.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (4 samples, 0.06%)</title><rect x="59.5002%" y="1509" width="0.0641%" height="15" fill="rgb(243,229,2)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1519.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (4 samples, 0.06%)</title><rect x="59.5002%" y="1493" width="0.0641%" height="15" fill="rgb(232,131,37)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1503.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1477" width="0.0641%" height="15" fill="rgb(217,156,11)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1487.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1461" width="0.0641%" height="15" fill="rgb(239,99,48)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1471.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1445" width="0.0641%" height="15" fill="rgb(231,209,9)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1455.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1429" width="0.0641%" height="15" fill="rgb(254,97,27)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1439.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1413" width="0.0641%" height="15" fill="rgb(223,151,38)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1423.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1397" width="0.0641%" height="15" fill="rgb(219,206,35)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1407.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1381" width="0.0641%" height="15" fill="rgb(216,130,31)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1391.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1365" width="0.0641%" height="15" fill="rgb(251,97,34)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1375.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1349" width="0.0641%" height="15" fill="rgb(246,159,47)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1359.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1333" width="0.0641%" height="15" fill="rgb(232,87,10)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1343.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1317" width="0.0641%" height="15" fill="rgb(249,1,37)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1327.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1301" width="0.0641%" height="15" fill="rgb(239,135,14)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1311.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1285" width="0.0641%" height="15" fill="rgb(253,116,46)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1295.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1269" width="0.0641%" height="15" fill="rgb(222,217,37)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1279.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1253" width="0.0641%" height="15" fill="rgb(252,96,8)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1237" width="0.0641%" height="15" fill="rgb(254,103,41)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1247.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1221" width="0.0641%" height="15" fill="rgb(218,213,19)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1205" width="0.0641%" height="15" fill="rgb(253,95,21)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1215.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1189" width="0.0641%" height="15" fill="rgb(229,26,28)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1199.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1173" width="0.0641%" height="15" fill="rgb(230,129,16)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1183.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (4 samples, 0.06%)</title><rect x="59.5002%" y="1157" width="0.0641%" height="15" fill="rgb(236,126,17)" fg:x="3714" fg:w="4"/><text x="59.7502%" y="1167.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="59.5162%" y="1141" width="0.0481%" height="15" fill="rgb(209,33,33)" fg:x="3715" fg:w="3"/><text x="59.7662%" y="1151.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="59.5162%" y="1125" width="0.0481%" height="15" fill="rgb(227,85,29)" fg:x="3715" fg:w="3"/><text x="59.7662%" y="1135.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="59.5162%" y="1109" width="0.0481%" height="15" fill="rgb(241,53,46)" fg:x="3715" fg:w="3"/><text x="59.7662%" y="1119.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="59.5162%" y="1093" width="0.0481%" height="15" fill="rgb(228,167,53)" fg:x="3715" fg:w="3"/><text x="59.7662%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="59.5162%" y="1077" width="0.0481%" height="15" fill="rgb(238,195,45)" fg:x="3715" fg:w="3"/><text x="59.7662%" y="1087.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="59.5162%" y="1061" width="0.0481%" height="15" fill="rgb(252,124,45)" fg:x="3715" fg:w="3"/><text x="59.7662%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="59.5482%" y="1045" width="0.0160%" height="15" fill="rgb(251,38,35)" fg:x="3717" fg:w="1"/><text x="59.7982%" y="1055.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="59.5482%" y="1029" width="0.0160%" height="15" fill="rgb(227,33,2)" fg:x="3717" fg:w="1"/><text x="59.7982%" y="1039.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="59.5482%" y="1013" width="0.0160%" height="15" fill="rgb(223,157,46)" fg:x="3717" fg:w="1"/><text x="59.7982%" y="1023.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="59.5642%" y="1509" width="0.0160%" height="15" fill="rgb(222,78,41)" fg:x="3718" fg:w="1"/><text x="59.8142%" y="1519.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="59.5803%" y="1509" width="0.0160%" height="15" fill="rgb(248,176,11)" fg:x="3719" fg:w="1"/><text x="59.8303%" y="1519.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="59.5963%" y="1509" width="0.0160%" height="15" fill="rgb(241,221,18)" fg:x="3720" fg:w="1"/><text x="59.8463%" y="1519.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="59.5963%" y="1493" width="0.0160%" height="15" fill="rgb(218,85,22)" fg:x="3720" fg:w="1"/><text x="59.8463%" y="1503.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="59.5963%" y="1477" width="0.0160%" height="15" fill="rgb(222,223,7)" fg:x="3720" fg:w="1"/><text x="59.8463%" y="1487.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="59.6123%" y="933" width="0.0160%" height="15" fill="rgb(254,59,39)" fg:x="3721" fg:w="1"/><text x="59.8623%" y="943.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="59.6123%" y="917" width="0.0160%" height="15" fill="rgb(247,100,27)" fg:x="3721" fg:w="1"/><text x="59.8623%" y="927.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="59.6123%" y="901" width="0.0160%" height="15" fill="rgb(237,207,10)" fg:x="3721" fg:w="1"/><text x="59.8623%" y="911.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="59.6123%" y="885" width="0.0160%" height="15" fill="rgb(220,121,28)" fg:x="3721" fg:w="1"/><text x="59.8623%" y="895.50"></text></g><g><title>start_thread (3 samples, 0.05%)</title><rect x="59.6123%" y="1509" width="0.0481%" height="15" fill="rgb(213,223,20)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1519.50"></text></g><g><title>execute_native_thread_routine (3 samples, 0.05%)</title><rect x="59.6123%" y="1493" width="0.0481%" height="15" fill="rgb(205,121,27)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1503.50"></text></g><g><title>_M_run (3 samples, 0.05%)</title><rect x="59.6123%" y="1477" width="0.0481%" height="15" fill="rgb(253,24,53)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1487.50"></text></g><g><title>operator (3 samples, 0.05%)</title><rect x="59.6123%" y="1461" width="0.0481%" height="15" fill="rgb(224,224,47)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1471.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (3 samples, 0.05%)</title><rect x="59.6123%" y="1445" width="0.0481%" height="15" fill="rgb(250,125,36)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1455.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (3 samples, 0.05%)</title><rect x="59.6123%" y="1429" width="0.0481%" height="15" fill="rgb(240,144,38)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1439.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (3 samples, 0.05%)</title><rect x="59.6123%" y="1413" width="0.0481%" height="15" fill="rgb(250,15,50)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1423.50"></text></g><g><title>util::TraceThread (3 samples, 0.05%)</title><rect x="59.6123%" y="1397" width="0.0481%" height="15" fill="rgb(210,24,26)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1407.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (3 samples, 0.05%)</title><rect x="59.6123%" y="1381" width="0.0481%" height="15" fill="rgb(234,53,53)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1391.50"></text></g><g><title>CConnman::ThreadMessageHandler (3 samples, 0.05%)</title><rect x="59.6123%" y="1365" width="0.0481%" height="15" fill="rgb(208,108,28)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1375.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (3 samples, 0.05%)</title><rect x="59.6123%" y="1349" width="0.0481%" height="15" fill="rgb(227,143,7)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1359.50"></text></g><g><title>Chainstate::ActivateBestChain (3 samples, 0.05%)</title><rect x="59.6123%" y="1333" width="0.0481%" height="15" fill="rgb(238,189,38)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1343.50"></text></g><g><title>Chainstate::ActivateBestChainStep (3 samples, 0.05%)</title><rect x="59.6123%" y="1317" width="0.0481%" height="15" fill="rgb(222,69,15)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1327.50"></text></g><g><title>Chainstate::ConnectTip (3 samples, 0.05%)</title><rect x="59.6123%" y="1301" width="0.0481%" height="15" fill="rgb(213,169,7)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1311.50"></text></g><g><title>Chainstate::ConnectBlock (3 samples, 0.05%)</title><rect x="59.6123%" y="1285" width="0.0481%" height="15" fill="rgb(251,219,4)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1295.50"></text></g><g><title>Consensus::CheckTxInputs (3 samples, 0.05%)</title><rect x="59.6123%" y="1269" width="0.0481%" height="15" fill="rgb(241,55,40)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1279.50"></text></g><g><title>CCoinsViewCache::HaveInputs (3 samples, 0.05%)</title><rect x="59.6123%" y="1253" width="0.0481%" height="15" fill="rgb(243,57,30)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1263.50"></text></g><g><title>CCoinsViewCache::HaveCoin (3 samples, 0.05%)</title><rect x="59.6123%" y="1237" width="0.0481%" height="15" fill="rgb(234,50,30)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="59.6123%" y="1221" width="0.0481%" height="15" fill="rgb(239,23,42)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1231.50"></text></g><g><title>CCoinsViewCache::GetCoin (3 samples, 0.05%)</title><rect x="59.6123%" y="1205" width="0.0481%" height="15" fill="rgb(217,38,19)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="59.6123%" y="1189" width="0.0481%" height="15" fill="rgb(215,179,16)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1199.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (3 samples, 0.05%)</title><rect x="59.6123%" y="1173" width="0.0481%" height="15" fill="rgb(254,21,37)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1183.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (3 samples, 0.05%)</title><rect x="59.6123%" y="1157" width="0.0481%" height="15" fill="rgb(219,207,48)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1167.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (3 samples, 0.05%)</title><rect x="59.6123%" y="1141" width="0.0481%" height="15" fill="rgb(227,225,41)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1151.50"></text></g><g><title>CCoinsViewBacked::GetCoin (3 samples, 0.05%)</title><rect x="59.6123%" y="1125" width="0.0481%" height="15" fill="rgb(223,130,1)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1135.50"></text></g><g><title>CCoinsViewDB::GetCoin (3 samples, 0.05%)</title><rect x="59.6123%" y="1109" width="0.0481%" height="15" fill="rgb(249,54,42)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1119.50"></text></g><g><title>CCoinsViewDB::GetCoin (3 samples, 0.05%)</title><rect x="59.6123%" y="1093" width="0.0481%" height="15" fill="rgb(248,69,25)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1103.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (3 samples, 0.05%)</title><rect x="59.6123%" y="1077" width="0.0481%" height="15" fill="rgb(234,21,32)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1087.50"></text></g><g><title>leveldb::DBImpl::Get (3 samples, 0.05%)</title><rect x="59.6123%" y="1061" width="0.0481%" height="15" fill="rgb(252,136,6)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1071.50"></text></g><g><title>leveldb::Version::Get (3 samples, 0.05%)</title><rect x="59.6123%" y="1045" width="0.0481%" height="15" fill="rgb(245,87,12)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1055.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (3 samples, 0.05%)</title><rect x="59.6123%" y="1029" width="0.0481%" height="15" fill="rgb(208,12,15)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1039.50"></text></g><g><title>leveldb::Version::Get (3 samples, 0.05%)</title><rect x="59.6123%" y="1013" width="0.0481%" height="15" fill="rgb(250,98,2)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1023.50"></text></g><g><title>leveldb::TableCache::Get (3 samples, 0.05%)</title><rect x="59.6123%" y="997" width="0.0481%" height="15" fill="rgb(205,213,15)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="1007.50"></text></g><g><title>leveldb::Table::InternalGet (3 samples, 0.05%)</title><rect x="59.6123%" y="981" width="0.0481%" height="15" fill="rgb(248,192,44)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="991.50"></text></g><g><title>leveldb::Table::BlockReader (3 samples, 0.05%)</title><rect x="59.6123%" y="965" width="0.0481%" height="15" fill="rgb(221,89,17)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="975.50"></text></g><g><title>leveldb::ReadBlock (3 samples, 0.05%)</title><rect x="59.6123%" y="949" width="0.0481%" height="15" fill="rgb(209,55,3)" fg:x="3721" fg:w="3"/><text x="59.8623%" y="959.50"></text></g><g><title>operator new (2 samples, 0.03%)</title><rect x="59.6283%" y="933" width="0.0320%" height="15" fill="rgb(247,23,45)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="943.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="59.6283%" y="917" width="0.0320%" height="15" fill="rgb(235,152,23)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="927.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="59.6283%" y="901" width="0.0320%" height="15" fill="rgb(244,63,13)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="911.50"></text></g><g><title>sysmalloc (2 samples, 0.03%)</title><rect x="59.6283%" y="885" width="0.0320%" height="15" fill="rgb(227,30,37)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="59.6283%" y="869" width="0.0320%" height="15" fill="rgb(224,49,42)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="59.6283%" y="853" width="0.0320%" height="15" fill="rgb(218,129,5)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="59.6283%" y="837" width="0.0320%" height="15" fill="rgb(240,199,54)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="59.6283%" y="821" width="0.0320%" height="15" fill="rgb(234,31,13)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="59.6283%" y="805" width="0.0320%" height="15" fill="rgb(219,73,54)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="59.6283%" y="789" width="0.0320%" height="15" fill="rgb(251,162,10)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="59.6283%" y="773" width="0.0320%" height="15" fill="rgb(240,138,47)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="59.6283%" y="757" width="0.0320%" height="15" fill="rgb(216,138,26)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="59.6283%" y="741" width="0.0320%" height="15" fill="rgb(243,17,35)" fg:x="3722" fg:w="2"/><text x="59.8783%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.6443%" y="725" width="0.0160%" height="15" fill="rgb(241,60,18)" fg:x="3723" fg:w="1"/><text x="59.8943%" y="735.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="59.6604%" y="1509" width="0.0160%" height="15" fill="rgb(234,2,44)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="59.6604%" y="1493" width="0.0160%" height="15" fill="rgb(225,225,33)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1503.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="59.6604%" y="1477" width="0.0160%" height="15" fill="rgb(234,50,31)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1487.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="59.6604%" y="1461" width="0.0160%" height="15" fill="rgb(249,6,25)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1471.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="59.6604%" y="1445" width="0.0160%" height="15" fill="rgb(241,5,17)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1455.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="59.6604%" y="1429" width="0.0160%" height="15" fill="rgb(207,116,10)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1439.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.02%)</title><rect x="59.6604%" y="1413" width="0.0160%" height="15" fill="rgb(222,128,18)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1423.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.02%)</title><rect x="59.6604%" y="1397" width="0.0160%" height="15" fill="rgb(229,109,25)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1407.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="59.6604%" y="1381" width="0.0160%" height="15" fill="rgb(222,102,25)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1391.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="59.6604%" y="1365" width="0.0160%" height="15" fill="rgb(239,211,5)" fg:x="3724" fg:w="1"/><text x="59.9104%" y="1375.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (4 samples, 0.06%)</title><rect x="59.6764%" y="1509" width="0.0641%" height="15" fill="rgb(223,136,26)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (4 samples, 0.06%)</title><rect x="59.6764%" y="1493" width="0.0641%" height="15" fill="rgb(227,30,15)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1503.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (4 samples, 0.06%)</title><rect x="59.6764%" y="1477" width="0.0641%" height="15" fill="rgb(247,76,4)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1487.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.06%)</title><rect x="59.6764%" y="1461" width="0.0641%" height="15" fill="rgb(245,38,48)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1471.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.06%)</title><rect x="59.6764%" y="1445" width="0.0641%" height="15" fill="rgb(210,220,14)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1455.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.06%)</title><rect x="59.6764%" y="1429" width="0.0641%" height="15" fill="rgb(224,60,51)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1439.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.06%)</title><rect x="59.6764%" y="1413" width="0.0641%" height="15" fill="rgb(212,133,49)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1423.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (4 samples, 0.06%)</title><rect x="59.6764%" y="1397" width="0.0641%" height="15" fill="rgb(231,39,22)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1407.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (4 samples, 0.06%)</title><rect x="59.6764%" y="1381" width="0.0641%" height="15" fill="rgb(236,173,22)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1391.50"></text></g><g><title>Coin::~Coin (4 samples, 0.06%)</title><rect x="59.6764%" y="1365" width="0.0641%" height="15" fill="rgb(210,70,0)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1375.50"></text></g><g><title>CTxOut::~CTxOut (4 samples, 0.06%)</title><rect x="59.6764%" y="1349" width="0.0641%" height="15" fill="rgb(215,170,11)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1359.50"></text></g><g><title>CScript::~CScript (4 samples, 0.06%)</title><rect x="59.6764%" y="1333" width="0.0641%" height="15" fill="rgb(220,154,28)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1343.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (4 samples, 0.06%)</title><rect x="59.6764%" y="1317" width="0.0641%" height="15" fill="rgb(240,160,41)" fg:x="3725" fg:w="4"/><text x="59.9264%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (2 samples, 0.03%)</title><rect x="59.7405%" y="1509" width="0.0320%" height="15" fill="rgb(243,215,41)" fg:x="3729" fg:w="2"/><text x="59.9905%" y="1519.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="59.7725%" y="1509" width="0.0160%" height="15" fill="rgb(214,208,31)" fg:x="3731" fg:w="1"/><text x="60.0225%" y="1519.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.02%)</title><rect x="59.7885%" y="1509" width="0.0160%" height="15" fill="rgb(247,57,22)" fg:x="3732" fg:w="1"/><text x="60.0385%" y="1519.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="59.8045%" y="1509" width="0.0160%" height="15" fill="rgb(228,73,52)" fg:x="3733" fg:w="1"/><text x="60.0545%" y="1519.50"></text></g><g><title>unsigned int ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (2 samples, 0.03%)</title><rect x="59.8206%" y="1509" width="0.0320%" height="15" fill="rgb(252,60,9)" fg:x="3734" fg:w="2"/><text x="60.0706%" y="1519.50"></text></g><g><title>unsigned char ser_readdata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="59.8366%" y="1493" width="0.0160%" height="15" fill="rgb(233,9,51)" fg:x="3735" fg:w="1"/><text x="60.0866%" y="1503.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="59.8366%" y="1477" width="0.0160%" height="15" fill="rgb(223,67,14)" fg:x="3735" fg:w="1"/><text x="60.0866%" y="1487.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="59.8366%" y="1461" width="0.0160%" height="15" fill="rgb(222,86,2)" fg:x="3735" fg:w="1"/><text x="60.0866%" y="1471.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="59.8526%" y="1509" width="0.0641%" height="15" fill="rgb(243,58,54)" fg:x="3736" fg:w="4"/><text x="60.1026%" y="1519.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="59.8847%" y="1493" width="0.0320%" height="15" fill="rgb(210,200,39)" fg:x="3738" fg:w="2"/><text x="60.1347%" y="1503.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.03%)</title><rect x="59.8847%" y="1477" width="0.0320%" height="15" fill="rgb(238,135,9)" fg:x="3738" fg:w="2"/><text x="60.1347%" y="1487.50"></text></g><g><title>DataStream::read (2 samples, 0.03%)</title><rect x="59.8847%" y="1461" width="0.0320%" height="15" fill="rgb(232,179,7)" fg:x="3738" fg:w="2"/><text x="60.1347%" y="1471.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (2 samples, 0.03%)</title><rect x="59.8847%" y="1445" width="0.0320%" height="15" fill="rgb(245,65,41)" fg:x="3738" fg:w="2"/><text x="60.1347%" y="1455.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="59.9167%" y="1509" width="0.0160%" height="15" fill="rgb(227,43,8)" fg:x="3740" fg:w="1"/><text x="60.1667%" y="1519.50"></text></g><g><title>util::TraceThread (1 samples, 0.02%)</title><rect x="59.9327%" y="1509" width="0.0160%" height="15" fill="rgb(235,91,14)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1519.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (1 samples, 0.02%)</title><rect x="59.9327%" y="1493" width="0.0160%" height="15" fill="rgb(235,219,31)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1503.50"></text></g><g><title>CConnman::ThreadMessageHandler (1 samples, 0.02%)</title><rect x="59.9327%" y="1477" width="0.0160%" height="15" fill="rgb(227,121,25)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1487.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (1 samples, 0.02%)</title><rect x="59.9327%" y="1461" width="0.0160%" height="15" fill="rgb(254,129,24)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1471.50"></text></g><g><title>Chainstate::ActivateBestChain (1 samples, 0.02%)</title><rect x="59.9327%" y="1445" width="0.0160%" height="15" fill="rgb(226,144,49)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1455.50"></text></g><g><title>Chainstate::ActivateBestChainStep (1 samples, 0.02%)</title><rect x="59.9327%" y="1429" width="0.0160%" height="15" fill="rgb(214,187,32)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1439.50"></text></g><g><title>Chainstate::ConnectTip (1 samples, 0.02%)</title><rect x="59.9327%" y="1413" width="0.0160%" height="15" fill="rgb(243,129,46)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1423.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="59.9327%" y="1397" width="0.0160%" height="15" fill="rgb(221,185,35)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1407.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (1 samples, 0.02%)</title><rect x="59.9327%" y="1381" width="0.0160%" height="15" fill="rgb(205,0,32)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;double, double, double&gt; (1 samples, 0.02%)</title><rect x="59.9327%" y="1365" width="0.0160%" height="15" fill="rgb(229,179,12)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1375.50"></text></g><g><title>void tinyformat::format&lt;double, double, double&gt; (1 samples, 0.02%)</title><rect x="59.9327%" y="1349" width="0.0160%" height="15" fill="rgb(252,107,19)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1359.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.02%)</title><rect x="59.9327%" y="1333" width="0.0160%" height="15" fill="rgb(220,95,27)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1343.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.02%)</title><rect x="59.9327%" y="1317" width="0.0160%" height="15" fill="rgb(240,113,40)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1327.50"></text></g><g><title>tinyformat::detail::FormatArg::format (1 samples, 0.02%)</title><rect x="59.9327%" y="1301" width="0.0160%" height="15" fill="rgb(208,4,43)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1311.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (1 samples, 0.02%)</title><rect x="59.9327%" y="1285" width="0.0160%" height="15" fill="rgb(247,189,30)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1295.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (1 samples, 0.02%)</title><rect x="59.9327%" y="1269" width="0.0160%" height="15" fill="rgb(231,157,17)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1279.50"></text></g><g><title>std::__convert_from_v (1 samples, 0.02%)</title><rect x="59.9327%" y="1253" width="0.0160%" height="15" fill="rgb(224,139,6)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1263.50"></text></g><g><title>___vsnprintf (1 samples, 0.02%)</title><rect x="59.9327%" y="1237" width="0.0160%" height="15" fill="rgb(223,83,16)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1247.50"></text></g><g><title>__printf_buffer (1 samples, 0.02%)</title><rect x="59.9327%" y="1221" width="0.0160%" height="15" fill="rgb(232,211,20)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1231.50"></text></g><g><title>__printf_fp_l_buffer (1 samples, 0.02%)</title><rect x="59.9327%" y="1205" width="0.0160%" height="15" fill="rgb(225,203,35)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1215.50"></text></g><g><title>__printf_fp_buffer_1.isra.0 (1 samples, 0.02%)</title><rect x="59.9327%" y="1189" width="0.0160%" height="15" fill="rgb(215,211,44)" fg:x="3741" fg:w="1"/><text x="60.1827%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.0128%" y="1061" width="0.0160%" height="15" fill="rgb(248,213,26)" fg:x="3746" fg:w="1"/><text x="60.2628%" y="1071.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.0128%" y="1045" width="0.0160%" height="15" fill="rgb(214,23,52)" fg:x="3746" fg:w="1"/><text x="60.2628%" y="1055.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="60.0128%" y="1029" width="0.0160%" height="15" fill="rgb(225,173,50)" fg:x="3746" fg:w="1"/><text x="60.2628%" y="1039.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (6 samples, 0.10%)</title><rect x="59.9487%" y="1349" width="0.0961%" height="15" fill="rgb(206,150,22)" fg:x="3742" fg:w="6"/><text x="60.1987%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (6 samples, 0.10%)</title><rect x="59.9487%" y="1333" width="0.0961%" height="15" fill="rgb(239,64,23)" fg:x="3742" fg:w="6"/><text x="60.1987%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="59.9487%" y="1317" width="0.0961%" height="15" fill="rgb(242,50,38)" fg:x="3742" fg:w="6"/><text x="60.1987%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="59.9487%" y="1301" width="0.0961%" height="15" fill="rgb(217,91,15)" fg:x="3742" fg:w="6"/><text x="60.1987%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="59.9487%" y="1285" width="0.0961%" height="15" fill="rgb(230,172,6)" fg:x="3742" fg:w="6"/><text x="60.1987%" y="1295.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1269" width="0.0320%" height="15" fill="rgb(221,98,26)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1253" width="0.0320%" height="15" fill="rgb(227,210,45)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1263.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1237" width="0.0320%" height="15" fill="rgb(206,8,30)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1247.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1221" width="0.0320%" height="15" fill="rgb(241,219,17)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1231.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1205" width="0.0320%" height="15" fill="rgb(247,121,29)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1215.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1189" width="0.0320%" height="15" fill="rgb(219,169,49)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1199.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1173" width="0.0320%" height="15" fill="rgb(253,49,49)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1157" width="0.0320%" height="15" fill="rgb(217,178,3)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1167.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1141" width="0.0320%" height="15" fill="rgb(234,73,37)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1151.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1125" width="0.0320%" height="15" fill="rgb(250,98,22)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1135.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1109" width="0.0320%" height="15" fill="rgb(220,108,37)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1093" width="0.0320%" height="15" fill="rgb(225,168,10)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1103.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (2 samples, 0.03%)</title><rect x="60.0128%" y="1077" width="0.0320%" height="15" fill="rgb(247,215,21)" fg:x="3746" fg:w="2"/><text x="60.2628%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="60.0288%" y="1061" width="0.0160%" height="15" fill="rgb(253,189,31)" fg:x="3747" fg:w="1"/><text x="60.2788%" y="1071.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.0288%" y="1045" width="0.0160%" height="15" fill="rgb(241,54,22)" fg:x="3747" fg:w="1"/><text x="60.2788%" y="1055.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.0288%" y="1029" width="0.0160%" height="15" fill="rgb(211,87,4)" fg:x="3747" fg:w="1"/><text x="60.2788%" y="1039.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="60.0288%" y="1013" width="0.0160%" height="15" fill="rgb(245,112,24)" fg:x="3747" fg:w="1"/><text x="60.2788%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="60.0288%" y="997" width="0.0160%" height="15" fill="rgb(235,190,41)" fg:x="3747" fg:w="1"/><text x="60.2788%" y="1007.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="60.0288%" y="981" width="0.0160%" height="15" fill="rgb(214,89,8)" fg:x="3747" fg:w="1"/><text x="60.2788%" y="991.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="60.0449%" y="1349" width="0.0160%" height="15" fill="rgb(249,155,35)" fg:x="3748" fg:w="1"/><text x="60.2949%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="60.0449%" y="1333" width="0.0160%" height="15" fill="rgb(249,88,26)" fg:x="3748" fg:w="1"/><text x="60.2949%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="60.0449%" y="1317" width="0.0160%" height="15" fill="rgb(232,56,8)" fg:x="3748" fg:w="1"/><text x="60.2949%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.0449%" y="1301" width="0.0160%" height="15" fill="rgb(240,95,3)" fg:x="3748" fg:w="1"/><text x="60.2949%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="60.0449%" y="1285" width="0.0160%" height="15" fill="rgb(222,44,28)" fg:x="3748" fg:w="1"/><text x="60.2949%" y="1295.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::begin (1 samples, 0.02%)</title><rect x="60.0449%" y="1269" width="0.0160%" height="15" fill="rgb(234,16,30)" fg:x="3748" fg:w="1"/><text x="60.2949%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="60.0449%" y="1253" width="0.0160%" height="15" fill="rgb(223,26,17)" fg:x="3748" fg:w="1"/><text x="60.2949%" y="1263.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::begin (1 samples, 0.02%)</title><rect x="60.0769%" y="1269" width="0.0160%" height="15" fill="rgb(239,187,47)" fg:x="3750" fg:w="1"/><text x="60.3269%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="60.0769%" y="1253" width="0.0160%" height="15" fill="rgb(247,102,50)" fg:x="3750" fg:w="1"/><text x="60.3269%" y="1263.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1509" width="0.1762%" height="15" fill="rgb(231,216,22)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1519.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1493" width="0.1762%" height="15" fill="rgb(216,201,26)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1503.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1477" width="0.1762%" height="15" fill="rgb(214,186,23)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1487.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1461" width="0.1762%" height="15" fill="rgb(235,184,4)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1471.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1445" width="0.1762%" height="15" fill="rgb(244,46,17)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1455.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1429" width="0.1762%" height="15" fill="rgb(248,74,46)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1439.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1413" width="0.1762%" height="15" fill="rgb(243,79,5)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1423.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1397" width="0.1762%" height="15" fill="rgb(213,148,1)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1407.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1381" width="0.1762%" height="15" fill="rgb(221,30,0)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1391.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.18%)</title><rect x="59.9487%" y="1365" width="0.1762%" height="15" fill="rgb(207,85,29)" fg:x="3742" fg:w="11"/><text x="60.1987%" y="1375.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (4 samples, 0.06%)</title><rect x="60.0609%" y="1349" width="0.0641%" height="15" fill="rgb(239,31,46)" fg:x="3749" fg:w="4"/><text x="60.3109%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="60.0609%" y="1333" width="0.0641%" height="15" fill="rgb(219,6,1)" fg:x="3749" fg:w="4"/><text x="60.3109%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (4 samples, 0.06%)</title><rect x="60.0609%" y="1317" width="0.0641%" height="15" fill="rgb(229,90,29)" fg:x="3749" fg:w="4"/><text x="60.3109%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.06%)</title><rect x="60.0609%" y="1301" width="0.0641%" height="15" fill="rgb(242,201,42)" fg:x="3749" fg:w="4"/><text x="60.3109%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="60.0609%" y="1285" width="0.0641%" height="15" fill="rgb(243,80,54)" fg:x="3749" fg:w="4"/><text x="60.3109%" y="1295.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::end (2 samples, 0.03%)</title><rect x="60.0929%" y="1269" width="0.0320%" height="15" fill="rgb(223,166,15)" fg:x="3751" fg:w="2"/><text x="60.3429%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (2 samples, 0.03%)</title><rect x="60.0929%" y="1253" width="0.0320%" height="15" fill="rgb(238,78,27)" fg:x="3751" fg:w="2"/><text x="60.3429%" y="1263.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="60.1250%" y="1509" width="0.0160%" height="15" fill="rgb(235,28,43)" fg:x="3753" fg:w="1"/><text x="60.3750%" y="1519.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="60.1250%" y="1493" width="0.0160%" height="15" fill="rgb(240,210,28)" fg:x="3753" fg:w="1"/><text x="60.3750%" y="1503.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="60.1250%" y="1477" width="0.0160%" height="15" fill="rgb(253,6,46)" fg:x="3753" fg:w="1"/><text x="60.3750%" y="1487.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="60.1250%" y="1461" width="0.0160%" height="15" fill="rgb(250,159,47)" fg:x="3753" fg:w="1"/><text x="60.3750%" y="1471.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.1250%" y="1445" width="0.0160%" height="15" fill="rgb(216,139,2)" fg:x="3753" fg:w="1"/><text x="60.3750%" y="1455.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="60.1250%" y="1429" width="0.0160%" height="15" fill="rgb(221,124,44)" fg:x="3753" fg:w="1"/><text x="60.3750%" y="1439.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.1250%" y="1413" width="0.0160%" height="15" fill="rgb(205,37,22)" fg:x="3753" fg:w="1"/><text x="60.3750%" y="1423.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="60.1570%" y="1237" width="0.0160%" height="15" fill="rgb(250,55,8)" fg:x="3755" fg:w="1"/><text x="60.4070%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="60.1570%" y="1221" width="0.0160%" height="15" fill="rgb(215,83,48)" fg:x="3755" fg:w="1"/><text x="60.4070%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="60.1730%" y="1237" width="0.0160%" height="15" fill="rgb(253,2,32)" fg:x="3756" fg:w="1"/><text x="60.4230%" y="1247.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1509" width="0.0961%" height="15" fill="rgb(236,67,28)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1519.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1493" width="0.0961%" height="15" fill="rgb(252,55,15)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1503.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1477" width="0.0961%" height="15" fill="rgb(243,173,17)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1487.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1461" width="0.0961%" height="15" fill="rgb(215,212,13)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1471.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1445" width="0.0961%" height="15" fill="rgb(253,176,6)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1455.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1429" width="0.0961%" height="15" fill="rgb(236,105,26)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1439.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1413" width="0.0961%" height="15" fill="rgb(239,226,32)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1423.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1397" width="0.0961%" height="15" fill="rgb(236,104,51)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1407.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1381" width="0.0961%" height="15" fill="rgb(220,172,33)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1391.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1365" width="0.0961%" height="15" fill="rgb(224,182,25)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1375.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1349" width="0.0961%" height="15" fill="rgb(236,184,24)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1359.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1333" width="0.0961%" height="15" fill="rgb(241,221,14)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1343.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (6 samples, 0.10%)</title><rect x="60.1410%" y="1317" width="0.0961%" height="15" fill="rgb(227,146,5)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1327.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1301" width="0.0961%" height="15" fill="rgb(214,15,23)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1311.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1285" width="0.0961%" height="15" fill="rgb(233,157,31)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1295.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1269" width="0.0961%" height="15" fill="rgb(211,27,52)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1279.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="60.1410%" y="1253" width="0.0961%" height="15" fill="rgb(212,223,15)" fg:x="3754" fg:w="6"/><text x="60.3910%" y="1263.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="60.1890%" y="1237" width="0.0481%" height="15" fill="rgb(254,211,0)" fg:x="3757" fg:w="3"/><text x="60.4390%" y="1247.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (3 samples, 0.05%)</title><rect x="60.1890%" y="1221" width="0.0481%" height="15" fill="rgb(205,43,38)" fg:x="3757" fg:w="3"/><text x="60.4390%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="60.2211%" y="1205" width="0.0160%" height="15" fill="rgb(242,206,46)" fg:x="3759" fg:w="1"/><text x="60.4711%" y="1215.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="60.2211%" y="1189" width="0.0160%" height="15" fill="rgb(220,221,12)" fg:x="3759" fg:w="1"/><text x="60.4711%" y="1199.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="60.2691%" y="1493" width="0.0160%" height="15" fill="rgb(217,156,35)" fg:x="3762" fg:w="1"/><text x="60.5191%" y="1503.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="60.2371%" y="1509" width="0.0641%" height="15" fill="rgb(207,181,49)" fg:x="3760" fg:w="4"/><text x="60.4871%" y="1519.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1493" width="0.0160%" height="15" fill="rgb(235,103,47)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1477" width="0.0160%" height="15" fill="rgb(222,63,28)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1487.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1461" width="0.0160%" height="15" fill="rgb(244,137,21)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1471.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1445" width="0.0160%" height="15" fill="rgb(228,35,27)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1455.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1429" width="0.0160%" height="15" fill="rgb(226,191,41)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1439.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1413" width="0.0160%" height="15" fill="rgb(210,154,3)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1423.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1397" width="0.0160%" height="15" fill="rgb(216,60,49)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1407.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1381" width="0.0160%" height="15" fill="rgb(226,17,20)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1391.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1365" width="0.0160%" height="15" fill="rgb(206,115,35)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1375.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="60.2852%" y="1349" width="0.0160%" height="15" fill="rgb(227,88,1)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1359.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="60.2852%" y="1333" width="0.0160%" height="15" fill="rgb(230,222,24)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1343.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="60.2852%" y="1317" width="0.0160%" height="15" fill="rgb(214,124,32)" fg:x="3763" fg:w="1"/><text x="60.5352%" y="1327.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="60.3012%" y="1509" width="0.0320%" height="15" fill="rgb(240,41,36)" fg:x="3764" fg:w="2"/><text x="60.5512%" y="1519.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (2 samples, 0.03%)</title><rect x="60.3332%" y="1509" width="0.0320%" height="15" fill="rgb(221,17,52)" fg:x="3766" fg:w="2"/><text x="60.5832%" y="1519.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="60.3492%" y="1493" width="0.0160%" height="15" fill="rgb(252,70,16)" fg:x="3767" fg:w="1"/><text x="60.5992%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="60.3653%" y="1509" width="0.0961%" height="15" fill="rgb(250,177,4)" fg:x="3768" fg:w="6"/><text x="60.6153%" y="1519.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="60.4133%" y="1493" width="0.0481%" height="15" fill="rgb(240,188,47)" fg:x="3771" fg:w="3"/><text x="60.6633%" y="1503.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="60.4133%" y="1477" width="0.0481%" height="15" fill="rgb(215,92,12)" fg:x="3771" fg:w="3"/><text x="60.6633%" y="1487.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="60.4614%" y="1509" width="0.0160%" height="15" fill="rgb(242,110,29)" fg:x="3774" fg:w="1"/><text x="60.7114%" y="1519.50"></text></g><g><title>b-msghand (3,773 samples, 60.45%)</title><rect x="0.0641%" y="1525" width="60.4454%" height="15" fill="rgb(208,211,26)" fg:x="4" fg:w="3773"/><text x="0.3141%" y="1535.50">b-msghand</text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (2 samples, 0.03%)</title><rect x="60.4774%" y="1509" width="0.0320%" height="15" fill="rgb(244,147,6)" fg:x="3775" fg:w="2"/><text x="60.7274%" y="1519.50"></text></g><g><title>CConnman::WakeMessageHandler (1 samples, 0.02%)</title><rect x="60.5095%" y="1493" width="0.0160%" height="15" fill="rgb(211,130,42)" fg:x="3777" fg:w="1"/><text x="60.7595%" y="1503.50"></text></g><g><title>DataStream::resize (18 samples, 0.29%)</title><rect x="60.5255%" y="1461" width="0.2884%" height="15" fill="rgb(220,63,1)" fg:x="3778" fg:w="18"/><text x="60.7755%" y="1471.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::resize (18 samples, 0.29%)</title><rect x="60.5255%" y="1445" width="0.2884%" height="15" fill="rgb(241,212,30)" fg:x="3778" fg:w="18"/><text x="60.7755%" y="1455.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (18 samples, 0.29%)</title><rect x="60.5255%" y="1429" width="0.2884%" height="15" fill="rgb(233,153,17)" fg:x="3778" fg:w="18"/><text x="60.7755%" y="1439.50"></text></g><g><title>std::byte* std::__uninitialized_fill_n_a&lt;std::byte*, unsigned long, std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; (18 samples, 0.29%)</title><rect x="60.5255%" y="1413" width="0.2884%" height="15" fill="rgb(236,3,10)" fg:x="3778" fg:w="18"/><text x="60.7755%" y="1423.50"></text></g><g><title>decltype  (6 samples, 0.10%)</title><rect x="60.7177%" y="1397" width="0.0961%" height="15" fill="rgb(232,41,21)" fg:x="3790" fg:w="6"/><text x="60.9677%" y="1407.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (6 samples, 0.10%)</title><rect x="60.7177%" y="1381" width="0.0961%" height="15" fill="rgb(206,63,51)" fg:x="3790" fg:w="6"/><text x="60.9677%" y="1391.50"></text></g><g><title>decltype (6 samples, 0.10%)</title><rect x="60.7177%" y="1365" width="0.0961%" height="15" fill="rgb(250,214,3)" fg:x="3790" fg:w="6"/><text x="60.9677%" y="1375.50"></text></g><g><title>V2Transport::GetReceivedMessage (22 samples, 0.35%)</title><rect x="60.5255%" y="1477" width="0.3525%" height="15" fill="rgb(254,89,27)" fg:x="3778" fg:w="22"/><text x="60.7755%" y="1487.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (4 samples, 0.06%)</title><rect x="60.8138%" y="1461" width="0.0641%" height="15" fill="rgb(249,41,14)" fg:x="3796" fg:w="4"/><text x="61.0638%" y="1471.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (4 samples, 0.06%)</title><rect x="60.8138%" y="1445" width="0.0641%" height="15" fill="rgb(221,196,51)" fg:x="3796" fg:w="4"/><text x="61.0638%" y="1455.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (4 samples, 0.06%)</title><rect x="60.8138%" y="1429" width="0.0641%" height="15" fill="rgb(214,116,26)" fg:x="3796" fg:w="4"/><text x="61.0638%" y="1439.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (4 samples, 0.06%)</title><rect x="60.8138%" y="1413" width="0.0641%" height="15" fill="rgb(236,67,7)" fg:x="3796" fg:w="4"/><text x="61.0638%" y="1423.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (4 samples, 0.06%)</title><rect x="60.8138%" y="1397" width="0.0641%" height="15" fill="rgb(253,179,32)" fg:x="3796" fg:w="4"/><text x="61.0638%" y="1407.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.06%)</title><rect x="60.8138%" y="1381" width="0.0641%" height="15" fill="rgb(218,33,15)" fg:x="3796" fg:w="4"/><text x="61.0638%" y="1391.50"></text></g><g><title>ReadLE32 (1 samples, 0.02%)</title><rect x="62.6562%" y="1365" width="0.0160%" height="15" fill="rgb(217,202,41)" fg:x="3911" fg:w="1"/><text x="62.9062%" y="1375.50"></text></g><g><title>ChaCha20Aligned::Crypt (1 samples, 0.02%)</title><rect x="62.6562%" y="1349" width="0.0160%" height="15" fill="rgb(234,133,5)" fg:x="3911" fg:w="1"/><text x="62.9062%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="62.6722%" y="1365" width="0.0641%" height="15" fill="rgb(240,47,40)" fg:x="3912" fg:w="4"/><text x="62.9222%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="62.6722%" y="1349" width="0.0641%" height="15" fill="rgb(234,166,26)" fg:x="3912" fg:w="4"/><text x="62.9222%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="62.6722%" y="1333" width="0.0641%" height="15" fill="rgb(244,125,51)" fg:x="3912" fg:w="4"/><text x="62.9222%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="62.6882%" y="1317" width="0.0481%" height="15" fill="rgb(229,171,11)" fg:x="3913" fg:w="3"/><text x="62.9382%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="62.6882%" y="1301" width="0.0481%" height="15" fill="rgb(224,38,45)" fg:x="3913" fg:w="3"/><text x="62.9382%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="62.6882%" y="1285" width="0.0481%" height="15" fill="rgb(237,27,7)" fg:x="3913" fg:w="3"/><text x="62.9382%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="62.6882%" y="1269" width="0.0481%" height="15" fill="rgb(216,52,7)" fg:x="3913" fg:w="3"/><text x="62.9382%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="62.6882%" y="1253" width="0.0481%" height="15" fill="rgb(243,11,11)" fg:x="3913" fg:w="3"/><text x="62.9382%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="62.6882%" y="1237" width="0.0481%" height="15" fill="rgb(253,167,20)" fg:x="3913" fg:w="3"/><text x="62.9382%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="62.6882%" y="1221" width="0.0481%" height="15" fill="rgb(215,207,5)" fg:x="3913" fg:w="3"/><text x="62.9382%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="62.6882%" y="1205" width="0.0481%" height="15" fill="rgb(252,127,31)" fg:x="3913" fg:w="3"/><text x="62.9382%" y="1215.50"></text></g><g><title>ChaCha20::Crypt (175 samples, 2.80%)</title><rect x="60.8779%" y="1397" width="2.8036%" height="15" fill="rgb(209,106,27)" fg:x="3800" fg:w="175"/><text x="61.1279%" y="1407.50">Ch..</text></g><g><title>ChaCha20Aligned::Crypt (175 samples, 2.80%)</title><rect x="60.8779%" y="1381" width="2.8036%" height="15" fill="rgb(214,220,18)" fg:x="3800" fg:w="175"/><text x="61.1279%" y="1391.50">Ch..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (59 samples, 0.95%)</title><rect x="62.7363%" y="1365" width="0.9452%" height="15" fill="rgb(237,89,12)" fg:x="3916" fg:w="59"/><text x="62.9863%" y="1375.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (59 samples, 0.95%)</title><rect x="62.7363%" y="1349" width="0.9452%" height="15" fill="rgb(209,167,36)" fg:x="3916" fg:w="59"/><text x="62.9863%" y="1359.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="63.6014%" y="1333" width="0.0801%" height="15" fill="rgb(243,45,22)" fg:x="3970" fg:w="5"/><text x="63.8514%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="63.6174%" y="1317" width="0.0641%" height="15" fill="rgb(239,2,46)" fg:x="3971" fg:w="4"/><text x="63.8674%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="63.6174%" y="1301" width="0.0641%" height="15" fill="rgb(241,101,0)" fg:x="3971" fg:w="4"/><text x="63.8674%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="63.6174%" y="1285" width="0.0641%" height="15" fill="rgb(244,34,31)" fg:x="3971" fg:w="4"/><text x="63.8674%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="63.6174%" y="1269" width="0.0641%" height="15" fill="rgb(248,23,22)" fg:x="3971" fg:w="4"/><text x="63.8674%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="63.6174%" y="1253" width="0.0641%" height="15" fill="rgb(218,27,48)" fg:x="3971" fg:w="4"/><text x="63.8674%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="63.6174%" y="1237" width="0.0641%" height="15" fill="rgb(232,78,1)" fg:x="3971" fg:w="4"/><text x="63.8674%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="63.6335%" y="1221" width="0.0481%" height="15" fill="rgb(233,169,12)" fg:x="3972" fg:w="3"/><text x="63.8835%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="63.6335%" y="1205" width="0.0481%" height="15" fill="rgb(225,222,54)" fg:x="3972" fg:w="3"/><text x="63.8835%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="63.6335%" y="1189" width="0.0481%" height="15" fill="rgb(245,126,29)" fg:x="3972" fg:w="3"/><text x="63.8835%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="63.6335%" y="1173" width="0.0481%" height="15" fill="rgb(241,63,48)" fg:x="3972" fg:w="3"/><text x="63.8835%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="63.6335%" y="1157" width="0.0481%" height="15" fill="rgb(235,126,38)" fg:x="3972" fg:w="3"/><text x="63.8835%" y="1167.50"></text></g><g><title>BIP324Cipher::Decrypt (253 samples, 4.05%)</title><rect x="60.8779%" y="1445" width="4.0532%" height="15" fill="rgb(232,96,49)" fg:x="3800" fg:w="253"/><text x="61.1279%" y="1455.50">BIP3..</text></g><g><title>FSChaCha20Poly1305::Decrypt (253 samples, 4.05%)</title><rect x="60.8779%" y="1429" width="4.0532%" height="15" fill="rgb(211,146,40)" fg:x="3800" fg:w="253"/><text x="61.1279%" y="1439.50">FSCh..</text></g><g><title>AEADChaCha20Poly1305::Decrypt (253 samples, 4.05%)</title><rect x="60.8779%" y="1413" width="4.0532%" height="15" fill="rgb(247,93,44)" fg:x="3800" fg:w="253"/><text x="61.1279%" y="1423.50">AEAD..</text></g><g><title>ComputeTag (78 samples, 1.25%)</title><rect x="63.6815%" y="1397" width="1.2496%" height="15" fill="rgb(251,41,49)" fg:x="3975" fg:w="78"/><text x="63.9315%" y="1407.50"></text></g><g><title>Poly1305::Update (78 samples, 1.25%)</title><rect x="63.6815%" y="1381" width="1.2496%" height="15" fill="rgb(218,155,12)" fg:x="3975" fg:w="78"/><text x="63.9315%" y="1391.50"></text></g><g><title>poly1305_donna::poly1305_update (78 samples, 1.25%)</title><rect x="63.6815%" y="1365" width="1.2496%" height="15" fill="rgb(221,161,30)" fg:x="3975" fg:w="78"/><text x="63.9315%" y="1375.50"></text></g><g><title>poly1305_donna::poly1305_blocks (78 samples, 1.25%)</title><rect x="63.6815%" y="1349" width="1.2496%" height="15" fill="rgb(221,179,11)" fg:x="3975" fg:w="78"/><text x="63.9315%" y="1359.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="64.8029%" y="1333" width="0.1282%" height="15" fill="rgb(224,170,48)" fg:x="4045" fg:w="8"/><text x="65.0529%" y="1343.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="64.8029%" y="1317" width="0.1282%" height="15" fill="rgb(223,117,5)" fg:x="4045" fg:w="8"/><text x="65.0529%" y="1327.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="64.8029%" y="1301" width="0.1282%" height="15" fill="rgb(209,52,20)" fg:x="4045" fg:w="8"/><text x="65.0529%" y="1311.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="64.8190%" y="1285" width="0.1121%" height="15" fill="rgb(209,19,41)" fg:x="4046" fg:w="7"/><text x="65.0690%" y="1295.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="64.8190%" y="1269" width="0.1121%" height="15" fill="rgb(210,177,12)" fg:x="4046" fg:w="7"/><text x="65.0690%" y="1279.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="64.8190%" y="1253" width="0.1121%" height="15" fill="rgb(211,159,37)" fg:x="4046" fg:w="7"/><text x="65.0690%" y="1263.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="64.8190%" y="1237" width="0.1121%" height="15" fill="rgb(209,20,2)" fg:x="4046" fg:w="7"/><text x="65.0690%" y="1247.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="64.8190%" y="1221" width="0.1121%" height="15" fill="rgb(244,3,46)" fg:x="4046" fg:w="7"/><text x="65.0690%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="64.8350%" y="1205" width="0.0961%" height="15" fill="rgb(220,94,38)" fg:x="4047" fg:w="6"/><text x="65.0850%" y="1215.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="64.8350%" y="1189" width="0.0961%" height="15" fill="rgb(253,14,31)" fg:x="4047" fg:w="6"/><text x="65.0850%" y="1199.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="64.8350%" y="1173" width="0.0961%" height="15" fill="rgb(234,176,13)" fg:x="4047" fg:w="6"/><text x="65.0850%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.8831%" y="1157" width="0.0481%" height="15" fill="rgb(218,62,25)" fg:x="4050" fg:w="3"/><text x="65.1331%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.8831%" y="1141" width="0.0481%" height="15" fill="rgb(216,124,40)" fg:x="4050" fg:w="3"/><text x="65.1331%" y="1151.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (256 samples, 4.10%)</title><rect x="60.8779%" y="1461" width="4.1012%" height="15" fill="rgb(228,170,12)" fg:x="3800" fg:w="256"/><text x="61.1279%" y="1471.50">V2Tr..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (3 samples, 0.05%)</title><rect x="64.9311%" y="1445" width="0.0481%" height="15" fill="rgb(231,226,5)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1455.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (3 samples, 0.05%)</title><rect x="64.9311%" y="1429" width="0.0481%" height="15" fill="rgb(237,122,22)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1439.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (3 samples, 0.05%)</title><rect x="64.9311%" y="1413" width="0.0481%" height="15" fill="rgb(209,185,25)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (3 samples, 0.05%)</title><rect x="64.9311%" y="1397" width="0.0481%" height="15" fill="rgb(228,200,32)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1407.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (3 samples, 0.05%)</title><rect x="64.9311%" y="1381" width="0.0481%" height="15" fill="rgb(217,140,10)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1391.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (3 samples, 0.05%)</title><rect x="64.9311%" y="1365" width="0.0481%" height="15" fill="rgb(253,17,24)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1375.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (3 samples, 0.05%)</title><rect x="64.9311%" y="1349" width="0.0481%" height="15" fill="rgb(212,61,6)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1359.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (3 samples, 0.05%)</title><rect x="64.9311%" y="1333" width="0.0481%" height="15" fill="rgb(205,14,25)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1343.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (3 samples, 0.05%)</title><rect x="64.9311%" y="1317" width="0.0481%" height="15" fill="rgb(232,69,41)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1327.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (3 samples, 0.05%)</title><rect x="64.9311%" y="1301" width="0.0481%" height="15" fill="rgb(241,106,47)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1311.50"></text></g><g><title>__memset_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="64.9311%" y="1285" width="0.0481%" height="15" fill="rgb(210,213,53)" fg:x="4053" fg:w="3"/><text x="65.1811%" y="1295.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1461" width="0.0481%" height="15" fill="rgb(253,175,27)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1471.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1445" width="0.0481%" height="15" fill="rgb(211,171,24)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1455.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1429" width="0.0481%" height="15" fill="rgb(229,80,7)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1439.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1413" width="0.0481%" height="15" fill="rgb(212,46,39)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1397" width="0.0481%" height="15" fill="rgb(240,80,45)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1407.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1381" width="0.0481%" height="15" fill="rgb(253,177,40)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1365" width="0.0481%" height="15" fill="rgb(249,200,15)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1349" width="0.0481%" height="15" fill="rgb(217,78,26)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1359.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1333" width="0.0481%" height="15" fill="rgb(254,151,32)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1343.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (3 samples, 0.05%)</title><rect x="64.9792%" y="1317" width="0.0481%" height="15" fill="rgb(226,165,27)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1327.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="64.9792%" y="1301" width="0.0481%" height="15" fill="rgb(250,206,4)" fg:x="4056" fg:w="3"/><text x="65.2292%" y="1311.50"></text></g><g><title>CNode::ReceiveMsgBytes (292 samples, 4.68%)</title><rect x="60.5255%" y="1493" width="4.6780%" height="15" fill="rgb(231,229,27)" fg:x="3778" fg:w="292"/><text x="60.7755%" y="1503.50">CNode..</text></g><g><title>V2Transport::ReceivedBytes (270 samples, 4.33%)</title><rect x="60.8779%" y="1477" width="4.3255%" height="15" fill="rgb(239,217,8)" fg:x="3800" fg:w="270"/><text x="61.1279%" y="1487.50">V2Tra..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (11 samples, 0.18%)</title><rect x="65.0272%" y="1461" width="0.1762%" height="15" fill="rgb(225,204,27)" fg:x="4059" fg:w="11"/><text x="65.2772%" y="1471.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (11 samples, 0.18%)</title><rect x="65.0272%" y="1445" width="0.1762%" height="15" fill="rgb(230,56,32)" fg:x="4059" fg:w="11"/><text x="65.2772%" y="1455.50"></text></g><g><title>unsigned char* std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (11 samples, 0.18%)</title><rect x="65.0272%" y="1429" width="0.1762%" height="15" fill="rgb(222,56,27)" fg:x="4059" fg:w="11"/><text x="65.2772%" y="1439.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;unsigned char, void&gt;::value, unsigned char*&gt;::type std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (11 samples, 0.18%)</title><rect x="65.0272%" y="1413" width="0.1762%" height="15" fill="rgb(253,108,27)" fg:x="4059" fg:w="11"/><text x="65.2772%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (11 samples, 0.18%)</title><rect x="65.0272%" y="1397" width="0.1762%" height="15" fill="rgb(212,87,36)" fg:x="4059" fg:w="11"/><text x="65.2772%" y="1407.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::~UniqueLock (1 samples, 0.02%)</title><rect x="65.2035%" y="1493" width="0.0160%" height="15" fill="rgb(247,82,36)" fg:x="4070" fg:w="1"/><text x="65.4535%" y="1503.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (1 samples, 0.02%)</title><rect x="65.2035%" y="1477" width="0.0160%" height="15" fill="rgb(222,143,9)" fg:x="4070" fg:w="1"/><text x="65.4535%" y="1487.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.02%)</title><rect x="65.2035%" y="1461" width="0.0160%" height="15" fill="rgb(238,162,48)" fg:x="4070" fg:w="1"/><text x="65.4535%" y="1471.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.02%)</title><rect x="65.2035%" y="1445" width="0.0160%" height="15" fill="rgb(221,59,43)" fg:x="4070" fg:w="1"/><text x="65.4535%" y="1455.50"></text></g><g><title>CConnman::SocketHandlerConnected (1 samples, 0.02%)</title><rect x="65.2035%" y="1429" width="0.0160%" height="15" fill="rgb(205,166,41)" fg:x="4070" fg:w="1"/><text x="65.4535%" y="1439.50"></text></g><g><title>std::_Hashtable&lt;std::shared_ptr&lt;Sock const&gt;, std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt;, std::__detail::_Select1st, Sock::EqualSharedPtrSock, Sock::HashSharedPtrSock, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="65.2035%" y="1413" width="0.0160%" height="15" fill="rgb(241,186,40)" fg:x="4070" fg:w="1"/><text x="65.4535%" y="1423.50"></text></g><g><title>[[nf_conntrack]] (1 samples, 0.02%)</title><rect x="65.7321%" y="1269" width="0.0160%" height="15" fill="rgb(216,119,35)" fg:x="4103" fg:w="1"/><text x="65.9821%" y="1279.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="65.7482%" y="1269" width="0.0160%" height="15" fill="rgb(208,68,38)" fg:x="4104" fg:w="1"/><text x="65.9982%" y="1279.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="65.7482%" y="1253" width="0.0160%" height="15" fill="rgb(217,113,1)" fg:x="4104" fg:w="1"/><text x="65.9982%" y="1263.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="65.7482%" y="1237" width="0.0160%" height="15" fill="rgb(242,153,3)" fg:x="4104" fg:w="1"/><text x="65.9982%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.7482%" y="1221" width="0.0160%" height="15" fill="rgb(229,76,35)" fg:x="4104" fg:w="1"/><text x="65.9982%" y="1231.50"></text></g><g><title>CConnman::SocketHandlerConnected (330 samples, 5.29%)</title><rect x="60.5095%" y="1509" width="5.2868%" height="15" fill="rgb(229,125,34)" fg:x="3777" fg:w="330"/><text x="60.7595%" y="1519.50">CConnm..</text></g><g><title>__libc_recv (36 samples, 0.58%)</title><rect x="65.2195%" y="1493" width="0.5767%" height="15" fill="rgb(238,179,36)" fg:x="4071" fg:w="36"/><text x="65.4695%" y="1503.50"></text></g><g><title>[unknown] (36 samples, 0.58%)</title><rect x="65.2195%" y="1477" width="0.5767%" height="15" fill="rgb(244,183,19)" fg:x="4071" fg:w="36"/><text x="65.4695%" y="1487.50"></text></g><g><title>[unknown] (36 samples, 0.58%)</title><rect x="65.2195%" y="1461" width="0.5767%" height="15" fill="rgb(216,85,49)" fg:x="4071" fg:w="36"/><text x="65.4695%" y="1471.50"></text></g><g><title>[unknown] (36 samples, 0.58%)</title><rect x="65.2195%" y="1445" width="0.5767%" height="15" fill="rgb(208,161,47)" fg:x="4071" fg:w="36"/><text x="65.4695%" y="1455.50"></text></g><g><title>[unknown] (36 samples, 0.58%)</title><rect x="65.2195%" y="1429" width="0.5767%" height="15" fill="rgb(233,210,18)" fg:x="4071" fg:w="36"/><text x="65.4695%" y="1439.50"></text></g><g><title>[unknown] (36 samples, 0.58%)</title><rect x="65.2195%" y="1413" width="0.5767%" height="15" fill="rgb(205,104,42)" fg:x="4071" fg:w="36"/><text x="65.4695%" y="1423.50"></text></g><g><title>[unknown] (35 samples, 0.56%)</title><rect x="65.2355%" y="1397" width="0.5607%" height="15" fill="rgb(248,90,43)" fg:x="4072" fg:w="35"/><text x="65.4855%" y="1407.50"></text></g><g><title>[unknown] (34 samples, 0.54%)</title><rect x="65.2515%" y="1381" width="0.5447%" height="15" fill="rgb(206,198,11)" fg:x="4073" fg:w="34"/><text x="65.5015%" y="1391.50"></text></g><g><title>[unknown] (34 samples, 0.54%)</title><rect x="65.2515%" y="1365" width="0.5447%" height="15" fill="rgb(239,165,27)" fg:x="4073" fg:w="34"/><text x="65.5015%" y="1375.50"></text></g><g><title>[unknown] (34 samples, 0.54%)</title><rect x="65.2515%" y="1349" width="0.5447%" height="15" fill="rgb(246,44,32)" fg:x="4073" fg:w="34"/><text x="65.5015%" y="1359.50"></text></g><g><title>[unknown] (33 samples, 0.53%)</title><rect x="65.2675%" y="1333" width="0.5287%" height="15" fill="rgb(252,65,42)" fg:x="4074" fg:w="33"/><text x="65.5175%" y="1343.50"></text></g><g><title>[unknown] (33 samples, 0.53%)</title><rect x="65.2675%" y="1317" width="0.5287%" height="15" fill="rgb(246,197,18)" fg:x="4074" fg:w="33"/><text x="65.5175%" y="1327.50"></text></g><g><title>[unknown] (26 samples, 0.42%)</title><rect x="65.3797%" y="1301" width="0.4165%" height="15" fill="rgb(216,192,4)" fg:x="4081" fg:w="26"/><text x="65.6297%" y="1311.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="65.6360%" y="1285" width="0.1602%" height="15" fill="rgb(208,117,10)" fg:x="4097" fg:w="10"/><text x="65.8860%" y="1295.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="65.7642%" y="1269" width="0.0320%" height="15" fill="rgb(240,61,47)" fg:x="4105" fg:w="2"/><text x="66.0142%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.7802%" y="1253" width="0.0160%" height="15" fill="rgb(228,178,21)" fg:x="4106" fg:w="1"/><text x="66.0302%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.7802%" y="1237" width="0.0160%" height="15" fill="rgb(219,96,54)" fg:x="4106" fg:w="1"/><text x="66.0302%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.7962%" y="1509" width="0.0160%" height="15" fill="rgb(250,177,24)" fg:x="4107" fg:w="1"/><text x="66.0462%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="65.7962%" y="1493" width="0.0160%" height="15" fill="rgb(242,154,46)" fg:x="4107" fg:w="1"/><text x="66.0462%" y="1503.50"></text></g><g><title>CThreadInterrupt::sleep_for (1 samples, 0.02%)</title><rect x="65.8122%" y="1317" width="0.0160%" height="15" fill="rgb(226,176,29)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1327.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="65.8122%" y="1301" width="0.0160%" height="15" fill="rgb(226,29,2)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1311.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="65.8122%" y="1285" width="0.0160%" height="15" fill="rgb(237,104,14)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1295.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="65.8122%" y="1269" width="0.0160%" height="15" fill="rgb(245,207,31)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1279.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="65.8122%" y="1253" width="0.0160%" height="15" fill="rgb(229,211,45)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1263.50"></text></g><g><title>std::__condvar::wait_until (1 samples, 0.02%)</title><rect x="65.8122%" y="1237" width="0.0160%" height="15" fill="rgb(229,113,15)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1247.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (1 samples, 0.02%)</title><rect x="65.8122%" y="1221" width="0.0160%" height="15" fill="rgb(237,147,15)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1231.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.02%)</title><rect x="65.8122%" y="1205" width="0.0160%" height="15" fill="rgb(244,120,12)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.8122%" y="1189" width="0.0160%" height="15" fill="rgb(205,120,12)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.8122%" y="1173" width="0.0160%" height="15" fill="rgb(231,26,45)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.8122%" y="1157" width="0.0160%" height="15" fill="rgb(246,98,1)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.8122%" y="1141" width="0.0160%" height="15" fill="rgb(207,68,45)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.8122%" y="1125" width="0.0160%" height="15" fill="rgb(231,27,38)" fg:x="4108" fg:w="1"/><text x="66.0622%" y="1135.50"></text></g><g><title>__clone (13 samples, 0.21%)</title><rect x="65.8122%" y="1509" width="0.2083%" height="15" fill="rgb(214,223,3)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1519.50"></text></g><g><title>start_thread (13 samples, 0.21%)</title><rect x="65.8122%" y="1493" width="0.2083%" height="15" fill="rgb(228,195,46)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1503.50"></text></g><g><title>execute_native_thread_routine (13 samples, 0.21%)</title><rect x="65.8122%" y="1477" width="0.2083%" height="15" fill="rgb(231,100,42)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1487.50"></text></g><g><title>_M_run (13 samples, 0.21%)</title><rect x="65.8122%" y="1461" width="0.2083%" height="15" fill="rgb(236,53,4)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1471.50"></text></g><g><title>operator (13 samples, 0.21%)</title><rect x="65.8122%" y="1445" width="0.2083%" height="15" fill="rgb(230,152,12)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1455.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (13 samples, 0.21%)</title><rect x="65.8122%" y="1429" width="0.2083%" height="15" fill="rgb(226,101,19)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1439.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (13 samples, 0.21%)</title><rect x="65.8122%" y="1413" width="0.2083%" height="15" fill="rgb(250,149,32)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1423.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (13 samples, 0.21%)</title><rect x="65.8122%" y="1397" width="0.2083%" height="15" fill="rgb(232,178,12)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1407.50"></text></g><g><title>util::TraceThread (13 samples, 0.21%)</title><rect x="65.8122%" y="1381" width="0.2083%" height="15" fill="rgb(246,151,17)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1391.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (13 samples, 0.21%)</title><rect x="65.8122%" y="1365" width="0.2083%" height="15" fill="rgb(252,17,51)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1375.50"></text></g><g><title>CConnman::ThreadSocketHandler (13 samples, 0.21%)</title><rect x="65.8122%" y="1349" width="0.2083%" height="15" fill="rgb(250,207,23)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1359.50"></text></g><g><title>CConnman::SocketHandler (13 samples, 0.21%)</title><rect x="65.8122%" y="1333" width="0.2083%" height="15" fill="rgb(205,27,5)" fg:x="4108" fg:w="13"/><text x="66.0622%" y="1343.50"></text></g><g><title>Sock::WaitMany (12 samples, 0.19%)</title><rect x="65.8283%" y="1317" width="0.1922%" height="15" fill="rgb(224,32,19)" fg:x="4109" fg:w="12"/><text x="66.0783%" y="1327.50"></text></g><g><title>Sock::WaitMany (12 samples, 0.19%)</title><rect x="65.8283%" y="1301" width="0.1922%" height="15" fill="rgb(247,214,40)" fg:x="4109" fg:w="12"/><text x="66.0783%" y="1311.50"></text></g><g><title>__poll (12 samples, 0.19%)</title><rect x="65.8283%" y="1285" width="0.1922%" height="15" fill="rgb(239,199,17)" fg:x="4109" fg:w="12"/><text x="66.0783%" y="1295.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="65.8283%" y="1269" width="0.1922%" height="15" fill="rgb(251,159,9)" fg:x="4109" fg:w="12"/><text x="66.0783%" y="1279.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="65.8283%" y="1253" width="0.1922%" height="15" fill="rgb(225,78,32)" fg:x="4109" fg:w="12"/><text x="66.0783%" y="1263.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="65.8443%" y="1237" width="0.1762%" height="15" fill="rgb(206,97,47)" fg:x="4110" fg:w="11"/><text x="66.0943%" y="1247.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="65.8443%" y="1221" width="0.1762%" height="15" fill="rgb(227,107,4)" fg:x="4110" fg:w="11"/><text x="66.0943%" y="1231.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="65.8443%" y="1205" width="0.1762%" height="15" fill="rgb(241,146,50)" fg:x="4110" fg:w="11"/><text x="66.0943%" y="1215.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="65.8763%" y="1189" width="0.1442%" height="15" fill="rgb(232,92,30)" fg:x="4112" fg:w="9"/><text x="66.1263%" y="1199.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="65.8763%" y="1173" width="0.1442%" height="15" fill="rgb(222,0,40)" fg:x="4112" fg:w="9"/><text x="66.1263%" y="1183.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="65.8763%" y="1157" width="0.1442%" height="15" fill="rgb(219,54,33)" fg:x="4112" fg:w="9"/><text x="66.1263%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="65.8923%" y="1141" width="0.1282%" height="15" fill="rgb(226,209,28)" fg:x="4113" fg:w="8"/><text x="66.1423%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="65.9244%" y="1125" width="0.0961%" height="15" fill="rgb(254,205,35)" fg:x="4115" fg:w="6"/><text x="66.1744%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="65.9244%" y="1109" width="0.0961%" height="15" fill="rgb(230,159,3)" fg:x="4115" fg:w="6"/><text x="66.1744%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="65.9244%" y="1093" width="0.0961%" height="15" fill="rgb(232,190,24)" fg:x="4115" fg:w="6"/><text x="66.1744%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="65.9244%" y="1077" width="0.0961%" height="15" fill="rgb(217,227,44)" fg:x="4115" fg:w="6"/><text x="66.1744%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="65.9724%" y="1061" width="0.0481%" height="15" fill="rgb(236,211,1)" fg:x="4118" fg:w="3"/><text x="66.2224%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="65.9724%" y="1045" width="0.0481%" height="15" fill="rgb(250,127,46)" fg:x="4118" fg:w="3"/><text x="66.2224%" y="1055.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="66.0205%" y="1509" width="0.0160%" height="15" fill="rgb(229,213,6)" fg:x="4121" fg:w="1"/><text x="66.2705%" y="1519.50"></text></g><g><title>b-net (346 samples, 5.54%)</title><rect x="60.5095%" y="1525" width="5.5431%" height="15" fill="rgb(237,15,36)" fg:x="3777" fg:w="346"/><text x="60.7595%" y="1535.50">b-net</text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="66.0365%" y="1509" width="0.0160%" height="15" fill="rgb(213,131,41)" fg:x="4122" fg:w="1"/><text x="66.2865%" y="1519.50"></text></g><g><title>b-opencon (1 samples, 0.02%)</title><rect x="66.0525%" y="1525" width="0.0160%" height="15" fill="rgb(225,82,44)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1535.50"></text></g><g><title>__clone (1 samples, 0.02%)</title><rect x="66.0525%" y="1509" width="0.0160%" height="15" fill="rgb(249,42,11)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1519.50"></text></g><g><title>start_thread (1 samples, 0.02%)</title><rect x="66.0525%" y="1493" width="0.0160%" height="15" fill="rgb(253,11,29)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1503.50"></text></g><g><title>execute_native_thread_routine (1 samples, 0.02%)</title><rect x="66.0525%" y="1477" width="0.0160%" height="15" fill="rgb(206,8,54)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1487.50"></text></g><g><title>_M_run (1 samples, 0.02%)</title><rect x="66.0525%" y="1461" width="0.0160%" height="15" fill="rgb(222,186,2)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1471.50"></text></g><g><title>operator (1 samples, 0.02%)</title><rect x="66.0525%" y="1445" width="0.0160%" height="15" fill="rgb(221,206,53)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1455.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (1 samples, 0.02%)</title><rect x="66.0525%" y="1429" width="0.0160%" height="15" fill="rgb(230,150,21)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1439.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="66.0525%" y="1413" width="0.0160%" height="15" fill="rgb(253,202,10)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1423.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt; &gt; &gt;::_M_run (1 samples, 0.02%)</title><rect x="66.0525%" y="1397" width="0.0160%" height="15" fill="rgb(238,109,40)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1407.50"></text></g><g><title>util::TraceThread (1 samples, 0.02%)</title><rect x="66.0525%" y="1381" width="0.0160%" height="15" fill="rgb(247,120,22)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1391.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (1 samples, 0.02%)</title><rect x="66.0525%" y="1365" width="0.0160%" height="15" fill="rgb(207,43,30)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1375.50"></text></g><g><title>_M_invoke (1 samples, 0.02%)</title><rect x="66.0525%" y="1349" width="0.0160%" height="15" fill="rgb(213,211,24)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1359.50"></text></g><g><title>__invoke_r&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="66.0525%" y="1333" width="0.0160%" height="15" fill="rgb(239,73,39)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1343.50"></text></g><g><title>__invoke_impl&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="66.0525%" y="1317" width="0.0160%" height="15" fill="rgb(245,182,19)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1327.50"></text></g><g><title>std::_Function_handler&lt;void (), CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt;::_M_invoke (1 samples, 0.02%)</title><rect x="66.0525%" y="1301" width="0.0160%" height="15" fill="rgb(247,143,26)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1311.50"></text></g><g><title>CConnman::ThreadOpenConnections (1 samples, 0.02%)</title><rect x="66.0525%" y="1285" width="0.0160%" height="15" fill="rgb(228,191,23)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1295.50"></text></g><g><title>CThreadInterrupt::sleep_for (1 samples, 0.02%)</title><rect x="66.0525%" y="1269" width="0.0160%" height="15" fill="rgb(253,165,31)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1279.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="66.0525%" y="1253" width="0.0160%" height="15" fill="rgb(234,138,20)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1263.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="66.0525%" y="1237" width="0.0160%" height="15" fill="rgb(218,191,29)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1247.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="66.0525%" y="1221" width="0.0160%" height="15" fill="rgb(221,157,19)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1231.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="66.0525%" y="1205" width="0.0160%" height="15" fill="rgb(237,26,42)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1215.50"></text></g><g><title>std::__condvar::wait_until (1 samples, 0.02%)</title><rect x="66.0525%" y="1189" width="0.0160%" height="15" fill="rgb(220,163,24)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1199.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (1 samples, 0.02%)</title><rect x="66.0525%" y="1173" width="0.0160%" height="15" fill="rgb(242,115,20)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1183.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.02%)</title><rect x="66.0525%" y="1157" width="0.0160%" height="15" fill="rgb(210,206,9)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0525%" y="1141" width="0.0160%" height="15" fill="rgb(208,71,17)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0525%" y="1125" width="0.0160%" height="15" fill="rgb(233,7,5)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0525%" y="1109" width="0.0160%" height="15" fill="rgb(207,92,33)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0525%" y="1093" width="0.0160%" height="15" fill="rgb(218,87,9)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0525%" y="1077" width="0.0160%" height="15" fill="rgb(219,47,37)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0525%" y="1061" width="0.0160%" height="15" fill="rgb(221,152,34)" fg:x="4123" fg:w="1"/><text x="66.3025%" y="1071.50"></text></g><g><title>TxRequestTracker::ForgetTxHash (1 samples, 0.02%)</title><rect x="66.0686%" y="1509" width="0.0160%" height="15" fill="rgb(235,176,21)" fg:x="4124" fg:w="1"/><text x="66.3186%" y="1519.50"></text></g><g><title>[[heap]] (10 samples, 0.16%)</title><rect x="66.0846%" y="1509" width="0.1602%" height="15" fill="rgb(232,212,21)" fg:x="4125" fg:w="10"/><text x="66.3346%" y="1519.50"></text></g><g><title>MurmurHash3 (10 samples, 0.16%)</title><rect x="66.0846%" y="1493" width="0.1602%" height="15" fill="rgb(245,82,39)" fg:x="4125" fg:w="10"/><text x="66.3346%" y="1503.50"></text></g><g><title>_int_free (33 samples, 0.53%)</title><rect x="66.2448%" y="1493" width="0.5287%" height="15" fill="rgb(241,52,51)" fg:x="4135" fg:w="33"/><text x="66.4948%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.7574%" y="1477" width="0.0160%" height="15" fill="rgb(219,91,24)" fg:x="4167" fg:w="1"/><text x="67.0074%" y="1487.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.03%)</title><rect x="66.7735%" y="1493" width="0.0320%" height="15" fill="rgb(241,142,12)" fg:x="4168" fg:w="2"/><text x="67.0235%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.7895%" y="1477" width="0.0160%" height="15" fill="rgb(230,27,9)" fg:x="4169" fg:w="1"/><text x="67.0395%" y="1487.50"></text></g><g><title>cfree@GLIBC_2.2.5 (12 samples, 0.19%)</title><rect x="66.8055%" y="1493" width="0.1922%" height="15" fill="rgb(249,181,32)" fg:x="4170" fg:w="12"/><text x="67.0555%" y="1503.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="66.9978%" y="1493" width="0.0160%" height="15" fill="rgb(230,107,3)" fg:x="4182" fg:w="1"/><text x="67.2478%" y="1503.50"></text></g><g><title>operator delete (3 samples, 0.05%)</title><rect x="67.0138%" y="1493" width="0.0481%" height="15" fill="rgb(246,204,14)" fg:x="4183" fg:w="3"/><text x="67.2638%" y="1503.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (1 samples, 0.02%)</title><rect x="67.0618%" y="1493" width="0.0160%" height="15" fill="rgb(213,192,47)" fg:x="4186" fg:w="1"/><text x="67.3118%" y="1503.50"></text></g><g><title>[anon] (53 samples, 0.85%)</title><rect x="66.2448%" y="1509" width="0.8491%" height="15" fill="rgb(240,44,36)" fg:x="4135" fg:w="53"/><text x="66.4948%" y="1519.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_destroy (1 samples, 0.02%)</title><rect x="67.0779%" y="1493" width="0.0160%" height="15" fill="rgb(244,209,38)" fg:x="4187" fg:w="1"/><text x="67.3279%" y="1503.50"></text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::~__allocated_ptr (1 samples, 0.02%)</title><rect x="67.0779%" y="1477" width="0.0160%" height="15" fill="rgb(219,34,37)" fg:x="4187" fg:w="1"/><text x="67.3279%" y="1487.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="67.0779%" y="1461" width="0.0160%" height="15" fill="rgb(210,28,6)" fg:x="4187" fg:w="1"/><text x="67.3279%" y="1471.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="67.0779%" y="1445" width="0.0160%" height="15" fill="rgb(244,110,52)" fg:x="4187" fg:w="1"/><text x="67.3279%" y="1455.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="67.0779%" y="1429" width="0.0160%" height="15" fill="rgb(254,124,47)" fg:x="4187" fg:w="1"/><text x="67.3279%" y="1439.50"></text></g><g><title>MurmurHash3 (5 samples, 0.08%)</title><rect x="67.1099%" y="1493" width="0.0801%" height="15" fill="rgb(254,110,13)" fg:x="4189" fg:w="5"/><text x="67.3599%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="67.1900%" y="1493" width="0.0641%" height="15" fill="rgb(252,57,21)" fg:x="4194" fg:w="4"/><text x="67.4400%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="67.1900%" y="1477" width="0.0641%" height="15" fill="rgb(242,60,45)" fg:x="4194" fg:w="4"/><text x="67.4400%" y="1487.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="67.1900%" y="1461" width="0.0641%" height="15" fill="rgb(234,49,30)" fg:x="4194" fg:w="4"/><text x="67.4400%" y="1471.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="67.1900%" y="1445" width="0.0641%" height="15" fill="rgb(218,98,6)" fg:x="4194" fg:w="4"/><text x="67.4400%" y="1455.50"></text></g><g><title>_int_free (6 samples, 0.10%)</title><rect x="67.2541%" y="1493" width="0.0961%" height="15" fill="rgb(220,174,29)" fg:x="4198" fg:w="6"/><text x="67.5041%" y="1503.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="67.3502%" y="1493" width="0.0160%" height="15" fill="rgb(236,163,23)" fg:x="4204" fg:w="1"/><text x="67.6002%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="67.3662%" y="1493" width="0.0320%" height="15" fill="rgb(242,114,45)" fg:x="4205" fg:w="2"/><text x="67.6162%" y="1503.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="67.3983%" y="1493" width="0.0160%" height="15" fill="rgb(232,10,53)" fg:x="4207" fg:w="1"/><text x="67.6483%" y="1503.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="67.4143%" y="1493" width="0.0160%" height="15" fill="rgb(245,108,29)" fg:x="4208" fg:w="1"/><text x="67.6643%" y="1503.50"></text></g><g><title>[unknown] (22 samples, 0.35%)</title><rect x="67.0939%" y="1509" width="0.3525%" height="15" fill="rgb(240,89,53)" fg:x="4188" fg:w="22"/><text x="67.3439%" y="1519.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_destroy (1 samples, 0.02%)</title><rect x="67.4303%" y="1493" width="0.0160%" height="15" fill="rgb(226,60,45)" fg:x="4209" fg:w="1"/><text x="67.6803%" y="1503.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (10 samples, 0.16%)</title><rect x="67.4463%" y="1333" width="0.1602%" height="15" fill="rgb(230,41,44)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1343.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (10 samples, 0.16%)</title><rect x="67.4463%" y="1317" width="0.1602%" height="15" fill="rgb(230,26,20)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1327.50"></text></g><g><title>std::__condvar::wait_until (10 samples, 0.16%)</title><rect x="67.4463%" y="1301" width="0.1602%" height="15" fill="rgb(237,170,32)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1311.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (10 samples, 0.16%)</title><rect x="67.4463%" y="1285" width="0.1602%" height="15" fill="rgb(212,35,42)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1295.50"></text></g><g><title>__futex_abstimed_wait_common (10 samples, 0.16%)</title><rect x="67.4463%" y="1269" width="0.1602%" height="15" fill="rgb(227,31,34)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1279.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="67.4463%" y="1253" width="0.1602%" height="15" fill="rgb(216,19,18)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1263.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="67.4463%" y="1237" width="0.1602%" height="15" fill="rgb(211,133,42)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1247.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="67.4463%" y="1221" width="0.1602%" height="15" fill="rgb(244,66,13)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1231.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="67.4463%" y="1205" width="0.1602%" height="15" fill="rgb(218,185,50)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1215.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="67.4463%" y="1189" width="0.1602%" height="15" fill="rgb(219,149,13)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1199.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="67.4463%" y="1173" width="0.1602%" height="15" fill="rgb(221,125,0)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1183.50"></text></g><g><title>[unknown] (10 samples, 0.16%)</title><rect x="67.4463%" y="1157" width="0.1602%" height="15" fill="rgb(247,126,27)" fg:x="4210" fg:w="10"/><text x="67.6963%" y="1167.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="67.4624%" y="1141" width="0.1442%" height="15" fill="rgb(250,138,30)" fg:x="4211" fg:w="9"/><text x="67.7124%" y="1151.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="67.4624%" y="1125" width="0.1442%" height="15" fill="rgb(230,151,9)" fg:x="4211" fg:w="9"/><text x="67.7124%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="67.4784%" y="1109" width="0.1282%" height="15" fill="rgb(233,80,38)" fg:x="4212" fg:w="8"/><text x="67.7284%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="67.5104%" y="1093" width="0.0961%" height="15" fill="rgb(232,68,43)" fg:x="4214" fg:w="6"/><text x="67.7604%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="67.5104%" y="1077" width="0.0961%" height="15" fill="rgb(254,5,50)" fg:x="4214" fg:w="6"/><text x="67.7604%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="67.5104%" y="1061" width="0.0961%" height="15" fill="rgb(225,45,5)" fg:x="4214" fg:w="6"/><text x="67.7604%" y="1071.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="67.5104%" y="1045" width="0.0961%" height="15" fill="rgb(239,22,3)" fg:x="4214" fg:w="6"/><text x="67.7604%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.5585%" y="1029" width="0.0481%" height="15" fill="rgb(243,129,0)" fg:x="4217" fg:w="3"/><text x="67.8085%" y="1039.50"></text></g><g><title>MurmurHash3 (1 samples, 0.02%)</title><rect x="67.6065%" y="1173" width="0.0160%" height="15" fill="rgb(223,164,0)" fg:x="4220" fg:w="1"/><text x="67.8565%" y="1183.50"></text></g><g><title>CRollingBloomFilter::insert (5 samples, 0.08%)</title><rect x="68.3755%" y="1109" width="0.0801%" height="15" fill="rgb(221,46,29)" fg:x="4268" fg:w="5"/><text x="68.6255%" y="1119.50"></text></g><g><title>FastRange32 (5 samples, 0.08%)</title><rect x="68.4556%" y="1109" width="0.0801%" height="15" fill="rgb(205,97,47)" fg:x="4273" fg:w="5"/><text x="68.7056%" y="1119.50"></text></g><g><title>RollingBloomHash (5 samples, 0.08%)</title><rect x="68.5357%" y="1109" width="0.0801%" height="15" fill="rgb(249,14,8)" fg:x="4278" fg:w="5"/><text x="68.7857%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (5 samples, 0.08%)</title><rect x="68.6158%" y="1109" width="0.0801%" height="15" fill="rgb(216,77,3)" fg:x="4283" fg:w="5"/><text x="68.8658%" y="1119.50"></text></g><g><title>CRollingBloomFilter::insert (39 samples, 0.62%)</title><rect x="68.1032%" y="1125" width="0.6248%" height="15" fill="rgb(206,168,54)" fg:x="4251" fg:w="39"/><text x="68.3532%" y="1135.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (2 samples, 0.03%)</title><rect x="68.6959%" y="1109" width="0.0320%" height="15" fill="rgb(236,3,41)" fg:x="4288" fg:w="2"/><text x="68.9459%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="69.5610%" y="1109" width="0.1282%" height="15" fill="rgb(231,132,24)" fg:x="4342" fg:w="8"/><text x="69.8110%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="69.5771%" y="1093" width="0.1121%" height="15" fill="rgb(227,221,40)" fg:x="4343" fg:w="7"/><text x="69.8271%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="69.5771%" y="1077" width="0.1121%" height="15" fill="rgb(233,151,11)" fg:x="4343" fg:w="7"/><text x="69.8271%" y="1087.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="69.5771%" y="1061" width="0.1121%" height="15" fill="rgb(247,81,35)" fg:x="4343" fg:w="7"/><text x="69.8271%" y="1071.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="69.5771%" y="1045" width="0.1121%" height="15" fill="rgb(243,128,48)" fg:x="4343" fg:w="7"/><text x="69.8271%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="69.5931%" y="1029" width="0.0961%" height="15" fill="rgb(253,16,10)" fg:x="4344" fg:w="6"/><text x="69.8431%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="69.5931%" y="1013" width="0.0961%" height="15" fill="rgb(228,67,27)" fg:x="4344" fg:w="6"/><text x="69.8431%" y="1023.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="69.5931%" y="997" width="0.0961%" height="15" fill="rgb(231,105,25)" fg:x="4344" fg:w="6"/><text x="69.8431%" y="1007.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="69.5931%" y="981" width="0.0961%" height="15" fill="rgb(213,166,47)" fg:x="4344" fg:w="6"/><text x="69.8431%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="69.5931%" y="965" width="0.0961%" height="15" fill="rgb(209,27,10)" fg:x="4344" fg:w="6"/><text x="69.8431%" y="975.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="69.5931%" y="949" width="0.0961%" height="15" fill="rgb(241,44,30)" fg:x="4344" fg:w="6"/><text x="69.8431%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.6411%" y="933" width="0.0481%" height="15" fill="rgb(223,216,15)" fg:x="4347" fg:w="3"/><text x="69.8911%" y="943.50"></text></g><g><title>MurmurHash3 (75 samples, 1.20%)</title><rect x="68.7280%" y="1125" width="1.2015%" height="15" fill="rgb(227,14,7)" fg:x="4290" fg:w="75"/><text x="68.9780%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (15 samples, 0.24%)</title><rect x="69.6892%" y="1109" width="0.2403%" height="15" fill="rgb(237,14,5)" fg:x="4350" fg:w="15"/><text x="69.9392%" y="1119.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (15 samples, 0.24%)</title><rect x="69.6892%" y="1093" width="0.2403%" height="15" fill="rgb(232,14,36)" fg:x="4350" fg:w="15"/><text x="69.9392%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="69.8654%" y="1077" width="0.0641%" height="15" fill="rgb(234,0,38)" fg:x="4361" fg:w="4"/><text x="70.1154%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="1061" width="0.0481%" height="15" fill="rgb(207,170,14)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="1045" width="0.0481%" height="15" fill="rgb(252,45,13)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="1029" width="0.0481%" height="15" fill="rgb(213,142,7)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="1013" width="0.0481%" height="15" fill="rgb(216,157,23)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="997" width="0.0481%" height="15" fill="rgb(212,145,33)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="981" width="0.0481%" height="15" fill="rgb(233,26,13)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="965" width="0.0481%" height="15" fill="rgb(219,196,19)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="949" width="0.0481%" height="15" fill="rgb(246,56,21)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="933" width="0.0481%" height="15" fill="rgb(222,28,53)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.8814%" y="917" width="0.0481%" height="15" fill="rgb(224,5,27)" fg:x="4362" fg:w="3"/><text x="70.1314%" y="927.50"></text></g><g><title>CRollingBloomFilter::insert (121 samples, 1.94%)</title><rect x="68.0070%" y="1141" width="1.9385%" height="15" fill="rgb(220,153,33)" fg:x="4245" fg:w="121"/><text x="68.2570%" y="1151.50">C..</text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9295%" y="1125" width="0.0160%" height="15" fill="rgb(226,58,19)" fg:x="4365" fg:w="1"/><text x="70.1795%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9295%" y="1109" width="0.0160%" height="15" fill="rgb(239,112,23)" fg:x="4365" fg:w="1"/><text x="70.1795%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9295%" y="1093" width="0.0160%" height="15" fill="rgb(251,213,20)" fg:x="4365" fg:w="1"/><text x="70.1795%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9295%" y="1077" width="0.0160%" height="15" fill="rgb(215,181,21)" fg:x="4365" fg:w="1"/><text x="70.1795%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9295%" y="1061" width="0.0160%" height="15" fill="rgb(240,8,35)" fg:x="4365" fg:w="1"/><text x="70.1795%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9295%" y="1045" width="0.0160%" height="15" fill="rgb(232,203,3)" fg:x="4365" fg:w="1"/><text x="70.1795%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9295%" y="1029" width="0.0160%" height="15" fill="rgb(214,202,43)" fg:x="4365" fg:w="1"/><text x="70.1795%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9295%" y="1013" width="0.0160%" height="15" fill="rgb(254,35,11)" fg:x="4365" fg:w="1"/><text x="70.1795%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9295%" y="997" width="0.0160%" height="15" fill="rgb(239,173,13)" fg:x="4365" fg:w="1"/><text x="70.1795%" y="1007.50"></text></g><g><title>FastRange32 (6 samples, 0.10%)</title><rect x="69.9455%" y="1141" width="0.0961%" height="15" fill="rgb(220,141,0)" fg:x="4366" fg:w="6"/><text x="70.1955%" y="1151.50"></text></g><g><title>RollingBloomHash (3 samples, 0.05%)</title><rect x="70.0417%" y="1141" width="0.0481%" height="15" fill="rgb(210,98,12)" fg:x="4372" fg:w="3"/><text x="70.2917%" y="1151.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (4 samples, 0.06%)</title><rect x="70.0897%" y="1141" width="0.0641%" height="15" fill="rgb(254,153,22)" fg:x="4375" fg:w="4"/><text x="70.3397%" y="1151.50"></text></g><g><title>CRollingBloomFilter::insert (159 samples, 2.55%)</title><rect x="67.6226%" y="1157" width="2.5473%" height="15" fill="rgb(247,223,17)" fg:x="4221" fg:w="159"/><text x="67.8726%" y="1167.50">CR..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (1 samples, 0.02%)</title><rect x="70.1538%" y="1141" width="0.0160%" height="15" fill="rgb(246,56,7)" fg:x="4379" fg:w="1"/><text x="70.4038%" y="1151.50"></text></g><g><title>MurmurHash3 (50 samples, 0.80%)</title><rect x="70.1698%" y="1157" width="0.8010%" height="15" fill="rgb(240,226,12)" fg:x="4380" fg:w="50"/><text x="70.4198%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (7 samples, 0.11%)</title><rect x="70.8587%" y="1141" width="0.1121%" height="15" fill="rgb(205,87,46)" fg:x="4423" fg:w="7"/><text x="71.1087%" y="1151.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (7 samples, 0.11%)</title><rect x="70.8587%" y="1125" width="0.1121%" height="15" fill="rgb(245,214,51)" fg:x="4423" fg:w="7"/><text x="71.1087%" y="1135.50"></text></g><g><title>TxOrphanage::EraseForBlock (1 samples, 0.02%)</title><rect x="70.9708%" y="1157" width="0.0160%" height="15" fill="rgb(223,172,33)" fg:x="4430" fg:w="1"/><text x="71.2208%" y="1167.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="70.9708%" y="1141" width="0.0160%" height="15" fill="rgb(227,203,34)" fg:x="4430" fg:w="1"/><text x="71.2208%" y="1151.50"></text></g><g><title>TxOrphanage::EraseForBlock (1 samples, 0.02%)</title><rect x="70.9708%" y="1125" width="0.0160%" height="15" fill="rgb(248,143,44)" fg:x="4430" fg:w="1"/><text x="71.2208%" y="1135.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (212 samples, 3.40%)</title><rect x="67.6065%" y="1269" width="3.3963%" height="15" fill="rgb(226,162,5)" fg:x="4220" fg:w="212"/><text x="67.8565%" y="1279.50">__i..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (212 samples, 3.40%)</title><rect x="67.6065%" y="1253" width="3.3963%" height="15" fill="rgb(211,143,1)" fg:x="4220" fg:w="212"/><text x="67.8565%" y="1263.50">__i..</text></g><g><title>operator (212 samples, 3.40%)</title><rect x="67.6065%" y="1237" width="3.3963%" height="15" fill="rgb(224,96,15)" fg:x="4220" fg:w="212"/><text x="67.8565%" y="1247.50">ope..</text></g><g><title>operator (212 samples, 3.40%)</title><rect x="67.6065%" y="1221" width="3.3963%" height="15" fill="rgb(222,4,38)" fg:x="4220" fg:w="212"/><text x="67.8565%" y="1231.50">ope..</text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (212 samples, 3.40%)</title><rect x="67.6065%" y="1205" width="3.3963%" height="15" fill="rgb(253,228,15)" fg:x="4220" fg:w="212"/><text x="67.8565%" y="1215.50">Ite..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (212 samples, 3.40%)</title><rect x="67.6065%" y="1189" width="3.3963%" height="15" fill="rgb(242,194,12)" fg:x="4220" fg:w="212"/><text x="67.8565%" y="1199.50">std..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (211 samples, 3.38%)</title><rect x="67.6226%" y="1173" width="3.3803%" height="15" fill="rgb(214,177,31)" fg:x="4221" fg:w="211"/><text x="67.8726%" y="1183.50">nod..</text></g><g><title>node::TxDownloadManagerImpl::RecentConfirmedTransactionsFilter (1 samples, 0.02%)</title><rect x="70.9869%" y="1157" width="0.0160%" height="15" fill="rgb(226,58,51)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1167.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CRollingBloomFilter&gt;::__single_object std::make_unique&lt;CRollingBloomFilter, int, double&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="1141" width="0.0160%" height="15" fill="rgb(250,119,16)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1151.50"></text></g><g><title>CRollingBloomFilter::CRollingBloomFilter (1 samples, 0.02%)</title><rect x="70.9869%" y="1125" width="0.0160%" height="15" fill="rgb(223,128,53)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1135.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="70.9869%" y="1109" width="0.0160%" height="15" fill="rgb(251,199,15)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="70.9869%" y="1093" width="0.0160%" height="15" fill="rgb(235,168,42)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1103.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="1077" width="0.0160%" height="15" fill="rgb(250,210,17)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1087.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="1061" width="0.0160%" height="15" fill="rgb(226,36,41)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1071.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="1045" width="0.0160%" height="15" fill="rgb(225,87,10)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1055.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="1029" width="0.0160%" height="15" fill="rgb(228,83,9)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1039.50"></text></g><g><title>unsigned long* std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="1013" width="0.0160%" height="15" fill="rgb(225,16,36)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1023.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="997" width="0.0160%" height="15" fill="rgb(242,198,13)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="1007.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="981" width="0.0160%" height="15" fill="rgb(239,25,51)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="991.50"></text></g><g><title>void std::__fill_a&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="965" width="0.0160%" height="15" fill="rgb(239,28,37)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="975.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;unsigned long&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="70.9869%" y="949" width="0.0160%" height="15" fill="rgb(234,70,17)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="959.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="70.9869%" y="933" width="0.0160%" height="15" fill="rgb(231,215,53)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="917" width="0.0160%" height="15" fill="rgb(218,140,42)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="901" width="0.0160%" height="15" fill="rgb(233,227,45)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="885" width="0.0160%" height="15" fill="rgb(225,189,21)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="869" width="0.0160%" height="15" fill="rgb(237,176,54)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="853" width="0.0160%" height="15" fill="rgb(215,131,46)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="837" width="0.0160%" height="15" fill="rgb(218,95,20)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="821" width="0.0160%" height="15" fill="rgb(208,198,12)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="805" width="0.0160%" height="15" fill="rgb(239,107,50)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="789" width="0.0160%" height="15" fill="rgb(240,217,37)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="773" width="0.0160%" height="15" fill="rgb(242,197,49)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9869%" y="757" width="0.0160%" height="15" fill="rgb(219,171,17)" fg:x="4431" fg:w="1"/><text x="71.2369%" y="767.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="71.0349%" y="1141" width="0.0160%" height="15" fill="rgb(209,81,40)" fg:x="4434" fg:w="1"/><text x="71.2849%" y="1151.50"></text></g><g><title>operator (4 samples, 0.06%)</title><rect x="71.0029%" y="1221" width="0.0641%" height="15" fill="rgb(237,156,30)" fg:x="4432" fg:w="4"/><text x="71.2529%" y="1231.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (4 samples, 0.06%)</title><rect x="71.0029%" y="1205" width="0.0641%" height="15" fill="rgb(212,127,16)" fg:x="4432" fg:w="4"/><text x="71.2529%" y="1215.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (4 samples, 0.06%)</title><rect x="71.0029%" y="1189" width="0.0641%" height="15" fill="rgb(226,66,32)" fg:x="4432" fg:w="4"/><text x="71.2529%" y="1199.50"></text></g><g><title>CBlockPolicyEstimator::processBlock (4 samples, 0.06%)</title><rect x="71.0029%" y="1173" width="0.0641%" height="15" fill="rgb(245,22,46)" fg:x="4432" fg:w="4"/><text x="71.2529%" y="1183.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (4 samples, 0.06%)</title><rect x="71.0029%" y="1157" width="0.0641%" height="15" fill="rgb(210,112,21)" fg:x="4432" fg:w="4"/><text x="71.2529%" y="1167.50"></text></g><g><title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="71.0509%" y="1141" width="0.0160%" height="15" fill="rgb(207,118,39)" fg:x="4435" fg:w="1"/><text x="71.3009%" y="1151.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (217 samples, 3.48%)</title><rect x="67.6065%" y="1301" width="3.4764%" height="15" fill="rgb(205,206,35)" fg:x="4220" fg:w="217"/><text x="67.8565%" y="1311.50">std..</text></g><g><title>_M_invoke (217 samples, 3.48%)</title><rect x="67.6065%" y="1285" width="3.4764%" height="15" fill="rgb(222,120,2)" fg:x="4220" fg:w="217"/><text x="67.8565%" y="1295.50">_M_..</text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (5 samples, 0.08%)</title><rect x="71.0029%" y="1269" width="0.0801%" height="15" fill="rgb(205,38,18)" fg:x="4432" fg:w="5"/><text x="71.2529%" y="1279.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (5 samples, 0.08%)</title><rect x="71.0029%" y="1253" width="0.0801%" height="15" fill="rgb(226,61,2)" fg:x="4432" fg:w="5"/><text x="71.2529%" y="1263.50"></text></g><g><title>operator (5 samples, 0.08%)</title><rect x="71.0029%" y="1237" width="0.0801%" height="15" fill="rgb(242,161,23)" fg:x="4432" fg:w="5"/><text x="71.2529%" y="1247.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (1 samples, 0.02%)</title><rect x="71.0670%" y="1221" width="0.0160%" height="15" fill="rgb(213,13,52)" fg:x="4436" fg:w="1"/><text x="71.3170%" y="1231.50"></text></g><g><title>BCLog::Logger::WillLogCategoryLevel (1 samples, 0.02%)</title><rect x="71.0670%" y="1205" width="0.0160%" height="15" fill="rgb(246,209,47)" fg:x="4436" fg:w="1"/><text x="71.3170%" y="1215.50"></text></g><g><title>StdLockGuard::~StdLockGuard (1 samples, 0.02%)</title><rect x="71.0670%" y="1189" width="0.0160%" height="15" fill="rgb(214,41,3)" fg:x="4436" fg:w="1"/><text x="71.3170%" y="1199.50"></text></g><g><title>std::lock_guard&lt;StdMutex&gt;::~lock_guard (1 samples, 0.02%)</title><rect x="71.0670%" y="1173" width="0.0160%" height="15" fill="rgb(236,119,38)" fg:x="4436" fg:w="1"/><text x="71.3170%" y="1183.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.02%)</title><rect x="71.0670%" y="1157" width="0.0160%" height="15" fill="rgb(218,50,11)" fg:x="4436" fg:w="1"/><text x="71.3170%" y="1167.50"></text></g><g><title>BCLog::Logger::WillLogCategoryLevel (1 samples, 0.02%)</title><rect x="71.0670%" y="1141" width="0.0160%" height="15" fill="rgb(228,38,11)" fg:x="4436" fg:w="1"/><text x="71.3170%" y="1151.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="71.0670%" y="1125" width="0.0160%" height="15" fill="rgb(212,13,9)" fg:x="4436" fg:w="1"/><text x="71.3170%" y="1135.50"></text></g><g><title>__GI___lll_lock_wait (1 samples, 0.02%)</title><rect x="71.0670%" y="1109" width="0.0160%" height="15" fill="rgb(208,211,9)" fg:x="4436" fg:w="1"/><text x="71.3170%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.0670%" y="1093" width="0.0160%" height="15" fill="rgb(239,39,32)" fg:x="4436" fg:w="1"/><text x="71.3170%" y="1103.50"></text></g><g><title>__lll_lock_wait_private (2 samples, 0.03%)</title><rect x="71.1310%" y="853" width="0.0320%" height="15" fill="rgb(254,179,26)" fg:x="4440" fg:w="2"/><text x="71.3810%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="71.1310%" y="837" width="0.0320%" height="15" fill="rgb(249,165,28)" fg:x="4440" fg:w="2"/><text x="71.3810%" y="847.50"></text></g><g><title>__lll_lock_wake_private (8 samples, 0.13%)</title><rect x="71.1631%" y="853" width="0.1282%" height="15" fill="rgb(225,59,50)" fg:x="4442" fg:w="8"/><text x="71.4131%" y="863.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="71.1631%" y="837" width="0.1282%" height="15" fill="rgb(209,122,5)" fg:x="4442" fg:w="8"/><text x="71.4131%" y="847.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="71.1791%" y="821" width="0.1121%" height="15" fill="rgb(214,65,34)" fg:x="4443" fg:w="7"/><text x="71.4291%" y="831.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="71.1791%" y="805" width="0.1121%" height="15" fill="rgb(249,183,32)" fg:x="4443" fg:w="7"/><text x="71.4291%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="71.2112%" y="789" width="0.0801%" height="15" fill="rgb(218,122,24)" fg:x="4445" fg:w="5"/><text x="71.4612%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.2432%" y="773" width="0.0481%" height="15" fill="rgb(224,109,18)" fg:x="4447" fg:w="3"/><text x="71.4932%" y="783.50"></text></g><g><title>__lll_lock_wait_private (62 samples, 0.99%)</title><rect x="71.5316%" y="837" width="0.9933%" height="15" fill="rgb(210,68,50)" fg:x="4465" fg:w="62"/><text x="71.7816%" y="847.50"></text></g><g><title>[unknown] (60 samples, 0.96%)</title><rect x="71.5636%" y="821" width="0.9612%" height="15" fill="rgb(212,184,34)" fg:x="4467" fg:w="60"/><text x="71.8136%" y="831.50"></text></g><g><title>[unknown] (59 samples, 0.95%)</title><rect x="71.5796%" y="805" width="0.9452%" height="15" fill="rgb(238,105,48)" fg:x="4468" fg:w="59"/><text x="71.8296%" y="815.50"></text></g><g><title>[unknown] (57 samples, 0.91%)</title><rect x="71.6117%" y="789" width="0.9132%" height="15" fill="rgb(222,134,54)" fg:x="4470" fg:w="57"/><text x="71.8617%" y="799.50"></text></g><g><title>[unknown] (50 samples, 0.80%)</title><rect x="71.7238%" y="773" width="0.8010%" height="15" fill="rgb(246,24,43)" fg:x="4477" fg:w="50"/><text x="71.9738%" y="783.50"></text></g><g><title>[unknown] (49 samples, 0.79%)</title><rect x="71.7398%" y="757" width="0.7850%" height="15" fill="rgb(227,169,22)" fg:x="4478" fg:w="49"/><text x="71.9898%" y="767.50"></text></g><g><title>[unknown] (44 samples, 0.70%)</title><rect x="71.8199%" y="741" width="0.7049%" height="15" fill="rgb(253,152,4)" fg:x="4483" fg:w="44"/><text x="72.0699%" y="751.50"></text></g><g><title>[unknown] (42 samples, 0.67%)</title><rect x="71.8520%" y="725" width="0.6729%" height="15" fill="rgb(219,158,36)" fg:x="4485" fg:w="42"/><text x="72.1020%" y="735.50"></text></g><g><title>[unknown] (35 samples, 0.56%)</title><rect x="71.9641%" y="709" width="0.5607%" height="15" fill="rgb(251,128,40)" fg:x="4492" fg:w="35"/><text x="72.2141%" y="719.50"></text></g><g><title>[unknown] (31 samples, 0.50%)</title><rect x="72.0282%" y="693" width="0.4966%" height="15" fill="rgb(254,101,39)" fg:x="4496" fg:w="31"/><text x="72.2782%" y="703.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="72.1564%" y="677" width="0.3685%" height="15" fill="rgb(221,168,40)" fg:x="4504" fg:w="23"/><text x="72.4064%" y="687.50"></text></g><g><title>[unknown] (13 samples, 0.21%)</title><rect x="72.3166%" y="661" width="0.2083%" height="15" fill="rgb(221,14,27)" fg:x="4514" fg:w="13"/><text x="72.5666%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="72.4287%" y="645" width="0.0961%" height="15" fill="rgb(207,36,43)" fg:x="4521" fg:w="6"/><text x="72.6787%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="72.4607%" y="629" width="0.0641%" height="15" fill="rgb(240,172,53)" fg:x="4523" fg:w="4"/><text x="72.7107%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.4768%" y="613" width="0.0481%" height="15" fill="rgb(241,138,43)" fg:x="4524" fg:w="3"/><text x="72.7268%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="72.4928%" y="597" width="0.0320%" height="15" fill="rgb(227,78,19)" fg:x="4525" fg:w="2"/><text x="72.7428%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="72.4928%" y="581" width="0.0320%" height="15" fill="rgb(215,127,44)" fg:x="4525" fg:w="2"/><text x="72.7428%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5088%" y="565" width="0.0160%" height="15" fill="rgb(227,13,10)" fg:x="4526" fg:w="1"/><text x="72.7588%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5088%" y="549" width="0.0160%" height="15" fill="rgb(249,177,6)" fg:x="4526" fg:w="1"/><text x="72.7588%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5088%" y="533" width="0.0160%" height="15" fill="rgb(215,154,26)" fg:x="4526" fg:w="1"/><text x="72.7588%" y="543.50"></text></g><g><title>cfree@GLIBC_2.2.5 (96 samples, 1.54%)</title><rect x="71.0830%" y="869" width="1.5380%" height="15" fill="rgb(250,168,20)" fg:x="4437" fg:w="96"/><text x="71.3330%" y="879.50"></text></g><g><title>_int_free (83 samples, 1.33%)</title><rect x="71.2913%" y="853" width="1.3297%" height="15" fill="rgb(222,53,38)" fg:x="4450" fg:w="83"/><text x="71.5413%" y="863.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (6 samples, 0.10%)</title><rect x="72.5248%" y="837" width="0.0961%" height="15" fill="rgb(245,154,5)" fg:x="4527" fg:w="6"/><text x="72.7748%" y="847.50"></text></g><g><title>malloc_consolidate (6 samples, 0.10%)</title><rect x="72.5248%" y="821" width="0.0961%" height="15" fill="rgb(214,89,50)" fg:x="4527" fg:w="6"/><text x="72.7748%" y="831.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="72.5569%" y="805" width="0.0641%" height="15" fill="rgb(232,73,14)" fg:x="4529" fg:w="4"/><text x="72.8069%" y="815.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="789" width="0.0481%" height="15" fill="rgb(230,101,20)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="773" width="0.0481%" height="15" fill="rgb(208,56,28)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="783.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="757" width="0.0481%" height="15" fill="rgb(247,205,22)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="741" width="0.0481%" height="15" fill="rgb(252,109,51)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="725" width="0.0481%" height="15" fill="rgb(220,40,24)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="709" width="0.0481%" height="15" fill="rgb(251,108,7)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="693" width="0.0481%" height="15" fill="rgb(238,102,51)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="677" width="0.0481%" height="15" fill="rgb(219,149,34)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="661" width="0.0481%" height="15" fill="rgb(239,70,0)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.5729%" y="645" width="0.0481%" height="15" fill="rgb(246,214,23)" fg:x="4530" fg:w="3"/><text x="72.8229%" y="655.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.02%)</title><rect x="72.6370%" y="629" width="0.0160%" height="15" fill="rgb(239,221,51)" fg:x="4534" fg:w="1"/><text x="72.8870%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.6370%" y="613" width="0.0160%" height="15" fill="rgb(254,62,14)" fg:x="4534" fg:w="1"/><text x="72.8870%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.6370%" y="597" width="0.0160%" height="15" fill="rgb(253,57,33)" fg:x="4534" fg:w="1"/><text x="72.8870%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.6370%" y="581" width="0.0160%" height="15" fill="rgb(229,34,6)" fg:x="4534" fg:w="1"/><text x="72.8870%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.6370%" y="565" width="0.0160%" height="15" fill="rgb(235,191,23)" fg:x="4534" fg:w="1"/><text x="72.8870%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.6370%" y="549" width="0.0160%" height="15" fill="rgb(217,207,27)" fg:x="4534" fg:w="1"/><text x="72.8870%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.6370%" y="533" width="0.0160%" height="15" fill="rgb(232,41,44)" fg:x="4534" fg:w="1"/><text x="72.8870%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.6370%" y="517" width="0.0160%" height="15" fill="rgb(221,188,19)" fg:x="4534" fg:w="1"/><text x="72.8870%" y="527.50"></text></g><g><title>CScript::~CScript (2 samples, 0.03%)</title><rect x="72.6370%" y="677" width="0.0320%" height="15" fill="rgb(245,180,45)" fg:x="4534" fg:w="2"/><text x="72.8870%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (2 samples, 0.03%)</title><rect x="72.6370%" y="661" width="0.0320%" height="15" fill="rgb(250,220,42)" fg:x="4534" fg:w="2"/><text x="72.8870%" y="671.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="72.6370%" y="645" width="0.0320%" height="15" fill="rgb(234,16,34)" fg:x="4534" fg:w="2"/><text x="72.8870%" y="655.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="72.6530%" y="629" width="0.0160%" height="15" fill="rgb(233,217,23)" fg:x="4535" fg:w="1"/><text x="72.9030%" y="639.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="72.6530%" y="613" width="0.0160%" height="15" fill="rgb(209,22,46)" fg:x="4535" fg:w="1"/><text x="72.9030%" y="623.50"></text></g><g><title>_int_free (7 samples, 0.11%)</title><rect x="72.6850%" y="549" width="0.1121%" height="15" fill="rgb(213,101,18)" fg:x="4537" fg:w="7"/><text x="72.9350%" y="559.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.14%)</title><rect x="72.6690%" y="565" width="0.1442%" height="15" fill="rgb(215,179,52)" fg:x="4536" fg:w="9"/><text x="72.9190%" y="575.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="72.7972%" y="549" width="0.0160%" height="15" fill="rgb(223,50,25)" fg:x="4544" fg:w="1"/><text x="73.0472%" y="559.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="72.8132%" y="565" width="0.0160%" height="15" fill="rgb(224,51,44)" fg:x="4545" fg:w="1"/><text x="73.0632%" y="575.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (11 samples, 0.18%)</title><rect x="72.6690%" y="645" width="0.1762%" height="15" fill="rgb(224,13,54)" fg:x="4536" fg:w="11"/><text x="72.9190%" y="655.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (11 samples, 0.18%)</title><rect x="72.6690%" y="629" width="0.1762%" height="15" fill="rgb(219,58,47)" fg:x="4536" fg:w="11"/><text x="72.9190%" y="639.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (11 samples, 0.18%)</title><rect x="72.6690%" y="613" width="0.1762%" height="15" fill="rgb(246,124,34)" fg:x="4536" fg:w="11"/><text x="72.9190%" y="623.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (11 samples, 0.18%)</title><rect x="72.6690%" y="597" width="0.1762%" height="15" fill="rgb(245,109,25)" fg:x="4536" fg:w="11"/><text x="72.9190%" y="607.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (11 samples, 0.18%)</title><rect x="72.6690%" y="581" width="0.1762%" height="15" fill="rgb(235,48,23)" fg:x="4536" fg:w="11"/><text x="72.9190%" y="591.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="72.8292%" y="565" width="0.0160%" height="15" fill="rgb(229,203,36)" fg:x="4546" fg:w="1"/><text x="73.0792%" y="575.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="72.9414%" y="437" width="0.0160%" height="15" fill="rgb(234,180,9)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.9414%" y="421" width="0.0160%" height="15" fill="rgb(228,98,45)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.9414%" y="405" width="0.0160%" height="15" fill="rgb(240,24,36)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.9414%" y="389" width="0.0160%" height="15" fill="rgb(227,154,19)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.9414%" y="373" width="0.0160%" height="15" fill="rgb(231,2,48)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.9414%" y="357" width="0.0160%" height="15" fill="rgb(219,216,0)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.9414%" y="341" width="0.0160%" height="15" fill="rgb(251,88,0)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.9414%" y="325" width="0.0160%" height="15" fill="rgb(242,45,45)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.9414%" y="309" width="0.0160%" height="15" fill="rgb(218,149,45)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.9414%" y="293" width="0.0160%" height="15" fill="rgb(247,194,10)" fg:x="4553" fg:w="1"/><text x="73.1914%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.14%)</title><rect x="72.8452%" y="469" width="0.1442%" height="15" fill="rgb(234,33,37)" fg:x="4547" fg:w="9"/><text x="73.0952%" y="479.50"></text></g><g><title>_int_free (8 samples, 0.13%)</title><rect x="72.8613%" y="453" width="0.1282%" height="15" fill="rgb(218,61,13)" fg:x="4548" fg:w="8"/><text x="73.1113%" y="463.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (2 samples, 0.03%)</title><rect x="72.9574%" y="437" width="0.0320%" height="15" fill="rgb(210,80,52)" fg:x="4554" fg:w="2"/><text x="73.2074%" y="447.50"></text></g><g><title>malloc_consolidate (2 samples, 0.03%)</title><rect x="72.9574%" y="421" width="0.0320%" height="15" fill="rgb(218,203,27)" fg:x="4554" fg:w="2"/><text x="73.2074%" y="431.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (23 samples, 0.37%)</title><rect x="72.6370%" y="789" width="0.3685%" height="15" fill="rgb(209,126,33)" fg:x="4534" fg:w="23"/><text x="72.8870%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (23 samples, 0.37%)</title><rect x="72.6370%" y="773" width="0.3685%" height="15" fill="rgb(234,173,41)" fg:x="4534" fg:w="23"/><text x="72.8870%" y="783.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (23 samples, 0.37%)</title><rect x="72.6370%" y="757" width="0.3685%" height="15" fill="rgb(228,166,9)" fg:x="4534" fg:w="23"/><text x="72.8870%" y="767.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (23 samples, 0.37%)</title><rect x="72.6370%" y="741" width="0.3685%" height="15" fill="rgb(208,124,43)" fg:x="4534" fg:w="23"/><text x="72.8870%" y="751.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (23 samples, 0.37%)</title><rect x="72.6370%" y="725" width="0.3685%" height="15" fill="rgb(212,154,38)" fg:x="4534" fg:w="23"/><text x="72.8870%" y="735.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (23 samples, 0.37%)</title><rect x="72.6370%" y="709" width="0.3685%" height="15" fill="rgb(246,179,35)" fg:x="4534" fg:w="23"/><text x="72.8870%" y="719.50"></text></g><g><title>CTxIn::~CTxIn (23 samples, 0.37%)</title><rect x="72.6370%" y="693" width="0.3685%" height="15" fill="rgb(251,3,50)" fg:x="4534" fg:w="23"/><text x="72.8870%" y="703.50"></text></g><g><title>CScriptWitness::~CScriptWitness (21 samples, 0.34%)</title><rect x="72.6690%" y="677" width="0.3364%" height="15" fill="rgb(219,96,8)" fg:x="4536" fg:w="21"/><text x="72.9190%" y="687.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (21 samples, 0.34%)</title><rect x="72.6690%" y="661" width="0.3364%" height="15" fill="rgb(251,216,33)" fg:x="4536" fg:w="21"/><text x="72.9190%" y="671.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (10 samples, 0.16%)</title><rect x="72.8452%" y="645" width="0.1602%" height="15" fill="rgb(243,145,29)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="655.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (10 samples, 0.16%)</title><rect x="72.8452%" y="629" width="0.1602%" height="15" fill="rgb(210,75,20)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="639.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (10 samples, 0.16%)</title><rect x="72.8452%" y="613" width="0.1602%" height="15" fill="rgb(235,56,8)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="623.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (10 samples, 0.16%)</title><rect x="72.8452%" y="597" width="0.1602%" height="15" fill="rgb(226,175,49)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="607.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (10 samples, 0.16%)</title><rect x="72.8452%" y="581" width="0.1602%" height="15" fill="rgb(242,204,23)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="591.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (10 samples, 0.16%)</title><rect x="72.8452%" y="565" width="0.1602%" height="15" fill="rgb(225,104,24)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="575.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (10 samples, 0.16%)</title><rect x="72.8452%" y="549" width="0.1602%" height="15" fill="rgb(253,34,1)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="559.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (10 samples, 0.16%)</title><rect x="72.8452%" y="533" width="0.1602%" height="15" fill="rgb(233,199,23)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="543.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (10 samples, 0.16%)</title><rect x="72.8452%" y="517" width="0.1602%" height="15" fill="rgb(247,7,51)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="527.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (10 samples, 0.16%)</title><rect x="72.8452%" y="501" width="0.1602%" height="15" fill="rgb(214,146,12)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="511.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (10 samples, 0.16%)</title><rect x="72.8452%" y="485" width="0.1602%" height="15" fill="rgb(234,181,43)" fg:x="4547" fg:w="10"/><text x="73.0952%" y="495.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="72.9894%" y="469" width="0.0160%" height="15" fill="rgb(239,148,6)" fg:x="4556" fg:w="1"/><text x="73.2394%" y="479.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.02%)</title><rect x="73.0375%" y="677" width="0.0160%" height="15" fill="rgb(206,151,17)" fg:x="4559" fg:w="1"/><text x="73.2875%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.0375%" y="661" width="0.0160%" height="15" fill="rgb(213,215,10)" fg:x="4559" fg:w="1"/><text x="73.2875%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.0375%" y="645" width="0.0160%" height="15" fill="rgb(215,220,44)" fg:x="4559" fg:w="1"/><text x="73.2875%" y="655.50"></text></g><g><title>__lll_lock_wait_private (4 samples, 0.06%)</title><rect x="73.0855%" y="661" width="0.0641%" height="15" fill="rgb(245,205,37)" fg:x="4562" fg:w="4"/><text x="73.3355%" y="671.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="73.0855%" y="645" width="0.0641%" height="15" fill="rgb(245,130,43)" fg:x="4562" fg:w="4"/><text x="73.3355%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="73.0855%" y="629" width="0.0641%" height="15" fill="rgb(231,227,38)" fg:x="4562" fg:w="4"/><text x="73.3355%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="73.0855%" y="613" width="0.0641%" height="15" fill="rgb(233,185,4)" fg:x="4562" fg:w="4"/><text x="73.3355%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.1016%" y="597" width="0.0481%" height="15" fill="rgb(224,154,43)" fg:x="4563" fg:w="3"/><text x="73.3516%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.1016%" y="581" width="0.0481%" height="15" fill="rgb(235,156,15)" fg:x="4563" fg:w="3"/><text x="73.3516%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.1016%" y="565" width="0.0481%" height="15" fill="rgb(211,55,43)" fg:x="4563" fg:w="3"/><text x="73.3516%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.1016%" y="549" width="0.0481%" height="15" fill="rgb(247,149,40)" fg:x="4563" fg:w="3"/><text x="73.3516%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.1016%" y="533" width="0.0481%" height="15" fill="rgb(232,171,16)" fg:x="4563" fg:w="3"/><text x="73.3516%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.1016%" y="517" width="0.0481%" height="15" fill="rgb(215,117,49)" fg:x="4563" fg:w="3"/><text x="73.3516%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.1336%" y="501" width="0.0160%" height="15" fill="rgb(246,194,11)" fg:x="4565" fg:w="1"/><text x="73.3836%" y="511.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.14%)</title><rect x="73.0215%" y="693" width="0.1442%" height="15" fill="rgb(242,101,44)" fg:x="4558" fg:w="9"/><text x="73.2715%" y="703.50"></text></g><g><title>_int_free (7 samples, 0.11%)</title><rect x="73.0535%" y="677" width="0.1121%" height="15" fill="rgb(226,174,6)" fg:x="4560" fg:w="7"/><text x="73.3035%" y="687.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.02%)</title><rect x="73.1496%" y="661" width="0.0160%" height="15" fill="rgb(213,150,20)" fg:x="4566" fg:w="1"/><text x="73.3996%" y="671.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="73.1496%" y="645" width="0.0160%" height="15" fill="rgb(222,124,42)" fg:x="4566" fg:w="1"/><text x="73.3996%" y="655.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (11 samples, 0.18%)</title><rect x="73.0054%" y="773" width="0.1762%" height="15" fill="rgb(250,19,47)" fg:x="4557" fg:w="11"/><text x="73.2554%" y="783.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (10 samples, 0.16%)</title><rect x="73.0215%" y="757" width="0.1602%" height="15" fill="rgb(241,217,19)" fg:x="4558" fg:w="10"/><text x="73.2715%" y="767.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::deallocate (10 samples, 0.16%)</title><rect x="73.0215%" y="741" width="0.1602%" height="15" fill="rgb(207,210,34)" fg:x="4558" fg:w="10"/><text x="73.2715%" y="751.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::deallocate (10 samples, 0.16%)</title><rect x="73.0215%" y="725" width="0.1602%" height="15" fill="rgb(244,45,4)" fg:x="4558" fg:w="10"/><text x="73.2715%" y="735.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::deallocate (10 samples, 0.16%)</title><rect x="73.0215%" y="709" width="0.1602%" height="15" fill="rgb(252,134,50)" fg:x="4558" fg:w="10"/><text x="73.2715%" y="719.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="73.1657%" y="693" width="0.0160%" height="15" fill="rgb(238,74,2)" fg:x="4567" fg:w="1"/><text x="73.4157%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="73.2297%" y="645" width="0.0641%" height="15" fill="rgb(226,58,46)" fg:x="4571" fg:w="4"/><text x="73.4797%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="629" width="0.0481%" height="15" fill="rgb(232,83,35)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="613" width="0.0481%" height="15" fill="rgb(212,148,47)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="597" width="0.0481%" height="15" fill="rgb(235,29,1)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="581" width="0.0481%" height="15" fill="rgb(247,55,37)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="565" width="0.0481%" height="15" fill="rgb(222,48,3)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="549" width="0.0481%" height="15" fill="rgb(234,21,33)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="533" width="0.0481%" height="15" fill="rgb(247,178,53)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="517" width="0.0481%" height="15" fill="rgb(225,75,7)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="501" width="0.0481%" height="15" fill="rgb(219,199,7)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2458%" y="485" width="0.0481%" height="15" fill="rgb(209,93,42)" fg:x="4572" fg:w="3"/><text x="73.4958%" y="495.50"></text></g><g><title>__clone (369 samples, 5.91%)</title><rect x="67.4463%" y="1509" width="5.9116%" height="15" fill="rgb(240,175,17)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1519.50">__clone</text></g><g><title>start_thread (369 samples, 5.91%)</title><rect x="67.4463%" y="1493" width="5.9116%" height="15" fill="rgb(232,106,7)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1503.50">start_th..</text></g><g><title>execute_native_thread_routine (369 samples, 5.91%)</title><rect x="67.4463%" y="1477" width="5.9116%" height="15" fill="rgb(242,106,43)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1487.50">execute_..</text></g><g><title>_M_run (369 samples, 5.91%)</title><rect x="67.4463%" y="1461" width="5.9116%" height="15" fill="rgb(242,61,37)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1471.50">_M_run</text></g><g><title>operator (369 samples, 5.91%)</title><rect x="67.4463%" y="1445" width="5.9116%" height="15" fill="rgb(205,72,10)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1455.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (369 samples, 5.91%)</title><rect x="67.4463%" y="1429" width="5.9116%" height="15" fill="rgb(214,184,36)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1439.50">_M_invok..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (369 samples, 5.91%)</title><rect x="67.4463%" y="1413" width="5.9116%" height="15" fill="rgb(206,107,18)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1423.50">__invoke..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (369 samples, 5.91%)</title><rect x="67.4463%" y="1397" width="5.9116%" height="15" fill="rgb(210,75,5)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1407.50">std::thr..</text></g><g><title>util::TraceThread (369 samples, 5.91%)</title><rect x="67.4463%" y="1381" width="5.9116%" height="15" fill="rgb(205,3,19)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1391.50">util::Tr..</text></g><g><title>std::function&lt;void ()&gt;::operator (369 samples, 5.91%)</title><rect x="67.4463%" y="1365" width="5.9116%" height="15" fill="rgb(207,181,42)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1375.50">std::fun..</text></g><g><title>CScheduler::serviceQueue (369 samples, 5.91%)</title><rect x="67.4463%" y="1349" width="5.9116%" height="15" fill="rgb(229,179,43)" fg:x="4210" fg:w="369"/><text x="67.6963%" y="1359.50">CSchedul..</text></g><g><title>std::function&lt;void ()&gt;::operator (359 samples, 5.75%)</title><rect x="67.6065%" y="1333" width="5.7514%" height="15" fill="rgb(246,95,30)" fg:x="4220" fg:w="359"/><text x="67.8565%" y="1343.50">std::fu..</text></g><g><title>SerialTaskRunner::ProcessQueue (359 samples, 5.75%)</title><rect x="67.6065%" y="1317" width="5.7514%" height="15" fill="rgb(234,144,45)" fg:x="4220" fg:w="359"/><text x="67.8565%" y="1327.50">SerialT..</text></g><g><title>std::function&lt;void ()&gt;::~function (142 samples, 2.27%)</title><rect x="71.0830%" y="1301" width="2.2749%" height="15" fill="rgb(250,54,25)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1311.50">s..</text></g><g><title>std::_Function_base::~_Function_base (142 samples, 2.27%)</title><rect x="71.0830%" y="1285" width="2.2749%" height="15" fill="rgb(215,195,40)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1295.50">s..</text></g><g><title>_M_manager (142 samples, 2.27%)</title><rect x="71.0830%" y="1269" width="2.2749%" height="15" fill="rgb(233,188,42)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1279.50">_..</text></g><g><title>_M_manager (142 samples, 2.27%)</title><rect x="71.0830%" y="1253" width="2.2749%" height="15" fill="rgb(247,227,35)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1263.50">_..</text></g><g><title>_M_destroy (142 samples, 2.27%)</title><rect x="71.0830%" y="1237" width="2.2749%" height="15" fill="rgb(249,124,27)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1247.50">_..</text></g><g><title>~&lt;lambda&gt; (142 samples, 2.27%)</title><rect x="71.0830%" y="1221" width="2.2749%" height="15" fill="rgb(219,207,25)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1231.50">~..</text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (142 samples, 2.27%)</title><rect x="71.0830%" y="1205" width="2.2749%" height="15" fill="rgb(241,216,47)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1215.50">s..</text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (142 samples, 2.27%)</title><rect x="71.0830%" y="1189" width="2.2749%" height="15" fill="rgb(233,82,50)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1199.50">s..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (142 samples, 2.27%)</title><rect x="71.0830%" y="1173" width="2.2749%" height="15" fill="rgb(232,63,2)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1183.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (142 samples, 2.27%)</title><rect x="71.0830%" y="1157" width="2.2749%" height="15" fill="rgb(236,184,28)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1167.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (142 samples, 2.27%)</title><rect x="71.0830%" y="1141" width="2.2749%" height="15" fill="rgb(254,63,27)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1151.50">s..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (142 samples, 2.27%)</title><rect x="71.0830%" y="1125" width="2.2749%" height="15" fill="rgb(253,106,28)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1135.50">s..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (142 samples, 2.27%)</title><rect x="71.0830%" y="1109" width="2.2749%" height="15" fill="rgb(225,141,39)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1119.50">v..</text></g><g><title>void std::_Destroy&lt;CBlock&gt; (142 samples, 2.27%)</title><rect x="71.0830%" y="1093" width="2.2749%" height="15" fill="rgb(222,157,20)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1103.50">v..</text></g><g><title>void std::destroy_at&lt;CBlock&gt; (142 samples, 2.27%)</title><rect x="71.0830%" y="1077" width="2.2749%" height="15" fill="rgb(210,190,9)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1087.50">v..</text></g><g><title>CBlock::~CBlock (142 samples, 2.27%)</title><rect x="71.0830%" y="1061" width="2.2749%" height="15" fill="rgb(242,167,7)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1071.50">C..</text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (142 samples, 2.27%)</title><rect x="71.0830%" y="1045" width="2.2749%" height="15" fill="rgb(227,82,41)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1055.50">s..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (142 samples, 2.27%)</title><rect x="71.0830%" y="1029" width="2.2749%" height="15" fill="rgb(222,131,13)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1039.50">v..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (142 samples, 2.27%)</title><rect x="71.0830%" y="1013" width="2.2749%" height="15" fill="rgb(221,98,26)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1023.50">v..</text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (142 samples, 2.27%)</title><rect x="71.0830%" y="997" width="2.2749%" height="15" fill="rgb(251,63,52)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="1007.50">v..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (142 samples, 2.27%)</title><rect x="71.0830%" y="981" width="2.2749%" height="15" fill="rgb(246,25,43)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="991.50">v..</text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (142 samples, 2.27%)</title><rect x="71.0830%" y="965" width="2.2749%" height="15" fill="rgb(247,167,15)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="975.50">v..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (142 samples, 2.27%)</title><rect x="71.0830%" y="949" width="2.2749%" height="15" fill="rgb(240,104,42)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="959.50">s..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (142 samples, 2.27%)</title><rect x="71.0830%" y="933" width="2.2749%" height="15" fill="rgb(224,54,6)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="943.50">s..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (142 samples, 2.27%)</title><rect x="71.0830%" y="917" width="2.2749%" height="15" fill="rgb(244,108,35)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="927.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (142 samples, 2.27%)</title><rect x="71.0830%" y="901" width="2.2749%" height="15" fill="rgb(216,154,2)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="911.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (142 samples, 2.27%)</title><rect x="71.0830%" y="885" width="2.2749%" height="15" fill="rgb(222,8,47)" fg:x="4437" fg:w="142"/><text x="71.3330%" y="895.50">s..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (46 samples, 0.74%)</title><rect x="72.6210%" y="869" width="0.7369%" height="15" fill="rgb(252,93,1)" fg:x="4533" fg:w="46"/><text x="72.8710%" y="879.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (45 samples, 0.72%)</title><rect x="72.6370%" y="853" width="0.7209%" height="15" fill="rgb(223,226,51)" fg:x="4534" fg:w="45"/><text x="72.8870%" y="863.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (45 samples, 0.72%)</title><rect x="72.6370%" y="837" width="0.7209%" height="15" fill="rgb(206,147,9)" fg:x="4534" fg:w="45"/><text x="72.8870%" y="847.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (45 samples, 0.72%)</title><rect x="72.6370%" y="821" width="0.7209%" height="15" fill="rgb(248,180,41)" fg:x="4534" fg:w="45"/><text x="72.8870%" y="831.50"></text></g><g><title>CTransaction::~CTransaction (45 samples, 0.72%)</title><rect x="72.6370%" y="805" width="0.7209%" height="15" fill="rgb(209,47,50)" fg:x="4534" fg:w="45"/><text x="72.8870%" y="815.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (22 samples, 0.35%)</title><rect x="73.0054%" y="789" width="0.3525%" height="15" fill="rgb(243,65,31)" fg:x="4557" fg:w="22"/><text x="73.2554%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (11 samples, 0.18%)</title><rect x="73.1817%" y="773" width="0.1762%" height="15" fill="rgb(228,128,1)" fg:x="4568" fg:w="11"/><text x="73.4317%" y="783.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (11 samples, 0.18%)</title><rect x="73.1817%" y="757" width="0.1762%" height="15" fill="rgb(231,192,16)" fg:x="4568" fg:w="11"/><text x="73.4317%" y="767.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (11 samples, 0.18%)</title><rect x="73.1817%" y="741" width="0.1762%" height="15" fill="rgb(224,26,40)" fg:x="4568" fg:w="11"/><text x="73.4317%" y="751.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (9 samples, 0.14%)</title><rect x="73.2137%" y="725" width="0.1442%" height="15" fill="rgb(214,192,17)" fg:x="4570" fg:w="9"/><text x="73.4637%" y="735.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (9 samples, 0.14%)</title><rect x="73.2137%" y="709" width="0.1442%" height="15" fill="rgb(225,147,18)" fg:x="4570" fg:w="9"/><text x="73.4637%" y="719.50"></text></g><g><title>CTxOut::~CTxOut (9 samples, 0.14%)</title><rect x="73.2137%" y="693" width="0.1442%" height="15" fill="rgb(205,35,11)" fg:x="4570" fg:w="9"/><text x="73.4637%" y="703.50"></text></g><g><title>CScript::~CScript (9 samples, 0.14%)</title><rect x="73.2137%" y="677" width="0.1442%" height="15" fill="rgb(242,40,42)" fg:x="4570" fg:w="9"/><text x="73.4637%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (9 samples, 0.14%)</title><rect x="73.2137%" y="661" width="0.1442%" height="15" fill="rgb(250,170,13)" fg:x="4570" fg:w="9"/><text x="73.4637%" y="671.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.06%)</title><rect x="73.2938%" y="645" width="0.0641%" height="15" fill="rgb(240,161,28)" fg:x="4575" fg:w="4"/><text x="73.5438%" y="655.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="73.3098%" y="629" width="0.0481%" height="15" fill="rgb(245,179,12)" fg:x="4576" fg:w="3"/><text x="73.5598%" y="639.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="73.3579%" y="1509" width="0.0481%" height="15" fill="rgb(250,92,32)" fg:x="4579" fg:w="3"/><text x="73.6079%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.3899%" y="1493" width="0.0160%" height="15" fill="rgb(233,10,40)" fg:x="4581" fg:w="1"/><text x="73.6399%" y="1503.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="73.4060%" y="1509" width="0.0160%" height="15" fill="rgb(217,98,1)" fg:x="4582" fg:w="1"/><text x="73.6560%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (23 samples, 0.37%)</title><rect x="73.4220%" y="1509" width="0.3685%" height="15" fill="rgb(238,202,7)" fg:x="4583" fg:w="23"/><text x="73.6720%" y="1519.50"></text></g><g><title>_int_free (13 samples, 0.21%)</title><rect x="73.8065%" y="1253" width="0.2083%" height="15" fill="rgb(222,91,3)" fg:x="4607" fg:w="13"/><text x="74.0565%" y="1263.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (15 samples, 0.24%)</title><rect x="73.7905%" y="1509" width="0.2403%" height="15" fill="rgb(211,170,49)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1519.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (15 samples, 0.24%)</title><rect x="73.7905%" y="1493" width="0.2403%" height="15" fill="rgb(253,139,18)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1503.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (15 samples, 0.24%)</title><rect x="73.7905%" y="1477" width="0.2403%" height="15" fill="rgb(222,4,43)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1487.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (15 samples, 0.24%)</title><rect x="73.7905%" y="1461" width="0.2403%" height="15" fill="rgb(207,205,12)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1471.50"></text></g><g><title>CBlock::~CBlock (15 samples, 0.24%)</title><rect x="73.7905%" y="1445" width="0.2403%" height="15" fill="rgb(216,159,46)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1455.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (15 samples, 0.24%)</title><rect x="73.7905%" y="1429" width="0.2403%" height="15" fill="rgb(236,115,1)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (15 samples, 0.24%)</title><rect x="73.7905%" y="1413" width="0.2403%" height="15" fill="rgb(251,35,33)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (15 samples, 0.24%)</title><rect x="73.7905%" y="1397" width="0.2403%" height="15" fill="rgb(248,62,51)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (15 samples, 0.24%)</title><rect x="73.7905%" y="1381" width="0.2403%" height="15" fill="rgb(254,180,19)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (15 samples, 0.24%)</title><rect x="73.7905%" y="1365" width="0.2403%" height="15" fill="rgb(217,100,32)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (15 samples, 0.24%)</title><rect x="73.7905%" y="1349" width="0.2403%" height="15" fill="rgb(224,71,22)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1359.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (15 samples, 0.24%)</title><rect x="73.7905%" y="1333" width="0.2403%" height="15" fill="rgb(251,185,33)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1343.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (15 samples, 0.24%)</title><rect x="73.7905%" y="1317" width="0.2403%" height="15" fill="rgb(209,75,48)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1327.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (15 samples, 0.24%)</title><rect x="73.7905%" y="1301" width="0.2403%" height="15" fill="rgb(253,190,16)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1311.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (15 samples, 0.24%)</title><rect x="73.7905%" y="1285" width="0.2403%" height="15" fill="rgb(226,140,1)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1295.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (15 samples, 0.24%)</title><rect x="73.7905%" y="1269" width="0.2403%" height="15" fill="rgb(206,75,30)" fg:x="4606" fg:w="15"/><text x="74.0405%" y="1279.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_destroy (1 samples, 0.02%)</title><rect x="74.0147%" y="1253" width="0.0160%" height="15" fill="rgb(231,208,37)" fg:x="4620" fg:w="1"/><text x="74.2647%" y="1263.50"></text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::~__allocated_ptr (1 samples, 0.02%)</title><rect x="74.0147%" y="1237" width="0.0160%" height="15" fill="rgb(238,136,40)" fg:x="4620" fg:w="1"/><text x="74.2647%" y="1247.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="74.0147%" y="1221" width="0.0160%" height="15" fill="rgb(247,137,17)" fg:x="4620" fg:w="1"/><text x="74.2647%" y="1231.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="74.0147%" y="1205" width="0.0160%" height="15" fill="rgb(240,60,40)" fg:x="4620" fg:w="1"/><text x="74.2647%" y="1215.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="74.0147%" y="1189" width="0.0160%" height="15" fill="rgb(236,68,50)" fg:x="4620" fg:w="1"/><text x="74.2647%" y="1199.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="74.0308%" y="1429" width="0.0160%" height="15" fill="rgb(230,42,12)" fg:x="4621" fg:w="1"/><text x="74.2808%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (1 samples, 0.02%)</title><rect x="74.0308%" y="1413" width="0.0160%" height="15" fill="rgb(219,16,16)" fg:x="4621" fg:w="1"/><text x="74.2808%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (1 samples, 0.02%)</title><rect x="74.0308%" y="1397" width="0.0160%" height="15" fill="rgb(220,38,35)" fg:x="4621" fg:w="1"/><text x="74.2808%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (1 samples, 0.02%)</title><rect x="74.0308%" y="1381" width="0.0160%" height="15" fill="rgb(228,33,1)" fg:x="4621" fg:w="1"/><text x="74.2808%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (1 samples, 0.02%)</title><rect x="74.0308%" y="1365" width="0.0160%" height="15" fill="rgb(241,46,31)" fg:x="4621" fg:w="1"/><text x="74.2808%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (1 samples, 0.02%)</title><rect x="74.0308%" y="1349" width="0.0160%" height="15" fill="rgb(232,58,20)" fg:x="4621" fg:w="1"/><text x="74.2808%" y="1359.50"></text></g><g><title>CTxIn::~CTxIn (1 samples, 0.02%)</title><rect x="74.0308%" y="1333" width="0.0160%" height="15" fill="rgb(206,228,53)" fg:x="4621" fg:w="1"/><text x="74.2808%" y="1343.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="74.0308%" y="1317" width="0.0160%" height="15" fill="rgb(206,88,33)" fg:x="4621" fg:w="1"/><text x="74.2808%" y="1327.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="74.0308%" y="1301" width="0.0160%" height="15" fill="rgb(238,69,7)" fg:x="4621" fg:w="1"/><text x="74.2808%" y="1311.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="74.0468%" y="1413" width="0.0160%" height="15" fill="rgb(250,21,46)" fg:x="4622" fg:w="1"/><text x="74.2968%" y="1423.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="74.0468%" y="1397" width="0.0160%" height="15" fill="rgb(215,212,21)" fg:x="4622" fg:w="1"/><text x="74.2968%" y="1407.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="74.0468%" y="1381" width="0.0160%" height="15" fill="rgb(211,35,12)" fg:x="4622" fg:w="1"/><text x="74.2968%" y="1391.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::deallocate (1 samples, 0.02%)</title><rect x="74.0468%" y="1365" width="0.0160%" height="15" fill="rgb(231,184,16)" fg:x="4622" fg:w="1"/><text x="74.2968%" y="1375.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::deallocate (1 samples, 0.02%)</title><rect x="74.0468%" y="1349" width="0.0160%" height="15" fill="rgb(242,140,15)" fg:x="4622" fg:w="1"/><text x="74.2968%" y="1359.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="74.0468%" y="1333" width="0.0160%" height="15" fill="rgb(220,37,14)" fg:x="4622" fg:w="1"/><text x="74.2968%" y="1343.50"></text></g><g><title>b-scheduler (500 samples, 8.01%)</title><rect x="66.0686%" y="1525" width="8.0103%" height="15" fill="rgb(223,146,22)" fg:x="4124" fg:w="500"/><text x="66.3186%" y="1535.50">b-scheduler</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (3 samples, 0.05%)</title><rect x="74.0308%" y="1509" width="0.0481%" height="15" fill="rgb(216,132,15)" fg:x="4621" fg:w="3"/><text x="74.2808%" y="1519.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (3 samples, 0.05%)</title><rect x="74.0308%" y="1493" width="0.0481%" height="15" fill="rgb(248,83,5)" fg:x="4621" fg:w="3"/><text x="74.2808%" y="1503.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (3 samples, 0.05%)</title><rect x="74.0308%" y="1477" width="0.0481%" height="15" fill="rgb(231,206,48)" fg:x="4621" fg:w="3"/><text x="74.2808%" y="1487.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (3 samples, 0.05%)</title><rect x="74.0308%" y="1461" width="0.0481%" height="15" fill="rgb(253,185,37)" fg:x="4621" fg:w="3"/><text x="74.2808%" y="1471.50"></text></g><g><title>CTransaction::~CTransaction (3 samples, 0.05%)</title><rect x="74.0308%" y="1445" width="0.0481%" height="15" fill="rgb(208,21,44)" fg:x="4621" fg:w="3"/><text x="74.2808%" y="1455.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (2 samples, 0.03%)</title><rect x="74.0468%" y="1429" width="0.0320%" height="15" fill="rgb(236,125,4)" fg:x="4622" fg:w="2"/><text x="74.2968%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (1 samples, 0.02%)</title><rect x="74.0628%" y="1413" width="0.0160%" height="15" fill="rgb(226,134,25)" fg:x="4623" fg:w="1"/><text x="74.3128%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (1 samples, 0.02%)</title><rect x="74.0628%" y="1397" width="0.0160%" height="15" fill="rgb(250,201,12)" fg:x="4623" fg:w="1"/><text x="74.3128%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (1 samples, 0.02%)</title><rect x="74.0628%" y="1381" width="0.0160%" height="15" fill="rgb(225,92,18)" fg:x="4623" fg:w="1"/><text x="74.3128%" y="1391.50"></text></g><g><title>b-scriptch.10 (4 samples, 0.06%)</title><rect x="74.0788%" y="1525" width="0.0641%" height="15" fill="rgb(227,35,22)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.06%)</title><rect x="74.0788%" y="1509" width="0.0641%" height="15" fill="rgb(214,180,52)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.06%)</title><rect x="74.0788%" y="1493" width="0.0641%" height="15" fill="rgb(233,55,38)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.06%)</title><rect x="74.0788%" y="1477" width="0.0641%" height="15" fill="rgb(249,171,43)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.06%)</title><rect x="74.0788%" y="1461" width="0.0641%" height="15" fill="rgb(239,87,2)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.06%)</title><rect x="74.0788%" y="1445" width="0.0641%" height="15" fill="rgb(248,141,5)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.06%)</title><rect x="74.0788%" y="1429" width="0.0641%" height="15" fill="rgb(238,33,42)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1413" width="0.0641%" height="15" fill="rgb(231,57,19)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1397" width="0.0641%" height="15" fill="rgb(214,78,53)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1381" width="0.0641%" height="15" fill="rgb(206,132,29)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1365" width="0.0641%" height="15" fill="rgb(248,174,31)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1349" width="0.0641%" height="15" fill="rgb(221,87,13)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1333" width="0.0641%" height="15" fill="rgb(223,197,17)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1317" width="0.0641%" height="15" fill="rgb(220,144,50)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1301" width="0.0641%" height="15" fill="rgb(244,201,11)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1285" width="0.0641%" height="15" fill="rgb(249,81,34)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1269" width="0.0641%" height="15" fill="rgb(205,161,12)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1253" width="0.0641%" height="15" fill="rgb(252,139,50)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1237" width="0.0641%" height="15" fill="rgb(205,169,14)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1221" width="0.0641%" height="15" fill="rgb(248,198,33)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.0788%" y="1205" width="0.0641%" height="15" fill="rgb(236,23,21)" fg:x="4624" fg:w="4"/><text x="74.3288%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.1269%" y="1189" width="0.0160%" height="15" fill="rgb(231,13,38)" fg:x="4627" fg:w="1"/><text x="74.3769%" y="1199.50"></text></g><g><title>b-scriptch.11 (4 samples, 0.06%)</title><rect x="74.1429%" y="1525" width="0.0641%" height="15" fill="rgb(239,139,21)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.06%)</title><rect x="74.1429%" y="1509" width="0.0641%" height="15" fill="rgb(222,164,45)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.06%)</title><rect x="74.1429%" y="1493" width="0.0641%" height="15" fill="rgb(230,52,27)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.06%)</title><rect x="74.1429%" y="1477" width="0.0641%" height="15" fill="rgb(227,143,42)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.06%)</title><rect x="74.1429%" y="1461" width="0.0641%" height="15" fill="rgb(249,127,1)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.06%)</title><rect x="74.1429%" y="1445" width="0.0641%" height="15" fill="rgb(243,107,26)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.06%)</title><rect x="74.1429%" y="1429" width="0.0641%" height="15" fill="rgb(225,7,45)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1413" width="0.0641%" height="15" fill="rgb(241,88,38)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1397" width="0.0641%" height="15" fill="rgb(226,121,9)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1381" width="0.0641%" height="15" fill="rgb(253,60,29)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1365" width="0.0641%" height="15" fill="rgb(244,181,39)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1349" width="0.0641%" height="15" fill="rgb(252,203,31)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1333" width="0.0641%" height="15" fill="rgb(224,120,8)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1317" width="0.0641%" height="15" fill="rgb(205,171,54)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1301" width="0.0641%" height="15" fill="rgb(235,89,11)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1285" width="0.0641%" height="15" fill="rgb(212,180,28)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.1429%" y="1269" width="0.0641%" height="15" fill="rgb(247,84,49)" fg:x="4628" fg:w="4"/><text x="74.3929%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.1589%" y="1253" width="0.0481%" height="15" fill="rgb(236,187,52)" fg:x="4629" fg:w="3"/><text x="74.4089%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.1589%" y="1237" width="0.0481%" height="15" fill="rgb(227,24,15)" fg:x="4629" fg:w="3"/><text x="74.4089%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.1589%" y="1221" width="0.0481%" height="15" fill="rgb(227,211,13)" fg:x="4629" fg:w="3"/><text x="74.4089%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.1589%" y="1205" width="0.0481%" height="15" fill="rgb(245,52,14)" fg:x="4629" fg:w="3"/><text x="74.4089%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.1589%" y="1189" width="0.0481%" height="15" fill="rgb(225,185,13)" fg:x="4629" fg:w="3"/><text x="74.4089%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.1589%" y="1173" width="0.0481%" height="15" fill="rgb(217,160,29)" fg:x="4629" fg:w="3"/><text x="74.4089%" y="1183.50"></text></g><g><title>b-scriptch.13 (4 samples, 0.06%)</title><rect x="74.2070%" y="1525" width="0.0641%" height="15" fill="rgb(216,115,53)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.06%)</title><rect x="74.2070%" y="1509" width="0.0641%" height="15" fill="rgb(236,99,5)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.06%)</title><rect x="74.2070%" y="1493" width="0.0641%" height="15" fill="rgb(222,60,38)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.06%)</title><rect x="74.2070%" y="1477" width="0.0641%" height="15" fill="rgb(212,82,22)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.06%)</title><rect x="74.2070%" y="1461" width="0.0641%" height="15" fill="rgb(214,48,28)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.06%)</title><rect x="74.2070%" y="1445" width="0.0641%" height="15" fill="rgb(245,196,50)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.06%)</title><rect x="74.2070%" y="1429" width="0.0641%" height="15" fill="rgb(225,159,46)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1413" width="0.0641%" height="15" fill="rgb(207,195,48)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1397" width="0.0641%" height="15" fill="rgb(240,73,3)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1381" width="0.0641%" height="15" fill="rgb(245,57,23)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1365" width="0.0641%" height="15" fill="rgb(240,75,18)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1349" width="0.0641%" height="15" fill="rgb(238,168,12)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1333" width="0.0641%" height="15" fill="rgb(226,20,40)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1317" width="0.0641%" height="15" fill="rgb(224,130,35)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1301" width="0.0641%" height="15" fill="rgb(225,63,41)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1285" width="0.0641%" height="15" fill="rgb(219,3,3)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1269" width="0.0641%" height="15" fill="rgb(218,157,4)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1253" width="0.0641%" height="15" fill="rgb(232,76,36)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2070%" y="1237" width="0.0641%" height="15" fill="rgb(247,36,0)" fg:x="4632" fg:w="4"/><text x="74.4570%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.2230%" y="1221" width="0.0481%" height="15" fill="rgb(205,2,34)" fg:x="4633" fg:w="3"/><text x="74.4730%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.2230%" y="1205" width="0.0481%" height="15" fill="rgb(239,136,13)" fg:x="4633" fg:w="3"/><text x="74.4730%" y="1215.50"></text></g><g><title>b-scriptch.14 (4 samples, 0.06%)</title><rect x="74.2711%" y="1525" width="0.0641%" height="15" fill="rgb(253,122,12)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.06%)</title><rect x="74.2711%" y="1509" width="0.0641%" height="15" fill="rgb(222,174,7)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.06%)</title><rect x="74.2711%" y="1493" width="0.0641%" height="15" fill="rgb(208,191,42)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.06%)</title><rect x="74.2711%" y="1477" width="0.0641%" height="15" fill="rgb(237,212,15)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.06%)</title><rect x="74.2711%" y="1461" width="0.0641%" height="15" fill="rgb(215,65,20)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.06%)</title><rect x="74.2711%" y="1445" width="0.0641%" height="15" fill="rgb(232,103,11)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.06%)</title><rect x="74.2711%" y="1429" width="0.0641%" height="15" fill="rgb(235,148,18)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1439.50"></text></g><g><title>__GI___pthread_disable_asynccancel (4 samples, 0.06%)</title><rect x="74.2711%" y="1413" width="0.0641%" height="15" fill="rgb(240,173,7)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1397" width="0.0641%" height="15" fill="rgb(228,182,25)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1381" width="0.0641%" height="15" fill="rgb(247,3,52)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1365" width="0.0641%" height="15" fill="rgb(226,155,8)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1349" width="0.0641%" height="15" fill="rgb(243,195,38)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1333" width="0.0641%" height="15" fill="rgb(254,181,33)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1317" width="0.0641%" height="15" fill="rgb(232,98,23)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1301" width="0.0641%" height="15" fill="rgb(205,23,10)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1285" width="0.0641%" height="15" fill="rgb(212,124,38)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1269" width="0.0641%" height="15" fill="rgb(228,207,2)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1253" width="0.0641%" height="15" fill="rgb(215,120,22)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.2711%" y="1237" width="0.0641%" height="15" fill="rgb(251,172,33)" fg:x="4636" fg:w="4"/><text x="74.5211%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.3191%" y="1221" width="0.0160%" height="15" fill="rgb(250,83,2)" fg:x="4639" fg:w="1"/><text x="74.5691%" y="1231.50"></text></g><g><title>b-scriptch.8 (4 samples, 0.06%)</title><rect x="74.3351%" y="1525" width="0.0641%" height="15" fill="rgb(210,132,53)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.06%)</title><rect x="74.3351%" y="1509" width="0.0641%" height="15" fill="rgb(221,208,36)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.06%)</title><rect x="74.3351%" y="1493" width="0.0641%" height="15" fill="rgb(205,192,46)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.06%)</title><rect x="74.3351%" y="1477" width="0.0641%" height="15" fill="rgb(223,163,14)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.06%)</title><rect x="74.3351%" y="1461" width="0.0641%" height="15" fill="rgb(218,41,28)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.06%)</title><rect x="74.3351%" y="1445" width="0.0641%" height="15" fill="rgb(235,104,10)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.06%)</title><rect x="74.3351%" y="1429" width="0.0641%" height="15" fill="rgb(246,17,4)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3351%" y="1413" width="0.0641%" height="15" fill="rgb(240,7,16)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3351%" y="1397" width="0.0641%" height="15" fill="rgb(213,160,23)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3351%" y="1381" width="0.0641%" height="15" fill="rgb(251,179,49)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3351%" y="1365" width="0.0641%" height="15" fill="rgb(247,198,10)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3351%" y="1349" width="0.0641%" height="15" fill="rgb(220,65,29)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3351%" y="1333" width="0.0641%" height="15" fill="rgb(237,171,28)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3351%" y="1317" width="0.0641%" height="15" fill="rgb(228,44,26)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3351%" y="1301" width="0.0641%" height="15" fill="rgb(216,210,27)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3351%" y="1285" width="0.0641%" height="15" fill="rgb(252,10,17)" fg:x="4640" fg:w="4"/><text x="74.5851%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.3512%" y="1269" width="0.0481%" height="15" fill="rgb(214,172,30)" fg:x="4641" fg:w="3"/><text x="74.6012%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.3512%" y="1253" width="0.0481%" height="15" fill="rgb(253,130,48)" fg:x="4641" fg:w="3"/><text x="74.6012%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.3512%" y="1237" width="0.0481%" height="15" fill="rgb(226,99,43)" fg:x="4641" fg:w="3"/><text x="74.6012%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.3512%" y="1221" width="0.0481%" height="15" fill="rgb(239,111,26)" fg:x="4641" fg:w="3"/><text x="74.6012%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.3512%" y="1205" width="0.0481%" height="15" fill="rgb(240,27,53)" fg:x="4641" fg:w="3"/><text x="74.6012%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.3512%" y="1189" width="0.0481%" height="15" fill="rgb(254,163,12)" fg:x="4641" fg:w="3"/><text x="74.6012%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.3512%" y="1173" width="0.0481%" height="15" fill="rgb(225,51,48)" fg:x="4641" fg:w="3"/><text x="74.6012%" y="1183.50"></text></g><g><title>b-scriptch.9 (4 samples, 0.06%)</title><rect x="74.3992%" y="1525" width="0.0641%" height="15" fill="rgb(205,19,32)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.06%)</title><rect x="74.3992%" y="1509" width="0.0641%" height="15" fill="rgb(218,119,26)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.06%)</title><rect x="74.3992%" y="1493" width="0.0641%" height="15" fill="rgb(231,173,33)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.06%)</title><rect x="74.3992%" y="1477" width="0.0641%" height="15" fill="rgb(241,100,29)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.06%)</title><rect x="74.3992%" y="1461" width="0.0641%" height="15" fill="rgb(250,194,34)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.06%)</title><rect x="74.3992%" y="1445" width="0.0641%" height="15" fill="rgb(215,23,50)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.06%)</title><rect x="74.3992%" y="1429" width="0.0641%" height="15" fill="rgb(206,49,37)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1413" width="0.0641%" height="15" fill="rgb(247,39,21)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1397" width="0.0641%" height="15" fill="rgb(209,220,15)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1381" width="0.0641%" height="15" fill="rgb(206,41,33)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1365" width="0.0641%" height="15" fill="rgb(221,225,45)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1349" width="0.0641%" height="15" fill="rgb(216,27,18)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1333" width="0.0641%" height="15" fill="rgb(250,193,34)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1317" width="0.0641%" height="15" fill="rgb(227,215,20)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1301" width="0.0641%" height="15" fill="rgb(242,211,27)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1285" width="0.0641%" height="15" fill="rgb(229,190,30)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1269" width="0.0641%" height="15" fill="rgb(253,31,29)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1253" width="0.0641%" height="15" fill="rgb(229,177,52)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1237" width="0.0641%" height="15" fill="rgb(226,88,8)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1221" width="0.0641%" height="15" fill="rgb(214,55,27)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1205" width="0.0641%" height="15" fill="rgb(233,202,5)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1189" width="0.0641%" height="15" fill="rgb(251,49,30)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.3992%" y="1173" width="0.0641%" height="15" fill="rgb(235,18,52)" fg:x="4644" fg:w="4"/><text x="74.6492%" y="1183.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="74.4633%" y="1493" width="0.0160%" height="15" fill="rgb(250,111,51)" fg:x="4648" fg:w="1"/><text x="74.7133%" y="1503.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="74.4793%" y="1493" width="0.0320%" height="15" fill="rgb(218,13,25)" fg:x="4649" fg:w="2"/><text x="74.7293%" y="1503.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="74.5114%" y="1493" width="0.0160%" height="15" fill="rgb(248,96,7)" fg:x="4651" fg:w="1"/><text x="74.7614%" y="1503.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.03%)</title><rect x="74.5274%" y="1493" width="0.0320%" height="15" fill="rgb(217,31,15)" fg:x="4652" fg:w="2"/><text x="74.7774%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="74.5594%" y="1493" width="0.0160%" height="15" fill="rgb(228,59,49)" fg:x="4654" fg:w="1"/><text x="74.8094%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="74.5755%" y="1493" width="0.0160%" height="15" fill="rgb(210,152,38)" fg:x="4655" fg:w="1"/><text x="74.8255%" y="1503.50"></text></g><g><title>[[heap]] (9 samples, 0.14%)</title><rect x="74.4633%" y="1509" width="0.1442%" height="15" fill="rgb(206,71,11)" fg:x="4648" fg:w="9"/><text x="74.7133%" y="1519.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="74.5915%" y="1493" width="0.0160%" height="15" fill="rgb(244,199,5)" fg:x="4656" fg:w="1"/><text x="74.8415%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.03%)</title><rect x="74.6075%" y="1493" width="0.0320%" height="15" fill="rgb(253,49,1)" fg:x="4657" fg:w="2"/><text x="74.8575%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.08%)</title><rect x="74.6395%" y="1493" width="0.0801%" height="15" fill="rgb(225,206,40)" fg:x="4659" fg:w="5"/><text x="74.8895%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="74.7196%" y="1493" width="0.0160%" height="15" fill="rgb(243,116,47)" fg:x="4664" fg:w="1"/><text x="74.9696%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="74.7357%" y="1493" width="0.0481%" height="15" fill="rgb(219,225,16)" fg:x="4665" fg:w="3"/><text x="74.9857%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="74.7837%" y="1493" width="0.0160%" height="15" fill="rgb(233,29,47)" fg:x="4668" fg:w="1"/><text x="75.0337%" y="1503.50"></text></g><g><title>[[stack]] (13 samples, 0.21%)</title><rect x="74.6075%" y="1509" width="0.2083%" height="15" fill="rgb(250,179,18)" fg:x="4657" fg:w="13"/><text x="74.8575%" y="1519.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="74.7997%" y="1493" width="0.0160%" height="15" fill="rgb(215,176,6)" fg:x="4669" fg:w="1"/><text x="75.0497%" y="1503.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="74.8318%" y="1493" width="0.0801%" height="15" fill="rgb(214,117,39)" fg:x="4671" fg:w="5"/><text x="75.0818%" y="1503.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="74.8318%" y="1477" width="0.0801%" height="15" fill="rgb(247,183,36)" fg:x="4671" fg:w="5"/><text x="75.0818%" y="1487.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="74.8318%" y="1461" width="0.0801%" height="15" fill="rgb(237,200,3)" fg:x="4671" fg:w="5"/><text x="75.0818%" y="1471.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="74.8318%" y="1445" width="0.0801%" height="15" fill="rgb(212,220,24)" fg:x="4671" fg:w="5"/><text x="75.0818%" y="1455.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="74.8318%" y="1429" width="0.0801%" height="15" fill="rgb(245,216,20)" fg:x="4671" fg:w="5"/><text x="75.0818%" y="1439.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="74.8318%" y="1413" width="0.0801%" height="15" fill="rgb(219,124,7)" fg:x="4671" fg:w="5"/><text x="75.0818%" y="1423.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="74.8318%" y="1397" width="0.0801%" height="15" fill="rgb(227,167,8)" fg:x="4671" fg:w="5"/><text x="75.0818%" y="1407.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="74.8318%" y="1381" width="0.0801%" height="15" fill="rgb(241,37,2)" fg:x="4671" fg:w="5"/><text x="75.0818%" y="1391.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="74.8318%" y="1365" width="0.0801%" height="15" fill="rgb(238,134,33)" fg:x="4671" fg:w="5"/><text x="75.0818%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="74.8478%" y="1349" width="0.0641%" height="15" fill="rgb(248,48,27)" fg:x="4672" fg:w="4"/><text x="75.0978%" y="1359.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.8638%" y="1333" width="0.0481%" height="15" fill="rgb(212,14,16)" fg:x="4673" fg:w="3"/><text x="75.1138%" y="1343.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="74.8798%" y="1317" width="0.0320%" height="15" fill="rgb(217,205,37)" fg:x="4674" fg:w="2"/><text x="75.1298%" y="1327.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="74.8798%" y="1301" width="0.0320%" height="15" fill="rgb(233,185,47)" fg:x="4674" fg:w="2"/><text x="75.1298%" y="1311.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="74.8158%" y="1509" width="0.1121%" height="15" fill="rgb(244,88,8)" fg:x="4670" fg:w="7"/><text x="75.0658%" y="1519.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="74.9119%" y="1493" width="0.0160%" height="15" fill="rgb(213,0,20)" fg:x="4676" fg:w="1"/><text x="75.1619%" y="1503.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="74.9279%" y="1509" width="0.0160%" height="15" fill="rgb(238,159,36)" fg:x="4677" fg:w="1"/><text x="75.1779%" y="1519.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.03%)</title><rect x="74.9439%" y="1509" width="0.0320%" height="15" fill="rgb(253,173,17)" fg:x="4678" fg:w="2"/><text x="75.1939%" y="1519.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (1 samples, 0.02%)</title><rect x="74.9760%" y="1365" width="0.0160%" height="15" fill="rgb(221,23,28)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1375.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="74.9760%" y="1349" width="0.0160%" height="15" fill="rgb(218,113,15)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1359.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="74.9760%" y="1333" width="0.0160%" height="15" fill="rgb(233,58,3)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1343.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.02%)</title><rect x="74.9760%" y="1317" width="0.0160%" height="15" fill="rgb(250,46,35)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1327.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="74.9760%" y="1301" width="0.0160%" height="15" fill="rgb(210,169,11)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1285" width="0.0160%" height="15" fill="rgb(246,88,19)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1269" width="0.0160%" height="15" fill="rgb(206,81,49)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1253" width="0.0160%" height="15" fill="rgb(232,144,18)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1237" width="0.0160%" height="15" fill="rgb(235,2,27)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1221" width="0.0160%" height="15" fill="rgb(239,157,39)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1205" width="0.0160%" height="15" fill="rgb(220,11,17)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1189" width="0.0160%" height="15" fill="rgb(243,94,50)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1173" width="0.0160%" height="15" fill="rgb(218,22,0)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1157" width="0.0160%" height="15" fill="rgb(249,70,21)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1141" width="0.0160%" height="15" fill="rgb(245,111,46)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1125" width="0.0160%" height="15" fill="rgb(244,183,12)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1109" width="0.0160%" height="15" fill="rgb(207,117,0)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="74.9760%" y="1093" width="0.0160%" height="15" fill="rgb(206,20,43)" fg:x="4680" fg:w="1"/><text x="75.2260%" y="1103.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (2 samples, 0.03%)</title><rect x="74.9760%" y="1381" width="0.0320%" height="15" fill="rgb(221,104,11)" fg:x="4680" fg:w="2"/><text x="75.2260%" y="1391.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (1 samples, 0.02%)</title><rect x="74.9920%" y="1365" width="0.0160%" height="15" fill="rgb(254,36,50)" fg:x="4681" fg:w="1"/><text x="75.2420%" y="1375.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="74.9920%" y="1349" width="0.0160%" height="15" fill="rgb(252,17,15)" fg:x="4681" fg:w="1"/><text x="75.2420%" y="1359.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="74.9920%" y="1333" width="0.0160%" height="15" fill="rgb(219,129,43)" fg:x="4681" fg:w="1"/><text x="75.2420%" y="1343.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.02%)</title><rect x="74.9920%" y="1317" width="0.0160%" height="15" fill="rgb(205,34,45)" fg:x="4681" fg:w="1"/><text x="75.2420%" y="1327.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="74.9920%" y="1301" width="0.0160%" height="15" fill="rgb(251,201,32)" fg:x="4681" fg:w="1"/><text x="75.2420%" y="1311.50"></text></g><g><title>CDBBatch::EraseImpl (2 samples, 0.03%)</title><rect x="75.0080%" y="1349" width="0.0320%" height="15" fill="rgb(205,56,0)" fg:x="4682" fg:w="2"/><text x="75.2580%" y="1359.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="75.0080%" y="1333" width="0.0320%" height="15" fill="rgb(211,193,27)" fg:x="4682" fg:w="2"/><text x="75.2580%" y="1343.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="75.0080%" y="1317" width="0.0320%" height="15" fill="rgb(231,100,42)" fg:x="4682" fg:w="2"/><text x="75.2580%" y="1327.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.02%)</title><rect x="75.0401%" y="1317" width="0.0160%" height="15" fill="rgb(245,85,27)" fg:x="4684" fg:w="1"/><text x="75.2901%" y="1327.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="75.0401%" y="1301" width="0.0160%" height="15" fill="rgb(241,76,24)" fg:x="4684" fg:w="1"/><text x="75.2901%" y="1311.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="75.0401%" y="1285" width="0.0160%" height="15" fill="rgb(249,157,15)" fg:x="4684" fg:w="1"/><text x="75.2901%" y="1295.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="75.0401%" y="1269" width="0.0160%" height="15" fill="rgb(222,218,25)" fg:x="4684" fg:w="1"/><text x="75.2901%" y="1279.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="75.0401%" y="1253" width="0.0160%" height="15" fill="rgb(252,156,52)" fg:x="4684" fg:w="1"/><text x="75.2901%" y="1263.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="75.0561%" y="1317" width="0.0160%" height="15" fill="rgb(211,185,7)" fg:x="4685" fg:w="1"/><text x="75.3061%" y="1327.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.02%)</title><rect x="75.0561%" y="1301" width="0.0160%" height="15" fill="rgb(234,108,24)" fg:x="4685" fg:w="1"/><text x="75.3061%" y="1311.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="75.0561%" y="1285" width="0.0160%" height="15" fill="rgb(227,218,2)" fg:x="4685" fg:w="1"/><text x="75.3061%" y="1295.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="75.0561%" y="1269" width="0.0160%" height="15" fill="rgb(224,0,36)" fg:x="4685" fg:w="1"/><text x="75.3061%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.03%)</title><rect x="75.0721%" y="1285" width="0.0320%" height="15" fill="rgb(233,201,10)" fg:x="4686" fg:w="2"/><text x="75.3221%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="75.0721%" y="1269" width="0.0320%" height="15" fill="rgb(252,209,14)" fg:x="4686" fg:w="2"/><text x="75.3221%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="75.0721%" y="1253" width="0.0320%" height="15" fill="rgb(205,93,49)" fg:x="4686" fg:w="2"/><text x="75.3221%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.03%)</title><rect x="75.0721%" y="1237" width="0.0320%" height="15" fill="rgb(234,116,45)" fg:x="4686" fg:w="2"/><text x="75.3221%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="75.0721%" y="1221" width="0.0320%" height="15" fill="rgb(248,89,35)" fg:x="4686" fg:w="2"/><text x="75.3221%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1205" width="0.0160%" height="15" fill="rgb(233,167,45)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1189" width="0.0160%" height="15" fill="rgb(248,228,14)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1173" width="0.0160%" height="15" fill="rgb(246,91,14)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1157" width="0.0160%" height="15" fill="rgb(227,142,5)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1141" width="0.0160%" height="15" fill="rgb(221,63,33)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1125" width="0.0160%" height="15" fill="rgb(233,49,0)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1109" width="0.0160%" height="15" fill="rgb(251,115,38)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1093" width="0.0160%" height="15" fill="rgb(231,214,32)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1077" width="0.0160%" height="15" fill="rgb(248,73,46)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1061" width="0.0160%" height="15" fill="rgb(237,156,4)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.0881%" y="1045" width="0.0160%" height="15" fill="rgb(227,132,2)" fg:x="4687" fg:w="1"/><text x="75.3381%" y="1055.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (6 samples, 0.10%)</title><rect x="75.0401%" y="1333" width="0.0961%" height="15" fill="rgb(248,161,9)" fg:x="4684" fg:w="6"/><text x="75.2901%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (4 samples, 0.06%)</title><rect x="75.0721%" y="1317" width="0.0641%" height="15" fill="rgb(238,77,38)" fg:x="4686" fg:w="4"/><text x="75.3221%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4 samples, 0.06%)</title><rect x="75.0721%" y="1301" width="0.0641%" height="15" fill="rgb(222,166,40)" fg:x="4686" fg:w="4"/><text x="75.3221%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="75.1041%" y="1285" width="0.0320%" height="15" fill="rgb(214,168,45)" fg:x="4688" fg:w="2"/><text x="75.3541%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="75.1041%" y="1269" width="0.0320%" height="15" fill="rgb(226,64,37)" fg:x="4688" fg:w="2"/><text x="75.3541%" y="1279.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.03%)</title><rect x="75.1041%" y="1253" width="0.0320%" height="15" fill="rgb(232,210,43)" fg:x="4688" fg:w="2"/><text x="75.3541%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="75.1041%" y="1237" width="0.0320%" height="15" fill="rgb(214,76,33)" fg:x="4688" fg:w="2"/><text x="75.3541%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="75.1041%" y="1221" width="0.0320%" height="15" fill="rgb(210,78,5)" fg:x="4688" fg:w="2"/><text x="75.3541%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="75.1041%" y="1205" width="0.0320%" height="15" fill="rgb(211,107,37)" fg:x="4688" fg:w="2"/><text x="75.3541%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="75.1041%" y="1189" width="0.0320%" height="15" fill="rgb(249,67,16)" fg:x="4688" fg:w="2"/><text x="75.3541%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1173" width="0.0160%" height="15" fill="rgb(222,114,31)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1157" width="0.0160%" height="15" fill="rgb(242,118,19)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1141" width="0.0160%" height="15" fill="rgb(223,115,1)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1125" width="0.0160%" height="15" fill="rgb(241,182,54)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1109" width="0.0160%" height="15" fill="rgb(244,166,36)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1093" width="0.0160%" height="15" fill="rgb(241,52,43)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1077" width="0.0160%" height="15" fill="rgb(236,82,9)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1061" width="0.0160%" height="15" fill="rgb(241,119,0)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1045" width="0.0160%" height="15" fill="rgb(221,19,22)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1202%" y="1029" width="0.0160%" height="15" fill="rgb(254,144,35)" fg:x="4689" fg:w="1"/><text x="75.3702%" y="1039.50"></text></g><g><title>CDBBatch::WriteImpl (7 samples, 0.11%)</title><rect x="75.0401%" y="1349" width="0.1121%" height="15" fill="rgb(246,132,30)" fg:x="4684" fg:w="7"/><text x="75.2901%" y="1359.50"></text></g><g><title>leveldb::WriteBatch::Put (1 samples, 0.02%)</title><rect x="75.1362%" y="1333" width="0.0160%" height="15" fill="rgb(234,69,28)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1343.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="75.1362%" y="1317" width="0.0160%" height="15" fill="rgb(219,106,47)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="75.1362%" y="1301" width="0.0160%" height="15" fill="rgb(218,79,24)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="75.1362%" y="1285" width="0.0160%" height="15" fill="rgb(225,26,21)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="75.1362%" y="1269" width="0.0160%" height="15" fill="rgb(217,68,49)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="75.1362%" y="1253" width="0.0160%" height="15" fill="rgb(220,204,28)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="75.1362%" y="1237" width="0.0160%" height="15" fill="rgb(237,208,43)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="75.1362%" y="1221" width="0.0160%" height="15" fill="rgb(213,97,42)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="75.1362%" y="1205" width="0.0160%" height="15" fill="rgb(238,96,52)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1362%" y="1189" width="0.0160%" height="15" fill="rgb(228,14,13)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1362%" y="1173" width="0.0160%" height="15" fill="rgb(219,123,13)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1362%" y="1157" width="0.0160%" height="15" fill="rgb(216,144,17)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1362%" y="1141" width="0.0160%" height="15" fill="rgb(230,228,29)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1362%" y="1125" width="0.0160%" height="15" fill="rgb(233,18,5)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1362%" y="1109" width="0.0160%" height="15" fill="rgb(233,197,12)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1362%" y="1093" width="0.0160%" height="15" fill="rgb(234,140,29)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1362%" y="1077" width="0.0160%" height="15" fill="rgb(233,113,19)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1362%" y="1061" width="0.0160%" height="15" fill="rgb(246,209,13)" fg:x="4690" fg:w="1"/><text x="75.3862%" y="1071.50"></text></g><g><title>CCoinsViewDB::BatchWrite (11 samples, 0.18%)</title><rect x="75.0080%" y="1365" width="0.1762%" height="15" fill="rgb(242,79,54)" fg:x="4682" fg:w="11"/><text x="75.2580%" y="1375.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="75.1522%" y="1349" width="0.0320%" height="15" fill="rgb(219,73,16)" fg:x="4691" fg:w="2"/><text x="75.4022%" y="1359.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="75.1522%" y="1333" width="0.0320%" height="15" fill="rgb(224,52,10)" fg:x="4691" fg:w="2"/><text x="75.4022%" y="1343.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="75.1682%" y="1317" width="0.0160%" height="15" fill="rgb(237,179,5)" fg:x="4692" fg:w="1"/><text x="75.4182%" y="1327.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="75.1682%" y="1301" width="0.0160%" height="15" fill="rgb(231,20,6)" fg:x="4692" fg:w="1"/><text x="75.4182%" y="1311.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="75.1682%" y="1285" width="0.0160%" height="15" fill="rgb(253,171,45)" fg:x="4692" fg:w="1"/><text x="75.4182%" y="1295.50"></text></g><g><title>CDBBatch::~CDBBatch (1 samples, 0.02%)</title><rect x="75.1842%" y="1365" width="0.0160%" height="15" fill="rgb(230,75,49)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1375.50"></text></g><g><title>std::unique_ptr&lt;CDBBatch::WriteBatchImpl, std::default_delete&lt;CDBBatch::WriteBatchImpl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="75.1842%" y="1349" width="0.0160%" height="15" fill="rgb(216,83,46)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1359.50"></text></g><g><title>std::default_delete&lt;CDBBatch::WriteBatchImpl&gt;::operator (1 samples, 0.02%)</title><rect x="75.1842%" y="1333" width="0.0160%" height="15" fill="rgb(236,56,9)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1343.50"></text></g><g><title>std::default_delete&lt;CDBBatch::WriteBatchImpl&gt;::operator (1 samples, 0.02%)</title><rect x="75.1842%" y="1317" width="0.0160%" height="15" fill="rgb(215,28,34)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1327.50"></text></g><g><title>CDBBatch::WriteBatchImpl::~WriteBatchImpl (1 samples, 0.02%)</title><rect x="75.1842%" y="1301" width="0.0160%" height="15" fill="rgb(230,222,20)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1311.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="75.1842%" y="1285" width="0.0160%" height="15" fill="rgb(235,209,51)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1295.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="75.1842%" y="1269" width="0.0160%" height="15" fill="rgb(235,167,1)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1253" width="0.0160%" height="15" fill="rgb(248,220,0)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1237" width="0.0160%" height="15" fill="rgb(239,0,18)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1221" width="0.0160%" height="15" fill="rgb(229,179,11)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1205" width="0.0160%" height="15" fill="rgb(226,116,53)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1189" width="0.0160%" height="15" fill="rgb(218,1,49)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1173" width="0.0160%" height="15" fill="rgb(208,184,47)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1157" width="0.0160%" height="15" fill="rgb(238,174,3)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1141" width="0.0160%" height="15" fill="rgb(247,188,6)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1125" width="0.0160%" height="15" fill="rgb(211,165,46)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1109" width="0.0160%" height="15" fill="rgb(222,190,10)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1093" width="0.0160%" height="15" fill="rgb(206,185,3)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.1842%" y="1077" width="0.0160%" height="15" fill="rgb(244,125,37)" fg:x="4693" fg:w="1"/><text x="75.4342%" y="1087.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="75.2003%" y="1301" width="0.0160%" height="15" fill="rgb(211,43,7)" fg:x="4694" fg:w="1"/><text x="75.4503%" y="1311.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="75.2003%" y="1285" width="0.0160%" height="15" fill="rgb(250,41,42)" fg:x="4694" fg:w="1"/><text x="75.4503%" y="1295.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="75.2163%" y="1269" width="0.0160%" height="15" fill="rgb(254,54,42)" fg:x="4695" fg:w="1"/><text x="75.4663%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.08%)</title><rect x="75.2323%" y="1253" width="0.0801%" height="15" fill="rgb(213,71,43)" fg:x="4696" fg:w="5"/><text x="75.4823%" y="1263.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.03%)</title><rect x="75.2804%" y="1237" width="0.0320%" height="15" fill="rgb(249,3,44)" fg:x="4699" fg:w="2"/><text x="75.5304%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="75.3124%" y="1253" width="0.0320%" height="15" fill="rgb(229,80,41)" fg:x="4701" fg:w="2"/><text x="75.5624%" y="1263.50"></text></g><g><title>GetLengthPrefixedSlice (7 samples, 0.11%)</title><rect x="75.4245%" y="1237" width="0.1121%" height="15" fill="rgb(231,25,28)" fg:x="4708" fg:w="7"/><text x="75.6745%" y="1247.50"></text></g><g><title>leveldb::GetVarint32Ptr (6 samples, 0.10%)</title><rect x="75.4406%" y="1221" width="0.0961%" height="15" fill="rgb(208,79,48)" fg:x="4709" fg:w="6"/><text x="75.6906%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (13 samples, 0.21%)</title><rect x="75.3444%" y="1253" width="0.2083%" height="15" fill="rgb(207,196,38)" fg:x="4703" fg:w="13"/><text x="75.5944%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="75.5367%" y="1237" width="0.0160%" height="15" fill="rgb(228,105,49)" fg:x="4715" fg:w="1"/><text x="75.7867%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (2 samples, 0.03%)</title><rect x="75.5527%" y="1253" width="0.0320%" height="15" fill="rgb(237,99,15)" fg:x="4716" fg:w="2"/><text x="75.8027%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.03%)</title><rect x="75.5527%" y="1237" width="0.0320%" height="15" fill="rgb(224,207,46)" fg:x="4716" fg:w="2"/><text x="75.8027%" y="1247.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="75.5687%" y="1221" width="0.0160%" height="15" fill="rgb(249,117,50)" fg:x="4717" fg:w="1"/><text x="75.8187%" y="1231.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="75.5687%" y="1205" width="0.0160%" height="15" fill="rgb(248,17,13)" fg:x="4717" fg:w="1"/><text x="75.8187%" y="1215.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="75.5687%" y="1189" width="0.0160%" height="15" fill="rgb(228,187,36)" fg:x="4717" fg:w="1"/><text x="75.8187%" y="1199.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="75.6328%" y="1221" width="0.0160%" height="15" fill="rgb(234,132,20)" fg:x="4721" fg:w="1"/><text x="75.8828%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="75.6488%" y="1221" width="0.0481%" height="15" fill="rgb(209,170,46)" fg:x="4722" fg:w="3"/><text x="75.8988%" y="1231.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="75.6809%" y="1205" width="0.0160%" height="15" fill="rgb(237,23,19)" fg:x="4724" fg:w="1"/><text x="75.9309%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="75.6969%" y="1221" width="0.0160%" height="15" fill="rgb(227,21,26)" fg:x="4725" fg:w="1"/><text x="75.9469%" y="1231.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="75.7770%" y="1205" width="0.0160%" height="15" fill="rgb(222,220,48)" fg:x="4730" fg:w="1"/><text x="76.0270%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="75.8090%" y="1189" width="0.0160%" height="15" fill="rgb(214,9,16)" fg:x="4732" fg:w="1"/><text x="76.0590%" y="1199.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="75.8251%" y="1189" width="0.0160%" height="15" fill="rgb(209,73,30)" fg:x="4733" fg:w="1"/><text x="76.0751%" y="1199.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="75.8411%" y="1189" width="0.0481%" height="15" fill="rgb(207,20,33)" fg:x="4734" fg:w="3"/><text x="76.0911%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (4 samples, 0.06%)</title><rect x="75.8891%" y="1189" width="0.0641%" height="15" fill="rgb(219,153,12)" fg:x="4737" fg:w="4"/><text x="76.1391%" y="1199.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="75.9372%" y="1173" width="0.0160%" height="15" fill="rgb(235,97,25)" fg:x="4740" fg:w="1"/><text x="76.1872%" y="1183.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="75.9372%" y="1157" width="0.0160%" height="15" fill="rgb(244,30,34)" fg:x="4740" fg:w="1"/><text x="76.1872%" y="1167.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.18%)</title><rect x="75.7930%" y="1205" width="0.1762%" height="15" fill="rgb(214,106,45)" fg:x="4731" fg:w="11"/><text x="76.0430%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="75.9532%" y="1189" width="0.0160%" height="15" fill="rgb(226,41,9)" fg:x="4741" fg:w="1"/><text x="76.2032%" y="1199.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="76.0654%" y="1189" width="0.0160%" height="15" fill="rgb(253,139,29)" fg:x="4748" fg:w="1"/><text x="76.3154%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (8 samples, 0.13%)</title><rect x="75.9692%" y="1205" width="0.1282%" height="15" fill="rgb(213,205,39)" fg:x="4742" fg:w="8"/><text x="76.2192%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="76.0814%" y="1189" width="0.0160%" height="15" fill="rgb(209,27,10)" fg:x="4749" fg:w="1"/><text x="76.3314%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (25 samples, 0.40%)</title><rect x="75.7129%" y="1221" width="0.4005%" height="15" fill="rgb(249,142,16)" fg:x="4726" fg:w="25"/><text x="75.9629%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="76.0974%" y="1205" width="0.0160%" height="15" fill="rgb(242,65,12)" fg:x="4750" fg:w="1"/><text x="76.3474%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="76.0974%" y="1189" width="0.0160%" height="15" fill="rgb(232,48,10)" fg:x="4750" fg:w="1"/><text x="76.3474%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (35 samples, 0.56%)</title><rect x="75.5847%" y="1253" width="0.5607%" height="15" fill="rgb(253,67,19)" fg:x="4718" fg:w="35"/><text x="75.8347%" y="1263.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (32 samples, 0.51%)</title><rect x="75.6328%" y="1237" width="0.5127%" height="15" fill="rgb(227,93,29)" fg:x="4721" fg:w="32"/><text x="75.8828%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (2 samples, 0.03%)</title><rect x="76.1134%" y="1221" width="0.0320%" height="15" fill="rgb(226,189,53)" fg:x="4751" fg:w="2"/><text x="76.3634%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (2 samples, 0.03%)</title><rect x="76.1134%" y="1205" width="0.0320%" height="15" fill="rgb(223,224,1)" fg:x="4751" fg:w="2"/><text x="76.3634%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.1455%" y="1125" width="0.0160%" height="15" fill="rgb(221,84,32)" fg:x="4753" fg:w="1"/><text x="76.3955%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.1455%" y="1109" width="0.0160%" height="15" fill="rgb(214,189,28)" fg:x="4753" fg:w="1"/><text x="76.3955%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.1455%" y="1093" width="0.0160%" height="15" fill="rgb(234,7,52)" fg:x="4753" fg:w="1"/><text x="76.3955%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.1455%" y="1077" width="0.0160%" height="15" fill="rgb(249,73,31)" fg:x="4753" fg:w="1"/><text x="76.3955%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.1455%" y="1061" width="0.0160%" height="15" fill="rgb(253,153,41)" fg:x="4753" fg:w="1"/><text x="76.3955%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.1455%" y="1045" width="0.0160%" height="15" fill="rgb(249,52,34)" fg:x="4753" fg:w="1"/><text x="76.3955%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.1455%" y="1029" width="0.0160%" height="15" fill="rgb(236,177,47)" fg:x="4753" fg:w="1"/><text x="76.3955%" y="1039.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (59 samples, 0.95%)</title><rect x="75.2323%" y="1269" width="0.9452%" height="15" fill="rgb(252,185,45)" fg:x="4696" fg:w="59"/><text x="75.4823%" y="1279.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (2 samples, 0.03%)</title><rect x="76.1455%" y="1253" width="0.0320%" height="15" fill="rgb(251,15,30)" fg:x="4753" fg:w="2"/><text x="76.3955%" y="1263.50"></text></g><g><title>leveldb::Arena::AllocateAligned (2 samples, 0.03%)</title><rect x="76.1455%" y="1237" width="0.0320%" height="15" fill="rgb(233,31,4)" fg:x="4753" fg:w="2"/><text x="76.3955%" y="1247.50"></text></g><g><title>leveldb::Arena::AllocateFallback (2 samples, 0.03%)</title><rect x="76.1455%" y="1221" width="0.0320%" height="15" fill="rgb(254,44,24)" fg:x="4753" fg:w="2"/><text x="76.3955%" y="1231.50"></text></g><g><title>leveldb::Arena::AllocateFallback (2 samples, 0.03%)</title><rect x="76.1455%" y="1205" width="0.0320%" height="15" fill="rgb(218,54,1)" fg:x="4753" fg:w="2"/><text x="76.3955%" y="1215.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (2 samples, 0.03%)</title><rect x="76.1455%" y="1189" width="0.0320%" height="15" fill="rgb(243,209,39)" fg:x="4753" fg:w="2"/><text x="76.3955%" y="1199.50"></text></g><g><title>operator new (2 samples, 0.03%)</title><rect x="76.1455%" y="1173" width="0.0320%" height="15" fill="rgb(206,75,33)" fg:x="4753" fg:w="2"/><text x="76.3955%" y="1183.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="76.1455%" y="1157" width="0.0320%" height="15" fill="rgb(223,108,18)" fg:x="4753" fg:w="2"/><text x="76.3955%" y="1167.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="76.1455%" y="1141" width="0.0320%" height="15" fill="rgb(244,89,31)" fg:x="4753" fg:w="2"/><text x="76.3955%" y="1151.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="76.1615%" y="1125" width="0.0160%" height="15" fill="rgb(222,167,27)" fg:x="4754" fg:w="1"/><text x="76.4115%" y="1135.50"></text></g><g><title>leveldb::MemTable::Add (61 samples, 0.98%)</title><rect x="75.2163%" y="1285" width="0.9773%" height="15" fill="rgb(247,41,16)" fg:x="4695" fg:w="61"/><text x="75.4663%" y="1295.50"></text></g><g><title>leveldb::WriteBatch::Iterate (1 samples, 0.02%)</title><rect x="76.1775%" y="1269" width="0.0160%" height="15" fill="rgb(233,168,40)" fg:x="4755" fg:w="1"/><text x="76.4275%" y="1279.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (63 samples, 1.01%)</title><rect x="75.2003%" y="1333" width="1.0093%" height="15" fill="rgb(205,211,8)" fg:x="4694" fg:w="63"/><text x="75.4503%" y="1343.50"></text></g><g><title>leveldb::WriteBatch::Iterate (63 samples, 1.01%)</title><rect x="75.2003%" y="1317" width="1.0093%" height="15" fill="rgb(238,105,11)" fg:x="4694" fg:w="63"/><text x="75.4503%" y="1327.50"></text></g><g><title>leveldb::WriteBatch::Iterate (62 samples, 0.99%)</title><rect x="75.2163%" y="1301" width="0.9933%" height="15" fill="rgb(223,142,52)" fg:x="4695" fg:w="62"/><text x="75.4663%" y="1311.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="76.1935%" y="1285" width="0.0160%" height="15" fill="rgb(238,51,33)" fg:x="4756" fg:w="1"/><text x="76.4435%" y="1295.50"></text></g><g><title>CDBWrapper::WriteBatch (66 samples, 1.06%)</title><rect x="75.2003%" y="1365" width="1.0574%" height="15" fill="rgb(231,188,43)" fg:x="4694" fg:w="66"/><text x="75.4503%" y="1375.50"></text></g><g><title>leveldb::DBImpl::Write (66 samples, 1.06%)</title><rect x="75.2003%" y="1349" width="1.0574%" height="15" fill="rgb(216,92,17)" fg:x="4694" fg:w="66"/><text x="75.4503%" y="1359.50"></text></g><g><title>leveldb::log::Writer::AddRecord (3 samples, 0.05%)</title><rect x="76.2095%" y="1333" width="0.0481%" height="15" fill="rgb(228,2,40)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1343.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (3 samples, 0.05%)</title><rect x="76.2095%" y="1317" width="0.0481%" height="15" fill="rgb(226,73,15)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1327.50"></text></g><g><title>Flush (3 samples, 0.05%)</title><rect x="76.2095%" y="1301" width="0.0481%" height="15" fill="rgb(227,66,46)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1311.50"></text></g><g><title>FlushBuffer (3 samples, 0.05%)</title><rect x="76.2095%" y="1285" width="0.0481%" height="15" fill="rgb(209,71,6)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (3 samples, 0.05%)</title><rect x="76.2095%" y="1269" width="0.0481%" height="15" fill="rgb(246,100,25)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1279.50"></text></g><g><title>__GI___libc_write (3 samples, 0.05%)</title><rect x="76.2095%" y="1253" width="0.0481%" height="15" fill="rgb(248,185,27)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="76.2095%" y="1237" width="0.0481%" height="15" fill="rgb(225,118,47)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="76.2095%" y="1221" width="0.0481%" height="15" fill="rgb(220,185,44)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="76.2095%" y="1205" width="0.0481%" height="15" fill="rgb(227,95,24)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="76.2095%" y="1189" width="0.0481%" height="15" fill="rgb(252,84,24)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1199.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="76.2095%" y="1173" width="0.0481%" height="15" fill="rgb(240,34,44)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="76.2095%" y="1157" width="0.0481%" height="15" fill="rgb(209,72,54)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1167.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="76.2095%" y="1141" width="0.0481%" height="15" fill="rgb(226,19,45)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="76.2095%" y="1125" width="0.0481%" height="15" fill="rgb(246,7,45)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="76.2095%" y="1109" width="0.0481%" height="15" fill="rgb(225,45,2)" fg:x="4757" fg:w="3"/><text x="76.4595%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="76.2256%" y="1093" width="0.0320%" height="15" fill="rgb(221,80,29)" fg:x="4758" fg:w="2"/><text x="76.4756%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="76.2256%" y="1077" width="0.0320%" height="15" fill="rgb(228,11,19)" fg:x="4758" fg:w="2"/><text x="76.4756%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="76.2256%" y="1061" width="0.0320%" height="15" fill="rgb(243,17,21)" fg:x="4758" fg:w="2"/><text x="76.4756%" y="1071.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1365" width="0.0160%" height="15" fill="rgb(243,88,8)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1375.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1349" width="0.0160%" height="15" fill="rgb(214,17,9)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1359.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1333" width="0.0160%" height="15" fill="rgb(232,169,15)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1343.50"></text></g><g><title>Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1317" width="0.0160%" height="15" fill="rgb(232,86,53)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1327.50"></text></g><g><title>Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1301" width="0.0160%" height="15" fill="rgb(222,100,4)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1311.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1285" width="0.0160%" height="15" fill="rgb(253,151,38)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1295.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1269" width="0.0160%" height="15" fill="rgb(238,215,29)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1279.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1253" width="0.0160%" height="15" fill="rgb(205,128,53)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1263.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1237" width="0.0160%" height="15" fill="rgb(248,183,14)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1247.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1221" width="0.0160%" height="15" fill="rgb(244,172,35)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1231.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1205" width="0.0160%" height="15" fill="rgb(234,93,19)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1215.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="76.2576%" y="1189" width="0.0160%" height="15" fill="rgb(227,109,7)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1199.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="76.2576%" y="1173" width="0.0160%" height="15" fill="rgb(233,136,54)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1183.50"></text></g><g><title>DataStream::reserve (1 samples, 0.02%)</title><rect x="76.2576%" y="1157" width="0.0160%" height="15" fill="rgb(233,19,40)" fg:x="4760" fg:w="1"/><text x="76.5076%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.2736%" y="1205" width="0.0160%" height="15" fill="rgb(247,41,18)" fg:x="4761" fg:w="1"/><text x="76.5236%" y="1215.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2736%" y="1189" width="0.0160%" height="15" fill="rgb(220,34,34)" fg:x="4761" fg:w="1"/><text x="76.5236%" y="1199.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="76.2736%" y="1173" width="0.0160%" height="15" fill="rgb(222,135,32)" fg:x="4761" fg:w="1"/><text x="76.5236%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="76.2736%" y="1157" width="0.0160%" height="15" fill="rgb(214,80,19)" fg:x="4761" fg:w="1"/><text x="76.5236%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="76.2736%" y="1301" width="0.0320%" height="15" fill="rgb(234,54,46)" fg:x="4761" fg:w="2"/><text x="76.5236%" y="1311.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="76.2736%" y="1285" width="0.0320%" height="15" fill="rgb(251,48,23)" fg:x="4761" fg:w="2"/><text x="76.5236%" y="1295.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="76.2736%" y="1269" width="0.0320%" height="15" fill="rgb(254,109,52)" fg:x="4761" fg:w="2"/><text x="76.5236%" y="1279.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="76.2736%" y="1253" width="0.0320%" height="15" fill="rgb(240,186,19)" fg:x="4761" fg:w="2"/><text x="76.5236%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="76.2736%" y="1237" width="0.0320%" height="15" fill="rgb(246,187,17)" fg:x="4761" fg:w="2"/><text x="76.5236%" y="1247.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="76.2736%" y="1221" width="0.0320%" height="15" fill="rgb(212,21,5)" fg:x="4761" fg:w="2"/><text x="76.5236%" y="1231.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="1205" width="0.0160%" height="15" fill="rgb(225,185,18)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1215.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="1189" width="0.0160%" height="15" fill="rgb(245,114,17)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1199.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="1173" width="0.0160%" height="15" fill="rgb(223,164,24)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1183.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="76.2897%" y="1157" width="0.0160%" height="15" fill="rgb(211,228,3)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="1141" width="0.0160%" height="15" fill="rgb(223,16,38)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1151.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="76.2897%" y="1125" width="0.0160%" height="15" fill="rgb(207,31,54)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="1109" width="0.0160%" height="15" fill="rgb(220,39,11)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1119.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="76.2897%" y="1093" width="0.0160%" height="15" fill="rgb(235,185,0)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1103.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="1077" width="0.0160%" height="15" fill="rgb(249,39,18)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1087.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="76.2897%" y="1061" width="0.0160%" height="15" fill="rgb(240,110,33)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1071.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="1045" width="0.0160%" height="15" fill="rgb(210,92,42)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1055.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="1029" width="0.0160%" height="15" fill="rgb(218,215,28)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1039.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="1013" width="0.0160%" height="15" fill="rgb(238,215,36)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1023.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="997" width="0.0160%" height="15" fill="rgb(220,31,10)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="1007.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="981" width="0.0160%" height="15" fill="rgb(212,93,14)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="991.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="965" width="0.0160%" height="15" fill="rgb(254,207,2)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="975.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="949" width="0.0160%" height="15" fill="rgb(205,57,44)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="959.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="933" width="0.0160%" height="15" fill="rgb(226,151,19)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="943.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="917" width="0.0160%" height="15" fill="rgb(230,72,30)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="927.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="901" width="0.0160%" height="15" fill="rgb(244,0,8)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="911.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.2897%" y="885" width="0.0160%" height="15" fill="rgb(230,192,6)" fg:x="4762" fg:w="1"/><text x="76.5397%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (3 samples, 0.05%)</title><rect x="76.2736%" y="1349" width="0.0481%" height="15" fill="rgb(233,207,13)" fg:x="4761" fg:w="3"/><text x="76.5236%" y="1359.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (3 samples, 0.05%)</title><rect x="76.2736%" y="1333" width="0.0481%" height="15" fill="rgb(206,227,7)" fg:x="4761" fg:w="3"/><text x="76.5236%" y="1343.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="76.2736%" y="1317" width="0.0481%" height="15" fill="rgb(213,217,25)" fg:x="4761" fg:w="3"/><text x="76.5236%" y="1327.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="76.3057%" y="1301" width="0.0160%" height="15" fill="rgb(249,75,4)" fg:x="4763" fg:w="1"/><text x="76.5557%" y="1311.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="76.3057%" y="1285" width="0.0160%" height="15" fill="rgb(225,114,18)" fg:x="4763" fg:w="1"/><text x="76.5557%" y="1295.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="76.3057%" y="1269" width="0.0160%" height="15" fill="rgb(211,162,40)" fg:x="4763" fg:w="1"/><text x="76.5557%" y="1279.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="76.3057%" y="1253" width="0.0160%" height="15" fill="rgb(206,49,29)" fg:x="4763" fg:w="1"/><text x="76.5557%" y="1263.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="76.3057%" y="1237" width="0.0160%" height="15" fill="rgb(244,8,6)" fg:x="4763" fg:w="1"/><text x="76.5557%" y="1247.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="76.3057%" y="1221" width="0.0160%" height="15" fill="rgb(231,194,28)" fg:x="4763" fg:w="1"/><text x="76.5557%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="76.3057%" y="1205" width="0.0160%" height="15" fill="rgb(210,69,5)" fg:x="4763" fg:w="1"/><text x="76.5557%" y="1215.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="76.3057%" y="1189" width="0.0160%" height="15" fill="rgb(216,186,12)" fg:x="4763" fg:w="1"/><text x="76.5557%" y="1199.50"></text></g><g><title>CCoinsViewDB::BatchWrite (2 samples, 0.03%)</title><rect x="76.3217%" y="1125" width="0.0320%" height="15" fill="rgb(238,61,15)" fg:x="4764" fg:w="2"/><text x="76.5717%" y="1135.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.03%)</title><rect x="76.3217%" y="1109" width="0.0320%" height="15" fill="rgb(226,104,1)" fg:x="4764" fg:w="2"/><text x="76.5717%" y="1119.50"></text></g><g><title>DataStream::reserve (2 samples, 0.03%)</title><rect x="76.3217%" y="1093" width="0.0320%" height="15" fill="rgb(229,128,15)" fg:x="4764" fg:w="2"/><text x="76.5717%" y="1103.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (2 samples, 0.03%)</title><rect x="76.3217%" y="1077" width="0.0320%" height="15" fill="rgb(247,110,15)" fg:x="4764" fg:w="2"/><text x="76.5717%" y="1087.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="76.3377%" y="1061" width="0.0160%" height="15" fill="rgb(210,74,48)" fg:x="4765" fg:w="1"/><text x="76.5877%" y="1071.50"></text></g><g><title>CCoinsViewDB::BatchWrite (85 samples, 1.36%)</title><rect x="75.0080%" y="1381" width="1.3617%" height="15" fill="rgb(246,121,10)" fg:x="4682" fg:w="85"/><text x="75.2580%" y="1391.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (6 samples, 0.10%)</title><rect x="76.2736%" y="1365" width="0.0961%" height="15" fill="rgb(214,156,37)" fg:x="4761" fg:w="6"/><text x="76.5236%" y="1375.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1349" width="0.0481%" height="15" fill="rgb(214,210,34)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1359.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1333" width="0.0481%" height="15" fill="rgb(237,93,35)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1343.50"></text></g><g><title>Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1317" width="0.0481%" height="15" fill="rgb(206,36,8)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1327.50"></text></g><g><title>Ser&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1301" width="0.0481%" height="15" fill="rgb(208,151,12)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1311.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1285" width="0.0481%" height="15" fill="rgb(225,133,52)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1295.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1269" width="0.0481%" height="15" fill="rgb(231,71,53)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1279.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1253" width="0.0481%" height="15" fill="rgb(243,76,21)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1263.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1237" width="0.0481%" height="15" fill="rgb(252,144,3)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1247.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1221" width="0.0481%" height="15" fill="rgb(231,199,10)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1231.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1205" width="0.0481%" height="15" fill="rgb(215,18,11)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1215.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (3 samples, 0.05%)</title><rect x="76.3217%" y="1189" width="0.0481%" height="15" fill="rgb(241,65,24)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1199.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1173" width="0.0481%" height="15" fill="rgb(251,192,38)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1183.50"></text></g><g><title>DataStream::write (3 samples, 0.05%)</title><rect x="76.3217%" y="1157" width="0.0481%" height="15" fill="rgb(205,9,35)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (3 samples, 0.05%)</title><rect x="76.3217%" y="1141" width="0.0481%" height="15" fill="rgb(229,225,49)" fg:x="4764" fg:w="3"/><text x="76.5717%" y="1151.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="76.3537%" y="1125" width="0.0160%" height="15" fill="rgb(207,125,39)" fg:x="4766" fg:w="1"/><text x="76.6037%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (2 samples, 0.03%)</title><rect x="76.3698%" y="1317" width="0.0320%" height="15" fill="rgb(222,78,19)" fg:x="4767" fg:w="2"/><text x="76.6198%" y="1327.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (2 samples, 0.03%)</title><rect x="76.3698%" y="1301" width="0.0320%" height="15" fill="rgb(248,207,20)" fg:x="4767" fg:w="2"/><text x="76.6198%" y="1311.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (2 samples, 0.03%)</title><rect x="76.3698%" y="1285" width="0.0320%" height="15" fill="rgb(205,103,49)" fg:x="4767" fg:w="2"/><text x="76.6198%" y="1295.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.02%)</title><rect x="76.3858%" y="1269" width="0.0160%" height="15" fill="rgb(216,42,28)" fg:x="4768" fg:w="1"/><text x="76.6358%" y="1279.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.02%)</title><rect x="76.3858%" y="1253" width="0.0160%" height="15" fill="rgb(213,205,53)" fg:x="4768" fg:w="1"/><text x="76.6358%" y="1263.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (1 samples, 0.02%)</title><rect x="76.3858%" y="1237" width="0.0160%" height="15" fill="rgb(239,140,53)" fg:x="4768" fg:w="1"/><text x="76.6358%" y="1247.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (1 samples, 0.02%)</title><rect x="76.3858%" y="1221" width="0.0160%" height="15" fill="rgb(248,95,9)" fg:x="4768" fg:w="1"/><text x="76.6358%" y="1231.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="76.4018%" y="1221" width="0.0160%" height="15" fill="rgb(254,58,47)" fg:x="4769" fg:w="1"/><text x="76.6518%" y="1231.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="76.4018%" y="1205" width="0.0160%" height="15" fill="rgb(234,227,14)" fg:x="4769" fg:w="1"/><text x="76.6518%" y="1215.50"></text></g><g><title>CCoinsViewCache::Flush (94 samples, 1.51%)</title><rect x="74.9760%" y="1397" width="1.5059%" height="15" fill="rgb(205,192,45)" fg:x="4680" fg:w="94"/><text x="75.2260%" y="1407.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (7 samples, 0.11%)</title><rect x="76.3698%" y="1381" width="0.1121%" height="15" fill="rgb(253,187,31)" fg:x="4767" fg:w="7"/><text x="76.6198%" y="1391.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (7 samples, 0.11%)</title><rect x="76.3698%" y="1365" width="0.1121%" height="15" fill="rgb(222,6,32)" fg:x="4767" fg:w="7"/><text x="76.6198%" y="1375.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (7 samples, 0.11%)</title><rect x="76.3698%" y="1349" width="0.1121%" height="15" fill="rgb(249,190,19)" fg:x="4767" fg:w="7"/><text x="76.6198%" y="1359.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (7 samples, 0.11%)</title><rect x="76.3698%" y="1333" width="0.1121%" height="15" fill="rgb(251,28,20)" fg:x="4767" fg:w="7"/><text x="76.6198%" y="1343.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (5 samples, 0.08%)</title><rect x="76.4018%" y="1317" width="0.0801%" height="15" fill="rgb(210,223,40)" fg:x="4769" fg:w="5"/><text x="76.6518%" y="1327.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (5 samples, 0.08%)</title><rect x="76.4018%" y="1301" width="0.0801%" height="15" fill="rgb(216,137,22)" fg:x="4769" fg:w="5"/><text x="76.6518%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (5 samples, 0.08%)</title><rect x="76.4018%" y="1285" width="0.0801%" height="15" fill="rgb(247,39,34)" fg:x="4769" fg:w="5"/><text x="76.6518%" y="1295.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (5 samples, 0.08%)</title><rect x="76.4018%" y="1269" width="0.0801%" height="15" fill="rgb(239,43,50)" fg:x="4769" fg:w="5"/><text x="76.6518%" y="1279.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (5 samples, 0.08%)</title><rect x="76.4018%" y="1253" width="0.0801%" height="15" fill="rgb(241,212,9)" fg:x="4769" fg:w="5"/><text x="76.6518%" y="1263.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (5 samples, 0.08%)</title><rect x="76.4018%" y="1237" width="0.0801%" height="15" fill="rgb(205,8,2)" fg:x="4769" fg:w="5"/><text x="76.6518%" y="1247.50"></text></g><g><title>Coin::~Coin (4 samples, 0.06%)</title><rect x="76.4178%" y="1221" width="0.0641%" height="15" fill="rgb(217,173,54)" fg:x="4770" fg:w="4"/><text x="76.6678%" y="1231.50"></text></g><g><title>CTxOut::~CTxOut (4 samples, 0.06%)</title><rect x="76.4178%" y="1205" width="0.0641%" height="15" fill="rgb(208,149,52)" fg:x="4770" fg:w="4"/><text x="76.6678%" y="1215.50"></text></g><g><title>CScript::~CScript (4 samples, 0.06%)</title><rect x="76.4178%" y="1189" width="0.0641%" height="15" fill="rgb(239,99,40)" fg:x="4770" fg:w="4"/><text x="76.6678%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (4 samples, 0.06%)</title><rect x="76.4178%" y="1173" width="0.0641%" height="15" fill="rgb(233,214,26)" fg:x="4770" fg:w="4"/><text x="76.6678%" y="1183.50"></text></g><g><title>Chainstate::ForceFlushStateToDisk (95 samples, 1.52%)</title><rect x="74.9760%" y="1429" width="1.5219%" height="15" fill="rgb(231,225,37)" fg:x="4680" fg:w="95"/><text x="75.2260%" y="1439.50"></text></g><g><title>Chainstate::FlushStateToDisk (95 samples, 1.52%)</title><rect x="74.9760%" y="1413" width="1.5219%" height="15" fill="rgb(252,55,35)" fg:x="4680" fg:w="95"/><text x="75.2260%" y="1423.50"></text></g><g><title>node::BlockManager::FlushChainstateBlockFile (1 samples, 0.02%)</title><rect x="76.4819%" y="1397" width="0.0160%" height="15" fill="rgb(239,43,18)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1407.50"></text></g><g><title>node::BlockManager::FlushBlockFile (1 samples, 0.02%)</title><rect x="76.4819%" y="1381" width="0.0160%" height="15" fill="rgb(251,125,49)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1391.50"></text></g><g><title>FlatFileSeq::Flush (1 samples, 0.02%)</title><rect x="76.4819%" y="1365" width="0.0160%" height="15" fill="rgb(212,83,54)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1375.50"></text></g><g><title>FileCommit (1 samples, 0.02%)</title><rect x="76.4819%" y="1349" width="0.0160%" height="15" fill="rgb(250,75,6)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1359.50"></text></g><g><title>fdatasync (1 samples, 0.02%)</title><rect x="76.4819%" y="1333" width="0.0160%" height="15" fill="rgb(252,36,40)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4819%" y="1317" width="0.0160%" height="15" fill="rgb(230,91,51)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4819%" y="1301" width="0.0160%" height="15" fill="rgb(212,92,28)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4819%" y="1285" width="0.0160%" height="15" fill="rgb(227,13,22)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1295.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="76.4819%" y="1269" width="0.0160%" height="15" fill="rgb(239,204,32)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4819%" y="1253" width="0.0160%" height="15" fill="rgb(228,49,41)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4819%" y="1237" width="0.0160%" height="15" fill="rgb(206,95,6)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4819%" y="1221" width="0.0160%" height="15" fill="rgb(251,20,14)" fg:x="4774" fg:w="1"/><text x="76.7319%" y="1231.50"></text></g><g><title>leveldb::MemTable::Unref (1 samples, 0.02%)</title><rect x="76.4979%" y="1221" width="0.0160%" height="15" fill="rgb(214,99,28)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1231.50"></text></g><g><title>leveldb::MemTable::~MemTable (1 samples, 0.02%)</title><rect x="76.4979%" y="1205" width="0.0160%" height="15" fill="rgb(239,122,54)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="76.4979%" y="1189" width="0.0160%" height="15" fill="rgb(218,217,46)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1199.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="76.4979%" y="1173" width="0.0160%" height="15" fill="rgb(249,106,28)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1183.50"></text></g><g><title>systrim.constprop.0 (1 samples, 0.02%)</title><rect x="76.4979%" y="1157" width="0.0160%" height="15" fill="rgb(250,158,18)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1167.50"></text></g><g><title>__default_morecore@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="76.4979%" y="1141" width="0.0160%" height="15" fill="rgb(226,137,29)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1151.50"></text></g><g><title>__sbrk (1 samples, 0.02%)</title><rect x="76.4979%" y="1125" width="0.0160%" height="15" fill="rgb(210,188,1)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1135.50"></text></g><g><title>__brk (1 samples, 0.02%)</title><rect x="76.4979%" y="1109" width="0.0160%" height="15" fill="rgb(227,84,42)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="1093" width="0.0160%" height="15" fill="rgb(222,147,48)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="1077" width="0.0160%" height="15" fill="rgb(241,150,43)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="1061" width="0.0160%" height="15" fill="rgb(206,139,52)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="1045" width="0.0160%" height="15" fill="rgb(230,63,14)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="1029" width="0.0160%" height="15" fill="rgb(247,8,20)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="1013" width="0.0160%" height="15" fill="rgb(213,115,4)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="997" width="0.0160%" height="15" fill="rgb(241,79,49)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="981" width="0.0160%" height="15" fill="rgb(222,42,35)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="965" width="0.0160%" height="15" fill="rgb(247,59,23)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="949" width="0.0160%" height="15" fill="rgb(247,93,18)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.4979%" y="933" width="0.0160%" height="15" fill="rgb(249,107,47)" fg:x="4775" fg:w="1"/><text x="76.7479%" y="943.50"></text></g><g><title>Chainstate::ResetCoinsViews (24 samples, 0.38%)</title><rect x="76.4979%" y="1429" width="0.3845%" height="15" fill="rgb(219,27,1)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1439.50"></text></g><g><title>std::unique_ptr&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (24 samples, 0.38%)</title><rect x="76.4979%" y="1413" width="0.3845%" height="15" fill="rgb(217,82,32)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1423.50"></text></g><g><title>std::__uniq_ptr_impl&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (24 samples, 0.38%)</title><rect x="76.4979%" y="1397" width="0.3845%" height="15" fill="rgb(250,129,47)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1407.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (24 samples, 0.38%)</title><rect x="76.4979%" y="1381" width="0.3845%" height="15" fill="rgb(253,88,35)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1391.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (24 samples, 0.38%)</title><rect x="76.4979%" y="1365" width="0.3845%" height="15" fill="rgb(245,221,14)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1375.50"></text></g><g><title>CoinsViews::~CoinsViews (24 samples, 0.38%)</title><rect x="76.4979%" y="1349" width="0.3845%" height="15" fill="rgb(217,119,54)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1359.50"></text></g><g><title>CCoinsViewDB::~CCoinsViewDB (24 samples, 0.38%)</title><rect x="76.4979%" y="1333" width="0.3845%" height="15" fill="rgb(247,128,31)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1343.50"></text></g><g><title>std::unique_ptr&lt;CDBWrapper, std::default_delete&lt;CDBWrapper&gt; &gt;::~unique_ptr (24 samples, 0.38%)</title><rect x="76.4979%" y="1317" width="0.3845%" height="15" fill="rgb(211,99,22)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1327.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (24 samples, 0.38%)</title><rect x="76.4979%" y="1301" width="0.3845%" height="15" fill="rgb(212,20,17)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1311.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (24 samples, 0.38%)</title><rect x="76.4979%" y="1285" width="0.3845%" height="15" fill="rgb(209,159,29)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1295.50"></text></g><g><title>CDBWrapper::~CDBWrapper (24 samples, 0.38%)</title><rect x="76.4979%" y="1269" width="0.3845%" height="15" fill="rgb(222,177,53)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1279.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (24 samples, 0.38%)</title><rect x="76.4979%" y="1253" width="0.3845%" height="15" fill="rgb(234,46,43)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1263.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (24 samples, 0.38%)</title><rect x="76.4979%" y="1237" width="0.3845%" height="15" fill="rgb(208,108,14)" fg:x="4775" fg:w="24"/><text x="76.7479%" y="1247.50"></text></g><g><title>leveldb::TableCache::~TableCache (23 samples, 0.37%)</title><rect x="76.5139%" y="1221" width="0.3685%" height="15" fill="rgb(226,78,53)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1231.50"></text></g><g><title>~ShardedLRUCache (23 samples, 0.37%)</title><rect x="76.5139%" y="1205" width="0.3685%" height="15" fill="rgb(230,20,41)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::~ShardedLRUCache (23 samples, 0.37%)</title><rect x="76.5139%" y="1189" width="0.3685%" height="15" fill="rgb(213,195,35)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1199.50"></text></g><g><title>~LRUCache (23 samples, 0.37%)</title><rect x="76.5139%" y="1173" width="0.3685%" height="15" fill="rgb(242,62,36)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::~LRUCache (23 samples, 0.37%)</title><rect x="76.5139%" y="1157" width="0.3685%" height="15" fill="rgb(222,210,37)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1167.50"></text></g><g><title>leveldb::DeleteEntry (23 samples, 0.37%)</title><rect x="76.5139%" y="1141" width="0.3685%" height="15" fill="rgb(232,107,19)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1151.50"></text></g><g><title>~PosixMmapReadableFile (23 samples, 0.37%)</title><rect x="76.5139%" y="1125" width="0.3685%" height="15" fill="rgb(235,85,17)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (23 samples, 0.37%)</title><rect x="76.5139%" y="1109" width="0.3685%" height="15" fill="rgb(219,195,31)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1119.50"></text></g><g><title>__munmap (23 samples, 0.37%)</title><rect x="76.5139%" y="1093" width="0.3685%" height="15" fill="rgb(231,183,30)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1103.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="76.5139%" y="1077" width="0.3685%" height="15" fill="rgb(212,0,11)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1087.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="76.5139%" y="1061" width="0.3685%" height="15" fill="rgb(249,53,54)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1071.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="76.5139%" y="1045" width="0.3685%" height="15" fill="rgb(211,118,13)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1055.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="76.5139%" y="1029" width="0.3685%" height="15" fill="rgb(237,42,9)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1039.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="76.5139%" y="1013" width="0.3685%" height="15" fill="rgb(227,68,32)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1023.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="76.5139%" y="997" width="0.3685%" height="15" fill="rgb(238,10,7)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="1007.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="76.5139%" y="981" width="0.3685%" height="15" fill="rgb(224,42,12)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="991.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="76.5139%" y="965" width="0.3685%" height="15" fill="rgb(252,190,5)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="975.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="76.5139%" y="949" width="0.3685%" height="15" fill="rgb(220,214,39)" fg:x="4776" fg:w="23"/><text x="76.7639%" y="959.50"></text></g><g><title>[unknown] (14 samples, 0.22%)</title><rect x="76.6581%" y="933" width="0.2243%" height="15" fill="rgb(247,98,4)" fg:x="4785" fg:w="14"/><text x="76.9081%" y="943.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="76.8183%" y="917" width="0.0641%" height="15" fill="rgb(211,60,12)" fg:x="4795" fg:w="4"/><text x="77.0683%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="76.8504%" y="901" width="0.0320%" height="15" fill="rgb(224,42,10)" fg:x="4797" fg:w="2"/><text x="77.1004%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8664%" y="885" width="0.0160%" height="15" fill="rgb(217,167,4)" fg:x="4798" fg:w="1"/><text x="77.1164%" y="895.50"></text></g><g><title>StopHTTPServer (1 samples, 0.02%)</title><rect x="76.8824%" y="1429" width="0.0160%" height="15" fill="rgb(253,18,17)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1439.50"></text></g><g><title>std::thread::join (1 samples, 0.02%)</title><rect x="76.8824%" y="1413" width="0.0160%" height="15" fill="rgb(249,186,44)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1423.50"></text></g><g><title>__pthread_clockjoin_ex (1 samples, 0.02%)</title><rect x="76.8824%" y="1397" width="0.0160%" height="15" fill="rgb(254,124,54)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1407.50"></text></g><g><title>__GI___nptl_deallocate_stack (1 samples, 0.02%)</title><rect x="76.8824%" y="1381" width="0.0160%" height="15" fill="rgb(220,124,39)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1391.50"></text></g><g><title>__nptl_free_stacks (1 samples, 0.02%)</title><rect x="76.8824%" y="1365" width="0.0160%" height="15" fill="rgb(225,96,46)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1375.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="76.8824%" y="1349" width="0.0160%" height="15" fill="rgb(221,106,12)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1333" width="0.0160%" height="15" fill="rgb(227,133,23)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1317" width="0.0160%" height="15" fill="rgb(216,44,52)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1301" width="0.0160%" height="15" fill="rgb(239,149,7)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1285" width="0.0160%" height="15" fill="rgb(211,157,31)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1269" width="0.0160%" height="15" fill="rgb(206,215,22)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1253" width="0.0160%" height="15" fill="rgb(208,113,15)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1237" width="0.0160%" height="15" fill="rgb(207,189,15)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1221" width="0.0160%" height="15" fill="rgb(231,115,4)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1205" width="0.0160%" height="15" fill="rgb(253,117,2)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1189" width="0.0160%" height="15" fill="rgb(248,48,24)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8824%" y="1173" width="0.0160%" height="15" fill="rgb(241,28,46)" fg:x="4799" fg:w="1"/><text x="77.1324%" y="1183.50"></text></g><g><title>ValidationCache::~ValidationCache (1 samples, 0.02%)</title><rect x="76.8984%" y="1349" width="0.0160%" height="15" fill="rgb(216,165,52)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1359.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::~cache (1 samples, 0.02%)</title><rect x="76.8984%" y="1333" width="0.0160%" height="15" fill="rgb(220,222,34)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1343.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="76.8984%" y="1317" width="0.0160%" height="15" fill="rgb(247,222,49)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1327.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="76.8984%" y="1301" width="0.0160%" height="15" fill="rgb(240,10,31)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1311.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="76.8984%" y="1285" width="0.0160%" height="15" fill="rgb(221,199,35)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1295.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;uint256&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="76.8984%" y="1269" width="0.0160%" height="15" fill="rgb(230,223,11)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1279.50"></text></g><g><title>std::allocator&lt;uint256&gt;::deallocate (1 samples, 0.02%)</title><rect x="76.8984%" y="1253" width="0.0160%" height="15" fill="rgb(218,82,45)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1263.50"></text></g><g><title>std::__new_allocator&lt;uint256&gt;::deallocate (1 samples, 0.02%)</title><rect x="76.8984%" y="1237" width="0.0160%" height="15" fill="rgb(233,213,33)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1247.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="76.8984%" y="1221" width="0.0160%" height="15" fill="rgb(210,143,52)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1231.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="76.8984%" y="1205" width="0.0160%" height="15" fill="rgb(206,95,4)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1189" width="0.0160%" height="15" fill="rgb(246,164,46)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1173" width="0.0160%" height="15" fill="rgb(213,210,47)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1157" width="0.0160%" height="15" fill="rgb(210,12,38)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1141" width="0.0160%" height="15" fill="rgb(252,192,54)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1125" width="0.0160%" height="15" fill="rgb(242,92,6)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1109" width="0.0160%" height="15" fill="rgb(253,154,15)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1093" width="0.0160%" height="15" fill="rgb(209,20,43)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1077" width="0.0160%" height="15" fill="rgb(232,28,49)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1061" width="0.0160%" height="15" fill="rgb(248,131,53)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1045" width="0.0160%" height="15" fill="rgb(214,16,30)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1029" width="0.0160%" height="15" fill="rgb(245,16,0)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="1013" width="0.0160%" height="15" fill="rgb(245,17,35)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="997" width="0.0160%" height="15" fill="rgb(249,27,53)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.8984%" y="981" width="0.0160%" height="15" fill="rgb(214,73,24)" fg:x="4800" fg:w="1"/><text x="77.1484%" y="991.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="76.9145%" y="1285" width="0.0160%" height="15" fill="rgb(223,84,37)" fg:x="4801" fg:w="1"/><text x="77.1645%" y="1295.50"></text></g><g><title>_start (123 samples, 1.97%)</title><rect x="74.9760%" y="1509" width="1.9705%" height="15" fill="rgb(210,109,28)" fg:x="4680" fg:w="123"/><text x="75.2260%" y="1519.50">_..</text></g><g><title>__libc_start_main@@GLIBC_2.34 (123 samples, 1.97%)</title><rect x="74.9760%" y="1493" width="1.9705%" height="15" fill="rgb(208,186,6)" fg:x="4680" fg:w="123"/><text x="75.2260%" y="1503.50">_..</text></g><g><title>__libc_start_call_main (123 samples, 1.97%)</title><rect x="74.9760%" y="1477" width="1.9705%" height="15" fill="rgb(235,201,30)" fg:x="4680" fg:w="123"/><text x="75.2260%" y="1487.50">_..</text></g><g><title>main (123 samples, 1.97%)</title><rect x="74.9760%" y="1461" width="1.9705%" height="15" fill="rgb(216,198,48)" fg:x="4680" fg:w="123"/><text x="75.2260%" y="1471.50">m..</text></g><g><title>Shutdown (123 samples, 1.97%)</title><rect x="74.9760%" y="1445" width="1.9705%" height="15" fill="rgb(254,186,25)" fg:x="4680" fg:w="123"/><text x="75.2260%" y="1455.50">S..</text></g><g><title>std::unique_ptr&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (3 samples, 0.05%)</title><rect x="76.8984%" y="1429" width="0.0481%" height="15" fill="rgb(227,87,5)" fg:x="4800" fg:w="3"/><text x="77.1484%" y="1439.50"></text></g><g><title>std::__uniq_ptr_impl&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (3 samples, 0.05%)</title><rect x="76.8984%" y="1413" width="0.0481%" height="15" fill="rgb(236,205,25)" fg:x="4800" fg:w="3"/><text x="77.1484%" y="1423.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (3 samples, 0.05%)</title><rect x="76.8984%" y="1397" width="0.0481%" height="15" fill="rgb(229,99,32)" fg:x="4800" fg:w="3"/><text x="77.1484%" y="1407.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (3 samples, 0.05%)</title><rect x="76.8984%" y="1381" width="0.0481%" height="15" fill="rgb(231,177,31)" fg:x="4800" fg:w="3"/><text x="77.1484%" y="1391.50"></text></g><g><title>ChainstateManager::~ChainstateManager (3 samples, 0.05%)</title><rect x="76.8984%" y="1365" width="0.0481%" height="15" fill="rgb(246,15,2)" fg:x="4800" fg:w="3"/><text x="77.1484%" y="1375.50"></text></g><g><title>node::BlockManager::~BlockManager (2 samples, 0.03%)</title><rect x="76.9145%" y="1349" width="0.0320%" height="15" fill="rgb(207,39,15)" fg:x="4801" fg:w="2"/><text x="77.1645%" y="1359.50"></text></g><g><title>std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::~unordered_map (2 samples, 0.03%)</title><rect x="76.9145%" y="1333" width="0.0320%" height="15" fill="rgb(207,44,9)" fg:x="4801" fg:w="2"/><text x="77.1645%" y="1343.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.03%)</title><rect x="76.9145%" y="1317" width="0.0320%" height="15" fill="rgb(225,224,33)" fg:x="4801" fg:w="2"/><text x="77.1645%" y="1327.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.03%)</title><rect x="76.9145%" y="1301" width="0.0320%" height="15" fill="rgb(252,151,3)" fg:x="4801" fg:w="2"/><text x="77.1645%" y="1311.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="76.9305%" y="1285" width="0.0160%" height="15" fill="rgb(211,140,13)" fg:x="4802" fg:w="1"/><text x="77.1805%" y="1295.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="76.9305%" y="1269" width="0.0160%" height="15" fill="rgb(239,225,17)" fg:x="4802" fg:w="1"/><text x="77.1805%" y="1279.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (1 samples, 0.02%)</title><rect x="76.9305%" y="1253" width="0.0160%" height="15" fill="rgb(223,170,52)" fg:x="4802" fg:w="1"/><text x="77.1805%" y="1263.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="76.9305%" y="1237" width="0.0160%" height="15" fill="rgb(212,64,21)" fg:x="4802" fg:w="1"/><text x="77.1805%" y="1247.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="76.9305%" y="1221" width="0.0160%" height="15" fill="rgb(236,126,48)" fg:x="4802" fg:w="1"/><text x="77.1805%" y="1231.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="76.9305%" y="1205" width="0.0160%" height="15" fill="rgb(209,135,11)" fg:x="4802" fg:w="1"/><text x="77.1805%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="76.9305%" y="1189" width="0.0160%" height="15" fill="rgb(228,126,40)" fg:x="4802" fg:w="1"/><text x="77.1805%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="76.9305%" y="1173" width="0.0160%" height="15" fill="rgb(205,196,36)" fg:x="4802" fg:w="1"/><text x="77.1805%" y="1183.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="76.9305%" y="1157" width="0.0160%" height="15" fill="rgb(243,160,33)" fg:x="4802" fg:w="1"/><text x="77.1805%" y="1167.50"></text></g><g><title>b-shutoff (156 samples, 2.50%)</title><rect x="74.4633%" y="1525" width="2.4992%" height="15" fill="rgb(210,84,20)" fg:x="4648" fg:w="156"/><text x="74.7133%" y="1535.50">b-..</text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="76.9465%" y="1509" width="0.0160%" height="15" fill="rgb(228,213,30)" fg:x="4803" fg:w="1"/><text x="77.1965%" y="1519.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="76.9465%" y="1493" width="0.0160%" height="15" fill="rgb(252,33,45)" fg:x="4803" fg:w="1"/><text x="77.1965%" y="1503.50"></text></g><g><title>AppInitMain (1 samples, 0.02%)</title><rect x="76.9625%" y="1509" width="0.0160%" height="15" fill="rgb(254,227,20)" fg:x="4804" fg:w="1"/><text x="77.2125%" y="1519.50"></text></g><g><title>AppInitMain (1 samples, 0.02%)</title><rect x="76.9625%" y="1493" width="0.0160%" height="15" fill="rgb(228,192,2)" fg:x="4804" fg:w="1"/><text x="77.2125%" y="1503.50"></text></g><g><title>RegisterBlockchainRPCCommands (1 samples, 0.02%)</title><rect x="76.9625%" y="1477" width="0.0160%" height="15" fill="rgb(233,32,8)" fg:x="4804" fg:w="1"/><text x="77.2125%" y="1487.50"></text></g><g><title>CRPCCommand::CRPCCommand (1 samples, 0.02%)</title><rect x="76.9625%" y="1461" width="0.0160%" height="15" fill="rgb(220,146,47)" fg:x="4804" fg:w="1"/><text x="77.2125%" y="1471.50"></text></g><g><title>gettxoutsetinfo (1 samples, 0.02%)</title><rect x="76.9625%" y="1445" width="0.0160%" height="15" fill="rgb(246,194,1)" fg:x="4804" fg:w="1"/><text x="77.2125%" y="1455.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="76.9625%" y="1429" width="0.0160%" height="15" fill="rgb(218,203,9)" fg:x="4804" fg:w="1"/><text x="77.2125%" y="1439.50"></text></g><g><title>[000125.ldb] (1 samples, 0.02%)</title><rect x="76.9785%" y="1509" width="0.0160%" height="15" fill="rgb(237,97,14)" fg:x="4805" fg:w="1"/><text x="77.2285%" y="1519.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="76.9785%" y="1493" width="0.0160%" height="15" fill="rgb(239,76,15)" fg:x="4805" fg:w="1"/><text x="77.2285%" y="1503.50"></text></g><g><title>[000183.ldb] (1 samples, 0.02%)</title><rect x="76.9946%" y="1509" width="0.0160%" height="15" fill="rgb(222,53,45)" fg:x="4806" fg:w="1"/><text x="77.2446%" y="1519.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="76.9946%" y="1493" width="0.0160%" height="15" fill="rgb(237,88,5)" fg:x="4806" fg:w="1"/><text x="77.2446%" y="1503.50"></text></g><g><title>[000199.ldb] (1 samples, 0.02%)</title><rect x="77.0106%" y="1509" width="0.0160%" height="15" fill="rgb(218,223,35)" fg:x="4807" fg:w="1"/><text x="77.2606%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="77.0106%" y="1493" width="0.0160%" height="15" fill="rgb(243,229,38)" fg:x="4807" fg:w="1"/><text x="77.2606%" y="1503.50"></text></g><g><title>[000217.ldb] (1 samples, 0.02%)</title><rect x="77.0266%" y="1509" width="0.0160%" height="15" fill="rgb(240,75,41)" fg:x="4808" fg:w="1"/><text x="77.2766%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="77.0266%" y="1493" width="0.0160%" height="15" fill="rgb(209,110,37)" fg:x="4808" fg:w="1"/><text x="77.2766%" y="1503.50"></text></g><g><title>__clone (86 samples, 1.38%)</title><rect x="77.0426%" y="1493" width="1.3778%" height="15" fill="rgb(221,130,46)" fg:x="4809" fg:w="86"/><text x="77.2926%" y="1503.50"></text></g><g><title>[unknown] (85 samples, 1.36%)</title><rect x="77.0586%" y="1477" width="1.3617%" height="15" fill="rgb(237,160,20)" fg:x="4810" fg:w="85"/><text x="77.3086%" y="1487.50"></text></g><g><title>[unknown] (82 samples, 1.31%)</title><rect x="77.1067%" y="1461" width="1.3137%" height="15" fill="rgb(234,126,24)" fg:x="4813" fg:w="82"/><text x="77.3567%" y="1471.50"></text></g><g><title>[unknown] (80 samples, 1.28%)</title><rect x="77.1387%" y="1445" width="1.2816%" height="15" fill="rgb(207,177,9)" fg:x="4815" fg:w="80"/><text x="77.3887%" y="1455.50"></text></g><g><title>[unknown] (79 samples, 1.27%)</title><rect x="77.1548%" y="1429" width="1.2656%" height="15" fill="rgb(231,191,33)" fg:x="4816" fg:w="79"/><text x="77.4048%" y="1439.50"></text></g><g><title>[unknown] (78 samples, 1.25%)</title><rect x="77.1708%" y="1413" width="1.2496%" height="15" fill="rgb(207,42,1)" fg:x="4817" fg:w="78"/><text x="77.4208%" y="1423.50"></text></g><g><title>[unknown] (76 samples, 1.22%)</title><rect x="77.2028%" y="1397" width="1.2176%" height="15" fill="rgb(218,34,50)" fg:x="4819" fg:w="76"/><text x="77.4528%" y="1407.50"></text></g><g><title>[unknown] (76 samples, 1.22%)</title><rect x="77.2028%" y="1381" width="1.2176%" height="15" fill="rgb(254,126,39)" fg:x="4819" fg:w="76"/><text x="77.4528%" y="1391.50"></text></g><g><title>[unknown] (76 samples, 1.22%)</title><rect x="77.2028%" y="1365" width="1.2176%" height="15" fill="rgb(251,17,26)" fg:x="4819" fg:w="76"/><text x="77.4528%" y="1375.50"></text></g><g><title>[unknown] (73 samples, 1.17%)</title><rect x="77.2509%" y="1349" width="1.1695%" height="15" fill="rgb(252,215,34)" fg:x="4822" fg:w="73"/><text x="77.5009%" y="1359.50"></text></g><g><title>[unknown] (34 samples, 0.54%)</title><rect x="77.8757%" y="1333" width="0.5447%" height="15" fill="rgb(217,120,44)" fg:x="4861" fg:w="34"/><text x="78.1257%" y="1343.50"></text></g><g><title>[unknown] (25 samples, 0.40%)</title><rect x="78.0199%" y="1317" width="0.4005%" height="15" fill="rgb(211,31,11)" fg:x="4870" fg:w="25"/><text x="78.2699%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.4044%" y="1301" width="0.0160%" height="15" fill="rgb(222,69,51)" fg:x="4894" fg:w="1"/><text x="78.6544%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.4044%" y="1285" width="0.0160%" height="15" fill="rgb(215,229,42)" fg:x="4894" fg:w="1"/><text x="78.6544%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="78.4204%" y="1493" width="0.0160%" height="15" fill="rgb(212,102,15)" fg:x="4895" fg:w="1"/><text x="78.6704%" y="1503.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="78.4364%" y="1493" width="0.0160%" height="15" fill="rgb(205,179,41)" fg:x="4896" fg:w="1"/><text x="78.6864%" y="1503.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="78.4524%" y="1493" width="0.0320%" height="15" fill="rgb(219,148,46)" fg:x="4897" fg:w="2"/><text x="78.7024%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="78.4845%" y="1493" width="0.0160%" height="15" fill="rgb(243,40,19)" fg:x="4899" fg:w="1"/><text x="78.7345%" y="1503.50"></text></g><g><title>UintToArith256 (1 samples, 0.02%)</title><rect x="78.4845%" y="1477" width="0.0160%" height="15" fill="rgb(208,206,34)" fg:x="4899" fg:w="1"/><text x="78.7345%" y="1487.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="78.5005%" y="1493" width="0.0160%" height="15" fill="rgb(244,184,38)" fg:x="4900" fg:w="1"/><text x="78.7505%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="78.5165%" y="1493" width="0.0481%" height="15" fill="rgb(244,151,47)" fg:x="4901" fg:w="3"/><text x="78.7665%" y="1503.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (2 samples, 0.03%)</title><rect x="78.5646%" y="1493" width="0.0320%" height="15" fill="rgb(236,134,42)" fg:x="4904" fg:w="2"/><text x="78.8146%" y="1503.50"></text></g><g><title>[[heap]] (98 samples, 1.57%)</title><rect x="77.0426%" y="1509" width="1.5700%" height="15" fill="rgb(233,93,22)" fg:x="4809" fg:w="98"/><text x="77.2926%" y="1519.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="78.5966%" y="1493" width="0.0160%" height="15" fill="rgb(211,202,10)" fg:x="4906" fg:w="1"/><text x="78.8466%" y="1503.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="78.6126%" y="1493" width="0.0160%" height="15" fill="rgb(240,63,8)" fg:x="4907" fg:w="1"/><text x="78.8626%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="78.6286%" y="1493" width="0.0160%" height="15" fill="rgb(214,9,4)" fg:x="4908" fg:w="1"/><text x="78.8786%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="78.6447%" y="1493" width="0.0160%" height="15" fill="rgb(243,66,45)" fg:x="4909" fg:w="1"/><text x="78.8947%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="78.6607%" y="1493" width="0.0160%" height="15" fill="rgb(220,50,42)" fg:x="4910" fg:w="1"/><text x="78.9107%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="78.6767%" y="1493" width="0.0481%" height="15" fill="rgb(220,134,27)" fg:x="4911" fg:w="3"/><text x="78.9267%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="78.7248%" y="1493" width="0.0160%" height="15" fill="rgb(246,151,50)" fg:x="4914" fg:w="1"/><text x="78.9748%" y="1503.50"></text></g><g><title>malloc (4 samples, 0.06%)</title><rect x="78.7408%" y="1493" width="0.0641%" height="15" fill="rgb(238,216,27)" fg:x="4915" fg:w="4"/><text x="78.9908%" y="1503.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="78.8049%" y="1493" width="0.0160%" height="15" fill="rgb(250,92,11)" fg:x="4919" fg:w="1"/><text x="79.0549%" y="1503.50"></text></g><g><title>[[stack]] (14 samples, 0.22%)</title><rect x="78.6126%" y="1509" width="0.2243%" height="15" fill="rgb(248,183,6)" fg:x="4907" fg:w="14"/><text x="78.8626%" y="1519.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="78.8209%" y="1493" width="0.0160%" height="15" fill="rgb(211,204,50)" fg:x="4920" fg:w="1"/><text x="79.0709%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (13 samples, 0.21%)</title><rect x="78.8369%" y="1493" width="0.2083%" height="15" fill="rgb(252,55,47)" fg:x="4921" fg:w="13"/><text x="79.0869%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (24 samples, 0.38%)</title><rect x="79.0452%" y="1493" width="0.3845%" height="15" fill="rgb(240,198,32)" fg:x="4934" fg:w="24"/><text x="79.2952%" y="1503.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="79.4297%" y="1493" width="0.0160%" height="15" fill="rgb(224,203,19)" fg:x="4958" fg:w="1"/><text x="79.6797%" y="1503.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="79.4457%" y="1493" width="0.0160%" height="15" fill="rgb(205,27,16)" fg:x="4959" fg:w="1"/><text x="79.6957%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (10 samples, 0.16%)</title><rect x="79.4617%" y="1493" width="0.1602%" height="15" fill="rgb(224,226,17)" fg:x="4960" fg:w="10"/><text x="79.7117%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="79.6219%" y="1493" width="0.0160%" height="15" fill="rgb(205,216,54)" fg:x="4970" fg:w="1"/><text x="79.8719%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.02%)</title><rect x="79.6379%" y="1493" width="0.0160%" height="15" fill="rgb(248,168,46)" fg:x="4971" fg:w="1"/><text x="79.8879%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (1 samples, 0.02%)</title><rect x="79.6540%" y="1493" width="0.0160%" height="15" fill="rgb(226,111,45)" fg:x="4972" fg:w="1"/><text x="79.9040%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="79.6700%" y="1493" width="0.0320%" height="15" fill="rgb(231,15,9)" fg:x="4973" fg:w="2"/><text x="79.9200%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::key (2 samples, 0.03%)</title><rect x="79.7020%" y="1493" width="0.0320%" height="15" fill="rgb(243,168,3)" fg:x="4975" fg:w="2"/><text x="79.9520%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.02%)</title><rect x="79.7341%" y="1493" width="0.0160%" height="15" fill="rgb(221,220,54)" fg:x="4977" fg:w="1"/><text x="79.9841%" y="1503.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="79.7501%" y="1493" width="0.0160%" height="15" fill="rgb(232,174,38)" fg:x="4978" fg:w="1"/><text x="80.0001%" y="1503.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (2 samples, 0.03%)</title><rect x="79.7661%" y="1493" width="0.0320%" height="15" fill="rgb(205,14,38)" fg:x="4979" fg:w="2"/><text x="80.0161%" y="1503.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (1 samples, 0.02%)</title><rect x="79.7981%" y="1493" width="0.0160%" height="15" fill="rgb(234,89,19)" fg:x="4981" fg:w="1"/><text x="80.0481%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (3 samples, 0.05%)</title><rect x="79.8142%" y="1493" width="0.0481%" height="15" fill="rgb(216,68,51)" fg:x="4982" fg:w="3"/><text x="80.0642%" y="1503.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="79.8622%" y="1493" width="0.0160%" height="15" fill="rgb(213,49,2)" fg:x="4985" fg:w="1"/><text x="80.1122%" y="1503.50"></text></g><g><title>leveldb::Hash (4 samples, 0.06%)</title><rect x="79.8782%" y="1493" width="0.0641%" height="15" fill="rgb(242,146,30)" fg:x="4986" fg:w="4"/><text x="80.1282%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (17 samples, 0.27%)</title><rect x="79.9423%" y="1493" width="0.2723%" height="15" fill="rgb(224,188,11)" fg:x="4990" fg:w="17"/><text x="80.1923%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="80.2147%" y="1493" width="0.0160%" height="15" fill="rgb(213,159,11)" fg:x="5007" fg:w="1"/><text x="80.4647%" y="1503.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="80.2307%" y="1493" width="0.0160%" height="15" fill="rgb(229,13,31)" fg:x="5008" fg:w="1"/><text x="80.4807%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::Add (3 samples, 0.05%)</title><rect x="80.2467%" y="1493" width="0.0481%" height="15" fill="rgb(209,103,11)" fg:x="5009" fg:w="3"/><text x="80.4967%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (1 samples, 0.02%)</title><rect x="80.2948%" y="1493" width="0.0160%" height="15" fill="rgb(206,3,4)" fg:x="5012" fg:w="1"/><text x="80.5448%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::status (3 samples, 0.05%)</title><rect x="80.3108%" y="1493" width="0.0481%" height="15" fill="rgb(252,10,49)" fg:x="5013" fg:w="3"/><text x="80.5608%" y="1503.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="80.3589%" y="1493" width="0.0160%" height="15" fill="rgb(217,160,32)" fg:x="5016" fg:w="1"/><text x="80.6089%" y="1503.50"></text></g><g><title>memcpy@plt (2 samples, 0.03%)</title><rect x="80.3749%" y="1493" width="0.0320%" height="15" fill="rgb(249,196,0)" fg:x="5017" fg:w="2"/><text x="80.6249%" y="1503.50"></text></g><g><title>[anon] (99 samples, 1.59%)</title><rect x="78.8369%" y="1509" width="1.5860%" height="15" fill="rgb(213,17,48)" fg:x="4921" fg:w="99"/><text x="79.0869%" y="1519.50"></text></g><g><title>pthread_mutex_unlock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="80.4069%" y="1493" width="0.0160%" height="15" fill="rgb(206,42,46)" fg:x="5019" fg:w="1"/><text x="80.6569%" y="1503.50"></text></g><g><title>CheckProofOfWorkImpl (1 samples, 0.02%)</title><rect x="80.4229%" y="1493" width="0.0160%" height="15" fill="rgb(212,105,24)" fg:x="5020" fg:w="1"/><text x="80.6729%" y="1503.50"></text></g><g><title>arith_uint256::arith_uint256 (1 samples, 0.02%)</title><rect x="80.4229%" y="1477" width="0.0160%" height="15" fill="rgb(243,216,30)" fg:x="5020" fg:w="1"/><text x="80.6729%" y="1487.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (1 samples, 0.02%)</title><rect x="80.4229%" y="1461" width="0.0160%" height="15" fill="rgb(207,121,3)" fg:x="5020" fg:w="1"/><text x="80.6729%" y="1471.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="80.4390%" y="1493" width="0.0320%" height="15" fill="rgb(249,78,0)" fg:x="5021" fg:w="2"/><text x="80.6890%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1477" width="0.0160%" height="15" fill="rgb(244,151,32)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1461" width="0.0160%" height="15" fill="rgb(228,63,25)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1445" width="0.0160%" height="15" fill="rgb(231,158,23)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1429" width="0.0160%" height="15" fill="rgb(248,107,23)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1413" width="0.0160%" height="15" fill="rgb(215,168,21)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1397" width="0.0160%" height="15" fill="rgb(227,83,22)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1381" width="0.0160%" height="15" fill="rgb(217,118,43)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1365" width="0.0160%" height="15" fill="rgb(229,220,41)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1349" width="0.0160%" height="15" fill="rgb(254,146,46)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4550%" y="1333" width="0.0160%" height="15" fill="rgb(233,208,31)" fg:x="5022" fg:w="1"/><text x="80.7050%" y="1343.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.05%)</title><rect x="80.4710%" y="1493" width="0.0481%" height="15" fill="rgb(222,162,7)" fg:x="5023" fg:w="3"/><text x="80.7210%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="80.5191%" y="1493" width="0.0320%" height="15" fill="rgb(230,117,45)" fg:x="5026" fg:w="2"/><text x="80.7691%" y="1503.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="80.5511%" y="1493" width="0.0481%" height="15" fill="rgb(239,163,6)" fg:x="5028" fg:w="3"/><text x="80.8011%" y="1503.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="80.5992%" y="1493" width="0.0160%" height="15" fill="rgb(246,130,17)" fg:x="5031" fg:w="1"/><text x="80.8492%" y="1503.50"></text></g><g><title>_int_malloc (3 samples, 0.05%)</title><rect x="80.6152%" y="1493" width="0.0481%" height="15" fill="rgb(216,84,5)" fg:x="5032" fg:w="3"/><text x="80.8652%" y="1503.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="80.6632%" y="1493" width="0.0160%" height="15" fill="rgb(230,200,21)" fg:x="5035" fg:w="1"/><text x="80.9132%" y="1503.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (4 samples, 0.06%)</title><rect x="80.6793%" y="1493" width="0.0641%" height="15" fill="rgb(224,2,8)" fg:x="5036" fg:w="4"/><text x="80.9293%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="80.7434%" y="1493" width="0.0160%" height="15" fill="rgb(238,178,10)" fg:x="5040" fg:w="1"/><text x="80.9934%" y="1503.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="80.7594%" y="1493" width="0.0160%" height="15" fill="rgb(242,153,24)" fg:x="5041" fg:w="1"/><text x="81.0094%" y="1503.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (1 samples, 0.02%)</title><rect x="80.7594%" y="1477" width="0.0160%" height="15" fill="rgb(242,32,48)" fg:x="5041" fg:w="1"/><text x="81.0094%" y="1487.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="80.7594%" y="1461" width="0.0160%" height="15" fill="rgb(227,36,0)" fg:x="5041" fg:w="1"/><text x="81.0094%" y="1471.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.08%)</title><rect x="80.7754%" y="1493" width="0.0801%" height="15" fill="rgb(251,33,35)" fg:x="5042" fg:w="5"/><text x="81.0254%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (2 samples, 0.03%)</title><rect x="80.8555%" y="1493" width="0.0320%" height="15" fill="rgb(232,168,51)" fg:x="5047" fg:w="2"/><text x="81.1055%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (2 samples, 0.03%)</title><rect x="80.8875%" y="1493" width="0.0320%" height="15" fill="rgb(228,56,10)" fg:x="5049" fg:w="2"/><text x="81.1375%" y="1503.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="80.9196%" y="1493" width="0.0160%" height="15" fill="rgb(231,10,26)" fg:x="5051" fg:w="1"/><text x="81.1696%" y="1503.50"></text></g><g><title>leveldb::Hash (4 samples, 0.06%)</title><rect x="80.9356%" y="1493" width="0.0641%" height="15" fill="rgb(226,202,12)" fg:x="5052" fg:w="4"/><text x="81.1856%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.06%)</title><rect x="80.9997%" y="1493" width="0.0641%" height="15" fill="rgb(251,49,21)" fg:x="5056" fg:w="4"/><text x="81.2497%" y="1503.50"></text></g><g><title>[unknown] (41 samples, 0.66%)</title><rect x="80.4229%" y="1509" width="0.6568%" height="15" fill="rgb(206,228,28)" fg:x="5020" fg:w="41"/><text x="80.6729%" y="1519.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="81.0638%" y="1493" width="0.0160%" height="15" fill="rgb(205,198,31)" fg:x="5060" fg:w="1"/><text x="81.3138%" y="1503.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="81.0798%" y="1477" width="0.1282%" height="15" fill="rgb(213,69,1)" fg:x="5061" fg:w="8"/><text x="81.3298%" y="1487.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="81.0798%" y="1461" width="0.1282%" height="15" fill="rgb(209,177,9)" fg:x="5061" fg:w="8"/><text x="81.3298%" y="1471.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="81.0798%" y="1445" width="0.1282%" height="15" fill="rgb(227,119,30)" fg:x="5061" fg:w="8"/><text x="81.3298%" y="1455.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="81.1278%" y="1429" width="0.0801%" height="15" fill="rgb(234,106,41)" fg:x="5064" fg:w="5"/><text x="81.3778%" y="1439.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="81.1759%" y="1413" width="0.0320%" height="15" fill="rgb(244,103,47)" fg:x="5067" fg:w="2"/><text x="81.4259%" y="1423.50"></text></g><g><title>FindSmallest (1 samples, 0.02%)</title><rect x="81.2079%" y="1397" width="0.0160%" height="15" fill="rgb(212,211,25)" fg:x="5069" fg:w="1"/><text x="81.4579%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="81.2079%" y="1381" width="0.0160%" height="15" fill="rgb(208,63,53)" fg:x="5069" fg:w="1"/><text x="81.4579%" y="1391.50"></text></g><g><title>key (1 samples, 0.02%)</title><rect x="81.2240%" y="1397" width="0.0160%" height="15" fill="rgb(213,176,21)" fg:x="5070" fg:w="1"/><text x="81.4740%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="81.2240%" y="1381" width="0.0160%" height="15" fill="rgb(243,124,12)" fg:x="5070" fg:w="1"/><text x="81.4740%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="81.2400%" y="1397" width="0.0160%" height="15" fill="rgb(239,2,35)" fg:x="5071" fg:w="1"/><text x="81.4900%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="81.2560%" y="1397" width="0.0320%" height="15" fill="rgb(253,169,22)" fg:x="5072" fg:w="2"/><text x="81.5060%" y="1407.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="81.2720%" y="1381" width="0.0160%" height="15" fill="rgb(254,51,12)" fg:x="5073" fg:w="1"/><text x="81.5220%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (7 samples, 0.11%)</title><rect x="81.2880%" y="1397" width="0.1121%" height="15" fill="rgb(244,17,47)" fg:x="5074" fg:w="7"/><text x="81.5380%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="81.3842%" y="1381" width="0.0160%" height="15" fill="rgb(251,45,46)" fg:x="5080" fg:w="1"/><text x="81.6342%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (7 samples, 0.11%)</title><rect x="81.4002%" y="1397" width="0.1121%" height="15" fill="rgb(223,87,43)" fg:x="5081" fg:w="7"/><text x="81.6502%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3 samples, 0.05%)</title><rect x="81.4643%" y="1381" width="0.0481%" height="15" fill="rgb(230,132,31)" fg:x="5085" fg:w="3"/><text x="81.7143%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.05%)</title><rect x="81.4643%" y="1365" width="0.0481%" height="15" fill="rgb(206,99,1)" fg:x="5085" fg:w="3"/><text x="81.7143%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="81.4963%" y="1349" width="0.0160%" height="15" fill="rgb(227,110,25)" fg:x="5087" fg:w="1"/><text x="81.7463%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (1 samples, 0.02%)</title><rect x="81.5123%" y="1397" width="0.0160%" height="15" fill="rgb(217,182,7)" fg:x="5088" fg:w="1"/><text x="81.7623%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (2 samples, 0.03%)</title><rect x="81.5284%" y="1397" width="0.0320%" height="15" fill="rgb(250,176,4)" fg:x="5089" fg:w="2"/><text x="81.7784%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.03%)</title><rect x="81.5284%" y="1381" width="0.0320%" height="15" fill="rgb(244,98,30)" fg:x="5089" fg:w="2"/><text x="81.7784%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.03%)</title><rect x="81.5284%" y="1365" width="0.0320%" height="15" fill="rgb(228,150,42)" fg:x="5089" fg:w="2"/><text x="81.7784%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="81.5444%" y="1349" width="0.0160%" height="15" fill="rgb(231,91,46)" fg:x="5090" fg:w="1"/><text x="81.7944%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (3 samples, 0.05%)</title><rect x="81.5604%" y="1397" width="0.0481%" height="15" fill="rgb(252,161,32)" fg:x="5091" fg:w="3"/><text x="81.8104%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::SeekToFirst (1 samples, 0.02%)</title><rect x="81.5924%" y="1381" width="0.0160%" height="15" fill="rgb(236,69,41)" fg:x="5093" fg:w="1"/><text x="81.8424%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="81.5924%" y="1365" width="0.0160%" height="15" fill="rgb(212,160,3)" fg:x="5093" fg:w="1"/><text x="81.8424%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="81.5924%" y="1349" width="0.0160%" height="15" fill="rgb(216,5,50)" fg:x="5093" fg:w="1"/><text x="81.8424%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.02%)</title><rect x="81.6085%" y="1397" width="0.0160%" height="15" fill="rgb(241,138,25)" fg:x="5094" fg:w="1"/><text x="81.8585%" y="1407.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="81.6245%" y="1397" width="0.0160%" height="15" fill="rgb(239,42,18)" fg:x="5095" fg:w="1"/><text x="81.8745%" y="1407.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="81.6565%" y="1221" width="0.0160%" height="15" fill="rgb(239,40,7)" fg:x="5097" fg:w="1"/><text x="81.9065%" y="1231.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="81.6725%" y="1205" width="0.0160%" height="15" fill="rgb(239,11,31)" fg:x="5098" fg:w="1"/><text x="81.9225%" y="1215.50"></text></g><g><title>[[jbd2]] (2 samples, 0.03%)</title><rect x="81.6725%" y="1221" width="0.0320%" height="15" fill="rgb(224,77,40)" fg:x="5098" fg:w="2"/><text x="81.9225%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.6886%" y="1205" width="0.0160%" height="15" fill="rgb(226,15,5)" fg:x="5099" fg:w="1"/><text x="81.9386%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (26 samples, 0.42%)</title><rect x="81.6405%" y="1381" width="0.4165%" height="15" fill="rgb(254,188,5)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1391.50"></text></g><g><title>__unlink (26 samples, 0.42%)</title><rect x="81.6405%" y="1365" width="0.4165%" height="15" fill="rgb(241,148,52)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1375.50"></text></g><g><title>[unknown] (26 samples, 0.42%)</title><rect x="81.6405%" y="1349" width="0.4165%" height="15" fill="rgb(251,48,36)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1359.50"></text></g><g><title>[unknown] (26 samples, 0.42%)</title><rect x="81.6405%" y="1333" width="0.4165%" height="15" fill="rgb(243,83,13)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1343.50"></text></g><g><title>[unknown] (26 samples, 0.42%)</title><rect x="81.6405%" y="1317" width="0.4165%" height="15" fill="rgb(210,105,0)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1327.50"></text></g><g><title>[unknown] (26 samples, 0.42%)</title><rect x="81.6405%" y="1301" width="0.4165%" height="15" fill="rgb(239,60,36)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1311.50"></text></g><g><title>[unknown] (26 samples, 0.42%)</title><rect x="81.6405%" y="1285" width="0.4165%" height="15" fill="rgb(210,20,0)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1295.50"></text></g><g><title>[[ext4]] (26 samples, 0.42%)</title><rect x="81.6405%" y="1269" width="0.4165%" height="15" fill="rgb(244,26,53)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1279.50"></text></g><g><title>[unknown] (26 samples, 0.42%)</title><rect x="81.6405%" y="1253" width="0.4165%" height="15" fill="rgb(240,100,49)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1263.50"></text></g><g><title>[unknown] (26 samples, 0.42%)</title><rect x="81.6405%" y="1237" width="0.4165%" height="15" fill="rgb(250,46,45)" fg:x="5096" fg:w="26"/><text x="81.8905%" y="1247.50"></text></g><g><title>[unknown] (22 samples, 0.35%)</title><rect x="81.7046%" y="1221" width="0.3525%" height="15" fill="rgb(220,181,29)" fg:x="5100" fg:w="22"/><text x="81.9546%" y="1231.50"></text></g><g><title>[unknown] (22 samples, 0.35%)</title><rect x="81.7046%" y="1205" width="0.3525%" height="15" fill="rgb(213,137,33)" fg:x="5100" fg:w="22"/><text x="81.9546%" y="1215.50"></text></g><g><title>[unknown] (14 samples, 0.22%)</title><rect x="81.8327%" y="1189" width="0.2243%" height="15" fill="rgb(213,27,48)" fg:x="5108" fg:w="14"/><text x="82.0827%" y="1199.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="81.9449%" y="1173" width="0.1121%" height="15" fill="rgb(245,180,39)" fg:x="5115" fg:w="7"/><text x="82.1949%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::GetChildren (1 samples, 0.02%)</title><rect x="82.0570%" y="1381" width="0.0160%" height="15" fill="rgb(212,158,42)" fg:x="5122" fg:w="1"/><text x="82.3070%" y="1391.50"></text></g><g><title>__GI___readdir64 (1 samples, 0.02%)</title><rect x="82.0570%" y="1365" width="0.0160%" height="15" fill="rgb(228,193,18)" fg:x="5122" fg:w="1"/><text x="82.3070%" y="1375.50"></text></g><g><title>__GI___getdents64 (1 samples, 0.02%)</title><rect x="82.0570%" y="1349" width="0.0160%" height="15" fill="rgb(245,172,29)" fg:x="5122" fg:w="1"/><text x="82.3070%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.0570%" y="1333" width="0.0160%" height="15" fill="rgb(207,98,24)" fg:x="5122" fg:w="1"/><text x="82.3070%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.0570%" y="1317" width="0.0160%" height="15" fill="rgb(249,92,26)" fg:x="5122" fg:w="1"/><text x="82.3070%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.0570%" y="1301" width="0.0160%" height="15" fill="rgb(217,176,26)" fg:x="5122" fg:w="1"/><text x="82.3070%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.0570%" y="1285" width="0.0160%" height="15" fill="rgb(221,8,39)" fg:x="5122" fg:w="1"/><text x="82.3070%" y="1295.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="82.0570%" y="1269" width="0.0160%" height="15" fill="rgb(208,90,18)" fg:x="5122" fg:w="1"/><text x="82.3070%" y="1279.50"></text></g><g><title>leveldb::ParseFileName (1 samples, 0.02%)</title><rect x="82.0731%" y="1381" width="0.0160%" height="15" fill="rgb(207,202,30)" fg:x="5123" fg:w="1"/><text x="82.3231%" y="1391.50"></text></g><g><title>leveldb::ParseFileName (1 samples, 0.02%)</title><rect x="82.0731%" y="1365" width="0.0160%" height="15" fill="rgb(231,124,22)" fg:x="5123" fg:w="1"/><text x="82.3231%" y="1375.50"></text></g><g><title>leveldb::operator== (1 samples, 0.02%)</title><rect x="82.0731%" y="1349" width="0.0160%" height="15" fill="rgb(206,15,5)" fg:x="5123" fg:w="1"/><text x="82.3231%" y="1359.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (32 samples, 0.51%)</title><rect x="81.6405%" y="1397" width="0.5127%" height="15" fill="rgb(239,16,52)" fg:x="5096" fg:w="32"/><text x="81.8905%" y="1407.50"></text></g><g><title>leveldb::TableCache::Evict (4 samples, 0.06%)</title><rect x="82.0891%" y="1381" width="0.0641%" height="15" fill="rgb(245,213,29)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1391.50"></text></g><g><title>Erase (4 samples, 0.06%)</title><rect x="82.0891%" y="1365" width="0.0641%" height="15" fill="rgb(213,203,36)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (4 samples, 0.06%)</title><rect x="82.0891%" y="1349" width="0.0641%" height="15" fill="rgb(209,55,18)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (4 samples, 0.06%)</title><rect x="82.0891%" y="1333" width="0.0641%" height="15" fill="rgb(207,133,49)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (4 samples, 0.06%)</title><rect x="82.0891%" y="1317" width="0.0641%" height="15" fill="rgb(240,33,46)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1327.50"></text></g><g><title>leveldb::DeleteEntry (4 samples, 0.06%)</title><rect x="82.0891%" y="1301" width="0.0641%" height="15" fill="rgb(212,35,2)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1311.50"></text></g><g><title>~PosixMmapReadableFile (4 samples, 0.06%)</title><rect x="82.0891%" y="1285" width="0.0641%" height="15" fill="rgb(231,119,28)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (4 samples, 0.06%)</title><rect x="82.0891%" y="1269" width="0.0641%" height="15" fill="rgb(252,178,7)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1279.50"></text></g><g><title>__munmap (4 samples, 0.06%)</title><rect x="82.0891%" y="1253" width="0.0641%" height="15" fill="rgb(251,91,4)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1237" width="0.0641%" height="15" fill="rgb(233,122,19)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1221" width="0.0641%" height="15" fill="rgb(231,208,46)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1205" width="0.0641%" height="15" fill="rgb(243,15,41)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1189" width="0.0641%" height="15" fill="rgb(210,32,43)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1173" width="0.0641%" height="15" fill="rgb(222,177,15)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1157" width="0.0641%" height="15" fill="rgb(244,121,34)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1141" width="0.0641%" height="15" fill="rgb(234,138,4)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1125" width="0.0641%" height="15" fill="rgb(240,97,48)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1109" width="0.0641%" height="15" fill="rgb(237,65,54)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.0891%" y="1093" width="0.0641%" height="15" fill="rgb(214,25,24)" fg:x="5124" fg:w="4"/><text x="82.3391%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.1051%" y="1077" width="0.0481%" height="15" fill="rgb(213,5,3)" fg:x="5125" fg:w="3"/><text x="82.3551%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="82.1211%" y="1061" width="0.0320%" height="15" fill="rgb(219,81,29)" fg:x="5126" fg:w="2"/><text x="82.3711%" y="1071.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="82.2012%" y="1285" width="0.0160%" height="15" fill="rgb(220,43,48)" fg:x="5131" fg:w="1"/><text x="82.4512%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="82.2012%" y="1269" width="0.0160%" height="15" fill="rgb(239,157,2)" fg:x="5131" fg:w="1"/><text x="82.4512%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="82.2012%" y="1253" width="0.0160%" height="15" fill="rgb(213,104,43)" fg:x="5131" fg:w="1"/><text x="82.4512%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="82.2012%" y="1237" width="0.0160%" height="15" fill="rgb(237,84,9)" fg:x="5131" fg:w="1"/><text x="82.4512%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="82.2012%" y="1221" width="0.0160%" height="15" fill="rgb(252,6,33)" fg:x="5131" fg:w="1"/><text x="82.4512%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="82.2012%" y="1205" width="0.0160%" height="15" fill="rgb(251,172,22)" fg:x="5131" fg:w="1"/><text x="82.4512%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="82.2012%" y="1189" width="0.0160%" height="15" fill="rgb(244,91,53)" fg:x="5131" fg:w="1"/><text x="82.4512%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="82.2172%" y="1221" width="0.0160%" height="15" fill="rgb(219,29,30)" fg:x="5132" fg:w="1"/><text x="82.4672%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (1 samples, 0.02%)</title><rect x="82.2333%" y="1221" width="0.0160%" height="15" fill="rgb(213,3,15)" fg:x="5133" fg:w="1"/><text x="82.4833%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (3 samples, 0.05%)</title><rect x="82.2172%" y="1237" width="0.0481%" height="15" fill="rgb(208,25,28)" fg:x="5132" fg:w="3"/><text x="82.4672%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="82.2493%" y="1221" width="0.0160%" height="15" fill="rgb(252,144,25)" fg:x="5134" fg:w="1"/><text x="82.4993%" y="1231.50"></text></g><g><title>leveldb::BlockBuilder::Add (4 samples, 0.06%)</title><rect x="82.2172%" y="1285" width="0.0641%" height="15" fill="rgb(226,220,25)" fg:x="5132" fg:w="4"/><text x="82.4672%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (4 samples, 0.06%)</title><rect x="82.2172%" y="1269" width="0.0641%" height="15" fill="rgb(212,131,28)" fg:x="5132" fg:w="4"/><text x="82.4672%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4 samples, 0.06%)</title><rect x="82.2172%" y="1253" width="0.0641%" height="15" fill="rgb(219,143,52)" fg:x="5132" fg:w="4"/><text x="82.4672%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="82.2653%" y="1237" width="0.0160%" height="15" fill="rgb(215,56,7)" fg:x="5135" fg:w="1"/><text x="82.5153%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="82.2653%" y="1221" width="0.0160%" height="15" fill="rgb(239,59,51)" fg:x="5135" fg:w="1"/><text x="82.5153%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="82.2653%" y="1205" width="0.0160%" height="15" fill="rgb(209,215,4)" fg:x="5135" fg:w="1"/><text x="82.5153%" y="1215.50"></text></g><g><title>Next (6 samples, 0.10%)</title><rect x="82.2012%" y="1317" width="0.0961%" height="15" fill="rgb(221,118,39)" fg:x="5131" fg:w="6"/><text x="82.4512%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (6 samples, 0.10%)</title><rect x="82.2012%" y="1301" width="0.0961%" height="15" fill="rgb(236,6,44)" fg:x="5131" fg:w="6"/><text x="82.4512%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="82.2813%" y="1285" width="0.0160%" height="15" fill="rgb(216,122,9)" fg:x="5136" fg:w="1"/><text x="82.5313%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="82.2813%" y="1269" width="0.0160%" height="15" fill="rgb(244,134,42)" fg:x="5136" fg:w="1"/><text x="82.5313%" y="1279.50"></text></g><g><title>SetDataIterator (1 samples, 0.02%)</title><rect x="82.2973%" y="1269" width="0.0160%" height="15" fill="rgb(209,189,35)" fg:x="5137" fg:w="1"/><text x="82.5473%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Set (1 samples, 0.02%)</title><rect x="82.2973%" y="1253" width="0.0160%" height="15" fill="rgb(250,47,36)" fg:x="5137" fg:w="1"/><text x="82.5473%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="82.2973%" y="1237" width="0.0160%" height="15" fill="rgb(252,112,4)" fg:x="5137" fg:w="1"/><text x="82.5473%" y="1247.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="82.2973%" y="1221" width="0.0160%" height="15" fill="rgb(221,79,51)" fg:x="5137" fg:w="1"/><text x="82.5473%" y="1231.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="82.2973%" y="1205" width="0.0160%" height="15" fill="rgb(232,65,53)" fg:x="5137" fg:w="1"/><text x="82.5473%" y="1215.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="82.2973%" y="1189" width="0.0160%" height="15" fill="rgb(211,37,7)" fg:x="5137" fg:w="1"/><text x="82.5473%" y="1199.50"></text></g><g><title>leveldb::Iterator::CleanupNode::Run (1 samples, 0.02%)</title><rect x="82.2973%" y="1173" width="0.0160%" height="15" fill="rgb(234,221,18)" fg:x="5137" fg:w="1"/><text x="82.5473%" y="1183.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="82.2973%" y="1157" width="0.0160%" height="15" fill="rgb(220,158,26)" fg:x="5137" fg:w="1"/><text x="82.5473%" y="1167.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.02%)</title><rect x="82.3134%" y="1269" width="0.0160%" height="15" fill="rgb(220,70,6)" fg:x="5138" fg:w="1"/><text x="82.5634%" y="1279.50"></text></g><g><title>leveldb::crc32c::Unmask (4 samples, 0.06%)</title><rect x="82.3294%" y="1237" width="0.0641%" height="15" fill="rgb(250,39,48)" fg:x="5139" fg:w="4"/><text x="82.5794%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.3294%" y="1221" width="0.0641%" height="15" fill="rgb(206,40,27)" fg:x="5139" fg:w="4"/><text x="82.5794%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.3294%" y="1205" width="0.0641%" height="15" fill="rgb(247,80,36)" fg:x="5139" fg:w="4"/><text x="82.5794%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.3294%" y="1189" width="0.0641%" height="15" fill="rgb(222,9,20)" fg:x="5139" fg:w="4"/><text x="82.5794%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.3294%" y="1173" width="0.0641%" height="15" fill="rgb(217,26,45)" fg:x="5139" fg:w="4"/><text x="82.5794%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.3454%" y="1157" width="0.0481%" height="15" fill="rgb(221,67,14)" fg:x="5140" fg:w="3"/><text x="82.5954%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.3454%" y="1141" width="0.0481%" height="15" fill="rgb(248,100,24)" fg:x="5140" fg:w="3"/><text x="82.5954%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.3454%" y="1125" width="0.0481%" height="15" fill="rgb(230,187,16)" fg:x="5140" fg:w="3"/><text x="82.5954%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="82.3614%" y="1109" width="0.0320%" height="15" fill="rgb(205,108,13)" fg:x="5141" fg:w="2"/><text x="82.6114%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.3774%" y="1093" width="0.0160%" height="15" fill="rgb(235,71,51)" fg:x="5142" fg:w="1"/><text x="82.6274%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (24 samples, 0.38%)</title><rect x="82.2973%" y="1285" width="0.3845%" height="15" fill="rgb(251,172,48)" fg:x="5137" fg:w="24"/><text x="82.5473%" y="1295.50"></text></g><g><title>leveldb::Table::BlockReader (22 samples, 0.35%)</title><rect x="82.3294%" y="1269" width="0.3525%" height="15" fill="rgb(240,96,49)" fg:x="5139" fg:w="22"/><text x="82.5794%" y="1279.50"></text></g><g><title>leveldb::ReadBlock (22 samples, 0.35%)</title><rect x="82.3294%" y="1253" width="0.3525%" height="15" fill="rgb(235,46,36)" fg:x="5139" fg:w="22"/><text x="82.5794%" y="1263.50"></text></g><g><title>leveldb::crc32c::Value (18 samples, 0.29%)</title><rect x="82.3935%" y="1237" width="0.2884%" height="15" fill="rgb(244,3,49)" fg:x="5143" fg:w="18"/><text x="82.6435%" y="1247.50"></text></g><g><title>crc32c::ExtendSse42 (18 samples, 0.29%)</title><rect x="82.3935%" y="1221" width="0.2884%" height="15" fill="rgb(206,78,54)" fg:x="5143" fg:w="18"/><text x="82.6435%" y="1231.50"></text></g><g><title>_mm_crc32_u64 (9 samples, 0.14%)</title><rect x="82.5376%" y="1205" width="0.1442%" height="15" fill="rgb(208,85,42)" fg:x="5152" fg:w="9"/><text x="82.7876%" y="1215.50"></text></g><g><title>SkipEmptyDataBlocksForward (25 samples, 0.40%)</title><rect x="82.2973%" y="1317" width="0.4005%" height="15" fill="rgb(219,196,21)" fg:x="5137" fg:w="25"/><text x="82.5473%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (25 samples, 0.40%)</title><rect x="82.2973%" y="1301" width="0.4005%" height="15" fill="rgb(238,19,9)" fg:x="5137" fg:w="25"/><text x="82.5473%" y="1311.50"></text></g><g><title>leveldb::Block::Block (1 samples, 0.02%)</title><rect x="82.6818%" y="1285" width="0.0160%" height="15" fill="rgb(206,86,13)" fg:x="5161" fg:w="1"/><text x="82.9318%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="82.6979%" y="1253" width="0.0160%" height="15" fill="rgb(214,123,40)" fg:x="5162" fg:w="1"/><text x="82.9479%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="82.6979%" y="1237" width="0.0160%" height="15" fill="rgb(243,53,5)" fg:x="5162" fg:w="1"/><text x="82.9479%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (1 samples, 0.02%)</title><rect x="82.7139%" y="1253" width="0.0160%" height="15" fill="rgb(254,186,31)" fg:x="5163" fg:w="1"/><text x="82.9639%" y="1263.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (1 samples, 0.02%)</title><rect x="82.7139%" y="1237" width="0.0160%" height="15" fill="rgb(221,216,25)" fg:x="5163" fg:w="1"/><text x="82.9639%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (3 samples, 0.05%)</title><rect x="82.6979%" y="1317" width="0.0481%" height="15" fill="rgb(248,107,42)" fg:x="5162" fg:w="3"/><text x="82.9479%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3 samples, 0.05%)</title><rect x="82.6979%" y="1301" width="0.0481%" height="15" fill="rgb(221,85,43)" fg:x="5162" fg:w="3"/><text x="82.9479%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.05%)</title><rect x="82.6979%" y="1285" width="0.0481%" height="15" fill="rgb(225,34,24)" fg:x="5162" fg:w="3"/><text x="82.9479%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.05%)</title><rect x="82.6979%" y="1269" width="0.0481%" height="15" fill="rgb(211,119,1)" fg:x="5162" fg:w="3"/><text x="82.9479%" y="1279.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="82.7299%" y="1253" width="0.0160%" height="15" fill="rgb(254,216,46)" fg:x="5164" fg:w="1"/><text x="82.9799%" y="1263.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (2 samples, 0.03%)</title><rect x="82.7459%" y="1317" width="0.0320%" height="15" fill="rgb(238,11,38)" fg:x="5165" fg:w="2"/><text x="82.9959%" y="1327.50"></text></g><g><title>Next (39 samples, 0.62%)</title><rect x="82.1852%" y="1349" width="0.6248%" height="15" fill="rgb(233,50,15)" fg:x="5130" fg:w="39"/><text x="82.4352%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (39 samples, 0.62%)</title><rect x="82.1852%" y="1333" width="0.6248%" height="15" fill="rgb(217,181,29)" fg:x="5130" fg:w="39"/><text x="82.4352%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (2 samples, 0.03%)</title><rect x="82.7780%" y="1317" width="0.0320%" height="15" fill="rgb(214,56,3)" fg:x="5167" fg:w="2"/><text x="83.0280%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.8420%" y="1237" width="0.0641%" height="15" fill="rgb(230,69,45)" fg:x="5171" fg:w="4"/><text x="83.0920%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.8420%" y="1221" width="0.0641%" height="15" fill="rgb(224,201,50)" fg:x="5171" fg:w="4"/><text x="83.0920%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.8420%" y="1205" width="0.0641%" height="15" fill="rgb(217,228,18)" fg:x="5171" fg:w="4"/><text x="83.0920%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="82.8420%" y="1189" width="0.0641%" height="15" fill="rgb(239,33,44)" fg:x="5171" fg:w="4"/><text x="83.0920%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.8581%" y="1173" width="0.0481%" height="15" fill="rgb(248,210,23)" fg:x="5172" fg:w="3"/><text x="83.1081%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.8581%" y="1157" width="0.0481%" height="15" fill="rgb(253,135,8)" fg:x="5172" fg:w="3"/><text x="83.1081%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.8581%" y="1141" width="0.0481%" height="15" fill="rgb(217,98,21)" fg:x="5172" fg:w="3"/><text x="83.1081%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.8581%" y="1125" width="0.0481%" height="15" fill="rgb(253,130,21)" fg:x="5172" fg:w="3"/><text x="83.1081%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.8581%" y="1109" width="0.0481%" height="15" fill="rgb(207,81,54)" fg:x="5172" fg:w="3"/><text x="83.1081%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.8581%" y="1093" width="0.0481%" height="15" fill="rgb(232,48,33)" fg:x="5172" fg:w="3"/><text x="83.1081%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.8581%" y="1077" width="0.0481%" height="15" fill="rgb(211,9,35)" fg:x="5172" fg:w="3"/><text x="83.1081%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.8581%" y="1061" width="0.0481%" height="15" fill="rgb(205,152,21)" fg:x="5172" fg:w="3"/><text x="83.1081%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.8581%" y="1045" width="0.0481%" height="15" fill="rgb(249,21,27)" fg:x="5172" fg:w="3"/><text x="83.1081%" y="1055.50"></text></g><g><title>SkipEmptyDataBlocksForward (9 samples, 0.14%)</title><rect x="82.8100%" y="1349" width="0.1442%" height="15" fill="rgb(252,29,24)" fg:x="5169" fg:w="9"/><text x="83.0600%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (9 samples, 0.14%)</title><rect x="82.8100%" y="1333" width="0.1442%" height="15" fill="rgb(230,130,50)" fg:x="5169" fg:w="9"/><text x="83.0600%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (9 samples, 0.14%)</title><rect x="82.8100%" y="1317" width="0.1442%" height="15" fill="rgb(239,144,14)" fg:x="5169" fg:w="9"/><text x="83.0600%" y="1327.50"></text></g><g><title>leveldb::Table::BlockReader (9 samples, 0.14%)</title><rect x="82.8100%" y="1301" width="0.1442%" height="15" fill="rgb(227,111,50)" fg:x="5169" fg:w="9"/><text x="83.0600%" y="1311.50"></text></g><g><title>leveldb::ReadBlock (9 samples, 0.14%)</title><rect x="82.8100%" y="1285" width="0.1442%" height="15" fill="rgb(254,84,20)" fg:x="5169" fg:w="9"/><text x="83.0600%" y="1295.50"></text></g><g><title>leveldb::crc32c::Value (9 samples, 0.14%)</title><rect x="82.8100%" y="1269" width="0.1442%" height="15" fill="rgb(232,90,48)" fg:x="5169" fg:w="9"/><text x="83.0600%" y="1279.50"></text></g><g><title>crc32c::ExtendSse42 (9 samples, 0.14%)</title><rect x="82.8100%" y="1253" width="0.1442%" height="15" fill="rgb(253,63,47)" fg:x="5169" fg:w="9"/><text x="83.0600%" y="1263.50"></text></g><g><title>_mm_crc32_u64 (3 samples, 0.05%)</title><rect x="82.9061%" y="1237" width="0.0481%" height="15" fill="rgb(251,146,35)" fg:x="5175" fg:w="3"/><text x="83.1561%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="82.9542%" y="1349" width="0.0320%" height="15" fill="rgb(229,192,35)" fg:x="5178" fg:w="2"/><text x="83.2042%" y="1359.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="82.9702%" y="1333" width="0.0160%" height="15" fill="rgb(225,68,9)" fg:x="5179" fg:w="1"/><text x="83.2202%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="83.0183%" y="1333" width="0.0160%" height="15" fill="rgb(214,97,34)" fg:x="5182" fg:w="1"/><text x="83.2683%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (5 samples, 0.08%)</title><rect x="82.9862%" y="1349" width="0.0801%" height="15" fill="rgb(253,31,26)" fg:x="5180" fg:w="5"/><text x="83.2362%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.03%)</title><rect x="83.0343%" y="1333" width="0.0320%" height="15" fill="rgb(225,151,47)" fg:x="5183" fg:w="2"/><text x="83.2843%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (4 samples, 0.06%)</title><rect x="83.0663%" y="1349" width="0.0641%" height="15" fill="rgb(206,185,9)" fg:x="5185" fg:w="4"/><text x="83.3163%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="83.1144%" y="1333" width="0.0160%" height="15" fill="rgb(249,65,17)" fg:x="5188" fg:w="1"/><text x="83.3644%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="83.1304%" y="1349" width="0.0160%" height="15" fill="rgb(220,110,10)" fg:x="5189" fg:w="1"/><text x="83.3804%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="83.1464%" y="1349" width="0.0320%" height="15" fill="rgb(222,198,49)" fg:x="5190" fg:w="2"/><text x="83.3964%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::NextEntryOffset (1 samples, 0.02%)</title><rect x="83.1624%" y="1333" width="0.0160%" height="15" fill="rgb(239,81,13)" fg:x="5191" fg:w="1"/><text x="83.4124%" y="1343.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (2 samples, 0.03%)</title><rect x="83.1785%" y="1349" width="0.0320%" height="15" fill="rgb(216,128,11)" fg:x="5192" fg:w="2"/><text x="83.4285%" y="1359.50"></text></g><g><title>leveldb::DBImpl::user_comparator (1 samples, 0.02%)</title><rect x="83.1945%" y="1333" width="0.0160%" height="15" fill="rgb(247,156,8)" fg:x="5193" fg:w="1"/><text x="83.4445%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::user_comparator (1 samples, 0.02%)</title><rect x="83.1945%" y="1317" width="0.0160%" height="15" fill="rgb(219,173,1)" fg:x="5193" fg:w="1"/><text x="83.4445%" y="1327.50"></text></g><g><title>Next (66 samples, 1.06%)</title><rect x="82.1852%" y="1381" width="1.0574%" height="15" fill="rgb(227,42,24)" fg:x="5130" fg:w="66"/><text x="82.4352%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (66 samples, 1.06%)</title><rect x="82.1852%" y="1365" width="1.0574%" height="15" fill="rgb(253,219,50)" fg:x="5130" fg:w="66"/><text x="82.4352%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::FileSize (2 samples, 0.03%)</title><rect x="83.2105%" y="1349" width="0.0320%" height="15" fill="rgb(215,191,54)" fg:x="5194" fg:w="2"/><text x="83.4605%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.13%)</title><rect x="83.2426%" y="1381" width="0.1282%" height="15" fill="rgb(238,83,12)" fg:x="5196" fg:w="8"/><text x="83.4926%" y="1391.50"></text></g><g><title>leveldb::Slice::compare (5 samples, 0.08%)</title><rect x="83.2906%" y="1365" width="0.0801%" height="15" fill="rgb(205,124,9)" fg:x="5199" fg:w="5"/><text x="83.5406%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (3 samples, 0.05%)</title><rect x="83.3867%" y="1349" width="0.0481%" height="15" fill="rgb(253,174,7)" fg:x="5205" fg:w="3"/><text x="83.6367%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3 samples, 0.05%)</title><rect x="83.3867%" y="1333" width="0.0481%" height="15" fill="rgb(206,134,49)" fg:x="5205" fg:w="3"/><text x="83.6367%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.05%)</title><rect x="83.3867%" y="1317" width="0.0481%" height="15" fill="rgb(221,89,20)" fg:x="5205" fg:w="3"/><text x="83.6367%" y="1327.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (5 samples, 0.08%)</title><rect x="83.4348%" y="1349" width="0.0801%" height="15" fill="rgb(240,205,13)" fg:x="5208" fg:w="5"/><text x="83.6848%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="83.4829%" y="1333" width="0.0320%" height="15" fill="rgb(237,174,32)" fg:x="5211" fg:w="2"/><text x="83.7329%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::GetRestartPoint (1 samples, 0.02%)</title><rect x="83.4989%" y="1317" width="0.0160%" height="15" fill="rgb(226,12,15)" fg:x="5212" fg:w="1"/><text x="83.7489%" y="1327.50"></text></g><g><title>leveldb::Block::Iter::Valid (3 samples, 0.05%)</title><rect x="83.5149%" y="1349" width="0.0481%" height="15" fill="rgb(245,160,52)" fg:x="5213" fg:w="3"/><text x="83.7649%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="83.5630%" y="1349" width="0.0160%" height="15" fill="rgb(253,80,21)" fg:x="5216" fg:w="1"/><text x="83.8130%" y="1359.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="83.5790%" y="1333" width="0.0160%" height="15" fill="rgb(231,225,22)" fg:x="5217" fg:w="1"/><text x="83.8290%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="83.5790%" y="1317" width="0.0160%" height="15" fill="rgb(253,185,12)" fg:x="5217" fg:w="1"/><text x="83.8290%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="83.5790%" y="1301" width="0.0160%" height="15" fill="rgb(234,197,21)" fg:x="5217" fg:w="1"/><text x="83.8290%" y="1311.50"></text></g><g><title>key (1 samples, 0.02%)</title><rect x="83.5950%" y="1333" width="0.0160%" height="15" fill="rgb(210,47,30)" fg:x="5218" fg:w="1"/><text x="83.8450%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="83.5950%" y="1317" width="0.0160%" height="15" fill="rgb(246,139,27)" fg:x="5218" fg:w="1"/><text x="83.8450%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="83.6110%" y="1333" width="0.0160%" height="15" fill="rgb(226,130,16)" fg:x="5219" fg:w="1"/><text x="83.8610%" y="1343.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="83.6110%" y="1317" width="0.0160%" height="15" fill="rgb(237,208,20)" fg:x="5219" fg:w="1"/><text x="83.8610%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="83.6110%" y="1301" width="0.0160%" height="15" fill="rgb(245,186,28)" fg:x="5219" fg:w="1"/><text x="83.8610%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="83.6270%" y="1333" width="0.0160%" height="15" fill="rgb(238,105,39)" fg:x="5220" fg:w="1"/><text x="83.8770%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (2 samples, 0.03%)</title><rect x="83.6431%" y="1333" width="0.0320%" height="15" fill="rgb(253,228,11)" fg:x="5221" fg:w="2"/><text x="83.8931%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.03%)</title><rect x="83.6431%" y="1317" width="0.0320%" height="15" fill="rgb(224,136,38)" fg:x="5221" fg:w="2"/><text x="83.8931%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.03%)</title><rect x="83.6431%" y="1301" width="0.0320%" height="15" fill="rgb(211,3,25)" fg:x="5221" fg:w="2"/><text x="83.8931%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.03%)</title><rect x="83.6431%" y="1285" width="0.0320%" height="15" fill="rgb(238,66,34)" fg:x="5221" fg:w="2"/><text x="83.8931%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="83.6751%" y="1333" width="0.0160%" height="15" fill="rgb(223,188,11)" fg:x="5223" fg:w="1"/><text x="83.9251%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="83.6751%" y="1317" width="0.0160%" height="15" fill="rgb(221,10,35)" fg:x="5223" fg:w="1"/><text x="83.9251%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="83.6751%" y="1301" width="0.0160%" height="15" fill="rgb(223,18,44)" fg:x="5223" fg:w="1"/><text x="83.9251%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="83.6751%" y="1285" width="0.0160%" height="15" fill="rgb(220,97,41)" fg:x="5223" fg:w="1"/><text x="83.9251%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (4 samples, 0.06%)</title><rect x="83.6911%" y="1333" width="0.0641%" height="15" fill="rgb(206,95,45)" fg:x="5224" fg:w="4"/><text x="83.9411%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.02%)</title><rect x="83.7552%" y="1333" width="0.0160%" height="15" fill="rgb(209,96,13)" fg:x="5228" fg:w="1"/><text x="84.0052%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.02%)</title><rect x="83.7712%" y="1333" width="0.0160%" height="15" fill="rgb(237,39,34)" fg:x="5229" fg:w="1"/><text x="84.0212%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (26 samples, 0.42%)</title><rect x="83.3867%" y="1365" width="0.4165%" height="15" fill="rgb(213,49,47)" fg:x="5205" fg:w="26"/><text x="83.6367%" y="1375.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (14 samples, 0.22%)</title><rect x="83.5790%" y="1349" width="0.2243%" height="15" fill="rgb(205,107,27)" fg:x="5217" fg:w="14"/><text x="83.8290%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="83.7872%" y="1333" width="0.0160%" height="15" fill="rgb(212,142,9)" fg:x="5230" fg:w="1"/><text x="84.0372%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="83.8033%" y="1365" width="0.0160%" height="15" fill="rgb(226,182,0)" fg:x="5231" fg:w="1"/><text x="84.0533%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="83.8193%" y="1365" width="0.0160%" height="15" fill="rgb(231,3,53)" fg:x="5232" fg:w="1"/><text x="84.0693%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::iter (1 samples, 0.02%)</title><rect x="83.8193%" y="1349" width="0.0160%" height="15" fill="rgb(246,111,28)" fg:x="5232" fg:w="1"/><text x="84.0693%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="83.8353%" y="1365" width="0.0320%" height="15" fill="rgb(254,183,7)" fg:x="5233" fg:w="2"/><text x="84.0853%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="83.8513%" y="1349" width="0.0160%" height="15" fill="rgb(247,177,28)" fg:x="5234" fg:w="1"/><text x="84.1013%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (2 samples, 0.03%)</title><rect x="83.8834%" y="1333" width="0.0320%" height="15" fill="rgb(244,43,1)" fg:x="5236" fg:w="2"/><text x="84.1334%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.03%)</title><rect x="83.8834%" y="1317" width="0.0320%" height="15" fill="rgb(207,2,35)" fg:x="5236" fg:w="2"/><text x="84.1334%" y="1327.50"></text></g><g><title>leveldb::Block::Iter::Next (3 samples, 0.05%)</title><rect x="83.9154%" y="1333" width="0.0481%" height="15" fill="rgb(213,83,22)" fg:x="5238" fg:w="3"/><text x="84.1654%" y="1343.50"></text></g><g><title>DecodeEntry (1 samples, 0.02%)</title><rect x="83.9635%" y="1301" width="0.0160%" height="15" fill="rgb(246,212,13)" fg:x="5241" fg:w="1"/><text x="84.2135%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (39 samples, 0.62%)</title><rect x="83.3707%" y="1381" width="0.6248%" height="15" fill="rgb(213,127,46)" fg:x="5204" fg:w="39"/><text x="83.6207%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (8 samples, 0.13%)</title><rect x="83.8674%" y="1365" width="0.1282%" height="15" fill="rgb(219,215,39)" fg:x="5235" fg:w="8"/><text x="84.1174%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (8 samples, 0.13%)</title><rect x="83.8674%" y="1349" width="0.1282%" height="15" fill="rgb(227,99,17)" fg:x="5235" fg:w="8"/><text x="84.1174%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.03%)</title><rect x="83.9635%" y="1333" width="0.0320%" height="15" fill="rgb(208,155,18)" fg:x="5241" fg:w="2"/><text x="84.2135%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="83.9635%" y="1317" width="0.0320%" height="15" fill="rgb(223,204,38)" fg:x="5241" fg:w="2"/><text x="84.2135%" y="1327.50"></text></g><g><title>leveldb::Block::Iter::NextEntryOffset (1 samples, 0.02%)</title><rect x="83.9795%" y="1301" width="0.0160%" height="15" fill="rgb(212,114,21)" fg:x="5242" fg:w="1"/><text x="84.2295%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="83.9955%" y="1381" width="0.0160%" height="15" fill="rgb(250,74,13)" fg:x="5243" fg:w="1"/><text x="84.2455%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (4 samples, 0.06%)</title><rect x="84.0115%" y="1381" width="0.0641%" height="15" fill="rgb(234,7,1)" fg:x="5244" fg:w="4"/><text x="84.2615%" y="1391.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="84.0756%" y="1381" width="0.0160%" height="15" fill="rgb(207,138,31)" fg:x="5248" fg:w="1"/><text x="84.3256%" y="1391.50"></text></g><g><title>DecodeEntry (1 samples, 0.02%)</title><rect x="84.1237%" y="1365" width="0.0160%" height="15" fill="rgb(215,186,42)" fg:x="5251" fg:w="1"/><text x="84.3737%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (4 samples, 0.06%)</title><rect x="84.0916%" y="1381" width="0.0641%" height="15" fill="rgb(229,205,49)" fg:x="5249" fg:w="4"/><text x="84.3416%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="84.1397%" y="1365" width="0.0160%" height="15" fill="rgb(216,156,32)" fg:x="5252" fg:w="1"/><text x="84.3897%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="84.1397%" y="1349" width="0.0160%" height="15" fill="rgb(238,7,21)" fg:x="5252" fg:w="1"/><text x="84.3897%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="84.1397%" y="1333" width="0.0160%" height="15" fill="rgb(249,190,22)" fg:x="5252" fg:w="1"/><text x="84.3897%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="84.1397%" y="1317" width="0.0160%" height="15" fill="rgb(253,51,31)" fg:x="5252" fg:w="1"/><text x="84.3897%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="84.1397%" y="1301" width="0.0160%" height="15" fill="rgb(237,90,54)" fg:x="5252" fg:w="1"/><text x="84.3897%" y="1311.50"></text></g><g><title>leveldb::Block::Iter::value (3 samples, 0.05%)</title><rect x="84.1557%" y="1381" width="0.0481%" height="15" fill="rgb(250,214,33)" fg:x="5253" fg:w="3"/><text x="84.4057%" y="1391.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="84.2038%" y="1381" width="0.0160%" height="15" fill="rgb(237,10,49)" fg:x="5256" fg:w="1"/><text x="84.4538%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="84.2038%" y="1365" width="0.0160%" height="15" fill="rgb(241,56,36)" fg:x="5256" fg:w="1"/><text x="84.4538%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="84.2038%" y="1349" width="0.0160%" height="15" fill="rgb(227,164,12)" fg:x="5256" fg:w="1"/><text x="84.4538%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="84.2038%" y="1333" width="0.0160%" height="15" fill="rgb(249,149,35)" fg:x="5256" fg:w="1"/><text x="84.4538%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="84.2038%" y="1317" width="0.0160%" height="15" fill="rgb(238,227,50)" fg:x="5256" fg:w="1"/><text x="84.4538%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="84.2038%" y="1301" width="0.0160%" height="15" fill="rgb(235,102,45)" fg:x="5256" fg:w="1"/><text x="84.4538%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="84.2999%" y="1365" width="0.0160%" height="15" fill="rgb(211,10,38)" fg:x="5262" fg:w="1"/><text x="84.5499%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="84.2999%" y="1349" width="0.0160%" height="15" fill="rgb(219,77,48)" fg:x="5262" fg:w="1"/><text x="84.5499%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="84.3159%" y="1365" width="0.0320%" height="15" fill="rgb(246,6,15)" fg:x="5263" fg:w="2"/><text x="84.5659%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (2 samples, 0.03%)</title><rect x="84.3480%" y="1349" width="0.0320%" height="15" fill="rgb(207,220,2)" fg:x="5265" fg:w="2"/><text x="84.5980%" y="1359.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (11 samples, 0.18%)</title><rect x="84.2198%" y="1381" width="0.1762%" height="15" fill="rgb(242,48,14)" fg:x="5257" fg:w="11"/><text x="84.4698%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="84.3480%" y="1365" width="0.0481%" height="15" fill="rgb(218,19,27)" fg:x="5265" fg:w="3"/><text x="84.5980%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="84.3800%" y="1349" width="0.0160%" height="15" fill="rgb(228,0,35)" fg:x="5267" fg:w="1"/><text x="84.6300%" y="1359.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="84.4120%" y="1365" width="0.0160%" height="15" fill="rgb(244,142,54)" fg:x="5269" fg:w="1"/><text x="84.6620%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="84.4120%" y="1349" width="0.0160%" height="15" fill="rgb(243,217,40)" fg:x="5269" fg:w="1"/><text x="84.6620%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="84.4120%" y="1333" width="0.0160%" height="15" fill="rgb(207,114,16)" fg:x="5269" fg:w="1"/><text x="84.6620%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (1 samples, 0.02%)</title><rect x="84.4120%" y="1317" width="0.0160%" height="15" fill="rgb(224,33,25)" fg:x="5269" fg:w="1"/><text x="84.6620%" y="1327.50"></text></g><g><title>leveldb::ParseInternalKey (1 samples, 0.02%)</title><rect x="84.4281%" y="1365" width="0.0160%" height="15" fill="rgb(230,93,54)" fg:x="5270" fg:w="1"/><text x="84.6781%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="84.4601%" y="1333" width="0.0160%" height="15" fill="rgb(224,56,24)" fg:x="5272" fg:w="1"/><text x="84.7101%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="84.4761%" y="1333" width="0.0160%" height="15" fill="rgb(235,189,50)" fg:x="5273" fg:w="1"/><text x="84.7261%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (4 samples, 0.06%)</title><rect x="84.4441%" y="1365" width="0.0641%" height="15" fill="rgb(242,173,8)" fg:x="5271" fg:w="4"/><text x="84.6941%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (4 samples, 0.06%)</title><rect x="84.4441%" y="1349" width="0.0641%" height="15" fill="rgb(209,206,10)" fg:x="5271" fg:w="4"/><text x="84.6941%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="84.4921%" y="1333" width="0.0160%" height="15" fill="rgb(213,182,44)" fg:x="5274" fg:w="1"/><text x="84.7421%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="84.4921%" y="1317" width="0.0160%" height="15" fill="rgb(243,51,15)" fg:x="5274" fg:w="1"/><text x="84.7421%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="84.4921%" y="1301" width="0.0160%" height="15" fill="rgb(241,13,14)" fg:x="5274" fg:w="1"/><text x="84.7421%" y="1311.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (8 samples, 0.13%)</title><rect x="84.3960%" y="1381" width="0.1282%" height="15" fill="rgb(239,147,24)" fg:x="5268" fg:w="8"/><text x="84.6460%" y="1391.50"></text></g><g><title>std::atomic&lt;bool&gt;::load (1 samples, 0.02%)</title><rect x="84.5082%" y="1365" width="0.0160%" height="15" fill="rgb(223,129,16)" fg:x="5275" fg:w="1"/><text x="84.7582%" y="1375.50"></text></g><g><title>std::__atomic_base&lt;bool&gt;::load (1 samples, 0.02%)</title><rect x="84.5082%" y="1349" width="0.0160%" height="15" fill="rgb(209,169,13)" fg:x="5275" fg:w="1"/><text x="84.7582%" y="1359.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="84.6684%" y="1109" width="0.0160%" height="15" fill="rgb(235,159,41)" fg:x="5285" fg:w="1"/><text x="84.9184%" y="1119.50"></text></g><g><title>[[nvme]] (3 samples, 0.05%)</title><rect x="84.8446%" y="1029" width="0.0481%" height="15" fill="rgb(223,219,48)" fg:x="5296" fg:w="3"/><text x="85.0946%" y="1039.50"></text></g><g><title>[[nvme]] (3 samples, 0.05%)</title><rect x="84.8446%" y="1013" width="0.0481%" height="15" fill="rgb(236,80,13)" fg:x="5296" fg:w="3"/><text x="85.0946%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.8606%" y="997" width="0.0320%" height="15" fill="rgb(213,5,6)" fg:x="5297" fg:w="2"/><text x="85.1106%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.8606%" y="981" width="0.0320%" height="15" fill="rgb(205,59,21)" fg:x="5297" fg:w="2"/><text x="85.1106%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.8606%" y="965" width="0.0320%" height="15" fill="rgb(247,137,35)" fg:x="5297" fg:w="2"/><text x="85.1106%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.8606%" y="949" width="0.0320%" height="15" fill="rgb(242,208,28)" fg:x="5297" fg:w="2"/><text x="85.1106%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.8606%" y="933" width="0.0320%" height="15" fill="rgb(245,62,25)" fg:x="5297" fg:w="2"/><text x="85.1106%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.8606%" y="917" width="0.0320%" height="15" fill="rgb(233,99,54)" fg:x="5297" fg:w="2"/><text x="85.1106%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.8606%" y="901" width="0.0320%" height="15" fill="rgb(213,10,37)" fg:x="5297" fg:w="2"/><text x="85.1106%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.8606%" y="885" width="0.0320%" height="15" fill="rgb(235,143,30)" fg:x="5297" fg:w="2"/><text x="85.1106%" y="895.50"></text></g><g><title>[[ext4]] (18 samples, 0.29%)</title><rect x="84.6203%" y="1125" width="0.2884%" height="15" fill="rgb(250,146,33)" fg:x="5282" fg:w="18"/><text x="84.8703%" y="1135.50"></text></g><g><title>[unknown] (14 samples, 0.22%)</title><rect x="84.6844%" y="1109" width="0.2243%" height="15" fill="rgb(226,198,42)" fg:x="5286" fg:w="14"/><text x="84.9344%" y="1119.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="84.7645%" y="1093" width="0.1442%" height="15" fill="rgb(222,55,6)" fg:x="5291" fg:w="9"/><text x="85.0145%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="84.8446%" y="1077" width="0.0641%" height="15" fill="rgb(213,224,31)" fg:x="5296" fg:w="4"/><text x="85.0946%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="84.8446%" y="1061" width="0.0641%" height="15" fill="rgb(226,103,35)" fg:x="5296" fg:w="4"/><text x="85.0946%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="84.8446%" y="1045" width="0.0641%" height="15" fill="rgb(205,66,45)" fg:x="5296" fg:w="4"/><text x="85.0946%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8927%" y="1029" width="0.0160%" height="15" fill="rgb(226,51,42)" fg:x="5299" fg:w="1"/><text x="85.1427%" y="1039.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="84.8927%" y="1013" width="0.0160%" height="15" fill="rgb(206,69,1)" fg:x="5299" fg:w="1"/><text x="85.1427%" y="1023.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="84.8927%" y="997" width="0.0160%" height="15" fill="rgb(213,228,47)" fg:x="5299" fg:w="1"/><text x="85.1427%" y="1007.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="84.8927%" y="981" width="0.0160%" height="15" fill="rgb(224,204,18)" fg:x="5299" fg:w="1"/><text x="85.1427%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8927%" y="965" width="0.0160%" height="15" fill="rgb(253,187,47)" fg:x="5299" fg:w="1"/><text x="85.1427%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8927%" y="949" width="0.0160%" height="15" fill="rgb(232,61,2)" fg:x="5299" fg:w="1"/><text x="85.1427%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8927%" y="933" width="0.0160%" height="15" fill="rgb(213,132,35)" fg:x="5299" fg:w="1"/><text x="85.1427%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.8927%" y="917" width="0.0160%" height="15" fill="rgb(247,33,21)" fg:x="5299" fg:w="1"/><text x="85.1427%" y="927.50"></text></g><g><title>[[ext4]] (23 samples, 0.37%)</title><rect x="84.6043%" y="1141" width="0.3685%" height="15" fill="rgb(233,71,46)" fg:x="5281" fg:w="23"/><text x="84.8543%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="84.9087%" y="1125" width="0.0641%" height="15" fill="rgb(222,173,43)" fg:x="5300" fg:w="4"/><text x="85.1587%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.9407%" y="1109" width="0.0320%" height="15" fill="rgb(249,218,47)" fg:x="5302" fg:w="2"/><text x="85.1907%" y="1119.50"></text></g><g><title>[[nvme]] (2 samples, 0.03%)</title><rect x="85.0689%" y="1061" width="0.0320%" height="15" fill="rgb(254,185,48)" fg:x="5310" fg:w="2"/><text x="85.3189%" y="1071.50"></text></g><g><title>[[nvme]] (2 samples, 0.03%)</title><rect x="85.0689%" y="1045" width="0.0320%" height="15" fill="rgb(252,165,50)" fg:x="5310" fg:w="2"/><text x="85.3189%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="85.0689%" y="1029" width="0.0320%" height="15" fill="rgb(206,219,6)" fg:x="5310" fg:w="2"/><text x="85.3189%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="85.0689%" y="1013" width="0.0320%" height="15" fill="rgb(212,212,45)" fg:x="5310" fg:w="2"/><text x="85.3189%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="85.0689%" y="997" width="0.0320%" height="15" fill="rgb(221,31,9)" fg:x="5310" fg:w="2"/><text x="85.3189%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="85.0689%" y="981" width="0.0320%" height="15" fill="rgb(234,198,39)" fg:x="5310" fg:w="2"/><text x="85.3189%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="85.0689%" y="965" width="0.0320%" height="15" fill="rgb(252,145,46)" fg:x="5310" fg:w="2"/><text x="85.3189%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="85.0689%" y="949" width="0.0320%" height="15" fill="rgb(237,149,0)" fg:x="5310" fg:w="2"/><text x="85.3189%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.0849%" y="933" width="0.0160%" height="15" fill="rgb(229,65,5)" fg:x="5311" fg:w="1"/><text x="85.3349%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.0849%" y="917" width="0.0160%" height="15" fill="rgb(235,60,36)" fg:x="5311" fg:w="1"/><text x="85.3349%" y="927.50"></text></g><g><title>[[ext4]] (36 samples, 0.58%)</title><rect x="84.5402%" y="1189" width="0.5767%" height="15" fill="rgb(222,47,18)" fg:x="5277" fg:w="36"/><text x="84.7902%" y="1199.50"></text></g><g><title>[[ext4]] (36 samples, 0.58%)</title><rect x="84.5402%" y="1173" width="0.5767%" height="15" fill="rgb(235,114,22)" fg:x="5277" fg:w="36"/><text x="84.7902%" y="1183.50"></text></g><g><title>[[ext4]] (36 samples, 0.58%)</title><rect x="84.5402%" y="1157" width="0.5767%" height="15" fill="rgb(209,167,11)" fg:x="5277" fg:w="36"/><text x="84.7902%" y="1167.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="84.9728%" y="1141" width="0.1442%" height="15" fill="rgb(251,73,18)" fg:x="5304" fg:w="9"/><text x="85.2228%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="84.9888%" y="1125" width="0.1282%" height="15" fill="rgb(217,60,17)" fg:x="5305" fg:w="8"/><text x="85.2388%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="85.0048%" y="1109" width="0.1121%" height="15" fill="rgb(224,36,37)" fg:x="5306" fg:w="7"/><text x="85.2548%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="85.0048%" y="1093" width="0.1121%" height="15" fill="rgb(211,21,32)" fg:x="5306" fg:w="7"/><text x="85.2548%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="85.0048%" y="1077" width="0.1121%" height="15" fill="rgb(231,55,48)" fg:x="5306" fg:w="7"/><text x="85.2548%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1009%" y="1061" width="0.0160%" height="15" fill="rgb(227,42,18)" fg:x="5312" fg:w="1"/><text x="85.3509%" y="1071.50"></text></g><g><title>Sync (40 samples, 0.64%)</title><rect x="84.5242%" y="1365" width="0.6408%" height="15" fill="rgb(217,2,27)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (40 samples, 0.64%)</title><rect x="84.5242%" y="1349" width="0.6408%" height="15" fill="rgb(251,138,23)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1359.50"></text></g><g><title>fdatasync (40 samples, 0.64%)</title><rect x="84.5242%" y="1333" width="0.6408%" height="15" fill="rgb(226,184,11)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1343.50"></text></g><g><title>[unknown] (40 samples, 0.64%)</title><rect x="84.5242%" y="1317" width="0.6408%" height="15" fill="rgb(242,142,12)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1327.50"></text></g><g><title>[unknown] (40 samples, 0.64%)</title><rect x="84.5242%" y="1301" width="0.6408%" height="15" fill="rgb(234,187,18)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1311.50"></text></g><g><title>[unknown] (40 samples, 0.64%)</title><rect x="84.5242%" y="1285" width="0.6408%" height="15" fill="rgb(237,44,42)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1295.50"></text></g><g><title>[[ext4]] (40 samples, 0.64%)</title><rect x="84.5242%" y="1269" width="0.6408%" height="15" fill="rgb(211,90,23)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1279.50"></text></g><g><title>[unknown] (40 samples, 0.64%)</title><rect x="84.5242%" y="1253" width="0.6408%" height="15" fill="rgb(207,81,18)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1263.50"></text></g><g><title>[unknown] (40 samples, 0.64%)</title><rect x="84.5242%" y="1237" width="0.6408%" height="15" fill="rgb(222,107,28)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1247.50"></text></g><g><title>[unknown] (40 samples, 0.64%)</title><rect x="84.5242%" y="1221" width="0.6408%" height="15" fill="rgb(237,83,52)" fg:x="5276" fg:w="40"/><text x="84.7742%" y="1231.50"></text></g><g><title>[unknown] (39 samples, 0.62%)</title><rect x="84.5402%" y="1205" width="0.6248%" height="15" fill="rgb(208,67,11)" fg:x="5277" fg:w="39"/><text x="84.7902%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.1169%" y="1189" width="0.0481%" height="15" fill="rgb(249,157,49)" fg:x="5313" fg:w="3"/><text x="85.3669%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.1169%" y="1173" width="0.0481%" height="15" fill="rgb(243,200,1)" fg:x="5313" fg:w="3"/><text x="85.3669%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.1169%" y="1157" width="0.0481%" height="15" fill="rgb(225,162,37)" fg:x="5313" fg:w="3"/><text x="85.3669%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.1169%" y="1141" width="0.0481%" height="15" fill="rgb(242,92,13)" fg:x="5313" fg:w="3"/><text x="85.3669%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.1169%" y="1125" width="0.0481%" height="15" fill="rgb(220,43,36)" fg:x="5313" fg:w="3"/><text x="85.3669%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="85.1330%" y="1109" width="0.0320%" height="15" fill="rgb(213,165,48)" fg:x="5314" fg:w="2"/><text x="85.3830%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1490%" y="1093" width="0.0160%" height="15" fill="rgb(227,200,9)" fg:x="5315" fg:w="1"/><text x="85.3990%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Close (1 samples, 0.02%)</title><rect x="85.1650%" y="1365" width="0.0160%" height="15" fill="rgb(221,222,28)" fg:x="5316" fg:w="1"/><text x="85.4150%" y="1375.50"></text></g><g><title>__close (1 samples, 0.02%)</title><rect x="85.1650%" y="1349" width="0.0160%" height="15" fill="rgb(223,142,26)" fg:x="5316" fg:w="1"/><text x="85.4150%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1650%" y="1333" width="0.0160%" height="15" fill="rgb(243,46,9)" fg:x="5316" fg:w="1"/><text x="85.4150%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1650%" y="1317" width="0.0160%" height="15" fill="rgb(250,56,11)" fg:x="5316" fg:w="1"/><text x="85.4150%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1650%" y="1301" width="0.0160%" height="15" fill="rgb(229,113,5)" fg:x="5316" fg:w="1"/><text x="85.4150%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1650%" y="1285" width="0.0160%" height="15" fill="rgb(244,108,28)" fg:x="5316" fg:w="1"/><text x="85.4150%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1650%" y="1269" width="0.0160%" height="15" fill="rgb(242,119,50)" fg:x="5316" fg:w="1"/><text x="85.4150%" y="1279.50"></text></g><g><title>leveldb::Log (1 samples, 0.02%)</title><rect x="85.1810%" y="1365" width="0.0160%" height="15" fill="rgb(224,164,23)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1375.50"></text></g><g><title>CBitcoinLevelDBLogger::Logv (1 samples, 0.02%)</title><rect x="85.1810%" y="1349" width="0.0160%" height="15" fill="rgb(214,227,44)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1359.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="85.1810%" y="1333" width="0.0160%" height="15" fill="rgb(238,202,4)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1343.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="85.1810%" y="1317" width="0.0160%" height="15" fill="rgb(213,190,30)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1327.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="85.1810%" y="1301" width="0.0160%" height="15" fill="rgb(239,15,2)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1311.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.02%)</title><rect x="85.1810%" y="1285" width="0.0160%" height="15" fill="rgb(249,229,4)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::insert (1 samples, 0.02%)</title><rect x="85.1810%" y="1269" width="0.0160%" height="15" fill="rgb(239,75,44)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1279.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.02%)</title><rect x="85.1810%" y="1253" width="0.0160%" height="15" fill="rgb(251,206,23)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1 samples, 0.02%)</title><rect x="85.1810%" y="1237" width="0.0160%" height="15" fill="rgb(215,208,0)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="85.1810%" y="1221" width="0.0160%" height="15" fill="rgb(230,75,50)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="85.1810%" y="1205" width="0.0160%" height="15" fill="rgb(246,180,39)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="85.1810%" y="1189" width="0.0160%" height="15" fill="rgb(249,175,24)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="85.1810%" y="1173" width="0.0160%" height="15" fill="rgb(247,176,22)" fg:x="5317" fg:w="1"/><text x="85.4310%" y="1183.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.02%)</title><rect x="85.1971%" y="1349" width="0.0160%" height="15" fill="rgb(241,100,24)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="85.1971%" y="1333" width="0.0160%" height="15" fill="rgb(233,4,35)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1343.50"></text></g><g><title>Append (1 samples, 0.02%)</title><rect x="85.1971%" y="1317" width="0.0160%" height="15" fill="rgb(211,164,46)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="85.1971%" y="1301" width="0.0160%" height="15" fill="rgb(242,99,53)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1311.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="85.1971%" y="1285" width="0.0160%" height="15" fill="rgb(243,45,33)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1971%" y="1269" width="0.0160%" height="15" fill="rgb(217,55,21)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1971%" y="1253" width="0.0160%" height="15" fill="rgb(245,145,46)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1971%" y="1237" width="0.0160%" height="15" fill="rgb(215,112,45)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1971%" y="1221" width="0.0160%" height="15" fill="rgb(228,104,16)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1231.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.1971%" y="1205" width="0.0160%" height="15" fill="rgb(239,186,38)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1971%" y="1189" width="0.0160%" height="15" fill="rgb(228,38,35)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1199.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.1971%" y="1173" width="0.0160%" height="15" fill="rgb(251,42,40)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1971%" y="1157" width="0.0160%" height="15" fill="rgb(210,51,19)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1971%" y="1141" width="0.0160%" height="15" fill="rgb(236,94,42)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1971%" y="1125" width="0.0160%" height="15" fill="rgb(239,167,16)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.1971%" y="1109" width="0.0160%" height="15" fill="rgb(252,175,31)" fg:x="5318" fg:w="1"/><text x="85.4471%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::Finish (2 samples, 0.03%)</title><rect x="85.1971%" y="1365" width="0.0320%" height="15" fill="rgb(206,166,30)" fg:x="5318" fg:w="2"/><text x="85.4471%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="85.2131%" y="1349" width="0.0160%" height="15" fill="rgb(206,209,37)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1359.50"></text></g><g><title>Append (1 samples, 0.02%)</title><rect x="85.2131%" y="1333" width="0.0160%" height="15" fill="rgb(226,91,4)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="85.2131%" y="1317" width="0.0160%" height="15" fill="rgb(222,167,0)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1327.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="85.2131%" y="1301" width="0.0160%" height="15" fill="rgb(211,70,14)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2131%" y="1285" width="0.0160%" height="15" fill="rgb(214,84,42)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2131%" y="1269" width="0.0160%" height="15" fill="rgb(235,157,37)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2131%" y="1253" width="0.0160%" height="15" fill="rgb(225,13,6)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2131%" y="1237" width="0.0160%" height="15" fill="rgb(205,202,1)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1247.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.2131%" y="1221" width="0.0160%" height="15" fill="rgb(232,195,26)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2131%" y="1205" width="0.0160%" height="15" fill="rgb(208,102,26)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.2131%" y="1189" width="0.0160%" height="15" fill="rgb(215,41,39)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2131%" y="1173" width="0.0160%" height="15" fill="rgb(247,139,11)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2131%" y="1157" width="0.0160%" height="15" fill="rgb(243,99,6)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2131%" y="1141" width="0.0160%" height="15" fill="rgb(230,168,48)" fg:x="5319" fg:w="1"/><text x="85.4631%" y="1151.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (45 samples, 0.72%)</title><rect x="84.5242%" y="1381" width="0.7209%" height="15" fill="rgb(238,227,13)" fg:x="5276" fg:w="45"/><text x="84.7742%" y="1391.50"></text></g><g><title>leveldb::TableCache::NewIterator (1 samples, 0.02%)</title><rect x="85.2291%" y="1365" width="0.0160%" height="15" fill="rgb(209,109,13)" fg:x="5320" fg:w="1"/><text x="85.4791%" y="1375.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.02%)</title><rect x="85.2291%" y="1349" width="0.0160%" height="15" fill="rgb(228,195,1)" fg:x="5320" fg:w="1"/><text x="85.4791%" y="1359.50"></text></g><g><title>leveldb::Table::Open (1 samples, 0.02%)</title><rect x="85.2291%" y="1333" width="0.0160%" height="15" fill="rgb(230,218,0)" fg:x="5320" fg:w="1"/><text x="85.4791%" y="1343.50"></text></g><g><title>leveldb::Table::ReadMeta (1 samples, 0.02%)</title><rect x="85.2291%" y="1317" width="0.0160%" height="15" fill="rgb(206,1,45)" fg:x="5320" fg:w="1"/><text x="85.4791%" y="1327.50"></text></g><g><title>leveldb::Table::ReadFilter (1 samples, 0.02%)</title><rect x="85.2291%" y="1301" width="0.0160%" height="15" fill="rgb(209,124,26)" fg:x="5320" fg:w="1"/><text x="85.4791%" y="1311.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.02%)</title><rect x="85.2291%" y="1285" width="0.0160%" height="15" fill="rgb(220,59,8)" fg:x="5320" fg:w="1"/><text x="85.4791%" y="1295.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="85.2291%" y="1269" width="0.0160%" height="15" fill="rgb(251,41,37)" fg:x="5320" fg:w="1"/><text x="85.4791%" y="1279.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="85.2291%" y="1253" width="0.0160%" height="15" fill="rgb(239,152,21)" fg:x="5320" fg:w="1"/><text x="85.4791%" y="1263.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="85.2291%" y="1237" width="0.0160%" height="15" fill="rgb(226,32,1)" fg:x="5320" fg:w="1"/><text x="85.4791%" y="1247.50"></text></g><g><title>SyncDirIfManifest (4 samples, 0.06%)</title><rect x="85.2451%" y="1333" width="0.0641%" height="15" fill="rgb(230,154,36)" fg:x="5321" fg:w="4"/><text x="85.4951%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (4 samples, 0.06%)</title><rect x="85.2451%" y="1317" width="0.0641%" height="15" fill="rgb(208,228,43)" fg:x="5321" fg:w="4"/><text x="85.4951%" y="1327.50"></text></g><g><title>fdatasync (4 samples, 0.06%)</title><rect x="85.2451%" y="1301" width="0.0641%" height="15" fill="rgb(214,203,3)" fg:x="5321" fg:w="4"/><text x="85.4951%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="85.2451%" y="1285" width="0.0641%" height="15" fill="rgb(207,149,29)" fg:x="5321" fg:w="4"/><text x="85.4951%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="85.2451%" y="1269" width="0.0641%" height="15" fill="rgb(250,105,7)" fg:x="5321" fg:w="4"/><text x="85.4951%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="85.2451%" y="1253" width="0.0641%" height="15" fill="rgb(232,222,16)" fg:x="5321" fg:w="4"/><text x="85.4951%" y="1263.50"></text></g><g><title>[[ext4]] (4 samples, 0.06%)</title><rect x="85.2451%" y="1237" width="0.0641%" height="15" fill="rgb(209,32,24)" fg:x="5321" fg:w="4"/><text x="85.4951%" y="1247.50"></text></g><g><title>[[jbd2]] (4 samples, 0.06%)</title><rect x="85.2451%" y="1221" width="0.0641%" height="15" fill="rgb(225,13,6)" fg:x="5321" fg:w="4"/><text x="85.4951%" y="1231.50"></text></g><g><title>[[jbd2]] (4 samples, 0.06%)</title><rect x="85.2451%" y="1205" width="0.0641%" height="15" fill="rgb(245,226,26)" fg:x="5321" fg:w="4"/><text x="85.4951%" y="1215.50"></text></g><g><title>[[jbd2]] (3 samples, 0.05%)</title><rect x="85.2611%" y="1189" width="0.0481%" height="15" fill="rgb(229,178,27)" fg:x="5322" fg:w="3"/><text x="85.5111%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.2611%" y="1173" width="0.0481%" height="15" fill="rgb(205,227,28)" fg:x="5322" fg:w="3"/><text x="85.5111%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.2611%" y="1157" width="0.0481%" height="15" fill="rgb(210,191,45)" fg:x="5322" fg:w="3"/><text x="85.5111%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.2611%" y="1141" width="0.0481%" height="15" fill="rgb(206,124,16)" fg:x="5322" fg:w="3"/><text x="85.5111%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.2611%" y="1125" width="0.0481%" height="15" fill="rgb(210,162,0)" fg:x="5322" fg:w="3"/><text x="85.5111%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.2611%" y="1109" width="0.0481%" height="15" fill="rgb(211,54,38)" fg:x="5322" fg:w="3"/><text x="85.5111%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.2611%" y="1093" width="0.0481%" height="15" fill="rgb(248,192,3)" fg:x="5322" fg:w="3"/><text x="85.5111%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.2611%" y="1077" width="0.0481%" height="15" fill="rgb(233,187,18)" fg:x="5322" fg:w="3"/><text x="85.5111%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.2611%" y="1061" width="0.0481%" height="15" fill="rgb(237,208,14)" fg:x="5322" fg:w="3"/><text x="85.5111%" y="1071.50"></text></g><g><title>leveldb::DBImpl::InstallCompactionResults (8 samples, 0.13%)</title><rect x="85.2451%" y="1381" width="0.1282%" height="15" fill="rgb(212,77,1)" fg:x="5321" fg:w="8"/><text x="85.4951%" y="1391.50"></text></g><g><title>leveldb::VersionSet::LogAndApply (8 samples, 0.13%)</title><rect x="85.2451%" y="1365" width="0.1282%" height="15" fill="rgb(210,163,22)" fg:x="5321" fg:w="8"/><text x="85.4951%" y="1375.50"></text></g><g><title>Sync (8 samples, 0.13%)</title><rect x="85.2451%" y="1349" width="0.1282%" height="15" fill="rgb(250,58,28)" fg:x="5321" fg:w="8"/><text x="85.4951%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (4 samples, 0.06%)</title><rect x="85.3092%" y="1333" width="0.0641%" height="15" fill="rgb(254,28,41)" fg:x="5325" fg:w="4"/><text x="85.5592%" y="1343.50"></text></g><g><title>fdatasync (4 samples, 0.06%)</title><rect x="85.3092%" y="1317" width="0.0641%" height="15" fill="rgb(237,162,36)" fg:x="5325" fg:w="4"/><text x="85.5592%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="85.3092%" y="1301" width="0.0641%" height="15" fill="rgb(232,56,6)" fg:x="5325" fg:w="4"/><text x="85.5592%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="85.3092%" y="1285" width="0.0641%" height="15" fill="rgb(216,127,42)" fg:x="5325" fg:w="4"/><text x="85.5592%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="85.3092%" y="1269" width="0.0641%" height="15" fill="rgb(241,69,15)" fg:x="5325" fg:w="4"/><text x="85.5592%" y="1279.50"></text></g><g><title>[[ext4]] (4 samples, 0.06%)</title><rect x="85.3092%" y="1253" width="0.0641%" height="15" fill="rgb(227,180,19)" fg:x="5325" fg:w="4"/><text x="85.5592%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="85.3092%" y="1237" width="0.0641%" height="15" fill="rgb(231,188,29)" fg:x="5325" fg:w="4"/><text x="85.5592%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="85.3092%" y="1221" width="0.0641%" height="15" fill="rgb(224,176,27)" fg:x="5325" fg:w="4"/><text x="85.5592%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1205" width="0.0481%" height="15" fill="rgb(249,214,19)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1189" width="0.0481%" height="15" fill="rgb(240,0,4)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1173" width="0.0481%" height="15" fill="rgb(233,28,41)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1157" width="0.0481%" height="15" fill="rgb(220,90,51)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1141" width="0.0481%" height="15" fill="rgb(250,52,22)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1125" width="0.0481%" height="15" fill="rgb(231,152,36)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1109" width="0.0481%" height="15" fill="rgb(250,218,4)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1093" width="0.0481%" height="15" fill="rgb(210,38,21)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1077" width="0.0481%" height="15" fill="rgb(230,75,13)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1061" width="0.0481%" height="15" fill="rgb(250,68,53)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3252%" y="1045" width="0.0481%" height="15" fill="rgb(250,210,16)" fg:x="5326" fg:w="3"/><text x="85.5752%" y="1055.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="85.3733%" y="1381" width="0.0160%" height="15" fill="rgb(240,132,5)" fg:x="5329" fg:w="1"/><text x="85.6233%" y="1391.50"></text></g><g><title>leveldb::ExtractUserKey (3 samples, 0.05%)</title><rect x="85.4213%" y="1365" width="0.0481%" height="15" fill="rgb(222,148,48)" fg:x="5332" fg:w="3"/><text x="85.6713%" y="1375.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="85.4534%" y="1349" width="0.0160%" height="15" fill="rgb(247,181,24)" fg:x="5334" fg:w="1"/><text x="85.7034%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (6 samples, 0.10%)</title><rect x="85.3893%" y="1381" width="0.0961%" height="15" fill="rgb(239,5,31)" fg:x="5330" fg:w="6"/><text x="85.6393%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="85.4694%" y="1365" width="0.0160%" height="15" fill="rgb(241,152,38)" fg:x="5335" fg:w="1"/><text x="85.7194%" y="1375.50"></text></g><g><title>leveldb::DecodeFixed64 (1 samples, 0.02%)</title><rect x="85.4694%" y="1349" width="0.0160%" height="15" fill="rgb(246,200,37)" fg:x="5335" fg:w="1"/><text x="85.7194%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="85.4694%" y="1333" width="0.0160%" height="15" fill="rgb(243,210,26)" fg:x="5335" fg:w="1"/><text x="85.7194%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="85.5014%" y="1365" width="0.0160%" height="15" fill="rgb(222,22,22)" fg:x="5337" fg:w="1"/><text x="85.7514%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (6 samples, 0.10%)</title><rect x="85.5175%" y="1365" width="0.0961%" height="15" fill="rgb(208,129,28)" fg:x="5338" fg:w="6"/><text x="85.7675%" y="1375.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="85.5976%" y="1349" width="0.0160%" height="15" fill="rgb(254,169,28)" fg:x="5343" fg:w="1"/><text x="85.8476%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (1 samples, 0.02%)</title><rect x="85.6136%" y="1365" width="0.0160%" height="15" fill="rgb(225,45,17)" fg:x="5344" fg:w="1"/><text x="85.8636%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.02%)</title><rect x="85.6296%" y="1365" width="0.0160%" height="15" fill="rgb(232,199,2)" fg:x="5345" fg:w="1"/><text x="85.8796%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="86.0301%" y="1349" width="0.0160%" height="15" fill="rgb(235,33,40)" fg:x="5370" fg:w="1"/><text x="86.2801%" y="1359.50"></text></g><g><title>leveldb::BlockBuilder::Add (2 samples, 0.03%)</title><rect x="86.0461%" y="1349" width="0.0320%" height="15" fill="rgb(237,89,50)" fg:x="5371" fg:w="2"/><text x="86.2961%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="86.1102%" y="1301" width="0.0160%" height="15" fill="rgb(238,126,5)" fg:x="5375" fg:w="1"/><text x="86.3602%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="86.1102%" y="1285" width="0.0160%" height="15" fill="rgb(247,214,42)" fg:x="5375" fg:w="1"/><text x="86.3602%" y="1295.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (4 samples, 0.06%)</title><rect x="86.0782%" y="1349" width="0.0641%" height="15" fill="rgb(238,60,45)" fg:x="5373" fg:w="4"/><text x="86.3282%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.03%)</title><rect x="86.1102%" y="1333" width="0.0320%" height="15" fill="rgb(225,69,44)" fg:x="5375" fg:w="2"/><text x="86.3602%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="86.1102%" y="1317" width="0.0320%" height="15" fill="rgb(241,13,44)" fg:x="5375" fg:w="2"/><text x="86.3602%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="86.1262%" y="1301" width="0.0160%" height="15" fill="rgb(227,121,22)" fg:x="5376" fg:w="1"/><text x="86.3762%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="86.1262%" y="1285" width="0.0160%" height="15" fill="rgb(231,160,23)" fg:x="5376" fg:w="1"/><text x="86.3762%" y="1295.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="86.1262%" y="1269" width="0.0160%" height="15" fill="rgb(250,179,43)" fg:x="5376" fg:w="1"/><text x="86.3762%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.08%)</title><rect x="86.1743%" y="1333" width="0.0801%" height="15" fill="rgb(233,54,46)" fg:x="5379" fg:w="5"/><text x="86.4243%" y="1343.50"></text></g><g><title>leveldb::Slice::compare (3 samples, 0.05%)</title><rect x="86.2063%" y="1317" width="0.0481%" height="15" fill="rgb(247,120,42)" fg:x="5381" fg:w="3"/><text x="86.4563%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="86.2544%" y="1333" width="0.0160%" height="15" fill="rgb(221,219,12)" fg:x="5384" fg:w="1"/><text x="86.5044%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.08%)</title><rect x="86.2704%" y="1333" width="0.0801%" height="15" fill="rgb(211,126,8)" fg:x="5385" fg:w="5"/><text x="86.5204%" y="1343.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="86.3345%" y="1317" width="0.0160%" height="15" fill="rgb(218,154,33)" fg:x="5389" fg:w="1"/><text x="86.5845%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (14 samples, 0.22%)</title><rect x="86.1423%" y="1349" width="0.2243%" height="15" fill="rgb(212,199,16)" fg:x="5377" fg:w="14"/><text x="86.3923%" y="1359.50"></text></g><g><title>leveldb::PutVarint64 (1 samples, 0.02%)</title><rect x="86.3505%" y="1333" width="0.0160%" height="15" fill="rgb(236,215,46)" fg:x="5390" fg:w="1"/><text x="86.6005%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="86.3505%" y="1317" width="0.0160%" height="15" fill="rgb(232,32,22)" fg:x="5390" fg:w="1"/><text x="86.6005%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="86.3505%" y="1301" width="0.0160%" height="15" fill="rgb(234,79,15)" fg:x="5390" fg:w="1"/><text x="86.6005%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="86.3505%" y="1285" width="0.0160%" height="15" fill="rgb(235,187,47)" fg:x="5390" fg:w="1"/><text x="86.6005%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="86.3665%" y="1333" width="0.0160%" height="15" fill="rgb(244,69,37)" fg:x="5391" fg:w="1"/><text x="86.6165%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (3 samples, 0.05%)</title><rect x="86.3826%" y="1333" width="0.0481%" height="15" fill="rgb(249,140,25)" fg:x="5392" fg:w="3"/><text x="86.6326%" y="1343.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="86.4146%" y="1317" width="0.0160%" height="15" fill="rgb(213,69,8)" fg:x="5394" fg:w="1"/><text x="86.6646%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (4 samples, 0.06%)</title><rect x="86.4306%" y="1333" width="0.0641%" height="15" fill="rgb(220,136,2)" fg:x="5395" fg:w="4"/><text x="86.6806%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="86.4787%" y="1317" width="0.0160%" height="15" fill="rgb(237,50,36)" fg:x="5398" fg:w="1"/><text x="86.7287%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="86.4787%" y="1301" width="0.0160%" height="15" fill="rgb(226,18,11)" fg:x="5398" fg:w="1"/><text x="86.7287%" y="1311.50"></text></g><g><title>leveldb::PutVarint32 (9 samples, 0.14%)</title><rect x="86.3665%" y="1349" width="0.1442%" height="15" fill="rgb(243,156,2)" fg:x="5391" fg:w="9"/><text x="86.6165%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="86.4947%" y="1333" width="0.0160%" height="15" fill="rgb(218,8,34)" fg:x="5399" fg:w="1"/><text x="86.7447%" y="1343.50"></text></g><g><title>leveldb::Slice::operator[] (15 samples, 0.24%)</title><rect x="86.5107%" y="1349" width="0.2403%" height="15" fill="rgb(250,94,35)" fg:x="5400" fg:w="15"/><text x="86.7607%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (6 samples, 0.10%)</title><rect x="86.7510%" y="1349" width="0.0961%" height="15" fill="rgb(229,127,21)" fg:x="5415" fg:w="6"/><text x="87.0010%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::ok (2 samples, 0.03%)</title><rect x="86.8151%" y="1333" width="0.0320%" height="15" fill="rgb(234,49,5)" fg:x="5419" fg:w="2"/><text x="87.0651%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (10 samples, 0.16%)</title><rect x="86.8472%" y="1333" width="0.1602%" height="15" fill="rgb(248,12,16)" fg:x="5421" fg:w="10"/><text x="87.0972%" y="1343.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="87.0074%" y="1333" width="0.0160%" height="15" fill="rgb(208,220,31)" fg:x="5431" fg:w="1"/><text x="87.2574%" y="1343.50"></text></g><g><title>leveldb::operator== (12 samples, 0.19%)</title><rect x="86.8472%" y="1349" width="0.1922%" height="15" fill="rgb(243,184,0)" fg:x="5421" fg:w="12"/><text x="87.0972%" y="1359.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="87.0234%" y="1333" width="0.0160%" height="15" fill="rgb(217,38,21)" fg:x="5432" fg:w="1"/><text x="87.2734%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="87.0875%" y="1317" width="0.0160%" height="15" fill="rgb(239,120,45)" fg:x="5436" fg:w="1"/><text x="87.3375%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="87.0875%" y="1301" width="0.0160%" height="15" fill="rgb(235,33,2)" fg:x="5436" fg:w="1"/><text x="87.3375%" y="1311.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="87.1355%" y="1269" width="0.0160%" height="15" fill="rgb(249,161,5)" fg:x="5439" fg:w="1"/><text x="87.3855%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (5 samples, 0.08%)</title><rect x="87.1035%" y="1317" width="0.0801%" height="15" fill="rgb(250,165,48)" fg:x="5437" fg:w="5"/><text x="87.3535%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (4 samples, 0.06%)</title><rect x="87.1195%" y="1301" width="0.0641%" height="15" fill="rgb(221,23,45)" fg:x="5438" fg:w="4"/><text x="87.3695%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (4 samples, 0.06%)</title><rect x="87.1195%" y="1285" width="0.0641%" height="15" fill="rgb(217,108,46)" fg:x="5438" fg:w="4"/><text x="87.3695%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="87.1516%" y="1269" width="0.0320%" height="15" fill="rgb(254,26,35)" fg:x="5440" fg:w="2"/><text x="87.4016%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (11 samples, 0.18%)</title><rect x="87.0394%" y="1333" width="0.1762%" height="15" fill="rgb(218,223,28)" fg:x="5433" fg:w="11"/><text x="87.2894%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (2 samples, 0.03%)</title><rect x="87.1836%" y="1317" width="0.0320%" height="15" fill="rgb(242,27,47)" fg:x="5442" fg:w="2"/><text x="87.4336%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="87.1996%" y="1301" width="0.0160%" height="15" fill="rgb(218,39,35)" fg:x="5443" fg:w="1"/><text x="87.4496%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (13 samples, 0.21%)</title><rect x="87.0394%" y="1349" width="0.2083%" height="15" fill="rgb(232,127,16)" fg:x="5433" fg:w="13"/><text x="87.2894%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (2 samples, 0.03%)</title><rect x="87.2156%" y="1333" width="0.0320%" height="15" fill="rgb(231,219,51)" fg:x="5444" fg:w="2"/><text x="87.4656%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (101 samples, 1.62%)</title><rect x="85.6456%" y="1365" width="1.6181%" height="15" fill="rgb(217,220,46)" fg:x="5346" fg:w="101"/><text x="85.8956%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="87.2477%" y="1349" width="0.0160%" height="15" fill="rgb(230,75,1)" fg:x="5446" fg:w="1"/><text x="87.4977%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="87.2477%" y="1333" width="0.0160%" height="15" fill="rgb(218,2,8)" fg:x="5446" fg:w="1"/><text x="87.4977%" y="1343.50"></text></g><g><title>leveldb::BlockHandle::EncodeTo (1 samples, 0.02%)</title><rect x="87.2637%" y="1365" width="0.0160%" height="15" fill="rgb(206,111,30)" fg:x="5447" fg:w="1"/><text x="87.5137%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (1 samples, 0.02%)</title><rect x="87.2637%" y="1349" width="0.0160%" height="15" fill="rgb(209,135,6)" fg:x="5447" fg:w="1"/><text x="87.5137%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (2 samples, 0.03%)</title><rect x="87.3118%" y="1285" width="0.0320%" height="15" fill="rgb(205,169,10)" fg:x="5450" fg:w="2"/><text x="87.5618%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (3 samples, 0.05%)</title><rect x="87.3118%" y="1301" width="0.0481%" height="15" fill="rgb(212,204,38)" fg:x="5450" fg:w="3"/><text x="87.5618%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="87.3438%" y="1285" width="0.0160%" height="15" fill="rgb(205,199,14)" fg:x="5452" fg:w="1"/><text x="87.5938%" y="1295.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (4 samples, 0.06%)</title><rect x="87.3118%" y="1349" width="0.0641%" height="15" fill="rgb(212,4,6)" fg:x="5450" fg:w="4"/><text x="87.5618%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (4 samples, 0.06%)</title><rect x="87.3118%" y="1333" width="0.0641%" height="15" fill="rgb(250,15,10)" fg:x="5450" fg:w="4"/><text x="87.5618%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (4 samples, 0.06%)</title><rect x="87.3118%" y="1317" width="0.0641%" height="15" fill="rgb(212,49,51)" fg:x="5450" fg:w="4"/><text x="87.5618%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="87.3598%" y="1301" width="0.0160%" height="15" fill="rgb(235,21,9)" fg:x="5453" fg:w="1"/><text x="87.6098%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="87.3598%" y="1285" width="0.0160%" height="15" fill="rgb(251,31,32)" fg:x="5453" fg:w="1"/><text x="87.6098%" y="1295.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="87.3598%" y="1269" width="0.0160%" height="15" fill="rgb(246,23,9)" fg:x="5453" fg:w="1"/><text x="87.6098%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (1 samples, 0.02%)</title><rect x="87.3758%" y="1317" width="0.0160%" height="15" fill="rgb(225,216,14)" fg:x="5454" fg:w="1"/><text x="87.6258%" y="1327.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (9 samples, 0.14%)</title><rect x="87.2797%" y="1365" width="0.1442%" height="15" fill="rgb(215,200,26)" fg:x="5448" fg:w="9"/><text x="87.5297%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (3 samples, 0.05%)</title><rect x="87.3758%" y="1349" width="0.0481%" height="15" fill="rgb(237,130,47)" fg:x="5454" fg:w="3"/><text x="87.6258%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (3 samples, 0.05%)</title><rect x="87.3758%" y="1333" width="0.0481%" height="15" fill="rgb(247,74,14)" fg:x="5454" fg:w="3"/><text x="87.6258%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="87.3919%" y="1317" width="0.0320%" height="15" fill="rgb(254,97,46)" fg:x="5455" fg:w="2"/><text x="87.6419%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="87.3919%" y="1301" width="0.0320%" height="15" fill="rgb(234,191,1)" fg:x="5455" fg:w="2"/><text x="87.6419%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.03%)</title><rect x="87.3919%" y="1285" width="0.0320%" height="15" fill="rgb(215,165,14)" fg:x="5455" fg:w="2"/><text x="87.6419%" y="1295.50"></text></g><g><title>leveldb::EncodeVarint32 (8 samples, 0.13%)</title><rect x="87.4239%" y="1365" width="0.1282%" height="15" fill="rgb(230,182,6)" fg:x="5457" fg:w="8"/><text x="87.6739%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="87.5681%" y="1317" width="0.0160%" height="15" fill="rgb(210,127,39)" fg:x="5466" fg:w="1"/><text x="87.8181%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (1 samples, 0.02%)</title><rect x="87.5681%" y="1301" width="0.0160%" height="15" fill="rgb(223,212,51)" fg:x="5466" fg:w="1"/><text x="87.8181%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (5 samples, 0.08%)</title><rect x="87.5681%" y="1349" width="0.0801%" height="15" fill="rgb(226,176,43)" fg:x="5466" fg:w="5"/><text x="87.8181%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (5 samples, 0.08%)</title><rect x="87.5681%" y="1333" width="0.0801%" height="15" fill="rgb(222,155,4)" fg:x="5466" fg:w="5"/><text x="87.8181%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (4 samples, 0.06%)</title><rect x="87.5841%" y="1317" width="0.0641%" height="15" fill="rgb(215,149,7)" fg:x="5467" fg:w="4"/><text x="87.8341%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="87.6001%" y="1301" width="0.0481%" height="15" fill="rgb(252,199,23)" fg:x="5468" fg:w="3"/><text x="87.8501%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.05%)</title><rect x="87.6001%" y="1285" width="0.0481%" height="15" fill="rgb(245,52,29)" fg:x="5468" fg:w="3"/><text x="87.8501%" y="1295.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="87.6322%" y="1269" width="0.0160%" height="15" fill="rgb(221,228,19)" fg:x="5470" fg:w="1"/><text x="87.8822%" y="1279.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (7 samples, 0.11%)</title><rect x="87.5521%" y="1365" width="0.1121%" height="15" fill="rgb(253,101,6)" fg:x="5465" fg:w="7"/><text x="87.8021%" y="1375.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="87.6482%" y="1349" width="0.0160%" height="15" fill="rgb(211,130,8)" fg:x="5471" fg:w="1"/><text x="87.8982%" y="1359.50"></text></g><g><title>unsigned long&amp; std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::emplace_back&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="87.6482%" y="1333" width="0.0160%" height="15" fill="rgb(238,37,53)" fg:x="5471" fg:w="1"/><text x="87.8982%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (8 samples, 0.13%)</title><rect x="87.6642%" y="1301" width="0.1282%" height="15" fill="rgb(235,145,5)" fg:x="5472" fg:w="8"/><text x="87.9142%" y="1311.50"></text></g><g><title>BloomHash (3 samples, 0.05%)</title><rect x="87.7443%" y="1285" width="0.0481%" height="15" fill="rgb(244,12,43)" fg:x="5477" fg:w="3"/><text x="87.9943%" y="1295.50"></text></g><g><title>CreateFilter (14 samples, 0.22%)</title><rect x="87.6642%" y="1333" width="0.2243%" height="15" fill="rgb(246,195,24)" fg:x="5472" fg:w="14"/><text x="87.9142%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (14 samples, 0.22%)</title><rect x="87.6642%" y="1317" width="0.2243%" height="15" fill="rgb(235,163,6)" fg:x="5472" fg:w="14"/><text x="87.9142%" y="1327.50"></text></g><g><title>leveldb::Hash (6 samples, 0.10%)</title><rect x="87.7924%" y="1301" width="0.0961%" height="15" fill="rgb(236,218,17)" fg:x="5480" fg:w="6"/><text x="88.0424%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (16 samples, 0.26%)</title><rect x="87.8885%" y="1333" width="0.2563%" height="15" fill="rgb(235,12,38)" fg:x="5486" fg:w="16"/><text x="88.1385%" y="1343.50"></text></g><g><title>BloomHash (1 samples, 0.02%)</title><rect x="88.1288%" y="1317" width="0.0160%" height="15" fill="rgb(225,195,33)" fg:x="5501" fg:w="1"/><text x="88.3788%" y="1327.50"></text></g><g><title>leveldb::Hash (15 samples, 0.24%)</title><rect x="88.1448%" y="1333" width="0.2403%" height="15" fill="rgb(238,54,35)" fg:x="5502" fg:w="15"/><text x="88.3948%" y="1343.50"></text></g><g><title>leveldb::InternalFilterPolicy::CreateFilter (4 samples, 0.06%)</title><rect x="88.3851%" y="1333" width="0.0641%" height="15" fill="rgb(238,33,7)" fg:x="5517" fg:w="4"/><text x="88.6351%" y="1343.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="88.4332%" y="1317" width="0.0160%" height="15" fill="rgb(245,5,14)" fg:x="5520" fg:w="1"/><text x="88.6832%" y="1327.50"></text></g><g><title>Flush (2 samples, 0.03%)</title><rect x="88.4492%" y="1317" width="0.0320%" height="15" fill="rgb(251,95,31)" fg:x="5521" fg:w="2"/><text x="88.6992%" y="1327.50"></text></g><g><title>FlushBuffer (2 samples, 0.03%)</title><rect x="88.4492%" y="1301" width="0.0320%" height="15" fill="rgb(222,15,46)" fg:x="5521" fg:w="2"/><text x="88.6992%" y="1311.50"></text></g><g><title>WriteUnbuffered (2 samples, 0.03%)</title><rect x="88.4492%" y="1285" width="0.0320%" height="15" fill="rgb(226,182,24)" fg:x="5521" fg:w="2"/><text x="88.6992%" y="1295.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (1 samples, 0.02%)</title><rect x="88.4813%" y="1317" width="0.0160%" height="15" fill="rgb(229,105,41)" fg:x="5523" fg:w="1"/><text x="88.7313%" y="1327.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="88.4813%" y="1301" width="0.0160%" height="15" fill="rgb(216,99,53)" fg:x="5523" fg:w="1"/><text x="88.7313%" y="1311.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="88.4973%" y="1301" width="0.0160%" height="15" fill="rgb(253,26,20)" fg:x="5524" fg:w="1"/><text x="88.7473%" y="1311.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="88.4973%" y="1285" width="0.0160%" height="15" fill="rgb(249,155,28)" fg:x="5524" fg:w="1"/><text x="88.7473%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Flush (2 samples, 0.03%)</title><rect x="88.4973%" y="1317" width="0.0320%" height="15" fill="rgb(241,221,2)" fg:x="5524" fg:w="2"/><text x="88.7473%" y="1327.50"></text></g><g><title>leveldb::Status::~Status (1 samples, 0.02%)</title><rect x="88.5133%" y="1301" width="0.0160%" height="15" fill="rgb(219,124,6)" fg:x="5525" fg:w="1"/><text x="88.7633%" y="1311.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (57 samples, 0.91%)</title><rect x="87.6642%" y="1349" width="0.9132%" height="15" fill="rgb(233,37,6)" fg:x="5472" fg:w="57"/><text x="87.9142%" y="1359.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (8 samples, 0.13%)</title><rect x="88.4492%" y="1333" width="0.1282%" height="15" fill="rgb(238,20,14)" fg:x="5521" fg:w="8"/><text x="88.6992%" y="1343.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (3 samples, 0.05%)</title><rect x="88.5293%" y="1317" width="0.0481%" height="15" fill="rgb(232,106,27)" fg:x="5526" fg:w="3"/><text x="88.7793%" y="1327.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (3 samples, 0.05%)</title><rect x="88.5293%" y="1301" width="0.0481%" height="15" fill="rgb(246,157,24)" fg:x="5526" fg:w="3"/><text x="88.7793%" y="1311.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (3 samples, 0.05%)</title><rect x="88.5293%" y="1285" width="0.0481%" height="15" fill="rgb(214,153,10)" fg:x="5526" fg:w="3"/><text x="88.7793%" y="1295.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (3 samples, 0.05%)</title><rect x="88.5293%" y="1269" width="0.0481%" height="15" fill="rgb(212,94,6)" fg:x="5526" fg:w="3"/><text x="88.7793%" y="1279.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (1 samples, 0.02%)</title><rect x="88.5614%" y="1253" width="0.0160%" height="15" fill="rgb(254,25,27)" fg:x="5528" fg:w="1"/><text x="88.8114%" y="1263.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="88.5614%" y="1237" width="0.0160%" height="15" fill="rgb(250,43,52)" fg:x="5528" fg:w="1"/><text x="88.8114%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (59 samples, 0.95%)</title><rect x="87.6642%" y="1365" width="0.9452%" height="15" fill="rgb(221,226,40)" fg:x="5472" fg:w="59"/><text x="87.9142%" y="1375.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (2 samples, 0.03%)</title><rect x="88.5774%" y="1349" width="0.0320%" height="15" fill="rgb(235,162,34)" fg:x="5529" fg:w="2"/><text x="88.8274%" y="1359.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (1 samples, 0.02%)</title><rect x="88.5934%" y="1333" width="0.0160%" height="15" fill="rgb(239,24,26)" fg:x="5530" fg:w="1"/><text x="88.8434%" y="1343.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="88.5934%" y="1317" width="0.0160%" height="15" fill="rgb(244,226,11)" fg:x="5530" fg:w="1"/><text x="88.8434%" y="1327.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="88.5934%" y="1301" width="0.0160%" height="15" fill="rgb(225,23,10)" fg:x="5530" fg:w="1"/><text x="88.8434%" y="1311.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (2 samples, 0.03%)</title><rect x="88.6575%" y="1349" width="0.0320%" height="15" fill="rgb(249,125,6)" fg:x="5534" fg:w="2"/><text x="88.9075%" y="1359.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="88.6895%" y="1349" width="0.0160%" height="15" fill="rgb(246,212,12)" fg:x="5536" fg:w="1"/><text x="88.9395%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="88.7055%" y="1349" width="0.0160%" height="15" fill="rgb(230,43,32)" fg:x="5537" fg:w="1"/><text x="88.9555%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::ok (1 samples, 0.02%)</title><rect x="88.7055%" y="1333" width="0.0160%" height="15" fill="rgb(210,95,23)" fg:x="5537" fg:w="1"/><text x="88.9555%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.13%)</title><rect x="88.6094%" y="1365" width="0.1282%" height="15" fill="rgb(229,103,33)" fg:x="5531" fg:w="8"/><text x="88.8594%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (1 samples, 0.02%)</title><rect x="88.7216%" y="1349" width="0.0160%" height="15" fill="rgb(222,104,27)" fg:x="5538" fg:w="1"/><text x="88.9716%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="88.7376%" y="1349" width="0.0160%" height="15" fill="rgb(239,221,23)" fg:x="5539" fg:w="1"/><text x="88.9876%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (1 samples, 0.02%)</title><rect x="88.7376%" y="1333" width="0.0160%" height="15" fill="rgb(222,98,21)" fg:x="5539" fg:w="1"/><text x="88.9876%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (2 samples, 0.03%)</title><rect x="88.7376%" y="1365" width="0.0320%" height="15" fill="rgb(231,101,20)" fg:x="5539" fg:w="2"/><text x="88.9876%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="88.7536%" y="1349" width="0.0160%" height="15" fill="rgb(215,150,22)" fg:x="5540" fg:w="1"/><text x="89.0036%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="89.0420%" y="1301" width="0.0160%" height="15" fill="rgb(248,3,34)" fg:x="5558" fg:w="1"/><text x="89.2920%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (2 samples, 0.03%)</title><rect x="89.0580%" y="1301" width="0.0320%" height="15" fill="rgb(220,141,21)" fg:x="5559" fg:w="2"/><text x="89.3080%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (4 samples, 0.06%)</title><rect x="89.0420%" y="1317" width="0.0641%" height="15" fill="rgb(223,41,48)" fg:x="5558" fg:w="4"/><text x="89.2920%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="89.0900%" y="1301" width="0.0160%" height="15" fill="rgb(247,12,5)" fg:x="5561" fg:w="1"/><text x="89.3400%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="89.1061%" y="1317" width="0.0160%" height="15" fill="rgb(206,173,10)" fg:x="5562" fg:w="1"/><text x="89.3561%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="89.1061%" y="1301" width="0.0160%" height="15" fill="rgb(233,214,37)" fg:x="5562" fg:w="1"/><text x="89.3561%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (9 samples, 0.14%)</title><rect x="89.0099%" y="1333" width="0.1442%" height="15" fill="rgb(238,86,43)" fg:x="5556" fg:w="9"/><text x="89.2599%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (2 samples, 0.03%)</title><rect x="89.1221%" y="1317" width="0.0320%" height="15" fill="rgb(212,182,8)" fg:x="5563" fg:w="2"/><text x="89.3721%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (2 samples, 0.03%)</title><rect x="89.1221%" y="1301" width="0.0320%" height="15" fill="rgb(240,91,47)" fg:x="5563" fg:w="2"/><text x="89.3721%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="89.1381%" y="1285" width="0.0160%" height="15" fill="rgb(209,138,26)" fg:x="5564" fg:w="1"/><text x="89.3881%" y="1295.50"></text></g><g><title>leveldb::PutVarint32 (25 samples, 0.40%)</title><rect x="88.7696%" y="1365" width="0.4005%" height="15" fill="rgb(231,163,20)" fg:x="5541" fg:w="25"/><text x="89.0196%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (10 samples, 0.16%)</title><rect x="89.0099%" y="1349" width="0.1602%" height="15" fill="rgb(214,91,54)" fg:x="5556" fg:w="10"/><text x="89.2599%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="89.1541%" y="1333" width="0.0160%" height="15" fill="rgb(230,32,17)" fg:x="5565" fg:w="1"/><text x="89.4041%" y="1343.50"></text></g><g><title>leveldb::PutVarint64 (1 samples, 0.02%)</title><rect x="89.1701%" y="1365" width="0.0160%" height="15" fill="rgb(231,34,34)" fg:x="5566" fg:w="1"/><text x="89.4201%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Add (3 samples, 0.05%)</title><rect x="89.1862%" y="1365" width="0.0481%" height="15" fill="rgb(224,228,27)" fg:x="5567" fg:w="3"/><text x="89.4362%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="89.2182%" y="1349" width="0.0160%" height="15" fill="rgb(219,35,40)" fg:x="5569" fg:w="1"/><text x="89.4682%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="89.2182%" y="1333" width="0.0160%" height="15" fill="rgb(234,42,8)" fg:x="5569" fg:w="1"/><text x="89.4682%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="89.2182%" y="1317" width="0.0160%" height="15" fill="rgb(226,75,22)" fg:x="5569" fg:w="1"/><text x="89.4682%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (1 samples, 0.02%)</title><rect x="89.2182%" y="1301" width="0.0160%" height="15" fill="rgb(242,203,28)" fg:x="5569" fg:w="1"/><text x="89.4682%" y="1311.50"></text></g><g><title>WriteUnbuffered (1 samples, 0.02%)</title><rect x="89.2502%" y="1317" width="0.0160%" height="15" fill="rgb(221,3,9)" fg:x="5571" fg:w="1"/><text x="89.5002%" y="1327.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="89.4585%" y="1205" width="0.0320%" height="15" fill="rgb(214,34,31)" fg:x="5584" fg:w="2"/><text x="89.7085%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4745%" y="1189" width="0.0160%" height="15" fill="rgb(252,119,15)" fg:x="5585" fg:w="1"/><text x="89.7245%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4745%" y="1173" width="0.0160%" height="15" fill="rgb(244,224,31)" fg:x="5585" fg:w="1"/><text x="89.7245%" y="1183.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="89.7949%" y="1109" width="0.0320%" height="15" fill="rgb(215,8,51)" fg:x="5605" fg:w="2"/><text x="90.0449%" y="1119.50"></text></g><g><title>[[ext4]] (7 samples, 0.11%)</title><rect x="89.7469%" y="1125" width="0.1121%" height="15" fill="rgb(207,24,1)" fg:x="5602" fg:w="7"/><text x="89.9969%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="89.8270%" y="1109" width="0.0320%" height="15" fill="rgb(245,90,0)" fg:x="5607" fg:w="2"/><text x="90.0770%" y="1119.50"></text></g><g><title>[[ext4]] (15 samples, 0.24%)</title><rect x="89.6988%" y="1141" width="0.2403%" height="15" fill="rgb(246,43,48)" fg:x="5599" fg:w="15"/><text x="89.9488%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="89.8590%" y="1125" width="0.0801%" height="15" fill="rgb(252,218,10)" fg:x="5609" fg:w="5"/><text x="90.1090%" y="1135.50"></text></g><g><title>[[ext4]] (24 samples, 0.38%)</title><rect x="89.6027%" y="1157" width="0.3845%" height="15" fill="rgb(231,24,35)" fg:x="5593" fg:w="24"/><text x="89.8527%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.9391%" y="1141" width="0.0481%" height="15" fill="rgb(225,66,19)" fg:x="5614" fg:w="3"/><text x="90.1891%" y="1151.50"></text></g><g><title>[[ext4]] (39 samples, 0.62%)</title><rect x="89.5867%" y="1173" width="0.6248%" height="15" fill="rgb(214,96,51)" fg:x="5592" fg:w="39"/><text x="89.8367%" y="1183.50"></text></g><g><title>[unknown] (14 samples, 0.22%)</title><rect x="89.9872%" y="1157" width="0.2243%" height="15" fill="rgb(251,151,47)" fg:x="5617" fg:w="14"/><text x="90.2372%" y="1167.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="90.0192%" y="1141" width="0.1922%" height="15" fill="rgb(236,79,14)" fg:x="5619" fg:w="12"/><text x="90.2692%" y="1151.50"></text></g><g><title>[unknown] (12 samples, 0.19%)</title><rect x="90.0192%" y="1125" width="0.1922%" height="15" fill="rgb(210,205,11)" fg:x="5619" fg:w="12"/><text x="90.2692%" y="1135.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="90.0352%" y="1109" width="0.1762%" height="15" fill="rgb(233,142,53)" fg:x="5620" fg:w="11"/><text x="90.2852%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="90.0993%" y="1093" width="0.1121%" height="15" fill="rgb(212,116,48)" fg:x="5624" fg:w="7"/><text x="90.3493%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="90.1153%" y="1077" width="0.0961%" height="15" fill="rgb(234,55,33)" fg:x="5625" fg:w="6"/><text x="90.3653%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="90.1474%" y="1061" width="0.0641%" height="15" fill="rgb(253,92,27)" fg:x="5627" fg:w="4"/><text x="90.3974%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="90.1634%" y="1045" width="0.0481%" height="15" fill="rgb(220,7,35)" fg:x="5628" fg:w="3"/><text x="90.4134%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="90.1634%" y="1029" width="0.0481%" height="15" fill="rgb(246,124,6)" fg:x="5628" fg:w="3"/><text x="90.4134%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="90.1634%" y="1013" width="0.0481%" height="15" fill="rgb(212,111,51)" fg:x="5628" fg:w="3"/><text x="90.4134%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="90.1634%" y="997" width="0.0481%" height="15" fill="rgb(253,116,7)" fg:x="5628" fg:w="3"/><text x="90.4134%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="90.1634%" y="981" width="0.0481%" height="15" fill="rgb(213,145,18)" fg:x="5628" fg:w="3"/><text x="90.4134%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="90.1634%" y="965" width="0.0481%" height="15" fill="rgb(219,149,7)" fg:x="5628" fg:w="3"/><text x="90.4134%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="90.1634%" y="949" width="0.0481%" height="15" fill="rgb(225,156,20)" fg:x="5628" fg:w="3"/><text x="90.4134%" y="959.50"></text></g><g><title>[[ext4]] (108 samples, 1.73%)</title><rect x="89.5226%" y="1189" width="1.7302%" height="15" fill="rgb(211,98,19)" fg:x="5588" fg:w="108"/><text x="89.7726%" y="1199.50"></text></g><g><title>[unknown] (65 samples, 1.04%)</title><rect x="90.2115%" y="1173" width="1.0413%" height="15" fill="rgb(231,192,31)" fg:x="5631" fg:w="65"/><text x="90.4615%" y="1183.50"></text></g><g><title>[unknown] (61 samples, 0.98%)</title><rect x="90.2756%" y="1157" width="0.9773%" height="15" fill="rgb(249,95,19)" fg:x="5635" fg:w="61"/><text x="90.5256%" y="1167.50"></text></g><g><title>[unknown] (48 samples, 0.77%)</title><rect x="90.4838%" y="1141" width="0.7690%" height="15" fill="rgb(247,101,36)" fg:x="5648" fg:w="48"/><text x="90.7338%" y="1151.50"></text></g><g><title>[unknown] (38 samples, 0.61%)</title><rect x="90.6440%" y="1125" width="0.6088%" height="15" fill="rgb(221,45,43)" fg:x="5658" fg:w="38"/><text x="90.8940%" y="1135.50"></text></g><g><title>[unknown] (25 samples, 0.40%)</title><rect x="90.8523%" y="1109" width="0.4005%" height="15" fill="rgb(220,42,1)" fg:x="5671" fg:w="25"/><text x="91.1023%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="91.1246%" y="1093" width="0.1282%" height="15" fill="rgb(236,19,24)" fg:x="5688" fg:w="8"/><text x="91.3746%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="91.2208%" y="1077" width="0.0320%" height="15" fill="rgb(225,192,6)" fg:x="5694" fg:w="2"/><text x="91.4708%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="91.5091%" y="1141" width="0.0160%" height="15" fill="rgb(242,30,19)" fg:x="5712" fg:w="1"/><text x="91.7591%" y="1151.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="91.5091%" y="1125" width="0.0160%" height="15" fill="rgb(240,36,6)" fg:x="5712" fg:w="1"/><text x="91.7591%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="91.5091%" y="1109" width="0.0160%" height="15" fill="rgb(246,40,28)" fg:x="5712" fg:w="1"/><text x="91.7591%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="91.5091%" y="1093" width="0.0160%" height="15" fill="rgb(225,155,33)" fg:x="5712" fg:w="1"/><text x="91.7591%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.5091%" y="1077" width="0.0160%" height="15" fill="rgb(240,65,18)" fg:x="5712" fg:w="1"/><text x="91.7591%" y="1087.50"></text></g><g><title>[[ext4]] (133 samples, 2.13%)</title><rect x="89.4104%" y="1221" width="2.1307%" height="15" fill="rgb(217,0,48)" fg:x="5581" fg:w="133"/><text x="89.6604%" y="1231.50">[..</text></g><g><title>[unknown] (128 samples, 2.05%)</title><rect x="89.4905%" y="1205" width="2.0506%" height="15" fill="rgb(217,80,15)" fg:x="5586" fg:w="128"/><text x="89.7405%" y="1215.50">[..</text></g><g><title>[unknown] (18 samples, 0.29%)</title><rect x="91.2528%" y="1189" width="0.2884%" height="15" fill="rgb(253,43,51)" fg:x="5696" fg:w="18"/><text x="91.5028%" y="1199.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="91.3649%" y="1173" width="0.1762%" height="15" fill="rgb(246,60,4)" fg:x="5703" fg:w="11"/><text x="91.6149%" y="1183.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="91.5091%" y="1157" width="0.0320%" height="15" fill="rgb(230,40,54)" fg:x="5712" fg:w="2"/><text x="91.7591%" y="1167.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="91.5252%" y="1141" width="0.0160%" height="15" fill="rgb(208,20,44)" fg:x="5713" fg:w="1"/><text x="91.7752%" y="1151.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="91.5252%" y="1125" width="0.0160%" height="15" fill="rgb(230,22,22)" fg:x="5713" fg:w="1"/><text x="91.7752%" y="1135.50"></text></g><g><title>[unknown] (149 samples, 2.39%)</title><rect x="89.2663%" y="1285" width="2.3871%" height="15" fill="rgb(207,57,4)" fg:x="5572" fg:w="149"/><text x="89.5163%" y="1295.50">[u..</text></g><g><title>[unknown] (148 samples, 2.37%)</title><rect x="89.2823%" y="1269" width="2.3710%" height="15" fill="rgb(242,130,33)" fg:x="5573" fg:w="148"/><text x="89.5323%" y="1279.50">[u..</text></g><g><title>[unknown] (147 samples, 2.36%)</title><rect x="89.2983%" y="1253" width="2.3550%" height="15" fill="rgb(218,66,43)" fg:x="5574" fg:w="147"/><text x="89.5483%" y="1263.50">[..</text></g><g><title>[unknown] (146 samples, 2.34%)</title><rect x="89.3143%" y="1237" width="2.3390%" height="15" fill="rgb(236,105,16)" fg:x="5575" fg:w="146"/><text x="89.5643%" y="1247.50">[..</text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="91.5412%" y="1221" width="0.1121%" height="15" fill="rgb(230,46,15)" fg:x="5714" fg:w="7"/><text x="91.7912%" y="1231.50"></text></g><g><title>Flush (151 samples, 2.42%)</title><rect x="89.2502%" y="1349" width="2.4191%" height="15" fill="rgb(251,172,40)" fg:x="5571" fg:w="151"/><text x="89.5002%" y="1359.50">Fl..</text></g><g><title>FlushBuffer (151 samples, 2.42%)</title><rect x="89.2502%" y="1333" width="2.4191%" height="15" fill="rgb(225,217,32)" fg:x="5571" fg:w="151"/><text x="89.5002%" y="1343.50">Fl..</text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (150 samples, 2.40%)</title><rect x="89.2663%" y="1317" width="2.4031%" height="15" fill="rgb(243,10,29)" fg:x="5572" fg:w="150"/><text x="89.5163%" y="1327.50">le..</text></g><g><title>__GI___libc_write (150 samples, 2.40%)</title><rect x="89.2663%" y="1301" width="2.4031%" height="15" fill="rgb(207,102,10)" fg:x="5572" fg:w="150"/><text x="89.5163%" y="1311.50">__..</text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="91.6533%" y="1285" width="0.0160%" height="15" fill="rgb(241,125,5)" fg:x="5721" fg:w="1"/><text x="91.9033%" y="1295.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="91.6693%" y="1333" width="0.0160%" height="15" fill="rgb(230,125,29)" fg:x="5722" fg:w="1"/><text x="91.9193%" y="1343.50"></text></g><g><title>Append (2 samples, 0.03%)</title><rect x="91.6854%" y="1317" width="0.0320%" height="15" fill="rgb(223,65,44)" fg:x="5723" fg:w="2"/><text x="91.9354%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (2 samples, 0.03%)</title><rect x="91.6854%" y="1301" width="0.0320%" height="15" fill="rgb(224,188,28)" fg:x="5723" fg:w="2"/><text x="91.9354%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="91.6854%" y="1285" width="0.0320%" height="15" fill="rgb(254,197,27)" fg:x="5723" fg:w="2"/><text x="91.9354%" y="1295.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="91.7174%" y="1317" width="0.0160%" height="15" fill="rgb(220,200,25)" fg:x="5725" fg:w="1"/><text x="91.9674%" y="1327.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="91.7174%" y="1301" width="0.0160%" height="15" fill="rgb(239,225,54)" fg:x="5725" fg:w="1"/><text x="91.9674%" y="1311.50"></text></g><g><title>leveldb::PutFixed32 (1 samples, 0.02%)</title><rect x="91.7334%" y="1317" width="0.0160%" height="15" fill="rgb(211,59,40)" fg:x="5726" fg:w="1"/><text x="91.9834%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="91.7334%" y="1301" width="0.0160%" height="15" fill="rgb(213,176,46)" fg:x="5726" fg:w="1"/><text x="91.9834%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="91.7334%" y="1285" width="0.0160%" height="15" fill="rgb(226,99,4)" fg:x="5726" fg:w="1"/><text x="91.9834%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="91.7334%" y="1269" width="0.0160%" height="15" fill="rgb(239,203,43)" fg:x="5726" fg:w="1"/><text x="91.9834%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Flush (159 samples, 2.55%)</title><rect x="89.2342%" y="1365" width="2.5473%" height="15" fill="rgb(246,1,45)" fg:x="5570" fg:w="159"/><text x="89.4842%" y="1375.50">le..</text></g><g><title>leveldb::TableBuilder::WriteBlock (7 samples, 0.11%)</title><rect x="91.6693%" y="1349" width="0.1121%" height="15" fill="rgb(231,42,52)" fg:x="5722" fg:w="7"/><text x="91.9193%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (6 samples, 0.10%)</title><rect x="91.6854%" y="1333" width="0.0961%" height="15" fill="rgb(240,13,50)" fg:x="5723" fg:w="6"/><text x="91.9354%" y="1343.50"></text></g><g><title>leveldb::crc32c::Value (2 samples, 0.03%)</title><rect x="91.7494%" y="1317" width="0.0320%" height="15" fill="rgb(225,81,14)" fg:x="5727" fg:w="2"/><text x="91.9994%" y="1327.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.03%)</title><rect x="91.7494%" y="1301" width="0.0320%" height="15" fill="rgb(216,182,23)" fg:x="5727" fg:w="2"/><text x="91.9994%" y="1311.50"></text></g><g><title>_mm_crc32_u64 (2 samples, 0.03%)</title><rect x="91.7494%" y="1285" width="0.0320%" height="15" fill="rgb(233,137,19)" fg:x="5727" fg:w="2"/><text x="91.9994%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="91.7815%" y="1349" width="0.0160%" height="15" fill="rgb(242,61,46)" fg:x="5729" fg:w="1"/><text x="92.0315%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="91.7975%" y="1349" width="0.0320%" height="15" fill="rgb(221,168,51)" fg:x="5730" fg:w="2"/><text x="92.0475%" y="1359.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (2 samples, 0.03%)</title><rect x="91.8295%" y="1349" width="0.0320%" height="15" fill="rgb(238,48,15)" fg:x="5732" fg:w="2"/><text x="92.0795%" y="1359.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (4 samples, 0.06%)</title><rect x="91.8616%" y="1349" width="0.0641%" height="15" fill="rgb(216,13,16)" fg:x="5734" fg:w="4"/><text x="92.1116%" y="1359.50"></text></g><g><title>leveldb::ParseInternalKey (2 samples, 0.03%)</title><rect x="91.8936%" y="1333" width="0.0320%" height="15" fill="rgb(223,185,34)" fg:x="5736" fg:w="2"/><text x="92.1436%" y="1343.50"></text></g><g><title>leveldb::Slice::size (1 samples, 0.02%)</title><rect x="91.9096%" y="1317" width="0.0160%" height="15" fill="rgb(228,94,42)" fg:x="5737" fg:w="1"/><text x="92.1596%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::ok (10 samples, 0.16%)</title><rect x="91.7815%" y="1365" width="0.1602%" height="15" fill="rgb(218,166,43)" fg:x="5729" fg:w="10"/><text x="92.0315%" y="1375.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="91.9257%" y="1349" width="0.0160%" height="15" fill="rgb(232,30,50)" fg:x="5738" fg:w="1"/><text x="92.1757%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::status (2 samples, 0.03%)</title><rect x="91.9417%" y="1365" width="0.0320%" height="15" fill="rgb(245,206,45)" fg:x="5739" fg:w="2"/><text x="92.1917%" y="1375.50"></text></g><g><title>leveldb::Status::Status (2 samples, 0.03%)</title><rect x="91.9417%" y="1349" width="0.0320%" height="15" fill="rgb(220,56,22)" fg:x="5739" fg:w="2"/><text x="92.1917%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="91.9737%" y="1365" width="0.0160%" height="15" fill="rgb(239,129,38)" fg:x="5741" fg:w="1"/><text x="92.2237%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="91.9737%" y="1349" width="0.0160%" height="15" fill="rgb(207,68,41)" fg:x="5741" fg:w="1"/><text x="92.2237%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="91.9737%" y="1333" width="0.0160%" height="15" fill="rgb(221,21,7)" fg:x="5741" fg:w="1"/><text x="92.2237%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="91.9737%" y="1317" width="0.0160%" height="15" fill="rgb(240,33,25)" fg:x="5741" fg:w="1"/><text x="92.2237%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="91.9737%" y="1301" width="0.0160%" height="15" fill="rgb(242,119,10)" fg:x="5741" fg:w="1"/><text x="92.2237%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="91.9737%" y="1285" width="0.0160%" height="15" fill="rgb(214,149,40)" fg:x="5741" fg:w="1"/><text x="92.2237%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Add (408 samples, 6.54%)</title><rect x="85.4854%" y="1381" width="6.5364%" height="15" fill="rgb(228,25,36)" fg:x="5336" fg:w="408"/><text x="85.7354%" y="1391.50">leveldb::..</text></g><g><title>value (2 samples, 0.03%)</title><rect x="91.9897%" y="1365" width="0.0320%" height="15" fill="rgb(222,59,15)" fg:x="5742" fg:w="2"/><text x="92.2397%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::value (2 samples, 0.03%)</title><rect x="91.9897%" y="1349" width="0.0320%" height="15" fill="rgb(218,170,0)" fg:x="5742" fg:w="2"/><text x="92.2397%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="92.0218%" y="1381" width="0.0160%" height="15" fill="rgb(232,173,23)" fg:x="5744" fg:w="1"/><text x="92.2718%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (4 samples, 0.06%)</title><rect x="92.0378%" y="1349" width="0.0641%" height="15" fill="rgb(218,116,1)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1333" width="0.0641%" height="15" fill="rgb(207,34,4)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1317" width="0.0641%" height="15" fill="rgb(229,54,52)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1301" width="0.0641%" height="15" fill="rgb(211,86,23)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1285" width="0.0641%" height="15" fill="rgb(254,153,34)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1269" width="0.0641%" height="15" fill="rgb(219,220,14)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1253" width="0.0641%" height="15" fill="rgb(247,8,26)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1237" width="0.0641%" height="15" fill="rgb(213,129,42)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1221" width="0.0641%" height="15" fill="rgb(225,95,41)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1205" width="0.0641%" height="15" fill="rgb(215,134,24)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1189" width="0.0641%" height="15" fill="rgb(235,23,54)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.0378%" y="1173" width="0.0641%" height="15" fill="rgb(229,96,31)" fg:x="5745" fg:w="4"/><text x="92.2878%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.0859%" y="1157" width="0.0160%" height="15" fill="rgb(206,111,12)" fg:x="5748" fg:w="1"/><text x="92.3359%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.0859%" y="1141" width="0.0160%" height="15" fill="rgb(222,177,8)" fg:x="5748" fg:w="1"/><text x="92.3359%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.0859%" y="1125" width="0.0160%" height="15" fill="rgb(251,36,52)" fg:x="5748" fg:w="1"/><text x="92.3359%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (5 samples, 0.08%)</title><rect x="92.0378%" y="1381" width="0.0801%" height="15" fill="rgb(216,182,29)" fg:x="5745" fg:w="5"/><text x="92.2878%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (5 samples, 0.08%)</title><rect x="92.0378%" y="1365" width="0.0801%" height="15" fill="rgb(241,145,50)" fg:x="5745" fg:w="5"/><text x="92.2878%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="92.1019%" y="1349" width="0.0160%" height="15" fill="rgb(231,71,35)" fg:x="5749" fg:w="1"/><text x="92.3519%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="92.1019%" y="1333" width="0.0160%" height="15" fill="rgb(218,22,17)" fg:x="5749" fg:w="1"/><text x="92.3519%" y="1343.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="92.1019%" y="1317" width="0.0160%" height="15" fill="rgb(225,227,6)" fg:x="5749" fg:w="1"/><text x="92.3519%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="92.1019%" y="1301" width="0.0160%" height="15" fill="rgb(224,204,17)" fg:x="5749" fg:w="1"/><text x="92.3519%" y="1311.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.02%)</title><rect x="92.1179%" y="1317" width="0.0160%" height="15" fill="rgb(227,61,28)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1301" width="0.0160%" height="15" fill="rgb(242,148,23)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1285" width="0.0160%" height="15" fill="rgb(237,105,33)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1269" width="0.0160%" height="15" fill="rgb(238,218,40)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1253" width="0.0160%" height="15" fill="rgb(209,126,11)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1237" width="0.0160%" height="15" fill="rgb(245,90,11)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1221" width="0.0160%" height="15" fill="rgb(211,195,10)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1205" width="0.0160%" height="15" fill="rgb(231,45,45)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1189" width="0.0160%" height="15" fill="rgb(246,100,43)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1173" width="0.0160%" height="15" fill="rgb(241,193,8)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.1179%" y="1157" width="0.0160%" height="15" fill="rgb(208,76,19)" fg:x="5750" fg:w="1"/><text x="92.3679%" y="1167.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="92.1339%" y="1317" width="0.0160%" height="15" fill="rgb(223,69,40)" fg:x="5751" fg:w="1"/><text x="92.3839%" y="1327.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (625 samples, 10.01%)</title><rect x="82.1532%" y="1397" width="10.0128%" height="15" fill="rgb(207,120,39)" fg:x="5128" fg:w="625"/><text x="82.4032%" y="1407.50">leveldb::DBImp..</text></g><g><title>value (3 samples, 0.05%)</title><rect x="92.1179%" y="1381" width="0.0481%" height="15" fill="rgb(212,209,28)" fg:x="5750" fg:w="3"/><text x="92.3679%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::value (3 samples, 0.05%)</title><rect x="92.1179%" y="1365" width="0.0481%" height="15" fill="rgb(246,82,29)" fg:x="5750" fg:w="3"/><text x="92.3679%" y="1375.50"></text></g><g><title>value (3 samples, 0.05%)</title><rect x="92.1179%" y="1349" width="0.0481%" height="15" fill="rgb(239,6,40)" fg:x="5750" fg:w="3"/><text x="92.3679%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::value (3 samples, 0.05%)</title><rect x="92.1179%" y="1333" width="0.0481%" height="15" fill="rgb(228,181,35)" fg:x="5750" fg:w="3"/><text x="92.3679%" y="1343.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="92.1500%" y="1317" width="0.0160%" height="15" fill="rgb(238,151,2)" fg:x="5752" fg:w="1"/><text x="92.4000%" y="1327.50"></text></g><g><title>std::atomic&lt;bool&gt;::load (1 samples, 0.02%)</title><rect x="92.1500%" y="1301" width="0.0160%" height="15" fill="rgb(236,94,18)" fg:x="5752" fg:w="1"/><text x="92.4000%" y="1311.50"></text></g><g><title>std::__atomic_base&lt;bool&gt;::load (1 samples, 0.02%)</title><rect x="92.1500%" y="1285" width="0.0160%" height="15" fill="rgb(208,38,14)" fg:x="5752" fg:w="1"/><text x="92.4000%" y="1295.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (686 samples, 10.99%)</title><rect x="81.2079%" y="1413" width="10.9901%" height="15" fill="rgb(234,215,27)" fg:x="5069" fg:w="686"/><text x="81.4579%" y="1423.50">leveldb::DBImpl:..</text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="92.1660%" y="1397" width="0.0320%" height="15" fill="rgb(254,211,53)" fg:x="5753" fg:w="2"/><text x="92.4160%" y="1407.50"></text></g><g><title>[[jbd2]] (2 samples, 0.03%)</title><rect x="92.1980%" y="1221" width="0.0320%" height="15" fill="rgb(216,175,11)" fg:x="5755" fg:w="2"/><text x="92.4480%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.2140%" y="1205" width="0.0160%" height="15" fill="rgb(246,179,26)" fg:x="5756" fg:w="1"/><text x="92.4640%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (8 samples, 0.13%)</title><rect x="92.1980%" y="1381" width="0.1282%" height="15" fill="rgb(249,19,52)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1391.50"></text></g><g><title>__unlink (8 samples, 0.13%)</title><rect x="92.1980%" y="1365" width="0.1282%" height="15" fill="rgb(230,42,52)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1375.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="92.1980%" y="1349" width="0.1282%" height="15" fill="rgb(221,171,0)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1359.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="92.1980%" y="1333" width="0.1282%" height="15" fill="rgb(222,177,40)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1343.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="92.1980%" y="1317" width="0.1282%" height="15" fill="rgb(247,34,16)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1327.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="92.1980%" y="1301" width="0.1282%" height="15" fill="rgb(213,217,37)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1311.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="92.1980%" y="1285" width="0.1282%" height="15" fill="rgb(231,189,24)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1295.50"></text></g><g><title>[[ext4]] (8 samples, 0.13%)</title><rect x="92.1980%" y="1269" width="0.1282%" height="15" fill="rgb(214,22,9)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1279.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="92.1980%" y="1253" width="0.1282%" height="15" fill="rgb(212,70,22)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1263.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="92.1980%" y="1237" width="0.1282%" height="15" fill="rgb(249,64,51)" fg:x="5755" fg:w="8"/><text x="92.4480%" y="1247.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="92.2301%" y="1221" width="0.0961%" height="15" fill="rgb(249,148,20)" fg:x="5757" fg:w="6"/><text x="92.4801%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.2621%" y="1205" width="0.0641%" height="15" fill="rgb(246,46,48)" fg:x="5759" fg:w="4"/><text x="92.5121%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.2621%" y="1189" width="0.0641%" height="15" fill="rgb(217,34,48)" fg:x="5759" fg:w="4"/><text x="92.5121%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3102%" y="1173" width="0.0160%" height="15" fill="rgb(222,45,26)" fg:x="5762" fg:w="1"/><text x="92.5602%" y="1183.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (9 samples, 0.14%)</title><rect x="92.1980%" y="1397" width="0.1442%" height="15" fill="rgb(230,201,36)" fg:x="5755" fg:w="9"/><text x="92.4480%" y="1407.50"></text></g><g><title>leveldb::TableCache::Evict (1 samples, 0.02%)</title><rect x="92.3262%" y="1381" width="0.0160%" height="15" fill="rgb(217,30,43)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1391.50"></text></g><g><title>Erase (1 samples, 0.02%)</title><rect x="92.3262%" y="1365" width="0.0160%" height="15" fill="rgb(230,197,40)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (1 samples, 0.02%)</title><rect x="92.3262%" y="1349" width="0.0160%" height="15" fill="rgb(239,181,18)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (1 samples, 0.02%)</title><rect x="92.3262%" y="1333" width="0.0160%" height="15" fill="rgb(222,60,39)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (1 samples, 0.02%)</title><rect x="92.3262%" y="1317" width="0.0160%" height="15" fill="rgb(210,60,22)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1327.50"></text></g><g><title>leveldb::DeleteEntry (1 samples, 0.02%)</title><rect x="92.3262%" y="1301" width="0.0160%" height="15" fill="rgb(239,213,48)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1311.50"></text></g><g><title>~PosixMmapReadableFile (1 samples, 0.02%)</title><rect x="92.3262%" y="1285" width="0.0160%" height="15" fill="rgb(253,214,23)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (1 samples, 0.02%)</title><rect x="92.3262%" y="1269" width="0.0160%" height="15" fill="rgb(211,98,45)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1279.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="92.3262%" y="1253" width="0.0160%" height="15" fill="rgb(239,130,44)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1237" width="0.0160%" height="15" fill="rgb(222,181,35)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1221" width="0.0160%" height="15" fill="rgb(219,219,49)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1205" width="0.0160%" height="15" fill="rgb(227,161,51)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1189" width="0.0160%" height="15" fill="rgb(239,112,27)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1173" width="0.0160%" height="15" fill="rgb(248,122,18)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1157" width="0.0160%" height="15" fill="rgb(245,130,23)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1141" width="0.0160%" height="15" fill="rgb(211,225,28)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1125" width="0.0160%" height="15" fill="rgb(242,105,44)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1109" width="0.0160%" height="15" fill="rgb(216,183,46)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3262%" y="1093" width="0.0160%" height="15" fill="rgb(227,112,9)" fg:x="5763" fg:w="1"/><text x="92.5762%" y="1103.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="92.3582%" y="1141" width="0.0481%" height="15" fill="rgb(244,21,0)" fg:x="5765" fg:w="3"/><text x="92.6082%" y="1151.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="92.3742%" y="1125" width="0.0320%" height="15" fill="rgb(236,185,14)" fg:x="5766" fg:w="2"/><text x="92.6242%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.3903%" y="1109" width="0.0160%" height="15" fill="rgb(236,170,30)" fg:x="5767" fg:w="1"/><text x="92.6403%" y="1119.50"></text></g><g><title>[[ext4]] (8 samples, 0.13%)</title><rect x="92.3422%" y="1189" width="0.1282%" height="15" fill="rgb(209,198,51)" fg:x="5764" fg:w="8"/><text x="92.5922%" y="1199.50"></text></g><g><title>[[ext4]] (8 samples, 0.13%)</title><rect x="92.3422%" y="1173" width="0.1282%" height="15" fill="rgb(205,171,26)" fg:x="5764" fg:w="8"/><text x="92.5922%" y="1183.50"></text></g><g><title>[[ext4]] (8 samples, 0.13%)</title><rect x="92.3422%" y="1157" width="0.1282%" height="15" fill="rgb(246,41,49)" fg:x="5764" fg:w="8"/><text x="92.5922%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="92.4063%" y="1141" width="0.0641%" height="15" fill="rgb(240,229,12)" fg:x="5768" fg:w="4"/><text x="92.6563%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4223%" y="1125" width="0.0481%" height="15" fill="rgb(212,8,54)" fg:x="5769" fg:w="3"/><text x="92.6723%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4223%" y="1109" width="0.0481%" height="15" fill="rgb(230,114,13)" fg:x="5769" fg:w="3"/><text x="92.6723%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4223%" y="1093" width="0.0481%" height="15" fill="rgb(229,130,28)" fg:x="5769" fg:w="3"/><text x="92.6723%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4223%" y="1077" width="0.0481%" height="15" fill="rgb(206,139,15)" fg:x="5769" fg:w="3"/><text x="92.6723%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4223%" y="1061" width="0.0481%" height="15" fill="rgb(241,188,35)" fg:x="5769" fg:w="3"/><text x="92.6723%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4223%" y="1045" width="0.0481%" height="15" fill="rgb(208,224,26)" fg:x="5769" fg:w="3"/><text x="92.6723%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4223%" y="1029" width="0.0481%" height="15" fill="rgb(251,131,28)" fg:x="5769" fg:w="3"/><text x="92.6723%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4223%" y="1013" width="0.0481%" height="15" fill="rgb(208,153,1)" fg:x="5769" fg:w="3"/><text x="92.6723%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4223%" y="997" width="0.0481%" height="15" fill="rgb(234,33,36)" fg:x="5769" fg:w="3"/><text x="92.6723%" y="1007.50"></text></g><g><title>Sync (9 samples, 0.14%)</title><rect x="92.3422%" y="1365" width="0.1442%" height="15" fill="rgb(246,42,29)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (9 samples, 0.14%)</title><rect x="92.3422%" y="1349" width="0.1442%" height="15" fill="rgb(251,114,16)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1359.50"></text></g><g><title>fdatasync (9 samples, 0.14%)</title><rect x="92.3422%" y="1333" width="0.1442%" height="15" fill="rgb(233,13,38)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1343.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="92.3422%" y="1317" width="0.1442%" height="15" fill="rgb(247,120,19)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1327.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="92.3422%" y="1301" width="0.1442%" height="15" fill="rgb(205,11,16)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1311.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="92.3422%" y="1285" width="0.1442%" height="15" fill="rgb(228,185,19)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1295.50"></text></g><g><title>[[ext4]] (9 samples, 0.14%)</title><rect x="92.3422%" y="1269" width="0.1442%" height="15" fill="rgb(239,88,52)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1279.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="92.3422%" y="1253" width="0.1442%" height="15" fill="rgb(219,23,1)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1263.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="92.3422%" y="1237" width="0.1442%" height="15" fill="rgb(253,177,16)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1247.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="92.3422%" y="1221" width="0.1442%" height="15" fill="rgb(225,150,40)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1231.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="92.3422%" y="1205" width="0.1442%" height="15" fill="rgb(208,108,30)" fg:x="5764" fg:w="9"/><text x="92.5922%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.4704%" y="1189" width="0.0160%" height="15" fill="rgb(214,122,4)" fg:x="5772" fg:w="1"/><text x="92.7204%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.4704%" y="1173" width="0.0160%" height="15" fill="rgb(229,74,37)" fg:x="5772" fg:w="1"/><text x="92.7204%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.4704%" y="1157" width="0.0160%" height="15" fill="rgb(233,61,41)" fg:x="5772" fg:w="1"/><text x="92.7204%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.4704%" y="1141" width="0.0160%" height="15" fill="rgb(238,191,5)" fg:x="5772" fg:w="1"/><text x="92.7204%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.4704%" y="1125" width="0.0160%" height="15" fill="rgb(233,78,24)" fg:x="5772" fg:w="1"/><text x="92.7204%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.4704%" y="1109" width="0.0160%" height="15" fill="rgb(211,142,8)" fg:x="5772" fg:w="1"/><text x="92.7204%" y="1119.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.02%)</title><rect x="92.4864%" y="1365" width="0.0160%" height="15" fill="rgb(253,38,53)" fg:x="5773" fg:w="1"/><text x="92.7364%" y="1375.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="92.5024%" y="1365" width="0.0160%" height="15" fill="rgb(234,63,51)" fg:x="5774" fg:w="1"/><text x="92.7524%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="92.5024%" y="1349" width="0.0160%" height="15" fill="rgb(205,23,31)" fg:x="5774" fg:w="1"/><text x="92.7524%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="92.5024%" y="1333" width="0.0160%" height="15" fill="rgb(210,184,50)" fg:x="5774" fg:w="1"/><text x="92.7524%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="92.5024%" y="1317" width="0.0160%" height="15" fill="rgb(222,112,26)" fg:x="5774" fg:w="1"/><text x="92.7524%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="92.5024%" y="1301" width="0.0160%" height="15" fill="rgb(250,98,18)" fg:x="5774" fg:w="1"/><text x="92.7524%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="92.5024%" y="1285" width="0.0160%" height="15" fill="rgb(250,34,12)" fg:x="5774" fg:w="1"/><text x="92.7524%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="92.5024%" y="1269" width="0.0160%" height="15" fill="rgb(236,141,30)" fg:x="5774" fg:w="1"/><text x="92.7524%" y="1279.50"></text></g><g><title>leveldb::MemTableIterator::key (1 samples, 0.02%)</title><rect x="92.5184%" y="1365" width="0.0160%" height="15" fill="rgb(246,134,38)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1375.50"></text></g><g><title>leveldb::MemTableIterator::key (1 samples, 0.02%)</title><rect x="92.5184%" y="1349" width="0.0160%" height="15" fill="rgb(240,114,4)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1333" width="0.0160%" height="15" fill="rgb(243,113,39)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1317" width="0.0160%" height="15" fill="rgb(239,215,4)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1301" width="0.0160%" height="15" fill="rgb(236,229,45)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1285" width="0.0160%" height="15" fill="rgb(242,2,6)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1269" width="0.0160%" height="15" fill="rgb(239,108,21)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1253" width="0.0160%" height="15" fill="rgb(215,168,34)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1237" width="0.0160%" height="15" fill="rgb(238,31,17)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1221" width="0.0160%" height="15" fill="rgb(220,133,11)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1205" width="0.0160%" height="15" fill="rgb(212,158,23)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1189" width="0.0160%" height="15" fill="rgb(223,172,7)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5184%" y="1173" width="0.0160%" height="15" fill="rgb(244,3,52)" fg:x="5775" fg:w="1"/><text x="92.7684%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="92.5344%" y="1349" width="0.0320%" height="15" fill="rgb(207,69,27)" fg:x="5776" fg:w="2"/><text x="92.7844%" y="1359.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="92.8709%" y="1317" width="0.0160%" height="15" fill="rgb(213,136,45)" fg:x="5797" fg:w="1"/><text x="93.1209%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="92.8869%" y="1317" width="0.0160%" height="15" fill="rgb(218,79,17)" fg:x="5798" fg:w="1"/><text x="93.1369%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (33 samples, 0.53%)</title><rect x="92.5985%" y="1333" width="0.5287%" height="15" fill="rgb(216,106,36)" fg:x="5780" fg:w="33"/><text x="92.8485%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (14 samples, 0.22%)</title><rect x="92.9029%" y="1317" width="0.2243%" height="15" fill="rgb(251,27,45)" fg:x="5799" fg:w="14"/><text x="93.1529%" y="1327.50"></text></g><g><title>leveldb::ExtractUserKey (3 samples, 0.05%)</title><rect x="93.0791%" y="1301" width="0.0481%" height="15" fill="rgb(232,21,34)" fg:x="5810" fg:w="3"/><text x="93.3291%" y="1311.50"></text></g><g><title>leveldb::Slice::operator[] (1 samples, 0.02%)</title><rect x="93.1272%" y="1333" width="0.0160%" height="15" fill="rgb(249,191,16)" fg:x="5813" fg:w="1"/><text x="93.3772%" y="1343.50"></text></g><g><title>leveldb::operator== (1 samples, 0.02%)</title><rect x="93.1432%" y="1333" width="0.0160%" height="15" fill="rgb(224,88,20)" fg:x="5814" fg:w="1"/><text x="93.3932%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="93.1432%" y="1317" width="0.0160%" height="15" fill="rgb(237,93,27)" fg:x="5814" fg:w="1"/><text x="93.3932%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="93.1592%" y="1301" width="0.0160%" height="15" fill="rgb(226,198,48)" fg:x="5815" fg:w="1"/><text x="93.4092%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="93.1592%" y="1285" width="0.0160%" height="15" fill="rgb(207,162,53)" fg:x="5815" fg:w="1"/><text x="93.4092%" y="1295.50"></text></g><g><title>leveldb::BlockBuilder::Add (39 samples, 0.62%)</title><rect x="92.5665%" y="1349" width="0.6248%" height="15" fill="rgb(207,169,9)" fg:x="5778" fg:w="39"/><text x="92.8165%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.03%)</title><rect x="93.1592%" y="1333" width="0.0320%" height="15" fill="rgb(224,166,46)" fg:x="5815" fg:w="2"/><text x="93.4092%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="93.1592%" y="1317" width="0.0320%" height="15" fill="rgb(233,26,6)" fg:x="5815" fg:w="2"/><text x="93.4092%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="93.1753%" y="1301" width="0.0160%" height="15" fill="rgb(218,106,45)" fg:x="5816" fg:w="1"/><text x="93.4253%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="93.1753%" y="1285" width="0.0160%" height="15" fill="rgb(240,217,4)" fg:x="5816" fg:w="1"/><text x="93.4253%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="93.1753%" y="1269" width="0.0160%" height="15" fill="rgb(246,171,10)" fg:x="5816" fg:w="1"/><text x="93.4253%" y="1279.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.02%)</title><rect x="93.1913%" y="1349" width="0.0160%" height="15" fill="rgb(223,197,30)" fg:x="5817" fg:w="1"/><text x="93.4413%" y="1359.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="93.2073%" y="1349" width="0.0160%" height="15" fill="rgb(207,92,16)" fg:x="5818" fg:w="1"/><text x="93.4573%" y="1359.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="93.2233%" y="1349" width="0.0160%" height="15" fill="rgb(211,6,44)" fg:x="5819" fg:w="1"/><text x="93.4733%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (3 samples, 0.05%)</title><rect x="93.2393%" y="1285" width="0.0481%" height="15" fill="rgb(219,139,2)" fg:x="5820" fg:w="3"/><text x="93.4893%" y="1295.50"></text></g><g><title>BloomHash (1 samples, 0.02%)</title><rect x="93.2714%" y="1269" width="0.0160%" height="15" fill="rgb(224,103,21)" fg:x="5822" fg:w="1"/><text x="93.5214%" y="1279.50"></text></g><g><title>CreateFilter (4 samples, 0.06%)</title><rect x="93.2393%" y="1317" width="0.0641%" height="15" fill="rgb(254,110,48)" fg:x="5820" fg:w="4"/><text x="93.4893%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (4 samples, 0.06%)</title><rect x="93.2393%" y="1301" width="0.0641%" height="15" fill="rgb(212,88,19)" fg:x="5820" fg:w="4"/><text x="93.4893%" y="1311.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="93.2874%" y="1285" width="0.0160%" height="15" fill="rgb(248,103,6)" fg:x="5823" fg:w="1"/><text x="93.5374%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (4 samples, 0.06%)</title><rect x="93.3034%" y="1317" width="0.0641%" height="15" fill="rgb(214,53,46)" fg:x="5824" fg:w="4"/><text x="93.5534%" y="1327.50"></text></g><g><title>leveldb::Hash (4 samples, 0.06%)</title><rect x="93.3675%" y="1317" width="0.0641%" height="15" fill="rgb(236,190,24)" fg:x="5828" fg:w="4"/><text x="93.6175%" y="1327.50"></text></g><g><title>leveldb::InternalFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="93.4316%" y="1317" width="0.0160%" height="15" fill="rgb(254,58,28)" fg:x="5832" fg:w="1"/><text x="93.6816%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (14 samples, 0.22%)</title><rect x="93.2393%" y="1349" width="0.2243%" height="15" fill="rgb(243,63,27)" fg:x="5820" fg:w="14"/><text x="93.4893%" y="1359.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (14 samples, 0.22%)</title><rect x="93.2393%" y="1333" width="0.2243%" height="15" fill="rgb(206,81,20)" fg:x="5820" fg:w="14"/><text x="93.4893%" y="1343.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="93.4476%" y="1317" width="0.0160%" height="15" fill="rgb(252,69,51)" fg:x="5833" fg:w="1"/><text x="93.6976%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Flush (1 samples, 0.02%)</title><rect x="93.4476%" y="1301" width="0.0160%" height="15" fill="rgb(222,213,4)" fg:x="5833" fg:w="1"/><text x="93.6976%" y="1311.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="93.4476%" y="1285" width="0.0160%" height="15" fill="rgb(226,198,12)" fg:x="5833" fg:w="1"/><text x="93.6976%" y="1295.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="93.4476%" y="1269" width="0.0160%" height="15" fill="rgb(248,115,11)" fg:x="5833" fg:w="1"/><text x="93.6976%" y="1279.50"></text></g><g><title>leveldb::BuildTable (2 samples, 0.03%)</title><rect x="93.4797%" y="1333" width="0.0320%" height="15" fill="rgb(221,148,54)" fg:x="5835" fg:w="2"/><text x="93.7297%" y="1343.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (2 samples, 0.03%)</title><rect x="93.4797%" y="1317" width="0.0320%" height="15" fill="rgb(214,209,51)" fg:x="5835" fg:w="2"/><text x="93.7297%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (2 samples, 0.03%)</title><rect x="93.4797%" y="1301" width="0.0320%" height="15" fill="rgb(249,116,53)" fg:x="5835" fg:w="2"/><text x="93.7297%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2 samples, 0.03%)</title><rect x="93.4797%" y="1285" width="0.0320%" height="15" fill="rgb(248,170,1)" fg:x="5835" fg:w="2"/><text x="93.7297%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (1 samples, 0.02%)</title><rect x="93.4957%" y="1269" width="0.0160%" height="15" fill="rgb(244,105,10)" fg:x="5836" fg:w="1"/><text x="93.7457%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.06%)</title><rect x="93.4636%" y="1349" width="0.0641%" height="15" fill="rgb(229,100,5)" fg:x="5834" fg:w="4"/><text x="93.7136%" y="1359.50"></text></g><g><title>leveldb::MemTableIterator::Next (1 samples, 0.02%)</title><rect x="93.5117%" y="1333" width="0.0160%" height="15" fill="rgb(233,221,39)" fg:x="5837" fg:w="1"/><text x="93.7617%" y="1343.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (1 samples, 0.02%)</title><rect x="93.5117%" y="1317" width="0.0160%" height="15" fill="rgb(233,88,21)" fg:x="5837" fg:w="1"/><text x="93.7617%" y="1327.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1 samples, 0.02%)</title><rect x="93.5117%" y="1301" width="0.0160%" height="15" fill="rgb(206,13,0)" fg:x="5837" fg:w="1"/><text x="93.7617%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="93.5918%" y="1301" width="0.0320%" height="15" fill="rgb(242,15,35)" fg:x="5842" fg:w="2"/><text x="93.8418%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (2 samples, 0.03%)</title><rect x="93.5918%" y="1285" width="0.0320%" height="15" fill="rgb(247,142,41)" fg:x="5842" fg:w="2"/><text x="93.8418%" y="1295.50"></text></g><g><title>leveldb::PutVarint32 (8 samples, 0.13%)</title><rect x="93.5277%" y="1349" width="0.1282%" height="15" fill="rgb(245,51,29)" fg:x="5838" fg:w="8"/><text x="93.7777%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (4 samples, 0.06%)</title><rect x="93.5918%" y="1333" width="0.0641%" height="15" fill="rgb(228,209,43)" fg:x="5842" fg:w="4"/><text x="93.8418%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4 samples, 0.06%)</title><rect x="93.5918%" y="1317" width="0.0641%" height="15" fill="rgb(233,185,9)" fg:x="5842" fg:w="4"/><text x="93.8418%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (2 samples, 0.03%)</title><rect x="93.6238%" y="1301" width="0.0320%" height="15" fill="rgb(226,93,0)" fg:x="5844" fg:w="2"/><text x="93.8738%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="93.6399%" y="1285" width="0.0160%" height="15" fill="rgb(245,194,43)" fg:x="5845" fg:w="1"/><text x="93.8899%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="93.6399%" y="1269" width="0.0160%" height="15" fill="rgb(211,145,34)" fg:x="5845" fg:w="1"/><text x="93.8899%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="93.6559%" y="1349" width="0.0160%" height="15" fill="rgb(231,228,28)" fg:x="5846" fg:w="1"/><text x="93.9059%" y="1359.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="93.7200%" y="1093" width="0.0160%" height="15" fill="rgb(236,149,4)" fg:x="5850" fg:w="1"/><text x="93.9700%" y="1103.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="93.7200%" y="1109" width="0.0320%" height="15" fill="rgb(234,114,38)" fg:x="5850" fg:w="2"/><text x="93.9700%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7360%" y="1093" width="0.0160%" height="15" fill="rgb(246,132,51)" fg:x="5851" fg:w="1"/><text x="93.9860%" y="1103.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="93.7200%" y="1141" width="0.0481%" height="15" fill="rgb(251,137,22)" fg:x="5850" fg:w="3"/><text x="93.9700%" y="1151.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="93.7200%" y="1125" width="0.0481%" height="15" fill="rgb(243,59,52)" fg:x="5850" fg:w="3"/><text x="93.9700%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7520%" y="1109" width="0.0160%" height="15" fill="rgb(239,56,28)" fg:x="5852" fg:w="1"/><text x="94.0020%" y="1119.50"></text></g><g><title>[[ext4]] (8 samples, 0.13%)</title><rect x="93.7039%" y="1157" width="0.1282%" height="15" fill="rgb(218,168,27)" fg:x="5849" fg:w="8"/><text x="93.9539%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="93.7680%" y="1141" width="0.0641%" height="15" fill="rgb(232,165,11)" fg:x="5853" fg:w="4"/><text x="94.0180%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.8001%" y="1125" width="0.0320%" height="15" fill="rgb(253,55,41)" fg:x="5855" fg:w="2"/><text x="94.0501%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.8001%" y="1109" width="0.0320%" height="15" fill="rgb(233,206,24)" fg:x="5855" fg:w="2"/><text x="94.0501%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.8001%" y="1093" width="0.0320%" height="15" fill="rgb(220,199,8)" fg:x="5855" fg:w="2"/><text x="94.0501%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8161%" y="1077" width="0.0160%" height="15" fill="rgb(254,65,26)" fg:x="5856" fg:w="1"/><text x="94.0661%" y="1087.50"></text></g><g><title>[[ext4]] (17 samples, 0.27%)</title><rect x="93.7039%" y="1173" width="0.2723%" height="15" fill="rgb(253,102,23)" fg:x="5849" fg:w="17"/><text x="93.9539%" y="1183.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="93.8321%" y="1157" width="0.1442%" height="15" fill="rgb(231,103,35)" fg:x="5857" fg:w="9"/><text x="94.0821%" y="1167.50"></text></g><g><title>[unknown] (9 samples, 0.14%)</title><rect x="93.8321%" y="1141" width="0.1442%" height="15" fill="rgb(238,26,10)" fg:x="5857" fg:w="9"/><text x="94.0821%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="93.8641%" y="1125" width="0.1121%" height="15" fill="rgb(234,191,34)" fg:x="5859" fg:w="7"/><text x="94.1141%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="93.8962%" y="1109" width="0.0801%" height="15" fill="rgb(206,210,9)" fg:x="5861" fg:w="5"/><text x="94.1462%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.9282%" y="1093" width="0.0481%" height="15" fill="rgb(219,155,3)" fg:x="5863" fg:w="3"/><text x="94.1782%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9603%" y="1077" width="0.0160%" height="15" fill="rgb(221,62,52)" fg:x="5865" fg:w="1"/><text x="94.2103%" y="1087.50"></text></g><g><title>[[ext4]] (20 samples, 0.32%)</title><rect x="93.6879%" y="1205" width="0.3204%" height="15" fill="rgb(215,197,36)" fg:x="5848" fg:w="20"/><text x="93.9379%" y="1215.50"></text></g><g><title>[unknown] (20 samples, 0.32%)</title><rect x="93.6879%" y="1189" width="0.3204%" height="15" fill="rgb(226,222,6)" fg:x="5848" fg:w="20"/><text x="93.9379%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.9763%" y="1173" width="0.0320%" height="15" fill="rgb(215,58,28)" fg:x="5866" fg:w="2"/><text x="94.2263%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.9763%" y="1157" width="0.0320%" height="15" fill="rgb(212,148,2)" fg:x="5866" fg:w="2"/><text x="94.2263%" y="1167.50"></text></g><g><title>Flush (23 samples, 0.37%)</title><rect x="93.6719%" y="1333" width="0.3685%" height="15" fill="rgb(208,21,42)" fg:x="5847" fg:w="23"/><text x="93.9219%" y="1343.50"></text></g><g><title>FlushBuffer (23 samples, 0.37%)</title><rect x="93.6719%" y="1317" width="0.3685%" height="15" fill="rgb(209,107,26)" fg:x="5847" fg:w="23"/><text x="93.9219%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (23 samples, 0.37%)</title><rect x="93.6719%" y="1301" width="0.3685%" height="15" fill="rgb(254,60,47)" fg:x="5847" fg:w="23"/><text x="93.9219%" y="1311.50"></text></g><g><title>__GI___libc_write (23 samples, 0.37%)</title><rect x="93.6719%" y="1285" width="0.3685%" height="15" fill="rgb(207,226,45)" fg:x="5847" fg:w="23"/><text x="93.9219%" y="1295.50"></text></g><g><title>[unknown] (23 samples, 0.37%)</title><rect x="93.6719%" y="1269" width="0.3685%" height="15" fill="rgb(223,124,22)" fg:x="5847" fg:w="23"/><text x="93.9219%" y="1279.50"></text></g><g><title>[unknown] (22 samples, 0.35%)</title><rect x="93.6879%" y="1253" width="0.3525%" height="15" fill="rgb(240,162,13)" fg:x="5848" fg:w="22"/><text x="93.9379%" y="1263.50"></text></g><g><title>[unknown] (22 samples, 0.35%)</title><rect x="93.6879%" y="1237" width="0.3525%" height="15" fill="rgb(244,199,31)" fg:x="5848" fg:w="22"/><text x="93.9379%" y="1247.50"></text></g><g><title>[unknown] (22 samples, 0.35%)</title><rect x="93.6879%" y="1221" width="0.3525%" height="15" fill="rgb(207,92,16)" fg:x="5848" fg:w="22"/><text x="93.9379%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="94.0083%" y="1205" width="0.0320%" height="15" fill="rgb(215,31,19)" fg:x="5868" fg:w="2"/><text x="94.2583%" y="1215.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="94.0404%" y="1333" width="0.0160%" height="15" fill="rgb(245,118,14)" fg:x="5870" fg:w="1"/><text x="94.2904%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (96 samples, 1.54%)</title><rect x="92.5344%" y="1365" width="1.5380%" height="15" fill="rgb(248,12,46)" fg:x="5776" fg:w="96"/><text x="92.7844%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Flush (25 samples, 0.40%)</title><rect x="93.6719%" y="1349" width="0.4005%" height="15" fill="rgb(209,119,0)" fg:x="5847" fg:w="25"/><text x="93.9219%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::ok (1 samples, 0.02%)</title><rect x="94.0564%" y="1333" width="0.0160%" height="15" fill="rgb(254,51,44)" fg:x="5871" fg:w="1"/><text x="94.3064%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="94.0564%" y="1317" width="0.0160%" height="15" fill="rgb(253,182,35)" fg:x="5871" fg:w="1"/><text x="94.3064%" y="1327.50"></text></g><g><title>BackgroundThreadEntryPoint (804 samples, 12.88%)</title><rect x="81.2079%" y="1461" width="12.8805%" height="15" fill="rgb(205,198,39)" fg:x="5069" fg:w="804"/><text x="81.4579%" y="1471.50">BackgroundThreadEnt..</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (804 samples, 12.88%)</title><rect x="81.2079%" y="1445" width="12.8805%" height="15" fill="rgb(251,175,48)" fg:x="5069" fg:w="804"/><text x="81.4579%" y="1455.50">leveldb::(anonymous..</text></g><g><title>leveldb::DBImpl::BackgroundCall (804 samples, 12.88%)</title><rect x="81.2079%" y="1429" width="12.8805%" height="15" fill="rgb(239,38,17)" fg:x="5069" fg:w="804"/><text x="81.4579%" y="1439.50">leveldb::DBImpl::Ba..</text></g><g><title>leveldb::DBImpl::CompactMemTable (118 samples, 1.89%)</title><rect x="92.1980%" y="1413" width="1.8904%" height="15" fill="rgb(212,101,8)" fg:x="5755" fg:w="118"/><text x="92.4480%" y="1423.50">l..</text></g><g><title>leveldb::DBImpl::WriteLevel0Table (109 samples, 1.75%)</title><rect x="92.3422%" y="1397" width="1.7462%" height="15" fill="rgb(228,35,17)" fg:x="5764" fg:w="109"/><text x="92.5922%" y="1407.50"></text></g><g><title>leveldb::BuildTable (109 samples, 1.75%)</title><rect x="92.3422%" y="1381" width="1.7462%" height="15" fill="rgb(214,95,8)" fg:x="5764" fg:w="109"/><text x="92.5922%" y="1391.50"></text></g><g><title>leveldb::TableCache::NewIterator (1 samples, 0.02%)</title><rect x="94.0724%" y="1365" width="0.0160%" height="15" fill="rgb(210,176,35)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1375.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.02%)</title><rect x="94.0724%" y="1349" width="0.0160%" height="15" fill="rgb(226,4,3)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewRandomAccessFile (1 samples, 0.02%)</title><rect x="94.0724%" y="1333" width="0.0160%" height="15" fill="rgb(232,133,14)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1343.50"></text></g><g><title>__mmap (1 samples, 0.02%)</title><rect x="94.0724%" y="1317" width="0.0160%" height="15" fill="rgb(250,191,8)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0724%" y="1301" width="0.0160%" height="15" fill="rgb(213,12,45)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0724%" y="1285" width="0.0160%" height="15" fill="rgb(233,78,26)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0724%" y="1269" width="0.0160%" height="15" fill="rgb(245,222,11)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0724%" y="1253" width="0.0160%" height="15" fill="rgb(216,174,12)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0724%" y="1237" width="0.0160%" height="15" fill="rgb(213,15,9)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0724%" y="1221" width="0.0160%" height="15" fill="rgb(238,103,32)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0724%" y="1205" width="0.0160%" height="15" fill="rgb(245,85,15)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0724%" y="1189" width="0.0160%" height="15" fill="rgb(254,204,5)" fg:x="5872" fg:w="1"/><text x="94.3224%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int&gt; (1 samples, 0.02%)</title><rect x="94.0884%" y="1365" width="0.0160%" height="15" fill="rgb(231,178,15)" fg:x="5873" fg:w="1"/><text x="94.3384%" y="1375.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.02%)</title><rect x="94.0884%" y="1349" width="0.0160%" height="15" fill="rgb(248,151,3)" fg:x="5873" fg:w="1"/><text x="94.3384%" y="1359.50"></text></g><g><title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream (1 samples, 0.02%)</title><rect x="94.0884%" y="1333" width="0.0160%" height="15" fill="rgb(250,139,13)" fg:x="5873" fg:w="1"/><text x="94.3384%" y="1343.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.02%)</title><rect x="94.0884%" y="1317" width="0.0160%" height="15" fill="rgb(243,107,53)" fg:x="5873" fg:w="1"/><text x="94.3384%" y="1327.50"></text></g><g><title>std::locale::operator= (1 samples, 0.02%)</title><rect x="94.0884%" y="1301" width="0.0160%" height="15" fill="rgb(232,81,15)" fg:x="5873" fg:w="1"/><text x="94.3384%" y="1311.50"></text></g><g><title>__clone (814 samples, 13.04%)</title><rect x="81.0798%" y="1509" width="13.0407%" height="15" fill="rgb(225,187,48)" fg:x="5061" fg:w="814"/><text x="81.3298%" y="1519.50">__clone</text></g><g><title>start_thread (814 samples, 13.04%)</title><rect x="81.0798%" y="1493" width="13.0407%" height="15" fill="rgb(205,116,12)" fg:x="5061" fg:w="814"/><text x="81.3298%" y="1503.50">start_thread</text></g><g><title>execute_native_thread_routine (806 samples, 12.91%)</title><rect x="81.2079%" y="1477" width="12.9125%" height="15" fill="rgb(220,222,31)" fg:x="5069" fg:w="806"/><text x="81.4579%" y="1487.50">execute_native_thre..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;CCheckQueue&lt;CScriptCheck&gt;::CCheckQueue(unsigned int, int)::{lambda()#1}&gt; &gt; &gt;::_M_run (2 samples, 0.03%)</title><rect x="94.0884%" y="1461" width="0.0320%" height="15" fill="rgb(233,187,49)" fg:x="5873" fg:w="2"/><text x="94.3384%" y="1471.50"></text></g><g><title>std::thread::_Invoker&lt;std::tuple&lt;CCheckQueue&lt;CScriptCheck&gt;::CCheckQueue(unsigned int, int)::{lambda()#1}&gt; &gt;::operator (2 samples, 0.03%)</title><rect x="94.0884%" y="1445" width="0.0320%" height="15" fill="rgb(211,168,53)" fg:x="5873" fg:w="2"/><text x="94.3384%" y="1455.50"></text></g><g><title>void std::thread::_Invoker&lt;std::tuple&lt;CCheckQueue&lt;CScriptCheck&gt;::CCheckQueue(unsigned int, int)::{lambda()#1}&gt; &gt;::_M_invoke&lt;0ul&gt; (2 samples, 0.03%)</title><rect x="94.0884%" y="1429" width="0.0320%" height="15" fill="rgb(206,160,16)" fg:x="5873" fg:w="2"/><text x="94.3384%" y="1439.50"></text></g><g><title>std::__invoke_result&lt;CCheckQueue&lt;CScriptCheck&gt;::CCheckQueue(unsigned int, int)::{lambda()#1}&gt;::type std::__invoke&lt;CCheckQueue&lt;CScriptCheck&gt;::CCheckQueue(unsigned int, int)::{lambda()#1}&gt; (2 samples, 0.03%)</title><rect x="94.0884%" y="1413" width="0.0320%" height="15" fill="rgb(254,164,13)" fg:x="5873" fg:w="2"/><text x="94.3384%" y="1423.50"></text></g><g><title>void std::__invoke_impl&lt;void, CCheckQueue&lt;CScriptCheck&gt;::CCheckQueue(unsigned int, int)::{lambda()#1}&gt; (2 samples, 0.03%)</title><rect x="94.0884%" y="1397" width="0.0320%" height="15" fill="rgb(229,45,30)" fg:x="5873" fg:w="2"/><text x="94.3384%" y="1407.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::CCheckQueue (2 samples, 0.03%)</title><rect x="94.0884%" y="1381" width="0.0320%" height="15" fill="rgb(237,32,10)" fg:x="5873" fg:w="2"/><text x="94.3384%" y="1391.50"></text></g><g><title>util::ThreadRename (1 samples, 0.02%)</title><rect x="94.1045%" y="1365" width="0.0160%" height="15" fill="rgb(251,20,47)" fg:x="5874" fg:w="1"/><text x="94.3545%" y="1375.50"></text></g><g><title>util::ThreadRename (1 samples, 0.02%)</title><rect x="94.1045%" y="1349" width="0.0160%" height="15" fill="rgb(251,116,12)" fg:x="5874" fg:w="1"/><text x="94.3545%" y="1359.50"></text></g><g><title>__GI___prctl_time64 (1 samples, 0.02%)</title><rect x="94.1045%" y="1333" width="0.0160%" height="15" fill="rgb(214,227,27)" fg:x="5874" fg:w="1"/><text x="94.3545%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1045%" y="1317" width="0.0160%" height="15" fill="rgb(248,10,53)" fg:x="5874" fg:w="1"/><text x="94.3545%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1045%" y="1301" width="0.0160%" height="15" fill="rgb(221,176,25)" fg:x="5874" fg:w="1"/><text x="94.3545%" y="1311.50"></text></g><g><title>CompleteChainstateInitialization (1 samples, 0.02%)</title><rect x="94.1205%" y="1381" width="0.0160%" height="15" fill="rgb(205,70,46)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1391.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (1 samples, 0.02%)</title><rect x="94.1205%" y="1365" width="0.0160%" height="15" fill="rgb(217,45,38)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1375.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (1 samples, 0.02%)</title><rect x="94.1205%" y="1349" width="0.0160%" height="15" fill="rgb(243,6,54)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1359.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.02%)</title><rect x="94.1205%" y="1333" width="0.0160%" height="15" fill="rgb(242,76,23)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1343.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.02%)</title><rect x="94.1205%" y="1317" width="0.0160%" height="15" fill="rgb(239,166,0)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1327.50"></text></g><g><title>leveldb::DBImpl::Recover (1 samples, 0.02%)</title><rect x="94.1205%" y="1301" width="0.0160%" height="15" fill="rgb(238,174,32)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1311.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (1 samples, 0.02%)</title><rect x="94.1205%" y="1285" width="0.0160%" height="15" fill="rgb(238,124,44)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1295.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="94.1205%" y="1269" width="0.0160%" height="15" fill="rgb(206,185,9)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1279.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="94.1205%" y="1253" width="0.0160%" height="15" fill="rgb(215,157,17)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1205%" y="1237" width="0.0160%" height="15" fill="rgb(251,17,29)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1205%" y="1221" width="0.0160%" height="15" fill="rgb(227,113,27)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1205%" y="1205" width="0.0160%" height="15" fill="rgb(217,226,24)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1205%" y="1189" width="0.0160%" height="15" fill="rgb(251,99,38)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1205%" y="1173" width="0.0160%" height="15" fill="rgb(231,147,19)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1205%" y="1157" width="0.0160%" height="15" fill="rgb(230,86,8)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1205%" y="1141" width="0.0160%" height="15" fill="rgb(237,159,39)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1205%" y="1125" width="0.0160%" height="15" fill="rgb(247,179,47)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1205%" y="1109" width="0.0160%" height="15" fill="rgb(253,152,26)" fg:x="5875" fg:w="1"/><text x="94.3705%" y="1119.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (2 samples, 0.03%)</title><rect x="94.1365%" y="1285" width="0.0320%" height="15" fill="rgb(222,211,15)" fg:x="5876" fg:w="2"/><text x="94.3865%" y="1295.50"></text></g><g><title>CheckProofOfWorkImpl (4 samples, 0.06%)</title><rect x="94.1365%" y="1301" width="0.0641%" height="15" fill="rgb(236,193,6)" fg:x="5876" fg:w="4"/><text x="94.3865%" y="1311.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (2 samples, 0.03%)</title><rect x="94.1685%" y="1285" width="0.0320%" height="15" fill="rgb(226,206,10)" fg:x="5878" fg:w="2"/><text x="94.4185%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (2 samples, 0.03%)</title><rect x="94.2006%" y="1301" width="0.0320%" height="15" fill="rgb(213,125,22)" fg:x="5880" fg:w="2"/><text x="94.4506%" y="1311.50"></text></g><g><title>Next (2 samples, 0.03%)</title><rect x="94.2006%" y="1285" width="0.0320%" height="15" fill="rgb(221,66,28)" fg:x="5880" fg:w="2"/><text x="94.4506%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.03%)</title><rect x="94.2006%" y="1269" width="0.0320%" height="15" fill="rgb(222,84,53)" fg:x="5880" fg:w="2"/><text x="94.4506%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (2 samples, 0.03%)</title><rect x="94.2006%" y="1253" width="0.0320%" height="15" fill="rgb(243,50,15)" fg:x="5880" fg:w="2"/><text x="94.4506%" y="1263.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (7 samples, 0.11%)</title><rect x="94.1365%" y="1317" width="0.1121%" height="15" fill="rgb(208,184,23)" fg:x="5876" fg:w="7"/><text x="94.3865%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.02%)</title><rect x="94.2326%" y="1301" width="0.0160%" height="15" fill="rgb(221,83,2)" fg:x="5882" fg:w="1"/><text x="94.4826%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="94.2326%" y="1285" width="0.0160%" height="15" fill="rgb(236,53,24)" fg:x="5882" fg:w="1"/><text x="94.4826%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="94.2326%" y="1269" width="0.0160%" height="15" fill="rgb(244,171,29)" fg:x="5882" fg:w="1"/><text x="94.4826%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="94.2326%" y="1253" width="0.0160%" height="15" fill="rgb(205,19,11)" fg:x="5882" fg:w="1"/><text x="94.4826%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="94.2326%" y="1237" width="0.0160%" height="15" fill="rgb(207,108,29)" fg:x="5882" fg:w="1"/><text x="94.4826%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="94.2326%" y="1221" width="0.0160%" height="15" fill="rgb(236,215,43)" fg:x="5882" fg:w="1"/><text x="94.4826%" y="1231.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="94.2326%" y="1205" width="0.0160%" height="15" fill="rgb(213,58,35)" fg:x="5882" fg:w="1"/><text x="94.4826%" y="1215.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="94.2326%" y="1189" width="0.0160%" height="15" fill="rgb(220,211,46)" fg:x="5882" fg:w="1"/><text x="94.4826%" y="1199.50"></text></g><g><title>__libc_start_call_main (10 samples, 0.16%)</title><rect x="94.1205%" y="1509" width="0.1602%" height="15" fill="rgb(212,134,16)" fg:x="5875" fg:w="10"/><text x="94.3705%" y="1519.50"></text></g><g><title>main (10 samples, 0.16%)</title><rect x="94.1205%" y="1493" width="0.1602%" height="15" fill="rgb(232,90,44)" fg:x="5875" fg:w="10"/><text x="94.3705%" y="1503.50"></text></g><g><title>main (10 samples, 0.16%)</title><rect x="94.1205%" y="1477" width="0.1602%" height="15" fill="rgb(212,18,36)" fg:x="5875" fg:w="10"/><text x="94.3705%" y="1487.50"></text></g><g><title>AppInitMain (10 samples, 0.16%)</title><rect x="94.1205%" y="1461" width="0.1602%" height="15" fill="rgb(206,112,24)" fg:x="5875" fg:w="10"/><text x="94.3705%" y="1471.50"></text></g><g><title>InitAndLoadChainstate (10 samples, 0.16%)</title><rect x="94.1205%" y="1445" width="0.1602%" height="15" fill="rgb(238,223,40)" fg:x="5875" fg:w="10"/><text x="94.3705%" y="1455.50"></text></g><g><title>operator (10 samples, 0.16%)</title><rect x="94.1205%" y="1429" width="0.1602%" height="15" fill="rgb(226,169,20)" fg:x="5875" fg:w="10"/><text x="94.3705%" y="1439.50"></text></g><g><title>InitAndLoadChainstate (10 samples, 0.16%)</title><rect x="94.1205%" y="1413" width="0.1602%" height="15" fill="rgb(241,64,52)" fg:x="5875" fg:w="10"/><text x="94.3705%" y="1423.50"></text></g><g><title>node::LoadChainstate (10 samples, 0.16%)</title><rect x="94.1205%" y="1397" width="0.1602%" height="15" fill="rgb(228,120,25)" fg:x="5875" fg:w="10"/><text x="94.3705%" y="1407.50"></text></g><g><title>node::CompleteChainstateInitialization (9 samples, 0.14%)</title><rect x="94.1365%" y="1381" width="0.1442%" height="15" fill="rgb(234,108,19)" fg:x="5876" fg:w="9"/><text x="94.3865%" y="1391.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (9 samples, 0.14%)</title><rect x="94.1365%" y="1365" width="0.1442%" height="15" fill="rgb(236,133,29)" fg:x="5876" fg:w="9"/><text x="94.3865%" y="1375.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (9 samples, 0.14%)</title><rect x="94.1365%" y="1349" width="0.1442%" height="15" fill="rgb(246,174,53)" fg:x="5876" fg:w="9"/><text x="94.3865%" y="1359.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (9 samples, 0.14%)</title><rect x="94.1365%" y="1333" width="0.1442%" height="15" fill="rgb(210,105,35)" fg:x="5876" fg:w="9"/><text x="94.3865%" y="1343.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1317" width="0.0320%" height="15" fill="rgb(225,27,26)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1327.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1301" width="0.0320%" height="15" fill="rgb(233,2,39)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1285" width="0.0320%" height="15" fill="rgb(219,164,26)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1269" width="0.0320%" height="15" fill="rgb(236,211,5)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1253" width="0.0320%" height="15" fill="rgb(244,227,23)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1237" width="0.0320%" height="15" fill="rgb(230,184,8)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1221" width="0.0320%" height="15" fill="rgb(217,125,48)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1205" width="0.0320%" height="15" fill="rgb(223,192,47)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1189" width="0.0320%" height="15" fill="rgb(226,119,10)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1173" width="0.0320%" height="15" fill="rgb(221,49,29)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1157" width="0.0320%" height="15" fill="rgb(217,205,19)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1167.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="94.2486%" y="1141" width="0.0320%" height="15" fill="rgb(242,104,7)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1151.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1125" width="0.0320%" height="15" fill="rgb(209,154,48)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1109" width="0.0320%" height="15" fill="rgb(219,213,46)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1119.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="94.2486%" y="1093" width="0.0320%" height="15" fill="rgb(229,105,38)" fg:x="5883" fg:w="2"/><text x="94.4986%" y="1103.50"></text></g><g><title>void std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="94.2647%" y="1077" width="0.0160%" height="15" fill="rgb(205,151,5)" fg:x="5884" fg:w="1"/><text x="94.5147%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;CBlockIndex*&gt; &gt;, std::is_move_constructible&lt;CBlockIndex*&gt;, std::is_move_assignable&lt;CBlockIndex*&gt; &gt;::value, void&gt;::type std::swap&lt;CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.2647%" y="1061" width="0.0160%" height="15" fill="rgb(248,115,40)" fg:x="5884" fg:w="1"/><text x="94.5147%" y="1071.50"></text></g><g><title>CSHA256::Finalize (2 samples, 0.03%)</title><rect x="94.2807%" y="1205" width="0.0320%" height="15" fill="rgb(206,179,2)" fg:x="5885" fg:w="2"/><text x="94.5307%" y="1215.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (3 samples, 0.05%)</title><rect x="94.2807%" y="1285" width="0.0481%" height="15" fill="rgb(230,103,24)" fg:x="5885" fg:w="3"/><text x="94.5307%" y="1295.50"></text></g><g><title>CBlockHeader::GetHash (3 samples, 0.05%)</title><rect x="94.2807%" y="1269" width="0.0481%" height="15" fill="rgb(218,152,4)" fg:x="5885" fg:w="3"/><text x="94.5307%" y="1279.50"></text></g><g><title>HashWriter::GetHash (3 samples, 0.05%)</title><rect x="94.2807%" y="1253" width="0.0481%" height="15" fill="rgb(236,161,54)" fg:x="5885" fg:w="3"/><text x="94.5307%" y="1263.50"></text></g><g><title>CSHA256::Finalize (3 samples, 0.05%)</title><rect x="94.2807%" y="1237" width="0.0481%" height="15" fill="rgb(226,65,17)" fg:x="5885" fg:w="3"/><text x="94.5307%" y="1247.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="94.2807%" y="1221" width="0.0481%" height="15" fill="rgb(221,134,44)" fg:x="5885" fg:w="3"/><text x="94.5307%" y="1231.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="94.3127%" y="1205" width="0.0160%" height="15" fill="rgb(251,129,4)" fg:x="5887" fg:w="1"/><text x="94.5627%" y="1215.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="94.3287%" y="1269" width="0.0160%" height="15" fill="rgb(244,32,34)" fg:x="5888" fg:w="1"/><text x="94.5787%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="94.3287%" y="1253" width="0.0160%" height="15" fill="rgb(251,224,37)" fg:x="5888" fg:w="1"/><text x="94.5787%" y="1263.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="94.3287%" y="1237" width="0.0160%" height="15" fill="rgb(248,117,31)" fg:x="5888" fg:w="1"/><text x="94.5787%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="94.3287%" y="1221" width="0.0160%" height="15" fill="rgb(222,208,37)" fg:x="5888" fg:w="1"/><text x="94.5787%" y="1231.50"></text></g><g><title>UintToArith256 (1 samples, 0.02%)</title><rect x="94.3287%" y="1205" width="0.0160%" height="15" fill="rgb(234,211,25)" fg:x="5888" fg:w="1"/><text x="94.5787%" y="1215.50"></text></g><g><title>ReadLE32 (1 samples, 0.02%)</title><rect x="94.3287%" y="1189" width="0.0160%" height="15" fill="rgb(211,72,6)" fg:x="5888" fg:w="1"/><text x="94.5787%" y="1199.50"></text></g><g><title>UintToArith256 (1 samples, 0.02%)</title><rect x="94.3287%" y="1173" width="0.0160%" height="15" fill="rgb(249,198,38)" fg:x="5888" fg:w="1"/><text x="94.5787%" y="1183.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (5 samples, 0.08%)</title><rect x="94.2807%" y="1509" width="0.0801%" height="15" fill="rgb(221,86,51)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1519.50"></text></g><g><title>__libc_start_call_main (5 samples, 0.08%)</title><rect x="94.2807%" y="1493" width="0.0801%" height="15" fill="rgb(226,178,43)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1503.50"></text></g><g><title>main (5 samples, 0.08%)</title><rect x="94.2807%" y="1477" width="0.0801%" height="15" fill="rgb(215,145,7)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1487.50"></text></g><g><title>main (5 samples, 0.08%)</title><rect x="94.2807%" y="1461" width="0.0801%" height="15" fill="rgb(250,202,36)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1471.50"></text></g><g><title>AppInitMain (5 samples, 0.08%)</title><rect x="94.2807%" y="1445" width="0.0801%" height="15" fill="rgb(215,86,13)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1455.50"></text></g><g><title>InitAndLoadChainstate (5 samples, 0.08%)</title><rect x="94.2807%" y="1429" width="0.0801%" height="15" fill="rgb(221,134,12)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1439.50"></text></g><g><title>operator (5 samples, 0.08%)</title><rect x="94.2807%" y="1413" width="0.0801%" height="15" fill="rgb(213,82,10)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1423.50"></text></g><g><title>InitAndLoadChainstate (5 samples, 0.08%)</title><rect x="94.2807%" y="1397" width="0.0801%" height="15" fill="rgb(214,142,0)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1407.50"></text></g><g><title>node::LoadChainstate (5 samples, 0.08%)</title><rect x="94.2807%" y="1381" width="0.0801%" height="15" fill="rgb(205,145,9)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1391.50"></text></g><g><title>node::CompleteChainstateInitialization (5 samples, 0.08%)</title><rect x="94.2807%" y="1365" width="0.0801%" height="15" fill="rgb(244,214,8)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1375.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (5 samples, 0.08%)</title><rect x="94.2807%" y="1349" width="0.0801%" height="15" fill="rgb(224,72,51)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1359.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (5 samples, 0.08%)</title><rect x="94.2807%" y="1333" width="0.0801%" height="15" fill="rgb(233,137,37)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1343.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (5 samples, 0.08%)</title><rect x="94.2807%" y="1317" width="0.0801%" height="15" fill="rgb(208,71,28)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1327.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (5 samples, 0.08%)</title><rect x="94.2807%" y="1301" width="0.0801%" height="15" fill="rgb(226,31,7)" fg:x="5885" fg:w="5"/><text x="94.5307%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (2 samples, 0.03%)</title><rect x="94.3287%" y="1285" width="0.0320%" height="15" fill="rgb(229,62,18)" fg:x="5888" fg:w="2"/><text x="94.5787%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="94.3448%" y="1269" width="0.0160%" height="15" fill="rgb(226,74,28)" fg:x="5889" fg:w="1"/><text x="94.5948%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="94.3448%" y="1253" width="0.0160%" height="15" fill="rgb(214,170,18)" fg:x="5889" fg:w="1"/><text x="94.5948%" y="1263.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="94.3448%" y="1237" width="0.0160%" height="15" fill="rgb(227,229,35)" fg:x="5889" fg:w="1"/><text x="94.5948%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="94.3448%" y="1221" width="0.0160%" height="15" fill="rgb(225,181,39)" fg:x="5889" fg:w="1"/><text x="94.5948%" y="1231.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="94.3448%" y="1205" width="0.0160%" height="15" fill="rgb(253,124,44)" fg:x="5889" fg:w="1"/><text x="94.5948%" y="1215.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="94.3448%" y="1189" width="0.0160%" height="15" fill="rgb(220,75,18)" fg:x="5889" fg:w="1"/><text x="94.5948%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="94.3608%" y="1509" width="0.0160%" height="15" fill="rgb(239,175,43)" fg:x="5890" fg:w="1"/><text x="94.6108%" y="1519.50"></text></g><g><title>__printf_buffer (1 samples, 0.02%)</title><rect x="94.3768%" y="1509" width="0.0160%" height="15" fill="rgb(228,112,50)" fg:x="5891" fg:w="1"/><text x="94.6268%" y="1519.50"></text></g><g><title>__printf_buffer_done (2 samples, 0.03%)</title><rect x="94.3928%" y="1509" width="0.0320%" height="15" fill="rgb(232,105,36)" fg:x="5892" fg:w="2"/><text x="94.6428%" y="1519.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="94.3928%" y="1493" width="0.0320%" height="15" fill="rgb(227,137,47)" fg:x="5892" fg:w="2"/><text x="94.6428%" y="1503.50"></text></g><g><title>__printf_buffer_write (1 samples, 0.02%)</title><rect x="94.4249%" y="1509" width="0.0160%" height="15" fill="rgb(217,51,9)" fg:x="5894" fg:w="1"/><text x="94.6749%" y="1519.50"></text></g><g><title>AppInit (9 samples, 0.14%)</title><rect x="94.4409%" y="1445" width="0.1442%" height="15" fill="rgb(245,117,0)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1455.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::Context&gt;::__single_object std::make_unique&lt;kernel::Context&gt; (9 samples, 0.14%)</title><rect x="94.4409%" y="1429" width="0.1442%" height="15" fill="rgb(252,52,30)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1439.50"></text></g><g><title>kernel::Context::Context (9 samples, 0.14%)</title><rect x="94.4409%" y="1413" width="0.1442%" height="15" fill="rgb(227,85,33)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1423.50"></text></g><g><title>call_once&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (9 samples, 0.14%)</title><rect x="94.4409%" y="1397" width="0.1442%" height="15" fill="rgb(220,157,20)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1407.50"></text></g><g><title>kernel::Context::Context (9 samples, 0.14%)</title><rect x="94.4409%" y="1381" width="0.1442%" height="15" fill="rgb(254,14,34)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1391.50"></text></g><g><title>__pthread_once_slow (9 samples, 0.14%)</title><rect x="94.4409%" y="1365" width="0.1442%" height="15" fill="rgb(216,103,41)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1375.50"></text></g><g><title>_FUN (9 samples, 0.14%)</title><rect x="94.4409%" y="1349" width="0.1442%" height="15" fill="rgb(245,221,9)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1359.50"></text></g><g><title>operator (9 samples, 0.14%)</title><rect x="94.4409%" y="1333" width="0.1442%" height="15" fill="rgb(254,136,47)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1343.50"></text></g><g><title>operator (9 samples, 0.14%)</title><rect x="94.4409%" y="1317" width="0.1442%" height="15" fill="rgb(235,71,46)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1327.50"></text></g><g><title>__invoke&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (9 samples, 0.14%)</title><rect x="94.4409%" y="1301" width="0.1442%" height="15" fill="rgb(242,154,29)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1311.50"></text></g><g><title>__invoke_impl&lt;void, kernel::Context::Context()::&lt;lambda()&gt; &gt; (9 samples, 0.14%)</title><rect x="94.4409%" y="1285" width="0.1442%" height="15" fill="rgb(210,65,31)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1295.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;kernel::Context::Context()::{lambda()#1}&gt;(std::once_flag&amp;, kernel::Context::Context()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (9 samples, 0.14%)</title><rect x="94.4409%" y="1269" width="0.1442%" height="15" fill="rgb(244,9,50)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1279.50"></text></g><g><title>RandomInit (9 samples, 0.14%)</title><rect x="94.4409%" y="1253" width="0.1442%" height="15" fill="rgb(215,141,38)" fg:x="5895" fg:w="9"/><text x="94.6909%" y="1263.50"></text></g><g><title>CSHA512::Finalize (8 samples, 0.13%)</title><rect x="94.4569%" y="1237" width="0.1282%" height="15" fill="rgb(241,129,6)" fg:x="5896" fg:w="8"/><text x="94.7069%" y="1247.50"></text></g><g><title>CSHA512::Write (8 samples, 0.13%)</title><rect x="94.4569%" y="1221" width="0.1282%" height="15" fill="rgb(253,169,4)" fg:x="5896" fg:w="8"/><text x="94.7069%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="94.5210%" y="1205" width="0.0641%" height="15" fill="rgb(237,82,36)" fg:x="5900" fg:w="4"/><text x="94.7710%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="94.5210%" y="1189" width="0.0641%" height="15" fill="rgb(209,171,11)" fg:x="5900" fg:w="4"/><text x="94.7710%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="94.5210%" y="1173" width="0.0641%" height="15" fill="rgb(242,19,22)" fg:x="5900" fg:w="4"/><text x="94.7710%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="94.5210%" y="1157" width="0.0641%" height="15" fill="rgb(251,122,24)" fg:x="5900" fg:w="4"/><text x="94.7710%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="1141" width="0.0481%" height="15" fill="rgb(226,166,42)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="1125" width="0.0481%" height="15" fill="rgb(244,101,48)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="1109" width="0.0481%" height="15" fill="rgb(227,125,1)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="1093" width="0.0481%" height="15" fill="rgb(206,79,43)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="1077" width="0.0481%" height="15" fill="rgb(241,109,41)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="1061" width="0.0481%" height="15" fill="rgb(219,73,4)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="1045" width="0.0481%" height="15" fill="rgb(239,25,41)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="1029" width="0.0481%" height="15" fill="rgb(208,88,46)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="1013" width="0.0481%" height="15" fill="rgb(239,184,9)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="997" width="0.0481%" height="15" fill="rgb(223,114,13)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="981" width="0.0481%" height="15" fill="rgb(214,28,42)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="965" width="0.0481%" height="15" fill="rgb(252,32,44)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="94.5370%" y="949" width="0.0481%" height="15" fill="rgb(231,159,4)" fg:x="5901" fg:w="3"/><text x="94.7870%" y="959.50"></text></g><g><title>CompleteChainstateInitialization (1 samples, 0.02%)</title><rect x="94.5851%" y="1349" width="0.0160%" height="15" fill="rgb(210,35,26)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1359.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (1 samples, 0.02%)</title><rect x="94.5851%" y="1333" width="0.0160%" height="15" fill="rgb(208,190,37)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1343.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (1 samples, 0.02%)</title><rect x="94.5851%" y="1317" width="0.0160%" height="15" fill="rgb(226,148,22)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1327.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.02%)</title><rect x="94.5851%" y="1301" width="0.0160%" height="15" fill="rgb(242,153,24)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1311.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.02%)</title><rect x="94.5851%" y="1285" width="0.0160%" height="15" fill="rgb(213,133,7)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (1 samples, 0.02%)</title><rect x="94.5851%" y="1269" width="0.0160%" height="15" fill="rgb(248,206,18)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (1 samples, 0.02%)</title><rect x="94.5851%" y="1253" width="0.0160%" height="15" fill="rgb(233,157,4)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1263.50"></text></g><g><title>__unlink (1 samples, 0.02%)</title><rect x="94.5851%" y="1237" width="0.0160%" height="15" fill="rgb(249,179,32)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1221" width="0.0160%" height="15" fill="rgb(248,69,35)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1205" width="0.0160%" height="15" fill="rgb(249,158,38)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1189" width="0.0160%" height="15" fill="rgb(223,18,43)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1173" width="0.0160%" height="15" fill="rgb(238,42,45)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1157" width="0.0160%" height="15" fill="rgb(219,65,47)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="94.5851%" y="1141" width="0.0160%" height="15" fill="rgb(248,153,12)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1125" width="0.0160%" height="15" fill="rgb(240,118,4)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1109" width="0.0160%" height="15" fill="rgb(250,96,34)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1093" width="0.0160%" height="15" fill="rgb(221,15,4)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1077" width="0.0160%" height="15" fill="rgb(217,149,33)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1061" width="0.0160%" height="15" fill="rgb(213,58,29)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.5851%" y="1045" width="0.0160%" height="15" fill="rgb(236,218,9)" fg:x="5904" fg:w="1"/><text x="94.8351%" y="1055.50"></text></g><g><title>Chainstate::LoadChainTip (7 samples, 0.11%)</title><rect x="94.6011%" y="1333" width="0.1121%" height="15" fill="rgb(248,40,19)" fg:x="5905" fg:w="7"/><text x="94.8511%" y="1343.50"></text></g><g><title>CChain::SetTip (7 samples, 0.11%)</title><rect x="94.6011%" y="1317" width="0.1121%" height="15" fill="rgb(212,17,6)" fg:x="5905" fg:w="7"/><text x="94.8511%" y="1327.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (1 samples, 0.02%)</title><rect x="94.7132%" y="1317" width="0.0160%" height="15" fill="rgb(206,212,20)" fg:x="5912" fg:w="1"/><text x="94.9632%" y="1327.50"></text></g><g><title>std::tuple_element&lt;1ul, std::pair&lt;uint256 const, CBlockIndex&gt; &gt;::type&amp; std::get&lt;1ul, uint256 const, CBlockIndex&gt; (1 samples, 0.02%)</title><rect x="94.7453%" y="1301" width="0.0160%" height="15" fill="rgb(229,80,37)" fg:x="5914" fg:w="1"/><text x="94.9953%" y="1311.50"></text></g><g><title>CBlockIndex&amp; std::__pair_get&lt;1ul&gt;::__get&lt;uint256 const, CBlockIndex&gt; (1 samples, 0.02%)</title><rect x="94.7453%" y="1285" width="0.0160%" height="15" fill="rgb(253,8,37)" fg:x="5914" fg:w="1"/><text x="94.9953%" y="1295.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (7 samples, 0.11%)</title><rect x="94.7293%" y="1317" width="0.1121%" height="15" fill="rgb(215,16,43)" fg:x="5913" fg:w="7"/><text x="94.9793%" y="1327.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (5 samples, 0.08%)</title><rect x="94.7613%" y="1301" width="0.0801%" height="15" fill="rgb(236,219,16)" fg:x="5915" fg:w="5"/><text x="95.0113%" y="1311.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (5 samples, 0.08%)</title><rect x="94.7613%" y="1285" width="0.0801%" height="15" fill="rgb(251,0,3)" fg:x="5915" fg:w="5"/><text x="95.0113%" y="1295.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CBlockIndex*&gt; &gt;::construct&lt;CBlockIndex*, CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.8254%" y="1269" width="0.0160%" height="15" fill="rgb(207,133,37)" fg:x="5919" fg:w="1"/><text x="95.0754%" y="1279.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="94.8254%" y="1253" width="0.0160%" height="15" fill="rgb(250,143,20)" fg:x="5919" fg:w="1"/><text x="95.0754%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::bits (1 samples, 0.02%)</title><rect x="94.9375%" y="1253" width="0.0160%" height="15" fill="rgb(242,19,50)" fg:x="5926" fg:w="1"/><text x="95.1875%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (6 samples, 0.10%)</title><rect x="94.9856%" y="1237" width="0.0961%" height="15" fill="rgb(206,124,43)" fg:x="5929" fg:w="6"/><text x="95.2356%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (6 samples, 0.10%)</title><rect x="94.9856%" y="1221" width="0.0961%" height="15" fill="rgb(229,4,38)" fg:x="5929" fg:w="6"/><text x="95.2356%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (11 samples, 0.18%)</title><rect x="95.0817%" y="1237" width="0.1762%" height="15" fill="rgb(247,220,45)" fg:x="5935" fg:w="11"/><text x="95.3317%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (5 samples, 0.08%)</title><rect x="95.1778%" y="1221" width="0.0801%" height="15" fill="rgb(247,195,0)" fg:x="5941" fg:w="5"/><text x="95.4278%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (5 samples, 0.08%)</title><rect x="95.1778%" y="1205" width="0.0801%" height="15" fill="rgb(252,12,19)" fg:x="5941" fg:w="5"/><text x="95.4278%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (20 samples, 0.32%)</title><rect x="95.2579%" y="1237" width="0.3204%" height="15" fill="rgb(222,49,50)" fg:x="5946" fg:w="20"/><text x="95.5079%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (40 samples, 0.64%)</title><rect x="94.9535%" y="1253" width="0.6408%" height="15" fill="rgb(209,157,28)" fg:x="5927" fg:w="40"/><text x="95.2035%" y="1263.50"></text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.02%)</title><rect x="95.5783%" y="1237" width="0.0160%" height="15" fill="rgb(238,174,24)" fg:x="5966" fg:w="1"/><text x="95.8283%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="95.5783%" y="1221" width="0.0160%" height="15" fill="rgb(224,17,28)" fg:x="5966" fg:w="1"/><text x="95.8283%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="95.5944%" y="1253" width="0.0160%" height="15" fill="rgb(249,7,29)" fg:x="5967" fg:w="1"/><text x="95.8444%" y="1263.50"></text></g><g><title>GetBlockProof (75 samples, 1.20%)</title><rect x="94.9375%" y="1285" width="1.2015%" height="15" fill="rgb(243,178,4)" fg:x="5926" fg:w="75"/><text x="95.1875%" y="1295.50"></text></g><g><title>operator/ (75 samples, 1.20%)</title><rect x="94.9375%" y="1269" width="1.2015%" height="15" fill="rgb(246,138,35)" fg:x="5926" fg:w="75"/><text x="95.1875%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (33 samples, 0.53%)</title><rect x="95.6104%" y="1253" width="0.5287%" height="15" fill="rgb(251,85,18)" fg:x="5968" fg:w="33"/><text x="95.8604%" y="1263.50"></text></g><g><title>arith_uint256::SetCompact (3 samples, 0.05%)</title><rect x="96.1391%" y="1285" width="0.0481%" height="15" fill="rgb(254,55,9)" fg:x="6001" fg:w="3"/><text x="96.3891%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (7 samples, 0.11%)</title><rect x="96.1871%" y="1285" width="0.1121%" height="15" fill="rgb(248,4,50)" fg:x="6004" fg:w="7"/><text x="96.4371%" y="1295.50"></text></g><g><title>void Serialize&lt;HashWriter, uint256&gt; (2 samples, 0.03%)</title><rect x="96.2993%" y="1125" width="0.0320%" height="15" fill="rgb(215,208,14)" fg:x="6011" fg:w="2"/><text x="96.5493%" y="1135.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="96.2993%" y="1109" width="0.0320%" height="15" fill="rgb(218,37,18)" fg:x="6011" fg:w="2"/><text x="96.5493%" y="1119.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.03%)</title><rect x="96.2993%" y="1093" width="0.0320%" height="15" fill="rgb(206,104,13)" fg:x="6011" fg:w="2"/><text x="96.5493%" y="1103.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (2 samples, 0.03%)</title><rect x="96.2993%" y="1077" width="0.0320%" height="15" fill="rgb(248,94,22)" fg:x="6011" fg:w="2"/><text x="96.5493%" y="1087.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="96.2993%" y="1061" width="0.0320%" height="15" fill="rgb(235,42,46)" fg:x="6011" fg:w="2"/><text x="96.5493%" y="1071.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="96.2993%" y="1045" width="0.0320%" height="15" fill="rgb(220,228,48)" fg:x="6011" fg:w="2"/><text x="96.5493%" y="1055.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="96.2993%" y="1029" width="0.0320%" height="15" fill="rgb(216,58,12)" fg:x="6011" fg:w="2"/><text x="96.5493%" y="1039.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (3 samples, 0.05%)</title><rect x="96.2993%" y="1237" width="0.0481%" height="15" fill="rgb(223,97,52)" fg:x="6011" fg:w="3"/><text x="96.5493%" y="1247.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (3 samples, 0.05%)</title><rect x="96.2993%" y="1221" width="0.0481%" height="15" fill="rgb(208,159,17)" fg:x="6011" fg:w="3"/><text x="96.5493%" y="1231.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="96.2993%" y="1205" width="0.0481%" height="15" fill="rgb(215,172,9)" fg:x="6011" fg:w="3"/><text x="96.5493%" y="1215.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="96.2993%" y="1189" width="0.0481%" height="15" fill="rgb(252,175,30)" fg:x="6011" fg:w="3"/><text x="96.5493%" y="1199.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="96.2993%" y="1173" width="0.0481%" height="15" fill="rgb(209,159,10)" fg:x="6011" fg:w="3"/><text x="96.5493%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (3 samples, 0.05%)</title><rect x="96.2993%" y="1157" width="0.0481%" height="15" fill="rgb(229,73,51)" fg:x="6011" fg:w="3"/><text x="96.5493%" y="1167.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (3 samples, 0.05%)</title><rect x="96.2993%" y="1141" width="0.0481%" height="15" fill="rgb(208,212,43)" fg:x="6011" fg:w="3"/><text x="96.5493%" y="1151.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="96.3313%" y="1125" width="0.0160%" height="15" fill="rgb(254,123,53)" fg:x="6013" fg:w="1"/><text x="96.5813%" y="1135.50"></text></g><g><title>void ser_writedata32&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="96.3313%" y="1109" width="0.0160%" height="15" fill="rgb(254,128,49)" fg:x="6013" fg:w="1"/><text x="96.5813%" y="1119.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="96.3313%" y="1093" width="0.0160%" height="15" fill="rgb(246,16,16)" fg:x="6013" fg:w="1"/><text x="96.5813%" y="1103.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="96.3313%" y="1077" width="0.0160%" height="15" fill="rgb(209,200,1)" fg:x="6013" fg:w="1"/><text x="96.5813%" y="1087.50"></text></g><g><title>CBlockHeader::GetHash (4 samples, 0.06%)</title><rect x="96.2993%" y="1253" width="0.0641%" height="15" fill="rgb(235,9,3)" fg:x="6011" fg:w="4"/><text x="96.5493%" y="1263.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.02%)</title><rect x="96.3473%" y="1237" width="0.0160%" height="15" fill="rgb(233,121,54)" fg:x="6014" fg:w="1"/><text x="96.5973%" y="1247.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="96.3473%" y="1221" width="0.0160%" height="15" fill="rgb(236,80,25)" fg:x="6014" fg:w="1"/><text x="96.5973%" y="1231.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="96.3473%" y="1205" width="0.0160%" height="15" fill="rgb(220,44,24)" fg:x="6014" fg:w="1"/><text x="96.5973%" y="1215.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="96.3473%" y="1189" width="0.0160%" height="15" fill="rgb(236,225,16)" fg:x="6014" fg:w="1"/><text x="96.5973%" y="1199.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="96.3473%" y="1173" width="0.0160%" height="15" fill="rgb(237,140,0)" fg:x="6014" fg:w="1"/><text x="96.5973%" y="1183.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="96.3473%" y="1157" width="0.0160%" height="15" fill="rgb(243,225,53)" fg:x="6014" fg:w="1"/><text x="96.5973%" y="1167.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (5 samples, 0.08%)</title><rect x="96.2993%" y="1269" width="0.0801%" height="15" fill="rgb(240,140,30)" fg:x="6011" fg:w="5"/><text x="96.5493%" y="1279.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.3633%" y="1253" width="0.0160%" height="15" fill="rgb(217,51,16)" fg:x="6015" fg:w="1"/><text x="96.6133%" y="1263.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="96.3633%" y="1237" width="0.0160%" height="15" fill="rgb(245,75,50)" fg:x="6015" fg:w="1"/><text x="96.6133%" y="1247.50"></text></g><g><title>DataStream::~DataStream (1 samples, 0.02%)</title><rect x="96.3633%" y="1221" width="0.0160%" height="15" fill="rgb(208,174,22)" fg:x="6015" fg:w="1"/><text x="96.6133%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="96.3633%" y="1205" width="0.0160%" height="15" fill="rgb(219,98,50)" fg:x="6015" fg:w="1"/><text x="96.6133%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="96.3633%" y="1189" width="0.0160%" height="15" fill="rgb(243,138,3)" fg:x="6015" fg:w="1"/><text x="96.6133%" y="1199.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="96.3794%" y="1253" width="0.0160%" height="15" fill="rgb(243,132,26)" fg:x="6016" fg:w="1"/><text x="96.6294%" y="1263.50"></text></g><g><title>CheckProofOfWorkImpl (2 samples, 0.03%)</title><rect x="96.3794%" y="1269" width="0.0320%" height="15" fill="rgb(250,201,8)" fg:x="6016" fg:w="2"/><text x="96.6294%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="96.3954%" y="1253" width="0.0160%" height="15" fill="rgb(213,91,26)" fg:x="6017" fg:w="1"/><text x="96.6454%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="96.4114%" y="1269" width="0.0160%" height="15" fill="rgb(229,117,1)" fg:x="6018" fg:w="1"/><text x="96.6614%" y="1279.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="96.4274%" y="1269" width="0.0160%" height="15" fill="rgb(229,24,6)" fg:x="6019" fg:w="1"/><text x="96.6774%" y="1279.50"></text></g><g><title>CDBIterator::GetKeyImpl (1 samples, 0.02%)</title><rect x="96.4274%" y="1253" width="0.0160%" height="15" fill="rgb(206,69,11)" fg:x="6019" fg:w="1"/><text x="96.6774%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="96.4274%" y="1237" width="0.0160%" height="15" fill="rgb(234,111,34)" fg:x="6019" fg:w="1"/><text x="96.6774%" y="1247.50"></text></g><g><title>CDBIterator::GetValueImpl (1 samples, 0.02%)</title><rect x="96.4434%" y="1253" width="0.0160%" height="15" fill="rgb(213,187,51)" fg:x="6020" fg:w="1"/><text x="96.6934%" y="1263.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.4434%" y="1237" width="0.0160%" height="15" fill="rgb(207,45,11)" fg:x="6020" fg:w="1"/><text x="96.6934%" y="1247.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="96.4434%" y="1221" width="0.0160%" height="15" fill="rgb(225,151,47)" fg:x="6020" fg:w="1"/><text x="96.6934%" y="1231.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;std::pair&lt;unsigned char, uint256&gt;&amp;&gt;(std::pair&lt;unsigned char, uint256&gt;&amp;) (1 samples, 0.02%)</title><rect x="96.4434%" y="1205" width="0.0160%" height="15" fill="rgb(211,226,5)" fg:x="6020" fg:w="1"/><text x="96.6934%" y="1215.50"></text></g><g><title>void Unserialize&lt;DataStream, unsigned char, uint256&gt; (1 samples, 0.02%)</title><rect x="96.4434%" y="1189" width="0.0160%" height="15" fill="rgb(214,83,52)" fg:x="6020" fg:w="1"/><text x="96.6934%" y="1199.50"></text></g><g><title>void Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.4434%" y="1173" width="0.0160%" height="15" fill="rgb(229,49,53)" fg:x="6020" fg:w="1"/><text x="96.6934%" y="1183.50"></text></g><g><title>unsigned char ser_readdata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.4434%" y="1157" width="0.0160%" height="15" fill="rgb(246,8,28)" fg:x="6020" fg:w="1"/><text x="96.6934%" y="1167.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="96.4434%" y="1141" width="0.0160%" height="15" fill="rgb(207,28,41)" fg:x="6020" fg:w="1"/><text x="96.6934%" y="1151.50"></text></g><g><title>DataStream::read (4 samples, 0.06%)</title><rect x="96.4595%" y="1109" width="0.0641%" height="15" fill="rgb(254,22,25)" fg:x="6021" fg:w="4"/><text x="96.7095%" y="1119.50"></text></g><g><title>DataStream::read (4 samples, 0.06%)</title><rect x="96.4595%" y="1093" width="0.0641%" height="15" fill="rgb(209,120,42)" fg:x="6021" fg:w="4"/><text x="96.7095%" y="1103.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.06%)</title><rect x="96.4595%" y="1077" width="0.0641%" height="15" fill="rgb(216,194,18)" fg:x="6021" fg:w="4"/><text x="96.7095%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="96.4595%" y="1061" width="0.0641%" height="15" fill="rgb(213,70,17)" fg:x="6021" fg:w="4"/><text x="96.7095%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="96.4595%" y="1045" width="0.0641%" height="15" fill="rgb(228,66,19)" fg:x="6021" fg:w="4"/><text x="96.7095%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="96.4595%" y="1029" width="0.0641%" height="15" fill="rgb(236,221,54)" fg:x="6021" fg:w="4"/><text x="96.7095%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="96.4595%" y="1013" width="0.0641%" height="15" fill="rgb(207,175,15)" fg:x="6021" fg:w="4"/><text x="96.7095%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="96.4595%" y="997" width="0.0641%" height="15" fill="rgb(234,76,8)" fg:x="6021" fg:w="4"/><text x="96.7095%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.4755%" y="981" width="0.0481%" height="15" fill="rgb(243,106,0)" fg:x="6022" fg:w="3"/><text x="96.7255%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.4755%" y="965" width="0.0481%" height="15" fill="rgb(208,48,19)" fg:x="6022" fg:w="3"/><text x="96.7255%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.4755%" y="949" width="0.0481%" height="15" fill="rgb(251,50,29)" fg:x="6022" fg:w="3"/><text x="96.7255%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.4755%" y="933" width="0.0481%" height="15" fill="rgb(222,31,49)" fg:x="6022" fg:w="3"/><text x="96.7255%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.4755%" y="917" width="0.0481%" height="15" fill="rgb(232,33,18)" fg:x="6022" fg:w="3"/><text x="96.7255%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.4755%" y="901" width="0.0481%" height="15" fill="rgb(209,1,44)" fg:x="6022" fg:w="3"/><text x="96.7255%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.4755%" y="885" width="0.0481%" height="15" fill="rgb(211,7,1)" fg:x="6022" fg:w="3"/><text x="96.7255%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.4755%" y="869" width="0.0481%" height="15" fill="rgb(224,111,27)" fg:x="6022" fg:w="3"/><text x="96.7255%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.4755%" y="853" width="0.0481%" height="15" fill="rgb(252,195,39)" fg:x="6022" fg:w="3"/><text x="96.7255%" y="863.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, int&amp;&gt; (5 samples, 0.08%)</title><rect x="96.4595%" y="1173" width="0.0801%" height="15" fill="rgb(237,198,5)" fg:x="6021" fg:w="5"/><text x="96.7095%" y="1183.50"></text></g><g><title>void UnserializeMany&lt;DataStream, int&amp;&gt; (5 samples, 0.08%)</title><rect x="96.4595%" y="1157" width="0.0801%" height="15" fill="rgb(232,148,1)" fg:x="6021" fg:w="5"/><text x="96.7095%" y="1167.50"></text></g><g><title>void Unserialize&lt;DataStream&gt; (5 samples, 0.08%)</title><rect x="96.4595%" y="1141" width="0.0801%" height="15" fill="rgb(249,41,3)" fg:x="6021" fg:w="5"/><text x="96.7095%" y="1151.50"></text></g><g><title>unsigned int ser_readdata32&lt;DataStream&gt; (5 samples, 0.08%)</title><rect x="96.4595%" y="1125" width="0.0801%" height="15" fill="rgb(215,14,33)" fg:x="6021" fg:w="5"/><text x="96.7095%" y="1135.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.5236%" y="1109" width="0.0160%" height="15" fill="rgb(209,146,24)" fg:x="6025" fg:w="1"/><text x="96.7736%" y="1119.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="96.5236%" y="1093" width="0.0160%" height="15" fill="rgb(219,51,47)" fg:x="6025" fg:w="1"/><text x="96.7736%" y="1103.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="96.5236%" y="1077" width="0.0160%" height="15" fill="rgb(234,217,40)" fg:x="6025" fg:w="1"/><text x="96.7736%" y="1087.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="96.5236%" y="1061" width="0.0160%" height="15" fill="rgb(228,34,26)" fg:x="6025" fg:w="1"/><text x="96.7736%" y="1071.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="96.5236%" y="1045" width="0.0160%" height="15" fill="rgb(224,50,29)" fg:x="6025" fg:w="1"/><text x="96.7736%" y="1055.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="96.5236%" y="1029" width="0.0160%" height="15" fill="rgb(205,79,51)" fg:x="6025" fg:w="1"/><text x="96.7736%" y="1039.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (6 samples, 0.10%)</title><rect x="96.4595%" y="1253" width="0.0961%" height="15" fill="rgb(218,136,28)" fg:x="6021" fg:w="6"/><text x="96.7095%" y="1263.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (6 samples, 0.10%)</title><rect x="96.4595%" y="1237" width="0.0961%" height="15" fill="rgb(220,150,10)" fg:x="6021" fg:w="6"/><text x="96.7095%" y="1247.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (6 samples, 0.10%)</title><rect x="96.4595%" y="1221" width="0.0961%" height="15" fill="rgb(242,158,47)" fg:x="6021" fg:w="6"/><text x="96.7095%" y="1231.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (6 samples, 0.10%)</title><rect x="96.4595%" y="1205" width="0.0961%" height="15" fill="rgb(209,68,0)" fg:x="6021" fg:w="6"/><text x="96.7095%" y="1215.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (6 samples, 0.10%)</title><rect x="96.4595%" y="1189" width="0.0961%" height="15" fill="rgb(208,13,41)" fg:x="6021" fg:w="6"/><text x="96.7095%" y="1199.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="1173" width="0.0160%" height="15" fill="rgb(226,201,7)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1183.50"></text></g><g><title>void UnserializeMany&lt;DataStream, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="1157" width="0.0160%" height="15" fill="rgb(236,103,26)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1167.50"></text></g><g><title>void Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="1141" width="0.0160%" height="15" fill="rgb(243,162,8)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1151.50"></text></g><g><title>unsigned int ser_readdata32&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="1125" width="0.0160%" height="15" fill="rgb(237,225,11)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1135.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.5396%" y="1109" width="0.0160%" height="15" fill="rgb(247,186,32)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1119.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="1093" width="0.0160%" height="15" fill="rgb(215,26,28)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (1 samples, 0.02%)</title><rect x="96.5396%" y="1077" width="0.0160%" height="15" fill="rgb(208,121,6)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1087.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="1061" width="0.0160%" height="15" fill="rgb(225,91,3)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1071.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="1045" width="0.0160%" height="15" fill="rgb(246,119,36)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1055.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="1029" width="0.0160%" height="15" fill="rgb(254,173,2)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1039.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="1013" width="0.0160%" height="15" fill="rgb(209,87,54)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1023.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="997" width="0.0160%" height="15" fill="rgb(223,216,20)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="1007.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="981" width="0.0160%" height="15" fill="rgb(220,31,8)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="991.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="965" width="0.0160%" height="15" fill="rgb(220,185,15)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="975.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="949" width="0.0160%" height="15" fill="rgb(247,190,50)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="959.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="96.5396%" y="933" width="0.0160%" height="15" fill="rgb(239,173,47)" fg:x="6026" fg:w="1"/><text x="96.7896%" y="943.50"></text></g><g><title>DataStream::DataStream (5 samples, 0.08%)</title><rect x="96.5556%" y="1253" width="0.0801%" height="15" fill="rgb(218,190,42)" fg:x="6027" fg:w="5"/><text x="96.8056%" y="1263.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (5 samples, 0.08%)</title><rect x="96.5556%" y="1237" width="0.0801%" height="15" fill="rgb(251,207,16)" fg:x="6027" fg:w="5"/><text x="96.8056%" y="1247.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (5 samples, 0.08%)</title><rect x="96.5556%" y="1221" width="0.0801%" height="15" fill="rgb(222,199,47)" fg:x="6027" fg:w="5"/><text x="96.8056%" y="1231.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (5 samples, 0.08%)</title><rect x="96.5556%" y="1205" width="0.0801%" height="15" fill="rgb(245,190,7)" fg:x="6027" fg:w="5"/><text x="96.8056%" y="1215.50"></text></g><g><title>decltype  (5 samples, 0.08%)</title><rect x="96.5556%" y="1189" width="0.0801%" height="15" fill="rgb(239,85,38)" fg:x="6027" fg:w="5"/><text x="96.8056%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (5 samples, 0.08%)</title><rect x="96.5556%" y="1173" width="0.0801%" height="15" fill="rgb(229,69,51)" fg:x="6027" fg:w="5"/><text x="96.8056%" y="1183.50"></text></g><g><title>decltype (5 samples, 0.08%)</title><rect x="96.5556%" y="1157" width="0.0801%" height="15" fill="rgb(231,104,51)" fg:x="6027" fg:w="5"/><text x="96.8056%" y="1167.50"></text></g><g><title>DataStream::Xor (3 samples, 0.05%)</title><rect x="96.6357%" y="1253" width="0.0481%" height="15" fill="rgb(235,49,4)" fg:x="6032" fg:w="3"/><text x="96.8857%" y="1263.50"></text></g><g><title>util::Xor (3 samples, 0.05%)</title><rect x="96.6357%" y="1237" width="0.0481%" height="15" fill="rgb(246,166,20)" fg:x="6032" fg:w="3"/><text x="96.8857%" y="1247.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="96.6677%" y="1221" width="0.0160%" height="15" fill="rgb(230,119,37)" fg:x="6034" fg:w="1"/><text x="96.9177%" y="1231.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="96.6677%" y="1205" width="0.0160%" height="15" fill="rgb(234,77,34)" fg:x="6034" fg:w="1"/><text x="96.9177%" y="1215.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (16 samples, 0.26%)</title><rect x="96.4434%" y="1269" width="0.2563%" height="15" fill="rgb(211,222,33)" fg:x="6020" fg:w="16"/><text x="96.6934%" y="1279.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.6838%" y="1253" width="0.0160%" height="15" fill="rgb(226,45,42)" fg:x="6035" fg:w="1"/><text x="96.9338%" y="1263.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="96.6838%" y="1237" width="0.0160%" height="15" fill="rgb(215,174,28)" fg:x="6035" fg:w="1"/><text x="96.9338%" y="1247.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="96.6838%" y="1221" width="0.0160%" height="15" fill="rgb(254,173,49)" fg:x="6035" fg:w="1"/><text x="96.9338%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="96.6838%" y="1205" width="0.0160%" height="15" fill="rgb(229,191,6)" fg:x="6035" fg:w="1"/><text x="96.9338%" y="1215.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="96.6838%" y="1189" width="0.0160%" height="15" fill="rgb(212,145,22)" fg:x="6035" fg:w="1"/><text x="96.9338%" y="1199.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="96.6838%" y="1173" width="0.0160%" height="15" fill="rgb(226,6,51)" fg:x="6035" fg:w="1"/><text x="96.9338%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="96.6998%" y="1269" width="0.0160%" height="15" fill="rgb(227,128,8)" fg:x="6036" fg:w="1"/><text x="96.9498%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="96.6998%" y="1253" width="0.0160%" height="15" fill="rgb(205,24,10)" fg:x="6036" fg:w="1"/><text x="96.9498%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="96.6998%" y="1237" width="0.0160%" height="15" fill="rgb(217,147,27)" fg:x="6036" fg:w="1"/><text x="96.9498%" y="1247.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="96.7158%" y="1253" width="0.0160%" height="15" fill="rgb(250,82,42)" fg:x="6037" fg:w="1"/><text x="96.9658%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="96.7158%" y="1237" width="0.0160%" height="15" fill="rgb(248,93,17)" fg:x="6037" fg:w="1"/><text x="96.9658%" y="1247.50"></text></g><g><title>UintToArith256 (1 samples, 0.02%)</title><rect x="96.7158%" y="1221" width="0.0160%" height="15" fill="rgb(254,212,40)" fg:x="6037" fg:w="1"/><text x="96.9658%" y="1231.50"></text></g><g><title>ReadLE32 (1 samples, 0.02%)</title><rect x="96.7158%" y="1205" width="0.0160%" height="15" fill="rgb(229,209,2)" fg:x="6037" fg:w="1"/><text x="96.9658%" y="1215.50"></text></g><g><title>UintToArith256 (1 samples, 0.02%)</title><rect x="96.7158%" y="1189" width="0.0160%" height="15" fill="rgb(211,50,43)" fg:x="6037" fg:w="1"/><text x="96.9658%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (2 samples, 0.03%)</title><rect x="96.7158%" y="1269" width="0.0320%" height="15" fill="rgb(245,196,29)" fg:x="6037" fg:w="2"/><text x="96.9658%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.02%)</title><rect x="96.7318%" y="1253" width="0.0160%" height="15" fill="rgb(216,132,13)" fg:x="6038" fg:w="1"/><text x="96.9818%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="96.7318%" y="1237" width="0.0160%" height="15" fill="rgb(251,108,21)" fg:x="6038" fg:w="1"/><text x="96.9818%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="96.7478%" y="1269" width="0.0160%" height="15" fill="rgb(229,174,54)" fg:x="6039" fg:w="1"/><text x="96.9978%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="96.7639%" y="1269" width="0.0160%" height="15" fill="rgb(211,175,47)" fg:x="6040" fg:w="1"/><text x="97.0139%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="96.7639%" y="1253" width="0.0160%" height="15" fill="rgb(234,5,37)" fg:x="6040" fg:w="1"/><text x="97.0139%" y="1263.50"></text></g><g><title>leveldb::DecodeFixed64 (1 samples, 0.02%)</title><rect x="96.7639%" y="1237" width="0.0160%" height="15" fill="rgb(244,150,43)" fg:x="6040" fg:w="1"/><text x="97.0139%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="96.7639%" y="1221" width="0.0160%" height="15" fill="rgb(242,172,38)" fg:x="6040" fg:w="1"/><text x="97.0139%" y="1231.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="96.7799%" y="1173" width="0.0160%" height="15" fill="rgb(205,27,8)" fg:x="6041" fg:w="1"/><text x="97.0299%" y="1183.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="96.7799%" y="1157" width="0.0160%" height="15" fill="rgb(217,57,3)" fg:x="6041" fg:w="1"/><text x="97.0299%" y="1167.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="96.7799%" y="1189" width="0.0320%" height="15" fill="rgb(242,21,38)" fg:x="6041" fg:w="2"/><text x="97.0299%" y="1199.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="96.7959%" y="1173" width="0.0160%" height="15" fill="rgb(209,64,43)" fg:x="6042" fg:w="1"/><text x="97.0459%" y="1183.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="96.7959%" y="1157" width="0.0160%" height="15" fill="rgb(222,2,46)" fg:x="6042" fg:w="1"/><text x="97.0459%" y="1167.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="96.7959%" y="1141" width="0.0160%" height="15" fill="rgb(218,19,44)" fg:x="6042" fg:w="1"/><text x="97.0459%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3 samples, 0.05%)</title><rect x="96.7799%" y="1205" width="0.0481%" height="15" fill="rgb(240,203,42)" fg:x="6041" fg:w="3"/><text x="97.0299%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="96.8119%" y="1189" width="0.0160%" height="15" fill="rgb(229,23,45)" fg:x="6043" fg:w="1"/><text x="97.0619%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="96.8119%" y="1173" width="0.0160%" height="15" fill="rgb(205,228,51)" fg:x="6043" fg:w="1"/><text x="97.0619%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="96.8119%" y="1157" width="0.0160%" height="15" fill="rgb(239,36,20)" fg:x="6043" fg:w="1"/><text x="97.0619%" y="1167.50"></text></g><g><title>std::equal_to&lt;uint256&gt;::operator (1 samples, 0.02%)</title><rect x="96.8119%" y="1141" width="0.0160%" height="15" fill="rgb(248,172,27)" fg:x="6043" fg:w="1"/><text x="97.0619%" y="1151.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="96.8119%" y="1125" width="0.0160%" height="15" fill="rgb(244,55,32)" fg:x="6043" fg:w="1"/><text x="97.0619%" y="1135.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="96.8119%" y="1109" width="0.0160%" height="15" fill="rgb(215,97,16)" fg:x="6043" fg:w="1"/><text x="97.0619%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (5 samples, 0.08%)</title><rect x="96.8920%" y="1157" width="0.0801%" height="15" fill="rgb(224,80,29)" fg:x="6048" fg:w="5"/><text x="97.1420%" y="1167.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (5 samples, 0.08%)</title><rect x="96.8920%" y="1141" width="0.0801%" height="15" fill="rgb(216,93,47)" fg:x="6048" fg:w="5"/><text x="97.1420%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="1125" width="0.0160%" height="15" fill="rgb(238,159,10)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="1109" width="0.0160%" height="15" fill="rgb(223,98,29)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="1093" width="0.0160%" height="15" fill="rgb(210,176,23)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="1077" width="0.0160%" height="15" fill="rgb(242,162,27)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="1061" width="0.0160%" height="15" fill="rgb(245,109,32)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="1045" width="0.0160%" height="15" fill="rgb(248,87,8)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="1029" width="0.0160%" height="15" fill="rgb(250,160,50)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="1013" width="0.0160%" height="15" fill="rgb(246,165,25)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="997" width="0.0160%" height="15" fill="rgb(249,219,3)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="981" width="0.0160%" height="15" fill="rgb(226,66,5)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9561%" y="965" width="0.0160%" height="15" fill="rgb(250,220,43)" fg:x="6052" fg:w="1"/><text x="97.2061%" y="975.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10 samples, 0.16%)</title><rect x="96.8279%" y="1205" width="0.1602%" height="15" fill="rgb(225,111,31)" fg:x="6044" fg:w="10"/><text x="97.0779%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10 samples, 0.16%)</title><rect x="96.8279%" y="1189" width="0.1602%" height="15" fill="rgb(248,106,18)" fg:x="6044" fg:w="10"/><text x="97.0779%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (10 samples, 0.16%)</title><rect x="96.8279%" y="1173" width="0.1602%" height="15" fill="rgb(220,226,45)" fg:x="6044" fg:w="10"/><text x="97.0779%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.02%)</title><rect x="96.9721%" y="1157" width="0.0160%" height="15" fill="rgb(208,58,53)" fg:x="6053" fg:w="1"/><text x="97.2221%" y="1167.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (44 samples, 0.70%)</title><rect x="96.2993%" y="1285" width="0.7049%" height="15" fill="rgb(209,133,1)" fg:x="6011" fg:w="44"/><text x="96.5493%" y="1295.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (14 samples, 0.22%)</title><rect x="96.7799%" y="1269" width="0.2243%" height="15" fill="rgb(228,216,27)" fg:x="6041" fg:w="14"/><text x="97.0299%" y="1279.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (14 samples, 0.22%)</title><rect x="96.7799%" y="1253" width="0.2243%" height="15" fill="rgb(238,155,2)" fg:x="6041" fg:w="14"/><text x="97.0299%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (14 samples, 0.22%)</title><rect x="96.7799%" y="1237" width="0.2243%" height="15" fill="rgb(244,99,37)" fg:x="6041" fg:w="14"/><text x="97.0299%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (14 samples, 0.22%)</title><rect x="96.7799%" y="1221" width="0.2243%" height="15" fill="rgb(254,32,3)" fg:x="6041" fg:w="14"/><text x="97.0299%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="96.9881%" y="1205" width="0.0160%" height="15" fill="rgb(234,46,50)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1215.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="96.9881%" y="1189" width="0.0160%" height="15" fill="rgb(232,118,51)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1199.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="96.9881%" y="1173" width="0.0160%" height="15" fill="rgb(207,24,32)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1183.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="96.9881%" y="1157" width="0.0160%" height="15" fill="rgb(208,107,43)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1167.50"></text></g><g><title>std::pair&lt;uint256 const, CBlockIndex&gt;::pair&lt;uint256 const&amp;&gt; (1 samples, 0.02%)</title><rect x="96.9881%" y="1141" width="0.0160%" height="15" fill="rgb(231,28,9)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1151.50"></text></g><g><title>std::pair&lt;uint256 const, CBlockIndex&gt;::pair&lt;uint256 const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="96.9881%" y="1125" width="0.0160%" height="15" fill="rgb(241,204,15)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="1109" width="0.0160%" height="15" fill="rgb(214,54,15)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="1093" width="0.0160%" height="15" fill="rgb(230,12,28)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="1077" width="0.0160%" height="15" fill="rgb(221,171,5)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="1061" width="0.0160%" height="15" fill="rgb(207,72,25)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="1045" width="0.0160%" height="15" fill="rgb(249,79,37)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="1029" width="0.0160%" height="15" fill="rgb(209,98,49)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="1013" width="0.0160%" height="15" fill="rgb(221,62,13)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="997" width="0.0160%" height="15" fill="rgb(223,39,6)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="981" width="0.0160%" height="15" fill="rgb(246,163,20)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="965" width="0.0160%" height="15" fill="rgb(211,111,29)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9881%" y="949" width="0.0160%" height="15" fill="rgb(243,118,5)" fg:x="6054" fg:w="1"/><text x="97.2381%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Valid (1 samples, 0.02%)</title><rect x="97.0042%" y="1285" width="0.0160%" height="15" fill="rgb(240,144,52)" fg:x="6055" fg:w="1"/><text x="97.2542%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="97.0202%" y="1285" width="0.0160%" height="15" fill="rgb(244,158,36)" fg:x="6056" fg:w="1"/><text x="97.2702%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="97.0202%" y="1269" width="0.0160%" height="15" fill="rgb(241,109,37)" fg:x="6056" fg:w="1"/><text x="97.2702%" y="1279.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (1 samples, 0.02%)</title><rect x="97.0362%" y="1269" width="0.0160%" height="15" fill="rgb(213,95,32)" fg:x="6057" fg:w="1"/><text x="97.2862%" y="1279.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (1 samples, 0.02%)</title><rect x="97.0362%" y="1253" width="0.0160%" height="15" fill="rgb(252,193,9)" fg:x="6057" fg:w="1"/><text x="97.2862%" y="1263.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.02%)</title><rect x="97.0362%" y="1237" width="0.0160%" height="15" fill="rgb(225,213,21)" fg:x="6057" fg:w="1"/><text x="97.2862%" y="1247.50"></text></g><g><title>std::tuple_element&lt;1ul, std::pair&lt;uint256 const, CBlockIndex&gt; &gt;::type&amp; std::get&lt;1ul, uint256 const, CBlockIndex&gt; (2 samples, 0.03%)</title><rect x="97.0522%" y="1269" width="0.0320%" height="15" fill="rgb(220,172,46)" fg:x="6058" fg:w="2"/><text x="97.3022%" y="1279.50"></text></g><g><title>CBlockIndex&amp; std::__pair_get&lt;1ul&gt;::__get&lt;uint256 const, CBlockIndex&gt; (2 samples, 0.03%)</title><rect x="97.0522%" y="1253" width="0.0320%" height="15" fill="rgb(235,75,41)" fg:x="6058" fg:w="2"/><text x="97.3022%" y="1263.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (8 samples, 0.13%)</title><rect x="97.0362%" y="1285" width="0.1282%" height="15" fill="rgb(213,86,9)" fg:x="6057" fg:w="8"/><text x="97.2862%" y="1295.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (5 samples, 0.08%)</title><rect x="97.0843%" y="1269" width="0.0801%" height="15" fill="rgb(238,127,51)" fg:x="6060" fg:w="5"/><text x="97.3343%" y="1279.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (5 samples, 0.08%)</title><rect x="97.0843%" y="1253" width="0.0801%" height="15" fill="rgb(215,2,54)" fg:x="6060" fg:w="5"/><text x="97.3343%" y="1263.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (1 samples, 0.02%)</title><rect x="97.1644%" y="1285" width="0.0160%" height="15" fill="rgb(245,80,6)" fg:x="6065" fg:w="1"/><text x="97.4144%" y="1295.50"></text></g><g><title>operator+ (1 samples, 0.02%)</title><rect x="97.1644%" y="1269" width="0.0160%" height="15" fill="rgb(233,106,42)" fg:x="6065" fg:w="1"/><text x="97.4144%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (1 samples, 0.02%)</title><rect x="97.1644%" y="1253" width="0.0160%" height="15" fill="rgb(244,86,38)" fg:x="6065" fg:w="1"/><text x="97.4144%" y="1263.50"></text></g><g><title>operator+ (1 samples, 0.02%)</title><rect x="97.1804%" y="1285" width="0.0160%" height="15" fill="rgb(242,167,7)" fg:x="6066" fg:w="1"/><text x="97.4304%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (1 samples, 0.02%)</title><rect x="97.1804%" y="1269" width="0.0160%" height="15" fill="rgb(218,216,3)" fg:x="6066" fg:w="1"/><text x="97.4304%" y="1279.50"></text></g><g><title>unsigned int ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="97.1964%" y="1285" width="0.0160%" height="15" fill="rgb(206,136,36)" fg:x="6067" fg:w="1"/><text x="97.4464%" y="1295.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.2124%" y="1253" width="0.0160%" height="15" fill="rgb(206,206,15)" fg:x="6068" fg:w="1"/><text x="97.4624%" y="1263.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.2285%" y="1253" width="0.0801%" height="15" fill="rgb(207,163,34)" fg:x="6069" fg:w="5"/><text x="97.4785%" y="1263.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.2285%" y="1237" width="0.0801%" height="15" fill="rgb(240,127,22)" fg:x="6069" fg:w="5"/><text x="97.4785%" y="1247.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.06%)</title><rect x="97.2445%" y="1221" width="0.0641%" height="15" fill="rgb(227,49,5)" fg:x="6070" fg:w="4"/><text x="97.4945%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (4 samples, 0.06%)</title><rect x="97.2445%" y="1205" width="0.0641%" height="15" fill="rgb(231,8,6)" fg:x="6070" fg:w="4"/><text x="97.4945%" y="1215.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (4 samples, 0.06%)</title><rect x="97.2445%" y="1189" width="0.0641%" height="15" fill="rgb(223,21,24)" fg:x="6070" fg:w="4"/><text x="97.4945%" y="1199.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (4 samples, 0.06%)</title><rect x="97.2445%" y="1173" width="0.0641%" height="15" fill="rgb(244,44,52)" fg:x="6070" fg:w="4"/><text x="97.4945%" y="1183.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.06%)</title><rect x="97.2445%" y="1157" width="0.0641%" height="15" fill="rgb(207,73,28)" fg:x="6070" fg:w="4"/><text x="97.4945%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.06%)</title><rect x="97.2445%" y="1141" width="0.0641%" height="15" fill="rgb(234,215,10)" fg:x="6070" fg:w="4"/><text x="97.4945%" y="1151.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.06%)</title><rect x="97.2445%" y="1125" width="0.0641%" height="15" fill="rgb(236,85,3)" fg:x="6070" fg:w="4"/><text x="97.4945%" y="1135.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.2925%" y="1109" width="0.0160%" height="15" fill="rgb(236,102,39)" fg:x="6073" fg:w="1"/><text x="97.5425%" y="1119.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.03%)</title><rect x="97.3246%" y="1189" width="0.0320%" height="15" fill="rgb(243,50,8)" fg:x="6075" fg:w="2"/><text x="97.5746%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.3086%" y="1237" width="0.0801%" height="15" fill="rgb(207,111,4)" fg:x="6074" fg:w="5"/><text x="97.5586%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.3086%" y="1221" width="0.0801%" height="15" fill="rgb(230,52,42)" fg:x="6074" fg:w="5"/><text x="97.5586%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (5 samples, 0.08%)</title><rect x="97.3086%" y="1205" width="0.0801%" height="15" fill="rgb(252,178,50)" fg:x="6074" fg:w="5"/><text x="97.5586%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.3566%" y="1189" width="0.0320%" height="15" fill="rgb(234,46,35)" fg:x="6077" fg:w="2"/><text x="97.6066%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.3566%" y="1173" width="0.0320%" height="15" fill="rgb(228,69,37)" fg:x="6077" fg:w="2"/><text x="97.6066%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.3566%" y="1157" width="0.0320%" height="15" fill="rgb(221,21,11)" fg:x="6077" fg:w="2"/><text x="97.6066%" y="1167.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="97.3566%" y="1141" width="0.0320%" height="15" fill="rgb(223,56,9)" fg:x="6077" fg:w="2"/><text x="97.6066%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.3887%" y="1221" width="0.0160%" height="15" fill="rgb(234,30,19)" fg:x="6079" fg:w="1"/><text x="97.6387%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.3887%" y="1205" width="0.0160%" height="15" fill="rgb(211,64,54)" fg:x="6079" fg:w="1"/><text x="97.6387%" y="1215.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.3887%" y="1189" width="0.0160%" height="15" fill="rgb(250,189,5)" fg:x="6079" fg:w="1"/><text x="97.6387%" y="1199.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.3887%" y="1173" width="0.0160%" height="15" fill="rgb(214,180,13)" fg:x="6079" fg:w="1"/><text x="97.6387%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4047%" y="1205" width="0.0160%" height="15" fill="rgb(238,40,40)" fg:x="6080" fg:w="1"/><text x="97.6547%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4047%" y="1189" width="0.0160%" height="15" fill="rgb(214,101,38)" fg:x="6080" fg:w="1"/><text x="97.6547%" y="1199.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.4047%" y="1173" width="0.0160%" height="15" fill="rgb(242,65,53)" fg:x="6080" fg:w="1"/><text x="97.6547%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4047%" y="1157" width="0.0160%" height="15" fill="rgb(230,22,45)" fg:x="6080" fg:w="1"/><text x="97.6547%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4047%" y="1141" width="0.0160%" height="15" fill="rgb(223,77,1)" fg:x="6080" fg:w="1"/><text x="97.6547%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.4047%" y="1125" width="0.0160%" height="15" fill="rgb(227,33,37)" fg:x="6080" fg:w="1"/><text x="97.6547%" y="1135.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (157 samples, 2.52%)</title><rect x="94.9375%" y="1301" width="2.5152%" height="15" fill="rgb(224,148,39)" fg:x="5926" fg:w="157"/><text x="95.1875%" y="1311.50">no..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (15 samples, 0.24%)</title><rect x="97.2124%" y="1285" width="0.2403%" height="15" fill="rgb(232,212,39)" fg:x="6068" fg:w="15"/><text x="97.4624%" y="1295.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (15 samples, 0.24%)</title><rect x="97.2124%" y="1269" width="0.2403%" height="15" fill="rgb(251,172,7)" fg:x="6068" fg:w="15"/><text x="97.4624%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (9 samples, 0.14%)</title><rect x="97.3086%" y="1253" width="0.1442%" height="15" fill="rgb(219,39,9)" fg:x="6074" fg:w="9"/><text x="97.5586%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.06%)</title><rect x="97.3887%" y="1237" width="0.0641%" height="15" fill="rgb(228,118,14)" fg:x="6079" fg:w="4"/><text x="97.6387%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.4047%" y="1221" width="0.0481%" height="15" fill="rgb(207,140,10)" fg:x="6080" fg:w="3"/><text x="97.6547%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.4207%" y="1205" width="0.0320%" height="15" fill="rgb(227,111,53)" fg:x="6081" fg:w="2"/><text x="97.6707%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.4207%" y="1189" width="0.0320%" height="15" fill="rgb(216,165,16)" fg:x="6081" fg:w="2"/><text x="97.6707%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.4207%" y="1173" width="0.0320%" height="15" fill="rgb(226,111,18)" fg:x="6081" fg:w="2"/><text x="97.6707%" y="1183.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="97.4207%" y="1157" width="0.0320%" height="15" fill="rgb(251,27,17)" fg:x="6081" fg:w="2"/><text x="97.6707%" y="1167.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.03%)</title><rect x="97.4207%" y="1141" width="0.0320%" height="15" fill="rgb(254,69,9)" fg:x="6081" fg:w="2"/><text x="97.6707%" y="1151.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (165 samples, 2.64%)</title><rect x="94.8414%" y="1317" width="2.6434%" height="15" fill="rgb(234,140,37)" fg:x="5920" fg:w="165"/><text x="95.0914%" y="1327.50">no..</text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (2 samples, 0.03%)</title><rect x="97.4527%" y="1301" width="0.0320%" height="15" fill="rgb(220,93,8)" fg:x="6083" fg:w="2"/><text x="97.7027%" y="1311.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (2 samples, 0.03%)</title><rect x="97.4527%" y="1285" width="0.0320%" height="15" fill="rgb(236,113,3)" fg:x="6083" fg:w="2"/><text x="97.7027%" y="1295.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (2 samples, 0.03%)</title><rect x="97.4527%" y="1269" width="0.0320%" height="15" fill="rgb(234,108,23)" fg:x="6083" fg:w="2"/><text x="97.7027%" y="1279.50"></text></g><g><title>operator&lt;(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.02%)</title><rect x="97.4848%" y="1301" width="0.0160%" height="15" fill="rgb(205,114,34)" fg:x="6085" fg:w="1"/><text x="97.7348%" y="1311.50"></text></g><g><title>node::CBlockIndexWorkComparator::operator (2 samples, 0.03%)</title><rect x="97.4848%" y="1317" width="0.0320%" height="15" fill="rgb(236,200,45)" fg:x="6085" fg:w="2"/><text x="97.7348%" y="1327.50"></text></g><g><title>operator&gt;(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.02%)</title><rect x="97.5008%" y="1301" width="0.0160%" height="15" fill="rgb(227,194,29)" fg:x="6086" fg:w="1"/><text x="97.7508%" y="1311.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (1 samples, 0.02%)</title><rect x="97.5008%" y="1285" width="0.0160%" height="15" fill="rgb(250,76,42)" fg:x="6086" fg:w="1"/><text x="97.7508%" y="1295.50"></text></g><g><title>util::SignalInterrupt::operator bool (2 samples, 0.03%)</title><rect x="97.5168%" y="1317" width="0.0320%" height="15" fill="rgb(208,128,8)" fg:x="6087" fg:w="2"/><text x="97.7668%" y="1327.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (3 samples, 0.05%)</title><rect x="97.5489%" y="1221" width="0.0481%" height="15" fill="rgb(229,209,35)" fg:x="6089" fg:w="3"/><text x="97.7989%" y="1231.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (3 samples, 0.05%)</title><rect x="97.5489%" y="1205" width="0.0481%" height="15" fill="rgb(215,39,53)" fg:x="6089" fg:w="3"/><text x="97.7989%" y="1215.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.5489%" y="1189" width="0.0481%" height="15" fill="rgb(219,123,41)" fg:x="6089" fg:w="3"/><text x="97.7989%" y="1199.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.5489%" y="1173" width="0.0481%" height="15" fill="rgb(212,158,18)" fg:x="6089" fg:w="3"/><text x="97.7989%" y="1183.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.5489%" y="1157" width="0.0481%" height="15" fill="rgb(234,196,53)" fg:x="6089" fg:w="3"/><text x="97.7989%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.5489%" y="1285" width="0.0801%" height="15" fill="rgb(210,139,12)" fg:x="6089" fg:w="5"/><text x="97.7989%" y="1295.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.5489%" y="1269" width="0.0801%" height="15" fill="rgb(220,116,54)" fg:x="6089" fg:w="5"/><text x="97.7989%" y="1279.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.5489%" y="1253" width="0.0801%" height="15" fill="rgb(247,103,28)" fg:x="6089" fg:w="5"/><text x="97.7989%" y="1263.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (5 samples, 0.08%)</title><rect x="97.5489%" y="1237" width="0.0801%" height="15" fill="rgb(253,156,45)" fg:x="6089" fg:w="5"/><text x="97.7989%" y="1247.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.03%)</title><rect x="97.5969%" y="1221" width="0.0320%" height="15" fill="rgb(237,157,52)" fg:x="6092" fg:w="2"/><text x="97.8469%" y="1231.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.6290%" y="1221" width="0.0160%" height="15" fill="rgb(253,112,16)" fg:x="6094" fg:w="1"/><text x="97.8790%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.06%)</title><rect x="97.6290%" y="1269" width="0.0641%" height="15" fill="rgb(234,70,18)" fg:x="6094" fg:w="4"/><text x="97.8790%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.06%)</title><rect x="97.6290%" y="1253" width="0.0641%" height="15" fill="rgb(247,138,19)" fg:x="6094" fg:w="4"/><text x="97.8790%" y="1263.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (4 samples, 0.06%)</title><rect x="97.6290%" y="1237" width="0.0641%" height="15" fill="rgb(207,171,1)" fg:x="6094" fg:w="4"/><text x="97.8790%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.6450%" y="1221" width="0.0481%" height="15" fill="rgb(239,213,3)" fg:x="6095" fg:w="3"/><text x="97.8950%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.6450%" y="1205" width="0.0481%" height="15" fill="rgb(226,112,4)" fg:x="6095" fg:w="3"/><text x="97.8950%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.6450%" y="1189" width="0.0481%" height="15" fill="rgb(252,170,12)" fg:x="6095" fg:w="3"/><text x="97.8950%" y="1199.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="97.6610%" y="1173" width="0.0320%" height="15" fill="rgb(241,106,13)" fg:x="6096" fg:w="2"/><text x="97.9110%" y="1183.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.6930%" y="1269" width="0.0160%" height="15" fill="rgb(225,73,23)" fg:x="6098" fg:w="1"/><text x="97.9430%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.7091%" y="1253" width="0.0481%" height="15" fill="rgb(251,227,29)" fg:x="6099" fg:w="3"/><text x="97.9591%" y="1263.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.7091%" y="1237" width="0.0481%" height="15" fill="rgb(237,144,13)" fg:x="6099" fg:w="3"/><text x="97.9591%" y="1247.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (3 samples, 0.05%)</title><rect x="97.7091%" y="1221" width="0.0481%" height="15" fill="rgb(232,106,46)" fg:x="6099" fg:w="3"/><text x="97.9591%" y="1231.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (3 samples, 0.05%)</title><rect x="97.7091%" y="1205" width="0.0481%" height="15" fill="rgb(245,154,53)" fg:x="6099" fg:w="3"/><text x="97.9591%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7571%" y="1237" width="0.0160%" height="15" fill="rgb(212,119,47)" fg:x="6102" fg:w="1"/><text x="98.0071%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7571%" y="1221" width="0.0160%" height="15" fill="rgb(253,135,25)" fg:x="6102" fg:w="1"/><text x="98.0071%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.7571%" y="1205" width="0.0160%" height="15" fill="rgb(253,208,39)" fg:x="6102" fg:w="1"/><text x="98.0071%" y="1215.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.7571%" y="1189" width="0.0160%" height="15" fill="rgb(226,64,12)" fg:x="6102" fg:w="1"/><text x="98.0071%" y="1199.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.7731%" y="1205" width="0.0160%" height="15" fill="rgb(214,162,37)" fg:x="6103" fg:w="1"/><text x="98.0231%" y="1215.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.7892%" y="1141" width="0.0160%" height="15" fill="rgb(250,104,5)" fg:x="6104" fg:w="1"/><text x="98.0392%" y="1151.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (194 samples, 3.11%)</title><rect x="94.7132%" y="1333" width="3.1080%" height="15" fill="rgb(220,202,50)" fg:x="5912" fg:w="194"/><text x="94.9632%" y="1343.50">Cha..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (17 samples, 0.27%)</title><rect x="97.5489%" y="1317" width="0.2723%" height="15" fill="rgb(248,67,38)" fg:x="6089" fg:w="17"/><text x="97.7989%" y="1327.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (17 samples, 0.27%)</title><rect x="97.5489%" y="1301" width="0.2723%" height="15" fill="rgb(242,94,35)" fg:x="6089" fg:w="17"/><text x="97.7989%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (12 samples, 0.19%)</title><rect x="97.6290%" y="1285" width="0.1922%" height="15" fill="rgb(209,78,37)" fg:x="6094" fg:w="12"/><text x="97.8790%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (7 samples, 0.11%)</title><rect x="97.7091%" y="1269" width="0.1121%" height="15" fill="rgb(230,126,47)" fg:x="6099" fg:w="7"/><text x="97.9591%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.06%)</title><rect x="97.7571%" y="1253" width="0.0641%" height="15" fill="rgb(222,110,35)" fg:x="6102" fg:w="4"/><text x="98.0071%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.7731%" y="1237" width="0.0481%" height="15" fill="rgb(233,154,20)" fg:x="6103" fg:w="3"/><text x="98.0231%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.7731%" y="1221" width="0.0481%" height="15" fill="rgb(223,53,50)" fg:x="6103" fg:w="3"/><text x="98.0231%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.7892%" y="1205" width="0.0320%" height="15" fill="rgb(251,27,26)" fg:x="6104" fg:w="2"/><text x="98.0392%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.7892%" y="1189" width="0.0320%" height="15" fill="rgb(223,189,16)" fg:x="6104" fg:w="2"/><text x="98.0392%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.7892%" y="1173" width="0.0320%" height="15" fill="rgb(207,5,54)" fg:x="6104" fg:w="2"/><text x="98.0392%" y="1183.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="97.7892%" y="1157" width="0.0320%" height="15" fill="rgb(254,124,50)" fg:x="6104" fg:w="2"/><text x="98.0392%" y="1167.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.8052%" y="1141" width="0.0160%" height="15" fill="rgb(253,193,24)" fg:x="6105" fg:w="1"/><text x="98.0552%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.8052%" y="1125" width="0.0160%" height="15" fill="rgb(235,170,24)" fg:x="6105" fg:w="1"/><text x="98.0552%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.8052%" y="1109" width="0.0160%" height="15" fill="rgb(222,212,52)" fg:x="6105" fg:w="1"/><text x="98.0552%" y="1119.50"></text></g><g><title>any_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (2 samples, 0.03%)</title><rect x="97.8212%" y="1333" width="0.0320%" height="15" fill="rgb(223,17,45)" fg:x="6106" fg:w="2"/><text x="98.0712%" y="1343.50"></text></g><g><title>none_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (2 samples, 0.03%)</title><rect x="97.8212%" y="1317" width="0.0320%" height="15" fill="rgb(227,103,26)" fg:x="6106" fg:w="2"/><text x="98.0712%" y="1327.50"></text></g><g><title>find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (2 samples, 0.03%)</title><rect x="97.8212%" y="1301" width="0.0320%" height="15" fill="rgb(251,151,25)" fg:x="6106" fg:w="2"/><text x="98.0712%" y="1311.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="97.8212%" y="1285" width="0.0320%" height="15" fill="rgb(248,144,29)" fg:x="6106" fg:w="2"/><text x="98.0712%" y="1295.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="97.8212%" y="1269" width="0.0320%" height="15" fill="rgb(245,97,16)" fg:x="6106" fg:w="2"/><text x="98.0712%" y="1279.50"></text></g><g><title>operator (2 samples, 0.03%)</title><rect x="97.8212%" y="1253" width="0.0320%" height="15" fill="rgb(220,200,29)" fg:x="6106" fg:w="2"/><text x="98.0712%" y="1263.50"></text></g><g><title>node::CompleteChainstateInitialization (2 samples, 0.03%)</title><rect x="97.8212%" y="1237" width="0.0320%" height="15" fill="rgb(206,38,29)" fg:x="6106" fg:w="2"/><text x="98.0712%" y="1247.50"></text></g><g><title>Chainstate::NeedsRedownload (2 samples, 0.03%)</title><rect x="97.8212%" y="1221" width="0.0320%" height="15" fill="rgb(245,19,52)" fg:x="6106" fg:w="2"/><text x="98.0712%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="97.8533%" y="1333" width="0.0160%" height="15" fill="rgb(205,67,43)" fg:x="6108" fg:w="1"/><text x="98.1033%" y="1343.50"></text></g><g><title>operator (206 samples, 3.30%)</title><rect x="94.5851%" y="1397" width="3.3002%" height="15" fill="rgb(217,128,23)" fg:x="5904" fg:w="206"/><text x="94.8351%" y="1407.50">ope..</text></g><g><title>InitAndLoadChainstate (206 samples, 3.30%)</title><rect x="94.5851%" y="1381" width="3.3002%" height="15" fill="rgb(210,109,28)" fg:x="5904" fg:w="206"/><text x="94.8351%" y="1391.50">Ini..</text></g><g><title>node::LoadChainstate (206 samples, 3.30%)</title><rect x="94.5851%" y="1365" width="3.3002%" height="15" fill="rgb(233,181,7)" fg:x="5904" fg:w="206"/><text x="94.8351%" y="1375.50">nod..</text></g><g><title>node::CompleteChainstateInitialization (205 samples, 3.28%)</title><rect x="94.6011%" y="1349" width="3.2842%" height="15" fill="rgb(244,11,22)" fg:x="5905" fg:w="205"/><text x="94.8511%" y="1359.50">nod..</text></g><g><title>util::SignalInterrupt::operator bool (1 samples, 0.02%)</title><rect x="97.8693%" y="1333" width="0.0160%" height="15" fill="rgb(205,124,54)" fg:x="6109" fg:w="1"/><text x="98.1193%" y="1343.50"></text></g><g><title>main (207 samples, 3.32%)</title><rect x="94.5851%" y="1445" width="3.3162%" height="15" fill="rgb(218,21,27)" fg:x="5904" fg:w="207"/><text x="94.8351%" y="1455.50">main</text></g><g><title>AppInitMain (207 samples, 3.32%)</title><rect x="94.5851%" y="1429" width="3.3162%" height="15" fill="rgb(224,153,33)" fg:x="5904" fg:w="207"/><text x="94.8351%" y="1439.50">App..</text></g><g><title>InitAndLoadChainstate (207 samples, 3.32%)</title><rect x="94.5851%" y="1413" width="3.3162%" height="15" fill="rgb(240,219,28)" fg:x="5904" fg:w="207"/><text x="94.8351%" y="1423.50">Ini..</text></g><g><title>std::__detail::_MakeUniq&lt;ChainstateManager&gt;::__single_object std::make_unique&lt;ChainstateManager, util::SignalInterrupt&amp;, kernel::ChainstateManagerOpts&amp;, kernel::BlockManagerOpts&amp;&gt; (1 samples, 0.02%)</title><rect x="97.8853%" y="1397" width="0.0160%" height="15" fill="rgb(214,80,29)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1407.50"></text></g><g><title>ChainstateManager::ChainstateManager (1 samples, 0.02%)</title><rect x="97.8853%" y="1381" width="0.0160%" height="15" fill="rgb(247,148,44)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1391.50"></text></g><g><title>ValidationCache::ValidationCache (1 samples, 0.02%)</title><rect x="97.8853%" y="1365" width="0.0160%" height="15" fill="rgb(243,110,30)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1375.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup_bytes (1 samples, 0.02%)</title><rect x="97.8853%" y="1349" width="0.0160%" height="15" fill="rgb(243,173,41)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1359.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup (1 samples, 0.02%)</title><rect x="97.8853%" y="1333" width="0.0160%" height="15" fill="rgb(225,160,47)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1343.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="97.8853%" y="1317" width="0.0160%" height="15" fill="rgb(215,44,21)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1327.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="97.8853%" y="1301" width="0.0160%" height="15" fill="rgb(248,90,3)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1311.50"></text></g><g><title>uint256* std::__uninitialized_default_n_a&lt;uint256*, unsigned long, uint256&gt; (1 samples, 0.02%)</title><rect x="97.8853%" y="1285" width="0.0160%" height="15" fill="rgb(220,196,49)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1295.50"></text></g><g><title>uint256* std::__uninitialized_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="97.8853%" y="1269" width="0.0160%" height="15" fill="rgb(217,138,14)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1279.50"></text></g><g><title>uint256* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="97.8853%" y="1253" width="0.0160%" height="15" fill="rgb(219,111,20)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1263.50"></text></g><g><title>void std::_Construct&lt;uint256&gt; (1 samples, 0.02%)</title><rect x="97.8853%" y="1237" width="0.0160%" height="15" fill="rgb(218,114,4)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1247.50"></text></g><g><title>uint256::uint256 (1 samples, 0.02%)</title><rect x="97.8853%" y="1221" width="0.0160%" height="15" fill="rgb(238,133,3)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1231.50"></text></g><g><title>base_blob&lt;256u&gt;::base_blob (1 samples, 0.02%)</title><rect x="97.8853%" y="1205" width="0.0160%" height="15" fill="rgb(224,95,0)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1215.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="97.8853%" y="1189" width="0.0160%" height="15" fill="rgb(220,169,35)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1173" width="0.0160%" height="15" fill="rgb(242,116,47)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1157" width="0.0160%" height="15" fill="rgb(251,42,20)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1141" width="0.0160%" height="15" fill="rgb(234,7,34)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1125" width="0.0160%" height="15" fill="rgb(243,208,13)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1109" width="0.0160%" height="15" fill="rgb(227,33,28)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1093" width="0.0160%" height="15" fill="rgb(250,47,37)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1077" width="0.0160%" height="15" fill="rgb(235,111,52)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1061" width="0.0160%" height="15" fill="rgb(223,64,28)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1045" width="0.0160%" height="15" fill="rgb(236,67,22)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8853%" y="1029" width="0.0160%" height="15" fill="rgb(243,79,24)" fg:x="6110" fg:w="1"/><text x="98.1353%" y="1039.50"></text></g><g><title>_start (220 samples, 3.52%)</title><rect x="94.4409%" y="1509" width="3.5245%" height="15" fill="rgb(241,225,22)" fg:x="5895" fg:w="220"/><text x="94.6909%" y="1519.50">_st..</text></g><g><title>__libc_start_main@@GLIBC_2.34 (220 samples, 3.52%)</title><rect x="94.4409%" y="1493" width="3.5245%" height="15" fill="rgb(228,214,26)" fg:x="5895" fg:w="220"/><text x="94.6909%" y="1503.50">__l..</text></g><g><title>__libc_start_call_main (220 samples, 3.52%)</title><rect x="94.4409%" y="1477" width="3.5245%" height="15" fill="rgb(219,84,52)" fg:x="5895" fg:w="220"/><text x="94.6909%" y="1487.50">__l..</text></g><g><title>main (220 samples, 3.52%)</title><rect x="94.4409%" y="1461" width="3.5245%" height="15" fill="rgb(220,12,22)" fg:x="5895" fg:w="220"/><text x="94.6909%" y="1471.50">main</text></g><g><title>util::SignalInterrupt::wait (4 samples, 0.06%)</title><rect x="97.9013%" y="1445" width="0.0641%" height="15" fill="rgb(219,9,49)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1455.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.06%)</title><rect x="97.9013%" y="1429" width="0.0641%" height="15" fill="rgb(237,40,43)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1439.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.06%)</title><rect x="97.9013%" y="1413" width="0.0641%" height="15" fill="rgb(212,189,32)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1423.50"></text></g><g><title>read (4 samples, 0.06%)</title><rect x="97.9013%" y="1397" width="0.0641%" height="15" fill="rgb(247,48,9)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1381" width="0.0641%" height="15" fill="rgb(247,112,3)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1365" width="0.0641%" height="15" fill="rgb(243,110,18)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1349" width="0.0641%" height="15" fill="rgb(233,223,44)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1333" width="0.0641%" height="15" fill="rgb(245,160,20)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1317" width="0.0641%" height="15" fill="rgb(225,37,1)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1301" width="0.0641%" height="15" fill="rgb(253,227,39)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1285" width="0.0641%" height="15" fill="rgb(240,179,26)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1269" width="0.0641%" height="15" fill="rgb(237,212,23)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1253" width="0.0641%" height="15" fill="rgb(221,38,11)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1237" width="0.0641%" height="15" fill="rgb(215,85,6)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1221" width="0.0641%" height="15" fill="rgb(239,64,14)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1205" width="0.0641%" height="15" fill="rgb(215,150,32)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1189" width="0.0641%" height="15" fill="rgb(238,15,13)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1173" width="0.0641%" height="15" fill="rgb(251,87,8)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="97.9013%" y="1157" width="0.0641%" height="15" fill="rgb(206,86,1)" fg:x="6111" fg:w="4"/><text x="98.1513%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.9494%" y="1141" width="0.0160%" height="15" fill="rgb(208,151,45)" fg:x="6114" fg:w="1"/><text x="98.1994%" y="1151.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (3 samples, 0.05%)</title><rect x="97.9654%" y="1509" width="0.0481%" height="15" fill="rgb(231,181,24)" fg:x="6115" fg:w="3"/><text x="98.2154%" y="1519.50"></text></g><g><title>crc32c::ExtendSse42 (3 samples, 0.05%)</title><rect x="98.0135%" y="1509" width="0.0481%" height="15" fill="rgb(240,106,29)" fg:x="6118" fg:w="3"/><text x="98.2635%" y="1519.50"></text></g><g><title>_mm_crc32_u8 (1 samples, 0.02%)</title><rect x="98.0455%" y="1493" width="0.0160%" height="15" fill="rgb(227,166,11)" fg:x="6120" fg:w="1"/><text x="98.2955%" y="1503.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="98.0615%" y="1509" width="0.0160%" height="15" fill="rgb(254,14,34)" fg:x="6121" fg:w="1"/><text x="98.3115%" y="1519.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="98.0615%" y="1493" width="0.0160%" height="15" fill="rgb(223,222,6)" fg:x="6121" fg:w="1"/><text x="98.3115%" y="1503.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="98.0615%" y="1477" width="0.0160%" height="15" fill="rgb(245,69,24)" fg:x="6121" fg:w="1"/><text x="98.3115%" y="1487.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="98.0615%" y="1461" width="0.0160%" height="15" fill="rgb(213,193,7)" fg:x="6121" fg:w="1"/><text x="98.3115%" y="1471.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="98.0615%" y="1445" width="0.0160%" height="15" fill="rgb(237,92,51)" fg:x="6121" fg:w="1"/><text x="98.3115%" y="1455.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="98.0615%" y="1429" width="0.0160%" height="15" fill="rgb(225,194,6)" fg:x="6121" fg:w="1"/><text x="98.3115%" y="1439.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="98.0615%" y="1413" width="0.0160%" height="15" fill="rgb(205,159,49)" fg:x="6121" fg:w="1"/><text x="98.3115%" y="1423.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="98.0615%" y="1397" width="0.0160%" height="15" fill="rgb(219,69,2)" fg:x="6121" fg:w="1"/><text x="98.3115%" y="1407.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="98.0615%" y="1381" width="0.0160%" height="15" fill="rgb(215,107,24)" fg:x="6121" fg:w="1"/><text x="98.3115%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="98.0775%" y="1477" width="0.0481%" height="15" fill="rgb(249,208,29)" fg:x="6122" fg:w="3"/><text x="98.3275%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.06%)</title><rect x="98.0775%" y="1509" width="0.0641%" height="15" fill="rgb(213,147,10)" fg:x="6122" fg:w="4"/><text x="98.3275%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (4 samples, 0.06%)</title><rect x="98.0775%" y="1493" width="0.0641%" height="15" fill="rgb(254,140,42)" fg:x="6122" fg:w="4"/><text x="98.3275%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.1256%" y="1477" width="0.0160%" height="15" fill="rgb(249,9,15)" fg:x="6125" fg:w="1"/><text x="98.3756%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="98.1416%" y="1509" width="0.0160%" height="15" fill="rgb(210,19,33)" fg:x="6126" fg:w="1"/><text x="98.3916%" y="1519.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="98.1416%" y="1493" width="0.0160%" height="15" fill="rgb(241,121,22)" fg:x="6126" fg:w="1"/><text x="98.3916%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="98.1576%" y="1509" width="0.0160%" height="15" fill="rgb(244,69,52)" fg:x="6127" fg:w="1"/><text x="98.4076%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1 samples, 0.02%)</title><rect x="98.1737%" y="1509" width="0.0160%" height="15" fill="rgb(244,191,54)" fg:x="6128" fg:w="1"/><text x="98.4237%" y="1519.50"></text></g><g><title>leveldb::EncodeVarint32 (6 samples, 0.10%)</title><rect x="98.1897%" y="1477" width="0.0961%" height="15" fill="rgb(250,3,53)" fg:x="6129" fg:w="6"/><text x="98.4397%" y="1487.50"></text></g><g><title>leveldb::BlockBuilder::Add (8 samples, 0.13%)</title><rect x="98.1897%" y="1509" width="0.1282%" height="15" fill="rgb(205,77,3)" fg:x="6129" fg:w="8"/><text x="98.4397%" y="1519.50"></text></g><g><title>leveldb::operator== (8 samples, 0.13%)</title><rect x="98.1897%" y="1493" width="0.1282%" height="15" fill="rgb(207,155,3)" fg:x="6129" fg:w="8"/><text x="98.4397%" y="1503.50"></text></g><g><title>leveldb::PutVarint32 (2 samples, 0.03%)</title><rect x="98.2858%" y="1477" width="0.0320%" height="15" fill="rgb(224,79,2)" fg:x="6135" fg:w="2"/><text x="98.5358%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="98.3178%" y="1493" width="0.0160%" height="15" fill="rgb(243,172,5)" fg:x="6137" fg:w="1"/><text x="98.5678%" y="1503.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (2 samples, 0.03%)</title><rect x="98.3178%" y="1509" width="0.0320%" height="15" fill="rgb(217,23,43)" fg:x="6137" fg:w="2"/><text x="98.5678%" y="1519.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="98.3339%" y="1493" width="0.0160%" height="15" fill="rgb(223,109,20)" fg:x="6138" fg:w="1"/><text x="98.5839%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="98.3339%" y="1477" width="0.0160%" height="15" fill="rgb(232,159,21)" fg:x="6138" fg:w="1"/><text x="98.5839%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="98.3339%" y="1461" width="0.0160%" height="15" fill="rgb(219,58,2)" fg:x="6138" fg:w="1"/><text x="98.5839%" y="1471.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.3339%" y="1445" width="0.0160%" height="15" fill="rgb(241,56,8)" fg:x="6138" fg:w="1"/><text x="98.5839%" y="1455.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.3339%" y="1429" width="0.0160%" height="15" fill="rgb(249,10,27)" fg:x="6138" fg:w="1"/><text x="98.5839%" y="1439.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="98.3339%" y="1413" width="0.0160%" height="15" fill="rgb(248,177,5)" fg:x="6138" fg:w="1"/><text x="98.5839%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="98.3339%" y="1397" width="0.0160%" height="15" fill="rgb(239,12,30)" fg:x="6138" fg:w="1"/><text x="98.5839%" y="1407.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="98.3499%" y="1509" width="0.0160%" height="15" fill="rgb(229,164,25)" fg:x="6139" fg:w="1"/><text x="98.5999%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="98.3499%" y="1493" width="0.0160%" height="15" fill="rgb(231,217,50)" fg:x="6139" fg:w="1"/><text x="98.5999%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="98.3499%" y="1477" width="0.0160%" height="15" fill="rgb(247,99,32)" fg:x="6139" fg:w="1"/><text x="98.5999%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.3499%" y="1461" width="0.0160%" height="15" fill="rgb(240,74,50)" fg:x="6139" fg:w="1"/><text x="98.5999%" y="1471.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.3499%" y="1445" width="0.0160%" height="15" fill="rgb(218,54,8)" fg:x="6139" fg:w="1"/><text x="98.5999%" y="1455.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="98.3499%" y="1429" width="0.0160%" height="15" fill="rgb(227,132,20)" fg:x="6139" fg:w="1"/><text x="98.5999%" y="1439.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (1 samples, 0.02%)</title><rect x="98.3499%" y="1413" width="0.0160%" height="15" fill="rgb(232,134,12)" fg:x="6139" fg:w="1"/><text x="98.5999%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (1 samples, 0.02%)</title><rect x="98.3659%" y="1493" width="0.0160%" height="15" fill="rgb(250,129,18)" fg:x="6140" fg:w="1"/><text x="98.6159%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::Add (2 samples, 0.03%)</title><rect x="98.3659%" y="1509" width="0.0320%" height="15" fill="rgb(232,129,47)" fg:x="6140" fg:w="2"/><text x="98.6159%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="98.3819%" y="1493" width="0.0160%" height="15" fill="rgb(230,31,40)" fg:x="6141" fg:w="1"/><text x="98.6319%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="98.3819%" y="1477" width="0.0160%" height="15" fill="rgb(232,126,10)" fg:x="6141" fg:w="1"/><text x="98.6319%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="98.3819%" y="1461" width="0.0160%" height="15" fill="rgb(205,46,31)" fg:x="6141" fg:w="1"/><text x="98.6319%" y="1471.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="98.3979%" y="1509" width="0.0160%" height="15" fill="rgb(232,37,37)" fg:x="6142" fg:w="1"/><text x="98.6479%" y="1519.50"></text></g><g><title>NewWritableFile (1 samples, 0.02%)</title><rect x="98.4140%" y="1253" width="0.0160%" height="15" fill="rgb(240,91,16)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (1 samples, 0.02%)</title><rect x="98.4140%" y="1237" width="0.0160%" height="15" fill="rgb(224,160,9)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1247.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="98.4140%" y="1221" width="0.0160%" height="15" fill="rgb(215,116,14)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1205" width="0.0160%" height="15" fill="rgb(235,46,36)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1189" width="0.0160%" height="15" fill="rgb(238,39,28)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1173" width="0.0160%" height="15" fill="rgb(242,125,29)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1157" width="0.0160%" height="15" fill="rgb(238,211,30)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1141" width="0.0160%" height="15" fill="rgb(227,201,28)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1125" width="0.0160%" height="15" fill="rgb(238,77,29)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1109" width="0.0160%" height="15" fill="rgb(213,221,40)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1093" width="0.0160%" height="15" fill="rgb(226,220,44)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4140%" y="1077" width="0.0160%" height="15" fill="rgb(228,90,23)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1061" width="0.0160%" height="15" fill="rgb(235,72,29)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1045" width="0.0160%" height="15" fill="rgb(248,117,39)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1029" width="0.0160%" height="15" fill="rgb(225,43,28)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4140%" y="1013" width="0.0160%" height="15" fill="rgb(240,93,4)" fg:x="6143" fg:w="1"/><text x="98.6640%" y="1023.50"></text></g><g><title>Sync (1 samples, 0.02%)</title><rect x="98.4300%" y="1253" width="0.0160%" height="15" fill="rgb(234,178,27)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1 samples, 0.02%)</title><rect x="98.4300%" y="1237" width="0.0160%" height="15" fill="rgb(254,88,22)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1247.50"></text></g><g><title>fdatasync (1 samples, 0.02%)</title><rect x="98.4300%" y="1221" width="0.0160%" height="15" fill="rgb(240,206,50)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4300%" y="1205" width="0.0160%" height="15" fill="rgb(249,103,8)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4300%" y="1189" width="0.0160%" height="15" fill="rgb(241,178,36)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4300%" y="1173" width="0.0160%" height="15" fill="rgb(246,110,15)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4300%" y="1157" width="0.0160%" height="15" fill="rgb(207,14,43)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4300%" y="1141" width="0.0160%" height="15" fill="rgb(253,219,19)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4300%" y="1125" width="0.0160%" height="15" fill="rgb(216,126,5)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4300%" y="1109" width="0.0160%" height="15" fill="rgb(218,78,42)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4300%" y="1093" width="0.0160%" height="15" fill="rgb(215,154,40)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4300%" y="1077" width="0.0160%" height="15" fill="rgb(235,129,32)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4300%" y="1061" width="0.0160%" height="15" fill="rgb(218,51,8)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4300%" y="1045" width="0.0160%" height="15" fill="rgb(245,48,4)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4300%" y="1029" width="0.0160%" height="15" fill="rgb(250,175,12)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4300%" y="1013" width="0.0160%" height="15" fill="rgb(237,95,40)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4300%" y="997" width="0.0160%" height="15" fill="rgb(244,120,0)" fg:x="6144" fg:w="1"/><text x="98.6800%" y="1007.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.06%)</title><rect x="98.4460%" y="1221" width="0.0641%" height="15" fill="rgb(241,19,42)" fg:x="6145" fg:w="4"/><text x="98.6960%" y="1231.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.4941%" y="1205" width="0.0160%" height="15" fill="rgb(217,174,48)" fg:x="6148" fg:w="1"/><text x="98.7441%" y="1215.50"></text></g><g><title>leveldb::Slice::operator[] (1 samples, 0.02%)</title><rect x="98.5101%" y="1221" width="0.0160%" height="15" fill="rgb(239,36,38)" fg:x="6149" fg:w="1"/><text x="98.7601%" y="1231.50"></text></g><g><title>leveldb::BlockBuilder::Add (7 samples, 0.11%)</title><rect x="98.4460%" y="1237" width="0.1121%" height="15" fill="rgb(220,63,49)" fg:x="6145" fg:w="7"/><text x="98.6960%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.03%)</title><rect x="98.5261%" y="1221" width="0.0320%" height="15" fill="rgb(240,101,13)" fg:x="6150" fg:w="2"/><text x="98.7761%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="98.5261%" y="1205" width="0.0320%" height="15" fill="rgb(209,184,51)" fg:x="6150" fg:w="2"/><text x="98.7761%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.5421%" y="1189" width="0.0160%" height="15" fill="rgb(206,136,39)" fg:x="6151" fg:w="1"/><text x="98.7921%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.5421%" y="1173" width="0.0160%" height="15" fill="rgb(254,47,45)" fg:x="6151" fg:w="1"/><text x="98.7921%" y="1183.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.02%)</title><rect x="98.5582%" y="1237" width="0.0160%" height="15" fill="rgb(252,103,20)" fg:x="6152" fg:w="1"/><text x="98.8082%" y="1247.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="98.5582%" y="1221" width="0.0160%" height="15" fill="rgb(230,69,12)" fg:x="6152" fg:w="1"/><text x="98.8082%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="98.5582%" y="1205" width="0.0160%" height="15" fill="rgb(219,2,28)" fg:x="6152" fg:w="1"/><text x="98.8082%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="98.5582%" y="1189" width="0.0160%" height="15" fill="rgb(210,9,12)" fg:x="6152" fg:w="1"/><text x="98.8082%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="98.5582%" y="1173" width="0.0160%" height="15" fill="rgb(235,99,33)" fg:x="6152" fg:w="1"/><text x="98.8082%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="98.5582%" y="1157" width="0.0160%" height="15" fill="rgb(230,11,38)" fg:x="6152" fg:w="1"/><text x="98.8082%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="98.5582%" y="1141" width="0.0160%" height="15" fill="rgb(217,129,0)" fg:x="6152" fg:w="1"/><text x="98.8082%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="98.5742%" y="1173" width="0.0160%" height="15" fill="rgb(222,198,4)" fg:x="6153" fg:w="1"/><text x="98.8242%" y="1183.50"></text></g><g><title>CreateFilter (2 samples, 0.03%)</title><rect x="98.5742%" y="1205" width="0.0320%" height="15" fill="rgb(246,170,27)" fg:x="6153" fg:w="2"/><text x="98.8242%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (2 samples, 0.03%)</title><rect x="98.5742%" y="1189" width="0.0320%" height="15" fill="rgb(229,17,28)" fg:x="6153" fg:w="2"/><text x="98.8242%" y="1199.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="98.5902%" y="1173" width="0.0160%" height="15" fill="rgb(233,198,48)" fg:x="6154" fg:w="1"/><text x="98.8402%" y="1183.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (3 samples, 0.05%)</title><rect x="98.5742%" y="1237" width="0.0481%" height="15" fill="rgb(238,103,23)" fg:x="6153" fg:w="3"/><text x="98.8242%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (3 samples, 0.05%)</title><rect x="98.5742%" y="1221" width="0.0481%" height="15" fill="rgb(206,91,41)" fg:x="6153" fg:w="3"/><text x="98.8242%" y="1231.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="98.6062%" y="1205" width="0.0160%" height="15" fill="rgb(227,34,25)" fg:x="6155" fg:w="1"/><text x="98.8562%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.6222%" y="1237" width="0.0160%" height="15" fill="rgb(210,110,44)" fg:x="6156" fg:w="1"/><text x="98.8722%" y="1247.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.02%)</title><rect x="98.6222%" y="1221" width="0.0160%" height="15" fill="rgb(216,189,8)" fg:x="6156" fg:w="1"/><text x="98.8722%" y="1231.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.6703%" y="1045" width="0.0160%" height="15" fill="rgb(234,9,46)" fg:x="6159" fg:w="1"/><text x="98.9203%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.6703%" y="1029" width="0.0160%" height="15" fill="rgb(251,200,5)" fg:x="6159" fg:w="1"/><text x="98.9203%" y="1039.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="98.6703%" y="1061" width="0.0320%" height="15" fill="rgb(238,165,37)" fg:x="6159" fg:w="2"/><text x="98.9203%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6863%" y="1045" width="0.0160%" height="15" fill="rgb(232,77,38)" fg:x="6160" fg:w="1"/><text x="98.9363%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6863%" y="1029" width="0.0160%" height="15" fill="rgb(253,179,33)" fg:x="6160" fg:w="1"/><text x="98.9363%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6863%" y="1013" width="0.0160%" height="15" fill="rgb(240,13,35)" fg:x="6160" fg:w="1"/><text x="98.9363%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6863%" y="997" width="0.0160%" height="15" fill="rgb(242,150,49)" fg:x="6160" fg:w="1"/><text x="98.9363%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6863%" y="981" width="0.0160%" height="15" fill="rgb(237,176,28)" fg:x="6160" fg:w="1"/><text x="98.9363%" y="991.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (20 samples, 0.32%)</title><rect x="98.4140%" y="1285" width="0.3204%" height="15" fill="rgb(214,176,33)" fg:x="6143" fg:w="20"/><text x="98.6640%" y="1295.50"></text></g><g><title>leveldb::BuildTable (20 samples, 0.32%)</title><rect x="98.4140%" y="1269" width="0.3204%" height="15" fill="rgb(214,25,12)" fg:x="6143" fg:w="20"/><text x="98.6640%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (18 samples, 0.29%)</title><rect x="98.4460%" y="1253" width="0.2884%" height="15" fill="rgb(238,190,20)" fg:x="6145" fg:w="18"/><text x="98.6960%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Flush (6 samples, 0.10%)</title><rect x="98.6383%" y="1237" width="0.0961%" height="15" fill="rgb(208,11,19)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1247.50"></text></g><g><title>Flush (6 samples, 0.10%)</title><rect x="98.6383%" y="1221" width="0.0961%" height="15" fill="rgb(239,90,4)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1231.50"></text></g><g><title>FlushBuffer (6 samples, 0.10%)</title><rect x="98.6383%" y="1205" width="0.0961%" height="15" fill="rgb(248,110,3)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (6 samples, 0.10%)</title><rect x="98.6383%" y="1189" width="0.0961%" height="15" fill="rgb(210,41,30)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1199.50"></text></g><g><title>__GI___libc_write (6 samples, 0.10%)</title><rect x="98.6383%" y="1173" width="0.0961%" height="15" fill="rgb(239,36,8)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1183.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.6383%" y="1157" width="0.0961%" height="15" fill="rgb(237,201,47)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.6383%" y="1141" width="0.0961%" height="15" fill="rgb(224,140,29)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.6383%" y="1125" width="0.0961%" height="15" fill="rgb(231,209,17)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.6383%" y="1109" width="0.0961%" height="15" fill="rgb(249,196,1)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1119.50"></text></g><g><title>[[ext4]] (6 samples, 0.10%)</title><rect x="98.6383%" y="1093" width="0.0961%" height="15" fill="rgb(223,207,51)" fg:x="6157" fg:w="6"/><text x="98.8883%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="98.6543%" y="1077" width="0.0801%" height="15" fill="rgb(210,14,40)" fg:x="6158" fg:w="5"/><text x="98.9043%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.7023%" y="1061" width="0.0320%" height="15" fill="rgb(250,20,52)" fg:x="6161" fg:w="2"/><text x="98.9523%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.7023%" y="1045" width="0.0320%" height="15" fill="rgb(241,46,11)" fg:x="6161" fg:w="2"/><text x="98.9523%" y="1055.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="98.7344%" y="1253" width="0.0160%" height="15" fill="rgb(219,105,5)" fg:x="6163" fg:w="1"/><text x="98.9844%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.7344%" y="1237" width="0.0160%" height="15" fill="rgb(252,77,35)" fg:x="6163" fg:w="1"/><text x="98.9844%" y="1247.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="98.7664%" y="1237" width="0.0160%" height="15" fill="rgb(243,119,2)" fg:x="6165" fg:w="1"/><text x="99.0164%" y="1247.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="98.7664%" y="1221" width="0.0160%" height="15" fill="rgb(206,82,28)" fg:x="6165" fg:w="1"/><text x="99.0164%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.05%)</title><rect x="98.7504%" y="1253" width="0.0481%" height="15" fill="rgb(227,120,12)" fg:x="6164" fg:w="3"/><text x="99.0004%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.7824%" y="1237" width="0.0160%" height="15" fill="rgb(229,134,41)" fg:x="6166" fg:w="1"/><text x="99.0324%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="98.7985%" y="1253" width="0.0160%" height="15" fill="rgb(239,96,32)" fg:x="6167" fg:w="1"/><text x="99.0485%" y="1263.50"></text></g><g><title>leveldb::Arena::Allocate (5 samples, 0.08%)</title><rect x="98.8145%" y="1221" width="0.0801%" height="15" fill="rgb(225,46,27)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1231.50"></text></g><g><title>leveldb::Arena::AllocateFallback (5 samples, 0.08%)</title><rect x="98.8145%" y="1205" width="0.0801%" height="15" fill="rgb(215,168,2)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1215.50"></text></g><g><title>leveldb::Arena::AllocateFallback (5 samples, 0.08%)</title><rect x="98.8145%" y="1189" width="0.0801%" height="15" fill="rgb(207,170,52)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1199.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (5 samples, 0.08%)</title><rect x="98.8145%" y="1173" width="0.0801%" height="15" fill="rgb(237,198,36)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1183.50"></text></g><g><title>operator new (5 samples, 0.08%)</title><rect x="98.8145%" y="1157" width="0.0801%" height="15" fill="rgb(213,27,14)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1167.50"></text></g><g><title>malloc (5 samples, 0.08%)</title><rect x="98.8145%" y="1141" width="0.0801%" height="15" fill="rgb(218,77,5)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1151.50"></text></g><g><title>_int_malloc (5 samples, 0.08%)</title><rect x="98.8145%" y="1125" width="0.0801%" height="15" fill="rgb(230,219,39)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="98.8145%" y="1109" width="0.0801%" height="15" fill="rgb(245,177,7)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="98.8145%" y="1093" width="0.0801%" height="15" fill="rgb(246,44,46)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="98.8145%" y="1077" width="0.0801%" height="15" fill="rgb(207,173,15)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="98.8145%" y="1061" width="0.0801%" height="15" fill="rgb(245,170,50)" fg:x="6168" fg:w="5"/><text x="99.0645%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="98.8305%" y="1045" width="0.0641%" height="15" fill="rgb(233,156,21)" fg:x="6169" fg:w="4"/><text x="99.0805%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.8465%" y="1029" width="0.0481%" height="15" fill="rgb(253,146,27)" fg:x="6170" fg:w="3"/><text x="99.0965%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.8625%" y="1013" width="0.0320%" height="15" fill="rgb(247,66,29)" fg:x="6171" fg:w="2"/><text x="99.1125%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.8625%" y="997" width="0.0320%" height="15" fill="rgb(218,207,26)" fg:x="6171" fg:w="2"/><text x="99.1125%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8786%" y="981" width="0.0160%" height="15" fill="rgb(234,93,26)" fg:x="6172" fg:w="1"/><text x="99.1286%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8786%" y="965" width="0.0160%" height="15" fill="rgb(214,75,48)" fg:x="6172" fg:w="1"/><text x="99.1286%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8786%" y="949" width="0.0160%" height="15" fill="rgb(229,119,22)" fg:x="6172" fg:w="1"/><text x="99.1286%" y="959.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="98.8946%" y="1221" width="0.0160%" height="15" fill="rgb(226,153,19)" fg:x="6173" fg:w="1"/><text x="99.1446%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.9106%" y="1221" width="0.0160%" height="15" fill="rgb(220,204,36)" fg:x="6174" fg:w="1"/><text x="99.1606%" y="1231.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="98.9106%" y="1205" width="0.0160%" height="15" fill="rgb(253,181,43)" fg:x="6174" fg:w="1"/><text x="99.1606%" y="1215.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="98.9106%" y="1189" width="0.0160%" height="15" fill="rgb(211,41,51)" fg:x="6174" fg:w="1"/><text x="99.1606%" y="1199.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="98.9266%" y="1205" width="0.0481%" height="15" fill="rgb(207,215,0)" fg:x="6175" fg:w="3"/><text x="99.1766%" y="1215.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.03%)</title><rect x="98.9426%" y="1189" width="0.0320%" height="15" fill="rgb(212,153,10)" fg:x="6176" fg:w="2"/><text x="99.1926%" y="1199.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="98.9587%" y="1173" width="0.0160%" height="15" fill="rgb(251,171,36)" fg:x="6177" fg:w="1"/><text x="99.2087%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (4 samples, 0.06%)</title><rect x="98.9747%" y="1205" width="0.0641%" height="15" fill="rgb(225,219,41)" fg:x="6178" fg:w="4"/><text x="99.2247%" y="1215.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.03%)</title><rect x="99.0067%" y="1189" width="0.0320%" height="15" fill="rgb(208,200,1)" fg:x="6180" fg:w="2"/><text x="99.2567%" y="1199.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.03%)</title><rect x="99.0067%" y="1173" width="0.0320%" height="15" fill="rgb(206,75,47)" fg:x="6180" fg:w="2"/><text x="99.2567%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (1 samples, 0.02%)</title><rect x="99.0388%" y="1205" width="0.0160%" height="15" fill="rgb(248,3,16)" fg:x="6182" fg:w="1"/><text x="99.2888%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="99.0388%" y="1189" width="0.0160%" height="15" fill="rgb(242,157,36)" fg:x="6182" fg:w="1"/><text x="99.2888%" y="1199.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="99.0708%" y="1173" width="0.0160%" height="15" fill="rgb(215,175,11)" fg:x="6184" fg:w="1"/><text x="99.3208%" y="1183.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="99.0708%" y="1157" width="0.0160%" height="15" fill="rgb(252,222,22)" fg:x="6184" fg:w="1"/><text x="99.3208%" y="1167.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="99.0868%" y="1173" width="0.0160%" height="15" fill="rgb(250,121,35)" fg:x="6185" fg:w="1"/><text x="99.3368%" y="1183.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="99.1029%" y="1173" width="0.0160%" height="15" fill="rgb(233,120,49)" fg:x="6186" fg:w="1"/><text x="99.3529%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="99.1349%" y="1157" width="0.0160%" height="15" fill="rgb(205,201,14)" fg:x="6188" fg:w="1"/><text x="99.3849%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="99.1669%" y="1141" width="0.0481%" height="15" fill="rgb(219,58,45)" fg:x="6190" fg:w="3"/><text x="99.4169%" y="1151.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="99.1990%" y="1125" width="0.0160%" height="15" fill="rgb(251,65,12)" fg:x="6192" fg:w="1"/><text x="99.4490%" y="1135.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="99.1990%" y="1109" width="0.0160%" height="15" fill="rgb(224,47,31)" fg:x="6192" fg:w="1"/><text x="99.4490%" y="1119.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="99.2150%" y="1141" width="0.0160%" height="15" fill="rgb(233,74,26)" fg:x="6193" fg:w="1"/><text x="99.4650%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.05%)</title><rect x="99.2310%" y="1141" width="0.0481%" height="15" fill="rgb(231,211,31)" fg:x="6194" fg:w="3"/><text x="99.4810%" y="1151.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="99.2631%" y="1125" width="0.0160%" height="15" fill="rgb(239,167,5)" fg:x="6196" fg:w="1"/><text x="99.5131%" y="1135.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="99.2631%" y="1109" width="0.0160%" height="15" fill="rgb(241,85,0)" fg:x="6196" fg:w="1"/><text x="99.5131%" y="1119.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (2 samples, 0.03%)</title><rect x="99.2791%" y="1141" width="0.0320%" height="15" fill="rgb(229,130,21)" fg:x="6197" fg:w="2"/><text x="99.5291%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="99.2951%" y="1125" width="0.0160%" height="15" fill="rgb(254,84,49)" fg:x="6198" fg:w="1"/><text x="99.5451%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.18%)</title><rect x="99.1509%" y="1157" width="0.1762%" height="15" fill="rgb(235,85,21)" fg:x="6189" fg:w="11"/><text x="99.4009%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="99.3111%" y="1141" width="0.0160%" height="15" fill="rgb(246,128,52)" fg:x="6199" fg:w="1"/><text x="99.5611%" y="1151.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="99.3271%" y="1157" width="0.0160%" height="15" fill="rgb(243,114,49)" fg:x="6200" fg:w="1"/><text x="99.5771%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (19 samples, 0.30%)</title><rect x="99.1189%" y="1173" width="0.3044%" height="15" fill="rgb(240,224,22)" fg:x="6187" fg:w="19"/><text x="99.3689%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (5 samples, 0.08%)</title><rect x="99.3432%" y="1157" width="0.0801%" height="15" fill="rgb(247,201,52)" fg:x="6201" fg:w="5"/><text x="99.5932%" y="1167.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.03%)</title><rect x="99.3912%" y="1141" width="0.0320%" height="15" fill="rgb(231,70,45)" fg:x="6204" fg:w="2"/><text x="99.6412%" y="1151.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="99.4072%" y="1125" width="0.0160%" height="15" fill="rgb(217,215,20)" fg:x="6205" fg:w="1"/><text x="99.6572%" y="1135.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (24 samples, 0.38%)</title><rect x="99.0548%" y="1189" width="0.3845%" height="15" fill="rgb(226,170,30)" fg:x="6183" fg:w="24"/><text x="99.3048%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="99.4233%" y="1173" width="0.0160%" height="15" fill="rgb(220,190,43)" fg:x="6206" fg:w="1"/><text x="99.6733%" y="1183.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (45 samples, 0.72%)</title><rect x="98.7344%" y="1285" width="0.7209%" height="15" fill="rgb(218,20,18)" fg:x="6163" fg:w="45"/><text x="98.9844%" y="1295.50"></text></g><g><title>leveldb::WriteBatch::Iterate (45 samples, 0.72%)</title><rect x="98.7344%" y="1269" width="0.7209%" height="15" fill="rgb(245,37,26)" fg:x="6163" fg:w="45"/><text x="98.9844%" y="1279.50"></text></g><g><title>leveldb::WriteBatch::Iterate (40 samples, 0.64%)</title><rect x="98.8145%" y="1253" width="0.6408%" height="15" fill="rgb(241,127,29)" fg:x="6168" fg:w="40"/><text x="99.0645%" y="1263.50"></text></g><g><title>leveldb::MemTable::Add (40 samples, 0.64%)</title><rect x="98.8145%" y="1237" width="0.6408%" height="15" fill="rgb(241,33,26)" fg:x="6168" fg:w="40"/><text x="99.0645%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (33 samples, 0.53%)</title><rect x="98.9266%" y="1221" width="0.5287%" height="15" fill="rgb(220,106,21)" fg:x="6175" fg:w="33"/><text x="99.1766%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (25 samples, 0.40%)</title><rect x="99.0548%" y="1205" width="0.4005%" height="15" fill="rgb(225,125,35)" fg:x="6183" fg:w="25"/><text x="99.3048%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="99.4393%" y="1189" width="0.0160%" height="15" fill="rgb(248,80,22)" fg:x="6207" fg:w="1"/><text x="99.6893%" y="1199.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="99.4393%" y="1173" width="0.0160%" height="15" fill="rgb(231,117,39)" fg:x="6207" fg:w="1"/><text x="99.6893%" y="1183.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="99.4393%" y="1157" width="0.0160%" height="15" fill="rgb(239,183,16)" fg:x="6207" fg:w="1"/><text x="99.6893%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4393%" y="1141" width="0.0160%" height="15" fill="rgb(221,61,19)" fg:x="6207" fg:w="1"/><text x="99.6893%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4393%" y="1125" width="0.0160%" height="15" fill="rgb(239,196,44)" fg:x="6207" fg:w="1"/><text x="99.6893%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4393%" y="1109" width="0.0160%" height="15" fill="rgb(206,113,19)" fg:x="6207" fg:w="1"/><text x="99.6893%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4393%" y="1093" width="0.0160%" height="15" fill="rgb(245,114,12)" fg:x="6207" fg:w="1"/><text x="99.6893%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4393%" y="1077" width="0.0160%" height="15" fill="rgb(247,89,39)" fg:x="6207" fg:w="1"/><text x="99.6893%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4393%" y="1061" width="0.0160%" height="15" fill="rgb(213,85,14)" fg:x="6207" fg:w="1"/><text x="99.6893%" y="1071.50"></text></g><g><title>leveldb::WriteBatchInternal::SetContents (3 samples, 0.05%)</title><rect x="99.4553%" y="1285" width="0.0481%" height="15" fill="rgb(249,206,33)" fg:x="6208" fg:w="3"/><text x="99.7053%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (3 samples, 0.05%)</title><rect x="99.4553%" y="1269" width="0.0481%" height="15" fill="rgb(235,167,47)" fg:x="6208" fg:w="3"/><text x="99.7053%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (3 samples, 0.05%)</title><rect x="99.4553%" y="1253" width="0.0481%" height="15" fill="rgb(217,177,16)" fg:x="6208" fg:w="3"/><text x="99.7053%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.05%)</title><rect x="99.4553%" y="1237" width="0.0481%" height="15" fill="rgb(250,228,29)" fg:x="6208" fg:w="3"/><text x="99.7053%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.4553%" y="1221" width="0.0481%" height="15" fill="rgb(216,195,42)" fg:x="6208" fg:w="3"/><text x="99.7053%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.4553%" y="1205" width="0.0481%" height="15" fill="rgb(232,192,32)" fg:x="6208" fg:w="3"/><text x="99.7053%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.05%)</title><rect x="99.4553%" y="1189" width="0.0481%" height="15" fill="rgb(211,8,47)" fg:x="6208" fg:w="3"/><text x="99.7053%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="99.4553%" y="1173" width="0.0481%" height="15" fill="rgb(251,201,9)" fg:x="6208" fg:w="3"/><text x="99.7053%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.4873%" y="1157" width="0.0160%" height="15" fill="rgb(206,185,47)" fg:x="6210" fg:w="1"/><text x="99.7373%" y="1167.50"></text></g><g><title>leveldb::log::Reader::ReadPhysicalRecord (2 samples, 0.03%)</title><rect x="99.5034%" y="1269" width="0.0320%" height="15" fill="rgb(245,54,32)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1279.50"></text></g><g><title>Read (2 samples, 0.03%)</title><rect x="99.5034%" y="1253" width="0.0320%" height="15" fill="rgb(208,1,8)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixSequentialFile::Read (2 samples, 0.03%)</title><rect x="99.5034%" y="1237" width="0.0320%" height="15" fill="rgb(228,57,24)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1247.50"></text></g><g><title>read (2 samples, 0.03%)</title><rect x="99.5034%" y="1221" width="0.0320%" height="15" fill="rgb(251,24,8)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5034%" y="1205" width="0.0320%" height="15" fill="rgb(236,196,50)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5034%" y="1189" width="0.0320%" height="15" fill="rgb(246,222,29)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5034%" y="1173" width="0.0320%" height="15" fill="rgb(211,34,40)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5034%" y="1157" width="0.0320%" height="15" fill="rgb(210,66,51)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5034%" y="1141" width="0.0320%" height="15" fill="rgb(250,56,43)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5034%" y="1125" width="0.0320%" height="15" fill="rgb(240,111,50)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5034%" y="1109" width="0.0320%" height="15" fill="rgb(209,117,13)" fg:x="6211" fg:w="2"/><text x="99.7534%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5194%" y="1093" width="0.0160%" height="15" fill="rgb(232,164,45)" fg:x="6212" fg:w="1"/><text x="99.7694%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.05%)</title><rect x="99.5354%" y="1237" width="0.0481%" height="15" fill="rgb(205,69,32)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.5354%" y="1221" width="0.0481%" height="15" fill="rgb(240,147,45)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.5354%" y="1205" width="0.0481%" height="15" fill="rgb(221,94,48)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.05%)</title><rect x="99.5354%" y="1189" width="0.0481%" height="15" fill="rgb(249,209,17)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="99.5354%" y="1173" width="0.0481%" height="15" fill="rgb(228,57,28)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5354%" y="1157" width="0.0481%" height="15" fill="rgb(250,133,26)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5354%" y="1141" width="0.0481%" height="15" fill="rgb(254,15,16)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5354%" y="1125" width="0.0481%" height="15" fill="rgb(209,147,42)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5354%" y="1109" width="0.0481%" height="15" fill="rgb(208,5,29)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5354%" y="1093" width="0.0481%" height="15" fill="rgb(250,73,31)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5354%" y="1077" width="0.0481%" height="15" fill="rgb(238,45,10)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5354%" y="1061" width="0.0481%" height="15" fill="rgb(214,104,5)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5354%" y="1045" width="0.0481%" height="15" fill="rgb(242,217,19)" fg:x="6213" fg:w="3"/><text x="99.7854%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5514%" y="1029" width="0.0320%" height="15" fill="rgb(246,113,27)" fg:x="6214" fg:w="2"/><text x="99.8014%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5514%" y="1013" width="0.0320%" height="15" fill="rgb(221,34,27)" fg:x="6214" fg:w="2"/><text x="99.8014%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5674%" y="997" width="0.0160%" height="15" fill="rgb(246,109,6)" fg:x="6215" fg:w="1"/><text x="99.8174%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5674%" y="981" width="0.0160%" height="15" fill="rgb(217,12,25)" fg:x="6215" fg:w="1"/><text x="99.8174%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5674%" y="965" width="0.0160%" height="15" fill="rgb(250,195,5)" fg:x="6215" fg:w="1"/><text x="99.8174%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5674%" y="949" width="0.0160%" height="15" fill="rgb(244,140,45)" fg:x="6215" fg:w="1"/><text x="99.8174%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5674%" y="933" width="0.0160%" height="15" fill="rgb(230,64,14)" fg:x="6215" fg:w="1"/><text x="99.8174%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5674%" y="917" width="0.0160%" height="15" fill="rgb(206,27,27)" fg:x="6215" fg:w="1"/><text x="99.8174%" y="927.50"></text></g><g><title>CompleteChainstateInitialization (76 samples, 1.22%)</title><rect x="98.4140%" y="1397" width="1.2176%" height="15" fill="rgb(230,14,50)" fg:x="6143" fg:w="76"/><text x="98.6640%" y="1407.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (76 samples, 1.22%)</title><rect x="98.4140%" y="1381" width="1.2176%" height="15" fill="rgb(237,172,14)" fg:x="6143" fg:w="76"/><text x="98.6640%" y="1391.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (76 samples, 1.22%)</title><rect x="98.4140%" y="1365" width="1.2176%" height="15" fill="rgb(209,25,21)" fg:x="6143" fg:w="76"/><text x="98.6640%" y="1375.50"></text></g><g><title>CDBWrapper::CDBWrapper (76 samples, 1.22%)</title><rect x="98.4140%" y="1349" width="1.2176%" height="15" fill="rgb(248,148,22)" fg:x="6143" fg:w="76"/><text x="98.6640%" y="1359.50"></text></g><g><title>leveldb::DB::Open (76 samples, 1.22%)</title><rect x="98.4140%" y="1333" width="1.2176%" height="15" fill="rgb(234,100,22)" fg:x="6143" fg:w="76"/><text x="98.6640%" y="1343.50"></text></g><g><title>leveldb::DBImpl::Recover (76 samples, 1.22%)</title><rect x="98.4140%" y="1317" width="1.2176%" height="15" fill="rgb(210,20,30)" fg:x="6143" fg:w="76"/><text x="98.6640%" y="1327.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (76 samples, 1.22%)</title><rect x="98.4140%" y="1301" width="1.2176%" height="15" fill="rgb(232,58,0)" fg:x="6143" fg:w="76"/><text x="98.6640%" y="1311.50"></text></g><g><title>leveldb::log::Reader::ReadRecord (8 samples, 0.13%)</title><rect x="99.5034%" y="1285" width="0.1282%" height="15" fill="rgb(221,68,13)" fg:x="6211" fg:w="8"/><text x="99.7534%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (6 samples, 0.10%)</title><rect x="99.5354%" y="1269" width="0.0961%" height="15" fill="rgb(231,194,11)" fg:x="6213" fg:w="6"/><text x="99.7854%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (6 samples, 0.10%)</title><rect x="99.5354%" y="1253" width="0.0961%" height="15" fill="rgb(235,51,41)" fg:x="6213" fg:w="6"/><text x="99.7854%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.5835%" y="1237" width="0.0481%" height="15" fill="rgb(240,50,32)" fg:x="6216" fg:w="3"/><text x="99.8335%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.5835%" y="1221" width="0.0481%" height="15" fill="rgb(240,185,36)" fg:x="6216" fg:w="3"/><text x="99.8335%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.05%)</title><rect x="99.5835%" y="1205" width="0.0481%" height="15" fill="rgb(211,168,15)" fg:x="6216" fg:w="3"/><text x="99.8335%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="99.5835%" y="1189" width="0.0481%" height="15" fill="rgb(221,70,0)" fg:x="6216" fg:w="3"/><text x="99.8335%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5835%" y="1173" width="0.0481%" height="15" fill="rgb(205,21,33)" fg:x="6216" fg:w="3"/><text x="99.8335%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5835%" y="1157" width="0.0481%" height="15" fill="rgb(225,106,10)" fg:x="6216" fg:w="3"/><text x="99.8335%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5835%" y="1141" width="0.0481%" height="15" fill="rgb(236,200,50)" fg:x="6216" fg:w="3"/><text x="99.8335%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5835%" y="1125" width="0.0481%" height="15" fill="rgb(249,93,23)" fg:x="6216" fg:w="3"/><text x="99.8335%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5835%" y="1109" width="0.0481%" height="15" fill="rgb(244,115,35)" fg:x="6216" fg:w="3"/><text x="99.8335%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5995%" y="1093" width="0.0320%" height="15" fill="rgb(231,129,47)" fg:x="6217" fg:w="2"/><text x="99.8495%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5995%" y="1077" width="0.0320%" height="15" fill="rgb(225,160,50)" fg:x="6217" fg:w="2"/><text x="99.8495%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5995%" y="1061" width="0.0320%" height="15" fill="rgb(218,135,23)" fg:x="6217" fg:w="2"/><text x="99.8495%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.5995%" y="1045" width="0.0320%" height="15" fill="rgb(227,119,14)" fg:x="6217" fg:w="2"/><text x="99.8495%" y="1055.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="99.6315%" y="1301" width="0.0160%" height="15" fill="rgb(242,138,13)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="99.6315%" y="1285" width="0.0160%" height="15" fill="rgb(215,11,16)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1295.50"></text></g><g><title>SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="99.6315%" y="1269" width="0.0160%" height="15" fill="rgb(234,170,50)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="99.6315%" y="1253" width="0.0160%" height="15" fill="rgb(233,34,20)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1 samples, 0.02%)</title><rect x="99.6315%" y="1237" width="0.0160%" height="15" fill="rgb(237,100,45)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1247.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="99.6315%" y="1221" width="0.0160%" height="15" fill="rgb(231,184,36)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1231.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.02%)</title><rect x="99.6315%" y="1205" width="0.0160%" height="15" fill="rgb(252,93,2)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1215.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="99.6315%" y="1189" width="0.0160%" height="15" fill="rgb(248,176,47)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1199.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="99.6315%" y="1173" width="0.0160%" height="15" fill="rgb(249,125,23)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1183.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="99.6315%" y="1157" width="0.0160%" height="15" fill="rgb(239,67,42)" fg:x="6219" fg:w="1"/><text x="99.8815%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (2 samples, 0.03%)</title><rect x="99.6315%" y="1317" width="0.0320%" height="15" fill="rgb(244,162,4)" fg:x="6219" fg:w="2"/><text x="99.8815%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="99.6475%" y="1301" width="0.0160%" height="15" fill="rgb(214,150,38)" fg:x="6220" fg:w="1"/><text x="99.8975%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="99.6475%" y="1285" width="0.0160%" height="15" fill="rgb(228,211,28)" fg:x="6220" fg:w="1"/><text x="99.8975%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="99.6475%" y="1269" width="0.0160%" height="15" fill="rgb(212,98,48)" fg:x="6220" fg:w="1"/><text x="99.8975%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="99.6475%" y="1253" width="0.0160%" height="15" fill="rgb(213,45,13)" fg:x="6220" fg:w="1"/><text x="99.8975%" y="1263.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="99.6636%" y="1189" width="0.0160%" height="15" fill="rgb(218,35,29)" fg:x="6221" fg:w="1"/><text x="99.9136%" y="1199.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="99.6636%" y="1173" width="0.0160%" height="15" fill="rgb(244,13,3)" fg:x="6221" fg:w="1"/><text x="99.9136%" y="1183.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="99.6636%" y="1157" width="0.0160%" height="15" fill="rgb(235,170,19)" fg:x="6221" fg:w="1"/><text x="99.9136%" y="1167.50"></text></g><g><title>main (83 samples, 1.33%)</title><rect x="98.4140%" y="1509" width="1.3297%" height="15" fill="rgb(233,193,43)" fg:x="6143" fg:w="83"/><text x="98.6640%" y="1519.50"></text></g><g><title>main (83 samples, 1.33%)</title><rect x="98.4140%" y="1493" width="1.3297%" height="15" fill="rgb(228,223,20)" fg:x="6143" fg:w="83"/><text x="98.6640%" y="1503.50"></text></g><g><title>AppInitMain (83 samples, 1.33%)</title><rect x="98.4140%" y="1477" width="1.3297%" height="15" fill="rgb(208,85,54)" fg:x="6143" fg:w="83"/><text x="98.6640%" y="1487.50"></text></g><g><title>InitAndLoadChainstate (83 samples, 1.33%)</title><rect x="98.4140%" y="1461" width="1.3297%" height="15" fill="rgb(254,14,45)" fg:x="6143" fg:w="83"/><text x="98.6640%" y="1471.50"></text></g><g><title>operator (83 samples, 1.33%)</title><rect x="98.4140%" y="1445" width="1.3297%" height="15" fill="rgb(247,99,29)" fg:x="6143" fg:w="83"/><text x="98.6640%" y="1455.50"></text></g><g><title>InitAndLoadChainstate (83 samples, 1.33%)</title><rect x="98.4140%" y="1429" width="1.3297%" height="15" fill="rgb(225,180,54)" fg:x="6143" fg:w="83"/><text x="98.6640%" y="1439.50"></text></g><g><title>node::LoadChainstate (83 samples, 1.33%)</title><rect x="98.4140%" y="1413" width="1.3297%" height="15" fill="rgb(239,88,43)" fg:x="6143" fg:w="83"/><text x="98.6640%" y="1423.50"></text></g><g><title>node::CompleteChainstateInitialization (7 samples, 0.11%)</title><rect x="99.6315%" y="1397" width="0.1121%" height="15" fill="rgb(209,47,11)" fg:x="6219" fg:w="7"/><text x="99.8815%" y="1407.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (7 samples, 0.11%)</title><rect x="99.6315%" y="1381" width="0.1121%" height="15" fill="rgb(219,179,23)" fg:x="6219" fg:w="7"/><text x="99.8815%" y="1391.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (7 samples, 0.11%)</title><rect x="99.6315%" y="1365" width="0.1121%" height="15" fill="rgb(213,183,19)" fg:x="6219" fg:w="7"/><text x="99.8815%" y="1375.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (7 samples, 0.11%)</title><rect x="99.6315%" y="1349" width="0.1121%" height="15" fill="rgb(210,11,9)" fg:x="6219" fg:w="7"/><text x="99.8815%" y="1359.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (7 samples, 0.11%)</title><rect x="99.6315%" y="1333" width="0.1121%" height="15" fill="rgb(239,194,16)" fg:x="6219" fg:w="7"/><text x="99.8815%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (5 samples, 0.08%)</title><rect x="99.6636%" y="1317" width="0.0801%" height="15" fill="rgb(246,23,50)" fg:x="6221" fg:w="5"/><text x="99.9136%" y="1327.50"></text></g><g><title>Next (5 samples, 0.08%)</title><rect x="99.6636%" y="1301" width="0.0801%" height="15" fill="rgb(245,10,41)" fg:x="6221" fg:w="5"/><text x="99.9136%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (5 samples, 0.08%)</title><rect x="99.6636%" y="1285" width="0.0801%" height="15" fill="rgb(228,43,24)" fg:x="6221" fg:w="5"/><text x="99.9136%" y="1295.50"></text></g><g><title>SkipEmptyDataBlocksForward (5 samples, 0.08%)</title><rect x="99.6636%" y="1269" width="0.0801%" height="15" fill="rgb(220,151,0)" fg:x="6221" fg:w="5"/><text x="99.9136%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (5 samples, 0.08%)</title><rect x="99.6636%" y="1253" width="0.0801%" height="15" fill="rgb(232,219,10)" fg:x="6221" fg:w="5"/><text x="99.9136%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (5 samples, 0.08%)</title><rect x="99.6636%" y="1237" width="0.0801%" height="15" fill="rgb(227,217,48)" fg:x="6221" fg:w="5"/><text x="99.9136%" y="1247.50"></text></g><g><title>leveldb::Table::BlockReader (5 samples, 0.08%)</title><rect x="99.6636%" y="1221" width="0.0801%" height="15" fill="rgb(210,66,35)" fg:x="6221" fg:w="5"/><text x="99.9136%" y="1231.50"></text></g><g><title>leveldb::ReadBlock (5 samples, 0.08%)</title><rect x="99.6636%" y="1205" width="0.0801%" height="15" fill="rgb(254,6,7)" fg:x="6221" fg:w="5"/><text x="99.9136%" y="1215.50"></text></g><g><title>operator new (4 samples, 0.06%)</title><rect x="99.6796%" y="1189" width="0.0641%" height="15" fill="rgb(235,222,42)" fg:x="6222" fg:w="4"/><text x="99.9296%" y="1199.50"></text></g><g><title>malloc (4 samples, 0.06%)</title><rect x="99.6796%" y="1173" width="0.0641%" height="15" fill="rgb(245,126,5)" fg:x="6222" fg:w="4"/><text x="99.9296%" y="1183.50"></text></g><g><title>_int_malloc (4 samples, 0.06%)</title><rect x="99.6796%" y="1157" width="0.0641%" height="15" fill="rgb(215,73,17)" fg:x="6222" fg:w="4"/><text x="99.9296%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.6796%" y="1141" width="0.0641%" height="15" fill="rgb(219,198,52)" fg:x="6222" fg:w="4"/><text x="99.9296%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.6796%" y="1125" width="0.0641%" height="15" fill="rgb(217,159,18)" fg:x="6222" fg:w="4"/><text x="99.9296%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.6796%" y="1109" width="0.0641%" height="15" fill="rgb(212,177,18)" fg:x="6222" fg:w="4"/><text x="99.9296%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.6796%" y="1093" width="0.0641%" height="15" fill="rgb(241,10,11)" fg:x="6222" fg:w="4"/><text x="99.9296%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6956%" y="1077" width="0.0481%" height="15" fill="rgb(232,114,35)" fg:x="6223" fg:w="3"/><text x="99.9456%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6956%" y="1061" width="0.0481%" height="15" fill="rgb(238,222,8)" fg:x="6223" fg:w="3"/><text x="99.9456%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6956%" y="1045" width="0.0481%" height="15" fill="rgb(251,153,44)" fg:x="6223" fg:w="3"/><text x="99.9456%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.7116%" y="1029" width="0.0320%" height="15" fill="rgb(210,140,51)" fg:x="6224" fg:w="2"/><text x="99.9616%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7277%" y="1013" width="0.0160%" height="15" fill="rgb(222,63,0)" fg:x="6225" fg:w="1"/><text x="99.9777%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7277%" y="997" width="0.0160%" height="15" fill="rgb(240,18,40)" fg:x="6225" fg:w="1"/><text x="99.9777%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7277%" y="981" width="0.0160%" height="15" fill="rgb(237,88,16)" fg:x="6225" fg:w="1"/><text x="99.9777%" y="991.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.10%)</title><rect x="99.7437%" y="1509" width="0.0961%" height="15" fill="rgb(251,117,13)" fg:x="6226" fg:w="6"/><text x="99.9937%" y="1519.50"></text></g><g><title>bitcoind-head (1,429 samples, 22.89%)</title><rect x="76.9625%" y="1525" width="22.8933%" height="15" fill="rgb(251,228,8)" fg:x="4804" fg:w="1429"/><text x="77.2125%" y="1535.50">bitcoind-head</text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8398%" y="1509" width="0.0160%" height="15" fill="rgb(205,107,49)" fg:x="6232" fg:w="1"/><text x="100.0898%" y="1519.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8398%" y="1493" width="0.0160%" height="15" fill="rgb(238,72,41)" fg:x="6232" fg:w="1"/><text x="100.0898%" y="1503.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8398%" y="1477" width="0.0160%" height="15" fill="rgb(248,183,52)" fg:x="6232" fg:w="1"/><text x="100.0898%" y="1487.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="99.8398%" y="1461" width="0.0160%" height="15" fill="rgb(215,58,20)" fg:x="6232" fg:w="1"/><text x="100.0898%" y="1471.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="99.8398%" y="1445" width="0.0160%" height="15" fill="rgb(209,49,13)" fg:x="6232" fg:w="1"/><text x="100.0898%" y="1455.50"></text></g><g><title>perf-exec (4 samples, 0.06%)</title><rect x="99.8558%" y="1525" width="0.0641%" height="15" fill="rgb(208,113,17)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1535.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1509" width="0.0641%" height="15" fill="rgb(208,14,22)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1519.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1493" width="0.0641%" height="15" fill="rgb(222,95,2)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1477" width="0.0641%" height="15" fill="rgb(253,180,37)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1487.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1461" width="0.0641%" height="15" fill="rgb(250,81,33)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1471.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1445" width="0.0641%" height="15" fill="rgb(251,151,41)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1429" width="0.0641%" height="15" fill="rgb(210,135,17)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1413" width="0.0641%" height="15" fill="rgb(239,21,29)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1397" width="0.0641%" height="15" fill="rgb(231,215,16)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1381" width="0.0641%" height="15" fill="rgb(239,151,54)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.8558%" y="1365" width="0.0641%" height="15" fill="rgb(222,122,38)" fg:x="6233" fg:w="4"/><text x="100.1058%" y="1375.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8718%" y="1349" width="0.0481%" height="15" fill="rgb(243,128,1)" fg:x="6234" fg:w="3"/><text x="100.1218%" y="1359.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8718%" y="1333" width="0.0481%" height="15" fill="rgb(225,74,21)" fg:x="6234" fg:w="3"/><text x="100.1218%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8718%" y="1317" width="0.0481%" height="15" fill="rgb(216,210,10)" fg:x="6234" fg:w="3"/><text x="100.1218%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8718%" y="1301" width="0.0481%" height="15" fill="rgb(228,76,19)" fg:x="6234" fg:w="3"/><text x="100.1218%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8718%" y="1285" width="0.0481%" height="15" fill="rgb(236,80,34)" fg:x="6234" fg:w="3"/><text x="100.1218%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8718%" y="1269" width="0.0481%" height="15" fill="rgb(225,173,23)" fg:x="6234" fg:w="3"/><text x="100.1218%" y="1279.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (4 samples, 0.06%)</title><rect x="99.9199%" y="1493" width="0.0641%" height="15" fill="rgb(253,38,1)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1503.50"></text></g><g><title>__libc_start_call_main (4 samples, 0.06%)</title><rect x="99.9199%" y="1477" width="0.0641%" height="15" fill="rgb(206,155,35)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1487.50"></text></g><g><title>main (4 samples, 0.06%)</title><rect x="99.9199%" y="1461" width="0.0641%" height="15" fill="rgb(254,27,53)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1471.50"></text></g><g><title>do_taskset (4 samples, 0.06%)</title><rect x="99.9199%" y="1445" width="0.0641%" height="15" fill="rgb(225,52,41)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1455.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (4 samples, 0.06%)</title><rect x="99.9199%" y="1429" width="0.0641%" height="15" fill="rgb(244,53,18)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1413" width="0.0641%" height="15" fill="rgb(254,206,48)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1397" width="0.0641%" height="15" fill="rgb(236,182,23)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1381" width="0.0641%" height="15" fill="rgb(236,191,37)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1365" width="0.0641%" height="15" fill="rgb(245,53,8)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1349" width="0.0641%" height="15" fill="rgb(245,147,9)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1333" width="0.0641%" height="15" fill="rgb(218,24,48)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1317" width="0.0641%" height="15" fill="rgb(254,23,9)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1301" width="0.0641%" height="15" fill="rgb(244,105,9)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1285" width="0.0641%" height="15" fill="rgb(212,142,22)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1269" width="0.0641%" height="15" fill="rgb(221,114,49)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1253" width="0.0641%" height="15" fill="rgb(223,210,25)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1237" width="0.0641%" height="15" fill="rgb(235,162,44)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.06%)</title><rect x="99.9199%" y="1221" width="0.0641%" height="15" fill="rgb(237,65,45)" fg:x="6237" fg:w="4"/><text x="100.1699%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9359%" y="1205" width="0.0481%" height="15" fill="rgb(208,79,9)" fg:x="6238" fg:w="3"/><text x="100.1859%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9359%" y="1189" width="0.0481%" height="15" fill="rgb(215,228,8)" fg:x="6238" fg:w="3"/><text x="100.1859%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9359%" y="1173" width="0.0481%" height="15" fill="rgb(205,185,17)" fg:x="6238" fg:w="3"/><text x="100.1859%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9359%" y="1157" width="0.0481%" height="15" fill="rgb(213,62,36)" fg:x="6238" fg:w="3"/><text x="100.1859%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9359%" y="1141" width="0.0481%" height="15" fill="rgb(209,34,9)" fg:x="6238" fg:w="3"/><text x="100.1859%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9359%" y="1125" width="0.0481%" height="15" fill="rgb(246,151,27)" fg:x="6238" fg:w="3"/><text x="100.1859%" y="1135.50"></text></g><g><title>all (6,242 samples, 100%)</title><rect x="0.0000%" y="1541" width="100.0000%" height="15" fill="rgb(218,206,3)" fg:x="0" fg:w="6242"/><text x="0.2500%" y="1551.50"></text></g><g><title>taskset (5 samples, 0.08%)</title><rect x="99.9199%" y="1525" width="0.0801%" height="15" fill="rgb(242,202,1)" fg:x="6237" fg:w="5"/><text x="100.1699%" y="1535.50"></text></g><g><title>_start (5 samples, 0.08%)</title><rect x="99.9199%" y="1509" width="0.0801%" height="15" fill="rgb(227,185,16)" fg:x="6237" fg:w="5"/><text x="100.1699%" y="1519.50"></text></g><g><title>_dl_start (1 samples, 0.02%)</title><rect x="99.9840%" y="1493" width="0.0160%" height="15" fill="rgb(241,1,14)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1503.50"></text></g><g><title>_dl_start_final (1 samples, 0.02%)</title><rect x="99.9840%" y="1477" width="0.0160%" height="15" fill="rgb(212,113,25)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1487.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.02%)</title><rect x="99.9840%" y="1461" width="0.0160%" height="15" fill="rgb(247,37,43)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1471.50"></text></g><g><title>dl_main (1 samples, 0.02%)</title><rect x="99.9840%" y="1445" width="0.0160%" height="15" fill="rgb(226,54,8)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1455.50"></text></g><g><title>init_tls (1 samples, 0.02%)</title><rect x="99.9840%" y="1429" width="0.0160%" height="15" fill="rgb(251,205,25)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1439.50"></text></g><g><title>_dl_allocate_tls_storage (1 samples, 0.02%)</title><rect x="99.9840%" y="1413" width="0.0160%" height="15" fill="rgb(246,87,35)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1423.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.9840%" y="1397" width="0.0160%" height="15" fill="rgb(251,145,46)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1407.50"></text></g><g><title>__minimal_malloc (1 samples, 0.02%)</title><rect x="99.9840%" y="1381" width="0.0160%" height="15" fill="rgb(210,210,33)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1391.50"></text></g><g><title>__mmap64 (1 samples, 0.02%)</title><rect x="99.9840%" y="1365" width="0.0160%" height="15" fill="rgb(221,151,11)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1375.50"></text></g><g><title>__mmap64 (1 samples, 0.02%)</title><rect x="99.9840%" y="1349" width="0.0160%" height="15" fill="rgb(208,160,28)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1333" width="0.0160%" height="15" fill="rgb(243,69,29)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1317" width="0.0160%" height="15" fill="rgb(224,144,4)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1301" width="0.0160%" height="15" fill="rgb(211,140,38)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1285" width="0.0160%" height="15" fill="rgb(252,189,15)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1269" width="0.0160%" height="15" fill="rgb(251,175,23)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1253" width="0.0160%" height="15" fill="rgb(212,184,11)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1237" width="0.0160%" height="15" fill="rgb(217,205,6)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1221" width="0.0160%" height="15" fill="rgb(235,45,45)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1205" width="0.0160%" height="15" fill="rgb(211,157,53)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9840%" y="1189" width="0.0160%" height="15" fill="rgb(212,13,8)" fg:x="6241" fg:w="1"/><text x="100.2340%" y="1199.50"></text></g></svg></svg>