name: Publish Results
on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      actions: read
      contents: read
    env:
      RESULT_FILE: "results.json"
      GITHUB_CONTEXT_FILE: "github.json"
      RUN_CONTEXT_FILE: "runner.json"
      FLAMEGRAPH_FILE: "flamegraph.html"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const run_id = context.payload.workflow_run.id;

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.name,
              run_id: run_id
            });

            const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return ["result", "run-metadata", "flamegraph"].includes(artifact.name)
            });

            for (const artifact of matchArtifact) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.name,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });

              const fs = require('fs');
              fs.writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
            }

      - name: Unzip artifacts
        run: |
          for zip in *.zip
          do
            dirname="${zip%.zip}"
            mkdir -p "$dirname"
            unzip -d "$dirname" "$zip"
          done

      - name: Organize results
        id: organize
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const metadata = JSON.parse(fs.readFileSync(`run-metadata/${process.env.GITHUB_CONTEXT_FILE}`, 'utf8'));

            // Extract PR number and run ID
            const prNumber = metadata.event.pull_request?.number || 'main';
            const runId = metadata.run_id;

            // Create directory structure
            const resultDir = `results/pr-${prNumber}/${runId}`;
            fs.mkdirSync(resultDir, { recursive: true });

            // Move files to appropriate directory
            const filesToMove = [
              `result/${process.env.RESULT_FILE}`,
              `run-metadata/${process.env.GITHUB_CONTEXT_FILE}`,
              `run-metadata/${process.env.RUN_CONTEXT_FILE}`
            ];

            filesToMove.forEach(file => {
              if (fs.existsSync(file)) {
                const targetFile = `${resultDir}/${file.split('/').pop()}`;
                fs.copyFileSync(file, targetFile);
              }
            });

            if (fs.existsSync(`flamegraph/${process.env.FLAMEGRAPH_FILE}`)) {
              fs.copyFileSync(`flamegraph/${process.env.FLAMEGRAPH_FILE}`, `${resultDir}/${process.env.FLAMEGRAPH_FILE}`);
            }

            // Create index.html for this run
            const resultData = JSON.parse(fs.readFileSync(`result/${process.env.RESULT_FILE}`, 'utf8'));
            const indexHtml = `<!DOCTYPE html>
            <html>
              <head>
                <title>Benchmark Results</title>
                <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
              </head>
              <body class="bg-gray-100 p-8">
                <div class="max-w-4xl mx-auto">
                  <h1 class="text-3xl font-bold mb-8">Benchmark Results</h1>

                  <div class="bg-white rounded-lg shadow p-6 mb-8">
                    <h2 class="text-xl font-semibold mb-4">PR #${prNumber} - Run ${runId}</h2>
                    <div class="overflow-x-auto">
                      <table class="min-w-full table-auto">
                        <thead>
                          <tr class="bg-gray-50">
                            <th class="px-4 py-2">Command</th>
                            <th class="px-4 py-2">Mean (s)</th>
                            <th class="px-4 py-2">Std Dev</th>
                            <th class="px-4 py-2">User (s)</th>
                            <th class="px-4 py-2">System (s)</th>
                          </tr>
                        </thead>
                        <tbody>
                          ${resultData.results.map(result => `
                            <tr class="border-t">
                              <td class="px-4 py-2 font-mono text-sm">${result.command}</td>
                              <td class="px-4 py-2 text-right">${result.mean.toFixed(3)}</td>
                              <td class="px-4 py-2 text-right">${result.stddev?.toFixed(3) || 'N/A'}</td>
                              <td class="px-4 py-2 text-right">${result.user.toFixed(3)}</td>
                              <td class="px-4 py-2 text-right">${result.system.toFixed(3)}</td>
                            </tr>
                          `).join('')}
                        </tbody>
                      </table>
                    </div>
                  </div>

                  ${fs.existsSync(`flamegraph/${process.env.FLAMEGRAPH_FILE}`) ? `
                    <div class="bg-white rounded-lg shadow p-6">
                      <h2 class="text-xl font-semibold mb-4">Flamegraph</h2>
                      <iframe src="${process.env.FLAMEGRAPH_FILE}" width="100%" height="800px" frameborder="0"></iframe>
                    </div>
                  ` : ''}
                </div>
              </body>
            </html>`;

            fs.writeFileSync(`${resultDir}/index.html`, indexHtml);

            // Update main index.html
            const prs = fs.readdirSync('results')
              .filter(dir => dir.startsWith('pr-'))
              .map(dir => ({
                pr: dir.replace('pr-', ''),
                runs: fs.readdirSync(`results/${dir}`)
              }));

            const mainIndexHtml = `<!DOCTYPE html>
            <html>
              <head>
                <title>Bitcoin Benchmark Results</title>
                <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
              </head>
              <body class="bg-gray-100 p-8">
                <div class="max-w-4xl mx-auto">
                  <h1 class="text-3xl font-bold mb-8">Bitcoin Benchmark Results</h1>
                  <div class="bg-white rounded-lg shadow p-6">
                    <h2 class="text-xl font-semibold mb-4">Available Results</h2>
                    <ul class="space-y-2">
                      ${prs.map(({pr, runs}) => `
                        <li class="font-semibold">PR #${pr}
                          <ul class="ml-8 space-y-1">
                            ${runs.map(run => `
                              <li><a href="pr-${pr}/${run}/index.html" class="text-blue-600 hover:underline">Run ${run}</a></li>
                            `).join('')}
                          </ul>
                        </li>
                      `).join('')}
                    </ul>
                  </div>
                </div>
              </body>
            </html>`;

            fs.writeFileSync('results/index.html', mainIndexHtml);

            // Return the URL for the PR comment
            const resultUrl = `https://${context.repo.owner}.github.io/${context.repo.name}/results/pr-${prNumber}/${runId}/index.html`;
            core.setOutput('result-url', resultUrl);
            return resultUrl;

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: results

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  comment-pr:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      actions: read
    env:
      RESULT_FILE: "results.json"
      GITHUB_CONTEXT_FILE: "github.json"
      RUN_CONTEXT_FILE: "runner.json"
      FLAMEGRAPH_FILE: "flamegraph.html"
    steps:
      - name: Download metadata artifact
        uses: actions/github-script@v7
        with:
          script: |
            const run_id = context.payload.workflow_run.id;

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.name,
              run_id: run_id
            });

            const metadataArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "run-metadata"
            );

            if (metadataArtifact) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.name,
                artifact_id: metadataArtifact.id,
                archive_format: 'zip'
              });

              const fs = require('fs');
              fs.writeFileSync('metadata.zip', Buffer.from(download.data));
            }

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Extract metadata
            const exec = require('child_process').execSync;
            exec('unzip metadata.zip');

            const metadata = JSON.parse(fs.readFileSync('github.json', 'utf8'));
            const prNumber = metadata.event.pull_request?.number;

            if (prNumber) {
              const baseUrl = `https://${context.repo.owner}.github.io/${context.repo.name}`;
              const resultUrl = `${baseUrl}/results/pr-${prNumber}/${metadata.run_id}/index.html`;

              let comment = `📊 Benchmark results for this run are available at: ${resultUrl}`;

              if (fs.existsSync(`flamegraph/${process.env.FLAMEGRAPH_FILE}`)) {
                const flamegraphUrl = resultUrl.replace('index.html', process.env.FLAMEGRAPH_FILE);
                comment += `\n🔥 Flamegraph available at: ${flamegraphUrl}`;
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.name,
                issue_number: prNumber,
                body: comment
              });
            }
